["```js\nrequire 'sinatra'\nrequire 'json'\n\nget '/friendships/:username' do\n  content_type :json\n  {\n    'username': params[:username],\n    'friendships': [\n      'pichat:users:johndoe',\n      'pichat:users:janesmith',\n      'pichat:users:anotheruser'\n    ]\n  }.to_json\nend\n```", "```js\nGET /friendships/paulosman\n```", "```js\n{\n  \"username\": \"fdsa\",\n  \"friendships\": [\n    \"pichat:users:foobar\",\n    \"pichat:users:asomefdsa\"\n  ]\n}\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '1.5.9.RELEASE'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'\n}\n```", "```js\npackage com.packtpub.microservices.ch05.exceptions;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\n@ResponseStatus(HttpStatus.NOT_FOUND)\npublic class MessageNotFoundException extends Exception {\n    public MessageNotFoundException(String message) { super(message); }\n}\n```", "```js\npackage com.packtpub.microservices.ch05.message.exceptions;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\n@ResponseStatus(HttpStatus.FORBIDDEN)\npublic class MessageSendForbiddenException extends Exception {\n    public MessageSendForbiddenException(String message) { super(message); }\n}\n```", "```js\npackage com.packtpub.microservices.ch05.message.clients;\n\nimport com.packtpub.microservices.ch05.models.Friendships;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.util.List;\n\npublic class SocialGraphClient {\n    private String baseUrl;\n\n    public SocialGraphClient(String baseUrl) {\n        this.baseUrl = baseUrl;\n    }\n\n    public List<String> getFriendships(String username) {\n        String requestUrl = baseUrl + \"/friendships/\" + username;\n        RestTemplate template = new RestTemplate();\n        UserFriendships friendships = template.getForObject(requestUrl, UserFriendships.class);\n        return friendships.getFriendships();\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch05.models;\n\nimport java.util.List;\n\npublic class Friendships {\n    private String username;\n    private List<String> friendships;\n\n    public Friendships() {\n        this.friendships = new ArrayList<>();\n    }\n\n    public Friendships(String username) {\n        this.username = username;\n        this.friendships = new ArrayList<>();\n    }\n\n    public Friendships(String username, List<String> friendships) {\n        this.username = username;\n        this.friendships = friendships;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public List<String> getFriendships() {\n        return friendships;\n    }\n\n    public void setFriendships(List<String> friendships) {\n        this.friendships = friendships;\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch05.message.models;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\npublic class Message {\n    private String id;\n    private String sender;\n    private String recipient;\n    private String body;\n    @JsonProperty(\"attachment_uri\")\n    private String attachmentUri;\n\n    public Message() {}\n\n    public Message(String sender, String recipient, String body, String attachmentUri) {\n        this.sender = sender;\n        this.recipient = recipient;\n        this.body = body;\n        this.attachmentUri = attachmentUri;\n    }\n\n    public Message(String id, String sender, String recipient, String body, String attachmentUri) {\n        this.id = id;\n        this.sender = sender;\n        this.recipient = recipient;\n        this.body = body;\n        this.attachmentUri = attachmentUri;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getSender() {\n        return sender;\n    }\n\n    public void setSender(String sender) {\n        this.sender = sender;\n    }\n\n    public String getRecipient() {\n        return recipient;\n    }\n\n    public void setRecipient(String recipient) {\n        this.recipient = recipient;\n    }\n\n    public String getBody() {\n        return body;\n    }\n\n    public void setBody(String body) {\n        this.body = body;\n    }\n\n    public String getAttachmentUri() {\n        return attachmentUri;\n    }\n\n    public void setAttachmentUri(String attachmentUri) {\n        this.attachmentUri = attachmentUri;\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch05.message;\n\nimport com.packtpub.microservices.ch05.message.exceptions.MessageNotFoundException;\nimport com.packtpub.microservices.ch05.message.models.Message;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class MessageRepository {\n\n    private Map<String, Message> messages;\n\n    public MessageRepository() {\n        messages = new HashMap<>();\n    }\n\n    public Message save(Message message) {\n        UUID uuid = UUID.randomUUID();\n        Message saved = new Message(uuid.toString(), message.getSender(), message.getRecipient(),\n                message.getBody(), message.getAttachmentUri());\n        messages.put(uuid.toString(), saved);\n        return saved;\n    }\n\n    public Message get(String id) throws MessageNotFoundException {\n        if (messages.containsKey(id)) {\n            Message message = messages.get(id);\n            return message;\n        } else {\n            throw new MessageNotFoundException(\"Message \" + id + \" could not be found\");\n        }\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch05.message;\n\nimport com.packtpub.microservices.ch05.message.clients.SocialGraphClient;\nimport com.packtpub.microservices.ch05.message.exceptions.MessageNotFoundException;\nimport com.packtpub.microservices.ch05.message.exceptions.MessageSendForbiddenException;\nimport com.packtpub.microservices.ch05.message.models.Message;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\nimport java.net.URI;\nimport java.util.List;\n\n@RestController\npublic class MessageController {\n\n    @Autowired\n    private MessageRepository messagesStore;\n\n    @Autowired\n    private SocialGraphClient socialGraphClient;\n\n    @RequestMapping(path = \"/messages/{id}\", method = RequestMethod.GET, produces = \"application/json\")\n    public Message get(@PathVariable(\"id\") String id) throws MessageNotFoundException {\n        return messagesStore.get(id);\n    }\n\n    @RequestMapping(path = \"/messages\", method = RequestMethod.POST, produces = \"application/json\")\n    public ResponseEntity<Message> send(@RequestBody Message message) throws MessageSendForbiddenException {\n\n        List<String> friendships = socialGraphClient.getFriendships(message.getSender());\n        if (!friendships.contains(message.getRecipient())) {\n            throw new MessageSendForbiddenException(\"Must be friends to send message\");\n        }\n\n        Message saved = messagesStore.save(message);\n        URI location = ServletUriComponentsBuilder\n                .fromCurrentRequest().path(\"/{id}\")\n                .buildAndExpand(saved.getId()).toUri();\n        return ResponseEntity.created(location).build();\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch05.message;\n\nimport com.packtpub.microservices.ch05.message.clients.SocialGraphClient;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\n@SpringBootApplication\npublic class Application {\n    @Bean\n    public MessageRepository messageRepository() {\n        return new MessageRepository();\n    }\n\n    @Bean\n    public SocialGraphClient socialGraphClient() {\n        return new SocialGraphClient(\"http://localhost:4567\");\n    }\n\n```", "```js\n    public static void main(String[] args) {\n        SpringApplication.run(Main.class, args);\n    }\n}\n```", "```js\n...\ndependencies {\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n compile group: 'io.github.resilience4j', name: 'resilience4j-circuitbreaker', version: '0.11.0'\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'\n}\n...\n```", "```js\npackage com.packtpub.microservices.ch05.clients;\n\nimport com.packtpub.microservices.ch05.models.Friendships;\nimport io.github.resilience4j.circuitbreaker.CircuitBreaker;\nimport io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;\nimport io.vavr.CheckedFunction0;\nimport io.vavr.control.Try;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.util.List;\n\npublic class SocialGraphClient {\n    private String baseUrl;\n\n private CircuitBreaker circuitBreaker;\n\n    public SocialGraphClient(String baseUrl) {\n        this.baseUrl = baseUrl;\n        this.circuitBreaker = CircuitBreaker.ofDefaults(\"socialGraphClient\");\n    }\n\n    public List<String> getFriendships(String username) {\n\n        CheckedFunction0<Friendships> decoratedSupplier = CircuitBreaker.decorateCheckedSupplier(circuitBreaker, () -> {\n            String requestUrl = baseUrl + \"/friendships/\" + username;\n            RestTemplate template = new RestTemplate();\n            return template.getForObject(requestUrl, Friendships.class);\n        });\n\n        Try<Friendships> result = Try.of(decoratedSupplier); \n return result.getOrElse(new Friendships(username)).getFriendships();    }\n}\n```", "```js\nrequire 'sinatra'\n\nget '/' do\n  halt 503\nend\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\napply plugin: 'java'\napply plugin: 'application'\n\nmainClassName = 'com.packtpub.microservices.ch05.retryclient.Main'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'com.google.http-client', name: 'google-http-client', version: '1.23.0'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\npackage com.packtpub.microservices.ch05.retryclient;\n\nimport com.google.api.client.http.*;\nimport com.google.api.client.http.javanet.NetHttpTransport;\nimport com.google.api.client.util.ExponentialBackOff;\n\nimport java.io.IOException;\n\npublic class Main {\n\n    static final HttpTransport transport = new NetHttpTransport();\n\n    public static void main(String[] args) {\n        HttpRequestFactory factory = transport.createRequestFactory();\n        GenericUrl url = new GenericUrl(\"http://localhost:4567/\");\n\n        try {\n            HttpRequest request = factory.buildGetRequest(url);\n            HttpResponse response = request.execute();\n            System.out.println(\"Got a successful response: \" + response.getStatusCode());\n        } catch (HttpResponseException e) {\n            System.out.println(\"Got an unsuccessful response: \" + e.getStatusCode());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch05.retryclient;\n\nimport com.google.api.client.http.*;\nimport com.google.api.client.http.javanet.NetHttpTransport;\nimport com.google.api.client.util.ExponentialBackOff;\n\nimport java.io.IOException;\n\npublic class Main {\n\n    static final HttpTransport transport = new NetHttpTransport();\n\n    public static void main(String[] args) {\n        HttpRequestFactory factory = transport.createRequestFactory();\n        GenericUrl url = new GenericUrl(\"http://localhost:4567/\");\n\n        try {\n            HttpRequest request = factory.buildGetRequest(url);\n            ExponentialBackOff backoff = new ExponentialBackOff.Builder()\n .setInitialIntervalMillis(500)\n .setMaxElapsedTimeMillis(10000)\n .setMaxIntervalMillis(6000)\n .setMultiplier(1.5)\n .setRandomizationFactor(0.5)\n .build(); \n request.setUnsuccessfulResponseHandler(\n new HttpBackOffUnsuccessfulResponseHandler(backoff));\n            HttpResponse response = request.execute();\n            System.out.println(\"Got a successful response: \" + response.getStatusCode());\n        } catch (HttpResponseException e) {\n            System.out.println(\"Got an unsuccessful response: \" + e.getStatusCode());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```js\ngroup 'com.packtpub.microservices.ch05'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath(\"org.springframework.boot:spring-boot-gradle-plugin:2.0.0.RELEASE\")\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.0.0.RELEASE'\n```", "```js\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.0.0.RELEASE'\n    compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\npackage com.packtpub.microservices.ch05.userservice;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class Main {\n    public static void main(String[] args) {\n        SpringApplication.run(Main.class, args);\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch05.userservice.models;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport org.hibernate.annotations.GenericGenerator;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\n\n@Entity\npublic class User {\n\n    @Id\n    @GeneratedValue(generator = \"uuid\")\n    @GenericGenerator(name = \"uuid\", strategy = \"uuid2\")\n    private String id;\n\n    private String username;\n\n    @JsonProperty(\"full_name\")\n    private String fullName;\n\n    private String email;\n\n    public User() {}\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getFullName() {\n        return fullName;\n    }\n\n    public void setFullName(String fullName) {\n        this.fullName = fullName;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n}\n```", "```js\npackage com.packtpub.microservices.ch05.userservice.db;\n\nimport com.packtpub.microservices.ch05.userservice.models.User;\nimport org.springframework.data.repository.CrudRepository;\n\npublic interface UserRepository extends CrudRepository<User, String> {}\n```", "```js\npackage com.packtpub.microservices.ch05.userservice.controllers;\n\nimport com.packtpub.microservices.ch05.userservice.db.UserRepository;\nimport com.packtpub.microservices.ch05.userservice.models.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Optional;\n\n@RestController\npublic class UserController {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @RequestMapping(path = \"/users\", method = RequestMethod.POST, produces = \"application/json\")\n    public User create(@RequestBody User user) {\n        User savedUser = userRepository.save(user);\n        return savedUser;\n    }\n\n    @RequestMapping(path = \"/users/{id}\", method = RequestMethod.GET, produces = \"application/json\")\n    public ResponseEntity<User> getById(@PathVariable(\"id\") String id) {\n        Optional<User> user = userRepository.findById(id);\n\n        return user.map(u -> new ResponseEntity<>(u, HttpStatus.OK)).orElseGet(\n                () -> new ResponseEntity<>(HttpStatus.NOT_FOUND));\n    }\n}\n```", "```js\nspring.jpa.hibernate.ddl-auto=create\nspring.datasource.url=jdbc:mysql://localhost:3306/users?serverTimezone=UTC&&&useSSL=false\nspring.datasource.username=userservice\nspring.datasource.password=password\n```", "```js\nspring.jpa.hibernate.ddl-auto=create\nspring.datasource.url=jdbc:mysql://localhost:3306/users?serverTimezone=UTC&&&useSSL=false\nspring.datasource.username=userservice\nspring.datasource.password=password\nspring.cache.type=redis\nspring.redis.host=localhost\nspring.redis.port=6379\n```", "```js\npackage com.packtpub.microservices.ch05.userservice.db;\n\nimport com.packtpub.microservices.ch05.userservice.models.User;\nimport org.springframework.cache.annotation.CachePut;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\n\n@Repository\npublic interface UserRepository extends CrudRepository<User, String> {\n    @Override\n    @Cacheable(value = \"users\", key = \"#id\")\n Optional<User> findById(String id);\n\n    @Override\n    @CachePut(value = \"users\", key = \"#user.id\")\n User save(User user);\n}\n```", "```js\n$ brew install pyenv\n```", "```js\n$ pyenv install 3.4.2\n$ pyenv global 3.4.2\n```", "```js\n $ pip install -U chaostoolkit\n```", "```js\n{\n  \"title\": \"Kill MySQL process\",\n  \"description\": \"The user service uses a MySQL database to store user information. This experiment will test how the service behaves when the database is unavailable.\",\n  \"tags\": [\n    \"database\", \"mysql\"\n  ],\n  \"steady-state-hypothesis\": {\n    \"title\": \"Service responds when MySQL is running\",\n    \"probes\": [\n      {\n        \"type\": \"probe\",\n        \"name\": \"service-is-running\",\n        \"tolerance\": [200, 404],\n        \"provider\": {\n          \"type\": \"http\",\n          \"url\": \"http://localhost:8080/users/12345\"\n        }\n      }\n    ]\n  },\n  \"method\": [\n    {\n      \"name\": \"kill-mysql-process\",\n      \"type\": \"action\",\n      \"provider\": {\n        \"type\": \"process\",\n        \"path\": \"/usr/local/bin/mysql.server\",\n        \"arguments\": [\"stop\"],\n        \"timeout\": 10\n      }\n    }\n  ]\n}\n```", "```js\n$ chaos run\n```"]