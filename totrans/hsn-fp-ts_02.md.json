["```js\nfunction greetNamed(name: string): string {\n    return 'Hi! ${name}';\n}\n```", "```js\nlet greetUnnamed: (name: string) => string;\n\ngreetUnnamed = function(name: string): string {\n return 'Hi! ${name}';\n};\n```", "```js\nlet greetUnnamed: (name: string) => string = function(name: string): string {\n    return 'Hi! ${name}';\n};\n```", "```js\n// named function\nfunction greet(name?: string): string {\n  if(name){\n    return \"Hi! \" + name;\n  } else {\n    return \"Hi!\";\n  }\n}\n\n// anonymous function\nlet greet = function(name?: string): string {\n  if (name) {\n    return \"Hi! \" + name;\n  } else {\n    return \"Hi!\";\n  }\n}\n```", "```js\nlet greet = (name: string): string => {\n    if(name){\n      return \"Hi! \" + name;\n    }\n    else\n    {\n      return \"Hi\";\n    }\n};\n```", "```js\nlet greet: (name: string) => string = function(name: string): \nstring {\n    if (name) {\n      return \"Hi! \" + name;\n    } else {\n      return \"Hi!\";\n    }\n};\n```", "```js\nfunction add(\n    a: number,\n    b: number,\n    callback: (result: number) => void\n) {\n    callback(a + b);\n}\n```", "```js\nconsole.log(greetNamed(\"John\")); // OK\nconsole.log(greetUnnamed(\"John\")); // Error\n\nfunction greetNamed(name: string): string {\n    return 'Hi! ${name}';\n}\n\nlet greetUnnamed = function(name: string): string {\n    return 'Hi! ${name}';\n};\n```", "```js\nfunction greetWithoutTralingCommas(\n    name: string\n): string {\n    return 'Hi! ${name}';\n}\n```", "```js\nfunction updatedGreetWithoutTralingCommas(\n    name: string\n    surname: string, // Error\n): string {\n    return 'Hi! ${name} ${surname}';\n}\n```", "```js\nfunction greetWithTralingCommas(\n    name: string,\n): string {\n    return 'Hi! ${name}';\n}\n```", "```js\nfunction updatedGreetWithTralingCommas(\n    name: string,\n    surname: string,\n): string {\n    return 'Hi! ${name} ${surname}';\n}\n```", "```js\nfunction add(foo: number, bar: number, foobar: number): number {\n    return foo + bar + foobar;\n}\n```", "```js\nadd(); // Error, expected 3 arguments, but got 0.\nadd(2, 2); // Error, expected 3 arguments, but got 2.\nadd(2, 2, 2); // OK, returns 6\n```", "```js\nfunction add(foo: number, bar: number, foobar?: number): number {\n    let result = foo + bar;\n    if (foobar !== undefined) {\n        result += foobar;\n    }\n    return result;\n}\n```", "```js\nadd(); // Error, expected 2-3 arguments, but got 0.\nadd(2, 2); // OK, returns 4\nadd(2, 2, 2); // OK, returns 6\n```", "```js\nfunction add(foo: number, bar: number, foobar?: number): number {\n    return foo + bar + (foobar !== undefined ? foobar : 0);\n}\n```", "```js\nfunction add(foo: number, bar: number, foobar: number = 0): number {\n    return foo + bar + foobar;\n}\n```", "```js\nfunction add(foo, bar, foobar) {\n    if (foobar === void 0) { foobar = 0; }\n    return foo + bar + foobar;\n}\n```", "```js\nfunction test() {\n     var undefined = 2; // 2\n     console.log(undefined === 2); // true\n }\n```", "```js\nfunction add(foo: number, bar: number, foobar: number = 0): number {\n    return foo + bar + foobar;\n}\n```", "```js\nfunction add(...foo: number[]): number {\n    let result = 0;\n    for (let i = 0; i < foo.length; i++) {\n        result += foo[i];\n    }\n    return result;\n\n}\n```", "```js\nadd(); // 0\nadd(2); // 2\nadd(2, 2); // 4\nadd(2, 2, 2); // 6\nadd(2, 2, 2, 2); // 8\nadd(2, 2, 2, 2, 2); // 10\nadd(2, 2, 2, 2, 2, 2); // 12\n```", "```js\nfunction add() {\n    var foo = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        foo[_i - 0] = arguments[_i];\n    }\n    var result = 0;\n    for (var i = 0; i < foo.length; i++) {\n        result += foo[i];\n    }\n    return result;\n}\n```", "```js\nfunction add(foo: number[]): number {\n    let result = 0;\n    for (let i = 0; i < foo.length; i++) {\n        result += foo[i];\n    }\n    return result;\n}\n```", "```js\nadd(); // Error, expected 1 argument, but got 0.\nadd(2); // Error, '2' is not assignable to parameter of type 'number[]'.\nadd(2, 2); // Error, expected 1 argument, but got 2.\nadd(2, 2, 2); // Error, expected 1 argument, but got 3.\nadd([]); // returns 0\nadd([2]); // returns 2\nadd([2, 2]); // returns 4\nadd([2, 2, 2]); // returns 6\n```", "```js\nfunction test(name: string): string; // overloaded signature\nfunction test(age: number): string; // overloaded signature\nfunction test(single: boolean): string; // overloaded signature\nfunction test(value: (string|number|boolean)): string { // implementation signature\n    switch (typeof value) {\n        case \"string\":\n            return 'My name is ${value}.';\n        case \"number\":\n            return 'I'm ${value} years old.';\n        case \"boolean\":\n            return value ? \"I'm single.\" : \"I'm not single.\";\n        default:\n            throw new Error(\"Invalid Operation!\");\n    }\n}\n```", "```js\nfunction test(name: string): string;\nfunction test(age: number): number; // Error\nfunction test(single: boolean): string;\nfunction test(value: (string|number|boolean)): string {\n    switch (typeof value) {\n        case \"string\":\n            return 'My name is ${value}.';\n        case \"number\":\n            return 'I'm ${value} years old.';\n        case \"boolean\":\n            return value ? \"I'm single.\" : \"I'm not single.\";\n        default:\n            throw new Error(\"Invalid Operation!\");\n    }\n}\n```", "```js\ntest(\"Remo\"); // returns \"My name is Remo.\"\ntest(29); // returns \"I'm 29 years old.\";\ntest(false); // returns \"I'm not single.\";\ntest({ custom: \"custom\" }); // Error\n```", "```js\ninterface Document {\n    createElement(tagName: \"div\"): HTMLDivElement; // specialized\n    createElement(tagName: \"span\"): HTMLSpanElement; // specialized\n    createElement(tagName: \"canvas\"): HTMLCanvasElement; // specialized\n    createElement(tagName: string): HTMLElement; // non-specialized\n}\n```", "```js\nfunction foo(): void {\n    if (true) {\n        var bar: number = 0;\n    }\n    console.log(bar);\n}\n\nfoo(); // 0\n```", "```js\nfunction foo() {\n    var bar;\n    if (true) {\n        bar = 0;\n    }\n    console.log(bar);\n}\n\nfoo(); // 0\n```", "```js\nfunction foo(): void {\n    bar = 0;\n    var bar: number;\n    console.log(bar);\n}\n\nfoo(); // 0\n```", "```js\nfunction foo(): void {\n    var bar: number;\n    bar = 0;\n    console.log(bar);\n}\n\nfoo(); // 0\n```", "```js\nfunction foo(): void {\n    if (true) {\n        let bar: number = 0;\n        bar = 1;\n    }\n    console.log(bar); // Error\n}\n```", "```js\nfunction foo(): void {\n    if (true) {\n        const bar: number = 0;\n        bar = 1; // Error\n    }\n    alert(bar); // Error\n}\n```", "```js\nlet bar = 0; // global\n\n(function() {\n    let foo: number = 0; // In scope of this function\n    bar = 1; // Access global scope\n    console.log(bar); // 1\n    console.log(foo); // 0\n})();\n\nconsole.log(bar); // 1\nconsole.log(foo); // Error\n```", "```js\nlet bar = 0; // global\nlet topScope = window;\n\n(function(global: any) {\n    let foo: number = 0; // In scope of this function\n    console.log(global.bar); // 0\n    global.bar = 1; // Access global scope\n    console.log(global.bar); // 1\n    console.log(foo); // 0\n})(topScope);\n\nconsole.log(bar); // 1\nconsole.log(foo); // Error\n```", "```js\nclass Counter {\n    private _i: number;\n    public constructor() {\n        this._i = 0;\n    }\n    public get(): number {\n        return this._i;\n    }\n    public set(val: number): void {\n        this._i = val;\n    }\n    public increment(): void {\n        this._i++;\n    }\n}\n\nlet counter = new Counter();\nconsole.log(counter.get()); // 0\ncounter.set(2);\nconsole.log(counter.get()); // 2\ncounter.increment();\nconsole.log(counter.get()); // 3\nconsole.log(counter._i); // Error: Property '_i' is private\n```", "```js\nvar Counter = (function() {\n    function Counter() {\n        this._i = 0;\n    }\n\n    Counter.prototype.get = function() {\n        return this._i;\n    };\n\n    Counter.prototype.set = function(val) {\n        this._i = val;\n    };\n\n    Counter.prototype.increment = function() {\n        this._i++;\n    };\n\n    return Counter;\n})();\n```", "```js\nvar Counter = (function() {\n    var _i: number = 0;\n    function Counter() {\n        //\n    }\n    Counter.prototype.get = function() {\n        return _i;\n    };\n    Counter.prototype.set = function(val: number) {\n        _i = val;\n    };\n    Counter.prototype.increment = function() {\n        _i++;\n    };\n    return Counter;\n})();\n```", "```js\nlet counter = new Counter();\nconsole.log(counter.get()); // 0\ncounter.set(2);\nconsole.log(counter.get()); // 2\ncounter.increment();\nconsole.log(counter.get()); // 3\nconsole.log(counter._i); // undefined\n```", "```js\nlet name = \"remo\";\nlet surname = \"jansen\";\nlet html = '<h1>${name} ${surname}</h1>';\n```", "```js\nlet html = htmlEscape '<h1>${name} ${surname}</h1>';\n```", "```js\ntag(literals: TemplateStringsArray, ...placeholders: any[]): string;\n```", "```js\nfunction htmlEscape(literals: TemplateStringsArray, ...placeholders: any[]) {\n    let result = \"\";\n    for (let i = 0; i < placeholders.length; i++) {\n        result += literals[i];\n        result += placeholders[i]\n            .replace(/&/g, \"&amp;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/\"/g, \"'\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\");\n    }\n    result += literals[literals.length - 1];\n    return result;\n}\n```", "```js\nlet html = htmlEscape '<h1>${name} ${surname}</h1>';\n```"]