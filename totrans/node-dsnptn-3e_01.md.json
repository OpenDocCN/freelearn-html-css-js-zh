["```js\n// blocks the thread until the data is available\ndata = socket.read()\n// data is available\nprint(data) \n```", "```js\nresources = [socketA, socketB, fileA]\nwhile (!resources.isEmpty()) {\n  for (resource of resources) {\n    // try to read\n    data = resource.read()\n    if (data === NO_DATA_AVAILABLE) {\n      // there is no data to read at the moment\n      continue\n    }\n    if (data === RESOURCE_CLOSED) {\n      // the resource was closed, remove it from the list\n      resources.remove(i)\n    } else {\n      //some data was received, process it\n      consumeData(data)\n    }\n  }\n} \n```", "```js\nwatchedList.add(socketA, FOR_READ)                            // (1)\nwatchedList.add(fileB, FOR_READ)\nwhile (events = demultiplexer.watch(watchedList)) {           // (2)\n  // event loop\n  for (event of events) {                                     // (3)\n    // This read will never block and will always return data\n    data = event.resource.read()\n    if (data === RESOURCE_CLOSED) {\n      // the resource was closed, remove it from the watched list\n      demultiplexer.unwatch(event.resource)\n    } else {\n      // some actual data was received, process it\n      consumeData(data)\n    }\n  }\n} \n```"]