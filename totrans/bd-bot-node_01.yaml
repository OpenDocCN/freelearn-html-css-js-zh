- en: Chapter 1. The Rise of Bots – Getting the Message Across
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：机器人的兴起——传达信息
- en: Nowadays customers are demanding to communicate with brands, companies, and
    organizations as casually as they talk to their friends, and they expect an immediate
    response. Providing that level of service is quite impractical, if not rather
    logistically impossible to achieve for most organizations, without using some
    form of automation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，客户要求与品牌、公司和组织以他们与朋友交谈的方式轻松沟通，并期望立即得到回应。如果不使用某种形式的自动化，提供这种水平的服务对于大多数组织来说相当不切实际，甚至从物流上讲几乎不可能实现。
- en: Until recently, the limitations of automated technology meant compromising the
    seamless, robust experience that's been proven to create loyal customers. Running
    a call center is an expensive undertaking and yet in order to be able to provide
    that instant communication channel with customers, most brands and companies opted
    to do this, in order to provide that instant response.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，自动技术的局限性意味着要牺牲那种已被证明能创造忠实客户的无缝、稳健的体验。运营呼叫中心是一项昂贵的任务，然而为了能够向客户提供那种即时通信渠道，大多数品牌和公司选择这样做，以便提供即时响应。
- en: With the advent of **Artificial Intelligence** (**AI**), **Natural Language
    Processing** (**NLP**), **Machine Learning** (**ML**), and Sentiment Analysis
    APIs and frameworks, semi-automated or fully automated agents known as bots are
    radically changing everything we know about customer communication, initiating
    a revolution in the way customer interaction is done.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着人工智能（AI）、自然语言处理（NLP）、机器学习（ML）和情感分析API和框架的出现，半自动化或全自动化代理，即机器人，正在彻底改变我们关于客户沟通的一切认识，引发了一场客户互动方式的革命。
- en: With fewer people using their phone to make phone calls anymore, but instead
    using their phones for anything else but talking, messaging has become the de
    facto way to communicate.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 随着越来越少的人用手机打电话，而是用手机做其他任何事情，除了说话，消息已经成为事实上的通信方式。
- en: A great deal of smartphone owners use their devices to make calls, but most
    use them for text-based communication (texting/SMS, messaging, or chat). The average
    adult spends a total of 23 hours a week texting. Furthermore over a lifetime,
    the average Millennial will spend an astonishing 12 years texting.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 许多智能手机用户使用他们的设备打电话，但大多数人使用它们进行基于文本的通信（短信/SMS、消息或聊天）。平均成年人每周花费23小时发短信。此外，在一生中，平均千禧一代将花费惊人的12年时间发短信。
- en: The reason for the rise of text messaging as a communication platform is that
    phone calls are interruptive, inconvenient, and inefficient. They don't allow
    for multitasking-when you're using your smartphone to make a call, it cannot be
    used for anything else. While in the past we used to just pick up the phone to
    solve a problem, now we start with text-based messages, and then escalate to voice.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 文本信息作为通信平台兴起的原因是电话通话具有干扰性、不便和不高效。它们不允许进行多任务处理——当你用智能手机打电话时，就不能做其他任何事情。在过去，我们只是拿起电话解决问题，而现在我们首先从基于文本的消息开始，然后升级到语音。
- en: Another significantly important reason for messaging adoption is that customers
    are demanding interaction where they already are.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 消息采用的一个重要且显著的原因是客户要求在他们在的地方进行互动。
- en: Messaging and chat-related apps are rapidly gaining popularity over SMS, especially
    among younger people. Globally, 6 of the 10 top apps are messaging applications
    such as Facebook Messenger, WhatsApp, Telegram, and WeChat.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 消息和聊天相关的应用程序在短信之上迅速获得人气，尤其是在年轻人中。全球前10大应用程序中有6个是消息应用程序，如Facebook Messenger、WhatsApp、Telegram和微信。
- en: The main reason for this increased usage of messaging apps is that these don't
    count against monthly SMS limits, and if you're connected to Wi-Fi, these don't
    use up any data either. Further to that, there's also an emotional component,
    which enhances the overall conversation. Messaging has the feel of a real-time
    conversation. You know when your friends are active in the app and even when they're
    typing a response, which makes it an addictive and highly engaging medium to communicate
    with.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这种消息应用使用量增加的主要原因是因为这些应用不计入每月的短信限额，而且如果你连接到Wi-Fi，这些应用也不会消耗任何数据。更进一步的是，还有一个情感因素，它增强了整体对话。消息有一种实时对话的感觉。你知道你的朋友何时在应用中活跃，甚至当他们正在回复时，这使得它成为一种上瘾且高度吸引人的通信媒介。
- en: With this scenario in perspective, creating messaging bots that provide meaningful
    interaction with customers provides a cutting-edge advantage to any business,
    by using today's most common communication medium and also being where customers
    already are, on their messaging apps.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，创建与客户进行有意义互动的消息机器人，可以为任何企业带来前沿优势，通过使用今天最常用的通信媒介，并且就在客户已经所在的地方——他们的消息应用中。
- en: 'In this book, we''ll explore how we can write bots using various platforms,
    APIs, and SDKs in order to tackle some of today''s most interesting business problems,
    in steps that are easy to follow and at the same time fun to implement. Specifically,
    this chapter will dig into:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将探讨如何使用各种平台、API 和 SDK 编写机器人，以便以易于遵循的步骤解决当今一些最有趣的企业问题，同时实施起来也很有趣。具体来说，这一章将深入探讨：
- en: Why bots matter and why you should get on the train
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么机器人很重要，以及为什么你应该上车
- en: Why SMS still matters
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么短信仍然重要
- en: 'Twilio as an SMS platform:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twilio 作为短信平台：
- en: Installing Twilio for Node.js
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Node.js 安装 Twilio
- en: Setting up a Twilio account
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Twilio 账户
- en: Bare-bones Twilio Node.js template
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简洁的 Twilio Node.js 模板
- en: Core bot functionality on Azure
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 上的核心机器人功能
- en: Receiving SMS bot logic
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收短信机器人逻辑
- en: Let's not wait any further and get into the details. Have fun!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不再等待，让我们深入了解细节。享受乐趣！
- en: Why bots matter and why you should get on the train
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么机器人很重要，以及为什么你应该上车
- en: In the broad sense of its definition, a bot is a piece of software that leverages
    artificial narrow intelligence to perform specific tasks in place of a human.
    Bots understand language to a certain extent and not just commands. Ultimately,
    they could learn from their interactions to get smarter and better.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在广义的定义上，机器人是一种利用人工智能窄域来执行特定任务以替代人类的软件。机器人理解语言到一定程度，而不仅仅是命令。最终，它们可以从它们的互动中学习，变得更聪明、更好。
- en: In roughly two years time, 3.6 billion people (yes 3.6 billion) are projected
    to be using messaging apps--that's 90% of total Internet users, which is more
    people than could ever be served with a continuous thread of communication compared
    to more traditional platforms such as e-mail. Refer to the following link for
    more information:  [https://hbr.org/2016/09/messaging-apps-are-changing-how-companies-talk-with-customers](https://hbr.org/2016/09/messaging-apps-are-changing-how-companies-talk-with-customers)
    .
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大约两年后，预计将有36亿人（是的，36亿人）使用消息应用——这是总互联网用户的90%，比传统平台如电子邮件能够服务的人数还要多。有关更多信息，请参阅以下链接：[https://hbr.org/2016/09/messaging-apps-are-changing-how-companies-talk-with-customers](https://hbr.org/2016/09/messaging-apps-are-changing-how-companies-talk-with-customers)。
- en: Worldwide, consumers are now demanding messaging as a customer service option.
    It's not sufficient to have a customer service phone number where the customer
    can call you, but it's becoming almost a must that customers should be able to
    reach you through some kind of real-time messaging platform as well. Users are
    demanding fast-paced interaction and quick answers.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在全球范围内，消费者现在要求将短信作为客户服务选项。仅仅有一个客户服务电话号码，让客户可以打电话给你是不够的，但几乎成为了一种必须，即客户应该能够通过某种实时消息平台联系到你。用户要求快速互动和快速回答。
- en: Recent studies found that messaging and chat were the highest rated contact
    methods for customer satisfaction. Refer to  [https://onereach.com/blog/45-texting-statistics-that-prove-businesses-need-to-start-taking-sms-seriously/](https://onereach.com/blog/45-texting-statistics-that-prove-businesses-need-to-start-taking-sms-seriously/)
    .
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最近的研究发现，短信和聊天是客户满意度最高的联系方式。请参阅 [https://onereach.com/blog/45-texting-statistics-that-prove-businesses-need-to-start-taking-sms-seriously/](https://onereach.com/blog/45-texting-statistics-that-prove-businesses-need-to-start-taking-sms-seriously/)。
- en: According to recent polls ( [http://customerthink.com/7-data-backed-reasons-why-you-should-let-customers-text-customer-service/](http://customerthink.com/7-data-backed-reasons-why-you-should-let-customers-text-customer-service/)
    ), almost two-thirds of consumers are likely to have a positive perception of
    an organization that offers messaging or chat as a service channel. Nevertheless,
    by the end of 2016, roughly 40% of customer service centers will still be missing
    that opportunity to impress their customers. This translates not only into failing
    to impress your customers, but also as a loss of business opportunities. Customers
    are likely to be more loyal and stay with those organizations that are capable
    of interacting and engaging with them in faster and smarter ways. Refer to  [https://blog.kissmetrics.com/live-chat/](https://blog.kissmetrics.com/live-chat/)
    .
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 根据最近的民意调查（[http://customerthink.com/7-data-backed-reasons-why-you-should-let-customers-text-customer-service/](http://customerthink.com/7-data-backed-reasons-why-you-should-let-customers-text-customer-service/)），几乎三分之二的患者可能对提供消息或聊天作为服务渠道的组织持积极看法。然而，到2016年底，大约40%的客户服务中心仍将错失给客户留下深刻印象的机会。这不仅意味着未能给客户留下深刻印象，还意味着失去了商业机会。客户更有可能对那些能够以更快、更智能的方式与他们互动和参与的组织保持忠诚。请参阅[https://blog.kissmetrics.com/live-chat/](https://blog.kissmetrics.com/live-chat/)。
- en: Consider your organization (corporate) has a messaging app that allows your
    customers to interact with you. Even though your app might be a great communication
    gateway, there's still no room for that communication channel to be lost. Say,
    for instance, a user forgets to turn on notifications or accidentally deletes
    the app. The ability to seamlessly and easily communicate is suddenly gone.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的组织（企业）有一个消息应用，允许您的客户与您互动。尽管您的应用可能是一个出色的通信网关，但这个通信渠道仍然不能丢失。比如说，一个用户忘记开启通知或意外删除了应用。突然之间，无缝和轻松沟通的能力就消失了。
- en: However, using a personal messaging app (such as Skype, Facebook Messenger,
    WhatsApp, and so on) eliminates most roadblocks, allowing for companies to become
    part of the communication framework that users already know and love.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用个人消息应用（如Skype、Facebook Messenger、WhatsApp等）消除了大多数障碍，使公司能够成为用户已经熟悉和喜爱的通信框架的一部分。
- en: With messaging apps, there are no forms, no downloads, no new platforms. The
    customer can use the interface that they are already familiar with to instantly
    engage with your organization. The user can use natural language to purchase a
    ticket, download a boarding pass, or ask a question. Moreover, given that the
    user is highly unlikely to stop using the messaging app, your organization can
    follow up with updates, surveys, and other notifications through the messaging
    app that the user already knows and loves.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在消息应用中，没有表格，没有下载，没有新的平台。客户可以使用他们已经熟悉的界面立即与您的组织互动。用户可以使用自然语言购买票务、下载登机牌或提出问题。此外，鉴于用户不太可能停止使用消息应用，您的组织可以通过用户已经熟悉和喜爱的消息应用跟进更新、调查和其他通知。
- en: 'In order to understand this better, say when a consumer asks a question, the
    bot should be able to:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这一点，假设消费者提出一个问题，机器人应该能够：
- en: Use natural language processing to understand the intent of the question
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自然语言处理来理解问题的意图
- en: Gather relevant details from the company's website, FAQs, or knowledge base,
    or even trusted external sites
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从公司的网站、常见问题解答（FAQs）或知识库中收集相关细节，或者甚至是从受信任的外部网站
- en: Sift through that information to find the most likely answer to the customer's
    intent of the question
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从这些信息中筛选出最可能符合客户提问意图的答案
- en: Respond back to the customer more or less in a similar way as a human would
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以类似于人类的方式回应客户
- en: There will surely be cases where bots might encounter situations that require
    the nuance and analytical thinking of a human. When they do, they can escalate
    to an agent, passing along the context they've gathered during the interaction
    to ensure a seamless customer experience. In principle, this should be totally
    transparent for the end user.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 肯定会有一些情况，机器人可能会遇到需要人类细微差别和逻辑分析能力的情况。当这种情况发生时，它们可以将问题升级给客服代表，并将它们在互动过程中收集到的上下文传递过去，以确保客户体验的连贯性。原则上，这应该对最终用户是完全透明的。
- en: As technology continues to advance, Gartner predicts that by 2018, bots should
    be able to recognize customers by face and voice rather seamlessly.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术的不断进步，Gartner预测，到2018年，机器人应该能够非常顺畅地通过面部和声音识别客户。
- en: 'Bots could also be able to:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人也可能能够：
- en: Allow customers to make purchases without leaving the messaging app
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许客户在消息应用内完成购买
- en: Offer personalized product suggestions
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供个性化的产品建议
- en: Link users to relevant web pages such as customer product reviews
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用户链接到相关的网页，如客户产品评论
- en: Initiate new interactions to re-engage users
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动新的互动以重新吸引用户
- en: Follow up with cart reminders and customer cases
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过购物车提醒和客户案例进行跟进
- en: Overall, help your organization to create an exceptional customer experience
    by providing robust data and actionable insights
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总体而言，通过提供强大的数据和可操作见解，帮助您的组织创造卓越的客户体验
- en: Why SMS still matters
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么短信仍然很重要
- en: Smart phones are becoming more important in today's world. Arguably, they are
    almost an extension of yourself. If you lose your phone today, you are in trouble.
    Everything from e-mails, calendar, messaging, banking, and even your wallet are
    somehow linked to your phone.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 智能手机在当今世界变得越来越重要。可以说，它们几乎是你自己的延伸。如果你今天失去了手机，那你就麻烦了。从电子邮件、日历、消息、银行到甚至钱包，所有这些都与你的手机有关联。
- en: In today's vibrant, dynamic, and always connected society, having access to
    vast amounts of information at your fingertips through your phone can be a blessing,
    but it can also be a curse.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天这个充满活力、动态且始终连接的社会中，通过手机随时随地获取大量信息可能是一种祝福，但也可能成为一种诅咒。
- en: Busy professionals nowadays have to deal with hundreds of e-mails on a daily
    or weekly basis, plus also many messages and notifications from social networks
    such as Twitter and LinkedIn. Keeping up with this sheer volume of messages can
    be overwhelming.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的忙碌专业人士每天或每周必须处理数百封电子邮件，以及来自Twitter和LinkedIn等社交网络的许多消息和通知。跟上如此大量的消息可能会让人感到压倒。
- en: But what if phones could actually help us alleviate some of this information
    overload by notifying us of important things or allowing us to perform custom
    actions based on SMS or voice commands? Imagine if we were able to automate certain
    processes through messaging or voice. Wouldn't that be awesome?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果手机能够通过通知我们重要事项或允许我们根据短信或语音命令执行自定义操作来帮助我们减轻信息过载，那会怎么样呢？想象一下，如果我们能够通过消息或语音自动化某些流程，那岂不是太棒了？
- en: Before social networks took off, **Short Message Service** (**SMS**) was the
    most common way to exchange short messages between people.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在社交网络兴起之前，**短消息服务**（SMS）是人们在之间交换短消息最常见的方式。
- en: According to Wikipedia, even though SMS is still strong and growing, social
    networking messaging services such as Facebook Messenger, WhatsApp, Skype, and
    Viber, available on smart phones, are increasingly being used to exchange short
    messages.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 根据维基百科，尽管短信仍然强大且在增长，但智能手机上的社交网络消息服务，如Facebook Messenger、WhatsApp、Skype和Viber，越来越多地被用来交换短消息。
- en: Generally speaking, SMS and voice enabled solutions are platform specific and
    cannot be customized; however, there's a platform that was designed from the ground
    up with developers in mind, which allows anyone with development skills to create
    custom messaging and voice enabled solutions. Welcome to Twilio! refer to  [https://www.twilio.com/](https://www.twilio.com/)
    .
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，短信和语音启用解决方案是平台特定的，无法定制；然而，有一个从底层设计时就考虑到开发者的平台，它允许任何具有开发技能的人创建自定义的消息和语音启用解决方案。欢迎来到Twilio！请参阅 [https://www.twilio.com/](https://www.twilio.com/)
    。
- en: Twilio as an SMS platform
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Twilio作为一个短信平台
- en: Twilio is a messaging, voice, video, and authentication API for every application.
    It has helper libraries or SDKs in many different programming languages that help
    developers create apps that can leverage the power of voice and messaging.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Twilio为每个应用程序提供消息、语音、视频和身份验证API。它拥有许多不同编程语言的辅助库或SDK，帮助开发者创建可以利用语音和消息功能的应用程序。
- en: Despite that, SMS is still very strong and widely used in enterprise development
    for things such as marketing, **Customer Relationship Management** (**CRM**) automation,
    real-time alert notifications, and two-step verification of a user's identify.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，短信仍然非常强大且在企业发展中广泛使用，用于市场营销、**客户关系管理**（CRM）自动化、实时警报通知和用户身份验证的两步验证。
- en: The significance of SMS usage in the business world is incredibly important
    given that the technology is considered mature, widely spread, proven, and reliable.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这项技术被认为是成熟的、广泛传播的、经过验证的且可靠的，短信在商业世界中的使用具有极其重要的意义。
- en: Twilio's services are accessed over HTTP(S) through a RESTful API or helper
    libraries. Its services are billed based on usage. The platform is based on **Amazon
    Web Services** (**AWS**) to host its telephony infrastructure and provide connectivity
    between HTTP and the **Public Switched Telephone Network** (**PSTN**), through
    its APIs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Twilio 的服务通过 HTTP(S) 通过 RESTful API 或辅助库进行访问。其服务根据使用情况进行计费。该平台基于 **Amazon Web
    Services**（**AWS**）来托管其电话基础设施，并通过其 API 在 HTTP 和 **公共交换电话网络**（**PSTN**）之间提供连接性。
- en: Twilio has recently extended its API support to Facebook Messenger, which coincides
    with the social networking company's introduction of support for bots on its Messenger
    platform.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Twilio 最近扩展了其 API 对 Facebook Messenger 的支持，这与社交网络公司在其 Messenger 平台上推出对机器人支持的时间相吻合。
- en: In this chapter, we'll explore how to interact with Twilio's REST API using
    the Node.js helper library in order to build an SMS Messaging bot.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何使用 Node.js 辅助库与 Twilio 的 REST API 交互，以构建一个 SMS 消息机器人。
- en: Installing Twilio for Node.js
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Node.js 的 Twilio
- en: 'Twilio provides a REST API, which allows developers to interact with its platform
    services, such as SMS. Even though the REST API is a great way to interact with
    Twilio services, there are official helper libraries for the most common programming
    languages of today, such as: PHP, ASP.NET (C#), Ruby, Python, Java, Salesforce
    (Apex), and, last but not least, Node.js.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Twilio 提供了一个 REST API，允许开发者与其平台服务（如短信）进行交互。尽管 REST API 是与 Twilio 服务交互的好方法，但今天最常用的编程语言（如：PHP、ASP.NET（C#）、Ruby、Python、Java、Salesforce（Apex）以及最后但同样重要的是，Node.js）都有官方的辅助库。
- en: The Twilio Node.js helper library can be obtained from [https://www.twilio.com/docs/libraries/node](https://www.twilio.com/docs/libraries/node)
    . In order to get started, let's get Node.js installed.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Twilio Node.js 辅助库可以从 [https://www.twilio.com/docs/libraries/node](https://www.twilio.com/docs/libraries/node)
    获取。为了开始，让我们安装 Node.js。
- en: Open your browser and navigate to [https://nodejs.org](https://nodejs.org) and
    there on the main page you can download the version of Node.js that corresponds
    to your platform.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的浏览器并导航到 [https://nodejs.org](https://nodejs.org)，您可以在主页上下载与您的平台相对应的 Node.js
    版本。
- en: '![Installing Twilio for Node.js](img/image00152.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Node.js 的 Twilio](img/image00152.jpeg)'
- en: The steps that follow will be based on installing Node.js on a Windows 64 Bit
    operating system.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的步骤将基于在 Windows 64 位操作系统上安装 Node.js。
- en: Once you have selected a version, just run the installer and follow the installation
    steps. You'll first be presented with a Welcome screen and then you can click
    on the **Next** button.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 选择版本后，只需运行安装程序并按照安装步骤进行。您首先会看到一个欢迎屏幕，然后可以点击 **下一步** 按钮。
- en: '![Installing Twilio for Node.js](img/image00153.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Node.js 的 Twilio](img/image00153.jpeg)'
- en: You'll be requested to accept the license terms and then click on the **Next**
    button again.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被要求接受许可条款，然后再次点击 **下一步** 按钮。
- en: '![Installing Twilio for Node.js](img/image00154.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Node.js 的 Twilio](img/image00154.jpeg)'
- en: Following that, the installer displays the default installation path, which
    you may opt to change or not.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，安装程序将显示默认的安装路径，您可以选择更改或不更改。
- en: '![Installing Twilio for Node.js](img/image00155.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Node.js 的 Twilio](img/image00155.jpeg)'
- en: Once the installation path has been defined, simply click on the **Next** button.
    The next step is to select what features will be installed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了安装路径，只需点击 **下一步** 按钮。下一步是选择要安装的功能。
- en: '![Installing Twilio for Node.js](img/image00156.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Node.js 的 Twilio](img/image00156.jpeg)'
- en: It is highly recommended to leave all the features selected so everything can
    be installed. The npm package manager will be later required in order to install
    the Twilio Node.js helper library.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议选择所有功能以便安装所有内容。稍后您将需要 npm 软件包管理器来安装 Twilio Node.js 辅助库。
- en: Finally, click on the **Next** button and then the **Install** button, in order
    to finalize the installation process.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，点击 **下一步** 按钮，然后点击 **安装** 按钮，以完成安装过程。
- en: '![Installing Twilio for Node.js](img/image00157.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Node.js 的 Twilio](img/image00157.jpeg)'
- en: If there was a previous version of Node.js installed on your system, the installer
    will remove previous older files and then update the system with the newest files.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的系统上安装了 Node.js 的先前版本，安装程序将删除旧文件，然后使用最新文件更新系统。
- en: '![Installing Twilio for Node.js](img/image00158.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Node.js 的 Twilio](img/image00158.jpeg)'
- en: Please note that on other platforms ( [https://nodejs.org/en/download/package-manager/](https://nodejs.org/en/download/package-manager/)
    ), the installation process and screens might differ (such as on a Mac); however,
    it should be pretty straightforward and easy to follow along by going through
    the installation steps.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在其他平台（[https://nodejs.org/en/download/package-manager/](https://nodejs.org/en/download/package-manager/)）上，安装过程和屏幕可能有所不同（例如在Mac上）；然而，通过遵循安装步骤，它应该相当简单，易于遵循。
- en: Once Node.js has been installed, the next thing to do is to get the Twilio Node.js
    helper library installed.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Node.js之后，接下来要做的事情是安装Twilio Node.js辅助库。
- en: 'In order to do this, create a folder anywhere on your PC for this project,
    browse to this folder, and then open the Command Prompt or shell and type this
    command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，在你的PC上的任何位置创建一个用于此项目的文件夹，浏览到该文件夹，然后在命令提示符或shell中输入以下命令：
- en: '[PRE0]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Just follow the steps requested. This will create the `package.json` file (you
    can refer to [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json)
    ) required for our project.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 只需按照要求的步骤操作。这将创建我们项目所需的`package.json`文件（你可以参考[https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json)）。
- en: '![Installing Twilio for Node.js](img/image00159.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![为Node.js安装Twilio](img/image00159.jpeg)'
- en: 'Once the `package.json` file has been created, type in the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了`package.json`文件，输入以下命令：
- en: '[PRE1]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will install the Twilio Node.js helper library and all its dependencies
    and save the reference on our `package.json` file. The Twilio library will be
    installed under the `node_modules` folder within the folder where your `package.json`
    file resides. We'll be using the awesome Atom editor ( [https://atom.io/](https://atom.io/)
    ) throughout this book. You may use any other editor of your choice, such as Sublime
    or Visual Studio Code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装Twilio Node.js辅助库及其所有依赖项，并在我们的`package.json`文件上保存引用。Twilio库将安装在你`package.json`文件所在的文件夹中的`node_modules`文件夹下。在这本书中，我们将使用出色的Atom编辑器（[https://atom.io/](https://atom.io/)）。你也可以使用你选择的任何其他编辑器，例如Sublime或Visual
    Studio Code。
- en: '![Installing Twilio for Node.js](img/image00160.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![为Node.js安装Twilio](img/image00160.jpeg)'
- en: With this in place, we can technically start writing code. However, we first
    need to sign up for a Twilio account and get all set up with Twilio before we
    can send our first SMS. Let's explore how we can get this done.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在此设置完成后，我们可以从技术上开始编写代码。然而，在我们发送第一条短信之前，我们首先需要注册一个Twilio账户，并使用Twilio设置好一切。让我们来看看如何完成这项工作。
- en: Setting up a Twilio account
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Twilio账户
- en: In order to be able to send SMS using the Twilio API and Node.js helper library,
    we need to get a Twilio account set up and also purchase a disposable Twilio number.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够使用Twilio API和Node.js辅助库发送短信，我们需要设置一个Twilio账户，并购买一个可丢弃的Twilio号码。
- en: Twilio is a pay-as-you-go service, which means that you'll need to set up an
    account and provide your credit card details in order to have enough credit, which
    will be used to pay for every SMS you send.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Twilio是一种按使用付费的服务，这意味着你需要设置一个账户并提供你的信用卡详细信息，以便有足够的信用额度，这些信用额度将用于支付你发送的每条短信。
- en: You'll also need to purchase a Twilio number, which is a regular but disposable
    phone number that will be used to send your messages.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要购买一个Twilio号码，这是一个普通但可丢弃的电话号码，将用于发送你的消息。
- en: Twilio numbers are available for many countries. They look like any other valid
    phone number you can think of. They are real phone numbers that you can dispose
    of when you no longer need them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Twilio号码在许多国家都有可用。它们看起来像任何其他你可以想到的有效电话号码。它们是真实的电话号码，当你不再需要它们时可以丢弃。
- en: In order to set up a Twilio account, from your browser access the following
    site [https://www.twilio.com/](https://www.twilio.com/) . Then, click on the **SIGN
    UP** button.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置Twilio账户，从你的浏览器访问以下网站 [https://www.twilio.com/](https://www.twilio.com/)。然后，点击**注册**按钮。
- en: The sign-up process is fairly straightforward, and is super easy to follow and
    complete. Just fill in a few fields that are required and you're done.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注册过程相当简单，非常容易遵循和完成。只需填写一些必填字段，然后你就完成了。
- en: Once your Twilio account has funds, you'll need to purchase a disposable phone
    number.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的Twilio账户有资金，你需要购买一个可丢弃的电话号码。
- en: You'll need to go to this location,  [https://www.twilio.com/user/billing](https://www.twilio.com/user/billing)
    , in order to add funds to your account. In order to do that, click on the **Ad
    Funds** link in red. Make sure that you have logged into Twilio before accessing
    this URL.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要前往这个位置，[https://www.twilio.com/user/billing](https://www.twilio.com/user/billing)，以便给你的账户充值。为了做到这一点，请点击红色的**广告资金**链接。确保在访问此URL之前你已经登录了Twilio。
- en: '![Setting up a Twilio account](img/image00161.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![设置Twilio账户](img/image00161.jpeg)'
- en: With funds in your account, let's set up a Twilio number. This will be a real
    phone number, which you can delete at any moment. You may choose from which country
    and city your number will belong to.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的账户中有资金的情况下，让我们设置一个Twilio号码。这将是一个真实的电话号码，你可以随时删除。你可以选择你的号码属于哪个国家和城市。
- en: Then click on the **Buy a Number** button.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击**购买号码**按钮。
- en: '![Setting up a Twilio account](img/image00162.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![设置Twilio账户](img/image00162.jpeg)'
- en: 'Once you have clicked on the **Buy a Number** button, the following pop-up
    screen will be shown:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你点击了**购买号码**按钮，将显示以下弹出屏幕：
- en: '![Setting up a Twilio account](img/image00163.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![设置Twilio账户](img/image00163.jpeg)'
- en: On this screen, you have the option to choose which country you would like to
    get the number from and also from which geographical location.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕上，你可以选择你想要获取号码的国家和地理位置。
- en: The number could be used for **Voice**, **SMS**, and even **MMS**. For now,
    we are simply interested in making sure that the **SMS** option is ticked.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个号码可以用于**语音**、**短信**，甚至**彩信**。目前，我们只是想确保**短信**选项被勾选。
- en: 'Once you have purchased your Twilio number, you will see the following screen:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一次你购买了Twilio号码，你将看到以下屏幕：
- en: '![Setting up a Twilio account](img/image00164.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![设置Twilio账户](img/image00164.jpeg)'
- en: With this in place, we are ready to start writing our Node.js code.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在此设置就绪后，我们就可以开始编写我们的Node.js代码了。
- en: Bare-bones Twilio Node.js template
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简洁的Twilio Node.js模板
- en: In order to start writing our code, let's create a new file in the same location
    as our `package.json` file called `app.js`. You may create this new file directly
    from the editor you are using.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始编写我们的代码，让我们在`package.json`文件相同的目录下创建一个名为`app.js`的新文件。你可以直接从你使用的编辑器中创建这个新文件。
- en: 'Once the file has been created, we''ll need to include a reference to the Twilio
    Node.js library that we installed through npm:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 文件创建完成后，我们需要包含一个引用我们通过npm安装的Twilio Node.js库：
- en: '[PRE2]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the Node.js world, this is the equivalent of an import in Java or using
    statements in C#. Now let''s move on to see how we can actually send an SMS using
    the Twilio Node.js helper library:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js的世界里，这相当于Java中的导入或C#中的使用语句。现在让我们看看我们如何实际使用Twilio Node.js辅助库发送短信：
- en: '[PRE3]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We''ll need two variables to store our Twilio **Account SID** and our **Auth
    token**. Both values can be obtained when you log in to your Twilio account and
    browse to the developer console: [https://www.twilio.com/console](https://www.twilio.com/console)
    .'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要两个变量来存储我们的Twilio **Account SID**和**Auth token**。这两个值可以在你登录Twilio账户并浏览到开发者控制台时获取：[https://www.twilio.com/console](https://www.twilio.com/console)。
- en: '![Bare-bones Twilio Node.js template](img/image00165.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![简洁的Twilio Node.js模板](img/image00165.jpeg)'
- en: 'Once we have provided the correct values to the `accountSid` and `authToken` variables,
    we''ll need to create an instance of the `twilio.RestClient` class in order to
    be able to send an SMS:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们为`accountSid`和`authToken`变量提供了正确的值，我们就需要创建`twilio.RestClient`类的实例，以便能够发送短信：
- en: '[PRE4]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With our instance created, we can go ahead and send our SMS using Twilio:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 实例创建后，我们可以继续使用Twilio发送我们的短信：
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Basically, the SMS is sent by invoking the `messages.create` method from the
    Twilio `client` instance.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，短信是通过调用Twilio `client`实例中的`messages.create`方法来发送的。
- en: This method expects an object that describes the properties of the SMS, such
    as the `body, to` (receiver number), `from` (sender number), call back function
    which describes an error `err` (if an error actually happens), and the contents
    of the posted `message`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法期望一个对象，该对象描述了短信的属性，例如`body`（正文）、`to`（接收者号码）、`from`（发送者号码）、回调函数描述错误`err`（如果实际发生错误），以及已发布的`message`的内容。
- en: 'This is all that is required in order to send an SMS using Twilio. Let''s have
    a look at all the code now:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Twilio发送短信所需的所有内容都在这里。现在让我们看看所有的代码：
- en: '[PRE6]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In order to execute this code, execute this command from the Command Prompt:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行此代码，请在命令提示符中执行以下命令：
- en: '[PRE7]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will send the SMS to the number indicated. We can see the `message.sid`
    of the SMS sent (which was sent back as a response from the Twilio service) by
    looking at the Command Prompt.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将发送短信到指定的号码。我们可以通过查看命令提示符来查看发送的短信的 `message.sid`（这是 Twilio 服务返回的响应）。
- en: '![Bare-bones Twilio Node.js template](img/image00166.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![基础 Twilio Node.js 模板](img/image00166.jpeg)'
- en: Please notice that if the destination number you will be messaging is an international
    (non-US) number, you'll need to enable certain permissions to allow Twilio to
    perform that action.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果要将短信发送到的目标号码是国际（非美国）号码，您需要启用某些权限以允许 Twilio 执行该操作。
- en: 'These permissions can be checked and configured at this URL: [https://www.twilio.com/console/voice/settings/geo-permissions](https://www.twilio.com/console/voice/settings/geo-permissions)
    .'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这些权限可以在以下 URL 检查和配置：[https://www.twilio.com/console/voice/settings/geo-permissions](https://www.twilio.com/console/voice/settings/geo-permissions)。
- en: Core bot functionality on Azure
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure 上的核心机器人功能
- en: Now that we've implemented and have a working Twilio Node.js template, which
    can send SMS, let's have a look at expanding our code to do more.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经实现了 Twilio Node.js 模板，并且它能够发送短信，让我们看看如何扩展我们的代码以实现更多功能。
- en: We'll need to be able to somehow hook and listen to incoming SMS and have some
    very basic **Natural Language Processing (NLP)**, in order to send answers based
    on the input received.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要能够以某种方式连接并监听接收到的短信，并有一些非常基本的 **自然语言处理 (NLP**)，以便根据接收到的输入发送答案。
- en: Listening to incoming SMS requires setting up in our Node.js app a URL that
    can be configured within your Twilio account as a Request URL. This Request URL
    will be used by Twilio to push incoming messages on your purchased Twilio number,
    to our Node.js bot app.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 监听接收到的短信需要在我们的 Node.js 应用中设置一个 URL，该 URL 可以在您的 Twilio 账户中配置为请求 URL。这个请求 URL
    将由 Twilio 使用，将接收到的短信推送到您购买的 Twilio 号码，到我们的 Node.js 机器人应用。
- en: To make our bot publicly available, we'll publish it on Azure websites. Let's
    create a REST endpoint for our Node.js app, which we will use for listening to
    new messages. We'll be using the Express framework ([http://expressjs.com/](http://expressjs.com/))
    to do this.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要使我们的机器人公开可用，我们将在 Azure 网站上发布它。让我们为我们的 Node.js 应用创建一个 REST 端点，我们将使用它来监听新消息。我们将使用
    Express 框架 ([http://expressjs.com/](http://expressjs.com/)) 来完成这项工作。
- en: Express is a minimal and flexible Node.js web application framework that provides
    a robust set of features for web and mobile applications. It provides a thin layer
    of fundamental web application features such as routing and middleware.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Express 是一个最小化和灵活的 Node.js 网络应用程序框架，为网络和移动应用程序提供了一组强大的功能。它提供了一个薄层的基本网络应用程序功能，如路由和中间件。
- en: 'Let''s first install the Express framework by running this command from the
    command line prompt:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从命令行提示符运行以下命令来安装 Express 框架：
- en: '[PRE8]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A handy utility to have installed is Nodemon ([http://nodemon.io/](http://nodemon.io/)).
    This allows you to make changes to your code and it automatically restarts the
    Node.js app. You can install Nodemon by running this command from the prompt:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 安装一个实用的工具是 Nodemon ([http://nodemon.io/](http://nodemon.io/))。这允许您更改代码，并且它将自动重新启动
    Node.js 应用。您可以通过在提示符中运行以下命令来安装 Nodemon：
- en: '[PRE9]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Instead of running the app with the node, you can now run it as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以按照以下方式运行应用程序，而不是使用 node 运行应用程序：
- en: '[PRE10]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'With the Express framework installed, let''s expand our current code to create
    a REST endpoint, which we can then use to hook up Twilio to push incoming messages:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了 Express 框架之后，让我们扩展我们当前的代码以创建一个 REST 端点，然后我们可以将其用于将 Twilio 连接到推送接收到的消息：
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Before we can hook up our bot app to Twilio in order to process incoming messages,
    let's first get all the tooling wired up, so that we can publish our app as it
    is to Azure websites.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将机器人应用连接到 Twilio 以处理接收到的消息之前，让我们首先设置所有工具，这样我们就可以将我们的应用程序以当前状态发布到 Azure 网站。
- en: We'll need to install the Azure **Command Line Interface** (**CLI**) ([https://azure.microsoft.com/en-us/documentation/articles/xplat-cli-install/](https://azure.microsoft.com/en-us/documentation/articles/xplat-cli-install/))
    in order to push our app to Azure. We'll also need to sign up for Azure if we
    don't have an account.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要安装 Azure **命令行界面 (CLI**) ([https://azure.microsoft.com/en-us/documentation/articles/xplat-cli-install/](https://azure.microsoft.com/en-us/documentation/articles/xplat-cli-install/))
    以将我们的应用程序推送到 Azure。如果我们没有账户，我们还需要注册 Azure。
- en: 'You can do that by visiting: [https://azure.microsoft.com](https://azure.microsoft.com)
    .'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问：[https://azure.microsoft.com](https://azure.microsoft.com) 来做到这一点。
- en: '![Core bot functionality on Azure](img/image00167.jpeg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![Azure 上的核心机器人功能](img/image00167.jpeg)'
- en: Once you have your account set up with Azure, you may install the Azure CLI
    using the respective installer for your platform or as an npm package following
    these instructions.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在Azure上设置了账户，你可以使用相应平台的安装程序或按照以下说明将Azure CLI作为npm包安装。
- en: 'Using npm, the Azure CLI can be installed as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用npm，可以按照以下方式安装Azure CLI：
- en: '[PRE12]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Once you have installed the Azure CLI, let's deploy the app as it is to Azure
    in order to make sure all our tooling is correctly wired up.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你安装了Azure CLI，让我们将应用直接部署到Azure，以确保所有我们的工具都已正确连接。
- en: 'In order to do that, run the Azure CLI and `login` to Azure:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，运行Azure CLI并`login`到Azure：
- en: '[PRE13]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once the command has been executed, you''ll see the following welcome message
    where you''ll be asked to enable data collection:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行了命令，你将看到以下欢迎信息，其中会要求你启用数据收集：
- en: '![Core bot functionality on Azure](img/image00168.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![Azure上的核心机器人功能](img/image00168.jpeg)'
- en: You may opt-in or not, the choice is yours and this doesn't affect your bot
    app development or usage of Azure at all.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择是否启用，选择权在你，这根本不影响你的机器人应用开发或Azure的使用。
- en: 'Once you''ve chosen your option, you''ll be prompted to enter the code displayed
    on the command line on this URL, [http://aka.ms/devicelogin](http://aka.ms/devicelogin)
    , and then authenticate with your Microsoft Account, as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了你的选项，你将被提示在以下URL上输入命令行上显示的代码，[http://aka.ms/devicelogin](http://aka.ms/devicelogin)，然后使用你的Microsoft账户进行身份验证，如下所示：
- en: '![Core bot functionality on Azure](img/image00169.jpeg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![Azure上的核心机器人功能](img/image00169.jpeg)'
- en: In the preceding screenshot, I've blanked out the Azure subscription keys and
    information that corresponds to my Azure account.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我已经将与我Azure账户相对应的Azure订阅密钥和信息抹去。
- en: With this in place, your Azure CLI is all set. The next thing to do is to deploy
    the app to Azure using the CLI. Let's see how this can be done.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一来，你的Azure CLI就设置好了。接下来要做的事情是使用CLI将应用部署到Azure。让我们看看如何做到这一点。
- en: Run this command in order to create the website on Azure. Make sure you're still
    in the root directory of your app. Create the App Service app resource in Azure
    with a unique app name with the next command. Your web app's URL will be `http://<appname>.azurewebsites.net`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令以在Azure上创建网站。确保你仍然位于你的应用根目录中。使用以下命令在Azure中创建具有唯一应用名称的App Service应用资源。你的Web应用URL将是`http://<appname>.azurewebsites.net`。
- en: 'In this case, we''ll call our App Service app on Azure: `NodeBotSite` (you
    are free to choose any other name if this has been taken). Let''s enter the following
    command:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将我们的Azure App Service应用命名为`NodeBotSite`（如果你选择的名称已被占用，你可以自由选择其他名称）。让我们输入以下命令：
- en: '[PRE14]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You'll be prompted to select the Azure region where your site will be hosted
    on. Feel free to choose the one closest to your location.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你将被提示选择你的网站将要托管在其上的Azure区域。请随意选择离你最近的一个。
- en: '![Core bot functionality on Azure](img/image00170.jpeg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![Azure上的核心机器人功能](img/image00170.jpeg)'
- en: 'Once you''ve selected the region, Azure will create your site and you''ll see
    the following details via the command line:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了区域，Azure将创建你的网站，你将通过命令行看到以下详细信息：
- en: '![Core bot functionality on Azure](img/image00171.jpeg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![Azure上的核心机器人功能](img/image00171.jpeg)'
- en: 'Change the port from `8080` within the app to `process.env.port`, as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用内的端口从`8080`更改为`process.env.port`，如下所示：
- en: '[PRE15]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Nodemon doesn't seem to play too well with Azure; therefore, if you leave Nodemon
    as a dependency on your `package.json` file, you might run into problems when
    deploying the app to Azure. In light of this, remove from your package.json file
    the dependency that references Nodemon, before deploying to Azure.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Nodemon似乎与Azure不太兼容；因此，如果你将Nodemon作为`package.json`文件中的依赖项，在将应用部署到Azure时可能会遇到问题。鉴于这一点，在部署到Azure之前，请从你的`package.json`文件中删除引用Nodemon的依赖项。
- en: 'Save your changes on both your `package.json` and `app.js` files, and then
    use the git command to deploy your app to Azure, as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`package.json`和`app.js`文件上保存你的更改，然后使用git命令将你的应用到Azure部署，如下所示：
- en: '[PRE16]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: After you type these commands, if you've never set up git/FTP deployment credentials
    for your Azure subscription, you'll also be prompted to create them. You can also
    enter these credentials on the Azure Portal.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在你输入这些命令后，如果你从未为你的Azure订阅设置过git/FTP部署凭据，你将被提示创建它们。你也可以在Azure门户中输入这些凭据。
- en: Once the git push command has finished, your app will be published on Azure
    and it is ready to be used.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦git push命令完成，你的应用将在Azure上发布，并且已经准备好使用。
- en: '![Core bot functionality on Azure](img/image00172.jpeg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![Azure上的核心机器人功能](img/image00172.jpeg)'
- en: 'In order to view it, open your browser and navigate to the site, receive this
    URL: [http://nodebotsite.azurewebsites.net/receive](http://nodebotsite.azurewebsites.net/receive)
    . You should then see this:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看它，打开您的浏览器并导航到该网站，接收此URL：[http://nodebotsite.azurewebsites.net/receive](http://nodebotsite.azurewebsites.net/receive)。您应该看到以下内容：
- en: '![Core bot functionality on Azure](img/image00173.jpeg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![Azure上的核心机器人功能](img/image00173.jpeg)'
- en: To make updates to your Node.js web app running on Azure, just run `git add`,
    `git commit`, and `git push` like you did when you deployed it first.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新您在Azure上运行的Node.js Web应用，只需运行`git add`、`git commit`和`git push`，就像您第一次部署它时做的那样。
- en: 'With Azure all wired up, the next step is to configure this URL: [https://www.twilio.com/console/phone-numbers/incoming](https://www.twilio.com/console/phone-numbers/incoming)
    , on your voice number''s dashboard within your Twilio account, and then click
    on your purchased Twilio number. Edit the **Messaging** | **Request URL** for
    your Twilio number and click on the **Save** button.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure配置完成后，下一步是配置此URL：[https://www.twilio.com/console/phone-numbers/incoming](https://www.twilio.com/console/phone-numbers/incoming)，在你的Twilio账户中语音号码的仪表板上，然后点击你购买的Twilio号码。编辑你的Twilio号码的**消息**
    | **请求URL**，然后点击**保存**按钮。
- en: '![Core bot functionality on Azure](img/image00174.jpeg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![Azure上的核心机器人功能](img/image00174.jpeg)'
- en: Now your Twilio is tied to your Azure app, receive URL, which will be used to
    receive incoming SMS.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的Twilio已与您的Azure应用绑定，接收URL，它将用于接收 incoming 短信。
- en: With all these setup steps in place, we can now focus on adding the receive
    logic for our Twilio bot app.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些设置步骤就绪后，我们现在可以专注于为我们的Twilio机器人应用添加接收逻辑。
- en: Receiving SMS bot logic
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接收短信机器人逻辑
- en: So far we've implemented the basic bare-bones template for our Twilio bot app
    and also made all the necessary configurations in order to have our solution wired
    up with Twilio and also easily deployable to Azure.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经实现了我们的Twilio机器人应用的基本裸骨模板，并在Twilio和Azure之间配置了所有必要的设置，以便我们的解决方案易于部署。
- en: 'Let''s now explore how we can make our bot reply to incoming messages. In order
    to do this, we''ll need to have a POST endpoint on our Node/Express app. Let''s
    examine the following code:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来探讨如何让我们的机器人回复 incoming 消息。为了做到这一点，我们需要在我们的Node/Express应用上有一个POST端点。让我们检查以下代码：
- en: '[PRE17]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We can see here that in order to reply, we create a **TwiML** response and send
    that as the response of POST / receive the HTTP endpoint.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，为了回复，我们创建了一个**TwiML**响应，并将其作为POST / 接收HTTP端点的响应发送。
- en: TwiML is an XML markup language, which is simply a set of instructions you can
    use to tell Twilio what to do when you receive an incoming call or SMS.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: TwiML是一种XML标记语言，它是一组你可以用来告诉Twilio在接收到来电或短信时该做什么的指令。
- en: Twilio makes HTTP requests to your application just like a regular web browser.
    By including parameters and values in its requests, Twilio sends data to your
    application that you can act upon before responding. This is what we are actually
    doing on this, receive endpoint.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Twilio就像一个普通的网络浏览器一样向您的应用程序发送HTTP请求。通过在其请求中包含参数和值，Twilio将数据发送到您的应用程序，您可以在响应之前采取行动。这正是我们在接收端点实际所做的。
- en: Twilio sends the following parameters with its request as POST parameters or
    URL query parameters, depending on which HTTP method you've configured.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Twilio会根据你配置的HTTP方法，以POST参数或URL查询参数的形式发送以下参数。
- en: When we receive an SMS or a phone call on our Twilio number, Twilio will fetch
    the URL associated with that phone number and perform an HTTP request to that
    URL. This URL will contain an XML response with markup instructions, which indicate
    what tasks Twilio needs to execute. Some of these tasks can be to record the call,
    play a message, prompt the caller to enter some digits, and so on.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在Twilio号码上收到短信或电话时，Twilio将获取与该电话号码关联的URL，并向该URL执行HTTP请求。此URL将包含一个带有标记指令的XML响应，指示Twilio需要执行的任务。这些任务中的一些可以是记录通话、播放消息、提示呼叫者输入一些数字等等。
- en: 'In this case, what our bot is doing is simply returning a one-line sentence.
    In short, the preceding example code is simply returning this XML back to Twilio
    as a response, so that Twilio can actually generate an SMS response out of it,
    and send it back to the sender''s phone:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们的机器人所做的只是返回一个单行句子。简而言之，前面的示例代码只是将这个XML返回给Twilio作为响应，这样Twilio就可以从中生成一个短信响应，并将其发送回发送者的手机：
- en: '[PRE18]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, it is super simple to tell Twilio to execute a specific action
    using TwiML. The markup language is made up of verbs highlighted in blue, which
    represent actions that Twilio will execute.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，告诉Twilio执行特定操作非常简单，使用TwiML。标记语言由蓝色突出显示的动词组成，这些动词代表Twilio将执行的操作。
- en: 'Some of the TwiML verbs available at the time of the writing are: Say, Play,
    Dial, Record, Gather, Sms, Hangup, Queue, Redirect, Pause, Conference, Reject,
    and Message.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写时可用的一些TwiML动词包括：Say、Play、Dial、Record、Gather、Sms、Hangup、Queue、Redirect、Pause、Conference、Reject和Message。
- en: 'Complete details on how to use these TwiML verbs can be found here: [https://www.twilio.com/docs/api/twiml](https://www.twilio.com/docs/api/twiml)
    .'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用这些TwiML动词的完整细节可以在以下位置找到：[https://www.twilio.com/docs/api/twiml](https://www.twilio.com/docs/api/twiml)。
- en: What we've done through the code is to use the Twilio Node.js helper library
    to generate the TwiML as a response, without explicitly creating the XML response
    itself.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 通过代码，我们已经使用Twilio Node.js辅助库生成TwiML作为响应，而没有明确创建XML响应本身。
- en: So our bot starts to finally take shape. It can listen to messages and send
    a response back. But, how does the bot know how to act to certain inputs? In order
    to achieve that, the bots need to be able to understand the parameters of the
    incoming message and be able to act upon it.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的机器人开始最终成形。它可以监听消息并发送响应。但是，机器人如何知道如何对某些输入采取行动？为了实现这一点，机器人需要能够理解传入消息的参数，并能够对其采取行动。
- en: Twilio sends several parameters with its request as POST parameters or URL query
    parameters, depending on which HTTP method you've configured on the Twilio number's
    dashboard for incoming SMS. Please take a moment to go through and understand
    this list thoroughly.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Twilio会根据你在Twilio号码仪表板上为传入的SMS配置的HTTP方法，以POST参数或URL查询参数的形式发送多个参数。请花点时间仔细阅读并理解此列表。
- en: 'Here are some of the prominent properties that Twilio uses:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些Twilio在编写时使用的突出属性：
- en: '**From:** The phone number that sent this message.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**From**：发送此消息的电话号码。'
- en: '**To**: The phone number of the recipient.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**To**：收件人的电话号码。'
- en: '**Body**: The text body of the message. It can be up to 1,600 characters long.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Body**：消息的文本正文。它可以长达1,600个字符。'
- en: '**MessageSid**: A 34 character unique identifier for the message. It may be
    used to later retrieve this message from the REST API.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MessageSid**：消息的34个字符唯一标识符。它可以用于稍后从REST API检索此消息。'
- en: '**SmsSid**: The same value as MessageSid. It is deprecated and included for
    backward compatibility.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SmsSid**：与MessageSid相同的值。它已弃用，但包含以保持向后兼容性。'
- en: 'The full list of parameters can be found here: [https://www.twilio.com/docs/api/twiml/sms/twilio_request](https://www.twilio.com/docs/api/twiml/sms/twilio_request)
    .'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 参数的完整列表可以在以下位置找到：[https://www.twilio.com/docs/api/twiml/sms/twilio_request](https://www.twilio.com/docs/api/twiml/sms/twilio_request)。
- en: So in order to write some logic that acts upon the input of the nature of the
    messages received, it is necessary to inspect the value of the parameters that
    are received as part of the `request.body` object. These parameters will have
    properties on this object.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了编写一些基于接收到的消息性质的输入执行的逻辑，有必要检查作为`request.body`对象一部分接收到的参数的值。这些参数将具有此对象上的属性。
- en: 'So for instance, if we want to know from which number the message came from,
    we would have to do something like this:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想知道消息是从哪个号码发送的，我们可能需要做如下操作：
- en: '[PRE19]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The actual received text message itself would be obtained as follows:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 实际接收到的文本消息本身可以通过以下方式获得：
- en: '[PRE20]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Knowing from where the message originates and the actual contents, we can then
    build some logic to internally give the bot some sense of what to do with the
    input received and act upon it.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 了解消息的来源和实际内容后，我们可以构建一些逻辑，使机器人对收到的输入有某种感觉，并对其采取行动。
- en: So, let's add some core functionality, which for now we will call `BotBrain`
    and we don't really know what it will do. This will give us an answer based on
    the input we provide to it, independently of which bot we will be building.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们添加一些核心功能，目前我们将其称为`BotBrain`，我们实际上并不知道它将做什么。这将根据我们提供给它的输入给出答案，而不论我们将构建哪个机器人。
- en: 'In the next chapter, we''ll be creating the logic of this `BotBrain`, and throughout
    the chapters keep adding subsequent and additional functionality to it, but for
    now, let''s assume this `BotBrain` gives the bot the answer required based on
    the input received:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将创建`BotBrain`的逻辑，并在整个章节中继续添加后续和附加功能，但就目前而言，让我们假设这个`BotBrain`根据接收到的输入提供所需的答案：
- en: '[PRE21]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As we can see now, the bot will respond to the incoming request based on the
    results the `BotBrains` will determine, by analyzing the properties of the `request.body`
    object.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，机器人将根据`BotBrains`确定的结果，通过分析`request.body`对象的属性来响应传入的请求。
- en: Summary
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've set the foundations on how our bot will be deployed,
    configured, and set up. We've also created a bare-bones template that we will
    use throughout the rest of the chapters in this book, in order to add more exciting
    functionalities.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为我们的机器人部署、配置和设置奠定了基础。我们还创建了一个基本的模板，我们将在此书的其余章节中使用它，以便添加更多令人兴奋的功能。
- en: We've also explored some of the key components that will make it work from an
    infrastructure point of view and how we can host it on Azure, Microsoft's awesome
    cloud platform.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探索了一些关键组件，这些组件将使其从基础设施的角度工作，以及我们如何在微软的出色云平台Azure上托管它。
- en: Beyond this, we've explained why bots matter and why they are a key component
    for your business to be aware of and considered in your strategy.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们解释了为什么机器人很重要，以及为什么它们是您业务需要了解和考虑的关键组成部分。
- en: Further to that, we've explored the basics of Twilio as a messaging platform
    and started to scratch the surface of what is possible to achieve with it.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们已经探讨了Twilio作为消息平台的基础知识，并开始探索使用它所能实现的可能性。
- en: In the chapters to follow, we'll be adding many more layers and interacting
    with other APIs and services; however, we'll still use Twilio as a backup messaging
    provider by also using SMS.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将添加更多层次，并与其他API和服务进行交互；然而，我们仍然会使用Twilio作为备用消息提供商，同时使用短信。
- en: Hopefully you've got an idea of what to expect coming ahead and also this has
    gotten you excited in our quest to add more layers and logic to our bot.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你已经对即将发生的事情有了想法，并且这也让你对我们的机器人添加更多层次和逻辑的探索感到兴奋。
- en: Thanks for reading!
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
