- en: Chapter 1. The Rise of Bots – Getting the Message Across
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays customers are demanding to communicate with brands, companies, and
    organizations as casually as they talk to their friends, and they expect an immediate
    response. Providing that level of service is quite impractical, if not rather
    logistically impossible to achieve for most organizations, without using some
    form of automation.
  prefs: []
  type: TYPE_NORMAL
- en: Until recently, the limitations of automated technology meant compromising the
    seamless, robust experience that's been proven to create loyal customers. Running
    a call center is an expensive undertaking and yet in order to be able to provide
    that instant communication channel with customers, most brands and companies opted
    to do this, in order to provide that instant response.
  prefs: []
  type: TYPE_NORMAL
- en: With the advent of **Artificial Intelligence** (**AI**), **Natural Language
    Processing** (**NLP**), **Machine Learning** (**ML**), and Sentiment Analysis
    APIs and frameworks, semi-automated or fully automated agents known as bots are
    radically changing everything we know about customer communication, initiating
    a revolution in the way customer interaction is done.
  prefs: []
  type: TYPE_NORMAL
- en: With fewer people using their phone to make phone calls anymore, but instead
    using their phones for anything else but talking, messaging has become the de
    facto way to communicate.
  prefs: []
  type: TYPE_NORMAL
- en: A great deal of smartphone owners use their devices to make calls, but most
    use them for text-based communication (texting/SMS, messaging, or chat). The average
    adult spends a total of 23 hours a week texting. Furthermore over a lifetime,
    the average Millennial will spend an astonishing 12 years texting.
  prefs: []
  type: TYPE_NORMAL
- en: The reason for the rise of text messaging as a communication platform is that
    phone calls are interruptive, inconvenient, and inefficient. They don't allow
    for multitasking-when you're using your smartphone to make a call, it cannot be
    used for anything else. While in the past we used to just pick up the phone to
    solve a problem, now we start with text-based messages, and then escalate to voice.
  prefs: []
  type: TYPE_NORMAL
- en: Another significantly important reason for messaging adoption is that customers
    are demanding interaction where they already are.
  prefs: []
  type: TYPE_NORMAL
- en: Messaging and chat-related apps are rapidly gaining popularity over SMS, especially
    among younger people. Globally, 6 of the 10 top apps are messaging applications
    such as Facebook Messenger, WhatsApp, Telegram, and WeChat.
  prefs: []
  type: TYPE_NORMAL
- en: The main reason for this increased usage of messaging apps is that these don't
    count against monthly SMS limits, and if you're connected to Wi-Fi, these don't
    use up any data either. Further to that, there's also an emotional component,
    which enhances the overall conversation. Messaging has the feel of a real-time
    conversation. You know when your friends are active in the app and even when they're
    typing a response, which makes it an addictive and highly engaging medium to communicate
    with.
  prefs: []
  type: TYPE_NORMAL
- en: With this scenario in perspective, creating messaging bots that provide meaningful
    interaction with customers provides a cutting-edge advantage to any business,
    by using today's most common communication medium and also being where customers
    already are, on their messaging apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we''ll explore how we can write bots using various platforms,
    APIs, and SDKs in order to tackle some of today''s most interesting business problems,
    in steps that are easy to follow and at the same time fun to implement. Specifically,
    this chapter will dig into:'
  prefs: []
  type: TYPE_NORMAL
- en: Why bots matter and why you should get on the train
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why SMS still matters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Twilio as an SMS platform:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Twilio for Node.js
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Twilio account
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bare-bones Twilio Node.js template
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Core bot functionality on Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving SMS bot logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's not wait any further and get into the details. Have fun!
  prefs: []
  type: TYPE_NORMAL
- en: Why bots matter and why you should get on the train
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the broad sense of its definition, a bot is a piece of software that leverages
    artificial narrow intelligence to perform specific tasks in place of a human.
    Bots understand language to a certain extent and not just commands. Ultimately,
    they could learn from their interactions to get smarter and better.
  prefs: []
  type: TYPE_NORMAL
- en: In roughly two years time, 3.6 billion people (yes 3.6 billion) are projected
    to be using messaging apps--that's 90% of total Internet users, which is more
    people than could ever be served with a continuous thread of communication compared
    to more traditional platforms such as e-mail. Refer to the following link for
    more information:  [https://hbr.org/2016/09/messaging-apps-are-changing-how-companies-talk-with-customers](https://hbr.org/2016/09/messaging-apps-are-changing-how-companies-talk-with-customers)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Worldwide, consumers are now demanding messaging as a customer service option.
    It's not sufficient to have a customer service phone number where the customer
    can call you, but it's becoming almost a must that customers should be able to
    reach you through some kind of real-time messaging platform as well. Users are
    demanding fast-paced interaction and quick answers.
  prefs: []
  type: TYPE_NORMAL
- en: Recent studies found that messaging and chat were the highest rated contact
    methods for customer satisfaction. Refer to  [https://onereach.com/blog/45-texting-statistics-that-prove-businesses-need-to-start-taking-sms-seriously/](https://onereach.com/blog/45-texting-statistics-that-prove-businesses-need-to-start-taking-sms-seriously/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: According to recent polls ( [http://customerthink.com/7-data-backed-reasons-why-you-should-let-customers-text-customer-service/](http://customerthink.com/7-data-backed-reasons-why-you-should-let-customers-text-customer-service/)
    ), almost two-thirds of consumers are likely to have a positive perception of
    an organization that offers messaging or chat as a service channel. Nevertheless,
    by the end of 2016, roughly 40% of customer service centers will still be missing
    that opportunity to impress their customers. This translates not only into failing
    to impress your customers, but also as a loss of business opportunities. Customers
    are likely to be more loyal and stay with those organizations that are capable
    of interacting and engaging with them in faster and smarter ways. Refer to  [https://blog.kissmetrics.com/live-chat/](https://blog.kissmetrics.com/live-chat/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Consider your organization (corporate) has a messaging app that allows your
    customers to interact with you. Even though your app might be a great communication
    gateway, there's still no room for that communication channel to be lost. Say,
    for instance, a user forgets to turn on notifications or accidentally deletes
    the app. The ability to seamlessly and easily communicate is suddenly gone.
  prefs: []
  type: TYPE_NORMAL
- en: However, using a personal messaging app (such as Skype, Facebook Messenger,
    WhatsApp, and so on) eliminates most roadblocks, allowing for companies to become
    part of the communication framework that users already know and love.
  prefs: []
  type: TYPE_NORMAL
- en: With messaging apps, there are no forms, no downloads, no new platforms. The
    customer can use the interface that they are already familiar with to instantly
    engage with your organization. The user can use natural language to purchase a
    ticket, download a boarding pass, or ask a question. Moreover, given that the
    user is highly unlikely to stop using the messaging app, your organization can
    follow up with updates, surveys, and other notifications through the messaging
    app that the user already knows and loves.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to understand this better, say when a consumer asks a question, the
    bot should be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use natural language processing to understand the intent of the question
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gather relevant details from the company's website, FAQs, or knowledge base,
    or even trusted external sites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sift through that information to find the most likely answer to the customer's
    intent of the question
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Respond back to the customer more or less in a similar way as a human would
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There will surely be cases where bots might encounter situations that require
    the nuance and analytical thinking of a human. When they do, they can escalate
    to an agent, passing along the context they've gathered during the interaction
    to ensure a seamless customer experience. In principle, this should be totally
    transparent for the end user.
  prefs: []
  type: TYPE_NORMAL
- en: As technology continues to advance, Gartner predicts that by 2018, bots should
    be able to recognize customers by face and voice rather seamlessly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bots could also be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Allow customers to make purchases without leaving the messaging app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offer personalized product suggestions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link users to relevant web pages such as customer product reviews
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initiate new interactions to re-engage users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow up with cart reminders and customer cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, help your organization to create an exceptional customer experience
    by providing robust data and actionable insights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why SMS still matters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Smart phones are becoming more important in today's world. Arguably, they are
    almost an extension of yourself. If you lose your phone today, you are in trouble.
    Everything from e-mails, calendar, messaging, banking, and even your wallet are
    somehow linked to your phone.
  prefs: []
  type: TYPE_NORMAL
- en: In today's vibrant, dynamic, and always connected society, having access to
    vast amounts of information at your fingertips through your phone can be a blessing,
    but it can also be a curse.
  prefs: []
  type: TYPE_NORMAL
- en: Busy professionals nowadays have to deal with hundreds of e-mails on a daily
    or weekly basis, plus also many messages and notifications from social networks
    such as Twitter and LinkedIn. Keeping up with this sheer volume of messages can
    be overwhelming.
  prefs: []
  type: TYPE_NORMAL
- en: But what if phones could actually help us alleviate some of this information
    overload by notifying us of important things or allowing us to perform custom
    actions based on SMS or voice commands? Imagine if we were able to automate certain
    processes through messaging or voice. Wouldn't that be awesome?
  prefs: []
  type: TYPE_NORMAL
- en: Before social networks took off, **Short Message Service** (**SMS**) was the
    most common way to exchange short messages between people.
  prefs: []
  type: TYPE_NORMAL
- en: According to Wikipedia, even though SMS is still strong and growing, social
    networking messaging services such as Facebook Messenger, WhatsApp, Skype, and
    Viber, available on smart phones, are increasingly being used to exchange short
    messages.
  prefs: []
  type: TYPE_NORMAL
- en: Generally speaking, SMS and voice enabled solutions are platform specific and
    cannot be customized; however, there's a platform that was designed from the ground
    up with developers in mind, which allows anyone with development skills to create
    custom messaging and voice enabled solutions. Welcome to Twilio! refer to  [https://www.twilio.com/](https://www.twilio.com/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Twilio as an SMS platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Twilio is a messaging, voice, video, and authentication API for every application.
    It has helper libraries or SDKs in many different programming languages that help
    developers create apps that can leverage the power of voice and messaging.
  prefs: []
  type: TYPE_NORMAL
- en: Despite that, SMS is still very strong and widely used in enterprise development
    for things such as marketing, **Customer Relationship Management** (**CRM**) automation,
    real-time alert notifications, and two-step verification of a user's identify.
  prefs: []
  type: TYPE_NORMAL
- en: The significance of SMS usage in the business world is incredibly important
    given that the technology is considered mature, widely spread, proven, and reliable.
  prefs: []
  type: TYPE_NORMAL
- en: Twilio's services are accessed over HTTP(S) through a RESTful API or helper
    libraries. Its services are billed based on usage. The platform is based on **Amazon
    Web Services** (**AWS**) to host its telephony infrastructure and provide connectivity
    between HTTP and the **Public Switched Telephone Network** (**PSTN**), through
    its APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Twilio has recently extended its API support to Facebook Messenger, which coincides
    with the social networking company's introduction of support for bots on its Messenger
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll explore how to interact with Twilio's REST API using
    the Node.js helper library in order to build an SMS Messaging bot.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Twilio for Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Twilio provides a REST API, which allows developers to interact with its platform
    services, such as SMS. Even though the REST API is a great way to interact with
    Twilio services, there are official helper libraries for the most common programming
    languages of today, such as: PHP, ASP.NET (C#), Ruby, Python, Java, Salesforce
    (Apex), and, last but not least, Node.js.'
  prefs: []
  type: TYPE_NORMAL
- en: The Twilio Node.js helper library can be obtained from [https://www.twilio.com/docs/libraries/node](https://www.twilio.com/docs/libraries/node)
    . In order to get started, let's get Node.js installed.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and navigate to [https://nodejs.org](https://nodejs.org) and
    there on the main page you can download the version of Node.js that corresponds
    to your platform.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Twilio for Node.js](img/image00152.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The steps that follow will be based on installing Node.js on a Windows 64 Bit
    operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have selected a version, just run the installer and follow the installation
    steps. You'll first be presented with a Welcome screen and then you can click
    on the **Next** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Twilio for Node.js](img/image00153.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You'll be requested to accept the license terms and then click on the **Next**
    button again.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Twilio for Node.js](img/image00154.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Following that, the installer displays the default installation path, which
    you may opt to change or not.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Twilio for Node.js](img/image00155.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once the installation path has been defined, simply click on the **Next** button.
    The next step is to select what features will be installed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Twilio for Node.js](img/image00156.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It is highly recommended to leave all the features selected so everything can
    be installed. The npm package manager will be later required in order to install
    the Twilio Node.js helper library.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, click on the **Next** button and then the **Install** button, in order
    to finalize the installation process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Twilio for Node.js](img/image00157.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If there was a previous version of Node.js installed on your system, the installer
    will remove previous older files and then update the system with the newest files.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Twilio for Node.js](img/image00158.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Please note that on other platforms ( [https://nodejs.org/en/download/package-manager/](https://nodejs.org/en/download/package-manager/)
    ), the installation process and screens might differ (such as on a Mac); however,
    it should be pretty straightforward and easy to follow along by going through
    the installation steps.
  prefs: []
  type: TYPE_NORMAL
- en: Once Node.js has been installed, the next thing to do is to get the Twilio Node.js
    helper library installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do this, create a folder anywhere on your PC for this project,
    browse to this folder, and then open the Command Prompt or shell and type this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Just follow the steps requested. This will create the `package.json` file (you
    can refer to [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json)
    ) required for our project.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Twilio for Node.js](img/image00159.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the `package.json` file has been created, type in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will install the Twilio Node.js helper library and all its dependencies
    and save the reference on our `package.json` file. The Twilio library will be
    installed under the `node_modules` folder within the folder where your `package.json`
    file resides. We'll be using the awesome Atom editor ( [https://atom.io/](https://atom.io/)
    ) throughout this book. You may use any other editor of your choice, such as Sublime
    or Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Twilio for Node.js](img/image00160.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With this in place, we can technically start writing code. However, we first
    need to sign up for a Twilio account and get all set up with Twilio before we
    can send our first SMS. Let's explore how we can get this done.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Twilio account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to be able to send SMS using the Twilio API and Node.js helper library,
    we need to get a Twilio account set up and also purchase a disposable Twilio number.
  prefs: []
  type: TYPE_NORMAL
- en: Twilio is a pay-as-you-go service, which means that you'll need to set up an
    account and provide your credit card details in order to have enough credit, which
    will be used to pay for every SMS you send.
  prefs: []
  type: TYPE_NORMAL
- en: You'll also need to purchase a Twilio number, which is a regular but disposable
    phone number that will be used to send your messages.
  prefs: []
  type: TYPE_NORMAL
- en: Twilio numbers are available for many countries. They look like any other valid
    phone number you can think of. They are real phone numbers that you can dispose
    of when you no longer need them.
  prefs: []
  type: TYPE_NORMAL
- en: In order to set up a Twilio account, from your browser access the following
    site [https://www.twilio.com/](https://www.twilio.com/) . Then, click on the **SIGN
    UP** button.
  prefs: []
  type: TYPE_NORMAL
- en: The sign-up process is fairly straightforward, and is super easy to follow and
    complete. Just fill in a few fields that are required and you're done.
  prefs: []
  type: TYPE_NORMAL
- en: Once your Twilio account has funds, you'll need to purchase a disposable phone
    number.
  prefs: []
  type: TYPE_NORMAL
- en: You'll need to go to this location,  [https://www.twilio.com/user/billing](https://www.twilio.com/user/billing)
    , in order to add funds to your account. In order to do that, click on the **Ad
    Funds** link in red. Make sure that you have logged into Twilio before accessing
    this URL.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Twilio account](img/image00161.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With funds in your account, let's set up a Twilio number. This will be a real
    phone number, which you can delete at any moment. You may choose from which country
    and city your number will belong to.
  prefs: []
  type: TYPE_NORMAL
- en: Then click on the **Buy a Number** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Twilio account](img/image00162.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have clicked on the **Buy a Number** button, the following pop-up
    screen will be shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Twilio account](img/image00163.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: On this screen, you have the option to choose which country you would like to
    get the number from and also from which geographical location.
  prefs: []
  type: TYPE_NORMAL
- en: The number could be used for **Voice**, **SMS**, and even **MMS**. For now,
    we are simply interested in making sure that the **SMS** option is ticked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have purchased your Twilio number, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Twilio account](img/image00164.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With this in place, we are ready to start writing our Node.js code.
  prefs: []
  type: TYPE_NORMAL
- en: Bare-bones Twilio Node.js template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to start writing our code, let's create a new file in the same location
    as our `package.json` file called `app.js`. You may create this new file directly
    from the editor you are using.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file has been created, we''ll need to include a reference to the Twilio
    Node.js library that we installed through npm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Node.js world, this is the equivalent of an import in Java or using
    statements in C#. Now let''s move on to see how we can actually send an SMS using
    the Twilio Node.js helper library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll need two variables to store our Twilio **Account SID** and our **Auth
    token**. Both values can be obtained when you log in to your Twilio account and
    browse to the developer console: [https://www.twilio.com/console](https://www.twilio.com/console)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bare-bones Twilio Node.js template](img/image00165.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have provided the correct values to the `accountSid` and `authToken` variables,
    we''ll need to create an instance of the `twilio.RestClient` class in order to
    be able to send an SMS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'With our instance created, we can go ahead and send our SMS using Twilio:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Basically, the SMS is sent by invoking the `messages.create` method from the
    Twilio `client` instance.
  prefs: []
  type: TYPE_NORMAL
- en: This method expects an object that describes the properties of the SMS, such
    as the `body, to` (receiver number), `from` (sender number), call back function
    which describes an error `err` (if an error actually happens), and the contents
    of the posted `message`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is all that is required in order to send an SMS using Twilio. Let''s have
    a look at all the code now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to execute this code, execute this command from the Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will send the SMS to the number indicated. We can see the `message.sid`
    of the SMS sent (which was sent back as a response from the Twilio service) by
    looking at the Command Prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '![Bare-bones Twilio Node.js template](img/image00166.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Please notice that if the destination number you will be messaging is an international
    (non-US) number, you'll need to enable certain permissions to allow Twilio to
    perform that action.
  prefs: []
  type: TYPE_NORMAL
- en: 'These permissions can be checked and configured at this URL: [https://www.twilio.com/console/voice/settings/geo-permissions](https://www.twilio.com/console/voice/settings/geo-permissions)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Core bot functionality on Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've implemented and have a working Twilio Node.js template, which
    can send SMS, let's have a look at expanding our code to do more.
  prefs: []
  type: TYPE_NORMAL
- en: We'll need to be able to somehow hook and listen to incoming SMS and have some
    very basic **Natural Language Processing (NLP)**, in order to send answers based
    on the input received.
  prefs: []
  type: TYPE_NORMAL
- en: Listening to incoming SMS requires setting up in our Node.js app a URL that
    can be configured within your Twilio account as a Request URL. This Request URL
    will be used by Twilio to push incoming messages on your purchased Twilio number,
    to our Node.js bot app.
  prefs: []
  type: TYPE_NORMAL
- en: To make our bot publicly available, we'll publish it on Azure websites. Let's
    create a REST endpoint for our Node.js app, which we will use for listening to
    new messages. We'll be using the Express framework ([http://expressjs.com/](http://expressjs.com/))
    to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Express is a minimal and flexible Node.js web application framework that provides
    a robust set of features for web and mobile applications. It provides a thin layer
    of fundamental web application features such as routing and middleware.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first install the Express framework by running this command from the
    command line prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'A handy utility to have installed is Nodemon ([http://nodemon.io/](http://nodemon.io/)).
    This allows you to make changes to your code and it automatically restarts the
    Node.js app. You can install Nodemon by running this command from the prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of running the app with the node, you can now run it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With the Express framework installed, let''s expand our current code to create
    a REST endpoint, which we can then use to hook up Twilio to push incoming messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Before we can hook up our bot app to Twilio in order to process incoming messages,
    let's first get all the tooling wired up, so that we can publish our app as it
    is to Azure websites.
  prefs: []
  type: TYPE_NORMAL
- en: We'll need to install the Azure **Command Line Interface** (**CLI**) ([https://azure.microsoft.com/en-us/documentation/articles/xplat-cli-install/](https://azure.microsoft.com/en-us/documentation/articles/xplat-cli-install/))
    in order to push our app to Azure. We'll also need to sign up for Azure if we
    don't have an account.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can do that by visiting: [https://azure.microsoft.com](https://azure.microsoft.com)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: '![Core bot functionality on Azure](img/image00167.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have your account set up with Azure, you may install the Azure CLI
    using the respective installer for your platform or as an npm package following
    these instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using npm, the Azure CLI can be installed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Once you have installed the Azure CLI, let's deploy the app as it is to Azure
    in order to make sure all our tooling is correctly wired up.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do that, run the Azure CLI and `login` to Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the command has been executed, you''ll see the following welcome message
    where you''ll be asked to enable data collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Core bot functionality on Azure](img/image00168.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You may opt-in or not, the choice is yours and this doesn't affect your bot
    app development or usage of Azure at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve chosen your option, you''ll be prompted to enter the code displayed
    on the command line on this URL, [http://aka.ms/devicelogin](http://aka.ms/devicelogin)
    , and then authenticate with your Microsoft Account, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Core bot functionality on Azure](img/image00169.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, I've blanked out the Azure subscription keys and
    information that corresponds to my Azure account.
  prefs: []
  type: TYPE_NORMAL
- en: With this in place, your Azure CLI is all set. The next thing to do is to deploy
    the app to Azure using the CLI. Let's see how this can be done.
  prefs: []
  type: TYPE_NORMAL
- en: Run this command in order to create the website on Azure. Make sure you're still
    in the root directory of your app. Create the App Service app resource in Azure
    with a unique app name with the next command. Your web app's URL will be `http://<appname>.azurewebsites.net`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we''ll call our App Service app on Azure: `NodeBotSite` (you
    are free to choose any other name if this has been taken). Let''s enter the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You'll be prompted to select the Azure region where your site will be hosted
    on. Feel free to choose the one closest to your location.
  prefs: []
  type: TYPE_NORMAL
- en: '![Core bot functionality on Azure](img/image00170.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve selected the region, Azure will create your site and you''ll see
    the following details via the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Core bot functionality on Azure](img/image00171.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Change the port from `8080` within the app to `process.env.port`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nodemon doesn't seem to play too well with Azure; therefore, if you leave Nodemon
    as a dependency on your `package.json` file, you might run into problems when
    deploying the app to Azure. In light of this, remove from your package.json file
    the dependency that references Nodemon, before deploying to Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save your changes on both your `package.json` and `app.js` files, and then
    use the git command to deploy your app to Azure, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: After you type these commands, if you've never set up git/FTP deployment credentials
    for your Azure subscription, you'll also be prompted to create them. You can also
    enter these credentials on the Azure Portal.
  prefs: []
  type: TYPE_NORMAL
- en: Once the git push command has finished, your app will be published on Azure
    and it is ready to be used.
  prefs: []
  type: TYPE_NORMAL
- en: '![Core bot functionality on Azure](img/image00172.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to view it, open your browser and navigate to the site, receive this
    URL: [http://nodebotsite.azurewebsites.net/receive](http://nodebotsite.azurewebsites.net/receive)
    . You should then see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Core bot functionality on Azure](img/image00173.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To make updates to your Node.js web app running on Azure, just run `git add`,
    `git commit`, and `git push` like you did when you deployed it first.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Azure all wired up, the next step is to configure this URL: [https://www.twilio.com/console/phone-numbers/incoming](https://www.twilio.com/console/phone-numbers/incoming)
    , on your voice number''s dashboard within your Twilio account, and then click
    on your purchased Twilio number. Edit the **Messaging** | **Request URL** for
    your Twilio number and click on the **Save** button.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Core bot functionality on Azure](img/image00174.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now your Twilio is tied to your Azure app, receive URL, which will be used to
    receive incoming SMS.
  prefs: []
  type: TYPE_NORMAL
- en: With all these setup steps in place, we can now focus on adding the receive
    logic for our Twilio bot app.
  prefs: []
  type: TYPE_NORMAL
- en: Receiving SMS bot logic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we've implemented the basic bare-bones template for our Twilio bot app
    and also made all the necessary configurations in order to have our solution wired
    up with Twilio and also easily deployable to Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now explore how we can make our bot reply to incoming messages. In order
    to do this, we''ll need to have a POST endpoint on our Node/Express app. Let''s
    examine the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We can see here that in order to reply, we create a **TwiML** response and send
    that as the response of POST / receive the HTTP endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: TwiML is an XML markup language, which is simply a set of instructions you can
    use to tell Twilio what to do when you receive an incoming call or SMS.
  prefs: []
  type: TYPE_NORMAL
- en: Twilio makes HTTP requests to your application just like a regular web browser.
    By including parameters and values in its requests, Twilio sends data to your
    application that you can act upon before responding. This is what we are actually
    doing on this, receive endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Twilio sends the following parameters with its request as POST parameters or
    URL query parameters, depending on which HTTP method you've configured.
  prefs: []
  type: TYPE_NORMAL
- en: When we receive an SMS or a phone call on our Twilio number, Twilio will fetch
    the URL associated with that phone number and perform an HTTP request to that
    URL. This URL will contain an XML response with markup instructions, which indicate
    what tasks Twilio needs to execute. Some of these tasks can be to record the call,
    play a message, prompt the caller to enter some digits, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, what our bot is doing is simply returning a one-line sentence.
    In short, the preceding example code is simply returning this XML back to Twilio
    as a response, so that Twilio can actually generate an SMS response out of it,
    and send it back to the sender''s phone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it is super simple to tell Twilio to execute a specific action
    using TwiML. The markup language is made up of verbs highlighted in blue, which
    represent actions that Twilio will execute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the TwiML verbs available at the time of the writing are: Say, Play,
    Dial, Record, Gather, Sms, Hangup, Queue, Redirect, Pause, Conference, Reject,
    and Message.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete details on how to use these TwiML verbs can be found here: [https://www.twilio.com/docs/api/twiml](https://www.twilio.com/docs/api/twiml)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: What we've done through the code is to use the Twilio Node.js helper library
    to generate the TwiML as a response, without explicitly creating the XML response
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: So our bot starts to finally take shape. It can listen to messages and send
    a response back. But, how does the bot know how to act to certain inputs? In order
    to achieve that, the bots need to be able to understand the parameters of the
    incoming message and be able to act upon it.
  prefs: []
  type: TYPE_NORMAL
- en: Twilio sends several parameters with its request as POST parameters or URL query
    parameters, depending on which HTTP method you've configured on the Twilio number's
    dashboard for incoming SMS. Please take a moment to go through and understand
    this list thoroughly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the prominent properties that Twilio uses:'
  prefs: []
  type: TYPE_NORMAL
- en: '**From:** The phone number that sent this message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**To**: The phone number of the recipient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Body**: The text body of the message. It can be up to 1,600 characters long.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MessageSid**: A 34 character unique identifier for the message. It may be
    used to later retrieve this message from the REST API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SmsSid**: The same value as MessageSid. It is deprecated and included for
    backward compatibility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The full list of parameters can be found here: [https://www.twilio.com/docs/api/twiml/sms/twilio_request](https://www.twilio.com/docs/api/twiml/sms/twilio_request)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: So in order to write some logic that acts upon the input of the nature of the
    messages received, it is necessary to inspect the value of the parameters that
    are received as part of the `request.body` object. These parameters will have
    properties on this object.
  prefs: []
  type: TYPE_NORMAL
- en: 'So for instance, if we want to know from which number the message came from,
    we would have to do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The actual received text message itself would be obtained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Knowing from where the message originates and the actual contents, we can then
    build some logic to internally give the bot some sense of what to do with the
    input received and act upon it.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's add some core functionality, which for now we will call `BotBrain`
    and we don't really know what it will do. This will give us an answer based on
    the input we provide to it, independently of which bot we will be building.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we''ll be creating the logic of this `BotBrain`, and throughout
    the chapters keep adding subsequent and additional functionality to it, but for
    now, let''s assume this `BotBrain` gives the bot the answer required based on
    the input received:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As we can see now, the bot will respond to the incoming request based on the
    results the `BotBrains` will determine, by analyzing the properties of the `request.body`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've set the foundations on how our bot will be deployed,
    configured, and set up. We've also created a bare-bones template that we will
    use throughout the rest of the chapters in this book, in order to add more exciting
    functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: We've also explored some of the key components that will make it work from an
    infrastructure point of view and how we can host it on Azure, Microsoft's awesome
    cloud platform.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond this, we've explained why bots matter and why they are a key component
    for your business to be aware of and considered in your strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Further to that, we've explored the basics of Twilio as a messaging platform
    and started to scratch the surface of what is possible to achieve with it.
  prefs: []
  type: TYPE_NORMAL
- en: In the chapters to follow, we'll be adding many more layers and interacting
    with other APIs and services; however, we'll still use Twilio as a backup messaging
    provider by also using SMS.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully you've got an idea of what to expect coming ahead and also this has
    gotten you excited in our quest to add more layers and logic to our bot.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading!
  prefs: []
  type: TYPE_NORMAL
