- en: Chapter 5. Testing Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 测试模式
- en: 'This chapter will cover testing patterns that ensure our code is easy to maintain.
    With these patterns, you will learn how to implement regression testing—a method
    to identify if the new code breaks the old code before the code goes into production.
    Building tests is crucial to maintain code and collaborate with others. You will
    learn the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍确保我们的代码易于维护的测试模式。通过这些模式，您将学习如何实现回归测试——一种在代码投入生产之前识别新代码是否破坏旧代码的方法。构建测试对于维护代码和与他人协作至关重要。您将学习以下主题：
- en: Behavior tests
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行为测试
- en: Unit tests
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Testing in Meteor is still under heavy development, but the functions that we
    will cover are basic and are unlikely to change.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在Meteor中进行测试仍在积极开发中，但我们将要介绍的功能是基本的，不太可能发生变化。
- en: Behavior tests
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行为测试
- en: 'Behavior tests are known as end-to-end tests too. The purpose of a behavior
    test is simple: it makes sure that a feature of the project is working. A feature
    refers to the business logic behind the application. For example, a feature of
    our current project is viewing a list of products in our landing page. Another
    feature is the ability to add a variable quantity of products to the order.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 行为测试也被称为端到端测试。行为测试的目的是简单的：确保项目的某个功能正在工作。功能指的是应用程序背后的业务逻辑。例如，我们当前项目的功能之一是在我们的着陆页中查看产品列表。另一个功能是能够将可变数量的产品添加到订单中。
- en: To run behavior tests in Meteor, we essentially need to build a robot that can
    visit our website and try to make these features work. While this sounds complex,
    the Meteor Velocity project simplifies much of this when paired with Cucumber.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Meteor中运行行为测试，我们实际上需要构建一个可以访问我们的网站并尝试使这些功能工作的机器人。虽然这听起来很复杂，但与Cucumber结合时，Meteor
    Velocity项目简化了其中许多操作。
- en: Velocity is a project that sets the stage for other testing frameworks to use.
    It works by creating mirrors of the project where tests can run.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Velocity是一个为其他测试框架奠定基础的项目。它通过创建测试可以运行的项目的镜像来实现。
- en: Cucumber is a specification-by-example testing framework. It is meant to describe
    application features in plain English before they are programmed. In a collaboration
    setting, these tests are the ones that matter most because they make sure that
    the application is behaving as expected. We will use the Cucumber package now
    because it is one of the only testing frameworks that support behavior tests that
    are currently available to Meteor.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Cucumber是一个基于示例的测试框架。它的目的是在编程之前用简单的英语描述应用程序功能。在协作环境中，这些测试是最重要的，因为它们确保应用程序按预期运行。我们现在将使用Cucumber包，因为它是目前唯一支持行为测试的测试框架之一。
- en: 'To build tests, we first need to install the `xolvio:cucumber` package:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建测试，我们首先需要安装`xolvio:cucumber`包：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This package automatically installs Velocity and all other required packages.
    Now run the Meteor command to start up the server. The following two things are
    going to happen:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此包会自动安装Velocity以及所有其他必需的包。现在运行Meteor命令以启动服务器。以下将发生以下两件事：
- en: A new browser window will open if there are any tests to run
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有要运行的测试，将打开一个新浏览器窗口
- en: The current project will have a dot on the top-right side
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前项目将在右上角有一个点
- en: The new browser window is what we call a **mirror** and is the client that is
    going to run all the behavior tests that we define. While this is great, it is
    annoying to have a second browser window open and close every time we run the
    Meteor command.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称之为**镜像**的新浏览器窗口是运行我们定义的所有行为测试的客户端。虽然这很好，但每次运行Meteor命令时都打开和关闭第二个浏览器窗口很烦人。
- en: 'To get rid of the second browser window, we can use `phantomjs` to run tests.
    To do this, we will simply run the Meteor command with some settings:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要消除第二个浏览器窗口，我们可以使用`phantomjs`来运行测试。为此，我们将简单地使用一些设置运行Meteor命令：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: PhantomJS is a headless browser. A headless browser is a web browser (such as
    Safari and Chrome) without a **Graphical User Interface** (**GUI**). In other
    words, it's a browser for robots, and this is exactly what our robot needs to
    run our tests.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: PhantomJS是一个无头浏览器。无头浏览器是一个没有**图形用户界面**（**GUI**）的网页浏览器（如Safari和Chrome）。换句话说，它是一个为机器人设计的浏览器，这正是我们的机器人需要运行测试的。
- en: 'Let''s make a custom Meteor alias with this command. Open the `~/.bash_profile`
    directory with your favorite text editor. If you use Sublime Text 3, you can run
    the following command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用此命令创建一个自定义的Meteor别名。使用您喜欢的文本编辑器打开`~/.bash_profile`目录。如果您使用Sublime Text
    3，可以运行以下命令：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this file, add this line to the end of the document:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中，将此行添加到文档的末尾：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now completely quit your terminal, and then open it again. Go to your project
    and run the `devmeteor` command to start your project.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，完全退出您的终端，然后再次打开它。前往您的项目，并运行 `devmeteor` 命令以启动您的项目。
- en: Go to the project URL. Here, you will notice a blue circle on the top-right
    corner of the project. Click this to reveal the velocity test dashboard. Whenever
    tests fail, here you will see why they failed. All tests are rerun every time
    there is a change in the code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 前往项目URL。在这里，您将注意到项目右上角有一个蓝色圆圈。点击此按钮以显示velocity测试仪表板。每次测试失败时，您将在这里看到失败的原因。每次代码发生变化时，所有测试都会重新运行。
- en: '![Behavior tests](img/00003.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![行为测试](img/00003.jpeg)'
- en: 'Let''s start by building our first behavior test. In this test, we are going
    to check whether we can add items to the order. To do this, we need to program
    two key components:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从构建我们的第一个行为测试开始。在这个测试中，我们将检查我们是否可以向订单中添加项目。为此，我们需要编程两个关键组件：
- en: Features
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能
- en: Steps
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤
- en: '**Steps** are, basically, snippets of code in JavaScript or CoffeeScript that
    interpret the **feature**. Step snippets are automatically generated after writing
    a feature. Therefore, we need to start by writing the description of the feature.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤**基本上是JavaScript或CoffeeScript中的代码片段，用于解释**功能**。在编写功能后，步骤片段会自动生成。因此，我们需要首先编写功能的描述。'
- en: 'All our tests are going to be saved under the `/tests` directory. Behavior
    tests will always go under the `/cucumber` folder. At the time of this writing
    book, this has been mandatory because Velocity runs under these special directories
    only:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的测试都将保存在 `/tests` 目录下。行为测试将始终放在 `/cucumber` 文件夹下。在撰写本书时，这已经成为强制性的，因为Velocity仅在以下特殊目录下运行：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that the file ends in `.feature` and is located under the `/features`
    directory. Placing files under the `features` directory is mandatory as well for
    the testing suite to be able to identify your feature files.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，文件以 `.feature` 结尾，位于 `/features` 目录下。将文件放置在 `features` 目录下对于测试套件能够识别您的功能文件也是强制性的。
- en: 'This file is written in the Gherkin language. If you want to add comments,
    you can use the pound sign (`#`) just we do in CoffeeScript. The `Feature` keyword
    describes the feature; this can be anything as long as it helps you to identify
    what the feature is. After this, we can see three lines that describe the purpose
    of the feature. This description can also be anything you want since this does
    not affect the test, but it is common to use the following syntax to help identify
    whether the feature is useful or not:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件是用Gherkin语言编写的。如果您想添加注释，可以使用井号（`#`），就像我们在CoffeeScript中做的那样。`Feature` 关键字描述了功能；这可以是任何内容，只要它能帮助您识别功能即可。在此之后，我们可以看到三行，描述了功能的目的。这种描述可以是您想要的任何内容，因为这不影响测试，但通常使用以下语法来帮助识别功能是否有用：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, we will find the `Background` and `Scenario` keywords. Both are a list
    of actions that lead to a result. For each feature, there can be multiple scenarios
    that test the different parts of the feature. The `Background` keyword defines
    a list of actions to be taken before running the ones under the `Scenario` keyword.
    Try to keep backgrounds short and simple, and keep in mind that they will run
    for every scenario.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将找到 `Background` 和 `Scenario` 关键字。两者都是一系列导致结果的操作。对于每个功能，可以有多个场景来测试功能的各个部分。`Background`
    关键字定义了在运行 `Scenario` 关键字下的操作之前要执行的操作列表。尽量保持背景简短且简单，并记住它们将为每个场景运行。
- en: Also, notice that we have an `@dev` keyword directly above the `Scenario` keyword;
    this keyword controls where `Scenario` is going to run. If you do not include
    a keyword, it will only run when you run `meteor --test` in your terminal. If
    you include `@dev`, the test will run every time you make changes to your web
    application. Also, you can include `@ignore` to ignore the test completely.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，我们在 `Scenario` 关键字上方有一个 `@dev` 关键字；此关键字控制 `Scenario` 将在哪里运行。如果您不包含关键字，它只有在您在终端中运行
    `meteor --test` 时才会运行。如果您包含 `@dev`，则测试将在您对Web应用程序进行更改时每次运行。此外，您还可以包含 `@ignore`
    以完全忽略测试。
- en: 'The `Given`, `When`, `And`, and `Then` keywords are commands that run the steps
    in our test code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`Given`、`When`、`And` 和 `Then` 关键字是运行我们测试代码中的步骤的命令：'
- en: '`Given`: The purpose of `Given` is to put the app in a known state before any
    interaction occurs.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Given`：`Given` 的目的是在发生任何交互之前将应用程序置于已知状态。'
- en: '`When`: The purpose of `When` is to describe the key action the user performs.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`When`：`When` 的目的是描述用户执行的关键操作。'
- en: '`And`: The purpose of `And` is to write scenarios more fluently. They, basically,
    substitute `And` with the previous keyword.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`And`：`And`的目的在于更流畅地编写场景。它们基本上用前一个关键字替换`And`。'
- en: '`Then`: The purpose of `Then` is to observe and evaluate outcomes. This phrase
    will always make sure that the system has produced something.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Then`：`Then`的目的在于观察和评估结果。这个短语将始终确保系统已经产生了某些东西。'
- en: 'Now that we have programmed our first feature, let''s generate the steps that
    will execute the feature. Run your alias command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了第一个功能，让我们生成将执行该功能的步骤。运行您的别名命令：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once the server has started, Velocity will produce a command you can use to
    tail the projects'' `cucumber.log`. Open up a separate terminal without deactivating
    Meteor and run that command. It should look something like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦服务器启动，Velocity将生成一个可以用来跟踪项目`cucumber.log`的命令。在不关闭Meteor的情况下打开一个单独的终端并运行该命令。它应该看起来像这样：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now you will see something like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将看到类似以下内容：
- en: '![Behavior tests](img/00004.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![行为测试](img/00004.jpeg)'
- en: If you don't, you can restart the Meteor project without leaving `cucumber.log`.
    Here, we can see the JavaScript version of the steps that the feature is expecting.
    Let's rewrite these in CoffeeScript under the special `/step_definitions` directory.
    This directory must always be a sibling to the related `.feature` files.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不这样做，您可以在不离开`cucumber.log`的情况下重新启动Meteor项目。在这里，我们可以看到该功能期望的步骤的JavaScript版本。让我们在特殊的`/step_definitions`目录下重写这些步骤。此目录必须始终是相关`.feature`文件的兄弟目录。
- en: Copy the code snippets and create a new file under the `/tests/cucumber/features/cart/step_definitions/steps.coffee`
    directory. We are going to convert these snippets to CoffeeScript, since this
    is what we have been working with all along. You can do this quickly at [http://js2.coffee](http://js2.coffee).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 复制代码片段，并在`/tests/cucumber/features/cart/step_definitions/steps.coffee`目录下创建一个新文件。我们将把这些片段转换为CoffeeScript，因为我们一直在使用它。您可以在[http://js2.coffee](http://js2.coffee)快速完成此操作。
- en: Notice that each function passes a `callback` variable at the end and calls
    the `pending()` function. When tests run, this indicates that the function has
    not been built yet and appears as pending in the Cucumber log. We can remove the
    `callback` variable after we have finished working with the function. Notice that
    arguments are passed as well.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到每个函数都在最后传递一个`callback`变量并调用`pending()`函数。当测试运行时，这表明函数尚未构建，并在Cucumber日志中显示为挂起。我们在完成与函数的工作后可以移除`callback`变量。注意，也会传递参数。
- en: 'Running tests with this code will not work; we need to initialize the test
    properly. To do this, we begin by using CoffeeScripts'' `do` function and attaching
    the commands to the `module.exports` function. You need to do this for every test
    file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此代码运行测试将不会工作；我们需要正确初始化测试。为此，我们首先使用CoffeeScripts的`do`函数并将命令附加到`module.exports`函数。您需要为每个测试文件执行此操作：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now that the tests are actually running, we can dive deeper. The first function
    that we will address is `Given`. `Given` needs to make sure that the user is completely
    new and has no active order. To do this, we are going to use **fixtures**. Fixtures
    are `Meteor.methods` exclusively available in testing. We can use these methods
    to clear our database or add seed data. Let''s start by making a fixture that
    ensures that the user is anonymous and another fixture that clears all the orders:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在测试实际上正在运行，我们可以深入了解。我们将首先解决的函数是`Given`。`Given`需要确保用户是完全新的并且没有任何活跃的订单。为此，我们将使用**固定装置**。固定装置是仅在测试中可用的`Meteor.methods`。我们可以使用这些方法来清除我们的数据库或添加种子数据。让我们首先创建一个确保用户是匿名的固定装置，以及一个清除所有订单的固定装置：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we can call these methods in the `Given` function (or any other function)
    using the `@server.call` function:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`Given`函数（或任何其他函数）中使用`@server.call`函数调用这些方法：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Notice that we are using `@server`, but we can use `@client` too since this
    is a call to `Meteor.method`. Now let''s program `When`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们正在使用`@server`，但我们可以使用`@client`，因为这是一个对`Meteor.method`的调用。现在让我们编写`When`：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `@browser` object gives access to an instance of webdriver. This means that
    we can use the webdriver functions to simulate user clicks, inspect elements,
    and browse the Web. Notice that we can require NPM modules through the `require`
    function as well. In this case, we will require the `url` module to help identify
    routes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`@browser`对象提供了webdriver实例的访问权限。这意味着我们可以使用webdriver函数来模拟用户点击、检查元素和浏览网络。注意，我们也可以通过`require`函数要求NPM模块。在这种情况下，我们将要求`url`模块来帮助识别路由。'
- en: 'The first `When` function requires a single argument defined by the regular
    expression. In this case, it is the `path` variable. Arguments will always be
    listed one by one as they are defined in the regular expression, and they will
    end with the callback function (which we do not need to use): `(arg1, arg2, arg3,
    callback) ->`.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`When`函数需要一个由正则表达式定义的单个参数。在这种情况下，它是`path`变量。参数将按它们在正则表达式中定义的顺序逐个列出，并以回调函数（我们不需要使用）结束：`(arg1,
    arg2, arg3, callback) ->`。
- en: The second `When` function needs to wait for the DOM to load before acting on
    it. To do this, we will use the `waitForExist` and `waitForVisible` functions.
    If the elements do not render, then the test will fail due to a timeout in this
    function. Remember that if you ever want to see what the test is doing, you can
    browse to your mirror.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个`When`函数需要在对其进行操作之前等待DOM加载。为此，我们将使用`waitForExist`和`waitForVisible`函数。如果元素没有渲染，则由于该函数中的超时，测试将失败。记住，如果你想要查看测试正在做什么，你可以浏览到你的镜像。
- en: 'You can find a full list of the available webdriver functions at [http://webdriver.io/api.html](http://webdriver.io/api.html),
    but here is a list of the ones you will use the most:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://webdriver.io/api.html](http://webdriver.io/api.html)找到可用的webdriver函数的完整列表，但这里列出了你将最常使用的几个：
- en: '| Function | Use |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 函数 | 使用 |'
- en: '| --- | --- |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `waitForExist(selector[,timeout,reverse])` | Default timeout: `500`, reverse:
    `false`.This waits for an element to render on the DOM. Setting the `reverse`
    flag to `true` will instead wait for the element to stop existing. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `waitForExist(selector[,timeout,reverse])` | 默认超时时间：`500`，反向：`false`。这等待一个元素在DOM上渲染。将`reverse`标志设置为`true`将等待元素停止存在。|'
- en: '| `waitForVisible(selector[,timeout,reverse])` | Default timeout: `500`, reverse:
    `false`.This waits for an element to be visible (checks that the display CSS property
    is not set to any, that the element is not outside the viewport, and that the
    `opacity` CSS property is not set to `0`). Setting the `reverse` flag to `true`
    will instead wait for the element to be invisible. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `waitForVisible(selector[,timeout,reverse])` | 默认超时时间：`500`，反向：`false`。这等待一个元素变得可见（检查显示CSS属性是否未设置为任何值，元素是否不在视口中，以及`opacity`CSS属性是否未设置为`0`）。将`reverse`标志设置为`true`将等待元素变得不可见。|'
- en: '| `click(selector)``doubleClick(selector)``leftClick(selector)``rightClick(selector)`
    | This clicks an element. Can take in a CSS selector. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `click(selector)``doubleClick(selector)``leftClick(selector)``rightClick(selector)`
    | 这将点击一个元素。可以接受CSS选择器。|'
- en: '| `setValue(selector,values)``addValue(selector,values)` | This sends a sequence
    of keystrokes to an element. Can use unicode characters as well to simulate things
    such as backspace and arrow keys. The `addValue` function will append to a set
    value. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `setValue(selector,values)``addValue(selector,values)` | 这向元素发送一系列按键。也可以使用Unicode字符来模拟诸如退格键和箭头键等操作。`addValue`函数将附加到一个已设置的值上。|'
- en: '| `getText(selector)``getValue(selector)` | This gets the node text or input
    value. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `getText(selector)``getValue(selector)` | 这将获取节点文本或输入值。|'
- en: '| `getCssProperty(selector,property)``getAttribute(selector,attribute)` | This
    gets data on a CSS property or DOM element attribute. The `property` variable
    will return an object instead of a string. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `getCssProperty(selector,property)``getAttribute(selector,attribute)` | 这将获取CSS属性或DOM元素属性的数据。`property`变量将返回一个对象而不是字符串。|'
- en: '| `then(function(valueFromGet))` | This uses data obtained from any `get` function.
    The first parameter is always the value of the `get` function. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `then(function(valueFromGet))` | 这使用从任何`get`函数获得的数据。第一个参数总是`get`函数的值。|'
- en: 'Now let''s build our `Then` function and use **Chai** to evaluate that everything
    proceeded as expected:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们构建我们的`Then`函数，并使用**Chai**来评估一切是否按预期进行：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here, we have used the `then` function to work with the value from the `.quantity`
    node. We use Chai to check whether the value obtained is correct. The list of
    Chai functions is long, and you will find yourself using most of them. They are
    easy to guess though! You can find all of these functions here: [http://chaijs.com/api/bdd](http://chaijs.com/api/bdd).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了`then`函数来处理`.quantity`节点的值。我们使用Chai来检查获取的值是否正确。Chai函数的列表很长，你将发现自己会使用它们中的大多数。它们很容易猜测！你可以在这里找到所有这些函数：[http://chaijs.com/api/bdd](http://chaijs.com/api/bdd)。
- en: Unit tests
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: Unit tests are much easier to build than behavior tests. These tests make sure
    that only a section of the web application is working correctly, such as `Meteor.method`
    or a template helper.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试比行为测试更容易构建。这些测试确保只有Web应用程序的一部分工作正确，例如`Meteor.method`或模板辅助函数。
- en: Unit tests make it quicker to find bugs in broken behavior tests. They should
    be used mostly in parts that you know can break easily, such as a publisher or
    a particular helper.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试使查找损坏行为测试中的错误更快。它们应该主要用于容易损坏的部分，例如发布者或特定的辅助工具。
- en: 'To run unit tests, we are going to use the `sanjo:jasmine` package:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行单元测试，我们将使用`sanjo:jasmine`包：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now create two directories: `/jasmine/client/integration` and `/jasmine/server/integration`.
    These are the special directories where `jasmine` runs tests. Let''s build a quick
    test for the `products` publisher:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建两个目录：`/jasmine/client/integration` 和 `/jasmine/server/integration`。这些是`jasmine`运行测试的特殊目录。让我们为`products`发布者快速构建一个测试：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Jasmine is simple. First, you use the `describe` function to describe the object
    of the feature, and then you use the `it` function to explain each part of the
    feature that should work. It is common to divide the evaluating function into
    three blocks: `SETUP`, `EXECUTE` and `VERIFY`. At setup, we make sure that everything
    is ready for the test to run, then we execute a series of functions, and finally,
    we use the Chai expressions to verify whether the test passes or fails.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Jasmine很简单。首先，您使用`describe`函数描述功能对象，然后使用`it`函数解释功能中应该工作的每个部分。通常将评估函数分为三个块：`SETUP`、`EXECUTE`和`VERIFY`。在设置阶段，我们确保一切准备就绪以便测试运行，然后执行一系列函数，最后使用Chai表达式验证测试是否通过或失败。
- en: Unit tests are great for testing peculiarities in your code that users might
    not see reflected visually. Have a look at the Jasmine documentation at [http://jasmine.github.io/2.3/introduction.html](http://jasmine.github.io/2.3/introduction.html)
    for a collection of great examples.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试非常适合测试代码中的特殊之处，这些特殊之处用户可能看不到在视觉上反映出来。请查看Jasmine文档中的[http://jasmine.github.io/2.3/introduction.html](http://jasmine.github.io/2.3/introduction.html)，以获取一系列优秀的示例。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to build simple tests for our web application.
    In addition, we learned that they are a crucial part of the development process
    in order to maintain the application in both a team and nonteam setting. Behavior
    tests are the tests that make sure that the application is running all the features
    as expected, while unit tests are the tests that make sure that only particular
    weak spots are running as expected. Be careful with testing. While it is important
    to keep tests active for maintenance, it is more important to focus on the programming
    of the product. If you do not have time to write a full behavior test, write at
    least one unit test on a function that is critical for the web application to
    work.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何为我们的Web应用程序构建简单的测试。此外，我们还了解到，它们是团队和非团队环境中维护应用程序开发过程中的关键部分。行为测试是确保应用程序按预期运行所有功能的测试，而单元测试是确保特定弱点按预期运行的测试。在测试时要小心。虽然保持测试活跃以进行维护很重要，但更重要的是关注产品的编程。如果您没有时间编写完整的行为测试，至少为对Web应用程序运行至关重要的函数编写一个单元测试。
- en: In the next chapter, we are going to cover how to deploy our web application
    to a production quality server and how to identify errors produced by the application
    easily, once the application is running.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何将我们的Web应用程序部署到生产质量的服务器上，以及如何在应用程序运行后轻松识别应用程序产生的错误。
