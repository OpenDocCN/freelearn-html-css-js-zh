- en: Chapter 8. Extending Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now know how to use, build, and customize Bootstrap. We have explored most
    of the features and utilities of Bootstrap in various use cases and requirements.
  prefs: []
  type: TYPE_NORMAL
- en: However, on several occasions, you might feel that the styles and components
    offered by Bootstrap are not enough, and to create a high-end website with rich
    user experience, you might need some more features and built-in components that
    would help you design and generate responsive websites real quick and fast.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, there are a lot of extensions on top of Bootstrap available in
    the open source community for various aspects and requirements – for example themes,
    UI components, jQuery plugins, notifications, tables, and navigations.
  prefs: []
  type: TYPE_NORMAL
- en: To understand the scenario better, if you are into the jQuery world, you have
    of course used the extensions of jQuery UI ([https://jqueryui.com/](https://jqueryui.com/))—these
    are components based on standard and default jQuery and are made to enable you
    with a lot of more features and controls that default jQuery does not offer. Similarly,
    we have a lot of community extensions written on top of default Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is important to keep in mind that these extensions are developed by community
    members and any third-party vendors. Thanks to the community and persons who have
    developed these extensions and made available as open source license. However,
    the Bootstrap team does not take any responsibility on the performance and functionality
    of these extensions.
  prefs: []
  type: TYPE_NORMAL
- en: In this final chapter, we will explore a few selected extensions in order to
    make our Bootstrap-based application more feature-rich and powerful.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following extensions will be discussed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Extending the default Bootstrap theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and using a tree-view control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and using a **What You See Is What You Get** (**WYSIWYG**) editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Theme extension – Bootswatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is one of the largest free stores of themes developed on and using Bootstrap.
    Refer to their website [http://bootswatch.com/](http://bootswatch.com/), and you
    can see a number of free themes listed and available in this space.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The free themes are distributed under the MIT license. However, it would be
    good if you read the usage terms and conditions before using the files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to understand how to use them, we will download and use these themes.
    Let''s say, we will go ahead with the *United* theme—[http://bootswatch.com/united/](http://bootswatch.com/united/).
    There are two ways you can use this theme (or any other):'
  prefs: []
  type: TYPE_NORMAL
- en: By downloading the CSS files and directly using in your application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By downloading the LESS variables file and building and deploying it properly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will explore both the ways.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that Bootstrap also supports SASS preprocessors in addition to LESS. If
    you are used to using SASS, you can adapt SASS also instead of LESS. However,
    we will discuss the LESS ways in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the CSS files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To download the theme, you can go to the [http://bootswatch.com/united/](http://bootswatch.com/united/)
    URL and download the **bootstrap.min.css** and/or **bootstrap.css** options from
    the top navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading the CSS files](img/B03987_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Perform these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the CSS files and go to the `css` folder of Bootstrap under the `bs`
    folder in our application (refer to [Chapter 2](ch02.html "Chapter 2. Getting
    Started with Bootstrap"), *Getting Started with Bootstrap* to see the application
    folder structure).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the downloaded CSS files of *United* theme in this folder (you are essentially
    overwriting the existing CSS files here. So, it would be good if you take a backup
    of the original files).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the application in the browser, and you will see that the look and feel
    has been updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the LESS files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can imagine, in this method, we will download the LESS variables file
    and will use the build environment to generate the CSS files. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we download the LESS files (refer to the preceding screenshot) and copy
    them into our Bootstrap build environment, that is in the `D:\Bootstrap\node_modules\bootstrap\less`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Here also, we are overwriting the existing `variables.less` file. So if you
    are not under any source code control server, it would be better to take backups
    before overwriting the existing files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next steps are pretty obvious, we compile and build the project (the command
    `grunt dist`). Copy the CSS files into the final application deployment folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the application in the browser and see the new look and feel. It would
    look something similar to the following screenshot:![Using the LESS files](img/B03987_08_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new look of the popup dialog box is like this:![Using the LESS files](img/B03987_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here is the mobile device view:![Using the LESS files](img/B03987_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a similar way, you can download and use any of these freely available themes.
    However, as you have rightly guessed, downloading and using the LESS files (instead
    of CSS files) is a better approach.
  prefs: []
  type: TYPE_NORMAL
- en: A tree-view control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A tree-view (sometimes called as Outline view) control in HTML is generally
    used in order to represent hierarchical information. Each item of the view can
    have multiple subitems (or children) and each of the subitems can further have
    multiple children. Also, this hierarchy can go on up to any level. Each item can
    be expanded to show the child items, and can be collapsed to hide them. One of
    the most commonly used tree view is the Windows Explorer, where all the folders
    and subfolders (and corresponding files) are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of tree-view control built on Bootstrap. Such a control is
    not by default available in the Bootstrap distribution, and of course, you don't
    want to use just any other control in your web page, which might challenge your
    mobile device compatibility requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the community marketplace, a lot of such controls, components, and libraries
    are available. Should you require any such controls that are not available in
    the default Bootstrap distribution; it is always suggested to implement a control
    that is built on Bootstrap, rather than using any jQuery-based or any other JavaScript-based
    component. Even if you use such controls, make sure that they do not break the
    mobile compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter shows some of these examples to guide you how to use such controls
    that are built on top of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, we have taken this component, which is popular in the Bootstrap
    community: [https://github.com/jonmiles/bootstrap-treeview](https://github.com/jonmiles/bootstrap-treeview).
    Suppose, in the browser webpage, we are going to replace the panel-group view
    of the category list with a more appropriate rendering model—a tree view.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the HTML code for using the control; this replaces the whole panel-group
    HTML section where the category listing were also embedded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This simple line of HTML will do. Rest tricks are there is the JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have replaced the actual data embedded into the HTML elements
    into proper JSON data format in JavaScript. This method is of course better and
    suitable since you would want to invoke some AJAX or server-side call to pull
    the category list, which in turn returns the data in the JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have also added a small event handler (**onNodeSelected**) in order to change
    the caption of the right-hand side section. Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A tree-view control](img/B03987_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing the tree-view component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From the GitHub URL [https://github.com/jonmiles/bootstrap-treeview](https://github.com/jonmiles/bootstrap-treeview),
    download the ZIP archive. In the `dist` folder of this archive, we have two files—
    a JS file and another CSS file. Copy these two files in our application folder
    and include them in the HTML page. Here are the files we are talking about:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the tree-view component](img/B03987_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We have included these files into our `browse.html` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a normal convention, we include all additional JS files that are based on
    Bootstrap and extension of Bootstrap, after inclusion of the main Bootstrap JS
    file.
  prefs: []
  type: TYPE_NORMAL
- en: WYSIWYG editor and Font Awesome
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WYSIWYG is a very common and popular component where you expect that the users
    of the web page to enter some HTML and formatted content; this control is particularly
    essential in a **content management system** (**CMS**).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will demonstrate an editor that is built on Bootstrap and
    is mobile-ready. The editor we will be using is `bootstrap-wysiwyg`; you can explore
    this on the [http://mindmup.github.io/bootstrap-wysiwyg/](http://mindmup.github.io/bootstrap-wysiwyg/)
    page. We will replace the standard text area control in our **Contact Us** page
    with this editor in order to give a better user experience. Here is the HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the CSS code for our control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the JavaScript code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In a desktop system, our new page now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WYSIWYG editor and Font Awesome](img/B03987_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In a mobile device, this is the look of our new page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![WYSIWYG editor and Font Awesome](img/B03987_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the standard text area control to enter the comments has been
    replaced by a richer WYSIWYG editor. You should also note that, in case of mobile
    devices, we have made a number of toolbar buttons hidden; in this way, you can
    make some unimportant buttons unavailable in case of devices with lesser real
    estate.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and using the WYSIWYG component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to install, configure, and use the WYSWYG component, a few JS libraries
    need to be downloaded. The following are the prerequisites for the WYSIWYG component
    we are using.
  prefs: []
  type: TYPE_NORMAL
- en: The bootstrap-wysiwyg component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Download the bootstrap-wysiwyg component from the [https://github.com/mindmup/bootstrap-wysiwyg/](https://github.com/mindmup/bootstrap-wysiwyg/)
    GitHub page. However, you only need the main JS file, thus you can download only
    this file from [https://raw.githubusercontent.com/mindmup/bootstrap-wysiwyg/master/bootstrap-wysiwyg.js](https://raw.githubusercontent.com/mindmup/bootstrap-wysiwyg/master/bootstrap-wysiwyg.js).
    Copy this file into the application folder and include in the HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The jQuery hotkeys component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The WYSIWYG editor uses hotkeys (or shortcut keys) such as *Ctrl* +*B*, *Ctrl*
    + *U*, and *Ctrl* + *I* for standard operations. Thus, we need this library as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: You can download this from the [https://github.com/jeresig/jquery.hotkeys](https://github.com/jeresig/jquery.hotkeys)
    GitHub page. However, as for the earlier case, you only need the main JS file.
    Thus, you can download the [https://raw.githubusercontent.com/jeresig/jquery.hotkeys/master/jquery.hotkeys.js](https://raw.githubusercontent.com/jeresig/jquery.hotkeys/master/jquery.hotkeys.js)
    file only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy this file into the application folder and include in the HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Font Awesome
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Font Awesome is the iconic font suite designed to be used in Bootstrap projects.
    You can extend your look, feel, and user experience to a great extent using these
    CSS classes, and of course these are all device friendly.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about Font Awesome, refer to [http://fortawesome.github.com/Font-Awesome/](http://fortawesome.github.com/Font-Awesome/).
    Rather than downloading and installing this locally, we will use the file from
    CDN location. Thus, we write the following in our HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Thus, when all the dependencies and libraries are included, the preceding HTML
    and JavaScript code will render the WYSIWYG editor in your page. You have already
    seen the HTML and JS code, and also how the editor is rendered in your page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are some links from where you can explore more such components and libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://startbootstrap.com/bootstrap-resources/](http://startbootstrap.com/bootstrap-resources/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://bootstraphero.com/the-big-badass-list-of-twitter-bootstrap-resources](http://bootstraphero.com/the-big-badass-list-of-twitter-bootstrap-resources)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we explored a few components and resources to extend
    the default behavior of Bootstrap. By using the community-enabled libraries, you
    can get almost all the components you need in order to implement any website requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, you can see, in conjunction with these third-party resources, that the
    power and flexibility of Bootstrap has been enhanced and extended a lot, and with
    very minimal coding and implementation efforts, you can develop a full-featured
    mobile-friendly website.
  prefs: []
  type: TYPE_NORMAL
- en: As an additional information, you can check the mobile-friendliness of your
    website by using Google Webmaster tools, for example, [https://www.google.com/webmasters/tools/mobile-friendly/](https://www.google.com/webmasters/tools/mobile-friendly/).
  prefs: []
  type: TYPE_NORMAL
