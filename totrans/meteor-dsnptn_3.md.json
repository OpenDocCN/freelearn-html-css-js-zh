["```js\nmeteor\n\n```", "```js\n{\"_route\":\"/_globals/client/bootstrap/custom.bootstrap.json\"},\n{\n  \"modules\" : {\n    \"variables\": true,\n    \"mixins\": true,\n\n    \"normalize\": true,\n    \"print\": true,\n    \"glyphicons\": true,\n\n    \"scaffolding\": true,\n    \"utilities\": true,\n    \"type\": true,\n    \"code\": true,\n    \"grid\": true,\n    \"tables\": true,\n    \"forms\": true,\n    \"buttons\": true,\n\n    \"component-animations\": true,\n    \"dropdowns\": true,\n    \"button-groups\": true,\n    \"input-groups\": true,\n    \"navs\": true,\n    \"navbar\": true,\n    \"breadcrumbs\": true,\n    \"pagination\": true,\n    \"pager\": true,\n    \"labels\": true,\n    \"badges\": true,\n    \"jumbotron\": true,\n    \"thumbnails\": true,\n    \"alerts\": true,\n    \"progress-bars\": true,\n    \"media\": true,\n    \"list-group\": true,\n    \"panels\": true,\n    \"responsive-embed\": true,\n    \"wells\": true,\n    \"close\": true,\n\n    \"modals\": true,\n    \"tooltip\": true,\n    \"popovers\": true,\n    \"carousel\": true,\n\n    \"responsive-utilities\": true\n  }\n}\n```", "```js\n// /_globals/client/bootstrap/custom.bootstrap.import.styl\n\n...\n\n// Line #114\n$border-radius-base ?=       0px\n$border-radius-large ?=      0px\n$border-radius-small ?=      0px\n...\n\n// Line #156\n$btn-default-color ?=            #333\n$btn-default-bg ?=               #fff\n$btn-default-border ?=           $btn-default-color\n\n$btn-primary-color ?=            #fff\n$btn-primary-bg ?=               $brand-primary\n$btn-primary-border ?=           $btn-primary-bg\n\n$btn-success-color ?=            #fff\n$btn-success-bg ?=               $brand-success\n$btn-success-border ?=           $btn-success-bg\n\n$btn-info-color ?=               #fff\n$btn-info-bg ?=                  $brand-info\n$btn-info-border ?=              $btn-info-bg\n\n$btn-warning-color ?=            #fff\n$btn-warning-bg ?=               $brand-warning\n$btn-warning-border ?=           $btn-warning-bg\n\n$btn-danger-color ?=             #fff\n$btn-danger-bg ?=                $brand-danger\n$btn-danger-border ?=            $btn-danger-bg\n```", "```js\n@import \"_globals/bootstrap/client/custom.bootstrap.import.styl\"\n```", "```js\n//- /products/client/products.jade\n\ntemplate(name=\"products\")\n  div#products.template\n    header#promoter\n      h3 Your Brand\n```", "```js\n// /_globals/client/main.styl\n\nhtml, body, #__flow-root, #__flow-root > .template\nhtml, body, body > .template\n    height:100%\n```", "```js\n# /_globals/router/config.coffee\n\nif Meteor.isClient\n  BlazeLayout.setRoot 'body'\n```", "```js\n// products/client/products.styl\n@import \"_globals/bootstrap/custom.bootstrap.import.styl\"\n\n#products\n  #promoter\n    background: $brand-primary\n    height: 80%\n```", "```js\n//- /products/client/products.jade\n\ntemplate(name=\"products\")\n  div#products.template\n    header#promoter\n      div.container\n        div.row\n          div.col-xs-12\n            h3 Your Brand\n\n    section#features\n      div.container\n        div.row\n          div.col-xs-12.col-sm-4\n            h3.text-center\n              span.fa-stack.fa-lg\n                i.fa.fa-square.fa-stack-2x.text-primary\n                i.fa.fa-users.fa-inverse.fa-stack-1x\n            h5.text-center 24 Hour Support\n\n          div.col-xs-12.col-sm-4\n            h3.text-center\n              span.fa-stack.fa-lg\n                i.fa.fa-square.fa-stack-2x.text-primary\n                i.fa.fa-truck.fa-inverse.fa-stack-1x\n            h5.text-center Next Day Delivery\n\n          div.col-xs-12.col-sm-4\n            h3.text-center\n              span.fa-stack.fa-lg\n                i.fa.fa-square.fa-stack-2x.text-primary\n                i.fa.fa-bomb.fa-inverse.fa-stack-1x\n            h5.text-center Mind Blown Guarantee\n```", "```js\ndiv.col-<screen size>-<optional offset>-<number of columns>\n```", "```js\ndiv.row\n  div.col-xs-6\n  div.col-xs-6\n    div.row\n      div.col-xs-6.col-xs-offset-3\n```", "```js\n// products/client/products.styl\n@import \"_globals/client/bootstrap/custom.bootstrap.import.styl\"\n@import \"jeet\" // Add jeet\n\n#products\n  #promoter\n    background: $brand-primary\n    height: 80%\n\n    +below($screen-sm-min) // If the screen width is smaller than -sm\n      +portrait() // And the device is in portrait mode\n        height: 30%\n\n      +landscape() // And the device is in landscape mode\n        col(1/3)\n        height: 100%\n\n  #features\n    +below($screen-sm-min) // If the screen width is smaller than -sm\n      +landscape() // And the device is in landscape mode\n        col(2/3)\n        height: 100%\n\n        .container\n          width:100% // Override bootstrap container\n```", "```js\ncol(<column width>/<number of columns>)\n```", "```js\n# /_globals/client/formatters.coffee\n\nTemplate.registerHelper \"format_money\", (value) ->\n  if _.isNumber value\n    \"$#{(value / 100).toFixed(2)}\"\n```", "```js\n//- /products/client/product.jade\n\ntemplate(name=\"product\")\n  div.col-xs-12.col-sm-4.col-md-3\n    article#product\n      h5 {{name}}\n\n      div.offer\n        span.price {{format_money price}}\n```", "```js\n//- /products/client/products.jade\n\ntemplate(name=\"products\")\n  div#products.template\n    header#promoter\n      ...\n    section#features\n      ...\n\n    br\n    section#featured_products\n      div.container\n        div.row\n          each products\n            +product\n```", "```js\n@Products = new Mongo.Collection \"products\"\n\nif Meteor.isServer\n  if Products.find().count() is 0\n    Products.insert\n      name:\"Nuka Cola\"\n      price: 1099\n\n    Products.insert\n      name:\"1up Soda\"\n      price: 999\n\n    Products.insert\n      name:\"JuggerNog\"\n      price: 899\n\n# /products/client/products.coffee\n\nTemplate.created \"products\", ->\n  ...\n\nTemplate.products.helpers\n  products: ->\n    Products.find()\n```", "```js\n# /_globals/client/formatters.coffee\n\n@format =\n  money: (value) ->\n    if _.isNumber value\n      \"$#{(value / 100).toFixed(2)}\"\n\nTemplate.registerHelper \"format\", ->\n  format\n```", "```js\nSession.set \"products.alert\",true\n```", "```js\n# Clear \"products.alert\" variable after \"products\" template is destroyed\nTemplate.destroyed \"products\", ->\n  Session.clear \"products.alert\"\n\n# Clear all variables after the \"products\" template is destroyed\nTemplate.destroyed \"products\", ->\n  Session.clear()\n```", "```js\n# /products/client/product.coffee\n\nTemplate.product.events\n  \"click button.add-to-cart\": (event) ->\n # Get the session variable\n    order_id = Session.get \"global.order\"\n    order = Orders.findOne order_id\n\n # Insert Order if it doesn't exist\n    unless order\n      order_id = Orders.insert\n        status:\"new\"\n        total_products:0\n        subtotal:0\n        total:0\n    else\n      order_id = order._id\n\n # Set the session variable for future reference\n    Session.setPersistent \"global.order\",order_id\n\n # Find the order\n    order = Orders.findOne order_id\n\n # Check for details on this product\n    detail = OrderDetails.findOne\n      product:@_id\n      order:order._id\n\n    if detail\n # Increase by one if the details exist\n      OrderDetails.update detail._id,\n        $inc:\n          quantity:1\n\n      Orders.update order._id,\n        $inc:\n          total_products:1\n          subtotal:@price\n          total:@price\n    else\n # Insert if details do not exist\n      OrderDetails.insert\n        quantity:1\n        product:@_id\n        order:order._id\n\n      Orders.update order._id,\n        $inc:\n          total_products:1\n          subtotal:@price\n          total:@price\n```", "```js\n# /products/server/products_pub.coffee\nMeteor.publish \"products\", (ops={}) ->\n  ...\n\n  if ops.order and not _.isEmpty ops.order\n    @relations\n      collection:Orders\n      filter:\n        _id:ops.order\n        status:\"new\"\n      mappings:[\n        {\n          collection:OrderDetails\n          key:\"order\"\n        }\n      ]\n```", "```js\n# /products/client/products.coffee\n\nTemplate.created \"products\", ->\n  @autorun =>\n    ...\n\n    order = Session.get \"global.order\"\n    if order and not _.isEmpty order\n      _.extend filter,\n        order:order\n\n    @subscribe \"products\", filter\n```", "```js\n# /products/server/product_pub.coffee\n\nMeteor.publish \"product\", (ops={}) ->\n  if ops.product and not _.isEmpty ops.product\n    @relations\n      collection:Products\n      options:\n        _id:ops.product\n      mappings:[\n        {\n          key:\"product\"\n          collection:ProductImages\n        }\n        {\n          collection:ProductsTags\n          key:\"product\"\n          mappings: [\n            {\n              collection:Tags\n              foreign_key:\"tag\"\n            }\n          ]\n        }\n      ]\n\n    if ops.order and not _.isEmpty ops.order\n      @relations\n        collection:Orders\n        filter:\n          _id:ops.order\n          status:\"new\"\n        mappings:[\n          {\n            collection:OrderDetails\n            key:\"order\"\n            filter:\n              product:ops.product\n          }\n        ]\n\n  @ready()\n```", "```js\n# /products/client/product.coffee\n\nTemplate.created \"product\", ->\n  @autorun =>\n    filter = {}\n\n    # Get the product ID from the context\n    product = @data._id\n    _.extend filter,\n      product:product\n\n    # Get the order if any\n    order = Session.get \"global.order\"\n    if order and not _.isEmpty order\n      _.extend filter,\n        order:order\n\n    @subscribe \"product\", filter\n\n...\n```", "```js\nreactive_variable = new ReactiveVar(<optional-default-value>)\n```", "```js\n# Get the value of the variable\nreactive_variable.get()\n\n# Set the value of the variable\nreactive_variable.set \"hello\"\n```", "```js\n# /orders/cart/cart_route.coffee\n\nFlowRouter.route \"/cart\",\n  ...\n\nFlowRouter.route \"/cart/:product/quantity\",\n  name:\"order_quantity\"\n  action: ->\n    FlowLayout.render \"layout\",\n      content:\"order_quantity\"\n```", "```js\n# /products/client/product.coffee\n\nTemplate.created \"product\", ->\n  ...\n\nTemplate.product.events\n  \"click button.add-to-cart\": (event) ->\n    ...\n\n  \"click button.modify-quantity\": ->\n    FlowRouter.go \"order_quantity\",\n      product:@_id\n\n//- /products/client/product.jade\n\ntemplate(name=\"product\")\n  div.col-xs-12.col-sm-4.col-md-3\n    article#product\n      h5 {{name}}\n\n      div.offer\n        span.price {{format.money price}}\n\n      button.add-to-cart.btn.btn-block.btn-primary Add to Cart\n\n      button.modify-quantity.btn.btn-block.btn-info Quantity\n```", "```js\n// /_globals/client/main.styl\n\n.vertical-align\n  position:relative\n  transform:translateY(-50%)\n  top:50%\n```", "```js\n//- /orders/cart/client/order_quantity.jade\n\ntemplate(name=\"order_quantity\")\n  div#order_quantity.template\n    section#number\n      h1.text-center.vertical-align {{total}}\n\n    section#number-pad\n      each numbers\n        div.number\n          h2.text-center.vertical-align {{number}}\n\n      div.delete\n        p.text-center.vertical-align\n          i.fa.fa-undo.fa-2x\n\n      div.add-to-cart\n        p.text-center.vertical-align\n          i.fa.fa-check.fa-2x\n```", "```js\n// /orders/cart/client/order_quantity.styl\n\n@import \"_globals/client/bootstrap/custom.bootstrap.import.styl\"\n@import \"jeet\" // Add jeet\n\n#order_quantity\n  overflow:hidden\n  background:$brand-primary\n  color:white\n\n  section#number\n    height:50%\n    h1\n      margin:0\n\n  section#number-pad\n    height:50%\n    .number, .delete, .add-to-cart\n      cursor:pointer\n      height:25%\n      col(1/3,gutter:0,cycle:3)\n      h2, p\n        margin:0\n```", "```js\n# /orders/cart/client/order_quantity.coffee\n\n# Attach a reactive variable to the instance\n# this variable controls our total\nTemplate.created \"order_quantity\", ->\n  @total = new ReactiveVar()\n```", "```js\n# /orders/cart/client/order_quantity.coffee\n\n...\n\nTemplate.order_quantity.helpers\n # Create a list of numbers for the number pad\n  \"numbers\": ->\n    _.map [1,2,3,4,5,6,7,8,9,0], (v,k) ->\n      number:String v\n\n # Get the reactive variable\n # this will automatically update when the variable changes\n  \"total\": ->\n    Template.instance().total.get()\n```", "```js\n# /orders/cart/client/order_quantity.coffee\n\n...\n\nTemplate.order_quantity.events\n # Concatenate numbers to make it work like a number pad\n  \"click .number\": (event,i) ->\n    total = i.total.get()\n\n    if total\n      new_total = \"#{total}#{@number}\"\n    else\n      new_total = \"#{@number}\"\n\n    i.total.set new_total\n\n # Remove last number from string\n  \"click .delete\": (event,i) ->\n    total = i.total.get()\n\n    if total\n      i.total.set total.slice 0,-1\n\n  \"click .add-to-cart\": (event,i) ->\n # Get the session variable\n    order_id = Session.get \"global.order\"\n    order = Orders.findOne order_id\n\n # Get the total\n    total = i.total.get()\n    unless total\n      return\n    else\n      total = Number total\n\n # Get the product with the ID from the router\n    product = Products.findOne FlowRouter.current().params.product\n\n # Insert Order if it doesn't exist\n    unless order\n      order_id = Orders.insert\n        status:\"new\"\n        total_products:0\n        subtotal:0\n        total:0\n    else\n      order_id = order._id\n\n # Set the session variable for future reference\n    Session.setPersistent \"global.order\",order_id\n\n # Find the order\n    order = Orders.findOne order_id\n\n # Check for details on this product\n    detail = OrderDetails.findOne\n      product:product._id\n      order:order._id\n\n    if detail\n # Increase by one if the details exist\n      OrderDetails.update detail._id,\n        $inc:\n          quantity:total\n\n      Orders.update order_id,\n        $inc:\n          total_products:1\n          subtotal:product.price * total\n          total:product.price * total\n    else\n # Insert if details do not exist\n      OrderDetails.insert\n        quantity:total\n        product:product\n        order:order._id\n\n      Orders.update order._id,\n        $inc:\n          total_products:1\n          subtotal:product.price * total\n          total:product.price * total\n\n    FlowRouter.go \"products\"\n```", "```js\n# /orders/cart/client/order_quantity.coffee\n\nTemplate.created \"order_quantity\", ->\n  @total = new ReactiveVar()\n\n  @autorun =>\n    @subscribe \"order_quantity\",\n      product:FlowRouter.current().params.product\n      order:Session.get \"global.order\"\n\n# /orders/cart/server/order_quantity_pub.coffee\n\nMeteor.publish \"order_quantity\", (ops={}) ->\n  if ops.product and not _.isEmpty ops.product\n    @relations\n      collection:Products\n      filter:\n        _id:ops.product\n\n    @relations\n      collection:Orders\n      filter:\n        _id:ops.order\n        status:\"new\"\n      mappings:[\n        {\n          key:\"order\"\n          collection:OrderDetails\n          filter:\n            product:ops.product\n        }\n      ]\n\n  @ready()\n```", "```js\n# Define your method CLIENT SIDE\nMeteor.methods\n  say_hello: ->\n    console.log \"hello\"\n\n# Define your method SERVER SIDE\nMeteor.methods\n  say_hello: ->\n    console.log \"I don't want to say hello\"\n\n# Run the function CLIENT SIDE\nMeteor.call \"say_hello\"\n```", "```js\n# /orders/cart/cart_methods.coffee\n\nMeteor.methods\n  \"cart.add-to-cart\": (ops={},callback) ->\n    #ops\n      # order\n      # product\n      # quantity\n\n    order = Orders.findOne ops.order\n    product = Products.findOne ops.product\n\n    # Insert Order if it doesn't exist\n    unless order\n      order_id = Orders.insert\n        status:\"new\"\n        total_products:0\n        subtotal:0\n        total:0\n    else\n      order_id = order._id\n\n    # Set the session variable for future reference\n    if Meteor.isClient\n      Session.setPersistent \"global.order\",order_id\n\n    # Find the order\n    order = Orders.findOne order_id\n\n    # Check for details on this product\n    detail = OrderDetails.findOne\n      product:product._id\n      order:order._id\n\n    if detail\n      # Increase by one if the details exist\n      OrderDetails.update detail._id,\n        $inc:\n          quantity:ops.quantity\n\n      Orders.update order._id,\n        $inc:\n          total_products:ops.quantity\n          subtotal:product.price * ops.quantity\n          total:product.price * ops.quantity\n    else\n      # Insert if details do not exist\n      OrderDetails.insert\n        quantity:ops.quantity\n        product:product._id\n        order:order._id\n\n      Orders.update order._id,\n        $inc:\n          total_products:ops.quantity\n          subtotal:product.price * ops.quantity\n          total:product.price * ops.quantity\n\n    # Run the callback function if it exists\n    callback and callback(null, true)\n```", "```js\nMeteor.isClient. We have modified the rest of our code to accept quantity, a product ID, and an order ID, which is all we need to be able to manage both the events.\n```", "```js\n# /orders/cart/client/order_quantity.coffee\n\n# Attach a reactive variable to the instance\n# this variable controls our total\nTemplate.created \"order_quantity\", ->\n  ...\n\nTemplate.order_quantity.helpers\n  ...\n\nTemplate.order_quantity.events\n  ...\n\n  \"click .add-to-cart\": (event,i) ->\n    # Get the total\n    total = i.total.get()\n    unless total\n      return\n    else\n      total = Number total\n\n    Meteor.call \"cart.add-to-cart\",\n      order:Session.get \"global.order\"\n      product:FlowRouter.current().params.product\n      quantity:total\n      (error,r) ->\n        if not error\n          FlowRouter.go \"products\"\n\n# /products/client/product.coffee\n\nTemplate.created \"product\", ->\n  ...\n\nTemplate.product.events\n  \"click button.add-to-cart\": (event) ->\n    Meteor.call \"cart.add-to-cart\",\n      order:Session.get \"global.order\"\n      product:@_id\n      quantity:1\n      (error,r) ->\n        if not error\n          FlowRouter.go \"products\"\n```", "```js\n# /_globals/lib/collections/products/products_collection.coffee\n\n@Products = new Mongo.Collection \"products\"\n\nProducts.attachSchema new SimpleSchema\n  name:\n    type:String\n    label:\"Name\"\n\n  description:\n    type:String\n    label:\"Description\"\n    optional:true\n\n  sku:\n    type:String\n    label:\"SKU\"\n    optional:true\n\n  price:\n    type:Number\n    label:\"Price\"\n```", "```js\nnew SimpleSchema constructor, then we have attached the schema to the collection using the .attachSchema function. The SimpleSchema constructor takes an object where the first key defines the name of the field and the object within that key defines the way the field will behave. We will dive into this further in the next chapter.\n```", "```js\nmeteor reset\n\n```", "```js\n//- /products/client/create_product.jade\n\ntemplate(name=\"create_product\")\n  h3.text-center create product\n\n  div.container\n    div.row\n      div.col-xs-12\n        +autoForm collection=\"Products\" type=\"insert\" id=\"insert_product\" preserveForm=\"true\"\n          +afQuickField name=\"name\" autocorrect=\"off\" autocomplete=\"off\"\n          +afQuickField name=\"price\"\n          +afQuickField name=\"description\"\n          +afQuickField name=\"sku\"\n\n          button.btn.btn-block.btn-primary Add Product\n\n# /products/products_route.coffee\n\nFlowRouter.route \"/\",\n  ...\n\nFlowRouter.route \"/products/create\",\n  name:\"create_product\"\n  action: ->\n    FlowLayout.render \"layout\",\n      content:\"create_product\"\n```", "```js\n    div.form-group(class=\"{{#if afFieldIsInvalid name='price'}} has-error has-feedback {{/if}}\")\n\n      label.control-label {{afFieldLabelText name=\"price\"}}\n\n      +afFieldInput name=\"price\" validation=\"submit\"\n\n      if afFieldIsInvalid name=\"price\"\n        span.glyphicon.glyphicon-certificate.form-control-feedback\n        span.help-block {{afFieldMessage name=\"price\"}}\n```", "```js\n# /products/client/create_product.coffee\n\nAutoForm.addHooks \"insert_product\",\n  formToDoc: (product) ->\n    product.price = product.price * 100\n\n    product\n\n  docToForm: (product) ->\n    product.price = product.price / 100\n\n    product\n```", "```js\nbefore:\n  insert:\n  update:\n  update-pushArray:\n  method:\n  method-update:\n  normal:\nafter:\n  insert:\n  update:\n  update-pushArray:\n  method:\n  method-update:\n  normal:\nonSubmit:\nonSuccess:\nonError:\nformToDoc:\nformToModifier:\ndocToForm:\nbeginSubmit:\nendSubmit:\n```", "```js\n//- /loader/loader.jade\n\ntemplate(name=\"loader\")\n  div#loader.template\n    div(class=\"{{color_class}}\").vertical-align.text-center\n      i.fa.fa-5x.fa-cog.fa-spin\n\n// /loader/loader.styl\n\n#loader\n  height:100%\n```", "```js\n//- /products/client/products.jade\n\ntemplate(name=\"products\")\n  div#products.template\n    header#promoter\n      ...\n\n    section#features\n      ...\n\n    section#featured_products\n      div.container\n        div.row\n if Template.subscriptionsReady\n            each products\n              +product\n          else\n            div(style=\"height:160px;\")\n              +loader color_class=\"text-primary\"\n\n    br\n```", "```js\n.box\n  transition: <CSS property> <duration> <timing function> <delay>\n```", "```js\n.box\n  transition: opacity 300ms ease-in\n  opacity: 0\n  .in\n    opacity: 1\n```", "```js\n.box\n  animation:\n    <animation name>\n    <duration>\n    <timing function>\n    <delay>\n    <direction>\n    <iteration count>\n    <fill mode>\n    <play state>\n\n@keyframes <animation name>\n  0%\n    background:blue\n  50%\n    background:green\n  100%\n    background:red\n```", "```js\n# /_globals/client/momentum/fade-fast.coffee\n\nMomentum.registerPlugin 'fade-fast', (options) ->\n  insertElement: (node, next) ->\n    $(node)\n      .addClass \"animate opacity invisible\"\n      .insertBefore(next)\n\n    Meteor.setTimeout ->\n        $(node).removeClass \"invisible\"\n      ,250\n\n  removeElement: (node) ->\n    $(node).velocity opacity:0, 250, \"easeOut\", ->\n      $(this).remove()\n```", "```js\n//- /products/client/products.jade\n\n  ...\n\n    section#featured_products\n      div.container\n        div.row\n +momentum(plugin=\"fade-fast\")\n            if Template.subscriptionsReady\n              each products\n                div.col-xs-12.col-sm-4.col-md-3\n                  +product\n            else\n              div(style=\"height:160px;\")\n                +loader color_class=\"text-primary\"\n\n// _globals/client/main.styl\n\n.vertical-align\n  ...\n\n.animate\n  &.opacity\n    transition: opacity 500ms\n    opacity:1\n\n    &.invisible\n      opacity:0\n```", "```js\n# /_globals/server/prerenderio.coffee\n\nprerenderio.set \"prerenderToken\",\"<yourtoken>\"\n```", "```js\n# /router/config.coffee\n\nif Meteor.isClient\n  Template.created ->\n    except = [\n      \"Template.__dynamicWithDataContext\"\n      \"Template.__dynamic\"\n      \"Template.layout\"\n      \"Template.layout\"\n      \"body\"\n    ]\n\n    unless _.contains except, @view.name\n      window.prerenderReady = false\n\n      if @subscriptionsReady()\n        window.prerenderReady = true\n\nFlowRouter.notFound =\n  action: ->\n    FlowLayout.render \"layout\",\n      content:\"not_found\"\n```", "```js\n//- /router/client/not_found.jade\n\ntemplate(name=\"not_found\")\n  div#not_found.template\n    div.text-center.vertical-align\n      h3 404!\n      h5 Page not found!\n```", "```js\n# /router/client/not_found.coffee\n\nTemplate.rendered \"not_found\", ->\n  Meta.set [\n    {\n      name:\"name\"\n      property:\"prerender-status-code\"\n      content:\"404\"\n    }\n    {\n      name:\"name\"\n      property:\"robots\"\n      content:\"noindex, nofollow\"\n    }\n  ]\n```", "```js\n# /router/config.coffee\n\nif Meteor.isClient\n  Meta.config\n    options:\n      title:\"Crashing Meteor\"\n      suffix:\"\"\n\n  ...\n```", "```js\n//- /products/client/product.jade\n\ntemplate(name=\"product\")\n  article#product(itemscope itemtype=\"http://schema.org/Product\")\n    h5(itemprop=\"name\") {{name}}\n\n    div.offer(itemprop=\"offers\" itemscope itemtype=\"http://schema.org/Offer\")\n      meta(itemprop=\"priceCurrency\" content=\"USD\")\n      span.price(itemprop=\"price\") {{format.money price}}\n\n    button.add-to-cart.btn.btn-block.btn-primary Add 1 to Cart\n\n    button.modify-quantity.btn.btn-block.btn-info Add more to Cart\n```"]