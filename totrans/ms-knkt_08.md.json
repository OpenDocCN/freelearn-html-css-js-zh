["```js\nvar requiredValue = ko.observable().extend({ required: true });\nvar multipleValidationValue = ko.observable().extend({\n                     required: true,\n                     minLength: 3,\n                     pattern: {\n                          message: 'Hey this doesnt match my pattern',\n                          params: '^[A-Z0-9].$'\n                     }\n                 });\n```", "```js\n<input data-bind=\"value: requiredValue\" />\n```", "```js\nvar myObj = ko.observable().extend({ required: true });\nvar myObj = ko.observable().extend({ number: true, min: 10, max: 30 });\nvar myObj = ko.observable().extend({ number: true})\n    .extend({ min: 10, max: 30 });\n```", "```js\nko.validation.init({\n   insertMessages: false,\n   errorElementClass: 'text-danger'\n});\n```", "```js\nko.applyBindingsWithValidation(viewModel, rootNode, {\n   insertMessages: false,\n   errorElementClass: 'text-danger'\n});\n```", "```js\n<div>\n   <input type=\"text\" data-bind=\"value: someValue\"/>\n   <p data-bind=\"validationMessage: someValue\"></p>\n</div>\n```", "```js\n<div>\n   <label data-bind=\"validationElement: someValue\">\n     <input type=\"text\" data-bind=\"value: someValue\"/>\n   </label>\n</div>\n```", "```js\n<div data-bind=\"validationOptions: { insertMessages: false } \">\n   <input type=\"text\" data-bind=\"value: someValue\"/>\n   <p data-bind=\"validationMessage: someValue\"></p>\n</div>\n```", "```js\nko.validation.rules['contains'] = {\n    validator: function (val, substring) {\n        return val.indexof(substring) !== -1;\n    },\n    message: 'The field must contain {0}'\n};\n```", "```js\nko.validation.registerExtenders();\n```", "```js\nvar title = ko.observable().extend({ contains: 'Sr.' });\n```", "```js\nvar title = ko.observable().extend({\n   validation: {\n       validator: function (val, substring) {\n           return val.indexof(substring) !== -1;\n       },\n       message: 'The field must contain {0}',\n       params: 'Sr.'\n   }\n});\n```", "```js\nvar mappedViewmodel = ko.mapping.fromJS({\n   name: 'Timothy Moran',\n   age: 24\n});\nko.applyBindings(mappedViewmodel);\n```", "```js\nvar serverResponse = \"{\"name\":\"Timothy Moran\",\"age\":24}\";\nvar mappedViewmodel = ko.mapping.fromJSON(serverResponse);\nko.applyBindings(mappedViewmodel);\n```", "```js\nko.mapping.fromJS(data, viewModel);\n```", "```js\nko.mapping.fromJS(data, {}, viewModel);\n```", "```js\nvar mapping = {\n   // options\n};\n\nvar vm = ko.mapping.fromJS(data, mapping);\n```", "```js\nvar mapping = {\n   people: {\n      key: function(person) {\n         return ko.unwrap(person.id);\n      }\n   }\n};\nvar vm = ko.mapping.fromJS(data, mapping);\n```", "```js\nvar mapping = {\n   people: {\n      key: function(person) { /* same as before */ },\n      create: function(options) {\n         return new Person(options.data);\n      }\n   }\n};\nvar vm = ko.mapping.fromJS(data, mapping);\n```", "```js\nvar mapping = {\n   price: {\n      update: function (options) {\n         return parseMoney(options.data);\n      }\n   }\n};\nvar vm = ko.mapping.fromJS(data, mapping);\n```", "```js\nko.mapping.defaultOptions().ignore = [\"alwaysIgnoreThis\"];\nko.mapping.defaultOptions().copy = [\"alwaysCopyThis\"];\n```", "```js\n<input data-bind=\"kendoAutoComplete: { data: autocompleteOptions, value: autocompleteValue }\" /><br>\n```", "```js\n<input data-bind=\"kendoDateTimePicker: startDate\" />\n```", "```js\nvar vm = {\n      people: ko.observableArray([{name: \"Moroni\", age: 50},\n                                      {name: \"Tiancum\", age: 43},\n                                      {name: \"Jacob\", age: 27},\n                                      {name: \"Nephi\", age: 29},\n                                      {name: \"Enos\", age: 34}])\n   }\n<div class=\"gridStyle\" data-bind=\"koGrid: { data: people }\"></div>\n```", "```js\n<div data-bind=\"koGrid: { data: people,\n      canSelectRows: false,\n      displaySelectionCheckbox: false,\n      columnDefs: [\n         { field: 'name', displayName: 'Name', width: '*' },\n         { field: 'age', displayName: 'Age', width: '*' },\t\n         { field: '', displayName: ' ', \n            cellTemplate: 'app/deleteButtonCell.html', \n            width: '**' \n         }]}\" class=\"gridStyle\"></div>\n```", "```js\n<div data-bind=\"attr: { 'class': 'kgCellText colt' + $index()}\">\n   <button class=\"btn btn-xs btn-danger\" data-bind=\"click: function() { $parent.$userViewModel.remove($parent.entity) }\">Delete</button>\n</div>\n```", "```js\n//Tooltip\n<p>This is a paragraph with a <span data-bind=\"tooltip: { title: tooltipText, placement: 'bottom' }\"> tooltip span</span> inside.\n</p>\n\n//Popover\n<button class=\"btn btn-primary\" data-bind=\"popover: {template: 'popoverTemplate', title: 'Oh Yea'}\">\n    Launch Simple Popover\n</button>\n\n//Alerts\n<div data-bind=\"foreach: alerts\">\n    <div data-bind=\"alert: $data\"></div>\n</div>\n```", "```js\n<div data-bind=\"switch: orderStatus\">\n    <div data-bind=\"case: 'shipped'\">\n        Your order has been shipped. Your tracking number is <span data-bind=\"text: trackingNumber\"></span>.\n    </div>\n    <div data-bind=\"case: 'pending'\">\n        Your order is being processed. Please be patient.\n    </div>\n    <div data-bind=\"case: 'incomplete'\">\n        Your order could not be processed. Please go back and complete the missing data.\n    </div>\n    <div data-bind=\"case: $default\">\n        Please call customer service to determine the status of your order.\n    </div>\n</div>\n```", "```js\n<div data-bind=\"switch: true\">\n    <div data-bind=\"case: trackingNumber\">\n        Your order has been shipped.\n    </div>\n    <div data-bind=\"case: isReady\">\n        Your order is being processed.\n    </div>\n    <div data-bind=\"casenot: isComplete\">\n        Your order has been processed.\n    </div>\n    <div data-bind=\"case: $else\">\n        Your order could not be processed.\n    </div>\n</div>\n```", "```js\n<div data-bind=\"switch: isReady\">\n    <div data-bind=\"case: true\">You are ready!</div>\n    <div data-bind=\"case: false\">You are not ready!</div>\n</div>\n```", "```js\nfunction Product(data) {\n    this.name = ko.observable(data.name);\n    this.isSelected = ko.observable(false);\n}\nfunction PageViewModel() {\n    // Some data, perhaps loaded via an Ajax call\n    this.products = ko.observableArray([ /* several Products /* ]);\n    this.selectedProducts = ko.computed(function() {\n        return this.products().filter(function(product) {\n            return product.isSelected();\n        });\n    }, this);\n}\n```", "```js\nthis.selectedProducts = this.products.filter(function(product) {\n    return product.isSelected();\n});\n```", "```js\nthis.productNames = this.products.map(function(product) {\n    return product.name();\n});\n```", "```js\nthis.selectedNames = this.selectedProducts.map(function(product) {\n    return product.name();\n});\n```", "```js\nvar latestOrder = this.orders()[this.orders().length - 1];\nlatestOrder.isShipped(true);\n```", "```js\nvar latestOrder = this.orders[this.orders.length - 1];\nlatestOrder.isShipped = true;\n```", "```js\nfunction Person(init) {\n   var self = this,\n      data = init || {};\n\n   self.name = data.name || '';\n   self.age = data.age || '';\nself.alive = data.alive !== undefined ? data.alive : true;\n   self.job = data.job || '';\n\n   ko.track(self);\n}\n```", "```js\nko.track(self, ['name', 'age']);\n```", "```js\nko.defineProperty(self, 'canRemove', function() {\n   return !self.alive;\n});\n```", "```js\nko.getObservable(self, 'age').subscribe(function(newValue) {\n   console.log(self.name + ' age was changed to ' + newValue);\n});\n```"]