- en: Chapter 9. Intuitive Multiselect Combobox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will explore an excellent Ext JS extension: `BoxSelect`,
    which was originally developed by Kevin Vaughan. This extension is really very
    useful and provides a friendlier combobox for multiple selections that creates
    removable labels for each selection, easily and individually, and lots more.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered are:'
  prefs: []
  type: TYPE_NORMAL
- en: Features of `BoxSelect`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `BoxSelect` extension:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic configuration
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Templates
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Single value selection
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote query with unknown values
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new records with autosuggestion
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BoxSelect` specific configurations'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Value handling and events
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Features of BoxSelect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`BoxSelect` is an extended `ComboBox` component developed for more intuitive
    multiselect capabilities. `BoxSelect` comes with lots of examples and proper documentation.
    The following features are provided by the `BoxSelect` extension:'
  prefs: []
  type: TYPE_NORMAL
- en: Selected items can be removed individually.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizable item templates for controlling the display of the selected values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports keyboard-based selection and navigation for the selected values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports on-demand loading of values from remote stores when an unknown value
    is set, and the `queryMode` option is set to `remote` and `forceSelection` is
    set to `true`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting `forceSelection` to `false` creates new records.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `multiSelect` is set to `true` the pick list can be configured to tell
    if it should collapse or not, after making a selection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selected items can be configured to be stacked or autosized.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of the existing functionalities and configuration options of `ComboBox`
    should work with `BoxSelect`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using BoxSelect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`BoxSelect` extends the `ComboBox` control to provide a more multiselect, friendly
    `ComboBox` control. The examples included in this chapter show the differences
    between the default `ComboBox` control and this extension, and provide general
    information about the advanced usage of `BoxSelect`.'
  prefs: []
  type: TYPE_NORMAL
- en: Basic configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`BoxSelect` should support all configuration values as the `ComboBox` supports.
    There are some changes for the default values for this extension:'
  prefs: []
  type: TYPE_NORMAL
- en: The `multiSelect` option is set to `true` by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `forceSelection` option is set to `true` by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In most cases, the multiple selections are made from a preformed list, but we
    can also configure the `BoxSelect` extension to add new records with an autosuggestion
    list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ComboBox` component doesn't support `typeAhead` when the `multiSelect`
    option is set to `true`, but even though the value of `typeAhead` is set to `false`
    by default for the `BoxSelect` extension, support for this feature has been added
    for `multiSelect` when set to `true`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `value` option can be used to initialize the `multiSelect` values. The same
    format of values is accepted for the `setValue` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let us start using the `BoxSelect` extension with the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And the screenshot should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic configuration](img/3725OS_9_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see how easily we can select multiple values
    within the `BoxSelect` combobox extension.
  prefs: []
  type: TYPE_NORMAL
- en: Templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can easily configure the display of the selected values and the drop-down
    list items through templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '**labelTpl**: It is the template configuration option which controls the display
    of the selected values within the input field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**listConfig**: It is the template configuration option which controls the
    display of the drop-down list items. This option is available within the default
    `ComboBox` field and also supported by `BoxSelect`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let us see how we can set the configuration for customizing the `labelTpl`
    and the `listConfig` options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the screenshot of the `BoxSelect` extension using the preceding
    configuration for `labelTpl` and `listConfig`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Templates](img/3725OS_9_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see that the `BoxSelect` extension is working
    fine and is showing the selected items with the configured `labelTpl` and `listConfig`
    comboboxes.
  prefs: []
  type: TYPE_NORMAL
- en: Single value selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `BoxSelect` extension is targeted for multiple selections, but it also
    supports single selection by setting the `multiSelect` option to `false.` If we
    need the single selection option by default, we can add the following line of
    code before the `BoxSelect` extension is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let us configure the `BoxSelect` extension for a single selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Single value selection](img/3725OS_9_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can now select only a single value within the
    combobox when the `multiSelect` option is set to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Remote query with unknown values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we set the `queryMode` option to `remote` and the `forceSelection` option
    to `true`, and we pass a value to the `BoxSelect` extension that is not in the
    store, a query will be sent to the store''s configured proxy "x" with the name
    of the `valueField` option and a set of unknown values separated by the configured
    `delimiter` as the parameters. For example, if the `valueField` option is `abbr`,
    the `delimiter` value is `|`, and unknown values ''`NC`'', ''`VA`'', and, ''`ZZ`''
    are set, the following parameters will be passed to the store''s configured proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This attempt to load the unknown values will be performed only once per `initValue`/`setValue`
    call. The records which are still unknown after this request will be removed from
    the field's value, but all known values will be retained. In the preceding example,
    the `'ZZ'` entry was discarded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let us configure the `BoxSelect` extension for remote stores:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the screenshot where we have used this configuration for the `BoxSelect`
    extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Remote query with unknown values](img/3725OS_9_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot we can see that our configured `BoxSelect` is working
    fine for the remote store, and the value for '`NC`' and '`VA`' is retrieved where
    the value for '`ZZ`' is discarded.
  prefs: []
  type: TYPE_NORMAL
- en: Adding new records with autosuggestion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example we will show the use of `forceSelection`, when set to `false`,
    to enable the entry of new values with autosuggestion provided from the attached
    store. The new records will be created using the user input for both the configured
    `displayField` and `valueField`. These new records are not added to the `ComboBox`
    store automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'New entries can be created by any of the following four ways:'
  prefs: []
  type: TYPE_NORMAL
- en: When we type the configured `delimiter` which is default to ',', the value that
    we entered before the `delimiter` will be used to create a new record.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we paste texts in to the field, the value will be split according to the
    configured `delimiter`, which is default to ',' and any values entered will be
    parsed in to new/existing records.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `createNewOnEnter` option is set to `false` by default. If set to `true`,
    a new entry will be created when we press the *Enter* key. This configuration
    option only applies if the `forceSelection` option is set to `false`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `createNewOnBlur` option is set to `false` by default. If set to `true`,
    a new entry will be created when the focus leaves the input field. This configuration
    option only applies if `forceSelection` is set to `false`, and is superseded by
    `autoSelect` and `selectOnTab`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let us configure the `BoxSelect` extension for autosuggestion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Using this configuration we will get the `BoxSelect` component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding new records with autosuggestion](img/3725OS_9_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see how the `BoxSelect` component is offering
    an autosuggestion list where we can select those list items or create new records.
  prefs: []
  type: TYPE_NORMAL
- en: BoxSelect specific configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following configuration options are specific to the `BoxSelect` extension:'
  prefs: []
  type: TYPE_NORMAL
- en: The `createNewOnEnter` option is set to `false` by default. If this option is
    set to `true` and the `forceSelection` option is set to `false`, a new entry will
    be created as soon as the user presses the *Enter* key.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `createNewOnBlur` option is set to `false` by default. If this option is
    set to `true` and the `forceSelection` option is set to `false`, a new entry will
    be created when the focus leaves the input field. This configuration option is
    superseded by `autoSelect` and `selectOnTab`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `stacked` option is set to `false` by default. If this option is set to
    `true`, the labeled items will fill the available width of the list instead of
    being only as wide as the displayed value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pinList` option is set to `true` by default. If this option is set to `false`,
    the pick list will automatically collapse after a selection is made, when `multiSelect`
    is `true`. This mimics the default behavior when `multiSelect` is `false`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `triggerOnClick` option is set to `true` by default. When the option is
    set to `true`, the pick list will emulate a trigger when clicking in the field
    just like when a `ComboBox` component is set with the `editable` option to `false`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `grow` option is set to `true` by default. If this option is set to `false`,
    the list of selections will scroll when necessary, and the height of the field
    will not change. This setting has no effect if a fixed height is set for the field,
    either directly (for example, through a height configuration), or by the containing
    layout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `growMin` option is set to `false` by default. If this option is set to
    `true`, any numeric value will be used for the field's minimum height.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `growMax` option is set to `false` by default. If this option is set to
    `true`, any numeric value will be used for the field's maximum height and the
    list of selections will scroll when necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `filterPickList` option is set to `false` by default. If this option is
    set to `true`, the currently selected values will be hidden from the expanded
    pick list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let us configure the `BoxSelect` component by changing some of the default
    values to see the effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the screenshot of the `BoxSelect` component where we''ve used
    this configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![BoxSelect specific configurations](img/3725OS_9_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see that the labeled items are filling the
    full width available as we set the `stacked` option to `true`. The pick list is
    automatically collapsing as soon as a selection is made as we set the `pinList`
    option to `false`, and the current selected values are hidden from the expanded
    pick list as we set the `filterPickList` option to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Value handling and events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following methods are available within `BoxSelect`, which helps to work
    with the value of the combobox:'
  prefs: []
  type: TYPE_NORMAL
- en: '`addValue(mixedValue)`: Adds a value or values to the current value of the
    field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`removeValue(mixedValue)`: Removes a value or values from the current value
    of the field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getValueRecords()`: Returns the records for the field''s current value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getSubmitData()`: Allows submitting the field as a JSON encoded array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also the `BoxSelect` component provides the following two events for managing
    the selected items:'
  prefs: []
  type: TYPE_NORMAL
- en: valueSelectionChange
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: valueFocusChange
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we've explored the features and also went through the usage
    of the `BoxSelect` combobox extension. We've learned how to configure the `BoxSelect`
    extension and its proper usage. We can see that by using Ext JS's extension feature
    we can easily use the full strength of the Ext JS library's `ComboBox` field and
    can add our own custom functionality to fulfill our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book we have learned the fundamentals of Ext JS plugins and
    extensions, we have introduced some of the popular Ext JS libraries and community
    provided plugins and extensions, and we have also provided several hands-on real
    world plugins and extensions development with proper explanations and code. We
    now have clear knowledge about the proper usage and development of Ext JS plugins
    and extensions.
  prefs: []
  type: TYPE_NORMAL
