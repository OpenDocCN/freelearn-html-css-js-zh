["```js\nfunction addNumbers(arg0: number, arg1: number): number {\n  return arg0 + arg1;\n}\ndescribe('My Math Library', () => {\n  it('should add two numbers correctly', () => {\n    const result = addNumbers(2, 3);\n    expect(result).toEqual(5);\n    expect(result).toEqual(6); //Intentional fail\n  });\n});\n```", "```js\ndescribe('My Math Library', () => {\n  test('should add two numbers correctly', () => {\n    let expected = 5\n    let actual = 5\n    expect(actual).toBe(expected);\n    actual = 4\n    expect(actual).toBe(expected);\n  });\n```", "```js\nnpm install jest-expect-message\nyarn add jest-expect-message\n```", "```js\ndescribe('My Math Library', () => {\n  test('should add two numbers correctly', () => {\n    Let expected = 5\n    let actual = 5\n    expect(actual,\n`Expected: '${expected}' Actual: '${actual}'`).toBe(expected);\nexpected = 4\nexpect(actual, `Expected: '${expected}' Actual: '${actual}'`).toBe(expected);\n  });\n});\n```", "```js\nimport 'chai/register-should'\ndescribe('My App', () => {\n  it('should have the correct title', () => {\n    browser.url('https://example.com');\n    browser.getTitle().should.be.equal('Example Domain');\n  });\n});\n```", "```js\nconst assert = require('assert');\ndescribe('My App', () => {\n  it('should have the correct title', () => {\n    browser.url('https://example.com');\n    const actualTitle = browser.getTitle();\n    const expectedTitle = 'Example Domain';\n    assert(actualTitle === expectedTitle);\n  });\n});\n```", "```js\nimport assert from 'chai';\ndescribe('My App', () => {\n  it('expect to have the correct title with chai', () => {\n    browser.url('https://example.com');\n    expect(browser.getTitle()).to.equal('Example Domain');\n  });\n});\n```", "```js\nawait LoginPage.open();\nawait expect(browser).toHaveUrlContaining('the-internet.herokuapp.com/login')\n[chrome 110.0.0.0 win32 #0-0]    ✓ Chapter 8: expectAdv Wrapper should check if actual is equal to expected\n0.0 win32 #0-0] 1 passing (844ms)\n```", "```js\nawait LoginPage.open();\nawait expect(browser).toHaveUrlContaining('the-internet.herokuapp.com/bogus')\n[chrome 110.0.0.0 win32 #0-0] Error: Expect window to have url containing \"the-internet.herokuapp.com/bogus\"\nExpected: \"the-internet.herokuapp.com/bogus\"\nReceived: \"https://the-internet.herokuapp.com/login\"\n[chrome 110.0.0.0 win32 #0-0] error properties: Object({ matcherResult: Object({ pass: false, message: 'Expect window to have url containing\n[chrome 110.0.0.0 win32 #0-0]\n[chrome 110.0.0.0 win32 #0-0] Expected: \"the-internet.herokuapp.com/bogus\"\n[chrome 110.0.0.0 win32 #0-0] Received: \"https://the-internet.herokuapp.com/login\"' }) })\n[chrome 110.0.0.0 win32 #0-0] Error: Expect window to have url containing\n[chrome 110.0.0.0 win32 #0-0] Expected: \"the-internet.herokuapp.com/bogus\"\n[chrome 110.0.0.0 win32 #0-0] Received: https://the-internet.herokuapp.com/login\n```", "```js\nSpec Files:      0 passed, 1 failed, 1 total (100% completed) in 00:00:06\n```", "```js\nbefore: function (capabilities, specs){\nrequire('expect-webdriverio').setOptions ({wait:5000, interval: 250});\n}\n```", "```js\nconst expect = require('expect-webdriverio');\ndescribe('My App', () => {\n  it('should have the correct title', () => {\n    browser.url('https://example.com');\n    expect(browser).toHaveTitle('Example Domain');\n  });\n});\n```", "```js\nconst btnBogus = $('button[name=\"Bogus\"]');\nsoftexpect(btnBogus.isEnabled()).to.be.true;\nconst btnAddToCart = $('button[name=\"Add To Cart\"]');\nsoftExpect(btnAddToCart.isEnabled()).to.be.true;\nexpect(addToCartButton.isClickable()).to.be.clickable;\n```", "```js\nExpect.toBeDisplayed\nExpect.toBeFocused\nExpect.toBeEnabled\nExpect.toBeDisabled\nExpect.toBeClickable\nExpect.toBeChecked\nExpect.toBeSelected\n```", "```js\nExpect.toHaveText / Expect.toHaveTextContaining\nExpect.toHaveValue / Expect.toHaveValueContaining\n```", "```js\nExpect.toHaveElementProperty\nExpect.toHaveAttribute\nExpect.toHaveAttributeContaining\nExpect.toHaveElementClass\nExpect.toHaveElementClassContaining\nExpect.toHaveId\nExpect.toHaveLink / Expect.toHaveLinkContaining\n```", "```js\nfunction expectAdv(\nactual: any,\nassertionType: string,\nexpected?: any,\nDescription: string = 'A description of this assertion is recommended.')\n}\n```", "```js\n> yarn add @wdio/allure-reporter\n```", "```js\n\"node_modules/.bin/allure generate --clean ./reports/allure-results && allure open -p 5050\"\n```", "```js\n// Code example using expect-webdriverio\nexport async function expectAdv(actual, assertionType, expected) {\n  const softAssert = expect;\n  const getAssertionType = {\n    equals: () => (softAssert(actual).toEqual(expected)),\n    contains: () => (softAssert(actual).toContain(expected)),\n    exist: () => (softAssert(actual).toBeExisting()),\n    isEnabled: () => (softAssert(actual).toBeEnabled()),\n    isDisabled: () => (softAssert(actual).toBeDisabled()),\n    doesNotExist: () => (softAssert(actual).not.toBeExisting()),\n    doesNotContain: () => (softAssert(actual).not.toContain(expected)),\n    default: () => (console.info('Invalid assertion type:  ', assertionType)),\n  };\n  (getAssertionType[assertionType] || getAssertionType['default'])();\n  if (!getAssertionType[assertionType]){\n    allureReporter.addAttachment('Assertion Failure: ', `Invalid Assertion Type = ${assertionType}`, 'text/plain');\n    allureReporter.addAttachment('Assertion Error: ', console.error, 'text/plain');\n  } else {\n    allureReporter.addAttachment('Assertion Passes: ', `Valid Assertion Type = ${assertionType}`, 'text/plain');\n }\n  allureReporter.endStep();\n}\n```"]