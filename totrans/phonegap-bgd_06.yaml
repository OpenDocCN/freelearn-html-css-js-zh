- en: Chapter 6. Using the Contacts and Camera APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In the last chapter, we saw how to get the best out of the Files and Storage
    plugins. Now that your knowledge of PhoneGap is coming together well, it''s time
    to add some interaction to the device itself. The main goal of this chapter is
    to help you to understand the usage of the Contacts API of PhoneGap and to interact
    with the device media using the Camera and Media Capture API.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Get an overview of the PhoneGap Contacts API and its objects and properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to use the Contacts API to read and filter the contacts stored on
    the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand the difference between the Camera and Capture API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to capture images from the device camera using the Camera API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to handle various media types such as images, audio, and video using
    the Media Capture API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Contacts API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can easily access the contact information stored on a device using the PhoneGap
    API. The Contacts API is an implementation of the W3C's Pick Contacts Intent API
    (an intent that enables access to a user's address book service from inside a
    web application). You can read more about the W3C specifications at [http://www.w3.org/TR/contacts-api/](http://www.w3.org/TR/contacts-api/).
  prefs: []
  type: TYPE_NORMAL
- en: The required functionalities of the Contacts API are provided by the Contacts
    plugin identified by the name `cordova-plugin-contacts`. This plugin supports
    major platforms.
  prefs: []
  type: TYPE_NORMAL
- en: For a complete list of all the supported platforms, refer to the documentation
    at [http://docs.phonegap.com/en/edge/cordova_contacts_contacts.md.html#Contacts](http://docs.phonegap.com/en/edge/cordova_contacts_contacts.md.html#Contacts).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to start the interaction with the device contacts, you can use the
    `create` or `find` methods defined in the `contacts` object stored in the `navigator`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to understand how these methods work in a better way, let''s explore
    the most relevant objects that are involved with them: `Contact`, `ContactName`,
    `ContactField`, `ContactFindOptions`, and `ContactError`.'
  prefs: []
  type: TYPE_NORMAL
- en: The ContactName object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ContactName` object is used in the PhoneGap framework in order to store
    all the details of a contact name. The object is stored in the `name` property
    of the `Contact` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The properties of the `ContactName` object are all strings and are self-explanatory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`formatted`: This represents the complete name of the contact'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`familyName`: This represents the contact''s last name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`givenName`: This represents the contact''s first name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`middleName`: This represents the contact''s middle name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`honorificPrefix`: This represents the contact''s prefix (for example, Mr.
    or Dr.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`honorificSuffix`: This represents the contact''s suffix (for example, Esq.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ContactField object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ContactField` object is a generic object used in the PhoneGap framework
    in order to represent a field of the `Contact` object. The generic nature of this
    object makes it reusable across several fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'The properties of the `ContactField` object are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type`: This is a string that represents the type of field; possible values
    are home, work, mobile, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value`: This is a string representing the value of the field such as a phone
    number or an e-mail address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pref`: This is a Boolean value that indicates whether the user preferred value
    is returned in a specific field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When the `ContactField` object is used in the `photos` property of the `Contact`
    object, the `type` property represents the type of a returned image (for example,
    a URL or Base64-encoded string).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The ContactAddress object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ContactAddress` object is the object stored in the `addresses` property
    of the `Contact` object. The `addresses` property is an array where multiple addresses
    can be associated with each contact.
  prefs: []
  type: TYPE_NORMAL
- en: 'The properties of the `ContactAddress` object are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pref`: This is a Boolean value that indicates whether the returned `ContactAddress`
    object is the preferred value of the user for the `ContactAddress` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: This is a string that indicates what type of address is stored in the
    `ContactAddress` object (for example, home and office)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`formatted`: This is a string that represents the complete address that is
    formatted for display'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`streetAddress`: This is a string that represents the complete street address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`locality`: This is a string that represents the city or locality that is part
    of the `ContactAddress` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`region`: This is a string that represents the state or region that is part
    of the `ContactAddress` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postalCode`: This is a string that represents the zip code or postal code
    associated with the locality stored in the `ContactAddress` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`country`: This is a string that represents the name of the country stored
    in the `ContactAddress` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a limitation in Android 2.x (that is, the `pref` property is not supported)
    and several limitations on Android 1.x. Also, iOS does not support the `formatted`
    property. Always refer to the online documentation to verify the status of the
    support for the `ContactAddress` object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The ContactOrganization object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ContactOrganization` object represents all the details of a company, organization,
    and so on, that the stored contact belongs to. The object is stored in the array
    contained in the `organizations` property of the `Contact` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The properties of the `ContactOrganization` object are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pref`: This is a Boolean value that indicates whether the returned `ContactOrganization`
    object is the preferred value of the user for the `ContactOrganization` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: This is a string that indicates what type of address is stored in the
    `ContactOrganization` object (for example, work and other)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This is a string that represents the name of the organization stored
    in the `ContactOrganization` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`department`: This is a string that represents the department of the organization
    who the contact works for'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`: This is a string that represents the contact''s title in the organization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `name`, `department`, and `title` properties are partially supported on
    iOS; the `pref` and `type` properties are badly supported on Android 1.x and Android
    2.x.
  prefs: []
  type: TYPE_NORMAL
- en: The Contact object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Contact` object represents all the details of a contact stored in the
    device database. A `Contact` object can be saved, removed, and copied from the
    device contact database using the `save`, `remove`, and `clone` methods defined
    on the object itself. The `save` and `remove` methods accept two arguments in
    order to handle the success and failure of the save or remove operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The error handlers receive the same `ContactError` object as an argument; the
    success handlers receive the saved contact or a snapshot of the current database
    when a contact is successfully removed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ContactError` object contains the information about the occurred error
    in the `code` property. The values that can be returned are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ContactError.UNKNOWN_ERROR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ContactError.INVALID_ARGUMENT_ERROR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ContactError.TIMEOUT_ERROR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ContactError.PENDING_OPERATION_ERROR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ContactError.IO_ERROR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ContactError.NOT_SUPPORTED_ERROR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ContactError.PERMISSION_DENIED_ERROR`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When creating a new `Contact` object, you can define the contact properties
    or pass them as an object one by one when calling the `create` method. The properties
    of the `Contact` object are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: This is a string used as a globally unique identifier'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`displayName`: This is a string that represents the name of the `Contact` object
    for display to the end users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This is an object containing all the information of a contact name;
    the object used to store this information is `ContactName`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nickname`: This is a string that represents the casual name of a contact'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`phoneNumbers`: This is an array of all the contact''s phone numbers; the array
    items are instances of the `ContactField` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`emails`: This is an array of all the contact''s e-mail addresses; the array
    items are instances of the `ContactField` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addresses`: This is an array of all the contact''s addresses; the array items
    are instances of the `ContactAddresses` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ims`: This is an array of all the contact''s instant messages accounts; the
    array items are instances of the `ContactField` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`organizations`: This is an array of all the organizations the contact belongs
    to; the array items are instances of the `ContactOrganization` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`birthday`: This is a `Date` object that represents the birthday of the contact'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`note`: This is a string that represents a note about the contact'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`photos`: This is an array of all the contact''s photos; the array items are
    instances of the `ContactField` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`categories`: This is an array of all the contact''s defined categories; the
    array items are instances of the `ContactField` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`urls`: This is an array of all the web pages associated with the contact;
    the array items are instances of the `ContactField` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Contact` object's properties are not fully supported across all platforms.
    In fact, operating system fragmentation makes it difficult to handle this information
    consistently.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, the `name`, `nickname`, `birthday`, `photos`, `categories`, and
    `urls` properties are not supported on Android 1.x. Likewise, the `categories`
    property is supported neither on Android 2.x. nor iOS.
  prefs: []
  type: TYPE_NORMAL
- en: On iOS, the items returned in the `photos` array contain a URL that points to
    the app's temporary folder. This means that this content is deleted when the app
    exits and that you have to handle it if you want the user to find the app in the
    same status he/she left. The `displayName` property is not supported on iOS and
    will be returned as null, unless there is `ContactName` defined. If the `ContactName`
    object is defined, then a composite name or nickname is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering contact data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already mentioned the `find` method available in the `navigator.contacts`
    object. Using this method, an app can find one or multiple contacts in the device's
    contact database. The `find` method accepts four arguments. The first one is an
    array that contains the name of the fields of the `Contact` object that have to
    be returned. The second and third are the success and error handlers. The last
    one represents the filtering options that you may wish to apply to the current
    search.
  prefs: []
  type: TYPE_NORMAL
- en: In order to apply a filter to the current search, you can instantiate a new
    `ContactFindOptions` object and populate the `filter` and `multiple` properties.
    The `filter` property is a case-insensitive string that will act as a filter on
    the fields of the `Contact` objects returned by the `find` method. The `multiple`
    property is `false` by default and is the one to use in order to receive multiple
    `Contact` objects in the success handler. Try out the following example to understand
    how these properties work.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – searching device contacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now see an example of getting all the contacts from the device and
    listing them down:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new project using the PhoneGap CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the current working directory to the directory that is newly created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the required platforms to the project. We will add Android for this example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the Contacts plugin to the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `www/index.html` file, you need to replace the content and add the following
    code. To start with, let''s create an event listener and bind that to a function.
    In the following code, when the device is ready, the `OnDeviceReady` method will
    be fired:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s add the content for the `OnDeviceReady` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the preceding code, you are creating a new `ContactFindOptions` object
    and setting filters/properties to the object. Based on the filter that you set,
    the function will return all the matching contacts. In this example, we have given
    an empty filter, which means we get back all the contacts from the device.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you want to limit the search only to a particular name, you can provide
    the filter as shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can also restrict the list of fields that the function is going to return.
    If you feel that it's enough to have only a few fields for output, you can mention
    them in the list of fields. For example, we have restricted the output to only
    the display name, `name` object, and address of the contacts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When the function is executed successfully, it will return the values to the
    `OnSuccess` event and will trigger the `OnError` event when there are some issues.
    So let''s define the `OnSuccess` and `OnError` events to define what we are going
    to do with the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When we have acquired all of the contacts, we loop through the `contacts` object
    and display the name of the contact in the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following complete code has been given for your reference. When you test
    the code in an actual device, you can see the contact names in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You filtered the contact database based on the options defined by the `ContactFindOptions`
    object and you refined the result using the API provided by the PhoneGap framework.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – adding a new contact
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will directly go to the example of creating a new contact entry using the
    Contacts API. The code for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The last parameter of `ContactField` expects a Boolean value to denote whether
    the field is a preferred one. In the preceding example, the second phone number
    with the value of `true` is set as the preferred number.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen how we can create a new `Contact` object and save this to the device
    using the Contacts API.
  prefs: []
  type: TYPE_NORMAL
- en: Camera API or Capture API?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The PhoneGap framework implements two different APIs to access media on a device:
    the Camera API and the Capture API. The main difference between these APIs is
    that the Camera API can access only the default device camera application, whereas
    the Capture API can also record audio or video using the default audio and video
    recording application. Another important difference is that the Capture API allows
    multiple captures with a single API call.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Capture API is an implementation of an abandoned W3C standards draft. As
    you can see, there are several similarities between the draft and the actual PhoneGap
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the camera using the Camera API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Camera API provides access to the device''s camera application using the
    Camera plugin identified by the `cordova-plugin-camera` key. With this plugin
    installed, an app can take a picture or gain access to a media file stored in
    the photo library and albums that the user created on the device. The Camera API
    exposes the following two methods defined in the `navigator.camera` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getPicture`: This opens the default camera application or allows the user
    to browse the media library, depending on the options specified in the `configuration`
    object that the method accepts as an argument'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cleanup`: This cleans up any intermediate photo file available in the temporary
    storage location (supported only on iOS)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As arguments, the `getPicture` method accepts a success handler, failure handler,
    and optionally an object used to specify several camera options through its properties
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`quality`: This is a number between `0` and `100` used to specify the quality
    of the saved image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`destinationType`: This is a number used to define the format of the value
    returned in the success handler. The possible values are stored in the following
    `Camera.DestinationType` pseudo constants:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DATA_URL(0)`: This indicates that the `getPicture` method will return the
    image as a Base64-encoded string'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FILE_URI(1)`: This indicates that the method will return the file URI'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NATIVE_URI(2)`: This indicates that the method will return a platform-dependent
    file URI (for example, `assets-library://` on iOS or `content://` on Android)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sourceType`: This is a number used to specify where the `getPicture` method
    can access an image. The following possible values are stored in the `Camera.PictureSourceType`
    pseudo constants: `PHOTOLIBRARY (0)`, `CAMERA (1)`, and `SAVEDPHOTOALBUM (2)`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PHOTOLIBRARY`: This indicates that the method will get an image from the device''s
    library'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAMERA`: This indicates that the method will grab a picture from the camera'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SAVEDPHOTOALBUM`: This indicates that the user will be prompted to select
    an album before picking an image'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allowEdit`: This is a Boolean value (the value is `true` by default) used
    to indicate that the user can make small edits to the image before confirming
    the selection; it works only in iOS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`encodingType`: This is a number used to specify the encoding of the returned
    file. The possible values are stored in the `Camera.EncodingType` pseudo constants:
    `JPEG (0)` and `PNG (1)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`targetWidth` and `targetHeight`: These are the width and height in pixels,
    to which you want the captured image to be scaled; it''s possible to specify only
    one of the two options. When both are specified, the image will be scaled to the
    value that results in the smallest aspect ratio (the aspect ratio of an image
    describes the proportional relationship between its width and height).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mediaType`: This is a number used to specify what kind of media files have
    to be returned when the `getPicture` method is called using the `Camera.PictureSourceType.PHOTOLIBRARY`
    or `Camera.PictureSourceType.SAVEDPHOTOALBUM` pseudo constants as `sourceType`;
    the possible values are stored in the `Camera.MediaType` object as pseudo constants
    and are `PICTURE (0)`, `VIDEO (1)`, and `ALLMEDIA (2)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`correctOrientation`: This is a Boolean value that forces the device camera
    to correct the device orientation during the capture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cameraDirection`: This is a number used to specify which device camera has
    to be used during the capture. The values are stored in the `Camera.Direction`
    object as pseudo constants and are `BACK (0)` and `FRONT (1)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`popoverOptions`: This is an object supported on iOS to specify the anchor
    element location and arrow direction of the popover used on iPad when selecting
    images from the library or album.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`saveToPhotoAlbum`: This is a Boolean value (the value is `false` by default)
    used in order to save the captured image in the device''s default photo album.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The success handler receives an argument that contains the URI to the file or
    data stored in the file's Base64-encoded string, depending on the value stored
    in the `encodingType` property of the `options` object. The failure handler receives
    a string containing the device's native code error message as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, the `cleanup` method accepts a success handler and a failure handler.
    The only difference between the two is that the success handler doesn't receive
    any argument. The `cleanup` method is supported only on iOS and can be used when
    the `sourceType` property value is `Camera.PictureSourceType.CAMERA` and the `destinationType`
    property value is `Camera.DestinationType.FILE_URI`.
  prefs: []
  type: TYPE_NORMAL
- en: In order to put into practice what you have learned about the Camera API, let's
    create an app that can take a picture from the device's default camera application.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – accessing the device camera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Get ready to access the device''s camera and show the user the captured picture.
    Refer to the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command-line tool and create a new PhoneGap project named `camera`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change to the directory that is created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the command-line tool, add the Android and iOS platforms to the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Camera API plugin using the following command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to the `www` folder, open the `index.html` file, and replace the contents
    with the following code; this code is self-explanatory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the user clicks on the **Capture Photo** button, the `getCameraImage()`
    function will be triggered which in turn uses the `navigator.camera.getPicture()`
    method to capture the image from the device camera and passes the image data to
    the `onCaptureSuccess()` method if the capture is successful. Later, the data
    source in encoded string format is assigned to the `<img>` tag's source.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you want to enable photo editing capabilities, set the `allowEdit` property
    to `true` as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you have made the changes, you need to build the project to try the application
    on your actual device. To do so, open the command-line tool and launch the `prepare`
    command, and then the `compile` command from the root of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `prepare` and `compile` commands can be executed from any folder of the
    project. The `build` command is a shorthand for the `prepare` and `compile` commands.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the project on your device for each target platform (unfortunately, emulators
    don''t support the camera). To test the app in the actual device platform, you
    can use the `run` command as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Before running this, you need to make your device ready to test, and the steps
    vary for each platform. For example, you need to enable the USB debugging option
    on your Android device. For more information on the setup of each platform, you
    can visit [https://cordova.apache.org/docs/en/edge/index.html](https://cordova.apache.org/docs/en/edge/index.html).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As explained in the previous sections, the `cleanup` method works only in iOS.
    This means that your app should look and work differently depending on the target
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating a new project with the Cordova command-line tool, a folder named
    `merges` is created in the root of the project. This folder contains a separate
    folder for each platform you add to the project; the root folder of a PhoneGap
    project looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: When you have to handle different user interface elements or business logic
    for a specific target platform, you can place the files you want to merge in the
    `merges/TARGET_PLATFORM` folder. You can create the `index.html` and `index.js`
    files, specifically targeted for the iOS platform by implementing the `cleanup`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You accessed the device camera and learned how to handle different implementations
    of the Camera API on Android and iOS using the merge feature of Cordova. Once
    you have built the app, if you go to the platform-specific folders (`platforms/android/assets/www`
    and `platforms/ios/www`) and open the `index.js` file, you will see that they
    differ from each other.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the camera popover
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `getPicture` method in iOS (and specifically on iPad) returns a `CameraPopoverHandle`
    object when the `sourceType` property value is one of the following pseudo constants
    defined in the `Camera.PictureSourceType` object: `SAVEDPHOTOALBUM` or `PHOTOLIBRARY`.
    Using this object, it''s possible to control the position of the popover dialog
    box created when the `getPicture` method is called.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `CameraPopoverHandle` object exposes only the `setPosition` method that
    requires a `CameraPopoverOptions` object as an argument. This object allows you
    to specify the coordinates, dimensions, and position of the arrow of this dialog
    box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can reach the same result with a more compact syntax, specifying the properties
    in the constructor of the `CameraPopoverOptions` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s also possible to specify coordinates, position, and arrow direction,
    using the `popoverOptions` property of the `cameraOptions` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The pseudo constants defined in the `PopoverArrowDirection` object match the
    native iOS constants defined in the `UIPopoverArrowDirection` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This option is extremely useful when you want to have control over the position
    of the dialog box when the orientation of the device changes. In the next example,
    you will control the position and size of the dialog box in order to override
    the default behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to use different iOS devices (for example, an iPhone 5 and 4S to
    test different screen sizes) for development, you have to create a provisioning
    file and add it to the device. You can either create one provisioning file for
    all your projects, or you can use one file for each project. In order to create
    a new file for your device, you have to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the device ID by clicking on the serial number you get on the first screen
    you get in iTunes when connecting the device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Apple developer portal, log in, and add a new development device to
    your account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and download a new provisioning file (you should already have a certificate
    available, otherwise read the information available in the Apple developer portal
    at [https://developer.apple.com/support/technical/certificates/](https://developer.apple.com/support/technical/certificates/)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the provisioning file to your device using the Xcode Organizer window (in
    Xcode, navigate to **Window** | **Organizer**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's also now possible to just plug in your device and let Xcode register and
    manage the provisioning profiles for you.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – controlling the position of the camera roll
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the following steps to change the position of the default camera roll dialog
    box on an iPad:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `merges/ios/js` folder of the PhoneGap project you previously created,
    open the `index.js` file, and add a new function named `initAdditionalOptions`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the body of the `initAdditionalOptions` function, specify the device photo
    album as the source of the `getCamera` method as well as the size and position
    of the popover dialog box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a call to the `initAdditionalOptions` function at the end of the `deviceready`
    event handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the command-line tool and run the `prepare` and `compile` commands (or
    the `build` command) in order to test the project on a real device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You handled the size and position of a default dialog box on iOS on an iPad
    using only JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: The Media Capture API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern devices offer a huge range of media capabilities to the user; at present,
    people can record a video, record some audio, and take a picture, and use all
    of these media in their communication flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Media Capture API works asynchronously as most of the PhoneGap APIs and
    provides access to the audio, image, and video capture capabilities of the device.
    In order to start working with this API, you have to install the plugin to your
    project as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Once done, you can access the `capture` object stored in the `navigator.device`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you get access to the `capture` object, it''s possible to detect which
    video, audio, and image formats are supported by the device through the following
    properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`supportedAudioModes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`supportedImageModes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`supportedVideoModes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each property returns an array of the `ConfigurationData` objects; each item
    of the array represents a supported media type. There are three properties defined
    in the `ConfigurationData` object that you can use to clearly identify the media
    types supported by the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type`: This is a lower case string that represents the supported media type
    following the RFC2046 standard explained at [http://www.ietf.org/rfc/rfc2046.txt](http://www.ietf.org/rfc/rfc2046.txt)
    (that is, `video/3gpp`, `video/quicktime`, `image/jpeg`, `audio/amr`, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`height`: This is a number that represents the height of the supported image
    or video in pixels (the property returns `0` when the object represents a supported
    audio format)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width`: This is a number that represents the width of the supported image
    or video in pixels (the property returns `0` when the object represents a supported
    audio format)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing, the `ConfigurationData` object is not implemented in
    any supported platform. In fact, each of the arrays stored into the `supportedAudioModes`,
    `supportedImageModes`, and `supportedVideoModes` properties are empty.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `capture` object exposes three methods in order to access the video, audio,
    and image capture capabilities of the device:'
  prefs: []
  type: TYPE_NORMAL
- en: '`captureVideo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`captureAudio`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`captureImage`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These methods have the same syntax: each one accepts a success handler, a failure
    handler, and an `option` object as arguments. The success handler is invoked upon
    a successful media capture operation and it receives an array of `MediaFile` objects
    describing each captured file as an argument. The error handler is invoked if
    an error occurs during a media capture operation or when the user cancels the
    operation and receives a `CaptureError` object as an argument. The following example
    captures an image using the device camera:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `MediaFile` object stored in the files array returned by the success handler
    describes the captured media. The properties of the `MediaFile` object are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fullPath`: This is a string that represents the file path on the device including
    the filename.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lastModifiedDate`: This is the modification date of the file expressed as
    the number of milliseconds since January 1, 1970 (refer to [https://developer.mozilla.org/en/docs/JavaScript/Reference/Global_Objects/Date](https://developer.mozilla.org/en/docs/JavaScript/Reference/Global_Objects/Date)
    for more information on the `Date` object in JavaScript).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This is a string that represents the name of the file. The name is
    composed by the `lastModificationDate` value and the file extension.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size`: This is a number that represents the size of the file in bytes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: This is a string that represents the mime type of the captured file
    (for example, `image/jpeg`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `CaptureError` object returned to the error handler only has one property,
    `code`. This property contains an integer equal to one of the following pseudo
    constants defined in the `CaptureError` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CaptureError.CAPTURE_INTERNAL_ERR` (returned value `0`): This means the device
    failed to capture a video, an image, or sound'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CaptureError.CAPTURE_APPLICATION_BUSY` (returned value `1`): This means the
    capture application is currently serving another capture request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CaptureError.CAPTURE_INVALID_ARGUMENT` (returned value `2`): This means the
    app is using invalid arguments when invoking the API (for example, the `limit`
    parameter has a value of less than 1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CaptureError.CAPTURE_NO_MEDIA_FILES` (returned value `3`): This means the
    user exited the camera application or the audio capture application before capturing
    anything'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CaptureError.CAPTURE_NOT_SUPPORTED` (returned value `20`): This means the
    requested capture operation is not supported'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `option` object varies for each method. In fact, the Capture API defines
    a different object for each kind of capture: `CaptureVideoOptions`, `CaptureAudioOptions`,
    and `CaptureImageOptions`. All of these objects have the same properties, limits,
    and modes in common; the `duration` property is defined only in the `CaptureVideoOptions`
    and `CaptureAudioOptions` objects. The default value of the `limit` property is
    `1` and it''s used to specify the number of captures the user can do before returning
    to the app. The `duration` property is the maximum length of a capture in seconds.
    The `mode` property represents the selected video or audio mode.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Support for the configuration options is very fragmented. For instance, the
    `limit` property of the `CaptureImageOptions` and `CaptureVideoOptions` objects
    is not supported in iOS. Refer to the documentation at [http://docs.phonegap.com/en/edge/cordova_media_capture_capture.md.html#Capture](http://docs.phonegap.com/en/edge/cordova_media_capture_capture.md.html#Capture)
    to check the actual status of the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: The most efficient way to manipulate an image is through native code; however,
    you can also perform simple image manipulations via JavaScript. In order to avoid
    overcomplicating the following example, we have used HTML Canvas to render an
    image with some effects.
  prefs: []
  type: TYPE_NORMAL
- en: The `<canvas>` tag of HTML is a container used to draw graphics on the fly using
    scripting languages such as JavaScript. It has several inbuilt functions and we
    are going to use them here.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on HTML5 Canvas, refer to [http://www.html5canvastutorials.com/](http://www.html5canvastutorials.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – manipulating images with a canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Get ready to apply a sepia effect to an image acquired using the Media Capture
    API. Execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command-line tool and create a new PhoneGap project named `ImageEffect`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the path to the newly created project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Media Capture API plugin using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `canvas` tag with the `id` value as `#manipulatedImage` to the existing
    markup, in order to use it to render the manipulated image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the `deviceready` event has been fired, access the device camera, which
    allows the user to access only one image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the success handler and access the file information stored in the array
    that is returned as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get access to the canvas and store a reference to the `2d` context of the canvas,
    in order to be able to draw content on it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `image` object, assign a handler to the `onload` property, and define
    the `src` property of the object using the `fullPath` property of the `MediaFile`
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the function stored in the `onload` property, draw the image on the canvas,
    get the pixels, manipulate them, and reassign the pixels to the canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The complete code of this example is provided here for your understanding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: You can find the `grayscale` function and several image effects at [http://www.html5rocks.com/en/tutorials/canvas/imagefilters/](http://www.html5rocks.com/en/tutorials/canvas/imagefilters/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you refer to any plugins or PhoneGap-specific objects such as `CameraPopoverOptions`,
    you have to wait until the `deviceready` event is fired so that the required objects
    are available for use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Some plugins define global objects and they can be used to verify that the
    plugin is loaded and available to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the Contacts API, how to find contacts from
    a device, how to filter contacts, and how to save new contacts to a device. You
    also learned the differences between the Camera and Media Capture APIs and how
    to use them in your application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to access the Device Sensor API in order
    to determine the device orientation, position, and also how to implement the Locations
    API.
  prefs: []
  type: TYPE_NORMAL
