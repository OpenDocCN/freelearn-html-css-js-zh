["```js\n<?php\n $action = $_GET[\"action\"];\n $name = $_GET[\"name\"];\n $email = $_GET[\"email\"];\n $phone = $_GET[\"phone\"];\n?>\n```", "```js\nif($action == \"add\") {\n $sql = \"INSERT INTO users VALUES($name, $email, $phone)\";\n $results = $db->query($sql);\n}\n```", "```js\nforeach($results as $result) {\n  $newArray[$result['key']] = $result['value'];\n}\njson_encode($newArray);\n\nprint $result;\n```", "```js\nExt.define('MyApp.model.User', {\n    extend: 'Ext.data.Model',\n    config: {\n        idProperty: 'id',\n        fields: [\n            {name: 'id', type: 'int'},\n            {name: 'name', type: 'string'},\n            {name: 'email', type: 'string'},\n            {name: 'phone', type: 'string'}\n        ]\n    }\n});\n```", "```js\nproxy: {\n  type: 'scripttag',\n  url: 'api/Users.php',\n  reader: {\n    type: 'json',\n    root: 'children'\n  },\n  api: {\n    create: 'api/Users.php?action=create',\n    read: 'api/ Users.php?action=read',\n    update: 'api/ Users.php?action=update',\n    destroy: 'api/ Users.php?action=destroy'\n  }\n}\n```", "```js\nvar user = Ext.create('User', {\n    name : 'Stacy McClendon',\n    email  : 'stacy@superhappyfuntimego.com',\n    phone: '555-555-5555'\n});\n\nuser.save();\n```", "```js\n{\n\"totalCount\":1,\n\"children\":[\n  {\n      id:1,\n      name : 'Stacy McClendon',\n      email  : 'stacy@superhappyfuntimego.com',\n      phone: '555-555-5555'\n  }\n ]\n}\n```", "```js\nuser.destroy();\n```", "```js\nExt.define('MyApp.store.UserStore', {\n  extend: 'Ext.data.Store',\n  model: ' MyApp.model.User',\n  requires: [' MyApp.model.User'],\n  storeID: 'UserStore',\n  emptyText: 'No Users To List',\n  proxy: {\n    type: 'ajax',\n    url: 'api/users.php',\n    reader: {\n      type: 'json',\n      root: 'children'\n    },\n    api: {\n      create: 'api/users.php?action=create',\n      read: 'api/users.php?action=read',\n      update: 'api/users.php?action=update',\n      destroy: 'api/users.php?action=destroy'\n    }\n  }\n});\n```", "```js\nstore.load({\n params:{paramName: paramValue}\n});\n```", "```js\nExt.define('CatHerder.model.Item', {\n    extend: 'Ext.data.Model',\n    uses: [\n        'CatHerder.model.Category'\n    ],\n    config: {\n        idProperty: 'itemID',\n        fields: [\n            {\n                name: 'itemID',\n                type: 'int'\n            },\n            {\n                name: 'name'\n            },\n            {\n                name: 'description'\n            },\n            {\n                name: 'price',\n                type: 'float'\n            },\n            {\n                name: 'photoURL'\n            },\n            {\n                name: 'categoryID',\n                type: 'int'\n            }\n        ],\n        hasOne: {\n         model: 'CatHerder.model.Category',\n         name: 'category',\n         primaryKey: 'categoryID'\n           },\n            proxy: {\n             type: 'rest',\n        url: '/api/item'\n       }\n    }\n});\n```", "```js\nproxy: {\n  type: 'rest',\n  url: '/api/item.php'\n}\n```", "```js\nRewriteEngine on\n# Send item requests to item.php\nRewriteRule ^item(/.*)?$ /api/item.php [L]\n\n# Send category requests to category.php\nRewriteRule ^category(/.*)?$ /api/category.php [L]\n```", "```js\nExt.define('CatHerder.store.itemStore', {\n    extend: 'Ext.data.Store',\n    requires: [\n        'CatHerder.model.Item'\n    ],\n\n    config: {\n        model: 'CatHerder.model.Item',\n        storeId: 'itemStore',\n        autoLoad: true\n    }\n});\n```", "```js\nExt.define('CatHerder.model.Category', {\n    extend:'Ext.data.Model',\n    config:{\n        idProperty:'categoryID',\n        fields:[\n            {\n                name:'categoryID',\n                type:'int'\n            },\n            {\n                name:'name'\n            }\n        ],\n        hasMany:{\n            model:'CatHerder.model.Item',\n            name:'items',\n            autoLoad:false\n        },\n        proxy:{\n            type:'rest',\n            url:'/api/category'\n        }\n    }\n});\n```", "```js\nExt.define('CatHerder.store.categoryStore', {\n    extend: 'Ext.data.Store',\n    requires: [\n        'CatHerder.model.Category'\n    ],\n    config: {\n        model: 'CatHerder.model.Category',\n        storeId: 'categoryStore',\n        autoLoad: true\n    }\n});\n```", "```js\n<?PHP\n\n$test = array(\n  array(\n    'itemID' => 1,\n    'name' => 'Test Item 1',\n    'description' => 'Lorem Ipsum',\n    'price' => 1.00,\n    'photoURL' => 'http://placekitten.com/200/300',\n    'categoryID' => 1,\n    'category' => array(\n      'categoryID' => 1, 'name' => 'Category 1', 'itemID' => 1\n    )\n  ),\n  array(\n    'itemID' => 2,\n    'name' => 'Test Item 2',\n    'description' => 'Lorem Ipsum',\n    'price' => 2.00,\n    'photoURL' => 'http://placekitten.com/400/300',\n    'categoryID' => 2,\n    'category' => array(\n      'categoryID' => 2, 'name' => 'Category 2', 'itemID' => 2\n    )\n  ),\n  array(\n    'itemID' => 3,\n    'name' => 'Test Item 3',\n    'description' => 'Lorem Ipsum',\n    'price' => 3.50,\n    'photoURL' => 'http://placekitten.com/200/200',\n    'categoryID' => 1,\n    'category' => array(\n      'categoryID' => 1, 'name' => 'Category 1', 'itemID' => 3\n    )\n  )\n);\n\necho json_encode($test);\n?>\n```", "```js\n<?PHP\n\n$test = array(\n  array(\n    'categoryID' => 1,\n    'name' => 'Category 1',\n    'items' => array(\n      array(\n        'itemID' => 1,\n        'name' => 'Test Item 1',\n        'description' => 'Lorem Ipsum',\n        'price' => 1.00,\n        'photoURL' => 'http://placekitten.com/200/300',\n        'categoryID' => 1\n      ),\n      array(\n        'itemID' => 3,\n        'name' => 'Test Item 3',\n        'description' => 'Lorem Ipsum',\n        'price' => 3.50,\n        'photoURL' => 'http://placekitten.com/200/200',\n        'categoryID' => 1\n      )\n    )\n  ),\n  array(\n    'categoryID' => 2,\n    'name' => 'Category 2',\n    'items' => array(\n      array(\n        'itemID' => 2,\n        'name' => 'Test Item 2',\n        'description' => 'Lorem Ipsum',\n        'price' => 2.00,\n        'photoURL' => 'http://placekitten.com/400/300',\n        'categoryID' => 2\t\n      )\n    )\n  ) \n);\n\necho json_encode($test);\n?>\n```", "```js\nitemTpl: [\n  '{category.name}: {name}',\n  '<p class=\"delete hidden\" style=\"position: absolute; right: 10px; top: 12px;\">',\n  '<img src=\"img/delete.png\" alt=\"delete\" />',\n  '</p>'\n]\n```", "```js\nitemTpl:[\n    '<div>{name} -- {[values.items.length]} item(s)</div>'\n]\n```", "```js\ninclude_once 'dbSetup.inc';\n\nswitch ($_SERVER['REQUEST_METHOD']) {\ncase \"GET\":\n    doGet();\n    break;\ncase \"POST\":\n    doPost();\n    break;\ncase \"PUT\":\n    doPut();\n    break;\ncase \"DELETE\":\n    doDelete();\n    break;\ndefault:\n    doGet();\n}\n```", "```js\nfunction doGet() {\n    $db = dbSetup();\n\n    if (preg_match('/item\\/(\\d+)[\\/]*$/', $_SERVER['REQUEST_URI'], $matches)) {\n        /* We've got a single item to grab. */\n        $itemID = array($matches[1]); // execute() expects an array.\n        $stmt = $db->prepare(\"select * from `items` where itemID = ?\");\n        if (is_object($stmt) && $stmt->execute($itemID)) {\n            /* We only asked for one. */\n            $row = $stmt->fetch();\n            $row['category'] = getCategory($row['categoryID'], $db);\n            doJson($row);\n        } else {\n            doJson(array(), false, $stmt->errorInfo());\n        }\n    }\n```", "```js\nfunction doJson($data, $success = true, $message = '') {\n    $output = array('success' => $success, 'data' => $data);\n    if ($message != '') {\n        $output['message'] = $message;\n    }\n    echo json_encode($output);\n}\n```", "```js\n} else {\n        $data = array();\n        $categories = array();\n        $filters = json_decode($_GET['filter'], TRUE);\n        $start = intval($_GET['start']);\n        $limit = intval($_GET['limit']);\n        /* For simplicity, just use one filter */\n        $filterColumn = $filters[0]['property'];\n        $filterValue = $filters[0]['value'];\n        $sql = \"select * from `items`\";\n        if (!is_null($filterValue) && $filterValue != 'null' && $filterValue != \"\") {\n            $sql .= \" where `$filterColumn` = '$filterValue'\";\n        }\n        if ($limit > 0) {\n            $sql .= \" limit $start,$limit\";\n        }\n        foreach ($db->query($sql) as $row) {\n            /* Only fetch categories once. */\n            if (!isset($categories[$row['categoryID']])) {\n                $categories[$row['categoryID']] = getCategory($row['categoryID'], $db);\n            }\n            $row['category'] = $categories[$row['categoryID']];\n\n            $data[] = $row;\n        }\n\n        echo json_encode($data);\n        exit;\n    }\n```", "```js\nfunction getJsonPayload() {\n    return json_decode(file_get_contents('php://input'), true);\n}\n```", "```js\nfunction doPost() {\n    $data = getJsonPayload();\n    $sql = \"insert into `items` (`itemID`, `name`, `description`, `price`, `photoURL`, `categoryID`) values (NULL, :name, :description, :price, :photoURL, :categoryID)\";\n\n    $db = dbSetup();\n    /* Prepare our data. Here is where you should add filtering, etc. */\n    $insert = array();\n    foreach ($data as $key => $val) {\n        if ($key != \"category_id\") {\n            $insert[':'.$key] = $val;\n        }\n    }\n\n    $stmt = $db->prepare($sql);\n    $stmt->execute($insert);\n    $data['itemID'] = $db->lastInsertId();\n    $data['category'] = getCategory($data['categoryID'],$db);\n    doJson($data);\n}\n```", "```js\nfunction doPut() {\n    $data = getJsonPayload();\n    $sql = \"update `items` set `itemID` = :itemID, `name` = :name, `description` = :description, `price` = :price, `photoURL` = :photoURL, `categoryID` = :categoryID where `itemID` = :itemID\";\n\n    $db = dbSetup();\n\n    /* Prepare our data. Here is where you should add filtering, etc. */\n    $insert = array();\n    foreach ($data as $key => $val) {\n        if ($key != \"category_id\") {\n            $insert[':'.$key] = $val;\n        }\n    }\n\n    $stmt = $db->prepare($sql);\n    $stmt->execute($insert);\n   ata['category'] = getCategory($data['categoryID'],$db);\n    doJson($data);\n}\n```", "```js\nfunction doDelete() {\n    $db = dbSetup();\n    $data = getJsonPayload();\n    $itemID = array($data['itemID']);\n    $sql = 'delete from items where itemID = ?';\n    $stmt = $db->prepare($sql);\n    $stmt->execute($itemID);\n    echo json_encode($data);\n} \n```"]