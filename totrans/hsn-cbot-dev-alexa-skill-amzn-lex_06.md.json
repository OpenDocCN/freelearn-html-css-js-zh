["```js\nexports.handler = async (event) => {\n    return handleProductFind(event);\n}\n```", "```js\nconst handleProductFind = event => {\n    let { slots } = event.currentIntent;\n    let { itemNumber, type, size, colour, length } = slots;\n\n    if (itemNumber) return getItem(slots);\n    // No item number so using normal product find\n    if (!type) {\n        let message = 'Are you looking for a shirt, jacket or trousers?';\n        let intentName = 'productFind';\n        let slotToElicit = 'type';\n        return Lex.elicitSlot({ message, intentName, slotToElicit, slots })\n    }\n    ...\n}\n```", "```js\nif ( !length && type === 'trousers' ){ ... }\n```", "```js\nreturn getItem(slots);\n```", "```js\nconst getStock = () => {\n    var params = {\n        Bucket: 'shopping-stock',\n        Key: `stock.json`\n    };\n\n    return new Promise((resolve, reject) => {\n        s3.getObject(params, function(err, data) {\n            if (err) { // an error occurred\n                reject(err)\n            } else { // successful response\n                resolve(JSON.parse(data.Body).stock)\n            }\n        });\n    })\n}\n```", "```js\nconst AWS = require('aws-sdk');\nconst s3 = new AWS.sS()'\n```", "```js\nlet matching = stock.find(item =>\n    itemNumber === item.itemNumber ||\n    type == item.type &&\n    size == item.size &&\n    colour == item.colour &&\n    (item.length == length || item.type != 'trousers'));\n```", "```js\nif (!matching) {\n    let message = `Unfortunately we couldn't find the item you were looking for`;\n    return Lex.Close({ message })\n}\n```", "```js\nif (matching.stock < 1) {\n    let message = `Unfortunately we don't have anything matching your request in stock. Would you like to search again?`;\n    let intentName = 'productFind';\n    slots = { type: null, size: null, colour: null, length: null, itemNumber: null };\n    return Lex.confirmIntent({ intentName, slots, message })\n}\n```", "```js\nconst units = (type, stock) => {\n    if (type === 'trousers') {\n        return `pair${stock !== 1 ? 's': ''} of trousers`\n    }\n    return `${type}${stock !== 1 ? 's': ''}`;\n}\n```", "```js\nlet message = `There are ${matching.stock} ${matching.colour} ${units(matching.type, matching.stock)} in stock. Would you like to add one to your basket?`;\nlet intentName = 'addToBasket';\nslots = { itemNumber: matching.itemNumber };\nreturn Lex.confirmIntent({ intentName, slots, message });\n```", "```js\nmodule.exports = class Lex {\n    ElicitSlot({ sessionAttributes = {}, message, intentName, slotToElicit, slots }) { ... }\n    Close({ message, sessionAttributes = {}, fulfillmentState = \"Fulfilled\" }) { ... }\n    ElicitIntent({ message, sessionAttributes = {} }) { ... }\n    confirmIntent({ sessionAttributes = {}, intentName, slots, message }) { ... }\n    delegate({ sessionAttributes = {}, slots }) { ... }\n}\n```", "```js\nconst lex = require('./LexResponses);\nconst Lex = new lex();\n```", "```js\nif (event.currentIntent && event.currentIntent.confirmationStatus) {\n    let confirmationStatus = event.currentIntent.confirmationStatus;\n    if (confirmationStatus == \"Denied\"){\n        console.log('got denied status');\n        let message = `Thank you for shopping with us today. Have a nice day`\n        return Lex.close({message})\n    }\n    if (confirmationStatus == 'Confirmed'){\n        console.log('got confirmed status');\n    }\n}\n```", "```js\n{\n    \"currentIntent\": {\n        \"slots\": {\n            \"type\": null,\n            \"size\": null,\n            \"colour\": null,\n            \"length\": null,\n            \"itemNumber\": null\n        }\n    }\n}\n```", "```js\n{\n    \"currentIntent\": {\n        \"slots\": {\n            \"type\": \"shirt\",\n            \"size\": \"medium\",\n            \"colour\": \"blue\",\n            \"length\": null,\n            \"itemNumber\": null\n        },\n        \"confirmationStatus\": \"Confirmed\"\n    }\n}\n```", "```js\nexports.handler = async (event) => {\n    if (event.currentIntent && event.currentIntent.confirmationStatus === \"Denied\"){\n        let message = `Would you like to find another product?`;\n        let intentName = 'productFind';\n        let slots = { type: null, size: null, colour: null, length: null, itemNumber: null };\n        return Lex.confirmIntent({ intentName, slots, message })\n    }\n    return handleAddToCart(event);\n}\n```", "```js\nconst lex = require('./LexResponses');\nconst Lex = new lex();\n```", "```js\nconst handleAddToCart = async event => {\n    let { slots } = event.currentIntent;\n    let { itemNumber } = slots;\n\n    if (!itemNumber) {\n        let message = `You need to select a product before adding it to a cart. Would you like to find another product?`;\n        let intentName = 'productFind';\n        slots = { type: null, size: null, colour: null, length: null, itemNumber: null };\n        return Lex.confirmIntent({ intentName, slots, message })\n    }\n}\n```", "```js\nlet [err, cartUser] = await to(DB.get('ID', event.userId, 'shopping-cart'));\nif (!cartUser) {\n    cartUser = { ID: event.userId, Items: [], name: uuidv4(), TTL: 0 }\n}\n```", "```js\nconst uuidv4 = require('uuid/v4');\n```", "```js\nlet updatedCart = { ...cartUser, Items: [...cartUser.Items, itemNumber], TTL: Date.now() + 7 * 24 * 60 * 60 * 1000 };\n```", "```js\nlet [writeErr, res] = await to(DB.write(event.userId, updatedCart, 'shopping-cart'));\nif (writeErr) {\n    let message = `Unfortunately we've had an error on our system and we can't add this to your cart.`\n    return Lex.close({ message });\n}\n```", "```js\nlet message = `Would you like to checkout, add another item to your cart or save your cart for later?`;\nreturn Lex.elicitIntent({ message });\n```", "```js\nmodule.exports = class DB {};\n```", "```js\nconst AWS = require('aws-sdk');\nlet documentClient = new AWS.DynamoDB.DocumentClient({\n    'region': 'eu-west-1'\n});\n```", "```js\nwrite(ID, data, table) {\n    return new Promise((resolve, reject) => {\n        if (!ID) throw 'An ID is needed';\n        if (typeof ID !== 'string') throw `the id must be a string and not ${ID}`\n        if (!data) throw \"data is needed\";\n        if (!table) throw 'table name is needed';\n        if (typeof table !== 'string') throw `the table must be a string and not ${table}`;\n    })\n}\n```", "```js\nlet params = {\n    TableName: table,\n    Item: { ...data, ID: ID }\n};\n```", "```js\ndocumentClient.put(params, function(err, result) {\n    if (err) {\n        console.log(\"Err in writeForCall writing messages to dynamo:\", err);\n        console.log(params);\n        return reject(err);\n    }\n    console.log('wrote data to table ', table)\n    return resolve({ ...result.Attributes, ...params.Item });\n});\n```", "```js\nget(key, value, table) {\n    if (!table) throw 'table needed';\n    if (typeof key !== 'string') throw `key was not string and was ${JSON.stringify(key)} on table ${table}`;\n    if (typeof value !== 'string') throw `value was not string and was ${JSON.stringify(value)} on table ${table}`;\n    return new Promise((resolve, reject) => {\n        let params = {\n            TableName: table,\n            Key: { [key]: value }\n        };\n        documentClient.get(params, function(err, data) {\n            if (err) {\n                console.log(`There was an error fetching the data for ${key} ${value} on table ${table}`, err);\n                return reject(err);\n            }\n            //TODO check only one Item.\n            return resolve(data.Item);\n        });\n    });\n}\n```", "```js\n getDifferent(key, value, table) {\n     if (!table) throw 'table needed';\n     if (typeof key !== 'string') throw `key was not string and was ${JSON.stringify(key)} on table ${table}`;\n     if (typeof value !== 'string') throw `value was not string and was ${JSON.stringify(value)} on table ${table}`;\n     if (!table) 'table needs to be users, sessions, or routes.'\n     return new Promise((resolve, reject) => {\n         var params = {\n             TableName : table,\n             IndexName : `${key}-index`,\n             KeyConditionExpression : `${key} = :value`, \n             ExpressionAttributeValues : {\n                 ':value' : value \n             }\n         };\n\n         documentClient.query(params, function(err, data) {\n             if (err) {\n                 console.error(\"Unable to read item. Error JSON:\", JSON.stringify(err));\n                 reject(err);\n             } else {\n                 console.log(\"GetItem succeeded:\", JSON.stringify(data.Items));\n                 resolve(data.Items);\n             }\n         });\n     })\n }\n```", "```js\ndelete(ID, table) {\n    if (!table) throw 'table needed';\n    if (typeof ID !== 'string') throw `ID was not string and was ${JSON.stringify(ID)} on table ${table}`;\n    console.log(\"dynamo deleting record ID\", ID, 'from table ', table);\n    let params = {\n        TableName: table,\n        Key: { 'ID': ID  }\n    };\n\n    return new Promise((resolve, reject) => {\n        documentClient.delete(params, function(err, data) {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\n}\n```", "```js\nasync update(ID, table, key, value) {\n    let data = await this.get(ID, table);\n    return this.write(ID, { ...data, [key]: value }, table);\n}\n```", "```js\nconst db = require('./DB');\nconst DB = new db();\n```", "```js\n{ \"currentIntent\": { \"confirmationStatus\": \"Denied\" } }\n```", "```js\n{\n    \"currentIntent\": {\n        \"confirmationStatus\": \"Confirmed\",\n        \"slots\": {\n            \"itemNumber\": null\n        }\n    }\n}\n```", "```js\n{\n    \"currentIntent\": {\n        \"slots\": {\n            \"itemNumber\": 1034\n        }\n    },\n    \"userId\": \"123-sdf-654-hjk2\"\n}\n```", "```js\nexports.handler = async (event) => {\n    if (event.currentIntent && event.currentIntent.confirmationStatus === \"Denied\") {\n        let message = `Would you like to find another product?`;\n        let intentName = 'productFind';\n        slots = { type: null, size: null, colour: null, length: null, itemNumber: null };\n        return Lex.confirmIntent({ intentName, slots, message })\n    }\n    return handleCheckout(event);\n}\n```", "```js\nconst lex = require('./LexResponses');\nconst Lex = new lex();\n```", "```js\nconst handleCheckout = async event => {\n    let { slots } = event.currentIntent;\n    let { deliveryAddress } = slots;\n\n    if (!deliveryAddress) {\n        let message = `What address would you like this order delivered to?`;\n        let intentName = 'checkout';\n        slots = { deliveryAddress: null };\n        let slotToElicit = 'deliveryAddress';\n        return Lex.elicitSlot({message, intentName, slots, slotToElicit});\n    }\n}\n```", "```js\nlet [cartErr, cart] = await to(DB.get(\"ID\", event.userId, 'shopping-cart'));\nif (!cart){\n    console.log('no cart');\n    let message = `We couldn't find your cart. Is there anything else I can help you with`;\n    return Lex.elicitIntent({ message });\n}\n```", "```js\nlet order = { Items: cart.Items, address: deliveryAddress, date: Date.now() };\nlet ID = uuidv4();\n```", "```js\ntry {\n    await to(DB.write(ID, order, 'shopping-orders'));\n    await to(DB.delete(event.userId, 'shopping-cart'));\n} catch (err) {\n    console.log('error deleting the cart or writing the order', cartErr)\n    let message = `I'm sorry, there was a system error so your order hasn't been placed.`;\n    return Lex.close({ message });\n}\n```", "```js\nlet message = `Thank you. Your order has been placed and will be delivered in 3-5 working days`;\nreturn Lex.close({ message });\n```", "```js\n./build.sh checkout\n```", "```js\n{ \"currentIntent\": { \"confirmationStatus\": \"Denied\" } }\n```", "```js\n{\n    \"currentIntent\": {\n        \"confirmationStatus\": \"Confirmed\",\n        \"slots\": { \"deliveryAddress\": null}\n    }\n}\n```", "```js\n{\n \"currentIntent\": {\n \"confirmationStatus\": \"None\",\n \"slots\": { \"deliveryAddress\": \"123 imaginary street, fake town, madeupsville\"}\n },\n \"userId\": \"fakeUser\"\n}\n```", "```js\n{\n    \"currentIntent\": {\n        \"confirmationStatus\": \"None\",\n        \"slots\": { \"deliveryAddress\": \"123 imaginary street, fake town, madeupsville\"}\n    },\n    \"userId\": ## paste your ID here\n}\n```", "```js\nconst lex = require('./LexResponses');\nconst Lex = new lex();\nconst db = require('./DB');\nconst DB = new db();\n\nexports.handler = async (event) => {\n    return handleSaveCart(event);\n}\n```", "```js\nconst handleSaveCart = async event => {\n    let { slots } = event.currentIntent;\n    let { cartName } = slots;\n}\n```", "```js\nif (!cartName) {\n    let message = `You need to save your cart with a name. What do you want to call it?`;\n    let intentName = 'saveCart';\n    slots = { cartName: null };\n    let slotToElicit = 'cartName';\n    return Lex.elicitSlot({ intentName, slotToElicit, slots, message });\n}\n```", "```js\nlet [err, cart] = await to(DB.get('ID', event.userId, 'shopping-cart'));\nif (err || !cart || !cart.Items) {\n    let message = `You don't have a cart. Would you like to find a product?`;\n    let intentName = 'productFind';\n    slots = { type: null, size: null, colour: null, length: null, itemNumber: null };\n    return Lex.confirmIntent({ intentName, slots, message });\n}\n```", "```js\nlet [getCartErr, getCarts] = await to(DB.getDifferent('cartName', cartName, 'shopping-cart'));\nif (!getCarts || !getCarts[0] ) {\n    // No cart with that name so we can save the current cart to this name\n    return addNameToCart(cart, cartName);\n}\nlet message = `Unfortunately you can't use that name. Please choose another name.`;\nlet intentName = 'saveCart';\nlet slotToElicit = 'cartName';\nslots = { cartName: null };\nreturn Lex.elicitSlot({ intentName, slots, slotToElicit, message });\n```", "```js\nconst addNameToCart = async (cart, cartName) => {\n    cart.cartName = cartName;\n}\n```", "```js\nlet [err, res] = await to(DB.write(cart.ID, cart, 'shopping-cart'));\nif (err) {\n    console.log('err writing cart with name', err);\n    let message = `Unfortunately we cant save your cart`;\n    return Lex.close({ message });\n}\nlet message = `Your cart has been saved. Type \"find my cart\" next time and enter \"${cartName}\" to get this cart.`;\nreturn Lex.close({ message });\n```", "```js\n{\n    \"currentIntent\": {\n        \"slots\": {\n            \"cartName\": null\n        }\n    }\n}\n```", "```js\n{\n    \"currentIntent\": {\n        \"slots\": {\n            \"cartName\": \"personalShopping\"\n        }\n    },\n    \"userId\": \"asdasdasdasdasd\"\n}\n```", "```js\n{\n    \"currentIntent\": {\n        \"slots\": {\n            \"cartName\": \"testCartSave\"\n        }\n    },\n    \"userId\": ## valid userId\n}\n```", "```js\n{\n    \"currentIntent\": {\n        \"slots\": {\n            \"cartName\": \"testCartSave\"\n        }\n    },\n    \"userId\": ## another valid userId\n}\n```", "```js\nconst lex = require('./LexResponses');\nconst Lex = new lex();\nconst db = require('./DB');\nconst DB = new db();\n\nexports.handler = async (event) => {\n    return handleGetSavedCart(event);\n}\n```", "```js\nconst handleGetSavedCart = event => {\n    let { userId, currentIntent: { slots } } = event;\n    let { cartName } = slots;\n\n    if (!cartName) {\n        let message = `What name did you save your cart as?`;\n        let intentName = 'getSavedCart';\n        let slotToElicit = 'cartName';\n        let slots = { cartName: null };\n        return Lex.elicitSlot({ intentName, slots, slotToElicit, message });\n    }\n}\n```", "```js\nlet [err, carts] = await to(DB.getDifferent('cartName', cartName, 'shopping-cart'));\nif (err || !carts || !carts[0]) {\n        let message = `We couldn't find a cart with that name. Would you like to try another name or start a new cart?`;\n        return Lex.elicitIntent({message});\n    }\n```", "```js\nlet cart = carts[0];\n```", "```js\nlet cart = carts[0];\nlet oldCartID = cart.ID;\nlet newCart = { ...cart, ID: userId, TTL: Date.now() + 7 * 24 * 60 * 60 * 1000 };\n```", "```js\ntry {\n    await DB.write(userId, newCart, 'shopping-cart');\n    await DB.delete(oldCartID, 'shopping-cart');\n} catch (createErr) {\n    let message = `Unfortunately we couldn't recover your cart. Would you like to create a new cart?`;\n    let intentName = 'productFind';\n    let slots = { type: null, size: null, colour: null, length: null, itemNumber: null };\n    return Lex.confirmIntent({ intentName, slots, message });\n}\n\nlet message = `We have got your cart for you. Would you like to checkout or add another product?`;\nreturn Lex.elicitIntent({ message });\n```", "```js\n{\n    \"currentIntent\": {\n        \"slots\": {\n            \"cartName\": null\n        }\n    }\n}\n```", "```js\n{\n    \"currentIntent\": {\n        \"slots\": {\n            \"cartName\": \"nonsense\"\n        }\n    }\n}\n```", "```js\n{\n    \"currentIntent\": {\n        \"slots\": {\n            \"cartName\": \"testCartSave\"\n        }\n    }\n}\n```", "```js\nconst lex = require('./LexResponses');\nconst Lex = new lex();\nconst db = require('./DB');\nconst DB = new db();\nconst AWS = require('aws-sdk');\nconst s3 = new AWS.S3();\n\nexports.handler = async (event) => {\n    return handleWhatsInMyCart(event);\n}\n```", "```js\nconst handleWhatsInMyCart = async event => {\n    let [err, cart] = await to(DB.get('ID', event.userId, 'shopping-cart'));\n    if (err || !cart || cart.Items.length == 0) {\n        let message = `You don't appear to have a cart. If you have saved a cart then you can recover it by typing \"Get my cart\", or you can say \"I want to buy something\"`;\n        return Lex.elicitIntent({ message });\n    }\n}\n```", "```js\nlet items = {};\ncart.Items.map(item => {\n    items[item] = (items[item] && items[item].quantity) ? { quantity: items[item].quantity + 1 } : { quantity: 1 };\n});\n```", "```js\nconst [s3Err, products] = await to(getStock());\nif (s3Err || !products) {\n    let message = `Unfortunately our system has had an error.`;\n    Lex.close({ message });\n}\n```", "```js\nproducts.forEach(product => {\n    if (items[product.itemNumber]){\n        items[product.itemNumber] = { ...product, ...items[product.itemNumber]};\n    }\n});\n```", "```js\nlet data = {\n    name: { firstName: 'Tom', lastName: 'Jones' },\n    age: 25,\n    height: '178 cm'\n};\n\nconsole.log(Object.values(data));\n// [ { firstName: 'Tom', lastName: 'Jones' }, 25 , '178cm' ]\n```", "```js\nlet itemStrings = Object.values(items).map(item => {\n    let { type, size, colour, length, quantity } = item;\n    return `${quantity} ${size}, ${length ? `${length}, ` : ''}${colour} ${units(type, quantity)}`;\n});\n```", "```js\nlet message = `You have ${itemStrings.slice(0,-1).join(', ')}${itemStrings.length > 1 ? ` and `: \"\"}${itemStrings.pop()} in your cart. Would you like to checkout, save your cart or add another item?`;\n```", "```js\nreturn Lex.elicitIntent({ message });\n```", "```js\n{\n    \"userId\": \"nonsense\"\n}\n```", "```js\n{\n    \"userId\": ## valid userID\n}\n```"]