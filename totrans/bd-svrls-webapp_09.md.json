["```js\n        \"iot\": {\n          \"REGION\": \"us-east-1\",\n          \"ENDPOINT\": \"abcdef.iot.us-east-1.amazonaws.com\"\n        }\n\n```", "```js\n npm install aws-iot-device-sdk --save\n\n```", "```js\n    import awsIot from 'aws-iot-device-sdk';\n    import config from './config';\n\n    export default class IoT {\n\n      constructor(keys, messageCallback) {  \n        this.client = null;\n        this.accessKey = keys.accessKey;\n        this.secretKey = keys.secretKey;\n        this.sessionToken = keys.sessionToken;\n        this.messageCallback = messageCallback;\n      }\n\n      connect() {\n        // TODO\n      }\n\n      publish(topic, message) {\n        // TODO\n      }\n\n      subscribe(topic) {\n        // TODO\n      }\n    }\n\n```", "```js\n    connect() {\n      this.client = awsIot.device({\n        region: config.iot.REGION,\n        host: config.iot.ENDPOINT, \n        accessKeyId: this.accessKey,\n        secretKey: this.secretKey,\n        sessionToken: this.sessionToken,\n        port: 443,\n        protocol: 'wss' // WebSocket with TLS \n      });\n\n      this.client.on('connect', this.handleConnect);\n      this.client.on('message', this.handleMessage);\n      this.client.on('close', this.handleClose);\n    }\n\n   publish(topic, message) {\n     this.client.publish(topic, message);\n   }\n\n   subscribe(topic) {\n     this.client.subscribe(topic);\n   }\n\n```", "```js\n    handleConnect() {\n      console.log('Connected');\n    }\n\n    handleMessage(topic, message) {\n      this.messageCallback(topic, message);\n    }\n\n    handleClose() {\n      console.log('Connection closed');\n    }\n\n```", "```js\n    return (\n      <div className=\"comment-box\">\n        <input type=\"text\" onChange={this.handleChange} \n               value={this.state.input} />\n        <button onClick={this.handleClick}>\n          <i className=\"glyphicon glyphicon-share-alt\">\n          </i> Send\n        </button>\n      </div>\n    );\n\n```", "```js\n    handleChange(e) {\n      this.setState({ input: e.target.value });\n    }\n\n    handleClick() {\n      this.props.onComment(this.state.input, this.props.productId);\n      this.setState({ input: '' });\n    }\n\n```", "```js\n    handleComments(comment, productId) {\n      const newComment = {\n        id: uuid(),\n        username: 'user1337',\n        age: 'a few seconds ago',\n        text: comment\n      };\n\n      const product = this.state\n                          .products\n                          .find(p => p.id === productId);\n\n      // add to the comment to the beginning of the array\n      product.comments.unshift(newComment);\n\n      this.setState({\n        products: this.state.products\n      });\n\n      // TODO: send the new comment to IoT\n    }\n\n```", "```js\n npm install aws-sdk --save\n\n```", "```js\n        AWS.config.region = config.cognito.REGION;\n        AWS.config.credentials = \n new AWS.CognitoIdentityCredentials({ IdentityPoolId: config.cognito.IDENTITY_POOL_ID\n });\n\n AWS.config.credentials.get(() => {\n          const keys = {\n            accessKey: AWS.config.credentials.accessKeyId,\n            secretKey: AWS.config.credentials.secretAccessKey,\n            sessionToken: AWS.config.credentials.sessionToken\n          }\n        });\n\n```", "```js\n        const getIotClient = (messageCallback, callback) {    \n          retrieveAwsKeys(keys => {\n            const client = new IoT(keys, messageCallback);\n            client.connect();\n            client.subscribe('serverless-store-comments');\n            callback(null, client);\n          });\n        }\n\n```", "```js\n        componentDidMount() {\n          getIotClient(\n            this.handleIotMessages, \n            (err, client) => {\n              if (err) alert(err);\n              else this.setState({iotClient: client})\n            });\n        }\n\n```", "```js\n        handleComments(comment, productId) {\n          const newComment = {\n            id: uuid(),\n            username: 'user1337',\n            age: 'a few seconds ago',\n            text: comment\n          };\n\n          const topic = 'serverless-store-comments';\n          const message = JSON.stringify({\n            comment: newComment,\n            productId: productId\n          });\n\n          this.state.iotClient.publish(topic, message);\n        }\n\n```", "```js\n        handleIotMessages(topic, message) {\n          const msg = JSON.parse(message.toString());\n\n          if (topic === 'serverless-store-comments') {\n            const id = msg.productId;\n            const product = this.state\n                                .products\n                                .find(p => p.id === id);\n\n            product.comments.unshift(msg.comment);\n            this.setState({\n              products: this.state.products\n            });\n          }\n        }\n\n```", "```js\n    functions:\n      comments:\n        handler: functions/comments.handler\n        events:\n          - iot:\n              sql: \"SELECT * FROM 'topic-name'\"\n\n```", "```js\n    {\n      \"comment\": \"this is a bad product\",\n      \"rating\": 2\n    }\n\n```", "```js\n    \"SELECT * FROM 'topic-name' WHERE rating < 3\"\n\n```", "```js\n    const utils = require('../lib/utils');\n\n    module.exports.handler = (event, context, callback) => {\n      console.log(event);\n      utils.successHandler(event, callback);\n    };\n\n```", "```js\n serverless logs --function comments\n\n```", "```js\n serverless-store-${cognito-identity.amazonaws.com:sub}\n\n```", "```js\n    AWS.config.region = config.cognito.REGION;\n    AWS.config.credentials = \n      new AWS.CognitoIdentityCredentials({\n        IdentityPoolId: config.cognito.IDENTITY_POOL_ID\n      });\n\n```", "```js\n    const region = config.cognito.REGION;\n    const pool = config.cognito.USER_POOL_ID;\n const authenticator = \n `cognito-idp.${region}.amazonaws.com/${pool}`;\n\n    AWS.config.credentials = \n      new AWS.CognitoIdentityCredentials({\n        IdentityPoolId: config.cognito.IDENTITY_POOL_ID,\n Logins: {\n [authenticator]: userToken\n }\n      });\n\n```", "```js\n    if (AWS.config.credentials) {\n AWS.config.credentials.clearCachedId();\n    }\n\n```", "```js\n    AWS.config.credentials.get(() => {\n      const keys = {\n        accessKey: AWS.config.credentials.accessKeyId,\n        secretKey: AWS.config.credentials.secretAccessKey,\n        sessionToken: AWS.config.credentials.sessionToken\n      }\n\n const awsIoT = new AWS.Iot();\n const params = {\n policyName: 'iot-policy',\n principal: AWS.config.credentials.identityId\n }\n\n awsIoT.attachPrincipalPolicy(params, (err, res) => {\n        if (err) alert(err);\n        else {\n          const client = new IoT(keys, messageCallback);\n          client.connect();\n\n          // subscribe to the public topic\n          client.subscribe('serverless-store-comments');\n\n // subscribe to the private topic\n const id = AWS.config.credentials.identityId;\n client.subscribe('serverless-store-' + id);\n\n          callback(null, client);\n        }\n      });\n    });\n\n```", "```js\n        provider:\n          name: aws\n          runtime: nodejs6.10\n iamRoleStatements:\n - Effect: \"Allow\"\n Action:\n - \"iot:Publish\"\n Resource: \n \"arn:aws:iot:<region>:<account>:topic/*\"\n\n```", "```js\n        const AWS = require('aws-sdk');\n        const utils = require('./utils');\n\n        module.exports.processCheckout = (cognitoId, callback) => {\n          const iotdata = new AWS.IotData({\n            endpoint: 'YOUR_IOT_ENDPOINT'\n          }); \n\n          const params = {\n            topic: 'serverless-store-' + cognitoId,\n            payload: 'Your payment was confirmed.'\n          };\n\n iotdata.publish(params, (err, res) => {\n            if (err) utils.errorHandler(err, callback);\n            else utils.successHandler(res, callback);\n          });\n      };\n\n```"]