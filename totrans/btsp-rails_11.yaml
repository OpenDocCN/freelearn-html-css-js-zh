- en: Appendix A. Adding Custom Styles to a Rails Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, we have reached the last chapter of this book, where we will talk about
    how to add a custom styles to a Rails application, which is powered by Bootstrap
    framework. Throughout the book, we have gone through various Bootstrap CSS and
    JavaScript components that come ready to use out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will see how to extend Bootstrap framework and add our own
    style to it. There are still many important components that are missing from the
    Bootstrap framework. We will check out some of the popular Bootstrap plugins that
    are available for free.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics that we will cover are:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Bootstrap-sass to a Rails Application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing Bootstrap through variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Bootstrap-sass to a Rails application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the *Installing Bootstrap in the Rails project*, section in [chapter 2](ch02.html
    "Chapter 2. Introducing Bootstrap 3"), *Introducing Bootstrap 3* we saw how to
    include Bootstrap into our Rails application through three different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: The CDN method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap-sass gem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By downloading Bootstrap files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To quicken things up, we had opted for the CDN method. Well, in this chapter,
    we are going to use Bootstrap through Bootstrap-sass gem. This will enable us
    to completely customize the Bootstrap''s default styles. So, let''s proceed and
    install `Bootstrap-sass gem` in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `application` folder and edit the file `Gemfile` using a text editor.
    Add the following two lines of code at the end of this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The above two lines will install `bootstrap-sass` and `autoprefixer-rails gems`
    into your application. The `autoprefixer-rails` is needed to automatically append
    browser vendor prefixes in the CSS `stylesheets`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's bundle the application, so that the above gems are actually downloaded
    and installed in our application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once the execution of the above command is complete, navigate to the `app` |
    `assets` | `stylesheets` folder. Rename the `application.css` file to the `application.css.scss`
    file. Next, remove the imported CDN link from the file, which was included by
    us earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we need to include Bootstrap files that are downloaded through gem inside
    the `application.css.scss` file. To do that, include the following 2 lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `bootstrap-sprockets` value is needed to correctly link the font files with
    the Bootstrap's CSS files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It''s time to link the Bootstrap''s JavaScript files using the recently gem:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to remove the hardcoded Bootstrap''s JavaScript CDN link from
    the `application.html.erb` file, present in the `layouts` folder by navigating
    to `app` | `views` | `layouts` folder. Remove the following line from this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, go to the JavaScript folder by navigating to `app` | `assets` | `javascript`
    folder and edit the `application.js` file. Add the following line immediately
    after the jQuery line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, we are done. If you reopen your application in the browser, you can
    see that everything is working, just like before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customizing Bootstrap through variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the visible Bootstrap styles can be overridden simply by using pre-defined
    Bootstrap variables. Before proceeding, you should understand that Bootstrap was
    initially compatible with LESS only. They have later ported it to the Sass version.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: LESS and Sass are CSS preprocessors that help us to organize and write scalable
    CSS styles. Both of them are very similar to each other in syntax and differ only
    by the additional features that one has and the other doesn't.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, all the variables present in the LESS version remain the same in the
    Sass version, as well. Bootstrap hasn't provided a dedicated page for the list
    of variables present in Sass, however, you can find the list of variables in the
    LESS version on their official website ([http://getbootstrap.com/customize/#less-variables](http://getbootstrap.com/customize/#less-variables)).
    Let's proceed and change some of the default Bootstrap styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our application, we have used `.btn-success` at various places. So, let''s
    change some of the CSS styles in it. Re-open the `application.css.scss` file,
    and add the following lines before the Bootstrap''s import line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We can change the style of the `.btn-success` class completely through the `$btn-success-color`,
    `$btn-success-bg`, and `$btn-success-border` Bootstrap Sass variables. In the
    above code, I have changed the text color of the button to `#333`. I have also
    lightened the background color to a new HEX color, and finally changed the border
    color using the darken color function in Sass.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can go through the whole list of available variables and make the customizations
    accordingly. You can also include the available Bootstrap theme by adding the
    following line in the `application.css.scss` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `bootstrap/theme` is the official Bootstrap's default style customized from
    Bootstrap's theme. It comes with some cool styles and you should try using it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap customization can help you create a visually different looking website.
    If you are a designer in the Rails application development team, this is the field
    you must master. In this chapter, we saw how to include Bootstrap-sass gem in
    a Rails application. We also understood what it takes to override the default
    Bootstrap styles through pre-defined variables. I hope you found this useful.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, if you still have questions related to using Bootstrap in Rails
    applications shoot me a tweet `@fazlerocks`, I will be happy to help you!
  prefs: []
  type: TYPE_NORMAL
