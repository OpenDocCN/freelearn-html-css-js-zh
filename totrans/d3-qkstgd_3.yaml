- en: Building an Interactive Scatter Plot
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个交互式散点图
- en: Let's pretend we've started jogging and we want to visualize the data regarding
    our progress as a runner, with a scatter plot. We're going to have an array of
    objects, each with a date and distance properties. For each object in the array,
    we're going to create a circle in our SVG. If the `distance` property of an object
    is relatively high, its associated circle will be higher up on the graph. If the
    `date` property of an object is relatively high (a later date), its associated
    circle will be farther right.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设我们已经开始了慢跑，并希望通过散点图来可视化我们作为跑者的进步数据。我们将有一个包含对象的数组，每个对象都有一个日期和距离属性。对于数组中的每个对象，我们将在SVG中创建一个圆圈。如果一个对象的`distance`属性相对较高，其关联的圆圈将在图表上更高。如果一个对象的`date`属性相对较高（较晚的日期），其关联的圆圈将在图表的右侧更远。
- en: 'By the end of this lesson, you should be able to do the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本节课结束时，你应该能够做到以下几点：
- en: Add a link to the D3 library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加指向D3库的链接
- en: Add an`<svg>`tag and size it with D3
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用D3添加一个`<svg>`标签并设置其大小
- en: Create some fake data for our app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的应用程序创建一些假数据
- en: Add SVG circles and style them
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加SVG圆圈并为其设置样式
- en: Create a linear scale
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个线性刻度
- en: Attach data to visual elements
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据附加到视觉元素上
- en: Use data attached to a visual element to affect its appearance
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用附加到视觉元素的数据来影响其外观
- en: Create a time scale
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个时间刻度
- en: Parse and format times
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析和格式化时间
- en: Set dynamic domains
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置动态域
- en: Dynamically generate SVG elements
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态生成SVG元素
- en: Create axes
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建坐标轴
- en: Display data in a table
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表格中显示数据
- en: 'The complete code for this section can be found here: [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter03](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter03).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本节完整的代码可以在以下位置找到：[https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter03](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter03)。
- en: Adding a link to the D3 library
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加指向D3库的链接
- en: 'The first thing we want to do is create a basic `index.html` file:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先想做的事情是创建一个基本的`index.html`文件：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now add a link to D3 at the bottom of your `<body>` tag in `index.html`. We''ll
    put it at the bottom so that the script loads after all your other HTML elements
    have loaded into the browser:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在`index.html`的`<body>`标签底部添加一个指向D3的链接。我们将将其放在底部，以确保脚本在所有其他HTML元素加载到浏览器中之后加载：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now create `app.js` in the same folder as your `index.html`. In it, we will
    store all of our JS code. For now, just put this code in it to see whether it
    works:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在`index.html`相同的文件夹中创建`app.js`。在其中，我们将存储所有的JS代码。现在，只需将此代码放入其中以查看它是否工作：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Link to it in `index.html` at the bottom of the `<body>` tag. Make sure it
    comes after the D3 script tag so that D3 loads before your `app.js` script:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.html`的`<body>`标签底部链接到它。确保它在D3脚本标签之后，这样D3就会在`app.js`脚本之前加载：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Open `index.html` in Chrome just as we did in [Chapter 2](f40fadd5-f40b-43dc-a82d-206aac322123.xhtml),
    *Using SVG to Create Images Using Code*, (**File** | **Open File**), and check
    your Dev Tools (**View** | **Developer** | **Developer tools**) to see whether
    your JavaScript files are linked correctly:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在[第2章](f40fadd5-f40b-43dc-a82d-206aac322123.xhtml)中做的那样，在Chrome中打开`index.html`，*使用SVG通过代码创建图像*（**文件**
    | **打开文件**），并检查你的开发者工具（**查看** | **开发者** | **开发者工具**）以查看JavaScript文件是否正确链接：
- en: '![](img/45970fd8-68f3-4156-bf2f-70e8a9b48b1c.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/45970fd8-68f3-4156-bf2f-70e8a9b48b1c.png)'
- en: Adding an<svg>tag and sizing it with D3
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用D3添加一个`<svg>`标签并设置其大小
- en: 'In `<indexentry content=" tag:sizing, with D3">` the `index.html`, at the top
    of `<body>`, before `<indexentry content=" tag:adding">` your script tags, add
    an `<svg>` tag:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.html`中的`<indexentry content=" tag:sizing, with D3">`顶部，在`<body>`中，在`<indexentry
    content=" tag:adding">`你的脚本标签之前，添加一个`<svg>`标签：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we examine the **Elements** tab of our dev tools, we''ll `<indexentry content="
    tag:adding">` see the `svg` element has `<indexentry content=" tag:sizing, with
    D3">` been placed. In Chrome, it has a default width/height of 300 px/150 px:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查开发者工具的**元素**选项卡，我们会看到`svg`元素已经被放置。在Chrome中，它默认宽度/高度为300 px/150 px：
- en: '![](img/87f192b1-16cf-4835-a11d-30160d13d466.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/87f192b1-16cf-4835-a11d-30160d13d466.png)'
- en: 'In `app.js`, remove your previous `console.log` statements and create variables
    to hold the width and height of the `<svg>` tag:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.js`中，删除你之前的`console.log`语句，并创建变量来保存`<svg>`标签的宽度和高度：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we can use `d3.select()` to select a single element, in this case the
    `<svg>` element:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以使用`d3.select()`选择一个单一元素，在这种情况下是`<svg>`元素：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The return value of `d3.select(''svg'')` is a D3 version of the svg element
    (as in jQuery), so we can chain commands onto this. Let''s add some styling to
    adjust the height/width of the element:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3.select(''svg'')`的返回值是D3版本的svg元素（如jQuery），因此我们可以向其添加命令。让我们添加一些样式来调整元素的高度/宽度：'
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, when we check the dev tools, we''ll see the `<svg>` element has been resized:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们检查开发者工具时，我们会看到`<svg>`元素已被调整大小：
- en: '![](img/96cba3c4-fabf-4d03-9708-d0d978fd01e9.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/96cba3c4-fabf-4d03-9708-d0d978fd01e9.png)'
- en: Creating some fake data for our app
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的应用程序创建一些假数据
- en: 'In `app.js`, let''s create an array of `run` objects, I am storing the date
    as a string on purpose also, it''s important that this is an array of objects,
    to work with D3). Here''s what your `app.js` code should look like so far:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.js`中，让我们创建一个`run`对象的数组，我故意将日期存储为字符串，这也是很重要的，因为这个数组必须是对象数组，以便与D3一起使用）。到目前为止，你的`app.js`代码应该如下所示：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Adding SVG circles and styling them
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加SVG圆形并为其添加样式
- en: 'In `index.html`, add three circles to your `<svg>` element (each one will represent
    a run):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.html`中，向你的`<svg>`元素添加三个圆形（每个圆形将代表一次运行）：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create `app.css` in the same folder as `index.html`, with some styling for
    the circles and our `svg` element:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在与`index.html`相同的文件夹中创建`app.css`，为圆形和我们的`svg`元素添加一些样式：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Link to it in the head of `index.html`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.html`的头部链接到它：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Our page should now look as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在页面应该如下所示：
- en: '![](img/256cdb29-f354-48d4-a6c7-f5025e279b3b.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/256cdb29-f354-48d4-a6c7-f5025e279b3b.png)'
- en: Creating a linear scale
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个线性`scale`
- en: We currently have three circles in our SVG and three objects in our `runs` array.
    One of the best things D3 does is provide the ability to link SVG elements with
    data so that as the data changes so do the SVG elements. In this chapter, we're
    going to link each circle to an object in the `runs` array. If the `distance`
    property of an object is relatively high, its associated circle will be higher
    up on the graph. If the `date` property of an object is relatively high (a later
    date), its associated circle is farther right.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前在SVG中有三个圆形，在`runs`数组中有三个对象。D3做得最好的事情之一是提供将SVG元素与数据链接的能力，以便随着数据的变化，SVG元素也会变化。在本章中，我们将每个圆形链接到`runs`数组中的一个对象。如果一个对象的`distance`属性相对较高，其关联的圆形将在图表上更高。如果一个对象的`date`属性相对较高（较晚的日期），其关联的圆形将更靠右。
- en: First, let's position the circles vertically, based on the `distance` property
    of the objects in our `runs` array. One of the most important things that D3 does
    is provide the ability to convert (or `map`) data values to visual points and
    vice versa. It does so using a `scale`. There are lots of different kinds of scales
    that handle lots of different data types, but for now we're just going to use
    a `linear scale`, which will map numeric data values to numeric visual points,
    and vice versa.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们根据`runs`数组中对象的`distance`属性垂直定位圆形。D3做的最重要的事情之一是提供将（或`map`）数据值转换为视觉点以及相反的能力。它是通过`scale`来实现的。有许多不同类型的`scale`可以处理许多不同的数据类型，但到目前为止，我们只是使用`linear
    scale`，它将数值数据映射到数值视觉点，反之亦然。
- en: 'At the bottom of `app.js`, add the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.js`的底部添加以下内容：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Whenever we create a scale, we need to tell it the minimum and maximum possible
    values that can exist in our data (this is called the `domain`). To do so for
    our `yScale`, add the following to the bottom of `app.js`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们创建一个`scale`时，我们需要告诉它数据中可能存在的最小和最大可能值（这被称为`domain`）。为了对`yScale`这样做，在`app.js`的底部添加以下内容：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We also need to tell the scale what visual values correspond to those min/max
    values in the data (this is called the `range`). To do so, add the following to
    the bottom of `app.js`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要告诉`scale`哪些视觉值对应于数据中的最小/最大值（这被称为`range`）。为此，在`app.js`的底部添加以下内容：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Your last three lines of code in `app.js` should now look as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的`app.js`中的最后三行代码应该如下所示：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the previous snippet, the first (starting) value for the range is `HEIGHT`
    (600) and the second (ending) value is 0\. The minimum for the data values is
    0 and the max is 10\. By doing this, we''re saying that a data point (distance
    run) of 0 should map to a visual height value of `HEIGHT` (600):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，范围的第一个（起始）值是`HEIGHT`（600），第二个（结束）值是0。数据值的最小值是0，最大值是10。通过这样做，我们表示数据点（跑步距离）为0应映射到视觉高度值`HEIGHT`（600）：
- en: '![](img/b60104e3-ce39-4a3d-b84d-0b15931fe714.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b60104e3-ce39-4a3d-b84d-0b15931fe714.png)'
- en: This is because the lower the distance run (data value), the more we want to
    move the visual point down the *y* axis. Remember that the *y* axis starts with
    0 at the top and increases in value as we move down vertically on the screen.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为运行距离（数据值）越低，我们越希望将视觉点沿*Y*轴向下移动。记住，*Y*轴从屏幕顶部的0开始，随着我们垂直向下移动而增加值。
- en: 'We also say that a data point (distance run) of 10 should map to a visual height
    of 0:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还表示，距离（运行）为10的数据点应该映射到视觉高度为0：
- en: '![](img/ec87518e-3736-41cc-80a4-f3dba371424d.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ec87518e-3736-41cc-80a4-f3dba371424d.png)'
- en: Again, this is because, as the distance run increases, we want to get back a
    visual value that is lower and lower so that our circles are closer to the top
    of the screen.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这是因为随着运行距离的增加，我们希望得到一个越来越低的视觉值，这样我们的圆圈就越来越接近屏幕顶部。
- en: 'If you ever need to remind yourself what the domain/range is, you can do so
    by logging `yScale.domain()` or `yScale.range()`. Temporarily add the following
    at the bottom `app.js`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要提醒自己域/范围是什么，你可以通过记录`yScale.domain()`或`yScale.range()`来实现。暂时在`app.js`底部添加以下代码：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Our Chrome console should look as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Chrome控制台应该看起来如下所示：
- en: '![](img/09e09dd5-9765-4dcf-b00a-9aafb3681bcd.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/09e09dd5-9765-4dcf-b00a-9aafb3681bcd.png)'
- en: 'When declaring the range/domain of a linear scale, we only need to specify
    start/end values for each. Values in between the start/end will be calculated
    by D3\. For instance, to find out what visual value corresponds to the distance
    value of 5, use `yScale()`. Remove the previous two `console.log()` statements
    and add the following to the bottom of `app.js`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明线性比例的范围/域时，我们只需要指定每个的开始/结束值。起始和结束值之间的值将由D3计算。例如，要找出与距离值5对应的视觉值，使用`yScale()`。删除之前的两个`console.log()`语句，并在`app.js`底部添加以下代码：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here''s what our dev console should look like in Chrome:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们的Chrome开发者控制台应该看起来是什么样子：
- en: '![](img/ea310230-6299-4cbf-a70e-e7ff2fbd796d.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ea310230-6299-4cbf-a70e-e7ff2fbd796d.png)'
- en: It makes sense that this logs `300` because the data value of `5` is half way
    between the minimum data value of `0` and the maximum data value of `10`. The
    range starts at `HEIGHT` (600) and goes to `0`, so halfway between those values
    is 300.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个日志显示`300`是有道理的，因为数据值`5`位于最小数据值`0`和最大数据值`10`之间的一半。范围从`HEIGHT`（600）开始到`0`结束，所以这两个值之间的一半是300。
- en: 'So, whenever you want to convert a data point to a visual point, call `yScale()`.
    We can go the other way and convert a visual point to a data value by calling
    `yScale.invert()`. To find out what data point corresponds to a visual value of
    450, remove the previous `console.log()` statement and add the following to the
    bottom of `app.js`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，每次你想将数据点转换为视觉点时，就调用`yScale()`。我们可以反过来，通过调用`yScale.invert()`将视觉点转换为数据值。要找出与视觉值450对应的数据点，删除之前的`console.log()`语句，并在`app.js`底部添加以下代码：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here''s what Chrome''s console looks like:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是Chrome控制台的样子：
- en: '![](img/8c887bf3-a317-481c-8e56-acc4bfa6639f.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8c887bf3-a317-481c-8e56-acc4bfa6639f.png)'
- en: It makes sense that this logs `2.5` because the visual value of 450 is 25% of
    the way from the starting visual value of 600 (`HEIGHT`)to the ending visual value
    of `0`. You can now delete that last `console.log()` line.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个日志显示`2.5`是有道理的，因为视觉值450是从起始视觉值600（`HEIGHT`）到结束视觉值`0`的25%。你现在可以删除最后一行`console.log()`。
- en: Attaching data to visual elements
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将数据附加到视觉元素上
- en: 'Now let''s attach each of the JavaScript objects in our `runs` array to a circle
    in our SVG. Once we do this, each circle can access the data of its associated
    `run` object to determine its position. Add the following to the bottom of `app.js`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将我们的`runs`数组中的每个JavaScript对象连接到SVG中的圆圈上。一旦我们这样做，每个圆圈就可以访问其关联的`run`对象的数据，以确定其位置。在`app.js`底部添加以下代码：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If there were more objects in our `runs` array than there are circles, the extra
    objects are ignored. If there are more circles than objects, then JavaScript objects
    are attached to circles in the order in which they appear in the DOM until there
    are no more objects to attach.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`runs`数组中的对象比圆圈多，则额外的对象将被忽略。如果有比对象多的圆圈，那么JavaScript对象将按照它们在DOM中出现的顺序附加到圆圈上，直到没有更多的对象可以附加。
- en: Use data attached to a visual element to affect its appearance
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用附加到视觉元素上的数据来影响其外观
- en: 'We can change attributes for a selection of DOM elements by passing static
    values, and all selected elements will have that attribute set to that one specific
    value. Add the following temporarily to the end of `app.js`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过传递静态值来更改一组 DOM 元素的属性，并且所有选定的元素都将具有该特定值作为属性。暂时将以下内容添加到 `app.js` 的末尾：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following should be seen on your screen:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕上应该显示以下内容：
- en: '![](img/699f8f2c-89e5-4ffe-96a8-f81e7ade4939.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/699f8f2c-89e5-4ffe-96a8-f81e7ade4939.png)'
- en: 'But now that each circle has one of our `runs` JavaScript data objects attached
    to it, we can set attributes on each circle using that data. We do that by passing
    the `.attr()` method a callback function instead of a static value for its second
    parameter. Remove `d3.selectAll(''circle'').attr(''cy'', 300);` and adjust the
    last line of `app.js` from `d3.selectAll(''circle'').data(runs);` to the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 但是现在，由于每个圆圈都附加了我们 `runs` JavaScript 数据对象之一，我们可以使用该数据设置每个圆圈的属性。我们通过将 `.attr()`
    方法的第二个参数传递回调函数而不是静态值来实现这一点。移除 `d3.selectAll('circle').attr('cy', 300);` 并将 `app.js`
    的最后一行从 `d3.selectAll('circle').data(runs);` 调整为以下内容：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If we refresh the browser, this is what we should see:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们刷新浏览器，我们应该看到以下内容：
- en: '![](img/a7dca9d4-aa18-47d5-93c1-8809a5fdfb95.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7dca9d4-aa18-47d5-93c1-8809a5fdfb95.png)'
- en: Let's examine what we just wrote. The callback function passed as the second
    parameter to `.attr()` runs on each of the visual elements selected (each of the
    `circle` elements in this case). During each execution of the callback, the return
    value of that callback function is then assigned to whatever aspect of the current
    element is being set (in this case the `cy` attribute).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查我们刚才写了什么。传递给 `.attr()` 的作为第二个参数的回调函数在选定的每个视觉元素上运行（在这种情况下是每个 `circle` 元素）。在每次回调执行期间，该回调函数的返回值被分配给当前元素正在设置的任何方面（在这种情况下是
    `cy` 属性）。
- en: 'The callback function takes two params:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数接收两个参数：
- en: The individual `datum` object from the `runs` array that was attached to that
    particular visual element when we called `.data(runs)`
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们调用 `.data(runs)` 时，附加到特定视觉元素上的 `runs` 数组中的单个 `datum` 对象
- en: The `index` of that `datum` in the`runs` array
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该 `datum` 在 `runs` 数组中的 `index`
- en: In summary, what this does is loop through each `circle` in the SVG. For each
    `circle`, it looks at the `run` object attached to that `circle` and finds its
    `distance` property. It then feeds that data value into `yScale()`, which then
    converts it into its corresponding visual point. That visual point is then assigned
    to that circle's `cy` attribute. Since each data object has a different `distance`
    value, each `circle` is placed differently, vertically.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，这个过程是遍历 SVG 中的每个 `circle`。对于每个 `circle`，它查看附加到该 `circle` 的 `run` 对象并找到其
    `distance` 属性。然后，它将数据值输入到 `yScale()` 中，该函数将其转换为相应的视觉点。然后，这个视觉点被分配给该 `circle` 的
    `cy` 属性。由于每个数据对象都有不同的 `distance` 值，因此每个 `circle` 在垂直方向上的位置都不同。
- en: Creating a time scale
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建时间刻度
- en: 'Let''s position the circles horizontally, based on the date that their associated
    run happened. First, create a time scale. This is like a linear scale, but instead
    of mapping numeric values to visual points, it maps dates to visual points. Add
    the following to the bottom of `app.js`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们根据关联的运行发生的日期水平定位圆圈。首先，创建一个时间刻度。这就像一个线性刻度，但它不是将数值映射到视觉点，而是将日期映射到视觉点。将以下内容添加到
    `app.js` 的底部：
- en: '[PRE22]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here''s what our console should look like:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们控制台应该看起来像什么：
- en: '![](img/6141d754-75a9-47bb-9594-8db2b41dd0f9.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6141d754-75a9-47bb-9594-8db2b41dd0f9.png)'
- en: You can now remove the two `console.log()` statements.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以移除两个 `console.log()` 语句。
- en: Parsing and formatting times
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析和格式化时间
- en: 'Note that the `date` properties of the objects in our `runs` array are strings
    and not date objects. This is a problem because `xScale`, as with all time scales,
    expects its data values to be date objects. Fortunately, D3 provides us an easy
    way to convert strings to dates and vice versa. We''ll use a specially formatted
    string, based on the documentation ([https://github.com/d3/d3-time-format#locale_format](https://github.com/d3/d3-time-format#locale_format)),
    to tell D3 how to parse the `date` string properties of the objects in our `runs`
    array into actual JavaScript date objects. Add the following at the end of `app.js`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们 `runs` 数组中对象的 `date` 属性是字符串，而不是日期对象。这是一个问题，因为 `xScale` 与所有时间刻度一样，期望其数据值是日期对象。幸运的是，D3
    提供了一种简单的方法来将字符串转换为日期，反之亦然。我们将使用一个特殊格式的字符串，根据文档（[https://github.com/d3/d3-time-format#locale_format](https://github.com/d3/d3-time-format#locale_format)），告诉
    D3 如何将 `runs` 数组中对象的 `date` 字符串属性解析为实际的 JavaScript 日期对象。在 `app.js` 的末尾添加以下内容：
- en: '[PRE23]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here''s our Chrome console:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们的 Chrome 控制台：
- en: '![](img/d423b3e5-d578-4b72-89c7-181d4ca448a6.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d423b3e5-d578-4b72-89c7-181d4ca448a6.png)'
- en: 'Let''s use this when calculating `cx` attributes for our circles. Remove the
    last two `console.log()` statements, and add the following to the bottom of `app.js`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当计算圆的 `cx` 属性时，让我们使用这个方法。删除最后两个 `console.log()` 语句，并将以下代码添加到 `app.js` 的底部：
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here''s what Chrome should look like:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome 应该看起来像这样：
- en: '![](img/669b1c8e-9a20-4c67-b62c-037eb47a57f8.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/669b1c8e-9a20-4c67-b62c-037eb47a57f8.png)'
- en: In summary, this selects all of the `circle` elements. It then sets the `cx`
    attribute of each `circle` to the result of a callback function. That callback
    function runs for each `circle` and takes the `run` data object associated with
    that `circle` and finds its `date` property (remember it's a string, for example,
    `'October 3, 2017 at 6:00PM'`). It passes that string value to `parseTime()` which
    then turns the string into an actual JavaScript date object. That date object
    is then passed to `xScale()`, which converts the date into a visual value. That
    visual value is then used for the `cx` attribute of whichever `circle` the callback
    function has just run on. Since each `date` property of the objects in the `runs`
    array is different, the `circles` have different horizontal locations.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，这选择了所有的 `circle` 元素。然后为每个 `circle` 的 `cx` 属性设置回调函数的结果。该回调函数为每个 `circle`
    运行，并获取与该 `circle` 关联的 `run` 数据对象，并找到其 `date` 属性（记住它是一个字符串，例如，`'October 3, 2017
    at 6:00PM'`）。它将这个字符串值传递给 `parseTime()`，然后将其转换为实际的 JavaScript 日期对象。然后，将这个日期对象传递给
    `xScale()`，它将日期转换为视觉值。然后，这个视觉值被用于回调函数刚刚运行的 `circle` 的 `cx` 属性。由于 `runs` 数组中对象的每个
    `date` 属性都不同，因此 `circles` 在水平位置上不同。
- en: Setting dynamic domains
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置动态域
- en: At the moment, we're setting arbitrary min/max values for the domains of both
    distance and date. D3 can find the min/max of a dataset, so that our graph displays
    just the data ranges we need. All we need to do is pass the min/max methods a
    callback that gets called for each item of data in the `runs` array. D3 uses the
    callback to determine which properties of the datum object to compare for min/max.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们正在为距离和日期的范围设置任意的最小/最大值。D3 可以找到数据集的最小/最大值，这样我们的图表就可以只显示我们需要的日期范围。我们只需要传递最小/最大方法一个回调函数，该回调函数会在
    `runs` 数组中的每个数据项上被调用。D3 使用回调函数来确定数据对象中比较最小/最大值的属性。
- en: 'Go to this part of the code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 转到以下代码部分：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Change it to this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为以下代码：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Chrome should look as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome 应该看起来如下：
- en: '![](img/478f937b-f01f-4ef9-ad53-8b66bd233768.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/478f937b-f01f-4ef9-ad53-8b66bd233768.png)'
- en: 'Let''s examine what we just wrote. The following code finds the minimum distance:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查我们刚才写的代码。以下代码找到最小距离：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: D3 loops through the `runs` array (the first parameter) and calls the callback
    function (the second parameter) on each element of the array. The return value
    of that function is compared the return values of the callback function as it
    runs on the other elements. The lowest value is assigned to `yMin`. The same thing
    happens for `d3.max()` but with the highest value.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: D3 遍历 `runs` 数组（第一个参数）并在数组的每个元素上调用回调函数（第二个参数）。该函数的返回值与其他元素上回调函数的返回值进行比较。最低值被分配给
    `yMin`。对于 `d3.max()` 也是同样的操作，但用于最高值。
- en: 'We can combine both the min/max functions into one `extent` function that returns
    an array that has the exact same structure as`[yMin, yMax]`. Let''s look at the
    code we just wrote:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将最小/最大函数合并为一个 `extent` 函数，该函数返回一个与 `[yMin, yMax]` 完全相同的结构的数组。让我们看看我们刚才写的代码：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Change the previous code to this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 将之前的代码更改为以下代码：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'It''s much shorter, right? Let''s do the same for the xScale''s domain. Go
    to this part of the code:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 它短多了，对吧？让我们为 xScale 的域做同样的操作。转到以下代码部分：
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Change it to this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为以下代码：
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Notice we moved `parseTime` and `formatTime` up so they could be used within
    the `.extent()`. Here''s what Chrome should look like:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们将 `parseTime` 和 `formatTime` 上移，以便它们可以在 `.extent()` 中使用。Chrome 应该看起来如下：
- en: '![](img/bab5bea3-f40d-4990-85dc-98cc8620c3eb.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bab5bea3-f40d-4990-85dc-98cc8620c3eb.png)'
- en: Dynamically generating SVG elements
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态生成 SVG 元素
- en: 'Currently, we have just enough `<circle>` elements to fit our data. What if
    we don''t want to count how many elements are in the array? D3 can create elements
    as needed. First, remove all `<circle>` elements from `index.html`. Your `<body>`
    tag should now look as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只有足够多的 `<circle>` 元素来适应我们的数据。如果我们不想计算数组中有多少元素呢？D3 可以根据需要创建元素。首先，从 `index.html`
    中删除所有 `<circle>` 元素。现在，你的 `<body>` 标签应该如下所示：
- en: '[PRE32]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In `app.js`, go to this part of the code:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app.js` 中，找到以下代码部分：
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Modify the code to create the circles:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 修改代码以创建圆圈：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'It should look exactly the same as before, but now circles are being created
    for each object in the `runs` array:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该看起来和之前完全一样，但现在为 `runs` 数组中的每个对象创建了一个圆圈：
- en: '![](img/db7816e0-542e-4435-9e8e-d6231c750d0b.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db7816e0-542e-4435-9e8e-d6231c750d0b.png)'
- en: 'Here''s a more in-depth explanation of what we just wrote. Take a look at the
    first line of the new code:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是对我们刚才所写内容的更深入解释。看看新代码的第一行：
- en: '[PRE35]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This might seem unnecessary. Why not just do `d3.selectAll('circle')`? Well,
    at the moment, there are no `circle` elements. We're going to be appending `circle`
    elements dynamically, so `d3.select('svg')` tells D3 where to append them. We
    still need `.selectAll('circle')` though, so that when we call `.data(runs)` on
    the next line, D3 knows what elements to bind the various objects in the `runs`
    array to. But there aren't any `circle` elements to bind data to. That's OK.`.enter()`
    finds the `run` objects that haven't been bound to any `circle` elements yet (in
    this case all of them). We then use `.append('circle')` to append a circle for
    each unbound `run` object that `.enter()` found.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来是不必要的。为什么不直接使用 `d3.selectAll('circle')` 呢？嗯，目前还没有 `circle` 元素。我们将动态地添加
    `circle` 元素，所以 `d3.select('svg')` 告诉 D3 将它们添加到何处。我们仍然需要 `.selectAll('circle')`，这样当我们在下一行调用
    `.data(runs)` 时，D3 就知道将 `runs` 数组中的各种对象绑定到哪些元素上。但是没有 `circle` 元素可以绑定数据。没关系。`.enter()`
    找到尚未绑定到任何 `circle` 元素的 `run` 对象（在这种情况下是所有对象）。然后我们使用 `.append('circle')` 为 `.enter()`
    找到的每个未绑定的 `run` 对象添加一个圆圈。
- en: Creating axes
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建坐标轴
- en: 'D3 can automatically generate axes for you. Add the following to the bottom
    of`app.js`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: D3 可以自动为你生成坐标轴。将以下内容添加到 `app.js` 的底部：
- en: '[PRE36]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This creates a bottom axis generator that can be used to insert an axis into
    any element you choose. Add the following code to the bottom of `app.js` to append
    a `<g>` element inside our SVG element and then insert a bottom axis inside it:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个底部坐标轴生成器，可以用来将坐标轴插入你选择的任何元素中。将以下代码添加到 `app.js` 的底部，在 SVG 元素内部添加一个 `<g>`
    元素，然后在其中插入一个底部坐标轴：
- en: '[PRE37]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Here''s what Chrome should look like:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 Chrome 应该有的样子：
- en: '![](img/f285b8a3-8fec-45d2-aeb3-05745e70867f.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f285b8a3-8fec-45d2-aeb3-05745e70867f.png)'
- en: Display of Chrome
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome 显示
- en: 'We want the axis to be at the bottom of the SVG, though. Modify the code we
    just wrote so it looks like this (note: we removed a`;` after`.call(bottomAxis)`
    and added`.attr(''transform'', ''translate(0,''+HEIGHT+'')'');`):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望坐标轴位于 SVG 的底部。修改我们刚才写的代码，使其看起来像这样（注意：我们在 `.call(bottomAxis)` 后面移除了一个`;`
    并添加了 `.attr('transform', 'translate(0,'+HEIGHT+')');`）：
- en: '[PRE38]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Currently, our SVG clips the axis:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的 SVG 裁剪了坐标轴：
- en: '![](img/5669c90a-9f8c-412c-9e94-004749f69f0b.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5669c90a-9f8c-412c-9e94-004749f69f0b.png)'
- en: 'Let''s alter our `svg` CSS so it doesn''t clip any elements that extend beyond
    its bounds:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改 `svg` 的 CSS，使其不会裁剪超出其边界的任何元素：
- en: '[PRE39]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now it looks good:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来不错：
- en: '![](img/dbf37e37-8453-47d8-96d2-e3320942021b.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dbf37e37-8453-47d8-96d2-e3320942021b.png)'
- en: 'The left axis is pretty similar. Add the following to the bottom of `app.js`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧坐标轴非常相似。将以下内容添加到 `app.js` 的底部：
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Note: we don''t need to set a `transform` attribute, since it starts out in
    the correct place initially:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：我们不需要设置 `transform` 属性，因为它最初就在正确的位置：
- en: '![](img/b2446c71-3c12-42e3-adeb-9e6e89b8edda.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2446c71-3c12-42e3-adeb-9e6e89b8edda.png)'
- en: 'It''s a little tough to see, so let''s add the following at the bottom of `app.css`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来有点困难，所以让我们在 `app.css` 的底部添加以下内容：
- en: '[PRE41]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now our axes are complete:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的坐标轴已经完整：
- en: '![](img/79d82b84-83f6-42ee-a839-a10577191e0e.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79d82b84-83f6-42ee-a839-a10577191e0e.png)'
- en: Displaying data in a table
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在表格中显示数据
- en: 'Just for debugging purposes, let''s create a table that will show all of our
    data. Make your `<body>` tag in `index.html` look as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 仅用于调试目的，让我们创建一个表格，将显示所有数据。将 `index.html` 中的 `<body>` 标签修改如下：
- en: '[PRE42]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'D3 can also be used to manipulate the DOM, just like jQuery. Let''s populate
    the`<tbody>`in that style. Add the following to the bottom of `app.js`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: D3 也可以用来操作 DOM，就像 jQuery 一样。让我们以这种方式填充 `<tbody>`。将以下内容添加到 `app.js` 的底部：
- en: '[PRE43]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Add some styling for the table at the bottom of `app.css`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app.css` 的底部添加一些表格样式：
- en: '[PRE44]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Adjust the CSS for `svg` to add a bottom margin. This will create some space
    between the graph and the table:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 调整 `svg` 的 CSS 以添加底部边距。这将创建图表和表格之间的空间：
- en: '[PRE45]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Now the browser should look like this:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在浏览器应该看起来是这样的：
- en: '![](img/f6ad7a6c-7b35-417a-a97b-a3b7008c7863.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6ad7a6c-7b35-417a-a97b-a3b7008c7863.png)'
- en: Summary
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: At this point, you have a static scatter plot and a table that displays its
    data. In [Chapter 4](e503bfe5-4b90-47eb-bae0-d588a9b545d5.xhtml), *Making a Basic
    Scatter Plot Interactive*, we will be learning how to make it interactive.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你有一个静态的散点图和一个显示其数据的表格。在[第4章](e503bfe5-4b90-47eb-bae0-d588a9b545d5.xhtml)，《制作基本散点图交互式》中，我们将学习如何使其交互式。
