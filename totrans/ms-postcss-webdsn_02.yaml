- en: Chapter 2. Creating Variables and Mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A question: how often have you created components such as buttons, where you''ve
    used very similar colors multiple times throughout your code? It''s a real pain
    to manually alter. Using a preprocessor such as SASS or Less makes it easier,
    but with the overhead of a full-sized library.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Can we do it differently? Absolutely; throughout the next few chapters, we''ll
    explore different elements of PostCSS, before pulling it all together to produce
    a preprocessor application later in the book. We''ll begin our journey with a
    look at using variables and mixins; we''ll explore the basics of creating them
    first, before transitioning to support using PostCSS. In this chapter, we''ll
    cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of creating variables and mixins using existing preprocessors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transitioning to using PostCSS equivalents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding mixin support to PostCSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining the differences between standard preprocessors and PostCSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get cracking!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing variables and mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've covered the basics of installing and configuring PostCSS—although
    there are a few steps involved, it's an easy process to get started with using
    the processor. To really get to know it though, there is no substitute for using
    it in anger; it's amazing how much you can automate, with just a little care and
    planning!
  prefs: []
  type: TYPE_NORMAL
- en: Let's put that to the test and use it to create a couple of simple examples
    using variables, functions, and mixins. We'll start with creating the original
    version using SASS, before converting it to use PostCSS plugins. The demos do
    assume a level of prior knowledge around using SASS, so if you are at all unfamiliar,
    then you may like to refer to my book, *SASS Essentials*, available from Packt
    Publishing.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A word of note: we will make good use of the project folders we created back
    in [Chapter 1](ch01.html "Chapter 1. Introducing PostCSS"), *Introducing PostCSS*,
    where `src` will be our in-tray, and `dest` will contain the compiled code. Make
    sure you have this open in a window somewhere on your desktop!'
  prefs: []
  type: TYPE_NORMAL
- en: Okay, the first step in this process is to get SASS installed, so let's take
    a look at that now.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up SASS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting up SASS is really easy when using Gulp; we can use the same format of
    command to install it as we do for other plugins. The source code for the plugin
    is available at [https://github.com/dlmanning/gulp-sass](https://github.com/dlmanning/gulp-sass);
    it's a lightweight frontend for `node-sass`, which in turn is a Node binding for
    the C+ library, `libsass`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s dive in and take a look at getting it installed:'
  prefs: []
  type: TYPE_NORMAL
- en: We start, as usual, with Node. Fire up a Node.js command prompt session, then
    change to the working directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command prompt, enter the following, then press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If all is well, we should see something akin to this screenshot:![Setting up
    SASS](img/BO5194_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Before we continue, though, I would recommend clearing out or saving the contents
    of the `dest` folder elsewhere for safe keeping, after each exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, open a copy of `gulpfile.js` in Sublime Text; we need to make a number
    of changes, beginning with adding a reference to the `gulp-sass` plugin (as highlighted):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'SASS will, by default, produce code in unminified format; the addition of `{outputStyle:
    ''compressed''}` in the task will automatically compress the output code. This
    makes this line redundant, so go ahead and remove it:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to remove the reference to `cssnano` on or around line 19, so
    go ahead and remove this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On or around line 10, change the name of the styles task to `autoprefixer`
    and the dependency name to `lint-styles`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then remove these two lines:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the rename task, modify the `rename` task to match this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On or around line 25, we need to add in the `lint-styles` task—go ahead and
    add in this block of code, which will check our styles for consistency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''re almost done. Add in the next task; this tells Gulp about how we should
    compile any SASS files presented to the task runner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to make a couple more changes. The key task that fires off a call to
    each of the sub tasks needs to be updated, to reflect the changes to our tasks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our last change is to alter the watch facility to check for SASS files, and
    not pure CSS; go ahead and change the configuration object as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, we have set up our processor to compile SASS files to valid CSS.
    We can prove this by compiling any SASS file. If all is well, our processor will
    produce valid style sheets and accompanying source map files automatically. Let's
    put this to the test as part of our next exercise, where we create an intriguing
    hover effect for images.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a hover effect example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've seen any of my previous books, then you will see I have a thing about
    flowers, and in particular orchids; indeed, the cover on my first book was that
    of a phalaenopsis, or moth orchid! We'll use a couple of images of orchids as
    the basis for our next demo, as shown in the screenshot over the page, where it
    shows our desired effect in motion for the top image.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you prefer using Less, then please skip to the end of this demo for an example
    using Less CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this demo, we will need a copy of the `tutorial1A` folder from the code
    download that accompanies this book; make sure you dig that out before continuing:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up a copy of `style.scss` from the `src` folder within `tutorial1A`; let's
    take a look at its contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top of the file, we have a small handful of variables. These define some
    of the colors used within the code, and set the `$fullsize` variable to 100%:![Creating
    a hover effect example](img/BO5194_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The sharp-eyed among you will spot that not all colors have been given a value;
    the reason for this will become clearer later in this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next up comes an example of a simple mixin, which converts pixel values to their
    rem unit equivalents, using `16px` as the base equivalent for `1rem` unit:![Creating
    a hover effect example](img/BO5194_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To complete the exercise, we need to download a font. The demo uses the Source
    Sans Pro font available at [http://www.fontsquirrel.com/fonts/source-sans-pro](http://www.fontsquirrel.com/fonts/source-sans-pro).
    Go ahead and download it; you will need to use the **Generator** option available
    from the black menu to produce a version that can be used online (it creates the
    CSS we've used in our demo).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, go ahead and drop a copy of the `style.scss` file from the `tutorial1A`
    folder into the `src` folder in our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also need the `img` folder and the `index.html` file—go ahead and copy both
    across to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fire up a Node.js command prompt window, then enter this at the prompt and
    press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If all is well, we should see compressed CSS files and source maps appear in
    the `dest` folder in our project area—copy the `maps` folder and `style.min.css`
    into the `css` folder of `tutorial1A`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go ahead and preview the results in a browser. If all is well, we should see
    two orchid images appear on screen; if you hover over either one, you will see
    it fly to the left or right, to reveal an information box with information about
    the orchid:![Creating a hover effect example](img/BO5194_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Interesting effect, huh? It's a simple animation that uses `scale()` to shrink
    the image to `0.5` (or 50%) of its size and slides it to the right, before sliding
    in the `infobox` immediately behind it. Take the mouse off the image and the reverse
    happens—it's the sample principle for the second image—but in reverse; the code
    sets an `ltr` and `rtl` class to determine which direction the image should move
    in the demo.
  prefs: []
  type: TYPE_NORMAL
- en: Using Less CSS as an alternative
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A copy of this demo using the equivalent code from the Less CSS pre-processor
    is available in the code download that accompanies this book. It's in the `Tutorial1B`
    folder if your preference is to use the Less CSS pre-processor; you will need
    to install the `gulp-less` plugin from [https://github.com/plus3network/gulp-less](https://github.com/plus3network/gulp-less),
    using NodeJS (in the same manner as other plugins that we've installed). An updated
    copy of the Gulp task file is also included in this folder, along with completed
    versions of the CSS code.
  prefs: []
  type: TYPE_NORMAL
- en: Transitioning to using PostCSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until now, we've used SASS to build our demo; granted, it's not a particularly
    complex one, but as I always say, we must start somewhere!
  prefs: []
  type: TYPE_NORMAL
- en: Our demo is a perfect example of how we can introduce PostCSS to provide replacements
    for the SASS variables and mixins we've used—for this, we will avail ourselves
    of three plugins, namely `postcss-variables`, `postcss-mixins`, and `postcss-calc`.
    The first two should be self-explanatory; the third is required in the replacement
    font mixin that we've used in our code.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, enough chit-chat, let's get stuck in and begin to alter our code; we'll
    start with adding variable support.
  prefs: []
  type: TYPE_NORMAL
- en: Adding variable support to PostCSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The beauty of PostCSS plugins is that most (if not all) can be installed using
    the same method as PostCSS itself, we can use the package manager of Node.js to
    handle the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start with `postcss-css-variables`, which we will use to handle variable
    support; the source for this plugin is available from [https://github.com/MadLittleMods/postcss-css-variables](https://github.com/MadLittleMods/postcss-css-variables).
    Let''s get it installed:'
  prefs: []
  type: TYPE_NORMAL
- en: Fire up a NodeJS command prompt, then change the working directory to our project
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command prompt, enter the following command, then press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If all is well, we should see the results of the installation appear, as shown
    in this screenshot:![Adding variable support to PostCSS](img/BO5194_02_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, Node will have also added an entry to the `package.json` file
    for the new plugin. Perfect—we can now put it to good use and switch to using
    the plugin in place of using SASS. Let's take a look at how to achieve this, as
    part of the upcoming exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Updating our hover effect demo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we're altering code to use PostCSS for the first time, it naturally makes
    sense to start with something simple; incorporating variables and mixins into
    our code is the perfect place to begin.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this next exercise, we''re going to create a handful of variables to store
    some values, then add a mixin to handle styles for the fonts used in the demo.
    Let''s make a start:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by opening up a copy of `gulpfile.js` from the root of our project
    area—we first need to make some changes to accommodate using the new plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `gulpfile.js`, add this line immediately below the first block of `var`
    statements—this should be on or around line 9:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to make some changes to our gulp task file—we''ll start with the
    simplest, which is to remove the `var` reference to SASS, as we will no longer
    need it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have a reference to the `postcss-css-variables` plugin, we need
    to make use of it in our tasks. Go ahead and amend the highlighted lines of code
    in the `autoprefixer` task, as indicated; this also removes the dependency on
    the lint-styles task, as this is no longer needed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note that we''ve also reinstated the `cssnano` command—you will also need to
    add this line in as a variable declaration, as indicated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A little further down, on or around line 25, change the code as highlighted,
    as we will no longer use SASS to compile our code; we can tweak the order in which
    each task is run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next up, we can remove the SASS task in its entirety:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Toward the end of the file, go ahead and alter the default task as indicated—we
    don''t need to call the SASS task, as it has now been removed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alter the `gulp.watch` command to look for plain CSS files in the `src` folder—we''re
    not using SASS, so the reference to `scss` format files is now invalid and needs
    to be changed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this point, if all is well, we should have a working gulp task file that
    we can now use to compile our code. Let''s go ahead and start to convert the code
    in our orchid demo, to use PostCSS:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We'll start by saving a copy of the `Tutorial2` folder from the code download
    that accompanies this book, locally, to within the project area we created under
    `c:\wamp\www`, back in [Chapter 1](ch01.html "Chapter 1. Introducing PostCSS"),
    *Introducing PostCSS*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up a copy of `style.css` from within the `src` folder of the `Tutorial2`
    folder. At the top of the file, remove lines 1 to 14 (the variables and mixin
    code), so that the file starts with the `font-face` declaration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In its place, add the following lines—these are the replacement variable assignments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Further down, look for the `html`, `body {` declaration, and alter it as indicated—note
    the syntax used for the `var` statements; this is not the same as standard SASS.
    We''ve changed it to the format supported by the `postcss-css-variables` plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We added the `--fullsize` variable at the top of our style sheet—let''s make
    use of it now and update the `img` rule accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final change we will make is to the `.info` class—go ahead and alter the
    background attribute as indicated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our code changes are complete, so go ahead and save the file—once done, fire
    up a NodeJS command prompt, and change to the project working area.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the file as `styles.css` into the `src` folder of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to the NodeJS command prompt, then enter the usual command at the prompt,
    and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy the compiled code back to the `css` folder within `Tutorial2`. If all is
    well, when we preview the results in a browser, we should see our demo continue
    to work as shown at the start of the first part of this exercise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Phew, there were a fair few steps there! There is a copy of the completed stylesheets,
    both prior to and post compilation, available in the code download that accompanies
    this book: they can be found in the `css` | `completed` folder. You will need
    to rename the two style sheet files to just `style.css` for them to work correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to see the effects of compiling variables, without committing changes
    to code, then have a look at the playground offered with this plugin, at [https://madlittlemods.github.io/postcss-css-variables/playground/](https://madlittlemods.github.io/postcss-css-variables/playground/).
    It's a great way to get accustomed to using the `postcss-css-variables` plugin,
    before diving in and editing production code.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, let's change tack; we've covered a number of key concepts in our demo,
    so let's take a moment to let the proverbial dust settle, and explore what we've
    learned through the demo.
  prefs: []
  type: TYPE_NORMAL
- en: Taking it a step further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Over the last few pages, we''ve created a simple demo, which shows off animated
    information boxes for a couple of orchid images. There''s nothing outrageous or
    complex about what we''ve done, but nevertheless, it serves to illustrate some
    key points about using this plugin, and PostCSS in general:'
  prefs: []
  type: TYPE_NORMAL
- en: Although we used SASS to precompile our CSS code prior to conversion, we could
    easily have used another pre-processor, such as Less CSS or Stylus. The key here
    is to work as much as possible within the confines of a task runner such as Gulp,
    so that we don't need to introduce another technology into the mix.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is essential to note that although converting the code *looks* straightforward,
    the plugin does not compile in the same manner as pre-processors such as SASS
    would compile. It makes a direct translation from SASS to Less CSS difficult for
    anything more than simple code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this example, the key to understanding how it works is to follow the CSS
    Custom Properties Module Level 1 document from the W3C, which is available at
    [https://drafts.csswg.org/css-variables/](https://drafts.csswg.org/css-variables/).
    The trick here is to be aware of CSS specificity, or which element takes precedence
    over others; in this respect, PostCSS does not simply replace variables with values,
    but compiles code based on calculating CSS specificity. When using PostCSS, it
    is likely you will see the `:root` pseudo-element being used frequently—it's worth
    getting acquainted with how it works!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: For an explanation of how CSS specificity works, please refer to [http://vanseodesign.com/css/css-specificity-inheritance-cascade/](http://vanseodesign.com/css/css-specificity-inheritance-cascade/).
    If needed, we can consider using a plugin to increase specificity—check out the
    `postcss-increase-specificity` plugin at [https://github.com/MadLittleMods/postcss-increase-specificity](https://github.com/MadLittleMods/postcss-increase-specificity).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The modular nature of PostCSS means that we can be selective about the plugins
    we use—in this instance we used the `postcss-css-variables` plugin, which gives
    more flexibility than others such as `postcss-custom-properties`. As an alternative,
    we might consider separating our variables into a separate document, and import
    them in using the `postcss-constants` plugin (which is available at [https://github.com/macropodhq/postcss-constants](https://github.com/macropodhq/postcss-constants)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we use the `postcss-css-variables` plugin, we can either store the values
    in the code itself, or hive them off into the gulp task file; an example of the
    latter would look like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In short, we create a reference to each variable within the configuration object
    for `cssvariables`, as the alias for the `postcss-css-variables` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an object map using this approach can have mixed benefits. For some,
    it reduces issues around **separation** **of concerns**, where we can keep more
    PostCSS code within the task file, and less within our style sheet. This can make
    for a task file that is harder to read; it's not a good route to take if you have
    lots of variables to define. In this instance, we would be better off exporting
    them to an import file and referencing them at compilation.
  prefs: []
  type: TYPE_NORMAL
- en: If there is one important message at this point, it can be that of flexibility—the
    modular nature of PostCSS means that we can be free to pick and choose how we
    proceed; it really is a case of weighing up the pros and cons of using a plugin,
    and making a decision as to whether this best fits our needs, or if we need to
    look for an alternative solution.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the order of plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, there is a key part of PostCSS we need to cover: the order we
    use when calling plugins in our task runner file. This might seem a little odd,
    but there are two good reasons for considering this when developing with PostCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: The first reason is simple—it's about making sure that we maintain a logical
    order of when tasks are completed at compilation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second is a little more obscure, and will come with experience—some plugins
    need to be defined in the task file in a certain order, for them to work correctly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s explore what this means:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a look at the gulp task file that we''ve slowly been building up,
    you will notice a key difference between lines 13 and 19; and no, it''s not the
    task name, before you ask! The difference is the `[''lint-styles'']` constraint—this
    forces Gulp not to run this task until its predecessor has completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the order of plugins](img/BO5194_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I know this might sound like common sense, and that I am only preaching what
    you may already know, but getting the order that plugins are called in PostCSS
    is critical to the successful compilation of your file.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, when researching for this book, I frequently found that either
    my source map was only being produced for an uncompressed version of my style
    sheet, or that the minified style sheet wasn't being created at the right point.
    Simple issues, but tweaking the order can have a serious impact on what happens
    and when!
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing with the theme of order, it is likely you may see notes akin to
    this when browsing the source site of a PostCSS plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the order of plugins](img/BO5194_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This underlines why getting the order of your plugins is essential for an effective
    result: not only will tasks be completed in the right order and produce the expected
    results, but some plugins won''t even work. This should not necessarily be taken
    as being a fault; there will be a valid reason that means plugin *X* must come
    before plugin *Y*. The key thing here is that we take any constraints into consideration.
    It is worth checking, as others may add patch support to remove constraints, or
    fix it through forking their own version of the plugin.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, time to change focus and take a look at some different functionality:
    mixins. For the uninitiated, this is a key function frequently used in preprocessors
    such as SASS, where we can *mix-in* (yes, pun intended!) blocks of code.'
  prefs: []
  type: TYPE_NORMAL
- en: The idea here being that we can create anything, from a simple few lines to
    a complex, dynamic code excerpt that PostCSS will compile into our code and use
    to produce valid CSS. Let's dive in and take a closer look.
  prefs: []
  type: TYPE_NORMAL
- en: Creating mixins with PostCSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our orchid demo so far uses a number of variables to define values in our code.
    While this works well, it is somewhat limiting; after all, creating lots of variables
    to handle different values is an expensive use of resources!
  prefs: []
  type: TYPE_NORMAL
- en: A smarter approach is using mixins; this works well when we can group several
    statements together as a single definition, then clone this definition into multiple
    rule sets. Users of pre-processors will of course recognize this functionality;
    the PostCSS team have created a plugin to offer similar functionality within PostCSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The plugin source is available from [https://github.com/postcss/postcss-mixins](https://github.com/postcss/postcss-mixins),
    and can be installed via Node, using the same method we''ve covered throughout
    this chapter. We will also make use of the `postcss-calc` plugin (from [https://github.com/postcss/postcss-calc](https://github.com/postcss/postcss-calc))
    to create a simple mixin that handles pixel fall-back for rem values in our code.
    Let''s dive in and see how it works in action:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start—as always—by installing the `postcss-mixins` plugin; for this, fire
    up a NodeJS command prompt, then change the working folder to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompt, enter each command separately, pressing *Enter* after each:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If all is well, we should see the results of the output on-screen, as shown
    in this screenshot:![Creating mixins with PostCSS](img/BO5194_02_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Updating our hover effect demo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point we will have support for mixins within PostCSS installed. Let''s
    make use of them by updating our gulp task file and style sheet. We''ll begin
    with the gulp task file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by opening a copy of `gulpfile.js` from our project area, then
    adding the following lines immediately below the block of `var` declarations (on
    or around line 10):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, go ahead and alter this line, from within the `autoprefixer` task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file. We now need a copy of the demo files from the code download that
    accompanies this book—go ahead and save a copy of `Tutorial3` to within our project
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a copy of `style.css` from within the `src` folder, then add this block
    of code immediately after the variable declarations declared in the `--root` rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the mixin in place, we now need to adjust our code to make use of the
    mixin; this requires a few changes. The first change is in the `h3` rule declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A little further down, go ahead and change the first two lines of the `.info
    h3` rule, as indicated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The third and final change is in the rule for `.info p`. Change it as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file, then copy it to the `src` folder in our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fire up a NodeJS command prompt, then switch to the project area, enter the
    usual command at the prompt, and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may see some option messages from stylelint: these can be safely ignored
    for now, but we will explore how to optimize this later in the book.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Copy the compiled code back to the `src` folder within `Tutorial3`. If all is
    well, when we preview the results in a browser, we should see our demo continue
    to work as shown at the start of the first part of this exercise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Although our demo won''t appear any different, there will be a noticeable difference
    in the code—a quick peek using a DOM inspector such as Firebug shows the use of
    `rem` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating our hover effect demo](img/BO5194_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The use of mixins does raise some important points. Indeed, one might be forgiven
    for thinking they simply replicate functionality from SASS. The plugin we've used
    does not follow the same format, even if the principles are the same; let's pause
    for a moment and take a look at how these stack up against standard processors.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing PostCSS to standard processors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The use of mixins is a great way to automatically insert pre-defined blocks
    of code, either static or dynamic, into our stylesheet, at the compilation phase.
  prefs: []
  type: TYPE_NORMAL
- en: The key thing to note is that, although the end result may be similar, the similarity
    is just in name; the mixin plugin we've used was not designed to replicate existing
    functionality available within SASS. Instead, this plugin exposes the power of
    JavaScript within PostCSS, and should be used to define function mixins, as a
    replacement for if or while statements that are not available within PostCSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is particularly true if we need to change any property names within the
    mixin; an example of this would be when referencing multiple images that each
    need similar style classes to be applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If we were to call this mixin with `@mixin icons signin;` from our code, we
    would see this as a result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This does pose an interesting question: where should the cut-off point between
    using JavaScript in our task file be, in comparison to our CSS? Taking this approach
    does mean that we have the benefit of using standard JavaScript, but at the expense
    of simplicity!'
  prefs: []
  type: TYPE_NORMAL
- en: This is one of the decisions you will need to make as a developer. PostCSS's
    flexibility means that not only do we need to choose the right plugin, but that
    the order they are all called in can also have an effect on the outcome of our
    code. In this instance, an alternative plugin—`postcss-simple-vars`—shares the
    same syntax as `postcss-mixins`, but does not support changing of property names.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can also consider using the `postcss-nested` plugin if our mixins are stored
    within nested statements; this is something we will cover in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'But, to bring it back to our example: we used the classic mixin for providing
    pixel fall-back when using older versions of IE.'
  prefs: []
  type: TYPE_NORMAL
- en: We could have used an alternative plugin here, in the form of `postcss-simple-mixins`
    (available from [https://www.npmjs.com/package/postcss-simple-mixin](https://www.npmjs.com/package/postcss-simple-mixin)).
    This is designed to provide simple support for mixins, and doesn't have the baggage
    associated with `postcss-mixins`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A word of note though: the `postcss-simple-mixins` plugin has been deprecated,
    although it is still available for use. It does not support nesting or the use
    of arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: The key consideration, though, will depend on what you plan to achieve within
    your code; choosing the right plugin will reduce the inclusion of redundant functionality
    and help keep our custom processor as lean as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is another reason why choosing plugins is critical: instead of using
    a mixin to just support older versions of IE, we can use the `postcss-pxtorem`
    plugin to generate `rem` values during compilation. After all, although most browsers
    have supported `rem` units for some time, there is always one that is late to
    the party:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Comparing PostCSS to standard processors](img/BO5194_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot taken from the CanIUse site, at [http://www.caniuse.com](http://www.caniuse.com)
  prefs: []
  type: TYPE_NORMAL
- en: Switching to using this plugin has the added benefit of simplifying our code,
    as the server can handle the grunt work of replacing pixel values with the equivalent
    `rem` units. The grunt work can be shifted to a central location, so that anyone
    using it will receive consistent results.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's important to also note that the cross over between mixins and functions
    also exists within PostCSS. We will explore using functions more in [Chapter 5](ch05.html
    "Chapter 5. Managing Colors, Images, and Fonts"), *Managing Colors, Images, and
    Fonts*, when we learn how PostCSS can be used to make our lives easier when working
    with colors or media.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, onwards we go. Time to switch topics completely, and take a look at another
    key part of PostCSS: creating loops. Anyone familiar with SASS or Less will be
    aware of how mundane it can get when applying very similar styles to identical
    objects; a perfect example are the classic social media icons that frequently
    grace posts on a page. PostCSS has a plugin that allows us to mimic this functionality,
    so let''s explore how to use it in action.'
  prefs: []
  type: TYPE_NORMAL
- en: Looping content with PostCSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A question: how often have you come across instances where you have a number
    of very similar images that share styles, but at the same time need to have individual
    styles applied? Sound familiar?'
  prefs: []
  type: TYPE_NORMAL
- en: I am of course talking about instances such as list items, grid layouts, and
    the classic social media icons we see littered all over the Internet. We can of
    course simply write rules to cover each image, but as I am sure you will agree,
    it's not the smartest approach! Instead, we can use the power of the `@each` statement
    to iterate through each item and apply each style using string interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: The `@each` plugin, by Alexander Madyankin, is one of two ways to incorporate
    a facility to loop through content; the source for this plugin is available from
    [https://github.com/outpunk/postcss-each](https://github.com/outpunk/postcss-each).
    The other plugin, postcss-for (available from [https://github.com/antyakushev/postcss-for](https://github.com/antyakushev/postcss-for)),
    takes a different approach—the difference between the two is that the former works
    on objects, while the latter must use a range of numbers to apply styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take the second plugin for a moment, we have to loop through a consecutive
    range of numbers in order to produce our result. So, something akin to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '…would produce this, when compiled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Seems pretty straightforward, right? Here comes the rub, though: unlike SASS,
    we can''t use variables to define that range by default; this plugin must be defined
    **before any instance of** `postcss-nested` and `postcss-simple-vars` plugins.
    In PostCSS, we iterate through **all** of the values inclusively (that is, one
    to three in our example), which is not the same as in SASS.'
  prefs: []
  type: TYPE_NORMAL
- en: It's in cases like this that we must decide between using this plugin on its
    own, or with `postcss-custom-properties` and `postcss-for-variables`. This is
    why it is key to fully understand what you need to achieve, and the capabilities
    of plugins available, so that we can choose the most effective combination to
    suit our needs. The great thing about PostCSS is its flexibility, speed, and modular
    design; this modularity and flexibility can also be seen as its Achilles heel,
    as tweaking the choice and order of plugins can have a real impact on our code!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can of course change completely, and use a separate fork of the postcss-for
    plugin, available from [https://github.com/xori/postcss-for](https://github.com/xori/postcss-for).
    This caters for dollar variables.
  prefs: []
  type: TYPE_NORMAL
- en: Let's put some of this into practice. Before we get stuck in to nesting with
    PostCSS in the next chapter, we'll round out this one with a simple demo that
    uses a group of social media icons and PostCSS to set up styling automatically
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating through @each statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Staying with the looping theme, but on a different tack, in place of using the
    `for` statement, we can achieve similar effects with `@each`, but only if the
    target is an element on the page.
  prefs: []
  type: TYPE_NORMAL
- en: I am of course talking about elements such as buttons or menu items; these elements
    will share the same styling, but require unique IDs to allow us to interact with
    them. It goes without saying that we could simply create a shared base class and
    add multiple classes for each element…
  prefs: []
  type: TYPE_NORMAL
- en: 'But we can do better than that: most preprocessors have in-built functionality
    that allows us to iterate through elements and apply CSS styling to each element.
    Thankfully, PostCSS is no different; we can achieve the same result using the
    postcss-each plugin, available from [https://github.com/outpunk/postcss-each](https://github.com/outpunk/postcss-each).
    It''s a cinch to install, and we can use it to add elements such as social media
    icons to the foot of a page, and style them. I feel a demo coming on, so let''s
    dive in and take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start with installing the plugin, so go ahead and fire up a NodeJS command
    prompt, and change the working directory to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompt, enter this command to install the `postcss-each` plugin, then
    press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If all is well, we should see the customary confirmation that the plugin is
    installed:![Iterating through @each statements](img/BO5194_02_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the plugin now in place, let''s move on and update our gulp file:'
  prefs: []
  type: TYPE_NORMAL
- en: We need to make three changes to our gulp file, so go ahead and open a copy
    from the project area in your usual text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, go ahead and remove lines 9 to 11; they contain the variable declarations
    for the `postcss-css-variables` and `postcss-mixins` plugins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On or around what is now line 8, we should see the variable declaration for
    `postcss-calc`. Immediately, below, add the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the main `autoprefixer` task, we need to alter the `postcss` call; remove
    this from line 13:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We should be left with this (changes have been highlighted):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, we can save the file. It is now ready for us to process the CSS
    required for our next demo. For this next exercise, we will need to avail ourselves
    of some suitable social media icons. I've used the ones by Nathan Brown, available
    at [http://wegraphics.net/downloads/free-stained-and-faded-social-media-icons/](http://wegraphics.net/downloads/free-stained-and-faded-social-media-icons/).
    We'll use the Twitter, LinkedIn, and YouTube images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a start:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start with a look at the SASS version of this demo. It''s a simple example,
    but illustrates perfectly how we can use the `@each` function to iterate through
    each image and apply the appropriate style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To compile the code, go ahead and copy the `Tutorial4` folder to our project
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the existing `gulpfile.js` with a copy from the `Tutorial1A` folder—this
    contains the appropriate commands to compile the code—we need to use the original
    version built to compile SASS code, not PostCSS, hence the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take a copy of `style.scss` from the `src` folder of the `Tutorial4` folder,
    then drop it into the `src` folder of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, fire up a NodeJS command prompt window, then change the working folder
    to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the prompt, enter this command, then press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Keep the command prompt window open for now, we will use it again shortly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once the code has compiled, copy the contents of the `dest` folder back to the
    `css` folder in the `Tutorial4` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If all is well, we should have three icons showing, when previewing the results
    in a browser. Nothing outrageous here: we have the base rule that applies to all
    of the icons, which is followed by the individual classes required to handle each
    icon itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: So, how would this look in PostCSS? Well, surprising as it may be, there isn't
    a great deal of change needed.
  prefs: []
  type: TYPE_NORMAL
- en: Switching to using PostCSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We only need to change it in two places within our CSS file. I''ve also separated
    the nested code, to make it easier to view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The changes we need to make are highlighted in this block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Our gulp file also needs to change. Let''s work through the steps involved
    to make the switch to PostCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: We first need to replace the gulp file—go ahead and delete the copy at the root
    of the project area, then replace it with a copy from the `Tutorial4` folder in
    the code download.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the code download that accompanies this book, extract a copy of `style`—`pre
    compile.css`, and rename it as `style.css`. Drop it in the `src` folder of our
    project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Revert back to the command prompt, then enter `gulp` at the prompt and press
    *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all is well, we should see the compiled style sheets appear in the `dest`
    folder, along with the source maps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of the `dest` folder in project area to the `css` folder within
    our local copy of the `Tutorial4` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try previewing the results in a browser; if all is working as expected, we should
    see these icons appear:![Switching to using PostCSS](img/BO5194_02_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Granted, it is a simple exercise, but then I've always been a fan of keeping
    things simple! Anyone can write CSS styles, but for me the "step up" is knowing
    that quantity does not always beat quality, and that there is something to be
    said for following the *KISS* principle, *Keep It Simple…* Yes, you get the idea!
  prefs: []
  type: TYPE_NORMAL
- en: 'But, just to show how flexible this plugin is, try this as an exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to [http://dataurl.net/](http://dataurl.net/), then upload each of the
    icons in turn, and use the site to generate data-URI equivalent code for each
    image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the CSS, remove the existing background-image links, and replace them with
    the code from the `dataurl.net` site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go ahead and compile the code using the same principles we've used throughout
    this chapter. Looks identical, doesn't it? We've removed the need to pull in separate
    resources, as we're using a pure CSS solution...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'But, there is a catch: when the file has been compiled, check the file size.
    It should tell you that it is significantly larger than the one which doesn''t
    contain data-URI equivalent code. This is to be expected: it''s the trade-off
    between sizes versus the number of resources we call. It only shows how critical
    the order of our PostCSS plugins would be, to get the desired results!'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anyone who has spent time using pre-processors such as SASS will no doubt be
    familiar with variables and mixins; these make up an integral part of using PostCSS.
    We've covered a lot of material relating to their use throughout this chapter,
    so let's take a breather and review what we have learned.
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off with a brief introduction to variables and mixins in SASS, before
    setting up an example demo in SASS (and Less CSS) as a basis for conversion to
    PostCSS.
  prefs: []
  type: TYPE_NORMAL
- en: Next up came the start of the transition process to PostCSS. We first looked
    at adding variable support in, before updating our hover demo to use the new plugin
    and remove a dependency on using SASS. We then covered some benefits and considerations
    of using PostCSS, before discovering how a simple tweak in the order of plugins
    can have a big impact on the end result.
  prefs: []
  type: TYPE_NORMAL
- en: We moved swiftly on with a look at mixins. We covered the install of the postcss-mixins
    plugin, before using it to update our demo. At this point, we paused for a moment
    to consider some of the differences between standard processors and PostCSS, and
    covered how one of the key points to bear in mind is PostCSS's flexibility and
    power.
  prefs: []
  type: TYPE_NORMAL
- en: We then rounded out the chapter with a look at looping content. We first explored
    the use of the for statement, before moving on and taking a look at how we can
    easily style content using the `@each` function. We then covered its use in a
    simple demo for styling social media icons. This started in SASS, but finished
    with the converted results using PostCSS.
  prefs: []
  type: TYPE_NORMAL
- en: Phew, let's move on! Our next stop on this whistlestop tour of mastering PostCSS
    is a look at nesting, and no, not for our feathered friends, but how we can (dramatically)
    reduce the content we write, or at least make it easier to read!
  prefs: []
  type: TYPE_NORMAL
