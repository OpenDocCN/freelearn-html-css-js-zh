- en: Chapter 1. Getting to Know Ext JS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term "app" has revolutionized the way we access information and interact
    with each other and organizations. Designing and developing apps presents numerous
    challenges to software engineers, which can hinder our ability to release these
    apps quickly and remain agile in our development process.
  prefs: []
  type: TYPE_NORMAL
- en: Assistance from frameworks and libraries is better now than ever before, and
    with Sencha's latest release, Ext JS 5, we can produce even richer, real-time,
    and engaging experiences for our users.
  prefs: []
  type: TYPE_NORMAL
- en: '*Ext JS Essentials* aims to touch upon all the major topics on Ext JS. By the
    end of this book, you''ll understand:'
  prefs: []
  type: TYPE_NORMAL
- en: How to use Ext JS to build rich and responsive applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web application architecture with the **Model-View-Controller** (**MVC**) and
    **Model-View-ViewModel** (**MVVM**) patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The framework's fundamentals, including classes, events, and user interactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ext JS' core layouts, widgets, and components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main concepts of the data package and two-way data binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methods to visualize datasets with charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The tools you can use to enhance your development experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where to start when customizing your interface with SASS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What you can do to test your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter will provide a high-level overview of the framework, and explain
    why you should invest time and energy into learning its techniques, technology,
    and tools.
  prefs: []
  type: TYPE_NORMAL
- en: It's expected that you already have a programming background, but you'll discover
    the knowledge you require to get the most from the framework. The examples worked
    upon throughout the book will center on a single application, and by the end of
    the chapter, your development environment will be ready, and the application will
    run!
  prefs: []
  type: TYPE_NORMAL
- en: What is Ext JS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sencha Ext JS is an application development platform that allows you to build
    rich user experiences using web technologies and standards. Ext JS is ideally
    suited to building single-page applications and provides all the tools required
    to enable this. However, if you only want to use a small subset of the framework,
    it is possible to incorporate just the widgets and classes you require. You can
    embed these directly on a web page, just like you would a jQuery component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike other application development frameworks, Ext JS comes with a few tricks
    up its sleeve. Firstly, it has been specifically designed to work cross-platform
    and cross-browser. Much of the headache that comes with cross-browser development
    has been removed for us. With little effort, your apps will run on:'
  prefs: []
  type: TYPE_NORMAL
- en: Internet Explorer 8 and above
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firefox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chrome
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safari 6 and above
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opera 12 and above
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sencha hasn't forgotten iOS and Android either. From Ext JS 5, you'll be able
    to run your apps smoothly on iOS 6+ and Android 4.1+.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, Ext JS encourages best practices and the use of architectural patterns
    in web apps. Ext JS is an object-oriented framework with a clearly defined structure
    and naming convention. Ext JS supports MVC and MVVM architectures, but you're
    not limited by Sencha; feel free to override and extend the framework to meet
    your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the framework is supported by thorough and well-written documentation
    alongside an outstanding community of users, often found on the Sencha forums
    or StackOverflow. There is also a community of plugins available from the Sencha
    Market or on GitHub. The resources are out there for you to find. Go looking,
    and if you can't find something just ask.
  prefs: []
  type: TYPE_NORMAL
- en: What Ext JS isn't
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you go any further, it might be worth taking a few seconds to consider
    what Ext JS is not. It's not for you if you're looking to design for mobile first.
    Sencha has made major advancements with the framework recently to give it touch
    support, but it's still not best suited for mobile phones. Sencha Touch, on the
    other hand, is a framework specifically designed for mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: Ext JS also isn't best suited for use on websites, unless you have a specific
    use case. For example, if you're looking for a drop-down menu or tab panel for
    your website, you might be better off looking at other frameworks, such as jQuery.
    We're not saying that Ext JS can't do these things, but the framework has a large
    overhead and might be too much for these simple use cases.
  prefs: []
  type: TYPE_NORMAL
- en: As the framework is complex and contains a large number of components, it can
    sometimes be cumbersome to customize components and/or the look and feel of your
    application to suit your needs. Doing it well requires time, patience, and knowledge,
    but the results speak for themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ext JS is used across the globe by thousands of organizations to deliver web
    applications to their users. The architectural patterns and components, such as
    grids, make it particularly well-suited to business-related applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Commonly, developers are using Ext JS for:'
  prefs: []
  type: TYPE_NORMAL
- en: Trading apps with real-time data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise data management apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intranet applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualization applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consumer-facing web apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native-wrapped desktop apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data capturing and monitoring systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dashboards and portals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obviously, this list is not exhaustive, but it should give you an idea of how
    others are using Ext JS in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: What's new in Ext JS 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ext JS 5 is yet another step forward for application developers and the end
    user. Its new features make it one of the world's most advanced multi-device JavaScript
    frameworks. Here's a summary of the major enhancements in this framework.
  prefs: []
  type: TYPE_NORMAL
- en: Touch support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From one codebase, you can now build truly cross-platform apps. This release
    of Ext JS introduces touch capability, enabling you to deliver your desktop applications
    on touch-enabled devices. This puts an end to the frustration felt by users on
    tablets, such as iPads, or touch-screen laptops.
  prefs: []
  type: TYPE_NORMAL
- en: Sencha has provided a theme called *Neptune Touch* which is more appropriate
    for use on touch-enabled devices. This is primarily done by increasing the size
    of the tappable components on-screen.
  prefs: []
  type: TYPE_NORMAL
- en: A *Crisp*, version of Nept*une Touch* gives you further choice as a starting
    point for your apps.
  prefs: []
  type: TYPE_NORMAL
- en: Architectural improvements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Further efficiencies and architectural improvements help make the framework
    more responsive and better for building applications. The most notable improvement
    here is the new MVVM architectural pattern, which enables us to develop with Ext
    JS using less application logic. [Chapter 3](ch03.html "Chapter 3. Reacting to
    User and Application Interactions"), *Reacting to User and Application Interactions*,
    will take a much deeper dive into MVVM and will explain how to produce apps using
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ext JS 5 provides the ability for your apps to have an optimal viewing experience
    across desktops and tablets, regardless of orientation changes, using a new responsive
    config system.
  prefs: []
  type: TYPE_NORMAL
- en: Component enhancements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sencha has made a number of enhancements to the components in the framework.
    For example, grids have the ability to have widgets added directly to the grid
    cell. This is going to be great for data visualization and flexible user experiences.
    The charting package has been upgraded for financial charting as well as to be
    touch-optimized.
  prefs: []
  type: TYPE_NORMAL
- en: What you need to know
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting started with Ext JS doesn't require a huge amount of upfront knowledge,
    as there are plenty of examples and resources to help. However, having experience
    of general programming and object-oriented programming will stand you in good
    stead. If you happen to know JavaScript (and JSON), that is even better.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be covering the MVC and MVVM architectural patterns in this book, but
    any prior knowledge you might have from another framework will make it easier
    for you. The same applies for theming your application: we''ll demonstrate using
    SASS in an Ext JS app, but won''t cover the technology in detail.'
  prefs: []
  type: TYPE_NORMAL
- en: Development environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The development environment for Ext JS need be no more than a basic text editor,
    a local web server, and a web browser to view the output. Having said that, there
    are tools, some freely available, that will make your experience better. We would
    recommend getting familiar with your browser''s built-in tools and add-ons:'
  prefs: []
  type: TYPE_NORMAL
- en: Developer Tools in Chrome
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebug in Firefox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developer Tools in Internet Explorer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dragonfly in Opera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developer Tools in Safari
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, it's worth noting that in recent years, JavaScript support for **Integrated
    Development Environments** (**IDEs**) has improved greatly. Ext JS works particularly
    well with JetBrains IntelliJ Idea (or WebStorm if you're looking for something
    more basic), Eclipse, and Spket among others.
  prefs: []
  type: TYPE_NORMAL
- en: Project introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to make our journey through the Ext JS framework as informative and
    relevant as possible, we will be developing a real-world application from start
    to finish. We will cover each step of the application building process and we
    will incorporate every new concept, widget and class that we come across into
    this application to impart practical knowledge that can be put to use straight
    away.
  prefs: []
  type: TYPE_NORMAL
- en: Our application will be a business dashboard application that will present a
    variety of information in a number of different formats; it will allow users to
    create and manipulate data structures and create a customized look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of the book, our application will look like the screenshot that
    follows and will include the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: MVVM architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data displayed in a variety of different charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interactive data grids
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom data views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two-way data-bound forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Project introduction](img/3717_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating our application with Sencha Cmd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sencha Cmd is a command-line tool that automates a variety of tasks relating
    to the creation, development, and deployment of Ext JS and Sencha Touch applications.
    It has a huge number of features, many of which will be discussed in detail in
    [Chapter 3](ch03.html "Chapter 3. Reacting to User and Application Interactions"),
    *Reacting to User and Application Interactions*. In this section, we will discuss
    how to install Sencha Cmd, use it to generate our business dashboard application,
    and ready it for production deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Sencha Cmd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sencha Cmd is a cross-platform tool and has variations available for each major
    platform, but it relies on a couple of dependencies that must be installed first.
    These are:'
  prefs: []
  type: TYPE_NORMAL
- en: Java Runtime Environment v1.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruby
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This comes preinstalled on OS X
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For Windows, this is available from [http://rubyinstaller.org/downloads/](http://rubyinstaller.org/downloads/)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For Ubuntu, download this with `sudo apt-get install ruby2.0.0`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: With these installed, head over to the Sencha website ([http://www.sencha.com/products/sencha-cmd/download](http://www.sencha.com/products/sencha-cmd/download))
    to download the package relevant to your OS. Follow the instructions within the
    installer and you should be ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: To verify that the installation has been successful, open a new Terminal or
    Command Prompt window and run the command `sencha`. You should see the Sencha
    Cmd help text appear, listing the available commands.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can create our application, we must first download the Ext JS framework
    from the Sencha website ([http://www.sencha.com/products/extjs/#try](http://www.sencha.com/products/extjs/#try)).
    Extract this archive to a suitable location. We're now ready to create our application.
  prefs: []
  type: TYPE_NORMAL
- en: Applications, packages, and workspaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three main entities to understand when it comes to structuring your
    application: applications, packages, and workspaces.'
  prefs: []
  type: TYPE_NORMAL
- en: An **application** is a complete product that brings all your functionality
    and features together. Each application has its own `index.html` page and generally
    stands on its own.
  prefs: []
  type: TYPE_NORMAL
- en: A **package** is a self-contained piece of code designed to be shared between
    applications and could be local to your workspace or distributed through the Sencha
    Package Manager and a remote repository. An example of a package may be a custom
    UI component.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, a **workspace** is a special folder that groups multiple applications
    and packages, allowing them to share common code and framework instances.
  prefs: []
  type: TYPE_NORMAL
- en: Generating our workspace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use Sencha Cmd's `generate` command to create our basic application
    structure, but we will start by creating a workspace.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we open a Terminal/Command Prompt window and navigate to the Ext JS
    framework folder we extracted earlier. We then run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This tells Sencha Cmd to generate a new workspace in the specified folder,
    which will be created if it doesn''t already exist. The contents of the workspace
    can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating our workspace](img/3717_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `.sencha` folder is a hidden folder that contains configuration files that
    Sencha Cmd makes use of. You will only need to delve into this folder if you are
    customizing the build process or heavily customizing the application.
  prefs: []
  type: TYPE_NORMAL
- en: The `ext` folder contains the Ext JS framework code which our new application
    will make use of.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the empty `packages` folder will be the home of any packages that we
    choose to include. This could be user extensions, themes, or simply common code
    to be shared between applications.
  prefs: []
  type: TYPE_NORMAL
- en: Generating our application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have a workspace for our application to live in, we can create
    it using the `generate app` command and pass to it the name of our application
    and the path to the application''s folder, within the workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This command will create a basic application and folder structure inside a folder
    named `BizDash`, as shown in the following screenshot. We will explain what all
    the folders and files inside this folder are in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating our application](img/3717_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This structure will form the basis of our business dashboard application.
  prefs: []
  type: TYPE_NORMAL
- en: You can navigate to the `index.html` file with your browser and see what it
    looks like. You should see a simple application with a tab bar and a button.
  prefs: []
  type: TYPE_NORMAL
- en: Getting production ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Obviously, we're a long way off from the production of our application, but
    it is important to have things set up correctly from the start so that we can
    quickly deploy when we need to and have this process continually running.
  prefs: []
  type: TYPE_NORMAL
- en: When we view our application now, and monitor the file requests in the Developer
    Tools, we will see a lot of activity—totaling over 350 requests and 6 MB of data
    transfer! This is far from ideal for end users, and so, we want to combine these
    requests into a single minified and compressed file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We do this by building our application with Sencha Cmd. This process will combine
    all of the class files used by the application (that is, the 350 requests we mentioned
    earlier) into a single JS file, along with other building tasks. There are two
    types of builds: testing and production. A testing build will combine the code
    but leave it unminified, whereas a production build will minify it fully.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We build the application for production with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This outputs our built application to the `build/production/BizDash` folder.
    If you load this page in your browser, you will see that the number of requests
    has dropped to 6 and only totals 1.3 MB. Much better!
  prefs: []
  type: TYPE_NORMAL
- en: In addition to concatenating and minifying our JavaScript, this process will
    compile our SASS styles, generate image sprites for older browsers, and build
    a cache manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have already saved ourselves over 5 MB, there are still further
    enhancements that should be made to ensure our application loads as fast as possible.
    We will outline a few of these methods here, but for a more complete list, check
    out Google's PageSpeed or Yahoo's YSlow, which will analyze the application and
    make suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: GZip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: GZipping allows compression of the content sent to the browser, making it much
    quicker to download. This is a setting that can be enabled on most web servers.
  prefs: []
  type: TYPE_NORMAL
- en: Minification and concatenation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have already talked about these two processes, which are taken care of by
    the Sencha Cmd process. However, it is important to remember when including third-party
    libraries and frameworks into your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Image optimization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A lot of emphasis is placed on JavaScript size when it comes to page weight,
    but often, removing a single image will cut your page size in half. If images
    can't be removed, then make sure they are fully optimized, using a tool such as
    ImageOptim.
  prefs: []
  type: TYPE_NORMAL
- en: Anatomy of our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a step back and understand what Sencha Cmd has created in our application''s
    folder, and where our app''s code will belong:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.sencha`: Our app''s `.sencha` folder is similar to the one found in the workspace.
    The files within it allow us to gain fine-grain control over aspects of the app
    itself and its build process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app`: The `app` folder is where we''ll spend most of our time, as it contains
    all of our JavaScript source code. Each of the main class types has its own folder
    in here by default, including controllers, models, stores, and views. New folders
    can be added here at any time, as required by the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ext JS 5 introduces a new architecture concept to the framework called MVVM,
    which will be discussed further in a later chapter. When using this structure,
    we will include our ViewModels and ViewControllers in the `view` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Application.js`: This file is where the application is defined and where it
    will be launched from. In this file, we will define which controllers, stores,
    and views we want to load, and the code we want to run when the browser and framework
    are ready.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will note that there is also an `app.js` file at the root level. This file
    should not need to be edited and with any "application" customizations being added
    to `Application.js`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`overrides`: Any overrides we want to make to the framework''s code can be
    added here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources`: This folder will contain any assets (images, icons, fonts, and
    so on) that our application will make use of. These are all copied into our production
    `build` folder when the application is built.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sass`: The `sass` folder will be the home of all of our custom SASS styling
    rules, which will be compiled during the Sencha Cmd build process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.json`: Our `app.json` file contains a large number of configuration options
    for our application and can be used to configure things such as JavaScript and
    CSS files included in the build, AppCache details, and the active theme.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build.xml`: This file allows us to hook into each step of the automated build
    process and add our own steps. This is useful if we want to customize the process
    to fit our workflow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootstrap.css`, `bootstrap.js`, and `bootstrap.json`: These three files are
    required to launch the application, but are generated by the Sencha Cmd build
    process, so should not be edited by hand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we have created a working skeleton application ready to be fleshed
    out with our business logic and user interface, but how does the framework actually
    work and what does it do for us that other frameworks don't?
  prefs: []
  type: TYPE_NORMAL
- en: The bootstrapped launch process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process for launching and running our applications is simple with the framework
    taking responsibility for including all assets, in the correct order, as and when
    they're needed. We simply define which classes rely on which other classes, and
    the framework builds this relationship map for us.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript to HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ext JS manages the entire HTML generated to display our user interface to the
    user. We deal primarily in JavaScript configuration of interface components that
    are then rendered as HTML. By doing this, we are able to be abstracted from the
    complex HTML and CSS that is needed to render the rich widgets perfectly across
    all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: The event system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ext JS classes make use of an event system that allows them to communicate seamlessly
    with each other. This makes it easy to keep coupling low and is perfect to simplify
    the handling of the asynchronous nature of JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Managing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the big strengths of the framework is that it allows you to model your
    data structures and manage data within your applications effectively. The support
    for creating associated data models, reading and saving data to various sources,
    and binding interface components directly to these data sources, makes the framework
    extremely powerful.
  prefs: []
  type: TYPE_NORMAL
- en: Browser API interaction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are numerous browser APIs that Ext JS abstracts and interacts with on
    our behalf, to simplify and unify the way we use them. For example, using this
    approach, switching between saving data to a server API or a LocalStorage data
    store is a simple configuration change.
  prefs: []
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ext JS 5 has introduced a new routing system to allow us to enable the back
    button in our single-page web applications, and to give direct access to specific
    areas of an application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has focused on setting the scene for the Ext JS framework and explained
    how to use it to create incredible web applications. Its use cases are varied,
    and by using it you can guarantee that you are building your project on a solid
    base with the features on hand to create an application that is reliable, maintainable,
    and most importantly, functional.
  prefs: []
  type: TYPE_NORMAL
- en: We have also created the basis of the book's project application, which will
    be extended in each chapter of the book. By the end, we will have developed a
    real-life, living application. We feel this approach is essential to keeping the
    lessons relevant and practical, ensuring that you can go on to create your own
    application immediately.
  prefs: []
  type: TYPE_NORMAL
