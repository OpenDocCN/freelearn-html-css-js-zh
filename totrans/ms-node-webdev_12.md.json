["```js\nrm ./templates/**/*.handlebars\nrm ./templates/**/*.custom\nrm ./src/client/*_custom.js\nrm ./src/server/*custom*.ts \n```", "```js\ndocument.addEventListener('DOMContentLoaded', () => {\n    // do nothing\n}); \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <script src=\"img/bundle.js\"></script>\n        <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n        <form>\n            <div class=\"m-2\">\n                <label class=\"form-label\">Name</label>\n                <input name=\"name\" class=\"form-control\" />\n            </div>\n            <div class=\"m-2\">\n                <label class=\"form-label\">City</label>\n                <input name=\"city\" class=\"form-control\" />\n            </div>\n        </form>\n    </body>\n</html> \n```", "```js\nimport { Express } from \"express\";\nexport const registerFormMiddleware = (app: Express) => {\n    // no middleware yet\n}\nexport const registerFormRoutes = (app: Express) => {\n    // no routes yet\n} \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\nimport { testHandler } from \"./testHandler\";\nimport httpProxy from \"http-proxy\";\nimport helmet from \"helmet\";\nimport { engine } from \"express-handlebars\";\nimport * as helpers from \"./template_helpers\";\n**import { registerFormMiddleware, registerFormRoutes } from \"./forms\";**\nconst port = 5000;\nconst expressApp: Express = express();\nconst proxy = httpProxy.createProxyServer({\n    target: \"http://localhost:5100\", ws: true\n});\nexpressApp.set(\"views\", \"templates/server\");\nexpressApp.engine(\"handlebars\", engine());\nexpressApp.set(\"view engine\", \"handlebars\");\nexpressApp.use(helmet());\nexpressApp.use(express.json());\n**registerFormMiddleware(expressApp);**\n**registerFormRoutes(expressApp);**\nexpressApp.get(\"/dynamic/:file\", (req, resp) => {\n    resp.render(`${req.params.file}.handlebars`,\n        { message: \"Hello template\", req, helpers: { ...helpers } });\n});\nexpressApp.post(\"/test\", testHandler);\nexpressApp.use(express.static(\"static\"));\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\nexpressApp.use((req, resp) => proxy.web(req, resp));\nconst server = createServer(expressApp);\nserver.on('upgrade', (req, socket, head) => proxy.ws(req, socket, head));\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        **<script src=\"img/strong>**/bundle.js\"></script>** \n **<link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" />**\n    </head>\n    <body>\n        {{{ body }}}\n    </body>\n</html>** \n```", "```js\n[\n    { \"city\": \"London\", \"population\": 8982000 },\n    { \"city\": \"Paris\", \"population\": 2161000 },\n    { \"city\": \"Beijing\", \"population\": 21540000 }\n] \n```", "```js\nnpm start \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <script src=\"img/bundle.js\"></script>\n        <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n       ** <form action=\"/form\">**\n            <div class=\"m-2\">\n                <label class=\"form-label\">Name</label>\n                <input name=\"name\" class=\"form-control\" />\n            </div>\n            <div class=\"m-2\">\n                <label class=\"form-label\">City</label>\n                <input name=\"city\" class=\"form-control\" />\n            </div>                                    \n            **<div class=\"m-2\">**\n **<button class=\"****btn btn-primary\" formmethod=\"get\">**\n **Submit (GET)**\n **</button>**\n **<button class=\"btn btn-primary\"** **formmethod=\"post\">**\n **Submit (POST)**\n **</button>**\n **</div>**\n        </form>\n    </body>\n</html> \n```", "```js\nimport { Express } from \"express\";\nexport const registerFormMiddleware = (app: Express) => {\n    // no middleware yet\n}\nexport const registerFormRoutes = (app: Express) => {\n  **  app.get(\"****/form\", (req, resp) => {**\n **for (const key in req.query) {**\n **resp.write(`${key}****: ${req.query[key]}\\n`);** \n **}**\n **resp.end();**\n **});**\n} \n```", "```js\nhttp://localhost:5000/form?name=Alice+Smith&city=London \n```", "```js\nimport { Express } from \"express\";\nexport const registerFormMiddleware = (app: Express) => {\n    // no middleware yet\n}\nexport const registerFormRoutes = (app: Express) => {\n    app.get(\"/form\", (req, resp) => {\n        for (const key in req.query) {\n            resp.write(`${key}: ${req.query[key]}\\n`);           \n        }\n        resp.end();\n    });\n   ** app.post(\"/form\", (req, resp) => {**\n **resp.write****(`Content-Type: ${req.headers[\"content-type\"]}\\n`)**\n **req.pipe(resp);**\n **});**\n} \n```", "```js\n...\nname=Alice+Smith&city=London\n... \n```", "```js\nimport express, { Express } from \"express\";\nexport const registerFormMiddleware = (app: Express) => {\n    **app.use(express.urlencoded({extended: true}))**\n}\nexport const registerFormRoutes = (app: Express) => {\n    app.get(\"/form\", (req, resp) => {\n        for (const key in req.query) {\n            resp.write(`${key}: ${req.query[key]}\\n`);           \n        }\n        resp.end();\n    });\n    app.post(\"/form\", (req, resp) => {\n        resp.write(`Content-Type: ${req.headers[\"content-type\"]}\\n`)\n        **for (const key in req.body) {**\n **resp.write(`****${key}: ${req.body[key]}\\n`);** \n **}** \n **resp.end();**\n    });\n} \n```", "```js\n...\nContent-Type: application/x-www-form-urlencoded\n**name: Alice Smith**\n**city: London**\n... \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <script src=\"img/bundle.js\"></script>\n        <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n        <form action=\"/form\">\n            <div class=\"m-2\">\n                <label class=\"form-label\">Name</label>\n                <input name=\"name\" class=\"form-control\" />\n            </div>\n           ** <div class=\"m-2\">**\n **<label class****=\"form-label\">City</label>**\n **<input name=\"city\" class=\"form-control\" />**\n**</div> **                 \n            <div class=\"m-2\">\n                <label class=\"form-label\">File</label>\n                <input name=\"datafile\" type=\"file\" class=\"form-control\" />\n            </div>\n            <div class=\"m-2\">\n                <button class=\"btn btn-primary\" formmethod=\"get\">\n                    Submit (GET)\n                </button>\n                <button class=\"btn btn-primary\" formmethod=\"post\">\n                    Submit (POST)\n                </button>\n                **<button class=\"btn btn-primary\" formmethod=\"post\"**\n **formenctype=\"multipart/form-data\"****>**\n **Submit (POST/MIME)**\n **</button>**\n            </div>\n        </form>\n    </body>\n</html> \n```", "```js\nimport express, { Express } from \"express\";\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}))\n}\nexport const registerFormRoutes = (app: Express) => {\n    app.get(\"/form\", (req, resp) => {\n        for (const key in req.query) {\n            resp.write(`${key}: ${req.query[key]}\\n`);           \n        }\n        resp.end();\n    });\n    app.post(\"/form\", (req, resp) => {\n        resp.write(`Content-Type: ${req.headers[\"content-type\"]}\\n`)\n        **if (req.headers[\"content-type\"]?.startsWith(\"multipart/form-data\"****)) {**\n **req.pipe(resp);**\n **} else {**\n            for (const key in req.body) {\n                resp.write(`${key}: ${req.body[key]}\\n`);           \n            }       \n            resp.end();\n        }\n    });\n} \n```", "```js\n...\nContent-Type: application/x-www-form-urlencoded\nname: Alice\ncity: London\n**datafile: data.json**\n... \n```", "```js\n...\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundary41AOY4gvNpCTJzUy\n------WebKitFormBoundary41AOY4gvNpCTJzUy\nContent-Disposition: form-data; name=\"name\"\nAlice\n------WebKitFormBoundary41AOY4gvNpCTJzUy\nContent-Disposition: form-data; name=\"city\"\nLondon\n------WebKitFormBoundary41AOY4gvNpCTJzUy\nContent-Disposition: form-data; name=\"datafile\"; filename=\"data.json\"\nContent-Type: application/json\n[\n    { \"city\": \"London\", \"population\": 8982000 },\n    { \"city\": \"Paris\", \"population\": 2161000 },\n    { \"city\": \"Beijing\", \"population\": 21540000 }\n]\n------WebKitFormBoundary41AOY4gvNpCTJzUy--\n... \n```", "```js\n...\nContent-Type: multipart/form-data; b**oundary=----WebKitFormBoundary41AOY4gvNpCTJzUy**\n... \n```", "```js\n...\nContent-Disposition: form-data; name=\"datafile\"; filename=\"data.json\"\nContent-Type: application/json\n... \n```", "```js\nnpm install multer@1.4.5-lts.1\nnpm install --save-dev @types/multer@1.4.11 \n```", "```js\nimport express, { Express } from \"express\";\n**import multer from \"multer\";**\n**const fileMiddleware = multer({storage: multer.memoryStorage()});**\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}))\n}\nexport const registerFormRoutes = (app: Express) => {\n    app.get(\"/form\", (req, resp) => {\n        for (const key in req.query) {\n            resp.write(`${key}: ${req.query[key]}\\n`);\n        }\n        resp.end();\n    });\n **   app.post(\"/form\", fileMiddleware.single(\"datafile\"), (req, resp) => {**\n        resp.write(`Content-Type: ${req.headers[\"content-type\"]}\\n`)\n        for (const key in req.body) {\n            resp.write(`${key}: ${req.body[key]}\\n`);\n        }\n       ** if (req.file) {**\n **resp.write(`---\\nFile: ${req.file.originalname}\\n`);**\n **resp.write(req.file.****buffer.toString());** \n **}**\n\n        resp.end();\n    });\n} \n```", "```js\n...\napp.post(\"/form\", **fileMiddleware.single(\"datafile\")**, (req, resp) => {\n... \n```", "```js\n`originalname` \n```", "```js\n`size` \n```", "```js\n`mimetype` \n```", "```js\n`buffer` \n```", "```js\nimport express, { Express } from \"express\";\nimport multer from \"multer\";\nconst fileMiddleware = multer({storage: multer.memoryStorage()});\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}))\n}\nexport const registerFormRoutes = (app: Express) => {\n    app.get(\"/form\", (req, resp) => {\n        for (const key in req.query) {\n            resp.write(`${key}: ${req.query[key]}\\n`);           \n        }\n        resp.end();\n    });\n    app.post(\"/form\", fileMiddleware.single(\"datafile\"), (req, resp) => {\n    **    resp.setHeader(\"Content-Type\", \"text/html\");**\n**for (const key in req.body) {**\n **resp.write(`<div>${key}: ${req.body[key]}</div>`);** \n **}** \n **if (req.file) {**\n **resp.****write(`<div>File: ${req.file.originalname}</div>`);**\n **resp.write(`<div>${req.file.buffer.toString()}</div>`);** \n **}**\n\n **resp.end();**\n    });\n} \n```", "```js\n`<link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" />` \n```", "```js\n`<a class=\"btn btn-primary\" href=\"http://packt.com\">Click Me!</a>` \n```", "```js\n`&` \n```", "```js\n`&amp;` \n```", "```js\n`<` \n```", "```js\n`&lt;` \n```", "```js\n`>` \n```", "```js\n`&gt;` \n```", "```js\n`=` \n```", "```js\n`&#x3D;` \n```", "```js\n`\" (double quotes)` \n```", "```js\n`&quot;` \n```", "```js\n`' (single quote)` \n```", "```js\n`&#x27;` \n```", "```js\n`` ` (back tick) `` \n```", "```js\n`&#x60;` \n```", "```js\nconst matchPattern = /[&<>=\"'`]/g;\nconst characterMappings: Record<string, string> = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    \"\\\"\": \"&quot;\",\n    \"=\": \"&#x3D;\",   \n    \"'\": \"&#x27;\",\n    \"`\": \"&#x60;\"\n};\nexport const santizeValue = (value: string) =>\n    value?.replace(matchPattern, match => characterMappings[match]); \n```", "```js\nimport express, { Express } from \"express\";\nimport multer from \"multer\";\n**import { santizeValue } from \"./sanitize\";**\nconst fileMiddleware = multer({storage: multer.memoryStorage()});\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}))\n}\nexport const registerFormRoutes = (app: Express) => {\n    app.get(\"/form\", (req, resp) => {\n        for (const key in req.query) {\n           ** resp.write(`${key}: ${req.query[key]}\\n`); **          \n        }\n        resp.end();\n    });\n    app.post(\"/form\", fileMiddleware.single(\"datafile\"), (req, resp) => {\n        resp.setHeader(\"Content-Type\", \"text/html\");\n        for (const key in req.body) {\n            **resp.write****(`<div>${key}: ${ santizeValue( req.body[key])}</div>`);**\n        }       \n        if (req.file) {\n            resp.write(`<div>File: ${req.file.originalname}</div>`);\n            **resp.write****(`<div>${santizeValue(req.file.buffer.toString())}</div>`);**\n        }\n\n        resp.end();\n    });\n} \n```", "```js\n`<link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" />` \n```", "```js\n`&lt;link href&#x3D;&quot;css/bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot; /&gt;` \n```", "```js\n`&amp;lt;link href&amp;#x3D;&amp;quot;css/bootstrap.min.css&amp;quot; rel&amp;#x3D;&amp;quot;stylesheet&amp;quot; /&amp;gt;` \n```", "```js\n<table class=\"table table-sm table-striped\">\n    <thead>\n        <tr><th>Field</th><th>Value</th></tr>\n    </thead>\n    <tbody>\n        <tr><td>Name:</td><td>{{ name }} </td></tr>\n        <tr><td>City:</td><td>{{ city }} </td></tr>\n        <tr><td>File:</td><td>{{ fileData }} </td></tr>\n    </tbody>\n</table> \n```", "```js\nimport express, { Express } from \"express\";\nimport multer from \"multer\";\nimport { santizeValue } from \"./sanitize\";\nconst fileMiddleware = multer({storage: multer.memoryStorage()});\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}))\n}\nexport const registerFormRoutes = (app: Express) => {\n    app.get(\"/form\", (req, resp) => {\n        for (const key in req.query) {\n            resp.write(`${key}: ${req.query[key]}\\n`);           \n        }\n        resp.end();\n    });\n    app.post(\"/form\", fileMiddleware.single(\"datafile\"), (req, resp) => {\n        **resp.render****(\"formData\", {**\n **...req.body, file: req.file,**\n **fileData: req.file?.buffer.toString()**\n **});**\n    });\n} \n```", "```js\n<div class=\"m-2\">\n    {{#if nextage }}\n        <h4>Hello {{name}}. You will be {{nextage}} next year.</h4>\n    {{/if }}\n</div>\n<div>\n    <form action=\"/form\" method=\"post\">\n        <div class=\"m-2\">\n            <label class=\"form-label\">Name</label>\n            <input name=\"name\" class=\"form-control\" value=\"{{name}}\"/>\n        </div>\n        <div class=\"m-2\">\n            <label class=\"form-label\">Current Age</label>\n            <input name=\"age\" class=\"form-control\" value=\"{{age}}\" />\n        </div>                  \n        <div class=\"m-2\">\n            <button class=\"btn btn-primary\">Submit</button>                               \n        </div>\n    </form>\n</div> \n```", "```js\nimport express, { Express } from \"express\";\n**// import multer from \"multer\";**\n**// import { santizeValue } from \"./sanitize\";**\n**//const fileMiddleware = multer({storage: multer.memoryStorage()});**\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}))\n}\nexport const registerFormRoutes = (app: Express) => {\n **app.get(\"/form\", (req, resp) => {**\n **resp.render(\"age\");**\n **});**\n **app.post(\"****/form\", (req, resp) => {**\n **resp.render(\"age\", {**\n **...req.body,**\n **nextage: Number.parseInt(req.body.****age) + 1**\n **});**\n **});**\n} \n```", "```js\nimport { NextFunction, Request, Response } from \"express\";\ntype ValidatedRequest = Request & {\n    validation: {\n        results:  { [key: string]: {\n            [key: string]: boolean, valid: boolean\n        } },\n        valid: boolean\n    }\n}\nexport const validate = (propName: string) => {\n    const tests: Record<string, (val: string) => boolean> = {};\n    const handler = (req: Request, resp: Response, next: NextFunction ) => {\n        // TODO - perform validation checks\n        next();\n    }\n    handler.required = () => {\n        tests.required = (val: string) => val?.trim().length > 0;\n        return handler;\n    };\n    handler.minLength = (min: number) => {\n        tests.minLength = (val:string) => val?.trim().length >= min;\n        return handler;\n    };\n    handler.isInteger = () => {\n        tests.isInteger = (val: string) => /^[0-9]+$/.test(val);\n        return handler;\n    }\n    return handler;\n}\nexport const getValidationResults = (req: Request) => {\n    return (req as ValidatedRequest).validation || { valid : true }\n} \n```", "```js\n...\ntype ValidatedRequest = Request & {\n    validation: {\n        results:  { [key: string]: {\n            [key: string]: boolean, valid: boolean\n        } },\n        valid: boolean\n    }\n}\n... \n```", "```js\n...\n{\n  results: {\n    name: { valid: false, required: true, minLength: false },\n    age: { valid: true, isNumber: true }\n  },\n  valid: false\n}\n... \n```", "```js\nimport express, { Express } from \"express\";\n**import { getValidationResults, validate } from \"****./validation\";**\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}))\n}\nexport const registerFormRoutes = (app: Express) => {\n    app.get(\"/form\", (req, resp) => {\n       **resp.render(\"age\", {** **helpers: { pass }});**\n    });\n    app.post(\"/form\",\n           ** validate(\"name\").required().minLength(5),**\n **validate(\"age\").****isInteger(),**\n        (req, resp) => {\n            **const validation = getValidationResults(req);**\n **const context = { ...req.body, validation,**\n **helpers: { pass }**\n **};**\n **if (validation.****valid) {**\n **context.nextage = Number.parseInt(req.body.age) + 1;**\n **}**\n **resp.render(\"age\", context);** \n        });\n}\n**const** **pass = (valid: any, propname: string, test: string ) => {**\n **let propResult = valid?.results?.[propname];**\n **return `display:${!propResult || propResult[test] ? \"none\" : \"block\" }`;**\n} \n```", "```js\n<div class=\"m-2\">\n   ** {{#if validation.valid }}**\n        <h4>Hello {{name}}. You will be {{nextage}} next year.</h4>\n    {{/if }}\n</div>\n<div>\n   ** <form id=\"age_form\" action=\"/form\" method=\"post\">**\n        <div class=\"m-2\">\n            <label class=\"form-label\">Name</label>\n            <input name=\"name\" class=\"form-control\" value=\"{{name}}\"/>\n            **<div class=\"****text-danger\" id=\"err_name_required\"**\n **style=\"{{ pass validation 'name' 'required' }}\">**\n **Please enter your name**\n **</div>**\n **<div class=\"****text-danger\" id=\"err_name_minLength\"**\n **style=\"{{ pass validation 'name' 'minLength' }}\">**\n **Enter at least 5 characters**\n **</div>**\n        </div>\n        <div class=\"m-2\">\n            <label class=\"form-label\">Current Age</label>\n            <input name=\"age\" class=\"form-control\" value=\"{{age}}\" />\n            **<div class****=\"text-danger\" id=\"err_age_isInteger\"**\n **style=\"{{ pass validation 'age' 'isInteger' }}\">**\n **Please enter your age in whole years**\n **</div>**\n        </div>\n        <div class=\"m-2\">\n            <button class=\"btn btn-primary\">Submit</button>\n        </div>\n    </form>\n</div> \n```", "```js\n...\nexport const validate = (propName: string) => {\n    const tests: Record<string, (val: string) => boolean> = {};\n    const handler = (req: Request, resp: Response, next: NextFunction ) => {\n        **const vreq = req as ValidatedRequest;**\n **if (!vreq.validation) {**\n **vreq.validation = { results: {}, valid: true };**\n **}**\n **vreq.****validation.results[propName] = { valid: true };**\n **Object.keys(tests).forEach(k => {**\n **let valid = vreq.validation****.results[propName][k]**\n **= tests[k](req.body?.[propName]);**\n **if (!valid) {**\n **vreq.validation.results[propName].valid = false;**\n **vreq.validation.valid = false****;**\n **}**\n **});**\n        next();\n    }\n    handler.required = () => {\n        tests.required = (val: string) => val?.trim().length > 0;\n        return handler;\n    };\n... \n```", "```js\nexport const validate = (propName, formdata) => {\n    const val = formdata.get(propName);\n    const results = { };\n\n    const validationChain = {\n        get propertyName() { return propName},\n        get results () { return results }\n    };\n    validationChain.required = () => {\n        results.required = val?.trim().length > 0;\n        return validationChain;\n    }\n    validationChain.minLength = (min) => {\n        results.minLength = val?.trim().length >= min;\n        return validationChain;\n    };\n    validationChain.isInteger = () => {\n        results.isInteger = /^[0-9]+$/.test(val);\n        return validationChain;\n    }\n    return validationChain;\n} \n```", "```js\nimport { validate } from \"./client_validation\";\ndocument.addEventListener('DOMContentLoaded', () => {\n    document.getElementById(\"age_form\").onsubmit = (ev => {\n        const data = new FormData(ev.target);\n        const nameValid = validate(\"name\", data)\n            .required()\n            .minLength(5);\n        const ageValid = validate(\"age\", data)\n            .isInteger();\n        const allValid = [nameValid, ageValid].flatMap(v_result =>\n            Object.entries(v_result.results).map(([test, valid]) => {\n                const e = document.getElementById(\n                        `err_${v_result.propertyName}_${test}`);\n                e.classList.add(\"bg-dark-subtle\");\n                e.style.display = valid ? \"none\" : \"block\";                      \n                return valid\n            })).every(v => v === true);\n        if (!allValid) {\n            ev.preventDefault();\n        }\n    });\n}); \n```", "```js\nnpm install validator@13.11.0\nnpm install --save-dev @types/validator@13.11.5 \n```", "```js\n**import validator from \"validator\";**\nexport const validate = (propName, formdata) => {\n    const val = formdata.get(propName);\n    const results = { };\n\n    const validationChain = {\n        get propertyName() { return propName},\n        get results () { return results }\n    };\n    validationChain.required = () => {\n        **results.required = !validator.isEmpty(val, { ignore_whitespace: true});**\n        return validationChain;\n    }\n    validationChain.minLength = (min) => {\n        **results.minLength = validator.isLength(val, { min});**\n        return validationChain;\n    };\n    validationChain.isInteger = () => {\n        **results.isInteger = validator.isInt(val);**\n return validationChain;\n    }\n    return validationChain;\n} \n```", "```js\nimport { NextFunction, Request, Response } from \"express\";\n**import validator from \"validator\";**\ntype ValidatedRequest = Request & {\n    validation: {\n        results:  { [key: string]: {\n            [key: string]: boolean, valid: boolean\n        } },\n        valid: boolean\n    }\n}\nexport const validate = (propName: string) => {\n    const tests: Record<string, (val: string) => boolean> = {};\n    const handler = (req: Request, resp: Response, next: NextFunction ) => {\n        const vreq = req as ValidatedRequest;\n        if (!vreq.validation) {\n            vreq.validation = { results: {}, valid: true };\n        }\n        vreq.validation.results[propName] = { valid: true };\n        Object.keys(tests).forEach(k => {\n            let valid = vreq.validation.results[propName][k]\n                = tests[k](req.body?.[propName]);\n            if (!valid) {\n                vreq.validation.results[propName].valid = false;\n                vreq.validation.valid = false;\n            }\n        });\n        next();\n    }\n    handler.required = () => {\n        **tests.required = (val: string) =>**\n **!validator.****isEmpty(val, { ignore_whitespace: true});**\n        return handler;\n    };\n    handler.minLength = (min: number) => {\n        **tests.minLength = (val:string) => validator.****isLength(val, { min});**\n        return handler;\n    };\n    handler.isInteger = () => {\n       ** tests.isInteger = (val: string) => validator.isInt(val);**\n        return handler;\n    }\n    return handler;\n}\nexport const getValidationResults = (req: Request) => {\n    return (req as ValidatedRequest).validation || { valid : true }\n} \n```"]