["```js\nexport function pickSmallestNumber(...numbers) {\n  if (numbers.length > 0) {\n    return numbers.reduce(\n      (currentMin, value) => Math.min(currentMin, value),\n      Number.MAX_VALUE);\n  }\n  return undefined;\n}\n```", "```js\ntest('check if undefined is returned for no input', () => {\n  const result = pickSmallestNumber();\n  assert(result === undefined);\n});\ntest('check if a single value is the smallest number',\n  () => {\n  const result = pickSmallestNumber(20);\n  assert(result === 20);\n});\ntest('check if 1 is smaller than 5', () => {\n  const result = pickSmallestNumber(5, 1);\n  assert(result === 1);\n});\ntest('check if -1 is smaller than 0 but larger than -5',\n  () => {\n  const result = pickSmallestNumber(-1, -5, 0);\n  assert(result === -5);\n});\n```", "```js\ntest('check if undefined is returned for no input', () => {\n  const result = pickSmallestNumber();\n  expect(result).to.be.undefined;\n});\ntest('check if a single value is the smallest number',\n  () => {\n  const result = pickSmallestNumber(20);\n  expect(result).to.equal(20);\n});\n```", "```js\n$ npm install jest --save-dev\n```", "```js\n$ npx jest\n```", "```js\n$ npx jest --init\n\nThe following questions will help Jest to create a suitable configuration for your project\n\n Would you like to use Jest when running \"test\" script in \"package.json\"? … yes\n\n Would you like to use Typescript for the configuration file? … no\n\n Choose the test environment that will be used for testing › jsdom (browser-like)\n\n Do you want Jest to add coverage reports? … no\n\n Which provider should be used to instrument code for coverage? › v8\n\n Automatically clear mock calls, instances, contexts and results before every test? … yes\n\n  Modified /home/node/example/Chapter07/package.json\n\n  Configuration file created at /home/node/example/Chapter07/jest.config.js\n```", "```js\nmodule.exports = {\n  clearMocks: true,\n  coverageProvider: \"v8\",\n  testEnvironment: \"jsdom\",\n};\n```", "```js\n$ npm install jest-environment-jsdom --save-dev\n```", "```js\n$ npm install babel-jest @babel/core @babel/preset-env --save-dev\n```", "```js\nmodule.exports = {\n  // as beforehand\n  \"transform\": {\n    \"\\\\.js$\": \"babel-jest\",\n  },\n};\n```", "```js\n{\n  \"presets\": [\"@babel/preset-env\"]\n}\n```", "```js\nimport { pickSmallestNumber } from \"./pure\";\nit(\"check if undefined is returned for no input\", () => {\n  const result = pickSmallestNumber();\n  expect(result).toBeUndefined();\n});\nit(\"check if a single value is the smallest number\", () => {\n  const result = pickSmallestNumber(20);\n  expect(result).toBe(20);\n});\nit(\"check if 1 is smaller than 5\", () => {\n  const result = pickSmallestNumber(5, 1);\n  expect(result).toBe(1);\n});\nit(\"check if -1 is smaller than 0 but larger than -5\",\n  () => {\n  const result = pickSmallestNumber(-1, -5, 0);\n  expect(result).toBe(-1);\n});\n```", "```js\n$ npm run test\n\n> Chapter07@1.0.0 test /home/node/example/Chapter07\n\n> jest\n\n PASS  src/pure.test.js\n\n   check if undefined is returned for no input (2 ms)\n\n   check if a single value is the smallest number (1 ms)\n\n   check if 1 is smaller than 5\n\n   check if -1 is smaller than 0 but larger than -5\n\nTest Suites: 1 passed, 1 total\n\nTests:       4 passed, 4 total\n\nSnapshots:   0 total\n\nTime:        0.818 s, estimated 1 s\n\nRan all test suites.\n```", "```js\n$ npm install mocha --save-dev\n```", "```js\n$ npx mocha\n```", "```js\n$ npm install --save-dev @babel/register @babel/core @babel/preset-env\n```", "```js\nmodule.exports = {\n  require: \"@babel/register\",\n};\n```", "```js\nimport { equal } from \"assert\";\nimport { pickSmallestNumber } from \"../src/pure\";\nit(\"check if undefined is returned for no input\", () => {\n  const result = pickSmallestNumber();\n  equal(result, undefined);\n});\nit(\"check if a single value is the smallest number\", () => {\n  const result = pickSmallestNumber(20);\n  equal(result, 20);\n});\nit(\"check if 1 is smaller than 5\", () => {\n  const result = pickSmallestNumber(5, 1);\n  equal(result, 1);\n});\nit(\"check if -1 is smaller than 0 but larger than -5\",\n  () => {\n  const result = pickSmallestNumber(-1, -5, 0);\n  equal(result, -5);\n});\n```", "```js\n$ npm run test\n\n> example02@1.0.0 test /home/node/example/Chapter07/example02\n\n> mocha\n\n   check if undefined is returned for no input\n\n   check if a single value is the smallest number\n\n   check if 1 is smaller than 5\n\n   check if -1 is smaller than 0 but larger than -5\n\n  4 passing (3ms)\n```", "```js\n$ npm install ava --save-dev\n```", "```js\n$ npx ava\n```", "```js\n{\n  // like beforehand\n  \"type\": \"module\",\n  // ...\n}\n```", "```js\nimport test from 'ava';\nimport { pickSmallestNumber } from \"./pure.js\";\ntest(\"check if undefined is returned for no input\", (t) => {\n  const result = pickSmallestNumber();\n  t.is(result, undefined);\n});\ntest(\"check if a single value is the smallest number\",\n  (t) => {\n  const result = pickSmallestNumber(20);\n  t.is(result, 20);\n});\ntest(\"check if 1 is smaller than 5\", (t) => {\n  const result = pickSmallestNumber(5, 1);\n  t.is(result, 1);\n});\ntest(\"check if -1 is smaller than 0 but larger than -5\",\n  (t) => {\n  const result = pickSmallestNumber(-1, -5, 0);\n  t.is(result, -5);\n});\n```", "```js\n$ npm run test\n\n> example03@1.0.0 test /Users/node/example/Chapter07/example03\n\n> ava\n\n   check if undefined is returned for no input\n\n   check if a single value is the smallest number\n\n   check if 1 is smaller than 5\n\n   check if -1 is smaller than 0 but larger than -5\n\n  ─\n\n  4 tests passed\n```", "```js\n$ npm install playwright --save-dev\n```", "```js\n$ npm install @playwright/test --save-dev\n```", "```js\n$ npx playwright test\n```", "```js\nimport { test, expect } from '@playwright/test';\ntest('homepage has micro frontends in the title and in an\n  h1', async ({ page }) => {\n  await page.goto('https://microfrontends.art/');\n  // Expect the title \"to contain\" a substring.\n  await expect(page).toHaveTitle(/Micro Frontends/);\n  // Grab an element (\"h1\")\n  const h1 = page.locator('h1');\n  // Expect the element to have a specific text\n  await expect(h1)\n    .toHaveText('The Art of Micro Frontends');\n});\n```", "```js\n$ npm run test\n\n> example04@1.0.0 test /Users/node/example/Chapter07/example04\n\n> playwright test\n\nRunning 1 test using 1 worker\n\n    1 tests/mf.test.ts:3:1 › homepage has Playwright in title and get started link linking to the intro page (491ms)\n\n  1 passed (5s)\n```", "```js\n$ npm install cypress --save-dev\n```", "```js\n$ npx cypress open\n```", "```js\ndescribe(\"empty spec\", () => {\n  it(\"passes\", () => {\n    cy.visit(\"https://microfrontends.art\");\n    // Expect the title \"to contain\" a substring.\n    cy.title().should(\"contain\", \"Micro Frontends\");\n    // Expect the h1 element to have a specific text.\n    cy.get(\"h1\").should(\"have.text\",\n      \"The Art of Micro Frontends\")\n  });\n});\n```", "```js\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"es5\", \"dom\"],\n    \"types\": [\"cypress\", \"node\"]\n  },\n  \"include\": [\"**/*.ts\"]\n}\n```", "```js\n$ npx cypress run\n```"]