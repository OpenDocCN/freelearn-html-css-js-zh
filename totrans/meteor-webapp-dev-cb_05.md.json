["```js\n$ meteor create --example todos\n\n```", "```js\n$ cd todos\n$ meteor\n\n```", "```js\n    $ npm install -g ddp-analyzer\n\n    ```", "```js\n    $ ddp-analyzer-proxy\n\n    ```", "```js\n    DDP Proxy Started on port: 3030\n    ===============================\n    Export following env. variables and start your meteor app\n     export DDP_DEFAULT_CONNECTION_URL=http://localhost:3030\n     meteor\n\n    ```", "```js\n    $ export DDP_DEFAULT_CONNECTION_URL=http://localhost:3030\n    $ meteor\n\n    ```", "```js\n$ export DDP_DEFAULT_CONNECTION_URL=http://localhost:3000\n\n```", "```js\n$ meteor remove autopublish\n\n```", "```js\n$ meteor add twbs:bootstrap\n\n```", "```js\n<head>\n    <title>Chapter 05</title>\n</head>\n<body>\n    {{> urls}}\n</body>\n<template name=\"urls\">\n    <div class=\"url-container\">\n      {{#each bookmarks}}\n      <div class=\"bookmark panel {{selected}}\">\n        <div class=\"panel-heading\">\n          <button type=\"button\" class=\"close\"><span class=\"glyphicon glyphicon-remove\"></span>\n          </button>\n          {{#if editing}}\n            <h3 class=\"panel-title\"><input type=\"text\" value=\"{{title}}\"></h3>\n          {{else}}\n          <h3 class=\"panel-title\"> {{title}}</h3>\n            {{/if}}\n        </div>\n        <div class=\"panel-body\">\n          {{#if src}}\n            <a href=\"{{src}}\">{{src}}</a>\n          {{else}}\n            <div class=\"input-group\">\n              <input type=\"text\" class=\"form-control\" placeholder=\"enter URL here\" />\n            </div>\n          {{/if}}\n        </div>\n      </div>\n      {{/each}}\n      <input type=\"button\" class=\"btn btn-primary\" id=\"btnNewBM\" value=\"add\" />\n    </div>\n</template>\n```", "```js\nMeteor.subscribe('urls');\n```", "```js\nTemplate.urls.helpers({ bookmarks: function () { return URLs.find();\n    },\n    title: function () { return this.title || this.src;\n    },\n    editing: function () { return Session.equals('selMark', this._id) && Session.equals('editMark', this._id);\n    },\n    selected: function () { return Session.equals('selMark', this._id) ? \"panel-warning\" : \"panel-success\";\n    },\n    src: function () { return this.src || false;\n    }\n});\n```", "```js\nTemplate.urls.events({\n    'click .bookmark': function (e) {\n        Session.set('selMark', this._id);\n    },\n    'dblclick .bookmark': function (e) {\n        Session.set('editMark', this._id);\n    },\n    'blur .panel-title > input': function (e) {\n        if (e.currentTarget.value !== this.title) {\n            Meteor.call('updateTitle', this._id, e.currentTarget.value, function (err, succ) {\n                console.log(succ);\n            });\n        }\n        Session.set('editMark', null);\n    },\n    'keypress .panel-title > input': function (e) {\n        if (e.keyCode == 13 && e.currentTarget.value !== this.title) {\n            Meteor.call('updateTitle', this._id, e.currentTarget.value, function (err, succ) {\n                console.log(succ);\n                Session.set('editMark', null);\n            });\n        }\n    },\n    'click #btnNewBM': function (e) {\n        URLs.insert({\n            title: 'new bookmark'\n        });\n    },\n    'blur .input-group > input': function (e) {\n        if (e.currentTarget.value !== this.src) {\n            Meteor.call('updateSRC', this._id, e.currentTarget.value, function (err, succ) {\n                console.log(succ);\n            });\n        }\n    },\n    'keypress .input-group > input': function (e) {\n        if (e.keyCode == 13 && e.currentTarget.value !== this.src) {\n            Meteor.call('updateSRC', this._id, e.currentTarget.value, function (err, succ) {\n                console.log(succ);\n            });\n        }\n    },\n    'click .close': function (e) {\n        Meteor.call('removeBM', this._id, function (err, succ) {\n\n        });\n    }\n});\n```", "```js\n/* CSS declarations go here */\nbody {\n    font-size:1.5rem;\n}\n\n.url-container{\n    background-color: rgb(255, 255, 255);\n    border-color: rgb(221, 221, 221);\n    border-width: 1px;\n    border-radius: 4px 4px 0 0;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n    position: relative;\n    padding: 45px 15px 15px;\n    margin: 20px;\n    margin-left:auto;\n    margin-right:auto;\n    max-width: 90%;\n    border-style:solid;\n}\n\n.input-group {\n    width:90%;\n}\n```", "```js\nURLs = new Mongo.Collection(\"urls\");\n\nif (typeof String.prototype.startsWith != 'function') {\n    String.prototype.startsWith = function (str){\n        return this.slice(0, str.length) == str;\n    };\n}\n```", "```js\n    Meteor.publish('urls',function(){\n       return URLs.find();\n    });\n\n    Meteor.methods({\n        updateTitle: function(id,title){\n            var bmark = URLs.findOne(id);\n            if (!bmark) return;\n            if (title&& title!==bmark.title){\n                URLs.update(id,{$set:{title:title}});\n\n            return \"updated\";\n            }\n            return \"same title\";\n        },\n        updateSRC: function(id,src){\n            var bmark = URLs.findOne(id);\n            if (!bmark) return;\n            if (src&& src!==bmark.src){\n\n                //Adding the http if it doesn't already have it...\n                src = src.startsWith('http')? src: 'http://'+src;\n                URLs.update(id,{$set:{src:src}});\n\n                return \"updated\";\n            }\n            return \"same src\";\n        },\n        removeBM: function(id){\n            URLs.remove(id);\n            return \"removed\";\n        }\n    });\n```", "```js\n    BMCounts = new Mongo.Collection(\"bmcounts\");\n    Meteor.subscribe('urls');\n    Meteor.subscribe('bmcounts', new Mongo.ObjectID());\n\n    ```", "```js\n    Template.linkcount.helpers({\n        BMCount: function(){\n            return BMCounts.findOne();\n        }\n    });\n    ```", "```js\n    <body>\n        {{> urls}}\n     {{> linkcou\n    nt}}\n    </body>\n    <template name=\"linkcount\">\n     {{#with BMCount}}\n     <div id=\"counts\">\n     <button class=\"btn btn-lg btn-info\">\n     <span class=\"glyphicon glyphicon-link\"></span>\n     {{unsecureCount}} /\n     <span class=\"glyphicon glyphicon-lock\"></span>\n     {{secureCount}}\n     </button>\n     </div>\n     {{/with}}\n    </template>\n\n    ```", "```js\n    #counts{\n        position:relative;\n        float:right;\n        margin-right:50px;\n    }\n    ```", "```js\n    Meteor.publish('bmcounts', function (id) {\n      var self = this;\n      var count = 0;\n      var secCount = 0;\n      var initializing = true;\n      var handle = URLs.find().observeChanges({\n        //TODO: Added\n        //TODO: Removed\n        //TODO: Changed\n      });\n      initializing = false;\n      self.added(\"bmcounts\", id, {\n        unsecureCount: count,\n        secureCount: secCount\n      });\n      self.ready();\n      self.onStop(function () {\n        handle.stop();\n      });\n    });\n    ```", "```js\n    //TODO: Added\n    added: function (idx, doc) {\n     if (doc.src && doc.src.toLowerCase().startsWith('https')) {\n     secCount++;\n     if (!initializing)\n     self.changed(\"bmcounts\", id, {\n     secureCount: secCount\n     });\n     } else {\n     count++;\n     if (!initializing)\n     self.changed(\"bmcounts\", id, {\n     unsecureCount: count\n     });\n     }\n    },\n\n    ```", "```js\n    //TODO: Removed\n    removed: function (idx, doc) {\n     //really inefficient...\n     var bms = URLs.find().fetch();\n     secCount = _.filter(bms,function(bm){\n     return bm.src && bm.src.toLowerCase().startsWith('https');\n     }).length;\n     count = bms.length - secCount;\n     self.changed(\"bmcounts\", id, {\n     unsecureCount: count,\n     secureCount: secCount\n     });\n\n     },\n\n    ```", "```js\n    //TODO: Changed\n    changed: function (idx, doc) {\n     if (doc.src && doc.src.toLowerCase().startsWith('https')) {\n     secCount++;\n     count--;\n     self.changed(\"bmcounts\", id, {\n     unsecureCount: count,\n     secureCount: secCount\n     });\n     }\n    }\n\n    ```", "```js\nMeteor.publish('bmcounts', function (id) {\n...\n});\n```", "```js\nvar handle = URLs.find().observeChanges({\n  ...\n});\n```", "```js\nself.changed(\"bmcounts\", id, {\n  ...\n});\n```", "```js\nTemplate.urls.helpers({\n    …\n    selected: function () {\n        return Session.equals('selMark', this._id) ? \"panel-warning\" : this.secType;\n    },\n    …\n```", "```js\n$ meteor create typecheck\n$ cd typecheck\n$ meteor remove autopublish\n$ meteor --port 3030\n\n```", "```js\n    if (typeof String.prototype.startsWith != 'function') { String.prototype.startsWith = function (str){return this.slice(0, str.length) == str;\n        };\n    }\n    ```", "```js\n    conn = DDP.connect(\"http://localhost:3000\");\n    URLs = new Mongo.Collection(\"urls\",conn);\n    conn.subscribe(\"urls\");\n    ```", "```js\n    function checkSecType(idx,doc){ if (!doc.src || doc.secType) return;\n        if (doc.src.toLowerCase().startsWith('https'))\n            doc.secType = 'panel-success';\n        else\n            doc.secType = 'panel-danger';\n        URLs.update(idx,doc);\n    }\n    ```", "```js\n    URLs.find().observeChanges({ added:checkSecType, changed:checkSecType });\n    ```", "```js\nconn = DDP.connect(\"http://localhost:3000\");\nURLs = new Mongo.Collection(\"urls\",conn);\n```", "```js\n$ npm -g install ddp\n\n```", "```js\n$ sudo npm –g install ...\n\n```", "```js\n    $ mkdir nodecheck\n    $ cd nodecheck\n    $ npm install ddp\n\n    ```", "```js\n    var DDPClient = require(\"ddp\");\n\n    var ddpclient = new DDPClient({\n        host: \"localhost\",\n        port: 3000,\n        path: \"websocket\",\n        ssl: false,\n        autoReconnect: true,\n        autoReconnectTimer: 500,\n        maintainCollections: true,\n        ddpVersion: '1'\n    });\n    ```", "```js\n    ddpclient.connect(function (error) {\n        if (error) {\n            console.log(error);\n        } else console.log('successful connection');\n\n        ddpclient.subscribe('urls', [], function () {\n            var urls = Object.keys(ddpclient.collections.urls);\n            console.log(urls);\n        })\n    });\n    ```", "```js\n    ddpclient.on('message', function (msg) {\n        var message = ddpclient.EJSON.parse(msg);\n        switch (message.msg) {\n        case \"added\":\n        case \"changed\":\n            var url = message.fields.src;\n            if (url) {\n                if (!url.startsWith('https')) {\n                    message.fields.src = url.replace('http:', 'https:');\n                    ddpclient.call('updateSRC', [message.id, message.fields.src], function (err, success) { if (!err) console.log(success);\n                        })\n                }\n            }\n            break;\n        default:\n            break;\n        }\n    });\n    if (typeof String.prototype.startsWith != 'function') {\n        String.prototype.startsWith = function (str) {\n            return this.slice(0, str.length) == str;\n        };\n    }\n    ```", "```js\n    $ node main.js\n\n    ```", "```js\nvar ddpclient = new DDPClient({\n  host: \"localhost\",\n  port: 3000,\n  ...\n});\nddpclient.connect(function (error) {\n  ...\n  ddpclient.subscribe('urls', ... );\n  ...\n});\nddpclient.on('message', function (msg) {\n  ...\n});\n```", "```js\nddpclient.call('updateSRC', ... );\n```"]