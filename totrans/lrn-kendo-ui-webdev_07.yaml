- en: Chapter 7. Implementing PanelBar and TabStrip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The PanelBar and TabStrip widgets are special Kendo UI controls for organization
    data, which make it possible for a web page to contain a large amount of content
    but display only one piece of that content at a time. These content sections are
    broken up into panels with the PanelBar widget, or into tabs with the TabStrip
    widget. In both cases, the effect is very similar and is a very useful way of
    keeping a web page from becoming too cluttered. This chapter will explain the
    basics of implementing the PanelBar and TabStrip controls with both HTML and ASP.NET
    MVC, and then illustrate the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding images to PanelBar and TabStrip items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding URLs to PanelBar and TabStrip items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading AJAX content with PanelBar and TabStrip
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling PanelBar and TabStrip animation effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PanelBar basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The PanelBar widget is the Kendo UI way of implementing an interactive JavaScript
    "accordion" on a web page. This type of control is very useful for displaying
    lists of data that could potentially take up a large amount of screen space, but
    compressing it into a format that still makes sense to users. As an introduction,
    here is a code sample of a basic PanelBar created from a static unordered HTML
    list. This HTML list will be reformatted into an accordion control that displays
    a single area of the list at a time. As you will see, when you run the code sample,
    this allows a large amount of data to be visually compressed into a smaller space.
    It also allows the user to select which area of the list he or she is interested
    in viewing and hides the details of the other sections. This gives a powerful
    demonstration of some of the commonality between Kendo widget implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that I have used the same data as in the last chapter for the Menu control.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This source code creates a PanelBar with the same data from the Menu in the
    last chapter. The top-level `<li>` elements in the unordered list all appear as
    actual accordion headings in the output. In this example, just as in the menu
    example, they are **Music**, **Videos**, **Events**, and **News**. Notice that
    each of these top-level elements contains its own name and then can optionally
    contain a nested unordered list (`<ul>`) within itself which becomes the choices
    that appear when that top-level item is selected on the page. Moving down the
    chain, each of the `<li>` elements in the nested list can also contain its own
    `<ul>` list for a further nested menu of options, which is impressive as not all
    accordion implementations can handle this level of nested data. This creates a
    cascading effect where menu options can continue to expand as you move your mouse
    to different options. Also note that the final top-level `<li>` item, `News`,
    is marked with a `disabled` attribute which means that it will still display in
    the output but not be selectable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output from this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PanelBar basics](img/4346OT_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Videos** panel was clicked before this screenshot was taken so that you
    can see some of the data opened, it normally starts with all of the panels closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just as before with the Menu widget, the PanelBar widget does not have to run
    from static HTML, it can be fuelled by a `DataSource` object of either local or
    remote data. Here is the code adapted to use a datasource instead of static HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `DataSource` object can be configured with all the options that
    you have seen in earlier chapters and could just as easily be configured with
    a transport property for remote data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this code sample, we have also implemented a new feature, the `imageUrl`
    property for the **Videos** tab. By specifying the URL of an image in the project,
    the output will show this image next to the tab''s title on the screen, which
    you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PanelBar basics](img/4346OT_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To adapt this to use the MVC extension methods, you would create an MVC View
    with this source code in the `cshtml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note, how in this code sample, we have declared the data statically. It could
    just as easily be gathered from a different source using logic within C# code,
    or even left as part of the JavaScript and retrieved from a remote source across
    HTTP. We can also see here how the image is supplied through ASP.NET MVC syntax
    instead of through the JavaScript in the last example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output, as you can see from this screenshot, is identical to the other
    two code samples:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PanelBar basics](img/4346OT_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This illustrates three unique ways to create a Kendo UI PanelBar widget, just
    like the Menu widget from before, and the differences between them.
  prefs: []
  type: TYPE_NORMAL
- en: Adding sprite images to PanelBar items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already seen some examples of how the PanelBar widget can contain an
    `imageUrl` property to display an image next to a section title. It can also use
    a more advanced image option by specifying a sprite image through the `spriteCssClass`
    property. In either case, the image or sprite will appear as an icon to the left
    of the menu item text.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have already partially seen, here is an example of using the `imageUrl`
    property to show an icon for the `Videos` menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'By adding this property, the output now displays the image in the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding sprite images to PanelBar items](img/4346OT_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is how the code sample looks when using MVC syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Notice the `ImageUrl` extension method that adds the image to the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a sprite, you would first set the background image of the menu items
    that should display the icons and then indicate a CSS class using the `spriteCssClass`
    property that will specify the pixel offset for each particular icon. Each menu
    item that has a `spriteCssClass` property specified will automatically be decorated
    with the `k-sprite` CSS class so that this is wired up properly. Here is a potential
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The CSS section of this sample shows assigning the `background-image` property
    for all of the `k-sprite` class-decorated elements and also designating two sprite
    pixel `background-position` styles. The script section shows the `spriteCssClass`
    property in use which will assign that portion of the sprite's image as the icon
    for that menu item.
  prefs: []
  type: TYPE_NORMAL
- en: Adding URLs to PanelBar items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far all of the examples we have seen are PanelBar items that do not perform
    any actions when selected. All that we have to do is add the `url` property to
    the PanelBar item in order to make it navigate when clicked on. So, for any PanelBar
    item where we want to navigate the user to a different page, include a `url` property
    and it will do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Loading AJAX content with PanelBar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of embedding all of the content into one page, a PanelBar widget can
    be used to load content from other URLs dynamically using AJAX. This will reduce
    the overall size of the page since only one section of the PanelBar will be loaded
    at a time. It can also allow you to load content from other locations in your
    site that may change independently of the site that contains your PanelBar, which
    can reduce duplicate text or markup. To enable this functionality, use the `contentUrls`
    property of the PanelBar to indicate which sites contain the markup that should
    be placed inside the accordion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Secondly, we have to create placeholders in the HTML markup to indicate where
    this AJAX content will appear once it has loaded. All this requires is a structure
    like the following code with `<li>` elements that contain empty `<div>` elements
    which will receive the AJAX content at the appropriate time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With this combination of markup and JavaScript code, the PanelBar will load
    `content1` for the first tab, `content2` for the second tab, and so on. It is
    a good idea to keep the content on these pages very simple so that it can fit
    into the PanelBar areas without being distorted.
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading AJAX content with PanelBar](img/4346OT_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controlling PanelBar animation effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The animation features of the PanelBar can be controlled through the animation
    property when configuring the PanelBar object in JavaScript. The `animation` property
    can be set to `false` to completely disable all animation effects, or it can be
    configured like the following code sample for specific behaviors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The only available animation effect for the collapse action is `fadeOut`. For
    the `expand` action, you can choose `expandVertical`, which is the normal action
    for expanding a PanelBar, and `fadeIn` which changes the opacity as it expands.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the TabStrip widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The TabStrip widget is very similar to the PanelBar widget. In fact, they perform
    nearly the same function except that the PanelBar Widget organizes content into
    panels that are stacked vertically while the TabStrip widget organizes content
    into panels that are stacked horizontally. They are so similar, in fact, that
    we will use nearly the same code to demonstrate both of them. You have already
    seen the PanelBar widget in the preceding sections. Now we will take a look at
    the TabStrip widget and see how it functions within web pages.
  prefs: []
  type: TYPE_NORMAL
- en: TabStrip basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The TabStrip widget creates a series of tabs that are used to show only one
    specific section of content at a time. The content within a tab can be almost
    anything, ranging from simple text and markup all the way up to large `<div>`
    sections with enough content to fill an entire web page. You have surely seen
    web pages that have tabs across the top of the screen to organize different types
    of material onto a single web page. The Kendo TabStrip widget is one way to create
    this effect on your own pages. To start, copy the following code into a new HTML
    page and run it in a web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'For this widget, the markup is required to follow a specific pattern. The TabStrip
    itself must be declared on a `<div>` element that contains an unordered list (`<li>`)
    and a collection of `<div>` elements right after the unordered list. This is all
    evident in the preceding code sample. The unordered list contains all of the tab
    titles. The collection of `<div>` elements contains all of the content that appears
    within each of the tabs in the same order they appear in the markup. This is how
    this particular example appears when run inside of a web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![TabStrip basics](img/4346OT_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using TabStrip with a datasource
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Much like the PanelBar, the TabStrip can be configured to use a datasource
    instead of being created on top of existing HTML markup already on a web page.
    To adapt the code sample from the last section into this pattern, replace the
    body of the page with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output from this code is exactly the same as before, except that the **News**
    tab is not disabled since there is not a property to define a disabled element
    using a datasource:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using TabStrip with a datasource](img/4346OT_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding images to the TabStrip widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All of the TabStrip tabs so far have only included text. The TabStrip widget,
    however (just like the PanelBar widget), can also contain an `imageUrl` property
    to display an image next to a tab''s title. It can also use a more advanced image
    option by specifying a sprite image through the `spriteCssClass` property. In
    either case, the image or sprite will appear as an icon to the left of the tab''s
    title text. Here is an example of using the `imageUrl` property to show an icon
    for the `Videos` menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'By adding this property, the output now displays the image in the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding images to the TabStrip widget](img/4346OT_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is how the same code sample looks when using MVC syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You should be able to notice quite a few similarities to the code we used earlier
    for the PanelBar widget. To use a sprite with the TabStrip, you can follow the
    same procedures as we discussed for the PanelBar.
  prefs: []
  type: TYPE_NORMAL
- en: Adding URLs to TabStrip tabs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use a TabStrip tab as a hyperlink to another page, you can configure the
    `url` property for that tab and it will take on this role. By doing this, we are
    no longer using the tab to show any content on the page, it simply navigates directly
    to another web page when it is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: After altering the code in this way, the `News` tab will become a hyperlink
    instead of an actual tab to display content.
  prefs: []
  type: TYPE_NORMAL
- en: Loading AJAX content with TabStrip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load AJAX content into a tab, we need to indicate the URL for each tab''s
    content in the configuration. This follows the same pattern as the other options
    within the TabStrip, so this should look very familiar to you by now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the web page in a browser, it appears like this with the remote
    content loaded dynamically as we click on the tab''s titles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading AJAX content with TabStrip](img/4346OT_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Controlling the TabSrip widget's animation effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The animation effects for the TabStrip widget are exactly the same as for the
    PanelBar widget. They are controlled through the `animation` property when configuring
    the TabStrip object in JavaScript. The `animation` property can be set to `false`
    to completely disable all animation effects, or it can be configured like the
    following code sample for specific behaviors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The only available animation effect for the collapse action is `fadeOut`. For
    the `expand` action, you can choose `expand:vertical`, which is the normal action
    for expanding a TabStrip, and `fadeIn` which changes the opacity as it expands.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PanelBar widget is a highly configurable JavaScript accordion widget that
    gives you considerable "bang for your buck". For a categorized list of data elements
    that you need to compress into a smaller amount of screen space, the PanelBar
    widget is the perfect choice for your web page. The TabStrip widget is an easy
    JavaScript tab framework that allows you to organize your page content with tabs
    and even load remote content dynamically onto your page when a tab is clicked.
    Both of these great widgets should add useful features to your website.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about the Kendo UI Slider widgets and how
    to use them to collect input from users in a graphically interesting way. The
    slider widgets present an HTML input as a visual bar where the user can drag a
    handle to the desired option instead of typing a number into a field in a form.
  prefs: []
  type: TYPE_NORMAL
