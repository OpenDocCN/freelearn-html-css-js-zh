["```js\ngetData().then(data => {\n  // do something with the data\n});\n```", "```js\nlet myData;\ngetData().then(data => {\n  myData = data\n});\nconsole.log(myData);\n```", "```js\nconst myData = await getData();\nconsole.log(myData);\n```", "```js\nimport { promises } from \"fs\";\npromises.readFile('text.txt').then(file => console.log(file.toString()));\n```", "```js\nimport { promises } from \"fs\";\nconst text = (await promises.readFile('text.txt')).toString();\nconsole.log(text);\n```", "```js\n    npm install\n    ```", "```js\n    World!\n    Hello\n    ```", "```js\n    {\n      \"compilerOptions\": {\n        \"target\": \"es5\",\n        \"module\": \"commonjs\",\n        \"strict\": true,\n        \"esModuleInterop\": true,\n        \"skipLibCheck\": true,\n        \"forceConsistentCasingInFileNames\": true\n      }\n    }\n    ```", "```js\n    npx tsc\n    ```", "```js\n    \"use strict\";\n    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n        return new (P || (P = Promise))(function (resolve, reject) {\n    //….\n    sayHello();\n    console.log('World!');\n    ```", "```js\n    {\n      \"compilerOptions\": {\n        \"target\": \"es6\",\n        \"module\": \"commonjs\",\n        \"strict\": true,\n        \"esModuleInterop\": true,\n        \"skipLibCheck\": true,\n        \"forceConsistentCasingInFileNames\": true\n      }\n    }\n    ```", "```js\n    \"use strict\";\n    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n        return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n    };\n    const sayHello = () => __awaiter(void 0, void 0, void 0, function* () {\n        yield new Promise((resolve) => setTimeout(() => resolve(console.log('Hello')), 1));\n    });\n    sayHello();\n    console.log('World!');\n    ```", "```js\n    \"use strict\";\n    const sayHello = async () => {\n        await new Promise((resolve) => setTimeout(() => resolve(console.log('Hello')), 1));\n    };\n    sayHello();\n    console.log('World!');\n    ```", "```js\n    npx tsc\n    target.ts:1:18 - error TS2705: An async function or method in ES5/ES3 requires the 'Promise' constructor.  Make sure you have a declaration for the 'Promise' constructor or include 'ES2015' in your `--lib` option.\n    1 const sayHello = async () => {\n                       ~~~~~~~~~~~~~\n    target.ts:2:13 - error TS2693: 'Promise' only refers to a type, but is being used as a value here.\n    2   await new Promise((resolve) =>\n                  ~~~~~~~\n    target.ts:2:22 - error TS7006: Parameter 'resolve' implicitly has an 'any' type.\n    2   await new Promise((resolve) =>\n    ```", "```js\n    % npx tsc\n    target.ts:3:30 - error TS2345: Argument of type 'void' is not assignable to parameter of type '{} | PromiseLike<{}> | undefined'.\n    3     setTimeout(() => resolve(console.log('Hello')))\n    ```", "```js\nfunction addAsync(num1: number, num2: number) {\n  return num1 + num2;\n}\n```", "```js\nconst addAsync = async (num1: number, num2: number) => num1 + num2;\n```", "```js\n    export const fn = async () => {\n      return 'A Promise';\n    };\n    const result = fn();\n    console.log(result);\n    ```", "```js\n    npx ts-node async.ts\n    Promise { 'A Promise' }\n    ```", "```js\n    npx ts-node async.ts\n    A Promise\n    ```", "```js\n    export const fn = () => {\n      return Promise.resolve('A Promise');\n    };\n    const result = fn();\n    console.log(result);\n    ```", "```js\n    npx ts-node async.ts\n    Promise { 'A Promise' }\n    ```", "```js\n    export const fn = async () => {\n      return 'A Promise';\n    };\n    const result = fn();\n    result.then((message) => console.log(message));\n    ```", "```js\n    A Promise\n    ```", "```js\nasyncFunc().then(result => {\n  // do something with the result\n});\n```", "```js\nasyncFuncOne().then(resultOne => {\n  asyncFuncTwo(resultOne).then(resultTwo => {\n    asyncFuncThree(resultTwo).then(resultThree => {\n      // do something with resultThree\n    });\n  });\n});\n```", "```js\nconst resultOne = await asyncFuncOne();\nconst resultTwo = await asyncFuncTwo(resultOne);\nconst resultThree = await asyncFuncThree(resultTwo);\n// do something with resultThree\n```", "```js\n    export const fn = async () => {\n      return 'A Promise';\n    };\n    const resolveIt = async () => {\n      const result = await fn();\n      console.log(result);\n    };\n    resolveIt();\n    ```", "```js\n    A Promise\n    ```", "```js\n    export const resolveIt = async () => {\n      const result = await Promise.resolve('A Promise');\n      console.log(result);\n    };\n    resolveIt();\n    ```", "```js\n    A Promise\n    ```", "```js\n    export const resolveIt = async () => {\n      const p = new Promise((resolve) => resolve('A Promise'));\n      const result = await p;\n      console.log(result);\n    };\n    resolveIt();\n    ```", "```js\n    A Promise\n    ```", "```js\ntry {\n  await someAsync();\n} catch (e) {\n  console.error(e);\n}\n```", "```js\ntry {\n  await someAsync();\n  await anotherAsync();\n  await oneMoreAsync();\n} catch (e) {\n  console.error(e);\n}\n```", "```js\ntry {\n  await someAsync();\n  try {\n    await anotherAsync();\n  } catch (e) {\n    // specific handling of this error\n  }\n  await oneMoreAsync();\n} catch (e) {\n  console.error(e);\n}\n```", "```js\ntry {\n  await someAsync();\n  await anotherAsync();\n  await oneMoreAsync();\n} catch (e) {\n  if(e instanceOf MyCustomError) {\n    // some custom handling\n  } else {\n    console.error(e);\n  }\n}\n```", "```js\n    export const errorFn = async () => {\n      throw new Error('An error has occurred!');\n    };\n    const asyncFn = async () => {\n      await errorFn();\n    };\n    asyncFn();\n    ```", "```js\n    (node:29053) UnhandledPromiseRejectionWarning: Error: An error has occurred!\n        at Object.exports.errorFn (/workshop/async-chapter/src/error.ts:2:9)\n        at asyncFn (/workshop/async-chapter/src/error.ts:6:9)\n        at Object.<anonymous> (/workshop/async-chapter/src/error.ts:9:1)\n        at Module._compile (internal/modules/cjs/loader.js:1138:30)\n        at Module.m._compile (/workshop/async-chapter/node_modules/ts-node/src/index.ts:858:23)\n        at Module._extensions..js (internal/modules/cjs/loader.js:1158:10)\n        at Object.require.extensions.<computed> [as .ts] (/workshop/async-chapter/node_modules/ts-node/src/index.ts:861:12)\n        at Module.load (internal/modules/cjs/loader.js:986:32)\n        at Function.Module._load (internal/modules/cjs/loader.js:879:14)\n        at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12)\n    (node:29053) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). To terminate the node process on unhandled promise rejection, use the CLI flag `--unhandled-rejections=strict` (see https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode). (rejection id: 2)\n    (node:29053) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\n    ```", "```js\n    export const errorFn = async () => {\n      throw new Error('An error has occurred!');\n    };\n    const asyncFn = async () => {\n      try {\n        await errorFn();\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    asyncFn();\n    ```", "```js\n    Error: An error has occurred!\n        at Object.exports.errorFn (/workshop/async-chapter/src/error.ts:2:9)\n        at asyncFn (/workshop/async-chapter/src/error.ts:7:11)\n        at Object.<anonymous> (/workshop/async-chapter/src/error.ts:13:1)\n        at Module._compile (internal/modules/cjs/loader.js:1138:30)\n        at Module.m._compile (/workshop/node_modules/ts-node/src/index.ts:858:23)\n        at Module._extensions..js (internal/modules/cjs/loader.js:1158:10)\n        at Object.require.extensions.<computed> [as .ts] (/workshop/node_modules/ts-node/src/index.ts:861:12)\n        at Module.load (internal/modules/cjs/loader.js:986:32)\n        at Function.Module._load (internal/modules/cjs/loader.js:879:14)\n        at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12)\n    ```", "```js\n    const primaryFn = async () => {\n      throw new Error('Primary System Offline!');\n    };\n    const secondaryFn = async () => {\n      console.log('Aye aye!');\n    };\n    const asyncFn = async () => {\n      try {\n        await primaryFn();\n      } catch (e) {\n        console.warn(e);\n        secondaryFn();\n      }\n    };\n    asyncFn();\n    ```", "```js\n    export const errorFN = async () => {\n      throw new Error('An error has occurred!');\n    };\n    const asyncFn = async () => {\n      await errorFN();\n    };\n    try {\n      asyncFn();\n    } catch (e) {\n      console.error(e);\n    }\n    ```", "```js\n    Error: Primary System Offline!\n        at primaryFn (C:\\Users\\Mahesh\\Documents\\Chapter13_TypeScript\\Exercise13.06\\error-secondary.ts:2:9)\n        at asyncFn (C:\\Users\\Mahesh\\Documents\\Chapter13_TypeScript\\Exercise13.06\\error-secondary.ts:11:11)\n        at Object.<anonymous> (C:\\Users\\Mahesh\\Documents\\Chapter13_TypeScript\\Exercise13.06\\error-secondary.ts:18:1)\n        at Module._compile (internal/modules/cjs/loader.js:1063:30)\n        at Module.m._compile (C:\\Users\\Mahesh\\AppData\\Roaming\\npm-cache\\_npx\\13000\\node_modules\\ts-node\\src\\index.ts:1056:23)       \n        at Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n        at Object.require.extensions.<computed> [as .ts] (C:\\Users\\Mahesh\\AppData\\Roaming\\npm-cache\\_npx\\13000\\node_modules\\ts-node\\src\\index.ts:1059:12)\n        at Module.load (internal/modules/cjs/loader.js:928:32)\n        at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n        at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n    Aye aye!\n    ```", "```js\nexport const fn = async () => {\n  return 'awaited!';\n};\nconsole.log(await fn());\n```", "```js\n⨯ Unable to compile TypeScript:\nsrc/top-level-await.ts:5:13 - error TS1378: Top-level 'await' expressions are only allowed when the 'module' option is set to 'esnext' or 'system', and the 'target' option is set to 'es2017' or higher.\n5 console.log(await fn());\n              ~~~~~\n```", "```js\nTypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension \".ts\" for /workshop/async-chapter/src/top-level-await.ts\n    at Loader.defaultGetFormat [as _getFormat] (internal/modules/esm/get_format.js:65:15)\n    at Loader.getFormat (internal/modules/esm/loader.js:113:42)\n    at Loader.getModuleJob (internal/modules/esm/loader.js:243:31)\n    at Loader.import (internal/modules/esm/loader.js:177:17)\n```", "```js\nnode --loader ts-node/esm.mjs top.ts\n(node:91445) ExperimentalWarning: --experimental-loader is an experimental feature. This feature could change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\nawaited! \n```", "```js\nPromise.all([p1, p2, p3])\n  .then(values => console.log(values))\n  .catch(e => console.error(e));\n```", "```js\ntry {\n  const values = await Promise.all([p1, p2, p3]);\n  console.log(values);\n} catch (e) {\n  console.error(e);\n}\n```", "```js\n    import express, { Request, Response } from 'express';\n    const app = express();\n    app.get('/', (req: Request, res: Response) => {\n      res.send('OK');\n    });\n    app.listen(8888);\n    ```", "```js\n    interface ParsedQs { [key: string]: undefined | string | string[] | ParsedQs | ParsedQs[] }\n    ```", "```js\n    import express, { Request, Response } from 'express';\n    const app = express();\n    app.get('/', (req: Request, res: Response) => {\n      const { name } = req.query;\n      res.send(`Hello ${name ?? 'World'}!`);\n    });\n    app.listen(8888);\n    ```", "```js\n    import { promises } from 'fs';\n    import { resolve } from 'path';\n    ```", "```js\n      if (name) {\n        await promises.appendFile(resolve(__dirname, 'names.txt'), `${name}\\n`);\n      }\n    ```", "```js\n    import express, { Request, Response } from 'express';\n    import { promises } from 'fs';\n    import { resolve } from 'path';\n    const app = express();\n    app.get('/', async (req: Request, res: Response) => {\n      const { name } = req.query;\n      if (name) {\n        await promises.appendFile(resolve(__dirname, 'names.txt'), `${name}\\n`);\n      }\n      res.send(`Hello ${name ?? 'World'}!`);\n    });\n    app.listen(8888);\n    ```", "```js\n    npm i -g @nestjs/cli\n    ```", "```js\n    nest new async-nest\n    ```", "```js\n    import { NestFactory } from '@nestjs/core';\n    import { AppModule } from './app.module';\n    async function bootstrap() {\n      const app = await NestFactory.create(AppModule);\n      await app.listen(3000);\n    }\n    bootstrap();\n    ```", "```js\n    export class AppService {\n      getHello(name: string): string {\n        return `Hello ${name}!`;\n      }\n    }\n    ```", "```js\n    import { Controller, Get, Query } from '@nestjs/common';\n    import { AppService } from './app.service';\n    @Controller()\n    export class AppController {\n      constructor(private readonly appService: AppService) {}\n      @Get()\n      getHello(@Query('name') name: string = 'World'): string {\n        return this.appService.getHello(name);\n      }\n    }\n    ```", "```js\n      describe('root', () => {\n        it('should return \"Hello World!\"', async () => {\n          expect(await appController.getHello()).toBe('Hello World!');\n        });\n      });\n    ```", "```js\n    nest new typeorm-nest\n    ```", "```js\n    nest g module pledge\n    ```", "```js\n    nest g controller pledge\n    nest g service pledge\n    ```", "```js\n    npm i @nestjs/typeorm sqlite3 typeorm\n    ```", "```js\n    import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\n    @Entity()\n    export class Pledge {\n      @PrimaryGeneratedColumn()\n      id: number;\n      @Column()\n      desc: string;\n      @Column()\n      kept: boolean;\n    }\n    ```", "```js\n        TypeOrmModule.forRoot({\n          type: 'sqlite',\n          database: 'db',\n          entities: [Pledge],\n          synchronize: true,\n        }),\n    ```", "```js\n    import { TypeOrmModule } from '@nestjs/typeorm';\n    import { Pledge } from './pledge/pledge.entity';\n    ```", "```js\n    import { Module } from '@nestjs/common';\n    import { TypeOrmModule } from '@nestjs/typeorm';\n    import { PledgeController } from './pledge.controller';\n    import { Pledge } from './pledge.entity';\n    import { PledgeService } from './pledge.service';\n    @Module({\n      controllers: [PledgeController],\n      imports: [TypeOrmModule.forFeature([Pledge])],\n      providers: [PledgeService],\n    })\n    export class PledgeModule {}\n    ```", "```js\n    import { Injectable } from '@nestjs/common';\n    import { Pledge } from './pledge.entity';\n    import { InjectRepository } from '@nestjs/typeorm';\n    import { Repository } from 'typeorm';\n    @Injectable()\n    export class PledgeService {\n      constructor(\n        @InjectRepository(Pledge)\n        private pledgeRepository: Repository<Pledge>,\n      ) {}\n      findAll(): Promise<Pledge[]> {\n        return this.pledgeRepository.find();\n      }\n    }\n    ```", "```js\n    import { Injectable } from '@nestjs/common';\n    import { InjectRepository } from '@nestjs/typeorm';\n    import { DeleteResult, Repository } from 'typeorm';\n    import { Pledge } from './pledge.entity';\n    @Injectable()\n    export class PledgeService {\n      constructor(\n        @InjectRepository(Pledge)\n        private pledgeRepository: Repository<Pledge>,\n      ) {}\n      delete(id: number): Promise<DeleteResult> {\n        return this.pledgeRepository.delete(id);\n      }\n      findAll(): Promise<Pledge[]> {\n        return this.pledgeRepository.find();\n      }\n      findOne(id: number): Promise<Pledge> {\n        return this.pledgeRepository.findOne(id);\n      }\n      save(pledge: Pledge): Promise<Pledge> {\n        return this.pledgeRepository.save(pledge);\n      }\n    }\n    ```", "```js\n    import { Body, Controller, Delete, Get, Param, Post } from '@nestjs/common';\n    import { DeleteResult } from 'typeorm';\n    import { Pledge } from './pledge.entity';\n    import { PledgeService } from './pledge.service';\n    @Controller('pledge')\n    export class PledgeController {\n      constructor(private readonly pledgeService: PledgeService) {}\n      @Delete(':id')\n      deletePledge(@Param('id') id: number): Promise<DeleteResult> {\n        return this.pledgeService.delete(id);\n      }\n      @Get()\n      getPledges(): Promise<Pledge[]> {\n        return this.pledgeService.findAll();\n      }\n      @Get(':id')\n      getPledge(@Param('id') id: number): Promise<Pledge> {\n        return this.pledgeService.findOne(id);\n      }\n      @Post()\n      savePledge(@Body() pledge: Pledge): Promise<Pledge> {\n        return this.pledgeService.save(pledge);\n      }\n    }\n    ```", "```js\nexport class El {\n  constructor(private name: string) {}\n  render = () => {\n    return new Promise((resolve) =>\n      setTimeout(\n        () => resolve(`${this.name} is resolved`),\n        Math.random() * 1000\n      )\n    );\n  };\n}\nconst e1 = new El('header');\nconst e2 = new El('body');\nconst e3 = new El('footer');\nconst renderAll = () => {\n  e1.render().then((msg1) => {\n    console.log(msg1);\n    e2.render().then((msg2) => {\n      console.log(msg2);\n      e3.render().then((msg3) => {\n        console.log(msg3);\n      });\n    });\n  });\n};\nrenderAll();\n```", "```js\nheader is resolved\nbody is resolved\nfooter is resolved\n```"]