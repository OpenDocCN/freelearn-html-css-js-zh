- en: Chapter 5. Learning to Work with Geometries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapters, you learned a lot about how to work with Three.js.
    You know how to create a basic scene, add lighting, and configure the material
    for your meshes. In [Chapter 2](ch02.html "Chapter 2. Basic Components That Make
    Up a Three.js Scene"), *Basic Components That Make Up a Three.js Scene*, we touched
    upon, but didn''t really go into the details of, the available geometries that
    Three.js provides and that you can use to create your 3D objects. In this and
    the next chapter, we''ll walk you through all the geometries (except `THREE.Line`,
    which we discussed in the previous chapter) Three.js provides out of the box.
    In this chapter, we''ll look at the following geometries:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '`THREE.CircleGeometry`'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.RingGeometry`'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.PlaneGeometry`'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.ShapeGeometry`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.BoxGeometry`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.SphereGeometry`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.CylinderGeometry`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.TorusGeometry`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.TorusKnotGeometry`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.PolyhedronGeometry`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.IcosahedronGeometry`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.OctahedronGeometry`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.TetraHedronGeometry`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.DodecahedronGeometry`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And in the next chapter, we''ll have a look at the following complex geometries:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '`THREE.ConvexGeometry`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.LatheGeometry`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.ExtrudeGeometry`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.TubeGeometry`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.ParametricGeometry`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THREE.TextGeometry`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let's look at all the basic geometries that Three.js has to offer.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The basic geometries provided by Three.js
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Three.js, we have a couple of geometries that result in a two-dimensional
    mesh and a larger number of geometries that create a three-dimensional mesh. In
    this section, we''ll first look at the 2D geometries: `THREE.CircleGeometry`,
    `THREE.RingGeometry`, `THREE.PlaneGeometry`, and `THREE.ShapeGeometry`. After
    that, we''ll explore all the basic 3D geometries that are available.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Two-dimensional geometries
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Two-dimensional objects look like flat objects and, as the name implies, only
    have two dimensions. The first two-dimensional geometry on the list is `THREE.PlaneGeometry`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: THREE.PlaneGeometry
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A `PlaneGeometry` object can be used to create a very simple two-dimensional
    rectangle. For an example of this geometry, look at the `01-basic-2d-geometries-plane.html`
    example in the sources for this chapter. A rectangle created using `PlaneGeometry`
    is shown in the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.PlaneGeometry](img/2215OS_05_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: 'Creating this geometry is very simple, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this example for `THREE.PlaneGeometry`, you can change these properties
    and directly see the effect it has on the resulting 3D object. An explanation
    of these properties is shown in the following table:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Mandatory | Description |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: '| `width` | Yes | This is the width of the rectangle. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| `height` | Yes | This is the height of the rectangle. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: '| `widthSegments` | No | This is the number of segments the width should be
    divided into. This defaults to `1`. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| `heightSegments` | No | This is the number of segments the height should
    be divided into. This defaults to `1`. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: As you can see, this is not a very complex geometry. You just specify the size,
    and you're done. If you want to create more faces (for example, when you want
    to create a checkered pattern), you can use the `widthSegments` and `heightSegments`
    properties to divide the geometry into smaller faces.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move on to the next geometry, here''s a quick note on the material
    that is used for this example, and which we also use for most of the other examples
    in this chapter. We use the following method to create a mesh based on the geometry:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this function, we create a multimaterial mesh based on the mesh provided.
    The first material used is `THREE.MeshNormalMaterial`. As you learned in the previous
    chapter, `THREE.MeshNormalMaterial` creates colored faces based on its normal
    vector (the orientation of the face). We also set this material to be double-sided
    (`THREE.DoubleSide`). If we don't do this, we won't see this object when its back
    is turned to the camera. Besides `THREE.MeshNormalMaterial`, we also add `THREE.MeshBasicMaterial`,
    on which we enable the wireframe property. This way, we can nicely see the 3D
    shape of the object and the faces that are created for a specific geometry.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to access the properties of a geometry after it has been created,
    you can't just say `plane.width`. To access the properties of a geometry, you
    have to use the `parameters` property of the object. So, to get the `width` property
    of the `plane` object we created in this section, you'd have to use `plane.parameters.width`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: THREE.CircleGeometry
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can probably already guess what `THREE.CircleGeometry` creates. With this
    geometry, you can create a very simple two-dimensional circle (or partial circle).
    Let''s first look at the example for this geometry, `02-basic-2d-geometries-circle.html`.
    In the following screenshot, you can find an example where we created `THREE.CircleGeometry`
    with a `thetaLength` value that is smaller than `2 * PI`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.CircleGeometry](img/2215OS_05_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: 'Note that `2 * PI` represents a complete circle in radians. If you''d rather
    work with degrees than radians, converting between them is very easy. The following
    two functions can help you to convert between radians and degrees, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this example, you can see and control a mesh created using `THREE.CircleGeometry`.
    When you create `THREE.CircleGeometry`, you can specify a few properties that
    define what the circle looks like, as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Mandatory | Description |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: '| `radius` | No | The radius of a circle defines its size. The radius is the
    distance from the center of the circle to its side. The default value is `50`.
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
- en: '| `segments` | No | This property defines the number of faces that are used
    to create the circle. The minimum number is `3`, and if not specified, this number
    defaults to `8`. A higher value means a smoother circle. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
- en: '| `thetaStart` | No | This property defines the position from which to start
    drawing the circle. This value can range from `0` to `2 * PI`, and the default
    value is `0`. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
- en: '| `thetaLength` | No | This property defines to what extent the circle is completed.
    This defaults to `2 * PI` (a full circle) when not specified. For instance, if
    you specify `0.5 * PI` for this value, you''ll get a quarter circle. Use this
    property together with the `thetaStart` property to define the shape of the circle.
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
- en: 'You can create a full circle using the following snippet of code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you wanted to create half a circle from this geometry, you''d use something
    like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Before moving on to the next geometry, a quick note on the orientation that
    Three.js uses when creating these two-dimensional shapes (`THREE.PlaneGeometry`,
    `THREE.CircleGeometry`, and `THREE.ShapeGeometry`): Three.js creates these objects
    *standing up*, so they lie along the *x*-*y* plane. This is very logical since
    they are two-dimensional shapes. However, often, especially with `THREE.PlaneGeometry`,
    you want to have the mesh lying down on the ground (the `x`-`z` plane)—some sort
    of ground area on which you can position the rest of your objects. The easiest
    way to create a two-dimensional object that is horizontally orientated instead
    of vertically is by rotating the mesh a quarter rotation backwards (`-PI/2`) around
    its *x* axis, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That's all for `THREE.CircleGeometry`. The next geometry, `THREE.RingGeometry`,
    looks a lot like `THREE.CircleGeometry`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: THREE.RingGeometry
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With `THREE.RingGeometry`, you can create a 2D object that not only closely
    resembles `THREE.CircleGeometry`, but also allows you to define a hole in the
    center (see `03-basic-3d-geometries-ring.html`):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.RingGeometry](img/2215OS_05_03.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: '`THREE.RingGeometry` doesn''t have any required properties (see the next table
    for the default values), so to create this geometry, you only have to specify
    the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can further customize the appearance of the ring geometry by passing the
    following arguments into the constructor:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Mandatory | Description |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
- en: '| `innerRadius` | No | The inner radius of a circle defines the size of the
    center hole. If this property is set to `0`, no hole will be shown. The default
    value is `0`. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
- en: '| `outerRadius` | No | The outer radius of a circle defines its size. The radius
    is the distance from the center of the circle to its side. The default value is
    `50`. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
- en: '| `thetaSegments` | No | This is the number of diagonal segments that will
    be used to create the circle. A higher value means a smoother ring. The default
    value is `8`. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
- en: '| `phiSegments` | No | This is the number of segments required to be used along
    the length of the ring. The default value is `8`. This doesn''t really affect
    the smoothness of the circle but increases the number of faces. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
- en: '| `thetaStart` | No | This defines the position from which to start drawing
    the circle. This value can range from `0` to `2 * PI`, and the default value is
    `0`. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
- en: '| `thetaLength` | No | This defines the extent to which the circle is completed.
    This defaults to `2 * PI` (a full circle) when not specified. For instance, if
    you specify `0.5 * PI` for this value, you''ll get a quarter circle. Use this
    property together with the `thetaStart` property to define the shape of the circle.
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
- en: 'In the next section, we''ll look at the last of the two-dimensional shapes:
    `THREE.ShapeGeometry`.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: THREE.ShapeGeometry
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`THREE.PlaneGeometry` and `THREE.CircleGeometry` have limited ways of customizing
    their appearance. If you want to create custom two-dimensional shapes, you can
    use `THREE.ShapeGeometry`. With `THREE.ShapeGeometry`, you have a couple of functions
    you can call to create your own shapes. You can compare this functionality with
    the `<path>` element functionality that is also available to the HTML canvas element
    and SVG. Let''s start with an example, and after that, we''ll show you how you
    can use the various functions to draw your own shape. The `04-basic-2d-geometries-shape.html`
    example can be found in the sources of this chapter. The following screenshot
    shows this example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.ShapeGeometry](img/2215OS_05_04.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: 'In this example, you can see a custom-created two-dimensional shape. Before
    going into a description of the properties, first let''s look at the code that
    is used to create this shape. Before we create `THREE.ShapeGeometry`, we first
    have to create `THREE.Shape`. You can trace these steps by looking at the previous
    screenshot, where we start in the bottom-right corner. Here''s how we created
    `THREE.Shape`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this piece of code, you can see that we created the outline of this shape
    using lines, curves, and splines. After that, we punched a number of holes in
    this shape using the `holes` property of `THREE.Shape`. In this section, though,
    we''re talking about `THREE.ShapeGeometry` and not `THREE.Shape`. To create a
    geometry from `THREE.Shape`, we need to pass in `THREE.Shape` (returned in our
    case from the `drawShape()` function) as the argument to `THREE.ShapeGeometry`,
    as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The result from this function is a geometry that can be used to create a mesh.
    There is also an alternative way of creating `THREE.ShapeGeometry` when you already
    have a shape. You can call `shape.makeGeometry(options)`, which will return an
    instance of `THREE.ShapeGeometry` (for an explanation of the options, see the
    next table).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first look at the parameters you can pass in to `THREE.ShapeGeometry`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Mandatory | Description |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
- en: '| `shapes` | Yes | These are one or more `THREE.Shape` objects that are used
    to create `THREE.Geometry`. You can either pass in a single `THREE.Shape` object
    or an array of `THREE.Shape` objects. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
- en: '| `options` | No | You can also pass in some `options` that are applied to
    all the shapes passed in with the `shapes` argument. An explanation of these options
    is given here:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '`curveSegments`: This property determines how smooth the curves created from
    the shape are. The default value is `12`.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`material`: This is the `materialIndex` property used for the faces created
    for the specified shapes. When you use `THREE.MeshFaceMaterial` together with
    this geometry, the `materialIndex` property determines which of the materials
    passed in is used for the faces of the shapes passed in.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UVGenerator`: When you use a texture with your material, the UV mapping determines
    what part of a texture is used for a specific face. With the `UVGenerator` property,
    you can pass in your own object that will create the UV settings for the faces
    that are created for the shapes passed in. More information on UV settings can
    be found in [Chapter 10](ch10.html "Chapter 10. Loading and Working with Textures"),
    *Loading and Working with Textures*. If none are specified, `THREE.ExtrudeGeometry.WorldUVGenerator`
    is used.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important part of `THREE.ShapeGeometry` is `THREE.Shape`, which you
    use to create the shape, so let''s look at the list of drawing functions you can
    use to create `THREE.Shape` (note that these are actually functions of the `THREE.Path`
    object, from which `THREE.Shape` extends):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
- en: '| `moveTo(x,y)` | Move the drawing position to the *x* and *y* coordinates
    specified. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
- en: '| `lineTo(x,y)` | Draw a line from the current position (for example, set by
    the `moveTo` function) to the *x* and *y* coordinates provided. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
- en: '| `quadraticCurveTo(aCPx, aCPy, x, y)` | You can use two different ways of
    specifying curves. You can use this `quadraticCurveTo` function, or you can use
    the `bezierCurveTo` function (see the next table row). The difference between
    these two functions is how you specify the curvature of the curve. The following
    figure explains the differences between these two options:![THREE.ShapeGeometry](img/2215OS_05_05.jpg)For
    a quadratic curve, we need to specify one additional point (using the `aCPx` and
    `aCPy` arguments), and the curve is based solely on that point and, of course,
    the specified end point (from the *x* and *y* arguments). For a cubic curve (used
    by the `bezierCurveTo` function), you specify two additional points to define
    the curve. The start point is the current position of the path. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
- en: '| `bezierCurveTo(aCPx1, aCPy1, aCPx2, aCPy2, x, y)` | This draws a curve based
    on the arguments supplied. For an explanation, see the previous table entry. The
    curve is drawn based on the two coordinates that define the curve (`aCPx1`, `aCPy1`,
    `aCPx2`, and `aCPy2`) and the end coordinate (*x* and *y*). The start point is
    the current position of the path. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
- en: '| `splineThru(pts)` | This function draws a fluid line through the set of coordinates
    provided (`pts`). This argument should be an array of `THREE.Vector2` objects.
    The start point is the current position of the path. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
- en: '| `arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise)` | This draws a
    circle (or part of a circle). The circle starts from the current position of the
    path. Here, `aX` and `aY` are used as offsets from the current position. Note
    that `aRadius` sets the size of the circle and `aStartAngle` and `aEndAngle` define
    how large a part of the circle is drawn. The Boolean property `aClockwise` determines
    whether the circle is drawn clockwise or counterclockwise. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
- en: '| `absArc(aX, aY, aRadius, aStartAngle, aEndAngle, AClockwise)` | See the description
    of `arc`. The position is absolute instead of relative to the current position.
    |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
- en: '| `ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise)` |
    See the description of `arc`. As an addition, with the `ellipse` function, we
    can separately set the *x* radius and the *y* radius. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
- en: '| `absEllipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise)`
    | See the description of `ellipse`. The position is absolute instead of relative
    to the current position. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
- en: '| `fromPoints(vectors)` | If you pass in an array of `THREE.Vector2` (or `THREE.Vector3`)
    objects into this function, Three.js will create a path using straight lines from
    the supplied vectors. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
- en: '| `holes` | The `holes` property contains an array of `THREE.Shape` objects.
    Each of the objects in this array is rendered as a hole. A good example of this
    is the example we saw at the beginning of this section. In that code fragment,
    we added three `THREE.Shape` objects to this array. One for the left eye, one
    for the right eye, and one for the mouth of our main `THREE.Shape` object. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
- en: 'In this example, we created `THREE.ShapeGeometry` from a `THREE.Shape` object
    using the new `THREE.ShapeGeometry(drawShape()))` constructor. The `THREE.Shape`
    object itself also has a few helper functions you can use to create geometries.
    They are as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
- en: '| `makeGeometry(options)` | This returns `THREE.ShapeGeometry` from `THREE.Shape`.
    For more information on the available options, look at the properties of `THREE.ShapeGeometry`,
    which we discussed earlier. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
- en: '| `createPointsGeometry(divisions)` | This converts the shape to a set of points.
    The `divisions` property defines how many points are returned. If this value is
    higher, more points are returned and the resulting line is smoother. The divisions
    apply to each part of the path separately. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
- en: '| `createSpacedPointsGeometry(divisions)` | Even this converts the shape into
    a set of points, but this time, apply the division to the complete path at once.
    |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
- en: 'When you create a set of points, use `createPointsGeometry` or `createSpacedPointsGeometry`;
    you can use the created points to draw a line, as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When you click on the **asPoints** or **asSpacedPoints** buttons in the example,
    you''ll see something like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.ShapeGeometry](img/2215OS_05_06.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: That's it for the two-dimensional shapes. The next part will show and explain
    the basic three-dimensional shapes.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Three-dimensional geometries
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section on the basic three-dimensional geometries, we''ll start with
    the geometry we''ve already seen a couple of times: `THREE.BoxGeometry`.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: THREE.BoxGeometry
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`THREE.BoxGeometry` is a very simple 3D geometry that allows you to create
    a box by specifying its width, height, and depth. We''ve added an example, `05-basic-3d-geometries-cube.html`,
    where you can play around with these properties. The following screenshot shows
    this geometry:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.BoxGeometry](img/2215OS_05_07.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in this example, by changing the `width`, `height`, and `depth`
    properties of `THREE.BoxGeometry`, you can control the size of the resulting mesh.
    These three properties are also mandatory when you create a new cube, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the example, you can also see a couple of other properties that you can
    define on the cube. The following table explains all the properties:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Mandatory | Description |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
- en: '| `Width` | Yes | This is the width of the cube. This is the length of the
    vertices of the cube along the *x* axis. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
- en: '| `height` | Yes | This is the height of the cube. This is the length of the
    vertices of the cube along the *y* axis. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
- en: '| `depth` | Yes | This is the depth of the cube. This is the length of the
    vertices of the cube along the *z* axis. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
- en: '| `widthSegments` | No | This is the number of segments into which we divide
    a face along the cube''s *x* axis. The default value is `1`. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
- en: '| `heightSegments` | No | This is the number of segments into which we divide
    a face along the cube''s *y* axis. The default value is `1`. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
- en: '| `depthSegments` | No | This is the number of segments into which we divide
    a face along the cube''s *z* axis. The default value is `1`. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
- en: By increasing the various segment properties, you divide the six main faces
    of the cube into smaller faces. This is useful if you want to set specific material
    properties on parts of the cube using `THREE.MeshFaceMaterial`. `THREE.BoxGeometry`
    is a very simple geometry. Another simple one is `THREE.SphereGeometry`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: THREE.SphereGeometry
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With `SphereGeometry`, you can create a three-dimensional sphere. Let''s dive
    straight into the example, `06-basic-3d-geometries-sphere.html`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.SphereGeometry](img/2215OS_05_08.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
- en: 'In the previous screenshot, we show you a half-open sphere that was created
    based on `THREE.SphereGeometry`. This geometry is a very flexible one and can
    be used to create all kinds of sphere-related geometries. A basic `THREE.SphereGeometry`,
    though, can be created as easily as this: `new` `THREE.SphereGeometry()`. The
    following properties can be used to tune what the resulting mesh looks like:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Mandatory | Description |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
- en: '| `radius` | No | This is used to set the radius for the sphere. This defines
    how large the resulting mesh will be. The default value is `50`. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
- en: '| `widthSegments` | No | This is the number of segments to be used vertically.
    More segments means a smoother surface. The default value is `8` and the minimum
    value is `3`. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
- en: '| `heightSegments` | No | This is the number of segments to be used horizontally.
    The more the segments, the smoother the surface of the sphere. The default value
    is `6` and the minimum value is `2`. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
- en: '| `phiStart` | No | This determines where to start drawing the sphere along
    its *x* axis. This can range from `0` to `2 * PI`. The default value is `0`. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
- en: '| `phiLength` | No | This determines how far from `phiStart` the sphere is
    be drawn. `2 * PI` will draw a full sphere and `0.5 * PI` will draw an open quarter
    sphere. The default value is `2 * PI`. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
- en: '| `thetaStart` | No | This determines where to start drawing the sphere along
    its *x*-axis. This can range from `0` to `PI`, and the default value is `0`. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
- en: '| `thetaLength` | No | This determines how far from `phiStart` the sphere is
    drawn. The `PI` value is a full sphere, whereas `0.5 * PI` will draw only the
    top half of the sphere. The default value is `PI`. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
- en: 'The `radius`, `widthSegments`, and `heightSegments` properties should be clear.
    We''ve already seen these kinds of properties in other examples. The `phiStart`,
    `phiLength`, `thetaStart`, and `thetaLength` properties are a bit harder to understand
    without looking at an example. Luckily though, you can experiment with these properties
    from the menu in the `06-basic-3d-geometries-sphere.html` example and create interesting
    geometries such as these:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.SphereGeometry](img/2215OS_05_09.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: The next one on the list is `THREE.CylinderGeometry`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: THREE.CylinderGeometry
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With this geometry, we can create cylinders and cylinder-like objects. As for
    all the other geometries, we also have an example (`07-basic-3d-geometries-cylinder.html`)
    that lets you experiment with the properties of this geometry, the screenshot
    for which is as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.CylinderGeometry](img/2215OS_05_10.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: 'When you create `THREE.CylinderGeometry`, there aren''t any mandatory arguments.
    So you can create a cylinder by just calling `new THREE.CylinderGeometry()`. You
    can pass in a number of properties, as you can see in the example, to alter the
    appearance of this cylinder. The properties are explained in this table:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Mandatory | Description |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
- en: '| `radiusTop` | No | This sets the size this cylinder will have at the top.
    The default value is `20`. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
- en: '| `radiusBottom` | No | This sets the size this cylinder will have at the bottom.
    The default value is `20`. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
- en: '| `height` | No | This property sets the height of the cylinder. The default
    height is `100`. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
- en: '| `radialSegments` | No | This determines the number of segments along the
    radius of the cylinder. This defaults to `8`. More segments means a smoother cylinder.
    |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
- en: '| `heightSegments` | No | This determines the number of segments along the
    height of the cylinder. The default value is `1`. More segments means more faces.
    |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
- en: '| `openEnded` | No | This determines whether or not the mesh is closed at the
    top and the bottom. The default value is `false`. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
- en: These are all very basic properties you can use to configure the cylinder. One
    interesting aspect, though, is when you use a negative radius for the top (or
    for the bottom). If you do this, you can use this geometry to create an hourglass-like
    shape, as shown in the following screenshot. One thing to note here, as you can
    see from the colors, is that the top half in this case is turned inside out. If
    you use a material that isn't configured with `THREE.DoubleSide`, you won't see
    the top half.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.CylinderGeometry](img/2215OS_05_11.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: The next geometry is `THREE.TorusGeometry`, which you can use to create donut-like
    shapes.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: THREE.TorusGeometry
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A torus is a simple shape that looks like a donut. The following screenshot,
    which you can get yourself by opening the `08-basic-3d-geometries-torus.html`
    example, shows `THREE.TorusGeometry` in action:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.TorusGeometry](img/2215OS_05_12.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: 'Just like most of the simple geometries, there aren''t any mandatory arguments
    when creating `THREE.TorusGeometry`. The following table lists the arguments you
    can specify when you create this geometry:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Mandatory | Description |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
- en: '| `radius` | No | This sets the size of the complete torus. The default value
    is `100`. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
- en: '| `tube` | No | This sets the radius of the tube (the actual donut). The default
    value for this attribute is `40`. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
- en: '| `radialSegments` | No | This determines the number of segments to be used
    along the length of the torus. The default value is `8`. See the effect of changing
    this value in the demo. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
- en: '| `tubularSegments` | No | This determines the number of segments to be used
    along the width of the torus. The default value is `6`. See the effect of changing
    this value in the demo. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
- en: '| `arc` | No | With this property, you can control whether the torus is drawn
    full circle. The default of this value is `2 * PI` (a full circle). |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
- en: 'Most of these are very basic properties that you''ve already seen. The `arc`
    property, however, is a very interesting one. With this property, you define whether
    the donut makes a full circle or only a partial one. By experimenting with this
    property, you can create very interesting meshes, such as the following one with
    an arc set to `0.5 * PI`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.TorusGeometry](img/2215OS_05_13.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
- en: '`THREE.TorusGeometry` is a very straightforward geometry. In the next section,
    we''ll look at a geometry that almost shares its name but is much less straightforward:
    `THREE.TorusKnotGeometry`.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: THREE.TorusKnotGeometry
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With `THREE.TorusKnotGeometry`, you can create a torus knot. A torus knot is
    a special kind of knot that looks like a tube that winds around itself a couple
    of times. The best way to explain this is by looking at the `09-basic-3d-geometries-torus-knot.html`
    example. The following screenshot shows this geometry:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.TorusKnotGeometry](img/2215OS_05_14.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
- en: 'If you open this example and play around with the `p` and `q` properties, you
    can create all kinds of beautiful geometries. The `p` property defines how often
    the knot winds around its axis, and `q` defines how much the knot winds around
    its interior.If this sounds a bit vague, don''t worry. You don''t need to understand
    these properties to create beautiful knots, such as the one shown in the following
    screenshot (for those interested in the details, Wikipedia has a good article
    on this subject at [http://en.wikipedia.org/wiki/Torus_knot](http://en.wikipedia.org/wiki/Torus_knot)):'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.TorusKnotGeometry](img/2215OS_05_15.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
- en: 'With the example for this geometry, you can play around with the following
    properties and see the effect various combinations of `p` and `q` have on this
    geometry:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Mandatory | Description |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
- en: '| `radius` | No | This sets the size of the complete torus. The default value
    is `100`. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
- en: '| `tube` | No | This sets the radius of the tube (the actual donut). The default
    value for this attribute is `40`. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
- en: '| `radialSegments` | No | This determines the number of segments to be used
    along the length of the torus knot. The default value is `64`. See the effect
    of changing this value in the demo. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
- en: '| `tubularSegments` | No | This determines the number of segments to be used
    along the width of the torus knot. The default value is `8`. See the effect of
    changing this value in the demo. |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
- en: '| `p` | No | This defines the shape of the knot, and the default value is `2`.
    |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
- en: '| `q` | No | This defines the shape of the knot, and the default value is `3`.
    |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
- en: '| `heightScale` | No | With this property, you can stretch out the torus knot.
    The default value is `1`. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
- en: 'The next geometry on the list is the last one of the basic geometries: `THREE.PolyhedronGeometry`.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: THREE.PolyhedronGeometry
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With this geometry, you can easily create polyhedrons. A polyhedron is a geometry
    that has only flat faces and straight edges. Most often, though, you won''t use
    this geometry directly. Three.js provides a number of specific polyhedrons you
    can use directly without having to specify the vertices and the faces of `THREE.PolyhedronGeometry`.
    We''ll discuss these polyhedrons later on in this section. If you do want to use
    `THREE.PolyhedronGeometry` directly, you have to specify the vertices and the
    faces (just as we did for the cube in [Chapter 3](ch03.html "Chapter 3. Working
    with the Different Light Sources Available in Three.js"), *Working with the Different
    Light Sources Available in Three.js*). For instance, we can create a simple tetrahedron
    (also see `THREE.TetrahedronGeometry` in this chapter) like this:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To construct `THREE.PolyhedronGeometry`, we pass in the `vertices`, `indices`,
    `radius`, and `detail` properties. The resulting `THREE.PolyhedronGeometry` object
    is shown in the `10-basic-3d-geometries-polyhedron.html` example (select **type**
    as: **Custom** in the menu in the top-right corner):'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.PolyhedronGeometry](img/2215OS_05_16.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
- en: 'When you create a polyhedron, you can pass in the following four properties:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Mandatory | Description |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
- en: '| `vertices` | Yes | These are the points that make up the polyhedron. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
- en: '| `indices` | Yes | These are the faces that need to be created from the vertices.
    |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
- en: '| `radius` | No | This is the size of the polyhedron. This defaults to `1`.
    |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
- en: '| `detail` | No | With this property, you can add additional detail to the
    polyhedron. If you set this to `1`, each triangle in the polyhedron will be split
    into four smaller triangles. If you set this to `2`, those four smaller triangles
    will each be again split into four smaller triangles, and so on. |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
- en: At the beginning of this section, we mentioned that Three.js comes with a couple
    of polyhedrons out of the box. In the following subsections, we'll quickly show
    you these.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: All these polyhedron types can be viewed by looking at the `09-basic-3d-geometries-polyhedron.html`
    example.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: THREE.IcosahedronGeometry
  id: totrans-214
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`THREE.IcosahedronGeometry` creates a polyhedron that has 20 identical triangular
    faces created from 12 vertices. When creating this polyhedron, all you need to
    specify are the `radius` and `detail` levels. This screenshot shows a polyhedron
    created using `THREE.IcosahedronGeometry`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.IcosahedronGeometry](img/2215OS_05_17.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
- en: THREE.TetrahedronGeometry
  id: totrans-217
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The tetrahedron is one of the simplest polyhedrons. This polyhedron only contains
    four triangular faces created from four vertices. You create `THREE.TetrahedronGeometry`
    just like the other polyhedrons provided by Three.js, by specifying the `radius`
    and `detail` levels. Here''s a screenshot that shows a tetrahedron created using
    `THREE.TetrahedronGeometry`:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '![THREE.TetrahedronGeometry](img/2215OS_05_18.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
- en: THREE.Octahedron Geometry
  id: totrans-220
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Three.js also provides an implementation of an octahedron. As the name implies,
    this polyhedron has 8 faces. These faces are created from 6 vertices. The following
    screenshot shows this geometry:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Three.js 还提供了一个八面体的实现。正如其名所示，这个多面体有 8 个面。这些面是由 6 个顶点创建的。以下截图显示了该几何形状：
- en: '![THREE.Octahedron Geometry](img/2215OS_05_19.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.Octahedron Geometry](img/2215OS_05_19.jpg)'
- en: THREE.DodecahedronGeometry
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: THREE.DodecahedronGeometry
- en: 'The final polyhedron geometry provided by Three.js is `THREE.DodecahedronGeometry`.
    This polyhedron has 12 faces. The following screenshot shows this geometry:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Three.js 提供的最后一个多面体几何形状是 `THREE.DodecahedronGeometry`。这个多面体有 12 个面。以下截图显示了该几何形状：
- en: '![THREE.DodecahedronGeometry](img/2215OS_05_20.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.DodecahedronGeometry](img/2215OS_05_20.jpg)'
- en: That's the end of this chapter on the basic two-dimensional and three-dimensional
    geometries provided by Three.js.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本章关于 Three.js 提供的基本二维和三维几何形状的结束。
- en: Summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed all of the standard geometries Three.js has to
    offer. As you saw, there are a whole lot of geometries you can use right out of
    the box. To best learn how to use the geometries, experiment with the geometries.
    Use the examples in this chapter to get to know the properties you can use to
    customize the standard set of geometries available from Three.js. It is also a
    good thing that when you start with geometries, you choose a basic material; don't
    go directly for the complex materials, but start simple with `THREE.MeshBasicMaterial`
    with the wireframe set to `true`, or `THREE.MeshNormalMaterial`. That way, you'll
    get a much better picture of the true shape of a geometry. For two-dimensional
    shapes, it's important to remember that they are placed on the *x*-*y* plane.
    If you want to have a two-dimensional shape horizontally, you'll have to rotate
    the mesh around the *x* axis for `-0.5 * PI`. And finally, take care that if you're
    rotating a two-dimensional shape, or a three-dimensional shape that is *open*
    (for example, a cylinder or a tube), remember to set the material to `THREE.DoubleSide`.
    If you don't do this, the inside or the back of your geometry won't be shown.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了 Three.js 提供的所有标准几何形状。正如你所见，有大量的几何形状可以直接使用。为了最好地学习如何使用这些几何形状，请尝试实验这些几何形状。使用本章中的示例来了解你可以用来自定义从
    Three.js 获取的标准几何形状集合的属性。当你开始使用几何形状时，选择一个基本材质也是一个好主意；不要直接使用复杂的材质，而是从 `THREE.MeshBasicMaterial`
    开始，将线框设置为 `true`，或者 `THREE.MeshNormalMaterial`。这样，你将能够更好地了解几何形状的真实形状。对于二维形状，重要的是要记住它们放置在
    *x*-*y* 平面上。如果你想水平地有一个二维形状，你必须将网格绕 *x* 轴旋转 `-0.5 * PI`。最后，如果你正在旋转一个二维形状，或者一个 *开放*
    的三维形状（例如，一个圆柱体或管子），请记住将材质设置为 `THREE.DoubleSide`。如果你不这样做，你的几何形状的内部或背面将不会显示。
- en: In this chapter, we focused on simple, straightforward meshes. Three.js also
    provides ways to create complex geometries. In the following chapter, you'll learn
    how to create these.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于简单直接的网格。Three.js 也提供了创建复杂几何形状的方法。在下一章中，你将学习如何创建这些几何形状。
