- en: Chapter 5. Learning to Work with Geometries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。学习使用几何体
- en: 'In the previous chapters, you learned a lot about how to work with Three.js.
    You know how to create a basic scene, add lighting, and configure the material
    for your meshes. In [Chapter 2](ch02.html "Chapter 2. Basic Components That Make
    Up a Three.js Scene"), *Basic Components That Make Up a Three.js Scene*, we touched
    upon, but didn''t really go into the details of, the available geometries that
    Three.js provides and that you can use to create your 3D objects. In this and
    the next chapter, we''ll walk you through all the geometries (except `THREE.Line`,
    which we discussed in the previous chapter) Three.js provides out of the box.
    In this chapter, we''ll look at the following geometries:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，你学习了如何使用 Three.js。你知道如何创建基本场景、添加光照以及配置网格的材料。在[第2章](ch02.html "第2章。构成
    Three.js 场景的基本组件")中，*构成 Three.js 场景的基本组件*，我们提到了，但并没有深入探讨 Three.js 提供的可用几何体以及你可以用来创建
    3D 对象的几何体。在本章和下一章中，我们将带你了解 Three.js 提供的所有几何体（除了我们在上一章讨论的 `THREE.Line`），我们将详细介绍这些几何体。在本章中，我们将查看以下几何体：
- en: '`THREE.CircleGeometry`'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.CircleGeometry`'
- en: '`THREE.RingGeometry`'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.RingGeometry`'
- en: '`THREE.PlaneGeometry`'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.PlaneGeometry`'
- en: '`THREE.ShapeGeometry`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.ShapeGeometry`'
- en: '`THREE.BoxGeometry`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.BoxGeometry`'
- en: '`THREE.SphereGeometry`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.SphereGeometry`'
- en: '`THREE.CylinderGeometry`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.CylinderGeometry`'
- en: '`THREE.TorusGeometry`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.TorusGeometry`'
- en: '`THREE.TorusKnotGeometry`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.TorusKnotGeometry`'
- en: '`THREE.PolyhedronGeometry`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.PolyhedronGeometry`'
- en: '`THREE.IcosahedronGeometry`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.IcosahedronGeometry`'
- en: '`THREE.OctahedronGeometry`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.OctahedronGeometry`'
- en: '`THREE.TetraHedronGeometry`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.TetraHedronGeometry`'
- en: '`THREE.DodecahedronGeometry`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.DodecahedronGeometry`'
- en: 'And in the next chapter, we''ll have a look at the following complex geometries:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨以下复杂几何体：
- en: '`THREE.ConvexGeometry`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.ConvexGeometry`'
- en: '`THREE.LatheGeometry`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.LatheGeometry`'
- en: '`THREE.ExtrudeGeometry`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.ExtrudeGeometry`'
- en: '`THREE.TubeGeometry`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.TubeGeometry`'
- en: '`THREE.ParametricGeometry`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.ParametricGeometry`'
- en: '`THREE.TextGeometry`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.TextGeometry`'
- en: So let's look at all the basic geometries that Three.js has to offer.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们看看 Three.js 提供的所有基本几何体。
- en: The basic geometries provided by Three.js
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Three.js 提供的基本几何体
- en: 'In Three.js, we have a couple of geometries that result in a two-dimensional
    mesh and a larger number of geometries that create a three-dimensional mesh. In
    this section, we''ll first look at the 2D geometries: `THREE.CircleGeometry`,
    `THREE.RingGeometry`, `THREE.PlaneGeometry`, and `THREE.ShapeGeometry`. After
    that, we''ll explore all the basic 3D geometries that are available.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Three.js 中，我们有一些几何体可以生成二维网格，还有更多几何体可以创建三维网格。在本节中，我们将首先查看二维几何体：`THREE.CircleGeometry`、`THREE.RingGeometry`、`THREE.PlaneGeometry`
    和 `THREE.ShapeGeometry`。之后，我们将探索所有可用的基本三维几何体。
- en: Two-dimensional geometries
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二维几何体
- en: Two-dimensional objects look like flat objects and, as the name implies, only
    have two dimensions. The first two-dimensional geometry on the list is `THREE.PlaneGeometry`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 二维对象看起来像平面对象，正如其名所示，只有两个维度。列表中的第一个二维几何体是 `THREE.PlaneGeometry`。
- en: THREE.PlaneGeometry
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: THREE.PlaneGeometry
- en: 'A `PlaneGeometry` object can be used to create a very simple two-dimensional
    rectangle. For an example of this geometry, look at the `01-basic-2d-geometries-plane.html`
    example in the sources for this chapter. A rectangle created using `PlaneGeometry`
    is shown in the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `PlaneGeometry` 对象创建一个非常简单的二维矩形。关于这个几何体的例子，请查看本章源代码中的 `01-basic-2d-geometries-plane.html`。使用
    `PlaneGeometry` 创建的矩形如下截图所示：
- en: '![THREE.PlaneGeometry](img/2215OS_05_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.PlaneGeometry](img/2215OS_05_01.jpg)'
- en: 'Creating this geometry is very simple, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这种几何体非常简单，如下所示：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this example for `THREE.PlaneGeometry`, you can change these properties
    and directly see the effect it has on the resulting 3D object. An explanation
    of these properties is shown in the following table:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 `THREE.PlaneGeometry` 的例子中，你可以更改这些属性，并直接看到它对生成的 3D 对象产生的影响。以下表格展示了这些属性的说明：
- en: '| Property | Mandatory | Description |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 必需 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `width` | Yes | This is the width of the rectangle. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `width` | 是 | 这是矩形的宽度。 |'
- en: '| `height` | Yes | This is the height of the rectangle. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `height` | 是 | 这是矩形的长度。 |'
- en: '| `widthSegments` | No | This is the number of segments the width should be
    divided into. This defaults to `1`. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `widthSegments` | 否 | 这是宽度应该分割成多少段。默认为 `1`。 |'
- en: '| `heightSegments` | No | This is the number of segments the height should
    be divided into. This defaults to `1`. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `heightSegments` | 否 | 这是高度应该分割成多少段。默认值是 `1`。 |'
- en: As you can see, this is not a very complex geometry. You just specify the size,
    and you're done. If you want to create more faces (for example, when you want
    to create a checkered pattern), you can use the `widthSegments` and `heightSegments`
    properties to divide the geometry into smaller faces.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这并不是一个非常复杂的几何体。你只需指定大小，就完成了。如果你想创建更多面（例如，当你想创建棋盘图案时），你可以使用 `widthSegments`
    和 `heightSegments` 属性将几何体分割成更小的面。
- en: 'Before we move on to the next geometry, here''s a quick note on the material
    that is used for this example, and which we also use for most of the other examples
    in this chapter. We use the following method to create a mesh based on the geometry:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续下一个几何体之前，这里有一个关于本例中使用的材质的快速说明，以及我们在本章其他大多数示例中也使用的材质。我们使用以下方法根据几何体创建网格：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this function, we create a multimaterial mesh based on the mesh provided.
    The first material used is `THREE.MeshNormalMaterial`. As you learned in the previous
    chapter, `THREE.MeshNormalMaterial` creates colored faces based on its normal
    vector (the orientation of the face). We also set this material to be double-sided
    (`THREE.DoubleSide`). If we don't do this, we won't see this object when its back
    is turned to the camera. Besides `THREE.MeshNormalMaterial`, we also add `THREE.MeshBasicMaterial`,
    on which we enable the wireframe property. This way, we can nicely see the 3D
    shape of the object and the faces that are created for a specific geometry.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们根据提供的网格创建一个多材质网格。第一个使用的材质是 `THREE.MeshNormalMaterial`。正如你在上一章中学到的，`THREE.MeshNormalMaterial`
    根据其法向量（面的方向）创建彩色面。我们还设置了这种材质为双面（`THREE.DoubleSide`）。如果我们不这样做，当这个对象的背面朝向相机时，我们就看不到这个对象。除了
    `THREE.MeshNormalMaterial` 之外，我们还添加了 `THREE.MeshBasicMaterial`，并启用了线框属性。这样，我们就可以很好地看到对象的
    3D 形状和为特定几何体创建的面。
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you want to access the properties of a geometry after it has been created,
    you can't just say `plane.width`. To access the properties of a geometry, you
    have to use the `parameters` property of the object. So, to get the `width` property
    of the `plane` object we created in this section, you'd have to use `plane.parameters.width`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在创建几何体之后访问其属性，你不能只是说 `plane.width`。要访问几何体的属性，你必须使用对象的 `parameters` 属性。因此，要获取本节中创建的
    `plane` 对象的 `width` 属性，你必须使用 `plane.parameters.width`。
- en: THREE.CircleGeometry
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: THREE.CircleGeometry
- en: 'You can probably already guess what `THREE.CircleGeometry` creates. With this
    geometry, you can create a very simple two-dimensional circle (or partial circle).
    Let''s first look at the example for this geometry, `02-basic-2d-geometries-circle.html`.
    In the following screenshot, you can find an example where we created `THREE.CircleGeometry`
    with a `thetaLength` value that is smaller than `2 * PI`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经能猜到 `THREE.CircleGeometry` 会创建什么了。使用这种几何体，你可以创建一个非常简单的二维圆（或部分圆）。让我们首先看看这个几何体的示例，`02-basic-2d-geometries-circle.html`。在下面的屏幕截图中，你可以找到一个示例，其中我们使用
    `THREE.CircleGeometry` 并将 `thetaLength` 值设置为小于 `2 * PI`：
- en: '![THREE.CircleGeometry](img/2215OS_05_02.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.CircleGeometry](img/2215OS_05_02.jpg)'
- en: 'Note that `2 * PI` represents a complete circle in radians. If you''d rather
    work with degrees than radians, converting between them is very easy. The following
    two functions can help you to convert between radians and degrees, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`2 * PI` 代表一个完整的圆，以弧度为单位。如果你更愿意用度而不是弧度来工作，它们之间的转换非常简单。以下两个函数可以帮助你将弧度和度之间进行转换，如下所示：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this example, you can see and control a mesh created using `THREE.CircleGeometry`.
    When you create `THREE.CircleGeometry`, you can specify a few properties that
    define what the circle looks like, as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你可以看到并控制使用 `THREE.CircleGeometry` 创建的网格。当你创建 `THREE.CircleGeometry` 时，你可以指定一些属性来定义圆的外观，如下所示：
- en: '| Property | Mandatory | Description |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 必需 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `radius` | No | The radius of a circle defines its size. The radius is the
    distance from the center of the circle to its side. The default value is `50`.
    |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `radius` | 否 | 圆的半径定义了它的大小。半径是从圆心到其边缘的距离。默认值是 `50`。 |'
- en: '| `segments` | No | This property defines the number of faces that are used
    to create the circle. The minimum number is `3`, and if not specified, this number
    defaults to `8`. A higher value means a smoother circle. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `segments` | 否 | 此属性定义了用于创建圆的面数。最小值为 `3`，如果未指定，则默认为 `8`。值越大，圆越平滑。 |'
- en: '| `thetaStart` | No | This property defines the position from which to start
    drawing the circle. This value can range from `0` to `2 * PI`, and the default
    value is `0`. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `thetaStart` | 否 | 此属性定义从哪个位置开始绘制圆。此值范围从 `0` 到 `2 * PI`，默认值为 `0`。 |'
- en: '| `thetaLength` | No | This property defines to what extent the circle is completed.
    This defaults to `2 * PI` (a full circle) when not specified. For instance, if
    you specify `0.5 * PI` for this value, you''ll get a quarter circle. Use this
    property together with the `thetaStart` property to define the shape of the circle.
    |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `thetaLength` | 否 | 此属性定义圆完成到什么程度。未指定时默认为 `2 * PI`（一个完整的圆）。例如，如果您为此值指定 `0.5
    * PI`，则将得到四分之一的圆。使用此属性与 `thetaStart` 属性一起定义圆的形状。 |'
- en: 'You can create a full circle using the following snippet of code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下代码片段创建一个完整的圆：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you wanted to create half a circle from this geometry, you''d use something
    like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想从该几何体创建半个圆，您可以使用类似以下的内容：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Before moving on to the next geometry, a quick note on the orientation that
    Three.js uses when creating these two-dimensional shapes (`THREE.PlaneGeometry`,
    `THREE.CircleGeometry`, and `THREE.ShapeGeometry`): Three.js creates these objects
    *standing up*, so they lie along the *x*-*y* plane. This is very logical since
    they are two-dimensional shapes. However, often, especially with `THREE.PlaneGeometry`,
    you want to have the mesh lying down on the ground (the `x`-`z` plane)—some sort
    of ground area on which you can position the rest of your objects. The easiest
    way to create a two-dimensional object that is horizontally orientated instead
    of vertically is by rotating the mesh a quarter rotation backwards (`-PI/2`) around
    its *x* axis, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一个几何体之前，简要说明Three.js在创建这些二维形状（`THREE.PlaneGeometry`、`THREE.CircleGeometry`
    和 `THREE.ShapeGeometry`）时使用的方向：Three.js将这些对象创建为“站立”状态，因此它们沿 *x*-*y* 平面排列。这对于二维形状来说是非常合理的。然而，通常，特别是使用
    `THREE.PlaneGeometry` 时，您可能希望网格在地面（`x`-`z` 平面）上水平放置——一种可以放置其他物体的地面区域。要创建一个水平而不是垂直的二维对象，最简单的方法是将网格绕其
    *x* 轴旋转四分之一圈（`-PI/2`），如下所示：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That's all for `THREE.CircleGeometry`. The next geometry, `THREE.RingGeometry`,
    looks a lot like `THREE.CircleGeometry`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `THREE.CircleGeometry` 的介绍就到这里。下一个几何体，`THREE.RingGeometry`，看起来与 `THREE.CircleGeometry`
    非常相似。
- en: THREE.RingGeometry
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: THREE.RingGeometry
- en: 'With `THREE.RingGeometry`, you can create a 2D object that not only closely
    resembles `THREE.CircleGeometry`, but also allows you to define a hole in the
    center (see `03-basic-3d-geometries-ring.html`):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `THREE.RingGeometry`，您可以创建一个二维对象，它不仅与 `THREE.CircleGeometry` 非常相似，而且还允许您定义中心孔（见
    `03-basic-3d-geometries-ring.html`）：
- en: '![THREE.RingGeometry](img/2215OS_05_03.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.RingGeometry](img/2215OS_05_03.jpg)'
- en: '`THREE.RingGeometry` doesn''t have any required properties (see the next table
    for the default values), so to create this geometry, you only have to specify
    the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.RingGeometry` 没有任何必需的属性（请参阅下表中的默认值），因此要创建此几何体，您只需指定以下内容：'
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can further customize the appearance of the ring geometry by passing the
    following arguments into the constructor:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将以下参数传递给构造函数来进一步自定义环状几何体的外观：
- en: '| Property | Mandatory | Description |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 必选 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `innerRadius` | No | The inner radius of a circle defines the size of the
    center hole. If this property is set to `0`, no hole will be shown. The default
    value is `0`. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `innerRadius` | 否 | 圆的内半径定义了中心孔的大小。如果此属性设置为 `0`，则不会显示孔。默认值为 `0`。 |'
- en: '| `outerRadius` | No | The outer radius of a circle defines its size. The radius
    is the distance from the center of the circle to its side. The default value is
    `50`. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `outerRadius` | 否 | 圆的外半径定义了其大小。半径是从圆心到其边缘的距离。默认值为 `50`。 |'
- en: '| `thetaSegments` | No | This is the number of diagonal segments that will
    be used to create the circle. A higher value means a smoother ring. The default
    value is `8`. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `thetaSegments` | 否 | 这是指用于创建圆的斜边段数。值越大，圆环越平滑。默认值为 `8`。 |'
- en: '| `phiSegments` | No | This is the number of segments required to be used along
    the length of the ring. The default value is `8`. This doesn''t really affect
    the smoothness of the circle but increases the number of faces. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `phiSegments` | 否 | 这是指定用于环长度的段落数量。默认值是 `8`。这实际上并不影响圆的平滑度，但会增加面的数量。|'
- en: '| `thetaStart` | No | This defines the position from which to start drawing
    the circle. This value can range from `0` to `2 * PI`, and the default value is
    `0`. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `thetaStart` | 否 | 这定义了开始绘制圆的位置。这个值可以从 `0` 到 `2 * PI`，默认值是 `0`。|'
- en: '| `thetaLength` | No | This defines the extent to which the circle is completed.
    This defaults to `2 * PI` (a full circle) when not specified. For instance, if
    you specify `0.5 * PI` for this value, you''ll get a quarter circle. Use this
    property together with the `thetaStart` property to define the shape of the circle.
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `thetaLength` | 否 | 这定义了圆完成的范围。如果没有指定，默认值为 `2 * PI`（一个完整的圆）。例如，如果你为这个值指定
    `0.5 * PI`，你将得到一个四分之一的圆。使用这个属性与 `thetaStart` 属性一起定义圆的形状。|'
- en: 'In the next section, we''ll look at the last of the two-dimensional shapes:
    `THREE.ShapeGeometry`.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将查看二维形状中的最后一个：`THREE.ShapeGeometry`。
- en: THREE.ShapeGeometry
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: THREE.ShapeGeometry
- en: '`THREE.PlaneGeometry` and `THREE.CircleGeometry` have limited ways of customizing
    their appearance. If you want to create custom two-dimensional shapes, you can
    use `THREE.ShapeGeometry`. With `THREE.ShapeGeometry`, you have a couple of functions
    you can call to create your own shapes. You can compare this functionality with
    the `<path>` element functionality that is also available to the HTML canvas element
    and SVG. Let''s start with an example, and after that, we''ll show you how you
    can use the various functions to draw your own shape. The `04-basic-2d-geometries-shape.html`
    example can be found in the sources of this chapter. The following screenshot
    shows this example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.PlaneGeometry` 和 `THREE.CircleGeometry` 在自定义外观方面有限。如果你想创建自定义的二维形状，你可以使用
    `THREE.ShapeGeometry`。使用 `THREE.ShapeGeometry`，你可以调用一些函数来创建自己的形状。你可以将这个功能与也适用于
    HTML canvas 元素和 SVG 的 `<path>` 元素功能进行比较。让我们从一个例子开始，然后我们将向你展示如何使用各种函数来绘制你自己的形状。`04-basic-2d-geometries-shape.html`
    示例可以在本章的源代码中找到。以下截图显示了此示例：'
- en: '![THREE.ShapeGeometry](img/2215OS_05_04.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.ShapeGeometry](img/2215OS_05_04.jpg)'
- en: 'In this example, you can see a custom-created two-dimensional shape. Before
    going into a description of the properties, first let''s look at the code that
    is used to create this shape. Before we create `THREE.ShapeGeometry`, we first
    have to create `THREE.Shape`. You can trace these steps by looking at the previous
    screenshot, where we start in the bottom-right corner. Here''s how we created
    `THREE.Shape`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你可以看到一个自定义创建的二维形状。在进入属性描述之前，首先让我们看看创建这个形状所使用的代码。在我们创建 `THREE.ShapeGeometry`
    之前，我们首先必须创建 `THREE.Shape`。你可以通过查看之前的截图来追踪这些步骤，我们从右下角开始。以下是创建 `THREE.Shape` 的方法：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this piece of code, you can see that we created the outline of this shape
    using lines, curves, and splines. After that, we punched a number of holes in
    this shape using the `holes` property of `THREE.Shape`. In this section, though,
    we''re talking about `THREE.ShapeGeometry` and not `THREE.Shape`. To create a
    geometry from `THREE.Shape`, we need to pass in `THREE.Shape` (returned in our
    case from the `drawShape()` function) as the argument to `THREE.ShapeGeometry`,
    as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，你可以看到我们使用线条、曲线和样条曲线创建了这个形状的轮廓。之后，我们使用 `THREE.Shape` 的 `holes` 属性在这个形状上打了许多孔。然而，在本节中，我们讨论的是
    `THREE.ShapeGeometry` 而不是 `THREE.Shape`。要从 `THREE.Shape` 创建一个几何体，我们需要将 `THREE.Shape`（在我们的例子中由
    `drawShape()` 函数返回）作为参数传递给 `THREE.ShapeGeometry`，如下所示：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The result from this function is a geometry that can be used to create a mesh.
    There is also an alternative way of creating `THREE.ShapeGeometry` when you already
    have a shape. You can call `shape.makeGeometry(options)`, which will return an
    instance of `THREE.ShapeGeometry` (for an explanation of the options, see the
    next table).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的结果是一个可以用来创建网格的几何体。当你已经有一个形状时，还有另一种创建 `THREE.ShapeGeometry` 的方法。你可以调用 `shape.makeGeometry(options)`，这将返回一个
    `THREE.ShapeGeometry` 实例（有关选项的解释，请参阅下一表）。
- en: 'Let''s first look at the parameters you can pass in to `THREE.ShapeGeometry`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看你可以传递给 `THREE.ShapeGeometry` 的参数：
- en: '| Property | Mandatory | Description |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 必需 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `shapes` | Yes | These are one or more `THREE.Shape` objects that are used
    to create `THREE.Geometry`. You can either pass in a single `THREE.Shape` object
    or an array of `THREE.Shape` objects. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `shapes` | Yes | 这些是用于创建 `THREE.Geometry` 的一或多个 `THREE.Shape` 对象。您可以传入单个
    `THREE.Shape` 对象或 `THREE.Shape` 对象的数组。|'
- en: '| `options` | No | You can also pass in some `options` that are applied to
    all the shapes passed in with the `shapes` argument. An explanation of these options
    is given here:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '| `options` | No | 您也可以传递一些应用于所有通过 `shapes` 参数传入的形状的 `options`。这些选项的解释如下：'
- en: '`curveSegments`: This property determines how smooth the curves created from
    the shape are. The default value is `12`.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`curveSegments`：此属性确定从形状创建的曲线的平滑度。默认值为 `12`。'
- en: '`material`: This is the `materialIndex` property used for the faces created
    for the specified shapes. When you use `THREE.MeshFaceMaterial` together with
    this geometry, the `materialIndex` property determines which of the materials
    passed in is used for the faces of the shapes passed in.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`material`：这是用于为指定的形状创建的面的 `materialIndex` 属性。当您与该几何体一起使用 `THREE.MeshFaceMaterial`
    时，`materialIndex` 属性确定传入的材料中哪一个用于传入的形状的面。'
- en: '`UVGenerator`: When you use a texture with your material, the UV mapping determines
    what part of a texture is used for a specific face. With the `UVGenerator` property,
    you can pass in your own object that will create the UV settings for the faces
    that are created for the shapes passed in. More information on UV settings can
    be found in [Chapter 10](ch10.html "Chapter 10. Loading and Working with Textures"),
    *Loading and Working with Textures*. If none are specified, `THREE.ExtrudeGeometry.WorldUVGenerator`
    is used.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UVGenerator`：当您使用材质与纹理一起使用时，UV 映射确定用于特定面的纹理的哪个部分。使用 `UVGenerator` 属性，您可以传递自己的对象，该对象将为为传入的形状创建的面的
    UV 设置。有关 UV 设置的更多信息，请参阅第 10 章 [Chapter 10](ch10.html "第 10 章。加载和使用纹理")，*加载和使用纹理*。如果没有指定，则使用
    `THREE.ExtrudeGeometry.WorldUVGenerator`。'
- en: '|'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'The most important part of `THREE.ShapeGeometry` is `THREE.Shape`, which you
    use to create the shape, so let''s look at the list of drawing functions you can
    use to create `THREE.Shape` (note that these are actually functions of the `THREE.Path`
    object, from which `THREE.Shape` extends):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.ShapeGeometry` 最重要的部分是 `THREE.Shape`，您使用它来创建形状，因此让我们看看您可以使用哪些绘图函数来创建
    `THREE.Shape`（请注意，这些实际上是 `THREE.Path` 对象的函数，`THREE.Shape` 是从它扩展出来的）：'
- en: '| Name | Description |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `moveTo(x,y)` | Move the drawing position to the *x* and *y* coordinates
    specified. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `moveTo(x,y)` | 将绘图位置移动到指定的 *x* 和 *y* 坐标。|'
- en: '| `lineTo(x,y)` | Draw a line from the current position (for example, set by
    the `moveTo` function) to the *x* and *y* coordinates provided. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `lineTo(x,y)` | 从当前位置（例如，由 `moveTo` 函数设置）绘制到提供的 *x* 和 *y* 坐标。|'
- en: '| `quadraticCurveTo(aCPx, aCPy, x, y)` | You can use two different ways of
    specifying curves. You can use this `quadraticCurveTo` function, or you can use
    the `bezierCurveTo` function (see the next table row). The difference between
    these two functions is how you specify the curvature of the curve. The following
    figure explains the differences between these two options:![THREE.ShapeGeometry](img/2215OS_05_05.jpg)For
    a quadratic curve, we need to specify one additional point (using the `aCPx` and
    `aCPy` arguments), and the curve is based solely on that point and, of course,
    the specified end point (from the *x* and *y* arguments). For a cubic curve (used
    by the `bezierCurveTo` function), you specify two additional points to define
    the curve. The start point is the current position of the path. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `quadraticCurveTo(aCPx, aCPy, x, y)` | 您可以使用两种不同的方式来指定曲线。您可以使用这个 `quadraticCurveTo`
    函数，或者使用 `bezierCurveTo` 函数（见下表下一行）。这两个函数之间的区别在于您如何指定曲线的曲率。以下图解释了这两种选项的区别：![THREE.ShapeGeometry](img/2215OS_05_05.jpg)对于二次曲线，我们需要指定一个额外的点（使用
    `aCPx` 和 `aCPy` 参数），曲线完全基于这一点，当然还有指定的终点（来自 *x* 和 *y* 参数）。对于三次曲线（由 `bezierCurveTo`
    函数使用），您指定两个额外的点来定义曲线。起点是路径的当前位置。|'
- en: '| `bezierCurveTo(aCPx1, aCPy1, aCPx2, aCPy2, x, y)` | This draws a curve based
    on the arguments supplied. For an explanation, see the previous table entry. The
    curve is drawn based on the two coordinates that define the curve (`aCPx1`, `aCPy1`,
    `aCPx2`, and `aCPy2`) and the end coordinate (*x* and *y*). The start point is
    the current position of the path. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `bezierCurveTo(aCPx1, aCPy1, aCPx2, aCPy2, x, y)` | 此函数根据提供的参数绘制曲线。有关解释，请参阅之前的表条目。曲线是根据定义曲线的两个坐标（`aCPx1`、`aCPy1`、`aCPx2`
    和 `aCPy2`）以及终点坐标（*x* 和 *y*）绘制的。起点是路径的当前位置。|'
- en: '| `splineThru(pts)` | This function draws a fluid line through the set of coordinates
    provided (`pts`). This argument should be an array of `THREE.Vector2` objects.
    The start point is the current position of the path. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `splineThru(pts)` | 此函数通过提供的坐标集（`pts`）绘制一条流畅的线。此参数应是一个 `THREE.Vector2` 对象的数组。起点是路径的当前位置。|'
- en: '| `arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise)` | This draws a
    circle (or part of a circle). The circle starts from the current position of the
    path. Here, `aX` and `aY` are used as offsets from the current position. Note
    that `aRadius` sets the size of the circle and `aStartAngle` and `aEndAngle` define
    how large a part of the circle is drawn. The Boolean property `aClockwise` determines
    whether the circle is drawn clockwise or counterclockwise. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise)` | 这绘制一个圆（或圆的一部分）。圆从路径的当前位置开始。在这里，`aX`
    和 `aY` 被用作当前位置的偏移量。请注意，`aRadius` 设置圆的大小，而 `aStartAngle` 和 `aEndAngle` 定义绘制圆的哪一部分。布尔属性
    `aClockwise` 决定圆是顺时针绘制还是逆时针绘制。|'
- en: '| `absArc(aX, aY, aRadius, aStartAngle, aEndAngle, AClockwise)` | See the description
    of `arc`. The position is absolute instead of relative to the current position.
    |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `absArc(aX, aY, aRadius, aStartAngle, aEndAngle, AClockwise)` | 请参阅 `arc`
    的描述。位置是绝对的，而不是相对于当前位置。|'
- en: '| `ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise)` |
    See the description of `arc`. As an addition, with the `ellipse` function, we
    can separately set the *x* radius and the *y* radius. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise)` |
    请参阅 `arc` 的描述。作为补充，使用 `ellipse` 函数，我们可以分别设置 *x* 半径和 *y* 半径。|'
- en: '| `absEllipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise)`
    | See the description of `ellipse`. The position is absolute instead of relative
    to the current position. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `absEllipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise)`
    | 请参阅 `ellipse` 的描述。位置是绝对的，而不是相对于当前位置。|'
- en: '| `fromPoints(vectors)` | If you pass in an array of `THREE.Vector2` (or `THREE.Vector3`)
    objects into this function, Three.js will create a path using straight lines from
    the supplied vectors. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `fromPoints(vectors)` | 如果您向此函数传递一个 `THREE.Vector2`（或 `THREE.Vector3`）对象的数组，Three.js
    将使用提供的向量创建一个路径。|'
- en: '| `holes` | The `holes` property contains an array of `THREE.Shape` objects.
    Each of the objects in this array is rendered as a hole. A good example of this
    is the example we saw at the beginning of this section. In that code fragment,
    we added three `THREE.Shape` objects to this array. One for the left eye, one
    for the right eye, and one for the mouth of our main `THREE.Shape` object. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `holes` | `holes` 属性包含一个 `THREE.Shape` 对象的数组。数组中的每个对象都作为孔渲染。一个很好的例子是我们在这个部分开头看到的例子。在那个代码片段中，我们向这个数组添加了三个
    `THREE.Shape` 对象。一个用于左眼，一个用于右眼，还有一个用于我们主要的 `THREE.Shape` 对象的嘴巴。|'
- en: 'In this example, we created `THREE.ShapeGeometry` from a `THREE.Shape` object
    using the new `THREE.ShapeGeometry(drawShape()))` constructor. The `THREE.Shape`
    object itself also has a few helper functions you can use to create geometries.
    They are as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用新的构造函数 `THREE.ShapeGeometry(drawShape()))` 从 `THREE.Shape` 对象创建了
    `THREE.ShapeGeometry`。`THREE.Shape` 对象本身也有一些辅助函数，您可以使用它们来创建几何体。它们如下所示：
- en: '| Name | Description |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| --- | --- |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `makeGeometry(options)` | This returns `THREE.ShapeGeometry` from `THREE.Shape`.
    For more information on the available options, look at the properties of `THREE.ShapeGeometry`,
    which we discussed earlier. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `makeGeometry(options)` | 此函数从 `THREE.Shape` 返回 `THREE.ShapeGeometry`。有关可用选项的更多信息，请参阅我们之前讨论的
    `THREE.ShapeGeometry` 属性。|'
- en: '| `createPointsGeometry(divisions)` | This converts the shape to a set of points.
    The `divisions` property defines how many points are returned. If this value is
    higher, more points are returned and the resulting line is smoother. The divisions
    apply to each part of the path separately. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `createPointsGeometry(divisions)` | 此函数将形状转换为点集。`divisions` 属性定义返回多少个点。如果此值更高，则返回更多点，并且生成的线更平滑。这些分割分别应用于路径的每一部分。|'
- en: '| `createSpacedPointsGeometry(divisions)` | Even this converts the shape into
    a set of points, but this time, apply the division to the complete path at once.
    |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `createSpacedPointsGeometry(divisions)` | 即使这也将形状转换成一组点，但这次，一次性将分割应用于完整路径。
    |'
- en: 'When you create a set of points, use `createPointsGeometry` or `createSpacedPointsGeometry`;
    you can use the created points to draw a line, as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一组点时，使用 `createPointsGeometry` 或 `createSpacedPointsGeometry`；你可以使用创建的点来绘制线条，如下所示：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When you click on the **asPoints** or **asSpacedPoints** buttons in the example,
    you''ll see something like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在示例中点击 **asPoints** 或 **asSpacedPoints** 按钮，你会看到如下内容：
- en: '![THREE.ShapeGeometry](img/2215OS_05_06.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.ShapeGeometry](img/2215OS_05_06.jpg)'
- en: That's it for the two-dimensional shapes. The next part will show and explain
    the basic three-dimensional shapes.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 两个维度的形状就介绍到这里。下一部分将展示并解释基本的三维形状。
- en: Three-dimensional geometries
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 三维几何
- en: 'In this section on the basic three-dimensional geometries, we''ll start with
    the geometry we''ve already seen a couple of times: `THREE.BoxGeometry`.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节关于基本三维几何的介绍中，我们将从我们已经见过几次的几何体开始：`THREE.BoxGeometry`。
- en: THREE.BoxGeometry
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: THREE.BoxGeometry
- en: '`THREE.BoxGeometry` is a very simple 3D geometry that allows you to create
    a box by specifying its width, height, and depth. We''ve added an example, `05-basic-3d-geometries-cube.html`,
    where you can play around with these properties. The following screenshot shows
    this geometry:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.BoxGeometry` 是一个非常简单的 3D 几何体，允许你通过指定其宽度、高度和深度来创建一个立方体。我们添加了一个示例，`05-basic-3d-geometries-cube.html`，你可以在这里对这些属性进行操作。以下截图显示了此几何体：'
- en: '![THREE.BoxGeometry](img/2215OS_05_07.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.BoxGeometry](img/2215OS_05_07.jpg)'
- en: 'As you can see in this example, by changing the `width`, `height`, and `depth`
    properties of `THREE.BoxGeometry`, you can control the size of the resulting mesh.
    These three properties are also mandatory when you create a new cube, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如此例所示，通过改变 `THREE.BoxGeometry` 的 `width`、`height` 和 `depth` 属性，你可以控制生成的网格的大小。当你创建一个新的立方体时，这三个属性也是必须的，如下所示：
- en: '[PRE10]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the example, you can also see a couple of other properties that you can
    define on the cube. The following table explains all the properties:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，你还可以看到一些其他可以在立方体上定义的属性。以下表格解释了所有属性：
- en: '| Property | Mandatory | Description |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 必需 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `Width` | Yes | This is the width of the cube. This is the length of the
    vertices of the cube along the *x* axis. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `Width` | 是 | 这是立方体的宽度。这是立方体顶点沿 *x* 轴的长度。 |'
- en: '| `height` | Yes | This is the height of the cube. This is the length of the
    vertices of the cube along the *y* axis. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `height` | 是 | 这是立方体的高度。这是立方体顶点沿 *y* 轴的长度。 |'
- en: '| `depth` | Yes | This is the depth of the cube. This is the length of the
    vertices of the cube along the *z* axis. |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `depth` | 是 | 这是立方体的深度。这是立方体顶点沿 *z* 轴的长度。 |'
- en: '| `widthSegments` | No | This is the number of segments into which we divide
    a face along the cube''s *x* axis. The default value is `1`. |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `widthSegments` | 否 | 这是我们沿着立方体的 *x* 轴将面分割成多少段。默认值是 `1`。 |'
- en: '| `heightSegments` | No | This is the number of segments into which we divide
    a face along the cube''s *y* axis. The default value is `1`. |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `heightSegments` | 否 | 这是我们沿着立方体的 *y* 轴将面分割成多少段。默认值是 `1`。 |'
- en: '| `depthSegments` | No | This is the number of segments into which we divide
    a face along the cube''s *z* axis. The default value is `1`. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `depthSegments` | 否 | 这是我们沿着立方体的 *z* 轴将面分割成多少段。默认值是 `1`。 |'
- en: By increasing the various segment properties, you divide the six main faces
    of the cube into smaller faces. This is useful if you want to set specific material
    properties on parts of the cube using `THREE.MeshFaceMaterial`. `THREE.BoxGeometry`
    is a very simple geometry. Another simple one is `THREE.SphereGeometry`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 通过增加各种分段属性，你可以将立方体的六个主要面分割成更小的面。如果你想在立方体的某些部分使用 `THREE.MeshFaceMaterial` 设置特定的材质属性，这很有用。`THREE.BoxGeometry`
    是一个非常简单的几何体。另一个简单的几何体是 `THREE.SphereGeometry`。
- en: THREE.SphereGeometry
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: THREE.SphereGeometry
- en: 'With `SphereGeometry`, you can create a three-dimensional sphere. Let''s dive
    straight into the example, `06-basic-3d-geometries-sphere.html`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `SphereGeometry`，你可以创建一个三维球体。让我们直接进入示例，`06-basic-3d-geometries-sphere.html`：
- en: '![THREE.SphereGeometry](img/2215OS_05_08.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.SphereGeometry](img/2215OS_05_08.jpg)'
- en: 'In the previous screenshot, we show you a half-open sphere that was created
    based on `THREE.SphereGeometry`. This geometry is a very flexible one and can
    be used to create all kinds of sphere-related geometries. A basic `THREE.SphereGeometry`,
    though, can be created as easily as this: `new` `THREE.SphereGeometry()`. The
    following properties can be used to tune what the resulting mesh looks like:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们向您展示了基于 `THREE.SphereGeometry` 创建的半开放球体。这种几何形状非常灵活，可以用来创建各种与球体相关的几何形状。然而，一个基本的
    `THREE.SphereGeometry` 可以像这样轻松创建：`new THREE.SphereGeometry()`。以下属性可以用来调整最终网格的外观：
- en: '| Property | Mandatory | Description |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 必需 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `radius` | No | This is used to set the radius for the sphere. This defines
    how large the resulting mesh will be. The default value is `50`. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `radius` | 否 | 这用于设置球体的半径。这定义了最终网格的大小。默认值是 `50`。 |'
- en: '| `widthSegments` | No | This is the number of segments to be used vertically.
    More segments means a smoother surface. The default value is `8` and the minimum
    value is `3`. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `widthSegments` | 否 | 这是指垂直方向上要使用的分段数。分段数越多，表面越平滑。默认值是 `8`，最小值是 `3`。 |'
- en: '| `heightSegments` | No | This is the number of segments to be used horizontally.
    The more the segments, the smoother the surface of the sphere. The default value
    is `6` and the minimum value is `2`. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `heightSegments` | 否 | 这是指水平方向上要使用的分段数。分段数越多，球体的表面越平滑。默认值是 `6`，最小值是 `2`。
    |'
- en: '| `phiStart` | No | This determines where to start drawing the sphere along
    its *x* axis. This can range from `0` to `2 * PI`. The default value is `0`. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `phiStart` | 否 | 这决定了在球体的 *x* 轴上开始绘制球体的位置。这可以从 `0` 到 `2 * PI` 变化，默认值是 `0`。
    |'
- en: '| `phiLength` | No | This determines how far from `phiStart` the sphere is
    be drawn. `2 * PI` will draw a full sphere and `0.5 * PI` will draw an open quarter
    sphere. The default value is `2 * PI`. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `phiLength` | 否 | 这决定了球体从 `phiStart` 起绘制的距离。`2 * PI` 将绘制一个完整的球体，而 `0.5 *
    PI` 将绘制一个开放的四分之一球体。默认值是 `2 * PI`。 |'
- en: '| `thetaStart` | No | This determines where to start drawing the sphere along
    its *x*-axis. This can range from `0` to `PI`, and the default value is `0`. |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `thetaStart` | 否 | 这决定了在球体的 *x* 轴上开始绘制球体的位置。这可以从 `0` 到 `PI` 变化，默认值是 `0`。
    |'
- en: '| `thetaLength` | No | This determines how far from `phiStart` the sphere is
    drawn. The `PI` value is a full sphere, whereas `0.5 * PI` will draw only the
    top half of the sphere. The default value is `PI`. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `thetaLength` | 否 | 这决定了球体从 `phiStart` 起绘制的距离。`PI` 值表示一个完整的球体，而 `0.5 * PI`
    将只绘制球体的上半部分。默认值是 `PI`。 |'
- en: 'The `radius`, `widthSegments`, and `heightSegments` properties should be clear.
    We''ve already seen these kinds of properties in other examples. The `phiStart`,
    `phiLength`, `thetaStart`, and `thetaLength` properties are a bit harder to understand
    without looking at an example. Luckily though, you can experiment with these properties
    from the menu in the `06-basic-3d-geometries-sphere.html` example and create interesting
    geometries such as these:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`radius`、`widthSegments` 和 `heightSegments` 属性应该是清晰的。我们已经在其他示例中看到了这些类型的属性。`phiStart`、`phiLength`、`thetaStart`
    和 `thetaLength` 属性没有查看示例可能难以理解。幸运的是，您可以从 `06-basic-3d-geometries-sphere.html`
    示例中的菜单中实验这些属性，并创建如这些有趣的几何形状：'
- en: '![THREE.SphereGeometry](img/2215OS_05_09.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.SphereGeometry](img/2215OS_05_09.jpg)'
- en: The next one on the list is `THREE.CylinderGeometry`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的下一个是 `THREE.CylinderGeometry`。
- en: THREE.CylinderGeometry
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: THREE.CylinderGeometry
- en: 'With this geometry, we can create cylinders and cylinder-like objects. As for
    all the other geometries, we also have an example (`07-basic-3d-geometries-cylinder.html`)
    that lets you experiment with the properties of this geometry, the screenshot
    for which is as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种几何形状，我们可以创建圆柱体和类似圆柱体的对象。对于所有其他几何形状，我们也有一个示例 (`07-basic-3d-geometries-cylinder.html`)，让您可以实验这种几何形状的属性，其截图如下：
- en: '![THREE.CylinderGeometry](img/2215OS_05_10.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.CylinderGeometry](img/2215OS_05_10.jpg)'
- en: 'When you create `THREE.CylinderGeometry`, there aren''t any mandatory arguments.
    So you can create a cylinder by just calling `new THREE.CylinderGeometry()`. You
    can pass in a number of properties, as you can see in the example, to alter the
    appearance of this cylinder. The properties are explained in this table:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建 `THREE.CylinderGeometry` 时，没有必需的参数。因此，您只需调用 `new THREE.CylinderGeometry()`
    就可以创建一个圆柱体。您可以通过传递一些属性来改变这个圆柱体的外观，如示例所示。属性解释如下表：
- en: '| Property | Mandatory | Description |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 必需 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `radiusTop` | No | This sets the size this cylinder will have at the top.
    The default value is `20`. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| `radiusTop` | 否 | 这设置了圆柱顶部的尺寸。默认值是 `20`。 |'
- en: '| `radiusBottom` | No | This sets the size this cylinder will have at the bottom.
    The default value is `20`. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| `radiusBottom` | 否 | 这设置了圆柱底部的尺寸。默认值是 `20`。 |'
- en: '| `height` | No | This property sets the height of the cylinder. The default
    height is `100`. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| `height` | 否 | 此属性设置了圆柱的高度。默认高度是 `100`。 |'
- en: '| `radialSegments` | No | This determines the number of segments along the
    radius of the cylinder. This defaults to `8`. More segments means a smoother cylinder.
    |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `radialSegments` | 否 | 这决定了圆柱半径方向上的分段数。默认值是 `8`。分段数越多，圆柱越平滑。 |'
- en: '| `heightSegments` | No | This determines the number of segments along the
    height of the cylinder. The default value is `1`. More segments means more faces.
    |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `heightSegments` | 否 | 这决定了圆柱高度方向上的分段数。默认值是 `1`。分段数越多，面数越多。 |'
- en: '| `openEnded` | No | This determines whether or not the mesh is closed at the
    top and the bottom. The default value is `false`. |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `openEnded` | 否 | 这决定了网格是否在顶部和底部封闭。默认值是 `false`。 |'
- en: These are all very basic properties you can use to configure the cylinder. One
    interesting aspect, though, is when you use a negative radius for the top (or
    for the bottom). If you do this, you can use this geometry to create an hourglass-like
    shape, as shown in the following screenshot. One thing to note here, as you can
    see from the colors, is that the top half in this case is turned inside out. If
    you use a material that isn't configured with `THREE.DoubleSide`, you won't see
    the top half.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是非常基本的属性，您可以使用它们来配置圆柱。然而，一个有趣的现象是，当您为顶部（或底部）使用负半径时。如果您这样做，您可以使用这个几何形状来创建类似沙漏的形状，如下面的截图所示。在此处需要注意的一点是，如您从颜色中看到的，在这种情况下，上半部分是翻转的。如果您使用未配置为
    `THREE.DoubleSide` 的材质，您将看不到上半部分。
- en: '![THREE.CylinderGeometry](img/2215OS_05_11.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.CylinderGeometry](img/2215OS_05_11.jpg)'
- en: The next geometry is `THREE.TorusGeometry`, which you can use to create donut-like
    shapes.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个几何形状是 `THREE.TorusGeometry`，您可以使用它来创建类似甜甜圈的形状。
- en: THREE.TorusGeometry
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: THREE.TorusGeometry
- en: 'A torus is a simple shape that looks like a donut. The following screenshot,
    which you can get yourself by opening the `08-basic-3d-geometries-torus.html`
    example, shows `THREE.TorusGeometry` in action:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 扭曲面是一个看起来像甜甜圈的基本形状。以下截图展示了 `THREE.TorusGeometry` 的实际应用，您可以通过打开 `08-basic-3d-geometries-torus.html`
    示例来获取此截图：
- en: '![THREE.TorusGeometry](img/2215OS_05_12.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.TorusGeometry](img/2215OS_05_12.jpg)'
- en: 'Just like most of the simple geometries, there aren''t any mandatory arguments
    when creating `THREE.TorusGeometry`. The following table lists the arguments you
    can specify when you create this geometry:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 就像大多数简单几何形状一样，创建 `THREE.TorusGeometry` 时没有必填参数。以下表格列出了您在创建此几何形状时可以指定的参数：
- en: '| Property | Mandatory | Description |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 必需 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `radius` | No | This sets the size of the complete torus. The default value
    is `100`. |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `radius` | 否 | 这设置了完整扭曲面的尺寸。默认值是 `100`。 |'
- en: '| `tube` | No | This sets the radius of the tube (the actual donut). The default
    value for this attribute is `40`. |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `tube` | 否 | 这设置了管子的半径（实际的甜甜圈）。此属性的默认值是 `40`。 |'
- en: '| `radialSegments` | No | This determines the number of segments to be used
    along the length of the torus. The default value is `8`. See the effect of changing
    this value in the demo. |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `radialSegments` | 否 | 这决定了扭曲面长度方向上要使用的分段数。默认值是 `8`。在演示中查看更改此值的效果。 |'
- en: '| `tubularSegments` | No | This determines the number of segments to be used
    along the width of the torus. The default value is `6`. See the effect of changing
    this value in the demo. |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `tubularSegments` | 否 | 这决定了扭曲面宽度方向上要使用的分段数。默认值是 `6`。在演示中查看更改此值的效果。 |'
- en: '| `arc` | No | With this property, you can control whether the torus is drawn
    full circle. The default of this value is `2 * PI` (a full circle). |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `arc` | 否 | 使用此属性，您可以控制扭曲面是否绘制成完整的圆圈。此值的默认值是 `2 * PI`（一个完整的圆圈）。 |'
- en: 'Most of these are very basic properties that you''ve already seen. The `arc`
    property, however, is a very interesting one. With this property, you define whether
    the donut makes a full circle or only a partial one. By experimenting with this
    property, you can create very interesting meshes, such as the following one with
    an arc set to `0.5 * PI`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数这些都是非常基础的属性，你已经见过。然而，`arc` 属性却非常有趣。使用这个属性，你定义甜甜圈是形成一个完整的圆还是只有部分圆。通过实验这个属性，你可以创建非常有趣的网格，如下面设置
    `arc` 为 `0.5 * PI` 的示例：
- en: '![THREE.TorusGeometry](img/2215OS_05_13.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.TorusGeometry](img/2215OS_05_13.jpg)'
- en: '`THREE.TorusGeometry` is a very straightforward geometry. In the next section,
    we''ll look at a geometry that almost shares its name but is much less straightforward:
    `THREE.TorusKnotGeometry`.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.TorusGeometry` 是一个非常直接的几何形状。在下一节中，我们将查看一个几乎与其名称相同但远不那么直接的几何形状：`THREE.TorusKnotGeometry`。'
- en: THREE.TorusKnotGeometry
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: THREE.TorusKnotGeometry
- en: 'With `THREE.TorusKnotGeometry`, you can create a torus knot. A torus knot is
    a special kind of knot that looks like a tube that winds around itself a couple
    of times. The best way to explain this is by looking at the `09-basic-3d-geometries-torus-knot.html`
    example. The following screenshot shows this geometry:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `THREE.TorusKnotGeometry`，你可以创建一个环面结。环面结是一种特殊的结，看起来像是一个绕着自己缠绕几圈的管子。解释这个概念最好的方式是查看
    `09-basic-3d-geometries-torus-knot.html` 示例。以下截图展示了这种几何形状：
- en: '![THREE.TorusKnotGeometry](img/2215OS_05_14.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.TorusKnotGeometry](img/2215OS_05_14.jpg)'
- en: 'If you open this example and play around with the `p` and `q` properties, you
    can create all kinds of beautiful geometries. The `p` property defines how often
    the knot winds around its axis, and `q` defines how much the knot winds around
    its interior.If this sounds a bit vague, don''t worry. You don''t need to understand
    these properties to create beautiful knots, such as the one shown in the following
    screenshot (for those interested in the details, Wikipedia has a good article
    on this subject at [http://en.wikipedia.org/wiki/Torus_knot](http://en.wikipedia.org/wiki/Torus_knot)):'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开这个示例并调整 `p` 和 `q` 属性，你可以创建各种美丽的几何形状。`p` 属性定义了结绕其轴旋转的频率，而 `q` 定义了结绕其内部旋转的次数。如果这听起来有点模糊，不要担心。你不需要理解这些属性就能创建美丽的结，例如以下截图所示（对细节感兴趣的人，维基百科上有关于这个主题的好文章，网址为
    [http://en.wikipedia.org/wiki/Torus_knot](http://en.wikipedia.org/wiki/Torus_knot))）：
- en: '![THREE.TorusKnotGeometry](img/2215OS_05_15.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.TorusKnotGeometry](img/2215OS_05_15.jpg)'
- en: 'With the example for this geometry, you can play around with the following
    properties and see the effect various combinations of `p` and `q` have on this
    geometry:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个几何形状的示例，你可以调整以下属性并查看 `p` 和 `q` 的各种组合对这个几何形状的影响：
- en: '| Property | Mandatory | Description |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 必需 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `radius` | No | This sets the size of the complete torus. The default value
    is `100`. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `radius` | 否 | 这设置了完整环面的大小。默认值是 `100`。|'
- en: '| `tube` | No | This sets the radius of the tube (the actual donut). The default
    value for this attribute is `40`. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `tube` | 否 | 这设置了管子（实际的甜甜圈）的半径。此属性的默认值是 `40`。|'
- en: '| `radialSegments` | No | This determines the number of segments to be used
    along the length of the torus knot. The default value is `64`. See the effect
    of changing this value in the demo. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `radialSegments` | 否 | 这决定了沿环面结长度的段数。默认值是 `64`。在演示中查看改变此值的效果。|'
- en: '| `tubularSegments` | No | This determines the number of segments to be used
    along the width of the torus knot. The default value is `8`. See the effect of
    changing this value in the demo. |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| `tubularSegments` | 否 | 这决定了沿环面结宽度的段数。默认值是 `8`。在演示中查看改变此值的效果。|'
- en: '| `p` | No | This defines the shape of the knot, and the default value is `2`.
    |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `p` | 否 | 这定义了结的形状，默认值是 `2`。|'
- en: '| `q` | No | This defines the shape of the knot, and the default value is `3`.
    |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `q` | 否 | 这定义了结的形状，默认值是 `3`。|'
- en: '| `heightScale` | No | With this property, you can stretch out the torus knot.
    The default value is `1`. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `heightScale` | 否 | 使用这个属性，你可以拉伸环面结。默认值是 `1`。|'
- en: 'The next geometry on the list is the last one of the basic geometries: `THREE.PolyhedronGeometry`.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的下一个几何形状是基本几何形状中的最后一个：`THREE.PolyhedronGeometry`。
- en: THREE.PolyhedronGeometry
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: THREE.PolyhedronGeometry
- en: 'With this geometry, you can easily create polyhedrons. A polyhedron is a geometry
    that has only flat faces and straight edges. Most often, though, you won''t use
    this geometry directly. Three.js provides a number of specific polyhedrons you
    can use directly without having to specify the vertices and the faces of `THREE.PolyhedronGeometry`.
    We''ll discuss these polyhedrons later on in this section. If you do want to use
    `THREE.PolyhedronGeometry` directly, you have to specify the vertices and the
    faces (just as we did for the cube in [Chapter 3](ch03.html "Chapter 3. Working
    with the Different Light Sources Available in Three.js"), *Working with the Different
    Light Sources Available in Three.js*). For instance, we can create a simple tetrahedron
    (also see `THREE.TetrahedronGeometry` in this chapter) like this:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种几何形状，您可以轻松地创建多面体。多面体是一种只有平面面和直线边的几何形状。然而，通常您不会直接使用这种几何形状。Three.js 提供了一些可以直接使用而无需指定
    `THREE.PolyhedronGeometry` 的顶点和面的特定多面体。我们将在本节后面讨论这些多面体。如果您确实想直接使用 `THREE.PolyhedronGeometry`，您必须指定顶点和面（就像我们在第
    3 章[Chapter 3](ch03.html "第 3 章。在 Three.js 中使用不同的光源")中处理立方体时做的那样，*在 Three.js 中使用不同的光源*）。例如，我们可以创建一个简单的四面体（也参见本章中的
    `THREE.TetrahedronGeometry`），如下所示：
- en: '[PRE11]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To construct `THREE.PolyhedronGeometry`, we pass in the `vertices`, `indices`,
    `radius`, and `detail` properties. The resulting `THREE.PolyhedronGeometry` object
    is shown in the `10-basic-3d-geometries-polyhedron.html` example (select **type**
    as: **Custom** in the menu in the top-right corner):'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 `THREE.PolyhedronGeometry`，我们需要传入 `vertices`、`indices`、`radius` 和 `detail`
    属性。生成的 `THREE.PolyhedronGeometry` 对象在 `10-basic-3d-geometries-polyhedron.html`
    示例中展示（在右上角的菜单中选择 **type** 为：**Custom**）：
- en: '![THREE.PolyhedronGeometry](img/2215OS_05_16.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.PolyhedronGeometry](img/2215OS_05_16.jpg)'
- en: 'When you create a polyhedron, you can pass in the following four properties:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建多面体时，您可以传入以下四个属性：
- en: '| Property | Mandatory | Description |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 必需 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `vertices` | Yes | These are the points that make up the polyhedron. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `vertices` | 是 | 这些是多面体由其组成的点。|'
- en: '| `indices` | Yes | These are the faces that need to be created from the vertices.
    |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `indices` | 是 | 这些是需要从顶点创建的面的索引。|'
- en: '| `radius` | No | This is the size of the polyhedron. This defaults to `1`.
    |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `radius` | 否 | 这是多面体的大小。默认为 `1`。|'
- en: '| `detail` | No | With this property, you can add additional detail to the
    polyhedron. If you set this to `1`, each triangle in the polyhedron will be split
    into four smaller triangles. If you set this to `2`, those four smaller triangles
    will each be again split into four smaller triangles, and so on. |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `detail` | 否 | 使用此属性，您可以向多面体添加更多细节。如果将此设置为 `1`，多面体中的每个三角形将被分割成四个更小的三角形。如果设置为
    `2`，那四个更小的三角形将再次分割成四个更小的三角形，依此类推。|'
- en: At the beginning of this section, we mentioned that Three.js comes with a couple
    of polyhedrons out of the box. In the following subsections, we'll quickly show
    you these.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节开头，我们提到 Three.js 默认附带了一些多面体。在接下来的小节中，我们将快速向您展示这些多面体。
- en: All these polyhedron types can be viewed by looking at the `09-basic-3d-geometries-polyhedron.html`
    example.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些多面体类型都可以通过查看 `09-basic-3d-geometries-polyhedron.html` 示例来查看。
- en: THREE.IcosahedronGeometry
  id: totrans-214
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: THREE.IcosahedronGeometry
- en: '`THREE.IcosahedronGeometry` creates a polyhedron that has 20 identical triangular
    faces created from 12 vertices. When creating this polyhedron, all you need to
    specify are the `radius` and `detail` levels. This screenshot shows a polyhedron
    created using `THREE.IcosahedronGeometry`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.IcosahedronGeometry` 创建一个由 12 个顶点创建的 20 个相同三角形面的多面体。在创建此多面体时，您只需要指定
    `radius` 和 `detail` 级别。以下截图显示了使用 `THREE.IcosahedronGeometry` 创建的多面体：'
- en: '![THREE.IcosahedronGeometry](img/2215OS_05_17.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.IcosahedronGeometry](img/2215OS_05_17.jpg)'
- en: THREE.TetrahedronGeometry
  id: totrans-217
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: THREE.TetrahedronGeometry
- en: 'The tetrahedron is one of the simplest polyhedrons. This polyhedron only contains
    four triangular faces created from four vertices. You create `THREE.TetrahedronGeometry`
    just like the other polyhedrons provided by Three.js, by specifying the `radius`
    and `detail` levels. Here''s a screenshot that shows a tetrahedron created using
    `THREE.TetrahedronGeometry`:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 四面体是最简单的多面体之一。这个多面体只包含由四个顶点创建的四个三角形面。您可以通过指定 `radius` 和 `detail` 级别来创建 `THREE.TetrahedronGeometry`，就像
    Three.js 提供的其他多面体一样。以下是使用 `THREE.TetrahedronGeometry` 创建四面体的截图：
- en: '![THREE.TetrahedronGeometry](img/2215OS_05_18.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.TetrahedronGeometry](img/2215OS_05_18.jpg)'
- en: THREE.Octahedron Geometry
  id: totrans-220
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: THREE.Octahedron Geometry
- en: 'Three.js also provides an implementation of an octahedron. As the name implies,
    this polyhedron has 8 faces. These faces are created from 6 vertices. The following
    screenshot shows this geometry:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Three.js 还提供了一个八面体的实现。正如其名所示，这个多面体有 8 个面。这些面是由 6 个顶点创建的。以下截图显示了该几何形状：
- en: '![THREE.Octahedron Geometry](img/2215OS_05_19.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.Octahedron Geometry](img/2215OS_05_19.jpg)'
- en: THREE.DodecahedronGeometry
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: THREE.DodecahedronGeometry
- en: 'The final polyhedron geometry provided by Three.js is `THREE.DodecahedronGeometry`.
    This polyhedron has 12 faces. The following screenshot shows this geometry:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Three.js 提供的最后一个多面体几何形状是 `THREE.DodecahedronGeometry`。这个多面体有 12 个面。以下截图显示了该几何形状：
- en: '![THREE.DodecahedronGeometry](img/2215OS_05_20.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![THREE.DodecahedronGeometry](img/2215OS_05_20.jpg)'
- en: That's the end of this chapter on the basic two-dimensional and three-dimensional
    geometries provided by Three.js.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本章关于 Three.js 提供的基本二维和三维几何形状的结束。
- en: Summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed all of the standard geometries Three.js has to
    offer. As you saw, there are a whole lot of geometries you can use right out of
    the box. To best learn how to use the geometries, experiment with the geometries.
    Use the examples in this chapter to get to know the properties you can use to
    customize the standard set of geometries available from Three.js. It is also a
    good thing that when you start with geometries, you choose a basic material; don't
    go directly for the complex materials, but start simple with `THREE.MeshBasicMaterial`
    with the wireframe set to `true`, or `THREE.MeshNormalMaterial`. That way, you'll
    get a much better picture of the true shape of a geometry. For two-dimensional
    shapes, it's important to remember that they are placed on the *x*-*y* plane.
    If you want to have a two-dimensional shape horizontally, you'll have to rotate
    the mesh around the *x* axis for `-0.5 * PI`. And finally, take care that if you're
    rotating a two-dimensional shape, or a three-dimensional shape that is *open*
    (for example, a cylinder or a tube), remember to set the material to `THREE.DoubleSide`.
    If you don't do this, the inside or the back of your geometry won't be shown.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了 Three.js 提供的所有标准几何形状。正如你所见，有大量的几何形状可以直接使用。为了最好地学习如何使用这些几何形状，请尝试实验这些几何形状。使用本章中的示例来了解你可以用来自定义从
    Three.js 获取的标准几何形状集合的属性。当你开始使用几何形状时，选择一个基本材质也是一个好主意；不要直接使用复杂的材质，而是从 `THREE.MeshBasicMaterial`
    开始，将线框设置为 `true`，或者 `THREE.MeshNormalMaterial`。这样，你将能够更好地了解几何形状的真实形状。对于二维形状，重要的是要记住它们放置在
    *x*-*y* 平面上。如果你想水平地有一个二维形状，你必须将网格绕 *x* 轴旋转 `-0.5 * PI`。最后，如果你正在旋转一个二维形状，或者一个 *开放*
    的三维形状（例如，一个圆柱体或管子），请记住将材质设置为 `THREE.DoubleSide`。如果你不这样做，你的几何形状的内部或背面将不会显示。
- en: In this chapter, we focused on simple, straightforward meshes. Three.js also
    provides ways to create complex geometries. In the following chapter, you'll learn
    how to create these.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于简单直接的网格。Three.js 也提供了创建复杂几何形状的方法。在下一章中，你将学习如何创建这些几何形状。
