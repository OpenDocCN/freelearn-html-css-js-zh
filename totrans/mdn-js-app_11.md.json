["```js\nvar Router = ReactRouter.Router;\nvar Route = ReactRouter.Route;\nvar Link = ReactRouter.Link;\nvar BrowserHistory = ReactRouter.browserHistory;\n\nvar Routes = (\n  <Router history={BrowserHistory}>\n    <Route path=\"/\" component={Home}></Route>\n    <Route path=\"/profile/:username\" component={Profile}></Route>\n    <Route path=\"*\" component={NotFound}/>\n  </Router>\n)\n\nReactDOM.render(Routes, document.body);\n```", "```js\n{\n  \"name\": \"rss-reader\",\n  \"dependencies\": {\n    \"express\": \"4.13.3\",\n    \"request\": \"2.69.0\",\n    \"xml2json\": \"0.9.0\"\n  }\n}\n```", "```js\nvar express = require(\"express\");\nvar app = express();\nvar request = require(\"request\");\nvar parser = require(\"xml2json\");\n\napp.use(express.static(__dirname + \"/public\"));\n\napp.get(\"/feed\", function(httpRequest, httpResponse, next){\n  request(httpRequest.query.url, function (error, response, body) {\n    if (!error && response.statusCode == 200)\n    {\n      httpResponse.send(parser.toJson(body));\n    }\n  })\n})\n\napp.get(\"/*\", function(httpRequest, httpResponse, next){\n  httpResponse.sendFile(__dirname + \"/public/html/index.html\");\n})\n\napp.listen(8080);\n```", "```js\n<!doctype html>\n<html>\n  <head>\n    <title>RSS Feed Reader</title>\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/css/bootstrap.min.css\">\n  </head>\n  <body>\n\n    <div id=\"appContainer\"></div>\n\n    <script src=\"img/react.js\"></script>\n    <script src=\"img/react-dom.js\"></script>\n    <script src=\"img/ReactRouter.js\"></script>\n    <script src=\"img/Flux.js\"></script>\n    <script src=\"img/microevent.js\"></script>\n    <script src=\"img/index.js\"></script>\n  </body>\n</html>\n```", "```js\nvar Router = ReactRouter.Router;\nvar Route = ReactRouter.Route;\nvar Link = ReactRouter.Link;\nvar BrowserHistory = ReactRouter.browserHistory;\n\nvar Routes = (\n  <Router history={BrowserHistory}>\n    <Route path=\"/\" component={FeedList}></Route>\n    <Route path=\"/feed/:id\" component={Feed}></Route>\n    <Route path=\"submit\" component={SubmitFeed}></Route>\n    <Route path=\"*\" component={NotFound}/>\n  </Router>\n)\n\nReactDOM.render(Routes, document.getElementById(\"appContainer\"));\n```", "```js\nvar AppDispatcher = new Flux.Dispatcher();\n\nvar FeedStore = {\n  addFeed: function(url){\n    var valid = /^(ftp|http|https):\\/\\/[^ \"]+$/.test(url);\n\n    if(valid)\n    {\n      var urls = localStorage.getItem(\"feed-urls\");\n      urls = JSON.parse(urls);\n\n      if(urls == null)\n      {\n        urls = [url];\n      }\n      else\n      {\n        urls[urls.length] = url;\n      }\n\n      localStorage.setItem(\"feed-urls\", JSON.stringify(urls));\n\n      this.trigger(\"valid-url\");\n    }\n    else\n    {\n      this.trigger(\"invalid-url\");\n    }\n  },\n  getFeeds: function(){\n    var urls = localStorage.getItem(\"feed-urls\");\n    urls = JSON.parse(urls);\n\n    if(urls == null)\n    {\n      return [];\n    }\n    else\n    {\n      return urls;\n    }\n  }\n}\n\nMicroEvent.mixin(FeedStore);\n\nvar Header = React.createClass({\n  render: function(){\n    return(\n      <nav className=\"navbar navbar-light bg-faded\">\n        <ul className=\"nav navbar-nav\">\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/\">Home</Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"submit\">Add</Link>\n          </li>\n        </ul>\n      </nav>\n    )\n  }\n})\n\nvar FeedList = React.createClass({\n  getInitialState: function(){\n    return {\n      urls: FeedStore.getFeeds()\n    };\n  },\n  render: function(){\n    var count = 0;\n    return(\n      <div>\n        <Header />\n        <div className=\"container\">\n          <br />\n          <ul>\n              {\n                this.state.urls.map(function(url)\n                {\n                  count++;\n                  return <li> <Link to={\"/feed/\" + count}>{url}</Link></li>;\n              })}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n})\n```", "```js\nvar SubmitFeed = React.createClass({\n  add: function(){\n    AppDispatcher.dispatch({\n      actionType: \"add-feed-url\",\n      feedURL: this.refs.feedURL.value\n    });\n  },\n  componentDidMount: function()\n  {\n    FeedStore.bind(\"invalid-url\", this.invalid_url);\n    FeedStore.bind(\"valid-url\", this.valid_url);\n  },\n  valid_url: function()\n  {\n    alert(\"Added successfully\");\n  },\n  invalid_url: function()\n  {\n    alert(\"Please enter a valid URL\");\n  },\n  componentWillUnmount: function()\n  {\n    FeedStore.unbind(\"invalid-url\", this.invalid_url);\n    FeedStore.unbind(\"valid-url\", this.valid_url);\n  },\n  render: function(){\n    return(\n      <div>\n        <Header />\n        <div className=\"container\">\n          <br />\n          <form>\n            <fieldset className=\"form-group\">\n              <label for=\"formGroupURLInput\">Enter URL</label>\n              <input type=\"url\" className=\"form-control\" id=\"formGroupURLInput\" ref=\"feedURL\" placeholder=\"Enter RSS Feed URL\" />\n            </fieldset>\n            <input type=\"button\" value=\"Submit\" className=\"btn\" onClick={this.add} />\n          </form>\n        </div>\n      </div>\n    )\n  }\n})\n\nAppDispatcher.register(function(action){\n  if(action.actionType == \"add-feed-url\")\n  {\n    FeedStore.addFeed(action.feedURL);\n  }\n})\n```", "```js\nvar SingleFeedStore = {\n  get: function(id){\n    var urls = localStorage.getItem(\"feed-urls\");\n    urls = JSON.parse(urls);\n\n    var request_url = urls[id - 1];\n\n    var request;\n    if(window.XMLHttpRequest)\n    {\n      request = new XMLHttpRequest();\n    } \n    else if(window.ActiveXObject) \n    {\n      try \n      {\n        request = new ActiveXObject(\"Msxml2.XMLHTTP\");\n      } \n      catch (e) \n      {\n        try \n        {\n          request = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        } \n        catch (e)\n        {}\n      }\n    }\n\n    request.open(\"GET\", \"/feed?url=\" + encodeURIComponent(request_url));\n\n    var self = this;\n\n    request.addEventListener(\"load\", function(){\n      self.trigger(\"feed-fetched\", request.responseText);\n    }, false);\n\n    request.send(null);\n  }\n}\n\nMicroEvent.mixin(SingleFeedStore);\n\nvar Feed = React.createClass({\n  getInitialState: function(){\n    return {\n      data: []\n    };\n  },\n  componentDidMount: function(){\n    SingleFeedStore.get(this.props.params.id);\n    SingleFeedStore.bind(\"feed-fetched\", this.update);\n  },\n  update: function(data){\n    var data = JSON.parse(data);\n    this.setState({data: data.rss.channel.item});\n  },\n  componentWillUnmount: function(){\n    SingleFeedStore.unbind(\"feed-fetched\", this.update);\n  },\n  render: function(){\n    return(\n      <div>\n        <Header />\n        <div className=\"container\">\n          <br />\n          <ul>\n              {this.state.data.map(function(post) {\n                  return <li><a href={post.link}>{post.title}</a></li>;\n              })}\n          </ul>\n        </div>\n      </div> \n    )\n  }\n})\n```", "```js\nvar NotFound = React.createClass({\n  render: function(){\n    return(\n      <h1>Page Not Found</h1>\n    )\n  }\n})\n```"]