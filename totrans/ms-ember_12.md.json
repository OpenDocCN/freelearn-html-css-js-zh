["```js\nnpm install\n\n```", "```js\n{ \n  \"name\": \"2048\", \n  \"private\": true, \n  \"dependencies\": { \n    \"component\": \"^0.19.9\" \n  } \n} \n```", "```js\n./node_modules/component/bin/component install\n./node_modules/component/bin/component build -n public -o public\n\n```", "```js\n  \"name\": \"2048\", \n  \"local\": [\"app\"], \n  \"paths\": [\"lib\"] \n}\n```", "```js\n\"local\": [ \n  \"game\" \n],\n```", "```js\n\"dependencies\": { \n  \"kelonye/ember\": \"1.7.0\" \n}\n```", "```js\n\"dependencies\": { \n  \"yields/keycode\": \"1.1.0\" ,\n  \"component/raf\": \"1.1.3\", \n  \"yields/store\": \"0.2.0\"\n}\n```", "```js\n./node_modules/component/bin/component install\n\n```", "```js\n./node_modules/component/bin/component build\n\n```", "```js\ncomponent build -o public -n public\n\n```", "```js\n<link rel=\"stylesheet\" href=\"public/public.css\">\n\n<script src=\"img/public.js\"></script> \n<script>require('app');</script>\n```", "```js\nrequire('ember'); \n\nwindow.App = Em.Application.create(); \n\nrequire('game'); \n\nApp.Router.map(function(){ \n  this.route('game'); \n});\n```", "```js\n\"scripts\": [ \n  \"index.js\", \n  \"views.js\", \n  \"models.js\", \n  \"routes.js\", \n  \"templates.js\", \n  \"controllers.js\" \n],\n```", "```js\nrequire('./templates'); \nrequire('./models'); \nrequire('./views'); \nrequire('./controllers'); \nrequire('./routes'); \n```", "```js\n// component.json\n\"templates\": [ \n  \"templates/application.html\", \n  \"templates/index.html\" \n],\n\n// template.js\nfunction compile (template){ \n  return Em.Handlebars.compile(require(template)); \n}; \n[ \n  'application', \n  'index' \n].forEach(function(tmpl){ \n  Em.TEMPLATES[tmpl] = compile('./templates/'+tmpl+'.html'); \n});\n```", "```js\napplication and index templates to Em.TEMPLATES. The application, index controllers, and routes are then required accordingly, as follows:\n```", "```js\nApp.ApplicationController = Em.Controller.extend({ \n}); \n\nApp.IndexController = Em.Controller.extend({ \n  needs: ['application'] \n});\n\nApp.ApplicationRoute = Em.Route.extend(); \n\nApp.IndexRoute = Em.Route.extend({ \n  redirect: function(){ \n    this.transitionTo('game'); \n  } \n});\n```", "```js\nApp.Cell = Em.Object.extend({ \n\n  x: null, \n  y: null, \n  value: null, \n\n  move: function(cell){ \n    var value = this.get('value'); \n    var nvalue = cell.get('value'); \n    var score = nvalue+this.get('value'); \n    cell.set('value', score); \n    this.set('value', 0); \n    if (value && nvalue) return score; \n    return 0;\n  },\n\n  isTile: function(){ \n    return !!this.get('value'); \n  }.property('value'),\n\n  is2048: function(){ \n    return this.get('value') == 2048; \n  }.property('value'),\n\n});\n```", "```js\nApp.GameRoute = Em.Route.extend({ \n  setupController: function(controller, model) { \n    this._super(); \n    controller.addStartTiles(); \n  } \n});\n```", "```js\nApp.GameController = Em.ArrayController.extend({ \n  needs: ['application'], \n  size: 4, \n  score: 0, \n\n  addStartTiles: function () { \n\n    var size = this.get('size'); \n    var rows; \n\n    this.setProperties({ \n      model: [], \n      tiles: [] \n    }); \n\n    for (var x = 0; x < 4; x++){ \n      for (var y = 0; y < 4; y++){ \n        var cell = App.Cell.create({ \n          x: x, \n          y: y \n        }); \n        this.pushObject(cell); \n      } \n    } \n  } \n});\n```", "```js\n// restore \n\nvar tiles = store('tiles'); \nvar score = store('score'); \nvar restored = tiles && score; \nif (restored){ \n\n  tiles.forEach(function(tile){ \n    var x = Em.get(tile, 'next.x') || Em.get(tile, 'prev.x'); \n    var y = Em.get(tile, 'next.y') || Em.get(tile, 'prev.y'); \n    var value = Em.get(tile, 'next.value') || Em.get(tile, 'prev.value'); \n    var cell = self.find(function(_cell){ \n      return _cell.get('x') == x && _cell.get('y') == y; \n    }); \n    if (cell) cell.set('value', value); \n  }); \n\n  this.get('tiles').pushObjects(tiles); \n  this.set('score', Number(score)); \n\n  store('tiles', undefined); \n  store('score', undefined); \n} \n```", "```js\nvar traversals = Em.Object.create(); \n\n// 'up' \n\nrows = []; \nfor (var x = 0; x < size; x++){ \n  var row = []; \n  for (var y = 0; y < size; y++){ \n    var cell = this.find(function(_cell){ \n      return _cell.get('x') == x && _cell.get('y') == y; \n    }); \n    row.pushObject(cell); \n  } \n  rows.pushObject(row); \n} \ntraversals.set('up', rows);\n```", "```js\n// generate 2 random tiles \n\nif (!restored){ \n  for (var i = 0; i < 2; i++) { \n    this.get('tiles').pushObject(this.getRandomTile()); \n  } \n}\n```", "```js\ngetRandomTile: function () { \n  if (this.hasAvailableCells()) { \n    var value = Math.random() < 0.9 \n      ? 2 \n      : 4; \n    var tile = this.getRandomAvailableCell(); \n    tile.set('value', value); \n    return { \n      prev: tile \n    }; \n  } \n},\n```", "```js\nApp.GameView = Em.View.extend({ \n  didInsertElement: function(){ \n    var self = this; \n    this._super(); \n    $(document).on('keydown', function(event){ \n      event.preventDefault(); \n      self.get('controller').send('onMove', event.which); \n    }); \n  }, \n});\n```", "```js\nif (self.hasEnded()) return self.endGame(false);\n\nvar dir = [ \n  { \n    name: 'up', \n    vector: {x: 0, y: -1} \n  }, { \n    name: 'right', \n    vector: {x: 1, y: 0} \n  }, { \n    name: 'down', \n    vector: {x: 0, y: 1} \n  }, { \n    name: 'left', \n    vector: {x: -1, y: 0} \n  } \n].find(function(_dir){ \n  return keycode(_dir.name) == code; \n});\n```", "```js\nif (dir){ \n  var traversals = self.get('traversals.'+dir.name); \n}\n```", "```js\ntry { \n  var tiles = [];\n  var moved;\n  var traversals = self.get('traversals.'+dir.name); \n  traversals.forEach(function(row){ \n    row.forEach(function(cell){ \n      if (cell.get('isTile')){ \n\n      } \n    }); \n  }); \n\n} catch (e) { \n  self.endGame(e.won); \n}\n```", "```js\nvar ncell = self.getNewFarthestCell(cell, dir.vector, 0);\n```", "```js\ngetNewFarthestCell: function(cell, dir, mag){\n\n},\n```", "```js\n++mag; \n\nvar traversals = this.get('traversals.up'); \nvar x = cell.get('x'); \nvar y = cell.get('y'); \nvar value = cell.get('value'); \n\nvar nx = x + dir.x * mag; \nvar ny = y + dir.y * mag; \n\nvar px = x + dir.x * (mag - 1); \nvar py = y + dir.y * (mag - 1);\n  var pcell = traversals[px][py];\n```", "```js\nvar nrow = traversals[nx]; // cell is x outbound \nif (!nrow) return ret();\n\n  var ncell = nrow[ny]; // cell is y outbound \n  if (!ncell) return ret(); \n```", "```js\n// cell cannot be merged \nvar nvalue = ncell.get('value'); \nif (nvalue && value && nvalue != value) return ret();\n```", "```js\nreturn this.getNewFarthestCell(cell, dir, mag);\n```", "```js\nif (ncell && ncell != cell){\n}\n```", "```js\nif (!moved){ \n  moved = true; \n}\n```", "```js\nif (merged && ncell.get('isTile')) { \n  ncell = pcell; \n}\n```", "```js\nvar score = cell.move(ncell); \nself.set('score', self.get('score') + score); \n```", "```js\ntiles.pushObject({ \n  prev: cell, \n  next: ncell \n});\n```", "```js\nif (self.hasEnded()){ \n  var err = new Error; \n  err.type = 'end-game'; \n  err.won = false; \n  throw err; \n} else if (ncell.get('is2048')){ \n  var err = new Error; \n  err.type = 'end-game'; \n  err.won = true; \n  throw err; \n}\n```", "```js\nif (moved){ \n  tiles.pushObject(self.getRandomTile()); \n  self.set('tiles', tiles); \n}\n```", "```js\nif (e.type == 'end-game'){ \n  self.set('tiles', tiles); \n  self.endGame(e.won); \n} else { \n  console.err(err); \n}\n```", "```js\nendGame: function(won){ \n  var classes = ['game-won', 'game-over']; \n  var type    = won ? classes[0] : classes[1]; \n  var message = won ? 'You win!' : 'Game over!'; \n  $('.game-message') \n    .removeClass(classes) \n    .addClass(type) \n    .html('<p>'+message+'</p>') \n    .show(); \n  }, \n```", "```js\n<a class=\"restart-button\" {{action 'createNewGame'}}>New Game</a>\n\ncreateNewGame: function(){ \n  this.addStartTiles(); \n  this.set('score', 0); \n  $('.game-message').hide(); \n}\n```", "```js\n<div class=\"score-container\">{{score}}</div>\n```", "```js\n<div class=\"grid-container\"> \n  {{#each row in traversals.up}} \n  <div class=\"grid-row\"> \n    {{#each cell in row}} \n    <div class=\"grid-cell\"></div> \n    {{/each}} \n  </div> \n  {{/each}} \n</div>\n```", "```js\n<div class=\"tile-container\"> \n\n  {{#each tiles}} \n  {{#view App.TileView prevBinding='prev' nextBinding='next'}} \n    <div class=\"tile-inner\">{{view.value}}</div> \n  {{/view}} \n  {{/each}}\n\n</div>\n```", "```js\nvar prev = classes('prev'); \nvar next = classes('next'); \nvar hasNext = !!self.get('next.value'); \n\nif (!hasNext) prev.pushObject('tile-new'); \n\nself.set('tileClasses', prev.join(' ')); \n```", "```js\nif (hasNext){ \n  raf(function(){ \n    self.set('tileClasses', next.join(' ')); \n  }); \n}\n```", "```js\n@import url(fonts/clear-sans.css);\n```", "```js\n@import url(\"game/styles/fonts/clear-sans.css\");\n```", "```js\ncomponent build â€“prefix /static\n\n```", "```js\n@import url(\"/static/game/styles/fonts/clear-sans.css\");\n```", "```js\ncomponent build --copy\n\n```", "```js\nrequire('ember'); \n\nmodule.exports = Em.Mixin.create({ \n  tagName: 'a', \n  href: 'javascript:', \n  attributeBindings: 'href target'.w() \n});\n```"]