- en: Managing State with Redux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining actions and action creators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining reducer functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Redux store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding action creators to the dispatch method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splitting and combining reducers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing Redux store enhancers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time traveling with Redux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Redux middleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with asynchronous data flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will be required to have an IDE, Visual Studio Code, Node.js and MongoDB.
    You will also need to install Git, in order use the Git repository of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files of this chapter can be found on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter05](https://github.com/PacktPublishing/MERN-Quick-Start-Guide/tree/master/Chapter05)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://goo.gl/mU9AjR](https://goo.gl/mU9AjR)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Redux is a predictable state container for JavaScript applications. It allows
    developers to manage the state of their applications with ease. With Redux, the
    state is immutable. Thus, it is possible to go back and forth to the next or previous
    state of your application. Redux is bound to three core principles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single source of truth**: All the state of your application must be stored
    in a single object tree within one single store'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**State is read-only**: You must not mutate the state tree. Only by dispatching
    an action can the state tree change'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes are made with pure functions**: These are called reducers, which
    are functions that accept the previous state and an action and compute a new state.
    Reducers must never mutate the previous state but rather always return a new one'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reducers work in a very similar way to how the `Array.prototype.reduce` function
    does. The `reduce` method executes a function for every item in an array against
    an accumulator to reduce it to a single value. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting value in variable `c` while reducing `a` and `b` against the
    `accumulator`, is `15` and the initial value is `0`. The reducer function here
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Redux reducers are written in a similar way and they are the most important
    concept of Redux. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this chapter, we will focus on learning how to manage simple and complex
    state trees with Redux. You will learn as well how to deal with asynchronous data
    flows.
  prefs: []
  type: TYPE_NORMAL
- en: Defining actions and action creators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reducers accept an `action` object that describes the action that is going to
    be performed and decides how to transform the state based on this `action` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Actions are just plain objects and they have only one required property that
    needs to be present, the action-type. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also provide additional properties as well. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Actions creators are just functions that return actions, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will see how these simple Redux concepts can be applied
    with `Array.prototype.reduce` to decide how data should be accumulated or reduced.
  prefs: []
  type: TYPE_NORMAL
- en: We won't need the Redux library yet for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Build a small JavaScript application that will increase or decreased a counter
    based on the action provided.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `counter.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define action-types as constants:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Define two action creators for generating two kinds of actions to `increment`
    and `decrement` the counter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize the initial accumulator to `0`, then reduce it by passing several
    actions. The reducer function will decide which kind of action to perform based
    on the action type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Log the resulting value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Outputs: `8`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first action type that the reducer encounters is `increment(10)` which will
    increment the accumulator by `10`. Because the initial value of the accumulator
    is `0`, the next current value will be `10`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second action type tells the reducer function to decrement the accumulator
    by `5`. Thus, the accumulator's value will be `5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last action type tells the reducer function to increment the accumulator
    by `3`. As a result, the accumulator's value will be `8`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defining reducer functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Redux reducers are pure functions. That means, they have no side-effects. Given
    the same arguments, the reducer must always generate the same shape of state.
    Take for example the following reducer function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If we execute this function providing the same arguments, the result will always
    be the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'However, take into account that even though the returned values have the same
    shape, these are two different objects. For instance, comparing the above:'
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log(a === b)`Â returns false.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Impure reducer functions prevent your application state from being predictable
    and make difficult to reproduce the same state. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If we execute this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, after executing the function for a second time after 2 seconds,
    we get a different result. To make it pure, you can consider re-writing the previously
    impure reducer as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can safely pass a time property inside your action to set the time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This approach makes your state predictable and the state is easy to reproduce.
    For instance, you could re-create a scenario of how your application will act
    if you pass the `time` property for any time in morning or afternoon.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you understand the concept of how reducers work, in this recipe, you
    will build a small application that will act differently according to the state
    change.
  prefs: []
  type: TYPE_NORMAL
- en: For this purpose, you won't need to install or use the Redux library yet.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Build an application that will remind you what kind of meal you should get
    according to your local time. Manage all the state of our application in a single
    object tree. Also provide a way to simulate what the application will display
    if it''s `00:00a.m` or `12:00p.m`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `meal-time.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Inside the script tag add the code defined in the next steps, starting on step
    4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a variable `state` that will contain all the state tree and later the
    next state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a reference to the HTML elements that we will use to display data or
    add event listeners:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Define two action types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Define an action creator for setting the kind of meal the user should have:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Define an action creator for setting the time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a reducer function that will compute a new state when an action is dispatched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a function that we will call when the state changes, so we can update our
    view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a dispatch function that will generate a new state tree by passing the
    current state and an action to the reducer. Then, it will call the `onChangeState`
    function to notify your application that the state has changed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an event listener for the button that will emulate that the time is `00:00a.m`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an event listener for the button that will emulate that the time is `12:00p.m`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the script is running, dispatch an action with the current time for the
    view to update:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To see your previous work in action:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `meal-time.html` file in your web browser. You can do so by double-clicking
    on the file, or right-clicking on the file and choosing Open with....
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should be able to see your current local time and a message stating what
    kind of meal you should have. For instance, if your local time is `20:42:35 GMT+0800
    (CST)`, you should see `Dinner time!`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the button `"Let's pretend is 00:00:00"`Â to see what your application
    would display if the time was `00:00a.m`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The same way, click on the button `"Let's pretend is 12:00:00"` to see what
    your application would display if the time was `12:00p.m`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can summarize our application like the following to understand how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: Action types `SET_MEAL` and `SET_TIME` were defined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Two action creators were defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`setMeal` which generates an action with the `SET_MEAL` action type and a `kindOfMeal`
    property with the provided argument'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`setTime` which generates an action with the `SET_TIME` action type and a `time`
    property with the provided argument'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A reducer function was defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the action type `SET_MEAL`, computes a new state with a new `kindOfMeal`
    property
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For the action type `SET_TIME`, computes a new state with a new `time` property
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We defined a function that will get called when the state tree changes. Inside
    the function, we updated the view according to the new state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `dispatch` function was defined that calls the reducer function providing
    the previous state and an action object to generate a new state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a Redux store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipes, we have seen how to define reducers and actions. We
    have also seen how to create a dispatch function to dispatch actions for the reducers
    to update the state. The store is an object that provides a small API to put all
    of that together.
  prefs: []
  type: TYPE_NORMAL
- en: 'The redux module exposes the `createStore` method which we can use to create
    a store. It has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The two last arguments are optional. For example, creating a store with a single
    reducer could look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling `createStore` will expose four methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`store.dispatch(action)`: Where action is an object that contains at least
    one property named `type` that specifies the action type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`store.getState()`: Returns the whole state tree'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`store.subscribe(listener)`: Where listener is a callback function that will
    get triggered whenever the state tree changes. Several listeners can be subscribed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`store.replaceReducer(reducer)`: Replaces the current Reducer function with
    a new one'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will re-build the application that you built in the previous
    recipe. However, this time you will use Redux. Before you start, create a new
    `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, build a small ExpressJS server application whose sole purpose will be
    to serve an HTML file and the Redux module:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `meal-time-server.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the ExpressJS and `path` module and initialize a new ExpressJS Application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Serve the Redux library on `/lib` path. Make sure that the path points to the
    `node_modules` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Serve the client application on the root path `/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Listen for new connections on port `1337`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, build the client application using Redux following the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `meal-time-client.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Inside the script tag, add the code for the next steps, starting from step 4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Extract the `createStore` method from the Redux library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the initial state of your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Keep a reference of the HTML DOM elements that will be used to display the
    state or interact with the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Define two action types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Define two action creators:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the reducer that will transform the state when `SET_TIME` and/or `SET_TIME`
    action types are dispatched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new Redux Store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Subscribe a callback function to the changes of the store. Whenever the store
    changes this callback will be triggered and it will update the view according
    to the changes in the store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an event listener for the `click` event for our button that will dispatch
    the `SET_TIME` action type to set the time to `00:00:00`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an event listener for the `click` event for our button that will dispatch
    the `SET_TIME` action type to set the time to `12:00:00`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'When the application is first started, dispatch an action to set the time to
    the current local time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To see the previous work in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'In your web browser, visit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: You should be able to see your current local time and a message stating what
    kind of meal you should have. For instance, if your local time is `20:42:35 GMT+0800
    (CST)`, you should see `Dinner time!`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the button `"Let's pretend is 00:00:00"`Â to see what your application
    would display if the time was `00:00a.m`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The same way, click on the `"Let's pretend is 12:00:00"` button to see what
    your application would display if the time was `12:00p.m`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the ES6 spread operator instead of `Object.assign` to merge your
    previous state with the next one, for instance, we re-wrote the reducer function
    of the previous recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We rewrote it as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: This could make the code more readable.
  prefs: []
  type: TYPE_NORMAL
- en: Binding action creators to the dispatch method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Actions creators are just functions that generate action objects which can
    later be used to dispatch actions using the `dispatch` method. Take for example
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Later, somewhere in your application, you can dispatch these actions using
    the `dispatch` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'However, as you can see, calling the `dispatch` method every time seems like
    a repeated and unnecessary step. You could simply wrap the action creators around
    the `dispatch` function itself like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Even though this seems like a good solution, there is a problem. It means,
    you would need to create the store first, then define your action creators binding
    them to the `dispatch` method. In addition, it would be difficult to maintain
    the action creators in a separate file since they depend on the `dispatch` method
    to be present. There is a solution provided by the Redux module, a helper method
    called `bindActionCreators` which accepts two arguments. The first argument is
    an object with keys, which represent the name of an action creator, and values,
    which represent a function that returns an action. The second argument is expected
    to be the `dispatch` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'This helper method will map all the action creators to the dispatch method.
    For instance, we could re-write the previous example as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, later somewhere in your application, you can call these methods without
    wrapping them around the `dispatch` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, our bound action creators look more like regular functions
    now. In fact, by destructuring the `actions` object, you can use only the methods
    you need. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can call them like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will build a simple To-do application and you will use
    the concepts that you just have learned about binding action creators. First,
    create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To build your To-do application, for the purpose of this recipe, define only
    one action creator and use `bindActionCreators` to bind it to the `dispatch` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, build a small ExpressJS application that will serve the HTML file containing
    the To-do client application which we will build after:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `bind-server.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, build the To-do application in an HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `bind-index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Inside the script tag, add the code in the following steps, starting from step
    4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Keep a reference to the HTML DOM element that will be used in the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the initial state of your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Define an action type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Define an action creator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a reducer function that will add a new item to the list whenever the
    `ADD_ITEM` action type is dispatched. The state will keep only 5 items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a store and bind the `dispatch` function to the action creator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Subscribe to the store and whenever the state changes add a new item to the
    list. If an item was already defined, we will re-use it instead of creating a
    new one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an event listener to the form for the `submit` event. This way, we can
    get the input value and dispatch an action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To see the previous work in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new Terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'In your browser, visit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Type something in the input box and press Enter. A new item should appear in
    the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to add more than five items to the list. The last one displayed will be
    removed and only five items are kept on the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Splitting and combining reducers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As your application grows, you probably wouldn't want to write all the logic
    for how the state of your application needs to be transformed in a simple reducer
    function. What you would probably want is to write smaller reducers that specialize
    in managing independent parts of the state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take for example the following reducer function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'You have two properties that manage the state of two different parts of an
    application. One manages the state of a Todo, list while the other manages the
    Chat messages. You could split this reducer into two reducer functions, where
    each manages one slice of the state, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'However, because `createStore` method accepts only one reducer as the first
    argument, you would need to combine them into a single reducer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: In this way, we are able to split our reducers into smaller reducers that specialize
    in managing only one slice of the state, and later combine them together into
    a single reducer function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Redux provides a helper method named `combineReducers` that allows you to combine
    reducers in a similar way to what we just did but without having to repeat a lot
    of code; for instance, we could rewrite the previous way of combining reducers
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'The `combineReducers` method is a *higher-order reducer* function. It accepts
    an object mapping specifies keys to a certain slice of the state managed by a
    specific `reducer` function and returns a new reducer function. If you run the
    following code, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see that the generated shape of the state looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'We can try as well if our combined reducers are working and managing only the
    part of the state assigned to them. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should display the generated state as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: This shows that each reducer is managing only the slice of the state assigned
    to them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will recreate the To-do application as in the pervious
    recipe. However, you will add other functionalities such as remove and toggle
    a To-do item. You will define other state of your application that will be managed
    by separate reducer functions. First, create a new `package.json` file with the
    following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, build a small ExpressJS server application that will serve the client
    application and the Redux library installed in `node_modules`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `todo-time.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, build the To-do client application. Also include a separate reducer to
    manage state for the current local time and a random lucky number generator:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `todo-time.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Inside the script tag add the JavaScript code following the next steps, starting
    from step 4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Keep a reference of the HTML elements that we will use to display data or interact
    with the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the `createStore` method and helper methods from the Redux library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Set action types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Define action creators:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a reducer function to manage the slice of state that keeps the time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a reducer function to manage the slice of state that keeps a lucky number
    that will be generated every time the user loads your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a reducer function to manage the slice of state that keeps an array
    of To-do items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Combine all reducers into a single one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Bind all actions creators to the `dispatch` method of the store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Subscribe a listener to the store that will update the HTML element, that will
    hold the time, whenever the state changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Subscribe a listener to the store that will update the HTML element, that will
    display a lucky number, whenever the state changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'Subscribe a listener to the store that will update the HTML element that will
    display the list of To-do items, whenever the state changes. Set the attribute
    `draggable` for the `li` HTML elements to allow the user to drag and drop the
    items on the view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an event listener for the `click` event on the list HTML element that will
    toggle a To-do item''s `completed` property whenever the item is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an event listener for the `drag` event on the list HTML element that will
    remove a To-do Item when this one is dragged outside of the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an event listener for the `submit` event on the form that contains an input
    HTML element that will dispatch a new action to add a new To-do item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'When the page loads for the first time, dispatch an action to set a lucky number
    and define a function that will get triggered every second to update the current
    time in the state of the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To see the previous work in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new Terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'In your browser, visit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Introduce something in the input box and press enter. A new item should appear
    in the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on one of the items that you have added to mark it as completed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click once again on one of the items marked as completed to mark it as not completed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click and drag one of the items outside of the list to remove it from the To-do
    list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Three reducer functions were defined to independently manage each slice of
    the state that has the following shape:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: We used the `combineReducers` helper method from the Redux library to combine
    those three reducers into a single one
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, a store was created providing the combined reducer function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For convenience, we subscribed three listener functions that get triggered whenever
    the state changes to update the HTML elements used to display the data from the
    state
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We also defined three event listeners: one to detect when a user submits a
    form that contains an input HTML element to add a new To-do item, another to detect
    when the user clicks on a To-do item displayed on the screen to toggle its state
    from not completed to completed or vice versa, and finally one event listener
    to detect when the user drags an element from the list to dispatch an action to
    remove it from the list of To-do items'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Writing Redux store enhancers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Redux store enhancer is a higher-order function that takes a store creator
    function and returns a new enhanced store creator function. The `createStore`
    method is a store creator which has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'While a store enhancer function has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: It may look a bit difficult to understand now, but you don't really have to
    worry if you don't get it at first because you will probably never need to write
    a store enhancer. The purpose of this recipe was simply to help you to understand
    their purpose in a very simple way.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will create a store enhancer to expand the functionality
    of Redux by allowing the definition of reducer functions in a `Map` JavaScript
    native object. First, create a new `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remember that `createStore` accepts a single reducer function as the first
    argument. We write a store enhancer to allow the `createStore` method to accept
    a `Map` object containing key-value pairs, where key is the property or slice
    of state that will be managed, and value is a `reducer` function. Then, define
    two reducer functions using a `Map` object to handle two slices of the state,
    one for a counter and the other for setting the current time:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `map-store.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Redux library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a store enhancer function that will allow the `createStore` method to
    accept a `Map` object as an argument. It will go through each key-value pair of
    the `Map` and add it to an object which will then be used to combine the reducers
    using the `combineReducers` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'Define actions types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'Define actions creators:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a `map` constant that will contain an instance of `Map`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new reducer function to the `map` object with a key `counter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Add another reducer function to the `map` object with a key `time`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new store providing the `map` as the first argument and the **store
    enhancer** as the second argument to extend the functionality of the `createStore`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'Bind the previously defined actions creators to the `dispatch` method of the
    store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'To test the code in NodeJS, use the `setInterval` global method to repeatedly
    call a function every second. It will first dispatch an action to set the current
    time, then, based on the criteria, it will decide if to increment or decrement
    the counter. After, pretty print in the terminal the current value of the store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a new Terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'The current state would be displayed every second having this shape:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The enhancer composes the store creator into a new one. For instance, the following
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'Could be written as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Which actually, in a way, wraps the original `createStore` method into another
    `createStore` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Composition can be explained as a set of functions that are called accepting
    the result argument of the previous function. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'This composes functions `f`, `g`, and `h` from right to left into a single
    function `c`. That means, we could write the previous line of code also like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Here `_createStore` is the result of composing `createStore` and your store
    enhancer function.
  prefs: []
  type: TYPE_NORMAL
- en: Time traveling with Redux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Even though, you may probably never need to write store enhancers, there is
    one special that you may find very useful for debugging your Redux powered applications
    to time travel through the state of your application. You can enable time traveling
    on your application by simple installing **Redux DevTools Extension** (for Chrome
    and Firefox): [https://github.com/zalmoxisus/redux-devtools-extension](https://github.com/zalmoxisus/redux-devtools-extension).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will see an example of how to take advanced of this feature
    and analyze how the state of your application has changed over the time that was
    running on the browser. First, create a new `package.json` file with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: Make sure to have installed the Redux DevTools Extension in your web browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Build a counter application that will randomly increment or decrement the initial
    specified counter 10 times when the application is run on the browser. However,
    because it happens fast, the user won't be able to notice that the state has actually
    changed 10 times since the application started. We will use the Redux DevTools
    Extension to navigate and analyze how the state has changed over time.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, build a small ExpressJS server application that will serve the client
    application and the Redux library installed in `node_modules`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `time-travel.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, build your counter, Redux powered application, with time travel capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `time-travel.html`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Inside the script tag add the JavaScript code that follows the next steps, starting
    from step 4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Keep a reference to the `span` HTML element that will display the current value
    of the counter whenever the state changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the `createStore` method and `bindActionCreators` method from the Redux
    library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'Define two action types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'Define two action creators:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a reducer function that will transform the state according to the given
    action type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new store providing a store enhancer function that will be available
    on the `window` object when the Redux DevTools extension is installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'Bind the action creators to the `dispatch` method of the store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'Subscribe a listener function to the store that will update the `span` HTML
    element whenever the state changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a `for` loop that will update increment or decrement the counter
    randomly 10 times when the application is run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To see the previous work in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new Terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'In your Browser, visit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'Open Developer Tools of your Browser and look for the Redux tab. You should
    see a tab like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d6635f01-f201-44b1-91ba-76ee735152da.png)'
  prefs: []
  type: TYPE_IMG
- en: Redux DevTools â Tab Window
  prefs: []
  type: TYPE_NORMAL
- en: 'The slider allows you to move from the last state to the very first state of
    your application. Try moving the slider to a different position:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/64146aed-2c98-42af-bfef-96fa08b2d098.png)'
  prefs: []
  type: TYPE_IMG
- en: Redux DevTools â Moving Slider
  prefs: []
  type: TYPE_NORMAL
- en: While moving the slider, you would be able to see in your browser the counters
    initial value and how it changed those ten times in the for loop
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Redux DevTools** has some features that you will probably find amazing and
    helpful for debugging and managing the state of your application. In fact, if
    you followed the previous recipes, I suggest you go back to the projects we wrote
    and enable this enhancer and try to experiment with Redux DevTools.'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of many features of Redux DevTools is the Log monitor, which displays in
    chronological order which action was dispatched and the resulting value of transforming
    the state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1d3b8a0-3d7d-4f30-80a0-1c660b506e43.png)'
  prefs: []
  type: TYPE_IMG
- en: Redux DevTools â Log Monitor
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Redux middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Probably the easiest and best way of extending the Redux functionality is by
    using middleware.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a store enhancer function that comes in the Redux library named `applyMiddleware`
    and allows you define one or multiple middleware functions. The way middleware
    works in Redux is simple, it allows you to wrap the `dispatch` method of the store
    to extend its functionality. The same way as store enhancer functions, middleware
    is composable and has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `API` is an object containing the `dispatch` and `getState` methods from
    the store, destructuring the `API`, the signature looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `applyMiddleware` function receives one or more middleware functions as
    arguments. For example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'Each middleware function is kept internally as an `Array`. Then, internally
    using the `Array.prototype.map` method, the array maps each middleware function
    by calling itself providing the middleware `API` object which contains the `dispatch`
    and `getState` methods of the store. Similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, by composing all the middleware functions, it computes a new value for
    the `dispatch` method providing the `next` argument. In the very first middleware
    that is executed, the `next` argument refers to the original `dispatch` method
    before any middleware was applied. For instance, if applying three middleware
    functions, the new computed dispatch method''s signature would be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Which means that a middleware function can interrupt the chain and prevent a
    certain action from being dispatched if the `next(action)` method is not called
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The dispatch method from the middleware `API` object, allows you to call the
    dispatch method of the store with the previously applied middleware. That means,
    if you are not careful while using this method, you may create an infinite loop
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding how it works internally may not be so simple at first, but I assure
    you that you will get it soon.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will write a middleware function that will warn the user
    when dispatching an action type that has not been defined. First, create a new
    `package.json` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Redux doesn''t warn you or display errors when an action type, that was never
    defined within your reducers, is used. Build a NodeJS application that will use
    Redux to manage its state. Focus on writing a middleware function that will check
    that the dispatched actions types are defined or else throw an error:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `type-check-redux.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the Redux library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'Define an object containing the allowed action types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a dummy reducer function that returns its original state whichever action
    type is called. We don''t need it for the purpose of this recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a middleware function that will intercept every action that is being
    dispatched and check whether the action type exists in the `TYPE` object. If the
    action exists allow the action to be dispatched, or otherwise, throw an error
    and inform the user that an invalid action type was dispatched. Additionally,
    let''s provide the user, as part of the error message, information about which
    valid types are allowed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a store and apply the defined middleware function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'Dispatch two action types. The first action type is valid, and it exists in
    the `TYPE` object. However, the second one is an action type that was never defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, open a new Terminal and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'The Terminal output should display an error similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, the stack trace tells us that the error happened on line `18`,
    which points to our middleware function. However, the next one points to line
    `33`, `store.dispatch({ type: ''MISTAKE'' })`, which is a good thing because it
    can help you track exactly where certain actions are dispatched that were never
    defined.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's pretty simple, the middleware function checks the action type, of the action
    being dispatched, to see if it exists as a property of the `TYPE` object constant.
    If it exists, then the middleware passes control to the next middleware in the
    chain. However, in our case, there is no next middleware, so the control is passed
    to the original dispatch method of the store that will apply the reducer and transform
    the state. On the other side, if the action type was not defined, the middleware
    function interrupts the middleware chain by not calling the `next` function and
    by throwing an error.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with asynchronous data flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Redux doesn't handle asynchronous data flow. There are several libraries
    out there that can help you with these tasks. However, for the purpose of this
    chapter, we will build our own implementation using middleware functions to give
    the `dispatch` method the ability to dispatch and handle asynchronous data flow.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you will build an ExpressJS application with a very small API
    to test your application when making HTTP requests and dealing with asynchronous
    data flow and errors. First, create a new `package.json` file with the following
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'Then install the dependencies by opening a Terminal and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Build a simple RESTful API server that will have two endpoints or answer to
    paths `/time` and `/date` when a GET request is made. However, on `/date` path,
    we will pretend that there is an internal error and make the request fail in order
    to see how to handle errors in asynchronous requests as well:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `api-server.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the ExpressJS library and initialize a new ExpressJS application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'For `/time` path, simulates a delay of `2s` before sending a response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'For `/date` path, simulates a delay of `2s` before sending a failed response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: Listen on port `1337` for new connections
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Save the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As for the client, build a NodeJS application using Redux that will dispatch
    synchronous and asynchronous actions. Write a middleware function to allow the
    dispatch method to handle asynchronous actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file named `async-redux.js`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the `node-fetch` and Redux libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: 'Define three kinds of status. Each status represents the state of an asynchronous
    operation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: 'Define two action types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: 'Define action creators. Notice that the value property is an asynchronous function
    in the first two action creators. Your, later defined, middleware function will
    be responsible for making Redux understand these actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a common function for setting values from an action object that will
    be used in your reducer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the initial state of your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a reducer function. Notice that it is only one reducer that handles
    two slices of the state, the `time` and the `date`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a middleware function that will check whether a dispatched action type
    has a function as the `value` property. If that is so, assume that the `value`
    property is an async function. First, we dispatch an action to set the status
    as `PENDING`. Then, when the async function is resolved, we dispatch another action
    to set the status as `RESOLVED` or in case of an error as `REJECTED`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new store and apply your defined middleware function to extend the
    functionality of the `dispatch` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: 'Bind action creators to the `dispatch` method of the store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: 'Subscribe a function listener to the store and display in terminal the state
    tree, as a JSON string, every time there is a change in the state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: 'Dispatch a synchronous action to set the time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: 'Dispatch an asynchronous action to fetch and set the time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: 'Dispatch another asynchronous action to fetch and try to set the date. Remember
    that this operation is supposed to fail and it''s intentional:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To see your previous work in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'Without closing the previously running NodeJS process, open another Terminal
    and run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every time there is a change in the state, the subscribed listener function
    will pretty print in the terminal the current state tree
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first dispatched action is synchronous. It will cause the time slice of
    the state tree to be updated like this, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: 'The second action being dispatched is asynchronous. Internally, two actions
    are dispatched to reflect the state of the asynchronous operation, one when the
    async function is still in execution, and another when the async function was
    fulfilled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: 'The third action being dispatched is also asynchronous. Internally, it also
    causes two actions to be dispatched to reflect the state of the async operation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: Take into account that because the operations are asynchronous, the output displayed
    in the terminal may not always be in the same order
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice that the first async operation is fulfilled and the status marked as
    `RESOLVED` while the second async operation is fulfilled and its status marked
    as `REJECTED`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The statuses `PENDING`, `RESOLVED`, and `REJECTED` reflect the three statuses
    that a JavaScript Promise can be, and they are not obligatory names, simply easy
    to remember
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you don''t want to write your own middleware functions or store enhancers
    to deal with asynchronous operations, you can opt to use one of the many libraries
    for Redux that exist out there. Two of the most use or popular ones are these:'
  prefs: []
  type: TYPE_NORMAL
- en: Redux Thunkâ[https://github.com/gaearon/redux-thunk](https://github.com/gaearon/redux-thunk)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redux Sagaâ[https://github.com/redux-saga/redux-saga](https://github.com/redux-saga/redux-saga)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
