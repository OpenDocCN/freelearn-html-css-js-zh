- en: Chapter 2. Adding Ionic 2 Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。添加Ionic 2组件
- en: 'In this chapter, we will cover the following tasks related to using Ionic 2
    components:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍与使用Ionic 2组件相关的以下任务：
- en: Adding multiple pages using tabs
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标签添加多个页面
- en: Adding left and right menu navigation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加左右菜单导航
- en: Navigating multiple pages with state parameters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用状态参数导航多个页面
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: It's possible to write a simple app with a handful of pages. Ionic provides
    a lot of out-of-the-box components that allow simple plug-n-play operations. When
    the app grows, managing different views and their custom data at a specific time
    or triggered event could be very complex. Ionic 2 comes with some changes in handling
    state and navigation. In Ionic 1, you could use UI-Router for advanced routing
    management mechanism. In Ionic 2, `NavController` will enable the push/pop implementation
    of the navigation.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用几页简单编写一个应用。Ionic提供了许多开箱即用的组件，允许简单的即插即用操作。当应用增长时，管理不同视图及其在特定时间或触发事件时的自定义数据可能会非常复杂。Ionic
    2在处理状态和导航方面有一些变化。在Ionic 1中，您可以使用UI-Router进行高级路由管理机制。在Ionic 2中，`NavController`将启用导航的push/pop实现。
- en: Since Ionic 2 introduces many new components, you have to understand how these
    components impact your app state hierarchy and when each state is triggered.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Ionic 2引入了许多新的组件，您必须了解这些组件如何影响您的应用状态层次结构以及何时触发每个状态。
- en: Adding multiple pages using tabs
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标签添加多个页面
- en: This section will explain how to work with the Ionic tab interface and expand
    it for other cases. The example used is very basic with three tabs and some sample
    Ionic components in each tab. This is a very common structure that you will find
    in many apps. You will learn how Ionic 2 structures the tab interface and how
    it translates to individual folders and files.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将解释如何使用Ionic标签界面，并扩展它以适应其他情况。所使用的示例非常基础，包含三个标签和每个标签中的一些示例Ionic组件。这是您将在许多应用中找到的一个非常常见的结构。您将学习Ionic
    2如何构建标签界面，以及它如何转换为单独的文件夹和文件。
- en: 'In this example, you will build three tabs, as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，您将构建三个标签，如下所示：
- en: Showing a simple text-only page to explain where to fit the components
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示一个仅包含文本的简单页面，以说明组件应放置的位置
- en: Showing a sign up form
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示注册表单
- en: Showing a horizontal slider box
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示水平滑块框
- en: Although the app is very straightforward, it will teach you a lot of key concepts
    in Angular 2 and Ionic 2\. Some of them are the component decorators, theme and
    the TypeScript compiler process.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然应用非常直接，但它将教会您许多Angular 2和Ionic 2的关键概念。其中一些是组件装饰器、主题以及TypeScript编译器过程。
- en: 'Here is a screenshot of the app where the middle tab is selected:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用的一个截图，其中选中了中间标签：
- en: '![Adding multiple pages using tabs](img/image00234.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![使用标签添加多个页面](img/image00234.jpeg)'
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Since this is your first app being built from scratch, you need to ensure that
    you have followed through [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Creating
    Our First App with Ionic 2"), *Creating Our First App with Ionic 2*, to set up
    the environment and Ionic CLI. If you already had Ionic 1, it must be updated.
    For this, you can use the same command line as to install, which is as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是您从头开始构建的第一个应用，您需要确保您已经遵循了[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Ionic 2创建我们的第一个应用")，*使用Ionic
    2创建我们的第一个应用*，以设置环境和Ionic CLI。如果您已经有了Ionic 1，则必须更新它。为此，您可以使用与安装相同的命令行，如下所示：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it…
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'The following are the instructions:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是指示：
- en: 'Create a new `PagesAndTabs` app using the `tabs` template and go into the `PagesAndTabs`
    folder to start Visual Studio Code, as shown:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`tabs`模板创建一个新的`PagesAndTabs`应用，并进入`PagesAndTabs`文件夹以启动Visual Studio Code，如图所示：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The blank template only gives you a basic page. Open the `Finder` app in Mac
    or Windows Explorer in Windows to see the following folder structure:![How to
    do it…](img/image00235.jpeg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 空模板仅提供基本页面。在Mac上打开`Finder`应用或在Windows上打开Windows资源管理器，以查看以下文件夹结构：![如何操作…](img/image00235.jpeg)
- en: Tip
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You will only modify what is inside the `/src` folder and not `/www`, as in
    Ionic 1\. Everything in the `/src` folder will be built, and the `/www` folder
    will be created automatically. We will also reserve the folder names and filenames
    as much as possible, since the main goal here is to understand how the tab template
    works and the areas you can modify.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您只需修改`/src`文件夹内的内容，而不是`/www`，正如在Ionic 1中那样。`/src`文件夹中的所有内容都将被构建，而`/www`文件夹将自动创建。我们还将尽可能保留文件夹名称和文件名，因为这里的主要目标是了解标签模板的工作原理以及您可以修改的区域。
- en: 'Open and edit the `/src/pages/tabs/tabs.html` template file with the following
    code:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码打开并编辑`/src/pages/tabs/tabs.html`模板文件：
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The new template only updates the title and icons. This is because this example
    wants to reserve the naming of tab `root` variables. You could add more tabs using
    <ion-tab>, as needed.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的模板仅更新标题和图标。这是因为此示例想要保留标签`root`变量的命名。你可以根据需要使用`<ion-tab>`添加更多标签。
- en: 'To add a page, you need to ensure that `tab1Root` points to an existing folder
    and template. Since you will reuse the existing tab structure, you can just modify
    the `/src/pages/home/home.html` template, as shown, as this is your first page:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加一个页面，你需要确保`tab1Root`指向一个现有的文件夹和模板。由于你将重用现有的标签结构，你只需修改`/src/pages/home/home.html`模板，如下所示，因为这将是你的第一个页面：
- en: '[PRE3]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Also, in the same `/home`, folder, edit `home.ts` that corresponds to the same
    template, and enter the code here:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样，在同一个`/home`文件夹中，编辑与同一模板对应的`home.ts`文件，并在此处输入代码：
- en: '[PRE4]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For the second page, `tab2Root`, you will follow a similar process by editing
    the `/src/pages/about/about.html` template, as shown:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于第二个页面，`tab2Root`，你将按照类似的过程通过编辑`/src/pages/about/about.html`模板，如下所示：
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Edit `about.ts`, in the same folder from the preceding step:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`about.ts`，在前面步骤中的同一文件夹：
- en: '[PRE6]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, for the `tab3Root` page, you can change the template so that it will
    show a slider in `/src/pages/contact/contact.html`, as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，对于`tab3Root`页面，你可以更改模板，使其在`/src/pages/contact/contact.html`中显示滑块，如下所示：
- en: '[PRE7]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `/contact` folder, you need to edit `contact.ts` with the following
    code:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/contact`文件夹中，你需要使用以下代码编辑`contact.ts`：
- en: '[PRE8]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Go to your terminal and type the following command line to run the app:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往你的终端，并输入以下命令行来运行应用：
- en: '[PRE9]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works…
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'There is actually a lot of new information and a lot of concepts in this simple
    app. At a higher level, this is how the app is structured:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在这个简单的应用中有很多新的信息和概念。在更高层次上，这是应用的架构：
- en: When you run the app, Cordova loads the `/www/index.html` file first to open.
    All of your code and templates are combined into one file, `/www/build/main.js`.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你运行应用时，Cordova首先加载`/www/index.html`文件以打开。所有代码和模板都合并到一个文件中，即`/www/build/main.js`。
- en: The `/app` folder is where most of your logic belongs. It starts with `app.component.ts`
    as the Bootstrap file.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/app`文件夹是大多数逻辑所在的地方。它以`app.component.ts`作为引导文件。'
- en: Each subfolder under the `/pages` folder will represent a page, which is a new
    concept in Ionic 2\. A page consists of an HTML template, TypeScript code, and
    an .`scss` file to customize that specific template only.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/pages`文件夹下的每个子文件夹将代表一个页面，这是Ionic 2中的新概念。一个页面由一个HTML模板、TypeScript代码和一个`.scss`文件组成，用于仅自定义该特定模板。'
- en: The `/theme` folder will contain variables and customizations at the global
    level to override the default theme from Ionic 2.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/theme`文件夹将包含全局级别的变量和自定义设置，以覆盖Ionic 2的默认主题。'
- en: Now, let's start with everything inside the `/app` folder.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从`/app`文件夹中的所有内容开始。
- en: 'The `app.component.ts` file only imports all the required pages and components
    to start the app. This example needs the following four imports by default:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.component.ts`文件仅导入启动应用所需的所有页面和组件。此示例默认需要以下四个导入：'
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You must always import `Component`, `Platform`, and `StatusBar` from Ionic,
    because that will give you the `@Component` decorator to Bootstrap your app. A
    decorator is placed in front of its class to provide metadata for the class. The
    following example tells that the `MyApp` class has the characteristics of a component
    with a `template` property:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须始终从Ionic导入`Component`、`Platform`和`StatusBar`，因为这将为你提供`@Component`装饰器来引导你的应用。装饰器放置在其类之前，为类提供元数据。以下示例说明`MyApp`类具有组件的特性，具有`template`属性：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Since this is a simple example, you don't need to declare a lot except the template
    information. Similar to Ionic 1, you can use either `template` or `templateUrl`
    to point to a local file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个简单的示例，你不需要声明很多除了模板信息之外的内容。类似于Ionic 1，你可以使用`template`或`templateUrl`来指向本地文件。
- en: 'Class is another new concept in ES6\. However, developers have been declaring
    class in various programming languages, such as Java and C#. In ES6, you can use
    class to be able to efficiently reuse code with better abstraction. A class could
    exist within that file context only. Consider the following example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 类是ES6中的另一个新概念。然而，开发者已经在各种编程语言中声明了类，例如Java和C#。在ES6中，你可以使用类来更有效地重用代码，并具有更好的抽象。类可以仅存在于该文件上下文中。考虑以下示例：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'However, if you want to use that class somewhere else, you have to export:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你想在其他地方使用那个类，你必须导出：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In a class, you can have the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个类中，你可以有如下所示的内容：
- en: Variable, such as `this.a` or `this.b`
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量，例如 `this.a` 或 `this.b`
- en: Method, such as `doSomething()`
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法，例如 `doSomething()`
- en: Constructor that automatically executes (or initializes) when an object is created
    using the class
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当使用类创建对象时自动执行（或初始化）的构造函数
- en: Tip
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: More information about classes can be found at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多关于类的信息可以在 [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)
    找到。
- en: 'Another nice thing about ES6 here is the arrow function, as shown:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ES6 在这里还有一个很好的特性，就是箭头函数，如下所示：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding is the same as:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容等同于：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'An example (by passing a parameter) is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例（通过传递参数）如下所示：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The same code can be rewritten as shown:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的代码可以重写为如下所示：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: More information about arrow function can be found at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于箭头函数的信息可以在 [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)
    找到。
- en: One important thing in `app.component.ts` is that you must declare a `root`
    page. You can see that from the template via `[root]="rootPage"`,and then again
    in the constructor via `this.rootPage = TabsPage`. The square brackets, `[]`,
    around `root` mean that it's a property of that DOM node. This is a new concept
    from Angular 2 as it's trying to get rid of using a DOM property, such as `ngmodel`
    (which tends to result in lower performance). The assignment here is to tell Ionic
    2 that you will use `TabsPage`, which was imported earlier, and assign that as
    a `root` page. Then, the `ion-nav` directive will look at its own `root` property
    to start rendering the page. There seem to be a lot of abstractions and boilerplate
    compared to Ionic 1\. However, this practice is recommended to ensure better separation
    and scaling.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app.component.ts` 中有一个重要的事情，那就是你必须声明一个 `root` 页面。你可以从模板中通过 `[root]="rootPage"`
    看到它，然后在构造函数中再次通过 `this.rootPage = TabsPage`。围绕 `root` 的方括号 `[]` 表示它是一个 DOM 节点的属性。这是
    Angular 2 的一个新概念，因为它试图摆脱使用 DOM 属性，例如 `ngmodel`（这往往会导致性能降低）。这里的赋值是告诉 Ionic 2 你将使用之前导入的
    `TabsPage`，并将其作为 `root` 页面。然后，`ion-nav` 指令将查看其自己的 `root` 属性以开始渲染页面。与 Ionic 1 相比，这里似乎有更多的抽象和样板代码。然而，这种做法是为了确保更好的分离和扩展。
- en: 'Once you understand how `app.component.ts` works, it''s easier to grasp the
    concepts from the other pages. Let''s take a look at the `/pages/tabs/tabs.ts`
    file because that is where you define the `TabsPage` class. From this file, you
    need to import three other pages, which are the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你理解了 `app.component.ts` 的工作方式，就更容易掌握其他页面的概念。让我们看看 `/pages/tabs/tabs.ts` 文件，因为在那里你定义了
    `TabsPage` 类。从这个文件中，你需要导入三个其他页面，如下所示：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The template for this page is in `tabs.html`. However, you could also put the
    template in a string inside the `.ts` file, as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 该页面的模板位于 `tabs.html` 中。然而，你也可以将模板放在 `.ts` 文件中的字符串里，如下所示：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: ES6 also introduces a new feature, called a multiline template string. You probably
    realize that the preceding template string does not have any `join()` or string
    combine (`+`) operator. The reason is that you can use back-tick (`` ` `` `` `
    ``) to allow a multiline template.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: ES6 还引入了一个新特性，称为多行模板字符串。你可能已经意识到，上述模板字符串没有使用任何 `join()` 或字符串连接 (`+`) 操作符。原因是你可以使用反引号（``
    ` `` `` ` ``）来允许多行模板。
- en: 'So, instead of doing this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你不必这样做：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can now do this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以这样做：
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Below the page decorator, you need to export `TabsPage` (so that you can use
    in `app.component.ts`) and tell the constructor to use `tab1Root`, `tab2Root`,
    and `tab3Root` as root, as shown, for other pages in tab navigation:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面装饰器下面，你需要导出 `TabsPage`（以便在 `app.component.ts` 中使用），并告诉构造函数使用 `tab1Root`、`tab2Root`
    和 `tab3Root` 作为根，如下所示，用于其他页面的标签导航：
- en: '[PRE22]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Ionic 2 tab declaration is very similar to Ionic 1, shown as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic 2 的标签声明与 Ionic 1 非常相似，如下所示：
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You just have to make sure that the `root` property is pointing to another page.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需确保 `root` 属性指向另一个页面。
- en: '`tab1Root` is actually very simple to understand because it''s a text page
    where you add your own content and design within the `<ion-content>` element,
    as shown:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`tab1Root`实际上非常容易理解，因为它是一个文本页面，你可以在`<ion-content>`元素内添加自己的内容和设计，如下所示：'
- en: '[PRE24]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you want to change the title, you can simply change the following line:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更改标题，你可以简单地更改以下行：
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`tab2Root` and `tab3Root` are very similar in terms of how they are structured.
    Ionic 2 gives you the convenience of binding to an event right in the `page` class,
    as shown:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`tab2Root`和`tab3Root`在结构上非常相似。Ionic 2为你提供了在`page`类中直接绑定事件的便利性，如下所示：'
- en: '[PRE26]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In the preceding example from `about.ts`, if the user enters `tab2Root`, it
    will call the `ionViewWillEnter ()` function automatically. This is a significant
    improvement because, in Ionic 1, you had to use `$ionicView.enter` on the `$scope`
    variable. Again, the concept of `$scope` no longer exists in Angular 2.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的`about.ts`示例中，如果用户进入`tab2Root`，它将自动调用`ionViewWillEnter()`函数。这是一个显著的改进，因为在Ionic
    1中，你必须在`$scope`变量上使用`$ionicView.enter`。再次强调，`$scope`的概念在Angular 2中不再存在。
- en: For a scalable app, it's better to separate templates into different files and
    avoid co-mingling templates inside the JavaScript code. The `templateUrl` must
    always point to the relative location of the `.html` file.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于可扩展的应用程序，最好将模板分离到不同的文件中，并避免在JavaScript代码中将模板混合在一起。`templateUrl`必须始终指向`.html`文件的相对位置。
- en: 'In `./src/pages/contact/contact.html`, you can use slider box and bind to slide
    the change event, as shown:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在`./src/pages/contact/contact.html`中，你可以使用滑动框并绑定滑动变化事件，如下所示：
- en: '[PRE27]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: To get an event in Angular 2 (or Ionic 2), you have to use the parentheses,
    ( ), because the concept of `ng-click` or similar is no longer available. In this
    case, if the slide is changed based on `ionDidChange`, the `ion-slides` directive
    will trigger the `onSlideChanged()` function in the `ContactPage` class.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Angular 2（或Ionic 2）中获取事件，你必须使用括号（），因为`ng-click`或类似的概念不再可用。在这种情况下，如果滑动基于`ionDidChange`而改变，`ion-slides`指令将在`ContactPage`类中触发`onSlideChanged()`函数。
- en: You cannot really run the TypeScript directly without having TypeScript to transpile
    the code into JavaScript. This process happens automatically behind the scenes
    when you run ionic serve. Also, when you change some code in the project, Ionic
    will detect the changes and rebuild the files before updating the browser. There
    is no need to hit the Refresh button every time.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你实际上不能在没有TypeScript将代码转换为JavaScript的情况下直接运行TypeScript。当你运行`ionic serve`时，这个过程会在幕后自动发生。此外，当你更改项目中的某些代码时，Ionic会检测到这些更改并在更新浏览器之前重新构建文件。你不需要每次都点击刷新按钮。
- en: See also
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Mozilla developer network has a very extensive documentation on ECMAScript 6
    that you can find at the following link at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla](https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla).
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mozilla开发者网络提供了关于ECMAScript 6的非常广泛的文档，你可以通过以下链接找到：[https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla](https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla)。
- en: For Angular 2 specific information, you can read directly from the Angular 2
    documentation at [https://angular.io/docs/ts/latest/index.html](https://angular.io/docs/ts/latest/index.html).
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Angular 2的特定信息，你可以直接从Angular 2文档中阅读，文档链接为[https://angular.io/docs/ts/latest/index.html](https://angular.io/docs/ts/latest/index.html)。
- en: Adding left and right menu navigation
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加左右菜单导航
- en: Menu navigation is a very common component in many mobile apps. You can use
    menu to allow users to change to different pages in the app, including login and
    logout. The menu could be placed on the left or right of the app. Ionic 2 also
    lets you detect events and customize the menu's look and feel further.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单导航是许多移动应用中非常常见的组件。你可以使用菜单让用户在应用中切换到不同的页面，包括登录和登出。菜单可以放置在应用的左侧或右侧。Ionic 2还允许你检测事件并进一步自定义菜单的外观和感觉。
- en: 'This is a screenshot of the app you will develop:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您将要开发的应用的截图：
- en: '![Adding left and right menu navigation](img/image00236.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![添加左右菜单导航](img/image00236.jpeg)'
- en: The app will have two pages and two menus. You can toggle either the left or
    right menu (but not both at the same time). In reality, it is much less likely
    that you will have both menus, but for the purposes of demonstration, this app
    will include both menus as the app will show the different properties of the menus
    that you can set. The left menu will change the page and the right menu will allow
    you to capture the exact item that is clicked on.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 应用将有两个页面和两个菜单。你可以切换左侧或右侧菜单（但不能同时切换）。实际上，你同时拥有两个菜单的可能性很小，但为了演示目的，这个应用将包括两个菜单，以展示你可以设置的菜单的不同属性。左侧菜单将改变页面，而右侧菜单将允许你捕获点击的确切项目。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This app can run on your web browser, so there is no need to have a physical
    device available. Again, you only need to have Ionic 2 available on your computer.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用可以在你的网页浏览器上运行，因此不需要有物理设备。再次强调，你只需要在电脑上安装Ionic 2。
- en: How to do it…
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Here are the instructions:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是说明：
- en: 'Create a new `LeftRightMenu` app using the `sidemenu` template, as shown, and
    go to the `LeftRightMenu` folder:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`sidemenu`模板创建一个新的`LeftRightMenu`应用，如下所示，并进入`LeftRightMenu`文件夹：
- en: '[PRE28]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Verify your app folder structure to ensure that it's similar to the following:![How
    to do it…](img/image00237.jpeg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证你的应用文件夹结构，确保它与以下结构相似：![如何操作…](img/image00237.jpeg)
- en: 'Edit `./src/app/app.component.ts` and replace with the following code:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`./src/app/app.component.ts`并替换为以下代码：
- en: '[PRE29]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create `./src/app/app.html` with the following code:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码创建`./src/app/app.html`：
- en: '[PRE30]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Tip
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: There are two menus as siblings in this template. They are also at the same
    level as `ion-nav` and not as parent or child. This structure is important for
    menu navigation to work.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个模板中，有两个菜单作为兄弟元素。它们也与`ion-nav`处于同一级别，而不是作为父或子元素。这种结构对于菜单导航的正常工作非常重要。
- en: 'Now, let''s create two pages, for which you only have to modify the standard
    pages from the "sidemenu" template. Open and edit the `./src/app/pages/page1/page1.html`
    template:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建两个页面，你只需要修改来自“sidemenu”模板的标准页面。打开并编辑`./src/app/pages/page1/page1.html`模板：
- en: '[PRE31]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the same folder, open and edit the `css` classes via `page1.scss`, as shown:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件夹中，通过`page1.scss`打开并编辑`css`类，如下所示：
- en: '[PRE32]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Tip
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that since you're using the sidemenu template, it already comes with a
    second page (for example, page2). There is no need to modify that page in this
    specific example.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，由于你使用的是sidemenu模板，它已经包含了一个第二页（例如，page2）。在这个特定示例中，不需要修改该页面。
- en: 'Open and edit the template for the second page at `./src/pages/page2/page2.html`,
    as shown:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`./src/pages/page2/page2.html`中打开并编辑第二页的模板，如下所示：
- en: '[PRE33]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Finally, since you added a `scss` file in the `page1` folder, you need to ensure
    that it''s imported in `/src/app/app`, which you can do as shown: Scss'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，由于你在`page1`文件夹中添加了一个`scss`文件，你需要确保它在`/src/app/app`中导入，你可以按照以下方式操作：Scss
- en: '[PRE34]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Go to your terminal and run the app:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入你的终端并运行应用：
- en: '[PRE35]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How it works…
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'Since this app is just an introduction to menu navigation, it will not manage
    page routing and state parameters. At a higher level, this is how the app flows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个应用只是对菜单导航的介绍，它不会管理页面路由和状态参数。在更高层次上，这是应用的流程：
- en: '`app.js` loads up both the menu templates in `app.html`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.js`加载了`app.html`中的两个菜单模板'
- en: The left menu will trigger the `openPage()` function to open PageTwo
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左侧菜单将触发`openPage()`函数以打开PageTwo
- en: The right menu will trigger the `rightMenuClick()` function to change the `this.text`
    property and display on the screen
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右侧菜单将触发`rightMenuClick()`函数以更改`this.text`属性并在屏幕上显示
- en: 'In the `app.html` template, the left menu has the following properties:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app.html`模板中，左侧菜单有以下属性：
- en: '[PRE36]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'However, the right menu has the following assigned instead:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，右侧菜单被分配了以下内容：
- en: '[PRE37]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `side` property will determine where, on the screen, the menu should show.
    There are two types of menus. The `overlay` option will leave the center page
    as it is, without moving. The `reveal` option would push the entire screen to
    show the menu. It depends on your app design to pick different types.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`side`属性将决定菜单在屏幕上的显示位置。有两种类型的菜单。`overlay`选项将保持中心页面不变，不移动。`reveal`选项将推动整个屏幕以显示菜单。这取决于你的应用设计来选择不同的类型。'
- en: 'Each `ion-menu` directive must have `[content]="content"` declared because
    it will use the content area to bind swipe left or right. In this case, it is
    basically a local variable in `ion-nav`, as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`ion-menu`指令都必须声明`[content]="content"`，因为它将使用内容区域来绑定左右滑动。在这种情况下，它基本上是`ion-nav`中的一个局部变量，如下所示：
- en: '[PRE38]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The use of the `ion-toolbar` inside `ion-menu` is optional if you want to have
    the title for your menu. The key to having a menu item displayed, is to use `ion-list`
    and `ion-item`. You can loop through an array to display the menu items dynamically,
    as illustrated:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要为菜单添加标题，则 `ion-toolbar` 在 `ion-menu` 内的使用是可选的。要显示菜单项的关键是使用 `ion-list` 和
    `ion-item`。您可以通过循环数组动态显示菜单项，如图所示：
- en: '[PRE39]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`*ngFor` is a replacement for `ng-repeat` in Ionic 1\. You need to use `#p`
    because it''s the same as declaring a local variable named `p`. This is best practice
    for variable isolation. Otherwise, the concept is very similar to Ionic 1 as you
    can grab `p.title` for each item in the `pages` array.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`*ngFor` 是在 Ionic 1 中 `ng-repeat` 的替代品。您需要使用 `#p` 因为它与声明一个名为 `p` 的局部变量相同。这是变量隔离的最佳实践。否则，其概念与
    Ionic 1 非常相似，您可以为 `pages` 数组中的每个项目获取 `p.title`。'
- en: 'On the right menu, instead of going to a different page via `nav.setRoot()`,
    you just set some text and dynamically display the text inside the menu, as shown:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧菜单中，您不需要通过 `nav.setRoot()` 跳转到不同的页面，只需设置一些文本并在菜单中动态显示该文本，如下所示：
- en: '[PRE40]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: So, if the text variable doesn't exist (which means that the user has not clicked
    on anything yet), the `ion-card` will not show anything via `*ngIf`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果文本变量不存在（这意味着用户尚未点击任何内容），则 `ion-card` 将不会通过 `*ngIf` 显示任何内容。
- en: 'For each page, you have to declare the same `ion-navbar`. Otherwise, you will
    lose the top navigation and buttons to the menus:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个页面，您必须声明相同的 `ion-navbar`。否则，您将丢失顶部导航和菜单中的按钮：
- en: '[PRE41]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note that `leftMenu` and `rightMenu` must be the same `id` you used earlier,
    in the `app.html` template.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`leftMenu` 和 `rightMenu` 必须与您在 `app.html` 模板中之前使用的相同 `id`。
- en: 'On the first page, there are two buttons to trigger the menus from within the
    content page as well, as shown:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一页，还有两个按钮可以触发内容页面内的菜单，如下所示：
- en: '[PRE42]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: These two buttons also call `menuToggle` to trigger the menu. The buttons are
    placed within the Ionic grid system. Since Ionic uses flexbox, it is very simple
    to use as you just need to create `ion-col` and `ion-row`. The `width` property,
    with a number, will determine the width percentage.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个按钮也调用 `menuToggle` 来触发菜单。按钮放置在 Ionic 网格系统中。由于 Ionic 使用 flexbox，因此使用起来非常简单，您只需创建
    `ion-col` 和 `ion-row`。带有数字的 `width` 属性将确定宽度百分比。
- en: See also
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For further usage of the Ionic menu, you can check out the following link:
    [http://ionicframework.com/docs/v2/components/#menus](http://ionicframework.com/docs/v2/components/#menus)'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于进一步使用 Ionic 菜单，您可以查看以下链接：[http://ionicframework.com/docs/v2/components/#menus](http://ionicframework.com/docs/v2/components/#menus)
- en: The API document for the Ionic menu is also available at [http://ionicframework.com/docs/v2/api/components/menu/Menu/](http://ionicframework.com/docs/v2/api/components/menu/Menu/)
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 Ionic 菜单的 API 文档也可在 [http://ionicframework.com/docs/v2/api/components/menu/Menu/](http://ionicframework.com/docs/v2/api/components/menu/Menu/)
    找到
- en: Navigating multiple pages with state parameters
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用状态参数导航多个页面
- en: App navigation is an important topic because it's the core of a user's experience.
    You want to manage the user's expectation on what would happen after they submit
    a form or after they go to a new tab. In addition, you may want to ensure that
    the user data is available on the correct page or in the correct state. This could
    also get more complicated when the requirement of a back navigation is involved.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 应用导航是一个重要的话题，因为它是一个用户体验的核心。您希望管理用户在提交表单或切换到新标签页后对会发生什么的预期。此外，您可能还想确保用户数据在正确的页面或正确的状态下可用。当涉及到返回导航的要求时，这可能会变得更加复杂。
- en: 'This section will teach you how to work with `NavController` and `NavParams`,
    which are the two important base classes to manage all navigation for the app.
    This is a screenshot of the app you will develop:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将向您介绍如何使用 `NavController` 和 `NavParams`，这两个是管理应用所有导航的重要基类。这是您将要开发的应用的截图：
- en: '![Navigating multiple pages with state parameters](img/image00238.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![使用状态参数导航多个页面](img/image00238.jpeg)'
- en: 'This app has three different examples of how to navigate to a different page
    and how to pass the parameters. When you click on any button, it will show the
    second page, which is as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用展示了三种不同的导航到不同页面以及如何传递参数的示例。当您点击任何按钮时，它将显示第二页，如下所示：
- en: '![Navigating multiple pages with state parameters](img/image00239.jpeg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![使用状态参数导航多个页面](img/image00239.jpeg)'
- en: The second page, basically, captures the parameters and displays them on the
    screen. It also gives you three different options to navigate back to the previous
    page.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 第二页基本上是捕获参数并在屏幕上显示它们。它还提供了三种不同的选项来导航回上一页。
- en: 'In this app, you will learn the following:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个应用中，你将学习以下内容：
- en: How to use `NavController` and `NavParams`
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 `NavController` 和 `NavParams`
- en: How to use `[navPush]` and `[navParams]` directly in the template
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在模板中直接使用 `[navPush]` 和 `[navParams]`
- en: How to add two-way data binding in an input box
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在输入框中添加双向数据绑定
- en: How to use **pipe** to convert a JSON object to a string and render it on the
    screen
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 **pipe** 将 JSON 对象转换为字符串并在屏幕上渲染
- en: Getting ready
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You only need to have the Ionic 2 CLI available to run this app.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需要确保有 Ionic 2 CLI 可用即可运行此应用。
- en: How to do it…
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Here are the instructions:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是说明：
- en: 'Create a new `Navigation` app using the blank template, as shown, and go into
    the `Navigation` folder:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用空白模板创建一个新的 `Navigation` 应用，如下所示，然后进入 `Navigation` 文件夹：
- en: '[PRE43]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Edit `./src/app/app.module.ts` with the following code:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码编辑 `./src/app/app.module.ts`：
- en: '[PRE44]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Tip
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The main reason you have to modify this file is to declare `OtherPage` as a
    dynamically loaded module via `NgModule`. You will have to declare `OtherPage`
    again in the `home.ts` file.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你必须修改此文件的主要原因是为了通过 `NgModule` 声明 `OtherPage` 为动态加载的模块。你将不得不在 `home.ts` 文件中再次声明
    `OtherPage`。
- en: Edit `./src/app/pages/home/home.html` `with the following code:`
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码编辑 `./src/app/pages/home/home.html`：
- en: '[PRE45]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Edit `./src/app/pages/home/home.ts` with the following code:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码编辑 `./src/app/pages/home/home.ts`：
- en: '[PRE46]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Create the `./src/app/pages/otherPage` folder.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `./src/app/pages/otherPage` 文件夹。
- en: 'Create the `otherPage.html` file in the previously created `otherPage` folder:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前创建的 `otherPage` 文件夹中创建 `otherPage.html` 文件：
- en: '[PRE47]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In the same folder, add `otherPage.ts` as well, with the following code:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件夹中，添加 `otherPage.ts`，代码如下：
- en: '[PRE48]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Go to your terminal and run the app:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入你的终端并运行应用：
- en: '[PRE49]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: How it works…
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'At a high level, this is how the app is structured:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看，这是应用的结构：
- en: The app will Bootstrap via `app.ts` and load `home.html` as the `root` page
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用将通过 `app.ts` 启动并加载 `home.html` 作为 `root` 页面
- en: Everything in the `/home` folder is your first page
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/home` 文件夹中的所有内容都是你的第一页'
- en: Everything in the `/otherPage` folder is your second page
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/otherPage` 文件夹中的所有内容都是你的第二页'
- en: These two pages are communicated using `NavParams` (or `navParams` from the
    template)
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这两个页面通过 `NavParams`（或模板中的 `navParams`）进行通信
- en: 'Let''s take a look at `home.ts`. You must import both `NavController` and `NavParams`:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `home.ts`。你必须导入 `NavController` 和 `NavParams`：
- en: '[PRE50]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'For your constructor, you need to do a few things, which are as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 对于构造函数，你需要做一些事情，如下所示：
- en: '[PRE51]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The `this.navCtrl` variable will reference the imported `NavController`. You
    are supposed to bring it in like this in order to use the navigation feature internally.
    The `myString` and `myJSON` are just variables that you will pass in the parameter
    to the second page. You also have to bring in the class for `OtherPage` and make
    it accessible to `navPush`, later, in your template.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.navCtrl` 变量将引用导入的 `NavController`。你应该像这样将其引入，以便使用内部导航功能。`myString` 和
    `myJSON` 只是变量，你将它们作为参数传递给第二页。你还要引入 `OtherPage` 类，并在模板中的 `navPush` 中使其可访问。'
- en: 'The `gotoOtherPage()` method, as shown, does one simple thing—it will push
    the page to the current navigation:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如所示，`gotoOtherPage()` 方法只做了一件事——它将页面推送到当前导航：
- en: '[PRE52]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: By doing so, your app will switch to `OtherPage` page right away and this will
    also include the parameters.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，你的应用将立即切换到 `OtherPage` 页面，并且这也会包括参数。
- en: 'The `home.html` template for the first page is to demonstrate the following
    three scenarios:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 第一页的 `home.html` 模板用于演示以下三个场景：
- en: 'You can use `[navPush]` and `[navParams]` directly inside the template. You
    just need to pass the internal object of the class handling this page. So, in
    this case, you have to pass `otherPage`, and not `OtherPage` (notice the uppercase
    O):'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以直接在模板中使用 `[navPush]` 和 `[navParams]`。你只需要传递处理此页面的类的内部对象。所以在这种情况下，你必须传递 `otherPage`，而不是
    `OtherPage`（注意大写的 O）：
- en: '[PRE53]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'You can also pass a JSON object as a param into `[navPush]`:'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以将一个 JSON 对象作为参数传递给 `[navPush]`：
- en: '[PRE54]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The third scenario is to navigate to a new page manually, as shown, using a
    method implemented inside the page class:'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三种情况是手动导航到新页面，如下所示，使用页面类内部实现的方法：
- en: '[PRE55]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Tip
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Unlike Angular 1 or Ionic 1, you cannot use ng-model to do two-way binding anymore.
    The new syntax will be `[(ngModel)]` for any input element instead.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与 Angular 1 或 Ionic 1 不同，你不能再使用 ng-model 进行双向绑定。新的语法将是 `[(ngModel)]` 用于任何输入元素。
- en: In your second page, you just need to make the `NavController` and `NavParams`
    available in the class from the constructor.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的第二页中，你只需在构造函数中将 `NavController` 和 `NavParams` 在类中可用。
- en: 'Let''s take a look at your `otherPage.js` file:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看你的 `otherPage.js` 文件：
- en: '[PRE56]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The template for the second page (that is, `otherPage.html`) is very simple.
    First, the navigation bar on the top is to enable the default back button:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 第二页（即 `otherPage.html`）的模板非常简单。首先，顶部的导航栏用于启用默认的返回按钮：
- en: '[PRE57]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The back button is an automatic mechanism in Ionic 2 so that you don't have
    to worry about when it would show.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 返回按钮是 Ionic 2 中的一个自动机制，因此你不必担心它何时会显示。
- en: 'The following code will display the variable content if the state parameter
    exists:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将在存在状态参数的情况下显示变量内容：
- en: '[PRE58]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The `ion-card` leverages `*ngIf` to decide whether this DOM should be rendered
    or not. Since `params.data` could be a JSON object, you need to convert it to
    a string to display it on the screen. Angular 1 has a filter but Angular 2 renamed
    this feature as pipe. However, the basic concept is the same. The `{{ params.data
    | json }}` code basically tells Angular 2 to apply the `json` function to `params.data`,
    and render the output.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`ion-card` 使用 `*ngIf` 来决定是否渲染此 DOM。由于 `params.data` 可能是一个 JSON 对象，你需要将其转换为字符串以在屏幕上显示。Angular
    1 有一个过滤器，但 Angular 2 将此功能重命名为管道。然而，基本概念是相同的。`{{ params.data | json }}` 代码基本上告诉
    Angular 2 应用 `json` 函数到 `params.data`，并渲染输出。'
- en: 'You could go back to the previous page using the `nav.pop()` function, as shown:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `nav.pop()` 函数返回上一页，如下所示：
- en: '[PRE59]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Alternatively, you could go back using a directive `navPop` and put that inside
    your button, as shown:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用指令 `navPop` 返回，并将其放入你的按钮中，如下所示：
- en: '[PRE60]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: So, those are the possibilities within the Ionic 2 navigation features.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这些都是 Ionic 2 导航功能中的可能性。
- en: See also
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'For more information refer to the official Ionic 2 documentation for `NavController`
    and `NavParams`, at the following links:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参考以下链接中的官方 Ionic 2 文档，关于 `NavController` 和 `NavParams`：
- en: '[http://ionicframework.com/docs/v2/api/components/nav/NavController/](http://ionicframework.com/docs/v2/api/components/nav/NavController/)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://ionicframework.com/docs/v2/api/components/nav/NavController/](http://ionicframework.com/docs/v2/api/components/nav/NavController/)'
- en: '[http://ionicframework.com/docs/v2/api/components/nav/NavParams/](http://ionicframework.com/docs/v2/api/components/nav/NavParams/)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://ionicframework.com/docs/v2/api/components/nav/NavParams/](http://ionicframework.com/docs/v2/api/components/nav/NavParams/)'
- en: 'To read more about how Angular Pipe works, you can review the following page
    for the previous example on JSON pipe at:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Angular 管道如何工作，你可以查看以下页面，关于 JSON 管道的先前示例：
- en: '[https://angular.io/docs/js/latest/api/common/JsonPipe-class.html](https://angular.io/docs/js/latest/api/common/JsonPipe-class.html)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://angular.io/docs/js/latest/api/common/JsonPipe-class.html](https://angular.io/docs/js/latest/api/common/JsonPipe-class.html)'
