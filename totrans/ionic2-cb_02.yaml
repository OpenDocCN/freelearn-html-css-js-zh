- en: Chapter 2. Adding Ionic 2 Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following tasks related to using Ionic 2
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding multiple pages using tabs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding left and right menu navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating multiple pages with state parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's possible to write a simple app with a handful of pages. Ionic provides
    a lot of out-of-the-box components that allow simple plug-n-play operations. When
    the app grows, managing different views and their custom data at a specific time
    or triggered event could be very complex. Ionic 2 comes with some changes in handling
    state and navigation. In Ionic 1, you could use UI-Router for advanced routing
    management mechanism. In Ionic 2, `NavController` will enable the push/pop implementation
    of the navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Since Ionic 2 introduces many new components, you have to understand how these
    components impact your app state hierarchy and when each state is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: Adding multiple pages using tabs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will explain how to work with the Ionic tab interface and expand
    it for other cases. The example used is very basic with three tabs and some sample
    Ionic components in each tab. This is a very common structure that you will find
    in many apps. You will learn how Ionic 2 structures the tab interface and how
    it translates to individual folders and files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, you will build three tabs, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Showing a simple text-only page to explain where to fit the components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing a sign up form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing a horizontal slider box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although the app is very straightforward, it will teach you a lot of key concepts
    in Angular 2 and Ionic 2\. Some of them are the component decorators, theme and
    the TypeScript compiler process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of the app where the middle tab is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding multiple pages using tabs](img/image00234.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since this is your first app being built from scratch, you need to ensure that
    you have followed through [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Creating
    Our First App with Ionic 2"), *Creating Our First App with Ionic 2*, to set up
    the environment and Ionic CLI. If you already had Ionic 1, it must be updated.
    For this, you can use the same command line as to install, which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `PagesAndTabs` app using the `tabs` template and go into the `PagesAndTabs`
    folder to start Visual Studio Code, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The blank template only gives you a basic page. Open the `Finder` app in Mac
    or Windows Explorer in Windows to see the following folder structure:![How to
    do it…](img/image00235.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will only modify what is inside the `/src` folder and not `/www`, as in
    Ionic 1\. Everything in the `/src` folder will be built, and the `/www` folder
    will be created automatically. We will also reserve the folder names and filenames
    as much as possible, since the main goal here is to understand how the tab template
    works and the areas you can modify.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open and edit the `/src/pages/tabs/tabs.html` template file with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The new template only updates the title and icons. This is because this example
    wants to reserve the naming of tab `root` variables. You could add more tabs using
    <ion-tab>, as needed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To add a page, you need to ensure that `tab1Root` points to an existing folder
    and template. Since you will reuse the existing tab structure, you can just modify
    the `/src/pages/home/home.html` template, as shown, as this is your first page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, in the same `/home`, folder, edit `home.ts` that corresponds to the same
    template, and enter the code here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the second page, `tab2Root`, you will follow a similar process by editing
    the `/src/pages/about/about.html` template, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `about.ts`, in the same folder from the preceding step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, for the `tab3Root` page, you can change the template so that it will
    show a slider in `/src/pages/contact/contact.html`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `/contact` folder, you need to edit `contact.ts` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to your terminal and type the following command line to run the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is actually a lot of new information and a lot of concepts in this simple
    app. At a higher level, this is how the app is structured:'
  prefs: []
  type: TYPE_NORMAL
- en: When you run the app, Cordova loads the `/www/index.html` file first to open.
    All of your code and templates are combined into one file, `/www/build/main.js`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/app` folder is where most of your logic belongs. It starts with `app.component.ts`
    as the Bootstrap file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each subfolder under the `/pages` folder will represent a page, which is a new
    concept in Ionic 2\. A page consists of an HTML template, TypeScript code, and
    an .`scss` file to customize that specific template only.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/theme` folder will contain variables and customizations at the global
    level to override the default theme from Ionic 2.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's start with everything inside the `/app` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `app.component.ts` file only imports all the required pages and components
    to start the app. This example needs the following four imports by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You must always import `Component`, `Platform`, and `StatusBar` from Ionic,
    because that will give you the `@Component` decorator to Bootstrap your app. A
    decorator is placed in front of its class to provide metadata for the class. The
    following example tells that the `MyApp` class has the characteristics of a component
    with a `template` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Since this is a simple example, you don't need to declare a lot except the template
    information. Similar to Ionic 1, you can use either `template` or `templateUrl`
    to point to a local file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Class is another new concept in ES6\. However, developers have been declaring
    class in various programming languages, such as Java and C#. In ES6, you can use
    class to be able to efficiently reuse code with better abstraction. A class could
    exist within that file context only. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if you want to use that class somewhere else, you have to export:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In a class, you can have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Variable, such as `this.a` or `this.b`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method, such as `doSomething()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructor that automatically executes (or initializes) when an object is created
    using the class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about classes can be found at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Another nice thing about ES6 here is the arrow function, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding is the same as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'An example (by passing a parameter) is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The same code can be rewritten as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about arrow function can be found at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).
  prefs: []
  type: TYPE_NORMAL
- en: One important thing in `app.component.ts` is that you must declare a `root`
    page. You can see that from the template via `[root]="rootPage"`,and then again
    in the constructor via `this.rootPage = TabsPage`. The square brackets, `[]`,
    around `root` mean that it's a property of that DOM node. This is a new concept
    from Angular 2 as it's trying to get rid of using a DOM property, such as `ngmodel`
    (which tends to result in lower performance). The assignment here is to tell Ionic
    2 that you will use `TabsPage`, which was imported earlier, and assign that as
    a `root` page. Then, the `ion-nav` directive will look at its own `root` property
    to start rendering the page. There seem to be a lot of abstractions and boilerplate
    compared to Ionic 1\. However, this practice is recommended to ensure better separation
    and scaling.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you understand how `app.component.ts` works, it''s easier to grasp the
    concepts from the other pages. Let''s take a look at the `/pages/tabs/tabs.ts`
    file because that is where you define the `TabsPage` class. From this file, you
    need to import three other pages, which are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The template for this page is in `tabs.html`. However, you could also put the
    template in a string inside the `.ts` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: ES6 also introduces a new feature, called a multiline template string. You probably
    realize that the preceding template string does not have any `join()` or string
    combine (`+`) operator. The reason is that you can use back-tick (`` ` `` `` `
    ``) to allow a multiline template.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, instead of doing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Below the page decorator, you need to export `TabsPage` (so that you can use
    in `app.component.ts`) and tell the constructor to use `tab1Root`, `tab2Root`,
    and `tab3Root` as root, as shown, for other pages in tab navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Ionic 2 tab declaration is very similar to Ionic 1, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You just have to make sure that the `root` property is pointing to another page.
  prefs: []
  type: TYPE_NORMAL
- en: '`tab1Root` is actually very simple to understand because it''s a text page
    where you add your own content and design within the `<ion-content>` element,
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to change the title, you can simply change the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '`tab2Root` and `tab3Root` are very similar in terms of how they are structured.
    Ionic 2 gives you the convenience of binding to an event right in the `page` class,
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example from `about.ts`, if the user enters `tab2Root`, it
    will call the `ionViewWillEnter ()` function automatically. This is a significant
    improvement because, in Ionic 1, you had to use `$ionicView.enter` on the `$scope`
    variable. Again, the concept of `$scope` no longer exists in Angular 2.
  prefs: []
  type: TYPE_NORMAL
- en: For a scalable app, it's better to separate templates into different files and
    avoid co-mingling templates inside the JavaScript code. The `templateUrl` must
    always point to the relative location of the `.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `./src/pages/contact/contact.html`, you can use slider box and bind to slide
    the change event, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: To get an event in Angular 2 (or Ionic 2), you have to use the parentheses,
    ( ), because the concept of `ng-click` or similar is no longer available. In this
    case, if the slide is changed based on `ionDidChange`, the `ion-slides` directive
    will trigger the `onSlideChanged()` function in the `ContactPage` class.
  prefs: []
  type: TYPE_NORMAL
- en: You cannot really run the TypeScript directly without having TypeScript to transpile
    the code into JavaScript. This process happens automatically behind the scenes
    when you run ionic serve. Also, when you change some code in the project, Ionic
    will detect the changes and rebuild the files before updating the browser. There
    is no need to hit the Refresh button every time.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mozilla developer network has a very extensive documentation on ECMAScript 6
    that you can find at the following link at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla](https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Angular 2 specific information, you can read directly from the Angular 2
    documentation at [https://angular.io/docs/ts/latest/index.html](https://angular.io/docs/ts/latest/index.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding left and right menu navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Menu navigation is a very common component in many mobile apps. You can use
    menu to allow users to change to different pages in the app, including login and
    logout. The menu could be placed on the left or right of the app. Ionic 2 also
    lets you detect events and customize the menu's look and feel further.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a screenshot of the app you will develop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding left and right menu navigation](img/image00236.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The app will have two pages and two menus. You can toggle either the left or
    right menu (but not both at the same time). In reality, it is much less likely
    that you will have both menus, but for the purposes of demonstration, this app
    will include both menus as the app will show the different properties of the menus
    that you can set. The left menu will change the page and the right menu will allow
    you to capture the exact item that is clicked on.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This app can run on your web browser, so there is no need to have a physical
    device available. Again, you only need to have Ionic 2 available on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `LeftRightMenu` app using the `sidemenu` template, as shown, and
    go to the `LeftRightMenu` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify your app folder structure to ensure that it's similar to the following:![How
    to do it…](img/image00237.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `./src/app/app.component.ts` and replace with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `./src/app/app.html` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: There are two menus as siblings in this template. They are also at the same
    level as `ion-nav` and not as parent or child. This structure is important for
    menu navigation to work.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s create two pages, for which you only have to modify the standard
    pages from the "sidemenu" template. Open and edit the `./src/app/pages/page1/page1.html`
    template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same folder, open and edit the `css` classes via `page1.scss`, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that since you're using the sidemenu template, it already comes with a
    second page (for example, page2). There is no need to modify that page in this
    specific example.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open and edit the template for the second page at `./src/pages/page2/page2.html`,
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, since you added a `scss` file in the `page1` folder, you need to ensure
    that it''s imported in `/src/app/app`, which you can do as shown: Scss'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to your terminal and run the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since this app is just an introduction to menu navigation, it will not manage
    page routing and state parameters. At a higher level, this is how the app flows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app.js` loads up both the menu templates in `app.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The left menu will trigger the `openPage()` function to open PageTwo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The right menu will trigger the `rightMenuClick()` function to change the `this.text`
    property and display on the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `app.html` template, the left menu has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'However, the right menu has the following assigned instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `side` property will determine where, on the screen, the menu should show.
    There are two types of menus. The `overlay` option will leave the center page
    as it is, without moving. The `reveal` option would push the entire screen to
    show the menu. It depends on your app design to pick different types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each `ion-menu` directive must have `[content]="content"` declared because
    it will use the content area to bind swipe left or right. In this case, it is
    basically a local variable in `ion-nav`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The use of the `ion-toolbar` inside `ion-menu` is optional if you want to have
    the title for your menu. The key to having a menu item displayed, is to use `ion-list`
    and `ion-item`. You can loop through an array to display the menu items dynamically,
    as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '`*ngFor` is a replacement for `ng-repeat` in Ionic 1\. You need to use `#p`
    because it''s the same as declaring a local variable named `p`. This is best practice
    for variable isolation. Otherwise, the concept is very similar to Ionic 1 as you
    can grab `p.title` for each item in the `pages` array.'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the right menu, instead of going to a different page via `nav.setRoot()`,
    you just set some text and dynamically display the text inside the menu, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: So, if the text variable doesn't exist (which means that the user has not clicked
    on anything yet), the `ion-card` will not show anything via `*ngIf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For each page, you have to declare the same `ion-navbar`. Otherwise, you will
    lose the top navigation and buttons to the menus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Note that `leftMenu` and `rightMenu` must be the same `id` you used earlier,
    in the `app.html` template.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the first page, there are two buttons to trigger the menus from within the
    content page as well, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: These two buttons also call `menuToggle` to trigger the menu. The buttons are
    placed within the Ionic grid system. Since Ionic uses flexbox, it is very simple
    to use as you just need to create `ion-col` and `ion-row`. The `width` property,
    with a number, will determine the width percentage.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For further usage of the Ionic menu, you can check out the following link:
    [http://ionicframework.com/docs/v2/components/#menus](http://ionicframework.com/docs/v2/components/#menus)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The API document for the Ionic menu is also available at [http://ionicframework.com/docs/v2/api/components/menu/Menu/](http://ionicframework.com/docs/v2/api/components/menu/Menu/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating multiple pages with state parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: App navigation is an important topic because it's the core of a user's experience.
    You want to manage the user's expectation on what would happen after they submit
    a form or after they go to a new tab. In addition, you may want to ensure that
    the user data is available on the correct page or in the correct state. This could
    also get more complicated when the requirement of a back navigation is involved.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section will teach you how to work with `NavController` and `NavParams`,
    which are the two important base classes to manage all navigation for the app.
    This is a screenshot of the app you will develop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating multiple pages with state parameters](img/image00238.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This app has three different examples of how to navigate to a different page
    and how to pass the parameters. When you click on any button, it will show the
    second page, which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigating multiple pages with state parameters](img/image00239.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The second page, basically, captures the parameters and displays them on the
    screen. It also gives you three different options to navigate back to the previous
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this app, you will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to use `NavController` and `NavParams`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use `[navPush]` and `[navParams]` directly in the template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add two-way data binding in an input box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use **pipe** to convert a JSON object to a string and render it on the
    screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You only need to have the Ionic 2 CLI available to run this app.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `Navigation` app using the blank template, as shown, and go into
    the `Navigation` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `./src/app/app.module.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The main reason you have to modify this file is to declare `OtherPage` as a
    dynamically loaded module via `NgModule`. You will have to declare `OtherPage`
    again in the `home.ts` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Edit `./src/app/pages/home/home.html` `with the following code:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `./src/app/pages/home/home.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the `./src/app/pages/otherPage` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `otherPage.html` file in the previously created `otherPage` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same folder, add `otherPage.ts` as well, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to your terminal and run the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At a high level, this is how the app is structured:'
  prefs: []
  type: TYPE_NORMAL
- en: The app will Bootstrap via `app.ts` and load `home.html` as the `root` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everything in the `/home` folder is your first page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everything in the `/otherPage` folder is your second page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These two pages are communicated using `NavParams` (or `navParams` from the
    template)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at `home.ts`. You must import both `NavController` and `NavParams`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'For your constructor, you need to do a few things, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The `this.navCtrl` variable will reference the imported `NavController`. You
    are supposed to bring it in like this in order to use the navigation feature internally.
    The `myString` and `myJSON` are just variables that you will pass in the parameter
    to the second page. You also have to bring in the class for `OtherPage` and make
    it accessible to `navPush`, later, in your template.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `gotoOtherPage()` method, as shown, does one simple thing—it will push
    the page to the current navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: By doing so, your app will switch to `OtherPage` page right away and this will
    also include the parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `home.html` template for the first page is to demonstrate the following
    three scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use `[navPush]` and `[navParams]` directly inside the template. You
    just need to pass the internal object of the class handling this page. So, in
    this case, you have to pass `otherPage`, and not `OtherPage` (notice the uppercase
    O):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also pass a JSON object as a param into `[navPush]`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The third scenario is to navigate to a new page manually, as shown, using a
    method implemented inside the page class:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Unlike Angular 1 or Ionic 1, you cannot use ng-model to do two-way binding anymore.
    The new syntax will be `[(ngModel)]` for any input element instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In your second page, you just need to make the `NavController` and `NavParams`
    available in the class from the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at your `otherPage.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The template for the second page (that is, `otherPage.html`) is very simple.
    First, the navigation bar on the top is to enable the default back button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The back button is an automatic mechanism in Ionic 2 so that you don't have
    to worry about when it would show.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code will display the variable content if the state parameter
    exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The `ion-card` leverages `*ngIf` to decide whether this DOM should be rendered
    or not. Since `params.data` could be a JSON object, you need to convert it to
    a string to display it on the screen. Angular 1 has a filter but Angular 2 renamed
    this feature as pipe. However, the basic concept is the same. The `{{ params.data
    | json }}` code basically tells Angular 2 to apply the `json` function to `params.data`,
    and render the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'You could go back to the previous page using the `nav.pop()` function, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you could go back using a directive `navPop` and put that inside
    your button, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: So, those are the possibilities within the Ionic 2 navigation features.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information refer to the official Ionic 2 documentation for `NavController`
    and `NavParams`, at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://ionicframework.com/docs/v2/api/components/nav/NavController/](http://ionicframework.com/docs/v2/api/components/nav/NavController/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://ionicframework.com/docs/v2/api/components/nav/NavParams/](http://ionicframework.com/docs/v2/api/components/nav/NavParams/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To read more about how Angular Pipe works, you can review the following page
    for the previous example on JSON pipe at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://angular.io/docs/js/latest/api/common/JsonPipe-class.html](https://angular.io/docs/js/latest/api/common/JsonPipe-class.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
