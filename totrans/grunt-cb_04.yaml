- en: Chapter 4. Generating CSS and JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Compiling LESS to CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling Sass to CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling Stylus to CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling CoffeeScript to JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling LiveScript to JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating source maps for LESS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating source maps for Sass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating source maps for CoffeeScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining custom functions with LESS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Stylus plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being as most of the technology in use today is based on standards, most notably
    the ones maintained by the W3C, and the evolution of standards being quite slow,
    there has always been a community of developers that aim to force evolution by
    building tools on top of existing antiquated technologies.
  prefs: []
  type: TYPE_NORMAL
- en: Generating **CSS** and **JavaScript** code has been around for quite some time
    now, and has become somewhat of an industry standard. Using the latest tools to
    generate code allows us to manage and build our web applications faster than ever
    before. We can now make use of more modern language features in our code, and
    we can finally make use of our programming skills to generate our CSS style sheets.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling LESS to CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-less (0.11.4)` plugin to compile
    our **LESS** style sheets to **CSS** style sheets, which can be used by our web
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through creating a simple LESS style sheet
    and compiling it to CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-less` plugin,
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create a simple LESS file called `styles.less` in our project directory
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can add the following `less` task to our configuration, which will
    compile the `styles.less` file to the `styles.css` file in our project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can run the task by using the `grunt less` command, which will produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now take a look at our project directory, we should see the new `styles.css`
    file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `less` task provides us with several useful options that can be used in
    conjunction with its basic compilation feature. We'll look at how to specify a
    root path for resources, minify the resulting output, rewrite URLs to be relative,
    force evaluation of imports, specify extra import paths, and add a banner to the
    resulting output.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying a root path for resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In case we''d like to prepend a path to all the URL resources in our L file,
    we can make use of the `rootpath` option, as per the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Minifying the resulting output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we''re always working toward a smaller download size for our web applications,
    we will eventually reach the point where we''d like to reduce the size of our
    style sheets by minimizing them. The `cleancss` option can be used to indicate
    that the **clean-css** utility should be used to compress the compiled result,
    as per the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Rewriting URLs to be relative
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case we import one LESS style sheet into another, the URL references to assets
    may become a bit confusing because we would have to reference resources into our
    style sheet, using URLs that are relative to whichever style sheet that might
    want to import it. This would, of course, also break if we were importing the
    same style sheet into two different style sheets, each with a different location.
  prefs: []
  type: TYPE_NORMAL
- en: By enabling the `rewriteUrls` option, we don't have to worry about having incorrect
    resource references when importing style sheets. The compiler will check all the
    URLs of referenced resources in the style sheet that is being imported, and alter
    them to be relative to their new location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Say we had the following directory structure with a main `style.less` file
    that imports the `body.less` file, which references the `background.png` image
    in the project root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: With the `rewriteUrls` option set to `false`, a reference from the `body.less`
    file of `url('../background.png')` will remain the same in the resulting `style.css`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `rewriteUrls` set to `true`, as per the following example, it will be
    changed to `url(''background.png'')` as this will be the new correct relative
    path from the resulting `style.css` file to the `background.png` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Forcing evaluation of imports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to receive error messages for missing import dependencies, we can
    set the `strictImports` option to `true`, as per the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Specifying extra import paths
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In case we''d like to allow our LESS style sheets to import style sheets other
    than the ones available to them via a simple relative path, we can indicate extra
    directories that should be scanned when importing files by using the `paths` option.
    The following example indicates that the `lib` directory in our project root should
    be included when scanning for imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Adding a banner to the resulting output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In case we would like to add some extra information to the beginning of our
    compiled style sheet, we can make use of the `banner` option. The following example
    adds a banner that contains some information about the file we''re producing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Compiling Sass to CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `sass (0.12.1)` plugin to compile our
    **Sass** style sheets to **CSS** style sheets, which can be used by our web application.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The contrib-sass plugin is slightly more popular and more mature that the sass
    plugin but requires the Sass **Ruby** library to be installed, which seems to
    be an unnecessary step for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that at the time of writing, the sass plugin did not work with Version
    `0.11.*` of Node.js, but a solution for this issue was in the works. In the following
    recipe, Version `0.10.*` was used.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure that we created
    in the *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through creating a simple Sass style sheet
    and compiling it to CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `sass` plugin as per
    the instructions provided in the *Installing a plugin* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create a simple Sass file called `styles.scss` in our project directory
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can add the following `sass` task to our configuration, which will
    compile the `styles.scss` file to the `styles.css` file in our project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can run the task by using the `grunt sass` command, which will produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now take a look at our project directory, we should see the new `styles.css`
    file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `sass` task provides us with several useful options that can be used in
    conjunction with its basic compilation feature. We'll look at how to change the
    output style, specify a path for images, and specify extra import paths.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the output style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two output styles available when compiling Sass style sheets, each
    providing a different level of readability. By default, the `outputStyle` option
    is set to `nested`, which produces a more readable output. To remove all white
    spaces from the output, you can set it to `compressed`, as per the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Specifying a path for images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `image-url` function is provided by the `sass` plugin if you''d like to
    have the ability to easily alter the paths to all the images referenced in a Sass
    style sheet. The following example makes use of the `imagePath` option to indicate
    that the `img` string should be prepended to every URL specified, using the `image-url`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Specifying extra import paths
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In case we''d like to allow our Sass style sheets to import style sheets other
    than the ones available to them via a simple relative path, we can indicate extra
    directories that should be scanned when importing files by using the `includePaths`
    option. The following example indicates that the `lib` directory in our project
    root should be included when scanning for imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Compiling Stylus to CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-stylus (0.18.0)` plugin to compile
    our **Stylus** style sheets to **CSS** style sheets, which can be used by our
    web application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure that we created
    in the *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through creating a simple Stylus style sheet
    and compiling it to CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-stylus` plugin,
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create a simple Stylus file called `styles.styl` in our project directory
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can add the following `stylus` task to our configuration, which will
    compile the `styles.styl` file to the `styles.css` file in our project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can run the task by using the `grunt stylus` command, which should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now take a look at our project directory, we should see the new `styles.css`
    file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the contents of this file will probably be in a compressed state due
    to the `stylus` task compressing its output by default. The contents are presented
    uncompressed here, for the sake of readability.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `stylus` task provides us with several useful options that can be used in
    conjunction with its basic compilation feature. We'll look at how to disable compression
    of the resulting CSS, specify extra import paths, define global variables, enable
    the inclusion of imported CSS files, and add a banner to the resulting output.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling compression of the resulting CSS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, the `stylus` task will compress the resulting CSS by removing all
    white spaces. This behavior can be disabled by setting the `compress` option to
    `false`, as per the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Specifying extra import paths
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In case we''d like to allow our Stylus style sheets to import style sheets
    other than the ones available to them via a simple relative path, we can indicate
    extra directories that should be scanned when importing files by using the `paths`
    option. The following example indicates that the `lib` directory in our project
    root should be included when scanning for imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Defining global variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By making use of the `define` option, we can define variables that should be
    made available to all the LESS style sheets that we target. The following example
    defines the `keyColor` variable that is to be available globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Enabling the inclusion of imported CSS files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When using the `@import` statement in Stylus style sheets to import regular
    CSS files, the default behavior of the compiler is to produce a standard CSS `@import`
    directive that references the file. By setting the `''include css''` option to
    `true`, as per the following example, we can direct the compiler to actually include
    the specified files into the final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Adding a banner to the resulting output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In case we''d like to add some extra information to the beginning of our compiled
    style sheet, we can make use of the `banner` option. The following example adds
    a banner containing information about the file we''re producing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Compiling CoffeeScript to JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-coffee (0.11.0)` plugin to compile
    **CoffeeScript** source files to **JavaScript**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through creating a simple CoffeeScript source
    file and compiling it to JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-coffee` plugin,
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create a simple CoffeeScript file called `main.coffee` in our project
    directory with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can add the following `coffee` task to our configuration, which will
    compile the `main.coffee` file to the `main.js` file in our project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can run the task by using the `grunt coffee` command, which should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now take a look at our project directory, we should see the new `main.js`
    file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `coffee` task provides us with several useful options that can be used in
    conjunction with its basic compilation feature. We'll look at how to compile without
    the top-level safety wrapper and concatenate multiple targets before compilation.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling without the top-level safety wrapper
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, the CoffeeScript compiler wraps the compiled code it produces in
    an anonymous JavaScript function. This practice prevents the produced code from
    polluting the global namespace, which can cause a host of problems. This behavior
    can be disabled by making use of the `bare` option as per the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Concatenating multiple targets before compilation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When specifying that multiple targets should be compiled into one resulting
    file, the default behavior is to join these files together after they were each
    compiled individually. With the top-level safety wrapper enabled, this would result
    in a file that contains the code of each compiled file, wrapped inside its own
    top-level function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To join the files before compilation and have all the compiled contents in
    one top-level wrapper function, we can make use of the `join` option, as per the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Compiling LiveScript to JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `livescript (0.5.1)` plugin to compile
    **LiveScript** source files to **JavaScript**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through creating a simple LiveScript source
    file and compiling it to JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by installing the package that contains the `contrib-livescript`
    plugin, as per the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create a simple LiveScript file called `main.ls` in our project directory
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can add the following `livescript` task to our configuration, which
    will compile the `main.ls` file to the `main.js` file in our project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can run the task by using the `grunt livescript` command, which should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now take a look at our project directory, we should see the new `main.js`
    file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Generating source maps for LESS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-less (0.11.4)` plugin to generate
    **source maps** when compiling our **LESS** style sheets to **CSS**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure that we created
    in the *Compiling LESS to CSS* recipe of this chapter. Be sure to refer to it
    if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through compiling our LESS style sheet to
    a CSS file, which contains both our source map and the source style sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll indicate that we''d like to generate a source map by setting
    the `sourceMap` option to `true` in our `less` task''s configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll indicate that we''d like to include the source of the generated
    CSS in the resulting file by setting the `outputSourceFiles` option to `true`
    in task''s configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can run the task by using the `grunt less` command, which should produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we now take a look at the generated `styles.css` file, we should see the
    source map and source style sheet embedded near the end of it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As seen in our main recipe, the default behavior for the `less` task is to embed
    the source map in the generated CSS file. This is the simplest way to both generate
    and consume a source map, but this method increases the size of the resulting
    file for all users, which in turn increases the loading time of the web application.
  prefs: []
  type: TYPE_NORMAL
- en: Most developers prefer to keep the source map and the CSS result separate, so
    that the average user shouldn't have to download the source map and the source
    file it references. This kind of setup is, however, a little bit more complex
    due to the fact that it requires the source maps and source files to be made available
    to the browser, which will make use of the CSS files produced.
  prefs: []
  type: TYPE_NORMAL
- en: The following steps take us through altering the configuration to indicate that
    the source map and source file should not be included in the resulting CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll indicate that we''d like to generate a source map by setting
    the `sourceMap` option to `true` in our `less` task''s configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we''ll alter the task to indicate that an external source map should
    be generated. This is done by specifying a name for the source map file by using
    the `sourceMapFilename` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can run the task by using the `grunt less` command, which should produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we now take a look at our project directory, we should see the `styles.css`
    and `styles.css.map` files. The generated style sheet should now also contain
    a reference to the source map file, and now the source map should also reference
    the `styles.less` source file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Making use of the generated source map is as simple as including the generated
    CSS file in a sample HTML file. We would, however, have to ensure that all the
    necessary files are accessible to the browser that opens the HTML file, which
    is taken care of in our current example due to all the files being located in
    the same directory. We must also ensure that the browser we use to open the HTML
    file provides support for the use of source maps.
  prefs: []
  type: TYPE_NORMAL
- en: The following steps take us through creating a sample HTML file, which includes
    the generated CSS file, and opening it in a browser that supports source maps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a sample HTML file, which will include the generated JavaScript
    source file. Let''s create a file in the project directory called `test.html`
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With our sample HTML file ready, we can open it using a browser that supports
    source maps. For our example, we'll use Google Chrome Version 36\. The following
    image shows the browser window with the developer's tools open and the `body`
    element selected for inspection.![How it works...](img/image00270.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we take a look at the styles inspector that is located in the developer's
    tools, we'll see that `styles.less:4` is being displayed as the location from
    which the body elements style is being derived. This indicates that our source
    map is working correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generating source maps for Sass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `sass (0.12.1)` plugin to generate **source
    maps** when compiling our **Sass** style sheets to **CSS**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure that we created
    in the *Compiling Sass to CSS* recipe in this chapter. Be sure to refer to it
    if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through altering our configuration so that
    a source map is generated when our Sass style sheet is compiled to CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll indicate that we''d like to generate a source map by setting
    the `sourceMap` option to `true` in our `sass` task''s configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can run the task by using the `grunt sass` command, which should produce
    output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we now take a look at our project directory, we should see the `styles.css`
    and `styles.css.map` files. The generated style sheet should now also contain
    a reference to the source map file, and the source map should now also reference
    the `styles.scss` source file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Making use of the generated source map is as simple as including the generated
    CSS file in a sample HTML file. We will, however, have to ensure that all the
    necessary files are accessible to the browser that opens the HTML file, which
    is taken care of in our current example due to all the files being located in
    the same directory. We must also ensure that the browser we use to open the HTML
    file provides support for the use of source maps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will take us through creating a sample HTML file that includes
    the generated CSS file and opening it in a browser that supports source maps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a sample HTML file called `test.html`, which will include the
    generated JavaScript source file, and provide it with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With our sample HTML file ready, we can open it using a browser that supports
    source maps. For our example, we'll use Google Chrome Version 36\. The following
    image shows the browser window with the developers tools open and the `body` element
    selected for inspection.![How it works...](img/image00271.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we take a look at the styles inspector that is located in the developer's
    tools, we'll see that `styles.scss:4` is being displayed as the location from
    where the body elements style is being derived. This indicates that our source
    map is working correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generating source maps for CoffeeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-coffee (0.11.0)` plugin to generate
    **source maps** when compiling our **CoffeeScript** source files to **JavaScript**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure that we created
    in the *Compiling CoffeeScript to JavaScript* recipe of this chapter. Be sure
    to refer to it if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through altering our configuration to generate
    a source map when compiling our CoffeeScript source files to JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll indicate that we''d like to generate a source map by setting
    the `sourceMap` option to `true` in our `coffee` task''s configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can run the task by using the `grunt coffee` command, which should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we now take a look at our project directory, we should see the `main.js`
    and `main.js.map` files. The generated JavaScript source file should now also
    contain a reference to the source map file, and the source map should now also
    reference the `main.coffee` source file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Making use of the generated source map is as simple as including the generated
    CSS file in a sample HTML file. We will, however, have to ensure that all the
    necessary files are accessible to the browser that opens the HTML file, which
    is taken care of in our current example due to all the files being located in
    the same directory. We must also ensure that the browser we use to open the HTML
    file provides support for the use of source maps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps take us through creating a sample HTML file that includes
    the generated JavaScript file and opening the HTML file in a browser that supports
    source maps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a sample HTML file called `test.html`, which will include the
    generated JavaScript source file, and provide it with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With our sample HTML file ready, we can open it using a browser that supports
    source maps. For our example, we'll use Google Chrome Version 36\. The following
    image shows the browser window with the developer's tools open:![How it works...](img/image00272.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You may have to refresh the browser after opening the developer's tools in order
    to see the appropriate console output discussed in the next step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If we take a look at the output in the console located in the developer's tools,
    we'll see that `main.coffee:2` is being displayed as the location from where the
    `'Functionality!'` string is being logged. This indicates that our source map
    is working correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defining custom functions with LESS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-less (0.11.4)` plugin to define
    custom functions that can be used in our **LESS** style sheets.
  prefs: []
  type: TYPE_NORMAL
- en: For our example, we'll create a custom function called `halfDarken`, which will
    darken any color provided to it by 50 percent. It will make use of the LESS library's
    built-in `darken` function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure that we created
    in the *Compiling LESS to CSS* recipe of this chapter. Be sure to refer to it
    if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through altering our configuration to define
    a custom function, and altering our LESS style sheet to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll alter the configuration of our `less` task by adding the `customFunctions`
    option and defining a stub for the `halfDarker` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we can add some logic for the `halfDarken` function that darkens the
    provided color by 50 percent and returns the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we''ve got the function defined, we can alter our `styles.less` file to
    make use of it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now run our task by using the `grunt less` command, which should produce
    the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we now take a look inside the resulting `styles.css` file, we can see that
    the `halfDarken` function has made the color that was provided to it 50 percent
    darker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using Stylus plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll make use of the `contrib-stylus (0.18.0)` plugin to compile
    **Stylus** style sheets that make use of one of the Stylus libraries provided
    by the developer community.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A partial list of the plugins available for the Stylus framework can be found
    at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/LearnBoost/stylus/wiki](https://github.com/LearnBoost/stylus/wiki)'
  prefs: []
  type: TYPE_NORMAL
- en: For our example, we'll make use of the **axis** library that comes packaged
    with the **Roots** platform. It provides a host of useful functions, mixins, and
    other utilities that you'll be sure to make use of in your day-to-day style sheet
    development.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll work with the basic project structure that we created
    in the *Compiling Stylus to CSS* recipe of this chapter. Be sure to refer to it
    if you are not yet familiar with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps will take us through altering our configuration in order
    to provide our style sheets with access to the axis library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll need to install the `axis-css` package on our local project path,
    using the `npm install --save axis-css` command. This should produce output that
    contains the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the library now installed, we can alter the configuration of the `stylus`
    task in such a way that the library is loaded before the target style sheets are
    compiled. This is done with the `use` option that accepts an array of imported
    libraries that are prepared to be used as Stylus plugins. The following configuration
    uses this option to load the `axis-css` plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As a test, we can now also make use of a feature provided by the axis library
    in our sample style sheet. Let''s alter the contents of `main.styl` to include
    the special `absolute` property provided by the library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now test our setup by running the `grunt stylus` command, which should
    produce output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we take a look inside the generated `main.css` file, we''ll now see that
    it contains positional properties that were generated by the axis library''s `absolute`
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the contents of this file will probably be in a compressed state due
    to the stylus task compressing its output by default. The contents are presented
    uncompressed here for the sake of readability.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
