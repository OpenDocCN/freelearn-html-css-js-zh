- en: Chapter 4. Generating CSS and JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。生成CSS和JavaScript
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下菜谱：
- en: Compiling LESS to CSS
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译LESS到CSS
- en: Compiling Sass to CSS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译Sass到CSS
- en: Compiling Stylus to CSS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译Stylus到CSS
- en: Compiling CoffeeScript to JavaScript
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译CoffeeScript到JavaScript
- en: Compiling LiveScript to JavaScript
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译LiveScript到JavaScript
- en: Generating source maps for LESS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为LESS生成源映射
- en: Generating source maps for Sass
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Sass生成源映射
- en: Generating source maps for CoffeeScript
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为CoffeeScript生成源映射
- en: Defining custom functions with LESS
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LESS定义自定义函数
- en: Using Stylus plugins
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Stylus插件
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Being as most of the technology in use today is based on standards, most notably
    the ones maintained by the W3C, and the evolution of standards being quite slow,
    there has always been a community of developers that aim to force evolution by
    building tools on top of existing antiquated technologies.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于今天使用的多数技术都是基于标准的，尤其是由W3C维护的标准，而标准的演变相当缓慢，因此一直存在一个开发者社区，他们旨在通过在现有陈旧技术之上构建工具来推动演变。
- en: Generating **CSS** and **JavaScript** code has been around for quite some time
    now, and has become somewhat of an industry standard. Using the latest tools to
    generate code allows us to manage and build our web applications faster than ever
    before. We can now make use of more modern language features in our code, and
    we can finally make use of our programming skills to generate our CSS style sheets.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 生成**CSS**和**JavaScript**代码已经存在一段时间了，并且已经成为某种行业标准。使用最新的工具生成代码使我们能够比以往任何时候都更快地管理和构建我们的Web应用程序。现在，我们可以在代码中使用更多现代语言特性，并且我们终于可以利用我们的编程技能来生成我们的CSS样式表。
- en: Compiling LESS to CSS
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译LESS到CSS
- en: In this recipe, we'll make use of the `contrib-less (0.11.4)` plugin to compile
    our **LESS** style sheets to **CSS** style sheets, which can be used by our web
    applications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`contrib-less (0.11.4)`插件来编译我们的**LESS**样式表到**CSS**样式表，这些样式表可以被我们的Web应用程序使用。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中创建的基本项目结构，即[在项目中安装Grunt](part0015.xhtml#aid-E9OE1
    "第1章。使用Grunt入门")菜谱中的*使用Grunt入门*。如果您还不熟悉其内容，请务必参考。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'The following steps will take us through creating a simple LESS style sheet
    and compiling it to CSS:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个简单的LESS样式表并将其编译为CSS：
- en: We'll start by installing the package that contains the `contrib-less` plugin,
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将按照[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中提供的*安装插件*菜谱中的说明，首先安装包含`contrib-less`插件的包。
- en: 'Let''s create a simple LESS file called `styles.less` in our project directory
    with the following contents:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在项目目录中创建一个简单的LESS文件，名为`styles.less`，其内容如下：
- en: '[PRE0]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we can add the following `less` task to our configuration, which will
    compile the `styles.less` file to the `styles.css` file in our project directory:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在配置中添加以下`less`任务，它将编译项目目录中的`styles.less`文件到`styles.css`文件：
- en: '[PRE1]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, we can run the task by using the `grunt less` command, which will produce
    output similar to the following:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`grunt less`命令来运行任务，这将产生类似于以下内容的输出：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we now take a look at our project directory, we should see the new `styles.css`
    file with the following contents:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在查看我们的项目目录，我们应该会看到新的`styles.css`文件，其内容如下：
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There's more...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The `less` task provides us with several useful options that can be used in
    conjunction with its basic compilation feature. We'll look at how to specify a
    root path for resources, minify the resulting output, rewrite URLs to be relative,
    force evaluation of imports, specify extra import paths, and add a banner to the
    resulting output.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`less`任务为我们提供了几个有用的选项，可以与它的基本编译功能一起使用。我们将探讨如何指定资源根路径、最小化输出结果、重写URL为相对路径、强制评估导入、指定额外的导入路径以及向输出结果添加横幅。'
- en: Specifying a root path for resources
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定资源根路径
- en: 'In case we''d like to prepend a path to all the URL resources in our L file,
    we can make use of the `rootpath` option, as per the following example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在L文件中的所有URL资源前添加路径，我们可以使用`rootpath`选项，如以下示例所示：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Minifying the resulting output
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最小化输出结果
- en: 'As we''re always working toward a smaller download size for our web applications,
    we will eventually reach the point where we''d like to reduce the size of our
    style sheets by minimizing them. The `cleancss` option can be used to indicate
    that the **clean-css** utility should be used to compress the compiled result,
    as per the following example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们始终致力于减小我们的Web应用的下载大小，我们最终会达到想要通过最小化样式表来减小样式表大小的点。可以使用`cleancss`选项来指示应该使用**clean-css**实用程序来压缩编译结果，如以下示例所示：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Rewriting URLs to be relative
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重写URL为相对路径
- en: In case we import one LESS style sheet into another, the URL references to assets
    may become a bit confusing because we would have to reference resources into our
    style sheet, using URLs that are relative to whichever style sheet that might
    want to import it. This would, of course, also break if we were importing the
    same style sheet into two different style sheets, each with a different location.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将一个LESS样式表导入到另一个中，对资产的URL引用可能会变得有些令人困惑，因为我们必须使用相对于可能想要导入它的任何样式表的URL来引用资源。当然，如果我们将相同的样式表导入到两个不同的样式表中，每个样式表的位置都不同，这也会导致问题。
- en: By enabling the `rewriteUrls` option, we don't have to worry about having incorrect
    resource references when importing style sheets. The compiler will check all the
    URLs of referenced resources in the style sheet that is being imported, and alter
    them to be relative to their new location.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过启用`rewriteUrls`选项，我们不必担心在导入样式表时出现不正确的资源引用。编译器将检查正在导入的样式表中引用的所有资源的URL，并将它们更改为相对于它们新位置的路由。
- en: 'Say we had the following directory structure with a main `style.less` file
    that imports the `body.less` file, which references the `background.png` image
    in the project root:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个以下目录结构，其中包含一个主`style.less`文件，它导入`body.less`文件，该文件在项目根目录中引用了`background.png`图像：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With the `rewriteUrls` option set to `false`, a reference from the `body.less`
    file of `url('../background.png')` will remain the same in the resulting `style.css`
    file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当`rewriteUrls`选项设置为`false`时，`body.less`文件中的`url('../background.png')`引用在生成的`style.css`文件中将保持不变。
- en: 'With `rewriteUrls` set to `true`, as per the following example, it will be
    changed to `url(''background.png'')` as this will be the new correct relative
    path from the resulting `style.css` file to the `background.png` file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当`rewriteUrls`设置为`true`时，如以下示例所示，它将被更改为`url('background.png')`，因为这将是`style.css`文件到`background.png`文件的新正确相对路径：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Forcing evaluation of imports
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 强制评估导入
- en: 'In order to receive error messages for missing import dependencies, we can
    set the `strictImports` option to `true`, as per the following example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了接收缺失导入依赖项的错误消息，我们可以将`strictImports`选项设置为`true`，如以下示例所示：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Specifying extra import paths
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定额外的导入路径
- en: 'In case we''d like to allow our LESS style sheets to import style sheets other
    than the ones available to them via a simple relative path, we can indicate extra
    directories that should be scanned when importing files by using the `paths` option.
    The following example indicates that the `lib` directory in our project root should
    be included when scanning for imports:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望允许我们的LESS样式表导入除了通过简单相对路径可用的样式表之外的样式表，我们可以通过使用`paths`选项来指示在导入文件时应扫描的额外目录。以下示例指示在扫描导入时应该包含项目根目录中的`lib`目录：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adding a banner to the resulting output
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向输出结果添加横幅
- en: 'In case we would like to add some extra information to the beginning of our
    compiled style sheet, we can make use of the `banner` option. The following example
    adds a banner that contains some information about the file we''re producing:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在编译后的样式表开头添加一些额外信息，我们可以使用`banner`选项。以下示例添加了一个包含有关我们正在生成的文件信息的横幅：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Compiling Sass to CSS
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译Sass到CSS
- en: In this recipe, we'll make use of the `sass (0.12.1)` plugin to compile our
    **Sass** style sheets to **CSS** style sheets, which can be used by our web application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`sass (0.12.1)`插件将我们的**Sass**样式表编译成**CSS**样式表，这些样式表可以被我们的Web应用使用。
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The contrib-sass plugin is slightly more popular and more mature that the sass
    plugin but requires the Sass **Ruby** library to be installed, which seems to
    be an unnecessary step for this recipe.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: contrib-sass插件比sass插件更受欢迎、更成熟，但需要安装Sass **Ruby**库，这似乎是本配方中不必要的步骤。
- en: Please note that at the time of writing, the sass plugin did not work with Version
    `0.11.*` of Node.js, but a solution for this issue was in the works. In the following
    recipe, Version `0.10.*` was used.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在撰写本文时，Sass插件与Node.js的`0.11.*`版本不兼容，但针对此问题的解决方案正在开发中。在下面的配方中，使用了`0.10.*`版本。
- en: Getting ready
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure that we created
    in the *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章. 使用Grunt入门")中“在项目中安装Grunt”配方中创建的基本项目结构，即*使用Grunt入门*。如果您还不熟悉其内容，请务必参考。
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will take us through creating a simple Sass style sheet
    and compiling it to CSS:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们创建一个简单的Sass样式表并将其编译为CSS：
- en: We'll start by installing the package that contains the `sass` plugin as per
    the instructions provided in the *Installing a plugin* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将按照[第1章](part0015.xhtml#aid-E9OE1 "第1章. 使用Grunt入门")中“安装插件”配方中的说明安装包含`sass`插件的包。
- en: 'Let''s create a simple Sass file called `styles.scss` in our project directory
    with the following contents:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在项目目录中创建一个名为`styles.scss`的简单Sass文件，其内容如下：
- en: '[PRE11]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we can add the following `sass` task to our configuration, which will
    compile the `styles.scss` file to the `styles.css` file in our project directory:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以将以下`sass`任务添加到我们的配置中，该任务将编译项目目录中的`styles.scss`文件到`styles.css`文件：
- en: '[PRE12]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, we can run the task by using the `grunt sass` command, which will produce
    output similar to the following:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`grunt sass`命令运行任务，这将产生类似于以下内容的输出：
- en: '[PRE13]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If we now take a look at our project directory, we should see the new `styles.css`
    file with the following contents:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在查看我们的项目目录，我们应该看到包含以下内容的新的`styles.css`文件：
- en: '[PRE14]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There's more...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `sass` task provides us with several useful options that can be used in
    conjunction with its basic compilation feature. We'll look at how to change the
    output style, specify a path for images, and specify extra import paths.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`sass`任务为我们提供了几个有用的选项，可以与基本编译功能一起使用。我们将探讨如何更改输出样式、指定图像路径以及指定额外的导入路径。'
- en: Changing the output style
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变输出样式
- en: 'There are two output styles available when compiling Sass style sheets, each
    providing a different level of readability. By default, the `outputStyle` option
    is set to `nested`, which produces a more readable output. To remove all white
    spaces from the output, you can set it to `compressed`, as per the following example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译Sass样式表时，有两种输出样式可用，每种都提供不同级别的可读性。默认情况下，`outputStyle`选项设置为`nested`，这会产生更易读的输出。要删除输出中的所有空白，您可以将其设置为`compressed`，如下例所示：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Specifying a path for images
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定图像路径
- en: 'The `image-url` function is provided by the `sass` plugin if you''d like to
    have the ability to easily alter the paths to all the images referenced in a Sass
    style sheet. The following example makes use of the `imagePath` option to indicate
    that the `img` string should be prepended to every URL specified, using the `image-url`
    function:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想轻松更改Sass样式表中引用的所有图像的路径，`sass`插件提供了`image-url`函数。以下示例使用`imagePath`选项来指示`img`字符串应添加到指定的每个URL之前，使用`image-url`函数：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Specifying extra import paths
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定额外的导入路径
- en: 'In case we''d like to allow our Sass style sheets to import style sheets other
    than the ones available to them via a simple relative path, we can indicate extra
    directories that should be scanned when importing files by using the `includePaths`
    option. The following example indicates that the `lib` directory in our project
    root should be included when scanning for imports:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望允许我们的Sass样式表导入除简单相对路径之外的其他样式表，我们可以通过使用`includePaths`选项来指示在导入文件时应扫描的额外目录。以下示例指示在扫描导入时，应包含项目根目录中的`lib`目录：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Compiling Stylus to CSS
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Stylus编译为CSS
- en: In this recipe, we'll make use of the `contrib-stylus (0.18.0)` plugin to compile
    our **Stylus** style sheets to **CSS** style sheets, which can be used by our
    web application.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`contrib-stylus (0.18.0)`插件将我们的**Stylus**样式表编译成**CSS**样式表，这些样式表可以被我们的Web应用程序使用。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure that we created
    in the *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中创建的基本项目结构，即[第1章](part0015.xhtml#aid-E9OE1
    "第1章。使用Grunt入门")的*在项目中安装Grunt*菜谱中创建的结构。如果您还不熟悉其内容，请务必参考。
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will take us through creating a simple Stylus style sheet
    and compiling it to CSS:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们创建一个简单的Stylus样式表并将其编译成CSS：
- en: We'll start by installing the package that contains the `contrib-stylus` plugin,
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中*安装插件*菜谱中提供的说明安装包含`contrib-stylus`插件的包。
- en: 'Let''s create a simple Stylus file called `styles.styl` in our project directory
    with the following contents:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在项目目录中创建一个名为`styles.styl`的简单Stylus文件，其内容如下：
- en: '[PRE18]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, we can add the following `stylus` task to our configuration, which will
    compile the `styles.styl` file to the `styles.css` file in our project directory:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在配置中添加以下`stylus`任务，该任务将编译项目目录中的`styles.styl`文件到`styles.css`文件：
- en: '[PRE19]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, we can run the task by using the `grunt stylus` command, which should
    produce output similar to the following:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以使用`grunt stylus`命令来运行任务，这应该会产生类似于以下内容的输出：
- en: '[PRE20]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If we now take a look at our project directory, we should see the new `styles.css`
    file with the following contents:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在查看我们的项目目录，我们应该看到新创建的`styles.css`文件，其内容如下：
- en: '[PRE21]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Tip
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that the contents of this file will probably be in a compressed state due
    to the `stylus` task compressing its output by default. The contents are presented
    uncompressed here, for the sake of readability.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，由于`stylus`任务默认会压缩输出，因此此文件的内容可能处于压缩状态。这里以未压缩的形式展示，以便于阅读。
- en: There's more...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The `stylus` task provides us with several useful options that can be used in
    conjunction with its basic compilation feature. We'll look at how to disable compression
    of the resulting CSS, specify extra import paths, define global variables, enable
    the inclusion of imported CSS files, and add a banner to the resulting output.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`stylus`任务为我们提供了几个有用的选项，这些选项可以与其基本的编译功能结合使用。我们将探讨如何禁用结果的CSS压缩、指定额外的导入路径、定义全局变量、启用导入CSS文件的功能以及向输出添加横幅。'
- en: Disabling compression of the resulting CSS
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用结果的CSS压缩
- en: 'By default, the `stylus` task will compress the resulting CSS by removing all
    white spaces. This behavior can be disabled by setting the `compress` option to
    `false`, as per the following example:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`stylus`任务会通过删除所有空白来压缩结果的CSS。这种行为可以通过将`compress`选项设置为`false`来禁用，如下例所示：
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Specifying extra import paths
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定额外的导入路径
- en: 'In case we''d like to allow our Stylus style sheets to import style sheets
    other than the ones available to them via a simple relative path, we can indicate
    extra directories that should be scanned when importing files by using the `paths`
    option. The following example indicates that the `lib` directory in our project
    root should be included when scanning for imports:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望允许我们的Stylus样式表导入除简单相对路径之外的其他样式表，我们可以通过使用`paths`选项来指示在导入文件时应扫描的额外目录。以下示例指示在扫描导入时应该包含项目根目录中的`lib`目录：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Defining global variables
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义全局变量
- en: 'By making use of the `define` option, we can define variables that should be
    made available to all the LESS style sheets that we target. The following example
    defines the `keyColor` variable that is to be available globally:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`define`选项，我们可以定义应该对所有目标LESS样式表可用的变量。以下示例定义了一个全局可用的`keyColor`变量：
- en: '[PRE25]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Enabling the inclusion of imported CSS files
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用导入CSS文件的功能
- en: 'When using the `@import` statement in Stylus style sheets to import regular
    CSS files, the default behavior of the compiler is to produce a standard CSS `@import`
    directive that references the file. By setting the `''include css''` option to
    `true`, as per the following example, we can direct the compiler to actually include
    the specified files into the final result:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当在Stylus样式表中使用`@import`语句导入常规CSS文件时，编译器的默认行为是生成一个标准的CSS `@import`指令，该指令引用文件。通过将`'include
    css'`选项设置为`true`，如下例所示，我们可以指导编译器将指定的文件实际包含到最终结果中：
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Adding a banner to the resulting output
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加横幅到输出结果
- en: 'In case we''d like to add some extra information to the beginning of our compiled
    style sheet, we can make use of the `banner` option. The following example adds
    a banner containing information about the file we''re producing:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在编译后的样式表中添加一些额外信息到开头，我们可以使用`banner`选项。以下示例添加了一个包含我们生成文件信息的横幅：
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Compiling CoffeeScript to JavaScript
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将CoffeeScript编译成JavaScript
- en: In this recipe, we'll make use of the `contrib-coffee (0.11.0)` plugin to compile
    **CoffeeScript** source files to **JavaScript**.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将使用`contrib-coffee (0.11.0)`插件将**CoffeeScript**源文件编译成**JavaScript**。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用[第1章](part0015.xhtml#aid-E9OE1 "第1章. 使用Grunt入门")中“在项目中安装Grunt”配方中创建的基本项目结构。如果您还不熟悉其内容，请务必参考。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'The following steps will take us through creating a simple CoffeeScript source
    file and compiling it to JavaScript:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们创建一个简单的CoffeeScript源文件并将其编译成JavaScript：
- en: We'll start by installing the package that contains the `contrib-coffee` plugin,
    as per the instructions provided in the *Installing a plugin* recipe in [Chapter
    1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"), *Getting
    Started with Grunt*.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先按照[第1章](part0015.xhtml#aid-E9OE1 "第1章. 使用Grunt入门")中“安装插件”配方提供的说明安装包含`contrib-coffee`插件的包，*使用Grunt入门*。
- en: 'Let''s create a simple CoffeeScript file called `main.coffee` in our project
    directory with the following contents:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在项目目录中创建一个名为`main.coffee`的简单CoffeeScript文件，其内容如下：
- en: '[PRE28]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, we can add the following `coffee` task to our configuration, which will
    compile the `main.coffee` file to the `main.js` file in our project directory:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在配置中添加以下`coffee`任务，它将编译项目目录中的`main.coffee`文件到`main.js`文件：
- en: '[PRE29]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, we can run the task by using the `grunt coffee` command, which should
    produce output similar to the following:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以通过使用`grunt coffee`命令来运行任务，这应该会产生类似于以下内容的输出：
- en: '[PRE30]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If we now take a look at our project directory, we should see the new `main.js`
    file with the following contents:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在查看我们的项目目录，我们应该看到包含以下内容的新的`main.js`文件：
- en: '[PRE31]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: There's more...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The `coffee` task provides us with several useful options that can be used in
    conjunction with its basic compilation feature. We'll look at how to compile without
    the top-level safety wrapper and concatenate multiple targets before compilation.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`coffee`任务为我们提供了几个有用的选项，这些选项可以与基本编译功能一起使用。我们将探讨如何在没有顶级安全包装器的情况下编译，并在编译前连接多个目标。'
- en: Compiling without the top-level safety wrapper
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在没有顶级安全包装器的情况下编译
- en: 'By default, the CoffeeScript compiler wraps the compiled code it produces in
    an anonymous JavaScript function. This practice prevents the produced code from
    polluting the global namespace, which can cause a host of problems. This behavior
    can be disabled by making use of the `bare` option as per the following example:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，CoffeeScript编译器将生成的编译代码包裹在一个匿名JavaScript函数中。这种做法可以防止生成的代码污染全局命名空间，从而避免一系列问题。可以通过使用`bare`选项来禁用此行为，如下例所示：
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Concatenating multiple targets before compilation
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在编译前连接多个目标
- en: When specifying that multiple targets should be compiled into one resulting
    file, the default behavior is to join these files together after they were each
    compiled individually. With the top-level safety wrapper enabled, this would result
    in a file that contains the code of each compiled file, wrapped inside its own
    top-level function.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定多个目标应编译到一个结果文件中时，默认行为是在每个文件单独编译后将其合并在一起。启用顶级安全包装后，这将导致一个包含每个编译文件代码的文件，每个文件都包裹在其自己的顶级函数中。
- en: 'To join the files before compilation and have all the compiled contents in
    one top-level wrapper function, we can make use of the `join` option, as per the
    following example:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在编译前合并文件并使所有编译内容都在一个顶级包装函数中，我们可以使用`join`选项，如下例所示：
- en: '[PRE33]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Compiling LiveScript to JavaScript
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将LiveScript编译成JavaScript
- en: In this recipe, we'll make use of the `livescript (0.5.1)` plugin to compile
    **LiveScript** source files to **JavaScript**.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用`livescript (0.5.1)`插件将**LiveScript**源文件编译到**JavaScript**。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure we created in the
    *Installing Grunt on a project* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Getting Started with Grunt"), *Getting Started with Grunt*. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用我们在[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中*在项目中安装Grunt*配方中创建的基本项目结构。如果您还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will take us through creating a simple LiveScript source
    file and compiling it to JavaScript:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个简单的LiveScript源文件并将其编译成JavaScript：
- en: We'll start by installing the package that contains the `contrib-livescript`
    plugin, as per the instructions provided in the *Installing a plugin* recipe in
    [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Getting Started with Grunt"),
    *Getting Started with Grunt*.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将按照[第1章](part0015.xhtml#aid-E9OE1 "第1章。使用Grunt入门")中*安装插件*配方提供的说明来安装包含`contrib-livescript`插件的包，*使用Grunt入门*。
- en: 'Let''s create a simple LiveScript file called `main.ls` in our project directory
    with the following contents:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在项目目录中创建一个名为`main.ls`的简单LiveScript文件，其内容如下：
- en: '[PRE34]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, we can add the following `livescript` task to our configuration, which
    will compile the `main.ls` file to the `main.js` file in our project directory:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在配置中添加以下`livescript`任务，它将编译项目目录中的`main.ls`文件到`main.js`文件：
- en: '[PRE35]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, we can run the task by using the `grunt livescript` command, which should
    produce output similar to the following:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以通过使用`grunt livescript`命令来运行任务，它应该产生类似以下内容的输出：
- en: '[PRE36]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If we now take a look at our project directory, we should see the new `main.js`
    file with the following contents:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在查看我们的项目目录，我们应该看到包含以下内容的新的`main.js`文件：
- en: '[PRE37]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Generating source maps for LESS
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为LESS生成源映射
- en: In this recipe, we'll make use of the `contrib-less (0.11.4)` plugin to generate
    **source maps** when compiling our **LESS** style sheets to **CSS**.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用`contrib-less (0.11.4)`插件在将我们的**LESS**样式表编译到**CSS**时生成**源映射**。
- en: Getting ready
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure that we created
    in the *Compiling LESS to CSS* recipe of this chapter. Be sure to refer to it
    if you are not yet familiar with its contents.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用本章中*将LESS编译成CSS*配方中创建的基本项目结构。如果您还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will take us through compiling our LESS style sheet to
    a CSS file, which contains both our source map and the source style sheet:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们将我们的LESS样式表编译到一个CSS文件中，该文件包含我们的源映射和源样式表：
- en: 'First, we''ll indicate that we''d like to generate a source map by setting
    the `sourceMap` option to `true` in our `less` task''s configuration:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将通过在`less`任务的配置中将`sourceMap`选项设置为`true`来指示我们希望生成源映射：
- en: '[PRE38]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, we''ll indicate that we''d like to include the source of the generated
    CSS in the resulting file by setting the `outputSourceFiles` option to `true`
    in task''s configuration:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将通过在任务的配置中将`outputSourceFiles`选项设置为`true`来指示我们希望在生成的文件中包含生成的CSS的来源：
- en: '[PRE39]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then, we can run the task by using the `grunt less` command, which should produce
    output similar to the following:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以通过使用`grunt less`命令来运行任务，它应该产生类似以下内容的输出：
- en: '[PRE40]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: If we now take a look at the generated `styles.css` file, we should see the
    source map and source style sheet embedded near the end of it.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在查看生成的`styles.css`文件，我们应该在文件末尾看到嵌入的源映射和源样式表。
- en: There's more...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As seen in our main recipe, the default behavior for the `less` task is to embed
    the source map in the generated CSS file. This is the simplest way to both generate
    and consume a source map, but this method increases the size of the resulting
    file for all users, which in turn increases the loading time of the web application.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在主要配方中看到的那样，`less`任务的默认行为是将源映射嵌入到生成的CSS文件中。这是生成和消费源映射的最简单方法，但这种方法会增加所有用户的生成文件的大小，从而增加Web应用的加载时间。
- en: Most developers prefer to keep the source map and the CSS result separate, so
    that the average user shouldn't have to download the source map and the source
    file it references. This kind of setup is, however, a little bit more complex
    due to the fact that it requires the source maps and source files to be made available
    to the browser, which will make use of the CSS files produced.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发者更喜欢将源映射和CSS结果分开，这样普通用户就不需要下载源映射及其引用的源文件。然而，由于需要将源映射和源文件提供给将使用CSS文件产生的浏览器，这种设置稍微复杂一些。
- en: The following steps take us through altering the configuration to indicate that
    the source map and source file should not be included in the resulting CSS file.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们修改配置，以指示源映射和源文件不应包含在生成的CSS文件中。
- en: 'First, we''ll indicate that we''d like to generate a source map by setting
    the `sourceMap` option to `true` in our `less` task''s configuration:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将通过在`less`任务的配置中将`sourceMap`选项设置为`true`来指示我们想要生成源映射。
- en: '[PRE41]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Then, we''ll alter the task to indicate that an external source map should
    be generated. This is done by specifying a name for the source map file by using
    the `sourceMapFilename` option:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将修改任务以指示应生成外部源映射。这是通过使用`sourceMapFilename`选项指定源映射文件名称来完成的：
- en: '[PRE42]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Then, we can run the task by using the `grunt less` command, which should produce
    output similar to the following:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以通过使用`grunt less`命令来运行任务，它应该产生类似于以下内容的输出：
- en: '[PRE43]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: If we now take a look at our project directory, we should see the `styles.css`
    and `styles.css.map` files. The generated style sheet should now also contain
    a reference to the source map file, and now the source map should also reference
    the `styles.less` source file.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在查看我们的项目目录，我们应该能看到`styles.css`和`styles.css.map`文件。现在生成的样式表也应该包含对源映射文件的引用，现在源映射也应该引用`styles.less`源文件。
- en: How it works...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Making use of the generated source map is as simple as including the generated
    CSS file in a sample HTML file. We would, however, have to ensure that all the
    necessary files are accessible to the browser that opens the HTML file, which
    is taken care of in our current example due to all the files being located in
    the same directory. We must also ensure that the browser we use to open the HTML
    file provides support for the use of source maps.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 利用生成的源映射就像在示例HTML文件中包含生成的CSS文件一样简单。然而，我们必须确保所有必要的文件都可以被打开HTML文件的浏览器访问，在我们的当前例子中，由于所有文件都位于同一目录中，这一点已经得到解决。我们还必须确保我们用来打开HTML文件的浏览器支持源映射的使用。
- en: The following steps take us through creating a sample HTML file, which includes
    the generated CSS file, and opening it in a browser that supports source maps.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们创建一个包含生成的CSS文件的示例HTML文件，并在支持源映射的浏览器中打开它。
- en: 'Let''s create a sample HTML file, which will include the generated JavaScript
    source file. Let''s create a file in the project directory called `test.html`
    with the following contents:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个示例HTML文件，它将包括生成的JavaScript源文件。让我们在项目目录中创建一个名为`test.html`的文件，其内容如下：
- en: '[PRE44]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: With our sample HTML file ready, we can open it using a browser that supports
    source maps. For our example, we'll use Google Chrome Version 36\. The following
    image shows the browser window with the developer's tools open and the `body`
    element selected for inspection.![How it works...](img/image00270.jpeg)
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的示例HTML文件准备就绪后，我们可以使用支持源映射的浏览器打开它。在我们的例子中，我们将使用Google Chrome版本36。以下图像显示了浏览器窗口，开发者工具已打开，并选择了`body`元素进行检查。![如何工作...](img/image00270.jpeg)
- en: If we take a look at the styles inspector that is located in the developer's
    tools, we'll see that `styles.less:4` is being displayed as the location from
    which the body elements style is being derived. This indicates that our source
    map is working correctly.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们查看位于开发者工具中的样式检查器，我们会看到 `styles.less:4` 正在显示为从该位置派生 `body` 元素样式的位置。这表明我们的源映射正在正确工作。
- en: Generating source maps for Sass
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Sass 生成源映射
- en: In this recipe, we'll make use of the `sass (0.12.1)` plugin to generate **source
    maps** when compiling our **Sass** style sheets to **CSS**.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用 `sass (0.12.1)` 插件在将我们的 **Sass** 样式表编译为 **CSS** 时生成 **源映射**。
- en: Getting ready
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure that we created
    in the *Compiling Sass to CSS* recipe in this chapter. Be sure to refer to it
    if you are not yet familiar with its contents.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用我们在本章中 *编译 Sass 为 CSS* 菜谱中创建的基本项目结构。如果你还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will take us through altering our configuration so that
    a source map is generated when our Sass style sheet is compiled to CSS:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们修改配置，以便在将 Sass 样式表编译为 CSS 时生成源映射：
- en: 'First, we''ll indicate that we''d like to generate a source map by setting
    the `sourceMap` option to `true` in our `sass` task''s configuration:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将通过在 `sass` 任务的配置中将 `sourceMap` 选项设置为 `true` 来指示我们想要生成源映射：
- en: '[PRE45]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Then, we can run the task by using the `grunt sass` command, which should produce
    output similar to the following:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以通过使用 `grunt sass` 命令来运行任务，它应该产生类似于以下内容的输出：
- en: '[PRE46]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: If we now take a look at our project directory, we should see the `styles.css`
    and `styles.css.map` files. The generated style sheet should now also contain
    a reference to the source map file, and the source map should now also reference
    the `styles.scss` source file.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在查看我们的项目目录，我们应该看到 `styles.css` 和 `styles.css.map` 文件。生成的样式表现在也应该包含对源映射文件的引用，并且源映射现在也应该引用
    `styles.scss` 源文件。
- en: How it works...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Making use of the generated source map is as simple as including the generated
    CSS file in a sample HTML file. We will, however, have to ensure that all the
    necessary files are accessible to the browser that opens the HTML file, which
    is taken care of in our current example due to all the files being located in
    the same directory. We must also ensure that the browser we use to open the HTML
    file provides support for the use of source maps.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 利用生成的源映射文件就像在示例 HTML 文件中包含生成的 CSS 文件一样简单。然而，我们必须确保所有必要的文件都能被打开 HTML 文件的浏览器访问，在我们的当前示例中，由于所有文件都位于同一目录下，这一点已经得到处理。我们还必须确保我们用来打开
    HTML 文件的浏览器支持源映射的使用。
- en: 'The following steps will take us through creating a sample HTML file that includes
    the generated CSS file and opening it in a browser that supports source maps:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导我们创建一个包含生成的 CSS 文件并在支持源映射的浏览器中打开的示例 HTML 文件：
- en: 'Let''s create a sample HTML file called `test.html`, which will include the
    generated JavaScript source file, and provide it with the following contents:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 `test.html` 的示例 HTML 文件，它将包含生成的 JavaScript 源文件，并提供以下内容：
- en: '[PRE47]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: With our sample HTML file ready, we can open it using a browser that supports
    source maps. For our example, we'll use Google Chrome Version 36\. The following
    image shows the browser window with the developers tools open and the `body` element
    selected for inspection.![How it works...](img/image00271.jpeg)
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的示例 HTML 文件准备就绪后，我们可以使用支持源映射的浏览器打开它。在我们的例子中，我们将使用 Google Chrome 版本 36。以下图片显示了开发者工具已打开的浏览器窗口，并选中了用于检查的
    `body` 元素。![工作原理...](img/image00271.jpeg)
- en: If we take a look at the styles inspector that is located in the developer's
    tools, we'll see that `styles.scss:4` is being displayed as the location from
    where the body elements style is being derived. This indicates that our source
    map is working correctly.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们查看位于开发者工具中的样式检查器，我们会看到 `styles.scss:4` 正在显示为从该位置派生 `body` 元素样式的位置。这表明我们的源映射正在正确工作。
- en: Generating source maps for CoffeeScript
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 CoffeeScript 生成源映射
- en: In this recipe, we'll make use of the `contrib-coffee (0.11.0)` plugin to generate
    **source maps** when compiling our **CoffeeScript** source files to **JavaScript**.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用 `contrib-coffee (0.11.0)` 插件在将我们的 **CoffeeScript** 源文件编译为 **JavaScript**
    时生成 **源映射**。
- en: Getting ready
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure that we created
    in the *Compiling CoffeeScript to JavaScript* recipe of this chapter. Be sure
    to refer to it if you are not yet familiar with its contents.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用本章“将 CoffeeScript 编译为 JavaScript”配方中创建的基本项目结构。如果您还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will take us through altering our configuration to generate
    a source map when compiling our CoffeeScript source files to JavaScript:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们修改配置以在将 CoffeeScript 源文件编译为 JavaScript 时生成源映射：
- en: 'First, we''ll indicate that we''d like to generate a source map by setting
    the `sourceMap` option to `true` in our `coffee` task''s configuration:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将通过在 `coffee` 任务的配置中将 `sourceMap` 选项设置为 `true` 来指示我们想要生成源映射：
- en: '[PRE48]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Then, we can run the task by using the `grunt coffee` command, which should
    produce output similar to the following:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以通过使用 `grunt coffee` 命令来运行任务，它应该产生类似于以下内容的输出：
- en: '[PRE49]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: If we now take a look at our project directory, we should see the `main.js`
    and `main.js.map` files. The generated JavaScript source file should now also
    contain a reference to the source map file, and the source map should now also
    reference the `main.coffee` source file.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在查看我们的项目目录，我们应该能看到 `main.js` 和 `main.js.map` 文件。生成的 JavaScript 源文件现在也应包含对源映射文件的引用，并且源映射现在也应引用
    `main.coffee` 源文件。
- en: How it works...
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Making use of the generated source map is as simple as including the generated
    CSS file in a sample HTML file. We will, however, have to ensure that all the
    necessary files are accessible to the browser that opens the HTML file, which
    is taken care of in our current example due to all the files being located in
    the same directory. We must also ensure that the browser we use to open the HTML
    file provides support for the use of source maps.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 利用生成的源映射就像在示例 HTML 文件中包含生成的 CSS 文件一样简单。然而，我们必须确保所有必要的文件都可以被打开 HTML 文件的浏览器访问，在我们的当前例子中，由于所有文件都位于同一目录，这一点已经得到解决。我们还必须确保我们用来打开
    HTML 文件的浏览器支持源映射的使用。
- en: 'The following steps take us through creating a sample HTML file that includes
    the generated JavaScript file and opening the HTML file in a browser that supports
    source maps:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们创建一个包含生成的 JavaScript 文件的示例 HTML 文件，并在支持源映射的浏览器中打开该 HTML 文件：
- en: 'Let''s create a sample HTML file called `test.html`, which will include the
    generated JavaScript source file, and provide it with the following contents:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 `test.html` 的示例 HTML 文件，它将包含生成的 JavaScript 源文件，并提供以下内容：
- en: '[PRE50]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: With our sample HTML file ready, we can open it using a browser that supports
    source maps. For our example, we'll use Google Chrome Version 36\. The following
    image shows the browser window with the developer's tools open:![How it works...](img/image00272.jpeg)
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在准备好我们的示例 HTML 文件后，我们可以使用支持源映射的浏览器打开它。在我们的例子中，我们将使用 Google Chrome 版本 36。以下图片显示了开发者工具已打开的浏览器窗口：![它是如何工作的...](img/image00272.jpeg)
- en: Tip
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You may have to refresh the browser after opening the developer's tools in order
    to see the appropriate console output discussed in the next step.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在打开开发者工具后，您可能需要刷新浏览器才能看到下一步骤中讨论的适当控制台输出。
- en: If we take a look at the output in the console located in the developer's tools,
    we'll see that `main.coffee:2` is being displayed as the location from where the
    `'Functionality!'` string is being logged. This indicates that our source map
    is working correctly.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们查看开发者工具中控制台的输出，我们会看到 `main.coffee:2` 正被显示为 `'Functionality!'` 字符串记录的位置。这表明我们的源映射正在正确工作。
- en: Defining custom functions with LESS
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 LESS 定义自定义函数
- en: In this recipe, we'll make use of the `contrib-less (0.11.4)` plugin to define
    custom functions that can be used in our **LESS** style sheets.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将使用 `contrib-less (0.11.4)` 插件来定义可以在我们的 **LESS** 样式表中使用的自定义函数。
- en: For our example, we'll create a custom function called `halfDarken`, which will
    darken any color provided to it by 50 percent. It will make use of the LESS library's
    built-in `darken` function.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们将创建一个名为 `halfDarken` 的自定义函数，该函数将使提供的任何颜色变暗 50%。它将使用 LESS 库的内置 `darken`
    函数。
- en: Getting ready
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure that we created
    in the *Compiling LESS to CSS* recipe of this chapter. Be sure to refer to it
    if you are not yet familiar with its contents.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用本章“将 LESS 编译为 CSS”配方中创建的基本项目结构。如果您还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will take us through altering our configuration to define
    a custom function, and altering our LESS style sheet to use it:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们修改配置以定义一个自定义函数，并修改我们的LESS样式表以使用它：
- en: 'First, we''ll alter the configuration of our `less` task by adding the `customFunctions`
    option and defining a stub for the `halfDarker` function:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将通过添加`customFunctions`选项并定义`halfDarker`函数的占位符来修改我们的`less`任务配置：
- en: '[PRE51]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Then, we can add some logic for the `halfDarken` function that darkens the
    provided color by 50 percent and returns the result:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以为`halfDarken`函数添加一些逻辑，该函数将提供的颜色变暗50%，并返回结果：
- en: '[PRE52]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Once we''ve got the function defined, we can alter our `styles.less` file to
    make use of it:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们定义了函数，我们就可以修改我们的`styles.less`文件以使用它：
- en: '[PRE53]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We can now run our task by using the `grunt less` command, which should produce
    the following output:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以通过使用`grunt less`命令来运行我们的任务，该命令应该产生以下输出：
- en: '[PRE54]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'If we now take a look inside the resulting `styles.css` file, we can see that
    the `halfDarken` function has made the color that was provided to it 50 percent
    darker:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在查看生成的`styles.css`文件，我们可以看到`halfDarken`函数已经将提供的颜色变暗了50%：
- en: '[PRE55]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Using Stylus plugins
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Stylus插件
- en: In this recipe, we'll make use of the `contrib-stylus (0.18.0)` plugin to compile
    **Stylus** style sheets that make use of one of the Stylus libraries provided
    by the developer community.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`contrib-stylus (0.18.0)`插件来编译**Stylus**样式表，这些样式表使用了开发者社区提供的Stylus库之一。
- en: Tip
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'A partial list of the plugins available for the Stylus framework can be found
    at the following URL:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在以下URL找到Stylus框架可用的插件的部分列表：
- en: '[https://github.com/LearnBoost/stylus/wiki](https://github.com/LearnBoost/stylus/wiki)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/LearnBoost/stylus/wiki](https://github.com/LearnBoost/stylus/wiki)'
- en: For our example, we'll make use of the **axis** library that comes packaged
    with the **Roots** platform. It provides a host of useful functions, mixins, and
    other utilities that you'll be sure to make use of in your day-to-day style sheet
    development.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将使用**Roots**平台打包的**axis**库。它提供了一系列有用的函数、混合和其他实用工具，您肯定会在日常样式表开发中使用到。
- en: Getting ready
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this example, we'll work with the basic project structure that we created
    in the *Compiling Stylus to CSS* recipe of this chapter. Be sure to refer to it
    if you are not yet familiar with its contents.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用本章中“将Stylus编译为CSS”菜谱中创建的基本项目结构。如果您还不熟悉其内容，请务必参考它。
- en: How to do it...
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following steps will take us through altering our configuration in order
    to provide our style sheets with access to the axis library:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将引导我们修改配置，以便我们的样式表能够访问轴库：
- en: 'First, we''ll need to install the `axis-css` package on our local project path,
    using the `npm install --save axis-css` command. This should produce output that
    contains the following:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要使用`npm install --save axis-css`命令在我们的本地项目路径上安装`axis-css`包。这将产生包含以下内容的输出：
- en: '[PRE56]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'With the library now installed, we can alter the configuration of the `stylus`
    task in such a way that the library is loaded before the target style sheets are
    compiled. This is done with the `use` option that accepts an array of imported
    libraries that are prepared to be used as Stylus plugins. The following configuration
    uses this option to load the `axis-css` plugin:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在库已经安装，我们可以修改`stylus`任务的配置，以便在编译目标样式表之前加载库。这是通过接受一个数组作为选项`use`来完成的，该数组包含准备用作Stylus插件的导入库。以下配置使用此选项来加载`axis-css`插件：
- en: '[PRE57]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'As a test, we can now also make use of a feature provided by the axis library
    in our sample style sheet. Let''s alter the contents of `main.styl` to include
    the special `absolute` property provided by the library:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为测试，我们还可以在我们的示例样式表中使用轴库提供的一个功能。让我们修改`main.styl`的内容，以包含库提供的特殊`absolute`属性：
- en: '[PRE58]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We can now test our setup by running the `grunt stylus` command, which should
    produce output similar to the following:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以通过运行`grunt stylus`命令来测试我们的设置，该命令应该产生类似于以下内容的输出：
- en: '[PRE59]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'If we take a look inside the generated `main.css` file, we''ll now see that
    it contains positional properties that were generated by the axis library''s `absolute`
    property:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们查看生成的`main.css`文件，现在我们会看到它包含由轴库的`absolute`属性生成的位置属性：
- en: '[PRE60]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Tip
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that the contents of this file will probably be in a compressed state due
    to the stylus task compressing its output by default. The contents are presented
    uncompressed here for the sake of readability.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，由于触笔任务默认压缩其输出，此文件的内容可能处于压缩状态。为了便于阅读，此处以未压缩的形式呈现内容。
