- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a developer, I'll bet you have a perfect workflow—you either write styles
    using plain vanilla CSS or use one of the current processors, such as SASS or
    Less, to create them. You'll add vendor prefixes using the likes of Autoprefixer—either
    manually or using a tool, such as Grunt or Gulp.
  prefs: []
  type: TYPE_NORMAL
- en: Sounds familiar? Why would you want to disturb something if it works for you,
    right?
  prefs: []
  type: TYPE_NORMAL
- en: Trouble is, a friend or colleague has started talking about a new processor
    by the name of PostCSS—they've piqued your interest sufficiently to want to find
    out more about what it is and how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Well, welcome to the fast-growing ecosystem that is PostCSS! By itself, the
    tool doesn't do anything, but when paired with the right plugins (and there are
    hundreds available for use), it has the potential to become a really powerful
    processor for you. Gone are the days when we have to depend on a monolithic library
    such as SASS or less. Instead, we can pick and choose exactly which plugins to
    use based on our project requirements. PostCSS is an immensely quick processor
    to use; the question is, are you ready for the ride?
  prefs: []
  type: TYPE_NORMAL
- en: Here's hoping the answer is yes; if so, let's make a start.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Introducing PostCSS"), *Introducing PostCSS*,
    kicks off our journey with an introduction to the world of PostCSS, exploring
    its features and how we can use this ecosystem to transform basic code into valid
    CSS styles that we can use within our projects. You will discover the benefits
    of using this ecosystem and how its architecture and modular approach allows us
    to put together a processor that is tailored specifically for our needs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Creating Variables and Mixins"), *Creating
    Variables and Mixins*, takes a look at some of the basic concepts that are familiar
    to users of existing processor technologies, such as variables and mixins. You
    will learn how to transition them to PostCSS and discover how the benefits of
    using these techniques can transition through to using PostCSS.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Nesting Rules"), *Nesting Rules*, explores
    how existing processors, such as SASS or less, take advantage of concepts such
    as nesting to reduce the amount of code we need to write and how we can replicate
    the same functionality within our PostCSS processor.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Building Media Queries"), *Building Media
    Queries*, walks us through the basics of adding responsive support to websites
    using PostCSS and media queries. You''ll learn how to retrofit support for older
    websites and browsers, and explore how we can take things further with the advent
    of CSS4 media queries and provide support today within PostCSS.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Managing Colors, Images, and Fonts"), *Managing
    Colors, Images, and Fonts*, examines the plugins available for handling and manipulating
    images, colors, and fonts within PostCSS. We will work through a number of examples
    to illustrate how both images and colors can be manipulated within PostCSS, such
    as creating image sprites or altering colors using palettes within the system.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Creating Grids"), *Creating Grids*, takes
    us on a journey through constructing the skeleton of a website using grids—we
    will explore the basic concept behind using grids and discover some of the plugin
    options available for creating them within PostCSS. We will work through some
    examples using the Bourbon Neat grid system, before replicating the examples with
    PostCSS-equivalent plugins and adding responsive capabilities to the resulting
    code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Animating Elements"), *Animating Elements*,
    begins with a quick recap of using JavaScript to animate content, before switching
    to using CSS for animation, and how you can transition through to using PostCSS.
    We will explore using some of the more well-known libraries, such as Animate.css,
    before creating a quick demo using PostCSS and learning how to optimize our animations
    using PostCSS.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Creating PostCSS Plugins"), *Creating PostCSS
    Plugins*, teaches us how plugins can be used to extend PostCSS, and takes us through
    a journey of exploring the typical architecture of such a plugin. You will then
    take a look at some example plugins before working through creating your own plugins
    using the boilerplate code available and before testing and making the plugins
    available for download by users from the Internet.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Working with Shortcuts, Fallbacks, and Packs"),
    *Working with Shortcuts, Fallbacks, and Packs*, starts by examining some of the
    shortcut plugins and packs available before exploring how we can supplement them
    with creating our own shortcut plugins. You will also discover how you can lint
    and optimize your code using one of the plugin packs available for PostCSS and
    learn how to provide fall-backs to PostCSS code to help maintain support for older
    browsers.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Building a Custom Processor"), *Building
    a Custom Processor*, pulls together some of the techniques we''ve covered thus
    far in the book to produce a custom processor that we can use as a basis for transforming
    code in our projects. You will explore how to optimize the output before adding
    source map and vendor prefix support and then testing it on a website. You will
    then round off the chapter with a look at extending the processor to use the CSStyle
    framework to allow you to write code that works for both SASS or PostCSS.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.html "Chapter 11. Manipulating Custom Syntaxes"), *Manipulating
    Custom Syntaxes*, introduces us to writing custom syntaxes using the API and explores
    some of the options available for parsing code written using syntaxes such as
    SASS or less. We work though some examples of parsing code using PostCSS before
    converting the output into something that can be displayed on screen or saved
    to a file. We will also add in support for highlighting our code using the midas
    library.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](ch12.html "Chapter 12. Mixing Preprocessors"), *Mixing Preprocessors*,
    shows us how we can begin to mix processors as an aid to make the transition to
    using PostCSS. We will take a look at the Pleeease library before installing it
    and using some of its features. We will then set up a compilation process before
    using it to make changes to a standard WordPress theme.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](ch13.html "Chapter 13. Troubleshooting PostCSS Issues"), *Troubleshooting
    PostCSS Issues*, takes a look at some of the more common issues we might experience
    when using PostCSS, such as the "taskname not in our gulpfile" error. We will
    also take a look at what to do next if all else fails. We will cover the methods
    for getting help with an issue or logging details of a bug within either the core
    PostCSS system or one of its plugins.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](ch14.html "Chapter 14. Preparing for the Future"), *Preparing
    for the Future*, covers some of the possible options for supporting future style
    standards from what people know as CSS4\. You will also explore some of the risks
    involved and how you can replicate support using existing plugins available today
    or extend them to increase support for new CSS4 selectors.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All you need to work through most of the examples in this book is a simple text
    or code editor, a copy of NodeJS (for your platform), Internet access, and a browser.
    I recommend installing Sublime Text 3; it works well with Node and Gulp, which
    we will use throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the examples make use of additional plugins; most (if not all) can be
    installed directly from within NodeJS. Details are included within the appropriate
    chapter along with links to view the plugin source code and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The book is for frontend developers who are familiar with HTML5 and CSS3, but
    want to master PostCSS as part of simplifying their development workflow or remove
    the dependency on existing processors, such as SASS or Stylus. To get the most
    out of this book, you should have a good knowledge of HTML, CSS3, and JavaScript,
    and ideally, have some experience of using preprocessors such as SASS, Less, or
    Stylus.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We''ll
    start by installing the relevant plugins required for this demo: we''ll need the
    postcss-nested, autocomplete, and postcss-scss plugins."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "When we view the page and select the **Images** tab, after a short delay
    we should see six new images."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or disliked. Reader feedback is important for us as it
    helps us develop titles that you will really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply e-mail `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book's title in the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide at [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register to our website using your e-mail address and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hover the mouse pointer on the **SUPPORT** tab at the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Code Downloads & Errata**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the **Search** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the book for which you're looking to download the code files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose from the drop-down menu where you purchased this book from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Code Download**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also download the code files by clicking on the **Code Files** button
    on the book's webpage at the Packt Publishing website. This page can be accessed
    by entering the book's name in the **Search** box. Please note that you need to
    be logged in to your Packt account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR / 7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg / iZip / UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip / PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Mastering-PostCSS-for-Web-Design](https://github.com/PacktPublishing/Mastering-PostCSS-for-Web-Design).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the color images of this book
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We also provide you with a PDF file that has color images of the screenshots/diagrams
    used in this book. The color images will help you better understand the changes
    in the output. You can download this file from [http://www.packtpub.com/sites/default/files/downloads/MasteringPostCSSForWebDesign_ColorImages.pdf](http://www.packtpub.com/sites/default/files/downloads/MasteringPostCSSForWebDesign_ColorImages.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you could report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **Errata Submission Form** link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded to our website or added to any list
    of existing errata under the Errata section of that title.
  prefs: []
  type: TYPE_NORMAL
- en: To view the previously submitted errata, go to [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and enter the name of the book in the search field. The required information will
    appear under the **Errata** section.
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Piracy of copyrighted material on the Internet is an ongoing problem across
    all media. At Packt, we take the protection of our copyright and licenses very
    seriously. If you come across any illegal copies of our works in any form on the
    Internet, please provide us with the location address or website name immediately
    so that we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors and our ability to bring you
    valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have a problem with any aspect of this book, you can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`,
    and we will do our best to address the problem.
  prefs: []
  type: TYPE_NORMAL
