["```js\nconst averageTempJan = 12;\nconst averageTempFeb = 15;\nconst averageTempMar = 18;\nconst averageTempApr = 20;\nconst averageTempMay = 25;\n```", "```js\nconst averageTemp = [12, 15, 18, 20, 25];\n// or\naverageTemp[0] = 12;\naverageTemp[1] = 15;\naverageTemp[2] = 18;\naverageTemp[3] = 20;\naverageTemp[4] = 25;\n```", "```js\nlet daysOfWeek = new Array(); // {1}\ndaysOfWeek = new Array(7); // {2}\ndaysOfWeek = new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'); // {3}\n// preferred\ndaysOfWeek = []; // {4}\ndaysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']; // {5}\n```", "```js\nconsole.log('daysOfWeek.length', daysOfWeek.length); // output: 7\n```", "```js\nfor (let i = 0; i < daysOfWeek.length; i++) {\n  console.log(`daysOfWeek[${i}]`, daysOfWeek[i]);\n}\n```", "```js\n// Fibonacci: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...\nconst fibonacci = []; // {1}\nfibonacci[1] = 1; // {2}\nfibonacci[2] = 1; // {3}\n// create the fibonacci sequence starting from the 3rd element\nfor (let i = 3; i < 20; i++) {\n  fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2]; // //{4}\n}\n// display the fibonacci sequence\nfor (let i = 1; i < fibonacci.length; i++) { // {5}\n  console.log(`fibonacci[${i}]`, fibonacci[i]); // {6}\n}\n```", "```js\nfor (const i in fibonacci) {\n  console.log(`fibonacci[${i}]`, fibonacci[i]);\n}\n```", "```js\nfor (const value of fibonacci) {\n  console.log('value', value);\n}\n```", "```js\nlet numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n```", "```js\nnumbers[numbers.length] = 10;\n```", "```js\nnumbers.push(11); \nnumbers.push(12, 13);\n```", "```js\nArray.prototype.insertAtBeginning = function(value) { \n    for (let i = this.length; i >= 0; i--) { \n      this[i] = this[i - 1]; \n    } \n    this[0] = value; \n  };  \nnumbers.insertAtBeginning(-1);\n```", "```js\nnumbers.unshift(-2); \nnumbers.unshift(-4, -3); \n```", "```js\nnumbers.pop(); // number 13 is removed\n```", "```js\nconsole.log('Removed element: ', numbers.pop());\n```", "```js\nfor (let i = 0; i < numbers.length; i++) { \n  numbers[i] = numbers[i + 1]; \n} \n```", "```js\nArray.prototype.reIndex = function(myArray) {  \n    const newArray = []; \n    for(let i = 0; i < myArray.length; i++ ) { \n        if (myArray[i] !== undefined) { \n            newArray.push(myArray[i]); \n        } \n    } \n    return newArray; \n} \n// remove first position manually and reIndex \nArray.prototype.removeFromBeginning = function() { \n    for (let i = 0; i < this.length; i++) { \n        this[i] = this[i + 1]; \n    } \n    return this.reIndex(this); \n}; \nnumbers = numbers.removeFromBeginning();\n```", "```js\nnumbers.shift(); \n```", "```js\nnumbers.splice(5,3); \n```", "```js\nnumbers.splice(5, 0, 2, 3, 4); \n```", "```js\nnumbers.splice(5, 3, 2, 3, 4); \n```", "```js\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n```", "```js\nnumbers.forEach((value, index) => {\n  console.log(`numbers[${index}]`, value);\n});\n```", "```js\nnumbers.forEach(value => console.log(value));\n```", "```js\nconst isBelowSeven = numbers.every(value => value < 7);\nconsole.log('All values are below 7?:', isBelowSeven); // false\n```", "```js\nlet isBelowSevenForLoop = true;\nfor (let i = 0; i < numbers.length; i++) {\n  if (numbers[i] >= 7) {\n    isBelowSevenForLoop = false;\n    break;\n  }\n}\nconsole.log('All values are below 7?:', isBelowSevenForLoop);\n```", "```js\nconst isSomeValueBelowSeven = numbers.some(value => value < 7);\nconsole.log('Is any value below 7?:', isSomeValueBelowSeven); // true\n```", "```js\nlet isSomeValueBelowSevenForLoop = false;\nfor (let i = 0; i < numbers.length; i++) {\n  if (numbers[i] < 7) {\n    isSomeValueBelowSevenForLoop = true;\n    break;\n  }\n}\n```", "```js\nconsole.log('Index of 5:', numbers.indexOf(5)); // 4\nconsole.log('Index of 11:', numbers.indexOf(11)); // -1\nconsole.log('Is 5 included?:', numbers.includes(5)); // true\nconsole.log('Is 11 included?:', numbers.includes(11)); // false\n```", "```js\nconsole.log('Last index of 5:', numbers.lastIndexOf(5)); // 4\nconsole.log('Last index of 11:', numbers.lastIndexOf(11)); // -1\n```", "```js\nconst firstValueBelowSeven = numbers.find(value => value < 7);\nconsole.log('First value below 7:', firstValueBelowSeven); // 1\n```", "```js\nconsole.log('Index: ', numbers.findIndex(value => value < 7)); // 0\n```", "```js\nconsole.log('Index of last value below 7:', numbers.findLastIndex(value => value < 7)); // 5\n```", "```js\nconst books = [\n    { id: 1, title: 'The Fellowship of the Ring' },\n    { id: 2, title: 'Fourth Wing' },\n    { id: 3, title: 'A Court of Thorns and Roses' }\n];\n```", "```js\nconsole.log('Book with id 2:', books.find(book => book.id === 2));\n```", "```js\nconsole.log(books.find(book => book.title === 'The Hobbit'));\n```", "```js\nconst bookIndex = books.findIndex(book => book.id === 3);\nif (bookIndex !== -1) {\n    books.splice(bookIndex, 1);\n}\n```", "```js\nconst firstValueBelowSeven = numbers.find(value => value < 7);\nconsole.log('First value below 7:', firstValueBelowSeven); // 1\n```", "```js\nconst valuesBelowSeven = numbers.filter(value => value < 7);\nconsole.log('Values below 7:', valuesBelowSeven); // [1, 2, 3, 4, 5, 6]\n```", "```js\nnumbers.reverse();\n```", "```js\nnumbers.sort();\n```", "```js\nnumbers.sort((a, b) => a - b);\n```", "```js\nfunction compareNumbers(a, b) {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    // a must be equal to b\n    return 0;\n  }\n  numbers.sort(compareNumbers);\n```", "```js\nconst friends = [\n  { name: 'Frodo', age: 30 },\n  { name: 'Violet', age: 18 },\n  { name: 'Aelin', age: 20 }\n];\nconst compareFriends = (friendA, friendB => friendA.age - friendB.age;\nfriends.sort(compareFriends);\nconsole.log('Sorted friends:', friends);\n```", "```js\nlet names = ['Ana', 'ana', 'john', 'John'];\nconsole.log(names.sort());\n```", "```js\n[\"Ana\", \"John\", \"ana\", \"john\"]\n```", "```js\nnames = ['Ana', 'ana', 'john', 'John']; // reset the array to its original state\nnames.sort((a, b) =>  {\n  const nameA = a.toLowerCase();\n  const nameB = b.toLowerCase();\n  if (nameA < nameB) {\n    return -1;\n  }\n  if (nameA > nameB) {\n    return 1;\n  }\n  return 0;\n});\n```", "```js\nnames.sort((a, b) => a.localeCompare(b));\n```", "```js\nconst names2 = ['MaÃ¨ve', 'Maeve'];\nconsole.log(names2.sort((a, b) => a.localeCompare(b)));\n```", "```js\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst squaredNumbers = numbers.map(value => value * value);\nconsole.log('Squared numbers:', squaredNumbers);\n```", "```js\nconst squaredNumbersLoop = [];\nfor (let i = 0; i < numbers.length; i++) {\n  squaredNumbersLoop.push(numbers[i] * numbers[i]);\n}\n```", "```js\nconst namesFromCSV = 'Aelin,Gandalf,Violet,Poppy';\nconst names = namesFromCSV.split(',');\nconsole.log('Names:', names); // ['Aelin', 'Gandalf', 'Violet', 'Poppy']\n```", "```js\nconst namesCSV = names.join(';');\nconsole.log('Names CSV:', namesCSV); // 'Aelin;Gandalf;Violet;\n```", "```js\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst sum = numbers.reduce((acc, value) => acc + value, 0); // 55\n```", "```js\nlet sumLoop = 0;\nfor (let i = 0; i < numbers.length; i++) {\n  sumLoop += numbers[i];\n}\n```", "```js\nconst scores = [30, 70, 85, 90, 100];\nconst highestScore = scores.reduce((max, score) => score > max ? score : max, scores[0]); // 100\n```", "```js\nconsole.log(typeof 'Learning Data Structures'); // string\nconsole.log(typeof 123); // number\nconsole.log(typeof { id: 1 }); // object\nconsole.log(typeof [1, 2, 3]); // object\n```", "```js\nconsole.log(Array.isArray([1, 2, 3])); // true\n```", "```js\nconst jsonString = JSON.stringify('[{\"id\":1,\"title\":\"The Fellowship of the Ring\"},{\"id\":2,\"title\":\"Fourth Wing\"}]');\nconst dataReceived = JSON.parse(jsonString);\nif (Array.isArray(dataReceived)) {\n  console.log('It is an array');\n  // check if The Fellowship of the Ring is in the array\n  const fellowship = dataReceived.find((item) => {\n    return item.title === 'The Fellowship of the Ring';\n  });  \n  if (fellowship) {\n    console.log('We received the book we were looking for!');\n  } else {\n    console.log('We did not receive the book we were looking for!');\n  }\n}\n```", "```js\nconst numbers = [1, 2, 3, 4, 5];\nconst numbersCopy = Array.from(numbers);\nconsole.log(numbersCopy); // [1, 2, 3, 4, 5]\n```", "```js\nconst evens = Array.from(numbers, x => (x % 2 == 0)); \nconsole.log(evens); // [false, true, false, true, false]\n```", "```js\nconst friends = [\n  { name: 'Frodo', age: 30 },\n  { name: 'Violet', age: 18 },\n  { name: 'Aelin', age: 20 }\n];\nconst friendsCopy = Array.from(friends);\n```", "```js\nfriends[0].name = 'Sam';\nconsole.log(friendsCopy[0].name); // Sam\n```", "```js\nconst friendsDeepCopy = JSON.parse(JSON.stringify(friends));\nfriends[0].name = 'Frodo';\nconsole.log(friendsDeepCopy[0].name); // Sam\n```", "```js\nconst numbersArray = Array.of(1, 2, 3, 4, 5);\nconsole.log(numbersArray); // [1, 2, 3, 4, 5]\n```", "```js\nconst numbersArray = [1, 2, 3, 4, 5];\n```", "```js\nlet numbersCopy2 = Array.of(...numbersArray);\n```", "```js\nconst tornamentResults = new Array(5).fill('pending');\n```", "```js\ntornamentResults.fill('win', 1, 3);\nconsole.log(tornamentResults);\n// ['pending', 'win', 'win', 'pending', 'pending']\n```", "```js\nconst zero = 0;\nconst positiveNumbers = [1, 2, 3];\nconst negativeNumbers = [-3, -2, -1];\nlet allNumbers = negativeNumbers.concat(zero, positiveNumbers); \n```", "```js\nlet averageTempDay1 = [72, 75, 79, 79, 81, 81]; \nlet averageTempDay2 = [81, 79, 75, 75, 73, 72];\n```", "```js\nlet averageTempMultipleDays = [];\naverageTempMultipleDays[0] = [72, 75, 79, 79, 81, 81];\naverageTempMultipleDays[1] = [81, 79, 75, 75, 73, 73];\n```", "```js\naverageTempMultipleDays = [\n  [72, 75, 79, 79, 81, 81],\n  [81, 79, 75, 75, 73, 73]\n];\n```", "```js\n// day 1\naverageTemp[0] = [];\naverageTemp[0][0] = 72;\naverageTemp[0][1] = 75;\naverageTemp[0][2] = 79;\naverageTemp[0][3] = 79;\naverageTemp[0][4] = 81;\naverageTemp[0][5] = 81;\n// day 2\naverageTemp[1] = [];\naverageTemp[1][0] = 81;\naverageTemp[1][1] = 79;\naverageTemp[1][2] = 75;\naverageTemp[1][3] = 75;\naverageTemp[1][4] = 73;\naverageTemp[1][5] = 73;\n```", "```js\nfunction printMultidimensionalArray(myArray) {\n  for (let i = 0; i < myArray.length; i++) {\n    for (let j = 0; j < myArray[i].length; j++) {\n      console.log(myArray[i][j]);\n    }\n  }\n}\n```", "```js\nprintMatrix(averageTemp);\n```", "```js\nlet averageTempMultipleDaysAndLocation = [];\n// day 1\naverageTempMultipleDaysAndLocation[0] = [];\naverageTempMultipleDaysAndLocation[0][0] = [19, 20, 21]; // location 1\naverageTempMultipleDaysAndLocation[0][1] = [20, 22, 23]; // location 2\naverageTempMultipleDaysAndLocation[0][2] = [30, 31, 32]; // location 3\n// day 2\naverageTempMultipleDaysAndLocation[1] = [];\naverageTempMultipleDaysAndLocation[1][0] = [21, 22, 23]; // location 1\naverageTempMultipleDaysAndLocation[1][1] = [22, 23, 24]; // location 2\naverageTempMultipleDaysAndLocation[1][2] = [29, 30, 30]; // location 3\n// day 3\naverageTempMultipleDaysAndLocation[2] = [];\naverageTempMultipleDaysAndLocation[2][0] = [22, 23, 24]; // location 1\naverageTempMultipleDaysAndLocation[2][1] = [23, 24, 23]; // location 2\naverageTempMultipleDaysAndLocation[2][2] = [30, 31, 31]; // location 3\n```", "```js\nfunction printMultidimensionalArray3D(myArray) {\n  for (let i = 0; i < myArray.length; i++) {\n    for (let j = 0; j < myArray[i].length; j++) {\n      for (let z = 0; z < myArray[i][j].length; z++) {\n        console.log(myArray[i][j][z]);\n      }\n    }\n  }\n}\n```", "```js\nconst arrayLength = 5;\nconst int16 = new Int16Array(arrayLength);\nfor (let i = 0; i < arrayLength; i++) {\n  int16[i] = i + 1;\n}\nconsole.log(int16);\n```", "```js\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n```", "```js\ninterface Friend {\n  name: string;\n  age: number;\n}\nconst friends = [\n  { name: 'Frodo', age: 30 },\n  { name: 'Violet', age: 18 },\n  { name: 'Aelin', age: 20 }\n];\nconst compareFriends = (friendA: Friend, friendB: Friend) => {\n  return friendA.age - friendB.age;\n};\nfriends.sort(compareFriends);\n```", "```js\n<!-- Path: src/03-array/10-todo-list-example.html -->\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Simple TODO List (Array-Based)</title>\n</head>\n<body>\n  <h1>My TODO List</h1>\n  <input type=\"text\" id=\"newTaskInput\" placeholder=\"Add new task\">\n  <button onclick=\"addTask()\">Add</button>\n  <ul id=\"taskList\"></ul>\n  <script>\n    const taskList = document.getElementById('taskList');\n    const newTaskInput = document.getElementById('newTaskInput');\n    let tasks = []; // Initialize empty task array\n    function addTask() {}\n    function renderTasks() {}\n    function toggleComplete(index) {}\n    function removeTask(index) {}\n  </script>\n</body>\n</html>\n```", "```js\nfunction addTask() {\n  const taskText = newTaskInput.value.trim(); // {1}\n  if (taskText !== \"\") {\n    tasks.push({ text: taskText, completed: false }); // {2}\n    renderTasks(); // Update the displayed list\n    newTaskInput.value = \"\"; // Clear input\n  }\n}\n```", "```js\nfunction renderTasks() {\n  taskList.innerHTML = ''; // Clear the list\n  tasks.forEach((task, index) => { // {3}\n    const listItem = document.createElement(\"li\");\n    listItem.innerHTML = `\n      <input type=\"checkbox\" ${task.completed ? \"checked\" : \"\"}\n        onchange=\"toggleComplete(${index})\">\n      <span class=\"${task.completed ? \"completed\" : \"\"}\">\n        ${task.text}</span>\n      <button onclick=\"removeTask(${index})\">Delete</button>\n    `;\n    taskList.appendChild(listItem);\n  });\n}\n```", "```js\nfunction toggleComplete(index) { // Toggle task completion status\n  tasks[index].completed = !tasks[index].completed; // {4}\n  renderTasks();\n}\nfunction removeTask(index) {\n  tasks.splice(index, 1); // {5} Remove from array\n  renderTasks();\n}\n```", "```js\nfunction reverseArray(a: number[]): number[] {\n  return a.reverse();\n}\n```", "```js\nfunction reverseArray2(a: number[]): number[] {\n  const result = [];\n  for (let i = a.length - 1; i >= 0; i--) {\n    result.push(a[i]);\n  }\n  return result;\n}\n```", "```js\nfunction reverseArray3(a: number[]): number[] {\n  const result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.unshift(a[i]);\n  }\n  return result;\n}\n```", "```js\nfunction reverseArray4(a: number[]): number[] {\n  for (let i = 0; i < a.length / 2; i++) {\n    const temp = a[i];\n    a[i] = a[a.length - 1 - i];\n    a[a.length - 1 - i] = temp;\n  }\n  return a;\n}\n```", "```js\nfunction rotLeft(a: number[], d: number): number[] {\n  return a.concat(a.splice(0, d));\n}\n```", "```js\nfunction rotLeft2(a: number[], d: number): number[] {\n  return [...a.slice(d), ...a.slice(0, d)];\n}\n```", "```js\nfunction rotLeft3(a: number[], d: number): number[] {\n  for (let i = 0; i < d; i++) {\n    const temp = a[0]; // {1}\n    for (let j = 0; j < a.length - 1; j++) {\n      a[j] = a[j + 1]; // {2}\n    }\n    a[a.length - 1] = temp; // {3}\n  }\n  return a;\n}\n```"]