- en: Chapter 7. Defining Actions on Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's go further with the gameplay in Babylon.js. The framework provides an `ActionManager`
    class that allows us to manage and execute actions when a trigger is raised by
    the engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, imagine a scene with a button. When the button is pushed (left-click),
    the light(s) in the scene should be turned off, except one. This is only an example.
    In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining actions on objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using conditions to control the actions graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Actions Builder in 3ds Max
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining actions on objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Babylon.js framework comes with a collection of distinct actions. You'll
    find actions that can play a sound, stop a sound, interpolate a property of an
    object, set a value of an object property, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Enable actions on an object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The only entities that can handle `ActionManager` are the scene and the meshes
    in the scene. Each Babylon.js mesh has its own action manager reference. To enable
    actions on a mesh, just create a new reference to the mesh, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `ActionManager` constructor takes only the scene as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create your first action in a scene composed of a box and a plane. The
    action must change the box''s position on the *y* axis from `0` to `6` when the
    user left-clicks on the box. The only thing to do is to call the `.registerAction`
    function on `ActionManager` of the box, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For a moment, let's consider the condition as `null` and explain it in the next
    topic.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look more closely, an action is triggered by a trigger (here, `BABYLON.ActionManager.OnLeftPickTrigger`).
    There are several types of triggers available only for the meshes, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`OnPickTrigger`: When the object is picked (click).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnLeftPickTrigger`: When the object is picked (left-click only).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnRightPickTrigger`: When the object is picked (right-click only).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnCenterPickTrigger`: When the object is picked (mouse wheel click only).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnPointerOverTrigger`: When the pointer is over the object (entering).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnPointerOutTrigger`: When the pointer is out of the object (exiting).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnIntersectionEnterTrigger`: When the object intersects another object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnIntersectionExitTrigger`: When the object finishes intersecting another
    object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NothingTrigger`: Only used for chained actions. Let''s see the next sub-topic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note**: all picking triggers require that meshes are pickable: `myMesh.isPickable
    = true;`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, there are several types of triggers available only on scenes. Indeed,
    scenes can have `ActionManager` as well, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`OnEveryFrameTrigger`: This raises the associated actions in every frame rendered
    by Babylon.js'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnKeyDownTrigger`: When the user presses a key (keyboard)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnKeyUpTrigger`: When the user finishes pressing a key (keyboard)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As you can guess, some triggers need parameters. Triggers such as `OnIntersectionEnterTrigger`, `OnIntersectionExitTrigger`, `OnKeyDownTrigger`
    and `OnKeyUpTrigger`. To configure a trigger that needs parameters, just provide
    a JavaScript object that will contain the trigger type and the parameter, instead
    of the giving directly the trigger type as argument in the action''s constructor.
    Consider the previous example with `OnIntersectionEnterTrigger` in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `OnKeyDownTrigger` and `OnKeyUpTrigger`, the structure is the same
    and the parameter is the key. Consider the following for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look more closely at the following parameters of an action:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The trigger**: This determines when the action is triggered by the action
    manager. You can see the trigger as an event type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The target**: This represents the object (not necessarily a mesh or a scene
    in all the cases; however, a JavaScript object in general) that will be modified
    by the action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The property to modify**: This represents the property of the target that
    will be modified by the action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The new value**: This represents the new value affected to the property of
    the target. This can be a number, string, object, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Almost all the available actions work with these parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Chain actions on an object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ActionManager` class of Babylon.js allows you to construct a graph of
    actions. All the registered actions will be checked (to verify the trigger) and
    executed (if the check concludes) at same time and repeatedly. However, imagine
    the following as your scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: When the user left-clicks on the box, the new position on the *y* axis is `0`
    and when the user left-clicks once again on the box, the new rotation on the *y*
    axis is `PI / 4`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second action (left-click again) must be executed only when the first action
    is executed. To perform this action, you can call the `.then` function in an action.
    Consider the following as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This method is available for all actions.
  prefs: []
  type: TYPE_NORMAL
- en: The available actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s enumerate all the available actions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BABYLON.SwitchBooleanAction`: This switches a Boolean property (false to true,
    or true to false). Consider the following, for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`BABYLON.SetValueAction`: This sets a new value to the property, similar to
    the preceding examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BABYLON.IncrementValueAction`: This increments the value of a property (only
    available with number values) by the specified value. Consider the following for
    example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`BABYLON.PlayAnimationAction`: This plays an animation available in the object,
    such as a character or button must be `BABYLON.Node`. [Chapter 9](ch09.html "Chapter 9. Create
    and Play Animations"), *Create and Play Animations* for how to set up and play
    with animations. Consider the following, for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Animations work with frames, from 0 to 200, for example. The action specifies
    the start frame and end frame (25 to 35, for example). The loop parameter is a
    Boolean that specifies if the played animation is looped.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`BABYLON.StopAnimationAction`: This stops the animation of the target object.
    Consider the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`BABYLON.DoNothingAction:` This does nothing. It is used to control the graph
    and bypass a click, for example. Consider the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`BABYLON.ExecuteCodeAction`: This executes your own function. Consider the
    following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`BABYLON.SetParentAction`: This sets a new parent for the target object. The
    target must be BABYLON.Node (mesh, light, camera, and so on). Consider the following
    example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`BABYLON.PlaySoundAction`: This plays a sound. Just provide a `BABYLON.Sound`
    reference. Consider the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`BABYLON.StopSoundAction`: This stops a sound. Just provide the `BABYLON.Sound`
    reference. Consider the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`BABYLON.InterpolateValueAction`: This interpolates a value (creates an animation)
    of the target object `BABYLON.Node`. Consider the following  example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The property to interpolate must be of the `number`, `BABYLON.Color3`, `BABYLON.Vector3`,
    or `BABYLON.Quaternion` type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For example, the property to interpolate can be `position` and the value `new
    BABYLON.Vector3(0, 6, 0)`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`BABYLON.CombineAction`: This is a special action. It allows simultaneous execution
    of multiple actions anywhere in the graph. Consider the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`childrenActions` is an array of `BABYLON.Action`. It contains the simultaneously
    executed actions.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using conditions to control the actions graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous sub-topic (the available actions), the conditions in actions
    were bypassed. In fact, every action can have a condition that controls whether
    the ActionManager executes the action or not. The conditions can check whether
    a value is one of the following states compared to another value:'
  prefs: []
  type: TYPE_NORMAL
- en: Equal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lesser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Greater
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are three types of condition, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'State condition: This checks whether the `.state` property of `BABYLON.Node`
    is equal to the given state. A state is a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value condition**: This checks whether a property is equal, lesser, greater,
    or different from a given value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Predicate condition**: This calls a custom method that will return `true`
    or `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an action has a condition, the action will be executed only if the condition
    returns `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding conditions to your actions graph shows all the power of the Actions Builder, which
    comes in the next topic. To understand the following example, before practicing
    with conditions, you can access this demo ([http://www.babylonjs.com/Demos/ActionBuilder/](http://www.babylonjs.com/Demos/ActionBuilder/))
    made by the artist Michel Rousseau, who used only actions and conditions to create
    the interactions in the scene.
  prefs: []
  type: TYPE_NORMAL
- en: The principle is that you must activate the three buttons in order to turn the
    main light off.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a developer, the theory is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user clicks on a button (`OnLeftPickTrigger` for each button):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the button is pressed (`StateCondition`), un-press the button and turn off
    the light (`SetValueAction`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the button isn't pressed (`StateCondition`), press the button and turn on
    the light (`SetValueAction`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At every frame (`OnEveryFrameTrigger`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the three buttons are pressed (chained `StateCondition`), set the main light's
    diffuse color to black (turn off) (`SetValueAction`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If one of the three buttons isn't pressed (`StateCondition` on each button),
    set the main light's diffuse color to white (turn on) (`SetValueAction`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The theory can be performed with actions by chaining the conditions (to check
    whether the three buttons are pressed) and the actions in the graph. Of course,
    the Actions Builder will allow you to have a real representation on the graph
    instead of having it in your mind. You'll just have to manipulate it to train
    and learn the proper way to think with actions.
  prefs: []
  type: TYPE_NORMAL
- en: State condition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The state condition checks whether the `.state` property of `BABYLON.Node` is
    equal to the given state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example with `BABYLON.StateCondition`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Predicate condition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The predicate condition executes a custom function that will return true or
    false. It is particularly useful if the condition has to test multiple values
    or manipulate objects using TypeScript before it returns true or false. Let''s
    create the same example as we did earlier using a predicate condition, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Value condition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The value condition is a way to automatically check whether a value is equal,
    lesser, greater, or different without writing a predicate condition. Let''s create
    the previous example again using `BABYLON.ValueCondition`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The value condition works like an action, you have to specify the target (`myMesh`),
    the property (`position.y`), and the value to test (`0` and `6`).
  prefs: []
  type: TYPE_NORMAL
- en: Using the Actions Builder in 3ds Max
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating actions can save lines of code. The Babylon.js solution also provides
    a way for 3ds Max artists and you, as a developer to create actions, including
    conditions, without any lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Actions Builder allowed Michel Rousseau to create actions and scenarios
    in his scenes without any lines of code, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Mansion scene: [http://www.babylonjs.com/?MANSION](http://www.babylonjs.com/?MANSION)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Actions Builder scene: [http://www.babylonjs.com/?AB](http://www.babylonjs.com/?AB)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To do this, you can simply use the Actions Builder, which is a part of the
    3ds Max plugin of Babylon.js. The Actions Builder is located in the `BabylonActionsBuilder` folder
    available in the 3ds Max plugin in the GitHub repository. You can copy and paste
    the folder into the 3ds Max plugins directory, which is typically located at `C:\Program
    Files\Autodesk\3ds Max 2013\bin\assemblies`, as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Actions Builder in 3ds Max](img/image_07_001.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use the Actions Builder, simply select an object in 3ds Max, right-click
    on it, select the **Babylon...** menu, and open **Babylon Actions Builder**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Note:** To edit the scene actions, select nothing in the 3ds Max scene, right-click
    on the void, select the **Babylon...** menu, and open **Babylon Actions Builder**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/image_07_002.png)'
  prefs: []
  type: TYPE_IMG
- en: The Actions Builder window appears. You are now able to add actions to your
    object without any lines of code. In the Actions Builder, all actions are available,
    except the actions that execute the code (`BABYLON.ExecuteCodeAction` and `BABYLON.PredicateCondition`).
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/image_07_003.png)'
  prefs: []
  type: TYPE_IMG
- en: On the left-hand side, there is a list of triggers, actions, and conditions.
    To add an action or condition, you have to start with a trigger. Simply Drag'n'drop
    the required trigger on the root node (ourMesh).
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/image_07_004.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, the child action will be executed once the user left-clicks on the **ourBox** object,
    which is a mesh.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you added the wanted trigger, you can *drag''n''drop* any action or a
    condition in the graph. For example, let''s add `BABYLON.InterpolateValueAction`,
    as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/image_07_005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on the added action, a few menus will appear on the right-hand
    side. These menus will correspond to the parameters of the constructor of the
    action. You will retrieve the target, property, and value parameters, as shown
    in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/image_07_006.png)'
  prefs: []
  type: TYPE_IMG
- en: The equivalent of the `.then` function in the Actions Builder consists of adding
    a child action to an action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also add a condition to the graph and a child action of the interpolate
    value action (equivalent to `.then`). As for triggers and actions, *drag''n''drop*
    a value condition (`BABYLON.ValueCondition`) on the interpolate value action,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works](img/image_07_007.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, Action 1 will be executed when the user left-clicks on the mesh. Once
    Action 1 is executed, Action 2 is executed only if the value condition returns
    `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Managing multiple pipelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using TypeScript, you can add multiple branches of actions to your object by
    calling the  `.registerAction` function in the `ActionManager` object. With the
    Actions Builder, you can simply add another trigger that will handle a new graph
    of actions, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Managing multiple pipelines](img/image_07_008.png)'
  prefs: []
  type: TYPE_IMG
- en: With this configuration, the first actions of each trigger will be executed
    simultaneously, except if there are conditions and if the condition of an action
    returns false.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are now able to create actions in your projects and save a lot of lines
    of code. You know how to use the `BABYLON.ActionManager` class, how to add actions,
    the different triggers, and how to control the graph using conditions. You are
    also able to work with artists and 3ds Max using the Actions Builder and save
    more lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, let's concentrate on the rendering part using post-processes
    (effects). It'll be an occasion to introduce the notion of HDR, SSAO, blurring,
    blooming, and so on. It's one of the favorite parts of the 3D developers to create
    special effects such as post-processes.
  prefs: []
  type: TYPE_NORMAL
