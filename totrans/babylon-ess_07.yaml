- en: Chapter 7. Defining Actions on Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。在对象上定义动作
- en: Let's go further with the gameplay in Babylon.js. The framework provides an `ActionManager`
    class that allows us to manage and execute actions when a trigger is raised by
    the engine.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步探讨 Babylon.js 中的游戏玩法。该框架提供了一个 `ActionManager` 类，允许我们在引擎触发器时管理和执行动作。
- en: 'For example, imagine a scene with a button. When the button is pushed (left-click),
    the light(s) in the scene should be turned off, except one. This is only an example.
    In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想象一个有按钮的场景。当按钮被按下（左键点击）时，场景中的灯光应该关闭，除了一个。这只是一个例子。在本章中，我们将涵盖以下主题：
- en: Defining actions on objects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在对象上定义动作
- en: Using conditions to control the actions graph
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用条件来控制动作图
- en: Using the Actions Builder in 3ds Max
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 3ds Max 中使用动作构建器
- en: Defining actions on objects
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在对象上定义动作
- en: The Babylon.js framework comes with a collection of distinct actions. You'll
    find actions that can play a sound, stop a sound, interpolate a property of an
    object, set a value of an object property, and so on.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Babylon.js 框架附带了一系列不同的动作。你可以找到可以播放声音、停止声音、插值对象属性、设置对象属性值等动作。
- en: Enable actions on an object
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在对象上启用动作
- en: 'The only entities that can handle `ActionManager` are the scene and the meshes
    in the scene. Each Babylon.js mesh has its own action manager reference. To enable
    actions on a mesh, just create a new reference to the mesh, as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 能够处理 `ActionManager` 的唯一实体是场景和场景中的网格。每个 Babylon.js 网格都有自己的动作管理器引用。要在一个网格上启用动作，只需创建一个新的网格引用，如下所示：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `ActionManager` constructor takes only the scene as a parameter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`ActionManager` 构造函数只接受场景作为参数。'
- en: 'Let''s create your first action in a scene composed of a box and a plane. The
    action must change the box''s position on the *y* axis from `0` to `6` when the
    user left-clicks on the box. The only thing to do is to call the `.registerAction`
    function on `ActionManager` of the box, as shown in the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在由一个盒子和一个平面组成的场景中创建你的第一个动作。当用户左键点击盒子时，这个动作必须将盒子的位置在 *y* 轴上从 `0` 改变到 `6`。唯一需要做的事情就是在盒子的
    `ActionManager` 上调用 `.registerAction` 函数，如下所示：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For a moment, let's consider the condition as `null` and explain it in the next
    topic.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们暂时将条件视为 `null` 并在下一个主题中解释它。
- en: 'If we look more closely, an action is triggered by a trigger (here, `BABYLON.ActionManager.OnLeftPickTrigger`).
    There are several types of triggers available only for the meshes, as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们更仔细地看，一个动作是由触发器触发的（在这里，`BABYLON.ActionManager.OnLeftPickTrigger`）。只有网格有几种类型的触发器，如下所示：
- en: '`OnPickTrigger`: When the object is picked (click).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnPickTrigger`：当对象被选中（点击）时。'
- en: '`OnLeftPickTrigger`: When the object is picked (left-click only).'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnLeftPickTrigger`：当对象被选中（仅左键点击）时。'
- en: '`OnRightPickTrigger`: When the object is picked (right-click only).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnRightPickTrigger`：当对象被选中（仅右键点击）时。'
- en: '`OnCenterPickTrigger`: When the object is picked (mouse wheel click only).'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnCenterPickTrigger`：当对象被选中（仅鼠标滚轮点击）时。'
- en: '`OnPointerOverTrigger`: When the pointer is over the object (entering).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnPointerOverTrigger`：当指针在对象上（进入）时。'
- en: '`OnPointerOutTrigger`: When the pointer is out of the object (exiting).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnPointerOutTrigger`：当指针离开对象（退出）时。'
- en: '`OnIntersectionEnterTrigger`: When the object intersects another object.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnIntersectionEnterTrigger`：当对象与另一个对象相交时。'
- en: '`OnIntersectionExitTrigger`: When the object finishes intersecting another
    object.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnIntersectionExitTrigger`：当对象完成与另一个对象的相交时。'
- en: '`NothingTrigger`: Only used for chained actions. Let''s see the next sub-topic.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NothingTrigger`：仅用于链式动作。让我们看看下一个子主题。'
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note**: all picking triggers require that meshes are pickable: `myMesh.isPickable
    = true;`'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：所有选择触发器都需要网格是可选择的：`myMesh.isPickable = true;`'
- en: 'Also, there are several types of triggers available only on scenes. Indeed,
    scenes can have `ActionManager` as well, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，场景上还有几种仅在场景中可用的触发器。确实，场景也可以有自己的 `ActionManager`，如下所示：
- en: '`OnEveryFrameTrigger`: This raises the associated actions in every frame rendered
    by Babylon.js'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnEveryFrameTrigger`：这会在 Babylon.js 渲染的每一帧中触发相关的动作'
- en: '`OnKeyDownTrigger`: When the user presses a key (keyboard)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnKeyDownTrigger`：当用户按下键（键盘）'
- en: '`OnKeyUpTrigger`: When the user finishes pressing a key (keyboard)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnKeyUpTrigger`：当用户完成按键（键盘）时'
- en: 'As you can guess, some triggers need parameters. Triggers such as `OnIntersectionEnterTrigger`, `OnIntersectionExitTrigger`, `OnKeyDownTrigger`
    and `OnKeyUpTrigger`. To configure a trigger that needs parameters, just provide
    a JavaScript object that will contain the trigger type and the parameter, instead
    of the giving directly the trigger type as argument in the action''s constructor.
    Consider the previous example with `OnIntersectionEnterTrigger` in the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所猜，一些触发器需要参数。例如`OnIntersectionEnterTrigger`、`OnIntersectionExitTrigger`、`OnKeyDownTrigger`和`OnKeyUpTrigger`。要配置需要参数的触发器，只需提供一个包含触发类型和参数的JavaScript对象，而不是直接在动作构造函数的参数中给出触发类型。以下是一个使用`OnIntersectionEnterTrigger`的先前例子：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For the `OnKeyDownTrigger` and `OnKeyUpTrigger`, the structure is the same
    and the parameter is the key. Consider the following for example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`OnKeyDownTrigger`和`OnKeyUpTrigger`，结构相同，参数是键。以下是一个例子：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s look more closely at the following parameters of an action:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看以下操作参数：
- en: '**The trigger**: This determines when the action is triggered by the action
    manager. You can see the trigger as an event type.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触发器**：这决定了动作何时由动作管理器触发。您可以将触发器视为事件类型。'
- en: '**The target**: This represents the object (not necessarily a mesh or a scene
    in all the cases; however, a JavaScript object in general) that will be modified
    by the action.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：这代表将被动作修改的对象（不一定在所有情况下都是网格或场景；然而，通常是一个JavaScript对象）。'
- en: '**The property to modify**: This represents the property of the target that
    will be modified by the action.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**要修改的属性**：这代表目标将被动作修改的属性。'
- en: '**The new value**: This represents the new value affected to the property of
    the target. This can be a number, string, object, and so on.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新值**：这代表影响目标属性的新值。这可以是一个数字、字符串、对象等。'
- en: Almost all the available actions work with these parameters.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有可用的操作都使用这些参数。
- en: Chain actions on an object
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象上的链式操作
- en: 'The `ActionManager` class of Babylon.js allows you to construct a graph of
    actions. All the registered actions will be checked (to verify the trigger) and
    executed (if the check concludes) at same time and repeatedly. However, imagine
    the following as your scenario:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Babylon.js的`ActionManager`类允许您构建一个操作图。所有注册的操作都将同时检查（以验证触发器）并执行（如果检查得出结论）。然而，想象以下场景：
- en: When the user left-clicks on the box, the new position on the *y* axis is `0`
    and when the user left-clicks once again on the box, the new rotation on the *y*
    axis is `PI / 4`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户左键单击盒子时，新的*y*轴位置是`0`，当用户再次左键单击盒子时，新的*y*轴旋转是`PI / 4`。
- en: 'The second action (left-click again) must be executed only when the first action
    is executed. To perform this action, you can call the `.then` function in an action.
    Consider the following as an example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个动作（再次左键单击）只有在第一个动作执行时才必须执行。要执行此操作，您可以在动作中调用`.then`函数。以下是一个例子：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This method is available for all actions.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法适用于所有动作。
- en: The available actions
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用的操作
- en: 'Now, let''s enumerate all the available actions, as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们列举所有可用的操作，如下所示：
- en: '`BABYLON.SwitchBooleanAction`: This switches a Boolean property (false to true,
    or true to false). Consider the following, for example:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BABYLON.SwitchBooleanAction`: 这将切换布尔属性（从假变为真，或从真变为假）。以下是一个例子：'
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`BABYLON.SetValueAction`: This sets a new value to the property, similar to
    the preceding examples.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BABYLON.SetValueAction`: 这将设置属性的新值，类似于前面的例子。'
- en: '`BABYLON.IncrementValueAction`: This increments the value of a property (only
    available with number values) by the specified value. Consider the following for
    example:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BABYLON.IncrementValueAction`: 这将按指定的值增加属性的值（仅适用于数字值）。以下是一个例子：'
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`BABYLON.PlayAnimationAction`: This plays an animation available in the object,
    such as a character or button must be `BABYLON.Node`. [Chapter 9](ch09.html "Chapter 9. Create
    and Play Animations"), *Create and Play Animations* for how to set up and play
    with animations. Consider the following, for example:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BABYLON.PlayAnimationAction`: 这将播放对象中可用的动画，例如角色或按钮必须是`BABYLON.Node`。[第9章](ch09.html
    "第9章。创建和播放动画")，*创建和播放动画*中介绍了如何设置和播放动画。以下是一个例子：'
- en: '[PRE7]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Animations work with frames, from 0 to 200, for example. The action specifies
    the start frame and end frame (25 to 35, for example). The loop parameter is a
    Boolean that specifies if the played animation is looped.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 动画与帧一起工作，例如从 0 到 200。动作指定起始帧和结束帧（例如 25 到 35）。循环参数是一个布尔值，指定播放的动画是否循环。
- en: '`BABYLON.StopAnimationAction`: This stops the animation of the target object.
    Consider the following example:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BABYLON.StopAnimationAction`: 这将停止目标对象的动画。考虑以下示例：'
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`BABYLON.DoNothingAction:` This does nothing. It is used to control the graph
    and bypass a click, for example. Consider the following example:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BABYLON.DoNothingAction:` 这什么都不做。它用于控制图并绕过点击，例如。考虑以下示例：'
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`BABYLON.ExecuteCodeAction`: This executes your own function. Consider the
    following example:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BABYLON.ExecuteCodeAction`: 这将执行您自己的函数。考虑以下示例：'
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`BABYLON.SetParentAction`: This sets a new parent for the target object. The
    target must be BABYLON.Node (mesh, light, camera, and so on). Consider the following
    example:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BABYLON.SetParentAction`: 这为目标对象设置一个新的父对象。目标必须是 BABYLON.Node（网格、光源、相机等）。考虑以下示例：'
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`BABYLON.PlaySoundAction`: This plays a sound. Just provide a `BABYLON.Sound`
    reference. Consider the following example:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BABYLON.PlaySoundAction`: 这将播放一个声音。只需提供 `BABYLON.Sound` 引用。考虑以下示例：'
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`BABYLON.StopSoundAction`: This stops a sound. Just provide the `BABYLON.Sound`
    reference. Consider the following example:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BABYLON.StopSoundAction`: 这将停止一个声音。只需提供 `BABYLON.Sound` 引用。考虑以下示例：'
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`BABYLON.InterpolateValueAction`: This interpolates a value (creates an animation)
    of the target object `BABYLON.Node`. Consider the following  example:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BABYLON.InterpolateValueAction`: 这将插值目标对象 `BABYLON.Node` 的值（创建动画）。考虑以下示例：'
- en: '[PRE14]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The property to interpolate must be of the `number`, `BABYLON.Color3`, `BABYLON.Vector3`,
    or `BABYLON.Quaternion` type.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要插值的属性必须是 `number`、`BABYLON.Color3`、`BABYLON.Vector3` 或 `BABYLON.Quaternion`
    类型。
- en: For example, the property to interpolate can be `position` and the value `new
    BABYLON.Vector3(0, 6, 0)`.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，要插值的属性可以是 `position`，值是 `new BABYLON.Vector3(0, 6, 0)`。
- en: '`BABYLON.CombineAction`: This is a special action. It allows simultaneous execution
    of multiple actions anywhere in the graph. Consider the following example:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BABYLON.CombineAction`: 这是一个特殊动作。它允许在任何地方同时执行多个动作。考虑以下示例：'
- en: '[PRE15]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`childrenActions` is an array of `BABYLON.Action`. It contains the simultaneously
    executed actions.'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`childrenActions` 是 `BABYLON.Action` 的数组。它包含同时执行的动作。'
- en: Using conditions to control the actions graphs
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用条件来控制动作图
- en: 'In the previous sub-topic (the available actions), the conditions in actions
    were bypassed. In fact, every action can have a condition that controls whether
    the ActionManager executes the action or not. The conditions can check whether
    a value is one of the following states compared to another value:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的子主题（可用的动作）中，动作中的条件被绕过了。实际上，每个动作都可以有一个条件来控制是否执行 ActionManager 中的动作。条件可以检查一个值是否与另一个值比较时处于以下状态之一：
- en: Equal
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相等
- en: Lesser
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较小
- en: Greater
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大于
- en: Different
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同
- en: 'There are three types of condition, as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种类型的条件，如下所示：
- en: 'State condition: This checks whether the `.state` property of `BABYLON.Node`
    is equal to the given state. A state is a string.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态条件：这检查 `BABYLON.Node` 的 `.state` 属性是否等于给定的状态。状态是一个字符串。
- en: '**Value condition**: This checks whether a property is equal, lesser, greater,
    or different from a given value.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值条件**: 这检查属性是否等于、小于、大于或不同于给定的值。'
- en: '**Predicate condition**: This calls a custom method that will return `true`
    or `false`.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**谓词条件**: 这将调用一个自定义方法，该方法将返回 `true` 或 `false`。'
- en: If an action has a condition, the action will be executed only if the condition
    returns `true`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个动作有一个条件，那么只有当条件返回 `true` 时，该动作才会被执行。
- en: Adding conditions to your actions graph shows all the power of the Actions Builder, which
    comes in the next topic. To understand the following example, before practicing
    with conditions, you can access this demo ([http://www.babylonjs.com/Demos/ActionBuilder/](http://www.babylonjs.com/Demos/ActionBuilder/))
    made by the artist Michel Rousseau, who used only actions and conditions to create
    the interactions in the scene.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 向您的动作图添加条件显示了 Actions Builder 的所有功能，这在下一个主题中介绍。为了理解以下示例，在练习条件之前，您可以访问艺术家 Michel
    Rousseau 制作的这个演示（[http://www.babylonjs.com/Demos/ActionBuilder/](http://www.babylonjs.com/Demos/ActionBuilder/)），他仅使用动作和条件来创建场景中的交互。
- en: The principle is that you must activate the three buttons in order to turn the
    main light off.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 原则是必须按顺序激活三个按钮才能关闭主光源。
- en: 'As a developer, the theory is as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，理论如下：
- en: 'When the user clicks on a button (`OnLeftPickTrigger` for each button):'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户点击按钮时（每个按钮的`OnLeftPickTrigger`）：
- en: If the button is pressed (`StateCondition`), un-press the button and turn off
    the light (`SetValueAction`)
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果按钮被按下（`StateCondition`），则取消按按钮并关闭灯光（`SetValueAction`）
- en: If the button isn't pressed (`StateCondition`), press the button and turn on
    the light (`SetValueAction`)
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果按钮没有被按下（`StateCondition`），则按按钮并打开灯光(`SetValueAction`)
- en: 'At every frame (`OnEveryFrameTrigger`):'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每一帧（`OnEveryFrameTrigger`）：
- en: If the three buttons are pressed (chained `StateCondition`), set the main light's
    diffuse color to black (turn off) (`SetValueAction`)
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果三个按钮都被按下（链式`StateCondition`），则将主灯光的漫反射颜色设置为黑色（关闭）(`SetValueAction`)
- en: If one of the three buttons isn't pressed (`StateCondition` on each button),
    set the main light's diffuse color to white (turn on) (`SetValueAction`)
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果三个按钮中的任何一个没有被按下（每个按钮的`StateCondition`），则将主灯光的漫反射颜色设置为白色（打开）(`SetValueAction`)
- en: The theory can be performed with actions by chaining the conditions (to check
    whether the three buttons are pressed) and the actions in the graph. Of course,
    the Actions Builder will allow you to have a real representation on the graph
    instead of having it in your mind. You'll just have to manipulate it to train
    and learn the proper way to think with actions.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 该理论可以通过在图中通过链式连接条件（检查是否按下三个按钮）和动作来执行。当然，动作构建器将允许你在图上获得实际表示，而不是仅仅在脑海中想象。你只需操作它来训练和学习使用动作的正确思考方式。
- en: State condition
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 状态条件
- en: The state condition checks whether the `.state` property of `BABYLON.Node` is
    equal to the given state.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 状态条件检查`BABYLON.Node`的`.state`属性是否等于给定的状态。
- en: 'Consider the following example with `BABYLON.StateCondition`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下使用`BABYLON.StateCondition`的示例：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Predicate condition
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 断言条件
- en: 'The predicate condition executes a custom function that will return true or
    false. It is particularly useful if the condition has to test multiple values
    or manipulate objects using TypeScript before it returns true or false. Let''s
    create the same example as we did earlier using a predicate condition, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 断言条件执行一个自定义函数，该函数将返回true或false。如果条件需要测试多个值或在使用TypeScript操作对象后返回true或false，则特别有用。让我们使用断言条件创建一个与之前相同的示例，如下所示：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Value condition
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 值条件
- en: 'The value condition is a way to automatically check whether a value is equal,
    lesser, greater, or different without writing a predicate condition. Let''s create
    the previous example again using `BABYLON.ValueCondition`, as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 值条件是一种自动检查值是否等于、小于、大于或不同的方法，而无需编写断言条件。让我们再次使用`BABYLON.ValueCondition`创建之前的示例，如下所示：
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The value condition works like an action, you have to specify the target (`myMesh`),
    the property (`position.y`), and the value to test (`0` and `6`).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 值条件的工作方式类似于动作，你必须指定目标（`myMesh`）、属性（`position.y`）以及要测试的值（`0`和`6`）。
- en: Using the Actions Builder in 3ds Max
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在3ds Max中使用动作构建器
- en: Creating actions can save lines of code. The Babylon.js solution also provides
    a way for 3ds Max artists and you, as a developer to create actions, including
    conditions, without any lines of code.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 创建动作可以节省代码行数。Babylon.js解决方案还提供了一种方式，让3ds Max艺术家和开发者创建动作，包括条件，而无需任何代码。
- en: 'The Actions Builder allowed Michel Rousseau to create actions and scenarios
    in his scenes without any lines of code, as shown in the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 动作构建器允许Michel Rousseau在他的场景中创建动作和场景，而无需任何代码，如下所示：
- en: 'The Mansion scene: [http://www.babylonjs.com/?MANSION](http://www.babylonjs.com/?MANSION)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大厦场景：[http://www.babylonjs.com/?MANSION](http://www.babylonjs.com/?MANSION)
- en: 'The Actions Builder scene: [http://www.babylonjs.com/?AB](http://www.babylonjs.com/?AB)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动作构建器场景：[http://www.babylonjs.com/?AB](http://www.babylonjs.com/?AB)
- en: 'To do this, you can simply use the Actions Builder, which is a part of the
    3ds Max plugin of Babylon.js. The Actions Builder is located in the `BabylonActionsBuilder` folder
    available in the 3ds Max plugin in the GitHub repository. You can copy and paste
    the folder into the 3ds Max plugins directory, which is typically located at `C:\Program
    Files\Autodesk\3ds Max 2013\bin\assemblies`, as you can see in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，你可以简单地使用动作构建器，它是Babylon.js 3ds Max插件的组成部分。动作构建器位于GitHub仓库中3ds Max插件中的`BabylonActionsBuilder`文件夹。你可以将文件夹复制并粘贴到3ds
    Max插件目录中，该目录通常位于`C:\Program Files\Autodesk\3ds Max 2013\bin\assemblies`，如下面的截图所示：
- en: '![Using the Actions Builder in 3ds Max](img/image_07_001.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![在3ds Max中使用动作构建器](img/image_07_001.png)'
- en: How it works
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的
- en: To use the Actions Builder, simply select an object in 3ds Max, right-click
    on it, select the **Babylon...** menu, and open **Babylon Actions Builder**.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用动作构建器，只需在3ds Max中选择一个对象，右键单击它，选择**Babylon...**菜单，然后打开**Babylon Actions Builder**。
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Note:** To edit the scene actions, select nothing in the 3ds Max scene, right-click
    on the void, select the **Babylon...** menu, and open **Babylon Actions Builder**.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**要编辑场景动作，在3ds Max场景中选择“无”，右键单击空白处，选择**Babylon...**菜单，然后打开**Babylon Actions
    Builder**。'
- en: '![How it works](img/image_07_002.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作](img/image_07_002.png)'
- en: The Actions Builder window appears. You are now able to add actions to your
    object without any lines of code. In the Actions Builder, all actions are available,
    except the actions that execute the code (`BABYLON.ExecuteCodeAction` and `BABYLON.PredicateCondition`).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 动作构建器窗口出现。你现在可以添加动作到你的对象，而无需任何代码行。在动作构建器中，所有动作都可用，除了执行代码的动作（`BABYLON.ExecuteCodeAction`和`BABYLON.PredicateCondition`）。
- en: '![How it works](img/image_07_003.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作](img/image_07_003.png)'
- en: On the left-hand side, there is a list of triggers, actions, and conditions.
    To add an action or condition, you have to start with a trigger. Simply Drag'n'drop
    the required trigger on the root node (ourMesh).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，有一个触发器、动作和条件的列表。要添加一个动作或条件，你必须从一个触发器开始。只需将所需的触发器拖放到根节点（ourMesh）上。
- en: '![How it works](img/image_07_004.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作](img/image_07_004.png)'
- en: Now, the child action will be executed once the user left-clicks on the **ourBox** object,
    which is a mesh.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，子动作将在用户左键单击**ourBox**对象（一个网格）时执行。
- en: 'Once you added the wanted trigger, you can *drag''n''drop* any action or a
    condition in the graph. For example, let''s add `BABYLON.InterpolateValueAction`,
    as shown in the following image:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了所需的触发器，你可以在图中*拖放*任何动作或条件。例如，让我们添加`BABYLON.InterpolateValueAction`，如图所示：
- en: '![How it works](img/image_07_005.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作](img/image_07_005.png)'
- en: 'If you click on the added action, a few menus will appear on the right-hand
    side. These menus will correspond to the parameters of the constructor of the
    action. You will retrieve the target, property, and value parameters, as shown
    in the following image:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击添加的动作，右侧将出现几个菜单。这些菜单将对应于动作构造函数的参数。你将检索目标、属性和值参数，如图所示：
- en: '![How it works](img/image_07_006.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作](img/image_07_006.png)'
- en: The equivalent of the `.then` function in the Actions Builder consists of adding
    a child action to an action.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 动作构建器中`.then`函数的等价操作是在动作中添加一个子动作。
- en: 'Let''s also add a condition to the graph and a child action of the interpolate
    value action (equivalent to `.then`). As for triggers and actions, *drag''n''drop*
    a value condition (`BABYLON.ValueCondition`) on the interpolate value action,
    as shown in the following screenshot:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也在图中添加一个条件，以及一个插值值动作的子动作（相当于`.then`）。至于触发器和动作，*拖放*一个值条件（`BABYLON.ValueCondition`）到插值值动作上，如图所示：
- en: '![How it works](img/image_07_007.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作](img/image_07_007.png)'
- en: Here, Action 1 will be executed when the user left-clicks on the mesh. Once
    Action 1 is executed, Action 2 is executed only if the value condition returns
    `true`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，当用户左键单击网格时，将执行动作1。一旦动作1执行，只有当值条件返回`true`时，才会执行动作2。
- en: Managing multiple pipelines
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理多个管道
- en: 'Using TypeScript, you can add multiple branches of actions to your object by
    calling the  `.registerAction` function in the `ActionManager` object. With the
    Actions Builder, you can simply add another trigger that will handle a new graph
    of actions, as shown in the following screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TypeScript，你可以通过在`ActionManager`对象中调用`.registerAction`函数，向你的对象添加多个动作分支。使用动作构建器，你可以简单地添加另一个触发器来处理新的动作图，如图所示：
- en: '![Managing multiple pipelines](img/image_07_008.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![管理多个管道](img/image_07_008.png)'
- en: With this configuration, the first actions of each trigger will be executed
    simultaneously, except if there are conditions and if the condition of an action
    returns false.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种配置下，每个触发器的第一个动作将同时执行，除非有条件，并且动作的条件返回false。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You are now able to create actions in your projects and save a lot of lines
    of code. You know how to use the `BABYLON.ActionManager` class, how to add actions,
    the different triggers, and how to control the graph using conditions. You are
    also able to work with artists and 3ds Max using the Actions Builder and save
    more lines of code.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在你的项目中创建动作并节省大量代码行。你已了解如何使用`BABYLON.ActionManager`类，如何添加动作，不同的触发器，以及如何使用条件来控制图。你还能使用动作构建器与艺术家和3ds
    Max协作，从而节省更多代码行。
- en: In the next chapter, let's concentrate on the rendering part using post-processes
    (effects). It'll be an occasion to introduce the notion of HDR, SSAO, blurring,
    blooming, and so on. It's one of the favorite parts of the 3D developers to create
    special effects such as post-processes.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，让我们专注于使用后处理（效果）的渲染部分。这将是一个介绍HDR、SSAO、模糊、光晕等概念的良机。这是3D开发者们最喜欢的部分之一，用于创建如后处理等特殊效果。
