["```js\n> mkdir test_js\n> cd test_js\n```", "```js\n> mkdir test\n```", "```js\n$ npm install mocha -g --save-dev\n```", "```js\nconst addUtility = require('./../add.js');\n```", "```js\n$ mocha\n```", "```js\nvar addUtility = require('./../add.js');\n\ndescribe('Add', function(){\n describe('addUtility', function(){\n it('should have a sum method', function(){\n assert.equal(typeof addUtility, 'object');\n assert.equal(typeof addUtility.sum, 'function');\n })\n })\n});\n```", "```js\nvar assert = require(\"assert\")\nvar addUtility = require(\"./../add.js\");\n\ndescribe('Add', function(){\n  describe('addUtility', function(){\n    it('should have a sum method', function(){\n      assert.equal(typeof addUtility, 'object');\n      assert.equal(typeof addUtility.sum, 'function');\n    })\n  })\n});\n```", "```js\nvar addUtility = {}\n\naddUtility.sum = function () {\n 'use strict';\n return true;\n}\n\nmodule.exports = addUtility;\n```", "```js\nvar assert = require(\"assert\")\nvar addUtility = require(\"./../add.js\");\n\ndescribe('Add', function(){\n  describe('addUtility', function(){\n    it('should have a sum method', function(){\n      assert.equal(typeof addUtility, 'object');\n      assert.equal(typeof addUtility.sum, 'function');\n    })\n\n    it('addUtility.sum(5, 4) should return 9', function(){\n assert.deepEqual(addUtility.sum(5, 4), 9)\n })\n  })\n});\n```", "```js\nvar addUtility = {}\n\naddUtility.sum = function (a, b) {\n  'use strict';\n  return a + b;\n}\n\nmodule.exports = addUtility;\n```", "```js\n$ npm install chai -g\n```", "```js\nvar expect = require('chai').expect;\nvar addUtility = require(\"./../add.js\");\n\ndescribe('Add', function(){\n  describe('addUtility', function(){\n    it('should have a sum method', function(){\n      expect(addUtility).to.be.an('object');\n expect(addUtility).to.have.property('sum');\n    })\n\n    it('addUtility.sum(5, 4) should return 9', function(){\n      expect(addUtility.sum(5, 4)).to.deep.equal(9);\n    })\n\n    it('addUtility.sum(100, 6) should return 106', function(){\n      expect(addUtility.sum(100, 6)).to.deep.equal(106);\n    })\n  })\n});\n```", "```js\nconst Movie = require(\"../models/Movie\");\nconst passport = require(\"passport\");\n\nmodule.exports.controller = (app) => {\n  // fetch all movies\n  app.get(\"/movies\", function(req, res) {\n    Movie.find({}, 'name description release_year genre', function \n    (error, movies) {\n      if (error) { console.log(error); }\n       res.send({\n        movies: movies\n      })\n    })\n  })\n\n  // add a new movie\n  app.post('/movies', (req, res) => {\n    const movie = new Movie({\n      name: req.body.name,\n      description: req.body.description,\n      release_year: req.body.release_year,\n      genre: req.body.genre\n    })\n\n    movie.save(function (error, movie) {\n      if (error) { console.log(error); }\n      res.send(movie)\n    })\n  })\n}               \n```", "```js\n// fetch all movies\n  app.get(\"/movies\", function(req, res) {\n    Movie.find({}, 'name description release_year genre', function \n    (error, movies) {\n      if (error) { console.log(error); }\n       res.send({\n        movies: movies\n      })\n    })\n  })\n```", "```js\nvar movies = require(\"./../../../controllers/movies.js\");\nvar expect = require('chai').expect;\n\ndescribe('controllers.movies.js', function(){\n it('exists', function(){\n expect(movies).to.exist\n })\n})\n```", "```js\n$ mocha test/unit/controllers/movies.spec.js\n```", "```js\nconst Movie = require(\"../models/Movie\");\nconst passport = require(\"passport\");\n\nmodule.exports.controller = (app) => {\n // send a dummy test\n app.get(\"/dummy_test\", function(req, res) {\n res.send({\n name: 'John'\n })\n })\n```", "```js\nvar controller = require(\"./../../../controllers/movies.js\");\nlet chaiHttp = require('chai-http');\nlet chai = require('chai');\nvar expect = chai.expect;\nvar should = chai.should();\nvar express = require(\"express\");\nlet server = require('./../../../server.js');\nvar app = express();\nchai.use(chaiHttp);\n\nfunction buildResponse() {\n return http_mocks.createResponse({eventEmitter: require('events').EventEmitter})\n}\n\ndescribe('controllers.movies', function(){\n it('exists', function(){\n expect(controller).to.exist\n })\n})\n\ndescribe('/GET dummy_test', () => {\n it('it should respond with a name object', (done) => {\n chai.request(server)\n .get('/dummy_test')\n .end((err, res) => {\n res.should.have.status(200);\n res.body.should.be.an('object');\n done();\n });\n });\n});\n```", "```js\n$ npm install chai-http --save\n```", "```js\n$ mocha test/unit/controllers/movies.spec.js\n```", "```js\nvar Movie = require(\"../models/Movie\");\n\nmodule.exports.controller = (app) => {\n  // fetch all movies\n  app.get(\"/movies\", function(req, res) {\n    Movie.find({}, 'name description release_year genre', function  \n    (error, movies) {\n      if (error) { console.log(error); }\n       res.send({\n        movies: movies\n      })\n    })\n  })\n\n  // add a new movie\n  app.post('/movies', (req, res) => {\n    const movie = new Movie({\n      name: req.body.name,\n      description: req.body.description,\n      release_year: req.body.release_year,\n      genre: req.body.genre\n    })\n\n    movie.save(function (error, movie) {\n      if (error) { console.log(error); }\n      res.send(movie)\n    })\n  })\n}\n```", "```js\nconst controller = require(\"./../../../../controllers/movies.js\");\nconst Movie = require(\"./../../../../models/Movie.js\");\nlet server = require('./../../../../server.js');\nlet chai = require('chai');\nlet sinon = require('sinon');\nconst expect = chai.expect;\nlet chaiHttp = require('chai-http');\nchai.use(chaiHttp);\nconst should = chai.should();\n```", "```js\n$ npm install chai-http --save\n```", "```js\nconst controller = require(\"./../../../../controllers/movies.js\");\nconst Movie = require(\"./../../../../models/Movie.js\");\nlet server = require('./../../../../server.js');\nlet chai = require('chai');\nlet sinon = require('sinon');\nconst expect = chai.expect;\nlet chaiHttp = require('chai-http');\nchai.use(chaiHttp);\nconst should = chai.should();\n\ndescribe('controllers.movies', function(){\n it('exists', function(){\n expect(controller).to.exist\n })\n})\n```", "```js\n...\nconst port = process.env.API_PORT || 8081;\napp.use('/', router);\nvar server = app.listen(port, function() {\n  console.log(`api running on port ${port}`);\n});\n\nmodule.exports = server\n```", "```js\n$ mocha test/unit/specs/controllers/movies.spec.js\n```", "```js\nvar Movie = require(\"../models/Movie\");\n\nmodule.exports.controller = (app) => {\n  // fetch all movies\n  app.get(\"/movies\", function(req, res) {\n Movie.find({}, 'name description release_year genre', function \n    (error, movies) {\n if (error) { console.log(error); }\n res.send({\n movies: movies\n })\n })\n })  ...\n}\n```", "```js\nconst controller = require(\"./../../../../controllers/movies.js\");\nconst Movie = require(\"./../../../../models/Movie.js\");\nlet server = require('./../../../../server.js');\nlet chai = require('chai');\nlet sinon = require('sinon');\nconst expect = chai.expect;\nlet chaiHttp = require('chai-http');\nchai.use(chaiHttp);\nconst should = chai.should();\n\ndescribe('controllers.movies', function(){\n  it('exists', function(){\n    expect(controller).to.exist\n  })\n\n  describe('/GET movies', () => {\n it('it should send all movies', (done) => {\n var movie1 = {\n name: 'test1',\n description: 'test1',\n release_year: 2017,\n genre: 'test1'\n };\n var movie2 = {\n name: 'test2',\n description: 'test2',\n release_year: 2018,\n genre: 'test2'\n };\n var expectedMovies = [movie1, movie2];\n sinon.mock(Movie)\n .expects('find')\n .yields('', expectedMovies);\n chai.request(server)\n .get('/movies')\n .end((err, res) => {\n res.should.have.status(200);\n res.body.should.be.an('object');\n expect(res.body).to.eql({\n movies: expectedMovies\n });\n done();\n });\n });\n });\n})\n```", "```js\n$ mocha test/unit/specs/controllers/movies.spec.js \n```", "```js\nvar Movie = require(\"../models/Movie\");\n\nmodule.exports.controller = (app) => {\n  ...\n\n  // add a new movie\n  app.post('/movies', (req, res) => {\n    const movie = new Movie({\n      name: req.body.name,\n      description: req.body.description,\n      release_year: req.body.release_year,\n      genre: req.body.genre\n    })\n\n    movie.save(function (error, movie) {\n      if (error) { console.log(error); }\n      res.send(movie)\n    })\n  })\n}\n```", "```js\nconst controller = require(\"./../../../../controllers/movies.js\");\nconst Movie = require(\"./../../../../models/Movie.js\");\nlet server = require('./../../../../server.js');\nlet chai = require('chai');\nlet sinon = require('sinon');\nconst expect = chai.expect;\nlet chaiHttp = require('chai-http');\nchai.use(chaiHttp);\nconst should = chai.should();\n\ndescribe('controllers.movies', function(){\n  it('exists', function(){\n    expect(controller).to.exist\n  })\n\n  describe('/GET movies', () => {\n    it('it should send all movies', (done) => {\n      var movie1 = {\n        name: 'test1',\n        description: 'test1',\n        release_year: 2017,\n        genre: 'test1'\n      };\n      var movie2 = {\n        name: 'test2',\n        description: 'test2',\n        release_year: 2018,\n        genre: 'test2'\n      };\n      var expectedMovies = [movie1, movie2];\n      sinon.mock(Movie)\n        .expects('find')\n        .yields('', expectedMovies);\n      chai.request(server)\n        .get('/movies')\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.be.an('object');\n          expect(res.body).to.eql({\n            movies: expectedMovies\n          });\n          done();\n      });\n    });\n  });\n\n  describe('POST /movies', () => {\n it('should respond with the movie that was added', (done) => {\n chai.request(server)\n .post('/movies')\n .send({\n name: 'test1',\n description: 'test1',\n release_year: 2018,\n genre: 'test1'\n })\n .end((err, res) => {\n should.not.exist(err);\n res.status.should.equal(200);\n        res.body.should.be.an('object');\n res.body.should.include.keys(\n '_id', 'name', 'description', 'release_year', 'genre'\n );\n done();\n });\n });\n });\n})\n```", "```js\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema\nconst MovieSchema = new Schema({\n  name: String,\n   description: String,\n   release_year: Number,\n   genre: String\n})\n\nconst Movie = mongoose.model('Movie', MovieSchema)\nmodule.exports = Movie\n```", "```js\nvar Movie = require(\"./../../../../models/Movie.js\");\nlet chai = require('chai');\nvar expect = chai.expect;\nvar should = chai.should();\n```", "```js\nvar Movie = require(\"./../../../../models/Movie.js\");\nlet chai = require('chai');\nvar expect = chai.expect;\nvar should = chai.should();\n\ndescribe('models.Movie', function(){\n it('exists', function(){\n expect(Movie).to.exist\n })\n})\n```", "```js\n$ mocha test/unit/specs/models/Movie.spec.js\n```", "```js\nvar Movie = require(\"./../../../../models/Movie.js\");\nlet chai = require('chai');\nvar expect = chai.expect;\nvar should = chai.should();\n\ndescribe('models.Movie', function(){\n  it('exists', function(){\n    expect(Movie).to.exist\n  })\n\n  describe('Movie', function() {\n it('should be invalid if release_year is not an integer', \n    function(done){\n var movie = new Movie({\n name: 'test',\n description: 'test',\n release_year: 'test',\n genre: 'test'\n });\n\n movie.validate(function(err){\n expect(err.errors.release_year).to.exist;\n done();\n })\n })\n })\n})\n```", "```js\n<template>\n  <v-layout>\n    this is contact\n  </v-layout>\n</template>\n```", "```js\n<template>\n <div class=\"contact\">\n <h1>this is contact</h1>\n </div>\n</template>\n```", "```js\nimport Vue from 'vue';\nimport Contact from '@/components/Contact';\n\ndescribe('Contact.vue', () => {\n it('should render correct contents', () => {\n const Constructor = Vue.extend(Contact);\n const vm = new Constructor().$mount();\n expect(vm.$el.querySelector('.contact h1').textContent)\n .to.equal('this is contact');\n });\n});\n```", "```js\n...\n\"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\",\n    \"start\": \"nodemon server.js\",\n    \"unit\": \"cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run\",\n    \"e2e\": \"node test/e2e/runner.js\",\n \"test\": \"npm run unit && npm run e2e\",\n    \"lint\": \"eslint --ext .js,.vue src test/unit test/e2e/specs\",\n    \"build\": \"node build/build.js\",\n    \"heroku-postbuild\": \"npm install --only=dev --no-shrinkwrap && npm run build\"\n  },\n...\n```", "```js\n$ npm run unit\n```", "```js\nimport Vue from 'vue';\nimport AddMovie from '@/components/AddMovie';\n\ndescribe('AddMovie', () => {\n let cmp, vm;\n\n beforeEach(() => {\n cmp = Vue.extend(AddMovie);\n vm = new cmp({\n data: {\n years: ['2018', '2017', '2016', '2015']\n }\n }).$mount()\n })\n\n it('equals years to [\"2018\", \"2017\", \"2016\", \"2015\"]', () => {\n console.log(vm.years);\n expect(vm.years).to.eql(['2018', '2017', '2016', '2015'])\n })\n})\n```", "```js\nimport Vue from 'vue';\nimport AddMovie from '@/components/AddMovie';\n\ndescribe('AddMovie', () => {\n  let cmp, vm;\n\n  beforeEach(() => {\n    cmp = Vue.extend(AddMovie);\n    vm = new cmp({\n      data: {\n        years: ['2018', '2017', '2016', '2015']\n      }\n    }).$mount()\n  })\n\n  it('equals years to [\"2018\", \"2017\", \"2016\", \"2015\"]', () => {\n    console.log(vm.years);\n    expect(vm.years).to.eql(['2018', '2017', '2016', '2015'])\n  })\n\n  it('has a submit() method', () => {\n assert.deepEqual(typeof vm.submit, 'function')\n })\n\n it('has a clear() method', () => {\n assert.deepEqual(typeof vm.clear, 'function')\n })\n})\n```", "```js\n$ npm run unit\n```", "```js\n$ npm run test \n```", "```js\n$ npm install nightwatch --save\n```", "```js\nrequire('babel-register')\nvar config = require('../../config')\n\n// http://nightwatchjs.org/gettingstarted#settings-file\nmodule.exports = {\n src_folders: ['test/e2e/specs'],\n custom_assertions_path: ['test/e2e/custom-assertions'],\n\n selenium: {\n start_process: true,\n server_path: require('selenium-server').path,\n host: '127.0.0.1',\n port: 4444,\n cli_args: {\n 'webdriver.chrome.driver': require('chromedriver').path\n }\n },\n\n test_settings: {\n default: {\n selenium_port: 4444,\n selenium_host: 'localhost',\n silent: true,\n globals: {\n devServerURL: 'http://localhost:' + (process.env.PORT || config.dev.port)\n }\n },\n\n chrome: {\n desiredCapabilities: {\n browserName: 'chrome',\n javascriptEnabled: true,\n acceptSslCerts: true\n }\n },\n\n firefox: {\n desiredCapabilities: {\n browserName: 'firefox',\n javascriptEnabled: true,\n acceptSslCerts: true\n }\n }\n }\n}\n```", "```js\n// A custom Nightwatch assertion.\n// The assertion name is the filename.\n// Example usage:\n//\n// browser.assert.elementCount(selector, count)\n//\n// For more information on custom assertions see:\n// http://nightwatchjs.org/guide#writing-custom-assertions\n\nexports.assertion = function (selector, count) {\n this.message = 'Testing if element <' + selector + '> has count: ' + count\n this.expected = count\n this.pass = function (val) {\n return val === this.expected\n }\n this.value = function (res) {\n return res.value\n }\n this.command = function (cb) {\n var self = this\n return this.api.execute(function (selector) {\n return document.querySelectorAll(selector).length\n }, [selector], function (res) {\n cb.call(self, res)\n })\n }\n}\n```", "```js\n// For authoring Nightwatch tests, see\n// http://nightwatchjs.org/guide#usage\n\nmodule.exports = {\n 'default e2e tests': function test(browser) {\n // automatically uses dev Server port from /config.index.js\n // default: http://localhost:8080\n // see nightwatch.conf.js\n const devServer = browser.globals.devServerURL;\n console.log(devServer);\n\n browser\n .url(devServer)\n .waitForElementVisible('#app', 5000)\n .assert.elementPresent('.hello')\n .assert.containsText('h1', 'Welcome to Your Vue.js App')\n .assert.elementCount('img', 1)\n .end();\n },\n};\n```", "```js\n...\nselenium: {\n start_process: true,\n    server_path: require('selenium-server').path,\n    host: '127.0.0.1',\n    port: 4444,\n    cli_args: {\n      'webdriver.chrome.driver': require('chromedriver').path\n    }\n  },\n...\n```", "```js\n// 1\\. start the dev server using production config\nprocess.env.NODE_ENV = 'testing'\n\nconst webpack = require('webpack')\nconst DevServer = require('webpack-dev-server')\n\nconst webpackConfig = require('../../build/webpack.prod.conf')\nconst devConfigPromise = require('../../build/webpack.dev.conf')\n\nlet server\n\ndevConfigPromise.then(devConfig => {\n const devServerOptions = devConfig.devServer\n const compiler = webpack(webpackConfig)\n server = new DevServer(compiler, devServerOptions)\n const port = devServerOptions.port\n const host = devServerOptions.host\n return server.listen(port, host)\n})\n.then(() => {\n // 2\\. run the nightwatch test suite against it\n // to run in additional browsers:\n // 1\\. add an entry in test/e2e/nightwatch.conf.js under \"test_settings\"\n // 2\\. add it to the --env flag below\n // or override the environment flag, for example: `npm run e2e -- --env chrome,firefox`\n // For more information on Nightwatch's config file, see\n // http://nightwatchjs.org/guide#settings-file\n let opts = process.argv.slice(2)\n if (opts.indexOf('--config') === -1) {\n opts = opts.concat(['--config', 'test/e2e/nightwatch.conf.js'])\n }\n if (opts.indexOf('--env') === -1) {\n opts = opts.concat(['--env', 'chrome'])\n }\n\n const spawn = require('cross-spawn')\n const runner = spawn('./node_modules/.bin/nightwatch', opts, { stdio: 'inherit' })\n\n runner.on('exit', function (code) {\n server.close()\n process.exit(code)\n })\n\n runner.on('error', function (err) {\n server.close()\n throw err\n })\n})\n```", "```js\n$ npm install selenium-standalone\n```", "```js\n$ npx selenium-standalone start -- -port 5555\n```", "```js\n...\nselenium: {\n    start_process: false,\n    server_path: require('selenium-server').path,\n    host: '127.0.0.1',\n    port: 5555,\n    cli_args: {\n      'webdriver.chrome.driver': require('chromedriver').path\n    }\n  },\n\n  test_settings: {\n    default: {\n      selenium_port: 5555,\n      selenium_host: 'localhost',\n      silent: true,\n      globals: {\n devServerURL: 'http://localhost:8081'\n      }\n    },\n...\n```", "```js\n$ npm run e2e\n```", "```js\n<template>\n  <v-app id=\"inspire\">\n    <v-navigation-drawer\n      fixed\n      v-model=\"drawer\"\n      app\n    >\n```", "```js\n<template>\n  <v-app id=\"inspire\">\n    <v-navigation-drawer\n      fixed\n      v-model=\"drawer\"\n      app\n    >\n      <v-list dense>\n        <router-link v-bind:to=\"{ name: 'Home' }\" class=\"side_bar_link\">\n          <v-list-tile>\n            <v-list-tile-action>\n              <v-icon>home</v-icon>\n            </v-list-tile-action>\n            <v-list-tile-content id=\"home\">Home</v-list-tile-content>\n          </v-list-tile>\n        </router-link>\n        <router-link v-bind:to=\"{ name: 'Contact' }\" class=\"side_bar_link\">\n          <v-list-tile>\n            <v-list-tile-action>\n              <v-icon>contact_mail</v-icon>\n            </v-list-tile-action>\n            <v-list-tile-content id=\"contact\">Contact</v-list-tile-content>\n          </v-list-tile>\n        </router-link>\n      </v-list>\n    </v-navigation-drawer>\n    <v-toolbar color=\"indigo\" dark fixed app>\n      <v-toolbar-side-icon id=\"drawer\" @click.stop=\"drawer = !drawer\"></v-toolbar-side-icon>\n      <v-toolbar-title>Home</v-toolbar-title>\n      <v-spacer></v-spacer>\n      <v-toolbar-items class=\"hidden-sm-and-down\">\n        <v-btn id=\"add_movie_link\" flat v-bind:to=\"{ name: 'AddMovie' }\"\n          v-if=\"current_user && current_user.role === 'admin'\">\n          Add Movie\n        </v-btn>\n        <v-btn id=\"user_email\" flat v-if=\"current_user\">{{ current_user.email }}</v-btn>\n        <v-btn flat v-bind:to=\"{ name: 'Register' }\" v-if=\"!current_user\" id=\"register_btn\">\n          Register\n        </v-btn>\n        <v-btn flat v-bind:to=\"{ name: 'Login' }\" v-if=\"!current_user\" id=\"login_btn\">Login</v-btn>\n        <v-btn id=\"logout_btn\" flat v-if=\"current_user\" @click=\"logout\">Logout</v-btn>\n      </v-toolbar-items>\n    </v-toolbar>\n    <v-content>\n      <v-container fluid>\n        <div id=\"app\">\n          <router-view/>\n        </div>\n      </v-container>\n    </v-content>\n    <v-footer color=\"indigo\" app>\n      <span class=\"white--text\">&copy; 2017</span>\n    </v-footer>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios';\n\nimport './assets/stylesheets/main.css';\nimport bus from './bus';\n\nexport default {\n  name: 'app',\n  data: () => ({\n    drawer: null,\n    current_user: null,\n  }),\n  props: {\n    source: String,\n  },\n  mounted() {\n    this.fetchUser();\n    this.listenToEvents();\n  },\n  methods: {\n    listenToEvents() {\n      bus.$on('refreshUser', () => {\n        this.fetchUser();\n      });\n    },\n    async fetchUser() {\n      return axios({\n        method: 'get',\n        url: '/api/current_user',\n      })\n        .then((response) => {\n          this.current_user = response.data.current_user;\n        })\n        .catch(() => {\n        });\n    },\n    logout() {\n      return axios({\n        method: 'get',\n        url: '/api/logout',\n      })\n        .then(() => {\n          bus.$emit('refreshUser');\n this.$router.push({ name: 'Home' });\n        })\n        .catch(() => {\n        });\n    },\n  },\n};\n</script>\n\n```", "```js\n<template>\n  <v-form v-model=\"valid\" ref=\"form\" lazy-validation>\n    <v-text-field\n      label=\"Movie Name\"\n      v-model=\"name\"\n      :rules=\"nameRules\"\n      id=\"name\"\n      required\n    ></v-text-field>\n    <v-text-field\n      name=\"input-7-1\"\n      label=\"Movie Description\"\n      v-model=\"description\"\n      id=\"description\"\n      multi-line\n    ></v-text-field>\n    <v-select\n      label=\"Movie Release Year\"\n      v-model=\"release_year\"\n      required\n      :rules=\"releaseRules\"\n      :items=\"years\"\n      id=\"release_year\"\n    ></v-select>\n    <v-text-field\n      label=\"Movie Genre\"\n      v-model=\"genre\"\n      id=\"genre\"\n      required\n      :rules=\"genreRules\"\n    ></v-text-field>\n    <v-btn\n      @click=\"submit\"\n      :disabled=\"!valid\"\n      id=\"add_movie_btn\"\n    >\n      submit\n    </v-btn>\n    <v-btn @click=\"clear\">clear</v-btn>\n  </v-form>\n</template>\n```", "```js\n<template>\n  <div>\n    <div class=\"login\">\n      <a href=\"/login/facebook\">Facebook</a>\n      <a href=\"/login/twitter\">Twitter</a>\n      <a href=\"/login/google\">Google</a>\n      <a href=\"/login/linkedin\">Linkedin</a>\n    </div>\n    <v-form v-model=\"valid\" ref=\"form\" lazy-validation>\n      <v-text-field\n        label=\"Email\"\n        v-model=\"email\"\n        :rules=\"emailRules\"\n        id=\"email\"\n        required\n      ></v-text-field>\n      <v-text-field\n        label=\"Password\"\n        v-model=\"password\"\n        :rules=\"passwordRules\"\n        id=\"password\"\n        required\n      ></v-text-field>\n      <v-btn\n        @click=\"submit\"\n        :disabled=\"!valid\"\n        id=\"login\"\n      >\n        submit\n      </v-btn>\n      <v-btn @click=\"clear\" id=\"clear_input\">clear</v-btn><br/>\n    </v-form>\n  </div>\n</template>\n```", "```js\n<template>\n  <v-layout row wrap>\n    <v-flex xs4>\n      <v-card>\n        <v-card-title primary-title>\n          <div>\n            <div class=\"headline\">{{ movie.name }}</div>\n            <span class=\"grey--text\">{{ movie.release_year }} ‧ {{ movie.genre }}</span>\n          </div>\n        </v-card-title>\n        <h6 class=\"card-title\" id=\"rate_movie\" v-if=\"current_user\" @click=\"rate\">\n          Rate this movie\n        </h6>\n        <v-card-text>\n          {{ movie.description }}\n        </v-card-text>\n      </v-card>\n    </v-flex>\n  </v-layout>\n</template>\n```", "```js\n// For authoring Nightwatch tests, see\n// http://nightwatchjs.org/guide#usage\n\nmodule.exports = {\n  'default e2e tests': function test(browser) {\n    // automatically uses dev Server port from /config.index.js\n    // default: http://localhost:8080\n    // see nightwatch.conf.js\n    const devServer = browser.globals.devServerURL;\n    console.log(devServer)\n\n    browser\n .url(devServer)\n .waitForElementVisible('#inspire', 9000)\n .assert.elementPresent('.list')\n .assert.elementPresent('.list .side_bar_link')\n .assert.elementPresent('.side_bar_link #home')\n .assert.elementPresent('.side_bar_link #contact')\n .click('#drawer')\n .pause(1000)\n .click('#contact')\n .pause(1000)\n .assert.elementPresent('#inspire .contact')\n .assert.containsText('#inspire .contact h1', 'this is contact')\n .pause(1000)\n .click('#login_btn')\n .pause(1000)\n .assert.elementCount('input', 2)\n .setValue('input#email', 'get.aneeta@gmail.com')\n .setValue('input#password', 'secret')\n .pause(1000)\n .click('#login')\n .pause(1000)\n .click('.swal-button--confirm')\n .pause(1000)\n .assert.containsText('#user_email', 'GET.ANEETA@GMAIL.COM')\n .click('#add_movie_link')\n .pause(2000)\n .assert.elementCount('input', 3)\n .assert.elementCount('textarea', 1)\n .setValue('input#name', 'Avengers: Infinity War')\n .setValue('textarea#description', 'Iron Man, Thor, the Hulk and the rest of the Avengers unite \n      to battle their most powerful enemy yet -- the evil Thanos. On a mission to collect all six \n      Infinity Stones, Thanos plans to use the artifacts to inflict his twisted will on reality.')\n .click('.input-group__selections')\n .pause(1000)\n .click('.list a ')\n .setValue('input#genre', 'Fantasy/Science fiction film')\n .click('#add_movie_btn')\n .pause(1000)\n .click('.swal-button--confirm')\n .pause(1000)\n .click('.headline:nth-child(1)')\n .pause(1000)\n .assert.containsText('#rate_movie', 'Rate this movie')\n .click('#rate_movie')\n .pause(1000)\n .click('.vue-star-rating span:nth-child(3)')\n .pause(1000)\n .click('.swal-button--confirm')\n .pause(1000)\n .click('.swal-button--confirm')\n .pause(1000)\n .click('#logout_btn')\n .end();\n  },\n};\n```", "```js\n...\n\"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\",\n    \"start\": \"nodemon server.js\",\n    \"unit\": \"cross-env BABEL_ENV=test karma start test/unit/karma.conf.js --single-run\",\n    \"e2e\": \"node test/e2e/runner.js\",\n    \"test\": \"npm run unit && npm run e2e\",\n    \"lint\": \"eslint --ext .js,.vue src test/unit test/e2e/specs\",\n    \"build\": \"node build/build.js\",\n    \"heroku-postbuild\": \"npm install --only=dev --no-shrinkwrap && npm run build\"\n  },\n...\n```", "```js\n$ npm run e2e \n```"]