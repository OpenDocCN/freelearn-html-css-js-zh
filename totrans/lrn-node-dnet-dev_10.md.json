["```js\n> npm install --save socket.io\n\n```", "```js\n'use strict';\n\nmodule.exports = io => {\n    io.on('connection', (socket) => {\n       socket.on('chatMessage', (message) => {\n           io.emit('chatMessage', message);\n        });\n    });\n };\n```", "```js\n'use strict';\n\nmodule.exports = require('./config/mongoose').then(mongoose => {\n    const app = require('../src/app')(mongoose);\n    const server = require('http').createServer(app);\n    const io = require('socket.io')(server);\n    require('./realtime/chat')(io);\n\n    server.on('close', () => { \n        require('../src/config/redis.js').quit();\n        mongoose.disconnect();\n    });\n    return server;\n});\n```", "```js\n#!/usr/bin/env node\n\nvar debug = require('debug')('hangman:server');\nvar port = normalizePort(process.env.PORT || '3000');\nrequire('../src/server').then((server) => {\n    server.listen(port);\n    server.on('error', onError);\n server.on('listening', onListening.bind(server));\n}).catch(function(error) {\n    debug(error);\n    process.exit(1);\n});\n\n...\n\nfunction onListening() {\n var addr = this.address();\n  ...\n}\n```", "```js\ngulp.task('integration-test',\n         ['lint-integration-test', 'test'], done => {\n  const TEST_PORT = 5000;\n\n require('./src/server.js').then((server) => {\n server.listen(TEST_PORT);\n server.on('listening', () => {\n      gulp.src('integration-test/**/*.js')\n        .pipe(\n          ...\n        }))\n .on('error', error => server.close(() => done(error)))\n .on('end', () => server.close(done))\n    });\n  });\n});\n```", "```js\n    {{/topPlayers}}\n    </ol>\n <hr/>\n <h3>Lobby</h3>\n <form class=\"chat\">\n <div id=\"messages\"></div>\n <input id=\"message\"/><input type=\"submit\" value=\"Send\"/>\n </form>\n  </body>\n</html>\n```", "```js\n$(document).ready(function() {\n    'use strict';\n    var socket = io();\n\n    $('form.chat').submit(function(event){\n        socket.emit('chatMessage', $('#message').val());\n        $('#message').val('');\n        event.preventDefault();\n    });\n\n    socket.on('chatMessage', function(message){\n        $('#messages').append($('<p>').text(message));\n    });\n});\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>{{ title }}</title>\n    <link rel=\"stylesheet\" href=\"/stylesheets/style.css\" />\n    ...\n    <script src=\"img/index.js\"></script>\n <script src=\"img/socket.io.js\"></script>\n <script src=\"img/chat.js\"></script>\n  </head>\n  <body>\n    ...\n```", "```js\ngulp.task('lint-client', function() {\n     return gulp.src('src/public/**/*.js')\n         .pipe(eslint({ envs: [ 'browser', 'jquery' ],\n globals: { io: false } }))\n         .pipe(eslint.format())\n         .pipe(eslint.failAfterError());\n });  \n```", "```js\n> redis-server\n> mongod --dbpath C:\\data\\mongodb\n> set MONGODB_URL=mongodb://localhost/hangman\n> set REDIS_URL=redis://127.0.0.1:6379/\n> set PORT=3000\n> npm start\n> set PORT=3001\n> npm start\n\n```", "```js\n@echo off\nSTART /B redis-server\nSTART /B mongod --dbpath C:\\data\\mongodb\nset MONGODB_URL=mongodb://localhost/hangman\nset REDIS_URL=redis://127.0.0.1:6379/\nSLEEP 2\nset PORT=3000\nSTART /B npm start\nSLEEP 1\nset PORT=3001\nSTART /B npm start\n```", "```js\n> npm install socket.io-redis --save\n\n```", "```js\n'use strict';\n\nmodule.exports = require('./config/mongoose').then(mongoose => {\n    const app = require('../src/app')(mongoose);\n    const server = require('http').createServer(app);\n    const io = require('socket.io')(server);\n\n if (process.env.REDIS_URL && process.env.NODE_ENV !== 'test') {\n const redisAdapter = require('socket.io-redis');\n io.adapter(redisAdapter(process.env.REDIS_URL));\n }\n\n    require('./realtime/chat')(io);\n\n    ...\n    return server;\n });\n```", "```js\n'use strict';\n\nmodule.exports = (service) => {\n    const uuid = require('uuid');\n\n    return function(req, res, next) {\n        let userId = req.cookies.userId;\n        if (!userId) {\n            userId = uuid.v4();\n            res.cookie('userId', userId);\n            req.user = {\n                id: userId\n            };\n            next();\n } else {\n service.getUsername(userId).then(username => {\n req.user = {\n id: userId,\n name: username\n };\n next();\n });\n }\n    };\n};\n```", "```js\n  ...\n\n  let gamesService = require('./service/games')(mongoose);\n  let usersService = require('./service/users');\n\n let users = require('./middleware/users')(usersService);\n  let routes = require('./routes/index')(gamesService, usersService);\n  let games = require('./routes/games')(gamesService, usersService);\n  let profile = require('./routes/profile')(usersService);\n  ...\n```", "```js\n'use strict';\n\nmodule.exports = require('./config/mongoose').then(mongoose => {\n    let app = require('../src/app')(mongoose);\n    let server = require('http').createServer(app);\n    let io = require('socket.io')(server);\n\n    if (process.env.REDIS_URL) {\n        let redisAdapter = require('socket.io-redis');\n        io.adapter(redisAdapter(process.env.REDIS_URL));\n    }\n\n io.use(adapt(require('cookie-parser')()));\n const usersService = require('./services/users.js');\n io.use(adapt(require('./middleware/users')(usersService)));\n\n    require('./realtime/chat')(io);\n\n    ...\n    return server;\n}); \n\nfunction adapt(expressMiddleware) {\n return (socket, next) => {\n expressMiddleware(socket.request, socket.request.res, next);\n };\n}\n\n```", "```js\n'use strict';\n\nmodule.exports = io => {\n    io.on('connection', (socket) => {\n        socket.on('chatMessage', (message) => {\n io.emit('chatMessage', {\n username: socket.request.user.name,\n message: message\n });\n        });\n    });\n }\n```", "```js\n$(document).ready(function() {\n    'use strict';\n\n    var socket = io();\n    ...\n socket.on('chatMessage', function(data){\n        $('#messages').append(\n $('<p>').text(data.message)\n .prepend($('<b>').text(data.username)));\n});\n```", "```js\n'use strict';\n\nmodule.exports = io => {\n\n    io.on('connection', (socket) => {\n const username = socket.request.user.name;\n\n if(username) {\n socket.broadcast.emit('chatMessage', {\n username: username,\n message: 'has arrived',\n type: 'action'\n });\n }\n\n        socket.on('chatMessage', (message) => {\n            io.emit('chatMessage', {\n username: username,\n                message: message\n            });\n        });\n    });\n }\n```", "```js\n    socket.on('chatMessage', function(data){\n        $('#messages').append(\n $('<p>').text(data.message).addClass(data.type)\n                .prepend($('<b>').text(data.username)));\n    });\n```", "```js\n'use strict';\n\nmodule.exports = io => {\n    io.on('connection', (socket) => {\n        ...\n        socket.on('chatMessage', (message) => {\n if (!username) {\n socket.emit('chatMessage', {\n message: 'Please choose a username',\n type: 'warning'\n });\n } else {\n                io.emit('chatMessage', {\n                    username: username,\n                    message: message\n                });                \n }\n        });\n    });\n }\n```", "```js\n> npm install socket.io-client --save-dev\n\n```", "```js\n'use strict';\ndescribe('chat', function() {\n    const expect = require('chai').expect;\n    let server, io, url, createUser, createdClients = [];\n\n    beforeEach(done => {\n        server = require('http').createServer();\n\n        server.listen((err) => {\n            if (err) {\n                done(err);\n            } else {\n                const addr = server.address();\n                url = 'http://localhost:' + addr.port + '/chat'; \n\n                io = require('socket.io')(server);\n                require('../../src/realtime/chat.js')(io);\n\n                done();\n            }\n        });\n    });\n\n    afterEach(done => {\n        createdClients.forEach(client => client.disconnect());\n        server.close(done);\n    });\n\n    const createClient = require('socket.io-client');\n    createUser = (name, room) => {\n        let user = {\n            name: name,\n            client: createClient(url)\n        };\n        createdClients.push(user.client);\n        return user;\n    };\n});\n```", "```js\n'use strict';\n\ndescribe('chat', function() {\n    const expect = require('chai').expect;\n    let server, io, url, createUser, createdClients = [];\n\n    beforeEach(done => {\n        server = require('http').createServer();\n\n        server.listen((err) => {\n            if (err) {\n                done(err);\n            } else {\n                const addr = server.address();\n                url = 'http://localhost:' + addr.port;\n\n                io = require('socket.io')(server);\n io.use((socket, next) => {\n socket.request.user = {\n name: socket.request.headers.username\n };\n next();\n });\n\n                require('../../src/realtime/chat.js')(io);\n\n                done();\n            }\n        });\n    });\n\n    ...\n\n    const createClient = require('socket.io-client');\n    createUser = (name, room) => {\n let headers = {};\n if (name) {\n headers.username = name;\n }\n\n        let user = {\n            name: name,\n client: createClient(url, { extraHeaders: headers})\n        };\n        createdClients.push(user.client);\n        user.client.emit('joinRoom', room);\n\n        return user;\n    };\n});\n```", "```js\n    it('warns unnamed users to choose a username', done => {\n        let unnamedUser = createUser();\n        unnamedUser.client.emit('chatMessage', 'Hello!');\n        unnamedUser.client.on('chatMessage', (data) => {\n            expect(data.message).to.contain('choose a username');\n            expect(data.username).to.be.undefined;\n            expect(data.type).to.equal('warning');\n            done();\n        });\n    });\n\n    it('broadcasts arrival of named users', done => {\n        let connectedUser = createUser();\n        let newUser = createUser('User1');\n        connectedUser.client.on('chatMessage', (data) => {\n            expect(data.message).to.contain('arrived');\n            expect(data.username).to.equal(newUser.name);\n            expect(data.type).to.equal('action');\n            done();\n        });\n    });\n```", "```js\n    it('emits messages from named users back to all users', done => {\n        let namedUser = createUser('User1');\n        let otherUser = createUser();\n        let messageReceived = function(data) {\n            this.received = data;\n            if (namedUser.received && otherUser.received) {\n                [namedUser.received, otherUser.received]\n                .forEach(received => {\n                    expect(received.message).to.equal('Hello!');\n                    expect(received.username)\n                        .to.equal(namedUser.name);\n                });\n                done();\n            }\n        };\n        otherUser.client.on('chatMessage',\n                            messageReceived.bind(otherUser));\n        namedUser.client.on('chatMessage',\n                            messageReceived.bind(namedUser));\n        namedUser.client.emit('chatMessage', 'Hello!');\n    });\n```", "```js\n'use strict';\n\nconst EventEmitter = require('events');\nconst emitter = new EventEmitter();\n\nmodule.exports = (mongoose) => {\n    let Game = mongoose.models['Game'];\n\n    if (!Game) {\n        let Schema = mongoose.Schema;\n        let gameSchema = new Schema({\n            word: String,\n            setBy: String\n        });\n\n        ...\n\n gameSchema.post('save', game =>\n emitter.emit('gameSaved', game));\n gameSchema.post('remove', game =>\n emitter.emit('gameRemoved', game));\n\n        Game = mongoose.model('Game', gameSchema);\n    }\n\n    return {\n        ...\n        get: id => Game.findById(id),\n events: emitter\n    };\n};\n\nmodule.exports.events = emitter;\n\n```", "```js\n$(document).ready(function() {\n    'use strict';\n var socket = io('/chat');\n    ...\n```", "```js\n'use strict';\n\nmodule.exports = io => {\n const namespace = io.of('/chat');\n\n namespace.on('connection', (socket) => {\n         ...\n\n         socket.on('chatMessage', (message) => {\n             if (!username) {\n                 ...\n             } else {\n namespace.emit('chatMessage', {\n                     username: username,\n                     message: message\n                 });\n             }\n         });\n     });\n };\n```", "```js\n                const addr = server.address();\n url = 'http://localhost:' + addr.port + '/chat';\n\n```", "```js\n'use strict';\n\nmodule.exports = (io, service) => {\n    io.of('/games').on('connection', (socket) => {\n        forwardEvent('gameSaved', socket);\n        forwardEvent('gameRemoved', socket);\n    });\n\n    function forwardEvent(name, socket) {\n        service.events.on(name, game => {\n            if (game.setBy !== socket.request.user.id) {\n                socket.emit(name, game.id);\n            }\n        });\n    }\n};\n```", "```js\n'use strict';\n\nmodule.exports = require('./config/mongoose').then(mongoose => {\n    ...\n\n    require('./realtime/chat')(io);\n const gamesService = require('./services/games.js')(mongoose);\n require('./realtime/games')(io, gamesService);\n\n    ...\n    return server;\n});\n```", "```js\n    var socket = io('/games');\n    var availableGames = $('#availableGames');\n\n    socket.on('gameSaved', function(game) {\n        availableGames.append(\n            '<li id=\"' + game + '\"><a href=\"/games/' + game + '\">' +\n                game + '</a></li>');\n    });\n    socket.on('gameRemoved', function(game) {\n        $('#' + game).remove();\n    });\n```", "```js\n    <h3>Games available to play</h3>\n    <ul id=\"availableGames\">\n      {{#availableGames}}\n <li id=\"{{id}}\"><a href=\"/games/{{id}}\">{{id}}</a></li>\n      {{/availableGames}}\n    </ul>\n```", "```js\n'use strict';\n\nmodule.exports = io => {\n    const namespace = io.of('/chat');\n\n    namespace.on('connection', (socket) => {\n        const username = socket.request.user.name;\n\n socket.on('joinRoom', (room) => {\n socket.join(room);\n            if (username) {\n socket.broadcast.to(room).emit('chatMessage', {\n                    username: username,\n                    message: 'has arrived',\n                    type: 'action'\n                });\n            }\n\n            socket.on('chatMessage', (message) => {\n                if (!username) {\n                    ...\n                } else {\n namespace.to(room).emit('chatMessage', {\n                        username: username,\n                        message: message\n                    });\n                }\n            });\n\n socket.on('disconnect', () => {\n if (username) {\n socket.broadcast.to(room).emit('chatMessage', {\n username: username,\n message: 'has left',\n type: 'action'\n });\n }\n });\n        });\n    });\n};\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hangman - Game #{{id}}</title>\n    <link rel=\"stylesheet\" href=\"/stylesheets/style.css\" />\n    <script src=\"img/jquery.min.js\"></script>\n    <script src=\"img/game.js\"></script>\n <script src=\"img/socket.io.js\"></script>\n <script src=\"img/chat.js\"></script>\n    <base href=\"/games/{{ id }}/\">\n  </head>\n  <body>\n    <h1>Hangman - Game #{{id}}</h1>\n    <h2 id=\"word\" data-length=\"{{ length }}\"></h2>\n    <p>Press letter keys to guess</p>\n    <h3>Missed letters:</h3>\n    <p id=\"missedLetters\"></p>\n <hr/>\n <h3>Discussion</h3>\n <form class=\"chat\" data-room=\"{{id}}\">\n <div id=\"messages\"></div>\n <input id=\"message\"/><input type=\"submit\" value=\"Send\"/>\n </form>\n  </body>\n</html>\n```", "```js\n    <hr/>\n    <h3>Lobby</h3>\n <form class=\"chat\" data-room=\"lobby\">\n      <div id=\"messages\"></div>\n      <input id=\"message\"/><input type=\"submit\" value=\"Send\"/>\n    </form>\n```", "```js\n$(document).ready(function() {\n    'use strict';\n\n    var chat = $('form.chat');\n    var socket = io('/chat');\n\n socket.emit('joinRoom', chat.data('room')); \n chat.submit(function(event){\n        ...\n    });\n    ...\n});\n```", "```js\n    $(document).keydown(function(event) {\n if (!$('.chat #message').is(':focus') &&\n                event.which >= 65 && event.which <= 90) {\n            var letter = String.fromCharCode(event.which);\n            if (guessedLetters.indexOf(letter) === -1) {\n                guessedLetters.push(letter);\n                guessLetter(letter);\n            }\n        }\n    });\n```"]