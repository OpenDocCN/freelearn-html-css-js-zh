- en: Chapter 6. Creating Feed Reader and Translator Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned to create Calendar events and Drive applications.
    You built many real-world applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn to
  prefs: []
  type: TYPE_NORMAL
- en: Create a Google search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a stock quote ticker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an RSS feed reader
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an Atom feed reader
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a language translator application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a document reviewing and instant inline commenting application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The UrlFetchApp class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `UrlFetchApp` class can be used to issue HTTP/HTTPS request and get responses
    to/from any websites/URL. For example, the `UrlFetchApp.fetch ("https://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=PACKT")`
    code returns the search result with the search term `PACKT`. The response will
    be a raw content along with HTTP headers.
  prefs: []
  type: TYPE_NORMAL
- en: If the communication between the `UrlFetchApp` class's `fetch` method and the
    URL is okay then the URL should return a response code `200`. Otherwise, any other
    number corresponds to the type of error. We can check the response code before
    proceeding further using the `getResponseCode` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get the content text using the `getContentText` method and parsing
    it to JSON objects. The following code snippet pulls the content text and parses
    to JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For your understanding the logged output is furnished here (text might be truncated
    and formatted for brevity):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The top-level objects of the JSON are `responseDetails`, `responseData`, and
    `responseStatus`. If Google has returned the correct response, then the `responseStatus`
    value should be `200`. This is returned by the Google search service not the `UrlFetchApp`
    status. You can also check whether the `responseStatus` value equals to `200`
    or not, to confirm if the response content is okay.
  prefs: []
  type: TYPE_NORMAL
- en: You need to dig into the `responseData` object, which contains the result as
    an array of object. To get the array, use `json.responseData.results` and then
    cycle through the array to get the required result data. We will create an application
    to search Google and to populate the result in Sheet.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Google search application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new Sheet, rename it as `Google` and create headers as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Google search application](img/B05010_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, enter the following code in the `Code.gs` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'A sample output of the application is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Google search application](img/B05010_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can test the code using other keywords in cell *B2*. You can create a button
    or custom menu for the `searchGoogle` function, so that you can search frequently.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a stock quote ticker application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A simple function to get stock quotes from Google Finance is shown in the following
    screenshot. The query string (`q`) specifies `NASDAQ` as the stock exchange and
    `GOOG` (Google) as the scrip name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we are using the `UrlFetchApp` class''s `fetch` method.
    The logged response is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the returned response text, you can see that the first four characters are
    a line break, two slashes (`//`), and a space character, so you have to remove
    them before parsing the required JSON object. Striping out the first four characters
    from the returned string makes things easier. You can use the `substr` method
    to strip the first four characters. The `parse` method of JavaScript JSON (JavaScript
    Object Notation) object parses the string to the JSON object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The modified code to retrieve **Last Traded Price** (**LTP**) of Google scrip
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can use multiple scrips (comma separated) in the query string. For example,
    `http://finance.google.com/finance/info?q=NASDAQ:GOOG,AMD,MCHP`. Then, the response
    would be an array of stock quote objects. You will have to cycle through the array
    to get each scrip data.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a complete working stock quote application. Create or add a
    new Sheet and rename it as `Quotes`, populate the `SYMBOL` column, and format
    it as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a stock quote ticker application](img/B05010_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Edit the `getStockQuotes` function in the `Code.gs` file as listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a sample output of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a stock quote ticker application](img/B05010_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For a repeated quote tick, you can create a minutes trigger for the `getStockQuotes`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Logging Bitcoin quotes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have you ever heard about Bitcoin, digital, or virtual currency, and ever watched
    Bitcoin price ticks to buy/sell Bitcoins? **Bitcoin** is a digital asset and trending
    a new payment system spreading all over the world. Here is an interesting application
    to log real-time Bitcoin prices. In this application, we will log prices from
    the Bitstamp trading platform. [https://www.bitstamp.net](https://www.bitstamp.net)
    provides API to get Bitcoin real-time price ticks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The response from the Bitstamp API which is parsed as JSON is provided here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete code to parse the said JSON objects to Sheet is provided here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: A sample logged Bitcoin data is given here. The **High**, **Low**, and **Volume**
    values are the highest price, lowest price, and total volume in the last 24 hours.
    The **Bid** and **Ask** values are real-time values. Create a trigger for the
    repeated execution of the `getBitCoinData` function.
  prefs: []
  type: TYPE_NORMAL
- en: '![Logging Bitcoin quotes](img/B05010_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: RSS and Atom feeds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RSS stands for **Rich Site Summary**. It is used to publish frequently updated
    information. Users need standalone special software applications or browser add-ons
    called **RSS readers** to read information from any feeds.
  prefs: []
  type: TYPE_NORMAL
- en: Feed documents contain summarized or full text, metadata, publishing date, author
    name, and so on. Using feed, users can receive timely website updates or aggregate
    data from many websites. User need not check manually for any updates from those
    websites frequently, but subscribe for feeds. Feed reader checks the subscribed
    website frequently for any new data and retrieves them.
  prefs: []
  type: TYPE_NORMAL
- en: Skeleton of a RSS feed document
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An example of a RSS feed document is listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The first line specifies the version, as this one is an XML document, to the
    processing software application.
  prefs: []
  type: TYPE_NORMAL
- en: All other elements are enclosed within the `rss` root element.
  prefs: []
  type: TYPE_NORMAL
- en: The `title`, `description`, and `language` elements inside the `channel` element
    specify the title, description, and in which language the channel is published,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The `item` element is a repeated one, and it contains the individual feed item
    information, such as `title` (title of the item), `link` (link to the item), `comments`
    (comment about the item), `pubDate` (item published date), `creator` (creator
    of the item), `category` (specifying to which category the item belongs), `description`
    (a brief description about the item), and many more.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an RSS reader application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have to parse the required content from the XML document returned by `UrlFetchApp`
    using `XmlService`. The actual code is furnished here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, `XmlService` is used to parse any well-structured XML
    content. In the mentioned sample source, we concentrated on `channel` elements
    and one or more `item` elements. The `item` element itself contains more information.
    To get the required data, you have to dig into the contents in the order of `channel`
    | `item` | `title` | `link` | `creator`. The `creator` element is prefixed with
    `dc`, so we have to assign the `dc` namespace URL at the top lines of the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample output of this application is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an RSS reader application](img/B05010_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Skeleton of an Atom feed document
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Atom feeds are similar to RSS feeds with many advanced features. The `root`
    element is `feed` instead of `channel`. An example of an Atom feed document is
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Creating an Atom feed reader application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This application parses Google Hot Trends Atom Feed. The following is the code
    to read Google Trends Atom Feed content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'A sample output of the application is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an Atom feed reader application](img/B05010_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using optional parameters with the UrlFetchApp class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All foresaid applications fetch results from public URLs; this means that they
    do not require credentials. What if a website requires your credentials, such
    as username and password, before sending a response? You can provide credentials
    and other parameters as an optional parameter of the `UrlFetchApp` class, for
    example, `UrlFetchApp.fetch(url, params)`. The `params` parameter is similar to
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `headers` variable (the HTTP/HTTPS request headers) can be a JavaScript
    key/value map. You can provide your login credentials as headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Your username and password will be encoded but not encrypted, so prefer HTTPS
    over HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not all websites support basic authentication; they mostly support OAuth. The
    `UrlFetchApp` class's built-in OAuth service is deprecated and moved to the open
    source library called the GAS library. More information on how to import the external
    library and use the OAuth2 open source library is provided in [Chapter 9](ch09.html
    "Chapter 9. More Tips and Tricks and Creating an Add-on"), *More Tips and Tricks
    and Creating an Add-on*.
  prefs: []
  type: TYPE_NORMAL
- en: The LanguageApp class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `LanguageApp` class provides the `translate` method to translate any text
    from one language to another language.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to translate `Google apps script for beginners` to French use
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The logged output would be: `Google Apps Script pour les débutants`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Google Translate service supports many languages. For more information on supported
    languages, visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/translate/v2/using_rest#language-params](https://cloud.google.com/translate/v2/using_rest#language-params)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the language translator application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This application translates text from one language to another. We will use one
    document as an origin/source document and the other one as a destination/target
    document. We are going to develop this application as an add-on. Although there
    is a built-in translate service available (in Docs application navigate to **Tools**
    | **Translate document…)**, we have provided the language translator application
    to explore the capabilities of GAS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following code in the source document''s (Docs) `Code.gs` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code sets the target document''s ID to the `targetDocumentId`
    global variable. The target document is the document to which you are going to
    transfer the translated text. Replace the text within double quotes with the target
    document''s ID as a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding `onOpen` function creates an **Add-ons** menu with a menu item
    called **Start.** It is associated with the `showSidebar` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `showSidebar` function creates the sidebar with the required control
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The `getPreferences` function gets and returns the user''s language preferences.
    The `runTranslation` function shown here translates the text from the source language
    to the destination language. The languages are notated by their two-letter short
    form. For example, English is `en`, German is `de`, and the default is auto, which
    means the Google Translate service will detect the source language itself. If
    the `savePrefs` argument is `true`, then the user language preference will be
    saved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following `include` helper function puts external JS/CSS contents from
    other files (filename given as argument) into the HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new HTML file (`Sidebar.html`) from the **File** menu and enter the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, Google's polymer components library is used. Although
    we could have used simple HTML elements, we used polymer components for an aesthetic
    look and feel of the sidebar. You need not worry about the functioning of that
    library, you just need to include the URLs as shown. The `include` helper function
    inserts the respective file, given as argument, contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another HTML file and name it as `Sidebar.css`, including `.css`. The
    script editor will add `.html` extension, so the filename will be `Sidebar.css.html`.
    Enter the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The preceding CSS code defines styles for the HTML elements in the `Sidebar.html`
    file. CSS defines element styles within associated braces.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: The `body` style name defines styles for the body element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`h4` defines styles for fourth-level heading elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The style name prefixed with a dot (`.`) defines styles for the elements, which
    belong to that class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name prefixed with the hash symbol (`#`) defines styles for element whose
    ID is same as the style name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For further reading on CSS, refer to [https://developer.mozilla.org/en-US/Learn/CSS](https://developer.mozilla.org/en-US/Learn/CSS).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another HTML file and name it `Sidebar.js`. Enter the following code
    in the newly created `Sidebar.js.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: After typing all the code without errors, reload the document. A new entry **Translate**
    under the **Add-ons** menu will appear. Click on **start** to open the sidebar,
    which will have all the controls you need to run the application. To test the
    application, enter some text in the source document (in which you have entered
    code). Select language into which you would like to translate the text, then click
    on the **TRANSLATE** button.
  prefs: []
  type: TYPE_NORMAL
- en: The translated text will be placed in the destination document whose ID you
    entered in the code. Open that document to see the translated text.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the sidebar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the language translator application](img/B05010_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the source document text in English before translation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the language translator application](img/B05010_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now if you open the target document, then you can view the translated text
    saved in it. The sample text shown in the preceding screenshot is translated to
    Japanese as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the language translator application](img/B05010_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a document reviewing and instant inline commenting application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create a document reviewing and commenting application. The document
    can be an article submission, a comprehension submitted by a student, a thesis
    paper submitted by a researcher, or anything else that should be reviewed before
    acceptance. The reviewer can review and insert predefined comments or his/her
    own custom comments, instantly. The reviewer selects some text in the document,
    and clicks on any one button (predefined comments) to highlight. Then, the script
    will highlight the text and insert the comment text inline along with creating
    an actual comment. You can see the created comments in the **Comment** panel (at
    the top right-hand side). Finally, the reviewer can insert score at the end of
    the document.
  prefs: []
  type: TYPE_NORMAL
- en: 'As usual, create the `onOpen` trigger function in the code file, and it will
    open the sidebar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `insertComment` function inserts the actual comment into the document.
    Drive is an advanced service, so you should enable the Drive API before using
    it. I hope you remember how to enable advanced services. If you don''t, then revise
    from [Chapter 5](ch05.html "Chapter 5. Creating Google Calendar and Drive Applications"),
    *Creating Google Calendar and Drive Applications*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The `insertText` function uses the selected text or the text where the cursor
    is pointed to as an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This `insertScore` function inserts a horizontal line at the end of the document,
    and it also inserts the score based on whether the document meets the expectation
    or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the following code in the `Sidebar.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `accordion` block''s structure is provided in the code comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the sidebar and document:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a document reviewing and instant inline commenting application](img/B05010_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see the inserted comments by clicking on the **Comment** button at the
    top right-hand side corner of the document's window.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned and created many useful applications, including
    an RSS/Atom reader, the language translator applications, and the document reviewing
    and commenting application. In the next chapter, you will learn to create interactive
    web pages, an RSS feed, a file upload, and a timesheet application.
  prefs: []
  type: TYPE_NORMAL
