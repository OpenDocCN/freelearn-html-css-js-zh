["```js\ndescribe('when the date of birth is in the wrong format')\n  it('does not save the birthday', ...)\n  it('returns a 422', ...)\n  it('returns a useful message', ...)\n  it('returns the other data back including the incorrect\n      value', ...)\n});\n```", "```js\nit('returns a complete error response', async () => {\n  const result = await performFormAction(\n    createBirthday('Hercules', 'unknown')\n  );\n  expect(result).toBeUnprocessableEntity({\n    error:\n      'Please provide a date of birth in the YYYY-MM-DD\n       format.',\n    name: 'Hercules',\n    dob: 'unknown'\n  });\n});\n```", "```js\nexport function toTestSomething(received, expected) {\n  const pass = ...\n  const message = () => \"...\"\n  return {\n   pass,\n   message\n  };\n}\n```", "```js\nexpect(() =>\n  expect(response).toBeUnprocessableEntity()\n).toThrowError(\n  'Expected 422 status code but got 500'\n);\n```", "```js\n    import {\n      describe,\n      it,\n      expect,\n      beforeAll\n    } from 'vitest';\n    import { fail } from '@sveltejs/kit';\n    import {\n      toBeUnprocessableEntity\n    } from './toBeUnprocessableEntity.js';\n    ```", "```js\n    describe('toBeUnprocessableEntity', () => {\n      beforeAll(() => {\n        expect.extend({ toBeUnprocessableEntity });\n      });\n    });\n    ```", "```js\n    it('throws if the status is not 422', () => {\n      const response = fail(500);\n      expect(() =>\n        expect(response).toBeUnprocessableEntity()\n      ).toThrowError();\n    });\n    ```", "```js\n    export function toBeUnprocessableEntity(\n      received, expected\n    ) {\n      return { pass: false };\n    }\n    ```", "```js\n    it('does not throw if the status is 422', () => {\n      const response = fail(422);\n      expect(() =>\n        expect(response).toBeUnprocessableEntity()\n      ).not.toThrowError();\n    });\n    ```", "```js\n    export function toBeUnprocessableEntity(\n      received, expected\n    ) {\n      if (received.status !== 422) {\n        return { pass: false };\n      }\n      return { pass: true };\n    }\n    ```", "```js\n    it('returns a message that includes the actual error code', () => {\n      const response = fail(500);\n      expect(() =>\n        expect(response).toBeUnprocessableEntity()\n      ).toThrowError(\n        'Expected 422 status code but got 500'\n      );\n    });\n    ```", "```js\n    if (received.status !== 422) {\n      return {\n        pass: false,\n        message: () =>\n          `Expected 422 status code but got\n            ${received.status}`\n      };\n    }\n    ```", "```js\n    it('throws error if the provided object does not match', () => {\n      const response = fail(422, { a: 'b' });\n      expect(() =>\n        expect(response).toBeUnprocessableEntity({\n          c: 'd'\n        })\n      ).toThrowError();\n    });\n    ```", "```js\n    export function toBeUnprocessableEntity(\n      received,\n      expected\n    ) {\n      if (received.status !== 422) {\n        ...\n      }\n      if (expected) {\n        return {\n          pass: false\n        };\n      }\n      ...\n    }\n    ```", "```js\n    it('does not throw error if the provided object does match', () => {\n      const response = fail(422, { a: 'b' });\n      expect(() =>\n        expect(response).toBeUnprocessableEntity({\n          a: 'b'\n        })\n      ).not.toThrowError();\n    });\n    ```", "```js\n    export function toBeUnprocessableEntity(\n      received,\n      expected\n    ) {\n      if (received.status !== 422) {\n        ...\n      }\n      if (!this.equals(received.data, expected)) {\n        return {\n          pass: false\n        };\n      }\n      ...\n    };\n    ```", "```js\n    it('does not throw error if the provide object is a partial match', () => {\n      const response = fail(422, { a: 'b', c: 'd' });\n      expect(() =>\n        expect(response).toBeUnprocessableEntity({\n          a: 'b'\n        })\n      ).not.toThrowError();\n    });\n    ```", "```js\n    import { expect } from 'vitest';\n    ```", "```js\n    if (\n      !this.equals(\n        received.data,\n        expect.objectContaining(expected)\n      )\n    ) {\n      ...\n    }\n    ```", "```js\n    export function toBeUnprocessableEntity(\n      received,\n      expected = {}\n    ) {\n      ...\n    }\n    ```", "```js\n    it('returns a message if the provided object does not match', () => {\n      const response = fail(422, { a: 'b' });\n      expect(() =>\n        expect(response).toBeUnprocessableEntity({\n          c: 'd'\n        })\n      ).toThrowError(/Response body was not equal/);\n    });\n    ```", "```js\n    if (!this.equals(...)) {\n      return {\n        pass: false,\n        message: () => 'Response body was not equal'\n      };\n    }\n    ```", "```js\n    it('includes a diff if the provided object does not match', () => {\n      const response = fail(422, { a: 'b' });\n      expect(() =>\n        expect(response).toBeUnprocessableEntity({\n          c: 'd'\n        })\n      ).toThrowError('c:');\n      expect(() =>\n        expect(response).toBeUnprocessableEntity({\n          c: 'd'\n        })\n      ).toThrowError('a:');\n    });\n    ```", "```js\n    import { EOL } from 'os';\n    ```", "```js\n    return {\n      pass: false,\n      message: () =>\n        `Response body was not equal:` + EOL +\n        this.utils.diff(expected, received.data)\n    };\n    ```", "```js\nexpect(result).not.toBeUnprocessableEntity({\n  error: 'An unknown ID was provided.'\n});\n```", "```js\nexpect(result).not.toBeUnprocessableEntity();\n```", "```js\n    describe('not', () => {\n      it('returns a message if the status is 422 with the\n      same body', () => {\n        const response = fail(422, { a: 'b' });\n        expect(() =>\n          expect(response).not.toBeUnprocessableEntity({\n            a: 'b'\n          })\n        ).toThrowError(\n          /Expected non-422 status code but got 422/\n        );\n      });\n    });\n    ```", "```js\n    return {\n      pass: true,\n      message: () => 'Expected non-422 status code but got 422'\n    };\n    ```", "```js\n    it('includes with the received response body in the message', () => {\n      const response = fail(422, { a: 'b' });\n      expect(() =>\n        expect(response).not.toBeUnprocessableEntity({\n          a: 'b'\n        })\n      ).toThrowError(/\"a\": \"b\"/);\n    });\n    ```", "```js\n    return {\n      pass: true,\n      message: () =>\n        `Expected non-422 status code but got 422 with\n    body:` + EOL +\n        this.utils.stringify(received.data)\n    };\n    ```", "```js\n    it('returns a negated message for a non-422 status with no body', () => {\n      const response = fail(422);\n      expect(() =>\n        expect(response).not.toBeUnprocessableEntity()\n      ).toThrowError(\n        'Expected non-422 status code but got 422'\n      );\n    });\n    ```", "```js\n    if (!received.data) {\n      return {\n        pass: true,\n        message: () =>\n          'Expected non-422 status code but got 422'\n      };\n    }\n    ```", "```js\n    ...\n    import {\n      toBeUnprocessableEntity\n    } from './src/matchers/toBeUnprocessableEntity.js';\n    ...\n    expect.extend({ toBeUnprocessableEntity });\n    ```", "```js\n    describe('when the name is not provided', () => {\n      ...\n      it('does not save the birthday', ...);\n      it('returns a complete error response', () => {\n        expect(result).toBeUnprocessableEntity({\n          error: 'Please provide a name.',\n      dob: '2009-02-02'\n        });\n      });\n    });\n    ```", "```js\n    describe('when the date of birth is in the wrong format', () => {\n      ...\n      it('does not save the birthday', ...);\n      it('returns a complete error response', () => {\n        expect(result).toBeUnprocessableEntity({\n          error:\n      'Please provide a date of birth in the YYYY-\n              MM-DD format.',\n          name: 'Hercules',\n          dob: 'unknown'\n        });\n      });\n    });\n    ```", "```js\n    describe('when the id is unknown', () => {\n      ...\n      it('does not save the birthday', ...);\n      it('returns a complete error message', () => {\n        expect(result).toBeUnprocessableEntity({\n      error: 'An unknown ID was provided.'\n        });\n      });\n    });\n    ```", "```js\n    it('returns the id when an empty name is provided', async () => {\n      ...\n      expect(result).toBeUnprocessableEntity({\n        id: storedId()\n      });\n    });\n    ...\n    it('returns the id when an empty date of birth is provided', async () => {\n      ...\n      expect(result).toBeUnprocessableEntity({\n        id: storedId()\n      });\n    });\n    ```"]