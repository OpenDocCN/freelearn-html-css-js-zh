["```js\n    npm install -–save-dev webpack webpack-cli webpack-\n      dev-server webpack-merge clean-webpack-plugin file-\n      loader html-webpack-plugin source-map-loader url-\n      loader eslint `@babylonjs/core \n    ```", "```js\n    npm install -save-dev @babylonjs/materials\n      @babylonjs/loaders @babylonjs/gui\n      @babylonjs/procedural-textures @babylonjs/post-\n      processes @babylonjs/serializers\n      @babylonjs/inspector\n    ```", "```js\nnode_modules\ndist\n```", "```js\n\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require(«html-webpack-plugin»);\nconst { CleanWebpackPlugin } = require(«clean-webpack-\n  plugin\");\nconst appDirectory = __dirname;\nmodule.exports = env => {\n    return {\n    };\n};\n```", "```js\n\nmodule.exports = {\n    const appDirectory = __dirname; \n    return {\n        entry: «./src/index.js\"),\n        output: {\n            filename: «js/babylonBundle.js\",\n            path: path.resolve(appDirectory, \"./dist\")\n        },\n        plugins: [\n            new CleanWebpackPlugin(),\n            new HtmlWebpackPlugin({\n                template: path.resolve(\"public/index.xhtml\"),\n                inject: true\n            })\n        ]\n    };\n};\n```", "```js\nnpx webpack –config webpack.common.js\n```", "```js\n\n// entry, output, etc…        \n        resolve: {\n            extensions: [\".js\"],\n            fallback: {\n                fs: false,\n                path: false,\n            },\n        },\n        module: {\n            rules: [  \n             {\n                test: /\\.(png|jpg|gif|env|glb|stl)$/i,\n                use: [\n                {\n                  loader: \"url-loader\",\n                  options: {\n                    limit: 8192,\n                  },\n                 },\n               ],\n        },\n// plugins, etc.\n```", "```js\n\nconst { merge } = require('webpack-merge');\nconst common = require('./webpack.common.js');\nconst path = require('path');\nconst appDirectory = __dirname;\nconst devConfig = {\n    mode: \"development\",\n    devtool: \"inline-source-map\",\n    devServer:  {\n        contentBase: path.resolve(appDirectory, \"public\"),\n        compress: true,\n        hot: true,\n        open: true,\n        publicPath: \"/\"\n    }\n};\nmodule.exports = merge(common, devConfig);\n```", "```js\n\nconst { merge } = require('webpack-merge');\nconst common = require('./webpack.common.js');\nconst prodConfig = {\n    mode: \"production\"\n};\nmodule.exports = merge(common, prodConfig);\n```", "```js\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Space-Truckers: The Video Game!</title>\n    <style>\n      html,\n      body {\n        overflow: hidden;\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        padding: 0;\n      }\n      canvas {\n        width: 100%;\n        height: 100%;\n        touch-action: none;\n      }\n    </style>\n  </head>\n  <body>\n  </body>\n</html>\n```", "```js\n\nconst { Mesh,\nMeshBuilder,\nStandardMaterial, \n// ...\n} = BABYLON; \n```", "```js\n\nconst distortTexture = \"textures/distortion.png\";\nconst rockTextureN = \"textures/rockn.png\";\nconst rockTexture = \"textures/rock.png\";\n```", "```js\n\nmat.diffuseTexture = new Texture(distortTexture, scene);\n```", "```js\n\nlet eng = new Engine(canvas, true, null, true);\nlet startScene = createStartScene(eng);\neng.runRenderLoop(() => {\n    startScene.scene.render();\n});\n```", "```js\n\nimport distortTexture from\n  \"../assets/textures/distortion.png\";\nimport rockTextureN from \"../assets/textures/rockn.png\";\nimport rockTexture from \"../assets/textures/rock.png\";\n```", "```js\n\nexport default function createStartScene(engine) {\n```"]