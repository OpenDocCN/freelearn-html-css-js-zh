- en: Chapter 9. Developing Your First CreateJS Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our previous chapters, you learned everything you need to know about building
    impressive web applications using CreateJS. In this chapter, we will wrap up everything
    and learn to build an actual application using CreateJS from scratch. We will
    develop a simple painting application with options such as the ability to change
    the background color, brush color, brush style, brush size, and so on. Also, you
    will learn about the tricks and tips that will help you develop better JavaScript
    libraries and applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Conceptualizing the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explaining the structure of the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing every part of the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting an image exported from the `Canvas` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding your application structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To demonstrate the application development with CreateJS, we will build a painting
    application. In this application, we will use the EaselJS module and some pure
    JavaScript snippets to get an image exported from the `Canvas` element. As you
    know, EaselJS renders all outputs into a `Canvas` element; there are some JavaScript
    functions to get an image output from the `Canvas` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'This application contains three files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `index.html` file, we create the HTML elements and link external files
    to it. `app.js` is the main JavaScript file that contains almost all JavaScript
    code to run an application, and `style.css` is used to style the page, drop-down
    menus, and other minor elements.
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding your application structure](img/0260OS_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We split the dependencies into different files to manage them better and provide
    better performance while loading the application. External static files will be
    cached in browsers, so users will not require to download them every time the
    page is refreshed.
  prefs: []
  type: TYPE_NORMAL
- en: Our painting application mainly works with EaselJS features, such as the `curveTo`
    and `beginStroke` functions. In order to control the application's global settings
    such as the background color and brush color, we have global variables that hold
    the settings. We will be using them in other events or functions. These variables
    are changed when the user clicks on the different options and menus present on
    the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preview of the application interface is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding your application structure](img/0260OS_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The application has a navigation bar that consists of four drop-down menus and
    a title. With the drop-down menus, users can change the brush style, brush size,
    background color, and brush color. Also, there is an **Export** link that converts
    the `Canvas` element to a PNG image, and gives a download link to the user from
    where the user can download the image.
  prefs: []
  type: TYPE_NORMAL
- en: Our drop-down menus work with pure CSS code so we don't need any JavaScript
    code for them. In the next section, we will explain each part in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Developing the index.html file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our main HTML page has a simple structure. Following is a `head` tag in an
    HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the `head` tag, we only link the CSS file to the page. Other JavaScript files
    will be connected to the page at the end of the file and the reason is to provide
    better performance while loading the page. When we add stylesheets in the `head`
    tag and JavaScript files at the end of the HTML file (before closing the `body`
    tag), our page interface will appear to work faster because the browser doesn't
    wait to load all JavaScript and CSS files. The web browser loads CSS files because
    they are in the `head` tag, and after rendering all the HTML elements, it loads
    the JavaScript files. This trick gives a better feeling about the application's
    performance to users.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following lines, we have the `body` and `wrapper` elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `wrapper` layer is the container for all other elements. Also the `div`
    header is the container for the black-colored header at the top of the page, as
    seen on the output screen. This section also contains the drop-down menus and
    export links.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for one of the drop-down menus to choose the color of the brushes
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Each drop-down menu has a `div` element with a subclass. Inside the `div` element,
    we have some `ul` and `li` elements that define the drop-down menu. For color
    pickers, we have a circle that shows the current color. Other drop-down menus
    have the same structure. After drop-down menus, we have a link to export the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for the same is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have a function call when a user clicks on the `Export` link.
    We call the `exportToImage` function, which converts the `Canvas` element to a
    PNG image.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will explain this function better in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we have the definition of the `Canvas` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `canvas id` object is assigned with the `pStage` value and is placed inside
    a `div` element. After that, we link our two JavaScript files. The first file
    is the CreateJS library with all subsets in a combined file and the second is
    the `app.js` file as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We use CreateJS CDN servers to load the main library file. This file is already
    minified and we can use it in the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the app.js file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `app.js` file is the main JavaScript file that contains all functionality
    and logic for the painting application. This file consists of five functions;
    one of them is the main function that performs the set up of other events and
    configures and creates the stage. The next three functions are the callback functions
    for different mouse events, and the last function is used to create a PNG image
    from the `Canvas` element. But before everything else, we have the global variable''s
    declaration shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will explain more about the usage of each variable in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we have the `init` function, which is the main function for the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we get the `Canvas` element using the `getElementById` function.
    Then we set the width and height of the `Canvas` element to the window's width
    and height to fit the canvas to the page. The reason we use `-73` for the `innerHeight`
    value is to prevent vertical scrolling of the page as our header height is about
    73 pixels. After that, default options are set. You can change them with to do
    your preferred options.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to bind the `onclick` events to the drop-down menus, we have a simple
    `for` loop that iterates over the `ul` items and binds the `onclick` event to
    the links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the first line, we have a `for` loop that iterates over the drop-down items,
    and then binds an `onclick` event to each item. The same code is also used for
    other drop-down menus. Finally, we end the file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, like our previous examples, `Stage` is the object that is
    created. After that, we set the `autoClear` property to `false` in order to manage
    the `stage` object getting cleared manually. Then, we set the `touch` feature
    to `enable`.
  prefs: []
  type: TYPE_NORMAL
- en: We are developing a painting application so we need to bind callback functions
    to the `mousedown`, `mouseup`, and `mousemove` events in order to manage and control
    mouse events. In the next lines, we bind callback functions to the `stagemousedown`
    and `stagemouseup` events, which are used to handle the mouse-click events.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the painting application, we have a background layer where the user can change
    the color using the drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: In the next lines, we create a `Shape` object that is used for the background
    layer and then we create the next shape to draw the painting lines. Both of these
    shapes are added to the stage using the `addChild` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for the `mouseDownCallback` event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Inside this function, we collect the current mouse cursor's coordinates and
    also add a callback function to the `stagemousemove` event.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `mouseMoveCallback` function source code is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we calculate the next point that we need for the `moveTo`
    function using the current mouse position and the old mouse position. In the next
    line, we create a stroke with the current options and move the point to the new
    coordinates that we have calculated in the first line. After that, old positions
    are updated and finally the `update` function is called from the `stage` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our last callback function for events is the `mouseUpCallback` function. Inside
    this function, we unbind the callback function from `stagemousemove` to stop drawing,
    which is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The last function is the `exportToImage` function, which is used to get a PNG
    image exported from the `Canvas` element. In this function, we convert the `Canvas`
    element to a PNG image format with base 64 and set the output to the link''s `href`
    object. There is a function called `toDataUrl` that converts the contents from
    the `Canvas` element to an image. The `exportToImage` function is called when
    the **Export** link is clicked by a user. The following code explains the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the file, we call the `init` function to start the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Preview of the final application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the code is run, our painting application will be ready for use. The preview
    of our final application is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preview of the final application](img/0260OS_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned to create an actual web application using CreateJS
    from scratch and use the different features offered by this library. We gained
    experience on how to declare global options and change them using user inputs,
    and apply the changes in the application. Also, we learned how to export images
    from the `Canvas` element using the powerful JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we discussed how to include static files such as JavaScript and
    CSS to provide better performance while loading the application.
  prefs: []
  type: TYPE_NORMAL
- en: Every new beginning is some beginning's end and as you turn the last pages of
    this intuitive guide, you are empowered to explore, discover, develop, and build
    astounding web applications using CreateJS. In this age of the Internet citizenship,
    HTML5 has emerged as a powerful platform, where you can make your mark with compelling
    web applications. So go ahead, create the next amazing web app, and thrill the
    world!
  prefs: []
  type: TYPE_NORMAL
