["```js\n [ [' ',' ',' ',' ',' ',' ',' ',' '],\n  [' ',' ',' ',' ',' ',' ',' ',' '],\n  [' ','o',' ',' ',' ',' ',' ',' '],\n  [' ','x','o','o','o',' ',' ',' '],\n  [' ','x','x','o','x',' ',' ',' '],\n  ['o','x','x','x','o',' ',' ',' '] ]\n```", "```js\n{\n  boardId: '<id>',\n  p1Key: '<p1key>',\n  p1Name: 'express',\n  p2Key: '<p2key>',\n  p2Name: 'koa',\n  columns: 7,\n  rows: 6,\n  status: 'Game in progress',\n  winner: undefined,\n  turn: 1,\n  board: [...]\n}\n```", "```js\nvar mongoose = require('mongoose');\n\nvar gameSchema = new mongoose.Schema({\n    type: String,\n    required: true\n  },\n  p2Key: {\n    type: String,\n    required: true\n  },\n  p1Name: {\n    type: String,\n    required: true\n  },\n  p2Name: {\n    type: String\n  },\n  turn: {\n    type: Number,\n    required: true\n  },\n  boardId: {\n    type: String,\n    required: true,\n    index: {\n      unique: true\n    }\n  },\n  board: {\n    type: Array,\n    required: true\n  },\n  rows: {\n    type: Number,\n    required: true\n  },\n  columns: {\n    type: Number,\n    required: true\n  },\n  status: {\n    type: String\n  },\n  winner: {\n    type: String\n  }\n});\n\nmodule.exports = mongoose.model('Game', gameSchema);\n```", "```js\n{ name: 'player1' }\n```", "```js\nvar expect = require('chai').expect,\n    request = require('supertest');\n\nvar app = require('../src/lib/app');\ndescribe('Create new game | ', function() {\n  var boardId;\n\n  it('should return a game object with key for player 1', function(done) {\n    request(app).post('/create')\n      .send({name: 'express'})\n      .expect(200)\n      .end(function(err, res) {\n        var b = res.body;\n        expect(b.boardId).to.be.a('string');\n        expect(b.p1Key).to.be.a('string');\n        expect(b.p1Name).to.be.a('string').and.equal('express');\n        expect(b.turn).to.be.a('number').and.equal(1);\n        expect(b.rows).to.be.a('number');\n        expect(b.columns).to.be.a('number');\n\n        // Make sure the board is a 2D array\n        expect(b.board).to.be.an('array');\n        for(var i = 0; i < b.board.length; i++){\n          expect(b.board[i]).to.be.an('array');\n        }\n\n        // Store the boardId for reference\n        boardId = b.boardId;\n        done();\n      });\n  });\n})\n```", "```js\n    var Utils = require('../lib/utils');\n    var connect4 = require('../lib/connect4');\n    var Game = require('../models/game');\n\n    app.post('/create', function(req, res) {\n        if(!req.body.name) {\n          res.status(400).json({\n            \"Error\": \"Must provide name field!\"\n          });\n        }\n\n        var newGame = {\n          p1Key: Utils.randomValueHex(25),\n          p2Key: Utils.randomValueHex(25),\n          boardId: Utils.randomValueHex(6),\n          p1Name: req.body.name,\n          board: connect4.initializeBoard(req.body.rows, req.body.columns),\n          rows: req.body.rows || app.get('config').MIN_ROWS,\n          columns: req.body.columns || app.get('config').MIN_COLUMNS,\n          turn: 1,\n          status: 'Game in progress'\n        };\n\n        Game.create(newGame, function(err, game) {\n          if (err) {\n            return res.status(400).json(err);\n          }\n          game.p2Key = undefined;\n          res.status(201).json(game);\n        });\n      });\n    ```", "```js\n    var crypto = require('crypto');\n\n    module.exports = {\n      randomValueHex: function(len) {\n        return crypto.randomBytes(Math.ceil(len/2))\n            .toString('hex')\n            .slice(0,len);\n      }\n    }\n    ```", "```js\n    module.exports = {\n      MIN_ROWS: 6,\n      MIN_COLUMNS: 7\n    };\n    ```", "```js\n    var express = require('express'),\n        app = express(),\n        config = require('../../config'),\n        db = require('./db');\n\n    app.set('config', config);\n    db.connectMongoDB();\n    require('./parser')(app);\n    require('../routes/games')(app);\n\n    module.exports = app;\n    ```", "```js\n     it('should allow you to customize the size of the board', function(done) {\n        request(app).post('/create')\n          .send({\n            name: 'express',\n            columns: 8,\n            rows: 16\n          })\n          .expect(200)\n          .end(function(err, res) {\n            var b = res.body;\n            expect(b.columns).to.equal(8);\n            expect(b.rows).to.equal(16);\n            expect(b.board).to.have.length(16);\n            expect(b.board[0]).to.have.length(8);\n            done();\n          });\n      });\n    ```", "```js\n      it('should not accept sizes < ' + MIN_COLUMNS + ' for columns', function(done) {\n        request(app).post('/create')\n          .send({\n            name: 'express',\n            columns: 5,\n            rows: 16\n          })\n          .expect(400)\n          .end(function(err, res) {\n            expect(res.body.error).to.equal('Number of columns has to be >= ' + MIN_COLUMNS);\n            done();\n          });\n      });\n\n      it('should not accept sizes < ' + MIN_ROWS + ' rows', function(done) {\n        request(app).post('/create')\n          .send({\n            name: 'express',\n            columns: 8,\n            rows: -6\n          })\n          .expect(400)\n          .end(function(err, res) {\n            expect(res.body.error).to.equal('Number of rows has to be >= ' + MIN_ROWS);\n            done();\n          });\n      });\n    ```", "```js\n    // A collection of validation middleware\n\n    module.exports = function(app) {\n      var MIN_COLUMNS = app.get('config').MIN_COLUMNS,\n          MIN_ROWS = app.get('config').MIN_ROWS;\n\n      // Helper to return 400 error with a custom message\n      var _return400Error = function(res, message) {\n        return res.status(400).json({\n          error: message\n        });\n      };\n\n      return {\n        name: function(req, res, next) {\n          if(!req.body.name) {\n            return _return400Error(res, 'Must provide name field!');\n          }\n          next();\n        },\n        columns: function(req, res, next) {\n          if(req.body.columns && req.body.columns < MIN_COLUMNS) {\n            return _return400Error(res, 'Number of columns has to be >= ' + MIN_COLUMNS);\n          }\n          next();\n        },\n        rows: function(req, res, next) {\n          if(req.body.rows && req.body.rows < MIN_ROWS) {\n            return _return400Error(res, 'Number of rows has to be >= ' + MIN_ROWS);\n          }\n          next();\n        }\n      }\n    }\n    ```", "```js\n    module.exports = function(app) {\n      // Initialize Validation middleware with app to use config.js\n      var Validate = require('../lib/validators')(app);\n\n      app.post('/create', [Validate.name, Validate.columns, Validate.rows], function(req, res) {\n\n        var newGame = {\n          p1Key: Utils.randomValueHex(25),\n          p2Key: Utils.randomValueHex(25),\n          boardId: Utils.randomValueHex(6),\n          p1Name: req.body.name,\n          board: connect4.initializeBoard(req.body.rows, req.body.columns),\n          rows: req.body.rows || app.get('config').MIN_ROWS,\n          columns: req.body.columns || app.get('config').MIN_COLUMNS,\n          turn: 1,\n          status: 'Game in progress'\n        };\n        Game.create(newGame, function(err, game) {\n          if (err) return res.status(400).json(err);\n\n          game.p2Key = undefined;\n          return res.status(201).json(game);\n        });\n      });\n    }\n    ```", "```js\n  it('should be able to fetch the board', function(done) {\n    request(app).get(\"/board/\" + boardId)\n      .expect(200)\n      .end(function(err, res) {\n        var b = res.body;\n        expect(b.boardId).to.be.a('string').and.equal(boardId);\n        expect(b.turn).to.be.a('number').and.equal(1);\n        expect(b.rows).to.be.a('number');\n        expect(b.columns).to.be.a('number');\n        expect(b.board).to.be.an('array');\n        done();\n      });\n  });\n```", "```js\n app.get('/board/:id', function(req, res) {\n    Game.findOne({boardId: req.params.id}, function(err, game) {\n      if (err) return res.status(400).json(err);\n\n      res.status(200).json(_sanitizeReturn(game));\n    });\n  });\n```", "```js\n// Given a game object, return the game object without tokens\nfunction _sanitizeReturn(game) {\n  return {\n    boardId: game.boardId,\n    board: game.board,\n    rows: game.rows,\n    columns: game.columns,\n    turn: game.turn,\n    status: game.status,\n    winner: game.winner,\n    p1Name: game.p1Name,\n    p2Name: game.p2Name\n  };\n}\n```", "```js\n    { name: 'player2' }\n    ```", "```js\n          client.lpush('games', game.boardId);\n    ```", "```js\n    var redis = require('redis');\n    var url = require('url');\n\n    exports.connectRedis = function() {\n      var urlRedisToGo = process.env.REDISTOGO_URL;\n      var client = {};\n\n      if (urlRedisToGo) {\n        console.log('using redistogo');\n        rtg = url.parse(urlRedisToGo);\n        client = redis.createClient(rtg.port, rtg.hostname);\n        client.auth(rtg.auth.split(':')[1]);\n      } else {\n        console.log('using local redis');\n        // This would use the default redis config: { port 6347, host: 'localhost' }\n        client = redis.createClient();\n      }\n\n      return client;\n    };\n    ```", "```js\n    var expect = require('chai').expect,\n        request = require('supertest'),\n        redis = require('redis'),\n        client = redis.createClient();\n\n    var app = require('../src/lib/app');\n\n    describe('Create and join new game | ', function() {\n      before(function(done){\n        client.flushall(function(err, res){\n          if (err) return done(err);\n          done();\n        });\n      });\n    ```", "```js\n      it('should not be able to join a game without a name', function(done) {\n        request(app).post('/join')\n          .expect(400)\n          .end(function(err, res) {\n            expect(res.body.error).to.equal(\"Must provide name field!\");\n            done();\n          });\n      });\n\n      it('should not be able to join a game if none exists', function(done) {\n        request(app).post('/join')\n          .send({name: 'koa'})\n          .expect(418)\n          .end(function(err, res) {\n            expect(res.body.error).to.equal(\"No games to join!\");\n            done();\n          });\n      });\n    ```", "```js\n      it('should create a game and add it to the queue', function(done) {\n        request(app).post('/create')\n          .send({name: 'express'})\n          .expect(200)\n          .end(function(err, res) {\n            done();\n          });\n      });\n\n      it('should join the game on the queue', function(done) {\n        request(app).post('/join')\n          .send({name: 'koa'})\n          .expect(200)\n          .end(function(err, res) {\n            var b = res.body;\n            expect(b.boardId).to.be.a('string');\n            expect(b.p1Key).to.be.undefined;\n            expect(b.p1Name).to.be.a('string').and.equal('express');\n            expect(b.p2Key).to.be.a('string');\n            expect(b.p2Name).to.be.a('string').and.equal('koa');\n            expect(b.turn).to.be.a('number').and.equal(1);\n            expect(b.rows).to.be.a('number');\n            expect(b.columns).to.be.a('number');\n            done();\n          });\n      });\n    });\n    ```", "```js\n    app.post('/join', Validate.name, function(req, res) {\n        client.rpop('games', function(err, boardId) {\n          if (err) return res.status(418).json(err);\n\n          if (!boardId) {\n            return res.status(418).json({\n              error: 'No games to join!'\n            });\n          }\n\n          Game.findOne({ boardId: boardId }, function (err, game){\n            if (err) return res.status(400).json(err);\n\n            game.p2Name = req.body.name;\n            game.save(function(err, game) {\n              if (err) return res.status(500).json(err);\n              game.p1Key = undefined;\n              res.status(200).json(game);\n            });\n          });\n        });\n      });\n    ```", "```js\n{ column: 2 }\n```", "```js\n    var expect = require('chai').expect,\n        request = require('supertest'),\n        redis = require('redis'),\n        client = redis.createClient();\n\n    var app = require('../src/lib/app'),\n        p1Key, p2Key, boardId;\n\n    describe('Make moves | ', function() {\n      before(function(done){\n        client.flushall(function(err, res){\n          if (err) return done(err);\n          done();\n        });\n      });\n\n      it('create a game', function(done) {\n        request(app).post('/create')\n          .send({name: 'express'})\n          .expect(200)\n          .end(function(err, res) {\n            p1Key = res.body.p1Key;\n            boardId = res.body.boardId;\n            done();\n          });\n      });\n\n      it('join a game', function(done) {\n        request(app).post('/join')\n          .send({name: 'koa'})\n          .expect(200)\n          .end(function(err, res) {\n            p2Key = res.body.p2Key;\n            done();\n          });\n      });\n    ```", "```js\n      it('Cannot move without X-Player-Token', function(done) {\n        request(app).put('/board/' + boardId)\n          .send({column: 1})\n          .expect(400)\n          .end(function(err, res) {\n            expect(res.body.error).to.equal('Missing X-Player-Token!');\n            done();\n          });\n      });\n    ```", "```js\n      it('Cannot move with wrong X-Player-Token', function(done) {\n        request(app).put('/board/' + boardId)\n          .set('X-Player-Token', 'wrong token!')\n          .send({column: 1})\n          .expect(400)\n          .end(function(err, res) {\n            expect(res.body.error).to.equal('Wrong X-Player-Token!');\n            done();\n          });\n      });\n    ```", "```js\n      it('Cannot move on unknown board', function(done) {\n        request(app).put('/board/3213')\n          .set('X-Player-Token', p1Key)\n          .send({column: 1})\n          .expect(404)\n          .end(function(err, res) {\n            expect(res.body.error).to.equal('Cannot find board!');\n            done();\n          });\n      });\n    ```", "```js\n      it('Cannot move without a column', function(done) {\n        request(app).put('/board/' + boardId)\n          .set('X-Player-Token', p2Key)\n          .expect(400)\n          .end(function(err, res) {\n            expect(res.body.error).to.equal('Move where? Missing column!');\n            done();\n          });\n      });\n    ```", "```js\n      it('Cannot move outside of the board', function(done) {\n        request(app).put('/board/' + boardId)\n          .set('X-Player-Token', p1Key)\n          .send({column: 18})\n          .expect(200)\n          .end(function(err, res) {\n            expect(res.body.error).to.equal('Bad move.');\n            done();\n          });\n      });\n    ```", "```js\n      it('Player 2 should not be able to move!', function(done) {\n        request(app).put('/board/' + boardId)\n          .set('X-Player-Token', p2Key)\n          .send({column: 1})\n          .expect(400)\n          .end(function(err, res) {\n            console.log(res.body);\n            expect(res.body.error).to.equal('It is not your turn!');\n            done();\n          });\n      });\n    ```", "```js\n    it('Player 1 can move', function(done) {\n        request(app).put('/board/' + boardId)\n          .set('X-Player-Token', p1Key)\n          .send({column: 1})\n          .expect(200)\n          .end(function(err, res) {\n            var b = res.body;\n            expect(b.p1Key).to.be.undefined;\n            expect(b.p2Key).to.be.undefined;\n            expect(b.turn).to.equal(2);\n            expect(b.board[b.rows-1][0]).to.equal('x');\n            done();\n          });\n      });\n    ```", "```js\n      it('Player 1 should not be able to move!', function(done) {\n        request(app).put('/board/' + boardId)\n          .set('X-Player-Token', p1Key)\n          .send({column: 1})\n          .expect(400)\n          .end(function(err, res) {\n            expect(res.body.error).to.equal('It is not your turn!');\n            done();\n          });\n      });\n\n      it('Player 2 can move', function(done) {\n        request(app).put('/board/' + boardId)\n          .set('X-Player-Token', p2Key)\n          .send({column: 1})\n          .expect(200)\n          .end(function(err, res) {\n            var b = res.body;\n            expect(b.p1Key).to.be.undefined;\n            expect(b.p2Key).to.be.undefined;\n            expect(b.turn).to.equal(3);\n            expect(b.board[b.rows-2][0]).to.equal('o');\n            done();\n          });\n      });\n    ```", "```js\n      it('Player 1 can double-check victory', function(done) {\n        request(app).get('/board/' + boardId)\n          .set('X-Player-Token', p1Key)\n          .expect(200)\n          .end(function(err, res) {\n            var b = res.body;\n            expect(b.winner).to.equal('express');\n            expect(b.status).to.equal('Game Over.');\n            done();\n          });\n      });\n\n      it('Player 2 is a loser, to be sure', function(done) {\n        request(app).get('/board/' + boardId)\n          .set('X-Player-Token', p2Key)\n          .expect(200)\n          .end(function(err, res) {\n            var b = res.body;\n            expect(b.winner).to.equal('express');\n            expect(b.status).to.equal('Game Over.');\n            done();\n          });\n      });\n\n      it('Player 1 cannot move anymore', function(done) {\n        request(app).put('/board/' + boardId)\n          .set('X-Player-Token', p1Key)\n          .send({column: 3})\n          .expect(400)\n          .end(function(err, res) {\n            expect(res.body.error).to.equal('Game Over. Cannot move anymore!');\n            done();\n          });\n      });\n    });\n    ```", "```js\n    app.put('/board/:id', [Validate.move, Validate.token], function(req, res) {\n\n        Game.findOne({boardId: req.params.id }, function(err, game) {\n    ```", "```js\n          if (!game) {\n            return res.status(400).json({\n              error: 'Cannot find board!'\n            });\n          }\n    ```", "```js\n          if(game.status !== 'Game in progress') {\n            return res.status(400).json({\n              error: 'Game Over. Cannot move anymore!'\n            });\n          }\n    ```", "```js\n          if(req.headers['x-player-token'] !== game.p1Key && req.headers['x-player-token'] !== game.p2Key) {\n            return res.status(400).json({\n              error: 'Wrong X-Player-Token!'\n            });\n          }\n    ```", "```js\n          var currentPlayer = (game.turn % 2) === 0 ? 2 : 1;\n          var currentPlayerKey = (currentPlayer === 1) ? game.p1Key : game.p2Key;\n          if(currentPlayerKey !== req.headers['x-player-token']){\n            return res.status(400).json({\n              error: 'It is not your turn!'\n            });\n          }\n    ```", "```js\n        move: function(req, res, next) {\n          if (!req.body.column) {\n            return _return400Error(res, 'Move where? Missing column!');\n          }\n          next();\n        },\n        token: function(req, res, next) {\n          if (!req.headers['x-player-token']) {\n            return _return400Error(res, 'Missing X-Player-Token!');\n          }\n          next();\n        }\n    ```", "```js\n    var crypto = require('crypto');\n\n    module.exports = {\n      randomValueHex: function(len) {\n        return crypto.randomBytes(Math.ceil(len/2))\n            .toString('hex')\n            .slice(0,len);\n      },\n      // Helper to return 400 error with a custom message\n      return400Error: function(res, message) {\n        return res.status(400).json({\n          error: message\n        });\n      }\n    }\n    ```", "```js\n      var _return400Error = require('./utils').return400Error;\n    ```", "```js\n    app.put('/board/:id', [Validate.move, Validate.token], function(req, res) {\n\n        Game.findOne({boardId: req.params.id }, function(err, game) {\n          if (!game) {\n            return _return400Error(res, 'Cannot find board!');\n          }\n\n          if(game.status !== 'Game in progress') {\n            return _return400Error(res, 'Game Over. Cannot move anymore!');\n          }\n\n          if(req.headers['x-player-token'] !== game.p1Key && req.headers['x-player-token'] !== game.p2Key) {\n            return _return400Error(res, 'Wrong X-Player-Token!');\n          }\n\n          var currentPlayer = (game.turn % 2) === 0 ? 2 : 1;\n          var currentPlayerKey = game['p' + currentPlayer + 'Key'];\n          if(currentPlayerKey !== req.headers['x-player-token']){\n            return _return400Error(res, 'It is not your turn!');\n    ```", "```js\n    // Make a move, which returns a new board; returns false if the move is invalid\n      var newBoard = connect4.makeMove(currentPlayer, req.body.column, game.board);\n      if(newBoard){\n        game.board = newBoard;\n        game.markModified('board');\n      } else {\n        return _return400Error(res, 'Bad move.');\n      }\n```", "```js\n      // Check if you just won\n      var win = connect4.checkForVictory(currentPlayer, req.body.column, newBoard);\n      if(win) {\n        game.winner = game['p'+ currentPlayer + 'Name'];\n        game.status = 'Game Over.';\n      } else if(game.turn >= game.columns*game.rows) {\n        game.winner = 'Game ended in a tie!';\n        game.status = 'Game Over.';\n      }\n```", "```js\n      // Increment turns\n      game.turn++;\n\n      game.save(function(err, game){\n        if (err) return res.status(500).json(err);\n        return res.status(200).json(_sanitizeReturn(game));\n      });\n    });\n  });\n```", "```js\nfunction makeMoveThunk(player, column) {\n  return function(done) {\n    var token = player === 1 ? p1Key : p2Key;\n    request(app).put('/board/' + boardId)\n      .set('X-Player-Token', token)\n      .send({column: column})\n      .end(done);\n  };\n}\n```", "```js\nit('Fill the board! Tie the game!', function(done) {\n    var moves = [],\n        turn = 1,\n        nextMove = 1;\n\n    for(var r = 0; r < rows; r++) {\n      for(var c = 1; c <= columns; c++) {\n        moves.push(makeMoveThunk(turn, nextMove));\n        turn = turn === 1 ? 2 : 1;\n        nextMove = ((nextMove + 2) % columns) + 1;\n      }\n    }\n\n    async.series(moves, function(err, res) {\n      var lastResponse = res[rows*columns-1].body;\n      console.log(lastResponse);\n      expect(lastResponse.winner).to.equal('Game ended in a tie!');\n      expect(lastResponse.status).to.equal('Game Over.');\n      done();\n    });\n  });\n```"]