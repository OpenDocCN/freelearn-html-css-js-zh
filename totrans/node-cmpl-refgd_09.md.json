["```js\nhttp.createServer(function (request, response) {\n   ... handle request\n}).listen();\n```", "```js\n$ npm install socket.io@2.x passport.socketio@3.7.x --save\n```", "```js\nimport http from 'http';\nimport passportSocketIo from 'passport.socketio'; \nimport session from 'express-session';\nimport sessionFileStore from 'session-file-store';\nconst FileStore = sessionFileStore(session); \n\nexport const sessionCookieName = 'notescookie.sid';\nconst sessionSecret = 'keyboard mouse'; \nconst sessionStore = new FileStore({ path: \"sessions\" }); \n```", "```js\nconst app = express();\n\nexport default app;\n\nconst server = http.createServer(app);\nimport socketio from 'socket.io';\nconst io = socketio(server); \n\nio.use(passportSocketIo.authorize({ \n  cookieParser: cookieParser, \n  key: sessionCookieName, \n  secret: sessionSecret, \n  store: sessionStore \n})); \n```", "```js\nvar port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n```", "```js\napp.use(session({ \n  store: sessionStore, \n  secret: sessionSecret,\n  resave: true, \n  saveUninitialized: true,\n  name: sessionCookieName\n})); \ninitPassport(app);\n```", "```js\napp.use('/', index);\napp.use('/users', users); \napp.use('/notes', notes);\n\nindexSocketio(io); \n// notesSocketio(io); \n```", "```js\nimport { socketio as indexSocketio, router as index } from './routes/index';\n```", "```js\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n  if (isNaN(port)) { // named pipe\n    return val;\n  }\n  if (port >= 0) { // port number\n    return port;\n  }\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') { throw error; }\n\n  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + \n  port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n```", "```js\n  \"scripts\": { \n    \"start\": \"DEBUG=notes:* SEQUELIZE_CONNECT=models/sequelize-sqlite.yaml NOTES_MODEL=sequelize USER_SERVICE_URL=http://localhost:3333 node --experimental-modules ./app\",\n    \"start-server1\": \"DEBUG=notes:* SEQUELIZE_CONNECT=models/sequelize-sqlite.yaml NOTES_MODEL=sequelize USER_SERVICE_URL=http://localhost:3333 PORT=3000 node --experimental-modules ./app\",\n    \"start-server2\": \"DEBUG=notes:* SEQUELIZE_CONNECT=models/sequelize-sqlite.yaml NOTES_MODEL=sequelize USER_SERVICE_URL=http://localhost:3333 PORT=3002 node --experimental-modules ./app\",\n   ... \n  },\n```", "```js\nimport EventEmitter from 'events'; \nclass NotesEmitter extends EventEmitter {\n    noteCreated(note)  { this.emit('notecreated', note); }\n    noteUpdate (note)  { this.emit('noteupdate', note); }\n    noteDestroy (data) { this.emit('notedestroy', data); }\n} \n\nexport default new NotesEmitter();\n```", "```js\nimport _events from './notes-events'; \nexport const events = _events;\n```", "```js\nexport async function create(key, title, body) {\n    const note = await model().create(key, title, body);\n    _events.noteCreated(note);\n    return note;\n}\n\nexport async function update(key, title, body) {\n    const note = await model().update(key, title, body);\n    _events.noteUpdate(note);\n    return note;\n}\n\nexport async function destroy(key) {\n    await model().destroy(key);\n    _events.noteDestroy({ key });\n    return key;\n}\n```", "```js\nrouter.get('/', async (req, res, next) => {\n  try {\n    let notelist = await getKeyTitlesList();\n    res.render('index', { \n      title: 'Notes', notelist: notelist,\n      user: req.user ? req.user : undefined\n    });\n  } catch (e) { next(e); }\n});\n```", "```js\nasync function getKeyTitlesList() { \n  const keylist = await notes.keylist();\n  var keyPromises = keylist.map(key => { \n      return notes.read(key).then(note => { \n          return { key: note.key, title: note.title }; \n      }); \n  }); \n  return Promise.all(keyPromises); \n}; \n```", "```js\nexport function socketio(io) { \n  var emitNoteTitles = async () => { \n      const notelist = await getKeyTitlesList()\n      io.of('/home').emit('notetitles', { notelist }); \n  }; \n  notes.events.on('notecreated', emitNoteTitles); \n  notes.events.on('noteupdate', emitNoteTitles); \n  notes.events.on('notedestroy', emitNoteTitles); \n};\n```", "```js\n<!-- jQuery first, then Popper.js, then Bootstrap JS -->\n<script src=\"img/jquery.min.js\"></script>\n<script src=\"img/popper.min.js\"></script>\n<script src=\"img/bootstrap.min.js\"></script>\n<script src=\"img/feather.js\"></script>\n<script>\n feather.replace()\n</script>\n```", "```js\n<body>\n    {{> header }}\n    {{{body}}}\n</body>\n```", "```js\n{{> footerjs}}\n```", "```js\n{{> footerjs}}\n\n<script src=\"img/socket.io.js\"></script> \n<script> \n$(document).ready(function () { \n  var socket = io('/home'); \n  socket.on('notetitles', function(data) { \n    var notelist = data.notelist; \n    $('#notetitles').empty(); \n    for (var i = 0; i < notelist.length; i++) { \n      notedata = notelist[i]; \n      $('#notetitles') \n      .append('<a class=\"btn btn-lg btn-block btn-outline-dark\" \n      href=\"/notes/view?key='+ \n      notedata.key +'\">'+ notedata.title +'</a>'); \n    } \n  }); \n}); \n</script> \n```", "```js\n$ npm start\n\n> user-auth-server@0.0.1 start /Users/david/chap09/users\n> DEBUG=users:* PORT=3333 SEQUELIZE_CONNECT=sequelize-sqlite.yaml node --experimental-modules user-server\n\n(node:11866) ExperimentalWarning: The ESM module loader is experimental.\n users:service User-Auth-Service listening at http://127.0.0.1:3333 +0ms\n```", "```js\n$ npm start \n\n> notes@0.0.0 start /Users/david/chap09/notes \n> DEBUG=notes:* SEQUELIZE_CONNECT=models/sequelize-sqlite.yaml NOTES_MODEL=sequelize USER_SERVICE_URL=http://localhost:3333 node --experimental-modules ./app \n\n(node:11998) ExperimentalWarning: The ESM module loader is experimental. \n  notes:debug-INDEX Listening on port 3000 +0ms\n```", "```js\nexport function socketio(io) { \n    notes.events.on('noteupdate',  newnote => { \n        io.of('/view').emit('noteupdate', newnote); \n    }); \n    notes.events.on('notedestroy', data => { \n        io.of('/view').emit('notedestroy', data); \n    }); \n}; \n```", "```js\nimport { socketio as indexSocketio, router as index } from './routes/index';\nimport { router as users, initPassport } from './routes/users';\nimport { socketio as notesSocketio, router as notes } from './routes/notes'; \n```", "```js\nindexSocketio(io); \nnotesSocketio(io); \n```", "```js\n<div class=\"container-fluid\">\n    <div class=\"row\"><div class=\"col-xs-12\">\n        {{#if note}}<h3 id=\"notetitle\">{{ note.title }}</h3>{{/if}}\n        {{#if note}}<div id=\"notebody\">{{ note.body }}</div>{{/if}}\n        <p>Key: {{ notekey }}</p>\n    </div></div>\n    {{#if user }}\n    {{#if notekey }}\n        <div class=\"row\"><div class=\"col-xs-12\">\n        <div class=\"btn-group\">\n            <a class=\"btn btn-outline-dark\" \n                href=\"/notes/destroy?key={{notekey}}\" \n                role=\"button\">Delete</a>\n            <a cl e template, views/noteview.hb \n ass=\"btn btn-outline-dark\" \n                href=\"/notes/edit?key={{notekey}}\" \n                role=\"button\">Edit</a>\n        </div>\n        </div></div>\n    {{/if}}\n    {{/if}}\n</div>\n\n{{> footerjs}}\n\n{{#if notekey }}\n<script src=\"img/socket.io.js\"></script> \n<script> \n$(document).ready(function () { \n io('/view').on('noteupdate', function(note) { \n if (note.key === \"{{ notekey }}\") { \n $('h3#notetitle').empty(); \n $('h3#notetitle').text(note.title); \n $('#notebody').empty(); \n $('#notebody').text(note.body); \n } \n }); \n io('/view').on('notedestroy', function(data) { \n if (data.key === \"{{ notekey }}\") { \n window.location.href = \"/\"; \n } \n }); \n}); \n</script> \n{{/if}}\n```", "```js\nif (note.key === \"{{ notekey }}\") { \n  .. \n} \n```", "```js\nimport Sequelize from 'sequelize';\nimport jsyaml from 'js-yaml'; \nimport fs from 'fs-extra'; \nimport util from 'util'; \nimport EventEmitter from 'events'; \n\nclass MessagesEmitter extends EventEmitter {} \n\nimport DBG from 'debug';\nconst debug = DBG('notes:model-messages'); \nconst error = DBG('notes:error-messages'); \n\nvar SQMessage; \nvar sequlz; \n\nexport const emitter = new MessagesEmitter();\n```", "```js\nasync function connectDB() { \n\n    if (typeof sequlz === 'undefined') {\n        const yamltext = await \n        fs.readFile(process.env.SEQUELIZE_CONNECT, 'utf8');\n        const params = jsyaml.safeLoad(yamltext, 'utf8'); \n        sequlz = new Sequelize(params.dbname, \n                 params.username, params.password, params.params); \n    }\n\n    if (SQMessage) return SQMessage.sync(); \n\n    SQMessage = sequlz.define('Message', { \n        id: { type: Sequelize.INTEGER, autoIncrement: true, primaryKey: \n        true }, \n        from: Sequelize.STRING, \n        namespace: Sequelize.STRING, \n        message: Sequelize.STRING(1024), \n        timestamp: Sequelize.DATE \n    }); \n    return SQMessage.sync(); \n}\n```", "```js\nexport async function postMessage(from, namespace, message) { \n    const SQMessage = await connectDB();\n    const newmsg = await SQMessage.create({ \n        from, namespace, message, timestamp: new Date() \n    }); \n    var toEmit = { \n        id: newmsg.id, from: newmsg.from, \n        namespace: newmsg.namespace, message: newmsg.message, \n        timestamp: newmsg.timestamp \n    }; \n    emitter.emit('newmessage', toEmit); \n}\n```", "```js\nexport async function destroyMessage(id, namespace) { \n    const SQMessage = await connectDB();\n    const msg = await SQMessage.find({ where: { id } });\n    if (msg) {\n        msg.destroy();\n        emitter.emit('destroymessage', { id, namespace }); \n    }\n}\n```", "```js\nexport async function recentMessages(namespace) { \n    const SQMessage = await connectDB();\n    const messages = SQMessage.findAll({ \n        where: { namespace }, order: [ 'timestamp' ], limit: 20 \n    });\n    return messages.map(message => { \n        return { \n            id: message.id, from: message.from, \n            namespace: message.namespace, message: message.message, \n            timestamp: message.timestamp \n        }; \n    }); \n}\n```", "```js\nimport * as messages from '../models/messages-sequelize'; \n```", "```js\n// Save incoming message to message pool, then broadcast it \nrouter.post('/make-comment', ensureAuthenticated, async (req, res, next) => { \n    try {\n        await messages.postMessage(req.body.from, \n            req.body.namespace, req.body.message);\n        res.status(200).json({ });\n    } catch(err) {\n        res.status(500).end(err.stack); \n    }\n}); \n\n// Delete the indicated message \nrouter.post('/del-message', ensureAuthenticated, async (req, res, next) => { \n    try {\n        await messages.destroyMessage(req.body.id, req.body.namespace);\n        res.status(200).json({ });\n    } catch(err) { \n        res.status(500).end(err.stack); \n    }\n}); \n```", "```js\nmodule.exports.socketio = function(io) { \n    io.of('/view').on('connection', function(socket) {\n        // 'cb' is a function sent from the browser, to which we\n        // send the messages for the named note.\n        socket.on('getnotemessages', (namespace, cb) => {\n            messages.recentMessages(namespace).then(cb)\n            .catch(err => console.error(err.stack));\n        });\n    });\n\n    messages.emitter.on('newmessage', newmsg => {\n        io.of('/view').emit('newmessage', newmsg); \n    });\n    messages.emitter.on('destroymessage', data => {\n        io.of('/view').emit('destroymessage', data); \n    });\n .. \n}; \n```", "```js\n{{#if user}}\n{{#if notekey}}\n    <div class=\"row\"><div class=\"col-xs-12\">\n    <div class=\"btn-group\">\n        <a class=\"btn btn-outline-dark\" href=\"/notes/destroy?key=\n        {{notekey}}\" \n            role=\"button\">Delete</a>\n        <a class=\"btn btn-outline-dark\" href=\"/notes/edit?key=\n        {{notekey}}\" \n            role=\"button\">Edit</a>\n        <button type=\"button\" class=\"btn btn-outline-dark\" \n            data-toggle=\"modal\" \n            data-target=\"#notes-comment-modal\">Comment</button> \n    </div>\n    </div></div>\n\n    <div id=\"noteMessages\"></div> \n{{/if}}\n{{/if}}\n```", "```js\n{{> footerjs}}\n\n{{#if notekey}}\n{{#if user}}\n<div class=\"modal fade\" id=\"notes-comment-modal\" tabindex=\"-1\" \n      role=\"dialog\" aria-labelledby=\"noteCommentModalLabel\" aria-hidden=\"true\">\n <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n   <div class=\"modal-content\">\n     <div class=\"modal-header\">\n         <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-\n         label=\"Close\"> \n         <span aria-hidden=\"true\">&times;</span> \n         </button> \n         <h4 class=\"modal-title\" id=\"noteCommentModalLabel\">Leave a \n         Comment</h4> \n     </div>\n     <div class=\"modal-body\">\n       <form method=\"POST\" id=\"submit-comment\" class=\"well\" data-async  \n             data-target=\"#rating-modal\" action=\"/notes/make-comment\"> \n         <input type=\"hidden\" name=\"from\" value=\"{{ user.id }}\"> \n         <input type=\"hidden\" name=\"namespace\" value=\"/view-\n         {{notekey}}\"> \n         <input type=\"hidden\" name=\"key\" value=\"{{notekey}}\"> \n         <fieldset> \n           <div class=\"form-group\"> \n             <label for=\"noteCommentTextArea\"> \n             Your Excellent Thoughts, Please</label> \n             <textarea id=\"noteCommentTextArea\" name=\"message\" \n                       class=\"form-control\" rows=\"3\"></textarea> \n           </div> \n\n           <div class=\"form-group\"> \n             <div class=\"col-sm-offset-2 col-sm-10\"> \n               <button id=\"submitNewComment\" type=\"submit\" class=\"btn \n               btn-default\">\n               Make Comment</button> \n             </div> \n           </div> \n         </fieldset> \n      </form> \n   </div>\n </div>\n </div>\n</div>\n{{/if}} \n{{/if}} \n```", "```js\n{{#if notekey}}\n{{#if user}}\n<script> \n$(document).ready(function () { ... });\n{{/if}}\n{{/if}}\n```", "```js\n$(document).ready(function () { \n    io('/view').emit('getnotemessages', '/view-{{notekey}}', function(msgs) {\n        $('#noteMessages').empty();\n        if (msgs.length > 0) {\n            msgs.forEach(function(newmsg) {\n                $('#noteMessages').append(formatMessage(newmsg));\n            });\n            $('#noteMessages').show();\n            connectMsgDelButton();\n        } else $('#noteMessages').hide();\n    });\n    var connectMsgDelButton = function() {\n        $('.message-del-button').on('click', function(event) {\n            $.post('/notes/del-message', {\n                id: $(this).data(\"id\"),\n                namespace: $(this).data(\"namespace\")\n            },\n            function(response) { });\n            event.preventDefault();\n        });\n    };\n    var formatMessage = function(newmsg) {\n        return '<div id=\"note-message-'+ newmsg.id +'\" class=\"card\">'\n            +'<div class=\"card-body\">'\n            +'<h5 class=\"card-title\">'+ newmsg.from +'</h5>'\n            +'<div class=\"card-text\">'+ newmsg.message\n            +' <small style=\"display: block\">'+ newmsg.timestamp \n            +'</small></div>'\n            +' <button type=\"button\" class=\"btn btn-primary message-\n            del-button\" data-id=\"'\n            + newmsg.id +'\" data-namespace=\"'+ newmsg.namespace +'\">'\n            +'Delete</button>'\n            +'</div>'\n            +'</div>';\n    };\n    io('/view').on('newmessage', function(newmsg) {\n        if (newmsg.namespace === '/view-{{notekey}}') {\n            $('#noteMessages').prepend(formatMessage(newmsg));\n            connectMsgDelButton();\n        }\n    });\n    io('/view').on('destroymessage', function(data) {\n        if (data.namespace === '/view-{{notekey}}') {\n            $('#noteMessages #note-message-'+ data.id).remove();\n        }\n    });\n\n    $('form#submit-comment').submit(function(event) {\n        // Abort any pending request\n        if (request) { request.abort(); }\n        var $form = $('form#submit-comment');\n        var $target = $($form.attr('data-target'));\n        var request = $.ajax({\n            type: $form.attr('method'),\n            url: $form.attr('action'),\n            data: $form.serialize()\n        });\n        request.done(function (response, textStatus, jqXHR) { });\n        request.fail(function (jqXHR, textStatus, errorThrown) {\n            alert(\"ERROR \"+ jqXHR.responseText);\n        });\n        request.always(function () {\n            // Reenable the inputs\n            $('#notes-comment-modal').modal('hide');\n        });\n        event.preventDefault();\n    });\n}); \n```"]