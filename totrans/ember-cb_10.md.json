["```js\n    $ ember g component val-example\n    $ ember g component val-example2\n    $ ember install ember-cp-validations\n\n    ```", "```js\n    // app/templates/components/val-example.hbs\n    Enter Age:<br>\n    {{input value=num}}\n    <button {{action 'check'}}>Check</button><br>\n    {{error}}<br>\n    ```", "```js\n    // app/components/val-example.js\n    import Ember from 'ember';\n\n    export default Ember.Component.extend({\n        num: null,\n        actions:{\n          check(){\n            if(this.validation(this.get('num'))){\n              this.set('error','');\n            }\n            else{\n              this.set('error','Error in box!');\n            }\n\n            console.log(this.getProperties('num'));\n          }\n        },\n        validation(value){\n          return Number(parseInt(value))==value;\n        }\n\n    });\n    ```", "```js\n    // app/templates/application.hbs\n    <h2 id=\"title\">Welcome to Ember</h2>\n\n    {{outlet}}\n\n    {{val-example}}\n    ```", "```js\n    // app/templates/components/val-example2.hbs\n    Enter Age:<br>\n    {{input value=num}}<br>\n        <div style='color: red'>\n          {{message}}<br>\n        </div>\n    Enter Email:<br>\n    {{input value=email}}<br>\n        <div style='color: red'>\n          {{emailMessage}}<br>\n        </div>\n    <button {{action 'check'}}>Check</button><br>\n    ```", "```js\n    // app/components/validations.js\n    import { validator, buildValidations } from 'ember-cp-validations';\n\n    export default buildValidations({\n        num: [\n        validator('number',{\n          allowString: true,\n          integer: true,\n          message: 'Error! This is not an integer!'\n        }),\n        validator('presence', true)\n        ],\n        email: [\n          validator('format', {\n            type: 'email',\n            message: 'This is not an email address!'\n          }),\n        ],\n    });\n    ```", "```js\n    // app/components/val-example2.js\n    Import Ember from 'ember';\n    import Validations from './validations';\n\n    export default Ember.Component.extend(Validations,{\n        num: null,\n          email: null,\n          message: '',\n          emailMessage: '',\n          actions: {\n            check(){\n              this.set('message','');\n              this.set('emailMessage','');\n              this.validate().then(({model, validations})=>{\n\n                if(validations.get('isValid')){\n                  this.set('message','');\n                  this.set('emailMessage','');\n                }\n                else{\n\n                  if(model.get('validations.attrs.num.isInvalid')){\n                    this.set('message',model.get('validations.attrs.num.messages'));\n                  }\n                  if(model.get('validations.attrs.email.isInvalid')){\n                    this.set('emailMessage',model.get('validations.attrs.email.messages'));\n                  }\n                }\n\n              },(errors)=>{\n                console.log(errors);\n              });\n\n            }\n          }\n    });\n    ```", "```js\n    …\n        this.validate().then(({model, validations})=>{\n\n          if(validations.get('isValid')){\n            this.set('message','');\n            this.set('emailMessage','');\n          }\n    …\n    ```", "```js\n    …\n     else{\n\n        if(model.get('validations.attrs.num.isInvalid')){\n          this.set('message',model.get('validations.attrs.num.messages'));\n        }\n        if(model.get('validations.attrs.email.isInvalid')){\n          this.set('emailMessage',model.get('validations.attrs.email.messages'));\n    …\n    ```", "```js\n    // app/templates/application.hbs\n    <h2 id=\"title\">Welcome to Ember</h2>\n\n    {{outlet}}\n\n    {{val-example2}}\n    ```", "```js\n    $ bower install d3 –save\n    $ ember g component d3-code\n\n    ```", "```js\n    // ember-cli-build.js\n    /*jshint node:true*/\n    /* global require, module */\n    var EmberApp = require('ember-cli/lib/broccoli/ember-app');\n\n    module.exports = function(defaults) {\n        var app = new EmberApp(defaults, {\n          // Add options here\n    });\n\n    app.import('bower_components/d3/d3.js');\n    return app.toTree();\n    };\n    ```", "```js\n    <div id='holder'></div>\n    ```", "```js\n    // app/components/d3-code.js\n    import Ember from 'ember';\n\n    export default Ember.Component.extend({\n        didInsertElement() {\n\n          let svgContainer = d3.select('#holder').append('svg').attr('width',700)\n          .attr('height',700);\n\n          svgContainer.append('circle').attr('cx',250)\n          .attr('cy',250)\n          .attr('r', 100)\n          .transition()\n          .attr('cx',500)\n          .attr('cy',450)\n          .duration(2000)\n          .style('fill','red');\n\n        }\n    });\n    ```", "```js\n    // app/templates/application.hbs\n\n    {{d3-code}}\n    ```", "```js\n    $ ember install ember-websockets\n    $ ember g component w-s\n    $ ember g route ws\n\n    ```", "```js\n    // app/templates/components/w-s.hbs\n    Welcome Chat!<br><br>\n\n    Received Message: {{message}}<br>\n    <button id=\"sendButtonPressed\" {{action \"sendButtonPressed\"}}>Press Me</button>\n    ```", "```js\n    // app/components/w-s.js\n    import Ember from 'ember';\n\n    export default Ember.Component.extend({\n        websockets: Ember.inject.service(),\n        socket: null,\n        init() {\n          this._super();\n          let socket = this.get('websockets').socketFor('ws://localhost:7000/');\n          this.set('socket',socket);\n          socket.on('open', this.myOpenHandler, this);\n          socket.on('message', this.myMessageHandler, this);\n          socket.on('close', (event)=> {\n            console.log('closed');\n          }, this);\n        },\n        message: '',\n\n        myOpenHandler(event) {\n          console.log('On open event has been called: ' + event);\n        },\n\n        myMessageHandler(event) {\n          console.log('Message: ' + event.data);\n          this.set('message',event.data);\n        },\n\n        actions: {\n          sendButtonPressed() {\n            this.get('socket').send('Hello Websocket World');\n          }\n        }\n    });\n    ```", "```js\n    …\n        init() {\n          this._super();\n          let socket = this.get('websockets').socketFor('ws://localhost:7000/');\n          this.set('socket',socket);\n          socket.on('open', this.myOpenHandler, this);\n          socket.on('message', this.myMessageHandler, this);\n          socket.on('close', (event)=> {\n            console.log('closed');\n          },this);\n        },\n    …\n    ```", "```js\n    …\n        message: '',\n\n        myOpenHandler(event) {\n          console.log('On open event has been called: ' + event);\n        },\n    …\n    ```", "```js\n    …\n        myMessageHandler(event) {\n          console.log('Message: ' + event.data);\n          this.set('message',event.data);\n        },\n    …\n    ```", "```js\n    …\n        socket.on('close', (event)=> {\n          console.log('closed');\n        }, this);\n    ..\n    ```", "```js\n    …\n        actions: {\n          sendButtonPressed() {\n            this.get('socket').send('Hello Websocket World');\n          }\n        }\n    …\n    ```", "```js\n    // app/templates/ws.hbs\n    {{w-s}}\n    ```", "```js\n    $ npm init\n\n    ```", "```js\n    $ npm install ws –save\n\n    ```", "```js\n    // server.js\n    var WebSocketServer = require('ws').Server;\n    var ws = new WebSocketServer({port: 7000});\n\n    ws.on('connection', function connection(ws) {\n    ws.on('message', function incoming(message) {\n        console.log('received: %s', message);\n        ws.send('Hey! Welcome to my websocket challenge!');\n    });\n\n    });\n    ```", "```js\n    $ node ./server.js\n\n    ```", "```js\n    $ ember install emberfire\n    $ ember install torii\n    $ ember install ember-bootstrap\n    $ ember install ember-cli-showdown\n    $ ember g route new\n    $ ember g route posts\n    $ ember g route application\n    $ ember g controller new\n    $ ember g controller posts\n    $ ember g model post title:string body:string author:string titleURL:string\n    $ ember g template index\n    $ ember g util clean\n\n    ```", "```js\n    // app/adapters/application.js\n    import Ember from 'ember';\n    import FirebaseAdapter from 'emberfire/adapters/firebase';\n\n    const { inject } = Ember;\n\n    export default FirebaseAdapter.extend({\n      firebase: inject.service(),\n    });\n    ```", "```js\n    // config/environment.js\n    …\n        firebase: 'https://testemberfire.firebaseio.com/',\n        torii: {\n          sessionServiceName: 'session'\n        },\n    …\n    ```", "```js\n    // app/tori-adapters/application.js\n    import Ember from 'ember';\n    import ToriiFirebaseAdapter from 'emberfire/torii-adapters/firebase';\n    export default ToriiFirebaseAdapter.extend({\n        firebase: Ember.inject.service()\n    });\n    ```", "```js\n    // app/utils/clean.js\n    export default function clean(title) {\n        title = title.replace(/ /g, '_');\n        return title.replace(/[^a-zA-Z0-9-_]/g, '');\n    }\n    ```", "```js\n    // app/models/post.js\n    import DS from 'ember-data';\n\n    export default DS.Model.extend({\n        title: DS.attr('string'),\n        body: DS.attr('string'),\n        author: DS.attr('string'),\n        titleURL: DS.attr('string')\n\n    });\n    ```", "```js\n    // app/router.js\n    import Ember from 'ember';\n    import config from './config/environment';\n\n    const Router = Ember.Router.extend({\n        location: config.locationType\n    });\n\n    Router.map(function() {\n        this.route('posts', {path: '/:titleURL'}, function() {\n    });\n        this.route('new');\n    });\n\n    export default Router;\n    ```", "```js\n    // app/routes/posts.js\n    import Ember from 'ember';\n\n    export default Ember.Route.extend({\n        model(param) {\n          return this.store.query('post', {\n            orderBy: 'titleURL',\n          equalTo: param.titleURL });\n        }\n    });\n    ```", "```js\n    // app/routes/application.js\n    import Ember from 'ember';\n\n    export default Ember.Route.extend({\n        model(){\n          return this.store.findAll('post');\n        },\n        actions:{\n          login(){\n            this.get('session').open('firebase', { provider: 'twitter'}).then((data)=> {\n            });\n          },\n          logout(){\n            this.get('session').close();\n          }\n        }\n    });\n    ```", "```js\n    //app/templates/application.hbs\n    <nav class=\"navbar navbar-inverse navbar-fixed-top\">\n        <div class=\"container-fluid\">\n        <div class=\"navbar-header\" href=\"#\">\n        {{#link-to 'index' class='navbar-brand'}}My New Blog{{/link-to}}\n        </div>\n        <ul class=\"nav navbar-nav\">\n        {{#if session.isAuthenticated}}\n        <li>{{#link-to 'new'}}Add New Post{{/link-to}}</li>\n        {{/if}}\n        </ul>\n        <ul class=\"nav navbar-nav navbar-right\">\n        {{#unless session.isAuthenticated}}\n        <li><a href=\"#\" {{action 'login' }}>Login</a></li>\n        {{else}}\n        <li><a href=\"#\" {{action 'logout' }}>Logout</a></li>\n        {{/unless}}\n        </ul>\n        </div>\n    </nav>\n    <br>\n    <br>\n    <br>\n    {{outlet}}\n    ```", "```js\n    // app/templates/index.hbs\n\n    <div class = 'row'>\n        <div class='col-md-4'>\n          <h1>Posts</h1>\n            {{#each model as |post|}}\n              <br>{{#link-to 'posts' post.titleURL}}{{post.title}}{{/link-to}}\n            {{/each}}\n        </div>\n\n    </div>\n    ```", "```js\n    // app/templates/new.hbs\n    <br><br>\n    <div class='col-md-4 border' >\n        <h1>New Post</h1>\n        <form {{action 'save' on=\"submit\"}}>\n          <dl>\n            <dt>Title:<br> {{textarea value=title cols=\"40\" |rows=\"1\" placeholder='Title'}}</dt>\n            <dt>Body:<br> {{textarea value=body cols=\"40\" rows=\"6\" placeholder='Body'}}</dt>\n          </dl>\n          <button type='submit' class='btn btn-primary'>Add</button>\n        </form>\n    </div>\n    <div class='col-md-4 border'  >\n        <h1>Preview</h1>\n        <h3>{{title}}</h3>\n        <h4>{{markdown-to-html markdown=body}}</h4>\n    </div>\n    ```", "```js\n    // app/templates/posts.js\n    {{#each model as |model|}}\n    <div class='row'>\n        {{#if isEditing}}\n          <div class='col-md-4 border'>\n            <form {{action 'save' on='submit'}}>\n              <dl>\n                <dt>Title:<br> {{textarea value=model.title cols='40' rows='1'}}</dt>\n                <dt>Body:<br> {{textarea value=model.body cols='40' rows='6'}}</dt>\n              </dl>\n          <div class = 'row'>\n            <button type='submit' class = 'btn btn-primary'>Done</button>\n          </div>\n            </form>\n          </div>\n        {{/if}}\n        <div class='col-md-4 border'>\n          <h1>{{model.title}}</h1>\n          <h3>{{markdown-to-html markdown=model.body}}</h3>\n          <h4>-{{model.author}}</h4>\n          {{#if session.isAuthenticated}}\n            <form {{action 'edit' }}>\n            <button type='submit' class='btn btn-primary'>Edit</button>\n                <button type='delete' class= 'btn btn-primary' {{action 'delete'}}>Delete</button>\n            </form>\n          {{/if}}\n        </div>\n    </div>\n    {{/each}}\n    ```", "```js\n    // app/controllers/new.js\n    import Ember from 'ember';\n    import cleanURI from '../utils/clean';\n\n    export default Ember.Controller.extend({\n        actions: {\n          save(){\n\n            const titleURL= cleanURI(this.get('title'));\n            const post = this.store.createRecord('post',{\n            title: this.get('title'),\n            body: this.get('body'),\n            author: 'test',\n            titleURL: titleURL\n            });\n            post.save();\n            this.set('title','');\n            this.set('body','');\n            this.transitionToRoute('index');\n          }\n        }\n    });\n    ```", "```js\n    // app/controllers/posts.js\n    import Ember from 'ember';\n    import cleanURI from '../utils/clean';\n\n    export default Ember.Controller.extend({\n        actions: {\n          edit(){\n            this.set('isEditing', true);\n          },\n          delete(){\n            this.get('model').forEach(model=>{\n              model.deleteRecord();\n            });\n            this.get('model').save();\n            this.set('isEditing', false);\n            this.transitionToRoute('index');\n          },\n          save(){\n            this.get('model').forEach(model=>{\n              const titleURL = cleanURI(model.get('title'));\n              model.set('titleURL', titleURL);\n              model.save();\n            });\n            this.set('isEditing',false);\n            this.transitionToRoute('index');\n          }\n        }\n    });\n    ```", "```js\n    …\n        edit(){\n          this.set('isEditing',true);\n        },\n    …\n    ```", "```js\n    …\n        delete(){\n          this.get('model').forEach(model=>{\n            model.deleteRecord();\n          });\n          this.get('model').save();\n          this.set('isEditing',false);\n          this.transitionToRoute('index');\n        },\n    …\n    ```", "```js\n    …\n        save(){\n          this.get('model').forEach(model=>{\n            const titleURL = cleanURI(model.get('title'));\n            model.set('titleURL',titleURL);\n            model.save();\n          });\n          this.set('isEditing',false);\n          this.transitionToRoute('index');\n        }\n    …\n    ```", "```js\n    $ ember install ember-cli-fastboot\n    $ rm –rf bower_components\n    $ bower install --save ember#canary\n\n    ```", "```js\n    $ ember build –prod\n\n    ```", "```js\n    $ ember fastboot --serve-assets --port 4200 --environment production\n\n    ```"]