["```js\nlet a = 0b00001111;\nlet b = 15;\nconsole.log(a === b);\nconsole.log(a);\n```", "```js\ntrue\n15\n```", "```js\nconst a = 017;\nconst b = 15;\nconsole.log(a === b);\nconsole.log(a);\n```", "```js\ntrue\n15\n```", "```js\nconst a = 0017;\nconst b = 15;\nconsole.log(a === b);\nconsole.log(a);\n```", "```js\ntrue\n15\n```", "```js\nlet a = 17.0;\nlet b = 1.2;\nconsole.log(Number.isInteger(a));\nconsole.log(Number.isInteger(b));\n```", "```js\ntrue\nfalse\n```", "```js\nlet a = \"NaN\";\nlet b = NaN;\nlet c = \"hello\";\nlet d = 12;\nconsole.log(Number.isNaN(a)); // false\nconsole.log(Number.isNaN(b)); // true\nconsole.log(Number.isNaN(c)); // false\nconsole.log(Number.isNaN(d)); // false\n```", "```js\nisNaN(' '); // false => because Number(' ') is equal to 0 (a number)\nisNaN(true); // false => because Number(true) is equal to 1 (a number)\n```", "```js\nconsole.log(isFinite(10)); // true \nconsole.log(isFinite(NaN)); // false\nconsole.log(isFinite(null)); // true\nconsole.log(isFinite([])); // true\nconsole.log(Number.isFinite(10)); // true\nconsole.log(Number.isFinite(NaN)); // false\nconsole.log(Number.isFinite(null)); // false\nconsole.log(Number.isFinite([])); // false\n```", "```js\nconsole.log(Number.isSafeInteger(156));\nconsole.log(Number.isSafeInteger('1212'));\nconsole.log(Number.isSafeInteger(Number.MAX_SAFE_INTEGER));\nconsole.log(Number.isSafeInteger(Number.MAX_SAFE_INTEGER + 1));\nconsole.log(Number.isSafeInteger(Number.MIN_SAFE_INTEGER));\nconsole.log(Number.isSafeInteger(Number.MIN_SAFE_INTEGER - 1));\n```", "```js\ntrue\nfalse\ntrue\nfalse\ntrue\nfalse\n```", "```js\nconsole.log(0.1 + 0.2 == 0.3);\nconsole.log(0.9 - 0.8 == 0.1);\nconsole.log(0.1 + 0.2);\nconsole.log(0.9 - 0.8);\n```", "```js\nfalse\nfalse\n0.30000000000000004\n0.09999999999999998\n```", "```js\nfunction epsilonEqual(a, b) {\n  return Math.abs(a - b) < Number.EPSILON;\n}\nconsole.log(epsilonEqual(0.1 + 0.2, 0.3));\nconsole.log(epsilonEqual(0.9 - 0.8, 0.1));\n```", "```js\ntrue\ntrue\n```", "```js\nconsole.log(Math.sinh(0)); //hyberbolic sine of a value\nconsole.log(Math.cosh(0)); //hyberbolic cosine of a value\nconsole.log(Math.tanh(0)); //hyberbolic tangent of a value\nconsole.log(Math.asinh(0)); //inverse hyperbolic sine of a value\nconsole.log(Math.acosh(1)); //inverse hyperbolic cosine of a value\nconsole.log(Math.atanh(0)); //inverse hyperbolic tangent of a value\nconsole.log(Math.hypot(2, 2, 1));//Pythagoras theorem\n```", "```js\n0\n1\n0\n0\n0\n0\n3\n```", "```js\nconsole.log(Math.log2(16)); //log base 2\nconsole.log(Math.log10(1000)); //log base 10\nconsole.log(Math.log1p(0)); //same as log(1 + value)\nconsole.log(Math.expm1(0)); //inverse of Math.log1p()\nconsole.log(Math.cbrt(8)); //cube root of a value\n```", "```js\n4\n3\n0\n0\n2\n```", "```js\nconst a = 5**5;\nconst b = Math.pow(5, 5);\nconsole.log(a);\nconsole.log(a == b);\n```", "```js\n3125\ntrue\n```", "```js\nconsole.log(Math.imul(590, 5000000)); //32-bit integer multiplication\nconsole.log(590 * 5000000); //64-bit floating-point multiplication\n```", "```js\n-1344967296\n2950000000\n```", "```js\nconsole.log(Math.clz32(7));\nconsole.log(Math.clz32(1000));\nconsole.log(Math.clz32(295000000));\n```", "```js\n29\n22\n3\n```", "```js\nconsole.log(Math.sign(11));\nconsole.log(Math.sign(-11));\nconsole.log(Math.sign(0));\n```", "```js\n1\n-1\n0\n```", "```js\nconsole.log(Math.trunc(11.17));\nconsole.log(Math.trunc(-1.112));\n```", "```js\n11\n-1\n```", "```js\nconsole.log(Math.fround(0));\nconsole.log(Math.fround(1));\nconsole.log(Math.fround(1.137));\nconsole.log(Math.fround(1.5));\n```", "```js\n0\n1\n1.1369999647140503\n1.5\n```", "```js\nconst \\u0061 = \"\\u0061\\u0062\\u0063\";\nconsole.log(a); //Output is \"abc\"\n```", "```js\nconsole.log(\"a\".repeat(6)); //Output \"aaaaaa\"\n```", "```js\nconst str = \"Hi, I am a JS Developer\";\nconsole.log(str.includes(\"JS\")); //Output \"true\"\n```", "```js\nconst str = \"Hi, I am a JS Developer\";\nconsole.log(str.includes(\"JS\", 13)); // Output \"false\"\n```", "```js\nconst str = \"Hi, I am a JS Developer\";\nconsole.log(str.startsWith('Hi, I am')); //Output \"true\"\n```", "```js\nconst str = \"Hi, I am a JS Developer\";\nconsole.log(str.startsWith('JS Developer', 11)); //Output \"true\"\n```", "```js\nconst str = \"Hi, I am a JS Developer\";\nconsole.log(str.endsWith(\"JS Developer\")); //Output \"true\"\nconsole.log(str.endsWith(\"JS\", 13)); //Output \"true\"\n```", "```js\nconst string = \"this is an interesting book and this book is quite good as well.\";\nconsole.log(string.indexOf(\"this\"))\nThe output for the preceding code is: \n0\n```", "```js\nconst string = \"this is a sentence.\";\nconsole.log(string.startsWith(\"this\")); // true => starts with \"this\"\nconsole.log(string.indexOf(\"this\") == 0); // true => starts with \"this\"\n```", "```js\nconst string = \"this is an interesting book and \n this book is quite good as well.\";\nconsole.log(string.lastIndexOf(\"this\"))\n```", "```js\n32\n```", "```js\nconst string = \"this is an interesting book and \n                this book is quite good as well\";\nconsole.log(string.endsWith(\"well\")); // true\nconsole.log(string.lastIndexOf(\"well\") + \"well\".length == string.length); // true\n```", "```js\n'normal'.padStart(7);\n'1'.padStart(3, '0');\n'My Awesome String'.padStart(20, '*');\n''.padStart(10, '*');\n'Hey!'.padStart(13, 'But this is long');\n```", "```js\n\" normal\"\n\"001\"\n\"****My Awesome String\"\n\"**********\"\n\"But this Hey!\"\n```", "```js\nfor(let i=1;i<=100;i++) {\n   console.log(`Test case ${(i+\"\").padStart(3, \"0\")}`);\n}\n```", "```js\nTest case 001\nTest case 002\nTest case 003\n....\n...\nTest case 010\nTest case 011\n...\n..\nTest case 100\n```", "```js\n'normal'.padEnd(7);\n'1'.padEnd(3, '0');\n'My Awesome String'.padEnd(20, '*');\n''.padEnd(10, '*');\n'Hey!'.padEnd(13, 'But this is long');\n```", "```js\n\"normal \"\n\"100\"\n\"My Awesome String***\"\n\"**********\"\n\"Hey!But this \"\n```", "```js\nlet str1 = `hello!!!`; //template string\nlet str2 = \"hello!!!\";\nconsole.log(str1 === str2); //output \"true\"\n```", "```js\nvar a = 20;\nvar b = 10;\nvar c = \"JavaScript\";\nvar str = \"My age is \" + (a + b) + \" and I love \" + c;\nconsole.log(str);\n```", "```js\nMy age is 30 and I love JavaScript\n```", "```js\nconst a = 20;\nconst b = 10;\nconst c = \"JavaScript\";\nconst str = `My age is ${a+b} and I love ${c}`;\nconsole.log(str);\n```", "```js\nMy age is 30 and I love JavaScript\n```", "```js\nconst tag = function(strings, aPLUSb, aSTARb) {\n  // strings is: ['a+b equals', 'and a*b equals']\n  // aPLUSb is: 30\n  // aSTARb is: 200\n  return 'SURPRISE!';\n};\n\nconst a = 20;\nconst b = 10;\n\nlet str = tag `a+b equals ${a+b} and a*b equals ${a*b}`;\nconsole.log(str);\n```", "```js\nSURPRISE!\n```", "```js\nconst tag = function(strings, aPLUSb, aSTARb) {\n  // strings is: ['a+b equals', 'and a*b equals']\n  // aPLUSb is: 30\n  // aSTARb is: 200\n  aPLUSb = 200;\n  aSTARb = 30;\n  return `a+b equals ${aPLUSb} and a*b equals ${aSTARb}`;\n};\n\nconst a = 20;\nconst b = 10;\n>\nlet str = tag `a+b equals ${a+b} and a*b equals ${a*b}`;\nconsole.log(str);\n```", "```js\na+b equals 200 and a*b equals 30\n```", "```js\nconsole.log(\"1\\n2\\n3\");\n```", "```js\n1\n2\n3\n```", "```js\nconsole.log(`1\n2\n3`);\n```", "```js\n1\n2\n3\n```", "```js\nlet s = String.raw `xy\\n${ 1 + 1 }z`;\nconsole.log(s);\n```", "```js\n xy\\n2z\n```", "```js\nlet tag = function(strings, ...values) {\n  return strings.raw[0]\n};\nlet str = tag `Hello \\n World!!!`;\nconsole.log(str);\n```", "```js\nHello \\n World!!!\n```", "```js\nlet str = \"0123\";\nlet arr = Array.from(str, value => parseInt(value) * 5);\nconsole.log(arr);\n```", "```js\n [0, 5, 10, 15].\n```", "```js\nconst arr = document.querySelectorAll('div');\n/* arr.forEach( item => console.log(item.tagName) ) */ // => wrong\nArray.from(arr).forEach( item => console.log(item.tagName) ); \n// correct\n```", "```js\nlet arr1 = Array(2);\nlet arr2 = Array.of(2);\nconsole.log(arr1);\nconsole.log(arr2);\n```", "```js\n[undefined, undefined]\n[2]\n```", "```js\nlet arr1 = [1, 2, 3, 4];\nlet arr2 = [1, 2, 3, 4];\nlet arr3 = [1, 2, 3, 4];\nlet arr4 = [1, 2, 3, 4];\nlet arr5 = [1, 2, 3, 4];\narr1.fill(5);\narr2.fill(5, 1, 2);\narr3.fill(5, 1, 3);\narr4.fill(5, -3, 2);\narr5.fill(5, 0, -2);\nconsole.log(arr1);\nconsole.log(arr2);\nconsole.log(arr3);\nconsole.log(arr4);\nconsole.log(arr5);\n```", "```js\n[5,5,5,5]\n[1,5,3,4]\n[1,5,5,4]\n[1,5,3,4]\n[5,5,3,4]\n```", "```js\nconst arr = [0, 1, 1, 2, 3, 5, 8, 13];\narr.includes(0); // true\narr.includes(13); // true\narr.includes(21); // false\n```", "```js\nconst arr = ['apple', 'mango', 'banana'];\nconsole.log(arr.indexOf('apple')); // 0\nconsole.log(arr.indexOf('mango')); // 1\nconsole.log(arr.indexOf('apple') >= 0); // true => apple exists\nconsole.log(arr.includes('apple')); // true => apple exists\nconsole.log(arr.indexOf('pineapple') >= 0); // false => pineapple  \n                                            // doesn't exists\nconsole.log(arr.includes('pineapple')); // false => pineapple doesn't \n                                        //exists\n```", "```js\nconst arr = ['Some elements I like', NaN, 1337, true, false, 0017];\nconsole.log(arr.includes(NaN)); // true\nconsole.log(arr.indexOf(NaN) >= 0); // false => indexOf says there is \n                                    //no NaN element in array\n```", "```js\nconst x = 12;\nconst arr = [11, 12, 13];\nconst result = arr.find( (value, index, array) => value == x )\nconsole.log(result); //Output \"12\"\n```", "```js\nconst x = 12;\nconst arr = [11, 12, 13];\nconst result = arr.findIndex( (value, index, array) => value == x );\nconsole.log(result); \n```", "```js\nconst arr1 = [1, 2, 3, 4, 5];\nconst arr2 = [1, 2, 3, 4, 5];\nconst arr3 = [1, 2, 3, 4, 5];\nconst arr4 = [1, 2, 3, 4, 5];\narr1.copyWithin(1, 2, 4);\narr2.copyWithin(0, 1);\narr3.copyWithin(1, -2);\narr4.copyWithin(1, -2, -1);\nconsole.log(arr1);\nconsole.log(arr2);\nconsole.log(arr3);\nconsole.log(arr4);\n```", "```js\n[1,3,4,4,5]\n[2,3,4,5,5]\n[1,4,5,4,5]\n[1,4,3,4,5]\n```", "```js\nconst arr = ['a', 'b', 'c'];\nconst entries = arr.entries();\nconst keys = arr.keys();\nconst values = arr.values();\nconsole.log(...entries);\nconsole.log(...keys);\nconsole.log(...values);\n```", "```js\n0,a 1,b 2,c\n0 1 2\na b c\n```", "```js\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst squaredNums = arr.map( num => num**2 );\nconsole.log(squaredNums);\n```", "```js\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```", "```js\nconst arr = ['Mike', 'John', 'Mehul', 'Rahul', 'Akshay', 'Deep','Om', 'Ryan'];\nconst namesWithOnly4Letters = arr.filter( name => name.length == 4 );\nconsole.log(namesWithOnly4Letters);\n```", "```js\n[\"Mike\", \"John\", \"Deep\", \"Ryan\"]\n```", "```js\nconst arr = [1, 2, 3, 4];\narr.forEach( (value, index) => console.log(`arr[${index}] = ${value}`) );\n```", "```js\narr[0] = 1\narr[1] = 2\narr[2] = 3\narr[3] = 4\n```", "```js\nconst arr = [1, 3, 5, 7, 9, 10, 11];\nconst isAnyElementEven = arr.some( elem => { \n   console.log('Checking '+elem); \n   return elem % 2 == 0\n});\nconsole.log(isAnyElementEven); // true\n```", "```js\nChecking 1\nChecking 3\nChecking 5\nChecking 7\nChecking 9\nChecking 10\ntrue\n```", "```js\nconst buffer = new ArrayBuffer(80); //80 bytes size\n```", "```js\nconst buffer = new ArrayBuffer(80);\nconst view = new DataView(buffer);\nview.setInt32(8,22,false);\nconst number = view.getInt32(8,false);\nconsole.log(number); //Output \"22\"\n```", "```js\nconst buffer = new ArrayBuffer(80);\nconst typed_array = new Float64Array(buffer);\ntyped_array[4] = 11;\nconsole.log(typed_array.length);\nconsole.log(typed_array[4]);\n```", "```js\n10\n11\n```", "```js\nconst set1 = new Set();\nconst set2 = new Set(\"Hello!!!\");\n```", "```js\nlet set = new Set(\"Hello!!!\");\nset.add(12); //add 12\nconsole.log(set.has(\"!\")); //check if value exists\nconsole.log(set.size);\nset.delete(12); //delete 12\nconsole.log(...set);\nset.clear(); //delete all values\n```", "```js\ntrue\n6\nH e l o !\n```", "```js\nlet weakset = new WeakSet();\n(function(){ \n   let a = {}; \n   weakset.add(a);\n})();  //here 'a' is garbage collected from weakset\nconsole.log(weakset.size); //output \"undefined\"\nconsole.log(...weakset); //Exception is thrown\nweakset.clear(); //Exception, no such function\n```", "```js\nlet map = new Map();\nlet o = {n: 1};\nmap.set(o, \"A\"); //add\nmap.set(\"2\", 9);\nconsole.log(map.has(\"2\")); //check if key exists\nconsole.log(map.get(o)); //retrieve value associated with key\nconsole.log(...map);\nmap.delete(\"2\"); //delete key and associated value\nmap.clear(); //delete everything\n//create a map from iterable object\nlet map_1 = new Map([[1, 2], [4, 5]]);\nconsole.log(map_1.size); //number of keys\n```", "```js\ntrue\nA\n[object Object],A 2,9\n2\n```", "```js\nlet weakmap = new WeakMap();\n\n(function(){ \n  let o = {n: 1}; \n  weakmap.set(o, \"A\");\n})();  // here 'o' key is garbage collected\n\nlet s = {m: 1};\nweakmap.set(s, \"B\");\nconsole.log(weakmap.get(s));\nconsole.log(...weakmap); // exception thrown\nweakmap.delete(s);\nweakmap.clear(); // Exception, no such function\nlet weakmap_1 = new WeakMap([[{}, 2], [{}, 5]]); //this works\nconsole.log(weakmap_1.size); //undefined\n```", "```js\nconst obj = {\n    book: \"Learning ES2017 (ES8)\",\n    author: \"Mehul Mohan\",\n    publisher: \"Packt\",\n    useful: true\n};\nconsole.log(Object.values(obj));\n```", "```js\n[\"Learning ES2017 (ES8)\", \"Mehul Mohan\", \"Packt\", true]\n```", "```js\nconst obj = {\n    book: \"Learning ES2017 (ES8)\",\n    author: \"Mehul Mohan\",\n    publisher: \"Packt\",\n    useful: true\n};\nconsole.log(Object.entries(obj));\n```", "```js\n[[\"book\",\"Learning ES2017 (ES8)\"],[\"author\",\"Mehul Mohan\"],[\"publisher\",\"Packt\"],[\"useful\",true]]\n```", "```js\n//In ES5\nvar x = {prop1: 12};\nvar y = Object.create(x, {prop2: {value: 13}});\nconsole.log(y.prop1); //Output \"12\"\nconsole.log(y.prop2); //Output \"13\"\nconsole.log(x); // Output: {prop1: 12}\nconsole.log(y); // Output: {prop2: 13}\n\n//In ES6 onwards\nlet a = {prop1: 12, __proto__: {prop2: 13}};\nconsole.log(a.prop1); //Output \"12\"\nconsole.log(a.prop2); //Output \"13\"\nconsole.log(a); // Output: {prop1: 12}\nconsole.log(a.__proto__); // Output: {prop2: 13}\n```", "```js\nconsole.log(Object.is(0, -0));\nconsole.log(0 === -0);\nconsole.log(Object.is(NaN, 0/0));\nconsole.log(NaN === 0/0);\nconsole.log(Object.is(NaN, NaN));\nconsole.log(NaN ===NaN);\n```", "```js\nfalse\ntrue\ntrue\nfalse\ntrue\nfalse\n```", "```js\nlet x = {x: 12};\nlet y = {y: 13};\nObject.setPrototypeOf(y, x);\nconsole.log(y.x); //Output \"12\"\nconsole.log(y.y); //Output \"13\"\n```", "```js\nlet x = {x: 12};\nlet y = {y: 13, __proto__: x};\nlet z = {z: 14, get b() {return 2;}, q: {}};\nObject.defineProperty(z, \"z\", {enumerable: false});\nlet m = {};\nObject.assign(m, y, z);\nconsole.log(m.y);\nconsole.log(m.z);\nconsole.log(m.b);\nconsole.log(m.x);\nconsole.log(m.q == z.q);\n```", "```js\n13\nundefined\n2\nundefined\ntrue\n```", "```js\nconst details = { \n  get food1() { return 'tasty'; },\n  get food2() { return 'bad'; }\n};\nObject.getOwnPropertyDescriptors(details);\n```", "```js\n{\n food1: {\n configurable: true,\n enumerable: true,\n get: function food1(){}, //the getter function\n set: undefined\n },\n food2: {\n configurable: true,\n enumerable: true,\n get: function food2(){}, //the getter function\n set: undefined\n }\n}\n```", "```js\nconst x = { foo: 1, __proto__: { bar: 2 } };\nconst y = Object.create( \n  Object.getPrototypeOf(x), \n  Object.getOwnPropertyDescriptors(x) \n);\nconsole.log(y.__proto__); // { bar: 2 }\n```"]