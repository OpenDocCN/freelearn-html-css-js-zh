- en: Chapter 3. Adding Vector Layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding markers to maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding popups to markers or maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding lines to maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding polygons to maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding circles/rectangles to maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding animated lines to maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the KML/GeoRSS layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding GeoJSON to the Google Maps JavaScript API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding WKT to the Google Maps JavaScript API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about vector layers, which are completely different from raster
    layers. This chapter gives you the most common and important recipes that you
    may need while working with the Google Maps JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the GIS world, both the vector and raster layers are used in different cases.
    Vectors are used for representing the Earth''s features in most cases. For example,
    **Points of Interest** (**POI**), such as coffee shops or restaurants, are shown
    with points; rivers or roads are shown with polylines; and parks or buildings
    are shown with polygons. As it is seen here, there are three different vector
    types: point, polyline, and polygon. Remember that all vectors consist of points,
    which are the building blocks of vectors.'
  prefs: []
  type: TYPE_NORMAL
- en: In the Google Maps JavaScript API, all types of vectors are called **overlays**.
    In addition to vectors, popups and symbols are also included in overlays. All
    the recipes related to them are included in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Maps are mostly used for visualization, so static maps are not enough in some
    cases. Some animations added to polylines make a difference. For example, showing
    the flow direction with rivers is remarkable for scientists. The Google Maps JavaScript
    API also supports animated polylines, which is one of the recipes in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API is a great API with support for KML and GeoRSS,
    but some of the industry de facto standards are not supported out of the box,
    such as GeoJSON and WKT. GeoJSON and WKT are the most used vector publishing formats
    in the industry, especially in open source libraries. These formats will be supported
    by additional libraries, which are also included in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start to explore the recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Adding markers to maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maps are used for many cases in websites, but the most used one shows the location
    of a company or business. The location of a company or business can be called
    a POI in the LBS or GIS sector and this is a point type of the vector layer. In
    the Google Maps JavaScript API, POIs or points are shown as **markers**.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to add markers to maps using the `google.maps.LatLng`
    and `google.maps.Marker` classes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Chapter 1, Google Maps JavaScript API Basics, you learned how to create a
    map. So, only the additional code lines that will add markers are covered in this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code at `Chapter 3/ch03_adding_markers.html.`
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps we need to add both standard and icon markers to
    maps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the minimum and maximum values of latitudes and longitudes of **bounding
    box** (**BBOX**) to limit our random markers'' area. This bounding box almost
    defines the area that **Turkey** covers. Also `markerId` is defined to name the
    random markers. All variables must be defined outside the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following function after the `initMap()` function. This function starts
    listening to the click events of the buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the following function after the `startButtonEvents()` function. This function
    creates a random latitude and longitude according to the values given at the beginning
    of this section and returns the `google.maps.LatLng` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, the `addStandardMarker()` function is added. This function creates the
    standard Google Maps red marker. It gets the random `LatLng` object value from
    the function created in the preceding step. There is a commented line in the code
    block that will be explained later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'There is also another function named `addIconMarker()` described in this step.
    This is used for adding random markers with random images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we will add HTML tags to finish the code. These links will help to
    trigger the functions defined in event listeners:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your HTML file is stored in your favorite browser
    and see the result. Initially, you will see an empty map. Then click on the links
    on the map to add random markers. The final map can be seen as shown in the following
    screenshot:![How to do it…](img/8825OT_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As seen in the preceding screenshot, we created a map with both the standard
    and icon markers.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Google Maps uses the Web Mercator projection system for its tile system, but
    the coordinates are still in GPS coordinates based on WGS 84 Datum. Coordinates
    are based on latitudes and longitudes that are between -90 to 90 and -180 to 180
    degrees respectively. The combination of a latitude and longitude defines a point
    on Earth. The Google Maps JavaScript API uses the `google.maps.LatLng` class to
    create a point. This class is also used in [Chapter 1](ch01.html "Chapter 1. Google
    Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*, to set the
    center of a map. The following line defines the coordinates of **Istanbul**, **Turkey**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `google.maps.Marker` class creates the marker with one required parameter,
    `google.maps.MarkerOptions`. The `MarkerOptions` class also has one required parameter
    that is named as `position`. This parameter gets the `google.maps.LatLng` object
    to define the coordinates of the marker. In the code, there are also the `map`
    and `title` parameters that are not required, but they are needed to show the
    marker on the map and set the title of the marker respectively. If you want to
    show the marker immediately after the creation of the marker, you should use the
    `map` parameter. But in some cases, you want to create markers and show them on
    the map later. In such a case, you should use the `setMap` method of `marker`
    with your map reference.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to remove the marker from the map, you must set the map value to
    null. Do not forget to keep a reference of your markers in order to remove them
    from the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Default markers with red icons are not suitable for all cases. The Google Maps
    JavaScript API lets you customize the icon of a marker. Basically, you should
    add the `icon` parameter to `google.maps.MarkerOptions` to customize the marker
    icon. This parameter accepts three different types: `String`, the `google.maps.Icon`
    object, or the `google.maps.Symbol` object. If you have a simple icon image, you
    will use the string type with a path to the image. Otherwise, you will create
    the icon or symbol objects to set a complex visualization for the marker. Showing
    an icon via a `String` parameter can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, random coordinates are used to show markers. If you have a data
    source that includes coordinates, you could easily add them to the map with JavaScript
    techniques without changing anything while creating the marker. Please be sure
    about the JavaScript asynchronous behavior while adding markers to the map from
    external sources because your data will not be available when you need it due
    to asynchronous behavior.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding popups to markers or maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost every mapping application has an ability to display information related
    to the features shown on it. Showing all the related information on the map at
    the same time is an impossible mission for a developer and it is also useless
    for users. Instead of showing all the information on the map, developers add interaction
    to points, polylines, or polygons that show the related information with different
    techniques such as popups or info windows.
  prefs: []
  type: TYPE_NORMAL
- en: Popups or info windows can hold anything that can be written in HTML tags, such
    as pictures, videos, or standard text.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see something like the following screenshot, if you get through to
    the end of the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding popups to markers or maps](img/8825OT_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is the modified version of the previous recipe named *Adding markers
    to maps*.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code at `Chapter 3/ch03_adding_popups.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can easily add popups to markers or maps by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the `initMap()` function is modified by adding the following code lines
    after creating the `map` object. This will open an info window or popup at the
    center of the map when the map first initializes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following function to listen to the click events of the button
    defined in the HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `startButtonEvents()` function must be called on initializing the map,
    so the following line is added to the `initMap()` function after `map` is initialized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, the `addStandardMarker()` function is modified by adding the following
    code lines after the creation of the marker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your HTML file is stored in your favorite browser
    and take a look at the result. You will see an info window at the beginning of
    the map. You will also click on the link on the map to add random markers, but
    these markers are different from the ones before because they will open a popup
    when the user clicks on them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Google Maps JavaScript API has a default `InfoWindow` class to create info
    windows or popups. This class can be initialized in two ways. One way is to give
    a location at info windows options with the `LatLng` object. By using this, you
    can open a popup on the map wherever you want. This can be attached to a function
    or an event. For example, you can attach the `click` event to the map to query
    something from the server and show the result in the popup. This is common for
    the Google Maps JavaScript API. The following code creates an info window at the
    location of 39.9078 (latitude) and 32.8252 (longitude) with the HTML content.
    Its `open` method with the `map` input shows the info window attached to the given
    map reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to use popups is by binding them to markers. Instead of giving
    a location, info windows will be anchored to a `marker` object. The `infoWindow`
    object given in the following code does not have a `position` property, which
    means it will be anchored to a `marker` object. Remember that `marker` objects
    are subclasses of the `MVCObject` class in Google Maps JavaScript API. They are
    a type of anchor parameter of the `open` method of the `InfoWindow` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: There is an event attached to `marker` in the preceding code, which is the subject
    of [Chapter 5](ch05.html "Chapter 5. Understanding Google Maps JavaScript API
    Events"), *Understanding Google Maps JavaScript API Events*. So use the code as
    it is written; this will be explained in detail later, but basically this code
    snippet listens to the `marker` object and opens the created `infowindow` object
    on the `click` event.
  prefs: []
  type: TYPE_NORMAL
- en: As it is seen in this recipe, you can use both simple strings and complex HTML
    content within the info windows. This means you can even add YouTube videos or
    Flash content inside info windows.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding markers to maps* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding lines to maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lines or polylines in GIS are an array of points connected to each other to
    show features on Earth such as roads, paths, or rivers. The properties of polylines
    on maps are similar to the properties of features represented on Earth. For example,
    a road is differentiated on Earth by its color and width. The same properties
    are also defined in the Google Maps JavaScript API to exactly represent the road
    on the map.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is focused on showing lines/polylines on a map to show a route from
    **Istanbul** to **Ankara**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the same map creation process defined in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*,
    but there are some minor changes in the `zoom` level and center coordinates to
    show the route in detail.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code at `Chapter 3/ch03_adding_lines.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to add line-type geometries to your map, you should perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's open our first recipe's source code mentioned in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*,
    and save it as `adding_lines.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, add the following lines of code after defining the `map` object at the
    beginning of the JavaScript part of the code. The array defined in this step is
    the route coordinates in latitudes and longitudes from **Istanbul** to **Ankara**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create the `addPolyline` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to create a new array composed of `LatLng` objects from the array defined
    at the beginning in the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we need to create the `polyline` object as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s add the `polyline` object to `map`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, call the `addPolyline()` function at the end of the `initMap()` function
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your HTML file is stored in your favorite browser
    and see the result. You will see a red route from **Istanbul** to **Ankara** on
    the map, as shown in the following screenshot:![How to do it…](img/8825OT_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thus, we have successfully created a map with a line-type geometry on it, which
    is the route from one place to another in this case.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As stated before, polylines consist of points. Points are defined by the `LatLng`
    class in the Google Maps JavaScript API, so an array of latitudes and longitudes
    should be converted to the `LatLng` array. The following code block creates a
    new array composed of `LatLng` objects. To do this, a classic approach of iterating
    an array via a loop is used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: A route will be created by the `Polyline` class that takes the instance of the
    `PolylineOptions` class as a parameter. There are many properties of the `PolylineOptions`
    class, but we only added the most used ones.
  prefs: []
  type: TYPE_NORMAL
- en: The `path` property that defines the route feature contains an array of `LatLng`
    objects. The `strokeWeight` property is used in order to define the width of the
    line in pixels. The `strokeColor` property defines the color of the line in the
    `String` type as a `HEX` format with a leading `#` symbol.
  prefs: []
  type: TYPE_NORMAL
- en: The `strokeOpacity` property usage can be optional, but it can be useful while
    showing multiple layers. This parameter gets a value from 0.0 to 1.0\. 0.0 means
    your line is invisible and 1.0 means your line is not transparent. If you have
    multiple layers, you should define the opacity of your lines to show other features
    or layers.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe shows the static route defined in the HTML; but in some cases,
    you can load data from a remote source. In this case, you should change the path
    array via the method of the `Polyline` class `setPath()`. This method gets the
    same array defined in the `PolylineOptions` class. For example, you create a new
    path array named `newRoute`. To change the coordinates to the new route, you should
    call the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If you want to remove `polyline` completely from the map, then you should set
    the `map` property to null or call the `setMap(null)` method of the `Polyline`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding polygons to maps* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding polygons to maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Polygons are similar to polylines that are an array of points connected to each
    other. However, polygons are closed loops to show Earth features such as parks,
    parcels, or regions. In addition to the properties of polylines, polygons have
    a fill region inside.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is focused on showing polygons on a map to show a region around
    **Ankara**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the same map-creation process defined in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*,
    but there are some minor changes in the `zoom` level and center coordinates to
    show the region in detail.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code at `Chapter 3/ch03_adding_polygons.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you perform the following steps, you can add polygon-type geometries to
    your map:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's open our first recipe's source code mentioned in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*,
    and save it as `adding_polygons.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, add the following lines of code after defining the map object at the
    beginning of the JavaScript part. The array defined in this step is the area coordinates
    of a random region in latitudes and longitudes around **Ankara**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then create the `addPolygon` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to create a new array composed of `LatLng` objects from the array defined
    at the beginning in the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we need to create the `polygon` object as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s add the `polygon` object to `map`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, call the `addPolygon()` function at end of the `initMap()` function as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your HTML file is stored in your favorite browser
    and see the result. You will see a yellow region surrounded by a red boundary
    around **Ankara**, as shown in the following screenshot:![How to do it…](img/8825OT_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is how we add polygon-type geometry to our map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Polygon` class is much like the `Polyline` class in the Google Maps JavaScript
    API. There are minor differences between the `Polyline` and `Polygon` classes,
    so we will get into the details of these differences only in this recipe. Please
    refer to the previous recipe for more details.
  prefs: []
  type: TYPE_NORMAL
- en: As stated in the previous recipe, the `Polygon` class creates objects with the
    help of the `PolygonOptions` class that includes many parameters for polygons.
    There are `path`, `strokeWeight`, `strokeColor`, and `strokeOpacity` parameters
    shared with the `PolylineOptions` class. The usage and purpose of these parameters
    are the same for both polygons and polylines. The main difference is that polygons
    fill an area. There must be some new parameters to define the polygon fill.
  prefs: []
  type: TYPE_NORMAL
- en: The `fillColor` property defines the color of the fill area in the `String`
    type as a `HEX` format with a leading `#` symbol. The `fillOpacity` property usage
    can be optional, but it can also be useful while showing multiple layers at the
    same time. This parameter gets a value from 0.0 to 1.0\. 0.0 means your polygon
    is invisible and 1.0 means your polygon is not transparent. This parameter is
    more important in polygons than in polylines because polygons fill areas, which
    can be an obstacle for some markers or polylines.
  prefs: []
  type: TYPE_NORMAL
- en: Adding or removing the polygons has the same API usage as polylines, so there
    is no need to talk about it here.
  prefs: []
  type: TYPE_NORMAL
- en: One last thing to mention is that polygons are a closed version of polylines,
    so we add the same coordinates both at the start and end. This is a good usage
    but not necessary. Even if you do not add the end coordinates, which are the same
    as the start coordinates, the Google Maps JavaScript API will close the polygon
    without any errors.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding lines to maps* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding circles/rectangles to maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Circles and rectangles are similar to polygons in that they have stroke and
    fill colors, weights, and opacities. The main difference between them and polygons
    is in defining the geometry. As seen in the previous recipes, the `PolygonOptions`
    class has a `path` parameter that consists of an array of `LatLng` objects. On
    the other side, the `CircleOptions` class has the `center` and `radius` parameters,
    and the `RectangleOptions` class has bounds parameters for defining the geometry
    of the `Circle` and `Rectangle` classes respectively.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will go through adding circles according to the population
    of cities and a rectangle to map bounding to **Turkey**. The result map will show
    the bounding box of **Turkey** and major cities' population in a graph.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will use the first recipe defined in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*,
    as a template in order to skip map creation.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code at `Chapter 3/ch03_circle_rectangle.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding circles or rectangles to your map is quite easy if you perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by creating a new empty file named `circles_rectangles.html`. Then,
    copy all the code in the HTML file that was introduced in the *Creating a simple
    map in a custom DIV element* recipe of [Chapter 1](ch01.html "Chapter 1. Google
    Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*, and paste it
    into a new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines for defining the global variables used in the functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the `addCircle()` and `addRectangle()` functions before the `initMap()`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the following code block into the `addCircle()` function to initialize
    the circles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following lines to the `addRectangle()` function to initialize
    the rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, change the `zoom` level and `center` of the map according to your needs
    in the `initMap()` function. This example uses the following parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the `addRectangle()` and `addCircle()` functions at the end of
    the `initMap()` function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your `circles_rectangles.html` file is stored in
    your favorite browser and take a look at the result. You will see the map with
    three circles and a grey rectangle behind them, as shown in the following screenshot:![How
    to do it…](img/8825OT_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is the result of the recipe that shows both the circles and rectangles
    at the same time on the map. This can be a good example to visualize your tabular
    data on maps.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let's talk about the circles. Circles are types of polygons, except they
    are defined by a center in the `LatLng` object with a radius in meters instead
    of paths. Other parameters are the same as the `PolygonOptions` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, first three cities of **Ankara**, **Istanbul**, and **Izmir**,
    are selected. The center and the population of these cities are defined using
    JSON objects in the array. The centers of cities are defined in `LatLng` objects,
    so there is no need for extra conversion. The following code block iterates over
    the cities'' array and creates a circle with a `center` parameter defined in the
    JSON object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `radius` parameter is defined as a parameter of population, that is, population
    divided by `100`; it shows the magnitude of a population. As seen on the map,
    the higher the population, the larger the circle. This can be used as a visualization
    of the population distribution without knowing the exact numbers. As seen, the
    other parameters, such as `fillColor`, `fillOpacity`, `strokeColor`, `strokeOpacity`,
    and `strokeWeight`, are used in the same way as in the `PolygonOptions` class.
    The `setMap()` function is also used as it is used in the polygon or polyline
    recipes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other element, the rectangle, is also a type of polygon, except that its
    geometry is defined by the `LatLngBounds` object. In theory, the `LatLngBounds`
    object is composed of two `LatLng` objects that are defined as the southwest and
    northeast coordinates of a rectangle. These coordinates can also be defined as
    the minimum and maximum points of latitudes and longitudes. In this recipe, the
    rectangle defined shows the bounding box of **Turkey**. BBOX can be used for simple
    geometric calculations such as "point in polygon" or "intersection". Using BBOX
    in calculations gives fast results because of the simple geometry, but there is
    always an error in this calculation. As seen in the preceding screenshot, some
    areas are not on the border of **Turkey**, but they are in the bounding box. If
    you want to get the geometries to intersect with **Turkey** using the BBOX method,
    you can easily get other geometries that are outside the real geometry object
    of **Turkey**. As you can see, using the BBOX approach gets some geometries at
    the intersection of BBOX that can be outside the real area. The usage of the `Rectangle`
    class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The Google Maps JavaScript API gives many opportunities to developers that can
    make their life easier. Circles and rectangles can both be used for geometries
    or other visualization techniques in your applications.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we add circles and rectangles without any order. The most recently
    added one is shown in the preceding map. In this example, a rectangle is added
    first in order to show the circles better. If you want to change the display order
    of markers, info windows, polylines, polygons, circles, or rectangles, you should
    change the `zIndex` parameter of the option classes or change them via the `setZIndex(3)`
    or `setOptions({ zIndex: 3 })` methods.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding lines to maps* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding polygons to maps* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding animated lines to maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Polylines are the representations of Earth's features on the Earth, but sometimes,
    they are not enough to show the mobility of Earth features. For example, a river
    can be shown with the help of polylines, but the flow direction of the river can't
    be demonstrated by the polylines alone. Animating polylines can be a solution
    to show the mobility of Earth features. The flow direction of a river can be shown
    with the help of animated polylines.
  prefs: []
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API has a symbol feature that can add vector-based
    images to a polyline in the form of a symbol. You can create your own symbol with
    the help of the `Symbol` class, or you can also use the predefined symbols that
    are accessed from the `SymbolPath` class.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create an animated polyline from the previous recipe.
    This animation shows that a car is moving from **Istanbul** to **Ankara**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will use the fourth recipe of this chapter as a template.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code at `Chapter 3/ch03_animating_line.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps that are needed to add animated line-type geometries
    to your map:'
  prefs: []
  type: TYPE_NORMAL
- en: First, start by copying the contents of `ch03_adding_lines.html` to your new
    HTML file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, add the following line after the `map` object to make it global. This
    is used while animating the line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the function name from `addPolyline()` to `addAnimatedPolyline()` and
    add the following code block to define your symbol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, change the polyline options as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the following function call to start the animation that will be defined
    right after the following step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following function block before the `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, change the function call from `addPolyline()` to `addAnimatedPolyline()`
    in the `initMap()` function to add the new animated polyline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your HTML file is stored in your favorite browser
    and take a look at the result. You will see an arrow animating animating the route
    from **Istanbul** to **Ankara** on the map, as shown in the following screenshot:![How
    to do it…](img/8825OT_03_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a result of this recipe, we can add the animated line-type geometry to our
    map, which shows the movement of a vehicle on a route.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Animating polylines includes a trick with the JavaScript `setInterval` method
    and the Google Maps JavaScript API's icons property of the `PolylineOptions` class.
    As stated, you can create your own symbol or use the predefined ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'Predefined symbols can be accessible via the `SymbolPath` class, which is shown
    in the following screenshot, as it is in the Google Maps JavaScript API document:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/8825OT_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this recipe, we will use the `FORWARD_CLOSED_ARROW` type. This symbol is
    defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The `strokeColor` property is used to define the color of the symbol. The `path`
    property is used for defining the symbol type and the `scale` property is used
    for the size of the symbol. You can also change the `fillColor` and `fillOpacity`
    properties of predefined symbols like in polygons.
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the preceding screenshot, the predefined symbols are limited. If
    you need more types of symbols, you should define them yourself in the `Symbol`
    class. You need to define custom symbols via the `path` property of the `Symbol`
    class with the **SVG path notation**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The SVG path notation is the definition of the shape in SVG commands such as
    `moveto` (`M`), `lineto` (`L`), or `closepath` (`Z`). For example, the following
    path notation defines a triangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The explanation of the path notation is as follows: move to point (`100`,`100`),
    draw a horizontal line from `100`,`100` to `300`, `100`, and draw a second line
    from (`300`,`100`) to (`200`, `300`). This shape appears as a triangle. Finally,
    the `Z` command is used to close the path. You can draw any shape with this notation,
    but you should be aware of the area that will be available for the map use. The
    Google Maps JavaScript API allows a 22 x 22 px square area to show a defined shape.
    If the shape is larger than this area, you should use the `scale` parameter to
    fit the shape into the area. The following code block will change the predefined
    arrow shape to a yellow triangle moving on the same route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](img/8825OT_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you noticed, there is an additional parameter named `anchor`. This parameter
    is used to define the position of the symbol relative to the polyline. If you
    do not add this parameter, your symbol will be pinned to the polyline from the
    (0,0) point as a default. In general, using the center of the symbol as an `anchor`
    point gives the best result. The `anchor` parameter accepts the `Point` class.
    It also gets its x and y parameters in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'The trickiest part of this recipe is the animation. In the `animateArrow()`
    function, we define a trigger that animates the symbol defined before via the
    `window.setInterval` method at every 50 milliseconds. An anonymous function is
    defined in this trigger as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: This function gets the first object of the icons array and changes the `offset`
    parameter of the defined icon with the changing parameter according to the `counter`
    variable. Running this function every 50 milliseconds moves the symbol over the
    polyline.
  prefs: []
  type: TYPE_NORMAL
- en: In the anonymous function, you may have noticed that the polyline object has
    the `get()` and `set()` methods, which are not defined in the documentation. Since
    the `Polyline` class extends the `MVCObject` class, we can also use the methods
    of the `MVCObject` class. So, we can use the `get()` and `set()` methods of the
    parent class.
  prefs: []
  type: TYPE_NORMAL
- en: Using symbols and timers can make different visualizations on the map without
    the need of an extra library in addition to the Google Maps JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**SVG** is the abbreviation of **Scalable Vector Graphics**. It is an XML-based
    vector image format for two-dimensional graphics that support interactivity and
    animation. SVG is supported by all modern browsers. It can be a good solution
    for mapping platforms in some cases, like this one. SVG is a completely different
    subject, which is out of the scope of this book.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**More about SVG path notation**'
  prefs: []
  type: TYPE_NORMAL
- en: 'More details can be found on the W3C site ([http://www.w3.org/TR/SVG/paths.html#PathData](http://www.w3.org/TR/SVG/paths.html#PathData)).
    There is also some editing software to get path notations without learning the
    language. The following address can be used for creating SVG and getting the path
    notation: [http://svg-edit.googlecode.com/svn/branches/2.6/editor/svg-editor.html](http://svg-edit.googlecode.com/svn/branches/2.6/editor/svg-editor.html).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding lines to maps* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding KML/GeoRSS layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Keyhole Markup Language** (**KML**) has been introduced in Google Earth,
    which was originally named Keyhole Earth Viewer before Google bought it. KML became
    an OGC standard in 2008\. It is an XML notation for showing features in geo-enabled
    viewers. **GeoRSS** is also an emerging standard for sharing Earth features to
    show in geo-enabled viewers mostly used by web feeds or services. Both these standards
    can be consumable with the Google Maps JavaScript API.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, dynamic services will be consumed via the Google Maps JavaScript
    API. We will use the **U.S. Geological Survey** (**USGS**) web services to show
    recent earthquakes on maps. These services are updated regularly to reflect recent
    events.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will use the simple map recipe introduced in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*,
    as a template.
  prefs: []
  type: TYPE_NORMAL
- en: The source code of this recipe is at `Chapter 3/ch03_kml_georss.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can add your KML/GeoRSS files to your map if you perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, start by copying the contents of `ch01_simple_map.html` to our new HTML
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, define the following variables as global variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following function after defining the global variables. This function
    triggers the adding of the GeoRSS feed to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the other function after the previous one. This function also triggers
    adding the KML feed to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the following function, `clearMap(),` before the `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the following function to listen to the click events of the buttons
    defined in the HTML in step 8:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `startButtonEvents` function must be called on initializing the map, so
    the following line is added to the HTML file after the map gets initialized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the following lines to the HTML body tag to trigger functions
    on clicking the links:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your HTML file is stored in your favorite browser
    and take a look at the result. You will see an empty map at the beginning. When
    you click on the links on the map, you will see two different layers on the map
    as follows:![How to do it…](img/8825OT_03_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As seen in the preceding screenshot, you can easily add your GeoRSS files or
    services to the map with the Google Maps JavaScript API.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/8825OT_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is the result of adding the KML layer to your map. With Google Maps JavaScript
    API, you can easily add your KML files or services to the map.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding the KML/GeoRSS layer is the simplest one. There is only one class for
    adding both the layers, named `KmlLayer`. This class reads the KML or GeoRSS feed
    from local or remote locations and decides what to render. The usage of the class
    is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: After creating the layer, you must set the map with the `setMap(map)` method
    to show the layer on the map. If you want to remove the layer from the map, you
    must use the `setMap(null)` method as described earlier in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that Google Maps JavaScript API v3 does not have any function to clear
    all layers or overlays like in v2\. All the responsibility to handle the layer
    states is on your shoulders. In practice, the Google Maps JavaScript API documentation
    suggests you hold all layers in an array and manage your own add/remove functions
    via the `setMap()` method. As we did in the `clearMap()` function, we check if
    a layer is defined. If it is, we remove it; otherwise we do nothing, so that we
    do not get an error.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding GeoJSON to the Google Maps JavaScript API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XML is the first hero of services in the Web 2.0 zone. With the help of XML,
    services or machines can easily communicate between them. XML can also be readable
    by humans. But after browser evolution, JSON has become much more popular due
    to its native readability for JavaScript and its lightweight compared to XML.
    GeoJSON is a form of JSON that includes collections of simple features such as
    points, polylines, or polygons. GeoJSON is not a standard of OGC, but it is a
    new de facto standard used by most GIS software or services.
  prefs: []
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API does not support GeoJSON natively, but GeoJSON
    support will be added with a few lines of coding or with some additional libraries.
    With coding, we will go through the JSON format and read the coordinates one by
    one. Then, we will show the feature on the map according to its type, which can
    be point, polyline, or polygon.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will read GeoJSON from a local file via the jQuery functions
    and show them on the map. This GeoJSON file is composed of a simplified version
    of the **Ankara** province border, a sample river, and some POIs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will use the simple map recipe introduced in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*,
    as a template.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code at `Chapter 3/ch03_adding_geojson.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you perform the following steps, you can add your GeoJSON files to your
    map:'
  prefs: []
  type: TYPE_NORMAL
- en: First, start by copying the contents of `ch01_simple_map.html` to our new HTML
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will add a jQuery JavaScript library to make it easy to access local
    or remote GeoJSON files. In this recipe, we will add the library from Google CDN.
    This block will be added in the `<head>` section before the Google Maps JavaScript
    API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following `drawGeometry()` function after defining the global
    `map` variable. This function draws each geometry read from the GeoJSON file.
    We have three types of geometries, so we will switch blocks for each type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the following `if` block in the new function. This block will add
    geometry if its type is `Point`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, the `if` block is for `LineString` that shows polylines on the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, the `if` block is used for showing the polygons as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following function to read the GeoJSON file and iterate over
    the geometries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, call the `parseGeoJSON()` function at the end of the `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your HTML file is stored in your favorite browser
    and see the result. You will see three different types of geometries on the map
    with their styles as follows:![How to do it…](img/8825OT_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thus, we have successfully added our GeoJSON files to the map with multiple
    types of geometries.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'GeoJSON is a vector format that we described earlier. It is a form of JSON.
    The GeoJSON format can consist of different types of the same file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The sample GeoJSON is taken from the [www.geojson.org](http://www.geojson.org)
    site. As seen from the code, it is composed of point, polyline, and polygons in
    the same file separated by the `feature` keywords. Each `feature` has JavaScript
    objects named `geometry` and `properties`. The `geometry` part stores the geometry
    of the object and the `properties` part stores the related information. The `geometry`
    part is based on the geographic coordinate reference system using WGS84 Datum
    as default, and the coordinates are in longitudes and latitudes of decimal degrees
    until it is defined in the `crs` object. The `type` object stores the type of
    geometry such as `Point`, `Polyline`, or `Polygon`. The `coordinates` array is
    the actual part that stores the array of point coordinates. The order of coordinates
    in GeoJSON is different from the Google Maps JavaScript API in terms of its longitudes
    and latitudes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**More about GeoJSON**'
  prefs: []
  type: TYPE_NORMAL
- en: More details can be obtained from GeoJSON's unofficial site ([http://www.geojson.org](http://www.geojson.org)).
    There are also some tools to view or edit the GeoJSON without any coding. GitHub
    ([http://www.github.com](http://www.github.com)) can easily display your GeoJSON
    files on the map. The [http://www.geojson.io](http://www.geojson.io) site is also
    a tool from MapBox that displays and edits your GeoJSON files on browsers without
    the need for any software or coding. Please check these sites to understand GeoJSON
    in detail.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will read the local GeoJSON file with the help of the jQuery
    method, `getJSON()`. jQuery is used in order to focus on coding for the Google
    Maps JavaScript API. Otherwise, we will have to deal with remote file reading
    on multiple browser platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'This method gets the contents of the `geojson.js` local file and puts them
    in the `data` variable. Then, we will iterate over the GeoJSON features with the
    jQuery method, `each()`. Finally, we get each feature''s `geometry` part and send
    it to the `drawGeometry()` function, which will be examined later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The code written in the `drawGeometry()` function may seem complex, but it is
    not because we will use all the code written for adding markers, lines, and polygons
    in this chapter. This function first checks for the type of geometry, then prepares
    the appropriate options and coordinate(s) for the point, polyline, or polygon.
  prefs: []
  type: TYPE_NORMAL
- en: In polylines or polygons, there is a need to iterate over the `coordinates`
    array of the `geometry` field to create a path or paths for the `PolylineOptions`
    or `PolygonOptions` classes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, we will process GeoJSON with our functions and these functions
    can't draw all kinds of GeoJSON geometries. We are only dealing with the simple
    ones to show you how to deal with GeoJSON on your own. If you need to do a more
    complex GeoJSON process, there are two ways. One way is to read the full specification
    of GeoJSON and add it to your functions. The other way, which is also easy, is
    to use a library that is dedicated to this job. There is a library named **GeoJSON
    to Google Maps** written by *Jason Sanford* on GitHub ([https://github.com/JasonSanford/geojson-google-maps](https://github.com/JasonSanford/geojson-google-maps)).
    With the help of this library, you do not need to deal with GeoJSON specs. You
    can just add geometries with your own styles.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding markers to maps* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding lines to maps* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding polygons to maps* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding WKT to the Google Maps JavaScript API* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding WKT to the Google Maps JavaScript API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Well-known Text** (**WKT**) is a text markup language for representing vector
    geometry objects on the map according to Wikipedia. This format was originally
    defined by the **Open Geospatial Consortium** (**OGC**), which is also a standard.'
  prefs: []
  type: TYPE_NORMAL
- en: Apart from XML or JSON, WKT is a defined text format that only defines geometries
    without properties compared to GeoJSON. It was an old and outdated format, but
    there are still software or services supporting this format. There are 18 distinct
    geometric objects that represent Earth features, but simple ones are observed
    in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The Google Maps JavaScript API does not support WKT natively, but WKT support
    will be added with a few lines of coding or with some additional libraries. With
    coding, we will go through the WKT format, split them into arrays, and read the
    coordinates one by one. Then, we will show the feature on the map according to
    its type, which can be point, polyline, or polygon.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will read a WKT from a local file via jQuery functions and
    show them on the map. The WKT geometries are within JSON attributes to make iteration
    easy. This WKT file is composed of a simplified version of the **Ankara** province
    border, a sample river, and some POIs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will use the simple map recipe introduced in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*,
    as a template.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code at `Chapter 3/ch03_adding_wkt.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can easily add your WKT geometries to the map after performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, start by copying the contents of `ch01_simple_map.html` to our new HTML
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will add a jQuery JavaScript library to make it easy to access local
    or remote JSON files with WKT geometries. In this recipe, we will add the library
    from Google CDN. This block will be added in the `<head>` section before the Google
    Maps JavaScript API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following `drawGeometry()` function after defining the global
    `map` variable. This function draws each WKT geometry read from the JSON file.
    We have three types of geometries, so we will switch blocks for each type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the following `if` block in the new function. This block will add
    the geometry if its type is `POINT`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the `if` block for `LINESTRING` that shows polylines on the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, the `if` block is used for showing the polygons as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following function to read the JSON file and iterate over the
    WKT geometries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, call the `parseWKT()` function at the end of the `initMap()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to your local URL where your HTML file is stored in your favorite browser
    and see the result. You will see three different types of geometries on the map
    with their styles, as shown in the following screenshot:![How to do it…](img/8825OT_03_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is how we add WKT geometries to the map with multiple types of geometries.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'WKT is a vector format that we defined earlier, which is different from GeoJSON.
    GeoJSON defines both the geometry and properties of Earth features, but WKT is
    only used for defining the geometry. Simple types of WKT examples are shown in
    the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Geometry type | WKT example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| POINT | POINT(31.541742 40.730608) |'
  prefs: []
  type: TYPE_TB
- en: '| POLYLINE | LINESTRING(35.24414 41.742627, 34.859619 41.586688, 34.7717285
    41.508577, 34.832153 41.364441) |'
  prefs: []
  type: TYPE_TB
- en: '| POLYGON | POLYGON((33.759299 38.779907, 33.73552 38.758208, 33.73187 38.748987,
    33.703537 38.723535, 33.677514 33.800384 38.876017, 33.783532 38.842548, 33.759299
    38.779907)) |'
  prefs: []
  type: TYPE_TB
- en: WKT geometries are exactly the same as used in the *Adding GeoJSON to Google
    Maps JavaScript API* recipe, but they are formatted in WKT geometries. WKT geometries
    are not alone due to their text format. So we put them in a JSON file with the
    `geom` attribute. This is used for easy parsing. If you have different types of
    formats that include WKT geometries, you should parse them with JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will read the JSON file to get the WKT geometries. We will read the
    local JSON file with the help of the jQuery method, `getJSON()`. jQuery is used
    for focusing on the Google Maps JavaScript API instead of writing and fixing JavaScript
    code for each browser. Otherwise, we will have to deal with a remote file reading
    on multiple browser platforms. This method gets the contents of the `wkt.js` local
    file and puts them in the `data` variable. Then, we will iterate over the JSON
    objects with a jQuery method, `each()`. Finally, we get each object''s `geom`
    part and send it to the `drawGeometry()` function, which will be examined later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Parsing of WKT is much harder than GeoJSON because we need to deal with text
    parsing. With the `drawGeometry()` function, we will split the WKT text into smaller
    arrays and make them significant. Before parsing each type, we need to get the
    type of their geometry. Since they have no separate attribute for defining the
    type, we need to extract the type from the WKT text. As seen from the examples,
    the type is separated with the `(` character from the coordinates. If we slice
    string from the `(` character, the first array element is the type of geometry.
    This is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The contents of `geomType` can be `POINT`, `LINESTRING`, or `POLYGON`. Then,
    we will check each type of geometry in different blocks. Let's go through each
    geometry type starting with point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Point is the simplest WKT geometry to parse with JavaScript. First, we get
    the second element of the `slice` array and slice it from the `)` character to
    only get the coordinates separated by a comma. Then, we will split the result
    text by a comma into an array. This array has only one element, so we will easily
    access the coordinates. To access the coordinates, we must slice the final text
    with the space character. This final array contains the latitude and longitude.
    The Google Maps JavaScript API uses latitude and longitude in order to define
    a point, but WKT uses longitude and latitude order to define a point. As described
    in the *Adding GeoJSON to Google Maps JavaScript API* recipe, the order of coordinates
    is also the same for WKT, which is in the reverse order of the Google Maps JavaScript
    API as longitudes and latitudes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: The second type is the polyline that is defined as `LINESTRING` in WKT. Parsing
    polylines is much more complex than points. First, we get the arrays of coordinates
    by splitting `)` and comma as described earlier. Then, we will iterate in this
    array to get each coordinate. Before splitting the text with a space, we must
    check if there is a space at the beginning of the text. If there is a space, we
    will get the rest of the text to get only numbers for valid latitudes and longitudes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'The last, simple type is polygon that is also defined as `POLYGON` in WKT.
    Parsing polygon is very similar to parsing polylines, except that the polygon
    definition has two parentheses, which is one more than polylines. We will get
    the third element of the array instead of the second, because WKT can contain
    multiple polygon geometries so in this case we have only one. If you have multiple
    geometries then you should iterate over the geometries. The only difference is
    written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: The code blocks written in the `drawGeometry()` function may seem complex, but
    they are not because we will use all the codes written for adding markers, lines,
    and polygons in this chapter. The result of this recipe is exactly the same as
    the *Adding GeoJSON to* the *Google Maps JavaScript API* recipe, which is the
    expected result. We do not imagine we will get different outputs on changing the
    vector formats.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will process WKT with our own functions, and these functions
    can't draw all kinds of WKT geometries defined in its standard. We are only dealing
    with the simple ones to show you how to deal with WKT on your own. If you need
    to do more complex WKT geometries, then there are two ways. One way is to read
    the full specification of WKT and add them to your functions. The other, easier
    way is to use a library that is dedicated for this job. There is a library named
    **Wicket** written by *K. Arthur Endsley* on GitHub ([https://github.com/arthur-e/Wicket](https://github.com/arthur-e/Wicket)).
    With the help of this library, you do not need to deal with WKT specs. You can
    just add geometries with your own styles.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a simple map in a custom DIV element* recipe in [Chapter 1](ch01.html
    "Chapter 1. Google Maps JavaScript API Basics"), *Google Maps JavaScript API Basics*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding markers to maps* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding lines to maps* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding polygons to maps* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding GeoJSON to* the *Google Maps JavaScript API* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
