- en: Chapter 4. CSS Properties – Part 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS properties are characteristics of an element in a markup language (HTML,
    SVG, XML, and so on) that control their style and/or presentation. These characteristics
    are part of a constantly evolving standard from the W3C.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of a CSS property is `border-radius`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There is an incredible number of CSS properties, and learning them all is virtually
    impossible. Adding more into this mix, there are CSS properties that need to be
    vendor prefixed (`-webkit-`, `-moz-`, `-ms-`, and so on), making this equation
    even more complex.
  prefs: []
  type: TYPE_NORMAL
- en: Vendor prefixes are short pieces of CSS that are added to the beginning of the
    CSS property (and sometimes CSS values too). These pieces of code are directly
    related to either the company that makes the browser (the "vendor") or to the
    CSS engine of the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four major CSS prefixes: `-webkit-`, `-moz-`, `-ms-` and `-o-`. They
    are explained here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-webkit-`: This references Safari''s engine, Webkit (Google Chrome and Opera
    used this engine in the past as well)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-moz-`: This stands for Mozilla, who creates Firefox'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-ms-`: This stands for Microsoft, who creates Internet Explorer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-o-`: This stands for Opera, but only targets old versions of the browser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Chrome and Opera both support the `-webkit-` prefix. However, these two
    browsers do not use the Webkit engine anymore. Their engine is called Blink and
    is developed by Google.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of a prefixed CSS property is `column-gap`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Knowing which CSS properties need to be prefixed is futile. That's why it's
    important to keep a constant eye on [CanIUse.com](http://CanIUse.com). However,
    it's also important to automate the prefixing process with tools such as `Autoprefixer`
    or `-prefix-free`, or mixins in preprocessors, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: However, vendor prefixing isn't in the scope of the book, so the properties
    we'll discuss are absent of any vendor prefixes. If you want to learn more about
    vendor prefixes, you can visit **Mozilla Developer Network** (**MDN**) at [http://tiny.cc/mdn-vendor-prefixes](http://tiny.cc/mdn-vendor-prefixes).
  prefs: []
  type: TYPE_NORMAL
- en: Let's get the CSS properties reference rolling.
  prefs: []
  type: TYPE_NORMAL
- en: Animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike the old days of Flash, where creating animations required third-party
    applications and plugins, today we can accomplish practically the same things
    with a lot less overhead, better performance, and greater scalability all through
    CSS only.
  prefs: []
  type: TYPE_NORMAL
- en: Forget plugins and third-party software! All we need is a text editor, some
    imagination, and a bit of patience to wrap our heads around some of the animation
    concepts CSS brings to our plate.
  prefs: []
  type: TYPE_NORMAL
- en: Base markup and CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we dive into all the animation properties, we will use the following
    markup and animation structure as our base:'
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the examples, we will only see the `.element` rule since the HTML and `@keyframes
    fadingColors` will remain the same.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `@keyframes` declaration block is a custom animation that can be applied
    to any element. When applied, the element's background will go from red to black.
  prefs: []
  type: TYPE_NORMAL
- en: Ok, let's do this.
  prefs: []
  type: TYPE_NORMAL
- en: animation-name
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `animation-name` CSS property is the name of the `@keyframes` at-rule that
    we want to execute, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the HTML and CSS base example, our `@keyframes` at-rule had an animation
    where the background color went from red to black. The name of that animation
    is `fadingColors`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we can call the animation like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is a valid rule using the longhand. There are clearly no issues with it
    at all. The thing is that the animation won't run unless we add `animation-duration`
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: animation-duration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `animation-duration` CSS property defines the amount of time the animation
    will take to complete a cycle, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can specify the units either in seconds using `s` or in milliseconds using
    `ms`. Specifying a unit is required. Specifying a value of `0s` means that the
    animation should actually never run.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, since we do want our animation to run, we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned earlier, this will make a box go from its red background to black
    in `2` seconds and then stop.
  prefs: []
  type: TYPE_NORMAL
- en: animation-iteration-count
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `animation-iteration-count` CSS property defines the number of times the
    animation should be played, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here are two values: `infinite` and a *number*, such as `1`, `3`, or `0.5`.
    Negative numbers are not allowed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the prior example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will make a box go from its red background to black, start over again with
    the red background and go to black, infinitely.
  prefs: []
  type: TYPE_NORMAL
- en: animation-direction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `animation-direction` CSS property defines the direction in which the animation
    should play after the cycle, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are four values: `normal`, `reverse`, `alternate`, and `alternate-reverse`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`normal`: This makes the animation play forward. This is the default value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reverse`: This makes the animation play backward.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alternate`: This makes the animation play forward in the first cycle, then
    backward in the next cycle, then forward again, and so on. In addition, timing
    functions are affected, so if we have `ease-out`, it gets replaced by `ease-in`
    when played in reverse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll look at these timing functions in a minute.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`alternate-reverse`: This is the same thing as `alternate`, but the animation
    starts backward, from the end.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our current example, we have a continuous animation. However, the background
    color has a "hard stop" when going from black (end of the animation) to red (start
    of the animation).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a more "fluid" animation by making the black background fade
    into red and then red into black without any hard stops. Basically, we are trying
    to create a "pulse-like" effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: animation-delay
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `animation-delay` CSS property allows us to define when exactly an animation
    should start. This means that as soon as the animation has been applied to an
    element, it will obey the delay before it starts running.
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can specify the units either in seconds using `s` or in milliseconds using
    `ms`. Specifying a unit is required.
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are allowed. Take into consideration that using negative values
    means that the animation should start right away, but it will start midway into
    the animation for the opposite amount of time as the negative value.
  prefs: []
  type: TYPE_NORMAL
- en: Use negative values with caution.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will make the animation start after 3 seconds have passed.
  prefs: []
  type: TYPE_NORMAL
- en: animation-fill-mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `animation-fill-mode` CSS property defines which values are applied to an
    element before and after the animation. Basically, outside the time the animation
    is being executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are four values: `none`, `forwards`, `backwards`, and `both`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`none`: No styles are applied before or after the animation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`forwards`: The animated element will retain the styles of the last keyframe.
    This the most used value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backwards`: The animated element will retain the styles of the first keyframe,
    and these styles will remain during the `animation-delay` period. This is very
    likely the least used value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`both`: The animated element will retain the styles of the first keyframe before
    starting the animation and the styles of the last keyframe after the animation
    has finished. In many cases, this is almost the same as using `forwards`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The prior properties are better used in animations that have an end and stop.
    In our example, we're using a fading/pulsating animation, so the best property
    to use is `none`.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: animation-play-state
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `animation-play-state` CSS property defines whether an animation is running
    or paused, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two values: `running` and `paused`. These values are self-explanatory.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this case, defining `animation-play-state` as `running` is redundant, but
    I'm listing it for purposes of the example.
  prefs: []
  type: TYPE_NORMAL
- en: animation-timing-function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `animation-timing-function` CSS property defines how an animation''s speed
    should progress throughout its cycles, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'There are five predefined values, also known as easing functions, for the **Bézier**
    curve (we''ll see what the Bézier curve is in a minute): `ease`, `ease-in`, `ease-out`,
    `ease-in-out`, and `linear`.'
  prefs: []
  type: TYPE_NORMAL
- en: ease
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `ease` function sharply accelerates at the beginning and starts slowing
    down towards the middle of the cycle, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: ease-in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `ease-in` function starts slowly accelerating until the animation sharply
    ends, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: ease-out
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `ease-out` function starts quickly and gradually slows down towards the
    end and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: ease-in-out
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `ease-in-out` function starts slowly and it gets fast in the middle of
    the cycle. It then starts slowing down towards the end. And it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: linear
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `linear` function has constant speed. No accelerations of any kind happen.
    It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now, the easing functions are built on a curve named the Bézier curve and can
    be called using the `cubic-bezier()` function or the `steps()` function.
  prefs: []
  type: TYPE_NORMAL
- en: cubic-bezier()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `cubic-bezier()` function allows us to create custom acceleration curves.
    Most use cases can benefit from the already defined easing functions we just mentioned
    (`ease`, `ease-in`, `ease-out`, `ease-in-out` and `linear`), but if you're feeling
    adventurous, `cubic-bezier()` is your best bet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what a Bézier curve looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![cubic-bezier()](img/B03289_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Parameters
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The `cubic-bezier()` function takes four parameters as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: X and Y represent the *x* and *y* axes. The numbers `1` and `2` after each axis
    represent the control points. `1` represents the control point starting on the
    lower left, and `2` represents the control point on the upper right.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Let''s represent all five predefined easing functions with the `cubic-bezier()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'ease: `animation-timing-function: cubic-bezier(.25, .1, .25, 1);`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ease-in: `animation-timing-function: cubic-bezier(.42, 0, 1, 1);`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ease-out: `animation-timing-function: cubic-bezier(0, 0, .58, 1);`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ease-in-out: `animation-timing-function: cubic-bezier(.42, 0, .58, 1);`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'linear: `animation-timing-function: cubic-bezier(0, 0, 1, 1);`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'm not sure about you, but I prefer to use the predefined values.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can start tweaking and testing each value to the decimal, save it, and
    wait for the live refresh to do its thing. However, that's too much time wasted
    testing if you ask me.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The amazing Lea Verou created the best web app to work with Bézier curves. You
    can find it at [cubic-bezier.com](http://cubic-bezier.com). This is by far the
    easiest way to work with Bézier curves. I highly recommend this tool.
  prefs: []
  type: TYPE_NORMAL
- en: The Bézier curve image showed earlier was taken from the [cubic-bezier.com](http://cubic-bezier.com)
    website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add `animation-timing-function` to our example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: steps()
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `steps()` timing function isn't very widely used, but knowing how it works
    is a must if you're into CSS animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This function is very helpful when we want our animation to take a defined number
    of steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding a `steps()` function to our current example, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This makes the box take six steps to fade from red to black and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'There are two optional parameters that we can use with the `steps()` function:
    `start` and `end`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`start`: This will make the animation run at the beginning of each step. This
    will make the animation start right away.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`end`: This will make the animation run at the end of each step. This is the
    default value if nothing is declared. This will give the animation a short delay
    before it starts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'After adding a `steps()` function to our current example, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Granted, the pulsating effect in our example isn't quite noticeable when we
    add the `steps()` function. However, you can see it more clearly in this pen from
    Louis Lazarus when hovering over the boxes, at [http://tiny.cc/steps-timing-function](http://tiny.cc/steps-timing-function)
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an image taken from Stephen Greig''s article in *Smashing Magazine*,
    *Understanding CSS Timing Functions*, that explains `start` and `end` from the
    `steps()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Description](img/B03289_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, there are two predefined values for the `steps()` function: `step-start`
    and `step-end`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`step-start`: This is the same thing as `steps(1, start)`. It means that every
    change happens at the beginning of each interval.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`step-end`: This is the same thing as `steps(1, end)`. It means that every
    change happens at the end of each interval.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: animation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `animation` CSS property is the shorthand for `animation-name`, `animation-duration`,
    `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`,
    `animation-fill-mode`, and `animation-play-state`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For a simple animation to work, we need at least two properties: `animation-name`
    and `animation-duration`.'
  prefs: []
  type: TYPE_NORMAL
- en: If you feel overwhelmed by all these properties, relax. Let me break them down
    for you in simple bits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `animation` longhand, the code would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `animation` shorthand, which is the recommended syntax, the code
    would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This will make a box go from its red background to black in 2 seconds, and then
    stop.
  prefs: []
  type: TYPE_NORMAL
- en: Final CSS code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's see how all the animation properties look in one final example showing
    both the longhand and shorthand styles.
  prefs: []
  type: TYPE_NORMAL
- en: Longhand style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Shorthand style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `animation-duration` property will always be considered first rather than
    `animation-delay`. All other properties can appear in any order within the declaration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a demo in **CodePen**: [http://tiny.cc/animation](http://tiny.cc/animation)'
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CSS background properties handle the display of background effects on HTML
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: background-attachment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `background-attachment` CSS property defines how the background of an element
    scrolls relative to its containing parent, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are three values: `scroll`, `fixed`, and `local`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scroll`: The background does not move within its container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fixed`: The background stays fixed to the viewport, no matter what'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local`: The background scrolls within its container and the viewport'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a demo in CodePen: [http://tiny.cc/css-background](http://tiny.cc/css-background)'
  prefs: []
  type: TYPE_NORMAL
- en: background-blend-mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `background-blend-mode` CSS property specifies how the background image
    of an element should blend with its background color, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are 18 possible blend mode values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`color`: Hue and saturation from the top color prevail, but the luminosity
    of the bottom color is added. Gray levels are preserved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color-burn`: The final color is the result of taking the bottom color and
    inverting it, dividing the value by the top color, and then inverting that value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color-dodge`: The final color is the result of dividing the bottom color with
    the inverse of the top one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`darken`: The final color is the result of taking the darkest value per color
    in each channel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`difference`: The final color is the result of taking the lighter color and
    subtracting the darker color of the background image and background color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exclusion`: The result is similar to the `difference`, but with lower contrast.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hard-light`: If the bottom color is darker, then the result is `multiply`.
    However, if the bottom color is lighter, the result is `screen`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hue`: Takes the hue of the top color, and the saturation and luminosity of
    the bottom color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inherit`: The final color inherits the blend mode of its parent container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initial`: This is the default value without any blending.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lighten`: The result is the lightest values per color from each channel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`luminosity`: The result is the luminosity of the top color, and the hue and
    saturation of the bottom one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multiply`: Multiply the top and bottom colors. This is the same effect as
    printing the colors on a translucent film and laying them one on top of the other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`normal`: The final color is the color on top, regardless of the color underneath
    it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overlay`: The final color is `multiply` if the bottom color is darker. And
    it would be `screen` if the bottom color is lighter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`saturation`: The final color is the saturation of the top color plus the hue
    and luminosity of the bottom one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`screen`: Invert both the top and bottom colors, multiply them, and then invert
    that final color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`soft-light`: Same as `hard-light` attribute but softer, like pointing a diffused
    light on the final color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following example, we will declare two backgrounds, an image and a color,
    and then apply a blend mode to them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS with longhand**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '**CSS with shorthand**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that in the second example, the path to the image is not inside quotes.
    The quotes, single [`''`] or double [`""`], are optional.
  prefs: []
  type: TYPE_NORMAL
- en: CSS-Tricks has a great Pen showing all these blend modes. However, I forked
    it to improve a few things on it.
  prefs: []
  type: TYPE_NORMAL
- en: So, check out the CodePen demo with all the blend modes at [http://tiny.cc/background-blend-mode](http://tiny.cc/background-blend-mode)
  prefs: []
  type: TYPE_NORMAL
- en: background-clip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `background-clip` CSS property helps define whether an element''s background
    extends below its border or not, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are four values: `inherit`, `border-box`, `padding-box`, and `content-box`.'
  prefs: []
  type: TYPE_NORMAL
- en: inherit
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This takes the value from its parent element.
  prefs: []
  type: TYPE_NORMAL
- en: border-box
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This makes the background cover the entire container, including the border.
  prefs: []
  type: TYPE_NORMAL
- en: padding-box
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This makes the background extend only up to where the border starts.
  prefs: []
  type: TYPE_NORMAL
- en: content-box
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This works like `border-box`, but it will take into consideration any padding,
    thus creating a gap between the border and the background.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a demo in CodePen: [http://tiny.cc/background-clip](http://tiny.cc/background-clip)'
  prefs: []
  type: TYPE_NORMAL
- en: background-color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `background-color` CSS property defines the solid background color of an
    element, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Also, `transparent` is actually a color in CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we wanted to set a gradient background color, we'd have to use the `background-image`
    property instead. This is because gradients are actually images.
  prefs: []
  type: TYPE_NORMAL
- en: 'The color value can be defined using any of the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Named color
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hexadecimal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RGB and RGBa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HSL and HSLa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: background-image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `background-image` CSS property sets an image or gradient in the background
    of an element, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, it could also look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property supports the JPG, PNG, GIF, SVG, and WebP image formats.
  prefs: []
  type: TYPE_NORMAL
- en: We can also use the `none` value to declare the absence of an image.
  prefs: []
  type: TYPE_NORMAL
- en: An element can also have several background images in a single declaration.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to gradients, there are two styles: **Linear** and **Radial**.'
  prefs: []
  type: TYPE_NORMAL
- en: Linear
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Its syntax is `linear-gradient`. These gradients can go vertical, horizontal,
    or diagonal.
  prefs: []
  type: TYPE_NORMAL
- en: Radial
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Its syntax is `radial-gradient`. These gradients are circular in nature, and
    by default, they will adapt to an element's dimension. For example, if the element
    is a perfect square, it would make a perfect circular radial gradient. However,
    if the element is a rectangle, then the radial gradient would look like an oval.
  prefs: []
  type: TYPE_NORMAL
- en: We can add as many colors in a gradient as we want or need to. Unless it is
    strictly necessary, I recommend that you steer away from doing so, as it can have
    a negative impact on browser performance.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, in order to give us more control over the gradients, we can define
    where a gradient color stops so that the following one can start. This is called
    **color stops**. Color stops can be defined in pixels or percentages. Percentages
    are more commonly used because of their relative nature, which helps maintain
    the integrity and proportions of the gradients.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: background-origin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `background-origin` CSS property defines how the background gets rendered
    inside an element, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property works similarly to the `background-clip` CSS property, except
    that with `background-origin`, the background is resized instead of clipped.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four values: `border-box`, `padding-box`, `content-box`, and `inherit`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`border-box`: The background extends all the way to the edge of the container,
    but under the border'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding-box`: The background extends to meet the border edge to edge'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content-box`: The background is rendered inside the content box'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inherit`: This is the default value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a demo in CodePen: [http://tiny.cc/background-origin](http://tiny.cc/background-origin)'
  prefs: []
  type: TYPE_NORMAL
- en: background-position
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `background-position` CSS property allows us to place the background (image
    or gradient) anywhere within its parent container, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can use three different types of values: predefined *keywords*, *percentage*,
    and *length*.'
  prefs: []
  type: TYPE_NORMAL
- en: Predefined keywords
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Values such as `left`, `right`, `top`, and `bottom` are the predefined keywords.
  prefs: []
  type: TYPE_NORMAL
- en: Percentages
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Values such as `5%` and `80%`.
  prefs: []
  type: TYPE_NORMAL
- en: Length
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Values such as `15px` `130px`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This property requires you to declare two values: the first value relates to
    the *x* axis (horizontal) and the second value to the *y* axis (vertical).'
  prefs: []
  type: TYPE_NORMAL
- en: The default value is `0 0`; which is exactly the same as `left top`.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a demo in CodePen: [http://tiny.cc/background-position](http://tiny.cc/background-position)'
  prefs: []
  type: TYPE_NORMAL
- en: background-repeat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `background-repeat` CSS property has two functions:'
  prefs: []
  type: TYPE_NORMAL
- en: To define whether a background image is repeated or not
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To determine how the background image is repeated
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, it could also look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This property only works if `background-image` has been declared.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four values: `repeat`, `repeat-x`, `repeat-y`, and `no-repeat`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`repeat`: The background image will repeat in both *x* and *y* axes. This will
    completely fill the container. This is the default value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repeat-x`: The background image will only repeat in the *x* axis, hence, horizontally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repeat-y`: The background image will only repeat in the *y* axis, hence, vertically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no-repeat`: The background image will not be repeated and will only display
    one instance of it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a demo in CodePen: [http://tiny.cc/background-repeat](http://tiny.cc/background-repeat)'
  prefs: []
  type: TYPE_NORMAL
- en: background-size
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `background-size` CSS property defines the size of the background image,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are five values: a *length* value, a *percentage* value, `auto`, `contain`,
    and `cover`.'
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: auto
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This value scales the image in the corresponding direction (horizontal or vertical)
    in order to maintain its aspect ratio and not deform it.
  prefs: []
  type: TYPE_NORMAL
- en: contain
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This value makes sure the image can be seen completely within its parent container.
    The image does not bleed on the edges; it's "contained".
  prefs: []
  type: TYPE_NORMAL
- en: cover
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This value scales the image and takes the longest dimension (horizontal or vertical).
    It makes sure that the image completely covers that dimension. Bleeding can occur
    if the container and the image have different aspect ratios.
  prefs: []
  type: TYPE_NORMAL
- en: When declaring the size of the background, we can use either one or two values.
    The first value is the *width*, and the second is the *height* of the background
    image.
  prefs: []
  type: TYPE_NORMAL
- en: Using one value means that the second value is set to `auto`. When using two
    values, we are then defining the `width` and `height` values of the background
    image.
  prefs: []
  type: TYPE_NORMAL
- en: We can use any measurement unit we want. Pixels, percentages, and the `auto`
    value are the most commonly used though.
  prefs: []
  type: TYPE_NORMAL
- en: We can even combine multiple images in the same container. The background shorthand
    property is the best way to handle this situation.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a demo in CodePen: [http://tiny.cc/background-size](http://tiny.cc/background-size)'
  prefs: []
  type: TYPE_NORMAL
- en: background
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `background` CSS property is the shorthand in which we can list all background
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'I often see many developers write the longhand version of the property to declare
    a single value, such as a color. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Although this is totally fine, I prefer to use the shorthand version for practically
    everything:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: This is a bit more scalable because if we need to add any other values, all
    we need to do is add the new value to this declaration rather than writing a separate
    one. However, at the end, it's all a matter of personal style.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Box model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every element in the web is a square, and as such, it has intrinsic characteristics:
    width, height, padding, border, and margin. All these characteristics, put together,
    make the box model.'
  prefs: []
  type: TYPE_NORMAL
- en: The almighty box model is one of the most talked about subjects in the CSS industry
    due to IE6 and IE7 being the most popular browsers back in the day. However, they
    had major issues interpreting this simple CSS concept. This meant the web designers
    and developers had to come up with all sorts of tricks to get around such a problem.
    Those days are now gone, for the most part at least.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the box model properties.
  prefs: []
  type: TYPE_NORMAL
- en: width
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `width` CSS property specifies the width of an element''s content area,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, it could also look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The content area is inside the padding, border, and margin of the element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s talk about the most used values and keywords: the *length* value, *percentage*
    value, `auto`, `max-content`, `min-content`, and `fit-content`.'
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is basically when we use one of the following units: `px`, `em`, `in`,
    `mm`, `cm`, `vw`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: auto
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a keyword value that allows the browser to choose the width of the element.
  prefs: []
  type: TYPE_NORMAL
- en: max-content
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a keyword value that makes the container take the width of its content.
  prefs: []
  type: TYPE_NORMAL
- en: min-content
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a keyword value that makes the container as small as possible depending
    on its content.
  prefs: []
  type: TYPE_NORMAL
- en: fit-content
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a keyword value that makes the container match the width of its content.
    This works great on containers with unknown or variable width.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on MDN at [http://tiny.cc/mdn-width](http://tiny.cc/mdn-width)
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a demo in CodePen: [http://tiny.cc/width](http://tiny.cc/width)'
  prefs: []
  type: TYPE_NORMAL
- en: height
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `height` CSS property specifies the height of an element''s *content area*,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *content area* is inside the padding, border, and margin of the element.
  prefs: []
  type: TYPE_NORMAL
- en: The most used values are a *length* value, a *percentage* value, and `inherit`.
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is basically when we use one of the following units: `px`, `em`, `in`,
    `mm`, `cm`, `vw`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: inherit
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With this keyword, the element will inherit its parent container's height.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on MDN at [http://tiny.cc/mdn-height](http://tiny.cc/mdn-height)
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: padding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `padding` CSS property creates a space on all four sides of an element
    on the inside, between its content and the edges, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, it could also look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Borders and margins are outside of the content area and do not get affected
    by the padding.
  prefs: []
  type: TYPE_NORMAL
- en: The `padding` property is the shorthand for `padding-top`, `padding-right`,
    `padding-bottom`, and `padding-left`. We can use one, two, three, or all four
    values.
  prefs: []
  type: TYPE_NORMAL
- en: '**One value**: This means that all four sides have the same value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Two values**: The first value is for Top and Bottom. The second value is
    for Left and Right.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Three values**: The first value is for Top. The second value is for Left
    and Right. The third value is for Bottom.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Four values**: The first value is for Top. The second is for Right. The third
    is for Bottom. The fourth is for Left.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Negative values are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: margin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `margin` CSS property defines an outside space on one, two, three or all
    four sides of an element, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, it could also look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `margin` property is the shorthand for `margin-top`, `margin-right`, `margin-bottom`,
    and `margin-left`. Just like with `padding`, we can use one, two, three, or all
    four values.
  prefs: []
  type: TYPE_NORMAL
- en: '**One value**: This means that all four sides have the same padding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Two values**: The first value is for Top and Bottom. The second value is
    for Left and Right.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Three values**: The first value is for Top. The second value is for Left
    and Right. The third value is for Bottom.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Four values**: The first value is for Top. The second is for Right. The third
    is for Bottom. The fourth value is for Left.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Negative values are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Collapsing margins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a particular behavior with the margins. If two stacked elements have
    top and bottom margins, the margins are not added. Instead, the larger value is
    the only one taken into account.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we have an `<h1>` heading and a `<p>` paragraph. The heading has
    a bottom margin of `20px`, and the paragraph has a top margin of `10px`.
  prefs: []
  type: TYPE_NORMAL
- en: Our senses immediately tell us that the total margin is `30px`, but in reality,
    because vertical margins collapse, only the largest value is considered, in this
    case, `20px`.
  prefs: []
  type: TYPE_NORMAL
- en: The reason for this is that many elements, such as headings and paragraphs in
    our example, have both top and bottom margins. So, having the margins collapse
    allows the content and layout to maintain consistency and avoid creating undesired
    extra spacing between stacked elements.
  prefs: []
  type: TYPE_NORMAL
- en: This is also good because it saves us the effort of having to "negate" margins
    on every stacked element that has top and bottom margins, again, to avoid creating
    those extra spaces.
  prefs: []
  type: TYPE_NORMAL
- en: The way I see it, is that collapsing margins is an editorial feature of the
    CSS margin property. I hope that the prior explanations help embrace this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a demo in CodePen: [http://tiny.cc/collapsing-margins](http://tiny.cc/collapsing-margins)'
  prefs: []
  type: TYPE_NORMAL
- en: border
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `border` CSS property is the shorthand that defines an element's border
    thickness, style, and color.
  prefs: []
  type: TYPE_NORMAL
- en: The `border` property and all its sister properties (`border-width`, `border-style`,
    and `border-color`) and variations are self-explanatory, so there's no need for
    a *Description* section like in prior properties.
  prefs: []
  type: TYPE_NORMAL
- en: The CSS example ahead will help clarify the use of these properties.
  prefs: []
  type: TYPE_NORMAL
- en: border-width
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the thickness of the border. It can be declared using `px` or `em`,
    but `px` yields more controllable results.
  prefs: []
  type: TYPE_NORMAL
- en: border-style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This defines the type of line or no line at all. It supports the following
    values: `dashed`, `dotted`, `double`, `groove`, `hidden`, `inset`, `none`, `outset`,
    `ridge`, and `solid`.'
  prefs: []
  type: TYPE_NORMAL
- en: border-color
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This defines the color of the line. It supports all color modes: HEX, RGB,
    RGBa, HSL, HSLs, and color name.'
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that all HTML elements are squares, so we can target any side of
    an element with `border-top-color`, `border-right-color`, `border-bottom-color`,
    or `border-left-color`.
  prefs: []
  type: TYPE_NORMAL
- en: The order of the values in the shorthand does not affect the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the top rule in *shorthand syntax* accomplishes exactly
    the same accomplishment as the bottom rule with the *longhand syntax*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: box-sizing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `box-sizing` CSS property allows us to change the way browsers understand
    the box model by default, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two values: `content-box` and `border-box`.'
  prefs: []
  type: TYPE_NORMAL
- en: content-box
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value. The padding, border, and margin values are added
    to the final width and height of the element. This value is rarely used exactly
    because of the behavior I just described.
  prefs: []
  type: TYPE_NORMAL
- en: border-box
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: On the other hand, since this value changes the box model, the padding and border
    are not added to the final width and height of the element but only to the margin.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a demo in CodePen: [http://tiny.cc/box-sizing](http://tiny.cc/box-sizing)'
  prefs: []
  type: TYPE_NORMAL
- en: max-height
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `max-height` CSS property defines the maximum height of an element, and
    it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `max-height` attribute overrides the `height` property. Negative values
    are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: The most used values are a *length* value and a *percentage* value.
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on MDN at [http://tiny.cc/mdn-max-height](http://tiny.cc/mdn-max-height)
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: max-width
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `max-width` CSS property defines the maximum width of an element, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `max-width` attribute overrides the `width` property. Negative values are
    not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: The most used values are a *length* value and a *percentage* value.
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on MDN at [http://tiny.cc/mdn-max-width](http://tiny.cc/mdn-max-width)
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: min-height
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `min-height` CSS property defines the minimum height of an element, and
    it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `min-height` attribute overrides the `height` and `max-height` properties.
    Negative values are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: The most used values are a *length* value and a *percentage* value.
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on MDN at [http://tiny.cc/mdn-min-height](http://tiny.cc/mdn-min-height)
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: min-width
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `min-width` CSS property defines the minimum width of an element, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `min-width` attribute overrides the `width` and `max-width` properties.
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: The most used values are a *length* value and a *percentage* value.
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on MDN at [http://tiny.cc/mdn-min-width](http://tiny.cc/mdn-min-width)
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: object-fit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `object-fit` CSS property defines how a *replaced element* fits inside
    its content box, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *replaced element* is an HTML element whose content and dimensions are intrinsic
    (defined by the element itself) and are not defined by CSS or by its context or
    surroundings.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of *replaced elements* are `<img>`, `<video>`, `<audio>`, `<canvas>`,
    `<iframe>`, `<textarea>`, `<object>`, `<input>`, `<button>`, `<br>`, and `<hr>`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the most important characteristic of replaced elements is that we cannot
    apply generated content to them via CSS using the `:before` or `:after` pseudo-element
    selectors.
  prefs: []
  type: TYPE_NORMAL
- en: This property can come in handy when we want a group of thumbnails to have the
    same width and height, but without distorting the images. However, the images
    for the thumbnails are uploaded by users, which means that the uploaded images
    can be of all sizes and different aspect ratios. The `object-fit` CSS property
    can help us have control of the thumbnails in such a situation.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The content inside the replaced element is centered vertically and horizontally
    by default. However, the content can be repositioned using the `object-position`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four keyword values: `contain`, `cover`, `fill`, `none`, and `scale-down`.'
  prefs: []
  type: TYPE_NORMAL
- en: contain
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The aspect ratio of the content inside the replaced element is preserved. This
    content is enlarged as much as possible until it reaches its maximum size defined
    by its width and height. It's possible to see some "unfilled" areas of the element
    due to preservation of the aspect ratio.
  prefs: []
  type: TYPE_NORMAL
- en: cover
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The aspect ratio of the content inside the replaced element is preserved. This
    content is enlarged as much as possible until it completely fills or "covers"
    the entire content box.
  prefs: []
  type: TYPE_NORMAL
- en: fill
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The aspect ratio of the content inside the replaced element is not necessarily
    preserved. This means that when filling the entire content box, the content of
    the replaced element can be stretched or shrunk during the scaling up or scaling
    down of the content.
  prefs: []
  type: TYPE_NORMAL
- en: none
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: No resizing is done.
  prefs: []
  type: TYPE_NORMAL
- en: scale-down
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This acts as if `none` or `contain` were declared. The idea here is that the
    browser will try to figure out the smallest concrete size of the content inside
    the replaced element in order to make it fit in its content box while preserving
    the aspect ratio of the content inside the replaced element.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a demo in CodePen: [http://tiny.cc/object-fit-position](http://tiny.cc/object-fit-position)'
  prefs: []
  type: TYPE_NORMAL
- en: object-position
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `object-position` CSS property defines the location of the content of the
    replaced element, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As described in the Tip of the object-fit CSS property, by default, the content
    of the replaced element is placed in the center of the content box, which is 50%
    50%.
  prefs: []
  type: TYPE_NORMAL
- en: Now, this property behaves similarly to the `background-position` CSS property.
    This means, we can declare either *one* or *two* values.
  prefs: []
  type: TYPE_NORMAL
- en: The values are either *length* or *percentages* of *keyword* values `top`, `right`,
    `bottom`, or `left`. Negative values are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a demo in CodePen: [http://tiny.cc/object-fit-position](http://tiny.cc/object-fit-position)'
  prefs: []
  type: TYPE_NORMAL
- en: Border radius
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this property, we can not only make rounded corners but also circles, ellipses,
    and other interesting shapes.
  prefs: []
  type: TYPE_NORMAL
- en: I admit that the term "rounded corners" is far less obscure than "border radius".
  prefs: []
  type: TYPE_NORMAL
- en: border-radius
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `border-radius` CSS property allows us to make rounded corners on almost
    any HTML element, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `border-radius` attribute is also the shorthand syntax for the `border-top-left-radius`,
    `border-top-right-radius`, `border-bottom-right-radius`, and `border-bottom-left-radius`
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using either a circle or an ellipse, we can create rounded corners:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Description](img/B03289_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two values: a *length* value and a *percentage* value.'
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: We can use, one, two, three, or four values in the same declaration. We can
    also use a slash symbol, "`/`", to separate groups of values.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, the background color or texture "bleeds" over the rounded corners
    in some browsers. Use `background-clip` to fix this issue.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a demo in CodePen: [http://tiny.cc/css-border-radius](http://tiny.cc/css-border-radius)'
  prefs: []
  type: TYPE_NORMAL
- en: Unit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CSS unit is a type of data with which we can define measurements, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, it could also look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: There is no space between the number and the unit.
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, the unit isn't required after the number `0` (zero).
  prefs: []
  type: TYPE_NORMAL
- en: There are several types of length units, such as described in the following
    explanations.
  prefs: []
  type: TYPE_NORMAL
- en: Relative length units
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: They are dependent on another element's length (usually, a parent element in
    the DOM) that relates directly to the element in question. When the other element's
    length changes, the length of the element in question maintains the defined proportion.
    In other words, there is no need to declare the length of the child element again.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Relative units are always the best way to go if we want to build scalable systems.
    Setting values in a single element and then modifying that single element to affect
    the whole system saves a lot of time and many headaches.
  prefs: []
  type: TYPE_NORMAL
- en: ex
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ex` suffix stands for an element's x-height. The `ex` CSS unit refers to
    the height of lowercase *x*. This height is dependent on the font. In other words,
    the heights can be different if we are using Arial than if we are using Verdana,
    even if the value is the same.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: ch
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ch` suffix stands for character. The `ch` CSS unit refers to the width
    of the character `0` (zero). This width is dependent on the font. In other words,
    the widths can be different if we are using Arial than if we are using Verdana,
    even if the value is the same.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: em
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `em` suffix stands for the pronunciation of the letter *m*, and it represented
    the width of the lower case *m* in the print and typography industries. In CSS,
    the `em` unit represents a calculation of an element's `font-size` property.
  prefs: []
  type: TYPE_NORMAL
- en: This unit can be used together with many CSS properties, but the most common
    use is to define `font-size` elements.
  prefs: []
  type: TYPE_NORMAL
- en: However, many web designers and developers prefer to use `rem` units to avoid
    the inheritance issue `em` units have in nested elements (3-4 or more levels deep).
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: rem
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `rem` suffix stands for the abbreviation of the term *root element*. The
    `rem` CSS unit represents the font size of the root element in a markup document.
    A markup document is not only an HTML document; it can also be an XML, SVG, or
    other markup-based document.
  prefs: []
  type: TYPE_NORMAL
- en: Granted that in this guide, we are referring to an HTML document, and since
    this is the case, the root element is the `<html>` element.
  prefs: []
  type: TYPE_NORMAL
- en: A very common practice is to set the font size on the `<html>` element to `62.5%`.
    This way, when we're setting our font sizes for other elements, we can still think
    in pixels, but write in `rem` units to maintain the relative font size when scaling
    up or down our document in our responsive projects.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: The % sign
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `%` sign is what it implies, percentage. In CSS `em` units and percentage
    units yield the same result. Percentage values, such as any of the other relative
    units, are dependent on another value, usually that of the parent element.
  prefs: []
  type: TYPE_NORMAL
- en: Like all other relative units, percentages and responsive web design go hand
    in hand.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Viewport-relative length units
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These units relate to the viewport. If the viewport's dimensions change, the
    properties using viewport-relative length values adapt to the new dimensions of
    the view window.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These units are a godsend in my book. They do what we would expect of fonts
    in a responsive world: enlarge or shrink according to the width or height of the
    viewport.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's check them out.
  prefs: []
  type: TYPE_NORMAL
- en: vh
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `vh` suffix stands for *viewport height*. The `vh` CSS unit relates to the
    height of the viewport. The value of `vh` is 1/100th of the height of the viewport.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we declare the `font-size` of an element as `1vh`, and the browser
    window is `500px`, the font size is then `5px`.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: vw
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `vw` suffix stands for *viewport width*. The `vw` CSS unit relates to the
    width of the viewport. The value of `vw` is 1/100th of the width of the viewport.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we declare the `font-size` of an element as `1vh`, and the browser
    window is `1400px`, the font size is then `14px`.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: vmin
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `vmin` suffix stands for *viewport minimum*. The `vmin` CSS unit relates
    to the smallest value of the viewport, of either its height or its width. The
    value of `vmin` is 1/100th of the side with the smallest length of the viewport.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we declare the `font-size` of an element as `1vmin` and the
    browser's viewport is 600 × 800, the font size is then `6px`.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: vmax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `vmax` suffix stands for viewport maximum. The `vmax` CSS unit relates to
    the largest value of the viewport, of either its height or its width. The value
    of `vmax` is 1/100th of the side with the largest length of the viewport.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we declare the `font-size` of an element as `1vmax`, and the
    browser's viewport is 600 × 800, the font size is then `8px`.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Absolute length units
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These units represent a physical dimension of an element. Some units in CSS
    come from the printing world, and although it's not common to use them, it's important
    to know as much as we can about them.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These types of units relate directly to a physical measurement. They work best
    when the output environment is known, like in print.
  prefs: []
  type: TYPE_NORMAL
- en: The most used absolute unit is the pixel (`px`). A pixel is known to be a single
    dot on a screen. The thing is that there is no industry standard for the size
    of that dot.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, a pixel in a standard LED/LCD display (for example, a monitor
    or a TV) has different sizes than a pixel in a high-density screen. Even the pixel
    sizes between high-density screens are different.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see what each abbreviation means, and at the end of the section, we'll
    be able to see a single example with all the units.
  prefs: []
  type: TYPE_NORMAL
- en: cm
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `cm` suffix stands for *centimeter*.
  prefs: []
  type: TYPE_NORMAL
- en: mm
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `mm` suffix stands for *millimeter*.
  prefs: []
  type: TYPE_NORMAL
- en: in
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `in` suffix stands for *inch*.
  prefs: []
  type: TYPE_NORMAL
- en: pc
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `pc` suffix stands for *pica*.
  prefs: []
  type: TYPE_NORMAL
- en: pt
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `pt` suffix stands for *point*.
  prefs: []
  type: TYPE_NORMAL
- en: px
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `px` suffix stands for *pixel*.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: All the following values represent units that resemble `16px` font size, but
    in different length units.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Angle data types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These units represent angle values.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These units are used whenever we want to rotate an element via the `transform`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: Aside from the `deg` data type, the other angle data type units aren't really
    that common.
  prefs: []
  type: TYPE_NORMAL
- en: Let's check them out though.
  prefs: []
  type: TYPE_NORMAL
- en: deg
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `deg` suffix stands for *degrees*.
  prefs: []
  type: TYPE_NORMAL
- en: grad
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `grad` suffix stands for *gradients*.
  prefs: []
  type: TYPE_NORMAL
- en: rad
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `rad` suffix stands for *radians*.
  prefs: []
  type: TYPE_NORMAL
- en: turn
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `turn` suffix is not an abbreviation; it's the actual word *turn*. There
    is one turn in a full circle, so if we're going to make a horizontal rectangle
    rotate 90 degrees to make it vertical, we would define it as `.25turn`, because
    it's ¼th of the complete turn.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'All the following values represent units that resemble a 90-degree turn of
    an element but in different angle data types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Resolution units
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These units represent the screen density of pixels on any given output or device.
    Unlike relative and absolute units, it's necessary to add the unit to the value
    `0` (zero).
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever we need to consider density screens, resolution units will do the heavy
    lifting for us. They are used in media queries.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how they work.
  prefs: []
  type: TYPE_NORMAL
- en: dpi
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `dpi` suffix stands for *dots per inch*. Screens contain 72 or 96 dpi, whereas
    a printed document has much larger dpi. 1 inch = 2.54 cm, so `1dpi`≈ `0.39dpcm`.
  prefs: []
  type: TYPE_NORMAL
- en: dpcm
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `dpcm` suffix stands for *dots per centimeter*. 1 inch = 2.54 cm, so `1dpcm`≈
    `2.54dpi`.
  prefs: []
  type: TYPE_NORMAL
- en: dppx
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `dppx` suffix stands for *dots per pixel*. `1dppx` = `96dpi` due to the
    1:96 fixed ratio of CSS pixels.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Duration units
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These units represent the duration of an animation in either seconds or milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These units are quite straightforward and are only used in CSS animations.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may think that because all other units use two, three, or four letters
    in their abbreviation (`px`, `dip`, `dpcm`, and so on). Always remember: when
    declaring the seconds unit only one `s` is used. Using `sec` or `secs` is incorrect.'
  prefs: []
  type: TYPE_NORMAL
- en: ms
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ms` suffix stands for *milliseconds*. `1000ms`= 1 second.
  prefs: []
  type: TYPE_NORMAL
- en: s
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `s` suffix stands for *seconds*. `1s` = 1000 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Column
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS columns is the most versatile way to fluidly distribute long strings of
    content while retaining scalability. If the content grows or is reduced, it would
    automatically reflow in the available space of the declared columns.
  prefs: []
  type: TYPE_NORMAL
- en: Although not necessarily ideal, actual elements such as DIVs can also be distributed
    in columns with the CSS `columns` property.
  prefs: []
  type: TYPE_NORMAL
- en: Let's dive in.
  prefs: []
  type: TYPE_NORMAL
- en: column-count
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `column-count` CSS property defines the number of columns of an element,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can use either a *number* value or the keyword `auto`.
  prefs: []
  type: TYPE_NORMAL
- en: When we use the `auto` keyword, we're letting the browser decide how many columns
    can fit within the available space. This is a very powerful and robust solution
    for responsive layouts. However, it is required that we declare `column-width`
    for this to work.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: column-fill
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `column-fill` CSS property controls how the content is assigned across
    columns, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two keywords: `auto` and `balance`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`auto`: This means that the content is filled sequentially. Basically, as space
    becomes available, the content will start filling it. This makes the parent container
    grow vertically by making the columns taller in order to fit the content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`balance`: This means that the content will be equally distributed in the available
    columns. For this to work, we need to declare a height on the parent container.
    This will make sure that the columns are of the specific height as well. The problem
    with this is that the content will just keep flowing outside the parent container
    if the parent container becomes too small.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: column-gap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `column-gap` CSS property defines the space between columns. In editorial
    terms, this space is the "gutter", and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two values: the `auto` keyword and a *length* value.'
  prefs: []
  type: TYPE_NORMAL
- en: '`auto`: This is the default value defined by the spec, which is `1em`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Length value`: We define this using `px` or `em`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: column-rule
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `column-rule` CSS property creates or draws a vertical line that "separates"
    the columns, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can define three aspects of the `column-rule` CSS property: the thickness
    or `width`; the `style`, which are the same styles of the `border-style` property;
    and `color`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `column-rule` CSS property is the shorthand of the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column-rule-width`: This can be just a length value (a number), or we can
    use any of these keywords: `thin`, `medium`, or `thick`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column-rule-style`: This can be any of the `border-style` values, such as
    `dotted`, `dashed`, `inset`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column-rule-color`: This is a color defined in any format: `HEX`, `RGB`, or
    `HSL`. It also supports alpha channel, so `RGBa` and `HSLa` are allowed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: column-rule-color
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `column-rule-color` CSS property defines the color of the dividing line
    between columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Colors can be defined in any format: `HEX`, `RGB`, or `HSL`. It also supports
    alpha channel, so `RGBa` and `HSLa` are allowed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: column-rule-style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `column-rule-style` CSS property defines the style of the dividing line
    between columns.
  prefs: []
  type: TYPE_NORMAL
- en: It can be any of the `border-style` values, for example, `dotted`, `dashed`,
    `inset`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: column-rule-width
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `column-rule-width` CSS property defines the thickness (width) of the dividing
    line between columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be just a length value (a number), or we can use any of these keywords:
    `thin`, `medium`, or `thick`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: column-span
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `column-span` CSS property makes an element that's supposed to behave like
    a column into an element that spans across all columns. The element is still a
    "column", but it now expands the full width of the columns, like a block element.
  prefs: []
  type: TYPE_NORMAL
- en: There are two values, `none` and `all`, which are self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a demo in CodePen: [http://tiny.cc/column-span](http://tiny.cc/column-span)'
  prefs: []
  type: TYPE_NORMAL
- en: column-width
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `column-width` CSS property defines the width of the columns.
  prefs: []
  type: TYPE_NORMAL
- en: When we define the width of the columns, the browser will automatically add
    or remove columns depending on the available space.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we say our columns are `200px` wide and the parent container
    is `800px`, then the browser will include three columns (taking into account the
    default `column-gap` of `1em`). However, if the container is at least `450px`
    wide, the browser will fit two columns.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `columns` CSS property is the shorthand that we can use to set `column-width`
    and `column-count`.
  prefs: []
  type: TYPE_NORMAL
- en: It can accept either one or two values in the same declaration. The order of
    the values doesn't matter, but it's a good measure to declare `column-width` first
    and `column-count` second.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Flexible box (flexbox)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Flexbox is one of the most useful CSS modules when it comes to arranging elements
    in a container. Flexbox allows elements to grow or shrink, depending on the available
    space in order to maintain the integrity of layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Using Flexbox is the next step after using float-based layouts, not only because
    it can be easier to work with and wrap our heads around its concepts, but also
    because it may result in less markup and CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A powerful partner to Flexbox is the Grid Layout, which is still in its early
    stages of development, and browser support is scarce. Since Grid Layout is out
    of the scope of this section, you can read more on Rachel Andrew's project site,
    Grid By Example, at [http://gridbyexample.com/](http://gridbyexample.com/)
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we dive into the Flexbox properties, the following diagram will help
    us understand the terminology and orientations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flexible box (flexbox)](img/B03289_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's dive into Flexbox properties.
  prefs: []
  type: TYPE_NORMAL
- en: flex-grow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This property defines how much a flex item should grow relative to other flex
    items via a flex grow factor, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The flex grow factor is a *number* without a unit. Negative values are invalid.
  prefs: []
  type: TYPE_NORMAL
- en: The flex item will grow by the defined grow factor as long as there is space
    to do so. It can grow on both the main or cross axes, depending on the direction
    defined by the `flex-direction` property, which we'll talk about in a minute.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: flex-shrink
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This property defines how much a flex item should shrink relative to other
    flex items via a flex shrink factor, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The flex shrink factor is a *number* without a unit. Negative values are invalid.
  prefs: []
  type: TYPE_NORMAL
- en: This is used when the sum of all flex items exceeds the size of the flex container.
    This could be horizontally or vertically (main axis or cross axis). By assigning
    flex shrink factors to one or multiple flex items, we can make them fit the size
    of the flex container.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: flex-basis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This property defines the initial width of a flex item, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: flex-basis accepts a *length* value with either an absolute or a relative length
    unit (`px`, `em`, `%`, and so on) or the `content` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: When using `content`, the container will adapt to the content inside of it.
    Negative values are invalid.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: flex-direction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `flex-direction` CSS property defines the direction of the flex items inside
    a flex container, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property sets the direction in which flex items can be laid out, either
    horizontal with `row` or vertical with `column`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four values: two for horizontal and two for vertical:'
  prefs: []
  type: TYPE_NORMAL
- en: row
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This lays out the flex items on a horizontal axis. This is the default value.
  prefs: []
  type: TYPE_NORMAL
- en: When flex items are laid out with `row`, they stack side by side from left to
    right.
  prefs: []
  type: TYPE_NORMAL
- en: row-reverse
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the same as `row` but in reverse. When flex items are laid out with
    `row-reverse`, they stack side by side from right to left.
  prefs: []
  type: TYPE_NORMAL
- en: column
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This lays out the flex items on a vertical axis.
  prefs: []
  type: TYPE_NORMAL
- en: When flex items are laid out with `column`, they stack one on top of the other,
    starting from top to bottom.
  prefs: []
  type: TYPE_NORMAL
- en: column-reverse
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the same as `column` but in reverse.
  prefs: []
  type: TYPE_NORMAL
- en: When flex items are laid out with `column-reverse`, they stack one on top of
    the other, starting from bottom to top.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `flex-direction` property is applied to the flex container, not the flex
    items.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: flex-wrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `flex-wrap` CSS property defines whether a flex item should wrap or not
    when the container becomes too small, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property accepts one of three keyword values: `nowrap`, `wrap` and `wrap-reverse`.'
  prefs: []
  type: TYPE_NORMAL
- en: nowrap
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value. It tells the flex item to not wrap.
  prefs: []
  type: TYPE_NORMAL
- en: wrap
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This tells the flex element to wrap.
  prefs: []
  type: TYPE_NORMAL
- en: wrap-reverse
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This tells the flex element to wrap but in reverse.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `flex-wrap` property is applied to the flex container, not the flex items.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: flex-flow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `flex-flow` CSS property is the shorthand for the `flex-direction` and
    `flex-wrap` properties, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We now know that the `flex-direction` property defines the direction of the
    flex items in either columns or rows.
  prefs: []
  type: TYPE_NORMAL
- en: The `flex-wrap` attribute, on the other hand, defines whether the flex items
    should wrap or not when the container becomes too small.
  prefs: []
  type: TYPE_NORMAL
- en: We can specify either one or two values. The order doesn't affect the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `flex-direction` attribute can take any of its available values: `row :
    (default value)`, `row-reverse`, `column`, or `column-reverse`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `flex-wrap` attribute can take any of its available values as well: `nowrap`
    (default value),`wrap`, or `wrap-reverse`.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `flex-flow` property is applied to the flex container, not the flex items.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: align-content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `align-content` CSS property aligns lines inside a flex container as long
    as there is extra space on the cross axis, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are six values: `flex-start`, `flex-end`, `center`, `space-around`, `space-between`,
    and `stretch`.'
  prefs: []
  type: TYPE_NORMAL
- en: flex-start
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This groups the lines to the start of the container.
  prefs: []
  type: TYPE_NORMAL
- en: flex-end
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This groups the lines to the end of the container.
  prefs: []
  type: TYPE_NORMAL
- en: center
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This groups the lines to the center of the container.
  prefs: []
  type: TYPE_NORMAL
- en: space-around
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This distributes the lines evenly in the container, but the first line is placed
    at the start of the container and the last line at the end.
  prefs: []
  type: TYPE_NORMAL
- en: space-between
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This distributes the lines evenly in the container with an even amount of space
    between each line.
  prefs: []
  type: TYPE_NORMAL
- en: stretch
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value. The lines will evenly stretch to fill the whole container.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `align-content` property is applied to the flex container, not the flex
    items.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: align-items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `align-items` CSS property sets the default alignment of the flex elements
    inside the flex container, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property accepts five values: `flex-start`, `flex-end`, `center`, `baseline`,
    and `stretch`.'
  prefs: []
  type: TYPE_NORMAL
- en: flex-start
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex elements to the beginning of the container.
  prefs: []
  type: TYPE_NORMAL
- en: flex-end
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex elements to the end of the container.
  prefs: []
  type: TYPE_NORMAL
- en: center
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex elements to the center of the container and and at the
    same time, it aligns them to their center.
  prefs: []
  type: TYPE_NORMAL
- en: baseline
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex elements to the text baseline inside each flex element.
  prefs: []
  type: TYPE_NORMAL
- en: stretch
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This stretches the flex elements to fill the entire parent container.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `align-items` property is applied to the flex container, not the flex items.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: align-self
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `align-self` CSS property aligns a specific flex item within its parent
    container, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property accepts the exact values as `align-items`, and the results are
    the same as well: `flex-start`, `flex-end`, `center`, `baseline`, and `stretch`.'
  prefs: []
  type: TYPE_NORMAL
- en: flex-start
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex element to the beginning of the container.
  prefs: []
  type: TYPE_NORMAL
- en: flex-end
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex element to the end of the container.
  prefs: []
  type: TYPE_NORMAL
- en: center
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex element to the center of the container.
  prefs: []
  type: TYPE_NORMAL
- en: baseline
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex element to the text baseline inside each flex element.
  prefs: []
  type: TYPE_NORMAL
- en: stretch
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This stretches the flex elements to fill the entire parent container.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: order
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `order` CSS property is used to alter the default order of flex items within
    the same parent container, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, flex items appear in the same order they appear in the source (HTML).
    The `order` property allows us to alter the display order while maintaining their
    source order. This property accepts a *number* value without a unit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The order is defined in a logical way: The lower the number, the more ahead
    it is in the order. Items that have the same number are laid out according to
    the source document.'
  prefs: []
  type: TYPE_NORMAL
- en: The starting number is `0` (zero), not 1\. Negative values are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: justify-content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `justify-content` CSS property works only on flex items. It allows the browser
    to distribute the space in between and around the flex items based on their main
    axes.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property supports five keyword values: `flex-start`, `flex-end`, `center`,
    `space-between`, and `space-around`.'
  prefs: []
  type: TYPE_NORMAL
- en: flex-start
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value. It groups and positions the elements to the beginning
    of the container.
  prefs: []
  type: TYPE_NORMAL
- en: flex-end
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This groups and positions the elements to the end of the container.
  prefs: []
  type: TYPE_NORMAL
- en: center
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This groups and positions the elements to the center of the container.
  prefs: []
  type: TYPE_NORMAL
- en: space-between
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This spreads and positions the elements along the container and spaces them
    evenly.
  prefs: []
  type: TYPE_NORMAL
- en: The first and last flex items are flushed against the left-hand and right-hand
    sides respectively. In other words, the first and last flex items touch the left
    and right edges.
  prefs: []
  type: TYPE_NORMAL
- en: space-around
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Similar to the `space-between` property, this spreads and positions the elements
    along the container and spaces them evenly.
  prefs: []
  type: TYPE_NORMAL
- en: However, the first and last flex items do not touch the left and right edges.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: flex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `flex` CSS property is the shorthand in which we can declare the values
    for `flex-grow`, `flex-shrink`, and `flex-basis`. It's recommended that you follow
    this order when declaring the values.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: And this is how you start the first chapter about CSS Properties! We learned
    what CSS properties and vendor prefixes are.
  prefs: []
  type: TYPE_NORMAL
- en: Now, with the animation properties clear we can start working on great interactions
    for our sites and applications. We can also handle all background features, be
    positioning or even blend modes to create nice visual effects without having to
    depend on image editors of any kind.
  prefs: []
  type: TYPE_NORMAL
- en: The Box Model concept is something we can tackle easier especially knowing that
    legacy IE's have less and less impact than before. This is greatly impacted by
    how we work with CSS units since we need to understand which units work best with
    different use cases and requirements.
  prefs: []
  type: TYPE_NORMAL
- en: We learned that CSS columns are a great tool to distribute long strings of text.
    And that the mighty Flexbox is the go-to feature to arrange elements in containers.
  prefs: []
  type: TYPE_NORMAL
- en: Improving our typography and transformations are part of the next chapter, amongst
    other interesting properties.
  prefs: []
  type: TYPE_NORMAL
- en: Buckle up!
  prefs: []
  type: TYPE_NORMAL
