- en: Chapter 4. CSS Properties – Part 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS properties are characteristics of an element in a markup language (HTML,
    SVG, XML, and so on) that control their style and/or presentation. These characteristics
    are part of a constantly evolving standard from the W3C.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of a CSS property is `border-radius`:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There is an incredible number of CSS properties, and learning them all is virtually
    impossible. Adding more into this mix, there are CSS properties that need to be
    vendor prefixed (`-webkit-`, `-moz-`, `-ms-`, and so on), making this equation
    even more complex.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Vendor prefixes are short pieces of CSS that are added to the beginning of the
    CSS property (and sometimes CSS values too). These pieces of code are directly
    related to either the company that makes the browser (the "vendor") or to the
    CSS engine of the browser.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four major CSS prefixes: `-webkit-`, `-moz-`, `-ms-` and `-o-`. They
    are explained here:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '`-webkit-`: This references Safari''s engine, Webkit (Google Chrome and Opera
    used this engine in the past as well)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-moz-`: This stands for Mozilla, who creates Firefox'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-ms-`: This stands for Microsoft, who creates Internet Explorer'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-o-`: This stands for Opera, but only targets old versions of the browser'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Chrome and Opera both support the `-webkit-` prefix. However, these two
    browsers do not use the Webkit engine anymore. Their engine is called Blink and
    is developed by Google.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of a prefixed CSS property is `column-gap`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Knowing which CSS properties need to be prefixed is futile. That's why it's
    important to keep a constant eye on [CanIUse.com](http://CanIUse.com). However,
    it's also important to automate the prefixing process with tools such as `Autoprefixer`
    or `-prefix-free`, or mixins in preprocessors, and so on.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: However, vendor prefixing isn't in the scope of the book, so the properties
    we'll discuss are absent of any vendor prefixes. If you want to learn more about
    vendor prefixes, you can visit **Mozilla Developer Network** (**MDN**) at [http://tiny.cc/mdn-vendor-prefixes](http://tiny.cc/mdn-vendor-prefixes).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Let's get the CSS properties reference rolling.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Animation
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike the old days of Flash, where creating animations required third-party
    applications and plugins, today we can accomplish practically the same things
    with a lot less overhead, better performance, and greater scalability all through
    CSS only.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Forget plugins and third-party software! All we need is a text editor, some
    imagination, and a bit of patience to wrap our heads around some of the animation
    concepts CSS brings to our plate.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Base markup and CSS
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we dive into all the animation properties, we will use the following
    markup and animation structure as our base:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML**:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**CSS**:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the examples, we will only see the `.element` rule since the HTML and `@keyframes
    fadingColors` will remain the same.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `@keyframes` declaration block is a custom animation that can be applied
    to any element. When applied, the element's background will go from red to black.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Ok, let's do this.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: animation-name
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `animation-name` CSS property is the name of the `@keyframes` at-rule that
    we want to execute, and it looks like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Description
  id: totrans-33
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the HTML and CSS base example, our `@keyframes` at-rule had an animation
    where the background color went from red to black. The name of that animation
    is `fadingColors`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we can call the animation like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is a valid rule using the longhand. There are clearly no issues with it
    at all. The thing is that the animation won't run unless we add `animation-duration`
    to it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: animation-duration
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `animation-duration` CSS property defines the amount of time the animation
    will take to complete a cycle, and it looks like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Description
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can specify the units either in seconds using `s` or in milliseconds using
    `ms`. Specifying a unit is required. Specifying a value of `0s` means that the
    animation should actually never run.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'However, since we do want our animation to run, we do the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As mentioned earlier, this will make a box go from its red background to black
    in `2` seconds and then stop.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: animation-iteration-count
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `animation-iteration-count` CSS property defines the number of times the
    animation should be played, and it looks like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Description
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here are two values: `infinite` and a *number*, such as `1`, `3`, or `0.5`.
    Negative numbers are not allowed.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the prior example:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will make a box go from its red background to black, start over again with
    the red background and go to black, infinitely.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: animation-direction
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `animation-direction` CSS property defines the direction in which the animation
    should play after the cycle, and it looks like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Description
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are four values: `normal`, `reverse`, `alternate`, and `alternate-reverse`.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '`normal`: This makes the animation play forward. This is the default value.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reverse`: This makes the animation play backward.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alternate`: This makes the animation play forward in the first cycle, then
    backward in the next cycle, then forward again, and so on. In addition, timing
    functions are affected, so if we have `ease-out`, it gets replaced by `ease-in`
    when played in reverse.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll look at these timing functions in a minute.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`alternate-reverse`: This is the same thing as `alternate`, but the animation
    starts backward, from the end.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our current example, we have a continuous animation. However, the background
    color has a "hard stop" when going from black (end of the animation) to red (start
    of the animation).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a more "fluid" animation by making the black background fade
    into red and then red into black without any hard stops. Basically, we are trying
    to create a "pulse-like" effect:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: animation-delay
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `animation-delay` CSS property allows us to define when exactly an animation
    should start. This means that as soon as the animation has been applied to an
    element, it will obey the delay before it starts running.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Description
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can specify the units either in seconds using `s` or in milliseconds using
    `ms`. Specifying a unit is required.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are allowed. Take into consideration that using negative values
    means that the animation should start right away, but it will start midway into
    the animation for the opposite amount of time as the negative value.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Use negative values with caution.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will make the animation start after 3 seconds have passed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: animation-fill-mode
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `animation-fill-mode` CSS property defines which values are applied to an
    element before and after the animation. Basically, outside the time the animation
    is being executed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Description
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are four values: `none`, `forwards`, `backwards`, and `both`.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '`none`: No styles are applied before or after the animation.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`forwards`: The animated element will retain the styles of the last keyframe.
    This the most used value.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`backwards`: The animated element will retain the styles of the first keyframe,
    and these styles will remain during the `animation-delay` period. This is very
    likely the least used value.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`both`: The animated element will retain the styles of the first keyframe before
    starting the animation and the styles of the last keyframe after the animation
    has finished. In many cases, this is almost the same as using `forwards`.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The prior properties are better used in animations that have an end and stop.
    In our example, we're using a fading/pulsating animation, so the best property
    to use is `none`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: animation-play-state
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `animation-play-state` CSS property defines whether an animation is running
    or paused, and it looks like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Description
  id: totrans-98
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two values: `running` and `paused`. These values are self-explanatory.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this case, defining `animation-play-state` as `running` is redundant, but
    I'm listing it for purposes of the example.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: animation-timing-function
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `animation-timing-function` CSS property defines how an animation''s speed
    should progress throughout its cycles, and it looks like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'There are five predefined values, also known as easing functions, for the **Bézier**
    curve (we''ll see what the Bézier curve is in a minute): `ease`, `ease-in`, `ease-out`,
    `ease-in-out`, and `linear`.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: ease
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `ease` function sharply accelerates at the beginning and starts slowing
    down towards the middle of the cycle, and it looks like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: ease-in
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `ease-in` function starts slowly accelerating until the animation sharply
    ends, and it looks like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: ease-out
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `ease-out` function starts quickly and gradually slows down towards the
    end and it looks like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: ease-in-out
  id: totrans-116
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `ease-in-out` function starts slowly and it gets fast in the middle of
    the cycle. It then starts slowing down towards the end. And it looks like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: linear
  id: totrans-119
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `linear` function has constant speed. No accelerations of any kind happen.
    It looks like this:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now, the easing functions are built on a curve named the Bézier curve and can
    be called using the `cubic-bezier()` function or the `steps()` function.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: cubic-bezier()
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `cubic-bezier()` function allows us to create custom acceleration curves.
    Most use cases can benefit from the already defined easing functions we just mentioned
    (`ease`, `ease-in`, `ease-out`, `ease-in-out` and `linear`), but if you're feeling
    adventurous, `cubic-bezier()` is your best bet.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what a Bézier curve looks like:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '![cubic-bezier()](img/B03289_04_01.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: Parameters
  id: totrans-127
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The `cubic-bezier()` function takes four parameters as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: X and Y represent the *x* and *y* axes. The numbers `1` and `2` after each axis
    represent the control points. `1` represents the control point starting on the
    lower left, and `2` represents the control point on the upper right.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-131
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Let''s represent all five predefined easing functions with the `cubic-bezier()`
    function:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'ease: `animation-timing-function: cubic-bezier(.25, .1, .25, 1);`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ease-in: `animation-timing-function: cubic-bezier(.42, 0, 1, 1);`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ease-out: `animation-timing-function: cubic-bezier(0, 0, .58, 1);`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ease-in-out: `animation-timing-function: cubic-bezier(.42, 0, .58, 1);`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'linear: `animation-timing-function: cubic-bezier(0, 0, 1, 1);`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'm not sure about you, but I prefer to use the predefined values.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can start tweaking and testing each value to the decimal, save it, and
    wait for the live refresh to do its thing. However, that's too much time wasted
    testing if you ask me.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The amazing Lea Verou created the best web app to work with Bézier curves. You
    can find it at [cubic-bezier.com](http://cubic-bezier.com). This is by far the
    easiest way to work with Bézier curves. I highly recommend this tool.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: The Bézier curve image showed earlier was taken from the [cubic-bezier.com](http://cubic-bezier.com)
    website.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add `animation-timing-function` to our example:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: steps()
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `steps()` timing function isn't very widely used, but knowing how it works
    is a must if you're into CSS animations.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks like this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This function is very helpful when we want our animation to take a defined number
    of steps.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding a `steps()` function to our current example, it looks like this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This makes the box take six steps to fade from red to black and vice versa.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  id: totrans-155
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'There are two optional parameters that we can use with the `steps()` function:
    `start` and `end`.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '`start`: This will make the animation run at the beginning of each step. This
    will make the animation start right away.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`end`: This will make the animation run at the end of each step. This is the
    default value if nothing is declared. This will give the animation a short delay
    before it starts.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  id: totrans-159
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'After adding a `steps()` function to our current example, it looks like this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Granted, the pulsating effect in our example isn't quite noticeable when we
    add the `steps()` function. However, you can see it more clearly in this pen from
    Louis Lazarus when hovering over the boxes, at [http://tiny.cc/steps-timing-function](http://tiny.cc/steps-timing-function)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an image taken from Stephen Greig''s article in *Smashing Magazine*,
    *Understanding CSS Timing Functions*, that explains `start` and `end` from the
    `steps()` function:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '![Description](img/B03289_04_02.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
- en: 'Also, there are two predefined values for the `steps()` function: `step-start`
    and `step-end`.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '`step-start`: This is the same thing as `steps(1, start)`. It means that every
    change happens at the beginning of each interval.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`step-end`: This is the same thing as `steps(1, end)`. It means that every
    change happens at the end of each interval.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: animation
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `animation` CSS property is the shorthand for `animation-name`, `animation-duration`,
    `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`,
    `animation-fill-mode`, and `animation-play-state`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks like this:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Description
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For a simple animation to work, we need at least two properties: `animation-name`
    and `animation-duration`.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: If you feel overwhelmed by all these properties, relax. Let me break them down
    for you in simple bits.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `animation` longhand, the code would look like this:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Using the `animation` shorthand, which is the recommended syntax, the code
    would look like this:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This will make a box go from its red background to black in 2 seconds, and then
    stop.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Final CSS code
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's see how all the animation properties look in one final example showing
    both the longhand and shorthand styles.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Longhand style
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Shorthand style
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Tip
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `animation-duration` property will always be considered first rather than
    `animation-delay`. All other properties can appear in any order within the declaration.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a demo in **CodePen**: [http://tiny.cc/animation](http://tiny.cc/animation)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Background
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CSS background properties handle the display of background effects on HTML
    elements.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: background-attachment
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `background-attachment` CSS property defines how the background of an element
    scrolls relative to its containing parent, and it looks like this:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Description
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are three values: `scroll`, `fixed`, and `local`.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '`scroll`: The background does not move within its container'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fixed`: The background stays fixed to the viewport, no matter what'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local`: The background scrolls within its container and the viewport'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/css-background](http://tiny.cc/css-background)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: background-blend-mode
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `background-blend-mode` CSS property specifies how the background image
    of an element should blend with its background color, and it looks like this:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Description
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are 18 possible blend mode values:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '`color`: Hue and saturation from the top color prevail, but the luminosity
    of the bottom color is added. Gray levels are preserved.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color-burn`: The final color is the result of taking the bottom color and
    inverting it, dividing the value by the top color, and then inverting that value.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color-dodge`: The final color is the result of dividing the bottom color with
    the inverse of the top one.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`darken`: The final color is the result of taking the darkest value per color
    in each channel.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`difference`: The final color is the result of taking the lighter color and
    subtracting the darker color of the background image and background color.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exclusion`: The result is similar to the `difference`, but with lower contrast.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hard-light`: If the bottom color is darker, then the result is `multiply`.
    However, if the bottom color is lighter, the result is `screen`.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hue`: Takes the hue of the top color, and the saturation and luminosity of
    the bottom color.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inherit`: The final color inherits the blend mode of its parent container.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initial`: This is the default value without any blending.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lighten`: The result is the lightest values per color from each channel.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`luminosity`: The result is the luminosity of the top color, and the hue and
    saturation of the bottom one.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multiply`: Multiply the top and bottom colors. This is the same effect as
    printing the colors on a translucent film and laying them one on top of the other.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`normal`: The final color is the color on top, regardless of the color underneath
    it.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`overlay`: The final color is `multiply` if the bottom color is darker. And
    it would be `screen` if the bottom color is lighter.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`saturation`: The final color is the saturation of the top color plus the hue
    and luminosity of the bottom one.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`screen`: Invert both the top and bottom colors, multiply them, and then invert
    that final color.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`soft-light`: Same as `hard-light` attribute but softer, like pointing a diffused
    light on the final color.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following example, we will declare two backgrounds, an image and a color,
    and then apply a blend mode to them:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS with longhand**:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '**CSS with shorthand**:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Tip
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that in the second example, the path to the image is not inside quotes.
    The quotes, single [`''`] or double [`""`], are optional.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: CSS-Tricks has a great Pen showing all these blend modes. However, I forked
    it to improve a few things on it.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: So, check out the CodePen demo with all the blend modes at [http://tiny.cc/background-blend-mode](http://tiny.cc/background-blend-mode)
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: background-clip
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `background-clip` CSS property helps define whether an element''s background
    extends below its border or not, and it looks like this:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Description
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are four values: `inherit`, `border-box`, `padding-box`, and `content-box`.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: inherit
  id: totrans-244
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This takes the value from its parent element.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: border-box
  id: totrans-246
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This makes the background cover the entire container, including the border.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: padding-box
  id: totrans-248
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This makes the background extend only up to where the border starts.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: content-box
  id: totrans-250
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This works like `border-box`, but it will take into consideration any padding,
    thus creating a gap between the border and the background.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/background-clip](http://tiny.cc/background-clip)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: background-color
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `background-color` CSS property defines the solid background color of an
    element, and it looks like this:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Description
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Also, `transparent` is actually a color in CSS.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we wanted to set a gradient background color, we'd have to use the `background-image`
    property instead. This is because gradients are actually images.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'The color value can be defined using any of the following methods:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Named color
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hexadecimal
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RGB and RGBa
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HSL and HSLa
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: background-image
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `background-image` CSS property sets an image or gradient in the background
    of an element, and it looks like this:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Alternatively, it could also look like this:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Description
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property supports the JPG, PNG, GIF, SVG, and WebP image formats.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: We can also use the `none` value to declare the absence of an image.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: An element can also have several background images in a single declaration.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to gradients, there are two styles: **Linear** and **Radial**.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: Linear
  id: totrans-279
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Its syntax is `linear-gradient`. These gradients can go vertical, horizontal,
    or diagonal.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Radial
  id: totrans-281
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Its syntax is `radial-gradient`. These gradients are circular in nature, and
    by default, they will adapt to an element's dimension. For example, if the element
    is a perfect square, it would make a perfect circular radial gradient. However,
    if the element is a rectangle, then the radial gradient would look like an oval.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: We can add as many colors in a gradient as we want or need to. Unless it is
    strictly necessary, I recommend that you steer away from doing so, as it can have
    a negative impact on browser performance.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, in order to give us more control over the gradients, we can define
    where a gradient color stops so that the following one can start. This is called
    **color stops**. Color stops can be defined in pixels or percentages. Percentages
    are more commonly used because of their relative nature, which helps maintain
    the integrity and proportions of the gradients.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: background-origin
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `background-origin` CSS property defines how the background gets rendered
    inside an element, and it looks like this:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Description
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property works similarly to the `background-clip` CSS property, except
    that with `background-origin`, the background is resized instead of clipped.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four values: `border-box`, `padding-box`, `content-box`, and `inherit`.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '`border-box`: The background extends all the way to the edge of the container,
    but under the border'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding-box`: The background extends to meet the border edge to edge'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content-box`: The background is rendered inside the content box'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inherit`: This is the default value'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/background-origin](http://tiny.cc/background-origin)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: background-position
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `background-position` CSS property allows us to place the background (image
    or gradient) anywhere within its parent container, and it looks like this:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Description
  id: totrans-303
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can use three different types of values: predefined *keywords*, *percentage*,
    and *length*.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Predefined keywords
  id: totrans-305
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Values such as `left`, `right`, `top`, and `bottom` are the predefined keywords.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Percentages
  id: totrans-307
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Values such as `5%` and `80%`.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Length
  id: totrans-309
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Values such as `15px` `130px`.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: 'This property requires you to declare two values: the first value relates to
    the *x* axis (horizontal) and the second value to the *y* axis (vertical).'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: The default value is `0 0`; which is exactly the same as `left top`.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/background-position](http://tiny.cc/background-position)'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: background-repeat
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `background-repeat` CSS property has two functions:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: To define whether a background image is repeated or not
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To determine how the background image is repeated
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It looks like this:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Alternatively, it could also look like this:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Description
  id: totrans-324
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This property only works if `background-image` has been declared.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four values: `repeat`, `repeat-x`, `repeat-y`, and `no-repeat`.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '`repeat`: The background image will repeat in both *x* and *y* axes. This will
    completely fill the container. This is the default value.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repeat-x`: The background image will only repeat in the *x* axis, hence, horizontally.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repeat-y`: The background image will only repeat in the *y* axis, hence, vertically.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no-repeat`: The background image will not be repeated and will only display
    one instance of it.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/background-repeat](http://tiny.cc/background-repeat)'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: background-size
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `background-size` CSS property defines the size of the background image,
    and it looks like this:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Description
  id: totrans-337
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are five values: a *length* value, a *percentage* value, `auto`, `contain`,
    and `cover`.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  id: totrans-339
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  id: totrans-341
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: auto
  id: totrans-343
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This value scales the image in the corresponding direction (horizontal or vertical)
    in order to maintain its aspect ratio and not deform it.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: contain
  id: totrans-345
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This value makes sure the image can be seen completely within its parent container.
    The image does not bleed on the edges; it's "contained".
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: cover
  id: totrans-347
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This value scales the image and takes the longest dimension (horizontal or vertical).
    It makes sure that the image completely covers that dimension. Bleeding can occur
    if the container and the image have different aspect ratios.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: When declaring the size of the background, we can use either one or two values.
    The first value is the *width*, and the second is the *height* of the background
    image.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: Using one value means that the second value is set to `auto`. When using two
    values, we are then defining the `width` and `height` values of the background
    image.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: We can use any measurement unit we want. Pixels, percentages, and the `auto`
    value are the most commonly used though.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: We can even combine multiple images in the same container. The background shorthand
    property is the best way to handle this situation.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/background-size](http://tiny.cc/background-size)'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: background
  id: totrans-356
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `background` CSS property is the shorthand in which we can list all background
    values.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: 'I often see many developers write the longhand version of the property to declare
    a single value, such as a color. Here is an example:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Although this is totally fine, I prefer to use the shorthand version for practically
    everything:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This is a bit more scalable because if we need to add any other values, all
    we need to do is add the new value to this declaration rather than writing a separate
    one. However, at the end, it's all a matter of personal style.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Box model
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every element in the web is a square, and as such, it has intrinsic characteristics:
    width, height, padding, border, and margin. All these characteristics, put together,
    make the box model.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: The almighty box model is one of the most talked about subjects in the CSS industry
    due to IE6 and IE7 being the most popular browsers back in the day. However, they
    had major issues interpreting this simple CSS concept. This meant the web designers
    and developers had to come up with all sorts of tricks to get around such a problem.
    Those days are now gone, for the most part at least.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the box model properties.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: width
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `width` CSS property specifies the width of an element''s content area,
    and it looks like this:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Alternatively, it could also look like this:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Description
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The content area is inside the padding, border, and margin of the element.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s talk about the most used values and keywords: the *length* value, *percentage*
    value, `auto`, `max-content`, `min-content`, and `fit-content`.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  id: totrans-377
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is basically when we use one of the following units: `px`, `em`, `in`,
    `mm`, `cm`, `vw`, and so on.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  id: totrans-379
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: auto
  id: totrans-381
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a keyword value that allows the browser to choose the width of the element.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: max-content
  id: totrans-383
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a keyword value that makes the container take the width of its content.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: min-content
  id: totrans-385
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a keyword value that makes the container as small as possible depending
    on its content.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: fit-content
  id: totrans-387
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a keyword value that makes the container match the width of its content.
    This works great on containers with unknown or variable width.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on MDN at [http://tiny.cc/mdn-width](http://tiny.cc/mdn-width)
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/width](http://tiny.cc/width)'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: height
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `height` CSS property specifies the height of an element''s *content area*,
    and it looks like this:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Description
  id: totrans-396
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *content area* is inside the padding, border, and margin of the element.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: The most used values are a *length* value, a *percentage* value, and `inherit`.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  id: totrans-399
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is basically when we use one of the following units: `px`, `em`, `in`,
    `mm`, `cm`, `vw`, and so on.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  id: totrans-401
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: inherit
  id: totrans-403
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With this keyword, the element will inherit its parent container's height.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on MDN at [http://tiny.cc/mdn-height](http://tiny.cc/mdn-height)
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: padding
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `padding` CSS property creates a space on all four sides of an element
    on the inside, between its content and the edges, and it looks like this:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Alternatively, it could also look like this:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Description
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Borders and margins are outside of the content area and do not get affected
    by the padding.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: The `padding` property is the shorthand for `padding-top`, `padding-right`,
    `padding-bottom`, and `padding-left`. We can use one, two, three, or all four
    values.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: '**One value**: This means that all four sides have the same value.'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Two values**: The first value is for Top and Bottom. The second value is
    for Left and Right.'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Three values**: The first value is for Top. The second value is for Left
    and Right. The third value is for Bottom.'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Four values**: The first value is for Top. The second is for Right. The third
    is for Bottom. The fourth is for Left.'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Negative values are not allowed.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: margin
  id: totrans-423
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `margin` CSS property defines an outside space on one, two, three or all
    four sides of an element, and it looks like this:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Alternatively, it could also look like this:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Description
  id: totrans-428
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `margin` property is the shorthand for `margin-top`, `margin-right`, `margin-bottom`,
    and `margin-left`. Just like with `padding`, we can use one, two, three, or all
    four values.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: '**One value**: This means that all four sides have the same padding.'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Two values**: The first value is for Top and Bottom. The second value is
    for Left and Right.'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Three values**: The first value is for Top. The second value is for Left
    and Right. The third value is for Bottom.'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Four values**: The first value is for Top. The second is for Right. The third
    is for Bottom. The fourth value is for Left.'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Negative values are allowed.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Collapsing margins
  id: totrans-437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a particular behavior with the margins. If two stacked elements have
    top and bottom margins, the margins are not added. Instead, the larger value is
    the only one taken into account.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: For example, we have an `<h1>` heading and a `<p>` paragraph. The heading has
    a bottom margin of `20px`, and the paragraph has a top margin of `10px`.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: Our senses immediately tell us that the total margin is `30px`, but in reality,
    because vertical margins collapse, only the largest value is considered, in this
    case, `20px`.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: The reason for this is that many elements, such as headings and paragraphs in
    our example, have both top and bottom margins. So, having the margins collapse
    allows the content and layout to maintain consistency and avoid creating undesired
    extra spacing between stacked elements.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: This is also good because it saves us the effort of having to "negate" margins
    on every stacked element that has top and bottom margins, again, to avoid creating
    those extra spaces.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: The way I see it, is that collapsing margins is an editorial feature of the
    CSS margin property. I hope that the prior explanations help embrace this behavior.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a demo in CodePen: [http://tiny.cc/collapsing-margins](http://tiny.cc/collapsing-margins)'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: border
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `border` CSS property is the shorthand that defines an element's border
    thickness, style, and color.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: The `border` property and all its sister properties (`border-width`, `border-style`,
    and `border-color`) and variations are self-explanatory, so there's no need for
    a *Description* section like in prior properties.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: The CSS example ahead will help clarify the use of these properties.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: border-width
  id: totrans-449
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the thickness of the border. It can be declared using `px` or `em`,
    but `px` yields more controllable results.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: border-style
  id: totrans-451
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This defines the type of line or no line at all. It supports the following
    values: `dashed`, `dotted`, `double`, `groove`, `hidden`, `inset`, `none`, `outset`,
    `ridge`, and `solid`.'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: border-color
  id: totrans-453
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This defines the color of the line. It supports all color modes: HEX, RGB,
    RGBa, HSL, HSLs, and color name.'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that all HTML elements are squares, so we can target any side of
    an element with `border-top-color`, `border-right-color`, `border-bottom-color`,
    or `border-left-color`.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: The order of the values in the shorthand does not affect the output.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the top rule in *shorthand syntax* accomplishes exactly
    the same accomplishment as the bottom rule with the *longhand syntax*:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: box-sizing
  id: totrans-460
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `box-sizing` CSS property allows us to change the way browsers understand
    the box model by default, and it looks like this:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Description
  id: totrans-463
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two values: `content-box` and `border-box`.'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: content-box
  id: totrans-465
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value. The padding, border, and margin values are added
    to the final width and height of the element. This value is rarely used exactly
    because of the behavior I just described.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: border-box
  id: totrans-467
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: On the other hand, since this value changes the box model, the padding and border
    are not added to the final width and height of the element but only to the margin.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/box-sizing](http://tiny.cc/box-sizing)'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: max-height
  id: totrans-472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `max-height` CSS property defines the maximum height of an element, and
    it looks like this:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Description
  id: totrans-475
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `max-height` attribute overrides the `height` property. Negative values
    are not allowed.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: The most used values are a *length* value and a *percentage* value.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  id: totrans-478
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  id: totrans-480
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on MDN at [http://tiny.cc/mdn-max-height](http://tiny.cc/mdn-max-height)
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: max-width
  id: totrans-485
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `max-width` CSS property defines the maximum width of an element, and it
    looks like this:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Description
  id: totrans-488
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `max-width` attribute overrides the `width` property. Negative values are
    not allowed.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: The most used values are a *length* value and a *percentage* value.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  id: totrans-491
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  id: totrans-493
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on MDN at [http://tiny.cc/mdn-max-width](http://tiny.cc/mdn-max-width)
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: min-height
  id: totrans-498
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `min-height` CSS property defines the minimum height of an element, and
    it looks like this:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Description
  id: totrans-501
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `min-height` attribute overrides the `height` and `max-height` properties.
    Negative values are not allowed.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: The most used values are a *length* value and a *percentage* value.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  id: totrans-504
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  id: totrans-506
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on MDN at [http://tiny.cc/mdn-min-height](http://tiny.cc/mdn-min-height)
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: min-width
  id: totrans-511
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `min-width` CSS property defines the minimum width of an element, and it
    looks like this:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Description
  id: totrans-514
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `min-width` attribute overrides the `width` and `max-width` properties.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are not allowed.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: The most used values are a *length* value and a *percentage* value.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  id: totrans-518
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  id: totrans-520
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on MDN at [http://tiny.cc/mdn-min-width](http://tiny.cc/mdn-min-width)
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: object-fit
  id: totrans-525
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `object-fit` CSS property defines how a *replaced element* fits inside
    its content box, and it looks like this:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: Description
  id: totrans-528
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *replaced element* is an HTML element whose content and dimensions are intrinsic
    (defined by the element itself) and are not defined by CSS or by its context or
    surroundings.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: Examples of *replaced elements* are `<img>`, `<video>`, `<audio>`, `<canvas>`,
    `<iframe>`, `<textarea>`, `<object>`, `<input>`, `<button>`, `<br>`, and `<hr>`.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: Now, the most important characteristic of replaced elements is that we cannot
    apply generated content to them via CSS using the `:before` or `:after` pseudo-element
    selectors.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: This property can come in handy when we want a group of thumbnails to have the
    same width and height, but without distorting the images. However, the images
    for the thumbnails are uploaded by users, which means that the uploaded images
    can be of all sizes and different aspect ratios. The `object-fit` CSS property
    can help us have control of the thumbnails in such a situation.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-533
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The content inside the replaced element is centered vertically and horizontally
    by default. However, the content can be repositioned using the `object-position`
    property.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four keyword values: `contain`, `cover`, `fill`, `none`, and `scale-down`.'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: contain
  id: totrans-536
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The aspect ratio of the content inside the replaced element is preserved. This
    content is enlarged as much as possible until it reaches its maximum size defined
    by its width and height. It's possible to see some "unfilled" areas of the element
    due to preservation of the aspect ratio.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: cover
  id: totrans-538
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The aspect ratio of the content inside the replaced element is preserved. This
    content is enlarged as much as possible until it completely fills or "covers"
    the entire content box.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
- en: fill
  id: totrans-540
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The aspect ratio of the content inside the replaced element is not necessarily
    preserved. This means that when filling the entire content box, the content of
    the replaced element can be stretched or shrunk during the scaling up or scaling
    down of the content.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: none
  id: totrans-542
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: No resizing is done.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: scale-down
  id: totrans-544
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This acts as if `none` or `contain` were declared. The idea here is that the
    browser will try to figure out the smallest concrete size of the content inside
    the replaced element in order to make it fit in its content box while preserving
    the aspect ratio of the content inside the replaced element.
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/object-fit-position](http://tiny.cc/object-fit-position)'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: object-position
  id: totrans-549
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `object-position` CSS property defines the location of the content of the
    replaced element, and it looks like this:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Description
  id: totrans-552
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As described in the Tip of the object-fit CSS property, by default, the content
    of the replaced element is placed in the center of the content box, which is 50%
    50%.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: Now, this property behaves similarly to the `background-position` CSS property.
    This means, we can declare either *one* or *two* values.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: The values are either *length* or *percentages* of *keyword* values `top`, `right`,
    `bottom`, or `left`. Negative values are allowed.
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/object-fit-position](http://tiny.cc/object-fit-position)'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: Border radius
  id: totrans-559
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this property, we can not only make rounded corners but also circles, ellipses,
    and other interesting shapes.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: I admit that the term "rounded corners" is far less obscure than "border radius".
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: border-radius
  id: totrans-562
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `border-radius` CSS property allows us to make rounded corners on almost
    any HTML element, and it looks like this:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Description
  id: totrans-565
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `border-radius` attribute is also the shorthand syntax for the `border-top-left-radius`,
    `border-top-right-radius`, `border-bottom-right-radius`, and `border-bottom-left-radius`
    properties.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: 'Using either a circle or an ellipse, we can create rounded corners:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: '![Description](img/B03289_04_03.jpg)'
  id: totrans-568
  prefs: []
  type: TYPE_IMG
- en: 'There are two values: a *length* value and a *percentage* value.'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: Length value
  id: totrans-570
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is when we use one of the following units: `px`, `em`, `in`, `mm`, `cm`,
    `vw`, and so on.'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: Percentage value
  id: totrans-572
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is when we use percentages such as `50%`, `85%`, and so on.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: We can use, one, two, three, or four values in the same declaration. We can
    also use a slash symbol, "`/`", to separate groups of values.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-575
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, the background color or texture "bleeds" over the rounded corners
    in some browsers. Use `background-clip` to fix this issue.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/css-border-radius](http://tiny.cc/css-border-radius)'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: Unit
  id: totrans-580
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CSS unit is a type of data with which we can define measurements, and it looks
    like this:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Alternatively, it could also look like this:'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: There is no space between the number and the unit.
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, the unit isn't required after the number `0` (zero).
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: There are several types of length units, such as described in the following
    explanations.
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
- en: Relative length units
  id: totrans-588
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: They are dependent on another element's length (usually, a parent element in
    the DOM) that relates directly to the element in question. When the other element's
    length changes, the length of the element in question maintains the defined proportion.
    In other words, there is no need to declare the length of the child element again.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-590
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Relative units are always the best way to go if we want to build scalable systems.
    Setting values in a single element and then modifying that single element to affect
    the whole system saves a lot of time and many headaches.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
- en: ex
  id: totrans-592
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ex` suffix stands for an element's x-height. The `ex` CSS unit refers to
    the height of lowercase *x*. This height is dependent on the font. In other words,
    the heights can be different if we are using Arial than if we are using Verdana,
    even if the value is the same.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: ch
  id: totrans-596
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ch` suffix stands for character. The `ch` CSS unit refers to the width
    of the character `0` (zero). This width is dependent on the font. In other words,
    the widths can be different if we are using Arial than if we are using Verdana,
    even if the value is the same.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-599
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: em
  id: totrans-600
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `em` suffix stands for the pronunciation of the letter *m*, and it represented
    the width of the lower case *m* in the print and typography industries. In CSS,
    the `em` unit represents a calculation of an element's `font-size` property.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
- en: This unit can be used together with many CSS properties, but the most common
    use is to define `font-size` elements.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: However, many web designers and developers prefer to use `rem` units to avoid
    the inheritance issue `em` units have in nested elements (3-4 or more levels deep).
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: rem
  id: totrans-606
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `rem` suffix stands for the abbreviation of the term *root element*. The
    `rem` CSS unit represents the font size of the root element in a markup document.
    A markup document is not only an HTML document; it can also be an XML, SVG, or
    other markup-based document.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: Granted that in this guide, we are referring to an HTML document, and since
    this is the case, the root element is the `<html>` element.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: A very common practice is to set the font size on the `<html>` element to `62.5%`.
    This way, when we're setting our font sizes for other elements, we can still think
    in pixels, but write in `rem` units to maintain the relative font size when scaling
    up or down our document in our responsive projects.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-611
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: The % sign
  id: totrans-612
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `%` sign is what it implies, percentage. In CSS `em` units and percentage
    units yield the same result. Percentage values, such as any of the other relative
    units, are dependent on another value, usually that of the parent element.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: Like all other relative units, percentages and responsive web design go hand
    in hand.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: Viewport-relative length units
  id: totrans-617
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These units relate to the viewport. If the viewport's dimensions change, the
    properties using viewport-relative length values adapt to the new dimensions of
    the view window.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-619
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These units are a godsend in my book. They do what we would expect of fonts
    in a responsive world: enlarge or shrink according to the width or height of the
    viewport.'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: Let's check them out.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: vh
  id: totrans-622
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `vh` suffix stands for *viewport height*. The `vh` CSS unit relates to the
    height of the viewport. The value of `vh` is 1/100th of the height of the viewport.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we declare the `font-size` of an element as `1vh`, and the browser
    window is `500px`, the font size is then `5px`.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: vw
  id: totrans-627
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `vw` suffix stands for *viewport width*. The `vw` CSS unit relates to the
    width of the viewport. The value of `vw` is 1/100th of the width of the viewport.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we declare the `font-size` of an element as `1vh`, and the browser
    window is `1400px`, the font size is then `14px`.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: vmin
  id: totrans-632
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `vmin` suffix stands for *viewport minimum*. The `vmin` CSS unit relates
    to the smallest value of the viewport, of either its height or its width. The
    value of `vmin` is 1/100th of the side with the smallest length of the viewport.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we declare the `font-size` of an element as `1vmin` and the
    browser's viewport is 600 × 800, the font size is then `6px`.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: vmax
  id: totrans-637
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `vmax` suffix stands for viewport maximum. The `vmax` CSS unit relates to
    the largest value of the viewport, of either its height or its width. The value
    of `vmax` is 1/100th of the side with the largest length of the viewport.
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we declare the `font-size` of an element as `1vmax`, and the
    browser's viewport is 600 × 800, the font size is then `8px`.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: Absolute length units
  id: totrans-642
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These units represent a physical dimension of an element. Some units in CSS
    come from the printing world, and although it's not common to use them, it's important
    to know as much as we can about them.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-644
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These types of units relate directly to a physical measurement. They work best
    when the output environment is known, like in print.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
- en: The most used absolute unit is the pixel (`px`). A pixel is known to be a single
    dot on a screen. The thing is that there is no industry standard for the size
    of that dot.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
- en: In other words, a pixel in a standard LED/LCD display (for example, a monitor
    or a TV) has different sizes than a pixel in a high-density screen. Even the pixel
    sizes between high-density screens are different.
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
- en: Let's see what each abbreviation means, and at the end of the section, we'll
    be able to see a single example with all the units.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: cm
  id: totrans-649
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `cm` suffix stands for *centimeter*.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
- en: mm
  id: totrans-651
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `mm` suffix stands for *millimeter*.
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
- en: in
  id: totrans-653
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `in` suffix stands for *inch*.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: pc
  id: totrans-655
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `pc` suffix stands for *pica*.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
- en: pt
  id: totrans-657
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `pt` suffix stands for *point*.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
- en: px
  id: totrans-659
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `px` suffix stands for *pixel*.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
- en: All the following values represent units that resemble `16px` font size, but
    in different length units.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Angle data types
  id: totrans-664
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These units represent angle values.
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-666
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These units are used whenever we want to rotate an element via the `transform`
    property.
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
- en: Aside from the `deg` data type, the other angle data type units aren't really
    that common.
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
- en: Let's check them out though.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: deg
  id: totrans-670
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `deg` suffix stands for *degrees*.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: grad
  id: totrans-672
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `grad` suffix stands for *gradients*.
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
- en: rad
  id: totrans-674
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `rad` suffix stands for *radians*.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: turn
  id: totrans-676
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `turn` suffix is not an abbreviation; it's the actual word *turn*. There
    is one turn in a full circle, so if we're going to make a horizontal rectangle
    rotate 90 degrees to make it vertical, we would define it as `.25turn`, because
    it's ¼th of the complete turn.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
- en: 'All the following values represent units that resemble a 90-degree turn of
    an element but in different angle data types:'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Resolution units
  id: totrans-681
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These units represent the screen density of pixels on any given output or device.
    Unlike relative and absolute units, it's necessary to add the unit to the value
    `0` (zero).
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-683
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever we need to consider density screens, resolution units will do the heavy
    lifting for us. They are used in media queries.
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how they work.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
- en: dpi
  id: totrans-686
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `dpi` suffix stands for *dots per inch*. Screens contain 72 or 96 dpi, whereas
    a printed document has much larger dpi. 1 inch = 2.54 cm, so `1dpi`≈ `0.39dpcm`.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: dpcm
  id: totrans-688
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `dpcm` suffix stands for *dots per centimeter*. 1 inch = 2.54 cm, so `1dpcm`≈
    `2.54dpi`.
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
- en: dppx
  id: totrans-690
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `dppx` suffix stands for *dots per pixel*. `1dppx` = `96dpi` due to the
    1:96 fixed ratio of CSS pixels.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: Duration units
  id: totrans-694
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These units represent the duration of an animation in either seconds or milliseconds.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-696
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These units are quite straightforward and are only used in CSS animations.
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-698
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You may think that because all other units use two, three, or four letters
    in their abbreviation (`px`, `dip`, `dpcm`, and so on). Always remember: when
    declaring the seconds unit only one `s` is used. Using `sec` or `secs` is incorrect.'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: ms
  id: totrans-700
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ms` suffix stands for *milliseconds*. `1000ms`= 1 second.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
- en: s
  id: totrans-702
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `s` suffix stands for *seconds*. `1s` = 1000 milliseconds.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-705
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Column
  id: totrans-706
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS columns is the most versatile way to fluidly distribute long strings of
    content while retaining scalability. If the content grows or is reduced, it would
    automatically reflow in the available space of the declared columns.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: Although not necessarily ideal, actual elements such as DIVs can also be distributed
    in columns with the CSS `columns` property.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: Let's dive in.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: column-count
  id: totrans-710
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `column-count` CSS property defines the number of columns of an element,
    and it looks like this:'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Description
  id: totrans-713
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can use either a *number* value or the keyword `auto`.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
- en: When we use the `auto` keyword, we're letting the browser decide how many columns
    can fit within the available space. This is a very powerful and robust solution
    for responsive layouts. However, it is required that we declare `column-width`
    for this to work.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: column-fill
  id: totrans-718
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `column-fill` CSS property controls how the content is assigned across
    columns, and it looks like this:'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Description
  id: totrans-721
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two keywords: `auto` and `balance`.'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
- en: '`auto`: This means that the content is filled sequentially. Basically, as space
    becomes available, the content will start filling it. This makes the parent container
    grow vertically by making the columns taller in order to fit the content.'
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`balance`: This means that the content will be equally distributed in the available
    columns. For this to work, we need to declare a height on the parent container.
    This will make sure that the columns are of the specific height as well. The problem
    with this is that the content will just keep flowing outside the parent container
    if the parent container becomes too small.'
  id: totrans-724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: column-gap
  id: totrans-727
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `column-gap` CSS property defines the space between columns. In editorial
    terms, this space is the "gutter", and it looks like this:'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: Description
  id: totrans-730
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two values: the `auto` keyword and a *length* value.'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: '`auto`: This is the default value defined by the spec, which is `1em`.'
  id: totrans-732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Length value`: We define this using `px` or `em`.'
  id: totrans-733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: column-rule
  id: totrans-736
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `column-rule` CSS property creates or draws a vertical line that "separates"
    the columns, and it looks like this:'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: Description
  id: totrans-739
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can define three aspects of the `column-rule` CSS property: the thickness
    or `width`; the `style`, which are the same styles of the `border-style` property;
    and `color`.'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: 'The `column-rule` CSS property is the shorthand of the following properties:'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
- en: '`column-rule-width`: This can be just a length value (a number), or we can
    use any of these keywords: `thin`, `medium`, or `thick`.'
  id: totrans-742
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column-rule-style`: This can be any of the `border-style` values, such as
    `dotted`, `dashed`, `inset`, and so on.'
  id: totrans-743
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column-rule-color`: This is a color defined in any format: `HEX`, `RGB`, or
    `HSL`. It also supports alpha channel, so `RGBa` and `HSLa` are allowed.'
  id: totrans-744
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: column-rule-color
  id: totrans-747
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `column-rule-color` CSS property defines the color of the dividing line
    between columns.
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
- en: 'Colors can be defined in any format: `HEX`, `RGB`, or `HSL`. It also supports
    alpha channel, so `RGBa` and `HSLa` are allowed.'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: column-rule-style
  id: totrans-752
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `column-rule-style` CSS property defines the style of the dividing line
    between columns.
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
- en: It can be any of the `border-style` values, for example, `dotted`, `dashed`,
    `inset`, and so on.
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  id: totrans-756
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: column-rule-width
  id: totrans-757
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `column-rule-width` CSS property defines the thickness (width) of the dividing
    line between columns.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be just a length value (a number), or we can use any of these keywords:
    `thin`, `medium`, or `thick`.'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: column-span
  id: totrans-762
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `column-span` CSS property makes an element that's supposed to behave like
    a column into an element that spans across all columns. The element is still a
    "column", but it now expands the full width of the columns, like a block element.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
- en: There are two values, `none` and `all`, which are self-explanatory.
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Here is a demo in CodePen: [http://tiny.cc/column-span](http://tiny.cc/column-span)'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
- en: column-width
  id: totrans-768
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `column-width` CSS property defines the width of the columns.
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
- en: When we define the width of the columns, the browser will automatically add
    or remove columns depending on the available space.
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we say our columns are `200px` wide and the parent container
    is `800px`, then the browser will include three columns (taking into account the
    default `column-gap` of `1em`). However, if the container is at least `450px`
    wide, the browser will fit two columns.
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: columns
  id: totrans-774
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `columns` CSS property is the shorthand that we can use to set `column-width`
    and `column-count`.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
- en: It can accept either one or two values in the same declaration. The order of
    the values doesn't matter, but it's a good measure to declare `column-width` first
    and `column-count` second.
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Flexible box (flexbox)
  id: totrans-779
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Flexbox is one of the most useful CSS modules when it comes to arranging elements
    in a container. Flexbox allows elements to grow or shrink, depending on the available
    space in order to maintain the integrity of layouts.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: Using Flexbox is the next step after using float-based layouts, not only because
    it can be easier to work with and wrap our heads around its concepts, but also
    because it may result in less markup and CSS.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-782
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A powerful partner to Flexbox is the Grid Layout, which is still in its early
    stages of development, and browser support is scarce. Since Grid Layout is out
    of the scope of this section, you can read more on Rachel Andrew's project site,
    Grid By Example, at [http://gridbyexample.com/](http://gridbyexample.com/)
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we dive into the Flexbox properties, the following diagram will help
    us understand the terminology and orientations:'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
- en: '![Flexible box (flexbox)](img/B03289_04_04.jpg)'
  id: totrans-785
  prefs: []
  type: TYPE_IMG
- en: Let's dive into Flexbox properties.
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
- en: flex-grow
  id: totrans-787
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This property defines how much a flex item should grow relative to other flex
    items via a flex grow factor, and it looks like this:'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  id: totrans-789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: Description
  id: totrans-790
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The flex grow factor is a *number* without a unit. Negative values are invalid.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: The flex item will grow by the defined grow factor as long as there is space
    to do so. It can grow on both the main or cross axes, depending on the direction
    defined by the `flex-direction` property, which we'll talk about in a minute.
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: flex-shrink
  id: totrans-795
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This property defines how much a flex item should shrink relative to other
    flex items via a flex shrink factor, and it looks like this:'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Description
  id: totrans-798
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The flex shrink factor is a *number* without a unit. Negative values are invalid.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
- en: This is used when the sum of all flex items exceeds the size of the flex container.
    This could be horizontally or vertically (main axis or cross axis). By assigning
    flex shrink factors to one or multiple flex items, we can make them fit the size
    of the flex container.
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: flex-basis
  id: totrans-803
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This property defines the initial width of a flex item, and it looks like this:'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  id: totrans-805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Description
  id: totrans-806
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: flex-basis accepts a *length* value with either an absolute or a relative length
    unit (`px`, `em`, `%`, and so on) or the `content` keyword.
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
- en: When using `content`, the container will adapt to the content inside of it.
    Negative values are invalid.
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  id: totrans-810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: flex-direction
  id: totrans-812
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `flex-direction` CSS property defines the direction of the flex items inside
    a flex container, and it looks like this:'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Description
  id: totrans-815
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This property sets the direction in which flex items can be laid out, either
    horizontal with `row` or vertical with `column`.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four values: two for horizontal and two for vertical:'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
- en: row
  id: totrans-818
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This lays out the flex items on a horizontal axis. This is the default value.
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
- en: When flex items are laid out with `row`, they stack side by side from left to
    right.
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
- en: row-reverse
  id: totrans-821
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the same as `row` but in reverse. When flex items are laid out with
    `row-reverse`, they stack side by side from right to left.
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
- en: column
  id: totrans-823
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This lays out the flex items on a vertical axis.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
- en: When flex items are laid out with `column`, they stack one on top of the other,
    starting from top to bottom.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
- en: column-reverse
  id: totrans-826
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the same as `column` but in reverse.
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
- en: When flex items are laid out with `column-reverse`, they stack one on top of
    the other, starting from bottom to top.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-829
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `flex-direction` property is applied to the flex container, not the flex
    items.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  id: totrans-832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: flex-wrap
  id: totrans-833
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `flex-wrap` CSS property defines whether a flex item should wrap or not
    when the container becomes too small, and it looks like this:'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: Description
  id: totrans-836
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property accepts one of three keyword values: `nowrap`, `wrap` and `wrap-reverse`.'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
- en: nowrap
  id: totrans-838
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value. It tells the flex item to not wrap.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
- en: wrap
  id: totrans-840
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This tells the flex element to wrap.
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
- en: wrap-reverse
  id: totrans-842
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This tells the flex element to wrap but in reverse.
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-844
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `flex-wrap` property is applied to the flex container, not the flex items.
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  id: totrans-847
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: flex-flow
  id: totrans-848
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `flex-flow` CSS property is the shorthand for the `flex-direction` and
    `flex-wrap` properties, and it looks like this:'
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  id: totrans-850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Description
  id: totrans-851
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We now know that the `flex-direction` property defines the direction of the
    flex items in either columns or rows.
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
- en: The `flex-wrap` attribute, on the other hand, defines whether the flex items
    should wrap or not when the container becomes too small.
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
- en: We can specify either one or two values. The order doesn't affect the result.
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
- en: 'The `flex-direction` attribute can take any of its available values: `row :
    (default value)`, `row-reverse`, `column`, or `column-reverse`.'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
- en: 'The `flex-wrap` attribute can take any of its available values as well: `nowrap`
    (default value),`wrap`, or `wrap-reverse`.'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-857
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `flex-flow` property is applied to the flex container, not the flex items.
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  id: totrans-860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: align-content
  id: totrans-861
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `align-content` CSS property aligns lines inside a flex container as long
    as there is extra space on the cross axis, and it looks like this:'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  id: totrans-863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: Description
  id: totrans-864
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are six values: `flex-start`, `flex-end`, `center`, `space-around`, `space-between`,
    and `stretch`.'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
- en: flex-start
  id: totrans-866
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This groups the lines to the start of the container.
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
- en: flex-end
  id: totrans-868
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This groups the lines to the end of the container.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
- en: center
  id: totrans-870
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This groups the lines to the center of the container.
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
- en: space-around
  id: totrans-872
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This distributes the lines evenly in the container, but the first line is placed
    at the start of the container and the last line at the end.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
- en: space-between
  id: totrans-874
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This distributes the lines evenly in the container with an even amount of space
    between each line.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
- en: stretch
  id: totrans-876
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value. The lines will evenly stretch to fill the whole container.
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-878
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `align-content` property is applied to the flex container, not the flex
    items.
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  id: totrans-881
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: align-items
  id: totrans-882
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `align-items` CSS property sets the default alignment of the flex elements
    inside the flex container, and it looks like this:'
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: Description
  id: totrans-885
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property accepts five values: `flex-start`, `flex-end`, `center`, `baseline`,
    and `stretch`.'
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
- en: flex-start
  id: totrans-887
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex elements to the beginning of the container.
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
- en: flex-end
  id: totrans-889
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex elements to the end of the container.
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
- en: center
  id: totrans-891
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex elements to the center of the container and and at the
    same time, it aligns them to their center.
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
- en: baseline
  id: totrans-893
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex elements to the text baseline inside each flex element.
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
- en: stretch
  id: totrans-895
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This stretches the flex elements to fill the entire parent container.
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-897
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `align-items` property is applied to the flex container, not the flex items.
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-899
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  id: totrans-900
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: align-self
  id: totrans-901
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `align-self` CSS property aligns a specific flex item within its parent
    container, and it looks like this:'
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: Description
  id: totrans-904
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property accepts the exact values as `align-items`, and the results are
    the same as well: `flex-start`, `flex-end`, `center`, `baseline`, and `stretch`.'
  id: totrans-905
  prefs: []
  type: TYPE_NORMAL
- en: flex-start
  id: totrans-906
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex element to the beginning of the container.
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
- en: flex-end
  id: totrans-908
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex element to the end of the container.
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
- en: center
  id: totrans-910
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex element to the center of the container.
  id: totrans-911
  prefs: []
  type: TYPE_NORMAL
- en: baseline
  id: totrans-912
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This aligns the flex element to the text baseline inside each flex element.
  id: totrans-913
  prefs: []
  type: TYPE_NORMAL
- en: stretch
  id: totrans-914
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This stretches the flex elements to fill the entire parent container.
  id: totrans-915
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-916
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  id: totrans-917
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: order
  id: totrans-918
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `order` CSS property is used to alter the default order of flex items within
    the same parent container, and it looks like this:'
  id: totrans-919
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  id: totrans-920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Description
  id: totrans-921
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, flex items appear in the same order they appear in the source (HTML).
    The `order` property allows us to alter the display order while maintaining their
    source order. This property accepts a *number* value without a unit.
  id: totrans-922
  prefs: []
  type: TYPE_NORMAL
- en: 'The order is defined in a logical way: The lower the number, the more ahead
    it is in the order. Items that have the same number are laid out according to
    the source document.'
  id: totrans-923
  prefs: []
  type: TYPE_NORMAL
- en: The starting number is `0` (zero), not 1\. Negative values are allowed.
  id: totrans-924
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-925
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  id: totrans-926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: justify-content
  id: totrans-927
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `justify-content` CSS property works only on flex items. It allows the browser
    to distribute the space in between and around the flex items based on their main
    axes.
  id: totrans-928
  prefs: []
  type: TYPE_NORMAL
- en: Description
  id: totrans-929
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This property supports five keyword values: `flex-start`, `flex-end`, `center`,
    `space-between`, and `space-around`.'
  id: totrans-930
  prefs: []
  type: TYPE_NORMAL
- en: flex-start
  id: totrans-931
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the default value. It groups and positions the elements to the beginning
    of the container.
  id: totrans-932
  prefs: []
  type: TYPE_NORMAL
- en: flex-end
  id: totrans-933
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This groups and positions the elements to the end of the container.
  id: totrans-934
  prefs: []
  type: TYPE_NORMAL
- en: center
  id: totrans-935
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This groups and positions the elements to the center of the container.
  id: totrans-936
  prefs: []
  type: TYPE_NORMAL
- en: space-between
  id: totrans-937
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This spreads and positions the elements along the container and spaces them
    evenly.
  id: totrans-938
  prefs: []
  type: TYPE_NORMAL
- en: The first and last flex items are flushed against the left-hand and right-hand
    sides respectively. In other words, the first and last flex items touch the left
    and right edges.
  id: totrans-939
  prefs: []
  type: TYPE_NORMAL
- en: space-around
  id: totrans-940
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Similar to the `space-between` property, this spreads and positions the elements
    along the container and spaces them evenly.
  id: totrans-941
  prefs: []
  type: TYPE_NORMAL
- en: However, the first and last flex items do not touch the left and right edges.
  id: totrans-942
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-943
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  id: totrans-944
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: flex
  id: totrans-945
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `flex` CSS property is the shorthand in which we can declare the values
    for `flex-grow`, `flex-shrink`, and `flex-basis`. It's recommended that you follow
    this order when declaring the values.
  id: totrans-946
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  id: totrans-947
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  id: totrans-948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: Summary
  id: totrans-949
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: And this is how you start the first chapter about CSS Properties! We learned
    what CSS properties and vendor prefixes are.
  id: totrans-950
  prefs: []
  type: TYPE_NORMAL
- en: Now, with the animation properties clear we can start working on great interactions
    for our sites and applications. We can also handle all background features, be
    positioning or even blend modes to create nice visual effects without having to
    depend on image editors of any kind.
  id: totrans-951
  prefs: []
  type: TYPE_NORMAL
- en: The Box Model concept is something we can tackle easier especially knowing that
    legacy IE's have less and less impact than before. This is greatly impacted by
    how we work with CSS units since we need to understand which units work best with
    different use cases and requirements.
  id: totrans-952
  prefs: []
  type: TYPE_NORMAL
- en: We learned that CSS columns are a great tool to distribute long strings of text.
    And that the mighty Flexbox is the go-to feature to arrange elements in containers.
  id: totrans-953
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到 CSS 列是一个很好的工具，可以分配长字符串文本。而且强大的 Flexbox 是在容器中排列元素的必备特性。
- en: Improving our typography and transformations are part of the next chapter, amongst
    other interesting properties.
  id: totrans-954
  prefs: []
  type: TYPE_NORMAL
  zh: 改善我们的排版和转换是下一章节中众多有趣特性的一部分。
- en: Buckle up!
  id: totrans-955
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好！
