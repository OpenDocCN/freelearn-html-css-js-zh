- en: Using SVG to Create Images Using Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SVG elements are a way to create images within a web page and are the foundation
    of D3 and how it works. They use code to create shapes, rather than defining each
    pixel of an image. This chapter covers how to create various SVG elements within
    a web page. In it, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Base tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Positioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important SVG elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The complete code for this section can be found here: [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter02](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter02).'
  prefs: []
  type: TYPE_NORMAL
- en: Base tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When viewing SVG graphics in a browser, it''s important to embed an `<svg>`
    tag inside an HTML page. Let''s create an `index.html` file and add the following
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now start a web browser and open that file (usually, File | Open File). For
    this book, it is recommended that the reader use Google Chrome, but in development
    and production, any browser will do. If we inspect our HTML in the Elements tab
    of Chrome''s Dev Tools (View | Developer | Developer Tools), we''ll see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b37d8102-9708-468a-91c3-92d3e8c80aba.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can draw elements in our `<svg>` element by adding a variety of predefined
    tags as child elements of the `<svg>`. This is just as we did in HTML, where we
    add `<div>`, `<a>`, and `<img>` tags inside the `<body>` tag. There are many tags,
    such as `<circle>`, `<rect>`, and `<line>`, that we''ll explore in a bit. Here''s
    just one example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we can''t see the circle because it doesn''t have a radius, as shown
    in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8a0f85c-50de-4785-b64c-bae031effeab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll talk more about this later, but, for now, if we want to see the circle,
    we can add a special attribute that all `<circle>` elements take:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This tells the browser to give the circle a radius of `50` px, which is shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3b7499e-c5de-45d1-8cb4-2a98440ae5ae.png)'
  prefs: []
  type: TYPE_IMG
- en: At the moment, though, we only see the lower–right quarter of the circle. This
    is because the center of the circle is being drawn at the very upper–left corner
    of the `<svg>`, and the rest of it is being clipped outside the `<svg>`. We can
    change this by changing the position of the circle, which we'll do next.
  prefs: []
  type: TYPE_NORMAL
- en: Positioning an element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `<svg>` tag is an inline element, such as an image (as opposed to a block
    element such as a `<div>`). Elements within the `<svg>` are positioned similar
    to Photoshop, with a set of coordinates that follow the form `(x,y)`. An example
    of this could be `(10,15)`, which translates to `x=10` and `y=15`. This is different
    than HTML, where elements are laid out relative to one another. Here are some
    important things to keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: The point `(0,0)` is the upper–left corner of the `<svg>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As *y* values increase, the point moves vertically down the `<svg>` element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Don''t confuse this with a typical coordinate system that has `(0,0)` at the
    lower–left corner with a point moving up, as *y* increases in value. This diagram
    shows the difference between a traditional coordinate system and an SVG coordinate
    system:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1fe9328b-fca1-4b41-9434-aaab5bc33136.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can use negative *x*/*y* values:'
  prefs: []
  type: TYPE_NORMAL
- en: '*-x*: moves left'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*-y* :moves up'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s adjust the position of our circle in our previous section by adjusting
    `cx` and `cy` values (the *x* and *y* values for the center of the element):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we see the full circle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb5099c5-17b9-47e3-b89d-07230f9265ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Styling an element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The appearance of any tag inside an `<svg>` can be styled with the following
    attributes (the following are the attributes with example values):'
  prefs: []
  type: TYPE_NORMAL
- en: '`fill=red` or `fill=#ff0000` will alter the color of the shape.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stroke=red` or `stroke=#ff0000` will alter stroke color. Stroke is a line
    that surrounds each element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stroke-width=4` will adjust the width of the stroke.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fill-opacity=0.5` will adjust the transparency of the fill color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stroke-opacity=0.5` will adjust the transparency of the stroke color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transform = "translate(2,3)"` will translate the element by the given *x*,
    *y* values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transform = "scale(2.1)"` will scale the size of the element by the given
    proportion (for example, `2.1` times as big).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transform = "rotate(45)"` will rotate the element by the given number of degrees.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s style the circle we positioned previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/979c8285-88d6-4c00-b117-8f702cddf56e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the stroke in the preceding screenshot is getting clipped. That''s
    because the stroke is created outside the element. If we want to see the full
    stroke, we can resize the circle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d946c82f-8c2e-454e-a8b5-afa78ad6b361.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Styling can also be done with CSS. The following steps will tell you how to
    style your `<svg>` element with CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an external `app.css` file in the same folder as your `index.html` file
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Link the file in the `<head>` tag of `index.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, remove our previous inline styling that we had on our `<circle>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we get this result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2828e708-a86d-4184-be53-2cb6988870be.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that I've hovered over the element in the dev tools to show that the element
    has been rotated 45 degrees. That's what the blue box is.
  prefs: []
  type: TYPE_NORMAL
- en: Important SVG elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate each element, we''ll use the following code as a starting point
    and then add each element inside the `<svg>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let's now move on to each element. Note that you can write each tag in the form
    `<element></element>`, as we did with `<circle></circle>` previously, or the self-closing
    form, `<element/>`, which you will see next with `<circle/>`.
  prefs: []
  type: TYPE_NORMAL
- en: Circle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Circles have the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`r`: radius'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cx`: *x* position'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cy`: *y* position'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the previous code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a1a9a577-7aec-4947-b5ee-d854bef8120a.png)'
  prefs: []
  type: TYPE_IMG
- en: Line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lines have the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`x1`: starting *x* position'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y1`: starting *y* position'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x2`: ending *x* position'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y2`: ending *y* position'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are two examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following output will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3041c38e-68a1-4654-802a-e1c6c5d7be3d.png)'
  prefs: []
  type: TYPE_IMG
- en: Rectangle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Rectangles have the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`x`: *x* position of upper–left'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y`: *y* position of top left'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width`: width'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`height`: height'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what this code produces:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d33b7e35-12a2-45eb-b212-790354516bf6.png)'
  prefs: []
  type: TYPE_IMG
- en: Ellipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An ellipse has the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cx`: *x* position'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cy`: *y* position'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rx`: *x* radius'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ry`: *y* radius'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The attributes will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b7971ec-e19f-4dd0-b990-17b0da09ca2e.png)'
  prefs: []
  type: TYPE_IMG
- en: Polygon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Polygons have the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`points`, which is a set of coordinate pairs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each pair is of the form `x,y`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The attributes will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/844e4714-4d29-401e-b5db-c4897314f7cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Polyline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Polyline** is a series of connected lines. It can have a fill, as a polygon
    does, but it won''t automatically rejoin itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71391dc9-e5e9-4bfc-a27e-57f899ce2b87.png)'
  prefs: []
  type: TYPE_IMG
- en: Text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The content of the tag is the text to be displayed. It has the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`x`, the *x* position of upper–left corner of the element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y`, the *y* position of upper-left corner of the element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The attributes can be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You can use `font-family` and `font-size` CSS styling on this element.
  prefs: []
  type: TYPE_NORMAL
- en: Group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This element has no special attributes, so we''ll use transform to position
    it. You can put multiple elements inside it and all of its positioning will apply
    to its children. It''s good for moving many elements together as one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Bezier curves
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if we want to draw complex organic shapes? To do this, we'll need to use
    paths. First, though, to understand paths, you have to understand **Bezier curves**.
  prefs: []
  type: TYPE_NORMAL
- en: Cubic Bezier curves
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two types of Bezier curves:'
  prefs: []
  type: TYPE_NORMAL
- en: Bezier curves ([http://blogs.sitepointstatic.com/examples/tech/svg-curves/cubic-curve.html](http://blogs.sitepointstatic.com/examples/tech/svg-curves/cubic-curve.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quadratic Bezier curves ([http://math.hws.edu/eck/cs424/notes2013/canvas/bezier.html](http://math.hws.edu/eck/cs424/notes2013/canvas/bezier.html))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each curve is made up of four points:'
  prefs: []
  type: TYPE_NORMAL
- en: Start point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: End point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting control point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ending control point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The start/end points are where the curve starts and ends. The control points
    define the shape of the curve. It''s easiest to conceptualize it with the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8a7f600-e12f-4cc7-8b35-a181a917f937.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As we manipulate the control points, we can see how the shape of the curve
    is affected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f16c5fa7-54b4-4d57-962f-9faf96f0c591.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can even join multiple Bezier curves together, as shown in this diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f20a7b4-2671-4e9b-84a2-b0a79feb8acc.png)'
  prefs: []
  type: TYPE_IMG
- en: Smooth cubic Bezier curves
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Smooth cubic Bezier curves are just a way to simplify some cubic Bezier curves
    when they''re joined together. Take a look at the two control points in the red
    square shown in this diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d951ea00-dc8c-42de-80fc-bf2c121903f2.png)'
  prefs: []
  type: TYPE_IMG
- en: The point in the lower–left corner of the square is the end control point of
    the first curve. The point in the upper-right corner of the square is start control
    point of the second curve.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the two points are reflections of each other around the central black
    dot, which is the end point of the first curve and the start point of the second
    curve. The two points are exactly 180 degrees from each other, and they have the
    same distance from that central point.
  prefs: []
  type: TYPE_NORMAL
- en: 'In scenarios such as this, where the start control point of one curve is a
    reflection of the end control point of the previous curve, we can skip stating
    the start control point of the second curve. Instead, we let the browser calculate
    it, based on the end control point of the first curve:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de5ee0ed-38b3-4040-b69f-763a7865b2ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also omit the start point, since the browser knows it will be the same
    as the end point of the previous curve. In summary, to define that second curve,
    we only need two points:'
  prefs: []
  type: TYPE_NORMAL
- en: The end point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The end control point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quadratic Bezier curve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another situation where we can simplify defining a Bezier curve is where the
    start control point and end control point are the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be636500-bf3c-4543-bfb3-f3fc2262aec8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we can define the curve with just three points:'
  prefs: []
  type: TYPE_NORMAL
- en: The start point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The end point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One single control point that acts as both a start control point and an end
    control point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smooth quadratic Bezier curve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final situation where we can simplify defining a Bezier curve is where
    we have a quadratic Bezier curve (one single control point) that is a reflection
    of the end control point of a previous curve:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36e34955-7eb9-4d50-aa64-334e6dfa613e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this situation, the browser knows the start point of the curve (the end
    point of the previous curve), and it can calculate the single control point needed
    (since it is a quadratic Bezier curve) based on the end control point of the previous
    curve. This is a smooth quadratic Bezier curve, and you only need one point to
    define it:'
  prefs: []
  type: TYPE_NORMAL
- en: The end point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing a path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we understand Bezier curves, we can use them in our SVGs with `<path>`
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Documentation can be found here: [https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths).'
  prefs: []
  type: TYPE_NORMAL
- en: 'These tags take a `d` attribute, which stands for a set of drawing commands.
    The value of this attribute is any combination of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'M = moveto: move the drawing point to the given coordinates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: M *x y*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'L = lineto: draw a line from the previous point in the d command to the point
    given'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: L *x y*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'C = curveto: draw a curve from the previous point in the `d` command to the
    point given with the given control points'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C *x*1 *y*1, *x*2 *y*2, *x y*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The first pair is first control point
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The second pair is second control point
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The last pair is final ending point of curve
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'S = smooth curveto:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: S *x*2 *y*2, *x y*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Follows another curve
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses a reflection of *x*2 *y*2 of the previous S or C command for *x*1 *y*1
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Q = quadratic Bezier curve:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Q *x*1 *y*1, *x y*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses one control point for start and end controls (*x*1, *y*1)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'T = smooth quadratic Bezier curveto:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: T *x y*
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Follows another curve
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses a reflection of the previous quadratic curve's control point as its control
    point
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Z = closepath: draws a line from the previous point in the `d` command to the
    first point in the `d` command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that all of these commands can also be expressed with lowercase letters.
    If capital letters are used, this means absolutely positioned (relative to the
    upper–left corner of the SVG element); lowercase letters mean that all the points
    are expressed relative to the previous point in the `d` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use lines to draw a triangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following output will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/309d826e-b310-48b3-adbe-e7cf3191fd9f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we''ll draw a Bezier curve:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following output will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/387e8e9c-7489-464d-9cfb-74c4dbbfe961.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s a quadratic Bezier curve:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The following output will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10a98bff-3fb8-4059-96d6-554748672f06.png)'
  prefs: []
  type: TYPE_IMG
- en: Arcs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An **arc** is a command that you can add to a path that will draw part of an
    ellipse. To do this, we begin with only two points:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b80f97e9-9d14-4a45-a34b-4d93ae784660.png)'
  prefs: []
  type: TYPE_IMG
- en: For any two points, there are only two ellipses with the same width/height and
    rotation that contain both points. In the previous diagram, try to imagine moving
    the ellipses around without rotating or scaling them. As soon as you do, they
    lose contact with at least one of the two given points. One point might be on
    the ellipse, but the other won't be.
  prefs: []
  type: TYPE_NORMAL
- en: We can use this information to draw any of the four colored arcs shown in the
    previous diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make the following code part of the `d` attribute''s value on a `<path>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the various properties of an arc:'
  prefs: []
  type: TYPE_NORMAL
- en: '`A`: creates an arc draw command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rx`: the *x* radius of both ellipses (in px)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ry`: the *y* radius of both ellipses (in px)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x-axis-rotation`: rotates both ellipses a certain number of degrees'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`large-arc-flag`: indicates whether to travel along the arc that contains more
    than 180 degrees (1 to do so, 0 to not do so)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sweep-flag`: indicates whether to move along the arc that goes clockwise (1
    to do so, 0 to not do so)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x`: destination *x* value (in px)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y`: destination *y* value (in px)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`large-arc-flag` determines whether to make an arc that is greater than 180
    degrees. Here''s an example without it (note, the red shows the arc drawn, while
    the green arcs are other possible arcs that could be drawn using a combination
    of `large-arc-flag` and `sweep-flag`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c94ea0b6-a7d0-489d-8814-7e652fcc05ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note, it chooses one of the two smaller arcs. Here''s an example with the `large-arc-flag`
    set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bae80f49-cb61-4278-bcfb-9a90cc18161f.png)'
  prefs: []
  type: TYPE_IMG
- en: Note, it chooses one of the two larger arcs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous example, for both situations where the `large-arc-flag` was
    set or not set, there was one other arc that could have been taken. To determine
    which of those two arcs to take, we use the `sweep-flag`, which determines whether
    to travel clockwise from the start point to the end point. Here''s an example
    with the `large-arc-flag` set, but without the `sweep-flag` set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5cd487e9-2450-404e-8cfd-16ec3e842458.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that we move in a counterclockwise motion from start to end (left to right).
    If we set the `sweep-flag`, we travel in a clockwise motion:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45761201-4725-4a3f-984e-8257a9b6b0f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are all the possible combinations for `sweep-flag` and `large-arc-flag`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a53bf3f-6d1d-4489-b634-55cbdd70aba6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s an example code for a `path` that uses an arc in its `d` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f3ba735-ac9e-49d1-96e6-370460c709f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Play with the different kinds of arc values here: [http://codepen.io/lingtalfi/pen/yaLWJG](http://codepen.io/lingtalfi/pen/yaLWJG).'
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If needed, you can find all the documentation for SVG elements here: [https://developer.mozilla.org/en-US/docs/Web/SVG/Element](https://developer.mozilla.org/en-US/docs/Web/SVG/Element).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the basics of SVG (base tags, basic elements, positioning,
    and styling). We also looked at Bezier curves and how to draw organic shapes with
    them. We're now ready to learn how D3 can be used to modify these elements. In
    [Chapter 3](4c02d13e-8bf2-449a-8b13-eadd149cfda5.xhtml), *Building an Interactive
    Scatter Plot*, we will dive into the basics of `D3.js` and create an interactive
    scatter plot.
  prefs: []
  type: TYPE_NORMAL
