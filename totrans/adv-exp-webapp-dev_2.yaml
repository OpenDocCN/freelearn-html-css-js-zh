- en: Chapter 2. Building a Web API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the foundations in place, we begin the process of building a Web API for
    our Vision project. We will start by setting up a persistence layer using MongoDB.
    We will then implement, feature-by-feature, the various aspects of our Web API.
  prefs: []
  type: TYPE_NORMAL
- en: Persisting data with MongoDB and Mongoose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB is an open source document-oriented database system. MongoDB stores
    structured data such as JSON-like documents, simplifying integration.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by creating a MongoDB schema for our project. The schema contains
    some basic information related to the project such as the project's name, a GitHub
    access token, a user, and a list of repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Let's install Mongoose, a MongoDB Object Document Mapper for Node.js; it provides
    a schema-based solution to modeling your data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s configure our application to use MongoDB and Mongoose; we add a URL
    for MongoDB to our configuration files `./lib/config/*.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a MongoDB connection module, `./lib/db/index.js`, which simply
    pulls in the MongoDB URL from our Winston configuration and opens a connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We now create a model class `./lib/models/index.js` that defines our `ProjectSchema`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to run the following examples, we need a running instance of MongoDB.
    You can download MongoDB from [http://www.mongodb.org](http://www.mongodb.org).
    Run the following command to start MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: GitHub tokens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to acquire a GitHub token, log in to your GitHub account and go to
    the **Accounts** section of your **Settings** page. Here you will need to enter
    your password. Now click on **Create new token**, and name the token, if you prefer.
    Click on the **copy to clipboard** button in order to copy the token into the
    following `login` file.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a `login` file—`./test/login.js`—with the data from GitHub. We
    will use this in order to call the GitHub API; this will be removed in a later
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Feature: Create a project'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a test to our existing set of tests for our feature `Create a project`.
    This resource will POST a project to the route `/project` and return a `201 Created`
    status code. The following test: `./test/project.js` is the `201 Created` test.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book will not document the full set of tests for a feature. Please refer
    to the source code for the full set of tests.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, SuperTest executes an `end` function that returns a response;
    this allows us to check the headers and body of the response.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In order for some of our tests to work, we will need some test data. So, the
    following `./test/project.js` will tear down any existing project data and add
    a new project using a Mocha hook `beforeEach`, that runs before each test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s install `string.js`, a lightweight JavaScript library that provides
    extra string methods. This will help us validate a request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let's implement the `Create a project` feature. We start by creating a `Project`
    module `./lib/project/index.js`. We import a Mongoose schema for the `Project`
    model and define a function called `post`, which accepts the `name` and `data`
    as arguments. We call the static function `Project.findOne` to check if the project
    exists, and if the project is unique, we call the `project.save` function, which
    saves the project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a new route `./lib/routes/project.js`. We import a `logger` variable,
    a `ProjectService` module, and define a route called `Post`, that uses `req.body`
    to gain access to the items we POST in a request. We then validate the request
    that returns a `400 Bad Request` if it is invalid. If the request is valid, we
    add the user and the token to the body and call `Project.post`; if we get an error,
    we return `500 Internal Server Error`, and if the project already exists, we return
    a `409 Conflict` response. If the request is ok, we set `res.location` on the
    response for our new resource and return a `201 Created` response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In order to add our new route and allow our application to support HTTP POST,
    we need to make a few changes to our Express server `./lib/express/index.js`.
  prefs: []
  type: TYPE_NORMAL
- en: First, we import the `db` module we created at the beginning of this chapter,
    which opens a connection to a MongoDB database. We then import the `project` route
    module we just created. Importantly, `app.use(express.bodyParser())` parses the
    request body when the forms are submitted. The `bodyParser` middleware supports
    `application/x-www-form-urlencoded`, `application/json`, and `multipart/form-data`.
    We add a new route at `/project` for posting a project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Feature: Get a project'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Let's add a test to the existing set of tests `./test/project.js` for our feature
    `Get a project`. This resource will GET a project from route `/project/:id`, and
    return a `200 OK` status.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install `underscore.js`; a utility-belt library that provides functional
    programming support:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s implement the `Get a project` feature `./lib/project/index.js` and add
    a `get` function. We attempt to retrieve a project by calling the static function
    `Project.findOne`. If we get an error, we return it, if we find the project then
    we return the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a new route `./lib/routes/project.js`. We start by defining a route
    called `get`. We validate the request using a regular expression for a valid Mongoose
    `ObjectId`; and it returns a `400 Bad Request` status if the request is invalid.
    We attempt to retrieve a project by calling `Project.get` passing the `id`. If
    we get an error, we return `500 Internal Server Error`; if the project does not
    exist, we return a `404 Not Found`. If we find the project, we return the project
    and a `200 OK` response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now add the following route to `./lib/express/index.js:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Feature: Edit a project'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a test to our existing set of tests `./test/project.js` for our
    `Edit a project` feature. This resource will PUT a project to route `/project/:id`,
    and return a `204 No Content` status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s implement the `Edit a project` feature `./lib/project/index.js` and
    add a `put` function. We attempt to retrieve a project by calling the static function
    `Project.findOne`. If we get an error, we return it; if we cannot find the project,
    we return null. If we find the project, we update it and return the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a new route `./lib/routes/project.js`. We start by defining a route
    called `put`, we then validate the request by returning a `400 Bad Request` if
    the request is invalid. We add a login user and token to the body of the request;
    this will be removed in a later chapter. We attempt to update the project by calling
    `Project.put` passing the `id`. If we get an error, we return `500 Internal Server
    Error`; if the project does not exist, we return a `404 Not Found` status. If
    we find the project, then we return a `204 No Content` response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following route to the Express server `./lib/express/index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Feature: Delete a project'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a test to `./test/project.js` for our feature `Delete a project`.
    This resource will DELETE a project at route `/project/:id` and return a `204
    No Content` status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Let's implement the `Delete a project` feature `./lib/project/index.js` and
    add a `del` function. We attempt to delete a project by calling the static function
    `Project.findOne`. If we get an error, we return it; if we cannot find the project,
    we return `null`. If we find the project, we delete it and return an empty response.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Let's add a new route `./lib/routes/project.js`. We start by defining a route
    called `del`. We attempt to delete the project by calling `Project.del` and passing
    the `id`. If we get an error, we return `500 Internal Server Error`; if the project
    does not exist, we return a `404 Not Found`. If we find the project, we return
    a `204 No Content` response.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following route to the Express server `./lib/express/index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Feature: List projects'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Let's add a test to `./test/project.js` for our feature `List projects`. This
    resource will GET all projects from route `/project` and return a `200 Ok` status.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s implement the `List projects` feature `./lib/project/index.js` and add
    an `all` function. We attempt to retrieve all projects by calling the static function
    `Project.find` and querying by a user `id`. If we get an error we return it, if
    we find the projects, we return the projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Let's add a new route `./lib/routes/project.js`. We start by defining a route
    called `all`. We start by retrieving a users `id`. In order to accommodate the
    fact that we have not implemented an authentication strategy; we get the user
    details from our hard-coded `login.user` object. We will clean this up in a future
    chapter. We attempt to retrieve a project by calling `Project.all`, passing the
    `userId`. If we get an error, we return `500 Internal Server Error`; if we find
    projects, we return the projects and a `200 OK` response.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following route to the Express server `./lib/express/index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: GitHub API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our project API is complete but things are about to get a little more complicated
    as we attempt to communicate with the GitHub API. Let's install the following
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: The `github` module provides an object-oriented wrapper for the GitHub v3 API;
    the complete API for this module can be found at [http://mikedeboer.github.io/node-github/](http://mikedeboer.github.io/node-github/).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `async` module is a utility module that provides around 20 powerful functions
    for working with asynchronous JavaScript. The `async` module is a control-flow
    module and will allow us to do operations over IO in a clean, controlled way.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The `moment.js` is a library for parsing, validating, manipulating, and formatting
    dates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Feature: List repositories'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a test to `./test/github.js` for our feature `List repositories`.
    This resource will GET all repositories for a project from the route `project/:id/repos`
    and return a `200 Ok` status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The first thing we need to do is create a `GitHubRepo` module in `./lib/github/index.js`.
    We start by importing the required modules including `github`. We define a constructor
    function that accepts as input a GitHub access `token` and a `user`. We then instantiate
    a `GitHubApi` module, calling `github.authenticate`, which authenticates based
    on the token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s implement the feature `List repositories` and add it to our new `GitHubRepo`
    module in `./lib/github/index.js`. We start by defining our prototype function
    `repositories`. We call `getAll` on the `github` module. If we get an error, we
    return the error; if no repositories are found we return a `null` value. If we
    find repositories, we use the `map` function to create a new array of items using
    the `underscore pick` function to select the three attributes `id`, `name`, and
    `description`. We return these `items` via `callback`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a `repos` function to `./lib/project/index.js`. We start by importing
    the `GitHubRepo` module and we attempt to retrieve the project by calling the
    static function `Project.findOne`. If we get an error, we return the error; if
    the project does not exist we return a `null` value. If we find the project, we
    create a `GithubRepo` module and initialize it with a `token` and a `user`, and
    assign it to `git`. We then call `git.repositories` which returns a response.
    If we get an error, we return an `error`, if we do not find any repositories,
    we return a `null` value. If we find repositories, we use the `map` function to
    create a new array of items using `underscore pick` function to select three attributes,
    including `id`, `name`, and `description`. We add a fourth attribute, `enabled`,
    which signifies if our project has the repository assigned to it and returns all
    the repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Let's add a new route `repos` to `./lib/routes/github.js`. We instantiate a
    new `ProjectService` and then attempt to retrieve the projects repositories by
    calling the function `Project.repos`. If we get an error, we return `500 Internal
    Server Error`. If no repositories are returned, we return a `404 Not Found` status.
    If we receive repositories, we return a `200 OK` status with the repositories.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following route to `./lib/express/index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Feature: List commits'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a test to `./test/github.js` for our `List commits` feature. This
    resource will GET the 10 most recent commits for all repositories in a project
    via the route `project/:id/commits` and return a `200 OK` status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Let's implement the `List commits` feature, and add it to our new `GitHubRepo`
    module in `./lib/github/index.js`. We start by defining our function, `commits`,
    that takes a list of `repos`. We use `async.each` to loop though all `repos`.
    The `async` module allows us to do asynchronous work over IO.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then call `github.repos.getCommits`; we pass it our GitHub `user` and `repo`.
    We call the `callback` if `github.repos.getCommits()` returns an error. When we
    get a response, we use the `map` function to create a new array of items using
    the `uderscore pick` function to select two attributes: `committer` and `message`.
    If the item has a `committer`, we use underscores the `extend` function and add
    the committers, `login` and `avatar_url`. We return the items to the main function
    via `callback` and use underscores `sort` function to sort the items by date and
    select the top 10 items. We then return the commits via `callback`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Let's add a `commits` function to `./lib/project/index.js`. We start by defining
    a function called `commits`. We attempt to retrieve the project by calling the
    static function `Project.findOne`. If we get an error, we return the error. If
    the project does not exist, we return a `null` value. If we find the project,
    we create a `GithubRepo` module and initialize it with a token and a user and
    assign it to `git`. We then call the `git.commits` function and pass a list of
    repositories returning a response. If we get an error, we return an error. If
    we get a valid response, we return the commits.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a new route `commits` to `./lib/routes/github.js`. We attempt to
    retrieve the commits by calling `Project.commits`. If we get an error we return
    `500 Internal Server Error`. If no commits are returned we return a `404 Not Found`.
    If we receive commits we return a `200 OK` response with the commits:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following route to `./lib/express/index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Feature: List issues'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a test to `./test/project.js` for our `List issues` feature. This
    resource will GET all projects from the route `project/:id/issues` and return
    a `200 OK` response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Let's implement the feature `List issues` and add it to our new `GitHubRepo`
    module `./lib/github/index.js`. We start by defining our function `issues` which
    takes a list of `repos`. We use `async.each` to loop though all `repositories`.
  prefs: []
  type: TYPE_NORMAL
- en: We then call `github.repos.repoIssues` and we pass our GitHub `user` and `repo`,
    calling the callback if `github.repos.repoIssues()` returns an `error`. If we
    get a valid response we use the `map` function to create a new array of items
    using `underscore pick` function to select four attributes, including `id`, `title`,
    `state`, and `updated_at`. If the item has a user, we use underscores `extend`
    function and add the users `login` and `avatar_url`. We then return the items
    to the main function via `callback` and use the `underscore sort` function to
    sort the items by date. We then select the top 10 issues and return the issues
    via `callback`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add an `issues` function to `./lib/project/index.js`. We start by defining
    a function called `issues`. We attempt to retrieve the project by calling the
    static function `Project.findOne`. If we get an error, we return the `error`.
    If the project does not exist, we return a `null` value. If we find the project,
    we create a `GitHubRepo` module and initialize it with a `token` and a `user`,
    and assign it to `git`. We then call `git.issues`, passing a list of repositories,
    returning a response. If we get an error, we return an `error` and if we get a
    valid response, we return the issues and a `200 OK` response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a new route, `issues`, to `./lib/routes/github.js`. We attempt to
    retrieve the issues by calling `Project.issues`. If we get an error we return
    `500 Internal Server Error`. If no issues are returned we return a `404 Not Found`
    response, and if we receive issues we return a `200 OK` response with the issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following route to `./lib/express/index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Validating parameters with param middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will have noticed that we have repeated the `id` validation in each of our
    routes. Let's improve things using `app.params`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the offending line of code that simply checks to see if our `id` is
    a valid MongoDB `id`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a middleware to handle this `./lib/middleware/id.js`. We define
    a `validate` function that takes four parameters, with the last being the value
    of `id`. We then validate the `id` parameter, returning a `400 Bad Request`,if
    it''s invalid. We then call `next()`, which calls the next middleware in our Express
    stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can use this `id` middleware in our Express server. Let''s include the
    `param` middleware and add this line before the first route so that it applies
    to all of our routes: `./lib/express/index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: We can now edit our two route modules `./lib/routes/project.js` and `./lib/routes/github.js`,
    and remove the offending line of code. The `id` param will now handle this for
    all routes.
  prefs: []
  type: TYPE_NORMAL
- en: Route improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now have quite a few routes required in our Express server; let''s clean
    this up. A common pattern in `node.js` is to include an `index` file that returns
    all files in its current directory. We will use `require-directory` to do this
    for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a new module `./lib/routes/index.js`. with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, all routes in the `./lib/routes/` folder will be exposed under a single
    variable, `routes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have now completed our Web API. We have implemented a basic MongoDB provider;
    we are using Mongoose to give us a bit of schema support. We have also made a
    small improvement to our Express server, cleaning up the routes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will consume this API when we build our client.
  prefs: []
  type: TYPE_NORMAL
