["```js\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>01.01 - WebGLRenderer - Skeleton</title>\n        <script src=\"img/three.js\"></script>\n        <style>\n          body {\n          margin: 0;\n          overflow: hidden;\n          }\n        </style>\n      </head>\n      <body>\n        <script>\n          ...\n        </script>\n      </body>\n    </html>\n    ```", "```js\n          // global variables\n          var renderer;\n          var scene;\n          var camera;\n    ```", "```js\n          // calls the init function when the window is done loading.\n          window.onload = init;\n    ```", "```js\n    function init() {\n\n          // create a scene, that will hold all our elements \n          // such as objects, cameras and lights.\n          scene = new THREE.Scene(); \n          // create a camera, which defines where we looking at.\n          camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n          // position and point the camera to the center\n          camera.position.x = 15;\n          camera.position.y = 16;\n          camera.position.z = 13;\n          camera.lookAt(scene.position);\n\n          // create a renderer, set the background color and size\n          renderer = new THREE.WebGLRenderer();\n          renderer.setClearColor(0x000000, 1.0);\n          renderer.setSize(window.innerWidth, window.innerHeight);\n\n          // create a cube and add to scene\n          var cubeGeometry = new THREE.BoxGeometry(10 * Math.random(), 10 * Math.random(), 10 * Math.random());\n\n          var cubeMaterial = new THREE.MeshNormalMaterial();\n\n          var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n          scene.add(cube);\n\n          // add the output of the renderer to the html element\n          document.body.appendChild(renderer.domElement);\n\n          // call the render function\n          renderer.render(scene, camera);\n\n          }\n    ```", "```js\n    <script src=\"img/CanvasRenderer.js\"></script>\n    <script src=\"img/Projector.js\"></script>\n```", "```js\n              renderer = new THREE.WebGLRenderer();\n              renderer.setClearColor(0x000000, 1.0);\n              renderer.setSize(window.innerWidth, window.innerHeight);\n        ```", "```js\n            renderer = new THREE.CanvasRenderer();\n            renderer.setClearColor(0x000000, 1.0);\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        ```", "```js\n        <script src=\"img/CSS3DRenderer.js\"></script>\n    ```", "```js\n        var content = '<div>' +\n          '<h1>This is an H1 Element.</h1>' +\n          '<span class=\"large\">Hello Three.js cookbook</span>' +\n          '<textarea> And this is a textarea</textarea>' +\n        '</div>';\n\n        // global variables, referenced from render loop\n        var renderer;\n        var scene;\n        var camera;\n    ```", "```js\n        function init() {\n\n          scene = new THREE.Scene();\n          camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n\n     // create a CSS3DRenderer\n     renderer = new THREE.CSS3DRenderer();\n     renderer.setSize(window.innerWidth, window.innerHeight);\n     document.body.appendChild(renderer.domElement);\n\n          // position and point the camera to the center of the scene\n          camera.position.x = 500;\n          camera.position.y = 500;\n          camera.position.z = 500;\n          camera.lookAt(scene.position);\n\n     var cssElement = createCSS3DObject(content);\n     cssElement.position.set(100, 100, 100);\n     scene.add(cssElement);\n\n          render();\n        }\n    ```", "```js\n    function createCSS3DObject(content) \n        {\n          // convert the string to dome elements\n          var wrapper = document.createElement('div');\n          wrapper.innerHTML = content;\n          var div = wrapper.firstChild;\n\n          // set some values on the div to style it.\n          // normally you do this directly in HTML and \n          // CSS files.\n          div.style.width = '370px';\n          div.style.height = '370px';\n          div.style.opacity = 0.7;\n          div.style.background = new THREE.Color(Math.random() * 0xffffff).getStyle();\n\n          // create a CSS3Dobject and return it.\n          var object = new THREE.CSS3DObject(div);\n          return object;\n        }\n    ```", "```js\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <style>\n          .black_overlay {\n            display: none;\n            position: absolute;\n            top: 0;\n            left: 0%;\n            width: 100%;\n            height: 100%;\n            background-color: black;\n            z-index: 1001;\n            opacity: .80;\n          }\n\n          .white-content {\n            display: none;\n            position: absolute;\n            top: 25%;\n            left: 25%;\n            width: 50%;\n            height: 70px;\n            padding: 16px;\n            border: 2px solid grey;\n            background-color: black;\n            z-index: 1002;\n          }\n\n          .big-message {\n            width: 80%;\n            height: auto;\n            margin: 0 auto;\n            padding: 5px;\n            text-align: center;\n            color: white;\n\n            font-family: serif;\n            font-size: 20px;\n          }\n\n        </style>\n        <title></title>\n      </head>\n      <body>\n    ```", "```js\n        <!-- Lightbox to show when WebGL is supported or not-->\n        <div id=\"lightbox\" class=\"white-content\">\n        <div class=\"big-message\" id=\"message\">\n\n        </div>\n        <a href=\"javascript:void(0)\" onclick=\"hideLightbox()\">Close</a>\n        </div>\n        <div id=\"fade\" class=\"black_overlay\"></div>\n    ```", "```js\n        // loosely based on the http://get.webgl.org function detectWebGL() {\n\n          // first create a canvas element\n          var testCanvas = document.createElement(\"canvas\");\n          // and from that canvas get the webgl context\n          var gl = null;\n\n          // if exceptions are thrown, indicates webgl is null\n          try {\n            gl = testCanvas.getContext(\"webgl\");\n          } catch (x) {\n            gl = null;\n          }\n\n          // if still null try experimental\n          if (gl == null) {\n            try {\n            gl = testCanvas.getContext(\"experimental-webgl\");\n            } catch (x) {\n            gl = null;\n            }\n\n        }\n        // if webgl is all good return true;\n        if (gl) {\n          return true;\n        } else {\n          return false;\n        }\n    }\n    ```", "```js\n        var hasGl = detectWebGL();\n        if (hasGl) {\n          showLightbox(\"WebGL is supported\");\n        } else {\n        showLightbox(\"WebGL is not-supported\");\n        }\n\n        function showLightbox(message) {\n          var lightBox = document.getElementById('light');\n          lightBox.style.display = 'block';\n\n          var fadeBox = document.getElementById('fade');\n          fadeBox.style.display = 'block'\n\n          var msg = document.getElementById('message');\n          msg.textContent = message;\n        }\n\n        function hideLightbox() {\n          var lightBox = document.getElementById('light');\n          lightBox.style.display = 'none';\n\n          var fadeBox = document.getElementById('fade');\n          fadeBox.style.display = 'none'\n        }\n    ```", "```js\n        function render() {\n          renderer.render(scene, camera);\n          scene.getObjectByName('cube').rotation.x += 0.05;\n          requestAnimationFrame(render);\n        }\n    ```", "```js\n        function init() {\n          ...\n          // call the render function\n          renderer.render(scene, camera);\n        }\n    With the following:\n        function init() {\n          ...\n          // call the render function\n          render();\n        }\n    ```", "```js\n    <script src=\"img/stats.min.js\"></script>\n```", "```js\n        function createStats() {\n          var stats = new Stats();\n          stats.setMode(0);\n\n          stats.domElement.style.position = 'absolute';\n          stats.domElement.style.left = '0';\n          stats.domElement.style.top = '0';\n\n          return stats;\n        }\n    ```", "```js\n        // global variables\n        var renderer;\n        var scene;\n        var camera;\n     var stats;\n\n        function init() {\n          ...\n     stats = createStats();\n     document.body.appendChild( stats.domElement );\n\n          // call the render function\n          render();\n        }\n    ```", "```js\n        function render() {\n          requestAnimationFrame(render);\n\n          scene.getObjectByName('cube').rotation.x+=0.05;\n          renderer.render(scene, camera);\n     stats.update();\n        }\n    ```", "```js\n    <script src=\"img/dat.gui.min.js\"></script>\n```", "```js\n        ...\n        var control;\n        function init() {\n          ...\n\n          control = new function() {\n            this.rotationSpeed = 0.005;\n            this.scale = 1;\n          };\n          addControls(control);\n\n          // call the render function\n          render();\n        }\n    ```", "```js\n        function addControls(controlObject) {\n          var gui = new dat.GUI();\n          gui.add(controlObject, 'rotationSpeed', -0.1, 0.1);\n          gui.add(controlObject, 'scale', 0.01, 2);\n        }\n    ```", "```js\n        function render() {\n          renderer.render(scene, camera);\n          scene.getObjectByName('cube').rotation.x+= control.rotationSpeed;\n          scene.getObjectByName('cube').scale.set (control.scale,\n            control.scale,\n            control.scale);\n          requestAnimationFrame(render);\n        }\n    ```", "```js\n> python\nPython 2.7.3 (default, Apr 10 2013, 05:09:49) \n[GCC 4.7.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```", "```js\n    > python -m SimpleHTTPServer\n\n    ```", "```js\n    Serving HTTP on 0.0.0.0 port 8000...\n\n    ```", "```js\n> npm\n\n```", "```js\nUsage: npm <command>\nwhere ...\n\n```", "```js\n    Usage: npm <command>...\n\n    ```", "```js\n    > npm install -g http-server\n\n    ```", "```js\n    > http-server\n    Starting up http-server, serving ./ on port: 8080\n    Hit CTRL-C to stop the server\n\n    ```", "```js\n        chrome.exe --disable-web-security\n        ```", "```js\n        google-chrome --disable-web-security\n        ```", "```js\n        open -a Google\\ Chrome --args --disable-web-security\n\n        ```", "```js\n        function setupKeyControls() {\n          var cube = scene.getObjectByName('cube');\n          document.onkeydown = function(e) {\n            switch (e.keyCode) {\n              case 37:\n              cube.rotation.x += 0.1;\n              break;\n              case 38:\n              cube.rotation.z -= 0.1;\n              break;\n              case 39:\n              cube.rotation.x -= 0.1;\n              break;\n              case 40:\n              cube.rotation.z += 0.1;\n              break;\n            }\n          };\n        }\n    ```", "```js\n    function setupKeyLogger() {\n      document.onkeydown = function(e) {\n        console.log(e);\n      }\n    }\n```", "```js\n    function onLoadCallback(loaded) {\n      // just output the length for arrays and binary blobs\n      if (loaded.length) {\n        console.log(\"Loaded\", loaded.length);\n      } else {\n        console.log(\"Loaded\", loaded);\n      }\n    }\n```", "```js\n    function onProgressCallback(progress) {\n      console.log(\"Progress\", progress);\n    }\n\n    function onErrorCallback(error) {\n      console.log(\"Error\", error)\n    }\n```", "```js\n        function loadTexture(texture) {\n          var texture = THREE.ImageUtils.loadTexture(textureURL, null, onLoadCallback, onErrorCallback);\n          console.log(\"texture after loadTexture call\", texture);\n        }\n    ```", "```js\n        function loadModel(modelUrl) {\n          var jsonLoader = new THREE.JSONLoader();\n          jsonLoader.load(modelUrl, onLoadCallback, null);\n        }\n    ```", "```js\n        function loadModelWithProgress(model) {\n          var jsonLoader = new THREE.JSONLoader();\n          jsonLoader.loadAjaxJSON(jsonLoader, model, onLoadCallback, null, onProgressCallback);\n        }\n    ```", "```js\n        function loadOthers(res) {\n          var xhrLoader = new THREE.XHRLoader();\n          xhrLoader.load(res, onLoadCallback, onProgressCallback, onErrorCallback);\n        }\n    ```", "```js\n    <script src=\"img/q.js\"></script>\n```", "```js\n        loadModel(model)\n          .then(function(result) {return loadTexture(texture)})\n          .then(function(result) {return loadModel(m)})\n          .then(function(result) {return loadTexture(texture)})\n          .then(function(result) {return loadOthers(resource)})\n          .then(function(result) {return loadModelWithProgress(m)})\n          .then(function(result) {return loadModel(model)})\n          .then(function(result) {return loadOthers(resource)})\n          .then(function(result) {return loadModel(model)})\n          .then(function() {console.log(\"All done with sequence\")})\n          .catch(function(error) {\n            console.log(\"Error occurred in sequence:\",error);\n          })\n          .progress(function(e){\n            console.log(\"Progress event received:\", e);\n           });\n    ```", "```js\n            function loadTexture(texture) {\n\n              var deferred = Q.defer();\n              var text = THREE.ImageUtils.loadTexture\n              (texture, null, function(loaded) {\n                console.log(\"Loaded texture: \", texture);\n                deferred.resolve(loaded);\n              }, function(error) {\n                deferred.reject(error);\n              });\n\n              return deferred.promise;\n            }\n        ```", "```js\n            function loadModel(model) {\n\n              var deferred = Q.defer();\n              var jsonLoader = new THREE.JSONLoader();\n              jsonLoader.load(model, function(loaded) {\n                console.log(\"Loaded model: \", model);\n                deferred.resolve(loaded);\n              }, null);\n\n              return deferred.promise;\n            }\n\n            function loadOthers(res) {\n              var deferred = Q.defer();\n\n              var xhrLoader = new THREE.XHRLoader();\n              xhrLoader.load(res, function(loaded) {\n                console.log(\"Loaded other: \", res);\n                deferred.resolve(loaded);\n              }, function(progress) {\n                deferred.notify(progress);\n              }, function(error) {\n                deferred.reject(error);\n              });\n\n              return deferred.promise;\n            }\n        ```", "```js\n            function loadModelWithProgress(model) {\n              var deferred = Q.defer();\n\n              var jsonLoader = new THREE.JSONLoader();\n              jsonLoader.loadAjaxJSON(jsonLoader, model,\n              function(model) {\n                console.log(\"Loaded model with progress: \", model);\n                deferred.resolve(model)\n              }, null,\n              function(progress) {\n                deferred.notify(progress)\n              });\n\n              return deferred.promise;\n            }\n        ```", "```js\nstep1(function (value1) {\n  step2(value1, function(value2) {\n    step3(value2, function(value3) {\n      step4(value3, function(value4) {\n        // Do something with value4\n      });\n    });\n  });\n});\n```", "```js\nQ.fcall(promisedStep1)\nthen(promisedStep2)\nthen(promisedStep3)\nthen(promisedStep4)\nthen(function (value4) {\n  // Do something with value4\n})\ncatch(function (error) {\n  // Handle any error from all above steps\n})\ndone();\n```", "```js\n        #holder { border: 10px dashed #ccc; \n        width: 150px; height: 150px; \n        margin: 20px auto;}\n        #holder.hover { border: 10px dashed #333; #333}\n    ```", "```js\n      <body>\n        <div id=\"holder\"></div>\n      </body>\n    ```", "```js\n        function setupDragDrop() {\n          var holder = document.getElementById('holder');\n\n          holder.ondragover = function() {\n            this.className = 'hover';\n            return false;\n          };\n\n          holder.ondragend = function() {\n            this.className = '';\n            return false;\n          };\n\n          holder.ondrop = function(e) {\n            ...\n          }\n        }\n    ```", "```js\n          this.className = '';\n          e.preventDefault();\n\n          var file = e.dataTransfer.files[0],\n          var reader = new FileReader();\n          reader.onload = function(event) {\n            holder.style.background = \n            'url(' + event.target.result + ') no-repeat center';\n\n            var image = document.createElement('img');\n            image.src = event.target.result;\n            var texture = new THREE.Texture(image);\n            texture.needsUpdate = true;\n\n            scene.getObjectByName('cube').material.map = texture;\n          };\n          reader.readAsDataURL(file);\n          return false;\n    ```"]