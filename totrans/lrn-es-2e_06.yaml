- en: Implementing the Reflect API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Reflect API is used for object reflection (that is, inspecting and manipulating
    the properties of objects). Although ES5 already had APIs for object reflection,
    these APIs were not well organized and, on failure, used to throw an exception.
    The Reflect API is well organized and makes it easier to read and write code,
    as it doesn''t throw exceptions on failure. Instead, it returns the Boolean value,
    representing if the operation was true or false. Since developers are adapting
    to the Reflect API for object reflection, it''s important to learn this API in
    depth. In this chapter, we''ll cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Calling a function with a given `this` value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invoking a constructor with the prototype property of another constructor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining or modifying the attributes of the object properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enumerating the properties of an object using an iterator object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving and setting the internal [[prototype]] property of an object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lot of other operations related to inspecting and manipulating methods and
    properties of objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Reflect object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The global `Reflect` object exposes all the new methods for object reflection.
    `Reflect` is not a function object; therefore, you cannot invoke the `Reflect`
    object. Also, you cannot use it with the `new` operator. All the methods of the
    Reflect API are wrapped in the `Reflect` object to make it look well organized.
  prefs: []
  type: TYPE_NORMAL
- en: The `Reflect` object provides many methods, which overlap with the global object's
    methods in terms of functionality. Let's see the various methods provided by the
    `Reflect` object for object reflection.
  prefs: []
  type: TYPE_NORMAL
- en: The Reflect.apply(function, this, args) method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Reflect.apply()` method is used to invoke a function with a given `this`
    value. The function invoked by `Reflect.apply()` is called as the target function.
    It''s the same as the `apply()` method of the function object. The `Reflect.apply()`
    method takes three arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: The first argument represents the target function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second argument represents the value of `this` inside the target function.
    This argument is optional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third argument is an array object, specifying the arguments of the target
    function. This argument is optional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Reflect.apply()` method returns whatever the target function returns.
    Here is a code example to demonstrate how to use the `Reflect.apply()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Reflect.construct(constructor, args, prototype) method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Reflect.construct()` method is used to invoke a function as a constructor.
    It's similar to the `new` operator. The function that will be invoked is called
    as the target constructor.
  prefs: []
  type: TYPE_NORMAL
- en: One special reason why you may want to use the `Reflect.construct()` method
    instead of the `new` operator is that you can target the constructor's prototype
    to match the prototype of another constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Reflect.construct()` method takes three arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: The first argument is the target constructor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second argument is an array, specifying the arguments of the target constructor.
    This argument is optional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third argument is another constructor whose prototype will be used as the
    prototype of the target constructor. This argument is optional. The `Reflect.construct()`
    method returns the new instance created by the target constructor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the code example, to demonstrate how to use the `Reflect.constructor()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we used the prototype chain of `consturctor2` as the
    prototype of `constructor1` while invoking `constructor1`.
  prefs: []
  type: TYPE_NORMAL
- en: The Reflect.defineProperty(object, property, descriptor) method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Reflect.defineProperty()` method defines a new property directly on an
    object or modifies an existing property on an object. It returns a Boolean value
    indicating whether the operation was successful or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s similar to the `Object.defineProperty()` method. The difference is that
    the `Reflect.defineProperty()` method returns a Boolean, whereas the `Object.
    defineProperty()` returns the modified object. If the `Object.defineProperty()`
    method fails to modify or define an object property, then it throws an exception,
    whereas the `Reflect.defineProperty()` method returns a `false` result. The `Reflect.defineProperty()`
    method takes in three arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: The first argument is the object that is used to define or modify a property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second argument is the symbol or name of the property that is to be defined
    or modified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third argument is the descriptor for the property that is being defined
    or modified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the data properties and accessor properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since ES5, every object property is either a data property or an accessor property.
    A data property has a value, which may or may not be writable, whereas an accessor
    property has a getter-setter pair of functions to set and retrieve the property
    value.
  prefs: []
  type: TYPE_NORMAL
- en: The attributes of a data property are `value`, `writable`, `enumerable`, and
    `configurable`. On the other hand, the attributes of an accessor property are
    `set`, `get`, `enumerable`, and `configurable`.
  prefs: []
  type: TYPE_NORMAL
- en: A descriptor is an object that describes the attributes of a property. When
    creating a property using the `Reflect.defineProperty()` method, the `Object.
    defineProperty()` method, the `Object.defineProperties()` method, or the `Object.create()`
    method, we need to pass a descriptor for the property.
  prefs: []
  type: TYPE_NORMAL
- en: 'A data property''s descriptor object has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Value:** This is the value associated with the property. The default value
    is `undefined`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Writable:** If this is `true`, then the property value can be changed with
    an assignment operator. The default value is `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configurable:** If this is `true`, then the property attributes can be changed,
    and the property may be deleted. The default value is `false`. Remember, when
    the configurable attribute is `false` and the writable is `true`, the value and
    the writable attributes can be changed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enumerable:** If this is `true`, then the property shows up in the `for…in`
    loop and the `Object.keys()` method. The default value is `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An accessor property''s descriptor has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Get:** This is a function that returns the property value. The function has
    no parameters and the default value is `undefined`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set:** This is a function that sets the property value. The function will
    receive the new value that is being assigned to the property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configurable:** If this is `true`, then the property descriptor can be changed
    and the property may be deleted. The default value is `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enumerable:** If this is `true`, then the property shows up in the `for…in`
    loop and the `Object.keys()` method. The default value is `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the properties of the descriptor object, JavaScript decides whether
    the property is a data property or an accessor property.
  prefs: []
  type: TYPE_NORMAL
- en: If you add a property without using the `Reflect.defineProperty()` method, the
    `Object.defineProperty()` method, the `Object.defineProperties()` method, or the
    `Object.create()` method, then the property is a data property and the writable,
    enumerable, and configurable attributes are all set to `true`. After the property
    is added, you can modify its attributes.
  prefs: []
  type: TYPE_NORMAL
- en: If an object already has a property with the specified name while calling the
    `Reflect.defineProperty()` method, the `Object.defineProperty()` method, or the
    `Object.defineProperties()` method, then the property is modified. The attributes
    that are not specified in the descriptor remain the same.
  prefs: []
  type: TYPE_NORMAL
- en: You can change a data property to an accessor property, and vice versa. If you
    do this, the configurable and enumerable attributes that are not specified in
    the descriptor will be preserved in the property. Other attributes that are not
    specified in the descriptor are set to their default values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is example code that demonstrates how to create a data property using
    the `Reflect.defineProperty()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is more example code that demonstrates how to create an accessor property
    using the `Reflect.defineProperty()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The Reflect.deleteProperty(object, property) method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Reflect.deleteProperty()` method is used to delete a property of an object.
    It's the same as the `delete` operator.
  prefs: []
  type: TYPE_NORMAL
- en: This method takes two arguments--that is, the first argument is the reference
    to the object and the second argument is the name of the property to delete. The
    `Reflect. deleteProperty()` method returns `true` if it has deleted the property
    successfully. Otherwise, it returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a code example that demonstrates how to delete a property using the
    `Reflect.deleteProperty()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The Reflect.get(object, property, this) method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Reflect.get()` method is used to retrieve the value of an object's property.
    The first argument is the object and the second argument is the property name.
    If the property is an accessor property, then we can provide a third argument,
    which will be the value of `this` inside the `get` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a code example that demonstrates how to use the `Reflect.get()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The Reflect.set(object, property, value, this) method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Reflect.set()` method is used to set the value of an object's property.
    The first argument is the object, the second argument is the property name, and
    the third argument is the property value. If the property is an accessor property,
    then we can provide a fourth argument, which will be the value of `this` inside
    the `set` function.
  prefs: []
  type: TYPE_NORMAL
- en: The `Reflect.set()` method returns `true` if the property value was set successfully.
    Otherwise, it returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a code example that demonstrates how to use the `Reflect.set()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The Reflect.getOwnPropertyDescriptor(object, property) method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Reflect.getOwnPropertyDescriptor()` method is used to retrieve the descriptor
    of an object's property.
  prefs: []
  type: TYPE_NORMAL
- en: The `Reflect.getOwnPropertyDescriptor()` method is the same as the `Object.getOwnPropertyDescriptor()`
    method. The `Reflect. getOwnPropertyDescriptor()` method takes two arguments.
    The first argument is the object and the second argument is the property name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example to demonstrate the `Reflect.getOwnPropertyDescriptor()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The Reflect.getPrototypeOf(object) method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Reflect.getPrototypeOf()` method is used to retrieve the prototype of an
    object--that is, the value of the internal `[[prototype]]` property of an object.
  prefs: []
  type: TYPE_NORMAL
- en: The `Reflect.getPrototypeOf()` method is the same as the `Object.getPrototypeOf()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a code example that demonstrates how to use the `Reflect. getPrototypeOf()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The Reflect.setPrototypeOf(object, prototype) method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Reflect.setPrototypeOf()` is used to set the internal `[[prototype]]` property's
    value of an object. The `Reflect.setPrototypeOf()` method will return `true` if
    the internal `[[prototype]]` property's value was set successfully. Otherwise,
    it will return `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a code example that demonstrates how to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The Reflect.has(object, property) method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Reflect.has()` is used to check if a property exists in an object. It also
    checks for the inherited properties. It returns `true` if the property exists.
    Otherwise, it returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: It's the same as the `in` operator in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a code example that demonstrates how to use the `Reflect.has()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The Reflect.isExtensible(object) method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Reflect.isExtensible()` method is used to check if an object is extensible
    or not,--that is, if we can add new properties to an object.
  prefs: []
  type: TYPE_NORMAL
- en: An object can be marked as non-extensible using the `Object.preventExtensions()`,
    `Object.freeze()`, and the `Object.seal()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: The `Reflect.isExtensible()` method is the same as the `Object.isExtensible()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a code example that demonstrates how to use the `Reflect.isExtensible()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The Reflect.preventExtensions(object) method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Reflect.preventExtensions()` is used to mark an object as non-extensible.
    It returns a Boolean, indicating whether the operation was successful or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s the same as the `Object.preventExtensions()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The Reflect.ownKeys(object) method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Reflect.ownKeys()` method returns an array whose values represent the keys
    of the properties of a provided object. It ignores the inherited properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the example code to demonstrate this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what object reflection is and how to use the Reflect
    API for object reflection. We saw various methods of the `Reflect` object with
    examples. Overall, this chapter introduced the Reflect API to inspect and manipulate
    the properties of objects. In the next chapter, we will learn about proxies and
    their uses.
  prefs: []
  type: TYPE_NORMAL
