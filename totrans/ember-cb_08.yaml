- en: Chapter 8. Logging, Debugging, and Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Ember.Logger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Ember Inspector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying deprecations and using advanced features of Ember Inspector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using acceptance testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing is an important part of the Ember framework. Ember allows three different
    classifications of tests—**acceptance**, **unit**, and **integration**.
  prefs: []
  type: TYPE_NORMAL
- en: Acceptance tests are used to test the application flow and interaction. It mimics
    the same actions that a user might have. For example, this could include filling
    out forms or navigating to different parts of an application.
  prefs: []
  type: TYPE_NORMAL
- en: Unit tests are used to test smaller chunks of functionality. This might include
    testing computed properties or checking fields for different element tags.
  prefs: []
  type: TYPE_NORMAL
- en: Integration tests are somewhere in between unit and acceptance tests. It's recommended
    to use them with component testing. For example, integration tests work well with
    testing UI and controls.
  prefs: []
  type: TYPE_NORMAL
- en: Creating test cases for your applications is a good practice, especially if
    this application will be used in production.
  prefs: []
  type: TYPE_NORMAL
- en: Using Ember.Logger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Ember.Logger** is a robust type of logging in Ember. It goes beyond the capabilities
    of `imports.console`. In this recipe, we''ll take a look at some examples on how
    to work with it in your application.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this project, we''ll create a simple program that demonstrates how to use
    some of the `Ember.logging` capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new program, add a new `index` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a new `index` route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `index.js` file in the `routes` folder. Add some new logging:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Ember.logging` gives us five different logging options. All these different
    types of `log` methods accept one or more arguments. Each argument will be joined
    together and separated by a space when written to the browser console window:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the basic form of logging in Ember. It simply logs the values to the
    browser console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `info` logger logs a message to the console as an `info` message. In Firefox
    and Chrome, a small **I** icon is displayed next to the item:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `error` log prints to the console with an **error** icon, red text, and
    stack trace.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `debug` log prints to the console in blue text.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The warning log will print to the console with a **warning** icon.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `assert` statement will return an error and stack trace if the value returns
    `false`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Fire up the Ember server and open **Console**. This is a screenshot of how it
    looks in Chrome:![How to do it...](img/00043.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Ember.Logger is a more powerful console logger. It's a robust logging tool
    to make debugging easier. Ember.Logger is built-in in the Ember CLI package.
  prefs: []
  type: TYPE_NORMAL
- en: Using Ember Inspector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ember Inspector is an add-on for your browser that can help you debug your
    Ember app. In this recipe, we'll look at some examples on how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before beginning, you must install the add-on. It's available for Chrome, Firefox,
    or Opera. Other browsers such as Internet Explorer can also be used via `bookmarklet`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the browser add-on for Ember Inspector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Firefox, install the add-ons from the following website: [https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/](https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On Chrome, install the add-on from the Chrome web store: [https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi](https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All other browsers visit the Ember Inspector Github page for further instructions:
    [https://github.com/emberjs/ember-inspector](https://github.com/emberjs/ember-inspector)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the purposes of our recipe, we''ll use Ember CLI Mirage to return a simple
    `school` model. After creating a new project, run this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will install all the necessary files so that we can mock an HTTP server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After the add-on for Ember CLI Mirage is installed, update the `config.js`
    file in the `mirage` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add an HTTP GET route that our Ember client will connect when retrieving
    the school information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the file for the school information in the `mirage/factories/` folder
    called `school.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This file will be used to generate fake names and city data for our fictitious
    school.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `default.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will seed the data that we need from our factories for the application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Generate an `index` `route`, `model`, and the REST `adapter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These files will be used in our application, which we'll discuss in the next
    section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The purpose of this application is to return a list of schools. We'll be using
    the Ember Inspector to look at this data in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `application.js` file in the `adapters` folder. Verify that the `RESTAdapter`
    is set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This tells Ember to use the REST adapter with Ember Data. Review [Chapter 7](part0059_split_000.html#1O8H61-d21a6ad8148a415181fa52c0043435bb
    "Chapter 7. Ember Models and Ember Data"), *Ember Models and Ember Data,* on Ember
    Data for a refresher.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `school.js` file in the `models` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This model has two properties, `name` and `city`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `index.hbs` file in the `app/templates` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `each` helper will iterate through every model returned and display the
    school information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `index.js` file in the `app/routes` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `ember server` and you'll see a list of schools, as illustrated in the following
    image:![How to do it...](img/00044.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's open the Ember Inspector and see what it shows. In Chrome, you can access
    this by opening the console and clicking on the **Ember** tab:![How to do it...](img/00045.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Ember Inspector shows **View Tree**, **Routes**, **Data**, **Deprecations**,
    and **Info**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Info** in the Ember Inspector:![How to do it...](img/00046.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Info displays all the library information loaded in this application. This can
    be really useful in finding out what version everything is using.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **View** **Tree** in the Ember Inspector:![How to do it...](img/00047.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **View Tree** shows all sorts of information about the application. It shows
    the current routes, templates, models, and more. This can be helpful to figure
    out what's currently loaded on the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Routes** in the Ember Inspector:![How to do it...](img/00048.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Routes** show all the available routes, controllers, and templates. Some
    routes may not be defined but will be displayed, such as **loading**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **$E** next to the **index** route:![How to do it...](img/00049.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector, you can assign instance variables by clicking on **$E**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the console and add a new record using the instance variable, **$E**:![How
    to do it...](img/00050.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can type the following in the console window in the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add a new record to your data store. The page will automatically update
    with this information. This is very valuable. You can use this anywhere to help
    troubleshoot issues.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on `Data` to see all the model data:![How to do it...](img/00051.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, you can click on any of this data and verify the attributes. You
    can make changes as well and it will automatically update to the screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Verifying deprecations and using advanced features of Ember Inspector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will explore deprecations using advanced features of Ember
    Inspector.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Deprecation warnings will be displayed in deprecations. Check this to make
    sure that nothing in your application is deprecated. If deprecation is listed,
    it will have a link that you can click on to see what you need to do to fix it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ember Inspector was designed to make the creating and debugging of Ember applications
    easier. It was created as an add-on for most modern web browsers. It displays
    your current application information, routes, templates, data, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s an open source add-on and has an active developer community behind it.
    New features are being added all the time. To request your own, check out the
    Github page here: [https://github.com/emberjs/ember-inspector](https://github.com/emberjs/ember-inspector)'
  prefs: []
  type: TYPE_NORMAL
- en: Using acceptance testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Acceptance tests generally help test workflows and emulate user interactions.
    In this recipe, we'll look at creating a few simple acceptance tests.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new application, create a new component called `book-shelf` and a new
    acceptance test called `add-book-test.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create the code necessary for the `book-shelf` component and the `add-book`
    acceptance test. Keep in mind that an integration test will also be generated
    for the `book-shelf` component. We will not be updating the integration test in
    this example.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the component file with a new `books` array and new action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This component uses the `books` property to keep track of books on the book
    shelf. The `books` property is an Ember array of objects. The `add` action adds
    another object to the array. `Ember.A` is used to declare an Ember array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `book-shelf.hbs` component template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component lists all the books. It also has an `input` helper and `button`.
    The button has an action called `add` that gets triggered on the click event.
    It passes on the value from the `input` helper as an argument to `action`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `book-shelf` component to the application file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code adds the `book-shelf` component to the application template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the test code to the `add-book-test.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This acceptance test visits the root of the application at `/`. It then adds
    new text to the `input` helper and clicks the `button`. It then checks the URL
    and template to make sure the text was added.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The code at the top is mostly boilerplate. The tests are at the bottom and can
    be followed step by step. The `visit`, `fillIn`, `click`, and `andThen` helpers
    are all asynchronous test helpers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following is a list of all the asynchronous and synchronous test helpers:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`click(selector)`: This clicks an element and triggers the corresponding action,
    and returns a promise that fulfils when asynchronous behavior is complete'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fillIn(selector, value)`: This fills in the selected input with the values
    given, and returns a promise that fulfils when all asynchronous behavior is complete'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keyEvent(selector, type, keyCode)`: This simulates `keypress`, `keydown`,
    or `keyup` on the element'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`triggerEvent(selector, type, options)`: This triggers the given event on the
    element identified by the `selector`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`visit(url)`: This visits the route given by the URL, and returns a promise
    that is fulfilled when all asynchronous behavior is complete'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`currentPath()`: This returns the current path'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`currentRouteName()`: This returns the currently active route'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`currentURL()`: This returns the current URL'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`find(selector, context)`: This finds an element starting at the app''s root
    element; optionally, you can add some context'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run `ember server` and visit the `/tests` URL. This URL will display all the
    tests running. Look for the acceptance test for add-book:![How to do it...](img/00053.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This acceptance test shows that everything passed. Alternatively, you can also
    run the tests on the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will bring up a screen so that you can run tests in your console. To use
    this, you must first navigate to `localhost` on port `7357`. This screen will
    then refresh with the number of passed tests:![How to do it...](img/00054.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each test will be checked, and any tests that fail will be shown on this screen.
    The test will be rerun after any file changes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Acceptance tests are used to test the user interaction and flow. This is done
    via Ember's QUnit testing framework, although other testing frameworks are supported
    using third-party add-ons. You can navigate to the `/tests` URL or run `ember
    test` on the server to execute test cases.
  prefs: []
  type: TYPE_NORMAL
- en: Using unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit tests are used to test smaller chunks of functionality. In this recipe,
    we'll see an example of this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we'll create a simple `Ember.Object` with a computed property.
    We'll test this computed property and assert if the value returned is correct
    or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new project, create a new `first-last.js` file in the `models` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this file, we have two properties, `firstName` and `lastName`. The `fullName`
    computed property combines these two and returns a full name. If either of these
    properties change, the computed property will fire.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new unit test that checks `Ember.Object` and `computed` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `model-test` unit test generated will create a new test file in the `/tests/unit/models`
    directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `first-last-test.js` file with a new unit test that checks to see
    whether the computed property is returning the correct values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `moduleFor` is a unit test helper provided by `ember-qunit`. This helps
    us get access to the model that we created for lookup and instantiation. The `unit:
    true` property flags the test case as a unit test. As we are using `moduleFor`,
    we can instantiate the `firstLast` object using `this.subject()`. The test then
    sets `firstName` and `lastName` of the computed properties and does `assert` to
    make sure that they are equal.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `ember server` and check the output of the `/tests` URL:![How to do it...](img/00055.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The output shows that the unit tests passed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `first-last-test.js` file with the wrong value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We updated the code, so now the test will fail because the text does *NOT* match.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to the `/tests` folder and see the output:![How to do it...](img/00056.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the test fails because the text does not match. You can see this output
    by navigating to the `/tests` folder or running `ember test` from the command
    line.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unit tests are used to test small pieces of code or functionality. They are
    another part of the Ember QUnit library. Unit tests can run for virtually anything
    in your application, including models, components, or controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Testing components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Components should be tested using integration tests. In this recipe, we'll look
    at a simple example of a component that changes the size of the text.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new application, create a new component called `font-sizer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate a new component called `font-sizer`. This component will
    be used to resize text.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `font-sizer.js` file in the `components` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All components render as `div` tags inside of templates. We can add different
    attributes to these `div` tags if needed. In this case, the `attributeBindings`
    property will add a `style` tag. The `style` tag will be a computed property that
    updates whenever a `size` value changes. `Ember.Handlebars.SafeString` lets Ember
    know that the string should be displayed without escaping and that it is safe.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `application.hbs` file with the new component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `font-sizer` component is in block form. The test text will be in the `div`
    block.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `font-sizer-test.js` file so that we can check to make sure that
    the attribute was added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This code is automatically generated for us when we created the component.
    The `moduleForComponent` helper is used for components. The `integration`: `true`
    tags this test as an integration test. By doing this, we have the ability to render
    the component and pass the `size` property to it. The `assert.equal` method is
    used to check whether `font-size` is set correctly.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `ember server` and check `/tests`:![How to do it...](img/00057.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The test case passed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Testing actions in the font-sizer component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can simulate actions and test the results to verify the expected results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the existing application, update the `font-sizer.js` file with a new
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This new action will set the `textInfo` property to `'Hi'`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `font-sizer.js` file in the `components` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this template, we created a new `div` tag with an ID of `info` surrounding
    the `textInfo` property. A new `updateText` action was added to the `button` click.
    This action updates the `textInfo` property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a new test to the `font-sizer-test.js` file so that it can check the new
    action added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By setting `assert.expect(2)`, the test must have two asserts or it will fail.
    We first render the component using the `this.render` helper. The next statement
    checks whether the value returned from `this.$('#info').text()` equals `Hello
    World`. We then simulate clicking the button. The last statement checks whether
    `this.$('#info').text()` equals `Hi`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `ember server` and navigate to `/tests`. All the tests will pass:![Testing
    actions in the font-sizer component](img/00058.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Components use integration tests by way of the `moduleForComponent` helper.
    This feature of Ember's QUnit takes advantage of how Ember actually sees your
    components. You can test bound values as well as the returning actions.
  prefs: []
  type: TYPE_NORMAL
- en: Testing routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing routes can be done either by acceptance tests or unit tests. In this
    example, we'll create a simple unit test for a route.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new application, generate a new `students` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will generate the route code for students.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the students route information and add a new property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This route has a property called `someText`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `students-tests.js` file in the `tests/unit/routes` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this example, we are checking the output of the `someText` property. The
    first `assert.equal` gets the property and checks it against the `someText` value.
    The route instance can also set properties. The next assert checks to see whether
    the new value has been set. The final assert makes sure that the route is available.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `ember server` and navigate to `/tests`:![How to do it...](img/00059.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This shows all the tests passed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The route in your Ember application has a few different functions. It can hold
    your model data and have properties and actions. When testing routes, we can use
    it with a more general acceptance test or as an individual unit test.
  prefs: []
  type: TYPE_NORMAL
- en: Testing models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When testing models, you can use Ember Data to help. In this recipe, we'll create
    a model and test to make sure that it's creating data correctly.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new application, generate a new student model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate the necessary files for the student model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the student model with two properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This model has two properties, `firstName` and `lastName`. Both hold `string`
    values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a new unit test for the new model that tests the new properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This test uses the `moduleForModel` helper. The first test checks whether the
    model is okay and it exists. The second test checks the properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When creating the `model` instance, you can pass in the values of the `model`
    properties. In this case, the `{firstName: ''Erik'', lastName: ''Hanchett''}`
    object is created in the store. We can access these values using the `model.get`
    method. The `assert.equal` method checks against the model to make sure that the
    values match.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `ember server` and navigate to `/tests`, and you'll see the passing tests:![How
    to do it...](img/00060.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This shows that both tests passed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `moduleForModel` helper is used to access Ember's model information. This
    is done with Ember Data so that models can be tested. Ember's QUnit provides a
    way to test the module completely.
  prefs: []
  type: TYPE_NORMAL
- en: Testing controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Controllers should be tested in your application. In this recipe, we'll test
    some basic actions from a controller.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new `index` controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This creates a new controller called `index`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the index controller, add a new property and action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This controller has one property named `myValue`. Another action called `pressed`
    changes the value of `myValue` to whatever value is passed in the function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the index unit test. Add a few tests for the action and property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `moduleFor` helper is used here for controllers. The first test checks
    to make sure that the controller exists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This test creates an instance of the controller with `this.subject`. The initial
    value is checked to make sure that it's correct. To send an action to the controller,
    the `controller.send` method is called. The send method can take one or more parameters.
    The first is the name of the action to be triggered. This is followed by any values
    that should be passed in the method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `ember server` and navigate to `/tests`. This will display the passed tests:![How
    to do it...](img/00061.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This message shows that all tests passed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Controller tests are very similar to the unit tests that we discussed before.
    They use QUnit's `moduleFor` helper. In a controller, we can test the properties
    or actions and make sure that the results are as we expected.
  prefs: []
  type: TYPE_NORMAL
