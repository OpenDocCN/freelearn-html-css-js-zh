- en: Chapter 3. Adding Complexity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the first bot done, it''s time to learn how to extend our bot with the
    use of other **application program interfaces** (**APIs**). This means teaching
    our bot how to listen for keywords, respond to commands, and deal with errors
    (human or otherwise). In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Responding to keywords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bot commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External API integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responding to keywords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we used regular expressions to test the contents of
    the message against some predefined keywords. Once the keywords were confirmed,
    we could perform actions and return the results. This worked well; however, it
    can lead to a large `if else` block for more feature-rich bots. Instead, we will
    now look at refactoring the end result of the previous chapter into a more modular
    design. In this section, we will accomplish this by using ES6's new `class` syntax
    and Node's `export` method.
  prefs: []
  type: TYPE_NORMAL
- en: Using classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start by creating a new JavaScript file and name it `bot.js`. Paste the following
    into `bot.js` and save the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the code in depth, starting with the `class` structure. The
    **Mozilla** **Developer Network** (**MDN**) defines JavaScript classes as:'
  prefs: []
  type: TYPE_NORMAL
- en: '*JavaScript classes are introduced in ECMAScript 6 and are syntactical sugar
    over JavaScript''s existing prototype-based inheritance. The class syntax is not
    introducing a new object-oriented inheritance model to JavaScript. JavaScript
    classes provide a much simpler and clearer syntax to create objects and deal with
    inheritance.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Simply put, JavaScript classes are an *alternative* to the prototype-based class
    pattern, and in fact function the exact same way under the hood. The benefit to
    using classes is when you wish to extend or inherit from a particular class, or
    provide a clearer overview of what your class does.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the code example, we use a class in order to easily extend it later if we
    wish to add more functionality. Unique to classes is the `constructor` method,
    which is a special method for creating and initializing an object created with
    a class. When a class is called with the new keyword, this constructor function
    is what gets executed first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking at our constructor, we see the familiar use of the Slack RTM client:
    the client is initialized and the `RTM_CONNECTION_OPENED` event is used to log
    the team and username upon connecting. We attach the `slack` variable to the `this`
    object as a property, making it accessible throughout our class. Similarly, we
    assign the bot''s name to a variable, for easy access when required.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we export the bot class via the Node modules system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This instructs Node to return our class when this file is imported using the
    `require` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file in the same folder as `bot.js` and name it `index.js`. Paste
    the following inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving the file, run the following from the terminal to start the bot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can use the Slack token created in the previous chapter, or generate a new
    one for this bot.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's generally a good idea to not hardcode sensitive information such as tokens
    or API keys (such as the Slack token) in your code. Instead, use Node's `process.env`
    object to pass variables from the command line to your code. Especially, take
    care of storing API keys in a public source control repository such as GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've confirmed that your bot connects successfully to your Slack team,
    let's work on making the `Bot` class more modular.
  prefs: []
  type: TYPE_NORMAL
- en: Reactive bots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All the functionality described in our bot examples so far have one thing in
    common: the bots react to stimuli provided by human users. A message containing
    a keyword is sent and the bot responds with an action. These types of bot can
    be called reactive bots; they respond to an input with an output. The majority
    of bots can be classified as reactive bots, as most bots require some input in
    order to complete an action. An active bot is the opposite of this; rather than
    responding to input, the active bot produces output without needing any human
    stimuli. We will cover active bots in [Chapter 6](ch06.html "Chapter 6. Webhooks
    and Slash Commands"), *Webhooks and Slack Commands*. For now, let''s look at how
    we can optimize our reactive bots.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We already defined the essential mechanism of reactive bots: responding to
    stimuli. As this is a core concept of the reactive bot, it makes sense to have
    a mechanism in place to easily invoke the desired behavior.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, let''s add some functionality to our `Bot` class in the form of
    a `respondsTo` function. In previous examples, we used the `if` statements to
    determine when a bot should respond to a message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'There is nothing wrong with this approach. If we wish to code a bot that has
    multiple keywords, our `Bot` class can get very complex and cluttered very quickly.
    Instead, let''s abstract out this behavior to our `respondsTo` function. The function
    should take at least two arguments: the keywords we wish to listen for and a callback
    function that executes when the keywords are identified in a message.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `bot.js`, add the following to the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This snippet uses the new ES6 `Map` object, which is a simple key/value store,
    much like dictionaries in other languages. `Map` differs from `Object` in that
    `Map` does not have default keys (as `Object` has a prototype), which means that
    you can iterate over a `Map` without having to explicitly check if the `Map` contains
    a value or if its prototype does. For example, with `Maps`, you no longer have
    to use `Object.hasOwnProperty` when iterating.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we will see later, the `keywords Map` object uses regular expressions as
    a key and a callback function as the value. Insert the following code underneath
    the constructor function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This function takes three parameters: `keywords`, `callback`, and `start`.
    `keywords` is the word or phrase we wish to act on in the form of a regular expression.
    `callback` is a function that will be called if the keywords match the message,
    and `start` is an optional Boolean indicating whether we wish to search only at
    the beginning of the message string or not.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Look back at our newly updated constructor and pay special attention to the
    following lines within our `message` event listener:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, we loop through the keywords `Map` object, which has regular expressions
    as its keys. We test each regular expression against the received message and
    call our callback function with the message, the channel, and the user that sent
    the message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s add a `sendMessage` functionality to our bot class. This will
    act as a wrapper for Slack''s `sendMessage`. We don''t have to expose the entire
    Slack object anymore. Add the following function underneath our constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Despite having `channel` as an argument name, our `send` function will also
    work for a DM (a private channel between two people), additionally providing a
    callback via the Slack API's `sendMessage` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a function that can subscribe to messages and their contents,
    open up `index.js` and let''s add a simple "Hello World" implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file, restart your node process, and test out your bot. Here''s what
    it should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reactive bots](img/B05384_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Testing our refactor
  prefs: []
  type: TYPE_NORMAL
- en: The bot responds when our message has the string "hello", but only when it appears
    at the beginning of the message due to the `true` value we passed in after our
    callback.
  prefs: []
  type: TYPE_NORMAL
- en: We have now refactored our bot's code to abstract the Slack event system away
    and make our code cleaner in the process. Let's do something a little more impressive
    with our new system and implement a simple game.
  prefs: []
  type: TYPE_NORMAL
- en: Bot commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, our bots have responded to keywords in messages to say hello or tell
    us how long they've been running. These keywords are useful for simple tasks,
    but for more complex actions, we need to give the bot some parameters to work
    with. A keyword followed by parameters or arguments can be referred to as a bot
    command. Similar to the command line, we can issue as many arguments as we want
    to get the most out of our bot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s test this by giving our bot a new function: a game of chance where the
    issuer of the `roll` command plays a game of who can roll the highest number.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to `index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The command is very simple: a user sends the keyword `roll` followed by the
    name of the user they wish to challenge. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bot commands](img/B05384_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A straightforward implementation of the bot's roll command
  prefs: []
  type: TYPE_NORMAL
- en: It works well, but what happens if we omit any arguments to our `roll` command?
  prefs: []
  type: TYPE_NORMAL
- en: '![Bot commands](img/B05384_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`undefined` wins the game, which isn''t expected behavior'
  prefs: []
  type: TYPE_NORMAL
- en: 'No arguments are provided; therefore, the value at index 0 of our `args` array
    is `undefined`. Clearly, our bot lacks some basic functionality: invalid argument
    error handling.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With bot commands, user input must always be sanitized and checked for errors,
    lest the bot perform some unwanted actions.
  prefs: []
  type: TYPE_NORMAL
- en: Sanitizing inputs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add this block underneath our `getArgs` method call to stop empty rolls from
    happening:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sanitizing inputs](img/B05384_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Awesomebot providing some necessary sanitizing
  prefs: []
  type: TYPE_NORMAL
- en: That's one use case down, but what if someone tries to challenge someone who's
    not in the channel? At the moment, the bot will roll against whatever you put
    as the first argument, be it a member of the channel or a complete fabrication.
    This is an example of where we want to further sanitize and restrict the user
    input to useful data.
  prefs: []
  type: TYPE_NORMAL
- en: To fix this, let's make sure that only members of the channel from where the
    `roll` command originated can be targeted.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s add the following method to our `Bot` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This function simply checks to see whether the `members` property of `channel`
    exists, and returns a list of active non-bot users by name. In `index.js`, replace
    your `roll` command block with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Our biggest changes here are that the bot will now check to make sure the command
    given is a valid one. It will ensure that by checking the following (listed in
    order):'
  prefs: []
  type: TYPE_NORMAL
- en: There are members available in the channel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An argument was provided after the command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Whether the argument was valid, by making sure the name provided is in the members
    list of the channel or that the name is not that of a bot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The important lesson to take away from this exercise is to minimize interruptions
    by ensuring that all use cases are handled correctly. Sufficient testing is required
    to be certain that you handled all use cases. For instance, in our `roll` command
    example, we missed an important case: users can use the `roll` command against
    themselves:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sanitizing inputs](img/B05384_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Rolling against yourself probably isn't the most useful of functions
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix this issue, we need to make a simple addition to our command. Add the
    following code in our previous sanitizing checks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When developing bots, every precaution should be taken to ensure that bot inputs
    are sanitized and that error responses give information about the error. This
    is especially true when working with external APIs, where incorrect input could
    lead to wildly inaccurate results.
  prefs: []
  type: TYPE_NORMAL
- en: External API integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Eternal APIs are third-party services hosted outside of our bot structure. These
    come in many varying types and are used to solve many different problems, but
    their use in tandem with bots follows the same data flow structure.
  prefs: []
  type: TYPE_NORMAL
- en: '![External API integration](img/B05384_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The API call data flow structure between Slack, bot, and API service
  prefs: []
  type: TYPE_NORMAL
- en: We will build an example bot with API integration using a common and free-to-use
    API, namely that of the Wikimedia foundation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be warned that while many APIs are free, there are many that charge when a certain
    amount of requests are made. Always check whether there is a fee before incorporating
    them into your bots.
  prefs: []
  type: TYPE_NORMAL
- en: The Wikimedia foundation API is an example of a **representational state transfer**
    (**REST**) service, which communicates using standard **Hypertext Transfer Protocol**
    (**HTTP**) protocols such as GET or POST. Many RESTful services require you to
    transmit a token along with your request, ensuring security and for monetizing
    the service by tracking the amount of requests made. The Wikimedia API is a free
    RESTful service, meaning that we do not require a token to make use of it.
  prefs: []
  type: TYPE_NORMAL
- en: Our new bot, `wikibot`, will allow the user to search for a Wikipedia page and
    return the page's summary if found, or an error message if it does not exist.
  prefs: []
  type: TYPE_NORMAL
- en: To start, you should follow the steps in [Chapter 2](ch02.html "Chapter 2. Your
    First Bot"), *Your First Bot*, to create a new Slack bot integration via the Slack
    web service and start a new project. This new project will reuse the `Bot` class
    created in this chapter, whereas our new `index.js` entry point will be a new,
    empty file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start with the annotated and explained `index.js` code. At the conclusion
    of the chapter the full code will be made available for easier accessibility.
    Here''s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here, we import our own `Bot` class alongside a new library called `superagent`,
    which is used for making asynchronous JavaScript and XML (AJAX) calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running this code, be sure to install `superagent` using NPM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`superagent` is installed with the `–save` flag, as the program cannot function
    without it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get back to our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'These constants are the RESTful API **Uniform Resource Link** (**URL**) and
    the base Wikipedia page URL, respectively. You can test out the former by copying
    the URL, pasting it into the address field in a browser, and appending a topic
    at the end. You can check this for the following URL: [https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles=duck](https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro=&explaintext=&titles=duck).'
  prefs: []
  type: TYPE_NORMAL
- en: You should then see data returned in the **JavaScript object notation** (**JSON**)
    format, giving you an overview of the topic requested and the pages returned.
    The data and type of data returned is determined by the parameters in the query
    string of the URL. In the preceding URL, we query for the `extracts` property
    of a page, specifically the intro (`exintro`) and explanation (`explaintext`)
    for the page with the title `duck` in the JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: 'The latter constant is used later to return the URL for the Wikipedia page
    requested:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'As before, we initiate a new instance of `Bot` with our options and Slack token.
    You can reuse the first token created in [Chapter 2](ch02.html "Chapter 2. Your
    First Bot"), *Your First Bot*. However, it is recommended to generate a new one
    instead. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This function is a wrapper for the request to the Wikimedia API, in which we
    format the request by replacing the spaces in the search term with Unicode and
    make the GET request via the `superagent` library. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As this is an asynchronous request, we provide a callback function to be called
    when the `GET` request has returned the data we need. Before returning we make
    sure to parse the data into a JavaScript object form for easy access. The code
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![External API integration](img/B05384_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Wikibot explaining how it can be used
  prefs: []
  type: TYPE_NORMAL
- en: 'The first command we implement is a simple `help` command; its only function
    is to explain how to use the bot''s Wikipedia functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Set up our new bot command with the keyword `wiki` and make sure to return
    if the command sender is a bot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This will extract the search query of the command. For instance if the command
    is `wiki` `fizz buzz`, the output of `args` will be a string containing "fizz
    buzz":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we call our `getWikiSummary` function, with the arguments issued with
    the bot command and provide the anonymous function callback. If an error has occurred,
    immediately send an error message and log the error in the console. The command
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The data object returned by the RESTful API call consists of a nested object
    named `query`, which in turn has a nested object called `pages`. Inside the `pages`
    object, there are more objects that use Wikipedia''s internal page ID as a key,
    which is a series of numbers in a string format. Let''s take a look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`Object.keys` is a useful trick to retrieve data from an object without knowing
    the property''s name. We use it here as we don''t know the key ID for the page
    that we want, but we know we want the first value. `Object.keys` will return an
    array of key names for the `result.query.pages` object. We then select the value
    at index 0, as we''re only interested in the first result. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'A Wikipedia page ID of -1 indicates that the article doesn''t exist at all.
    Instead of trying to parse data that doesn''t exist, we inform the user of the
    problem and return. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If the summary text contains the phrase `may refer to`, then we can conclude
    that the search term provided could lead to multiple Wikipedia entries. Since
    we can''t guess at what the user intended, we simply ask them to be more specific
    and return. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Unfortunately, it is possible that an API request returns a summary that is
    empty. This is an issue on the Wikimedia API''s end where a term returns a page,
    but the summary text is missing. In this case, we inform the user of the problem
    in the `else` conditional block of this `if` statement. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The summary might stretch over several paragraphs, so for ease of use we convert
    the text block into an array of paragraphs by using the new line ASCII operator
    `\n` as our split criteria. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Like regular users, bots can use Slack''s formatting options when sending messages.
    In this instance, we prepend the `>` operator in front of our paragraph to indicate
    a quotation block. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: As before, we pass the `true` Boolean to our `respondsTo` method of the `Bot`
    class to indicate that we want our keyword `wiki` to only trigger a response if
    it is placed at the beginning of a message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve entered all the code into `index.js`, run the program using Node
    and test it in your Slack client:'
  prefs: []
  type: TYPE_NORMAL
- en: '![External API integration](img/B05384_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Wikibot is up and running
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a basic example of how to incorporate external API calls into your
    bot. Before we move on to the next section, we should consider the ramifications
    of complex API requests. If an API request takes a sizeable amount of time (for
    example, a service needs to perform complex calculations), it would be useful
    for the user to see an indication that the bot is working on the command. To accomplish
    this, we can show a **typing indicator** while the bot waits for a response. Typing
    indicators are shown when a human starts to type a message before hitting send.
    Add the following method to the `Bot` class in `bot.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'To test our indicator, add the following to `index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, send the message `test` in your Slack channel and watch the indicator
    appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![External API integration](img/B05384_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Wikibot is busy typing
  prefs: []
  type: TYPE_NORMAL
- en: '1000 milliseconds later, we get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![External API integration](img/B05384_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bot is done with the action and the typing indicator has been removed
  prefs: []
  type: TYPE_NORMAL
- en: After the typing indicator is dispatched, it will automatically disappear once
    a message has been sent to the channel by the bot.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the typing indicator in our example bot, insert the following line above
    the `getWikiSummary` method call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Keep in mind that since the Wikimedia API call resolves very quickly, it's unlikely
    that you'll see the typing indicator for longer than a few milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: Error handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuing on from the last topic, a good way of making your bot appear more
    natural is for it to provide clear instructions on how to use it. Providing the
    wrong input for a command should *never* cause the bot to crash.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bots should never crash due to user input. Either an error message should be
    sent or the request should silently fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can eliminate 99 percent of all bugs in your bot commands by doing valid
    type and content checking against the user''s input. Observe the following checklist
    when programming a new command:'
  prefs: []
  type: TYPE_NORMAL
- en: If arguments are required, are any of the arguments undefined?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are the arguments of the type the bot is expecting? For example, are strings
    provided when a number is expected?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If targeting a member of the channel, does that member exist?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Was the command sent in a DM? If so should the command still be executed?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the command pass a "sanity" check? For example, does the data or action
    requested make sense?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As an example of the preceding checklist, let''s review the checks we made
    with the `roll` command earlier in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Are there non-bot members in the channel to interact with?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Was an argument supplied?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Was the supplied argument valid?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the specified opponent in the channel the command was issued?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each point is a hurdle that the command's input had to overcome in order to
    return the desired result. If any of these questions is answered in the negative,
    then an error message is sent and the command process terminated.
  prefs: []
  type: TYPE_NORMAL
- en: These checks might appear lengthy and superfluous, but they are absolutely necessary
    to provide a natural experience with the bot.
  prefs: []
  type: TYPE_NORMAL
- en: As a final note, be aware that despite your best efforts, users have an uncanny
    ability to cause crashes, intentionally or otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: The more complex your bot becomes, the more likely it is that loopholes and
    edge cases will appear. Testing your bot thoroughly will get you most of the way,
    but always make sure that you are catching and logging errors on the programmatic
    side. A good debug log will save you many hours of frustration trying to find
    a difficult-to-squash bug.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to abstract away the core Slack API methods into
    a reusable module by using ES6's new class structures. The difference between
    a reactive and active bot was outlined as well as the distinction between keywords
    and bot commands. By applying the basic knowledge of external APIs outlined in
    this chapter, you should be able to create a bot that interfaces with any third-party
    application that provides RESTful APIs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the Redis data storage service and
    how to write a bot that interfaces with a persistent data source.
  prefs: []
  type: TYPE_NORMAL
