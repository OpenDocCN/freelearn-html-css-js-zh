- en: Chapter 7. Let's Go to the Movies!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It didn't take long after the introduction of cameras on phones to ask the question,
    "What about video?" Initially video recording was hampered by the limited space
    on phones as well as the hardware. It is one thing to snap a few JPEG files that
    might be a few hundred kilobytes each, but it is entirely another thing to take
    a video longer than a few seconds that doesn't add up to a pretty large file size.
    Furthermore, video has to be encoded and compressed, something that can be done
    in software, but is much better done in hardware.
  prefs: []
  type: TYPE_NORMAL
- en: When video recording did become practical, it changed the way we saw the world.
    Suddenly it was possible to have footage of news happening anywhere there was
    a cell phone – practically everywhere. Video recording became common place, so
    chances are good that there are very few handsets today that don't support it.
    In this project, we'll take a look at recording and playing video in our apps.
  prefs: []
  type: TYPE_NORMAL
- en: What do we build?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In all honesty, we're going to be building our [Project 6](ch06.html "Chapter 6. Say
    Cheese!"), *Say Cheese!*. Remember that one? Instead of working with still pictures,
    we'll be working with videos instead.
  prefs: []
  type: TYPE_NORMAL
- en: While the user interface and a good percentage of the code will be the same,
    video does present some interesting challenges. For example, how does one get
    a thumbnail of a video? We all know how a thumbnail should look, but how does
    one actually get it? Or, frankly, how do we do more than simply display the video?
    How do we enable playback?
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately (or fortunately, depending on your viewpoint), we'll need to delve
    into some native code in order to accomplish these tasks. The tasks themselves
    aren't complicated, but PhoneGap doesn't provide support for thumbnails of videos,
    and the Android platform doesn't provide good support for the HTML5 `VIDEO` tag,
    so we'll have to use another plugin for playing video as well.
  prefs: []
  type: TYPE_NORMAL
- en: What does it do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our app, called `Mem'ry` (we've got to be *hip* by leaving vowels out, right?)
    will allow the user to record video from within the app. Any recorded videos can
    be played back. Furthermore, we'll use the same document management we've used
    before to permit management of these files—deletion, duplication, and renaming.
  prefs: []
  type: TYPE_NORMAL
- en: Why is it great?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's face it, recording video isn't something that a lot of apps have to deal
    with. But playing it back? That's a much larger percentage of apps. Therefore,
    it is very important that you know how to play videos for the end user, but should
    you ever need to record video as well, this app will give you the tools necessary
    for that as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll also delve into some areas that PhoneGap doesn''t really provide any
    support for. It''s not so much PhoneGap''s fault, really, it''s more that videos
    aren''t simply a collection of images. They''re compressed and encoded, and there''s
    no obvious way to get a thumbnail of a video and display it as an image in HTML,
    which is what we''ve been using so far when working with PhoneGap. A thumbnail
    of an image, of course, is easy: just scale the image down. A thumbnail of a video?
    Not so easy; you''ve got to construct it from the compressed and encoded file,
    and HTML doesn''t know how to do that. Fortunately, the SDKs provided on the most
    popular platforms make it easy, but we''ll have to do some native coding to get
    there.'
  prefs: []
  type: TYPE_NORMAL
- en: How are we going to do it?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll be following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for the video thumbnail plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the video thumbnail plugin for iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the video thumbnail plugin for Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating with the video thumbnail plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing recording and importing of video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing video playback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What do I need to get started?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, make sure to get the files for this project from the download available
    for this book. We won't be listing the code in its entirely, since it is so similar
    to that in [Project 6](ch06.html "Chapter 6. Say Cheese!"), *Say Cheese!*, so
    in order for you to follow along you should either have a quick reference to your
    previous project or the one from our files.
  prefs: []
  type: TYPE_NORMAL
- en: Second, be sure to download the Android Video Player plugin from [https://github.com/phonegap/phonegap-plugins/tree/master/Android/VideoPlayer](https://github.com/phonegap/phonegap-plugins/tree/master/Android/VideoPlayer).
    In this project, we used the plugin for PhoneGap version 2.x and higher.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for the video thumbnail plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our app is practically identical with regards to the prior project's user interface
    and its interactions, so we won't go through the entire design process. Instead,
    we'll start right off with implementing the video thumbnail plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll be getting our hands dirty with native code for the first time in this
    book. While we've used plugins before (the ChildBrowser plugin in [Project 2](ch02.html
    "Chapter 2. Let's Get Social!"), *Let's Get Social!*), we've never created our
    own yet. Since we support more than one platform, we'll also have to write the
    plugin more than once.
  prefs: []
  type: TYPE_NORMAL
- en: Getting on with it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This task is essentially composed of three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the project to use the plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the JavaScript interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the native code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first two tasks are quite simple, but the last one, well, we'll cross that
    bridge in a few pages.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the project to use the plugins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first thing we need to do is to configure the projects we''re building
    to use the new plugin. The steps are different for each platform, but at a *high
    level* they are essentially the same thing. We''re telling PhoneGap about the
    plugin and that it is available for use. The steps are as follows for the different
    platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Xcode, navigate to the `Cordova.plist` file.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Plugins** section.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** sign that appears when hovering over a plugin. This will
    inserta new row.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `PKVideoThumbnail` as the key, and `PKVideoThumbnail` as the value.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the `index.html` file and add the `PKVideoThumbnail.js` script filegiven
    as follows:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Eclipse, navigate to the `/res/xml/config.xml` file and open it. If you
    aren't presented with the editable XML, switch to the XML text editor view.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the **Plugin** section of the XML file.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the `index_android.html` file and add the `PKVideoThumnail.js` script
    file given as follows:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: All this does is tell PhoneGap that we're going to have a plugin available with
    the name of `PKVideoThumbnail`. Without this, the app wouldn't work correctly,
    since it wouldn't know how to contact the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the JavaScript interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While it is technically possible to call a plugin without having any corresponding
    `.js` file, it is a fact that it is often easier to create an interface so that
    calling the plugin is just a little bit easier. The interface files will be nearly
    identical, but the iOS version will be just enough different that it wouldn't
    work under the Android platform and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the `www/plugins/iOS` directory, create a file called `PKVideoThumbnail.js`
    with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What the preceding code does is simply create an easy-to-use wrapper call that
    lets us call `PKVideoThumbnail.createThumbnail()` whenever we need to get a video's
    thumbnail instead of using `cordova.exec(some_function,error_function,"PKVideoThumbnail","createThumbnail",[…])`.
  prefs: []
  type: TYPE_NORMAL
- en: For some plugins that offer a lot of functionality, the JavaScript interface
    essentially acts as a go-between. It translates arguments to what the plugin can
    understand, and then handles the return results when returning back to JavaScript.
    In our case, the wrapper is pretty small.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Android version, create a file named `PKVideoThumbnail.js` under `www/plugins/Android`
    with these contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Could you spot the difference between the two files?
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ll give you a clue: look at the penultimate line, just before `source`.
    The iOS version adds `file://localhost`, while the Android version doesn''t. Small
    detail, but without it, the iOS version of the app wouldn''t work.'
  prefs: []
  type: TYPE_NORMAL
- en: What did we do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this task, we modified the project settings so that the project knows about
    the plugin we're about to create. We also created the JavaScript interface for
    both iOS and Android that will permit us to communicate with the native code.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the video thumbnail plugin for iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The iOS version of the video thumbnail will use a *hidden* video player to construct
    the thumbnail. Technically, we could use another library, but the video player
    is so convenient and fast when it comes to building images from videos. We hide
    it to ensure that the user will never actually see what's going on.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start, let''s create a new **Objective-C class** within Xcode. The easiest
    way is to right-click on the **Plugins** folder and select **New File...**, as
    seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/9403_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It's important that you use the **Plugins** folder that is a sibling to the
    **Other Sources** and **Resources** directories; not the one within the **www**
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/9403_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, ensure the **Cocoa Touch** category is selected and then select the **Objective-C
    class** icon. Click on **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/9403_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then give the class a name, in this case `PKVideoThumbnail`, and ensure that
    it is a subclass of `CDVPlugin`. Click on **Next** again, and then you'll be prompted
    to verify where you want to save the files. It should be set to the **Plugins**
    folder; if not, be sure to navigate there before completing the task.
  prefs: []
  type: TYPE_NORMAL
- en: Getting on with it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have the `.h` and `.m` files, we need to fill them in. Let''s start
    with the `.h` file first. The following is the *interface* or *specification*
    for the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: What we're doing in the preceding code is defining a method called `createThumbnail`
    that will be executed whenever we call `PKideoThumbnail.createThumbnail()` from
    JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Take note of the `#if…#else…#endif` construct; PhoneGap changed their method
    signature between versions 2.0 and 2.1, and so this handles both variations.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, though, we''ve not written any substantive code yet; we''ve been *declaring*
    or *defining* thus far. Let''s change that by working on the `.m` file as shown
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: First, we import several libraries that we need in order to construct our plugin.
    We also import our `.h` file as well; otherwise, the compiler would complain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Next, we define a method called `extractVideoThumbnail` that takes two parameters,
    namely, the path to the video and the location and name we should use when creating
    the image. Our method will return `YES` if we're successful, and `NO` if not.
    (This is the Objective-C Boolean equivalent to `TRUE` and `FALSE`.)
  prefs: []
  type: TYPE_NORMAL
- en: We also define a `thumbnail` of the type `UIImage`. The *asterisk* (`*`) indicates
    that this is a pointer – something very important in C-based languages. Essentially
    you'll use one whenever declaring a variable or parameter that's an object. When
    using numbers, you wouldn't use an asterisk, but in this case, we're only declaring
    one variable to start.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The next thing we do is declare and create `MPMoviePlayerController`. It's an
    object, so it gets the asterisk as well. We'll name it `mp` for short.
  prefs: []
  type: TYPE_NORMAL
- en: We pass in the path to the video, which needs to be prefixed with `file://localhost`;
    remember that we do this in `PKVideoThumbnail.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Then we set the playback time to `1` second in, and indicate that it shouldn't
    auto play. We just want a single image from the video, so we don't want to actually
    play it for the user yet.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Next we ask for the image nearest the 1 second point in the movie. Since compression
    and encoding in movies uses key frames, we may not get the image at the exact
    1 second mark, but it should be pretty close.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we save the thumbnail out to the desired file – our JavaScript will
    generally use the name of the movie and add a `.jpg` extension. The return value
    of the operation will either be `YES` or `NO`. If it is `NO`, the thumbnail wasn't
    successfully written.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we need to define the plugin handler for PhoneGap version 2.0 or lower:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: These three variables are always defined in plugins. They are critical to the
    functioning of the plugin. The first is a unique ID that PhoneGap uses to track
    calls between JavaScript and native code. The second is the result of our plugin's
    activities; we can use it to pass data back to JavaScript. The last one is the
    resulting JavaScript of the return code; this is used to call the success or failure
    routine.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next, we obtain the two parameters that should have been passed to the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We call the `extractVideoThumbnail` method with the two parameters. As we said
    before, if it returns `YES`, then it worked, and so our plugin result will be
    an OK. If it returns `NO`, we'll return an error result instead.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `@catch` block here is also important; it catches any errors that occur
    within the `@try` block. This might occur if something really went wrong or the
    wrong number (or type) of parameters were sent.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we essentially repeat ourselves, but using the PhoneGap 2.1 version
    of the plugin interface. Look closely, it does the same thing, but there are some
    subtle differences.
  prefs: []
  type: TYPE_NORMAL
- en: What did we do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: That's it! Now when we call `PKVideoThumbnail.createThumbnail()`, we'll be able
    to extract a thumbnail from any video we take or import. Cool, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: What else do I need to know?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Okay, so `extractVideoThumbnail()` isn''t quite standard Objective-C style.
    Typically, one would write it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'And we would have called it like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: But our way does the same thing and is a little less wordy. However, when working
    with Objective-C methods, it is important to recognize the differences in defining
    method signatures. If you're going to write a lot of Objective-C code, it's best
    to get used to the latter, but in a pinch, the former works too.
  prefs: []
  type: TYPE_NORMAL
- en: 'One last thing: what happens if we can''t extract a thumbnail from the video?
    You''ll notice that there''s nothing in the code that appears to handle this possibility.
    Chances are that `thumbnail` will be `NULL` and that the attempt to write the
    thumbnail to storage will either return `NO` or raise an exception. Either way,
    we''re covered with our code later on where we return `ERROR` if `NO` is returned.'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the video thumbnail plugin for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Android version of the plugin is very similar to the iOS version, although
    it doesn''t have to worry about the version of PhoneGap in use, so it is a little
    shorter. Ultimately, though, the steps are the same: grab a frame from a video,
    save it to storage, and return to JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First off, create a new class by opening the **File** menu, selecting **New**,
    and then selecting **Class**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, set the **Package** to `com.kerrishotts.PKVideoThumbnail`, the **Name**
    field of the class to `PKVideoThumbnail`, and then uncheck the first item under
    **Which method stubs would you like to create?** – we won''t need any sample code.
    This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/9403_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, open the resulting file `PKVideoThumbnail.java` file, and we'll start
    writing the Android version.
  prefs: []
  type: TYPE_NORMAL
- en: Getting on with it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unlike iOS, we only need one file, and it ends up being a bit shorter too,
    given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: First, as in iOS, we import the libraries we'll need for our plugin to work.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Unlike iOS, we define a single method called `execute`. If our plugin had multiple
    actions, we'd need to handle each one within this `execute` method. In iOS, this
    is done for us.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Since we need to check if the incoming action is `createThumbnail`, we have
    the preceding code. Technically, we could avoid this for a plugin only performing
    one action, but it would be nonstandard to do so.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the prior code, we define our two parameters that we pass in from JavaScript.
    Note the lack of any asterisks like we had in the iOS version. Nice not to have
    to worry about those pesky things, right?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Creating a thumbnail from a video is really quite simple; there's already a
    simple routine pre-written for us. We just pass the path to the video, and ask
    for a specific size (in our case, `MINI_KIND`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Actually saving the thumbnail to storage is a bit more involved. We need to
    check to see if we should create the file first (by checking if it doesn't exist
    first), and then if we can write to the file. Once we do that, we can use the
    `thumbnail.compress()` method to do the actual work of saving the file. All the
    other stuff is there to handle errors and such, and Java requires that you handle
    them. If not, the code will fail to compile.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, if we''re executing this bit of code, the thumbnail has been
    created successfully, and so we return `OK`. If we aren''t here, we''ve returned
    `ERROR` or `IO_EXCEPTION` or even something else, as listed in the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: What did we do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: That's all! We've extracted a thumbnail from a video file and saved it to a
    JPEG file for our JavaScript to work with.
  prefs: []
  type: TYPE_NORMAL
- en: What else do I need to know?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ok, so if you actually take a close look at what gets saved out of this code,
    you'll notice it really isn't very much of a thumbnail. In fact it's a image that's
    the same size as the video resolution. That's not too big a deal, though, since
    we'll shrink it down in our JavaScript, but I wanted to let you know.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with the video thumbnail plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we need to actually make the changes to our code so that we can display
    the video thumbnails. Open up the `documentsView.html` file under `www/views`
    so that you can follow along.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The theory behind displaying the thumbnails is much the same as displaying the
    thumbnails in our last project; that is, we're still using the `canvas` tag to
    speed up the feel of our app, and we're still generating thumbnails from JPEG
    files. The difference is that we have to generate those JPEG files from the video
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting on with it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by taking a look at the `documentIterator()` method in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: When compared to our previous project, the content is pretty similar so far.
    The only difference is the highlighted line. We have defined a variable earlier
    in the file named `documentToIndex`, which is an object. We're using it as an
    associative array, however, so that we can later map the file back to its index.
    For example, if file *1239548.mov* is the third item in our document list, we'd
    store *3* in the space for *1239548.mov*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, as before, we wait for `100` milliseconds before attaching the long press
    handler and such as seen in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This last portion is where we ask our new plugin to do the work of extracting
    the video thumbnail. We know the video's path in persistent storage, so we can
    pass that part along. We can also construct the filename for the JPEG as well
    (what we're doing is taking everything but the video's extension and substituting
    `.jpg` instead). Then when the video thumbnail has been generated successfully,
    `renderVideoThumbnail()` will be called. If an error occurs, we'll log it to the
    console.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `renderVideoThumbnail()` method as a whole is very similar to the remainder
    of the code inside the last project's `documentIterator()`. We've broken it out
    to make it a little easier to read, but otherwise it does the same thing. The
    only difference between the two is that we have to figure out the index – which
    image are we talking about. If you remember the variable we defined earlier, `documentToIndex[]`,
    we can figure out the index of the image from the filename, which is what we do
    in the preceding code snippet. From there on the code is identical, and we won't
    list the rest here.
  prefs: []
  type: TYPE_NORMAL
- en: What did we do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this task, we modified the `documentIterator()` method to work with our new
    plugin. We've asked for a thumbnail from a video, and we've managed to display
    it back to the end user when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing recording and importing of video
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've done the first part of our app, which was displaying thumbnails from videos,
    but we've got to actually record them before we can get anything into our app.
    In this task, we'll do exactly that—record a new video.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll be working in the `documentsView.html` file in the `www/views` directory,
    if you want to follow along.
  prefs: []
  type: TYPE_NORMAL
- en: Getting on with it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might think that we'd use the camera code from our previous project, and
    you'd be partially correct. For iOS, we can indeed use virtually the exact same
    code to import new videos, but for any platform to record video, we have to use
    a new API—the `CAPTURE` API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the code for `takeMovie()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `CAPTURE` API provides more methods than simply capturing video; you can
    capture audio as well (which is similar to using the `MEDIA` API in [Project 5](ch05.html
    "Chapter 5. Talking to Your App"), *Talking to Your App*). In our case, we use
    the `captureVideo()` method. It takes three parameters: the `success` function,
    the `failure` function, and any options we want to pass along. In our case, the
    only option is that we will limit the user to one video at a time. Technically,
    the API will allow more than one video in a session, but for our purposes, one
    at a time simplifies things.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code shows the `success` method, which will be called with a list
    of files. In our case, it will only have one filename, which we get by using the
    `zero`th index of the list. From that point forward, it's nearly identical to
    the way we copy a file from temporary storage to permanent storage in [Project
    6](ch06.html "Chapter 6. Say Cheese!"), *Say Cheese!*. The only difference is
    that we don't assume that the file extension will be `.jpg`. Videos on different
    platforms can often have very different extensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Next up is the `failure` function, where all we'll worry about is letting the
    user know the error code, but if you wanted, you could give a much better error
    message based on the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Finally, the third parameter is that set of options. In this case, we only want
    one video at a time, but there are other options one could pass, such as the video
    encoding type. Different platforms support these other options differently, so
    we won't dwell on them here, but they are available in the PhoneGap API documentation
    should you need them. ([http://docs.phonegap.com/en/edge/cordova_media_capture_capture.md.html#Capture](http://docs.phonegap.com/en/edge/cordova_media_capture_capture.md.html#Capture))
  prefs: []
  type: TYPE_NORMAL
- en: 'For importing video, we can use nearly the same code from the previous project,
    but we''ll put it all in `importMovie()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Most of this code is identical to the code in the previous project for `doPicture()`.
    The only real differences are the handling of the file extension and the `mediaType`
    option. Notice we pass `Camera.MediaType.VIDEO` instead. This ensures we will
    only get videos in return.
  prefs: []
  type: TYPE_NORMAL
- en: 'One catch: this doesn''t seem to work well on Android. We haven''t disabled
    it in the app (just in case you have better luck), but you may wish to disable
    the import functionality in your Android apps. On iOS, however, it works quite
    well.'
  prefs: []
  type: TYPE_NORMAL
- en: What did we do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this task, we implemented the code to record video and import video.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing video playback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Playing videos is a very important feature, especially if we're recording it,
    right? But even for apps that don't support video recording, video playback can
    be essential. Consider an e-learning type of application; reading about the subject
    can work well for a lot of people, but actually seeing the subject in action can
    help even more. Video would make an excellent platform for this type of learning.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll be working in `documentsView.html` and `movieView.html` in the `www/views`
    directory if you want to follow along.
  prefs: []
  type: TYPE_NORMAL
- en: Getting on with it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First off, there's a catch. Playing video happens to be really easy on iOS devices.
    Playing video on other devices, well, not so much.
  prefs: []
  type: TYPE_NORMAL
- en: For iOS, we'll use the movie view, which is akin to the image view in our previous
    project. Most of the code is duplicated, so we'll just talk about the changes
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The template portion of the movie view looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Whereas, in the previous project we used an `IMG` tag to display the image,
    we are now using a `VIDEO` tag to display the video. This is a feature of HTML
    5 that iOS supports very nicely, and as such, it makes it very easy for us to
    support video playback.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tag will have `%SRC%` replaced with the video filename when the documents
    view calls `setMovie()`, which looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: It's essentially the same as `setImage()` in the prior project, though we have
    introduced a *thumb* portion, which you could use if you wanted to display a small
    thumbnail that the user had to click on prior to playing the movie.
  prefs: []
  type: TYPE_NORMAL
- en: Once the movie view is pushed (by the documents view), and `setMovie()` is called,
    the `VIDEO` tag in the preceding code will cause the video to start playing instantly
    on iOS devices. Chances are good that the video will also fill the entire screen,
    something common on all mobile platforms. Tablets will generally permit inline
    video, but smaller form factors usually attempt to play video in full screen mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, as we already said, iOS is easy: HTML 5 video is properly supported, and
    we can display it simply with a minimum of fuss.'
  prefs: []
  type: TYPE_NORMAL
- en: Oh, if the other platforms were only as nice. Android, for example, claims to
    support the `VIDEO` tag, but its implementation is so horribly broken that chances
    are slim you'll find a device on which it will actually work. Yes, the controls
    will display, but that's about it.
  prefs: []
  type: TYPE_NORMAL
- en: What do we do instead? We use another plugin, this time written by Simon MacDonald
    who decided to help the PhoneGap community out by providing a simple video player
    plugin. ([http://simonmacdonald.blogspot.com/2011/11/video-player-plugin-for-phonegap.html](http://simonmacdonald.blogspot.com/2011/11/video-player-plugin-for-phonegap.html))
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to install the plugin into your Java project using the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `src` directory from the `Android/VideoPlayer` directory and add it
    to your project. Make sure the contents are included; deep inside this directory
    is a file called `VideoPlayer.java` that you need in your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `video.js` file in the `Android/VideoPlayer/www` directory in the plugin
    package to `www/plugins/Android` in your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line to your `index_android.html file`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following line to your `/res/xml/config.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll alter our code in `documentsView.html` to play video using this
    player if we''re an Android device. We''ll be doing this in the `documentContainerTapped()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we're any platform but Android, we'll attempt to use the movie view to play
    the video, but if we are on Android, we'll use the highlighted code in the preceding
    code snippet, which asks the video player plugin to play the desired video. When
    asked, the video will be played immediately, and in full screen. This does mean
    that Android devices won't ever display the movie view, but the actions available
    from within the view (*delete* and *share*) are also available from the documents
    view, so this isn't a big loss.
  prefs: []
  type: TYPE_NORMAL
- en: What did we do?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this task we used the HTML 5 `VIDEO` tag to play video on devices that support
    it, and we also learned how to use the video player plugin created by Simon MacDonald
    to play video on Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: Game Over..... Wrapping it up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see what we finally ended up with; first for iOS the view will be as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Game Over..... Wrapping it up](img/9403_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For Android the view will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Game Over..... Wrapping it up](img/9403_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you look at our final app, it's very similar to our previous project's app.
    We've changed some of the graphics a little bit, yes, but visually it's nearly
    identical, and from the code's perspective, it's nearly identical. We've swapped
    out the bits that dealt solely with images and replaced them with bits that work
    with video instead. We've worked with HTML 5 `VIDEO` and also written our own
    plugins using native code. You should now be able to take what you've learned
    and apply it to your own apps in order to record and play video files.
  prefs: []
  type: TYPE_NORMAL
- en: Can you take the HEAT? The Hotshot Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several ways that you could further improve this app. How about challenging
    yourself to a few?
  prefs: []
  type: TYPE_NORMAL
- en: Add the ability to upload the video files to a social network via the **Share**
    button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow the user to record more than one video at once, and process each one accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the whole app around into an e-learning style app where the videos aren't
    recorded by the user, but baked into the app. Then allow the user to watch your
    videos so that they can learn about a particular subject.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
