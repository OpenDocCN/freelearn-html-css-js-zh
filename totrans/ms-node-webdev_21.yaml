- en: '19'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SportsStore: Authentication'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, I will use the OAuth protocol to allow users to use their Google
    accounts to identify themselves to the *SportsStore* application, instead of manually
    entering their contact details.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter uses the `sportsstore` project from *Chapter 18*. No changes are
    required for this chapter. Open a new command prompt, navigate to the `sportsstore`
    folder, and run the command shown in *Listing 19.1* to start the development tools.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example project for this chapter – and for all the other
    chapters in this book – from [https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development).
    See *Chapter 1* for how to get help if you have problems running the examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.1: Starting the development tools'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Open a new browser window, navigate to `http://localhost:5000`, and you will
    see the product catalog, as shown in *Figure 19.1*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_19_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.1: Running the application'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the OAuth authentication process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OAuth allows users to grant applications access to their data without needing
    to provide their credentials to that application. During development, the developer
    registers their application with an OAuth authentication service and receives
    an ID that is used to identify the application to the service, as well as a secret
    that is used to sign and verify messages between the application and the service.
  prefs: []
  type: TYPE_NORMAL
- en: The registration process establishes the relationship between the application
    and the authentication service. Registration is done once and is performed before
    the application is deployed. Some degree of vetting may be required. The SportsStore
    application uses the Google OAuth service, which makes its basic features – such
    as the ones used in this chapter – available immediately, but reviews applications
    before more sensitive data can be accessed, and this can take days or weeks to
    complete.
  prefs: []
  type: TYPE_NORMAL
- en: Once the application is deployed, the user is presented with a button that offers
    them the option to sign in to the application with the authentication provider,
    or grant the application access to the data stored by the provider. *Figure 19.2*
    shows the simple example button added to the SportsStore application later in
    the chapter, which grants the application access to the user’s basic information,
    such as their name and email address.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_19_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.2: The OAuth button that will be added to the SportsStore application'
  prefs: []
  type: TYPE_NORMAL
- en: When the user clicks the button, the browser will be redirected to a URL that
    starts the authentication process. The user will be prompted for their credentials,
    which are not revealed to the application. The authentication process will show
    the user which application they are signing into and the data that the application
    has asked for. *Figure 19.3* shows the authentication prompt that will be shown
    to users of *SportsStore* once OAuth has been configured later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_19_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.3: Authenticating with the OAuth service'
  prefs: []
  type: TYPE_NORMAL
- en: Once the user has authenticated themselves, their browser is redirected back
    to the application, using a URL that contains an access code. The application
    sends an HTTP request directly to Google and exchanges the access code for the
    data it requires.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the advantages of OAuth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the user’s perspective, OAuth allows them to use applications and services
    without having to create accounts on each one or repeatedly entering the same
    details. From the developer’s perspective, OAuth enables authentication without
    having to implement and manage the workflows for password recovery, two-factor
    authentication, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: These advantages apply when using the OAuth services provided by big technology
    and social media companies. There are also OAuth services that you can use to
    manage just the user accounts for your application, in which case users will still
    have to create accounts, but the authentication process and the workflows are
    implemented by the OAuth provider. The most popular service is [https://auth0.com](https://auth0.com),
    but there are alternatives, and most offer free and paid-for tiers of service.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the limitations of OAuth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Users will not always be willing to associate their account data with an application.
    This can be because they don’t trust the application, or that they don’t want
    their account associated with certain types of content. You may find that users
    are reluctant to use OAuth If you provide adult content of any sort, for example.
  prefs: []
  type: TYPE_NORMAL
- en: From the developer’s perspective, the main limitation of OAuth is the complexity
    of the initial setup. Even with a good authentication package, like the one used
    in this chapter, OAuth rarely works without some tinkering, and figuring out why
    authentication isn’t working can be a slow and confusing task.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Google OAuth credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many OAuth providers, but the most widely used are those provided
    by the major technology companies, including Google and Facebook, because these
    are the accounts that most users already have. For the *SportsStore* application,
    I am going to use the Google OAuth service, but the process for other providers
    is similar.
  prefs: []
  type: TYPE_NORMAL
- en: '**Getting help with external authentication**'
  prefs: []
  type: TYPE_NORMAL
- en: The setup process I describe in this chapter is correct at the time of writing
    but may change by the time you read this chapter. Google regularly revises its
    developer portal, and you may find that features are given different names or
    arranged in different ways. The changes are likely to be small, but every authentication
    service provides developer documentation, which should point you in the right
    direction.
  prefs: []
  type: TYPE_NORMAL
- en: Please do not email me to ask for help setting up external authentication. I
    try to help readers with most problems, but figuring out external authentication
    issues would require signing into a reader’s Google account, which is something
    that I will not do, even for accounts that have been created specifically for
    the *SportsStore* application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, navigate to [https://console.developers.google.com](https://console.developers.google.com),
    sign in with a Google account, and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click **OAuth Consent Screen**, and then click **Create Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `SportsStore` into the project name field and click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **External** for **User Type** and click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `SportsStore` into the **App Name** field, enter your Google account email
    address for the email fields, and click the **Save And Continue** button. The
    other fields can be left empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Add Or Remove Scopes**, and then check the following options (and no
    others):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**.../auth/userinfo.email**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.../auth/userinfo.profile**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Openid**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click the **Update** button, and then click the **Save And Continue** button
    to move to the **Test Users** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Save And Continue** button without making any changes in the **Test
    Users** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Back To Dashboard** to return to the **OAuth Consent Screen** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The basic flow for this part of the process is shown in *Figure 19.4*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_19_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.4: Creating and configuring the application'
  prefs: []
  type: TYPE_NORMAL
- en: Publishing the app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Click the **Publish App** button, and you will receive a prompt asking you to
    confirm the push to production, as shown in *Figure 19.5*. If you have configured
    the application as described in the previous section, the prompt should tell you
    that the application does not need to be submitted for verification. Click the
    **CONFIRM** button to publish the application.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_19_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.5: The push to production prompt'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Client ID and Client Secret
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The final step is to create the two values that are used to configure **OAuth**:
    the **Client ID**, which the *SportsStore* application will use to identify itself
    to Google, and the Client Secret, which will be used to sign and verify the data
    produced by Google. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Credentials** in the Google Developer dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Create Credentials** and select **OAuth Client ID** from the popup menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Web Application** from the **Application Type** menu and enter `SportsStore`
    in the **Name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No changes are required in the **Authorized JavaScript Origins** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add URI** button in the **Authorized Redirect URIs** section and
    add `http://localhost:5000/signin-google` and `https://localhost/signin-google`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the **Client** **ID** and **Client Secret** values from the popup summary
    and store them safely. Each value is presented with a copy button that ensures
    that all of the characters are copied correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **OK** button to close the summary popup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the end of the process, you will have two values to add to the `development.env`
    file in the `sportsstore` folder, as shown in *Listing 19.2*. (This listing shows
    placeholder values. You must replace these with the values you obtained from the
    Google portal for the examples to work.)
  prefs: []
  type: TYPE_NORMAL
- en: '**Using local redirection URLs**'
  prefs: []
  type: TYPE_NORMAL
- en: The authorized redirect URLs used in step 5 use `localhost` for the hostname,
    which means that clients will be told to redirect to the local machine once authentication
    has been performed. This is useful for the SportsStore application, where the
    browser and the server run on the same machine. For real projects, you must use
    the public-facing URL that points to your project, which can be resolved by users’
    browsers. This requires domain name registration, which is why the *SportsStore*
    uses localhost.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.2: Storing secrets in the development.env file in the sportsstore
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Getting profile details with OAuth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The starting point is to extend the data model so that it is possible to associate
    customers in the database with their Google accounts. When the OAuth service provides
    the SportsStore application with user data, a unique ID is included, which will
    be stored in the database alongside the customer’s name and email, and used to
    query the customer’s address if one is available in the SportsStore database.
    *Listing 19.3* adds a new property to the `Customer` interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.3: Adding a property to the customer_models.ts file in the src/data
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The new property requires a validation rule, as shown in *Listing 19.4*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.4: Adding a new property to the order_rules.ts file in the src/data/validation
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `no_op` rule is used because no validation is required for the data provided
    by the OAuth process.
  prefs: []
  type: TYPE_NORMAL
- en: A new set of repository methods is required to store the new data and use it
    as the basis for queries. Add a file named `customer_repository.ts` to the `src/data`
    folder, with the content shown in *Listing 19.5*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.5: The contents of the customer_repository.ts file in the src/data
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `getCustomer` method searches the database using the unique ID created by
    the database server. The `getCustomerByFederatedId` method does the same thing
    but uses the unique ID that Google provides in the OAuth profile. The `getCustomerAddress`
    method will return the most recent address associated with the user. There won’t
    be an address until an order has been placed, but the data that is stored will
    be available for the second and subsequent orders the customer creates. The final
    method, named `storeCustomer`, will store a user in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the new repository features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next step is to update the Sequelize implementation of the repository. *Listing
    19.6* adds a property to the ORM model class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.6: Adding a property to the customer_models.ts file in the src/data/orm/models
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 19.7* describes how the new property will be stored in the database.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.7: Describing a property in the customer_helpers.ts file in the
    src/data/orm/models folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A new relationship between model classes is required to support the queries
    that will be performed by the new repository methods, as shown in *Listing 19.8*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.8: Adding a new relationship to the order_helpers.ts file in the
    src/data/orm/models folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To implement the methods required by the `CustomerRepository` interface, add
    a file named `customers.ts` to the `src/data/orm` folder, with the content shown
    in *Listing 19.9*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.9: The contents of the customers.ts file in the src/data/orm folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `getCustomer` and `getCustomerByFederatedId` methods perform regular queries,
    but the `getCustomerAddress` method has to query through another model class so
    that obtaining the most recent address for a customer is done by finding the customer’s
    earlier orders, and then obtaining the address data associated with them. The
    `attributes` property is used in the `include` expression to exclude the order
    data from the responses. The `storeCustomer` method uses the `findOrCreate` method
    to find a customer by email address if one exists; otherwise, it creates a new
    customer record. *Listing 19.10* includes the new methods in the repository mixin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.10: Extending the mixin in the index.ts file in the src/data/orm
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To complete the repository upgrade, Listing 19.11 adds a new property that exposes
    the new interface to the rest of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.11: Adding a constant to the index.ts file in the src/data folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Setting Up OAuth authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To handle the details of OAuth requests and responses, I am going to use the
    Passport authentication package introduced in *Chapter 18*, which has authentication
    strategies for major authentication services, including Google. Run the commands
    shown in *Listing 19.12* in the `sportsstore` folder to add the Passport package,
    the strategy package, and the type descriptions to the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.12: Installing the authentication packages'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: For quick reference, these packages are described in *Table 19.1*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 19.1: The Authentication Packages'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains the core Passport features. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains a Passport strategy for authentication with the Google
    OAuth service. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains type information. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains type information. |'
  prefs: []
  type: TYPE_TB
- en: Add a file named `authentication.ts` to the `src` folder with the content shown
    in *Listing 19.13*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.13: The contents of the authentication.ts file in the src folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `declare` keyword is used to tell the TypeScript compiler that the `User`
    objects added to authenticated requests by the `Passport` package will extend
    the `Customer` type. The `createAuthentiction` function sets up the Passport package
    to perform authentication using the Google OAuth service.
  prefs: []
  type: TYPE_NORMAL
- en: The configuration module is used to get the redirection URL, which will be included
    in the authentication request sent to Google and to which browsers will be redirected
    once authentication is complete. The URL must match the one used when setting
    up the OAuth credentials and, for real projects, should be a public-facing URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Client ID and Client Secret are read and used to configure the Google authentication
    strategy along with the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `scope` settings specify which OAuth scopes will be requested and the `email`
    and `profile` values correspond to the scopes used when setting up the OAuth service.
    These two scopes give details of the user’s email addresses and their display
    name, which is all that’s needed for the *SportsStore* application.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other scopes available, but they generally require applications
    to go through a vetting process before access is granted, whereas email and profile
    scopes can be used by any registered application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final argument to the strategy constructor is a callback function that
    is invoked when Google has authenticated the user and performed the redirection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The callback function receives an access token, which can be used to make API
    queries, and a refresh token, which can be used to obtain a new access token.
    Both tokens are described in the OAuth documentation (see [https://www.oauth.com/oauth2-servers/access-tokens](https://www.oauth.com/oauth2-servers/access-tokens))
    but they are not required for this example. Instead, this example relies on the
    data provided by the third parameter, which is the user’s profile. Profiles vary
    between providers, but Passport normalizes the data returned by the Google OAuth
    service like this (edited to replace real data values with the `X` character):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: A detailed explanation of the normalized profile can be found at [https://www.passportjs.org/reference/normalized-profile](https://www.passportjs.org/reference/normalized-profile),
    but the *SportsStore* application needs only the `id` value, which uniquely identifies
    the user, the `given_name` value, and the `emails` value, from which the user’s
    email address will be obtained.
  prefs: []
  type: TYPE_NORMAL
- en: The final parameter is a callback that is invoked once the user’s data is ready.
    The code in *Listing 19.13* uses the profile data to store the customer’s details
    and invokes the callback to provide Passport with the user object. The implementation
    of the repository’s `storeCustomer` method matches the `federatedId` value if
    there is one, which means that the profile data will be used to update any existing
    data created for the same user in a previous order.
  prefs: []
  type: TYPE_NORMAL
- en: 'The calls to the `passport.serializeUser` and `passport.deserializeUser` are
    required to allow Passport to serialize the user data into a session. In this
    case, the unique ID assigned by the database is used to represent the serialized
    user, which is deserialized by querying the database. This is the final statement
    in *Listing 19.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `passport.session` function returns a middleware function that will authenticate
    requests using the data stored in a session from other authentication mechanisms,
    and it has the effect of deserializing the user for requests when they have been
    authenticated using the Google OAuth service.
  prefs: []
  type: TYPE_NORMAL
- en: '*Listing 19.14* calls the `createAuthentication` function to enable authentication
    as part of the server startup.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.14: Enabling authentication in the server.ts file in the src folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: To complete the authentication setup, *Listing 19.15* adds a new section to
    the configuration file that specifies the callback that will be used for OAuth
    requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.15: Adding settings to the server.config.json file in the SportsStore
    folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As noted earlier, the `localhost` URL relies on the browser and the server being
    on the same machine. For real projects, a real domain name should be used, although
    `localhost` can be useful during development.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the cookie configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OAuth is an excellent authentication system, but it can be finicky, and effort
    is often required to get everything working correctly. One common cause of problems
    is the configuration for the session cookies, which must be set up to match the
    expectations of the OAuth strategy, whose requirements may be different from the
    rest of the application.
  prefs: []
  type: TYPE_NORMAL
- en: When setting up OAuth for SportsStore, I found that I had to make two changes
    to get authentication working correctly, as shown in *Listing 19.16*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.16: Changing cookie configuration in the sessions.ts file in the
    src folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You may need different configuration settings for other strategies or authentication
    providers, and some experimentation is usually required because session settings
    are not usually specified.
  prefs: []
  type: TYPE_NORMAL
- en: Applying authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next step is to present the user with a button that will allow them to sign
    in with Google, as shown in *Listing 19.17*.
  prefs: []
  type: TYPE_NORMAL
- en: Listing 19.17\. Adding a Google button to the order_details.handlebars fle in
    the templates folder
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The new element structure is configured with the Bootstrap CSS classes to create
    a grid, with the elements for the name and email address sharing a row with a
    new button that contains a Google icon from the Bootstrap Icons package and prompts
    the user to use their Google account. *Listing 19.18* defines the routes that
    support OAuth and use the customer’s Google details.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 19.18: Supporting OAuth in the orders.ts file in the src/routes folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The `/checkout/google` route is targeted by the button created in *Listing
    19.17*, and its job is to start the OAuth process by requiring authentication
    with the `google` strategy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Each Passport strategy module has a default name, and `google` is the name of
    the strategy added to the project in *Listing 19.13*. The effect of this route
    is to redirect the user’s browser to the Google OAuth service.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `/signin-google` route handles the redirection back from Google when the
    authentication process is complete and also requires authentication with the `google`
    strategy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This time, the authentication strategy will process the data sent by Google
    to authenticate the user and, if authentication has been successful, perform a
    redirection to the `/checkout` URL. If authentication is not successful, then
    an error message will be displayed using the custom error handlers. The `keepSessionInfo`
    setting ensures that existing session data is preserved once the user is authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: The changes to the handler for the `/checkout` URL populate the order data for
    authenticated requests. The user data added to the `Request` object is used for
    the customer’s name and email address, and a query for the most recent address
    associated with the user is performed. There won’t be an address the first time
    a user creates an order because that’s not part of the profile data, but an address
    will be available for subsequent orders.
  prefs: []
  type: TYPE_NORMAL
- en: Using the OAuth profile data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a new guest tab or private tab in your browser. Browsers use different
    names for these features, but the goal is to check the authentication process
    without interference from any cookies the browser may have stored, including cookies
    from Google.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to `http://localhost:5000`, add a product to the cart, and click the
    **Checkout** button. Click the **Use Google Account** button, as shown in *Figure
    19.6*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_19_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.6: Starting the OAuth process'
  prefs: []
  type: TYPE_NORMAL
- en: Your browser will be redirected to Google, where you will be prompted to authenticate
    and sign in to *SportsStore*, as shown in *Figure 19.7*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_19_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.7: Authenticating with Google'
  prefs: []
  type: TYPE_NORMAL
- en: The authentication process can differ based on the Google account settings.
    The account shown in *Figure 19.5* is configured to require additional confirmation
    using a smartphone, which is just one approach that Google supports to confirm
    authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Once Google has authenticated the account, the browser is redirected back to
    the *SportsStore* application, and the account profile data will be used to populate
    the name and email address fields in the checkout form. Complete the form and
    place the order, as shown in *Figure 19.8*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Addressing common causes of problems**'
  prefs: []
  type: TYPE_NORMAL
- en: There are some common problems to check if you don’t get the expected result.
    First, make sure that you have set the **Client ID** and **Client Secret** exactly
    as shown in the Google developer console. If these are not set correctly, then
    Google may not allow the user to authenticate, or the application won’t be able
    to verify the data that Google provides in the redirection. There is an option
    to download a JSON document containing both values, which is a useful way to make
    sure you have the correct data.
  prefs: []
  type: TYPE_NORMAL
- en: Second, make sure the same redirection URLs are configured in both the application
    and the Google developer console. If these are not set correctly, then Google
    won’t redirect the browser to the right location.
  prefs: []
  type: TYPE_NORMAL
- en: Third, check the session cookie settings. If authentication with Google works
    but the profile data isn’t used to populate the form, then the likely cause is
    that new sessions are being created for each request in the authentication sequence,
    or that the state data required to validate the data sent by Google isn’t being
    stored.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, keep an eye on the Node.js console during the authentication process.
    If the application is configured to reset the databases, an application restart
    will drop the session database and prevent authentication from completing. The
    development tools for the *SportsStore* project are set up to restart the application
    if any file change is detected, and this may be triggered by a different process
    running on your development machine. (For example, I use an application that creates
    a snapshot of my code folder every hour, and this causes a restart.) If you suspect
    this is the case, then change the two `reset_db` settings to false in the `server.config.json`
    file so that restarts don’t delete the contents of the databases.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_19_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.8: Placing an initial order'
  prefs: []
  type: TYPE_NORMAL
- en: Placing a second order
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The address data stored when the order is created will be available the next
    time the same user creates an order. Request `http://localhost:5000` and go through
    the checkout process again. When you click the **Use Google Account** button,
    the entire form should be populated, as shown in *Figure 19.9*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_19_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 19.9: Using address data from a previous order'
  prefs: []
  type: TYPE_NORMAL
- en: You typically won’t need to sign in to the Google account again because Google
    stores an authentication cookie. The browser is still redirected to the Google
    OAuth service, but the user doesn’t see this request or the subsequent redirection
    back to *SportsStore*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, I added support for users to identify themselves to the *SportsStore*
    application using their Google account:'
  prefs: []
  type: TYPE_NORMAL
- en: The OAuth protocol allows users to authenticate themselves without providing
    their credentials to the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most major platforms offer an OAuth service, including Google, and there is
    a registration process to perform before the application can send OAuth requests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are differences in the data provided by OAuth services, but these are
    normalized by the `Passport` authentication package.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the user has associated their Google credentials with a *SportsStore* order,
    their address will be loaded automatically when checking out in the future.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, I will add administration tools that manage the *SportsStore*
    product catalog and change the order shipping status.
  prefs: []
  type: TYPE_NORMAL
