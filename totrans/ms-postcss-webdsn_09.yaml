- en: Chapter 9. Working with Shortcuts, Fallbacks, and Packs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you spend any time working with CSS, then it is likely you will come across
    instances where you wished there was a quicker way to add a particular block of
    code to your page, apply vendor prefixes, or perhaps set a predefined border to
    an element on the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can easily achieve this by using one or more of the many shortcuts, fallbacks,
    or pack plugins available for use with PostCSS. In this chapter, we''ll explore
    some common scenarios where plugins are required, before learning how to create
    them in the next chapter. We will cover a number of topics throughout this chapter,
    which will include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring some of the PostCSS shortcuts and packs available for use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using plugins to lint and optimize your CSS code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supplementing the existing shortcuts available in PostCSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying fallbacks to PostCSS code to maintain support for older browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get cracking!
  prefs: []
  type: TYPE_NORMAL
- en: Using shortcut plugins in PostCSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a web-based application or site can be a lengthy process—there are
    so many elements to consider, and it takes time to create content that is engaging
    and informative.
  prefs: []
  type: TYPE_NORMAL
- en: 'Naturally, a smart designer or developer will always look for a shortcut to
    save time—after all, why take an hour to do something, if a shortcut will take
    half the time? The great thing about PostCSS is that it has a good selection of
    shortcut plugins that we can use; these include plugins such as the examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '`postcss-focus`: This plugin is available at [https://github.com/postcss/postcss-focus](https://github.com/postcss/postcss-focus),
    this simple plugin adds a `:focus` pseudo-selector to any `:hover` attribute encountered
    in a style rule.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postcss-border`: If specified in a shorthand version, this plugin will add
    a `border-width` attribute to an existing `border:` attribute. The plugin source
    is available from [https://github.com/andrepolischuk/postcss-border](https://github.com/andrepolischuk/postcss-border).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postcss-short-data`: This plugin is available at [https://github.com/jonathantneal/postcss-short-data](https://github.com/jonathantneal/postcss-short-data),
    this interesting plugin allows us to write shorthand data attribute selectors,
    akin to pseudo-selectors, which are compiled into data- attributes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We've already incorporated or talked about a number of the shortcut plugins
    that are available within PostCSS—these include `postcss-responsive-type` which
    we used to build a responsive page earlier in the book, `easings`, and of course,
    `postcss-transform-shortcut` from [Chapter 7](ch07.html "Chapter 7. Animating
    Elements"), *Animating Content*.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot more plugins available for use. Throughout the course of this
    chapter, we're going to explore some of the shortcut plugins available, plus some
    of the packs that we can use to supplement functionality within our preprocessor.
    A good place to start is the selection of plugin packs available for use within
    PostCSS—let's take a moment to explore these in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring plugin packs for PostCSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cast your mind back, if you will, to some advice I gave earlier about plugins—remember
    how I said that in an ideal world, a plugin should serve a single purpose?
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, one might be forgiven for thinking that we''re ignoring this advice when
    we talk about plugin packs. In reality, we''re not; all of the plugin packs available
    for PostCSS provide a single interface for multiple single plugins. At present,
    the list of plugin packs include these examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Oldie**: Available from [https://github.com/jonathantneal/oldie](https://github.com/jonathantneal/oldie),
    this plugin is an interface for nine separate plugins; it handles support for
    older versions of IE.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Short**: Hosted at [https://github.com/jonathantneal/postcss-short](https://github.com/jonathantneal/postcss-short),
    this plugin lets us write styles using our own shorthand properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AtCSS** : This plugin is available at [https://github.com/morishitter/atcss](https://github.com/morishitter/atcss),
    this interesting plugin provides a new take on SASS'' `@extend` by allowing us
    to create rules that inherit from base rules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**precss**: This plugin, from [https://github.com/jonathantneal/precss](https://github.com/jonathantneal/precss),
    allows us to use SASS-like markup in our style sheets. We will explore this in
    more detail in [Chapter 11](ch11.html "Chapter 11. Manipulating Custom Syntaxes"),
    *Manipulating Custom Syntaxes*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stylelint**: This plugin pack should form part of any PostCSS developer''s
    toolkit: it allows us to lint our style sheets automatically. The pack is available
    from [https://github.com/stylelint/stylelint](https://github.com/stylelint/stylelint).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cssnano**: In a similar vein, `cssnano` should be part of any developer''s
    toolkit: this pack is perfect for compressing and optimizing code within our style
    sheets. You can get the plugin from [https://github.com/ben-eb/cssnano](https://github.com/ben-eb/cssnano).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rucksack**: Last, but by no means least, Rucksack (as described by the developer),
    is a "…little bag of CSS superpowers". This pack adds support for functionality
    such as `font src` generation, providing fallback support for RGBA values, or
    the `clearfix` hack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These packs provide a real mix of functionality—it is naturally up to us to
    decide which plugins we want to use. At this point, though, one might be tempted
    to ask "why use a pack—surely this adds unnecessarily redundant functionality
    that we're trying to avoid adding?"
  prefs: []
  type: TYPE_NORMAL
- en: It's a good question, the simple answer is that it will depend on your requirements.
    If all we're interested in is adding vendor prefixes, then checking and compressing
    our code, then we would most likely use `autoprefixer`, `cssnano`, and `stylelint`.
    But if we wanted to add property aliases, then `autoprefixer` can be dropped in
    favor of using Rucksack with `cssnano` and `stylelint`. The key here, though,
    is to carefully assess what you need, and work out the best combination of plugins
    to use from the selection available for PostCSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, time for a change: let''s move on! We will be exploring some of these
    plugin packs over the next few pages: let''s make a start with a simple plugin,
    in the form of `postcss-short`.'
  prefs: []
  type: TYPE_NORMAL
- en: Writing styles in shorthand
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This plugin, available from [https://github.com/jonathantneal/postcss-short](https://github.com/jonathantneal/postcss-short),
    is a wrapper for several plugins available for the PostCSS ecosystem; these include
    Shorthand Border, Shorthand Color, and Shorthand Size. Installing the plugin is
    a breeze—it uses the same format as most other PostCSS plugins, and can be installed
    using this command within our project root area, in a Node.js command prompt session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The great thing about this plugin (and other plugin packs) is that it removes
    the need to call lots of separate plugins. We must bear in mind though that to
    make this worthwhile, we need to be calling most of the plugins in some form or
    other. If we're only calling one or two from `postcss-short`, then we may prefer
    to call them individually, and not use the `postcss-short` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Leaving aside any concerns about using the plugin, let''s take a look at some
    examples of it in action. The best way to experience it is to use the online editor
    at [http://jonathantneal.github.io/postcss-short/](http://jonathantneal.github.io/postcss-short/).
    We can use this to experiment before adding the final result to our style sheet
    prior to compilation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing styles in shorthand](img/BO5194_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this example (taken from the plugin site), we've used all of the plugins,
    with the exception of Shorthand Text and Shorthand Data. In our code, we've used
    the relevant shorthand as specified for the plugin—PostCSS will compile this into
    valid CSS styles, as outlined within each plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Which plugins we use will of course depend on our requirements—there is every
    possibility that you will find yourselves using particular plugins more than others.
    Staying with the theme of shorthand, though, there is one plugin pack that is
    likely to feature often in your toolkit—Rucksack. No, I don't suggest this is
    an opportunity to go on holiday (no pun intended), but more an occasion to use
    what will be a very useful set of plugins within PostCSS.
  prefs: []
  type: TYPE_NORMAL
- en: Adding shortcuts with Rucksack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mention the word Rucksack, and one might be forgiven for thinking we were about
    to go on a journey or holiday—whilst the desire might be there, there are more
    practical matters to attend to first!
  prefs: []
  type: TYPE_NORMAL
- en: 'This said, working with PostCSS can easily be seen as going on a journey; this
    is particularly true when working with plugins. One of the plugins (or to be more
    accurate, packs) that you will very likely come across when working with PostCSS
    is Rucksack (see the play on words there?). This useful pack, available from [http://simplaio.github.io/rucksack/](http://simplaio.github.io/rucksack/),
    contains a number of plugins that have been linked together to provide additional
    functionality that we can use when compiling style sheets using Rucksack, such
    as these examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alias**: This is available at [https://github.com/seaneking/postcss-alias](https://github.com/seaneking/postcss-alias),
    this plugin allows us to create shorthand CSS properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clearfix**: As a developer, I am sure you will be familiar with the clearfix
    hack: this plugin by Sean King provides the PostCSS equivalent, and is available
    at [https://github.com/seaneking/postcss-clearfix](https://github.com/seaneking/postcss-clearfix).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Font src expansion**: How many times have you used custom font declarations
    in your code? They''re a pain to write—another plugin by Sean King (at [https://github.com/seaneking/postcss-fontpath](https://github.com/seaneking/postcss-fontpath)),
    makes it a cinch to add to your code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The irony here, though, is that we've already used Rucksack without realizing
    it—remember the `postcss-responsive-type` plugin we used back in [Chapter 4](ch04.html
    "Chapter 4. Building Media Queries"), *Building Media Queries*? Or the `autoprefixer`
    plugin we've used in just about every chapter throughout the book? Both of these
    plugins are available via Rucksack—Rucksack is really an abstract layer that ties
    in access from multiple plugins into one consistent interface for us to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, enough chitchat: let''s get stuck into a demo and see some action! For
    our next demo, we''re going to construct a simple slider using some standard HTML
    markup and CSS3 styles; no JavaScript will be used at all. We''ll start with a
    quick run-through of our slider, before we convert the style sheet to use Rucksack.'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing our demo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this next demo, we're going to break tradition and not install the plugin
    we're about to use first, before creating our demo. Instead, we'll set up our
    demo first—we can then ascertain where Rucksack can be used once we've set our
    baseline solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our demo centers on a simple image slider, which uses pure CSS3 styling to
    control the animation. This is a screenshot of what we''re going to create:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing our demo](img/BO5194_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To see the demo in action, go ahead and extract the `T45 – converting to use
    Rucksack` folder from a copy of the code download that accompanies this book—save
    it to our project area. Go ahead and preview the results by running `slider.html`
    in a browser, then click on the numbers in the bottom left to move between different
    images.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need to rename the style `post-completed.css` file `style.css` for
    it to operate correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Rucksack as a plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With our demo in place, it''s time to install Rucksack, and ascertain where
    we can use it in our demo! Rucksack, like most other PostCSS plugins, can be installed
    using the same method—we can use NPM:'
  prefs: []
  type: TYPE_NORMAL
- en: Fire up a Node.js command prompt, then change the working folder to our project
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the prompt, enter `npm install rucksack-css --save-dev`, then press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NPM will go away and install the plugin—if all is well, we should see something
    akin to this:![Installing Rucksack as a plugin](img/BO5194_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A note of caution—there are several plugins available for Rucksack: make sure
    you install the right one! There is a Gulp plugin, but this does not appear to
    work within PostCSS, even though we are using Gulp as our task runner.'
  prefs: []
  type: TYPE_NORMAL
- en: This aside, let's move on. Before we go through the process of converting our
    slider to use Rucksack, let's take a quick look at using it in action with a simple
    easing demo.
  prefs: []
  type: TYPE_NORMAL
- en: Easing into using Rucksack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any developer who spends time animating content on a website will no doubt have
    created rules to control how content eases in or out of the page. Striking the
    right balance between easing content in and out of the page and the site becoming
    too overladen with effects takes time to get right!
  prefs: []
  type: TYPE_NORMAL
- en: 'Leaving aside the awful pun in that last comment, this is where Rucksack can
    help—one of the simpler plugins that forms part of this package is `postcss-easings`.
    This plugin, available from [https://github.com/postcss/postcss-easings](https://github.com/postcss/postcss-easings)
    and one that we touched on in [Chapter 7](ch07.html "Chapter 7. Animating Elements"),
    *Animating Content*, has but one role in life: convert any recognized easing name
    into a cubic-bezier equivalent value.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For an example of a Bezier curve, take a look at [http://cubic-bezier.com/#.17,.67,.83,.67](http://cubic-bezier.com/#.17,.67,.83,.67).
  prefs: []
  type: TYPE_NORMAL
- en: Is there any benefit in doing this, I hear you ask? Well, two that come to mind
    are consistency and a central point of source. Let me explain what I mean.
  prefs: []
  type: TYPE_NORMAL
- en: 'A central point of source borrows a principle from CSS preprocessors such as
    SASS or less, where a single value is defined at the top of the file; any instance
    found elsewhere in the file will be automatically replaced by its value (in this
    instance, a `cubic-bezier` easing). This then helps with consistency: we can specify
    names for any custom easings in the configuration, which will replace any instance
    found during compilation.'
  prefs: []
  type: TYPE_NORMAL
- en: The benefit of this means that we only need to update one central point (that
    is, point of source), and can avoid mixing different types of easing values in
    our code—they will be converted to cubic-bezier values at compilation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, let''s move on: time for a demo! Before we get stuck in, let''s quickly
    cover what we''re going to construct. Our demo is a simple affair with four squares
    that we will animate using nothing more than plain HTML and CSS (yes, no JavaScript).
    We will use a handful of effects, such as `easeOutBack`, which looks something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Easing into using Rucksack](img/BO5194_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can learn more about the details for this particular easing at [http://easings.net/#easeOutBack](http://easings.net/#easeOutBack)—it
    translates to `cubic-bezier(0.175, 0.885, 0.32, 1.275)` when used in code.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get on and construct that demo…
  prefs: []
  type: TYPE_NORMAL
- en: Animating content using the plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''re expecting dramatic effects, then I am sorry to disappoint—this exercise
    has been kept deliberately simple, to show you how easy it is to use Rucksack.
    We mentioned earlier that the overall result will be four simple squares that
    we can animate at will—they will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating content using the plugin](img/BO5194_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The use of this plugin does raise one important question—we will cover this
    once we''ve built our demo:'
  prefs: []
  type: TYPE_NORMAL
- en: From the code download that accompanies this book, go ahead and extract a copy
    of the `T44 - postcss-easings` folder, and save it to the root of our project
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, copy the `gulpfile.js` and `package.json` files from this `T44 - postcss-easings`
    folder to the root of our project area—go ahead and replace any that are already
    present in this location, or save them somewhere for safekeeping.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `style – pre-comile.css` file from the `css – completed versions` folder
    to the `src` folder within our project area; this sets it ready for compilation.
    Rename it `style.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go ahead and fire up a Node.js command prompt session, then change the working
    folder to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the prompt, enter `Gulp` then press *Enter*—our file will be compiled, like
    this:![Animating content using the plugin](img/BO5194_09_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assuming no issues appeared during compilation, copy the contents of the `dest`
    folder to the `css` folder within the `T44 - postcss-easings` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try previewing the results of our handiwork in a browser—if we hover over each
    square, the animation will kick in; they should appear similar to the figure shown
    at the start of this exercise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our demo was never meant to be anything more complicated—the aim was to show
    off how easy it is to get a consistent effect, provided the configuration object
    is correctly set up! It does, however, raise an important question concerning
    our choice of plugins, so let's explore that in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Dissecting our demo in more detail
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is one example of where simplicity pays in spades; the `postcss-easings`
    plugin requires no configuration for standard use, and will only need configuring
    if the easing we use are not already part of its core library. The ones we picked
    for this demo are already defined in the plugin—if we open a copy of the compiled
    style sheet, we should see something akin to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dissecting our demo in more detail](img/BO5194_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The key to configuring this plugin lies in two lines of code, on or around
    lines 11 and 16:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Much of what is present in the Gulp task file that we used in this demo is code
    that we've already seen before; it frequently pays to think ahead, so that we
    can build a gulp file that can be reused for future projects. Once configured,
    then any style recognized by the plugin will be compiled into valid CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we had decided to use a custom easing style, then we can easily update the
    configuration object accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dissecting our demo in more detail](img/BO5194_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In case you're wondering about the name given—this effect replicates the motion
    when punching the air after you've achieved a good result, particularly if it
    has been a troublesome issue to solve!
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we move on to our next exercise, we should answer the question that
    I alluded to earlier: which plugin should we use? But hold on, we''re using the
    `postcss-easings` plugin, right?'
  prefs: []
  type: TYPE_NORMAL
- en: 'No, I''ve not completely lost the plot: the `postcss-easings` plugin is available
    separately, and is referenced within the Rucksack pack of plugins. The key here,
    though, is that if we only need to use `postcss-easings`, then there is no sense
    in calling in Rucksack''s plugins, which will only add an unnecessary burden to
    our workflow. Instead, we can change line 11 in our gulp task file to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And we can change line 16 to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As long as the plugin is still installed from earlier, then the code will be
    compiled as before, but without the extra overhead of the other plugins that form
    Rucksack.
  prefs: []
  type: TYPE_NORMAL
- en: Converting our slider to use Rucksack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we''re working with Rucksack, we''ve seen that the key to successful use
    is less about configuring it for use in our Gulp file, and more about deciding
    which plugins to use. To see what we mean by this, take a look at the original
    stylesheet from *Introducing our demo* carefully; it should reveal that we can
    use a number of plugins to improve on existing functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Responsive typography**: Our demo is already partially responsive, but the
    label text isn''t resizing if we change the size of our slider. We can fix this
    by altering our code to trigger Rucksack to make our fonts responsive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shorthand positioning**: This is a great plugin for adding position attributes;
    why bother adding top, left, right, and bottom attributes when we do all four
    in a single line of code? Add this one-liner, and we can get PostCSS to do the
    heavy lifting for us.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Property aliases**: Continuing with the shorthand theme, we can use this
    plugin to set up shorthand versions of any attribute we care to use; it means
    we only need to type in one or two letters, which PostCSS will transpile to the
    full version of that attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Font src expansion**: If we look at our source style sheet carefully, we
    should see a small issue on or around line 6\. The code calls for Open Sans as
    a font, but this is not a standard font! Thankfully, we can easily fix it by telling
    the browser where to download it from—Rucksack provides a convenient shorthand
    form for adding this detail to our code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hex RGBA shortcuts**: We''ve used a mix of RGBA and HEX codes in our style
    sheet to represent colors, yet some older browsers don''t support the former style.
    This is becoming less of an issue, but as it is added automatically by Rucksack,
    then there is no harm in adding the latter values!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easings**: Our slider demo used a single instance of an easing, in the form
    of ease-in-out-back. In the previous demo, we used `postcss-easings` (that is
    the basis for this part of Rucksack) to convert the names to `cubic-bezier` values;
    we should look to continue this theme when updating the slider.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automatic prefixing**: This isn''t enabled by default, so it''s up to us
    to decide if we want to use it. It references the same `autoprefixer` plugin we''ve
    already used in earlier demos; if we''re going to make good use of Rucksack, then
    it makes sense to enable it and remove any existing reference that is already
    in our code. We''re going to use most of the plugins referenced in Rucksack, so
    we will enable it for use. If, however, we only need one or two, or we don''t
    need support for older browsers, then it can remain switched off.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Legacy fallbacks**: Support for older browsers is provided by the laggard
    plugin in Rucksack. This provides a mix of fallback mechanisms, such as adding
    fallback support for rem values, HEX fallbacks for RGBA values, or the 3D transform
    hack for will-change. We''ll be adding rem fallback support, so we will enable
    this plugin for use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we''ve covered the elements we want to use, it''s time for us to make
    the changes. Without further ado, let''s make a start:'
  prefs: []
  type: TYPE_NORMAL
- en: From the code download that accompanies this book, go ahead and extract a copy
    of the `T45 - converting to use Rucksack` folder, and save it to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From within the `T45 - converting to use Rucksack` folder, copy the `gulpfile.js`
    and `package.json` files to the root of our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, copy the contents of the `css-completed` version folder from within the
    `T45 - converting to use Rucksack` folder to the `src` folder at the root of our
    project area. Rename pre-compile `version.css` `style.css`, then open up this
    file in a text editor—we need to make some changes to the styles within the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our first change is to make the text in our demo responsive—do a search for
    `font-size`, and change any instance to `font-size:` `responsive`. This should
    cover each of the five number labels, and the `div.slide-content > figcaption`
    rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next up, is adding our shorthand version for the position attribute—in this
    instance, there is only one we can change, which is on line 42\. Comment out the
    `bottom`, `left`, `right`, and `top` attributes specified on lines 33-36, then
    replace the `position:` attribute with this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note, the other instances of position can't be changed as we've not specified
    individual placement values in these rules.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Our next conversion is to add some aliases—this is just a shortcut to typing
    in more text! For our demo, go ahead and add this at the top of our style sheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, do a search and replace for each of these three styles—replace the full
    name with the shortcut names given in the `@alias` block.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember the small issue I pointed out earlier, about the missing support for
    the Open Sans font? Well, we can easily fix that—at the top of our style sheet
    file, go ahead and add this block; this tells the browser where to find the Open
    Sans font:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We touched briefly on Rucksack's ability to convert easing names to cubic-bezier
    values. The demo uses an easing name—this has already been set to one that is
    supported within Rucksack, so we don't need to alter our code. The same applies
    to the RGBA fall-back support—Rucksack will automatically convert any RGBA values
    it sees to HEX equivalents within our code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The remaining two changes are for legacy support and automatic prefixing—to
    enable these, we have to modify our gulp file as shown in the screenshot:![Converting
    our slider to use Rucksack](img/BO5194_09_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file, then switch to a Node.js command prompt—at the prompt, make sure
    the working folder is set to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the prompt, enter `gulp`, then press *Enter*—PostCSS will go away and compile
    the code; if all is well, we should see our compiled files in the `dest` folder:![Converting
    our slider to use Rucksack](img/BO5194_09_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this stage, we have a compiled set of files. To confirm if the demo works,
    go ahead and copy them to the `css` folder within the `T45 - converting to use
    Rucksack` folder; try previewing the results of our work by running `slider.html`.
    If all is well, we should see the same slider effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Converting our slider to use Rucksack](img/BO5194_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All should be good, we have a working demo and our code has compiled successfully.
    At this point we can move on to our next task, right…?
  prefs: []
  type: TYPE_NORMAL
- en: Dissecting our code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Well, it''s worth taking a look at our compiled code first: Rucksack has made
    some additional changes to our code that we may not have expected to see.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, Rucksack has provided pixel-based fallback support for the rem
    units listed throughout our code, along with the HEX fallback support we discussed
    earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, take a look at line 96—remember the `font-size: responsive` attribute
    that we added? This is the compiled result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Throughout the bottom two-thirds, there are a number of media queries that
    have been added; these were added as part of making our font styles responsive.
    Further down, at around line 226, we have this block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: At first glance, you might wonder where this came from, as we didn't specify
    an `ms-filter` attribute in our code. Well, this is thanks to Rucksack—it has
    added opacity support for IE automatically.
  prefs: []
  type: TYPE_NORMAL
- en: The key to this little exploration, though, is that choosing plugins should
    be an iterative process that will only really finish when the site is no longer
    needed. For example, we could easily add another step to our workflow that reduces
    `calc()` operations to static values (where allowed—the plugin for this is `postcss-calc`).
    We should always consider using `postcss-remove-prefixes` periodically to keep
    our code up to date; there will come a time when we either don't need to add prefixes,
    or existing prefixes become redundant.
  prefs: []
  type: TYPE_NORMAL
- en: 'Leaving aside the changes to our style sheet, there is one more to consider—you
    will note that the Autoprefixer plugin has been commented out in our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dissecting our code](img/BO5194_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is with good reason—Rucksack has built-in support for `autoprefixer`, so
    there is no need to call it twice; ironically, it simply calls the same plugin
    that is commented out of our code! It's up to us whether we want to call it from
    within Rucksack, or separately; this will largely depend on what else is being
    called from with Rucksack, and whether adding `autopre` `fixer` will help provide
    a stronger case for using Rucksack.
  prefs: []
  type: TYPE_NORMAL
- en: Linting and optimizing your code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bandwidth usage has always been critical to the success of a website; remember
    the good old days of 56K modems? We've come a long way since then, but this is
    still no excuse for producing sites that swallow bandwidth like it's going out
    of fashion!
  prefs: []
  type: TYPE_NORMAL
- en: A part of this comes in the form of linting and minifying our style sheets before
    deploying into production use—it goes without saying that this should form part
    of any developer's workflow process by default. We can do this manually, but this
    manual job is prone to missing opportunities, which can lead to inconsistencies
    in our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, we can use the power of PostCSS to perform the heavy lifting for us;
    the `stylelint` and `cssnano` plugin packs make for a powerful optimization facility!
    If we take a careful look at most gulp task files that we''ve created throughout
    the course of this book, both processes are taking place; in this example, `stylelint`
    is used at line 22, and `cssnano` at line 38:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Linting and optimizing your code](img/BO5194_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exploring the use of cssnano
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For anyone starting out with PostCSS for the first time, then simply specifying
    `cssnano()` as one of the processors for PostCSS should be sufficient:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the use of cssnano](img/BO5194_09_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we take a look at the `T45 – converting to use Rucksack` demo, our original
    style sheet file weighs in at 4KB when compiled, but which drops to 3KB after
    compression. Granted, it's only a small file, but a 25% drop in size is still
    not an insignificant drop!
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, it is worth noting that even though we are using Gulp, the plugin
    in use is the PostCSS version, and not `gulp-cssnano`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `cssnano` plugin is not a single plugin, but a wrapper for a number of
    plugins, which include examples such as these:'
  prefs: []
  type: TYPE_NORMAL
- en: '`postcss-reduce-idents`: This reduces any custom identifier names (such as
    those used in `@keyframes`) to two letter equivalent codes; this helps with minifying
    code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postcss-zindex`: This plugin reduces any `z-index` declarations that are unnecessarily
    higher than they should be.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postcss-convert-values`: If our CSS uses any number of different units, then
    we can reduce the CSS size by expressing the value a different way. For example,
    `400ms` can be expressed as `.4s` (a reduction by two characters). Some might
    argue this is a little extreme, but every little helps!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postcss-colormin`: In a similar vein, we can reduce the length of color names
    using this plugin: if `rgba(255, 0, 0, 1)` is used in our code, then we can replace
    this with `red`. Although the name is indeed shorter, this is at the expense of
    losing consistency with naming our colors, which may not be so desirable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Moving on, there are some key points we should be aware of, when using `cssnano`:'
  prefs: []
  type: TYPE_NORMAL
- en: You will notice the presence of the gulp-rename plugin in use within our Gulp
    file—`cssnano` does not have a capability to rename a compressed file to something
    we would expect to see within our code. We can use `gulp-rename` to create a version
    that developers would expect to see in code; it does leave a copy of the original
    file in place, if needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most options within `cssnano` are enabled by default; we can switch off individual
    ones in the configuration object, as shown in this example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: For a full list of the transform options, take a look at [http://cssnano.co/options/](http://cssnano.co/options/).
    Click on the link to view individual configuration options for that plugin.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This plugin automatically includes autoprefixer. Technically, there is no need
    to include it separately as we have done in previous exercises, so ideally it
    should be removed. We will focus on this more as part of optimizing our processor
    in [Chapter 10](ch10.html "Chapter 10. Building a Custom Processor"), *Building
    a Custom Processor*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are some transforms that are available within `cssnano`, but which are
    *not* switched on by default; these are not considered safe and should only be
    included if you are 100% sure it has not affected your code. The details of unsafe
    transforms are available on the `options` page at [http://cssnano.co/options/](http://cssnano.co/options/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Okay, let''s move on: the second half of our double act is the `stylelint`
    plugin pack; unlike `cssnano`, `stylelint` takes the opposite approach and allows
    you to enable any rule as needed, from a list of over 100 available rules. Let''s
    dive in and take a look in more detail.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Stylelint as our linter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How does one describe Stylelint, if you've never met it before? Well, to quote
    its website, "stylelint is a mighty, modern CSS linter".
  prefs: []
  type: TYPE_NORMAL
- en: Whether we agree with such a bold statement, it is certainly worth getting to
    know Stylelint as a linter. Available from [http://stylelint.io/](http://stylelint.io/),
    the key to this plugin lies not in the plugin itself, but in the rules that define
    what we want to check in our code. At present, we can use any one of 100+ rules,
    or a mix of several; these can be specified in a `.styleintrc` file, within our
    `package.json` file, or as a `stylelint.config.js` file that exports a JavaScript
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ve already used `stylelint` in earlier projects; for convenience, our Gulp
    task for linting styles has a number of rules specified within the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring Stylelint as our linter](img/BO5194_09_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I've chosen a number of rules to illustrate how we can use Stylelint; it is,
    of course, up to each of you as developers to choose which rules you want to test
    as part of linting your code. Stylelint does not contain a core set of rules that
    are enabled by default—any checking it does will be dependent on what is specified
    in the rule configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A useful source to bookmark is [http://stylelint.io/](http://stylelint.io/)—this
    contains a full set of rules that can be added to our Stylelint configuration
    prior to compiling code.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we were building a responsive site that made heavy use of the
    Golden Rule, we may want to limit any percentage values to no more than three
    or four places. For this, we would specify the `number-max-precision` rule—this
    takes an integer value; specifying `3` would flag warnings for these two attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This is not the case for this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: I would strongly recommend reading through the list of rules to get a flavor
    of what is available; it will take time to familiarize yourselves with the contents,
    but the reward will be code that is optimized and checked prior to it being used
    in a production environment. There is one small point though—even if we optimize
    our code ad infinitum, there is always a possibility that we still have to include
    some support for older browsers.
  prefs: []
  type: TYPE_NORMAL
- en: In an ideal world, we would convince our clients of the merits of limiting such
    support (or not even covering it). If clients insist on it, however, against our
    better judgment, then PostCSS can easily help with providing that support. Let's
    explore what is available—much of this will center around IE (as this is the biggest
    culprit), but will equally apply to other browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Providing fallback support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A key concern when designing web content is browser support—which browsers do
    we support? If the only browsers we had to support were the likes of Firefox or
    Chrome, then our job would be easy. Trouble is, we also have IE, Safari, Edge…not
    to mention mobile devices! Life would be boring otherwise…
  prefs: []
  type: TYPE_NORMAL
- en: 'But I digress, back to reality: for those legacy browsers that refuse to conform
    (yes, I''m looking at you in particular, IE), we have to consider providing some
    form of support or graceful degradation. Thankfully, there are a number of plugins
    we can use within the PostCSS ecosystem—we''ve already used one in the form of
    Autoprefixer; there are others available, so let''s dive in and take a look at
    a selection of these plugins in more detail. Before we do so, though, there is
    a useful tip that I want to explore, which can help with checking for, and providing,
    legacy support in our browsers.'
  prefs: []
  type: TYPE_NORMAL
- en: Detecting support for features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A key part of the development process is to ensure that our code works on those
    browsers we have to support. If we're lucky enough that this range of browsers
    is limited to newer offerings, then this is less of an issue.
  prefs: []
  type: TYPE_NORMAL
- en: For some developers, there will be a need to have to support older browsers;
    this is particularly true if the environment contains other browser-based applications
    that require use of these older browsers, and cannot be replaced.
  prefs: []
  type: TYPE_NORMAL
- en: 'To help get around this, we could use libraries such as Modernizr ([http://www.modernizr.com](http://www.modernizr.com)),
    but a more efficient means is to use the CSS `@supports` directive. In short,
    this operates in a similar fashion to media queries; we can specify a backup property
    that is supported by all browsers, and cancel it out if we''re using a browser
    that can support an enhanced property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the main, this is more likely to be useful for those who have to provide
    support for older versions of IE (given that other browsers have offered better
    support for some time). Ideally, we would look to persuade clients of the merits
    of not supporting older versions of IE (at least 8, and possibly 9). If we have
    to support them, this method coupled with the use of autoprefixer could prove
    very useful.
  prefs: []
  type: TYPE_NORMAL
- en: Providing support for oldie
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When it comes to providing support for legacy browsers, the biggest culprit
    is arguably Microsoft's IE. Whilst it has to be said that support in newer versions
    is improving, its popularity means that there are still enough old versions to
    warrant the need to provide support!
  prefs: []
  type: TYPE_NORMAL
- en: To their credit, Microsoft have announced that they no longer support IE8 to
    10—this is a step in the right direction to help encourage users to upgrade, although
    it will be some time before these versions completely disappear from use.
  prefs: []
  type: TYPE_NORMAL
- en: So, if you still have to support old versions of IE, what can we do? A good
    solution to try out is the oldie pack of plugins; its name makes a reference to
    what some term oldIE, or those versions of IE that should have been consigned
    to history a long time ago!
  prefs: []
  type: TYPE_NORMAL
- en: 'This plugin, available from [https://github.com/jonathantneal/oldie](https://github.com/jonathantneal/oldie),
    is a wrapper for a host of plugins available within PostCSS; examples include
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`post-calc`: This reduces any instance of `calc()` to single values where possible;
    instances of `calc()` that use a mix of units may not be replaced'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postcss-unroot`: If our CSS uses :root selectors, then old versions of IE
    will fail; this plugin replaces them with HTML to allow our code to compile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postcss-unnot`: In a similar vein, if we''ve specified rules that include
    elements where `:not` pseudo-elements have been used, then these selectors will
    be removed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postcss-unopacity`: This converts any instance of the opacity property to
    use `filter: alpha(opacity=XX)`, where `XX` is the equivalent value for the original
    opacity property'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The pack includes other plugins—to get a feel for what plugins are included,
    it''s worth taking a look at the `index.js` file for the plugin pack; it will
    look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Providing support for oldie](img/BO5194_09_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The beauty, though, is that we are not forced to use the oldie plugin in its
    entirety. If, by some quirk of fate, we've managed to create something that in
    the main avoids those CSS attributes that are likely to make oldIE choke, then
    we can opt to simply reference those plugins that we need to use instead.
  prefs: []
  type: TYPE_NORMAL
- en: This will, of course, depend on how much we've used—a more likely scenario is
    that we will end up needing to use all of the plugins, so it makes better sense
    to use oldie instead! Of course, we could always encourage our clients to drop
    oldIE—this might not be as simple as it sounds…
  prefs: []
  type: TYPE_NORMAL
- en: Removing style hacks from code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we''re lucky enough to have understanding clients—and chance would be a
    fine thing—then there is likely to be a task that we need to perform: remove any
    style hacks from our code that relate to browsers we no longer support. The removal
    of these hacks may be trivial if we only have a small style sheet; the reality
    is that it will likely be a long, manual process for larger sheets, which carries
    a risk of us missing hacks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, we can avail ourselves of a plugin, in the form of stylehacks; this
    works very well with the `stylelint` plugin we''ve already used in demos throughout
    this book. Available from [https://github.com/ben-eb/stylehacks](https://github.com/ben-eb/stylehacks),
    the plugin uses hacks listed on [http://browserhacks.com](http://browserhacks.com),
    and is a cinch to install—let''s take a look at it in action:'
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by extracting a copy of the `T47 - using stylehacks` folder from
    the code download that accompanies this book; save it to the root of our project
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `gulpfile.js` and `package.json` files to the root of the project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a text editor, go ahead and add this code, saving it as `style.css` in the
    `src` folder in our project area (*not* within the `T47 - using stylehacks` folder!):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, fire up a Node.js command prompt session, then change the working folder
    to our project area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now need to install the plugin—in the prompt, enter this command, then press
    *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the plugin has installed, go ahead and enter `gulp` in the prompt, then
    press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PostCSS will compile our code—if all is well, we should see this in the `dest`
    folder at the root of our project area:![Removing style hacks from code](img/BO5194_09_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Assuming we have a successful compilation, try opening the `style.css` file
    in a text editor—we will, of course, have the requisite source map directive at
    the foot of the code, but otherwise notice how it has removed the color hack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Removing style hacks from code](img/BO5194_09_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The key to this process lies within this task in our Gulp file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In our Gulp file, we've added the browsers attribute—this tells stylehacks to
    remove any hacks that are *not* required for modern browsers or those that have
    more than `10%` global usage. This setting is based on the Browserslist query
    list available from [https://github.com/ai/browserslist](https://github.com/ai/browserslist)—it's
    worth noting that this can be used for plugins such as Autoprefixer as well.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we start to include more plugins that make use of the Browserslist queries,
    then consider using a variable in place of the query; updating this from a central
    location will automatically update all plugins that use it accordingly. For more
    details, please refer to the Browserslist site on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although this is a simple plugin to use, there is one nagging question that
    kept coming back whilst researching for this book: how useful is this plugin in
    reality? For some, you may think I need my head examined, but there is a reason
    behind this—let me explain.'
  prefs: []
  type: TYPE_NORMAL
- en: If you've spent any time developing with jQuery, then you should be aware that
    it has dropped support for `IE6`-`8` from jQuery 2.x, and will only develop support
    for it within the 1.x branch. Much of the baggage within jQuery within the 1.x
    branch is based on catering for browser hacks; the biggest culprit for these hacks
    is IE!
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Microsoft have publicly stated that support for IE10
    and below is being dropped (at least for Windows 8)—they will only support IE11
    on the Windows 8.1 platform, plus their new browser, MS Edge.
  prefs: []
  type: TYPE_NORMAL
- en: Given that many of the hacks found in CSS are for IE (and that this also applies
    to jQuery), one can't but wonder if the stylehacks plugin will still remain useful
    within the not too distant future! We should also be asking ourselves if using
    hacks is a good design decision. Are we designing a problem for ourselves at a
    later date, or should we be reconsidering our original design, and perhaps revisiting
    whether we need to support older browsers with a dedicated style sheet, rather
    than introducing hacks in amongst code designed for more recent browsers?
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A key part of PostCSS is exploring the ever-increasing array of plugins available
    for the PostCSS ecosystem; in some respects, it can be likened to a journey of
    discovery. This is no different for single plugins, or those available within
    packs—we've already seen that many of these packs are made up of the same plugins
    that are available individually! Let's take a moment to review what we've learnt.
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off our journey with a look at working with plugins that can help
    save time with writing—these can either be those that allow us to write in shorthand,
    or those that add missing styles, based on styles we specify in code. These also
    included some plugins that help provide fallback support for older browsers.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved onto working with the `postcss-short` plugin, as an example of
    how we can reduce development time, before moving on to explore the Rucksack suite
    of plugins that can help add some of the missing elements we may need to use in
    CSS. To explore how Rucksack works, we started with a simple easing demo, before
    working our way through a more complex demo of a slider and converting it to use
    Rucksack, and exploring some of the ways in which this plugin pack can help in
    our development.
  prefs: []
  type: TYPE_NORMAL
- en: Next up in our journey came a look at what should be a crucial part of any development
    workflow for a developer—checking our code for consistency, and optimizing it.
    We covered the use of the `cssnano` and `stylelint` plugins, and how they can
    be tailored to our needs.
  prefs: []
  type: TYPE_NORMAL
- en: We then rounded out the chapter by revisiting support for older browsers—we
    supplemented our earlier visit with a more in-depth look at what is available
    within PostCSS; we explored the fact that many fallbacks are primarily caused
    by IE, and discussed how we can either help support older versions of this browser,
    or whether we should consider consigning support for some older browsers to history.
  prefs: []
  type: TYPE_NORMAL
- en: Phew, this was a real whirlwind tour through the plugin packs available for
    PostCSS! Our journey does not stop here, as we now need to pull all of the last
    few chapters together and produce a complete custom processor—this will be the
    subject of the next chapter.
  prefs: []
  type: TYPE_NORMAL
