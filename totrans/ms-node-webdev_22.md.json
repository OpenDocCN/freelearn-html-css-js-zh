["```js\nnpm start \n```", "```js\nnpm install htmx.org@1.9.10 \n```", "```js\n[htmx.org](http://htmx.org) \n```", "```js\nnpm install --save-dev webpack@5.89.0\nnpm install --save-dev webpack-cli@5.1.4\nnpm install --save-dev webpack-dev-server@4.15.1\nnpm install --save-dev npm-run-all@4.1.5\nnpm install http-proxy@1.18.1 \n```", "```js\n`webpack` \n```", "```js\n`webpack-cli` \n```", "```js\n`webpack-dev-server` \n```", "```js\n`npm-run-all` \n```", "```js\n`http-proxy` \n```", "```js\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nexport default  {\n    mode: \"development\",\n    entry:   \"./src/admin/client.js\",\n    devtool: \"source-map\",   \n    output: {\n        path: path.resolve(__dirname, \"dist/admin\"),\n        filename: \"bundle.js\"\n    },\n    devServer: {\n        watchFiles: [\"templates/admin\"],\n        port: 5100,\t\n        client: { webSocketURL: \"http://localhost:5000/ws\" }\n    }\n}; \n```", "```js\ndocument.addEventListener('DOMContentLoaded', () => {\n    // do nothing\n}); \n```", "```js\nimport { Express } from \"express\";\nexport const createAdminRoutes = (app: Express) => {\n    app.use((req, resp, next) => {\n        resp.locals.layout = false;\n        next();\n    })\n    app.get(\"/admin\", (req, resp) => resp.render(\"admin/admin_layout\"));\n} \n```", "```js\nimport { Express } from \"express\";\nimport { createCatalogRoutes } from \"./catalog\";\nimport { createCartMiddleware, createCartRoutes } from \"./cart\";\nimport { createOrderRoutes } from \"./orders\";\nimport { createAdminRoutes } from \"./admin\";\nexport const createRoutes = (app: Express) => {\n    createCartMiddleware(app);\n    createCatalogRoutes(app);\n    createCartRoutes(app);\n    createOrderRoutes(app);\n    createAdminRoutes(app);\n} \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <link href=\"/css/bootstrap.min.css\" rel=\"stylesheet\" />\n        <link href=\"/font/bootstrap-icons.min.css\" rel=\"stylesheet\">\n        {{#if (isDevelopment) }}\n            <script src=\"img/bundle.js\"></script>\n        {{/if }}\n        <script src=\"img/htmx.min.js\"></script>\n    </head>\n    <body>\n        <div class=\"container-fluid\">\n            <div class=\"row bg-info text-white py-2 px-1\">\n                <div class=\"col align-baseline pt-1\">SPORTS STORE ADMIN</div>\n                <div class=\"col-auto text-end\"></div>\n            </div>\n            <div class=\"row p-2\">\n                <div class=\"col-2\" id=\"area_buttons\"></div>\n                <div class=\"col\" id=\"content\">\n                    Content Goes Here...\n                </div>\n            </div>\n        </div>\n    </body>\n</html> \n```", "```js\nimport { createServer } from \"http\";\nimport express, { Express } from \"express\";\nimport helmet from \"helmet\";\nimport { getConfig, getEnvironment, Env } from \"./config\";\nimport { createRoutes } from \"./routes\";\nimport { createTemplates } from \"./helpers\";\nimport { createErrorHandlers } from \"./errors\";\nimport { createSessions } from \"./sessions\";\nimport { createAuthentication } from \"./authentication\";\n**import httpProxy from \"http-proxy\";**\nconst port = getConfig(\"http:port\", 5000);\nconst expressApp: Express = express();\nexpressApp.use(helmet());\nexpressApp.use(express.json());\nexpressApp.use(express.urlencoded({extended: true}))\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\nexpressApp.use(express.static(\"node_modules/bootstrap-icons\"));\nexpressApp.use(express.static(\"node_modules/htmx.org/dist\"));\ncreateTemplates(expressApp);\ncreateSessions(expressApp);\ncreateAuthentication(expressApp);\ncreateRoutes(expressApp);\n**//createErrorHandlers(expressApp);**\nconst server = createServer(expressApp);\n**if (getEnvironment****() === Env.Development) {**\n **const proxy = httpProxy.createProxyServer({**\n **target: \"http://localhost:5100\", ws: true**\n **});** \n **expressApp.use(\"/admin\"****, (req, resp) => proxy.web(req, resp));** \n **server.on('upgrade', (req, socket, head) => proxy.ws(req, socket, head));**\n**}**\n**createErrorHandlers(expressApp);**\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\n{\n  \"name\": \"sportsstore\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"watch\": \"tsc-watch --noClear --onsuccess \\\"node dist/server.js\\\"\",\n    **\"server\": \"nodemon --exec npm run watch\",**\n **\"client\": \"webpack serve\",**\n **\"start\": \"npm-run-all --parallel server client\"**\n  },\n  \"nodemonConfig\": {\n    \"ext\": \"js,handlebars,json\",\n    \"ignore\": [\n      \"dist/**\",\n      \"node_modules/**\",\n     **\"templates/admin/**\"** \n    ]\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    // ...packages omitted for brevity...\n  },\n  \"dependencies\": {\n    // ...packages omitted for brevity...\n  }\n} \n```", "```js\nnpm start \n```", "```js\n<swap_wrapper hx-swap-oob=\"innerHTML:#area_buttons\">\n    <div class=\"d-grid gap-2\" >\n        <button id=\"products_btn\" class=\"btn **{{ buttonClass \"products\" mode }}**\"\n            hx-get=\"/api/products/table\" hx-target=\"#content\">\n            Products\n        </button>\n        <button id=\"orders_btn\" class=\"btn {{ buttonClass \"orders\" mode }}\"\n            hx-get=\"/api/orders/table\" hx-target=\"#content\">\n            Orders\n        </button>\n    </div>\n</swap_wrapper> \n```", "```js\n...\n<swap_wrapper **hx-swap-oob=\"innerHTML:#area_buttons\"**>\n    <div class=\"d-grid gap-2\" >\n        <button id=\"products_btn\" class=\"btn {{ buttonClass \"products\" mode }}\"\n           ** hx-get=\"****/api/products/table\" hx-target=\"#content\">**\n            Products\n        </button>\n        <button id=\"orders_btn\" class=\"btn {{ buttonClass \"orders\" mode }}\"\n           ** hx-get=\"/api/orders/table\" hx-target=\"#content\">**\n            Orders\n        </button>\n    </div>\n</swap_wrapper>\n... \n```", "```js\n...\n<swap_wrapper hx-swap-oob=\"innerHTML:#area_buttons\">\n    <div class=\"d-grid gap-2\" >\n        <button id=\"products_btn\" class=\"btn {{ buttonClass \"products\" mode }}\"\n            hx-get=\"/api/products/table\" hx-target=\"#content\">\n            Products\n        </button>\n        <button id=\"orders_btn\" class=\"btn {{ buttonClass \"orders\" mode }}\"\n            hx-get=\"/api/orders/table\" hx-target=\"#content\">\n            Orders\n        </button>\n    </div>\n</swap_wrapper>\n... \n```", "```js\nexport const buttonClass = (btn: string, mode: string) =>\n    btn == mode ? \"btn-secondary\" : \"btn-outline-secondary\"; \n```", "```js\nimport { Express } from \"express\";\nimport { getConfig } from \"../config\";\nimport { engine } from \"express-handlebars\";\nimport * as env_helpers from \"./env\";\nimport * as catalog_helpers from \"./catalog_helpers\";\nimport * as cart_helpers from \"./cart_helpers\";\nimport * as order_helpers from \"./order_helpers\";\n**import * as admin_helpers from \"./admin_helpers\";**\nconst location = getConfig(\"templates:location\");\nconst config = getConfig(\"templates:config\");\nexport const createTemplates = (app: Express) => {\n    app.set(\"views\", location);\n    app.engine(\"handlebars\", engine({\n        ...config,\n       ** helpers: {...env_helpers, ...catalog_helpers, ...cart_helpers,**\n **...order_helpers, ...admin_helpers}**\n    }));\n    app.set(\"view engine\", \"handlebars\");\n} \n```", "```js\n{{> admin/area_buttons mode=\"products\"}}\n<table class=\"table table-sm\">\n    <thead>\n        <tr>\n            <th>ID</th><th>Name</th>\n            <th>Category</th><th>Supplier</th>\n            <th class=\"text-end\">Price</th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n        {{#each products }}   \n            <tr><td colspan=\"6\">{{name}}</td></tr>\n        {{/each }}\n    </tbody>\n</table> \n```", "```js\nimport { Router } from \"express\";\nimport { CategoryModel, ProductModel, SupplierModel }\n    from \"../../data/orm/models\";\n\nexport const createAdminCatalogRoutes = (router: Router) => {\n    router.get(\"/table\", async (req, resp) => {\n        const products = await ProductModel.findAll({\n                include: [\n                    {model: SupplierModel, as: \"supplier\" },\n                    {model: CategoryModel, as: \"category\" }],\n                raw: true, nest: true\n        });\n        resp.render(\"admin/product_table\", { products });\n    });\n} \n```", "```js\n**import { Express, Router } from \"express\"****;**\n**import { createAdminCatalogRoutes } from \"./admin_catalog_routes\";**\nexport const createAdminRoutes = (app: Express) => {\n    app.use((req, resp, next) => {\n        resp.locals.layout = false;\n        next();\n    })\n   ** const cat_router = Router();**\n **createAdminCatalogRoutes(cat_router);**\n **app.use(\"/api/products\"****, cat_router);**\n    app.get(\"/admin\", (req, resp) => resp.render(\"admin/admin_layout\"));\n} \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <link href=\"/css/bootstrap.min.css\" rel=\"stylesheet\" />\n        <link href=\"/font/bootstrap-icons.min.css\" rel=\"stylesheet\">\n        {{#if (isDevelopment) }}\n            <script src=\"img/bundle.js\"></script>\n        {{/if }}\n        <script src=\"img/htmx.min.js\"></script>\n    </head>\n    <body>\n        <div class=\"container-fluid\">\n            <div class=\"row bg-info text-white py-2 px-1\">\n                <div class=\"col align-baseline pt-1\">SPORTS STORE ADMIN</div>\n                <div class=\"col-auto text-end\"></div>\n            </div>\n            <div class=\"row p-2\">\n                <div class=\"col-2\" id=\"area_buttons\"></div>\n               ** <div class=\"col\" id=\"****content\" hx-get=\"/api/products/table\"**\n **hx-trigger=\"load\"></div>**\n            </div>\n        </div>\n    </body>\n</html> \n```", "```js\n<tr id=\"row{{ id }}\">\n    <td>{{ id }}</td>\n    <td>{{ name }}</td>\n    <td>{{ category.name }}</td>\n    <td>{{ supplier.name }}</td>\n    <td class=\"text-end\">{{ currency price}}</td>\n    <td class=\"ps-3\">       \n        <button class=\"btn btn-sm btn-warning\"\n            hx-get=\"/api/products/edit/{{id}}\" hx-target=\"#content\">\n                Edit\n            </button>\n        <button class=\"btn btn-sm btn-danger\"\n            hx-delete=\"/api/products/{{id}}\" hx-target=\"#row{{id}}\"\n                    hx-swap=\"delete\">\n                Delete\n        </button>           \n    </td>\n</tr> \n```", "```js\n{{> admin/area_buttons mode=\"products\"}}\n<table class=\"table table-sm\">\n    <thead>\n        <tr>\n            <th>ID</th><th>Name</th>\n            <th>Category</th><th>Supplier</th>\n            <th class=\"text-end\">Price</th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n        {{#each products }}   \n           ** {{> admin/product_row }}**\n        {{/each }}\n    </tbody>\n</table> \n```", "```js\nimport { Router } from \"express\";\nimport { CategoryModel, ProductModel, SupplierModel }\n    from \"../../data/orm/models\";\nexport const createAdminCatalogRoutes = (router: Router) => {\n    router.get(\"/table\", async (req, resp) => {\n        const products = await ProductModel.findAll({\n                include: [\n                    {model: SupplierModel, as: \"supplier\" },\n                    {model: CategoryModel, as: \"category\" }],\n                raw: true, nest: true\n        });\n        resp.render(\"admin/product_table\", { products });\n    });\n   ** router.delete(\"/:id\", async (req, resp) => {**\n **const** **id = req.params.id;**\n **const count = await ProductModel.destroy({ where: { id }});**\n **if (count == 1) {**\n **resp.end****();**\n **} else {**\n **throw Error(`Unexpected deletion count result: ${count}`)**\n **}**\n **});**\n} \n```", "```js\n{{#if invalid }}\n    {{#each messages }}\n        <div class=\"text-danger\">{{ this }}</div>\n    {{/each }}\n{{/if }} \n```", "```js\n<div class=\"mb-2\">\n    <label>{{label}}</label>\n    <input {{ disabled label }} name=\"{{ name }}\" class=\"form-control\"\n        value=\"{{ data.value }}\" />\n    {{> admin/validation_messages data }}\n</div> \n```", "```js\nexport const buttonClass = (btn: string, mode: string) =>\n    btn == mode ? \"btn-secondary\" : \"btn-outline-secondary\";\n**export const disabled = (val: any) => val == \"ID\"** **? \"disabled\" : \"\";** \n```", "```js\n<div class=\"mb-2\">\n    <label>{{ label }}</label>\n    <select name=\"{{name}}\" class=\"form-select \" >\n        <option value=\"\" disabled selected>Choose Category</option>\n        {{#each list }}\n            <option {{ selected id ../data.value }}\n                value=\"{{id}}\">{{ name }}\n            </option>\n        {{/each}}\n    </select>\n    {{> admin/validation_messages data }}\n</div> \n```", "```js\nexport const buttonClass = (btn: string, mode: string) =>\n    btn == mode ? \"btn-secondary\" : \"btn-outline-secondary\";\nexport const disabled = (val: any) => val == \"ID\" ? \"disabled\" : \"\";\n**export const selected = (val1: any, val2: any) =>**\n **val1 == val2 ? \"selected\" : \"\";** \n```", "```js\n{{> admin/area_buttons mode=\"products\"}}\n<form hx-put=\"/api/products/{{product.id.value}}\">\n    {{> admin/product_input label=\"ID\" name=\"id\" data=product.id }}\n    {{> admin/product_input label=\"Name\" name=\"name\" data=product.name }}\n    <div class=\"mb-2\">\n        <label>Description</label>\n        <textarea name=\"description\"\n            class=\"form-control\">{{ product.description.value }}</textarea>\n        {{> admin/validation_messages product.description }}           \n    </div>\n    {{> admin/product_select label=\"Category\" name=\"categoryId\"\n            data=product.categoryId list=categories}}\n    {{> admin/product_select label=\"Supplier\" name=\"supplierId\"\n            data=product.supplierId list=suppliers}}\n    {{> admin/product_input label=\"Price\" name=\"price\" data=product.price }}\n    <div>\n        <button type=\"submit\" class=\"btn btn-secondary text-white\">Save</button>\n        <button class=\"btn btn-outline-secondary\"\n            hx-get=\"/api/products/table\" hx-target=\"#content\">Cancel</button>\n    </div>\n</form> \n```", "```js\nimport { Validator } from \"./validator\";\nimport { required, minLength } from \"./basic_rules\";\nimport { ValidationStatus } from \".\";\nimport { CategoryModel, SupplierModel } from \"../orm/models\";\ntype ProductDTO = {\n    name: string, description: string, categoryId: number,\n    supplierId: number, price: number\n}\nconst supplierExists = async (status: ValidationStatus) => {\n    const count = await SupplierModel.count({ where: { id: status.value } });\n    if (count !== 1) {\n        status.setInvalid(true);\n        status.messages.push(\"A valid supplier is required\");       \n    }\n}\nconst categoryExists = async (status: ValidationStatus) => {\n    const count = await CategoryModel.count({ where: { id: status.value } });\n    if (count !== 1) {\n        status.setInvalid(true);\n        status.messages.push(\"A valid category is required\");       \n    }\n}\nexport const ProductDTOValidator = new Validator<ProductDTO>({   \n    name: [required, minLength(3)],\n    description: required,\n    categoryId : categoryExists,\n    supplierId: supplierExists,\n    price: required,\n}); \n```", "```js\nexport * from \"./validation_types\";\nexport * from \"./validator\";\nexport * from \"./basic_rules\";\nexport * from \"./order_rules\";\n**export * from \"./product_dto_rules\";** \n```", "```js\nimport { Router } from \"express\";\nimport { CategoryModel, ProductModel, SupplierModel }\n    from \"../../data/orm/models\";\n**import { ProductDTOValidator, getData, isValid } from \"../../data/validation\";**\nexport const createAdminCatalogRoutes = (router: Router) => {\n    // ...existing routes omitted for brevity...\n    **router.get(\"/edit/:id\", async (req, resp) => {**\n **const id = req.****params.id;**\n **const data = {**\n **product: { id: { value: id },**\n **...await ProductDTOValidator.validate(**\n **await** **ProductModel.findByPk(id, { raw: true}))},**\n **suppliers: await SupplierModel.findAll({raw: true}),**\n**categories: await CategoryModel.findAll({raw: true})**\n **};**\n **resp.render(\"admin/product_editor\", data);**\n **});**\n **router.put(\"/:id\",** **async (req, resp) => {**\n **const validation = await ProductDTOValidator.validate(req.body);**\n **if (isValid(validation)) {**\n **await ProductModel.****update(**\n **getData(validation), { where: { id: req.params.id}}**\n **);**\n **resp.redirect(303, \"/api/products/table\");**\n **} else {**\n **resp.****render(\"admin/product_editor\", {**\n **product: { id: { value: req.params.id} , ...validation },**\n **suppliers: await SupplierModel.****findAll({raw: true}),**\n **categories: await CategoryModel.findAll({raw: true})**\n **})**\n **}**\n **});** \n} \n```", "```js\n...\nresp.redirect(303, \"/api/products/table\");\n... \n```", "```js\n{\n    \"http\": {\n        \"port\": 5000,\n        **\"content_security\": {**\n **\"****contentSecurityPolicy\": {**\n **\"directives\": {**\n **\"upgradeInsecureRequests\": null**\n **}**\n **}**\n **}**\n    },\n    // ...other configuration sections omitted for brevity...\n} \n```", "```js\nimport { createServer } from \"http\";\nimport express, { Express } from \"express\";\nimport helmet from \"helmet\";\nimport { getConfig, getEnvironment, Env } from \"./config\";\nimport { createRoutes } from \"./routes\";\nimport { createTemplates } from \"./helpers\";\nimport { createErrorHandlers } from \"./errors\";\nimport { createSessions } from \"./sessions\";\nimport { createAuthentication } from \"./authentication\";\nimport httpProxy from \"http-proxy\";\nconst port = getConfig(\"http:port\", 5000);\nconst expressApp: Express = express();\n**expressApp.use(helmet(****getConfig(\"http:content_security\", {})));**\nexpressApp.use(express.json());\nexpressApp.use(express.urlencoded({extended: true}))\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\nexpressApp.use(express.static(\"node_modules/bootstrap-icons\"));\nexpressApp.use(express.static(\"node_modules/htmx.org/dist\"));\ncreateTemplates(expressApp);\ncreateSessions(expressApp);\ncreateAuthentication(expressApp);\ncreateRoutes(expressApp);\nconst server = createServer(expressApp);\nif (getEnvironment() === Env.Development) {\n    const proxy = httpProxy.createProxyServer({\n        target: \"http://localhost:5100\", ws: true\n    });   \n    expressApp.use(\"/admin\", (req, resp) => proxy.web(req, resp));\n    server.on('upgrade', (req, socket, head) => proxy.ws(req, socket, head));\n}\ncreateErrorHandlers(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\n{{> admin/area_buttons mode=\"products\"}}\n<table class=\"table table-sm\">\n    <thead>\n        <tr>\n            <th>ID</th><th>Name</th>\n            <th>Category</th><th>Supplier</th>\n            <th class=\"text-end\">Price</th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n        {{#each products }}   \n            {{> admin/product_row }}\n        {{/each }}\n    </tbody>\n</table>\n**<button class=\"btn btn-secondary\" hx-get=\"/api/products/create\"**\n **hx-target=\"#content\">**\n **Create**\n**</button>** \n```", "```js\n{{> admin/area_buttons mode=\"products\"}}\n**{{#if create}}**\n**<form hx-post=\"/api/products/create\">**\n**{{else}}**\n**<form hx-put=\"/api/products/{{product.id.value}}\">**\n**{{/if}}**\n    {{> admin/product_input label=\"ID\" name=\"id\" data=product.id }}\n    {{> admin/product_input label=\"Name\" name=\"name\" data=product.name }}\n    <div class=\"mb-2\">\n        <label>Description</label>\n        <textarea name=\"description\"\n            class=\"form-control\">{{ product.description.value }}</textarea>\n        {{> admin/validation_messages product.description }}           \n    </div>\n    {{> admin/product_select label=\"Category\" name=\"categoryId\"\n            data=product.categoryId list=categories}}\n    {{> admin/product_select label=\"Supplier\" name=\"supplierId\"\n            data=product.supplierId list=suppliers}}\n    {{> admin/product_input label=\"Price\" name=\"price\" data=product.price }}\n    <div>\n        <button type=\"submit\" class=\"btn btn-secondary text-white\">Save</button>\n        <button class=\"btn btn-outline-secondary\"\n            hx-get=\"/api/products/table\" hx-target=\"#content\">Cancel</button>\n    </div>\n</form> \n```", "```js\nimport { Router } from \"express\";\nimport { CategoryModel, ProductModel, SupplierModel }\n    from \"../../data/orm/models\";\nimport { ProductDTOValidator, getData, isValid } from \"../../data/validation\";\nexport const createAdminCatalogRoutes = (router: Router) => {\n    // ...other routes omitted for brevity...\n    **router.get(\"/create\", async (req, resp) => {**\n **const data = {**\n **product: {},**\n **suppliers: await** **SupplierModel.findAll({raw: true}),**\n **categories: await CategoryModel.findAll({raw: true}),**\n**create: true**\n **};**\n **resp.render(\"admin/product_editor\", data);**\n **});**\n **router.post(\"/create\", async (req, resp) => {**\n **const validation = await** **ProductDTOValidator.validate(req.body);**\n **if (isValid(validation)) {**\n **await ProductModel.create(getData(validation));**\n **resp.redirect(****303, \"/api/products/table\");**\n **} else {**\n **resp.render(\"admin/product_editor\", {**\n **product: validation,**\n **suppliers: await SupplierModel.findAll({****raw: true}),**\n **categories: await CategoryModel.findAll({raw: true}),**\n **create: true**\n **})**\n **}**\n **});** \n} \n```", "```js\nimport { Router } from \"express\";\nimport { AddressModel, OrderModel, ProductSelectionModel }\n    from \"../../data/orm/models/order_models\";\nimport { CustomerModel } from \"../../data/orm/models/customer_models\";\nimport { ProductModel } from \"../../data/orm/models\";\nexport const createAdminOrderRoutes = (router: Router) => {\n    router.get(\"/table\", async (req, resp) => {\n        const orders = (await OrderModel.findAll({\n            include: [\n                { model: CustomerModel, as: \"customer\"},\n                { model: AddressModel, as: \"address\"},\n                { model: ProductSelectionModel, as: \"selections\",\n                    include: [{ model: ProductModel, as: \"product\"}]\n                }\n            ],\n            order: [\"shipped\", \"id\"]\n        })).map(o => o.toJSON())\n        resp.render(\"admin/order_table\", { orders });\n    });\n    router.post(\"/ship\", async (req, resp) => {\n        const { id, shipped } = req.body;\n        const [rows] = await  OrderModel.update({ shipped },{ where: { id }});\n        if (rows === 1) {\n            resp.redirect(303, \"/api/orders/table\");\n        } else {\n            throw new Error(`Expected 1 row updated, but got ${rows}`);\n        }\n    });\n} \n```", "```js\n...\nconst orders = (await OrderModel.findAll({\n    include: [{ model: CustomerModel, as: \"customer\"},\n              { model: AddressModel, as: \"address\"},\n              { model: ProductSelectionModel, as: \"selections\",\n                    include: [{ model: ProductModel, as: \"product\"}]\n               }],\n            order: [\"shipped\", \"id\"]\n        })).map(o => o.**toJSON**())\n... \n```", "```js\nimport { Express, Router } from \"express\";\nimport { createAdminCatalogRoutes } from \"./admin_catalog_routes\";\n**import** **{ createAdminOrderRoutes } from \"./admin_order_routes\";**\nexport const createAdminRoutes = (app: Express) => {\n    app.use((req, resp, next) => {\n        resp.locals.layout = false;\n        next();\n    })\n    const cat_router = Router();\n    createAdminCatalogRoutes(cat_router);\n    app.use(\"/api/products\", cat_router);\n    **const** **order_router = Router();**\n **createAdminOrderRoutes(order_router);**\n **app.use(\"/api/orders\", order_router);**\n    app.get(\"/admin\", (req, resp) => resp.render(\"admin/admin_layout\"));\n} \n```", "```js\n{{> admin/area_buttons mode=\"orders\"}}\n<table class=\"table table-sm table-bordered\">\n    <thead><tr><th colspan=\"7\" class=\"text-center\">Orders</th></tr></thead>\n    <tbody>\n        {{#unless orders}}\n          <tr><td colspan=\"7\" class=\"text-center\">No Orders</td></tr>\n        {{/unless}}\n        {{#each orders}}\n            <tr class=\"table-active\">\n                <th>#</th><th>Customer</th><th>ZIP</th>\n                <th>Product</th><th>Quantity</th><th>Price</th><th></th>\n            </tr>\n            {{#each selections}}\n            <tr>\n                {{#if (first @index)}}\n                    <td>{{ ../id }}</td>\n                    <td>{{ ../customer.name }}</td>\n                    <td>{{ ../address.zip }}</td>\n                {{else }}\n                    <th colspan=\"3\"></th>\n                {{/if}}\n                <td>{{product.name}}</td>\n                <td>{{ quantity }}</td>\n                <td>{{currency product.price}}</td>\n                {{#if (first @index)}}\n                    {{> admin/order_button id=../id shipped=../shipped}}\n                {{else}}\n                    <td></td>\n                {{/if}}\n                </tr>\n            {{/each }}\n            <tr>\n                <th colspan=\"5\" class=\"text-end\">Total:</th>\n                <td>{{currency (total selections)}}</td>\n                <td></td>\n            </tr>\n        {{/each}}\n    </tbody>\n</table> \n```", "```js\n<td>\n    <form hx-post=\"/api/orders/ship\" hx-target=\"#content\">\n        <input type=\"hidden\" name=\"id\" value=\"{{id}}\">\n        {{#if shipped }}\n            <input type=\"hidden\" name=\"shipped\" value=\"false\">\n            <button class=\"btn btn-sm btn-warning\">Mark Unshipped</button>\n        {{else }}\n            <input type=\"hidden\" name=\"shipped\" value=\"true\">\n            <button class=\"btn btn-sm btn-danger\">Ship Order</button>\n        {{/if}}\n    </form>\n</td> \n```", "```js\nexport const buttonClass = (btn: string, mode: string) =>\n    btn == mode ? \"btn-secondary\" : \"btn-outline-secondary\";\nexport const disabled = (val: any) => val == \"ID\" ? \"disabled\" : \"\";\nexport const selected = (val1: any, val2: any) =>\n    val1 == val2 ? \"selected\" : \"\";\n**export const first = (index: number) => index == 0;**\n**export const total = (sels: any[]) =>**\n **sels.reduce((total, s) => total += (s.quantity * s.product.price), 0);** \n```", "```js\n...\n{{#if (first **@index**)}}\n... \n```", "```js\n...\n<td>{{currency (**total** selections)}}</td>\n... \n```", "```js\nimport { Express, Router } from \"express\";\nimport { createAdminCatalogRoutes } from \"./admin_catalog_routes\";\nimport { createAdminOrderRoutes } from \"./admin_order_routes\";\nexport const createAdminRoutes = (app: Express) => {\n    app.use((req, resp, next) => {\n        resp.locals.layout = false;\n        next();\n    })\n    const cat_router = Router();\n    createAdminCatalogRoutes(cat_router);\n    app.use(\"/api/products\", cat_router);\n    const order_router = Router();\n    createAdminOrderRoutes(order_router);\n    app.use(\"/api/orders\", order_router);\n    app.get(\"/admin\", (req, resp) => resp.redirect(\"/admin/products\"));\n **app.get(\"/admin/products\", (req, resp) => {**\n **resp.locals.content = \"/api/products/table\";**\n **resp.render(\"admin/admin_layout\"****);**\n **});**\n **app.get(\"/admin/products/edit/:id\", (req, resp) => {**\n **resp.locals.content = `/api/products/edit/${req.params.id}`;**\n **resp.render(\"admin/admin_layout\"****);**\n **});**\n **app.get(\"/admin/orders\", (req, resp) => {**\n **resp.locals.content = \"/api/orders/table\";**\n **resp.render(\"admin/admin_layout\");**\n **});**\n} \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <link href=\"/css/bootstrap.min.css\" rel=\"stylesheet\" />\n        <link href=\"/font/bootstrap-icons.min.css\" rel=\"stylesheet\">\n        <script src=\"img/bundle.js\" defer></script>\n        <script src=\"img/htmx.min.js\"></script>\n    </head>\n    <body>\n        <div class=\"container-fluid\">\n            <div class=\"row bg-info text-white py-2 px-1\">\n                <div class=\"col align-baseline pt-1\">SPORTS STORE ADMIN</div>\n                <div class=\"col-auto text-end\"></div>\n            </div>\n            <div class=\"row p-2\">\n                <div class=\"col-2\" id=\"area_buttons\"></div>\n                **<div class=\"col\" id=\"content\" hx-get=\"{{content}}\"**\n **hx-trigger****=\"load\"></div>**\n            </div>\n        </div>\n    </body>\n</html> \n```", "```js\n<swap_wrapper hx-swap-oob=\"innerHTML:#area_buttons\">\n    <div class=\"d-grid gap-2\" >\n        **<button** **id=\"products_btn\" class=\"btn {{ buttonClass \"products\" mode }}\"**\n **hx-get=\"/api/products/table\" hx-target=\"#content\"**\n**hx-push-url=\"/admin/products\">**\n            Products\n        </button>\n        **<button id=\"orders_btn\" class=\"btn {{ buttonClass \"orders\"** **mode }}\"**\n **hx-get=\"/api/orders/table\" hx-target=\"#content\"**\n **hx-push-url=\"/admin/orders\">**\n            Orders\n        </button>\n    </div>\n</swap_wrapper> \n```", "```js\n<tr id=\"row{{ id }}\">\n    <td>{{ id }}</td>\n    <td>{{ name }}</td>\n    <td>{{ category.name  }}</td>\n    <td>{{ supplier.name  }}</td>\n    <td class=\"text-end\">{{ currency price}}</td>\n    <td class=\"ps-3\">       \n       ** <button class=\"btn btn-sm btn-warning\"**\n**hx-get=\"****/api/products/edit/{{id}}\" hx-target=\"#content\"**\n **hx-push-url=\"/admin/products/edit/{{id}}\">**\n                Edit\n            </button>\n        <button class=\"btn btn-sm btn-danger\"\n            hx-delete=\"/api/products/{{id}}\" hx-target=\"#row{{id}}\"\n                    hx-swap=\"delete\">\n                Delete\n        </button>           \n    </td>\n</tr> \n```", "```js\n{\n    \"http\": {\n        \"port\": 5000,\n        \"content_security\": {\n            \"contentSecurityPolicy\": {\n                \"directives\": {\n                    \"upgradeInsecureRequests\": null\n                }\n            }           \n        }       \n    },\n\n    // ...configuration settings omitted for brevity...\n    \"auth\": {\n        \"openauth\": {\n            \"redirectionUrl\": \"http://localhost:5000/signin-google\"\n        }\n    },\n    **\"admin\": {**\n **\"openauth\": {**\n **\"redirectionUrl\": \"http://localhost:5000/auth-signin-google\"**\n **},**\n **\"users\": [\"alice@example.com\", \"your_account@google.com\"]**\n **}**\n} \n```", "```js\nimport { Express } from \"express\";\nimport { getConfig, getSecret } from \"./config\";\nimport passport from \"passport\";\nimport { Strategy as GoogleStrategy, Profile, VerifyCallback }\n    from \"passport-google-oauth20\";\nimport { customer_repository } from \"./data\";\nimport { Customer } from \"./data/customer_models\";\nconst callbackURL: string = getConfig(\"auth:openauth:redirectionUrl\");\nconst clientID = getSecret(\"GOOGLE_CLIENT_ID\");\nconst clientSecret = getSecret(\"GOOGLE_CLIENT_SECRET\");\n**const authCallbackURL: string = getConfig(\"****admin:openauth:redirectionUrl\")**\ndeclare global {\n    namespace Express {\n        interface User extends Customer {\n           ** adminUser?: boolean;**\n        }\n    }\n}\nexport const createAuthentication = (app:Express) => {\n    **passport.use(\"admin-auth\", new GoogleStrategy({**\n **clientID, clientSecret, callbackURL: authCallbackURL,**\n **scope: [\"email\", \"****profile\"],**\n **state: true** \n **}, (accessToken: string, refreshToken: string,**\n **profile: Profile, callback: VerifyCallback) => {**\n **return callback(null, {**\n **name: profile.displayName,**\n**email: profile.emails?.[0].value ?? \"\",**\n **federatedId: profile.id,**\n **adminUser: true**\n **})** \n **}));**\n    passport.use(new GoogleStrategy({\n        clientID, clientSecret, callbackURL,\n        scope: [\"email\", \"profile\"],\n        state: true\n    } , async (accessToken: string, refreshToken: string,\n            profile: Profile, callback: VerifyCallback) => {\n        const emailAddr = profile.emails?.[0].value ?? \"\";           \n        const customer = await customer_repository.storeCustomer({\n            name: profile.displayName, email: emailAddr,\n            federatedId: profile.id\n        });\n        const { id, name, email } = customer;\n        return callback(null, { id, name, email });\n    }));\n    passport.serializeUser((user, callback) => {\n        **callback(null, user.adminUser ? JSON.stringify(user) : user.id);**\n    });\n    **passport.****deserializeUser((id: number | string , callbackFunc) => {**\n **if (typeof id == \"string\") {**\n **callbackFunc(null, JSON.parse(id));**\n **}** **else {**\n            customer_repository.getCustomer(id).then(user =>\n                callbackFunc(null, user));\n        }\n    });\n    app.use(passport.session());\n} \n```", "```js\nimport { Express, NextFunction, Request, Response, Router } from \"express\";\nimport { createAdminCatalogRoutes } from \"./admin_catalog_routes\";\nimport { createAdminOrderRoutes } from \"./admin_order_routes\";\n**import passport from \"passport\";**\n**import { getConfig} from \"../../config\";**\n**const users: string[] = getConfig(\"admin:users\", []);**\nexport const createAdminRoutes = (app: Express) => {\n    app.use((req, resp, next) => {\n        resp.locals.layout = false;\n        **resp.locals.user = req.user;**\n        next();\n    });\n    **app.get(\"****/admin/signin\", (req, resp) => resp.render(\"admin/signin\"));**\n **app.post(\"/admin/signout\", (req, resp) =>**\n **req.logOut(****() => { resp.redirect(\"/admin/signin\") }));**\n **app.get(\"/admin/google\", passport.authenticate(\"admin-auth\"));**\n **app.get(\"/auth-signin-google\", passport.authenticate(\"****admin-auth\", {**\n **successRedirect: \"/admin/products\", keepSessionInfo: true**\n **}));** \n **const authCheck = (r: Request) => users.find(u =>** **r.user?.email === u);**\n **const apiAuth = (req: Request, resp: Response, next: NextFunction) => {**\n **if (!authCheck(req)) {**\n **return resp.sendStatus(401****)**\n **}**\n **next();**\n **};**\n    const cat_router = Router();\n    createAdminCatalogRoutes(cat_router);\n  **  app.use(\"/api/products\", apiAuth, cat_router);**\n    const order_router = Router();\n    createAdminOrderRoutes(order_router);\n    **app.use****(\"/api/orders\", apiAuth, order_router);**\n    c**onst userAuth = (req: Request, resp: Response, next: NextFunction) => {**\n **if (!authCheck(req)) {**\n **return resp.redirect(\"/admin/signin\");**\n **}**\n **next****();**\n **};**\n **app.get(\"/admin\", userAuth, (req, resp) =>**\n        resp.redirect(\"/admin/products\"));\n    **app.get(\"/admin/products\", userAuth, (req, resp) =>** **{**\n        resp.locals.content = \"/api/products/table\";\n        resp.render(\"admin/admin_layout\");\n    })\n   ** app.get(\"/admin/products/edit/:id\", userAuth, (req, resp) => {**\n        resp.locals.content = `/api/products/edit/${req.params.id}`;\n        resp.render(\"admin/admin_layout\");\n    })\n   ** app.get(\"/admin/orders\", userAuth, (req, resp) => {**\n        resp.locals.content = \"/api/orders/table\";\n        resp.render(\"admin/admin_layout\");\n    })\n} \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <link href=\"/css/bootstrap.min.css\" rel=\"stylesheet\" />\n        <link href=\"/font/bootstrap-icons.min.css\" rel=\"stylesheet\">\n        {{#if (isDevelopment) }}\n            <script src=\"img/bundle.js\"></script>\n        {{/if }}\n    </head>\n    <body>\n        <div class=\"container-fluid\">\n            <div class=\"row bg-info text-white py-2 px-1\">\n                <div class=\"col align-baseline pt-1\">SPORTS STORE ADMIN</div>\n                <div class=\"col-auto text-end\"></div>\n            </div>\n            <div class=\"row p-2\">\n                <div class=\"col\"></div>\n                <div class=\"col-auto\">\n                    <a class=\"btn btn-primary\" href=\"/admin/google\">\n                        <i class=\"bi bi-google\"></i>\n                        Sign in with Google Account\n                    </a>                 \n                </div> \n                <div class=\"col\"></div>\n            </div>\n        </div>\n    </body>\n</html> \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <link href=\"/css/bootstrap.min.css\" rel=\"stylesheet\" />\n        <link href=\"/font/bootstrap-icons.min.css\" rel=\"stylesheet\">\n        {{#if (isDevelopment) }}\n            <script src=\"img/bundle.js\"></script>\n        {{/if }}\n        <script src=\"img/htmx.min.js\"></script>\n    </head>\n    <body>\n        <div class=\"container-fluid\">\n            <div class=\"row bg-info text-white py-2 px-1\">\n                <div class=\"col align-baseline pt-1\">SPORTS STORE ADMIN</div>\n                <div class=\"col-auto text-end\">\n                    **{{#if user }}**\n **({{user.name}})**\n **<button class****=\"btn btn-secondary\"**\n **hx-post=\"/admin/signout\" hx-target=\"body\"**\n **hx-push-url=\"/admin/signin\">**\n **<i class****=\"bi bi-box-arrow-right\"></i>** \n **</button>**\n **{{/if}}**\n                </div>\n            </div>\n            <div class=\"row p-2\">\n                <div class=\"col-2\" id=\"area_buttons\"></div>\n                <div class=\"col\" id=\"content\" hx-get=\"{{content}}\"\n                    hx-trigger=\"load\"></div>\n            </div>\n        </div>\n    </body>\n</html> \n```"]