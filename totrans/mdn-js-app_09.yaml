- en: Chapter 9. New Features of Bootstrap 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Bootstrap 4** is the latest version of Bootstrap at the time of writing.
    This version makes Bootstrap more powerful and easy to customize and use. In this
    chapter, you will learn about the new features of Bootstrap 4 with examples. I
    will assume that you already have some knowledge of Bootstrap and know how to
    create responsive websites using it. If you are new to Bootstrap or responsive
    web design, you can find good books to learn Bootstrap from scratch from the Packt
    catalog. We will use Bootstrap 4 to design all the projects we will be building
    from this chapter onwards.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Various ways to download Bootstrap 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The compatibility of Bootstrap 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for Flexbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing Bootstrap 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsive CSS units
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading Bootstrap 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To download Bootstrap 4, first visit [http://v4-alpha.getbootstrap.com/getting-started/download/](http://v4-alpha.getbootstrap.com/getting-started/download/).
    Here, you will find various ways to download Bootstrap 4, depending on the package
    manager you use. You can also directly download the compiled version if the package
    manager you use is not listed or if you don't use a package manager at all. This
    page also provides you with a link to download the source files.
  prefs: []
  type: TYPE_NORMAL
- en: It also provides custom builds, which are just parts of Bootstrap 4 that can
    be used when you just need a few features of Bootstrap 4 but not the whole library.
  prefs: []
  type: TYPE_NORMAL
- en: All major CDN services also support Bootstrap 4, so in case you want to enqueue
    it from a CDN, you can easily find CDN URLs.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this chapter, directly download the compiled version and place it in a
    new directory named `bs4`. In the same directory, create a file named `index.html`,
    and place the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Browser and device support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap 4 supports the latest stable releases of all major browsers and platforms.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of compatibility, the only change Bootstrap 4 has brought in is that
    it drops support for Internet Explorer 8\. Everything else remains the same as
    in Bootstrap 3.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the rem and em CSS units
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap 4 has switched from `px` to `rem` and `em` wherever possible. This
    is the main reason why Bootstrap 4 is not supported in IE 8 as IE 8 doesn't support
    the `em` and `rem` units. Bootstrap 4 switched to `rem` and `em` because they
    make responsive typography and component sizing easier.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not familiar with the `rem` and `em` CSS units, then it's the right
    time to learn it.
  prefs: []
  type: TYPE_NORMAL
- en: The `em` unit is relative to the font size of the parent element. `1em` is equal
    to the current font size of the parent element. `2em` means two times the size
    of the current font. For example, if an element is displayed with a font size
    of `10 px`, then `2em` is `20 px`. We can achieve responsive typography and components
    by just changing the parent element's font size using CSS media queries for different
    viewport or device width sizes.
  prefs: []
  type: TYPE_NORMAL
- en: As `em` sizing is nested (it depends on parent element), if you have elements
    with `1.5em` sizing and then nest some HTML with elements that also have an `em`
    declaration, their sizing multiplies.
  prefs: []
  type: TYPE_NORMAL
- en: The `rem` unit is similar to `em` but is relative to the font size of the HTML
    tag (root element). Therefore, it's not nested.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bootstrap 4 uses a base font size of 16 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: The grid system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The only change made in the Bootstrap 4 grid system is that a new extra-large
    breakpoint has been added. The class prefix for this breakpoint is `.col-xl-`.
    Here are the Bootstrap 4 grid breakpoints after this new addition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The grid system](img/B05154_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `.col-xl-` breakpoint targets screen sizes of **1200px** or larger, which
    was targeted by `.col-lg-` in Bootstrap 3\. Therefore, this makes other breakpoints
    compress to target smaller screen sizes than they used to in Bootstrap 3\. Here,
    you can see that `.col-xs-` now targets a screen width of less than **544px**
    instead of the **768px** it did in Bootstrap 3, making it easier to target mobile
    devices and have different layouts for tablets and mobile devices, which was lacking
    in Bootstrap 3.
  prefs: []
  type: TYPE_NORMAL
- en: While Bootstrap uses `em` or `rem` for defining most sizes, `px` is used for
    grid breakpoints and container widths. This is because viewport width is in pixels
    and does not change with font size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of the new grid system. Place this code in the `<body>`
    tag of the `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A Bootstrap row can have 12 columns at the most. As here we have more than 12
    columns in the row in some cases, the columns are wrapped, that is, columns are
    wrapped to a new line.
  prefs: []
  type: TYPE_NORMAL
- en: 'On mobile screens, the previous code will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The grid system](img/B05154_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On small tablets, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The grid system](img/B05154_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It will look like this on regular tablets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The grid system](img/B05154_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Laptops users will see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The grid system](img/B05154_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, on desktop monitors, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The grid system](img/B05154_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, in Bootstrap 4, we are able to precisely target all types of device.
  prefs: []
  type: TYPE_NORMAL
- en: Global margin reset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For all elements, Bootstrap 4 resets `margin-top` to `0` while keeping a consistent
    `margin-bottom` value on all elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, headings have `margin-bottom: .5rem` added, and paragraphs have
    `margin-bottom: 1rem` for easy spacing.'
  prefs: []
  type: TYPE_NORMAL
- en: Spacing utility classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap 4 adds a new set of utility classes called **spacing utility classes**.
    These classes allow you to quickly add spacing in any direction of an element
    via margin or padding.
  prefs: []
  type: TYPE_NORMAL
- en: The format of these classes is `[margin or padding]-[direction]-[size]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For margin or padding, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`m` for margin'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p` for padding'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For direction, you can use these:'
  prefs: []
  type: TYPE_NORMAL
- en: '`a` for all'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`t` for top'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r` for right'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l` for left'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b` for bottom'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x` for left and right'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y` for top and bottom'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use these for sizes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0` for zero'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1` for `1rem`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2` for `1.5rem`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3` for `3rem`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example to demonstrate the spacing utility classes. Place this code
    at the end of the container element of `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how the page looks now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Spacing utility classes](img/B05154_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can see the top and bottom margin space created by the spacing utility
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: Display headings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditional heading elements, namely `h1`, `h2`, and so on, are designed to
    work best in the meat of your page content. When you need a heading to stand out,
    consider using a display heading—a larger, slightly more opinionated heading style.
    Display heading classes can be applied to any element of a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example to demonstrate display heading. Place this code at the end
    of the container element of `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`display-1`, `display-2`, `display-3`, and `display-4` are the display heading
    classes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the output of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Display headings](img/B05154_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Inverse tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A new class for tables has been introduced, named `table-inverse`. This is just
    another variation of `table` in terms of looks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how to create an inverse table. Place this code at the end of the container
    element of `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how the table looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inverse tables](img/B05154_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The card component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cards** are a new component in Bootstrap 4 that replaces wells, panels, and
    thumbnails. A card is a flexible and extensible content container. It includes
    options for headers and footers, a wide variety of content, contextual background
    colors, and powerful display options.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example that demonstrates how to create a card and all of its subparts
    and styles. Place this code at the end of the container element of `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how the code looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The card component](img/B05154_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, I've created multiple cards so that it is easier to demonstrate all of
    their subparts and different styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how the previous code works:'
  prefs: []
  type: TYPE_NORMAL
- en: To create a card, we need to use the `.card` class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, card width is 100% of its parent container. Therefore, here we are
    using a grid system to control width.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the first card, we have a header, which is created using the `.card-header`
    class. Then, we have a card block, inside which we have a title and subtitle.
    A card block is a part of a card that has padding. Whenever you need padding in
    any part of the card, simply use the `.card-block` class. A card title is created
    using `.card-title`, and a card subtitle is created using the `.card-subtitle`
    class. The `.card-title` and `.card-subtitle` classes simply give appropriate
    margins. Then, we simply have a responsive image. After that, we have a paragraph
    using the `.card-text` class. The `.card-text` class makes sure that the last
    child element doesn't have any bottom margin. Then, we have two links with the
    `.card-link` class. `.card-link` applies a left margin to all `.card-link` classes
    from the second one. And finally, we have a card footer, which is created using
    `.card-footer`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the second card, we have a responsive image and then a block quote. We have
    added the `.card-img-top` class to the image, which adds a top-right and top-left
    border radius to the image. We have also added `.card-blockquote` to the block
    quote to remove the margin, padding, and left border from the block quote.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the third card, we simply have some text and a responsive image. We have
    added the `.card-img-bottom` class to the responsive image, which adds a bottom-right
    and bottom-left border radius to the image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fourth card we created is for demonstrating card overlays. First, we added
    a responsive image with the `.card-img` class, which adds a border radius to all
    the corners. And then, we created an overlay using the `.card-img-overlay` class,
    which simply makes the position of the element absolute with some padding and
    no top, right, left, and bottom, thus putting the content on top of the card.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, cards use dark text and assume a light background. Add `.card-inverse`
    for white text and specify the `background-color` and `border-color` values to
    go with it. The fifth card is a demonstration of `.card-inverse`. Bootstrap 4
    also provides a few classes that add a background color and border color to cards.
    These classes are demonstrated in the last five cards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Card groups, decks, and columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Card groups let you render cards as a single, attached element with equal width
    and height columns. Card groups only apply to screen sizes greater than `544px`.
  prefs: []
  type: TYPE_NORMAL
- en: If you need a set of same-sized cards that aren't attached to one another, then
    use card decks instead of card groups. Card decks only apply to screen sizes greater
    than `544px`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, card columns let you organize cards into Masonry-like columns. Card
    columns only apply to screen sizes greater than `544px`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a code example of card groups, decks, and columns. Place it at the
    end of the container element of `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Card groups, decks, and columns](img/B05154_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have used the `.card-group` class to create a class group.
    We have used `.card-deck-wrapper` and `.card-deck` to create a card deck and,
    finally, `.card-columns` to organize cards into Masonry-like columns.
  prefs: []
  type: TYPE_NORMAL
- en: Outline buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap 4 has added some new button styles with **outline buttons**. Outline
    buttons appear hollow or are simply inverses of regular buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is example code to demonstrate outline buttons. Place this code at the
    end of the container element of `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how the code looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Outline buttons](img/B05154_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Moving from Less to Sass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Bootstrap 4 source is written in Sass instead of Less. Less was used until
    Bootstrap 3\. This is great because Sass tends to be more favorable by frontend
    developers. It also compiles faster. Also, it doesn't seem as if there are currently
    any plans for a Less version. You can find the source files at [https://github.com/twbs/bootstrap/tree/v4-dev](https://github.com/twbs/bootstrap/tree/v4-dev).
  prefs: []
  type: TYPE_NORMAL
- en: Text alignment and float utility classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Utility classes for floats and text alignment now have responsive ranges. Bootstrap
    4 has dropped nonresponsive text alignment and float classes.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive text alignment classes are of the `text-[xs/sm/md/lg/xl]-[left/right/center]`
    format. For example, the `text-lg-left` class left aligns text on viewports sized
    `lg` or wider.
  prefs: []
  type: TYPE_NORMAL
- en: Classes of the format `pull-[xs/sm/md/lg/xl]-[left/right/none]` float an element
    to the left or right or disable floating based on the current viewport size. For
    example, the `pull-xs-left` class floats the element left on all viewport sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Reboot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap 3 used `Normalize.css` as its CSS reset. In Bootstrap 4, the reset
    and Bootstrap base styles are combined into a single file called `reboot.scss`.
  prefs: []
  type: TYPE_NORMAL
- en: Flexbox support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Flexbox support** has finally come to Bootstrap in Bootstrap 4\. To enable
    various components and grid systems to use Flexbox, you can download the Flexbox
    version of the Bootstrap CSS file, which is available on their download page:
    [http://v4-alpha.getbootstrap.com/getting-started/download/](http://v4-alpha.getbootstrap.com/getting-started/download/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that Flexbox has poor browser support, so think twice before deciding
    to use it. Here is a diagram that shows the browser support of Flexbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flexbox support](img/B05154_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can also change the value of the `$enable-flex` to `true` Sass variable
    and compile it to generate the Flexbox version of the Bootstrap CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about Flexbox support in Bootstrap 4 at [http://v4-alpha.getbootstrap.com/getting-started/flexbox/](http://v4-alpha.getbootstrap.com/getting-started/flexbox/).
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the source files, all the JavaScript plugins have been written using ES6,
    and for distribution, it is compiled with Babel. They also now come with UMD support.
  prefs: []
  type: TYPE_NORMAL
- en: Now that IE 8 support has been dropped, it's safe to always use jQuery 2.0 with
    Bootstrap. jQuery 2.0 is smaller and faster and has more features.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Tether
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Tether** is a JavaScript library for efficiently making an absolutely positioned
    element stay next to another element on the page. For example, you might want
    a tooltip or dialog to open and remain next to the relevant item on the page.'
  prefs: []
  type: TYPE_NORMAL
- en: In Bootstrap 4, Tether is integrated into tooltips and popovers for better auto-placement
    and performance. So, to make tooltips and popovers work in Bootstrap 4, you have
    to enqueue `tether.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this line of code to the top of the `bootstrap.min.js` file to enqueue
    tether from a CDN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The 21:9 aspect ratio class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A new aspect ratio class has been added to Bootstrap 4: the `.embed-responsive-21by9`
    class for a `21:9` ratio. Here is an example of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Customizing Bootstrap 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Bootstrap 4, all the customization variable options are consolidated to a
    single file called `_variables.scss`, where you can compile your Sass on the fly
    and with little effort. This used be previously all done in a separate stylesheet.
  prefs: []
  type: TYPE_NORMAL
- en: This file provides a lot more customization options than Bootstrap used to provide
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Glyphicons dropped
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Glyphicons** have been removed from the build, that is, Boostrap 4 doesn''t
    include an icon pack. You need to manually enqueue a icon pack.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, we have seen all the new features of Bootstrap 4\. The grid system and cards
    are the two major additions to Bootstrap 4\. It's absolutely fine to switch to
    Bootstrap 4 now. Although Bootstrap 4 drops support for IE 8, it's still fine
    as users should also move with the technology. From now on, Bootstrap 4 will be
    used in all the projects we will create in this book.
  prefs: []
  type: TYPE_NORMAL
