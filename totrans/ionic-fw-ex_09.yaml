- en: Chapter 9. Connecting to Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to focus solely on learning how to use Firebase
    to integrate a backend with our Ionic application. Firebase is a real-time data
    store technology that uses JSON-style database structure to let you store your
    data in the cloud. We will also be using the `tabs-app` app that we created in
    [Chapter 8](part0035_split_000.html#11C3M2-798adc86542b445d8a1bb648e10b6714 "Chapter 8. Building
    a Simple Social App"), *Building a Simple Social App,* to learn to integrate Firebase
    into our application.
  prefs: []
  type: TYPE_NORMAL
- en: Extending our tabs-app Ionic app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 8](part0035_split_000.html#11C3M2-798adc86542b445d8a1bb648e10b6714
    "Chapter 8. Building a Simple Social App"), *Building a Simple Social App,* we
    created `tabs-app`. If you recall correctly, we added a new tab called `walls`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic idea we had for the `wall` tab we added was that it would be like
    a message board where a user could type a post and then tap the button labeled
    **Post** to see it on the message board, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Extending our tabs-app Ionic app](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The first thing we need to do is to implement our mechanism to allow users to
    post, as this does not currently work in our `tab-app` application.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the post wall feature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To recap what we want from our `wall` tab, we want to be able to enter message
    in the message box, as seen in the preceding screenshot, and have the message
    appear like the sample message post. To begin, we start by implementing the code
    for adding a post in our controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'This code is provided in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You will need to replicate the code provided in the preceding block within your
    `WallController` controller. This `WallController` controller can be found within
    the `controller.js` file of your `tabs-app` application. The `WallController`
    controller can be found in the path `www/js/controller.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have done this correctly, your `WallController` controller will look
    like what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the post wall feature](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's understand what this code is doing. We are simply attaching a `post` object
    to the controller. We are also declaring a `posts` array where all our posts will
    be stored.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we have a function called `addPost()` which will add a new post to the
    `posts` array every time it is fired.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to wire this controller into the view of our `Wall` tab. The
    markup for this view is located in the `tab-wall.html` file. Now, this file looks
    like what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the post wall feature](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will need to completely replace the markup found within `<ion-content>`
    with the markup provided in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have done this correctly, your `tab-wall.html` file will have a markup
    that looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the post wall feature](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: By doing this, we have completed the process of implementing and wiring our
    wall post feature on the `Wall` tab. The next step is to test it using the `ionic
    serve` technique. Go ahead and run your app using the `ionic serve` technique
    and you should see your app running in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try to add a message in the text box found in the `Wall` tab and click
    the **Post** button, you will see a message appear, like what we have in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the post wall feature](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The backend challenge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The one problem or challenge we have with our current application is that it
    does not persist. By this, we mean that once we refresh the browser, all our data
    is gone and we have to start again. How cool would it be if we could enter a post
    and when we revisited our app, we could carry on from where we left off just like
    every other message board in other applications? Well, we can achieve this thanks
    to a great technology called Firebase. The first thing we will do is try to understand
    Firebase and what exactly it is.
  prefs: []
  type: TYPE_NORMAL
- en: Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin this chapter, it is very important that we understand the technology
    we are going to be using to integrate our backend. The technology in question
    is called Firebase. Firebase is a technology that lets us store real-time data.
    Unlike traditional backend databases where you need a server running, you do not
    need to have a hosted server with Firebase.
  prefs: []
  type: TYPE_NORMAL
- en: All you need to get going with Firebase is an active Google account and you
    are good to go. Let's set up a new Firebase account.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have a Google account, you can create one by visiting [http://www.gmail.com](http://www.gmail.com).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a new Firebase account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing you need to do to set up your Firebase account is go to the
    Firebase website, which is [http://www.firebase.com](http://www.firebase.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a screen that looks like what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a new Firebase account](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once this is done, you should see a button labeled **Sign Up With Google** on
    the top right-hand corner.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click this button, you should see a Gmail window asking you to select
    or log in to a Google account. After you select the Google account you want to
    use, you should be redirected to your brand new Firebase account. The window you
    will be redirected to should look like what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a new Firebase account](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the examples we have here are based on our sample account. You should not
    use the URLs from the preceding screenshot but instead use the ones you see in
    your own window. If you do not, your sample will not work.
  prefs: []
  type: TYPE_NORMAL
- en: You will see that there is a Firebase app created for you called **MY FIRST
    APP**. When using Firebase, for each app we create we also create an app for it
    on our Firebase dashboard. This is because Firebase uses a distinct URL to provide
    you access to the data of each unique application you create. So, think of this
    **MY FIRST APP** Firebase app as a database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a closer look at **MY FIRST APP**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a new Firebase account](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You should see something very similar to the preceding screenshot. You can access
    the URL for your Firebase database by clicking on the post fixed with the `.firebaseIO.com`
    URL. Remember that the URL you see on the screenshots will be different from the
    ones you see on your dashboard, and you are to use the ones on your dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the URL we have here for demonstration is [luminous-inferno-8905.firebaseIO.com](http://luminous-inferno-8905.firebaseIO.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the URL you have on your dashboard and that should take you to your Firebase
    database, which should look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a new Firebase account](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Just to clarify once again, Firebase uses URLs to access databases. What you
    see in the preceding screenshot is the dashboard for your database. You can also
    see the same database URL in the browser's address bar. Firebase uses JSON-style
    data structure, so basically what we send to it is JSON, and what we store is
    JSON too.
  prefs: []
  type: TYPE_NORMAL
- en: When we add data to our database, we will be able to see it in this dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Integrate Firebase into tabs-app application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have our Firebase account and know how to get the URL of our Firebase
    database, the next step is to integrate it into our application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Firebase and Angular-Fire scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first thing we need to do is to add the scripts we will need. We will need
    two scripts. The first is the Firebase library. The second script is the Angular-Fire
    library. Angular-Fire is an Angular library that makes working with Firebase in
    an AngularJS application much simpler.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest way is to use the hosted library references. To add this to our
    app, open your `index.html` file and add the following script references within
    `<head>` of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have done this correctly, the `head` part of your `index.html` should
    look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Firebase and Angular-Fire scripts](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure your references are below the Ionic bundle as seen in the preceding
    screenshot. This is very important or else your app will not work properly.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to reference your Angular-Fire module. This step will ensure
    that we can use Angular-Fire within our application. The name of this module is
    `firebase`. This will be added to the root module of your application, called
    `starter` in your `app.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, this module''s declaration looks something like what we have in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Firebase and Angular-Fire scripts](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will need to add the `firebase` module as a dependent module. Doing this
    will make the module declaration to look something like what we have in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Firebase and Angular-Fire scripts](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that the `firebase` module is now added to the module declaration
    as a dependency. By doing this, we have successfully integrated Firebase into
    the skin of our app. The next step is to actually implement it to save our data.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Firebase to our app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To implement Firebase in our app, we will need to do some work within our `WallController`
    controller. The first thing we need to code for is the ability to pull items from
    the database. The second thing we need to code for is the ability to add items
    to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Pulling from database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first thing we need to do is to add the `$firebaseArray` service dependency
    into our `WallController` controller. This service is part of the Angular-Fire
    library and makes it easy for us to work with arrays in Firebase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding the service dependency correctly should make your `WallController` controller
    definition look like what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pulling from database](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to actually write code to pull the data from the database.
    Replicate the code provided in the following code block in your `WallController`
    controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This piece of code creates a new Firebase reference at first. We passed in the
    URL of the Firebase database that we created earlier. Make sure you change the
    placeholder text (`YOUR-FIREBASE-APP`) to reflect the URL of your Firebase database.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, we used the `$firebase` service that we added earlier to create
    a path called `postData`. The last step we need to do is to allow our app to load
    data from this `postData` path and use it. To do this, we need to edit the code
    of our `WallController` slightly. Currently, our `WallController` controller''s
    code looks like what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pulling from database](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Pay close attention to the piece of code highlighted in the preceding screenshot.
    We need to edit this piece of code such that instead of equating to an empty array,
    it should equate to our `postData` variable. Doing this correctly should make
    us end up with a `WallController` controller that looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pulling from database](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: By doing this, we have implemented the first part; our Firebase implementation
    and our app now loads data from our database. The next step is to implement the
    code to add our posts to our database.
  prefs: []
  type: TYPE_NORMAL
- en: Adding to database
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Adding to the database is actually pretty easy. All we need to do is slightly
    edit our `addPost()` function. Currently, our `addPost()` function looks like
    what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding to database](img/00090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To make our data persist in our database, we only need to replace the code
    highlighted in the preceding screenshot with the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your `addPost()` function should look like what we have in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding to database](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'All we did was just change the `unshift()` method to the `$add()` method. The
    `$add()` method is a method from Firebase that adds items to a Firebase database.
    At this point, we have completed the implementation of our backend. As easy as
    that was, we have a working database in just a few short steps and can now test
    this live. Your final `WallController` controller should look like the following
    code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To test your application, simply run your app using the `ionic serve` technique.
    When you do this, you should be able to enter messages in your application, and
    even after you refresh your browser, the data that you have already posted will
    still exist. Also, if you have a look at the Firebase dashboard for your database,
    you will see that the data you entered in the app is present there.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned some really cool ways of using Firebase to easily
    add a backend to our Ionic app. We only touched upon what Firebase lets us do,
    and you can look at the Firebase documentation available at [https://www.firebase.com/docs/](https://www.firebase.com/docs/)
    to see the full features of Firebase.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have almost come to the end of our book. The next chapter
    will be the final one, and it is one you should definitely read. It contains some
    very useful information on how to harness skills learned in this book to get even
    better at using Ionic.
  prefs: []
  type: TYPE_NORMAL
