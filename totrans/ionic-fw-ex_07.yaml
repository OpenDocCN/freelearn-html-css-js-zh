- en: Chapter 7. Customizing the App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we dug deeply into some more advanced features of Ionic
    like the popover and the modal features. In this chapter, we will be focusing
    on customizing an Ionic application. The Ionic SDK comes by default with some
    great tools that make it easy to customize your application to fit the design
    guides of your brand. This is thanks to its built-in integration of Gulp for your
    build process needs and SCSS for CSS preprocessing.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic also has a special Angular provider called `$ionicConfigProvider`. This
    provider can be used to do a lot of configuration and customization like specifying
    what type of animations your application should use or even more advanced stuff
    like specifying how many cache items you want in your cache. The `$ionicConfigProvider`
    also lets you specify these configurations on a global level, or on a platform-by-platform
    basis.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the look and feel of your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you created an Ionic application using one of the Ionic templates, you
    would have noticed by now that it comes with some built-in default CSS styles.
    Many times you will want to know how you can add your own colors and styles while
    keeping some of the built-in Ionic styles.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic styles with SASS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is well thought out by the Ionic team and for this reason, they actually
    created all their CSS styles using SCSS. SCSS is an independent technology based
    on SASS that lets you write CSS in an object-oriented way which then gets compiled
    into CSS. SCSS is a really cool way to write CSS rules as it allows us to create
    variables and use them to create our style sheet. If you are completely new to
    SCSS and you want to see some brief information about SCSS, feel free to visit
    [http://sass-lang.com](http://sass-lang.com).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's have a look at the folder structure of an Ionic project once more
    with customization of our styles with SCSS in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic SCSS overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To have an overview of the SCSS structure of Ionic, we are going to create
    a brand new application using the Ionic blank template. We are going to call this
    application `custom-app`. The following is the command to create this new application.
    Fire up a terminal window on your computer and CD into a directory of your choice
    and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After you have created your new `custom-app` application, open this new project
    in your favorite IDE to have an overview of the folder structure. You should see
    something close to what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ionic SCSS overview](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two folders that you should pay close attention to. The first folder
    is the `scss` folder found in the root directory of the project. This folder has
    a file called `ionic.app.scss` within it; we will take a look at this in more
    detail. The following is a screenshot of what this folder looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ionic SCSS overview](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The second folder is also titled `scss`, but this folder can be found by navigating
    to the following path from the root folder `www/lib/ionic/scss`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ionic SCSS overview](img/00052.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if you look even further within this second `scss` folder, you should
    see something that closely resembles what we have in the following screenshot
    with a number of SCSS files within the `scss` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ionic SCSS overview](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This `scss` folder contains a numerous amount of files and you might be wondering
    what these files are for. As a part of this book, you do not need to understand
    the entire process of what these files are doing, but you need to know that they
    are the files that contain the SCSS code for every Ionic element. The entire Ionic
    CSS style sheet is generated by compiling these SCSS files. It is possible to
    go into these files to make changes to any SCSS file, but this is probably not
    a good idea, as you will risk breaking any dependencies in the SCSS code. For
    this reason, Ionic provides a much simpler way to do this thanks to `ionic.app.scss`
    that we briefly looked at earlier and will be looking at closely now.
  prefs: []
  type: TYPE_NORMAL
- en: The ionic.app.scss file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ionic.app.scss` file can be found within a directory called `scss` in
    the project root directory, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The ionic.app.scss file](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This file is the most important file for customizing the styles of your Ionic
    app. Think of this file as an interface for overriding any SCSS style contained
    in any of the SCSS files we noted in the `www/lib/ionic/scss` path. If you look
    at this `ionic.app.scss` file currently, it should look like what we have in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding code, you can even see some comments that tell you how to
    use the file to override your SCSS styles. Now, before we start learning how to
    actually override these files, first let's learn how to set up our SCSS for our
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up SCSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we set up the SCSS, we will first have a brief look at how our CSS is
    currently integrated. When you create a new Ionic project, the project uses styles
    from two sources by default.
  prefs: []
  type: TYPE_NORMAL
- en: The first source is the `ionic.css` file which can be found in the path `lib/ionic/css/ionic.css`.
    This file contains already compiled CSS code for all the Ionic default styles.
    It is simply a CSS compilation of all the SCSS files found in the `www/lib/ionic/scss/ionic`
    directory relative to the root directory of your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second source is the `style.css` file found in the `css/style.css` path
    relative to the root directory of your project. This file is normally empty at
    the time you create your project and is a place where you can enter your own custom
    styles in CSS, if you do not want to use SCSS. A look at the `index.html` file
    as shown in the following screenshot shows how these two files are referenced
    as CSS style sheets by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up SCSS](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With this explained, we will go ahead and start setting up SCSS on our Ionic
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up SCSS can be quite challenging traditionally but Ionic comes built-in
    with some tools that make it easy. To begin the process of setting up the SCSS
    of your project, fire up a terminal window and simply navigate into your project's
    root directory by running the `cd custom-app` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to install `bower` on your computer if you do not already
    have this installed. You can do so by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might need to prefix the `sudo` command if you are on a Linux or Mac computer.
    This will be `sudo npm install bower –g`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, the final step to get SCSS setup is by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This command will do all the necessary things behind the scenes that are needed
    to enable your project to work with SCSS. After this command is complete, you
    will notice a new folder called the `node-modules` folder in the root of your
    project. This is completely normal and is the folder that contains the packages
    necessary for your project to work with SCSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'By now, we have successfully set up SCSS for our project. The first thing you
    should look at is your `index.html` file. Your `index.html` should resemble the
    following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The first thing you will notice in the header is that the reference to CSS files
    have changed in comparison to what we briefly discussed earlier. Now, you have
    only one CSS reference in the `<head>` part of `index.html` pointing to `css/ionic.app.css`.
    You might be wondering how this happened. Well, basically when you set up SCSS
    like we have done in this chapter so far, Ionic automatically sets up the SCSS
    to compile all the SCSS and output them into `ionic.app.css`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up SCSS](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you navigate to the `www/css` path, you will see that we have three files
    as opposed to one as we saw earlier. You will see an `ionic.app.css` file and
    an `ionic.app.min.css` file. These two files are the same with `ionic.app.min.css`
    being a minified version of the `ionic.app.css`. They are the output of all the
    SCSS files that we checked out earlier compiled into one file. There are a lot
    more things that happen behind the scenes to ensure that this SCSS compilation
    happens, but for the sake of simplicity we won't be going deep into that in this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the SCSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin customizing our app, the first thing you want to do is to run your
    application using the `ionic serve` technique learned from previous chapters in
    this book, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This should bring up your application running in the browser and you should
    see something that closely resembles what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing the SCSS](img/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure you don't close your terminal or terminate the serve session from
    here on, in order to follow the instructions that come soon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now to explain what we will try to do, first let''s have a look at the code
    for the head of this app. The code block is the code for our app and you can find
    this in the `index.html` file in the `www` folder of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Pay close attention to the piece of code that represents the main view part
    of the preceding code block which is also represented in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you look at the opening `<ion-header>` tag, you will see that it has a class
    called `bar-stable`. This is an in-built class that Ionic comes with which gives
    the header a sort of light gray color, as seen from the screenshot we visited
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say we want to customize this header to fit our brand color and let's
    say, for example, that our brand color and this brand happens to be my favorite
    accent of red which has the hex code of `#D71300`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you might be tempted to go into the `ionic.app.css` file to look for every
    occurrence of this in our CSS style sheet and change it. But remember that this
    `ionic.app.css` is generated based on our SCSS files. Ionic gives us a great way
    to override default styles with SCSS thanks to the `ionic.app.scss` file which
    can be found in the `scss` directory. We looked at this file earlier and we are
    going to look at it again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code block resembles what you currently have in your `ionic.app.scss`
    file. To override the color of the header, we will override the current color
    of the `$stable` variable of our SCSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You are supposed to replicate the preceding code anywhere but just before the
    last line of the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your final code should resemble the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is done, save the `ionic.app.scss` file. By doing this, you have
    completed the process of overriding the app, and your header should now be red.
    Go back to your application on the browser or run your app with the `ionic serve`
    technique if you don''t have it running and you should see something that looks
    similar to what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing the SCSS](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that header now takes the color of the hex code we provided in the
    `ionic.app.scss` file. We can override any default file with this file. All you
    need to do is have a glance through the `lib/ionic/scss` folder, identify the
    SCSS rule you want to override, and override in `ionic.app.scss`.
  prefs: []
  type: TYPE_NORMAL
- en: With this done, we have completed the process of learning how to override and
    set up SCSS of our Ionic app. The next step is to learn about `$ionicConfigProvider`.
  prefs: []
  type: TYPE_NORMAL
- en: $ionicConfigProvider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`$ionicConfigProvider` is a provider that Ionic exposes and which allows us
    to do some very powerful configurations. We will not be writing any code for this
    as it is an advanced feature but you should be well aware of its existence.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the features that `$ionicConfigProvider` lets you do, include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Specify the transition type for your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the maximum cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable/enable animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable/enable native scrolling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify tabs positions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These and many more are some of the features that `$ionicConfigProvider` lets
    you fiddle with. Remember that this feature is a fairly advanced feature and it
    is very likely possible to completely design your app without it. Most apps most
    likely do not use its features but if you find yourself ever needing to use it,
    you can visit the official documentation for `$ionicConfigProvider` to see its
    full potential at [http://ionicframework.com/docs/api/provider/$ionicConfigProvider/](http://ionicframework.com/docs/api/provider/%24ionicConfigProvider/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to customize our application by setting up SCSS
    for our Ionic app. We also had a brief look at `$ionicConfigProvider` and saw
    some of its wonderful features. In the next chapter, we will get to learn how
    to create a new type of Ionic app based on the tabs template.
  prefs: []
  type: TYPE_NORMAL
