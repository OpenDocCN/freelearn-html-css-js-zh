["```js\nimport React from 'react';\nimport Head from 'next/head';\nexport default function Home() {\n  return (\n    <>\n      <Head>\n        <title>Homepage (Root zone)</title>\n      </Head>\n      <main>\n        <h1>Root</h1>\n      </main>\n    </>\n  );\n}\n```", "```js\nexport async function getStaticProps() {\n  const jobs = await fetch(\n    'https://apis.camillerakoto.fr/fakejobs/\n      jobs?fulltime=true').then((res) => res.json());\n  return {\n    props: { roles: jobs },\n  };\n}\n```", "```js\nimport React from 'react';\nimport Head from 'next/head';\nexport default function CareersPage({ roles }) {\n  return (\n    <>\n      <Head>\n        <title>Careers (Root zone)</title>\n      </Head>\n      <main>\n        <h1>Careers</h1>\n        <ul>\n          {roles.map((role) => {\n            return (\n              <li key={role.id}>\n                {role.title} ({role.country})\n              </li>\n            );\n          })}\n        </ul>\n      </main>\n    </>\n  );\n}\n```", "```js\nRoute (pages)                              Size     First Load JS\n┌ ○ /                                      430 B          77.7 kB\n├ ○ /404                                   182 B          77.5 kB\n├ λ /api/health                            0 B            77.3 kB\n└ ● /careers                               498 B          77.8 kB\n+ First Load JS shared by all              77.3 kB\n  ├ chunks/framework-4725d5bb117f1d8e.js   45.2 kB\n  ├ chunks/main-7a398668474d4dd1.js        31.1 kB\n  ├ chunks/pages/_app-ecd5712b2c05cb6a.js  195 B\n  └ chunks/webpack-8fa1640cc84ba8fe.js     750 B\nλ  (Server)  server-side renders at runtime (uses getInitialProps or getServerSideProps)\n○  (Static)  automatically rendered as static HTML (uses no initial props)\n●  (SSG)     automatically generated as static HTML + JSON (uses getStaticProps)\n```", "```js\nimport React, { useState } from 'react';\nimport Head from 'next/head';\nexport default function Home() {\n  const [searchResult, setSearchResult] = useState({\n    count: 0,\n    matches: [],\n  });\n  return (\n    <>\n      <Head>\n        <title>Search Page (Search zone)</title>\n      </Head>\n      <main>\n        <h1>Search</h1>\n        <input\n          type=\"search\"\n          onChange={async (event) => {\n            const data = await fetch(\n              `/search/api/search?q=${event.target.value}`\n            ).then((res) => res.json());\n            setSearchResult(data);\n          }}\n        />\n        <div>\n          <h2>Results ({searchResult.count})</h2>\n          {searchResult.matches.map((product) => {\n            return <div key={product.id}>\n              {product.title}</div>;\n          })}\n        </div>\n      </main>\n    </>\n  );\n}\n```", "```js\nexport default async function handler(req, res) {\n  const allProducts = await fetch\n    ('https://fakestoreapi.com/products').then(\n      (res) => res.json()\n  );\n  const { q } = req.query;\n  const searchQuery = Array.isArray(q) ? q[0] : q;\n  const matches = allProducts.filter(\n    (product) =>\n      product.title.includes(searchQuery) ||\n      product.description.includes(searchQuery) ||\n      product.category.includes(searchQuery)\n  );\n  return res.status(200).json({ matches,\n    count: matches.length });\n}\n```", "```js\nmodule.exports = {\n  basePath: '/search',\n};\n```", "```js\nmodule.exports = {\n  async rewrites() {\n    return [\n      {\n        source: '/search/:path*',\n        destination: 'http://localhost:3001/search/:path*',\n      },\n    ];\n  },\n};\n```", "```js\nRoute (pages)                              Size     First Load JS\n┌ ○ /                                      607 B          73.7 kB\n├   └ css/776983a5dfcef528.css             271 B\n├ ○ /404                                   182 B          73.2 kB\n├ λ /api/health                            0 B            73.1 kB\n└ λ /api/search                            0 B            73.1 kB\n+ First Load JS shared by all              73.1 kB\n  ├ chunks/framework-4725d5bb117f1d8e.js   45.2 kB\n  ├ chunks/main-ee0b7fc0f7162449.js        26.9 kB\n  ├ chunks/pages/_app-ecd5712b2c05cb6a.js  195 B\n  └ chunks/webpack-ab5c478f511867a3.js     756 B\nλ  (Server)  server-side renders at runtime (uses getInitialProps or getServerSideProps)\n○  (Static)  automatically rendered as static HTML (uses no initial props)\n```", "```js\nimport React from 'react';\nfunction CartContents(props) {\n  const { cart, productsById } = props;\n  return (\n    <ul>\n      {cart.products.map((product) => {\n        const fullProductInformation = productsById\n          [product.productId];\n        return (\n          <li key={product.productId} className=\n            \"cart-item-product\">\n            <h3 className=\"cart-item-product-name\">\n              {fullProductInformation?.title}\n            </h3>\n            <span className=\"cart-item-product-quantity\">\n              {' '}\n              x {product.quantity}\n            </span>\n            <span className=\"cart-item-product-price\">\n              Price:\n              {(\n                product.quantity *\n                  fullProductInformation?.price)\n                  .toLocaleString('en', {\n                style: 'currency',\n                currency: 'EUR',\n              })}\n            </span>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n```", "```js\n// no change to imports\nfunction CartContents(props) {\n  // no change to the function body\n  return (\n    <ul>\n      {/* no change to `cart.products` mapping */}\n      <li className=\"cart-item-product\">\n        <strong className=\"cart-item-product-price\">\n          Total:\n          {cart.products\n            .reduce((acc, curr) => {\n              const fullProductInformation = productsById\n                [curr.productId];\n              return acc + curr.quantity *\n                fullProductInformation.price;\n            }, 0)\n            .toLocaleString('en', {\n              style: 'currency',\n              currency: 'EUR',\n            })}\n        </strong>\n      </li>\n    </ul>\n  );\n}\n```", "```js\n// no changes to imports\n// no changes to CartContents definition\nexport async function getServerSideProps(ctx) {\n  const { params } = ctx;\n  const cartId = params.id;\n  const cart = await fetch(`https://fakestoreapi.com/carts\n    /${cartId}`).then(\n    (res) => res.json()\n  );\n  if (!cart?.products) {\n    return {\n      props: {\n        id: cartId,\n      },\n    };\n  }\n  const productsById = (\n    await Promise.all(\n      cart.products.map(async (product) => {\n        return await fetch(\n          `https://fakestoreapi.com/products/$\n             {product.productId}`\n        ).then((res) => res.json());\n      })\n    )\n  ).reduce((acc, curr) => {\n    acc[curr.id] = curr;\n    return acc;\n  }, {});\n  return {\n    props: {\n      id: cartId,\n      cart,\n      productsById,\n    },\n  };\n}\n```", "```js\nimport Head from 'next/head';\nimport React from 'react';\n// no changes to CartContents definition\nexport default function GetCartPage({ id, cart, productsById }) {\n  return (\n    <>\n      <Head>\n        <title>GetCartPage (Checkout zone)</title>\n      </Head>\n      <main>\n        <h1>GetCartPage (Checkout zone)</h1>\n        <CartContents cart={cart} productsById=\n          {productsById} />\n      </main>\n    </>\n  );\n}\n// no changes to getServerSideProps definition\n```", "```js\nmodule.exports = {\n  basePath: '/checkout',\n};\n```", "```js\nmodule.exports = {\n  async rewrites() {\n    return [\n      // no change to other entries\n      {\n        source: '/checkout/:path*',\n       destination:'http://localhost:3002/checkout/:path*',\n      },\n    ];\n  },\n};\n```", "```js\nRoute (pages)                              Size     First Load JS\n┌ ○ /                                      445 B          73.5 kB\n├ ○ /404                                   182 B          73.3 kB\n└ λ /cart/[id]                             3.95 kB          77 kB\nλ  (Server)  server-side renders at runtime (uses getInitialProps or getServerSideProps)\n○  (Static)  automatically rendered as static HTML (uses no initial props)\n```", "```js\n<script type=\"importmap\">\n  {\n    \"imports\": {\"@11ty/is-land/is-land.js\":\n      \"https://unpkg.com/@11ty/is-land@4.0.0/is-land.js\",\n      \"htm/preact\": \"https://unpkg.com/htm@3.1.1/\n         preact/index.module.js\",\n      \"htm\": \"https://unpkg.com/htm@3.1.1/dist/htm.mjs\",\n      \"preact\": \"https://unpkg.com/preact@10.15.1/\n         dist/preact.mjs\",\n      \"vue\": \"https://unpkg.com/vue@3.2.36/dist\n        /vue.esm-browser.prod.js\"\n    }\n  }\n</script>\n```", "```js\n<script type=\"module\">\n  import '@11ty/is-land/is-land.js';\n</script>\n```", "```js\n<is-land on:visible>\n  <div id=\"vue-product-island\"></div>\n  <template data-island>\n    <script type=\"module\">\n      import { createApp } from 'vue';\n      createApp({\n        async mounted() {\n          this.loading = true;\n          const product = await fetch(\n            `https://fakestoreapi.com/\n              products/${this.productId}`\n          ).then((res) => res.json());\n          this.product = product;\n          this.loading = false;\n        },\n        data: () => ({\n          productId:\n            new URLSearchParams(window.location.search).\n              get('productId') || '1',\n          loading: true,\n          product: {},\n        }),\n      }).mount('#vue-product-island');\n    </script>\n  </template>\n</is-land>\n```", "```js\n<is-land on:visible>\n  <div id=\"vue-product-island\" class=\"product-container\">\n    <h2 v-text=\"product.title\"></h2>\n    <p v-text=\"product.description\"></p>\n    <p v-cloak>\n      <span\n        v-text=\"product.price?.toLocaleString('en', {\n          style: 'currency', currency: 'EUR'})\"\n      ></span>\n      <br /><span v-text=\"product?.rating?.rate\">\n        </span>/5.0 (<span\n        v-text=\"product?.rating?.count\"\n      ></span\n      >)\n    </p>\n    <img v-bind:src=\"img/product.image\" width=\"320px\"\n      class=\"product-image\" />\n  </div>\n  <style>\n    .product-container {\n      min-height: 100vh;\n      border-bottom: solid 1px black;\n    }\n    [v-cloak] {\n      display: none;\n    }\n  </style>\n  <template data-island>\n    <style>\n      .product-image {\n        min-width: 320px;\n        display: block;\n        margin: auto;\n      }\n    </style>\n    <!-- no change to the script -->\n  </template>\n</is-land>\n```", "```js\n<is-land on:interaction>\n  <div id=\"preact-cart-island\">\n    <button>My Cart</button>\n  </div>\n</is-land>\n```", "```js\n<is-land on:interaction>\n  <div id=\"preact-cart-island\">\n    <button>My Cart</button>\n  </div>\n  <template data-island>\n    <script type=\"module\">\n      import { html, render } from 'htm/preact';\n      import { useState, useEffect } from 'preact/hooks';\n      function CartContents() {\n        // empty for now\n        return null;\n      }\n      function CartContainer(props) {\n        const cartId = props.id ?? 1;\n        const [open, setOpen] = useState(true);\n        const [isLoading, setIsLoading] = useState(false);\n        const [cartContents, setCartContents] = useState({\n          cart: null,\n          productsById: null,\n        });\n        useEffect(async () => {\n          setIsLoading(true);\n          const cart = await fetch(\n            `https://fakestoreapi.com/carts/${cartId}`\n          ).then((res) => res.json());\n          if (!cart?.products) {\n            return {\n              props: {\n                id: cartId,\n              },\n            };\n          }\n          const productsById = (\n            await Promise.all(\n              cart.products.map(async (product) => {\n                return await fetch(\n                   `https://fakestoreapi.com/\n                     products/${product.productId}`\n                ).then((res) => res.json());\n              })\n            )\n          ).reduce((acc, curr) => {\n            acc[curr.id] = curr;\n            return acc;\n          }, {});\n          setCartContents({\n            cart,\n            productsById,\n          });\n          setIsLoading(false);\n        }, [cartId]);\n        const cartItemCount = cartContents?.\n          cart?.products?.length;\n        return html`<div>\n          <button onClick=${() => setOpen(!open)}>\n            My Cart ${cartItemCount !== undefined ? `\n              (${cartItemCount})` : ''}\n          </button>\n          ${open && isLoading && html`<div>\n            Loading...</div>`} ${open &&\n          !isLoading &&\n          cartContents.cart &&\n          cartContents.productsById &&\n          html`<${CartContents}\n            cart=${cartContents.cart}\n            productsById=${cartContents.productsById}\n          />`}\n        </div>`;\n      }\n      const appContainer = document.querySelector\n        ('#preact-cart-island');\n      render(\n        html`<${CartContainer}\n          id=${new URLSearchParams(window.location.search)\n            .get('cartId')}\n        />`,\n        appContainer,\n        appContainer\n      );\n    </script>\n  </template>\n</is-land>\n```", "```js\n<template data-island>\n  <script type=\"module\">\n    import { html, render } from 'htm/preact';\n    // no changes to imports\n    function CartContents(props) {\n      const { cart, productsById } = props;\n      return html`<ul>\n        ${cart.products.map((product) => {\n          const lineItemQueryParams = new URLSearchParams([\n            ['productId', product.productId],\n            ['cartId', cart.id],\n          ]);\n          const fullProductInformation = productsById\n            [product.productId];\n          return html`<li class=\"cart-item-product\"\n            key=${product.productId}>\n            ${html`<a href=${'?' +\n              lineItemQueryParams.toString()}\n              >${fullProductInformation?.title}</a\n            >`}\n            <span class=\"cart-item-product-quantity\"\n              >x ${product.quantity}</span\n            >\n            <span class=\"cart-item-product-price\">\n              Price:${' '}${(\n                product.quantity * fullProductInformation\n              ?.price).toLocaleString(navigator.language, {\n                style: 'currency',\n                currency: 'EUR',\n              })}\n            </span>\n          </li>`;\n        })}\n        <li class=\"cart-item-product\">\n          <strong class=\"cart-item-product-price\">\n            Total:${' '} ${cart.products\n              .reduce((acc, curr) => {\n                const fullProductInformation =\n                   productsById[curr.productId];\n                return acc + curr.quantity *\n                  fullProductInformation.price;\n              }, 0)\n              .toLocaleString(navigator.language, {\n                style: 'currency',\n                currency: 'EUR',\n              })}\n          </strong>\n        </li>\n      </ul> `;\n    }\n    // no changes to CartContainer component\n  </script>\n</template>\n```", "```js\n<is-land on:visible on:idle id=\"related-products-island-wrapper\">\n  <template data-island=\"\">\n    <script type=\"module\">\n      import { html } from 'htm/preact';\n      function RelatedProducts({ selectedProductId,\n        category, from }) {\n        return html`<div>\n          <h3>Related Products (from ${from})</h3>\n        </div>`;\n      }\n    </script>\n  </template>\n</is-land>\n```", "```js\n<is-land on:visible on:idle id=\"related-products-island-wrapper\">\n  <template data-island=\"\">\n    <script type=\"module\">\n      // no changes to other imports\n      import { useState, useEffect } from 'preact/hooks';\n      function RelatedProducts({ selectedProductId,\n        category, from }) {\n        const [relatedProducts, setRelatedProducts] =\n          useState([]);\n        useEffect(async () => {\n          const productsInCategory = await fetch(\n            `https://fakestoreapi.com/products/category/$\n              {encodeURIComponent(\n              category\n            )}`\n          ).then((res) => res.json());\n          const topRelatedProductsByRating =\n             productsInCategory\n            .filter((el) => {\n              return el.id !== parseInt(selectedProductId,\n                10);\n            })\n            .sort((a, b) => b.rating.rate – a.rating.rate);\n          setRelatedProducts\n            (topRelatedProductsByRating.slice(0, 3));\n        }, [selectedProductId, category]);\n        // no change to returned template\n      }\n    </script>\n  </template>\n</is-land>\n```", "```js\n<is-land on:visible on:idle id=\"related-products-island-wrapper\">\n  <template data-island=\"\">\n    <script type=\"module\">\n      // no changes to imports\n      function RelatedProducts({ selectedProductId,\n        category, from }) {\n        const [relatedProducts, setRelatedProducts] =\n          useState([]);\n        // no change to useEffect\n        return html`<div>\n          <h3>Related Products (from ${from})</h3>\n          <ul class=\"related-product-card-row\">\n            ${relatedProducts.map((product) => {\n              const productSearchParams = new\n                URLSearchParams([\n                ['productId', product.id],\n              ]);\n              const currentCartId = new URLSearchParams(\n                window.location.search\n              ).get('cartId');\n              if (currentCartId) {\n                productSearchParams.set('cartId',\n                  currentCartId);\n              }\n              return html`<li class=\"related-product-card\">\n                <a href=${'?' + productSearchParams\n                  .toString()}>\n                  <h4>${product.title}</h4>\n                  <p>\n                    ${product.price.toLocaleString\n                      (navigator.language, {\n                      style: 'currency',\n                      currency: 'EUR',\n                    })}\n                  </p>\n                  <img height=\"100px\" src=${product.image} />\n                  <p>${product.rating.rate}/5.0\n                    (${product.rating.count})</p>\n                </a>\n              </li>`;\n            })}\n          </ul>\n        </div>`;\n      }\n    </script>\n  </template>\n</is-land>\n```", "```js\n<is-land on:visible on:idle id=\"related-products-island-wrapper\">\n  <div id=\"preact-related-products-island\">\n    <h3>Related Products</h3>\n    <div class=\"related-product-card-row\">Loading...</div>\n  </div>\n  <template data-island=\"\">\n    <script type=\"module\">\n      import { html, render } from 'htm/preact';\n      // no change to preact/hooks import or\n         RelatedProducts\n      const relatedProductsIslandContainer =\n        document.querySelector(\n        '#preact-related-products-island'\n      );\n      function mountRelatedProductsIsland(\n        relatedProductsIslandContainer,\n        category,\n        selectedProductId,\n        from\n      ) {\n        if (category && selectedProductId) {\n          render(\n            html`<${RelatedProducts}\n              category=${category}\n              selectedProductId=${selectedProductId}\n              from=${from}\n            />`,\n            relatedProductsIslandContainer,\n            relatedProductsIslandContainer\n          );\n        }\n      }\n      document.addEventListener('product-category-load',\n        (event) => {\n        const category = event.detail.category;\n        const selectedProductId = event.detail.\n          selectedProductId;\n        mountRelatedProductsIsland(\n          relatedProductsIslandContainer,\n          category,\n          selectedProductId,\n          'custom-event'\n        );\n      });\n    </script>\n  </template>\n</is-land>\n```", "```js\n<script type=\"module\">\n  import { createApp } from 'vue';\n  createApp({\n    async mounted() {\n      // no changes\n      document.dispatchEvent(\n        new CustomEvent('product-category-load', {\n          detail: {\n            category: this.product.category,\n            selectedProductId: this.product.id,\n          },\n        })\n      );\n    },\n    // no changes to other properties\n  });\n</script>\n```", "```js\n<script>\n  document.addEventListener('product-category-load',\n    (event) => {\n    const category = event.detail.category;\n    const selectedProductId = event.detail.\n      selectedProductId;\n    Object.assign(\n      document.querySelector('#related-products-island-\n        wrapper').dataset,\n      { category, selectedProductId }\n    );\n  });\n</script>\n```", "```js\n<is-land on:visible on:idle id=\"related-products-island-wrapper\">\n  <!-- no changes to template -->\n  <script type=\"module\">\n    // no changes to the rest of the code\n    const { selectedProductId, category } =\n      document.querySelector(\n      '#related-products-island-wrapper'\n    ).dataset;\n    mountRelatedProductsIsland(\n      relatedProductsIslandContainer,\n      category,\n      selectedProductId,\n      'data-*'\n    );\n  </script>\n</is-land>\n```", "```js\nnpx esbuild ./src/preact-cart-island.jsx --jsx-import-source=preact --jsx=automatic --bundle --outdir=dist --format=esm --minify\nnpx esbuild ./src/vue-product-island.js --alias:vue=vue/dist/vue.esm-bundler.js --bundle --outdir=dist --format=esm --minify\nnpx esbuild ./src/preact-related-products-island.jsx --jsx-import-source=preact --jsx=automatic --bundle --outdir=dist --format=esm --minify\n```", "```js\n<script type=\"module\" src=\"./dist/\n   preact-cart-island.js\"></script>\n<script type=\"module\" src=\"./dist/\n  vue-product-island.js\"></script>\n<script type=\"module\">\n  import { mountRelatedProductsIsland } from './dist/\n    preact-related-products-island.js';\n  // use mountRelatedProductsIsland\n</script>\n```"]