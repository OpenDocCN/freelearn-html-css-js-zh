["```js\nnpm install -g grunt-cli\n\n```", "```js\nGruntfile.js file:\n```", "```js\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    concat:{\n    }\n  });\n  grunt.registerTask('default', ['concat']);\n}\n```", "```js\npackage.json file should look like:\n```", "```js\n{\n  \"name\": \"GruntjsTest\",\n  \"version\": \"0.0.1\",\n  \"description\": \"GruntjsTest\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"grunt-contrib-concat\": \"0.3.0\"\n  }\n}\n```", "```js\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    concat: {\n      javascript: {\n        src: 'src/**/*.js',\n        dest: 'build/scripts.js'\n      }\n    }\n  });\n  grunt.loadNpmTasks('grunt-contrib-concat');\n  grunt.registerTask('default', ['concat']);\n}\n```", "```js\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    concat: {\n      javascript: {\n        options: {\n          process: function(src, filepath) {\n            return '// Source: ' + filepath + '\\n' + src;\n          }\n        },\n        src: 'src/**/*.js',\n        dest: 'build/scripts.js'\n      }\n    }\n  });\n  grunt.loadNpmTasks('grunt-contrib-concat');\n  grunt.registerTask('default', ['concat']);\n}\n```", "```js\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    concat: {\n      javascript: {\n        options: {\n          process: function(src, filepath) {\n            return '// Source: ' + filepath + '\\n' + src;\n          }\n        },\n        src: 'src/**/*.js',\n        dest: 'build/scripts.js'\n      }\n    },\n    uglify: {\n      javascript: {\n        files: {\n          'build/scripts.min.js': '<%= concat.javascript.dest %>'\n        }\n      }\n    }\n  });\n  grunt.loadNpmTasks('grunt-contrib-concat');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.registerTask('default', ['concat', 'uglify']);\n}\n```", "```js\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    concat: {\n      javascript: {\n        options: {\n          process: function(src, filepath) {\n            return '// Source: ' + filepath + '\\n' + src;\n          }\n        },\n        src: 'src/**/*.js',\n        dest: 'build/scripts.js'\n      }\n    },\n    uglify: {\n      javascript: {\n        files: {\n          'build/scripts.min.js': '<%= concat.javascript.dest %>'\n        }\n      }\n    },\n    watch: {\n      javascript: {\n        files: ['<%= concat.javascript.src %>'],\n        tasks: ['concat:javascript', 'uglify']\n      }\n    }\n  });\n  grunt.loadNpmTasks('grunt-contrib-concat');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.registerTask('default', ['concat', 'uglify', 'watch']);\n}\n```", "```js\nconcat: {\n  javascript: {\n    options: {\n      process: function(src, filepath) {\n        return '// Source: ' + filepath + '\\n' + src;\n      }\n    },\n    src: ['src/**/*.js', '!src/lib/D.js'],\n    dest: 'build/scripts.js'\n  }\n}\n```", "```js\ngrunt.loadNpmTasks('grunt-contrib-concat');\ngrunt.loadNpmTasks('grunt-contrib-uglify');\ngrunt.loadNpmTasks('grunt-contrib-watch');\ngrunt.loadTasks('custom');\n```", "```js\ngrunt.registerTask('default', ['concat', 'uglify', 'jssize', 'watch']);\n```", "```js\njssize: {\n  javascript: {\n    check: 'build/scripts.js',\n    dest: 'build/size.log'\n  }\n}\n```", "```js\nvar fs = require('fs');\nmodule.exports = function(grunt) {\n    grunt.registerMultiTask('jssize', 'Checks the JavaScript file size', function() {\n        var fileToCheck = this.data.check;\n        var destination = this.data.dest;\n        var stat = fs.statSync(fileToCheck);\n        var result = 'Filesize of ' + fileToCheck + ': ';\n        result += stat.size + 'bytes';\n        grunt.file.write(destination, result);\n    });\n};\n```", "```js\n'generate-manifest': {\n  manifest: {\n    dest: 'cache.manifest',\n    files: [\n      'build/*.js',\n      'css/styles.css',\n      'img/*.*'\n    ]\n  }\n}\n```", "```js\ngrunt.registerTask('default', ['concat', 'uglify', 'jssize', 'generate-manifest', 'watch']);\n```", "```js\nmodule.exports = function(grunt) {\n    grunt.registerMultiTask('generate-manifest', 'Generate manifest file', function() {\n\n        var content = '',\n          self = this,\n          d = new Date();\n\n        content += 'CACHE MANIFEST\\n';\n        content += '# created on: ' + d.toString() + '\\n';\n        content += '# id: ' + Math.floor((Math.random()*1000000000)+1) + '\\n';\n\n        var files = grunt.file.expand(this.data.files);\n        for(var i=0; i<files.length; i++) {\n            content += '/' + files[i] + '\\n';\n        }\n        grunt.file.write(this.data.dest, content, {});\n\n    });\n};\n```", "```js\n<html manifest=\"cache.appcache\">\n```", "```js\nCACHE MANIFEST\n# created on: Fri Feb 14 2014 23:40:46 GMT+0200 (FLE Standard Time)\n# id: 585038007\n/build/scripts.js\n/build/scripts.min.js\n/css/styles.css\n/img/A.png\n/img/B.png\n/img/C.png\n```", "```js\nyuidoc: {\n  compile: {\n    name: 'Project',\n    description: 'Description',\n    options: {\n      paths: 'src/',\n      outdir: 'docs/'\n    }\n  }\n}\n...\ngrunt.registerTask('default', ['concat', 'uglify', 'jssize', 'generate-manifest', 'yuidoc', 'watch']);\n```", "```js\n/**\n* This is the description for my class.\n*\n* @class A\n*/\nvar A = {\n  /**\n  * My method description. Like other pieces of your comment blocks,\n  * this can span multiple lines.\n  *\n  * @method method\n  */\n  method: function() {\n\n  }\n};\n```", "```js\nnpm install -g gulp\n\n```", "```js\n{\n  \"name\": \"GulpTest\",\n  \"version\": \"0.0.1\",\n  \"description\": \"GulpTest\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"gulp\": \"3.5.2\",\n    \"gulp-concat\": \"2.1.7\",\n    \"gulp-uglify\": \"0.2.0\",\n    \"gulp-rename\": \"1.0.0\"\n  }\n}\n```", "```js\nvar gulp = require('gulp');\nvar concat = require('gulp-concat');\nvar uglify = require('gulp-uglify');\nvar rename = require('gulp-rename');\ngulp.task('js', function() {\n  gulp.src('./src/**/*.js')\n  .pipe(concat('scripts.js'))\n  .pipe(gulp.dest('./build/'))\n  .pipe(rename({suffix: '.min'}))\n  .pipe(uglify())\n  .pipe(gulp.dest('./build/'))\n});\n\ngulp.task('watchers', function() {\n  gulp.watch('src/**/*.js', ['js']);\n});\n\ngulp.task('default', ['js', 'watchers']);\n```", "```js\n{\n  \"name\": \"GulpTest\",\n  \"version\": \"0.0.1\",\n  \"description\": \"GulpTest\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"gulp\": \"3.5.2\",\n    \"gulp-concat\": \"2.1.7\",\n    \"gulp-uglify\": \"0.2.0\",\n    \"gulp-rename\": \"1.0.0\",\n    \"through2\": \"0.4.1\"\n  }\n}\n```", "```js\nvar jssize = require('./custom/jssize');\n```", "```js\ngulp.task('js', function() {\n  gulp.src('./src/**/*.js')\n  .pipe(concat('scripts.js'))\n  .pipe(gulp.dest('./build/'))\n  .pipe(jssize())\n  .pipe(rename({suffix: '.min'}))\n  .pipe(uglify())\n  .pipe(gulp.dest('./build/'));\n});\n```", "```js\nvar through2 = require('through2');\nvar path = require('path');\nvar fs = require(\"fs\");\nmodule.exports = function () {\n    function transform (file, enc, next) {\n        var stat = fs.statSync(file.path);\n        var result = 'Filesize of ' + path.basename(file.path) + ': ';\n        result += stat.size + 'bytes';\n        fs.writeFileSync(__dirname + '/../build/size.log', result);\n        this.push(file);\n        next();\n    }\n    return through2.obj(transform);\n};\n```"]