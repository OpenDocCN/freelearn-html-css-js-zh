- en: Building the Real Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered the basic components that we need to have knowledge of in order
    to build a full-stack JavaScript application. From this point on, we will work
    on building a whole web application using all of these technologies.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be building a movie rating application that will have the following
    features throughout this book:'
  prefs: []
  type: TYPE_NORMAL
- en: A home page that lists all the movies with other attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There will be an admin section where the administrator will be able to add movies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user will be able to log in and sign up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user will be able to rate a movie
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There will be a movie profile section where the logged-in user can rate the
    movie
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Vue.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue.js is an open source, progressive JavaScript framework for building user
    interfaces. The rise of new JavaScript frameworks has been tremendous. With such
    growth, you might get confused about where to get started and how. There are hundreds
    of JavaScript frameworks today; among them, there are dozens of frameworks that
    stood out. But still, to choose from those dozens might be a daunting task.
  prefs: []
  type: TYPE_NORMAL
- en: There are quite a few popular frameworks today, such as React, Ember, and Angular.
    While these frameworks have their own advantages, there are some limitations to
    them as well. While building an application with React or Angular is good in itself,
    Vue.js helps eliminate some of the limitations associated with these frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js is **progressive.** With Vue.js, you can start with small and then progress
    gradually toward building bigger applications. This means that if you are just
    starting out, you might want to start with a very small application and scale
    slowly. Vue.js is perfect for such applications. It is lightweight and flexible
    as well. The learning curve is also very easy and super easy to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js was invented by Evan You. It was first released in February 2014 and
    gained huge popularity around 2016\. He used to work for Google and in Angular
    projects. The motivation for this invention was mainly because he didn't want
    to use Angular for small projects, since Angular provides a lot of packages out
    of the box and, hence, is not lightweight and not suitable for small applications.
    Having said that, Vue.js does not only target the smaller applications. It definitely
    does not provide all the packages with it, but you can add them as you progress
    with your application. That is the beauty of Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Vue.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get started with the installation of Vue.js. There are three ways to install
    and use Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: Including it in a script tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The easiest way to use Vue.js is to download it and include it in your `script`
    tag. You can download it from [https://cdn.jsdelivr.net/npm/vue](https://cdn.jsdelivr.net/npm/vue):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Using Content Delivery Network (CDN) links directly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CDN is a network of distributed servers. It stores the cached version of contents
    in different geographical locations so that the content loads faster when fetched.
    We can use the CDN link directly in our `script` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Using Vue.js as an npm package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`npm` also has a package for `vue`, which can be installed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Introducing vue-cli
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CLI stands for Command Line Interface. A `cli` runs one or multiple commands
    successively in a command line interface. Vue.js also has a `cli` which, when
    installed, makes it super easy to spin up a project. We will be using a `vue-cli`
    in this book to create the Vue.js application. Let''s install `vue-cli` with the
    following command. You can execute this command in your root folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Initializing projects with vue-cli
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go ahead with creating a new project folder for our movie rating application.
    We will call it `movie_rating_app`. Go to the directory where you want to create
    your application in the Terminal and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command initializes an application with all the dependencies
    that a Vue.js project requires. It will ask you a few questions about the project
    setup, to which you can answer either *y*, as in *yes*, or *n*, as in *no*:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vue build**: You will find two options to build the Vue.js app: runtime +
    compiler, or runtime Only. This has to do with the template compiler:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runtime only**: The runtime option is used to create the `vue` instances.
    This option does not include the template compiler.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runtime + compiler**: This option includes the template compiler, which means
    the `vue` templates are compiled to the plain JavaScript render functions.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vue-router**:Vue-router is the official router for Vue.js applications. This
    option is specially used when we want to make our application a **Single Page
    Application** (**SPA**). When using this option, the application makes all the
    necessary requests one time when the page initially loads and sends requests to
    the server when new data is needed. We will be talking more about Single Page
    and Multi-Page applications in future chapters as well. For now, we will be using
    the Vue-router.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ESLint**:ESLint is a JavaScript linter tool. It is a static code analysis
    tool used to find the errors or the mistakes in the code. It basically makes sure
    that the code follows the standard guidelines. There are two options for choosing
    the ESLint from as well: standard linting or the Airbnb linting. We will be going
    with Airbnb for this project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Setup test**:By setting up tests, the project creates a wrapper for the tests
    that we will be writing for our application. It creates the necessary structure
    and configuration for the tests codes to be able to be run. We will be using this
    option as well. For the test runner, we will be using Mocha and Karma, and for
    the end to end testing, we will be using Nightwatch, which we will learn about
    in further chapters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependency management**: Lastly, to manage the packages and the dependencies,
    here we have two options: `npm` and `Yarn`. We mostly talked about `npm` in previous
    chapters. `Yarn` is also a dependency management tool just like `npm`. Both Yarn
    and `npm` have their own benefits, but for this application, we are going to use
    `npm`. You can learn more about Yarn here ([https://yarnpkg.com/en/](https://yarnpkg.com/en/)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This will take some time as it will install all the dependencies. Here are
    the options that we selected for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e962ace9-cf14-44e2-b418-2df63afde539.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the command is successfully executed, you should be able to see the further
    steps on your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6eccf577-1893-40fd-8534-571db89ed658.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If the build is successful, we will be able to see the preceding output. Now,
    let''s do as it says in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will start your application. The default port of the Vue.js application
    is 8080\. As you can see in your Terminal, it should say:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/027b2d37-1812-46ce-8cec-66e218227acb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the browser and open the URL `http://localhost:8080/#/`, and we should
    be able to see our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ca9be13-5227-4432-910a-912a0037985a.png)'
  prefs: []
  type: TYPE_IMG
- en: Great job! That was super easy. You have successfully created and run a Vue.js
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Project folder structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, if you have noticed, `vue-cli` commands add a bunch of dependencies to
    your application, which is listed in the `package.json` file. The `cli` command
    also sets up a folder structure that you can customize to your needs as well.
    Let''s review and understand the structure that the `cli` has made for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ae64fa6-aa4e-4d02-87af-7244b258abf5.png)'
  prefs: []
  type: TYPE_IMG
- en: '`build` folder: This folder contains the `webpack` configuration files for
    different environments: development, test, and production'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config` folder: All the configurations of the application would go here'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`node_modules`: All the `npm` packages that we install reside in this folder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`src`:  This folder contains all the files related to rendering the components
    in the browser:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assets`: You can add your CSS and images for your application inside this
    folder.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`components`: This folder will house all the frontend rendering files that
    will have a `.vue` extension.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`router`: This folder will take care of all the URL routes for different pages
    throughout the application.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`App.vue`: You can think of `App.vue` as the main component for rendering the
    view files. Other files will extend the layout defined on this file to create
    different views.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main.js`: This is the main entry point for any Vue.js application.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Static`: You can use this folder as well to keep your static files, such as
    CSS and images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Test`: This folder will be used to handle all the tests written for our application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a static application with Vue.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have initialized a project, let's move ahead with creating a static
    web application. Don't forget to make a repository on GitHub and commit and push
    changes regularly.
  prefs: []
  type: TYPE_NORMAL
- en: When you visit the URL `http://localhost:8080/#/`, you will see a default page
    rendered.  This piece of code is written in `src/components/HelloWorld.vue`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look into `build/webpack.base.conf.js`, you will see this line of code
    in the `module.exports` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This means, when you run the app, this `main.js` will be the entry point for
    the app. Everything will start from there. Let''s have a quick look at that `main.js`
    file inside `src`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The first three lines import the necessary packages required for this app to
    run. `App.vue` is the main template layout for this app. All other `.vue` files
    will extend this layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'The bottom block defines which component to render when you run the app. In
    this case, this is telling our app to take the template `<App>` and render it
    inside the `#app` element.  Now, if we look into `App.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here we have the template that has a `div` element with an ID `#app`. It means
    that the `vue` templates that we create will get rendered in this.
  prefs: []
  type: TYPE_NORMAL
- en: Redefining the home page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s make our own view page for the home. For this, we can just modify the
    `HelloWorld.vue` component. The `.vue` file should always start with a template.
    Hence, a basic template for this file is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can also include your style sheets and JavaScript codes definitions in this
    page, but it will be much cleaner if we separate these out somewhere else.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s remove everything from `HelloWorld.vue` and add these lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We also don''t need a Vue.js logo, so let''s delete that as well from `src/assets` and
    the line of code in `App.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you revisit the URL `http://localhost:8080/#/`, you will see `Hello
    World` rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3ba6aec-edc9-4c60-ad26-712c12a42a34.png)'
  prefs: []
  type: TYPE_IMG
- en: Segregating CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Time for segregating CSS. Let''s create a folder inside the `src/assets` folder
    called `stylesheets` and add a `main.css` file. Add the following line of code
    in `main.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `main.css` will be our main CSS file that includes all other CSS components.
    We can directly add all our style code here as well. But to maintain readability,
    we will be creating separate style sheets for different sections in our applications
    and importing them here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we will be importing all the style sheets here, now we need to include
    only the `main.css` file in the main application so that it gets loaded. To do
    that, let''s add the following line of code in `src/App.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We have imported a style sheet called `home.css` in `main.css` that does not
    yet exist. So let''s go ahead and create that in the same directory, which is `src/assets`.
    Also, let''s remove the following piece of code from `App.vue` and paste it into
    the `home.css` file: so that our component is clean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Introduction to Vuetify
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vuetify is a module that can be used to build materialistic web page designs
    for Vue.js applications. It provides several features that can be used as building
    blocks for our application. It is a UI framework like Bootstrap, but it mostly
    has the material components. For more details, you can go to this link [https://vuetifyjs.com](https://vuetifyjs.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using both Vuetify and Bootstrap combined when building the application. 
    The first step is to install the packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'After these get installed, the next thing we need to do is require these packages
    in our main file. So, in the `src/main.js` file, add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to use `vuetify.css`, which holds all the style sheets related
    to its design. We will need this as well. We can just simply link a style sheet
    for this. In the `index.html` file, add the following lines of code in your `head`
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Vuetify uses material icons well, so also import the fonts. Add the following
    line of code in `index.html` as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Redesigning pages with Vuetify
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have Vuetify, let's move on to creating the pages for the application.
    provides us with some predefined themes as well. We will use a very simple and
    minimalistic theme for the app. Of course, we can also customize these according
    to our needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The outcome of this section will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9116e70e-d17b-43e5-a7dc-09da33118cde.png)'
  prefs: []
  type: TYPE_IMG
- en: Redesigning the home page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our `App.vue`, replace the file content with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This contains several tags that mostly start with `v-`. These are the tags given
    by Vuetify to define our blocks in UI. We have attached a `stylesheet` file with
    the preceding file called `main.css`. Let's add some styling to our `App.vue` page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to `src/assets/stylesheets/home.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We still have a `div` section with an ID app in it. This is the section where
    all our other `.vue` files will get rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in `HelloWorld.vue`, replace the content with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you visit `http://localhost:8080/#/`, you should be able to view the
    home page.
  prefs: []
  type: TYPE_NORMAL
- en: Redesigning the contact page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go ahead with adding a new contact page. The first thing to do is add
    a route to our routes file. In `router/index.js`, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'What we did here is add a path for the contact page, the name of the component,
    which we did in our export module in the `.vue` file, and the actual name of the
    component. Now we need to build a view file. So let''s create a `Contact.vue` file
    in `src/components/` and add the following content to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now, visit `http://localhost:8080/#/contact` and you should be able to view
    both pages.
  prefs: []
  type: TYPE_NORMAL
- en: To make it usable and easily readable for our app, let's rename the `HelloWorld` component
    to the `Home` component. Rename the file `HelloWorld.vue` to `Home.vue`
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, change the binding route from `HelloWorld` to `Home` in `App.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `routes/index.js` as well, change the component name and the route to `Home` from `HelloWorld`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We should be able to see something like this when we visit the URL `http://localhost:8080/#/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a2bd1e8-a96b-49c0-95d8-499db0a047bd.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it. You have successfully created a basic static two-page web application!
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Vue.js components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `vue` components are equivalent to the HTML files that you write in an application.
    You can write the plain HTML syntax in `.vue` files. The only thing that needs
    to be taken care of is to wrap all the content with `<template></template>`.
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Directives are used with a markup language to perform some functions on the
    DOM elements. For example, in HTML markup language, when we write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `class` used here is a directive for HTML language. Similarly, Vue.js also
    provides a lot of such directives to make application development easier, such
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`v-text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v-on`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v-ref`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v-show`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v-pre`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v-transition`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v-for`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: v-text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use `v-text` when you want to display some variables that you have
    to define dynamically. Let''s see with an example. In `src/components/Home.vue`,
    let''s add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The code inside the script tag is a data variable, which binds the data defined
    inside it to this component. When you change the value of that variable message,
    the `div` element with that directive also gets updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we visit the URL (`http://localhost:8080/#/`), we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e7c450c-8772-441e-a681-a4e8e7392069.png)'
  prefs: []
  type: TYPE_IMG
- en: v-on
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This directive is used for event handling. We can use this to trigger some
    logic in your application. For example, let''s say we want to reply to a question
    that we did in the last example, for that we can do the following. Change the
    code in `src/components/Home.vue` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The first screen will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7d00360-1b89-4930-b816-754317639f37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click REPLY, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5cdf10ea-add8-45db-b66f-8ca237115802.png)'
  prefs: []
  type: TYPE_IMG
- en: These are the directives that we will be using mostly in our app. There are
    a lot more other directives as well that we will explore on the way. If you want
    to learn more about each of these, you can visit `https://012.vuejs.org/api/directives.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Data binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Data binding** is the process of synchronizing data. For example, for the
    same example for what we did on `v-text`, we can do it with data binding with
    the mustaches, in other words using the `{{}}` operators.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can use the `{{message}}` instead of using the Vue.js directive
    for the message. Let''s change the code in `src/components/Home.vue` to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This will behave the same way as what we did with `v-text`.
  prefs: []
  type: TYPE_NORMAL
- en: Handling forms with Vue.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a basic idea of how Vue.js works, let's roll ahead with our
    first form, where we will be adding the details of movies and displaying those
    movies in the home page so that  users can view them.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a movies listing page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, let''s start with creating static movie cards for our home page
    and we will make this data dynamic in the next step. In `Home.vue`, replace the
    content inside `template` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, replace the content in `home.css` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, in `App.vue`, replace the content with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, replace the content in `src/main.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, we should have a page like this on the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ca9ae33-37ba-4cb9-8cce-8760481f572b.png)'
  prefs: []
  type: TYPE_IMG
- en: We will be making these pages dynamic as we go.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Add movie form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to add a link that takes us to a form to add the movies. For
    that, we need to change the toolbar in `App.vue`.  So, let''s add a link to the
    toolbar in `App.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the link, we need to add a route to link it to the page. Just
    like we did for our `Contact` page, let''s add a route that will be used to add
    movies to our application. So, in `routes/index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Here, we added a route for `AddMovie`, which now means that we can access the
    add movie page at `http://localhost:8080/#/movies/add`.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we need to do now is to create the `vue` component file. For
    that, let's add a new `AddMovie.vue` file in `src/components`. Vuetify provides
    a very simple way to create forms and add validations as well. You can look for
    more information at [https://vuetifyjs.com/components/forms](https://vuetifyjs.com/components/forms).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the following content to `src/components/AddMovie.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Vuetify also provides some basic validations to the form. Let's add some validation
    to it as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to `AddMovie.vue` inside the `script` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'If we look into the form element in `AddMovie.vue`, the line that says:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: What `v-model="valid"` part does here is, it makes sure the form does not get
    submitted until it is true, which again ties back to the script that we have added
    in the bottom. Also, let's look into the validations that we have added to the
    form.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first basic validation is the `required` validation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This adds a `required` validation in the `name` field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, for the `release_year` field, we want it to be a dropdown of years, so,
    for that, we have added the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This adds items to the select list dynamically through the script.
  prefs: []
  type: TYPE_NORMAL
- en: As regards the last part, we have two buttons `Submit` and `Clear`, which call
    the methods `submit() `and `clear()`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you should have a form like this when you visit the URL (`http://localhost:8080/#/movies/add`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51c30522-e0d2-4cb9-986b-ad482a9382be.png)'
  prefs: []
  type: TYPE_IMG
- en: The `*` in the **Movie Name** denotes that it is a required field.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have noticed, we have been adding a `#` to all the routes that we have
    added. That is because it is the default setting for the Vue.js router. We can
    remove that by adding `mode: ''history''` in `routes/index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can all route without adding the `#` in the URL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8080/contact`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8080/movies/add`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicating with servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have a movie listing page, we have an add movie page, so the next thing
    we have to do is save the data into the MongoDB when we submit the form.
  prefs: []
  type: TYPE_NORMAL
- en: Adding express to our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have all the components in place, it's time to add the server layer
    to our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by adding the express package with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The next part is to create the necessary endpoints and models so that we can
    add the movies to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, we first need to install the required packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '`body-parser`: To parse the incoming  requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cors`: To handle cross-origin requests between frontend and backend'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`morgan`: HTTP request logger'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mongoose`: Object modeling for MongoDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s install all of these packages by running the following command in the
    Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Adding a server file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we need to set up the server for our application. Let''s add a file called `server.js` in
    the root of the application and add the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have set up a server that tells the express server to run on the 8081
    port. We will be using this server to handle all the API requests via express.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we have required and used all the packages that we need in this `server.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, for the mongoose connection, we have added a connection to our local
    database called `movie_rating_app` with the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: As I mentioned earlier, if the database does not exist yet, it will automatically
    get created when we add our very first Mongoose document to the DB.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next thing is to run our MongoDB server. Let''s do that by running the
    following command in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the Mongo server is up, let''s spin up our `node` server for this application
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we open `http://localhost:8081/`, you should be able to see the following
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51654a80-e1f1-452d-84aa-559b4711e2e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Until now, we have our frontend server up and running on port 8080 with the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The backend server running on port 8081 with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'One important thing to remember is that whenever we change the code in `server.js`,
    we have to restart the server by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a very tedious task. However, there is one good way to get rid of that.
    There is a package called `nodemon`, which, when installed, restarts the server
    automatically whenever the code gets updated and we don''t have to do it manually
    every time. So, let''s go ahead and install the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'With the package installed, now we can start our server with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Adding a Movie model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next thing is to add the movies to the database when we submit the form.
    Let''s go ahead and create a folder called `models` in the root directory and
    add a `Movie.js` file in the `models` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: We will be using singular capitalized names for Models, and all lowercase plural
    names for `Controllers` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code into the `Movie.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have created a Movie model that would take all the four attributes
    that we have added to our `AddMovie.vue` form earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Adding movies controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, the last thing we need to set up is an endpoint to save the movie to the
    database. Let''s create a folder called `controllers` in the root directory and
    add a file called `movies.js` inside the directory and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Here we have added an endpoint that takes the post requests with the given params
    and creates a Mongoose document in the database that we have configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since these controllers have the routes, we need to include these files in
    our main entry point as well. For our backend, the main entry file is `server.js`.
    So, let''s add the following highlighted code block in `server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: This code block will include all our controllers' files and we don't have to
    add each of them manually.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting frontend and backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we have the model and an endpoint. The next thing to do is to call this
    endpoint when we hit the Submit button in `AddMovie.vue`.
  prefs: []
  type: TYPE_NORMAL
- en: This is the part where we need to communicate the frontend and the backend.
    For this, we need to use a separate package called axios.
  prefs: []
  type: TYPE_NORMAL
- en: The axios package helps us to make the HTTP requests from the Node.js. It helps
    to make the Ajax calls from the frontend. There are several alternatives for axios
    as well, such as fetch, and superagent. But axios has been successful enough to
    become the most popular among these. So we will be using the same as well.
  prefs: []
  type: TYPE_NORMAL
- en: Installing axios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, in order to communicate between the client and the server, we will be
    using the `axios` library. So, let''s install the library first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Connecting all the pieces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we have all the things in place (movie model, movies controller, and axios)
    to communicate between the client and server. The last thing to do now is to connect
    these pieces when we click the submit button in the Movie Add form. If you remember,
    we added a placeholder before while submitting the button in `AddMovie.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'This code tells us to execute the `submit()` method when the button is clicked.
    We also have it in the `script` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'All the methods that we will have will be added in this section. Now that we
    have our placeholder for `submit`, let''s modify this piece of code to incorporate
    the Movie Add form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: This should suffice. Now, let's go ahead and add a movie from the UI itself
    from the `http://localhost:8080/movies/add` endpoint. We should be able to save
    a movie's record in the MongoDB. Let me explain what we did here a little bit.
  prefs: []
  type: TYPE_NORMAL
- en: When we hit the `Submit` button, we made an AJAX request via axios to hit the
    post endpoint in the movies controller. The `post` method in movies controller,
    in turn, saves the record with the parameters that we gave according to the model
    schema we designed for the movies. And, when the process is complete, redirect
    the page back to the homepage.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether the record was actually created or not, let''s look into MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the record being created with the parameters we provided in the
    form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6be4e4e-6ffe-48c6-93ac-e9483534f9d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding form validations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We covered how to add the validations in the previous section as well. Let''s
    go ahead and add a few validations to our movie add form. We will add the following
    validations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Movie Name` cannot be empty'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Movie Description` is optional'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Movie Release Year` cannot be blank'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The genre of the movie will be required and will be maxed to 80 characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `AddMovie.vue`, let''s add the rules in input fields and bind the rules
    from the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we try to submit the form with all the fields blank, and the field `Movie
    Genre` with more than 80 characters, we should not be able to submit the form.
    The form will display these error messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b45e3b2c-8263-47e3-b40d-c0554d70fddb.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a flash message
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have covered the basics of app building. Now that we can add a movie, what
    would be really nice is to have a certain message when the movie is saved successfully
    in the DB or notify if something goes wrong. There are several `npm` packages
    to do just that. We can also build our own as well. For this application, we will
    be using a package called: `vue-swal(https://www.npmjs.com/package/vue-swal)`.
    Let''s add the package first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s include the package in our `main.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s modify our `AddMovie.vue` to display the flash message when the
    action is performed successfully or when it fails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, with this, when we submit a movie, we should be able to see a success
    message before redirecting to the homepage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e379a65e-69c5-4a66-931b-ce8bf96ff61f.png)'
  prefs: []
  type: TYPE_IMG
- en: There are also several other packages for the message alerting, such as `vue-flash`,
    `vuex-flash`, and `sweet-alert`.
  prefs: []
  type: TYPE_NORMAL
- en: Loading dynamic content on the homepage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, our homepage has all the static movies in the content. Let's fill
    the data with the data that we have added to the movies in our database. For that,
    the first thing to do is to add a few movies to the database, which we can do
    via the `http://localhost:8080/movies/add` endpoint from the UI.
  prefs: []
  type: TYPE_NORMAL
- en: API endpoint to fetch all movies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to add an endpoint to fetch all the movies from the Mongo database.
    So, let''s first add an endpoint to fetch all the movies in `controllers/movies.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you hit the URL `http://localhost:8081/movies`, we should be able to
    see the entire movie list that we have added via UI or the mongo shell itself.
    Here is what I have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d467d70-d506-4f39-98ec-370eb03e6d67.png)'
  prefs: []
  type: TYPE_IMG
- en: Modifying Home.vue to display dynamic content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s update our `Home.vue`, which will fetch the movies from our Mongo
    database and display the dynamic content. Replace the code in `Home.vue` with
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'This code calls a method when the page loads, which is defined in the `mounted` method.
    The method fetches the movies using an axios request. Now we have pulled the data
    from the server to the client. Now, we will use the `vue` directive to loop through
    these movies and render in the home page. Replace the content of the `<template>`
    tag with the following code in `Home.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have used the `vue` directive `for`. The key is used to
    assign a unique identity to each record. Now, when you visit `http://localhost:8080/`,
    you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d00b295b-283b-4516-968f-b7a6db462c38.png)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully built an application where we can add the movies to the
    MongoDB and display the DB records on the home page.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a movie profile page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we need a page where a logged-in user can go and rate the movie. To do
    that, let''s add a link to the title of the movie on the home page. In `Home.vue`,
    replace the template part with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Here, we added a link to the title that will take the user to its corresponding
    detail page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a page for the detailed view of the movie page where a logged-in
    user can go and rate the movie. Create a file called `Movie.vue` inside the `src/components`
    directory and add the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: We have added an axios request here to fetch the movie when a user clicks on
    the title of the movie.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we also need to define the routes to the page. So, in `routes/index.js`,
    replace the content with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need to add an endpoint for a GET request to fetch the movie with the
    specified ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the content in `controllers/movies.js` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we click the link on the title of the movie, we should be able to
    see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a91082a-2182-4be0-bba0-97d1b7418b1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we have also added an area where a user can click on to Rate this Movie.
    Let's move ahead to add the functionality to rate the movie. For this, we will
    be using a package called `vue-star-rating`, which makes it easy to add the rating
    component. You can find this example on this link as well at `https://jsfiddle.net/anteriovieira/8nawdjs7/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first add the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'In `Movie.vue`, replace the content  with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also update the code to call the `rate`  method when Rate this Movie
    is clicked. In `Movie.vue`, update the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the last thing we need to do is add the `rate` endpoint in `movies.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The endpoint saves the user ratings in a separate collection called `Rating`,
    which we haven''t created yet. Let''s go ahead and do that as well. Create a file
    called `Rating.js` inside the `models` directory and add the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the same model in `movies.js` as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it! Now a user should be able to rate a movie when logged-in. The user
    should get a popup when Rate this movie is clicked and display the rated score
    upon successful rating with a thank you message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c9354a3-fa9a-4300-bc98-d2e691e29923.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered what Vue.js is! We built a static application that
    lists the movies followed by adding the dynamic functionality to a movies listing
    via a form that stores the movies in the MongoDB. We also learned about Vue.js
    components, Data Binding, and Vue.js Directives.
  prefs: []
  type: TYPE_NORMAL
- en: We also added the functionality for users to be able to rate the movies.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will add the users and sign in/sign up functionality
    in the same application.
  prefs: []
  type: TYPE_NORMAL
