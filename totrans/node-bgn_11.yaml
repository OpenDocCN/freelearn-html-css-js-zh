- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Building a Web Application Project from Scratch
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从零开始构建Web应用程序项目
- en: In this chapter, we will start a new project that will be the base for the next
    chapters. We will apply all the lessons learned from the previous chapters and
    we will put into practice asynchronous programming, Node.js core libraries, external
    modules, testing, and all the concepts that we learned about regarding REST APIs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始一个新的项目，这个项目将是下一章的基础。我们将应用前几章学到的所有课程，并将异步编程、Node.js核心库、外部模块、测试以及我们关于REST
    API学到的所有概念付诸实践。
- en: This project will evolve, so we will iterate over the project, adding new features
    and new tests, so you can experience the full development cycle of a real-world
    application using Node.js.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目将会发展，因此我们将迭代项目，添加新功能和新的测试，这样你可以体验使用Node.js构建真实世界应用程序的完整开发周期。
- en: In this chapter, we will use the file system library to store the changes we
    produce in the project while managing operations from the REST API we create.
    In the next chapter, we will learn how to connect the web application to MongoDB,
    but we will do a migration using the tests that we built in this chapter.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用文件系统库来存储我们在项目中产生的更改，同时管理我们从创建的REST API中进行的操作。在下一章中，我们将学习如何将Web应用程序连接到MongoDB，但我们将使用本章构建的测试进行迁移。
- en: At the end of the book, we will deploy this project in several ways, and we
    will expose our application to the internet and to real users.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的结尾，我们将以几种方式部署这个项目，并将我们的应用程序暴露给互联网和真实用户。
- en: 'To sum up, here are the main topics that we will explore in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，以下是本章我们将探讨的主要主题：
- en: How to start an Express application including UI and API REST
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何启动一个包含UI和API REST的Express应用程序
- en: How to test an Express application using Supertest and Jest
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Supertest和Jest测试Express应用程序
- en: How to include data stores in our projects
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在我们的项目中包含数据存储
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The coode files for the chapter can be found at [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在[https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)找到
- en: Check out the code in action video for this chapter on [https://youtu.be/JYWmvQrGu78](https://youtu.be/JYWmvQrGu78)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看本章的代码演示视频，请访问[https://youtu.be/JYWmvQrGu78](https://youtu.be/JYWmvQrGu78)
- en: The project Kickoff
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目启动
- en: This is so exciting! We are going to apply all the knowledge that we have learned
    in the previous chapters to build a CRUD REST API with Express. We will use the
    file system to store the data, and we will use the most common Express middleware
    to build a robust API.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这真是太令人兴奋了！我们将把在前几章中学到的所有知识应用到构建一个使用Express的CRUD REST API上。我们将使用文件系统来存储数据，并且我们将使用最常用的Express中间件来构建一个健壮的API。
- en: The project goal
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目目标
- en: We are going to build a microblogging platform called “Whispering,” where users
    can create, read, update, and delete whispers (short posts).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个名为“Whispering”的微型博客平台，用户可以创建、阅读、更新和删除短篇帖子。
- en: Preview
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预览
- en: While we will focus on the backend, we will have a basic frontend included to
    test the API. So, we will start working with a simple app skeleton that we will
    evolve over the next chapters.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们将专注于后端，但我们将包含一个基本的客户端来测试API。因此，我们将从一个简单的应用程序骨架开始工作，我们将在接下来的章节中逐步发展它。
- en: '![Figure 11.1 – Preview of the home page from the project in the web browser](img/B21678_11_1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图11.1 – 在网页浏览器中预览项目主页](img/B21678_11_1.jpg)'
- en: Figure 11.1 – Preview of the home page from the project in the web browser
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1 – 在网页浏览器中预览项目主页
- en: Requirements
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 要求
- en: 'The requirements will evolve over the next chapters, but for now, we will focus
    on the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 需求将在下一章中演变，但到目前为止，我们将关注以下内容：
- en: Adding a welcome landing page using a template engine
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模板引擎添加欢迎页面
- en: Serving static files
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供静态文件服务
- en: Adding a CRUD REST API with Express
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Express添加CRUD REST API
- en: Using the file system to store the data in JSON format
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用文件系统以JSON格式存储数据
- en: Adding tests to ensure that the API is working as expected
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加测试以确保API按预期工作
- en: Starting with the first step
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从第一步开始
- en: 'To start working on the project, we need to download the project from [https://github.com/PacktPublishing/NodeJS-for-Beginners/archive/refs/heads/main.zip](https://github.com/PacktPublishing/NodeJS-for-Beginners/archive/refs/heads/main.zip)
    and access the `step0` folder. Now, enter the folder and feel free to explore
    the code. You will see that we have a basic skeleton with the following structure:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始工作，我们需要从 [https://github.com/PacktPublishing/NodeJS-for-Beginners/archive/refs/heads/main.zip](https://github.com/PacktPublishing/NodeJS-for-Beginners/archive/refs/heads/main.zip)
    下载项目并访问 `step0` 文件夹。现在，进入文件夹，随意探索代码。你会发现我们有一个以下结构的基架：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now that we are clear about the project objective, let’s start building the
    application. In the next section, we will start building the application by adding
    the dependencies, the basic structure, the stores, and other things in order to
    build a solid REST API that can be used in the next chapters.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经明确了项目目标，让我们开始构建应用程序。在下一节中，我们将通过添加依赖项、基本结构、存储和其他内容来构建一个坚固的 REST API，以便在下一章中使用。
- en: Building a REST API
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 REST API
- en: Now that we have a basic understanding of Express, let’s build a REST API for
    the microblogging platform. We will start with the basic CRUD operations and then
    we will add more features.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对 Express 有了一个基本的了解，让我们为微博平台构建一个 RESTful API。我们将从基本的 CRUD 操作开始，然后我们将添加更多功能。
- en: 'In [*Chapter 9*](B21678_09.xhtml#_idTextAnchor244), we learned about the principles
    of building RESTful APIs. We will apply them now. As the platform is called “whispering”
    and the users will be able to create, read, update, and delete whispers, we will
    have the following endpoints:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 9 章*](B21678_09.xhtml#_idTextAnchor244) 中，我们学习了构建 RESTful API 的原则。我们现在将应用它们。由于平台被称为“whispering”，用户将能够创建、读取、更新和删除悄悄话，我们将有以下端点：
- en: '`GET /api/v1/whisper`: Get all the whispers'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET /api/v1/whisper`：获取所有悄悄话'
- en: '`GET /api/v1/whisper/:id`: Get a whisper by ID'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET /api/v1/whisper/:id`：通过 ID 获取一个悄悄话'
- en: '`POST /api/v1/whisper`: Create a new whisper'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST /api/v1/whisper`：创建一个新的悄悄话'
- en: '`PUT /api/v1/whisper/:id`: Update a whisper by ID'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT /api/v1/whisper/:id`：通过 ID 更新一个悄悄话'
- en: '`DELETE /api/v1/whisper/:id`: Delete a whisper by ID'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE /api/v1/whisper/:id`：通过 ID 删除一个悄悄话'
- en: In this case, we used the prefix `/api/v1/` because we are building the first
    version of the API. It is a good practice to version the API in the URL because,
    in the future, you may want to introduce breaking changes, and it will be hard
    for your consumers to adapt to the new changes if you don’t version the API.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用了前缀 `/api/v1/`，因为我们正在构建 API 的第一个版本。在 URL 中对 API 进行版本控制是一个好的做法，因为将来你可能想要引入破坏性更改，如果你不版本控制
    API，你的消费者将很难适应新的更改。
- en: Adding the routes
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加路由
- en: 'As the first step, let’s add the dependencies:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一步，让我们添加依赖项：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let’s start by adding the routes to the `server.js` file and configure Express:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将向 `server.js` 文件中添加路由并配置 Express：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We created the basic routes for the CRUD operations, and we are returning a
    JSON response with the data that we received in the request. This time, we made
    a little change, and we will export the app object so we can use it in the tests
    later. Now, let’s initialize the server in the `index.js` file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为 CRUD 操作创建了基本的路由，并且我们正在返回一个包含我们接收到的请求数据的 JSON 响应。这次，我们做了一点小小的改变，我们将导出 app
    对象，以便我们可以在测试中稍后使用它。现在，让我们在 `index.js` 文件中初始化服务器：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now let’s add the npm scripts to run the application in the `package.json`
    file:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在 `package.json` 文件中添加 npm 脚本来运行应用程序：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Adding the stores
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加存储
- en: 'As this is a simple application, we will use the file system to store the data.
    We will create a `store.js` file and we will add the following functions:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个简单的应用程序，我们将使用文件系统来存储数据。我们将创建一个 `store.js` 文件，并添加以下函数：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Basically, we are using the file system to store the data in a JSON file. We
    are using `saveChanges` to save the data and `readData` to read the data.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们正在使用文件系统将数据存储在一个 JSON 文件中。我们使用 `saveChanges` 来保存数据，使用 `readData` 来读取数据。
- en: Then we have the basic CRUD operations defined in the functions `getAll`, `getById`,
    `create`, and `updateById`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在 `getAll`、`getById`、`create` 和 `updateById` 函数中定义了基本的 CRUD 操作。
- en: 'Now, let’s add the tests for the store. As the first step, let’s add the dependencies,
    `npm install -D jest@29 @babel/preset-env@7`, and then let’s add the skeleton
    for the tests to the `tests/store.test.js` file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为存储添加测试。作为第一步，让我们添加依赖项，`npm install -D jest@29 @babel/preset-env@7`，然后让我们将测试的骨架添加到
    `tests/store.test.js` 文件中：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In [*Chapter 8*](B21678_08.xhtml#_idTextAnchor218), we learned the principles
    of testing. One of the principles is that the tests should be independent, and
    that means that the tests should not depend on the state of previous tests and
    that we can run them as many times as we want and the result should not change.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第8章*](B21678_08.xhtml#_idTextAnchor218)中，我们学习了测试的原则。其中一个原则是测试应该是独立的，这意味着测试不应该依赖于先前测试的状态，并且我们可以多次运行它们，结果不应该改变。
- en: As we are using an external file to store the data, we need to make sure that
    the data is in the initial state before each test. So, we are using the `beforeEach`
    function to populate the database with the fixtures and the `afterAll` function
    to restore the database to the initial state. This way, we can make sure that
    the tests always start from the same state.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用外部文件来存储数据，我们需要确保在每次测试之前数据处于初始状态。因此，我们使用`beforeEach`函数用固定值填充数据库，并使用`afterAll`函数将数据库恢复到初始状态。这样，我们可以确保测试始终从相同的状态开始。
- en: Also, we added some fixtures and variables that we will use in the tests when
    we need to create, update, or delete data. This will help us to avoid hardcoding
    values and make the tests more readable.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还添加了一些固定值和变量，当我们需要创建、更新或删除数据时，我们将在测试中使用它们。这将帮助我们避免硬编码值并使测试更易于阅读。
- en: 'Now, let’s add the tests for the `getAll` function:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为`getAll`函数添加测试：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have two test cases only – when the database is empty and when the database
    has data. In both cases, we are expecting an array.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只有两个测试用例——当数据库为空时和当数据库有数据时。在这两种情况下，我们都期望得到一个数组。
- en: 'Now, let’s add the tests for the `getById` function:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为`getById`函数添加测试：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We have two test cases only – when we match an item and when we don’t match
    an item.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只有两个测试用例——当我们匹配一个项目时和当我们不匹配一个项目时。
- en: 'Now, let’s add the tests for the `create` function:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为`create`函数添加测试：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this case, we expect the item to be returned including the ID when it is
    returned from the function, and we expect the item to be added to the database.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们期望当函数返回时，包括ID的项目被返回，并且我们期望项目被添加到数据库中。
- en: 'Let’s add the tests for the `updateById` function:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为`updateById`函数添加测试：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this case, we expect the item to be updated in the database only if it exists,
    but not to be returned from the function at all.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们期望只有当项目存在于数据库中时，项目才会在数据库中更新，但函数根本不会返回该项目。
- en: 'Let’s add the last tests for the `deleteById` function:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为`deleteById`函数添加最后的测试：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We expect a similar behavior as in the `updateById` function. The item should
    be deleted from the database only if it exists, and the item is not returned.
    Now, let’s include the test scripts in the `package.json` file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们期望与`updateById`函数类似的行为。只有当项目存在于数据库中时，项目才应该从数据库中删除，并且项目不应该从函数中返回。现在，让我们将测试脚本包含到`package.json`文件中：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the tests with `npm run test`. Your output should be similar to this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`npm run test`运行测试。你的输出应该类似于以下内容：
- en: '![Figure 11.2 – Terminal screenshot](img/B21678_11_2.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图11.2 – 终端截图](img/B21678_11_2.jpg)'
- en: Figure 11.2 – Terminal screenshot
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 – 终端截图
- en: 'Our first storage is working, and fully tested. Now, let’s just finish by adding
    a linter to the project. First, install the linter with `npm i -D standard@17`
    and then update the `package.json` scripts:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一种存储方式已经工作，并且经过了全面测试。现在，让我们通过添加代码检查器来结束。首先，使用`npm i -D standard@17`安装代码检查器，然后更新`package.json`中的脚本：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, you can run the linter with `npm run lint` and fix the errors with `npm
    run lint:fix`. Sometimes you might need to fix the errors manually, but most of
    the time the linter will fix them for you.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用`npm run lint`运行代码检查器并使用`npm run lint:fix`修复错误。有时你可能需要手动修复错误，但大多数情况下，代码检查器会为你修复它们。
- en: Adding the static files
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加静态文件
- en: 'Now, let’s add the static files to the application. Basically, in the `public`
    folder, we have several files that we want to serve to the client, such as the
    `index.html`, `style.css`, and `app.js` files. So, let’s add the following code
    to the `server.js` file:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将静态文件添加到应用程序中。基本上，在`public`文件夹中，我们有几个想要提供给客户端的文件，例如`index.html`、`style.css`和`app.js`文件。因此，让我们将以下代码添加到`server.js`文件中：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now if we start the server with `npm run start`, and you go to `http://localhost:3000/styles.css`,
    you will see the content of the `styles.css` file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们使用`npm run start`启动服务器，然后你访问`http://localhost:3000/styles.css`，你将看到`styles.css`文件的内容。
- en: Note
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Until we finish this chapter, the URL `http://localhost:3000` might not work
    as expected, as the backend is not finished yet.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Adding the templates
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this project we will use the server render approach to handle certain parts
    of the application. So we will install the `ejs` template engine:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let’s import the store functions in the `server.js` file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, register the template engine in the `server.js` file:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, we will create a route, `about`, that will render the `views/about.ejs`
    template and we will provide the whispers to the template:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, let’s start the server with `npm run start` and go to `http://localhost:3000/about`
    and you will see the template rendered.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Information
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: If you are having issues running the project in this chapter while following
    the steps, or you tried an alternative approach, you can use the `step1` folder
    from the source code that you downloaded at the beginning of the chapter to compare
    and fix possible bugs more easily.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will continue building the REST API by adding tests.
    Adding tests to the REST API is very important because it will allow us to make
    sure that the API is working as expected and it will allow us to iterate over
    it in the next chapters more easily.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Testing with supertest
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it is time to make sure that our REST API is working as expected. We will
    learn in this section how to build solid tests while using Express.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Adding stores to the server
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will refactor each route to use the store functions. Let’s start with the
    `GET /``api/v1/whisper` route:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Basically, we are using the `getAll` function to get all the whispers and we
    are returning them in the response. Now, let’s refactor the `GET /``api/v1/whisper/:id`
    route:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In this case, we will return a 404 status code if the whisper doesn’t exist,
    and we will return the whisper if it exists. Now, let’s refactor the `POST /``api/v1/whisper`
    route:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In this case, we are validating that the message is not empty in the request
    body, returning a 400 status code in those cases. If the creation was successful,
    we return the whisper details. Now, let’s refactor the `PUT /``api/v1/whisper/:id`
    route:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: app.delete('/api/v1/whisper/:id', async (req, res) => {
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: const id = parseInt(req.params.id)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: const whisper = await getById(id)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: if(!whisper) {
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: res.sendStatus(404)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: return
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: await deleteById(id)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: res.sendStatus(200)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'const whispers = [{ id: 1, message: ''test'' }, { id: 2, message: ''hello world''
    }]'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: const inventedId = 12345
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: const existingId = whispers[0].id
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: export {
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: whispers,
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: inventedId,
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: existingId
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: import { writeFileSync } from 'node:fs'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: import { join } from 'node:path'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: const dbPath = join(process.cwd(), 'db.json')
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: const restoreDb = () => writeFileSync(dbPath, JSON.stringify([]))
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: const populateDb = (data) => writeFileSync(dbPath, JSON.stringify(data))
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: export { restoreDb, populateDb }
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: import { getAll, getById, create, updateById, deleteById } from '../store.js'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: import { restoreDb, populateDb } from './utils.js'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: import { whispers, inventedId, existingId } from './fixtures.js'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: describe('store', () => {
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: //...
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: npm i -D supertest@6
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: import supertest from 'supertest'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: import { app } from '../server'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: import { restoreDb, populateDb } from './utils.js'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: import { whispers, inventedId, existingId } from './fixtures.js'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: import { getById } from '../store'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: describe('Server', () => {
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: beforeEach(() => populateDb(whispers))
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: afterAll(restoreDb)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: describe("GET /api/v1/whisper", () => {
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return an empty array when there's no data")
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return all the whispers")
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: describe("GET /api/v1/whisper/:id", () => {
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 404 when the whisper doesn't exist")
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a whisper details")
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: describe("POST /api/v1/whisper", () => {
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 400 when the body is empty")
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 400 when the body is invalid")
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 201 when the whisper is created")
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: describe("PUT /api/v1/whisper/:id", () => {
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 400 when the body is empty")
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 400 when the body is invalid")
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 404 when the whisper doesn't exist")
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 200 when the whisper is updated")
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: describe("DELETE /api/v1/whisper/:id", () => {
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 404 when the whisper doesn't exist")
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 200 when the whisper is deleted")
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: describe("GET /api/v1/whisper", () => {
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: it("Should return an empty array when there's no data", async () => {
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: await restoreDb() // empty the db
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app).get("/api/v1/whisper")
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(200)
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.body).toEqual([])
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: it("Should return all the whispers", async () => {
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app).get("/api/v1/whisper")
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(200)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.body).toEqual(whispers)
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: describe("GET /api/v1/whisper/:id", () => {
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: it("Should return a 404 when the whisper doesn't exist", async () => {
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app).get(`/api/v1/whisper/${inventedId}`)
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(404)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: it("Should return a whisper details", async () => {
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app).get(`/api/v1/whisper/${existingId}`)
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(200)
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.body).toEqual(whispers.find(w => w.id === existingId))
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: describe("POST /api/v1/whisper", () => {
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: // it("....")
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: it("Should return a 400 when the body is empty",
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: async () => {
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app)
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: .post("/api/v1/whisper")
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: .send({})
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(400)
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: it("Should return a 400 when the body is invalid",
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: async () => {
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app)
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: .post("/api/v1/whisper")
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '.send({invented: "This is a new whisper"})'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(400)
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: it("Should return a 201 when the whisper is created",
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: async () => {
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: const newWhisper = {
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'id: whispers.length + 1,'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'message: "This is a new whisper"'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app)
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: .post("/api/v1/whisper")
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '.send({message: newWhisper.message})'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '.send({message: newWhisper.message})'
- en: // HTTP Response
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: // HTTP响应
- en: expect(response.status).toBe(201)
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: expect(response.status).toBe(201)
- en: expect(response.body).toEqual(newWhisper)
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: expect(response.body).toEqual(newWhisper)
- en: // Database changes
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: // 数据库变更
- en: const storedWhisper = await getById(newWhisper.id)
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: const storedWhisper = await getById(newWhisper.id)
- en: expect(storedWhisper).toStrictEqual(newWhisper)
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: expect(storedWhisper).toStrictEqual(newWhisper)
- en: '})'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE34]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: describe("PUT /api/v1/whisper/:id", () => {
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: describe("PUT /api/v1/whisper/:id", () => {
- en: // it("....")
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: // it("....")
- en: '})'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE35]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: it("Should return a 400 when the body is empty",
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: it("当body为空时，应返回400",
- en: async () => {
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: async () => {
- en: const response = await supertest(app)
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: const response = await supertest(app)
- en: .put(`/api/v1/whisper/${existingId}`)
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: .put(`/api/v1/whisper/${existingId}`)
- en: .send({})
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: .send({})
- en: expect(response.status).toBe(400)
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: expect(response.status).toBe(400)
- en: '})'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE36]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: it("Should return a 400 when the body is invalid",
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: it("当body无效时，应返回400",
- en: async () => {
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: async () => {
- en: const response = await supertest(app)
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: const response = await supertest(app)
- en: .put(`/api/v1/whisper/${existingId}`)
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: .put(`/api/v1/whisper/${existingId}`)
- en: '.send({invented: "This a new field"})'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '.send({invented: "这是一个新字段"})'
- en: expect(response.status).toBe(400)
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: expect(response.status).toBe(400)
- en: '})'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE37]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: it("Should return a 404 when the whisper doesn't exist",
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: it("当whisper不存在时，应返回404",
- en: async () => {
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: async () => {
- en: const response = await supertest(app)
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: const response = await supertest(app)
- en: .put(`/api/v1/whisper/${inventedId}`)
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: .put(`/api/v1/whisper/${inventedId}`)
- en: '.send({message: "Whisper updated"})'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '.send({message: "Whisper updated"})'
- en: expect(response.status).toBe(404)
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: expect(response.status).toBe(404)
- en: '})'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE38]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: it("Should return a 200 when the whisper is updated",
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: it("当whisper更新时，应返回200",
- en: async () => {
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: async () => {
- en: const response = await supertest(app)
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: const response = await supertest(app)
- en: .put(`/api/v1/whisper/${existingId}`)
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: .put(`/api/v1/whisper/${existingId}`)
- en: '.send({message: "Whisper updated"})'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '.send({message: "Whisper updated"})'
- en: expect(response.status).toBe(200)
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: expect(response.status).toBe(200)
- en: // Database changes
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: // 数据库变更
- en: const storedWhisper = await getById(existingId)
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: const storedWhisper = await getById(existingId)
- en: 'expect(storedWhisper).toStrictEqual({id: existingId, message: "Whisper updated"})'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 'expect(storedWhisper).toStrictEqual({id: existingId, message: "Whisper updated"})'
- en: '})'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE39]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: describe(" DELETE /api/v1/whisper/:id", () => {
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: describe(" DELETE /api/v1/whisper/:id", () => {
- en: // it("....")
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: // it("....")
- en: '})'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE40]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: it("Should return a 404 when the whisper doesn't exist", async () => {
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: it("当whisper不存在时，应返回404",
- en: const response = await supertest(app)
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: const response = await supertest(app)
- en: .delete(`/api/v1/whisper/${inventedId}`)
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: .delete(`/api/v1/whisper/${inventedId}`)
- en: expect(response.status).toBe(404)
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: expect(response.status).toBe(404)
- en: '})'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE41]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: it("Should return a 200 when the whisper is deleted", async () => {
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: it("当whisper被删除时，应返回200",
- en: const response = await supertest(app)
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: const response = await supertest(app)
- en: .delete(`/api/v1/whisper/${existingId}`)
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: .delete(`/api/v1/whisper/${existingId}`)
- en: expect(response.status).toBe(200)
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: expect(response.status).toBe(200)
- en: // Database changes
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: // 数据库变更
- en: const storedWhisper = await getById(existingId)
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: const storedWhisper = await getById(existingId)
- en: expect(storedWhisper).toBeUndefined()
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: expect(storedWhisper).toBeUndefined()
- en: '})'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: '[PRE42]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: <p>Currently there are <%= whispers.length %> whispers available</p>
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: <p>当前有 <%= whispers.length %> 个whispers可用</p>
- en: '[PRE43]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
