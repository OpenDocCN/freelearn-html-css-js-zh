- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Web Application Project from Scratch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will start a new project that will be the base for the next
    chapters. We will apply all the lessons learned from the previous chapters and
    we will put into practice asynchronous programming, Node.js core libraries, external
    modules, testing, and all the concepts that we learned about regarding REST APIs.
  prefs: []
  type: TYPE_NORMAL
- en: This project will evolve, so we will iterate over the project, adding new features
    and new tests, so you can experience the full development cycle of a real-world
    application using Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will use the file system library to store the changes we
    produce in the project while managing operations from the REST API we create.
    In the next chapter, we will learn how to connect the web application to MongoDB,
    but we will do a migration using the tests that we built in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the book, we will deploy this project in several ways, and we
    will expose our application to the internet and to real users.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up, here are the main topics that we will explore in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How to start an Express application including UI and API REST
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to test an Express application using Supertest and Jest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to include data stores in our projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The coode files for the chapter can be found at [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)
  prefs: []
  type: TYPE_NORMAL
- en: Check out the code in action video for this chapter on [https://youtu.be/JYWmvQrGu78](https://youtu.be/JYWmvQrGu78)
  prefs: []
  type: TYPE_NORMAL
- en: The project Kickoff
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is so exciting! We are going to apply all the knowledge that we have learned
    in the previous chapters to build a CRUD REST API with Express. We will use the
    file system to store the data, and we will use the most common Express middleware
    to build a robust API.
  prefs: []
  type: TYPE_NORMAL
- en: The project goal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to build a microblogging platform called “Whispering,” where users
    can create, read, update, and delete whispers (short posts).
  prefs: []
  type: TYPE_NORMAL
- en: Preview
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While we will focus on the backend, we will have a basic frontend included to
    test the API. So, we will start working with a simple app skeleton that we will
    evolve over the next chapters.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Preview of the home page from the project in the web browser](img/B21678_11_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Preview of the home page from the project in the web browser
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The requirements will evolve over the next chapters, but for now, we will focus
    on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a welcome landing page using a template engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving static files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a CRUD REST API with Express
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the file system to store the data in JSON format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding tests to ensure that the API is working as expected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting with the first step
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start working on the project, we need to download the project from [https://github.com/PacktPublishing/NodeJS-for-Beginners/archive/refs/heads/main.zip](https://github.com/PacktPublishing/NodeJS-for-Beginners/archive/refs/heads/main.zip)
    and access the `step0` folder. Now, enter the folder and feel free to explore
    the code. You will see that we have a basic skeleton with the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now that we are clear about the project objective, let’s start building the
    application. In the next section, we will start building the application by adding
    the dependencies, the basic structure, the stores, and other things in order to
    build a solid REST API that can be used in the next chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Building a REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a basic understanding of Express, let’s build a REST API for
    the microblogging platform. We will start with the basic CRUD operations and then
    we will add more features.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [*Chapter 9*](B21678_09.xhtml#_idTextAnchor244), we learned about the principles
    of building RESTful APIs. We will apply them now. As the platform is called “whispering”
    and the users will be able to create, read, update, and delete whispers, we will
    have the following endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET /api/v1/whisper`: Get all the whispers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET /api/v1/whisper/:id`: Get a whisper by ID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST /api/v1/whisper`: Create a new whisper'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT /api/v1/whisper/:id`: Update a whisper by ID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE /api/v1/whisper/:id`: Delete a whisper by ID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this case, we used the prefix `/api/v1/` because we are building the first
    version of the API. It is a good practice to version the API in the URL because,
    in the future, you may want to introduce breaking changes, and it will be hard
    for your consumers to adapt to the new changes if you don’t version the API.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As the first step, let’s add the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s start by adding the routes to the `server.js` file and configure Express:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We created the basic routes for the CRUD operations, and we are returning a
    JSON response with the data that we received in the request. This time, we made
    a little change, and we will export the app object so we can use it in the tests
    later. Now, let’s initialize the server in the `index.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s add the npm scripts to run the application in the `package.json`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Adding the stores
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As this is a simple application, we will use the file system to store the data.
    We will create a `store.js` file and we will add the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Basically, we are using the file system to store the data in a JSON file. We
    are using `saveChanges` to save the data and `readData` to read the data.
  prefs: []
  type: TYPE_NORMAL
- en: Then we have the basic CRUD operations defined in the functions `getAll`, `getById`,
    `create`, and `updateById`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add the tests for the store. As the first step, let’s add the dependencies,
    `npm install -D jest@29 @babel/preset-env@7`, and then let’s add the skeleton
    for the tests to the `tests/store.test.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In [*Chapter 8*](B21678_08.xhtml#_idTextAnchor218), we learned the principles
    of testing. One of the principles is that the tests should be independent, and
    that means that the tests should not depend on the state of previous tests and
    that we can run them as many times as we want and the result should not change.
  prefs: []
  type: TYPE_NORMAL
- en: As we are using an external file to store the data, we need to make sure that
    the data is in the initial state before each test. So, we are using the `beforeEach`
    function to populate the database with the fixtures and the `afterAll` function
    to restore the database to the initial state. This way, we can make sure that
    the tests always start from the same state.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we added some fixtures and variables that we will use in the tests when
    we need to create, update, or delete data. This will help us to avoid hardcoding
    values and make the tests more readable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add the tests for the `getAll` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We have two test cases only – when the database is empty and when the database
    has data. In both cases, we are expecting an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add the tests for the `getById` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We have two test cases only – when we match an item and when we don’t match
    an item.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add the tests for the `create` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we expect the item to be returned including the ID when it is
    returned from the function, and we expect the item to be added to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add the tests for the `updateById` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we expect the item to be updated in the database only if it exists,
    but not to be returned from the function at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add the last tests for the `deleteById` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We expect a similar behavior as in the `updateById` function. The item should
    be deleted from the database only if it exists, and the item is not returned.
    Now, let’s include the test scripts in the `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the tests with `npm run test`. Your output should be similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Terminal screenshot](img/B21678_11_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Terminal screenshot
  prefs: []
  type: TYPE_NORMAL
- en: 'Our first storage is working, and fully tested. Now, let’s just finish by adding
    a linter to the project. First, install the linter with `npm i -D standard@17`
    and then update the `package.json` scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can run the linter with `npm run lint` and fix the errors with `npm
    run lint:fix`. Sometimes you might need to fix the errors manually, but most of
    the time the linter will fix them for you.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the static files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s add the static files to the application. Basically, in the `public`
    folder, we have several files that we want to serve to the client, such as the
    `index.html`, `style.css`, and `app.js` files. So, let’s add the following code
    to the `server.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now if we start the server with `npm run start`, and you go to `http://localhost:3000/styles.css`,
    you will see the content of the `styles.css` file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Until we finish this chapter, the URL `http://localhost:3000` might not work
    as expected, as the backend is not finished yet.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this project we will use the server render approach to handle certain parts
    of the application. So we will install the `ejs` template engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s import the store functions in the `server.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, register the template engine in the `server.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will create a route, `about`, that will render the `views/about.ejs`
    template and we will provide the whispers to the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now, let’s start the server with `npm run start` and go to `http://localhost:3000/about`
    and you will see the template rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Information
  prefs: []
  type: TYPE_NORMAL
- en: If you are having issues running the project in this chapter while following
    the steps, or you tried an alternative approach, you can use the `step1` folder
    from the source code that you downloaded at the beginning of the chapter to compare
    and fix possible bugs more easily.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will continue building the REST API by adding tests.
    Adding tests to the REST API is very important because it will allow us to make
    sure that the API is working as expected and it will allow us to iterate over
    it in the next chapters more easily.
  prefs: []
  type: TYPE_NORMAL
- en: Testing with supertest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it is time to make sure that our REST API is working as expected. We will
    learn in this section how to build solid tests while using Express.
  prefs: []
  type: TYPE_NORMAL
- en: Adding stores to the server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will refactor each route to use the store functions. Let’s start with the
    `GET /``api/v1/whisper` route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Basically, we are using the `getAll` function to get all the whispers and we
    are returning them in the response. Now, let’s refactor the `GET /``api/v1/whisper/:id`
    route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we will return a 404 status code if the whisper doesn’t exist,
    and we will return the whisper if it exists. Now, let’s refactor the `POST /``api/v1/whisper`
    route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we are validating that the message is not empty in the request
    body, returning a 400 status code in those cases. If the creation was successful,
    we return the whisper details. Now, let’s refactor the `PUT /``api/v1/whisper/:id`
    route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: app.delete('/api/v1/whisper/:id', async (req, res) => {
  prefs: []
  type: TYPE_NORMAL
- en: const id = parseInt(req.params.id)
  prefs: []
  type: TYPE_NORMAL
- en: const whisper = await getById(id)
  prefs: []
  type: TYPE_NORMAL
- en: if(!whisper) {
  prefs: []
  type: TYPE_NORMAL
- en: res.sendStatus(404)
  prefs: []
  type: TYPE_NORMAL
- en: return
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: await deleteById(id)
  prefs: []
  type: TYPE_NORMAL
- en: res.sendStatus(200)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'const whispers = [{ id: 1, message: ''test'' }, { id: 2, message: ''hello world''
    }]'
  prefs: []
  type: TYPE_NORMAL
- en: const inventedId = 12345
  prefs: []
  type: TYPE_NORMAL
- en: const existingId = whispers[0].id
  prefs: []
  type: TYPE_NORMAL
- en: export {
  prefs: []
  type: TYPE_NORMAL
- en: whispers,
  prefs: []
  type: TYPE_NORMAL
- en: inventedId,
  prefs: []
  type: TYPE_NORMAL
- en: existingId
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: import { writeFileSync } from 'node:fs'
  prefs: []
  type: TYPE_NORMAL
- en: import { join } from 'node:path'
  prefs: []
  type: TYPE_NORMAL
- en: const dbPath = join(process.cwd(), 'db.json')
  prefs: []
  type: TYPE_NORMAL
- en: const restoreDb = () => writeFileSync(dbPath, JSON.stringify([]))
  prefs: []
  type: TYPE_NORMAL
- en: const populateDb = (data) => writeFileSync(dbPath, JSON.stringify(data))
  prefs: []
  type: TYPE_NORMAL
- en: export { restoreDb, populateDb }
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: import { getAll, getById, create, updateById, deleteById } from '../store.js'
  prefs: []
  type: TYPE_NORMAL
- en: import { restoreDb, populateDb } from './utils.js'
  prefs: []
  type: TYPE_NORMAL
- en: import { whispers, inventedId, existingId } from './fixtures.js'
  prefs: []
  type: TYPE_NORMAL
- en: describe('store', () => {
  prefs: []
  type: TYPE_NORMAL
- en: //...
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: npm i -D supertest@6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: import supertest from 'supertest'
  prefs: []
  type: TYPE_NORMAL
- en: import { app } from '../server'
  prefs: []
  type: TYPE_NORMAL
- en: import { restoreDb, populateDb } from './utils.js'
  prefs: []
  type: TYPE_NORMAL
- en: import { whispers, inventedId, existingId } from './fixtures.js'
  prefs: []
  type: TYPE_NORMAL
- en: import { getById } from '../store'
  prefs: []
  type: TYPE_NORMAL
- en: describe('Server', () => {
  prefs: []
  type: TYPE_NORMAL
- en: beforeEach(() => populateDb(whispers))
  prefs: []
  type: TYPE_NORMAL
- en: afterAll(restoreDb)
  prefs: []
  type: TYPE_NORMAL
- en: describe("GET /api/v1/whisper", () => {
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return an empty array when there's no data")
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return all the whispers")
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: describe("GET /api/v1/whisper/:id", () => {
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 404 when the whisper doesn't exist")
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a whisper details")
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: describe("POST /api/v1/whisper", () => {
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 400 when the body is empty")
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 400 when the body is invalid")
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 201 when the whisper is created")
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: describe("PUT /api/v1/whisper/:id", () => {
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 400 when the body is empty")
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 400 when the body is invalid")
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 404 when the whisper doesn't exist")
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 200 when the whisper is updated")
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: describe("DELETE /api/v1/whisper/:id", () => {
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 404 when the whisper doesn't exist")
  prefs: []
  type: TYPE_NORMAL
- en: it.todo("Should return a 200 when the whisper is deleted")
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: describe("GET /api/v1/whisper", () => {
  prefs: []
  type: TYPE_NORMAL
- en: it("Should return an empty array when there's no data", async () => {
  prefs: []
  type: TYPE_NORMAL
- en: await restoreDb() // empty the db
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app).get("/api/v1/whisper")
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(200)
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.body).toEqual([])
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: it("Should return all the whispers", async () => {
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app).get("/api/v1/whisper")
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(200)
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.body).toEqual(whispers)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: describe("GET /api/v1/whisper/:id", () => {
  prefs: []
  type: TYPE_NORMAL
- en: it("Should return a 404 when the whisper doesn't exist", async () => {
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app).get(`/api/v1/whisper/${inventedId}`)
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(404)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: it("Should return a whisper details", async () => {
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app).get(`/api/v1/whisper/${existingId}`)
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(200)
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.body).toEqual(whispers.find(w => w.id === existingId))
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: describe("POST /api/v1/whisper", () => {
  prefs: []
  type: TYPE_NORMAL
- en: // it("....")
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: it("Should return a 400 when the body is empty",
  prefs: []
  type: TYPE_NORMAL
- en: async () => {
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app)
  prefs: []
  type: TYPE_NORMAL
- en: .post("/api/v1/whisper")
  prefs: []
  type: TYPE_NORMAL
- en: .send({})
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(400)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: it("Should return a 400 when the body is invalid",
  prefs: []
  type: TYPE_NORMAL
- en: async () => {
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app)
  prefs: []
  type: TYPE_NORMAL
- en: .post("/api/v1/whisper")
  prefs: []
  type: TYPE_NORMAL
- en: '.send({invented: "This is a new whisper"})'
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(400)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: it("Should return a 201 when the whisper is created",
  prefs: []
  type: TYPE_NORMAL
- en: async () => {
  prefs: []
  type: TYPE_NORMAL
- en: const newWhisper = {
  prefs: []
  type: TYPE_NORMAL
- en: 'id: whispers.length + 1,'
  prefs: []
  type: TYPE_NORMAL
- en: 'message: "This is a new whisper"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app)
  prefs: []
  type: TYPE_NORMAL
- en: .post("/api/v1/whisper")
  prefs: []
  type: TYPE_NORMAL
- en: '.send({message: newWhisper.message})'
  prefs: []
  type: TYPE_NORMAL
- en: // HTTP Response
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(201)
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.body).toEqual(newWhisper)
  prefs: []
  type: TYPE_NORMAL
- en: // Database changes
  prefs: []
  type: TYPE_NORMAL
- en: const storedWhisper = await getById(newWhisper.id)
  prefs: []
  type: TYPE_NORMAL
- en: expect(storedWhisper).toStrictEqual(newWhisper)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: describe("PUT /api/v1/whisper/:id", () => {
  prefs: []
  type: TYPE_NORMAL
- en: // it("....")
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: it("Should return a 400 when the body is empty",
  prefs: []
  type: TYPE_NORMAL
- en: async () => {
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app)
  prefs: []
  type: TYPE_NORMAL
- en: .put(`/api/v1/whisper/${existingId}`)
  prefs: []
  type: TYPE_NORMAL
- en: .send({})
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(400)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: it("Should return a 400 when the body is invalid",
  prefs: []
  type: TYPE_NORMAL
- en: async () => {
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app)
  prefs: []
  type: TYPE_NORMAL
- en: .put(`/api/v1/whisper/${existingId}`)
  prefs: []
  type: TYPE_NORMAL
- en: '.send({invented: "This a new field"})'
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(400)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: it("Should return a 404 when the whisper doesn't exist",
  prefs: []
  type: TYPE_NORMAL
- en: async () => {
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app)
  prefs: []
  type: TYPE_NORMAL
- en: .put(`/api/v1/whisper/${inventedId}`)
  prefs: []
  type: TYPE_NORMAL
- en: '.send({message: "Whisper updated"})'
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(404)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: it("Should return a 200 when the whisper is updated",
  prefs: []
  type: TYPE_NORMAL
- en: async () => {
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app)
  prefs: []
  type: TYPE_NORMAL
- en: .put(`/api/v1/whisper/${existingId}`)
  prefs: []
  type: TYPE_NORMAL
- en: '.send({message: "Whisper updated"})'
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(200)
  prefs: []
  type: TYPE_NORMAL
- en: // Database changes
  prefs: []
  type: TYPE_NORMAL
- en: const storedWhisper = await getById(existingId)
  prefs: []
  type: TYPE_NORMAL
- en: 'expect(storedWhisper).toStrictEqual({id: existingId, message: "Whisper updated"})'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: describe(" DELETE /api/v1/whisper/:id", () => {
  prefs: []
  type: TYPE_NORMAL
- en: // it("....")
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: it("Should return a 404 when the whisper doesn't exist", async () => {
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app)
  prefs: []
  type: TYPE_NORMAL
- en: .delete(`/api/v1/whisper/${inventedId}`)
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(404)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: it("Should return a 200 when the whisper is deleted", async () => {
  prefs: []
  type: TYPE_NORMAL
- en: const response = await supertest(app)
  prefs: []
  type: TYPE_NORMAL
- en: .delete(`/api/v1/whisper/${existingId}`)
  prefs: []
  type: TYPE_NORMAL
- en: expect(response.status).toBe(200)
  prefs: []
  type: TYPE_NORMAL
- en: // Database changes
  prefs: []
  type: TYPE_NORMAL
- en: const storedWhisper = await getById(existingId)
  prefs: []
  type: TYPE_NORMAL
- en: expect(storedWhisper).toBeUndefined()
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: <p>Currently there are <%= whispers.length %> whispers available</p>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
