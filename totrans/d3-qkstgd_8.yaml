- en: Mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: D3 is a great tool for generating maps. To do so, we use specially formatted
    JSON data to generate `<path>` SVG elements. This specially formatted JSON data
    is called **GeoJSON**, and in this chapter, we'll use it to create a map of the
    world.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining GeoJSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a projection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a `<path>` using a projection and GeoJSON data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The complete code for this chapter can be found at https: [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter08](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter08).'
  prefs: []
  type: TYPE_NORMAL
- en: Defining GeoJSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GeoJSON is just JSON data that has specific properties that are assigned specific
    data types. The following is an example of GeoJSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we have one `Feature`, the `geometry` of which is a `Point`
    with the coordinates `[125.6, 10.1]`. Its name is `Dinagat Islands`. Each `Feature`
    will follow this general structure. An example, with the type as `STRING`, is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also have a `FeatureCollection`, which includes many features grouped
    together in a `features` array. In the following code snippet, you can see an
    example of `FeatureCollection` with different `geometry`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the general form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `features` property is an array of feature objects that were defined previously.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s set up a basic D3 page, using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The only thing different than the setup we''ve used in previous chapters is
    the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding line just loads an external JavaScript file, which sets our GeoJSON
    data to a variable. The beginning of the code looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `map_json` variable is just a JavaScript object that adheres to
    the GeoJSON structure (it adds an `idproperty`, which is optional). This is very
    important. If the object didn't adhere to the GeoJSON structure, D3 would not
    work as it should.
  prefs: []
  type: TYPE_NORMAL
- en: In production, you would probably make an AJAX call to get this data or, at
    the very least, create your own GeoJSON file, similar to the one being hosted
    on [https://rawgit.com/](https://rawgit.com/). The preceding setup was created
    to make learning easier, by decreasing the complexity associated with AJAX.
  prefs: []
  type: TYPE_NORMAL
- en: Using a projection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s start on our `app.js` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'At the bottom of `app.js`, let''s add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This generates a projection, which governs how we're going to display a round
    world on a flat screen. There are lots of different types of projections that
    we can use, which can be seen at [https://github.com/d3/d3-geo/blob/master/README.md#azimuthal-projections](https://github.com/d3/d3-geo/blob/master/README.md#azimuthal-projections).
  prefs: []
  type: TYPE_NORMAL
- en: The preceding line tells D3 to create an `equirectangular` projection ([https://github.com/d3/d3-geo/blob/master/README.md#geoEquirectangular](https://github.com/d3/d3-geo/blob/master/README.md#geoEquirectangular)).
  prefs: []
  type: TYPE_NORMAL
- en: Generating a path using a projection and GeoJSON data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our projection, we''re going to generate `<path>` elements
    for each data element in the `map_json.features` array. Then, we will set the
    fill of each element to `#099`. Add the following to the end of `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows what it should look if we open `index.html`
    in Chrome and view the Elements tab in the Developer tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea2b7f42-906a-4d42-855a-aa40375ff33e.png)'
  prefs: []
  type: TYPE_IMG
- en: We created the path elements, but they each need a `d` attribute, which will
    determine how they will be drawn (that is, their shapes).
  prefs: []
  type: TYPE_NORMAL
- en: 'We want something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Writing the kind of code described in the preceding comment would be very difficult.
    Luckily, D3 can generate that entire function for us. All we need to do is specify
    the projection that we created earlier. At the bottom of `app.js`, add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`geoPath()` generates the function that we''ll use for the `d` attribute, and
    the projection (`worldProjection`) tells it to use the `worldProjection` variable
    created earlier, so that the path elements appear as an equirectangular projection,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ec85faf-009b-43d9-a0f4-36ca5b3c655f.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed GeoJSON, what it's used for, and why it differs
    from more general JSON data. We've also covered how to use D3 to create a projection
    and render GeoJSON data as a map. Using this information, we can create all sorts
    of interesting maps of countries, cities, towns, or any area that we have GeoJSON
    data for. We can use different projections to view this data in interesting ways
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You've made it to the end of the book. Now, go and create amazing
    visualizations.
  prefs: []
  type: TYPE_NORMAL
