["```js\n$ mkdir interfacing-with-io\n$ cd interfacing-with-io\n$ touch greeting.js\n```", "```js\n    console.log('What is your name?');\n    process.stdin.on('data', (data) => {\n      // processing on each data event\n    });\n    ```", "```js\n    $ node greeting.js\n    ```", "```js\n      const name = data.toString().trim().toUpperCase();\n      process.stdout.write(`Hello ${name}!`);\n    ```", "```js\n    $ node greeting.js\n    What is your name?\n    Beth\n    Hello BETH!\n    ```", "```js\n    console.log('What is your name?');\n    process.stdin.on('data', (data) => {\n      // processing on each data event\n      const name = data.toString().trim().toUpperCase();\n      if (name !== '') {\n        process.stdout.write(`Hello ${name}!`);\n      } else {\n        process.stderr.write('Input was empty.\\n');\n      }\n    });\n    ```", "```js\n    $ node greeting.js\n    What is your name?\n    Input was empty.\n    ```", "```js\nconst readline = require('node:readline/promises');\nasync function greet () {\n  const rl = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout\n      });\n  const name = await rl.question('What is your name?\\n');\n  console.log(`Hello ${name}!`);\n  rl.close();\n}\ngreet();\n```", "```js\n    $ mkdir working-with-files\n    $ cd working-with-files\n    ```", "```js\n    $ echo Hello World! > hello.txt\n    ```", "```js\n    $ touch readWriteSync.js\n    ```", "```js\n    const fs = require('node:fs');\n    const path = require('node:path');\n    ```", "```js\n    const filepath = path.join(process.cwd(), 'hello.txt');\n    ```", "```js\n    const contents = fs.readFileSync(filepath, 'utf8');\n    console.log('File Contents:', contents);\n    ```", "```js\n    const upperContents = contents.toUpperCase();\n    ```", "```js\n    fs.writeFileSync(filepath, upperContents);\n    console.log('File updated.');\n    ```", "```js\n    $ node readWriteSync.js\n    File Contents: Hello World!\n    File updated.\n    ```", "```js\n    $ cat hello.txt\n    HELLO WORLD!\n    ```", "```js\nconst fs = require('node:fs');\nconst path = require('node:path');\nconst filepath = path.join(process.cwd(), 'hello.txt');\nconst contents = fs.readFileSync(filepath, 'utf8');\nconsole.log('File Contents:', contents);\nconst upperContents = contents.toUpperCase();\nfs.writeFileSync(filepath, upperContents);\nconsole.log('File updated.');\n```", "```js\n    const fs = require('node:fs');\n    const path = require('node:path');\n    const filepath = path.join(process.cwd(),\n      'hello.txt');\n    fs.readFile(filepath, 'utf8', (err, contents) => {\n      if (err) {\n        return console.log(err);\n      }\n      console.log('File Contents:', contents);\n      const upperContents = contents.toUpperCase();\n      fs.writeFileSync(filepath, upperContents);\n      console.log('File updated.');\n    });\n    ```", "```js\n    const fs = require('node:fs');\n    const path = require('node:path');\n    const filepath = path.join(process.cwd(),\n      'hello.txt');\n    fs.readFile(filepath, 'utf8', (err, contents) => {\n      if (err) {\n        return console.log(err);\n      }\n      console.log('File Contents:', contents);\n      const upperContents = contents.toUpperCase();\n      fs.writeFile(filepath, upperContents, (err) => {\n        if (err) throw err;\n        console.log('File updated.');\n      });\n    });\n    ```", "```js\n    first(args, () => {\n        second(args, () => {\n            third(args, () => {});\n        });\n    });\n    ```", "```js\n    const fs = require('node:fs');\n    const path = require('node:path');\n    const filepath = path.join(process.cwd(), 'hello.txt');\n    fs.readFile(filepath, 'utf8', (err, contents) => {\n      if (err) {\n        return console.log(err);\n      }\n      console.log('File Contents:', contents);\n      const upperContents = contents.toUpperCase();\n      updateFile(filepath, upperContents);\n    });\n    function updateFile (filepath, contents) {\n      fs.writeFile(filepath, contents, function (err) {\n        if (err) throw err;\n        console.log('File updated.');\n      });\n    }\n    ```", "```js\n    setInterval(() => process.stdout.write('**** \\n'), 1).unref();\n    ```", "```js\n    setTimeout(() => updateFile(filepath, upperContents), 10);\n    ```", "```js\n    $ node readFileAsync.js\n    ****\n    ****\n    File Contents: HELLO WORLD!\n    ****\n    ****\n    ****\n    ****\n    ****\n    ****\n    ****\n    ****\n    ****\n    File updated.\n    ```", "```js\n    const fs = require('node:fs/promises');\n    ```", "```js\n    fs.readFile(filepath, 'utf8').then((contents) => {\n        console.log('File Contents:', contents);\n    });\n    ```", "```js\n    const fs = require('node:fs/promises');\n    const path = require('node:path');\n    const filepath = path.join(process.cwd(),\n      'hello.txt');\n    async function run () {\n      try {\n        const contents = await fs.readFile(filepath,\n          'utf8');\n        console.log('File Contents:', contents);\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    run();\n    ```", "```js\n    $ mkdir fetching-metadata\n    $ cd fetching-metadata\n    ```", "```js\n    $ touch metadata.js\n    $ touch file.txt\n    ```", "```js\n    const fs = require('node:fs');\n    ```", "```js\n    const file = process.argv[2];\n    ```", "```js\n    function printMetadata(file) {\n      const fileStats = fs.statSync(file);\n      console.log(fileStats);\n    }\n    ```", "```js\n    printMetadata(file);\n    ```", "```js\n    $ node metadata.js ./file.txt\n    ```", "```js\n    Stats {\n      dev: 16777231,\n      mode: 33188,\n      nlink: 1,\n      uid: 501,\n      gid: 20,\n      rdev: 0,\n      blksize: 4096,\n      ino: 16402722,\n      size: 0,\n      blocks: 0,\n      atimeMs: 1697208041116.9521,\n      mtimeMs: 1697208041116.9521,\n      ctimeMs: 1697208041116.9521,\n      birthtimeMs: 1697208041116.9521,\n      atime: 2023-10-13T14:40:41.117Z,\n      mtime: 2023-10-13T14:40:41.117Z,\n      ctime: 2023-10-13T14:40:41.117Z,\n      birthtime: 2023-10-13T14:40:41.117Z\n    }\n    ```", "```js\n    $ node metadata.js ./not-a-file.txt\n    node:fs:1658\n      const stats = binding.stat(\n                            ^\n    Error: ENOENT: no such file or directory, stat './not-a-file.txt'\n    ```", "```js\n    function printMetadata(file) {\n      try {\n        const fileStats = fs.statSync(file);\n        console.log(fileStats);\n      } catch (err) {\n        console.error('Error reading file path:', file);\n      }\n    }\n    ```", "```js\n    $ node metadata.js ./not-a-file.txt\n    Error reading file: ./not-a-file.txt\n    ```", "```js\nconst fs = require('node:fs');\nconst file = './file.txt';\nfs.chmodSync(\n  file,\n  fs.constants.S_IRUSR |\n    fs.constants.S_IWUSR |\n    fs.constants.S_IRGRP |\n    fs.constants.S_IWGRP |\n    fs.constants.S_IROTH\n);\n```", "```js\nconst fs = require('fs');\nconst file = './file.txt';\nfs.chmodSync(file, 0o664);\n```", "```js\n    $ ln -s file.txt link-to-file\n    ```", "```js\n    $ node\n    Welcome to Node.js v22.9.0.\n    Type \".help\" for more information.\n    >\n    ```", "```js\n    > console.log('Hello World!');\n    Hello World!\n    undefined\n    ```", "```js\n    > fs.lstatSync('link-to-file');\n    Stats {\n      dev: 16777224,\n      mode: 41453,\n      nlink: 1,\n      ...\n    }\n    ```", "```js\n    $ mkdir file-watching\n    $ cd file-watching\n    ```", "```js\n    $ echo Hello World! > file.txt\n    ```", "```js\n    $ touch watch.js\n    ```", "```js\n    const fs = require('node:fs');\n    const path = require('node:path');\n    ```", "```js\n    const file = path.join(process.cwd(), 'file.txt');\n    ```", "```js\n    fs.watchFile(file, (current, previous) => {\n        return console.log(`${file} updated\n          ${(current.mtime)}`);\n    });\n    ```", "```js\n    $ node watch.js\n    ```", "```js\n    ./file.txt updated Mon Oct 16 2023 00:44:19 GMT+0100 (British Summer Time)\n    ```", "```js\n      const formattedTime = new Intl.DateTimeFormat('en-\n        GB', {\n        dateStyle: 'full',\n        timeStyle: 'long'\n      }).format(current.mtime);\n      return console.log(`${file} updated\n        ${formattedTime}`);\n    ```", "```js\n    $ node watch.js\n    ./file.txt updated Monday 16 October 2024 at 00:45:27 BST\n    ```", "```js\nconst fs = require('node:fs');\nconst file = './file.txt';\nfs.watch(file, (eventType, filename) => {\n  const formattedTime = new Intl.DateTimeFormat('en-GB',\n  {\n    dateStyle: 'full',\n    timeStyle: 'long'\n  }).format(new Date());\n  return console.log(`${filename} updated\n    ${formattedTime}`);\n});\n```", "```js\n$ npm install --global nodemon // globally install nodemon\n$ nodemon app.js // nodemon will watch for updates and restart\n```", "```js\n$ node --watch app.js\n```", "```js\n$ node --watch-path=./src --watch-path=./test app.js\n```"]