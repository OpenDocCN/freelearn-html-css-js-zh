["```js\npublic get btnHalloweenParty () {\n   return $(`#nav-55206 > li:nth-child(2) > a`);\n}\nHelpers.clickAdv (btnHalloweenParty);\n```", "```js\nHelpers.clickAdv (\"Halloween Party\");\n```", "```js\nHelpers.setValueAdv (\"Email\", \"me@mydomain.com\");\n```", "```js\nHelpers.selectAdv (\"Guests\",\"2\");\n```", "```js\nexport async function clickAdv(\nelement: WebdriverIO.Element | string,\ntext: string ) {\n```", "```js\n// If button element is a string, find the elements using the string\nif (typeof element === 'string') {\nelement = await getValidElement(element, \"button\");\n}\n```", "```js\nexport async function setValueAdv(\ninputField: WebdriverIO.Element | string,\ntext: string ) {\n// If inputField is a string, find the elements using the string\nif (typeof inputField === 'string') {\ninputField = await getValidElement(element, \"field\");\n}\n```", "```js\nexport async function selectAdv(\ninputField: WebdriverIO.Element | string,\ntext: string ) {\n// If inputField is a string, find the elements using the string\nif (typeof inputField === 'string') {\ninputField = await getValidElement(inputField, \"list\") as Element;\n}\n```", "```js\nexport async function getValidElement(\n  element: WebdriverIO.Element | String,\n  elementType: string\n): Promise<WebdriverIO.Element> {\n```", "```js\nif (typeof element == \"string\") {\n    // Try finding \"Halloween Party\" element by xPath text\n    elements = await browser.$$(`//*[contains(normalize-space(),'${eleText}')]`)\n```", "```js\n    // No such elements by element\n    if (elements.length == 0) {\n      //Try finding CSS href contains \"halloween-party\"\n     const elements = await browser.$$(`[href*='${eleText}.toLowerCase().replaceAll(\" \", \"-\")}']`)\n    }\n```", "```js\nIf (elements.length > 0 and elementType === \"button\"{\nlet buttonElements = await browser.$$(`(//a|//button)[contains(normalize-space(),'${element}')]`)\n    }\n```", "```js\n if (elements.length === 0) {\nlet buttonElements = await browser.$$(` (//a|//button)[contains(translate(normalize-space(text()), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'), '${element}')]\n`)\n}\n```", "```js\nIf (elements.length > 0 and elementType === \"field\"{\nelements = await browser.$$(`//label[\nnormalize-space()='${element}']//preceding::input `)\n    }\n```", "```js\nIf (fieldElements.length === 0 and elementType === \"field\"{\nelements = await browser.$$(`//label[normalize-space()='${element}']//preceding::textarea`)\n}\n```", "```js\nIf (lelements.length > 0 and elementType === \"list\"{\nelements = await browser.$$(`//select[@id='${element}'] `)\n    }\nIf no Select element matches that we take a second chance by searching for by the name attribute.\nIf (elements.length === 0 and elementType === \"list\"{\nelements = await browser.$$(`//select[@name='${element}'] `)\n    }\n///\n```", "```js\nIf (elements.length === 0 and elementType === \"list\"{\nlistElements = await browser.$$(`//label[contains(@for,'#{element}')]/following::select`)\n    }\n```", "```js\nfor (let element of elements) {\nconst tagName = await element.getTagName();\n// const tagName = await element.getAttribute('class'); // Alternate class match\nawait element.waitForDisplayed({ timeout: 0 });\nconst isVisible = await element.isDisplayed();\n// const isVisible = await highlight(element);\n// Alternate visible validation.\nIf (isVisible)\n//Found a matching button or an element with anchor class. Exiting loop\nbreak;\n}\n```", "```js\nreturn element;\n}\n```"]