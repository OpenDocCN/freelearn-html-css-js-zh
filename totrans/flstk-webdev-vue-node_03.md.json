["```js\n$ mongod\n```", "```js\n> use mongo_test_queries\n```", "```js\n# switched to db mongo_test_queries\n```", "```js\n> db.users.insertOne(\n {\n name: \"Brooke\",\n email: \"brooke@app.com\",\n address: 'Kathmandu'\n }\n)\n```", "```js\n> db.users.insertMany(\n [\n { name: \"Jack\", email: \"jack@mongo.com\" },\n { name: \"John\", email: \"john@mongo.com\" },\n { name: \"Peter\", email: \"peter@mongo.com\" }\n ]\n)\n```", "```js\n> db.users.insert(\n    { name: \"Mike\", email: \"mike@mongo.com\" }\n)\n```", "```js\n> db.users.insert(\n  [\n    { name: \"Josh\", email: \"josh@mongo.com\" },\n    { name: \"Ross\", email: \"ross@mongo.com\" },\n  ]\n)\n```", "```js\n> db.users.find()\n```", "```js\n> db.users.find({})\n```", "```js\n> db.users.find({ name: 'Mike' })\n```", "```js\n> db.users.find({ name: 'Mike', email: 'mike@mongo.com' })\n```", "```js\n> db.users.find(\n {\n $or: [ { email: \"josh@mongo.com\" }, { name: \"Mike\" } ]\n }\n)\n```", "```js\n> db.users.updateOne(\n { \"name\": \"Peter\" },\n {\n $set: { \"email\": \"peter@mongo.com\" }\n }\n )\n```", "```js\n> db.users.updateOne(\n { \"name\": \"Peter\" },\n {\n $set: { \"email\": \"peter@mongo.com\" }\n }\n )\n```", "```js\n> db.users.update(\n { \"name\": \"John\" },\n {\n $set: { \"email\": \"john@mongo.com\" }\n }\n )\n```", "```js\n> db.users.deleteOne( { name: \"John\" } )\n```", "```js\n> db.users.deleteMany( { name: \"Jack\" } )\n```", "```js\n> db.users.insertOne({ name: 'Mike', email: 'mike@mike.com' })\n```", "```js\n> db.users.remove({ name: 'Mike' }, 1)\n```", "```js\n> db.users.remove({})\n```", "```js\n> db.posts.insert({ title : 'test title', description : 'test description'})\n```", "```js\n> db.posts.insert({ title : 'test title', description : 'test description', category: 'News'})\n```", "```js\nconst UserSchema = new Schema({\n name: String,\n bio: String,\n extras: {}\n})\n```", "```js\n$ npm install mongoose --save\n```", "```js\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar mongoose = require('mongoose');\n```", "```js\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar mongoose = require('mongoose');\n\nvar app = express();\n\n//connect to mongodb\nmongoose.connect('mongodb://localhost:27017/express_app', function() {\n console.log('Connection has been made');\n})\n.catch(err => {\n console.error('App starting error:', err.stack);\n process.exit(1);\n});\n\n// Require file system module\nvar fs = require('file-system');\n```", "```js\n$ nodemon app.js\n```", "```js\nconst mongoose = require('mongoose');\n\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema({\n name: String,\n email: String\n})\n\nconst User = mongoose.model(\"User\", UserSchema)\nmodule.exports = User\n```", "```js\nconst mongoose = require('mongoose');\n\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema({\n name: String,\n email: String\n})\n\nconst User = mongoose.model(\"User\", UserSchema)\nmodule.exports = User\n```", "```js\nconst mongoose = require(\"mongoose\")\nconst Schema = mongoose.Schema\n\nconst UserSchema = new Schema({\n  name: String,\n  email: String\n})\n\nconst User = mongoose.model(\"User\", UserSchema)\nmodule.exports = User\n```", "```js\nconst user_resource = new User({\n  name: 'John Doe',\n  email: 'john@doe.com'\n})\n```", "```js\nuser_resource.save((error) => {\n  if(error)\n console.log(error);\n\n  res.send({\n    success: true,\n    code: 200,\n    msg: \"User added!\"\n  })\n})\n```", "```js\nuser_resource.save((error) => {\n  if(error)\n    console.log(error);\n\n  res.send({\n success: true,\n code: 200,\n msg: \"User added!\"\n })\n})\n```", "```js\nUser.find({}, 'name email', function (error, users) {\n  if (error) { console.error(error); }\n  res.send({\n    users: users\n  })\n})\n```", "```js\nusers: [\n  {\n    name: 'John Doe',\n    email: 'john@doe.com'\n  }\n]\n```", "```js\nUser.findById(1, 'name email', function (error, user) {\n  if (error) { console.error(error); }\n  res.send(user)\n}) \n```", "```js\n{\n    name: 'John Doe',\n    email 'john@doe.com'\n}\n```", "```js\nUser.findById(1, 'name email', function (error, user) {\n  if (error) { console.error(error); }\n\n  user.name = 'Peter'\n  user.email = 'peter@gmail.com'\n  user.save(function (error) {\n    if (error) {\n      console.log(error)\n    }\n    res.send({\n      success: true\n    })\n  })\n})\n```", "```js\nuser.name = 'Peter'\nuser.email = 'peter@gmail.com'\n```", "```js\nUser.findOneAndUpdate({name: 'Peter'}, { $set: { name: \"Sara\" } },   function(err){\n  if(err){\n    console.log(err);\n  }\n});\n```", "```js\nUser.findOneAndUpdate({name: 'Peter'}, { $set: { name: \"Sara\" } },   function(err, user){\n  if(err){\n    console.log(err);\n  }\n  res.send(user);\n});\n```", "```js\nUser.findByIdAndUpdate(1, { $set: { name: \"Sara\" } },   function(err){\n  if(err){\n    console.log(err);\n  }\n});\n```", "```js\nUser.findByIdAndUpdate(1, { $set: { name: \"Sara\" } }, function(err){\n  if(err, user){\n    console.log(err);\n  }\n res.send(user);\n});\n```", "```js\nUser.remove({\n  _id: 1\n}, function(err){\n  if (err)\n    res.send(err)\n  res.send({\n    success: true\n  })\n})\n```", "```js\nUser.findOneAndRemove({\n  _id: 1\n}, function(err){\n  if (err)\n    res.send(err)\n  res.send({\n    success: true\n  })\n})\n```", "```js\nUser.findOneAndRemove({\n  _id: 1\n}, function(err, user){\n  if (err)\n    res.send(err)\n  res.send({\n    success: true,\n    user: user\n  })\n})\n```", "```js\nUser.findByIdAndRemove(1, function(err){\n  if (err)\n    res.send(err)\n  res.send({\n    success: true\n  })\n})\n```", "```js\nvar mongoose = require(\"mongoose\");\nvar Schema = mongoose.Schema;\n\nvar UserSchema = new Schema({\n  name: String,\n  email: String\n});\n\nvar User = mongoose.model(\"User\", UserSchema);\nmodule.exports = User;\n```", "```js\nvar mongoose = require(\"mongoose\");\nvar Schema = mongoose.Schema;\n\nvar UserSchema = new Schema({\n  name: {\n required: true\n },\n  email: {\n required: true\n }\n});\n\nvar User = mongoose.model(\"User\", UserSchema);\nmodule.exports = User;\n```", "```js\nvar mongoose = require(\"mongoose\");\nvar Schema = mongoose.Schema;\n\nvar UserSchema = new Schema({\n  name: {\n required: [true, 'Let us know you by adding your name!']\n },\n  email: {\n required: [true, 'Please add your email as well.']\n }\n});\n\nvar User = mongoose.model(\"User\", UserSchema);\nmodule.exports = User;\n```", "```js\nvar userSchema = new Schema({\n  phone: {\n    type: String,\n    validate: {\n validator: function(v) {\n return /\\d{3}-\\d{3}-\\d{4}/.test(v);\n },\n message: '{VALUE} is not a valid phone number!'\n }\n  }\n});\n```", "```js\nvar nameSchema = new Schema({\n  first_name: String,\n  last_name: String\n});\n\nuserSchema = new Schema({\n  name: {\n    type: nameSchema,\n    required: true\n  }\n});\n```", "```js\nvar nameSchema = new Schema({\n  first_name: String,\n  last_name: String\n});\n\npersonSchema = new Schema({\n  name: {\n    type: {\n      first_name: String,\n      last_name: String\n    },\n    required: true\n  }\n});\n```"]