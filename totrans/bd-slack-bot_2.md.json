["```js\nnode\n\n```", "```js\nnpm install -g nodemon\n\n```", "```js\nconsole.log('Hello World!');\n```", "```js\nnodemon hello-world.js\n\n```", "```js\nmkdir helloWorld && cd helloWorld\n\n```", "```js\nnpm init\n\n```", "```js\ntouch index.js\nnpm install @slack/client â€“-save\n\n```", "```js\n{\n  \"name\": \"helloworld\",\n  \"version\": \"1.0.0\",\n  \"description\": \"My first Slack bot!\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"Paul Asjes\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"@slack/client\": \"^2.0.6\",\n  }\n}\n```", "```js\nnpm install\n\n```", "```js\n// Enable strict mode, this allows us to use ES6 specific syntax\n// such as 'const' and 'let'\n'use strict';\n\n// Import the Real Time Messaging (RTM) client\n// from the Slack API in node_modules\nconst RtmClient = require('@slack/client').RtmClient;\n\n// The memory data store is a collection of useful functions we // can\n// include in our RtmClient\nconst MemoryDataStore = require('@slack/client').MemoryDataStore;\n\n// Import the RTM event constants from the Slack API\nconst RTM_EVENTS = require('@slack/client').RTM_EVENTS;\n\n// Import the client event constants from the Slack API\nconst CLIENT_EVENTS = require('@slack/client').CLIENT_EVENTS;\n\nconst token = '';\n\n// The Slack constructor takes 2 arguments:\n// token - String representation of the Slack token\n// opts - Objects with options for our implementation\nlet slack = new RtmClient(token, {\n  // Sets the level of logging we require\n  logLevel: 'debug', \n  // Initialize a data store for our client, this will \n  // load additional helper functions for the storing \n  // and retrieval of data\n  dataStore: new MemoryDataStore(),\n  // Boolean indicating whether Slack should automatically \n  // reconnect after an error response\n  autoReconnect: true,\n  // Boolean indicating whether each message should be marked as // read \n  // or not after it is processed \n  autoMark: true \n});\n\n// Add an event listener for the RTM_CONNECTION_OPENED \n// event, which is called \n// when the bot connects to a channel. The Slack API can \n// subscribe to events by using the 'on' method\nslack.on(CLIENT_EVENTS.RTM.RTM_CONNECTION_OPENED, () => {\n  // Get the user's name\n  let user = slack.dataStore.getUserById(slack.activeUserId);\n\n  // Get the team's name\n  let team = slack.dataStore.getTeamById(slack.activeTeamId);\n\n  // Log the slack team name and the bot's name, using ES6's // template\n  // string syntax\n  console.log(`Connected to ${team.name} as ${user.name}`);\n});\n\n// Start the login process\nslack.start();\n```", "```js\nnode index.js\n\n```", "```js\nlogLevel: 'debug',\n```", "```js\nlogLevel: 'error',\n```", "```js\n[Thu Jan 07 2016 20:56:07 GMT-0500 (EST)] INFO Connecting...\nConnected to Building Bots as awesomebot\n\n```", "```js\n/invite [BOT_NAME]\n\n```", "```js\n/remove [BOT_NAME]\n\n```", "```js\nlet user = slack.dataStore.getUserById(slack.activeUserId);\n```", "```js\nconsole.log(slack);\n```", "```js\n// Returns an array of all the channels the bot resides in\nfunction getChannels(allChannels) {\n  let channels = [];\n\n  // Loop over all channels\n  for (let id in allChannels) {\n    // Get an individual channel\n    let channel = allChannels[id];\n\n    // Is this user a member of the channel?\n    if (channel.is_member) {\n      // If so, push it to the array\n      channels.push(channel);\n    }\n  }\n\n  return channels;\n}\n```", "```js\n// Add an event listener for the RTM_CONNECTION_OPENED event,\n//  which is called when the bot\n// connects to a channel. The Slack API can subscribe to \n// events by using the 'on' method\nslack.on(CLIENT_EVENTS.RTM.RTM_CONNECTION_OPENED, () => {\n  // Get the user's name\n  let user = slack.dataStore.getUserById(slack.activeUserId);\n\n  // Get the team's name\n  let team = slack.dataStore.getTeamById(slack.activeTeamId);\n\n  // Log the slack team name and the bot's name, using ES6's \n  // template string syntax\n  console.log(`Connected to ${team.name} as ${user.name}`);\n\n  // Note how the dataStore object contains a list of all \n  // channels available\n  let channels = getChannels(slack.dataStore.channels);\n\n  // Use Array.map to loop over every instance and return an \n  // array of the names of each channel. Then chain Array.join \n  // to convert the names array to a string\n  let channelNames = channels.map((channel) => {\n    return channel.name;\n  }).join(', ');\n\n  console.log(`Currently in: ${channelNames}`)\n});\n```", "```js\n// log the members of the channel\nchannels.forEach((channel) => {\n  console.log('Members of this channel: ', channel.members);\n});\n```", "```js\n  // log the members of the channel\n  channels.forEach((channel) => {\n    // get the members by ID using the data store's \n    //'getUserByID' function\n    let members = channel.members.map((id) => {\n      return slack.dataStore.getUserById(id);\n    });\n\n    // Each member object has a 'name' property, so let's \n    // get an array of names and join them via Array.join\n    let memberNames = members.map((member) => {\n      return member.name;\n    }).join(', ');\n\n    console.log('Members of this channel: ', memberNames);\n  });\n```", "```js\n  // log the members of the channel\n  channels.forEach((channel) => {\n    // get the members by ID using the data store's \n    // 'getUserByID' function\n    let members = channel.members.map((id) => {\n      return slack.dataStore.getUserById(id);\n    });\n\n    // Filter out the bots from the member list using Array.filter\n    members = members.filter((member) => {\n      return !member.is_bot;\n    });\n\n    // Each member object has a 'name' property, so let's \n    // get an array of names and join them via Array.join\n    let memberNames = members.map((member) => {\n      return member.name;\n    }).join(', ');\n\n    console.log('Members of this channel: ', memberNames);\n  });\n```", "```js\n// Add an event listener for the RTM_CONNECTION_OPENED event, \n// which is called when the bot connects to a channel. The Slack API \n// can subscribe to events by using the 'on' method\nslack.on(CLIENT_EVENTS.RTM.RTM_CONNECTION_OPENED, () => {\n  // Get the user's name\n  let user = slack.dataStore.getUserById(slack.activeUserId);\n\n  // Get the team's name\n  let team = slack.dataStore.getTeamById(slack.activeTeamId);\n\n  // Log the slack team name and the bot's name, using ES6's \n  // template string syntax\n  console.log(`Connected to ${team.name} as ${user.name}`);\n\n  // Note how the dataStore object contains a list of all \n  // channels available\n  let channels = getChannels(slack.dataStore.channels);\n\n  // Use Array.map to loop over every instance and return an \n  // array of the names of each channel. Then chain Array.join \n  // to convert the names array to a string\n  let channelNames = channels.map((channel) => {\n    return channel.name;\n  }).join(', ');\n\n  console.log(`Currently in: ${channelNames}`)\n\n  // log the members of the channel\n  channels.forEach((channel) => {\n    // get the members by ID using the data store's \n    // 'getUserByID' function\n    let members = channel.members.map((id) => {\n      return slack.dataStore.getUserById(id);\n    });\n\n    // Filter out the bots from the member list using Array.filter\n    members = members.filter((member) => {\n      return !member.is_bot;\n    });\n\n    // Each member object has a 'name' property, so let's \n    // get an array of names and join them via Array.join\n    let memberNames = members.map((member) => {\n      return member.name;\n    }).join(', ');\n\n    console.log('Members of this channel: ', memberNames);\n\n    // Send a greeting to everyone in the channel\n    slack.sendMessage(`Hello ${memberNames}!`, channel.id);\n  });\n});\n```", "```js\nslack.on(CLIENT_EVENTS.RTM.AUTHENTICATED, (rtmStartData) => {\n  console.log(`Logged in as ${rtmStartData.self.name} of team ${rtmStartData.team.name}, but not yet connected to a channel`);\n});\n```", "```js\n[Mon Jan 18 2016 21:37:24 GMT-0500 (EST)] INFO Connecting...\nLogged in as awesomebot of team Building Bots, but not yet connected to a channel\n\n```", "```js\nslack.on(RTM_EVENTS.MESSAGE, (message) => {\n  let user = slack.dataStore.getUserById(message.user)\n\n  if (user && user.is_bot) {\n    return;\n  }\n\n  let channel = slack.dataStore.getChannelGroupOrDMById(message.channel);\n\n  if (message.text) {\n    let msg = message.text.toLowerCase();\n\n    if (/(hello|hi) (bot|awesomebot)/g.test(msg)) {\n      slack.sendMessage(`Hello to you too, ${user.name}!`, channel.id);\n    }\n  }\n});\n```", "```js\nslack.on(RTM_EVENTS.MESSAGE, (message) => {\n  let user = slack.dataStore.getUserById(message.user)\n\n  if (user && user.is_bot) {\n    return;\n}\n```", "```js\n  let channel = slack.dataStore.getChannelGroupOrDMById(message.channel);\n```", "```js\nif (message.text) {\n  let msg = message.text.toLowerCase();\n\n  if (/(hello|hi) (bot|awesomebot)/g.test(msg)) {\n    slack.sendMessage(`Hello to you too, ${user.name}!`, channel.id);\n     }\n}\n```", "```js\nif (/(hello|hi) (bot|awesomebot)/g.test(msg)) {\n  // Infinite loop spamming the channel every 100 milliseconds\n  setInterval(() => {\n    slack.sendMessage('Spam!', channel.id);\n  }, 100);\n}\n```", "```js\nif (/(hello|hi) (bot|awesomebot)/g.test(msg)) {\n  // Get the timestamp when the above message was sent\n  let sentTime = Date.now();\n\n  setInterval(() => {\n    // Get the current timestamp\n    let currentTime = Date.now();\n\n    // Make sure we only allow a message once a full second has // passed \n    if ((currentTime - sentTime) > 1000) {\n\n      slack.sendMesssage('Limiting my messages to 1 per second', channel.id);\n\n      // Set the new sentTime\n      sentTime = Date.now();\n    }\n  }, 100);\n}\n```", "```js\nslack.on(RTM_EVENTS.MESSAGE, (message) => {\n  let user = slack.dataStore.getUserById(message.user)\n\n  if (user && user.is_bot) {\n    return;\n  }\n\n  let channel = slack.dataStore.getChannelGroupOrDMById(message.channel);\n\n  if (message.text) {\n    let msg = message.text.toLowerCase();\n\n    if (/uptime/g.test(msg)) {\n      let dm = slack.dataStore.getDMByName(user.name);\n\n      let uptime = process.uptime();\n\n      // get the uptime in hours, minutes and seconds\n      let minutes = parseInt(uptime / 60, 10),\n          hours = parseInt(minutes / 60, 10),\n          seconds = parseInt(uptime - (minutes * 60) - ((hours * 60) * 60), 10);\n\n      slack.sendMessage(`I have been running for: ${hours} hours, ${minutes} minutes and ${seconds} seconds.`, dm.id);\n  }\n});\n```", "```js\nslack.on(RTM_EVENTS.MESSAGE, (message) => {\n  let user = slack.dataStore.getUserById(message.user)\n\n  if (user && user.is_bot) {\n    return;\n  }\n\n  let channel = slack.dataStore.getChannelGroupOrDMById(message.channel);\n\n  if (message.text) {\n    let msg = message.text.toLowerCase();\n\n    if (/uptime/g.test(msg)) {\n      if (!user.is_admin) {        \n        slack.sendMessage(`Sorry ${user.name}, but that functionality is only for admins.`, channel.id);\n        return;\n      }\n\n      let dm = slack.dataStore.getDMByName(user.name);\n\n      let uptime = process.uptime();\n\n      // get the uptime in hours, minutes and seconds\n      let minutes = parseInt(uptime / 60, 10),\n          hours = parseInt(minutes / 60, 10),\n          seconds = parseInt(uptime - (minutes * 60) - ((hours * 60) * 60), 10);\n\n      slack.sendMessage(`I have been running for: ${hours} hours, ${minutes} minutes and ${seconds} seconds.`, dm.id);\n  }\n});\n```", "```js\nnpm install -g iron-node\n\n```", "```js\nif (/uptime/g.test(msg)) {\n  debugger;\n\n  if (!user.is_admin) {        \n    slack.sendMessage(`Sorry ${user.name}, but that functionality is only for admins.`, channel.id);\n    return;\n  } \n\n  let dm = slack.dataStore.getDMByName(user.name);\n\n  let uptime = process.uptime();\n\n  // get the uptime in hours, minutes and seconds\n  let minutes = parseInt(uptime / 60, 10),\n      hours = parseInt(minutes / 60, 10),\n      seconds = parseInt(uptime - (minutes * 60) - ((hours * 60) * 60), 10);\n\n  slack.sendMessage(`I have been running for: ${hours} hours, ${minutes} minutes and ${seconds} seconds.`, dm.id);\n}\n```", "```js\niron-node index.js\n\n```"]