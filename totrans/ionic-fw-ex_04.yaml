- en: Chapter 4. Ionic Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。Ionic组件
- en: In this chapter, we will be learning how to use some more complex Ionic components
    and controls. We will be creating a more advanced version of our to-do list application
    we created in [Chapter 2](part0019_split_000.html#I3QM1-798adc86542b445d8a1bb648e10b6714
    "Chapter 2. To-Do List App"), *To-Do List App*, using some more advanced built-in
    Ionic list components. We will call this more advanced to-do list application
    `Bucket-List` app. The idea behind this application is that it will allow us to
    enter all the interesting things we want to try in a lifetime. Therefore, we can
    enter the names of places we want to visit, the names of activities we want to
    do, and so on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用一些更复杂的Ionic组件和控制。我们将使用一些更高级的内置Ionic列表组件来创建我们在[第2章](part0019_split_000.html#I3QM1-798adc86542b445d8a1bb648e10b6714
    "第2章。待办事项应用程序")中创建的待办事项应用程序的更高级版本，即*待办事项应用程序*。我们将把这个更高级的待办事项应用程序称为`Bucket-List`应用程序。这个应用程序背后的想法是，它将允许我们输入我们一生中想要尝试的所有有趣的事情。因此，我们可以输入我们想要参观的地方的名字，我们想要做的活动的名字，等等。
- en: Creating a new to-do list application
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的待办事项列表应用程序
- en: In [Chapter 2](part0019_split_000.html#I3QM1-798adc86542b445d8a1bb648e10b6714
    "Chapter 2. To-Do List App"), *To-Do List App*, we created a simple to-do list
    application with the Ionic blank template. We were able to get this application
    to work by allowing us to add items into our to-do list application. We will be
    creating a new to-do list application using the Ionic blank template for us to
    add our new, more advanced components to our brand new BucketList application.
    Let's go ahead and create this new blank application by following the following
    steps. We will be calling our new application `Bucket-List` in order to differentiate
    it from the one we created in [Chapter 2](part0019_split_000.html#I3QM1-798adc86542b445d8a1bb648e10b6714
    "Chapter 2. To-Do List App"), *To-Do List App*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](part0019_split_000.html#I3QM1-798adc86542b445d8a1bb648e10b6714 "第2章。待办事项应用程序")的*待办事项应用程序*中，我们使用Ionic空白模板创建了一个简单的待办事项列表应用程序。我们能够使这个应用程序工作，是因为我们允许我们向我们的待办事项列表应用程序中添加条目。我们将使用Ionic空白模板创建一个新的待办事项列表应用程序，以便我们将新的、更高级的组件添加到我们全新的BucketList应用程序中。让我们按照以下步骤创建这个新的空白应用程序。我们将把我们的新应用程序称为`Bucket-List`，以便与我们在[第2章](part0019_split_000.html#I3QM1-798adc86542b445d8a1bb648e10b6714
    "第2章。待办事项应用程序")中创建的*待办事项应用程序*区分开来。
- en: 'To create the `Bucket-List` app, fire up a terminal window on your computer
    and navigate to the `Desktop` folder of your computer by running the following
    command:'
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建`Bucket-List`应用程序，请在你的电脑上打开一个终端窗口，并通过运行以下命令导航到你的电脑的`Desktop`文件夹：
- en: '[PRE0]'
  id: totrans-5
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After navigating to the `Desktop` folder of your computer, go ahead and run
    the following command to create the `Bucket-List` application based on the Ionic
    blank template:'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航到你的电脑的`Desktop`文件夹后，运行以下命令以基于Ionic空白模板创建`Bucket-List`应用程序：
- en: '[PRE1]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This command will create a new blank Ionic application called `Bucket-List`.
    When this command has finished running, navigate to the project of your application
    via the command line by running the following command:'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个命令将创建一个名为`Bucket-List`的新空白Ionic应用程序。当这个命令运行完成后，通过在命令行中运行以下命令导航到你的应用程序项目：
- en: '[PRE2]'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now you have successfully completed the process of creating your `Bucket-List`
    application, and we can start developing the app by adding features to it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经成功完成了创建你的`Bucket-List`应用程序的过程，我们可以通过添加功能来开始开发这个应用程序。
- en: Overview of the Bucket-List app
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Bucket-List应用程序概述
- en: 'To understand what we are trying to build, have a closer look at the following
    screenshot. We aim to achieve a final app that closely resembles what we have
    in the following screenshot:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解我们试图构建的内容，请仔细查看以下截图。我们的目标是创建一个最终应用程序，它与我们以下截图中的内容非常相似：
- en: '![Overview of the Bucket-List app](img/00017.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![Bucket-List应用程序概述](img/00017.jpeg)'
- en: Breaking down the app
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拆分应用程序
- en: A good way to build Ionic apps is by building them in bits. For our `Bucket-List`
    application, we can start by first developing the user interface and then writing
    the code behind it to enable it to work. Our user interface will contain an input
    box to enter a new item into our bucket list. Secondly, we have to design the
    UI for the list of `Bucket-List` items.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 构建Ionic应用程序的一个好方法是分步骤进行。对于我们的`Bucket-List`应用程序，我们可以首先开发用户界面，然后编写代码以使其工作。我们的用户界面将包含一个输入框，用于将新项目输入到我们的bucket列表中。其次，我们必须为`Bucket-List`条目列表设计UI。
- en: Designing the UI
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计UI
- en: 'Designing the UI involves two main implementations:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 设计UI涉及两个主要实现：
- en: Implementing the input box
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现输入框
- en: Implementing the `ion-list` element
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现离子`ion-list`元素
- en: We will have a look at each.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐一查看。
- en: Implementing the input box
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现输入框
- en: 'The first thing we are going to implement is an input box. This input box is
    the form where the users of our app will enter an interesting item they wish to
    add in the `Bucket-List` application. This will be in the form of an HTML textarea
    input box with some Ionic CSS styles applied to it in order to give it a more
    mobile look and feel. There also will be a button next to the input box with the
    label **ADD**. This button will be what we tap after we have typed some text and
    want it to appear as a part of our list. Perform the following steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要实现的第一件事是一个输入框。这个输入框是用户将在`Bucket-List`应用程序中输入他们希望添加的有趣项目的表单。这将是一个带有一些离子CSS样式应用的HTML
    textarea输入框，以使其看起来更符合移动设备的外观和感觉。输入框旁边还将有一个带有标签**添加**的按钮。这个按钮就是我们输入一些文本后想要它出现在我们列表中的按钮。执行以下步骤：
- en: Open up the `Bucket-List` application you created earlier in your favorite text
    editor.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你之前在最喜欢的文本编辑器中创建的`Bucket-List`应用程序。
- en: Now, open the `index.html` file that can be found in the `www` folder of your
    project. You will see a screen that closely resembles what we have in the following
    screenshot:![Implementing the input box](img/00018.jpeg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开你项目`www`文件夹中的`index.html`文件。你会看到一个屏幕，其外观与我们下面的截图非常相似：![实现输入框](img/00018.jpeg)
- en: You can see that this boilerplate code already contains some code for some custom
    Ionic elements just like we saw in our first application in [Chapter 2](part0019_split_000.html#I3QM1-798adc86542b445d8a1bb648e10b6714
    "Chapter 2. To-Do List App"), *To-Do List App* all of which are prefixed with
    `ion`. Pay close attention to the `<ion-content>` element! This element is the
    element that contains the bits and pieces of our application or the content area.
    It is in between this element that we are going to place all the markup for our
    `Bucket-List` application.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，这个样板代码已经包含了一些自定义离子元素的代码，就像我们在[第2章](part0019_split_000.html#I3QM1-798adc86542b445d8a1bb648e10b6714
    "第2章。待办事项应用程序")“待办事项应用程序”中看到的那样，所有这些元素都以`ion`为前缀。请密切关注`<ion-content>`元素！这个元素包含我们应用程序的各个部分或内容区域。我们将在这个元素之间放置我们`Bucket-List`应用程序的所有标记。
- en: 'Let''s start by placing the code for the input box of our application. I have
    provided the code for our input box in the following code block. You are to place
    this code within the `<ion-content>` element in your `index.html` file:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从放置我们应用程序的输入框代码开始。我在下面的代码块中提供了我们输入框的代码。你需要在你的`index.html`文件中的`<ion-content>`元素内放置此代码：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code is the HTML code that will display an input box and a button
    as we described earlier. If you pay close attention to the markup, you will see
    that some elements contain some classes. These classes are custom Ionic classes
    that are available as part of the Ionic CSS. The Ionic CSS comes with a lot of
    nifty classes and features, but for now just be aware of these classes and know
    that they are part of the Ionic CSS.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是显示输入框和按钮的HTML代码，正如我们之前所描述的那样。如果你仔细查看标记，你会看到一些元素包含一些类。这些类是作为离子CSS的一部分可用的自定义离子类。离子CSS附带了许多实用的类和功能，但就目前而言，只需知道这些类是离子CSS的一部分即可。
- en: 'If you run your app in the browser using the `ionic serve` method, you should
    be able to see something that looks very similar to what I have in the following
    screenshot. Enter the following command in a terminal window to run your app using
    the `ionic serve` method. Make sure you run it from the root folder of your project:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用`ionic serve`方法在浏览器中运行你的应用程序，你应该能看到与我下面截图非常相似的东西。在终端窗口中输入以下命令以使用`ionic
    serve`方法运行你的应用程序。确保你从项目的根目录运行它：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You should be able to see the input box with the button placed on its right-hand
    side.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够看到带有按钮放置在其右侧的输入框。
- en: '![Implementing the input box](img/00019.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![实现输入框](img/00019.jpeg)'
- en: Implementing the ion-list application
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现离子列表应用程序
- en: 'The next step of developing our `Bucket-List` application is to implement the
    `ion-list` application. We are going to use one of the built-in components called
    `ion-list`. The `ion-list` element is a component for creating and rendering lists.
    It has a lot of cool features that let us render complex lists that can have side
    options. Take a look at the following screenshot that shows the mail app from
    an iOS mobile device showing a list of features that we can implement using `ion-list`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 开发我们的`Bucket-List`应用的下一步是实现`ion-list`应用。我们将使用一个名为`ion-list`的内置组件。`ion-list`元素是一个用于创建和渲染列表的组件。它有很多酷炫的功能，允许我们渲染具有侧选项的复杂列表。请看以下截图，展示了iOS移动设备上的邮件应用，展示了我们可以使用`ion-list`实现的功能列表：
- en: '![Implementing the ion-list application](img/00020.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![实现ion-list应用](img/00020.jpeg)'
- en: As seen above, one of the most obvious features we can implement with `ion-list`
    is the ability to show options when we swipe on a list item. It also has other
    features like the ability to delete items or rearrange them.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，我们可以使用`ion-list`实现的最明显功能之一是在我们滑动列表项时显示选项。它还具有其他功能，例如删除项目或重新排列它们的能力。
- en: Using ion-list for our Bucket-List app
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在我们的Bucket-List应用中使用ion-list
- en: 'For our `Bucket-List` application, we will be aiming to use the `<ion-list>`
    component to render every item we enter through the input box. In addition, we
    would want to be able to delete each item from the list by simply swiping from
    the left and thus revealing a delete button, which we can click. The following
    screenshot gives a sample graphic breakdown of what we aim to achieve and what
    items are involved:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的`Bucket-List`应用，我们将旨在使用`<ion-list>`组件来渲染通过输入框输入的每个项目。此外，我们希望能够通过从左侧滑动来删除列表中的每个项目，从而显示一个可点击的删除按钮。以下截图展示了我们旨在实现的内容以及涉及的项目：
- en: '![Using ion-list for our Bucket-List app](img/00021.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![在Bucket-List应用中使用ion-list](img/00021.jpeg)'
- en: The ion-list component
  id: totrans-40
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: ion-list组件
- en: 'The first thing we will do is implement the code for our `<ion-list>` component.
    The following code is the code for`<ion-list>`. You are to copy this code and
    place it just below the code for the input box you already implemented:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先实现`<ion-list>`组件的代码。以下代码是`<ion-list>`的代码。您需要复制此代码并将其放置在您已经实现的输入框代码下方：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is the top-level component needed to create our `<ion-list>`component.
    The `<ion-list>`component has some attributes that let us perform some more complex
    implementations. We will not be exploring these attributes but it is worth knowing
    that they do exist.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建我们的`<ion-list>`组件所需的最顶层组件。`<ion-list>`组件有一些属性，允许我们执行一些更复杂的实现。我们不会探索这些属性，但值得知道它们确实存在。
- en: The next step is to implement the child item for our`<ion-list>` component.
    Each item in an `<ion-list>`component is called `<ion-item>`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是实现`<ion-list>`组件的子项。`<ion-list>`组件中的每个项目都称为`<ion-item>`。
- en: ion-item
  id: totrans-45
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: ion-item
- en: As briefly noted in the previous subsection about the `<ion-list>`component,
    each item in an `<ion-list>` is called an `<ion-item>`. Within an `<ion-item>`,
    we will put the code for what we want each list item to render. It is also the
    `<ion-item>` where we will use Angular's `ng-repeat` feature. For our application,
    we simply want to render the name of each `Bucket-List` item. This means that
    we can think of every `Bucket-List` item as an `<ion-item>`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一小节中简要提到的`<ion-list>`组件，`<ion-list>`中的每个项目被称为`<ion-item>`。在`<ion-item>`内部，我们将放置我们想要每个列表项渲染的代码。它也是我们使用Angular的`ng-repeat`功能的地方。对于我们的应用，我们只想渲染每个`Bucket-List`项目的名称。这意味着我们可以将每个`Bucket-List`项目视为一个`<ion-item>`。
- en: 'For now, we are just going to have some dummy text in our implementation showing
    how a `Bucket-List` item will prospectively look. The following block of code
    is the implementation of our `<ion-item>` representing a `Bucket-List` item in
    our app:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只是在实现中添加一些占位文本，以展示`Bucket-List`项目将如何潜在地看起来。以下代码块是我们应用中代表`Bucket-List`项目的`<ion-item>`的实现：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is a sample representation of our `<ion-item>`. If you still have your
    app running in the browser via the `ionic serve` technique, you should be able
    to see the `<ion-item>` rendered just like in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的`<ion-item>`的一个示例表示。如果您仍然通过`ionic serve`技术在浏览器中运行您的应用，您应该能够看到渲染的`<ion-item>`，就像以下截图所示：
- en: '![ion-item](img/00022.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![ion-item](img/00022.jpeg)'
- en: Now, with that implementation completed, there is one more thing we need to
    do in order to finish the implementation of the user interface of our `Bucket-List`
    app. The one thing remaining is the delete feature. Remember from our initial
    implementation plan that we want the user to be able to swipe each item in our
    list and have a **Delete** button revealed. Luckily for us, the `<ion-item>` component
    has a neat feature for this called the `<ion-option>`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，随着这个实现的完成，我们还需要做一件事来完成`Bucket-List`应用程序用户界面的实现。剩下的一件事是删除功能。记得从我们的初始实现计划中，我们希望用户能够滑动列表中的每个项目，并揭示一个**删除**按钮。幸运的是，`<ion-item>`组件有一个叫做`<ion-option>`的整洁功能。
- en: ion-option-button
  id: totrans-52
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: ion-option-button
- en: 'The `<ion-option-button>` component lives within an `<ion-item>` component
    as its child. Its sole purpose is to allow us to define buttons that we can reveal
    when the user of our app swipes from the right of each `<ion-item>`component just
    like in the original sample screenshot of our implementations. To get this implementation
    underway, copy the following code and paste it just before the closing tag of
    your `<ion-item>` component markup:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`<ion-option-button>`组件位于`<ion-item>`组件内部，作为其子组件。它的唯一目的是允许我们定义按钮，当用户从每个`<ion-item>`组件的右侧滑动时，我们可以揭示这些按钮，就像我们在原始示例截图中的实现一样。为了开始这个实现，复制以下代码并将其粘贴到您的`<ion-item>`组件标记的结束标签之前：'
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you have a look at the preceding code, you can see that`<ion-option-button>`
    has a class attribute of `button-assertive`. This is also another Ionic class
    that is used to define a red button by default on Ionic buttons. Ionic has some
    built-in classes to easily add colors to elements. We will be discussing this
    later on in this book but for now just be aware of this feature.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看前面的代码，您可以看到`<ion-option-button>`有一个类属性`button-assertive`。这也是另一个Ionic类，它被用来在Ionic按钮上默认定义一个红色按钮。Ionic有一些内置的类，可以轻松地为元素添加颜色。我们将在本书的后面讨论这个功能，但现在只需知道这个功能即可。
- en: 'By now, your final code for your`<ion-item>`component should look something
    similar to what I have in the following code block:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您的`<ion-item>`组件的最终代码应该看起来与我以下代码块中的内容相似。
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Your final code for your `<ion-content>` component should closely resemble
    what we have in the following code block:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`<ion-content>`组件的最终代码应该与以下代码块中的内容非常相似：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With this, we have completed the implementation of the user interface of our
    `Bucket-List` application using the `<ion-list>` component. Provided you still
    have your app running in the browser via the `ionic serve` technique, go and try
    to swipe the sample list item in your app from the left-hand side. You should
    be able to see a **Delete** button when you do this. See the following screenshot
    for guidance:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经完成了使用`<ion-list>`组件实现我们的`Bucket-List`应用程序用户界面的实现。如果您仍然通过`ionic serve`技术在浏览器中运行应用程序，请尝试从左侧滑动应用程序中的示例列表项。当您这样做时，您应该能够看到一个**删除**按钮。请参阅以下截图以获取指导：
- en: '![ion-option-button](img/00023.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![ion-option-button](img/00023.jpeg)'
- en: With this step completed, we are finished with the user interface of our application
    completely. Now, it is time we start to wire up the app by focusing on the Angular
    code that we will be writing to ensure our application works the way we want it
    to.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这一步后，我们就完全完成了应用程序的用户界面。现在，是我们开始通过关注我们将要编写的Angular代码来连接应用程序的时候了，以确保我们的应用程序按我们的预期工作。
- en: Writing the Angular code for our Bucket-List app
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为我们的Bucket-List应用程序编写Angular代码
- en: Before we begin, let's recap what behavior we want to implement in order for
    our application to work the way we want it to.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，让我们回顾一下我们想要实现的行为，以便我们的应用程序能够按我们的预期工作。
- en: Coding our input box
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写我们的输入框代码
- en: The first thing we want is to be able to enter some text into our input box
    later. After we enter the text, we want to click the **Add** button and have this
    text entered into an array that holds all out `Bucket-List` items. To begin this
    first, we create our Angular controller that will hold all the logic for our app.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先希望能够在稍后输入一些文本到我们的输入框中。在输入文本后，我们希望点击**添加**按钮，并将此文本输入到一个数组中，该数组包含所有我们的`Bucket-List`项目。为了开始这个第一步，我们创建我们的Angular控制器，它将包含我们应用程序的所有逻辑。
- en: Creating the controller
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建控制器
- en: Open to the `app.js` file of your application in your favorite IDE. This file
    can be found in the `js` folder, which is found in the `www` folder of your app.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在您最喜欢的IDE中打开应用程序的`app.js`文件。此文件位于`js`文件夹中，该文件夹位于应用程序的`www`文件夹中。
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'There should already be a folder called `starter` with code similar to that
    which I have in the following code block:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 应该已经有一个名为`starter`的文件夹，其中包含与我以下代码块中相似的代码：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To begin, we will first start by creating a controller called `BucketListController`
    just after where we declared our module. If you have done this correctly, you
    should have code that closely resembles the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在声明模块之后创建一个名为`BucketListController`的控制器。如果你操作正确，你应该有与以下代码相似的代码：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With this done, we have now completed the process of creating our controller
    called `BucketLisController`. This controller is where all the logic for our app
    will live.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，我们现在已经完成了创建名为`BucketLisController`的控制器的过程。这个控制器将包含我们应用的所有逻辑。
- en: Creating the input box model
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建输入框模型
- en: 'We are going to need to create a model that will be bound to our input box.
    This model will be in the form of an object, and it will hold the data that will
    be represented by the text we enter in our input box. We will call this model
    `bucketListItem`. To create this model, simply enter the following code within
    `BucketListController` that you just created in the previous step:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个与输入框绑定的模型。这个模型将是一个对象形式，它将保存由我们在输入框中输入的文本所代表的数据。我们将把这个模型称为`bucketListItem`。为了创建这个模型，只需在之前创建的`BucketListController`中输入以下代码：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding code is initializing the model for our `bucketListItem` model.
    This model has a property called `title` that will hold the text of what we type
    in the input box at every point in time.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码初始化了我们的`bucketListItem`模型。这个模型有一个名为`title`的属性，它将保存我们在输入框中输入的文本，在每一个时间点。
- en: Creating an array for the Bucket-List items
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建待办事项列表项的数组
- en: 'The aim of our app is to have a list of the `Bucket-List` items. These items,
    as we enter them in our input box, will need to be stored in an array. We are
    going to create this array, and we will simply call it `bucketListItems`. This
    array is what we will use in Angular''s `ng-repeat` attribute to iterate and render
    in our view. To create this array for our `Bucket-List` items, simply attach an
    array called `bucketListItems` to the `$scope` variable of your controller. The
    following code illustrates this step:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用的目标是有一个“待办事项列表”项的列表。当我们输入这些项目到输入框中时，它们需要存储在一个数组中。我们将创建这个数组，我们将简单地称它为`bucketListItems`。这个数组是我们将在Angular的`ng-repeat`属性中使用来迭代和渲染在视图中的。为了创建我们的“待办事项列表”项的数组，只需将一个名为`bucketListItems`的数组附加到你的控制器中的`$scope`变量上。以下代码展示了这一步骤：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Implementing code for the Add button
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实现添加按钮的代码
- en: The final step to ensure that we are able to add items to our Bucket-List app
    with the input is by writing the code in the form of a function for the **Add**
    button. This button is responsible for two things. Firstly, it will ensure that
    the current text in our input box is added as an entry to the output box array
    of the `Bucket-List` items. Secondly, it will also clear up the model to ensure
    that after we click the button, the input box is cleared up for the next item.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们能够通过输入添加项目到我们的“待办事项列表”应用中，我们需要编写一个函数形式的代码来实现**添加**按钮。这个按钮负责两件事。首先，它将确保我们输入框中的当前文本被添加到输出框数组中的“待办事项列表”项。其次，它还将清理模型，以确保点击按钮后，输入框为下一个项目清理干净。
- en: 'The following code represents the implementation for our **Add** button:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码表示了我们的**添加**按钮的实现：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: From the preceding code you can see that we have created a function called `addBucketListItem`,
    and attached it to the `$scope` variable of our controller so it is available
    to our view. Within our function, we first add the current value of the `bucketListItem`
    variable to our `bucketListItems` array. Secondly, we clear up the `bucketListItem`
    variable to ensure it is cleared for the next entry.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码中你可以看到，我们创建了一个名为`addBucketListItem`的函数，并将其附加到我们的控制器中的`$scope`变量上，以便在视图中使用。在我们的函数中，我们首先将`bucketListItem`变量的当前值添加到我们的`bucketListItems`数组中。其次，我们清理`bucketListItem`变量，以确保它为下一次输入做好准备。
- en: Now, you can go ahead and implement the preceding code within your controller.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在你的控制器中实现上述代码。
- en: Implementing the Delete button
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实现删除按钮
- en: 'The last piece of our code is to implement the **Delete** button of our `<ion-option-button>`.
    Remember that we want this button to be able to delete the item which it belongs
    to. The following code shows the implementation of the **Delete** button:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们代码的最后一部分是实现 `<ion-option-button>` 的 **删除** 按钮。记住，我们希望这个按钮能够删除它所属的项。以下代码展示了
    **删除** 按钮的实现：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding code simply shows how we have created a function called `deleteBucketListItem`.
    This function takes in the index of the current item to be deleted as a parameter.
    It then uses this index to remove the corresponding element that is placed in
    that index from the `bucketListItems` array, which holds all our `Bucket-List`
    items.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码简单地展示了我们如何创建一个名为 `deleteBucketListItem` 的函数。这个函数接受要删除的当前项的索引作为参数。然后它使用这个索引从包含所有
    `Bucket-List` 项的 `bucketListItems` 数组中移除相应元素。
- en: 'With that complete, we have pretty much finished the code aspect of our application.
    Your final controller should look similar to what I have in the following code
    block:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，我们基本上完成了应用程序的代码部分。您的最终控制器应该看起来与我以下代码块中的类似：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, before we go ahead and test your application, we have one last step to
    complete. We need to wire up all the code we have just created with the UI we
    implemented earlier so that they can work together.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续测试应用程序之前，我们还有一个最后的步骤要完成。我们需要将我们刚刚创建的所有代码与之前实现的 UI 连接起来，以便它们可以一起工作。
- en: Wire it all up
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接所有
- en: With our controller ready, now we have to go ahead and wire all the code to
    the UI so that they can work together in harmony.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器准备就绪后，我们现在必须继续将所有代码连接到 UI 上，以便它们能够和谐地一起工作。
- en: Binding the controller
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 绑定控制器
- en: The first thing we need to do is to wire up the controller we created. The simple
    and easiest way to do this is by simply using Angular's `ng-controller` attribute
    directive to specify our controller. In our case, we will be wiring the controller
    on `<ion-content>` of our app. Once again, open up the `index.html` file of your
    application. Find the opening `<ion-content>` tag of the page and specify an `ng-controller`
    attribute with the name of your controller.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是将我们创建的控制器连接起来。最简单、最直接的方法是使用 Angular 的 `ng-controller` 属性指令来指定我们的控制器。在我们的例子中，我们将把控制器连接到应用的
    `<ion-content>` 上。再次打开你应用的 `index.html` 文件。找到页面的 `<ion-content>` 标签的起始部分，并指定一个带有控制器名称的
    `ng-controller` 属性。
- en: 'Your code should closely resemble the following code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码应与以下代码非常相似：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This code is simply telling Angular that we wish to use `BucketListController`
    within the scope of this `<ion-content>` element. This means that all the methods
    and properties scoped within this controller are now available to the `<ion-content>`
    element and all its descendant elements.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码只是告诉 Angular 我们希望在 `<ion-content>` 元素的范围内使用 `BucketListController`。这意味着在这个控制器范围内定义的所有方法和属性现在都对
    `<ion-content>` 元素及其所有子元素可用。
- en: Binding the input box model
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 绑定输入框模型
- en: 'The next step is to ensure that the `bucketListItem` variable we created in
    our controller is data bound to our input box in the view. Angular also has a
    simple but great attribute directive for this called `ng-model`. We simply provide
    `ng-model` with a value that matches an object or variable that we want to data
    bind to. In our case, we want to data bind to the title property of our `bucketListItem`
    variable from our controller. Again, I have provided the following code for your
    convenience:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是确保我们在控制器中创建的 `bucketListItem` 变量与视图中的输入框数据绑定。Angular 也有一个简单但很棒的属性指令来完成这个任务，称为
    `ng-model`。我们只需为 `ng-model` 提供一个与我们要数据绑定的对象或变量匹配的值。在我们的例子中，我们想要将 `bucketListItem`
    变量的标题属性从控制器中数据绑定到输入框。再次提供以下代码供您方便使用：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding piece of code we just added tells Angular to bind this variable
    to this input box. Therefore, anytime the value of the input changes from the
    view, we have the same value in our controller and vice versa.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加的代码片段告诉 Angular 将此变量绑定到这个输入框。因此，每当视图中的输入值发生变化时，我们控制器中的值与视图中的值相同，反之亦然。
- en: Wiring up the Add button
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 连接添加按钮
- en: 'The **Add** button is next in line for our implementation. For this button,
    we simply need to tell it to run our `addBucketListItem` function every time it
    is clicked. Once again, Angular has a helper directive for this called the `ng-click`
    directive. The `ng-click` directive is like the classic Java `onClick` event listener
    and you provide it with a function that you want to run every time the wired element
    is clicked. The following code demonstrates how we can wire up our **Add** button
    with the `ng-click` directive:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**添加** 按钮是我们实现中的下一个步骤。对于这个按钮，我们只需要告诉它在每次点击时运行我们的 `addBucketListItem` 函数。Angular
    再次提供了一个辅助指令来完成这个任务，即 `ng-click` 指令。`ng-click` 指令类似于经典的 Java `onClick` 事件监听器，你提供给它一个函数，每次连接的元素被点击时都会运行。以下代码演示了如何使用
    `ng-click` 指令连接我们的 **添加** 按钮：'
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding code implementation simply ensures that when the **Add** button
    is clicked, the `addBucketListener` function will run with its expected behavior.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码实现简单地确保当 **添加** 按钮被点击时，`addBucketListener` 函数将按照预期行为运行。
- en: Binding ion-item
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 绑定 ion-item
- en: The last part of our wiring up will be to wire our `bucketListItems` array to
    our `Ion-Item` elements, and also bind the `ion-option-button` element to our
    `deleteBucketListItem()` function.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们连接的最后部分是将我们的 `bucketListItems` 数组连接到我们的 `Ion-Item` 元素上，同时将 `ion-option-button`
    元素绑定到我们的 `deleteBucketListItem()` 函数。
- en: Using ng-repeat to render the list
  id: totrans-112
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 使用 ng-repeat 渲染列表
- en: Right now we have a sample implementation that has one hardcoded `ion-item`.
    However, we will want a more dynamic solution where we automatically render the
    items within the `bucketListItems` array each as an `ion-item`. For this implementation,
    we are going to use one of the most important Angular features in the form of
    `ng-repeat`. The `ng-repeat` angular directive lets us dynamically repeat an array.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们有一个包含一个硬编码的 `ion-item` 的示例实现。然而，我们希望有一个更动态的解决方案，其中自动将 `bucketListItems`
    数组中的每个项目渲染为 `ion-item`。为此实现，我们将使用 Angular 中最重要的功能之一，即 `ng-repeat`。`ng-repeat`
    Angular 指令允许我们动态重复一个数组。
- en: 'Right now, you have a code that looks similar to the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你的代码看起来类似于以下内容：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We are going to change this implementation to use the `ng-repeat` directive
    of Angular. The following code shows you how this is achieved:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将改变这个实现，使用 Angular 的 `ng-repeat` 指令。以下代码展示了如何实现这一点：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding code now uses Angular's `ng-repeat` attribute. This code tells
    Angular to repeat the `bucketListItems` array and also binds the title of each
    item to an HTML `<h2>` element.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码现在使用了 Angular 的 `ng-repeat` 属性。这段代码告诉 Angular 重复 `bucketListItems` 数组，并将每个项目的标题绑定到一个
    HTML `<h2>` 元素上。
- en: Wiring up the ion-option-button element
  id: totrans-119
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 连接 ion-option-button 元素
- en: 'The `ion-option-button` element is still untouched and will do nothing if we
    don''t tell it to do so. All we need to do for this element is to provide it with
    a function we want to be executed when it is clicked, like we did with the **Add**
    button. For this, we will be using the `ng-click` directive again, but this time,
    we will point it to the `deleteBucketListItem()` function from our controller.
    The following code shows just how we can achieve that:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不告诉它这样做，`ion-option-button` 元素仍然保持原样，不会执行任何操作。对于这个元素，我们只需要提供一个函数，当它被点击时执行，就像我们对
    **添加** 按钮所做的那样。为此，我们将再次使用 `ng-click` 指令，但这次我们将它指向控制器中的 `deleteBucketListItem()`
    函数。以下代码展示了我们如何实现这一点：
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: From the preceding code, you will notice one alien thing, `$index` being specifically
    passed as a parameter for our `deleteBucketListItem` function. This variable is
    a magic variable that the `ng-repeat` directive of Angular exposes to us. It represents
    the index of the current element being rendered by `ng-repeat`. With this index,
    we can learn what particular element should be deleted from our array of bucket
    list items, and delete the correct one.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码中，你会注意到一个奇怪的东西，`$index` 被特别传递给我们的 `deleteBucketListItem` 函数作为参数。这个变量是一个魔法变量，Angular
    的 `ng-repeat` 指令向我们暴露。它代表 `ng-repeat` 正在渲染的当前元素的索引。有了这个索引，我们可以了解应该从我们的桶单项目数组中删除哪个特定元素，并删除正确的元素。
- en: 'The final `<ion-content>` in your `index.html` file should closely resemble
    what I have in the following code block:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 `index.html` 文件中的最终 `<ion-content>` 应该与我以下代码块中的内容非常相似：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Testing our Bucket-List app
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试我们的桶单应用
- en: We have completed the implementation of our application, and now it is time
    for us to see it in action. Ensure you have your app running in the browser via
    the `ionic serve` technique, and test it. Try entering some things into your `Bucket-List`
    app such as skydiving, jet-skiing, and so on. You should see that every time you
    enter an item and click **Add**, the item will appear in the list and the input
    box will clear up ready for your next input. Also, make sure you test the delete
    option by swiping an item from the left to reveal the **Delete** button, and clicking
    it to see the item disappear.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了应用程序的实现，现在是时候看到它在实际中的应用了。确保您通过 `ionic serve` 技术在浏览器中运行您的应用程序，并进行测试。尝试在您的
    `Bucket-List` 应用程序中输入一些内容，如跳伞、水上摩托等。您应该会看到，每次您输入一个条目并点击 **添加**，该条目就会出现在列表中，输入框也会清空，以便您进行下一次输入。此外，请确保通过从左侧滑动一个条目来测试删除选项，以显示
    **删除** 按钮，并点击它以查看条目消失。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we focused on creating our `Bucket-List` application from scratch
    using the Ionic blank template. We also learned to use the `<ion-list>` component
    of Ionic and its child elements. We wrote some Angular code to wire everything
    up and got it running. The `<ion-list>`component is a very powerful component,
    and although the task of this chapter might appear a bit more complex that the
    previous ones, there are still some more powerful features that the `<ion-list>`
    component lets us do. For more information about `<ion-list>`, visit the official
    documentation of `<ion-list>` from the provided links in the appendix of this
    book to learn even more complex features.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从头开始使用 Ionic 空模板创建我们的 `Bucket-List` 应用程序。我们还学习了如何使用 Ionic 的 `<ion-list>`
    组件及其子元素。我们编写了一些 Angular 代码来连接所有组件并使其运行。`<ion-list>` 组件是一个非常强大的组件，尽管本章的任务可能看起来比前几章复杂一些，但
    `<ion-list>` 组件仍然让我们能够实现更多强大的功能。有关 `<ion-list>` 的更多信息，请访问本书附录中提供的链接，以了解更多复杂的功能。
- en: In the next chapter, we will be learning some very exciting stuff about creating
    side menu applications with Ionic. We will also build ourselves a tourist application
    and work with the AJAX calls for the very first time using Angular's `$HTTP` service.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用 Ionic 创建侧边菜单应用程序的一些非常有趣的内容。我们还将构建自己的旅游应用程序，并首次使用 Angular 的 `$HTTP`
    服务进行 AJAX 调用。
