- en: Chapter 4. Ionic Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be learning how to use some more complex Ionic components
    and controls. We will be creating a more advanced version of our to-do list application
    we created in [Chapter 2](part0019_split_000.html#I3QM1-798adc86542b445d8a1bb648e10b6714
    "Chapter 2. To-Do List App"), *To-Do List App*, using some more advanced built-in
    Ionic list components. We will call this more advanced to-do list application
    `Bucket-List` app. The idea behind this application is that it will allow us to
    enter all the interesting things we want to try in a lifetime. Therefore, we can
    enter the names of places we want to visit, the names of activities we want to
    do, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new to-do list application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 2](part0019_split_000.html#I3QM1-798adc86542b445d8a1bb648e10b6714
    "Chapter 2. To-Do List App"), *To-Do List App*, we created a simple to-do list
    application with the Ionic blank template. We were able to get this application
    to work by allowing us to add items into our to-do list application. We will be
    creating a new to-do list application using the Ionic blank template for us to
    add our new, more advanced components to our brand new BucketList application.
    Let's go ahead and create this new blank application by following the following
    steps. We will be calling our new application `Bucket-List` in order to differentiate
    it from the one we created in [Chapter 2](part0019_split_000.html#I3QM1-798adc86542b445d8a1bb648e10b6714
    "Chapter 2. To-Do List App"), *To-Do List App*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the `Bucket-List` app, fire up a terminal window on your computer
    and navigate to the `Desktop` folder of your computer by running the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After navigating to the `Desktop` folder of your computer, go ahead and run
    the following command to create the `Bucket-List` application based on the Ionic
    blank template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command will create a new blank Ionic application called `Bucket-List`.
    When this command has finished running, navigate to the project of your application
    via the command line by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now you have successfully completed the process of creating your `Bucket-List`
    application, and we can start developing the app by adding features to it.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the Bucket-List app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand what we are trying to build, have a closer look at the following
    screenshot. We aim to achieve a final app that closely resembles what we have
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview of the Bucket-List app](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Breaking down the app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A good way to build Ionic apps is by building them in bits. For our `Bucket-List`
    application, we can start by first developing the user interface and then writing
    the code behind it to enable it to work. Our user interface will contain an input
    box to enter a new item into our bucket list. Secondly, we have to design the
    UI for the list of `Bucket-List` items.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Designing the UI involves two main implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the input box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the `ion-list` element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will have a look at each.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the input box
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first thing we are going to implement is an input box. This input box is
    the form where the users of our app will enter an interesting item they wish to
    add in the `Bucket-List` application. This will be in the form of an HTML textarea
    input box with some Ionic CSS styles applied to it in order to give it a more
    mobile look and feel. There also will be a button next to the input box with the
    label **ADD**. This button will be what we tap after we have typed some text and
    want it to appear as a part of our list. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up the `Bucket-List` application you created earlier in your favorite text
    editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the `index.html` file that can be found in the `www` folder of your
    project. You will see a screen that closely resembles what we have in the following
    screenshot:![Implementing the input box](img/00018.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can see that this boilerplate code already contains some code for some custom
    Ionic elements just like we saw in our first application in [Chapter 2](part0019_split_000.html#I3QM1-798adc86542b445d8a1bb648e10b6714
    "Chapter 2. To-Do List App"), *To-Do List App* all of which are prefixed with
    `ion`. Pay close attention to the `<ion-content>` element! This element is the
    element that contains the bits and pieces of our application or the content area.
    It is in between this element that we are going to place all the markup for our
    `Bucket-List` application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by placing the code for the input box of our application. I have
    provided the code for our input box in the following code block. You are to place
    this code within the `<ion-content>` element in your `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is the HTML code that will display an input box and a button
    as we described earlier. If you pay close attention to the markup, you will see
    that some elements contain some classes. These classes are custom Ionic classes
    that are available as part of the Ionic CSS. The Ionic CSS comes with a lot of
    nifty classes and features, but for now just be aware of these classes and know
    that they are part of the Ionic CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run your app in the browser using the `ionic serve` method, you should
    be able to see something that looks very similar to what I have in the following
    screenshot. Enter the following command in a terminal window to run your app using
    the `ionic serve` method. Make sure you run it from the root folder of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You should be able to see the input box with the button placed on its right-hand
    side.
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the input box](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Implementing the ion-list application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next step of developing our `Bucket-List` application is to implement the
    `ion-list` application. We are going to use one of the built-in components called
    `ion-list`. The `ion-list` element is a component for creating and rendering lists.
    It has a lot of cool features that let us render complex lists that can have side
    options. Take a look at the following screenshot that shows the mail app from
    an iOS mobile device showing a list of features that we can implement using `ion-list`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the ion-list application](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As seen above, one of the most obvious features we can implement with `ion-list`
    is the ability to show options when we swipe on a list item. It also has other
    features like the ability to delete items or rearrange them.
  prefs: []
  type: TYPE_NORMAL
- en: Using ion-list for our Bucket-List app
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For our `Bucket-List` application, we will be aiming to use the `<ion-list>`
    component to render every item we enter through the input box. In addition, we
    would want to be able to delete each item from the list by simply swiping from
    the left and thus revealing a delete button, which we can click. The following
    screenshot gives a sample graphic breakdown of what we aim to achieve and what
    items are involved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using ion-list for our Bucket-List app](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The ion-list component
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The first thing we will do is implement the code for our `<ion-list>` component.
    The following code is the code for`<ion-list>`. You are to copy this code and
    place it just below the code for the input box you already implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is the top-level component needed to create our `<ion-list>`component.
    The `<ion-list>`component has some attributes that let us perform some more complex
    implementations. We will not be exploring these attributes but it is worth knowing
    that they do exist.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to implement the child item for our`<ion-list>` component.
    Each item in an `<ion-list>`component is called `<ion-item>`.
  prefs: []
  type: TYPE_NORMAL
- en: ion-item
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: As briefly noted in the previous subsection about the `<ion-list>`component,
    each item in an `<ion-list>` is called an `<ion-item>`. Within an `<ion-item>`,
    we will put the code for what we want each list item to render. It is also the
    `<ion-item>` where we will use Angular's `ng-repeat` feature. For our application,
    we simply want to render the name of each `Bucket-List` item. This means that
    we can think of every `Bucket-List` item as an `<ion-item>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, we are just going to have some dummy text in our implementation showing
    how a `Bucket-List` item will prospectively look. The following block of code
    is the implementation of our `<ion-item>` representing a `Bucket-List` item in
    our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a sample representation of our `<ion-item>`. If you still have your
    app running in the browser via the `ionic serve` technique, you should be able
    to see the `<ion-item>` rendered just like in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ion-item](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, with that implementation completed, there is one more thing we need to
    do in order to finish the implementation of the user interface of our `Bucket-List`
    app. The one thing remaining is the delete feature. Remember from our initial
    implementation plan that we want the user to be able to swipe each item in our
    list and have a **Delete** button revealed. Luckily for us, the `<ion-item>` component
    has a neat feature for this called the `<ion-option>`.
  prefs: []
  type: TYPE_NORMAL
- en: ion-option-button
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The `<ion-option-button>` component lives within an `<ion-item>` component
    as its child. Its sole purpose is to allow us to define buttons that we can reveal
    when the user of our app swipes from the right of each `<ion-item>`component just
    like in the original sample screenshot of our implementations. To get this implementation
    underway, copy the following code and paste it just before the closing tag of
    your `<ion-item>` component markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you have a look at the preceding code, you can see that`<ion-option-button>`
    has a class attribute of `button-assertive`. This is also another Ionic class
    that is used to define a red button by default on Ionic buttons. Ionic has some
    built-in classes to easily add colors to elements. We will be discussing this
    later on in this book but for now just be aware of this feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'By now, your final code for your`<ion-item>`component should look something
    similar to what I have in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Your final code for your `<ion-content>` component should closely resemble
    what we have in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, we have completed the implementation of the user interface of our
    `Bucket-List` application using the `<ion-list>` component. Provided you still
    have your app running in the browser via the `ionic serve` technique, go and try
    to swipe the sample list item in your app from the left-hand side. You should
    be able to see a **Delete** button when you do this. See the following screenshot
    for guidance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ion-option-button](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With this step completed, we are finished with the user interface of our application
    completely. Now, it is time we start to wire up the app by focusing on the Angular
    code that we will be writing to ensure our application works the way we want it
    to.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the Angular code for our Bucket-List app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we begin, let's recap what behavior we want to implement in order for
    our application to work the way we want it to.
  prefs: []
  type: TYPE_NORMAL
- en: Coding our input box
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first thing we want is to be able to enter some text into our input box
    later. After we enter the text, we want to click the **Add** button and have this
    text entered into an array that holds all out `Bucket-List` items. To begin this
    first, we create our Angular controller that will hold all the logic for our app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the controller
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Open to the `app.js` file of your application in your favorite IDE. This file
    can be found in the `js` folder, which is found in the `www` folder of your app.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'There should already be a folder called `starter` with code similar to that
    which I have in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To begin, we will first start by creating a controller called `BucketListController`
    just after where we declared our module. If you have done this correctly, you
    should have code that closely resembles the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With this done, we have now completed the process of creating our controller
    called `BucketLisController`. This controller is where all the logic for our app
    will live.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the input box model
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We are going to need to create a model that will be bound to our input box.
    This model will be in the form of an object, and it will hold the data that will
    be represented by the text we enter in our input box. We will call this model
    `bucketListItem`. To create this model, simply enter the following code within
    `BucketListController` that you just created in the previous step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is initializing the model for our `bucketListItem` model.
    This model has a property called `title` that will hold the text of what we type
    in the input box at every point in time.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an array for the Bucket-List items
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The aim of our app is to have a list of the `Bucket-List` items. These items,
    as we enter them in our input box, will need to be stored in an array. We are
    going to create this array, and we will simply call it `bucketListItems`. This
    array is what we will use in Angular''s `ng-repeat` attribute to iterate and render
    in our view. To create this array for our `Bucket-List` items, simply attach an
    array called `bucketListItems` to the `$scope` variable of your controller. The
    following code illustrates this step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Implementing code for the Add button
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The final step to ensure that we are able to add items to our Bucket-List app
    with the input is by writing the code in the form of a function for the **Add**
    button. This button is responsible for two things. Firstly, it will ensure that
    the current text in our input box is added as an entry to the output box array
    of the `Bucket-List` items. Secondly, it will also clear up the model to ensure
    that after we click the button, the input box is cleared up for the next item.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code represents the implementation for our **Add** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding code you can see that we have created a function called `addBucketListItem`,
    and attached it to the `$scope` variable of our controller so it is available
    to our view. Within our function, we first add the current value of the `bucketListItem`
    variable to our `bucketListItems` array. Secondly, we clear up the `bucketListItem`
    variable to ensure it is cleared for the next entry.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can go ahead and implement the preceding code within your controller.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Delete button
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The last piece of our code is to implement the **Delete** button of our `<ion-option-button>`.
    Remember that we want this button to be able to delete the item which it belongs
    to. The following code shows the implementation of the **Delete** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code simply shows how we have created a function called `deleteBucketListItem`.
    This function takes in the index of the current item to be deleted as a parameter.
    It then uses this index to remove the corresponding element that is placed in
    that index from the `bucketListItems` array, which holds all our `Bucket-List`
    items.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that complete, we have pretty much finished the code aspect of our application.
    Your final controller should look similar to what I have in the following code
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, before we go ahead and test your application, we have one last step to
    complete. We need to wire up all the code we have just created with the UI we
    implemented earlier so that they can work together.
  prefs: []
  type: TYPE_NORMAL
- en: Wire it all up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With our controller ready, now we have to go ahead and wire all the code to
    the UI so that they can work together in harmony.
  prefs: []
  type: TYPE_NORMAL
- en: Binding the controller
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The first thing we need to do is to wire up the controller we created. The simple
    and easiest way to do this is by simply using Angular's `ng-controller` attribute
    directive to specify our controller. In our case, we will be wiring the controller
    on `<ion-content>` of our app. Once again, open up the `index.html` file of your
    application. Find the opening `<ion-content>` tag of the page and specify an `ng-controller`
    attribute with the name of your controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your code should closely resemble the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This code is simply telling Angular that we wish to use `BucketListController`
    within the scope of this `<ion-content>` element. This means that all the methods
    and properties scoped within this controller are now available to the `<ion-content>`
    element and all its descendant elements.
  prefs: []
  type: TYPE_NORMAL
- en: Binding the input box model
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The next step is to ensure that the `bucketListItem` variable we created in
    our controller is data bound to our input box in the view. Angular also has a
    simple but great attribute directive for this called `ng-model`. We simply provide
    `ng-model` with a value that matches an object or variable that we want to data
    bind to. In our case, we want to data bind to the title property of our `bucketListItem`
    variable from our controller. Again, I have provided the following code for your
    convenience:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The preceding piece of code we just added tells Angular to bind this variable
    to this input box. Therefore, anytime the value of the input changes from the
    view, we have the same value in our controller and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up the Add button
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The **Add** button is next in line for our implementation. For this button,
    we simply need to tell it to run our `addBucketListItem` function every time it
    is clicked. Once again, Angular has a helper directive for this called the `ng-click`
    directive. The `ng-click` directive is like the classic Java `onClick` event listener
    and you provide it with a function that you want to run every time the wired element
    is clicked. The following code demonstrates how we can wire up our **Add** button
    with the `ng-click` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code implementation simply ensures that when the **Add** button
    is clicked, the `addBucketListener` function will run with its expected behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Binding ion-item
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The last part of our wiring up will be to wire our `bucketListItems` array to
    our `Ion-Item` elements, and also bind the `ion-option-button` element to our
    `deleteBucketListItem()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Using ng-repeat to render the list
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Right now we have a sample implementation that has one hardcoded `ion-item`.
    However, we will want a more dynamic solution where we automatically render the
    items within the `bucketListItems` array each as an `ion-item`. For this implementation,
    we are going to use one of the most important Angular features in the form of
    `ng-repeat`. The `ng-repeat` angular directive lets us dynamically repeat an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right now, you have a code that looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We are going to change this implementation to use the `ng-repeat` directive
    of Angular. The following code shows you how this is achieved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code now uses Angular's `ng-repeat` attribute. This code tells
    Angular to repeat the `bucketListItems` array and also binds the title of each
    item to an HTML `<h2>` element.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up the ion-option-button element
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'The `ion-option-button` element is still untouched and will do nothing if we
    don''t tell it to do so. All we need to do for this element is to provide it with
    a function we want to be executed when it is clicked, like we did with the **Add**
    button. For this, we will be using the `ng-click` directive again, but this time,
    we will point it to the `deleteBucketListItem()` function from our controller.
    The following code shows just how we can achieve that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding code, you will notice one alien thing, `$index` being specifically
    passed as a parameter for our `deleteBucketListItem` function. This variable is
    a magic variable that the `ng-repeat` directive of Angular exposes to us. It represents
    the index of the current element being rendered by `ng-repeat`. With this index,
    we can learn what particular element should be deleted from our array of bucket
    list items, and delete the correct one.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final `<ion-content>` in your `index.html` file should closely resemble
    what I have in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Testing our Bucket-List app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have completed the implementation of our application, and now it is time
    for us to see it in action. Ensure you have your app running in the browser via
    the `ionic serve` technique, and test it. Try entering some things into your `Bucket-List`
    app such as skydiving, jet-skiing, and so on. You should see that every time you
    enter an item and click **Add**, the item will appear in the list and the input
    box will clear up ready for your next input. Also, make sure you test the delete
    option by swiping an item from the left to reveal the **Delete** button, and clicking
    it to see the item disappear.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on creating our `Bucket-List` application from scratch
    using the Ionic blank template. We also learned to use the `<ion-list>` component
    of Ionic and its child elements. We wrote some Angular code to wire everything
    up and got it running. The `<ion-list>`component is a very powerful component,
    and although the task of this chapter might appear a bit more complex that the
    previous ones, there are still some more powerful features that the `<ion-list>`
    component lets us do. For more information about `<ion-list>`, visit the official
    documentation of `<ion-list>` from the provided links in the appendix of this
    book to learn even more complex features.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be learning some very exciting stuff about creating
    side menu applications with Ionic. We will also build ourselves a tourist application
    and work with the AJAX calls for the very first time using Angular's `$HTTP` service.
  prefs: []
  type: TYPE_NORMAL
