["```js\n// app.js\nvar App = {\n  Models: {},\n  Collections: {},\n  Routers: {},\n  start() {\n    // Initialize all available routes\n    _.each(_.values(this.Routers), function(Router) {\n      new Router();\n    });\n\n    // Create a global router to enable sub-applications to\n    // redirect to other urls\n    App.router = new DefaultRouter();\n    Backbone.history.start();\n  }\n}\n```", "```js\n// apps/contacts/router.js\n'use strict';\n\nApp.Routers = App.Routers || {};\n\nclass ContactsRouter extends Backbone.Router {\n  constructor(options) {\n    super(options);\n    this.routes = {\n      'contacts': 'showContactList',\n      'contacts/page/:page': 'showContactList',\n      'contacts/new': 'createContact',\n      'contacts/view/:id': 'showContact',\n      'contacts/edit/:id': 'editContact'\n    };\n    this._bindRoutes();\n  }\n\n  showContactList(page) {\n    // Page should be a postive number grater than 0\n    page = page || 1;\n    page = page > 0 ? page : 1;\n\n    var app = this.startApp();\n    app.showContactList(page);\n  }\n\n  createContact() {\n    var app = this.startApp();\n    app.showNewContactForm();\n  }\n\n  showContact(contactId) {\n    var app = this.startApp();\n    app.showContactById(contactId);\n  }\n\n  editContact(contactId) {\n    var app = this.startApp();\n    app.showContactEditorById(contactId);\n  }\n\n  startApp() {\n    return App.startSubApplication(ContactsApp);\n  }\n}\n\n// Register the router to be initialized by the infrastructure\n// Application\nApp.Routers.ContactsRouter = ContactsRouter;\n```", "```js\nvar App = {\n  // ...\n  // Only a subapplication can be running at once, destroy any\n  // current running subapplication and start the asked one\n  startSubApplication(SubApplication) {\n    // Do not run the same subapplication twice\n    if (this.currentSubapp &&\n        this.currentSubapp instanceof SubApplication) {\n      return this.currentSubapp;\n    }\n\n    // Destroy any previous subapplication if we can\n    if (this.currentSubapp && this.currentSubapp.destroy) {\n      this.currentSubapp.destroy();\n    }\n\n    // Run subapplication\n    this.currentSubapp = new SubApplication({\n      region: App.mainRegion\n    });\n    return this.currentSubapp;\n  },\n}\n```", "```js\n// apps/contacts/app.js\n'use strict';\n\nclass ContactsApp {\n  constructor(options) {\n    this.region = options.region;\n  }\n\n  showContactList() {\n    App.trigger('loading:start');\n    App.trigger('app:contacts:started');\n\n    new ContactCollection().fetch({\n      success: (collection) => {\n        // Show the contact list subapplication if\n        // the list can be fetched\n        this.showList(collection);\n        App.trigger('loading:stop');\n      },\n      fail: (collection, response) => {\n        // Show error message if something goes wrong\n        App.trigger('loading:stop');\n        App.trigger('server:error', response);\n      }\n    });\n  }\n\n  showNewContactForm() {\n    App.trigger('app:contacts:new:started');\n    this.showEditor(new Contact());\n  }\n\n  showContactEditorById(contactId) {\n    App.trigger('loading:start');\n    App.trigger('app:contacts:started');\n\n    new Contact({id: contactId}).fetch({\n      success: (model) => {\n        this.showEditor(model);\n        App.trigger('loading:stop');\n      },\n      fail: (collection, response) => {\n        App.trigger('loading:stop');\n        App.trigger('server:error', response);\n      }\n    });\n  }\n\n  showContactById(contactId) {\n    App.trigger('loading:start');\n    App.trigger('app:contacts:started');\n\n    new Contact({id: contactId}).fetch({\n      success: (model) => {\n        this.showViewer(model);\n        App.trigger('loading:stop');\n      },\n      fail: (collection, response) => {\n        App.trigger('loading:stop');\n        App.trigger('server:error', response);\n      }\n    });\n  }\n\n  showList(contacts) {\n    var contactList = this.startController(ContactList);\n    contactList.showList(contacts);\n  }\n\n  showEditor(contact) {\n    var contactEditor = this.startController(ContactEditor);\n    contactEditor.showEditor(contact);\n  }\n\n  showViewer(contact) {\n    var contactViewer = this.startController(ContactViewer);\n    contactViewer.showContact(contact);\n  }\n\n  startController(Controller) {\n    if (this.currentController &&\n        this.currentController instanceof Controller) {\n      return this.currentController;\n    }\n\n    if (this.currentController &&\n        this.currentController.destroy) {\n      this.currentController.destroy();\n    }\n\n    this.currentController = new Controller({\n      region: this.region\n    });\n    return this.currentController;\n  }\n}\n```", "```js\n// apps/contacts/contactLst.js\nclass ContactList {\n  constructor(options) {\n    // Region where the application will be placed\n    this.region = options.region;\n\n    // Allow subapplication to listen and trigger events,\n    // useful for subapplication wide events\n    _.extend(this, Backbone.Events);\n  }\n\n  showList(contacts) {\n    // Create the views\n    var layout = new ContactListLayout();\n    var actionBar = new ContactListActionBar();\n    var contactList = new ContactListView({collection: contacts});\n\n    // Show the views\n    this.region.show(layout);\n    layout.getRegion('actions').show(actionBar);\n    layout.getRegion('list').show(contactList);\n\n    this.listenTo(contactList, 'item:contact:delete',\n      this.deleteContact);\n  }\n\n  createContact() {\n    App.router.navigate('contacts/new', true);\n  }\n\n  deleteContact(view, contact) {\n    let message = 'The contact will be deleted';\n    App.askConfirmation(message, (isConfirm) => {\n      if (isConfirm) {\n        contact.destroy({\n          success() {\n            App.notifySuccess('Contact was deleted');\n          },\n          error() {\n            App.notifyError('Ooops... Something went wrong');\n          }\n        });\n      }\n    });\n  }\n\n  // Close any active view and remove event listeners\n  // to prevent zombie functions\n  destroy() {\n    this.region.remove();\n    this.stopListening();\n  }\n}\n```", "```js\n  deleteContact(view, contact) {\n    let message = 'The contact will be deleted';\n    App.askConfirmation(message, (isConfirm) => {\n      if (isConfirm) {\n        contact.destroy({\n          success() {\n            App.notifySuccess('Contact was deleted');\n          },\n          error() {\n            App.notifyError('Ooops... Something went wrong');\n          }\n        });\n      }\n    });\n  }\n```", "```js\n// app.js\nvar App = {\n  // ...\n  askConfirmation(message, callback) {\n    var isConfirm = confirm(message);\n    callback(isConfirm);\n  }\n};\n```", "```js\n// app.js\nvar App = {\n  // ...\n\n  askConfirmation(message, callback) {\n    var options = {\n      title: 'Are you sure?',\n      type: 'warning',\n      text: message,\n      showCancelButton: true,\n      confirmButtonText: 'Yes, do it!',\n      confirmButtonColor: '#5cb85c',\n      cancelButtonText: 'No'\n    };\n\n    // Show the message\n    swal(options, function(isConfirm) {\n      callback(isConfirm);\n    });\n  }\n};\n```", "```js\n// app.js\nvar App = {\n  // ...\n\n    notifySuccess(message) {\n    new noty({\n      text: message,\n      layout: 'topRight',\n      theme: 'relax',\n      type: 'success',\n      timeout: 3000 // close automatically\n    });\n  },\n\n  notifyError(message) {\n    new noty({\n      text: message,\n      layout: 'topRight',\n      theme: 'relax',\n      type: 'error',\n      timeout: 3000 // close automatically\n    });\n  }\n};\t\n```"]