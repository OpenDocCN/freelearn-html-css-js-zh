- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Event-Driven Architecture
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Events are one of the most powerful ways to use Node.js. Node.js was designed
    from the ground up to build event-driven modules. Many core libraries offer an
    events interface that can be used and extended easily. Also, Node.js provides
    a powerful events library that can be used to build event-driven modules.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we delve into events in Node.js. We will learn how to use events
    from the core libraries, from event listener registration to event emission, and
    handling multiple listeners for the same event.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: We will build our first HTTP server using events, and we will discuss the organization
    of event listeners and the cleanup.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up, here are the main topics that we will explore in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Introducing events
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watching for file changes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Node.js event emitter library
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your first HTTP server
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an event layer to your modules
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will know how to use events and even how to
    include an event interface in your modules.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code files for the chapter can be found at [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Check out the code in action video for this chapter on [https://youtu.be/opZER2MY1Yc](https://youtu.be/opZER2MY1Yc)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Introducing events
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the real world, events are occurrences. For example, when you click a button,
    a click event is triggered. When you receive a message, a message received event
    is triggered. When you save a file, a file saved event is triggered. Events are
    present everywhere. In Node.js, events are also present everywhere.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: So, when we talk about events in Node.js, we are talking about the same concept
    as in the real world. Events are occurrences, and we produce them or consume them.
    In some cases, one entity produces an event, and another entity consumes it. In
    other cases, the same entity produces and consumes the event. This can be very
    flexible; it is even possible that many entities consume the same event, or many
    entities produce the same event.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are familiar with the frontend world, you may have implemented handlers
    when a button is clicked, something like this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this case, the `addEventListener` method receives two arguments, the event
    name and the callback function. The callback function will be called when the
    event is triggered. In this case, the event name is `click`, but you can subscribe
    to many other events, such as `mouseover`, `mouseout`, `keydown`, `keyup`, `change`,
    and `submit`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: If you have worked with other programming languages, you may have heard about
    the Observer, Publish/Subscribe, and mediator patterns. In this chapter, we will
    explore how to use the Node.js events library to build event-driven modules and
    explore how the core libraries are using this architecture.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: One of the best ways to get familiar with events is by using the Node.js core
    API to handle files. We can subscribe to events and react when a file is modified.
    So, in the next section, we will explore this topic in detail.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Watching for file changes
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we are already familiar with the Node.js filesystem library, let’s build
    a simple script that watches for file changes. We will use the `fs.watch` method
    to watch for file changes. This method receives two arguments, the path to the
    file to watch and a callback function that will be called when the file changes.
    The callback function receives two arguments, the event type and the filename.
    The event type can be `rename` or `change`. The `rename` event is triggered when
    the file is renamed or deleted. The change event is triggered when the file is
    modified.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will create a simple program to detect file changes:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a file called `watch.mjs` and add the following code:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a file called `watch.txt` and run the script with the following command:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Open the watch.txt file, add some text, and save the changes. You will see
    that the script prints the following output:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As you can see, the `change` event is triggered, and the filename is provided.
    Now, rename the file and save the changes. You will see that the script prints
    the following output:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the next section, we will learn how we can implement custom events inside
    of our application and how we can emit and consume them.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: The Node.js event emitter library
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to watch for file changes, let’s explore the Node.js events
    library. This library provides an `EventEmitter` class that can be used to build
    simple interface to register and unregister event listeners and emit events.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a file called `event-emitter.mjs` and add the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, we created an instance of the `EventEmitter` class and registered
    an event listener for the `message` event. Then, we emit the `message` event with
    the message `Hello world!`. If you run the script, you will see that the message
    is printed in the console.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also register multiple event listeners and emitters for the same event;
    this is a common practice when you want to modularize code and/or you want from
    the same event to trigger multiple actions. Let’s say that you receive an incoming
    request, and you want to store a copy of that message and also notify that to
    the final user; by using events, you can handle both actions in parallel. Let’s
    modify the previous example by adding the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let’s analyze the code. First, we use the `setInterval` method to emit the
    `message` event every second. Then, we register an additional event listener for
    the `message` event. This event listener will be called every time the `message`
    event is emitted. Then, we register an event listener using the `once` method.
    This event listener will be called only once, but if you want to keep listening
    for more than one message, you can use `on` – for example, when you listen for
    incoming request in an HTTP server application. Finally, we use the `setTimeout`
    method to emit the `message` event after 2.5 seconds. If you run the script, you
    will see that the following output is printed:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Preventing chaos by organizing the listeners
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One important thing to note is that the event listeners are called synchronously.
    This means that the event listeners are called in the same order that they are
    registered. Also, remember that you can use more channels to communicate between
    processes. In our example, we used `message`, but you can use any name you want
    or have multiple channels to better segment communication.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Removing listeners when they are not needed
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `EventEmitter` class provides `removeListener` and `off` methods that can
    be used to remove an event listener, as well as a `removeAllListeners` method
    that can be used to remove all event listeners for a given event. You can find
    more information about it in the official documentation: [https://nodejs.org/docs/latest-v20.x/api/events.html](https://nodejs.org/docs/latest-v20.x/api/events.html).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will create our first HTTP server with Node.js, which
    is one of the most commons ways to use events while doing web applications in
    Node.js.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Your first HTTP server
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to use the `EventEmitter` class, let’s build a simple HTTP
    server. We will use the `http` core library to create the server and the `EventEmitter`
    class to handle the requests. In [*Chapter 9*](B21678_09.xhtml#_idTextAnchor244),
    we will explore in more detail how to build HTTP servers and clients, but for
    now, let’s focus on building our first HTTP server.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a file called `server.mjs` and add the following code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this example, we created an instance of the `http.Server` class and registered
    an event listener for the `request` event. This event listener will be called
    every time a request is received. Then, we use the `writeHead` method to set the
    status code and the content type of the response. Finally, we use the `end` method
    to send the response. If you run the script, you will see that the following output
    is printed:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And if you open the URL in any browser, you will see your first HTTP server
    in action:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – A screenshot from the application running](img/B21678_07_1.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – A screenshot from the application running
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to encapsulate the events in our modules
    and a lot other components to emit and consume those events easily. This technique
    is quite popular and extendable to many libraries.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Adding an event layer to your modules
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to use the `EventEmitter` class, let’s add an event layer
    to our modules. In this example, we will create a module that will be used to
    save files and emit an event every time a file change is saved.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a file called `utils.mjs` and add the following code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this example, we created an instance of the `EventEmitter` class and exported
    the `save` function. This function will be used to save the file and emit the
    `file:saved` event. Then, we export the `on` method of the `EventEmitter` class.
    This method will be used to register event listeners for the `file:saved` event.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Important info
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: In the example, we used `bind` to check that the `this` value is correct. You
    can find more information about it in the official documentation at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
    The use of `bind` is quite advanced, so you can skip it for now.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s create a file called `index.mjs` and add the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you run the script, you will see that the following output is printed:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, the `file:saved` event is emitted after the `save` function
    is completed. This means that the `save` function does not block the execution
    of the script. In previous examples in the book, we used `then` to handle the
    result of a promise; in this case, we offered an alternative, using events that
    will allow you to decouple the logic of your application more easily.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about how to use events in Node.js. We learned about
    the `EventEmitter` class and how to use it to emit and listen to events. We also
    learned how to use events to decouple the logic of our applications.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we built a script to watch for changes in files in our system,
    and we also built our first HTTP server and learned how to handle requests using
    events.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we built a simple library that exports an event layer to decouple the
    logic of our applications. This will allow us to build more robust applications
    in future chapters.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to add tests to our applications. This
    will help us to build more robust applications, avoid bugs, and overall, consolidate
    our knowledge about Node.js while learning it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Refactoring Guru – the Mediator* *pattern*: [https://refactoring.guru/design-patterns/mediator](https://refactoring.guru/design-patterns/mediator)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Refactoring Guru – the Observer* *pattern*: [https://refactoring.guru/design-patterns/observer](https://refactoring.guru/design-patterns/observer)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*NodeConf Remote 2020 - Anna Henningsen - Node.js and the struggles of being
    an* *EventTarget*: [https://www.youtube.com/watch?v=SOPC3aLoD4U](https://www.youtube.com/watch?v=SOPC3aLoD4U)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*NodeConf Remote 2020 - 安娜·亨宁森 - Node.js以及作为* *EventTarget* *的挑战*: [https://www.youtube.com/watch?v=SOPC3aLoD4U](https://www.youtube.com/watch?v=SOPC3aLoD4U)'
- en: '*The Node.js event* *emitter*: [https://nodejs.org/en/learn/asynchronous-work/the-nodejs-event-emitter](https://nodejs.org/en/learn/asynchronous-work/the-nodejs-event-emitter)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Node.js事件发射器*: [https://nodejs.org/en/learn/asynchronous-work/the-nodejs-event-emitter](https://nodejs.org/en/learn/asynchronous-work/the-nodejs-event-emitter)'
