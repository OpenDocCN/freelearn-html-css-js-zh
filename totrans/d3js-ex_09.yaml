- en: Chapter 9. Complex Shapes Using Paths
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 3](ch03.html "Chapter 3. Creating Visuals with SVG"), *Creating
    Visuals with SVG*, we briefly examined the concept of paths. We saw that we could
    use paths and their associated mini-language to create multi-segment renderings
    by creating a sequence of commands. These paths, although very powerful, can be
    cumbersome to create manually.
  prefs: []
  type: TYPE_NORMAL
- en: But don't fret, as D3.js provides a number of objects to create complex paths
    using just a few JavaScript statements. These **path generators** take much of
    the pain out of creating complex paths manually, as they do the heavy lifting
    of assembling the sequence of commands automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, an important type of graph we have not looked at in this book
    is a line graph. This has been purposefully pushed off until now, as it is the
    most commonly used to create lines using path generators. After the examples in
    this chapter, the power of the path to create lines will be evident.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of path data generators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lines and area generators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arcs and pie generators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Symbols generators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diagonals and radial generators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line interpolators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of path data generators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: D3.js goes to great lengths to make using SVG easy, particularly when creating
    complex paths. To do this, D3 provides a number of helper functions referred to
    as path generators that have been created to handle the gory details of path generation
    from a set of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The generators we examine will follow a common pattern of usage, so once you
    learn to use one, the use of the others will come naturally. These steps include:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the `generator` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specifying accessor functions that can be used to find the *X* and *Y* values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calling any additional methods to specify various rendering instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a path to the visual.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specifying the data using `.datum()`on that path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And finally, setting the `d` attribute of the path to the generator, which tells
    the path where to find the `generator` object for the path.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once these are completed and D3.js renders the visual, it uses the generator
    that is attached to a `d` attribute and creates path commands based on your data.
    This is also why we use `.datum()` instead of `.data()`, as datum assigns the
    data to just that one element and does not force the execution of an enter-update-exit
    loop on that data.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's examine doing this with various common generators—this will be fun!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a sequence of lines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The line generator creates the necessary commands to draw a sequence of lines
    that are connected to each other:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (9.1): [http://goo.gl/eAgBjL](http://goo.gl/eAgBjL)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding example creates a single line path generator and renders it twice,
    resulting in the following graphics:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a sequence of lines](img/B04230_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The path generator is created with the following data and using a `d3.svg.line()`
    object. On that object, we call two functions, `x()` and `y()`, which we give
    a function that tells the generator how to locate the *X* and *Y* values for each
    datum:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to add a path, call its .`datum()` function passing the data,
    and setting the `d` attribute at a minimum to specify which generator to use.
    The example creates two paths that use the same data and generator but apply a
    different fill:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This path specifies two lines. The default operation for a line path is to connect
    the last point with the first and fill in the internals. In the case of the first
    path, this is a black fill and results in the black triangle (if you zoom in,
    you will see the `steelblue` outline on two of the sides). The latter path sets
    the fill to empty, so the result is just the two lines.
  prefs: []
  type: TYPE_NORMAL
- en: This example also demonstrates using a single path generator but applying a
    transform and a different style to the actual path.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examining the generated SVG, we see that D3.js has created the two paths and
    automatically generated the path data that is assigned to the `d` property of
    the path:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a sequence of lines](img/B04230_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Areas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An area path generator allows us to make line plots where the area below the
    line plot is filled in with a particular color. A practical use of these is for
    the creation of area graphs. The following example demonstrates the creation of
    an area graph:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (9.2): [http://goo.gl/7Xmo7u](http://goo.gl/7Xmo7u)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This preceding example results in something that looks like the following image.
    The data is random, so it will be different each time it runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Areas](img/B04230_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The data is generated by generating 100 random numbers between 0 and 30, and
    defining `Y` as the random value and `X` increasing in increments of 10:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The path is generated using a `d3.svg.area()` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'An area path generator requires providing three accessor functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`x()`: This specifies where to get the *X* values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y0()`: This gets the position of the baseline of the area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y1()`: This retrieves the height at the given `x()` value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The actual SVG path is then created and styled similar to the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: Creating arcs, donuts, wedges, and segments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An arc is a slice of a circle that has a portion of it swept through two specific
    angles. An arc swept through a full 360 degrees will actually result in a circle.
    A sweep of less than 360 degrees gives you a wedge of that circle and is often
    called a pie **wedge**.
  prefs: []
  type: TYPE_NORMAL
- en: An arc is created using the `d3.svg.arc()` function. This generator takes four
    parameters, describing the mathematics of the arc. The size of the wedge is defined
    by using the `.outerRadius()` function and an inner radius that is specified using
    `.innerRadius()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example uses an arc to draw a circle:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (9.3): [http://goo.gl/fJN80J](http://goo.gl/fJN80J)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating arcs, donuts, wedges, and segments](img/B04230_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The code to create the generator is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The generator specifies an inner radius of `0` and outer radius of `60`. The
    start and end angles are in radians and sweep out an entire circle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example increases the size of the inner radius to create a donut:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (9.4): [http://goo.gl/NDVPRw](http://goo.gl/NDVPRw)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating arcs, donuts, wedges, and segments](img/B04230_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The only difference in the code is the call to `.innerRadius()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We have now created a donut! Now how about an example of creating a pie wedge?
    We can create a pie wedge by specifying an inner radius of `0` and setting the
    start angle and end angle to not sweep out a full 360 degrees, as shown in the
    following example.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate, the following example creates a pie wedge sweeping between
    `45` and `105` degrees:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (9.5): [http://goo.gl/cNizYk](http://goo.gl/cNizYk)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating arcs, donuts, wedges, and segments](img/B04230_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The generator for the preceding pie wedge is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'A final example for arcs is to create a segment by increasing the inner radius
    of the previous example to be greater than 0:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (9.6): [http://goo.gl/24djAS](http://goo.gl/24djAS)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating arcs, donuts, wedges, and segments](img/B04230_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a pie chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most common type of charts is the pie chart (it is also one of the
    most reviled). A pie chart could be created by using multiple arc generators and
    placing them manually.
  prefs: []
  type: TYPE_NORMAL
- en: To make this simpler, D3.js provides us with a tool to help us generate pies
    and the associated arcs with a generator for pies, `d3.layout.pie()`. From an
    array of data, this function will generate an array of arc specifications that
    we can then use to generate all the pie segments automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s examine the creation of a pie:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (9.7): [http://goo.gl/omVW2n](http://goo.gl/omVW2n)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code results in the following pie chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a pie chart](img/B04230_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The example starts by declaring values that represent each piece of the pie
    and then we pass that to the `d3.layout.pie()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you examine the contents of `pieSegments,` you will see a series of objects
    similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use this data via an arc generator and generate the pie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Exploding the pie
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can make an exploded pie by setting the width of the border of the pie wedges.
    The following example demonstrates this in action. We''ll skip the walkthrough
    of the code, as it''s just adding a `stroke` and `stroke-width` to the previous
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (9.8): [http://goo.gl/fhQEau](http://goo.gl/fhQEau)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploding the pie](img/B04230_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a ring graph
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can also easily make this into a ring chart by increasing the inner radius,
    as shown in the following example (with a brief modification to the previous example):'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (9.9): [http://goo.gl/Mk60ws](http://goo.gl/Mk60ws)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a ring graph](img/B04230_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating symbols
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Symbols are little shapes that can be used on a chart, much like how we used
    small circles and squares in the chapter on scatter plots. D3.js comes with a
    generator that creates six symbols: circle, cross, diamond, square, triangle-down,
    and triangle-up.'
  prefs: []
  type: TYPE_NORMAL
- en: These symbols are named, and the `d3.svg.symbolTypes` contains an array of the
    names of the available symbol types. A symbol is then created by passing the symbol
    name to the `d3.svg.symbol().type()` function, which returns a path generator
    for the specified symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of rendering the available symbols is available at the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (9.10): [http://goo.gl/AM2ErM](http://goo.gl/AM2ErM)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code renders the following symbols as the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating symbols](img/B04230_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Perhaps they're not the most exciting things in the world, but they are useful
    for representing different data items on scatter plots or as point markers on
    line diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: Using diagonals to create curved lines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The diagonal is one of my personal favorites, and it can be used in many complex
    visualizations. This is a concept which I believe is best understood by seeing
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using diagonals to create curved lines](img/B04230_09_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The diagonal generator generates the curved lines between one point and a set
    of other points, generating the appropriate curves based on the position of the
    target points.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example creates the previous image:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (9.11): [http://goo.gl/by9B4S](http://goo.gl/by9B4S)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This example starts with defining the source and target positions using JavaScript
    objects, and then, by creating from those an array of objects representing every
    combination of `source` and `target`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then generate the curved lines using the following selection, which
    uses a `d3.svg.diagonal()` object as the generator of the path data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The circles are not rendered by the diagonal generator. The code renders and
    positions them based on the positions of the source and target points.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing line graphs using interpolators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's examine creating line graphs using a number of the built-in line generators.
    The capability for rendering lines in D3.js is very robust, and can be used to
    generate lines with straight segments, or to fit curves through a series of points
    using a number of different algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 'When rendering a line using a line generator, D3.js applies an interpolator
    across your data to determine how to create the path segments that connect your
    data points. The following tables lists the available line interpolators that
    are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Interpolator | Operation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `linear` | Straight lines between points |'
  prefs: []
  type: TYPE_TB
- en: '| `linear-closed` | Closes the line segment, last point to first, making a
    polygon |'
  prefs: []
  type: TYPE_TB
- en: '| `step-before` | Step-wise drawing vertically then horizontally |'
  prefs: []
  type: TYPE_TB
- en: '| `step-after` | Step-wise drawing horizontally then vertically |'
  prefs: []
  type: TYPE_TB
- en: '| `basis` | Renders a b-spline curve with control points at the ends |'
  prefs: []
  type: TYPE_TB
- en: '| `basis-open` | Renders a b-spline curve with control points at the ends,
    not closing the loop |'
  prefs: []
  type: TYPE_TB
- en: '| `basic-closed` | Renders a b-spline curve with control points at the ends,
    closing the loop |'
  prefs: []
  type: TYPE_TB
- en: '| `bundle` | Equivalent to basis, but with a tension parameter |'
  prefs: []
  type: TYPE_TB
- en: '| `cardinal` | A cardinal spline, with control points at the ends |'
  prefs: []
  type: TYPE_TB
- en: '| `cardinal-open` | A cardinal spline, with control points at the ends; the
    line may not intersect the end points, but will pass through the internal points
    |'
  prefs: []
  type: TYPE_TB
- en: '| `cardinal-closed` | Closes the cardinal spline into a loop |'
  prefs: []
  type: TYPE_TB
- en: '| `monotone` | A cubic interpolation that preserves monotonicity in y |'
  prefs: []
  type: TYPE_TB
- en: The default is to use a linear interpolator, which essentially draws a straight
    line between each pair of adjacent points. We will take a look at each of these,
    as I think they are worth demonstrating (and are fun!).
  prefs: []
  type: TYPE_NORMAL
- en: 'The example is available at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'bl.ock (9.12): [http://goo.gl/MdjuPz](http://goo.gl/MdjuPz)'
  prefs: []
  type: TYPE_NORMAL
- en: The application presents the user with two options. One is to select the type
    of interpolation and the other is to select a tension value, which is only used
    when the selected interpolation is bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example then generates a cycle of a sine wave that is represented by 8
    points. As an example, the result is the following when linear interpolation is
    selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing line graphs using interpolators](img/B04230_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The application starts by creating the dropdown boxes and the main SVG element
    in HTML. It then sets up the scales for the sine wave to map the points into the
    SVG. The first time the page is loaded, and upon every change of a selection for
    interpolation or tension, the `redraw()` function is called and the graph is generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `redraw()` function retrieves the current value from the interpolation
    dropdown and uses it to create the line path generator using the selected value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If the selected interpolation is bundle, it also retrieves the selected value
    for the tension and applies that value to the line path generator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The lines are then generated using a path and the associated generator and then
    circles are added at the location of each point.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's examine what each of these interpolations does to render our sine
    wave.
  prefs: []
  type: TYPE_NORMAL
- en: Linear and linear-closed interpolators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The linear interpolator draws straight lines between the points:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Linear and linear-closed interpolators](img/B04230_09_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Linear closed is a slight variant that also connects the last point to the
    first:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Linear and linear-closed interpolators](img/B04230_09_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step-before and step-after interpolations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best way to demonstrate a step-before and step-after is just by giving examples.
    But essentially, each pair of points are connected by two lines, one horizontal
    and the other vertical.
  prefs: []
  type: TYPE_NORMAL
- en: 'With step-before, the vertical line come first:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step-before and step-after interpolations](img/B04230_09_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A step-after renders the horizontal line first:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step-before and step-after interpolations](img/B04230_09_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating curved lines using the basis interpolation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **basis** curve will pass through the end points but may not pass through
    internal points. The internal points influence the curve of the line, but it is
    not necessary that the line runs through any of the internal points.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of the basis interpolation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating curved lines using the basis interpolation](img/B04230_09_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A **basis-open** interpolation does not pass through the end points. It looks
    similar to basis, but with the line not being drawn between the first and second
    points and between the next to last and last points:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating curved lines using the basis interpolation](img/B04230_09_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Why would we want this? This would be in the case where the first and last are
    control points and can be changed in the *X* and *Y* values to influence how the
    curve moves through the inner points. Examining this is beyond the scope of this
    book, but I challenge you to take the concepts that you learned in [Chapter 8](ch08.html
    "Chapter 8. Adding User Interactivity"), *Adding User Interactivity*, allowing
    the user to drag the control points around, and see how that changes the flow
    of the line.
  prefs: []
  type: TYPE_NORMAL
- en: '**basis-closed** tells the generator to close the loop and ensure the loop
    is smooth across all points (the small change in code is omitted again). The result
    is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating curved lines using the basis interpolation](img/B04230_09_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pretty awesome! As you can see, you can use these interpolators to create really
    complex curved shapes. Imagine doing this by creating the path commands all by
    yourself. I dare you to examine the path commands for this line—there are a lot
    of them.
  prefs: []
  type: TYPE_NORMAL
- en: Creating curved lines using the bundle interpolation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`bundle` is similar to `basis,` except you can specify a parameter for the
    amount of tension in the line that is generated. Tension allows you to control
    how tightly the line will conform to the given points. To specify tension, chain
    the `.tension()` function with a parameter value between `0.0` and `1.0` (the
    default is `0.7`). The following shows a selected tension of `0.75`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating curved lines using the bundle interpolation](img/B04230_09_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see how the generated line (well, curve) is now influenced a lot less
    closely by the points. If you set the value to `0.0`, this would actually be a
    straight line. To demonstrate efficiently other values for tension, the following
    table demonstrates the change in shape at various points of tension from `0.0`
    to `1.0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Tension | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `0.0` | ![Creating curved lines using the bundle interpolation](img/B04230_09_22.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `0.5` | ![Creating curved lines using the bundle interpolation](img/B04230_09_23.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `1.0` | ![Creating curved lines using the bundle interpolation](img/B04230_09_24.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: If you compare a tension of `1.0` to the basis interpolation, you will notice
    they are identical.
  prefs: []
  type: TYPE_NORMAL
- en: Creating curved lines using the cardinal interpolation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`cardinal` curves are like `basis` curves, except that the lines are forced
    to run through all points. The following graph demonstrates the normal, open,
    and closed forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Interpolation | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| cardinal | ![Creating curved lines using the cardinal interpolation](img/B04230_09_25.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| cardinal-open | ![Creating curved lines using the cardinal interpolation](img/B04230_09_26.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: '| cardinal-closed | ![Creating curved lines using the cardinal interpolation](img/B04230_09_27.jpg)
    |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we examined several techniques of creating complex shapes using
    D3.js path data generators. We started with examples of common generators, including
    line, area, circles, donuts, arcs, and diagonals. These are extremely powerful
    tools and enhance your ability to create complex visualizations easily.
  prefs: []
  type: TYPE_NORMAL
- en: We finished the chapter with an examination of line interpolators, a means of
    informing the line path generator of how to fit lines between data points. These
    interpolations, including the default linear interpolation, are for the basis
    of efficiently creating complex line graphs and curved shapes that fit data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter on layouts, we will move a little higher up the visual stack
    of D3.js to examine layouts, which are essentially generators for complex data
    visualizations.
  prefs: []
  type: TYPE_NORMAL
