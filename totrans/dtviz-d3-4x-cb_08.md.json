["```js\n<script type=\"text/javascript\"> \n// First we define the chart object using a functional object \n\nfunction lineChart() { // <-1A \n    ... \n    // main render function  \n    _chart.render = function () { // <-2A \n    ... \n    }; \n\n    // axes rendering function \n    functionrenderAxes(svg) { \n        ... \n    } \n    ... \n\n    // function to render chart body \n    function renderBody(svg) { // <-2D         \n    ... \n    } \n\n    // function to render lines \n    function renderLines() { \n    ... \n    } \n\n    // function to render data points \n    function renderDots() { \n\n    } \n\n    return _chart; // <-1E \n} \n\n```", "```js\nfunction lineChart() { // <-1A \n        var _chart = {}; \n\n        var _width = 600, _height = 300, // <-1B \n            _margins = {top: 30, left: 30, right: 30, bottom: 30}, \n            _x, _y, \n            _data = [], \n            _colors = d3.scaleOrdinal(d3.schemeCategory10), \n            _svg, \n            _bodyG, \n            _line; \n\n      ... \n\n      _chart.width = function (w) { \n            if (!arguments.length) return _width; \n            _width = w; \n            return _chart; \n        }; \n\n        _chart.height = function (h) { // <-1C \n            if (!arguments.length) return _height; \n            _height = h; \n            return _chart; \n        }; \n\n        _chart.margins = function (m) { \n            if (!arguments.length) return _margins; \n            _margins = m; \n            return _chart; \n        }; \n\n        ... \n\n       _chart.addSeries = function (series) { // <-1D \n            _data.push(series); \n            return _chart; \n        }; \n\n        return _chart; // <-1E \n} \n\n... \n\nvar chart = lineChart() \n            .x(d3.scaleLinear().domain([0, 10])) \n            .y(d3.scaleLinear().domain([0, 10])); \n\ndata.forEach(function (series) { \n    chart.addSeries(series); \n}); \n\nchart.render(); \n\n```", "```js\n_chart.render = function () { // <-2A \n  if (!_svg) { \n    _svg = d3.select(\"body\").append(\"svg\") // <-2B \n      .attr(\"height\", _height) \n      .attr(\"width\", _width); \n\n    renderAxes(_svg); \n\n    defineBodyClip(_svg); \n  } \n\n  renderBody(_svg); \n}; \n... \nfunction defineBodyClip(svg) { // <-2C \n  var padding = 5; \n\n  svg.append(\"defs\") \n    .append(\"clipPath\") \n    .attr(\"id\", \"body-clip\") \n    .append(\"rect\") \n    .attr(\"x\", 0 - padding) \n    .attr(\"y\", 0) \n    .attr(\"width\", quadrantWidth() + 2 * padding) \n    .attr(\"height\", quadrantHeight()); \n  } \n\nfunction renderBody(svg) { // <-2D \n  if (!_bodyG) \n    _bodyG = svg.append(\"g\") \n      .attr(\"class\", \"body\") \n      .attr(\"transform\", \"translate(\"  \n        + xStart() + \",\"  \n        + yEnd() + \")\") // <-2E \n      .attr(\"clip-path\", \"url(#body-clip)\");         \n\n  renderLines(); \n\n  renderDots(); \n} \n... \n\n```", "```js\nfunction renderAxes(svg) { // <-3A \n    varaxesG = svg.append(\"g\") \n                   .attr(\"class\", \"axes\"); \n\n    renderXAxis(axesG); \n\n    renderYAxis(axesG); \n} \n\n```", "```js\nfunction renderLines() { \n        _line = d3.line() //<-4A \n                        .x(function (d) { return _x(d.x); }) \n                        .y(function (d) { return _y(d.y); }); \n\n         var pathLines = _bodyG.selectAll(\"path.line\") \n                    .data(_data); \n\n        pathLines \n                .enter() //<-4B \n                    .append(\"path\") \n                .merge(pathLines) \n                    .style(\"stroke\", function (d, i) { \n                        return _colors(i); //<-4C \n                    }) \n                    .attr(\"class\", \"line\") \n                .transition() //<-4D \n                    .attr(\"d\", function (d) {  \n                                return _line(d);  \n                    }); \n} \n\nfunction renderDots() { \n    _data.forEach(function (list, i) { \n        var circle = _bodyG.selectAll(\"circle._\" + i) //<-4E \n                .data(list); \n\n        circle.enter() \n                .append(\"circle\") \n            .merge(circle) \n                .attr(\"class\", \"dot _\" + i) \n                .style(\"stroke\", function (d) { \n                    return _colors(i); //<-4F \n                }) \n            .transition() //<-4G \n                .attr(\"cx\", function (d) { return _x(d.x); }) \n                .attr(\"cy\", function (d) { return _y(d.y); }) \n                .attr(\"r\", 4.5); \n    }); \n} \n\n```", "```js\n... \n\nfunction renderBody(svg) { \n        if (!_bodyG) \n            _bodyG = svg.append(\"g\") \n                    .attr(\"class\", \"body\") \n                    .attr(\"transform\", \"translate(\"  \n                        + xStart() + \",\"  \n                        + yEnd() + \")\")  \n                    .attr(\"clip-path\", \"url(#body-clip)\");         \n\n        renderLines(); \n\n        renderAreas(); \n\n        renderDots(); \n    } \n\n    function renderLines() { \n        _line = d3.line() \n                        .x(function (d) { return _x(d.x); }) \n                        .y(function (d) { return _y(d.y); }); \n\n        var pathLines = _bodyG.selectAll(\"path.line\") \n                .data(_data); \n\n        pathLines.enter() \n                    .append(\"path\") \n                .merge(pathLines) \n                    .style(\"stroke\", function (d, i) { \n                        return _colors(i); \n                    }) \n                    .attr(\"class\", \"line\") \n                .transition() \n                    .attr(\"d\", function (d) { return _line(d); }); \n    } \n\n    function renderDots() { \n        _data.forEach(function (list, i) { \n            var circle = _bodyG.selectAll(\"circle._\" + i) \n                    .data(list); \n\n            circle.enter() \n                    .append(\"circle\") \n                .merge(circle) \n                    .attr(\"class\", \"dot _\" + i) \n                    .style(\"stroke\", function (d) { \n                        return _colors(i); \n                    }) \n                .transition() \n                    .attr(\"cx\", function (d) { return _x(d.x); }) \n                    .attr(\"cy\", function (d) { return _y(d.y); }) \n                    .attr(\"r\", 4.5); \n        }); \n    } \n\n    function renderAreas() { \n        var area = d3.area() // <-A \n                    .x(function(d) { return _x(d.x); }) \n                    .y0(yStart()) \n                    .y1(function(d) { return _y(d.y); }); \n\n        var pathAreas = _bodyG.selectAll(\"path.area\") \n                .data(_data); \n\n        pathAreas.enter() // <-B \n                .append(\"path\") \n            .merge(pathAreas) \n                .style(\"fill\", function (d, i) {  \n                    return _colors(i);  \n                }) \n                .attr(\"class\", \"area\") \n            .transition() // <-D \n                .attr(\"d\", function (d) {  \n                    return area(d); // <-E \n                }); \n    } \n... \n\n```", "```js\nvar area = d3.area() // <-A \n  .x(function(d) { return _x(d.x); }) \n  .y0(yStart()) \n  .y1(function(d) { return _y(d.y); }); \n\n```", "```js\nVar pathAreas = _bodyG.selectAll(\"path.area\") \n                .data(_data); \n\npathAreas.enter() // <-B \n.append(\"path\") \n.merge(pathAreas) // <-B2 \n.style(\"fill\", function (d, i) {  \n    return _colors(i); // <-C \n  }) \n  .attr(\"class\", \"area\") \n.transition() // <-D \n  .attr(\"d\", function (d) {  \n       return area(d); // <-E \n  }); \n\n```", "```js\n.area { \n  stroke: none; \n  fill-opacity: .2; \n} \n\n```", "```js\n... \n\n_symbolTypes = d3.scaleOrdinal() // <-A \n                  .range([d3.symbolCircle, \n                            d3.symbolCross, \n                            d3.symbolDiamond, \n                            d3.symbolSquare, \n                            d3.symbolStar, \n                            d3.symbolTriangle, \n                            d3.symbolWye \n                ]); \n\n... \n\nfunction renderBody(svg) { \n    if (!_bodyG) \n        _bodyG = svg.append(\"g\") \n            .attr(\"class\", \"body\") \n            .attr(\"transform\", \"translate(\" \n                            + xStart() + \",\" \n                            + yEnd() + \")\") \n            .attr(\"clip-path\", \"url(#body-clip)\"); \n\n            renderSymbols(); \n} \n\nfunction renderSymbols() { // <-B \n    _data.forEach(function (list, i) { \n        var symbols = _bodyG.selectAll(\"path._\" + i) \n                        .data(list); \n\n        symbols.enter() \n                .append(\"path\") \n            .merge(symbols) \n                .attr(\"class\", \"symbol _\" + i) \n                .classed(_symbolTypes(i), true) \n            .transition() // <-C \n                .attr(\"transform\", function(d){ \n                           return \"translate(\" // <-D \n                                    + _x(d.x) \n                                    + \",\" \n                                    + _y(d.y) \n                                    + \")\"; \n                }) \n                .attr(\"d\", \n                        d3.symbol() // <-E \n                            .type(_symbolTypes(i)) \n                ); \n        }); \n} \n... \n\n```", "```js\n_symbolTypes = d3.scaleOrdinal() // <-A \n                        .range([d3.symbolCircle, \n                            d3.symbolCross, \n                            d3.symbolDiamond, \n                            d3.symbolSquare, \n                            d3.symbolStar, \n                            d3.symbolTriangle, \n                            d3.symbolWye \n                        ]); \n\n```", "```js\n\n_data.forEach(function (list, i) { \n    var symbols = _bodyG.selectAll(\"path._\" + i) \n                        .data(list); \n\n    symbols.enter() \n            .append(\"path\") \n        .merge(symbols) \n            .attr(\"class\", \"symbol _\" + i) \n            .classed(_symbolTypes(i), true) \n        .transition() // <-C \n            .attr(\"transform\", function(d){ \n                            return \"translate(\" // <-D \n                                    + _x(d.x) \n                                    + \",\" \n                                    + _y(d.y) \n                                    + \")\"; \n            }) \n            .attr(\"d\",d3.symbol() // <-E \n                                .type(_symbolTypes(i)) \n            ); \n}); \n\n```", "```js\n... \n\nvar _width = 600, _height = 300, \n                _margins = {top: 30, left: 30, right: 30, bottom: 30}, \n                _x, _y, _r, // <-A \n                _data = [], \n                _colors = d3.scaleOrdinal(d3.schemeCategory10), \n                _svg, \n                _bodyG; \n\n        _chart.render = function () { \n            if (!_svg) { \n                _svg = d3.select(\"body\").append(\"svg\") \n                        .attr(\"height\", _height) \n                        .attr(\"width\", _width); \n\n                renderAxes(_svg); \n\n                defineBodyClip(_svg); \n            } \n\n            renderBody(_svg); \n        }; \n... \nfunction renderBody(svg) { \n        if (!_bodyG) \n            _bodyG = svg.append(\"g\") \n                    .attr(\"class\", \"body\") \n                    .attr(\"transform\", \"translate(\" \n                            + xStart() \n                            + \",\" \n                            + yEnd() + \")\") \n                    .attr(\"clip-path\", \"url(#body-clip)\"); \n\n           renderBubbles(); \n} \n\nfunction renderBubbles() { \n        _r.range([0, 50]); // <-B \n\n        _data.forEach(function (list, i) { \n            var bubbles = _bodyG.selectAll(\"circle._\" + i) \n                   .data(list); \n\n            bubbles.enter() \n                        .append(\"circle\") // <-C \n                    .merge(bubbles) \n                        .attr(\"class\", \"bubble _\" + i) \n                        .style(\"stroke\", function (d, j) { \n                            return _colors(j); \n                        }) \n                        .style(\"fill\", function (d, j) { \n                            return _colors(j); \n                        }) \n                    .transition() \n                        .attr(\"cx\", function (d) { \n                            return _x(d.x); // <-D \n                        }) \n                        .attr(\"cy\", function (d) { \n                            return _y(d.y); // <-E \n                        }) \n                        .attr(\"r\", function (d) { \n                            return _r(d.r); // <-F \n                        }); \n        }); \n} \n... \n\n```", "```js\nvar _width = 600, _height = 300, \n  _margins = {top: 30, left: 30, right: 30, bottom: 30}, \n  _x, _y, _r, // <-A \n  _data = [], \n  _colors = d3.scale.category10(), \n  _svg, \n  _bodyG; \n\n```", "```js\n\nfunction renderBubbles() { \n        _r.range([0, 50]); // <-B \n\n        _data.forEach(function (list, i) { \n            var bubbles = _bodyG.selectAll(\"circle._\" + i) \n                   .data(list); \n\n            bubbles.enter() \n                        .append(\"circle\") // <-C \n                    .merge(bubbles) \n                        .attr(\"class\", \"bubble _\" + i) \n                        .style(\"stroke\", function (d, j) { \n                            return _colors(j); \n                        }) \n                        .style(\"fill\", function (d, j) { \n                            return _colors(j); \n                        }) \n                    .transition() \n                        .attr(\"cx\", function (d) { \n                            return _x(d.x); // <-D \n                        }) \n                        .attr(\"cy\", function (d) { \n                            return _y(d.y); // <-E \n                        }) \n                        .attr(\"r\", function (d) { \n                            return _r(d.r); // <-F \n                        }); \n        }); \n} \n\n```", "```js\n... \n\nvar _chart = {}; \n\n    var _width = 600, _height = 250, \n            _margins = {top: 30, left: 30, right: 30, bottom: 30}, \n            _x, _y, \n            _data = [], \n            _colors = d3.scaleOrdinal(d3.schemeCategory10), \n            _svg, \n            _bodyG; \n\n    _chart.render = function () { \n        if (!_svg) { \n            _svg = d3.select(\"body\").append(\"svg\") \n                    .attr(\"height\", _height) \n                    .attr(\"width\", _width); \n\n            renderAxes(_svg); \n\n            defineBodyClip(_svg); \n        } \n\n        renderBody(_svg); \n    }; \n... \nfunction renderBody(svg) { \n        if (!_bodyG) \n            _bodyG = svg.append(\"g\") \n                    .attr(\"class\", \"body\") \n                    .attr(\"transform\", \"translate(\"  \n                            + xStart()  \n                            + \",\"  \n                            + yEnd() + \")\") \n                    .attr(\"clip-path\", \"url(#body-clip)\"); \n\n        renderBars(); \n    } \n\n    function renderBars() { \n        var padding = 2; // <-A \n\n        var bars = _bodyG.selectAll(\"rect.bar\") \n                .data(_data); \n        bars.enter() \n                .append(\"rect\") // <-B \n            .merge(bars) \n                .attr(\"class\", \"bar\") \n            .transition() \n                .attr(\"x\", function (d) {  \n                    return _x(d.x); // <-C \n                }) \n                .attr(\"y\", function (d) {  \n                    return _y(d.y); // <-D  \n                }) \n                .attr(\"height\", function (d) {  \n                    return yStart() - _y(d.y);  \n                }) \n                .attr(\"width\", function(d){ \n                    return Math.floor(quadrantWidth() /                              \n                              _data.length) - padding; \n                }); \n    } \n... \n\n```", "```js\nfunctionrenderBars() { \n  var padding = 2; // <-A \n  ... \n} \n\n```", "```js\nvar bars = _bodyG.selectAll(\"rect.bar\") \n                .data(_data); \n\n        bars.enter() \n                .append(\"rect\") // <-B \n            .merge(bars) \n                .attr(\"class\", \"bar\") \n            .transition() \n                .attr(\"x\", function (d) {  \n                    return _x(d.x); // <-C \n                }) \n                .attr(\"y\", function (d) {  \n                    return _y(d.y); // <-D  \n                }) \n                .attr(\"height\", function (d) {  \n                    return yStart() - _y(d.y);  \n                }) \n                .attr(\"width\", function(d){ \n                    return Math.floor(quadrantWidth() / \n                           _data.length) - padding; \n                }); \n\n```", "```js\n.attr(\"width\", function(d){ \n    returnMath.floor(quadrantWidth() / _data.length) - padding; \n}); \n\n```"]