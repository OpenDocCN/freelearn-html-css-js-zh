["```js\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<title>Ext JS started Setup Test</title>\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"../extjs4/resources/css/ext-all.css\"></link>\n\n<script type=\"text/javascript\" src=\"img/ext-all-dev.js\"></script>\n\n<script type=\"text/javascript\">\n\nExt.onReady(function() {\n Ext.Msg.alert(\"Ext JS 4 Starter\",\"Welcome to Ext 4 Starter!\");\n }); \n\n</script>\n\n</head>\n\n<body>\n</body>\n\n</html> \n```", "```js\n<!DOCTYPE>\n<html>\n<head>\n<title>Ext JS started Index Page </title>\n<meta name=\"Author\" content=\"Nagarajan Bhava\">\n<link rel=\"stylesheet\" type=\"text/css\" \nhref=\"../ext-4.1.1a/resources/css/ext-all.css\"></link>\n<script type=\"text/javascript\" src=\"img/ext-dev.js\">\n</script>\n<script type=\"text/javascript\" src=\"img/starterApp.js\">\n</script>\n</head>\n<body>\n  <h2> Ext JS Starter <h2> \n</body>\n</html>\n```", "```js\nExt.application({\n  name :'app',  \nrequires:['Ext.window.MessageBox'],\n  launch:function(){\n    console.log(\"Welcome to Ext Starter Tutorial\");\n    Ext.Msg.alert(\"Message\",\" Welcome to Ext Starter Tutorial\");\n  }\n});\n```", "```js\nExt.define('app.extJsBook'){  \n  config:{\n    title:'',\n    price:'',\n    author:''\n  },\n  constructor:function(config){\n    this.initConfig(config)\n  }\n};\n```", "```js\n//Setting values using setter methods.\n\nvar book = Ext.create('app.extjsBook');\nbook.setTitle(\"ExtJSStarter\");\nbook.setPrice(\"10$\");\nbook.setAuthor('John');\n\nconsole.log(\"Message 1 - \",book.getTitle());\n//This message will be overridden by the second message\nExt.Msg.alert(\"Message 1 - \",book.getTitle());\n\n// Setting values during instantiation\n\nvar book2 = Ext.create('app.extjsBook',{\n  title:'Ext JS Upgrade',\n  author:'Alex',\n  price:'20$'    \n});\nExt.Msg.alert(\"Message 2 - \",book2.getTitle());\n```", "```js\nExt.application({\n  name:'app',    \n  requires:['Ext.window.MessageBox',\n 'app.extjsBook'],\n  launch:function(){\n    console.log(\"Welcome to Ext Starter Tutorial\");\n    Ext.Msg.alert(\"Message\",\"Welcome to Ext Starter Tutorial\");\n\n    var book = Ext.create('app.extjsBook');\n    book.setTitle(\"ExtJSStarter\");\n    book.setPrice(\"10$\");\n    book.setAuthor('John');\n\n    console.log(\"Message 1 - \" +book.getTitle());\n    Ext.Msg.alert(\"Message 2- \",book.getTitle());\n\n    var book2 = Ext.create('app.extjsBook',{\n      title:'Ext JS Upgrade',\n      author:'Alex',\n      price:'20$'    \n    });\n    Ext.Msg.alert(\"Message 2 - \",book2.getTitle());\n  }\n\n});\n```", "```js\nExt.define('app.extjsBook',{      \n  config:{\n    title:'',\n    price:'',\n    author:''\n  },\n  constructor:function(config){\n    this.initConfig(config)\n  },\n// changing the title to upper case\n  applyTitle:function(value){\n return Ext.String.capitalize(value.toUpperCase());\n  },\n//Logging both new and old value\n  updateAuthor:function(newValue, oldValue){\n    console.log(\"NewVal- \" +newValue +\":\"+ \"Old Val- \" +oldValue);  }\n});\n```", "```js\nvar extjsBookPanel = Ext.create('Ext.panel.Panel', {\n      bodyPadding: 5, \n      width: 300,\n      title: 'extjsBookPanel',\n      items: [{\n xtype: 'textfield',\n          fieldLabel: 'Publish date'        \n        },\n Ext.create('app.extjsButton', {\n          text: 'Custom button instantiated'+ \n             'using Ext.create()',       \n        }),  {\n xtype: 'extjsButton',\n          text:'Custom button instantiated using xtype'            }],\n renderTo: Ext.getBody()\n    });\n```", "```js\n    Ext.define('app.extjsBook',{\n     xtype:'extjsButton',\n     extend:'Ext.button.Button',\n      constructor:function(config){\n     //Call Ext.button.Button parent class\n        this.callParent(arguments);\n      }  \n    });\n    ```", "```js\nExt.create(\"Ext.container.Viewport\",{\nlayout:'fit',\nitems:[{\n xtype:'panel',\n    width:300,\n    html:'A Panel inside viewport',\n    title:'Viewport Panel'\n  }]\n});\n```", "```js\nExt.create(\"Ext.container.Viewport\",{\n  layout:'fit',\n  items:[{\n    xtype:'container',        \n    // html:'A Panel inside viewport',\n    defaults:{\n      margin:'5 5 0 5'\n    },    \n    layout:'vbox',\n    items:[{\n        xtype:'textfield',\n        fieldLabel:'Name',\n/*\n* Custom CSS specification. The 'defaults' margin property need to be * commented in order to see the effect of marginBottom.  \n*/\n    style:{marginBottom:'20px',color:'blue'}\n\n      },{\n        xtype:'button',\n        text:'submit'\n      }]\n    }]\n});\n```", "```js\n{\n  xtype:'buttongroup',\n  columns:3,\n  title:'Days',\n  items:[{xtype:'button',text:1},\n     {xtype:'button',text:2},\n     {xtype:'button',text:2}]\n}\n```", "```js\nExt.create('Ext.tab.Panel', {  \nwidth: 400,\nheight: 400,\nactiveTab:0,\n//layout:'fit',\n  //layout:'absolute',\n  //x:10, y:10,\n   renderTo: document.body,\n   items: [{    \n   title:'Page 1',\n    html:'Page1'\n    }, {\n    xtype:'panel',\n   title:'Page 2',\n    html:'Page2'   \n  }]\n});\n```", "```js\ndockedItems:[{\n    xtype:'toolbar', dock:'bottom',\n    items:[{xtype:'button', text:'Docked Button'}]\n  }],\n```", "```js\nvar cardComp =Ext.create('Ext.container.Container', {\n  layout:'card',\n  width: 400,\n  height: 400,\n  renderTo: document.body,\n  items: [{\n    title: 'Page 1',\n    html:'Page1'\n  }, {\n    title: 'Page 2',\n    html:'Page2'\n\n  }]\n});\n//Show the second item visible by uncommenting this line.\n//cardComp.getLayout().setActiveItem(1);\n```", "```js\nExt.define('app.model.Users',{\n  extend:'Ext.data.Model',\n  idProperty:'name', //default to id\n  fields: [\n      {name: 'name',type:'string'}, \n      {name:'email'},\n      {name:'age',type:'int'},\n      {name:'employed',type:'boolean'}\n  ],      \n  capitalizeName:function(){\n    this.set('name',Ext.util.Format.uppercase(this.get('name')));\n  },\n  validations:[\n    {type:'length',field:'age',min:2}\n  ],\n});\n```", "```js\nproxy:{\n  type:'ajax',\n url:'/ExtjsStarter/data/Users.json'\n}\n```", "```js\n[{name:'David',email:'david@motorola.com',age:32,employed:true},\n{name:'Jonny',email:'jonny@sencha.com',age:20,employed:false},\n{name:'Anthony',email:'anthony@google.com',age:42.5,employed:true},\n{name:'Steffi',email:'steffi@facebook.com',age:26,employed:true}]\n```", "```js\nvar extJS_UserStore = Ext.create('Ext.data.Store',{\n model:'app.model.Users',\n  autoLoad:true    \n});\n```", "```js\nvar extJS_UserGrid = Ext.create('Ext.grid.Panel',{\n  title:'Ext JS Users List',\n store:extJS_UserStore, //created in previous chapter\n  columns:[\n    {header:'Name',dataIndex:'name'},    \n    {header:'Age',dataIndex:'age',width:30},\n    {header:'Employed',dataIndex:'employed'},\n    {header:'Email',dataIndex:'email',flex:1}\n  ]\n\n});\n```", "```js\nExt.create('Ext.tab.Panel', {\n  width: 400,\n height: 200,  \n  dockedItems:[{\n    xtype:'toolbar',\n    dock:'bottom',\n    items:[{text:'Docked Button'}]\n  }],\n  renderTo: document.body,\n  items: [{    \n   title: 'Page 1',\n    items:[\n extJS_UserGrid \n    ]\n  }, {\n    xtype:'panel',\n   title: 'Page 2',    \n    html:'Page2'\n\n  }]\n});\n```", "```js\nExt.create('Ext.Panel',{\n  title:'ExtJS',\n id:'outerPanel',\n  items:[\n  {  \n    xtype:'textfield',\n id:'outerTextId',\n  },{  \n    xtype:'button',\n    text:'Submit',\n id:'buttonId'\n  },{\n    xtype:'panel',\n id:'innerPanel',\n    items:[{  \n      xtype:'textfield',\n      fieldLabel:'Country',\n id:'innerTextId',\n      cls:'innerTextCls'\n    }]\n  }]\n});\n```", "```js\n{\n  xtype:'form',bodyPadding:10,\n  title:'A Form Panel',\n  width:300,height:400,\n url:'http://someurl.com/extjs.jsp',\n  items:[{\n    xtype:'textfield',\n    fieldLabel:'Name',\n vType:'alpha', //only alphabets are allowed\n allowBlank:false, minLength:2, maxLength:10 \n  } ,{\n    xtype:'checkbox',\n    boxLabel:'I agree terms and conditions',\n    name:'termsCB',\n formBind:true,disabled:true\n  }],\n  buttons:[{\n    text:'Submit',\n formBind:true,\n disabled:true,\n    handler:function(){\n      var form = this.up('form').getForm();\n      if(form.isValid()){  \n        form.submit({\n          success:function(form,action){Ext.Msg.alert(\"Success\".action.result.msg\");\n          },\n          failure:function(form,action){\n            Ext.Msg.alert(\"Success\".action.result.msg);\n          }\n        });  //submit end\n      }//form isValid end\n\n    }}]//buttons end\n  }]\n}\n```", "```js\n//_________ Server Response ___________________________\n/**\nNote: Please be informed that the response can be of JSON type also. Hence failure case can be categorized with ids and can be reported accordingly. \n{\n  \"success\":true,\n  \"msg\":\"Data Submitted Successfully\"\n}\n{\n  \"success\":false,\n  \"msg\":\"Data Submission failed\"  \n}\n**/\n```", "```js\nvar tplObj = Ext.create('Ext.XTemplate',\n  '<div> Hi {user}, How are you?</br> Are you from {city}</div>');\ntplObj.compile();\ntplObj.applyTemplate({user:'Tony',city:'London'}) //Object\n\nvar tplArray = Ext.create('Ext.XTemplate',\n    '<div> Hi {0}, How are you?</br> You are from {1}</div>');\ntplArray.compile();\ntplArray.applyTemplate(['Tony','London']) //Array\n\n<tpl for=\"xxx\">\n  //HTML fragment\n</tpl>\n</tpl>\n```", "```js\nExt.define('app.view.extjsUsersListView',{\n  extend: 'Ext.grid.Panel',\n alias : 'widget.extjsUsersList', \n  title : 'Ext JS Users', \n  initComponent: function() {\n this.store=extJS_UserStore,\n    this.columns=[\n      {header:'Name',dataIndex:'name'},    \n      {header:'age',dataIndex:'age',width:30},\n      {header:'employed',dataIndex:'employed'},\n      {header:'Email',dataIndex:'email',flex:1}\n    ]    \n   this.callParent(arguments);\n  }\n});\n```", "```js\nExt.define('app.controller. extjsUsersController, {\n extend: 'Ext.app.Controller',\n  views: [\n extjsUsersListView'\n  ],  \n  init: function() {\n console.log('Initialized!');\n\n```", "```js\n    this.control({\n      // Events of panel referred through Ext.ComponentQuery\n     'viewport > panel': {\n      //This event is fired, as the grid panel extends panel. \n        render: this.onPanelRendered\n     },\n      // Events of grid panel referred through its xtype\n 'extjsUsersList': {\n      itemclick: this.editUser,\n        afterrender:this.gridAfterRender\n     }\n    });   \n  }, \n  onPanelRendered: function() {\n console.log('The panel was rendered');\n  },\n  gridAfterRender: function(grid, opts) {\n console.log('Grid Component rendered');\n },\n  editUser: function(grid, record) {\n console.log('Clicked on ' + record.get('name'));\n  }\n})\n```", "```js\nExt.application({\n  name:'app',    \n  requires:['Ext.window.MessageBox','app.model.Users',\n 'app.controller.extjsUsersController',\n 'app.view.extjsUsersListView',\n    'Ext.container.Viewport','Ext.grid.Panel'\n  ],  \n  controllers: [\n    'extjsUsersController'\n  ],  \n  launch:function(){\n     Ext.create('Ext.container.Viewport', {     \n     items: [\n        {xtype:'extjsUsersList' }\n      ]\n    });\n  }\n});\n```", "```js\n<html>\n<head>\n<title>Ext Js started Index Page </title>\n<meta name=\"Author\" content=\"Nagarajan Bhava\">\n<link rel=\"stylesheet\" type=\"text/css\"     href=\"../extjs4/resources/css/ext-all.css\"></link>\n<script type=\"text/javascript\" src=\"img/ext-    dev.js\"></script>\n<script type=\"text/javascript\"     src=\"img/Users.json\"></script>\n <script type=\"text/javascript\"     src=\"img/mvcApp.js\"></script>\n</head>\n<body>\n</body>\n</html>\n\n```", "```js\n//Basic way\n<div id=\"divId\" onclick=\"alert('You clicked me')\">Click Here!</div>\n//Ext JS way\n Ext.get(divId).on('click', function() {alert('You clicked me');});\n```", "```js\n//Create panel\nvar myPanel = new Ext.Panel({...}); \n// Add event \"some_Event\"\nmyPanel.on('some_event', function(…) {…});   \n```", "```js\nMyPanel = Ext.extend(Ext.Panel, {\n  initComponent:function() {\n    ...\n     this.callParent(arguments);\n    ...\n    // add custom events\n    this.addEvents('loaded');\n  },\n  load:function(cfg) {\n    ....\n    // fire loaded event\n    this.fireEvent('loaded', this, cfg);\n  }  \n});\n```", "```js\nwin.relayEvents(MyPanel, ['loaded']); \nwin.on( {\n   'loaded' : function (panel, obj) {...},\n   scope : this\n});\n```"]