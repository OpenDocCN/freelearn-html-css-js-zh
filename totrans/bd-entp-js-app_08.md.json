["```js\n$ yarn add mocha --dev\n```", "```js\n$ tree\n.\n├── src\n│   └── feature\n│       ├── index.js\n│       └── index.unit.test.js\n└── test\n ├── db.integration.test.js\n └── app.integration.test.js\n```", "```js\n$ cd src/validators/errors\n$ mkdir messages\n$ mv messages.js messages/index.js\n$ touch messages/index.unit.test.js\n```", "```js\nimport assert from 'assert';\nimport generateValidationErrorMessage from '.';\n```", "```js\nimport assert from 'assert';\nimport generateValidationErrorMessage from '.';\n\ndescribe('generateValidationErrorMessage', function () {\n  it('should return the correct string when error.keyword is \"required\"', function () {\n    const errors = [{\n      keyword: 'required',\n      dataPath: '.test.path',\n      params: {\n        missingProperty: 'property',\n      },\n    }];\n    const actualErrorMessage = generateValidationErrorMessage(errors);\n    const expectedErrorMessage = \"The '.test.path.property' field is missing\";\n    assert.equal(actualErrorMessage, expectedErrorMessage);\n  });\n});\n```", "```js\n{\n    \"extends\": \"airbnb-base\",\n    \"rules\": {\n        \"no-underscore-dangle\": \"off\"\n    },\n    \"overrides\": [\n        {\n            \"files\": [\"*.test.js\"],\n            \"rules\": {\n                \"func-names\": \"off\",\n                \"prefer-arrow-callback\": \"off\"\n            }\n        }\n    ]\n}\n```", "```js\n{\n \"files\": [\"*.test.js\"],\n \"env\": {\n \"mocha\": true\n },\n \"rules\": {\n \"func-names\": \"off\",\n \"prefer-arrow-callback\": \"off\"\n }\n}\n```", "```js\n$ npx mocha\nWarning: Could not find any test files matching pattern: test\nNo test files found\n```", "```js\n$ npx mocha \"src/**/*.test.js\"\nsrc/validators/users/errors/index.unit.test.js:1\n(function (exports, require, module, __filename, __dirname) { import assert from 'assert';\n ^^^^^^\nSyntaxError: Unexpected token import\n ....\n```", "```js\n $ npx mocha \"src/**/*.test.js\" --require @babel/register\n\n generateValidationErrorMessage\n ![](img/20da118f-b69a-4d2c-acca-6fe1aaed606f.png) should return the correct string when error.keyword is \"required\"\n\n 1 passing (32ms)\n```", "```js\n\"test:unit\": \"mocha 'src/**/*.test.js' --require @babel/register\",\n```", "```js\n\"test\": \"yarn run test:unit && yarn run test:e2e\",\n```", "```js\n$ git add -A && \\\n git commit -m \"Implement first unit test for generateValidationErrorMessage\"\n```", "```js\nimport assert from 'assert';\nimport generateValidationErrorMessage from '.';\n\ndescribe('generateValidationErrorMessage', function () {\n  it('should return the correct string when error.keyword is \"required\"', function () {\n    const errors = [{\n      keyword: 'required',\n      dataPath: '.test.path',\n      params: {\n        missingProperty: 'property',\n      },\n    }];\n    const actualErrorMessage = generateValidationErrorMessage(errors);\n    const expectedErrorMessage = \"The '.test.path.property' field is missing\";\n    assert.equal(actualErrorMessage, expectedErrorMessage);\n  });\n  it('should return the correct string when error.keyword is \"type\"', function () {\n    const errors = [{\n      keyword: 'type',\n      dataPath: '.test.path',\n      params: {\n        type: 'string',\n      },\n    }];\n    const actualErrorMessage = generateValidationErrorMessage(errors);\n    const expectedErrorMessage = \"The '.test.path' field must be of type string\";\n    assert.equal(actualErrorMessage, expectedErrorMessage);\n  });\n  it('should return the correct string when error.keyword is \"format\"', function () {\n    const errors = [{\n      keyword: 'format',\n      dataPath: '.test.path',\n      params: {\n        format: 'email',\n      },\n    }];\n    const actualErrorMessage = generateValidationErrorMessage(errors);\n    const expectedErrorMessage = \"The '.test.path' field must be a valid email\";\n    assert.equal(actualErrorMessage, expectedErrorMessage);\n  });\n  it('should return the correct string when error.keyword is \"additionalProperties\"', function () {\n    const errors = [{\n      keyword: 'additionalProperties',\n      dataPath: '.test.path',\n      params: {\n        additionalProperty: 'email',\n      },\n    }];\n    const actualErrorMessage = generateValidationErrorMessage(errors);\n    const expectedErrorMessage = \"The '.test.path' object does not support the field 'email'\";\n    assert.equal(actualErrorMessage, expectedErrorMessage);\n  });\n});\n\n```", "```js\n$ yarn run test:unit\n\n generateValidationErrorMessage\n ![](img/6f12f9ec-a57d-48cb-a5f0-7f20588ce6e0.png) should return the correct string when error.keyword is \"required\"\n ![](img/6f12f9ec-a57d-48cb-a5f0-7f20588ce6e0.png) should return the correct string when error.keyword is \"type\"\n ![](img/6f12f9ec-a57d-48cb-a5f0-7f20588ce6e0.png) should return the correct string when error.keyword is \"format\"\n ![](img/6f12f9ec-a57d-48cb-a5f0-7f20588ce6e0.png) should return the correct string when error.keyword is \"additionalProperties\"\n ![](img/6f12f9ec-a57d-48cb-a5f0-7f20588ce6e0.png) should return the correct string when error.keyword is not recognized\n\n 5 passing (20ms)\n```", "```js\n$ git add -A && \\\n git commit -m \"Complete unit tests for generateValidationErrorMessage\"\n```", "```js\n$ cd src/validators/errors/ && \\\n mkdir validation-error && \\\n mv validation-error.js validation-error/index.js && \\\n cd ../../../\n```", "```js\nimport assert from 'assert';\nimport ValidationError from '.';\n\ndescribe('ValidationError', function () {\n  it('should be a subclass of Error', function () {\n    const validationError = new ValidationError();\n    assert.equal(validationError instanceof Error, true);\n  });\n  describe('constructor', function () {\n    it('should make the constructor parameter accessible via the `message` property of the instance', function () {\n      const TEST_ERROR = 'TEST_ERROR';\n      const validationError = new ValidationError(TEST_ERROR);\n      assert.equal(validationError.message, TEST_ERROR);\n    });\n  });\n});\n```", "```js\n$ git add -A && git commit -m \"Add unit tests for ValidationError\"\n```", "```js\n$ cd src/middlewares/ && \\\n mkdir check-empty-payload && \\\n mv check-empty-payload.js check-empty-payload/index.js && \\\n touch check-empty-payload/index.unit.test.js && \\\n cd ../../\n```", "```js\nimport assert from 'assert';\nimport checkEmptyPayload from '.';\n\ndescribe('checkEmptyPayload', function () {\n  describe('When req.method is not one of POST, PATCH or PUT', function () {\n    it('should not modify res', function () {\n      // Assert that `res` has not been modified\n    });\n\n    it('should call next() once', function () {\n      // Assert that `next` has been called once\n    });\n  });});\n```", "```js\n$ yarn add lodash.isequal lodash.clonedeep --dev\n```", "```js\nimport assert from 'assert';\nimport deepClone from 'lodash.clonedeep';\nimport deepEqual from 'lodash.isequal';\nimport checkEmptyPayload from '.';\n\ndescribe('checkEmptyPayload', function () {\n let req;\n let res;\n let next;\n  describe('When req.method is not one of POST, PATCH or PUT', function    \n  () {\n let clonedRes;\n\n beforeEach(function () {\n req = { method: 'GET' };\n res = {};\n next = spy();\n clonedRes = deepClone(res);\n checkEmptyPayload(req, res, next);\n });\n\n    it('should not modify res', function () {\n      assert(deepEqual(res, clonedRes));\n    });\n\n    it('should call next() once', function () {\n      // Assert that `next` has been called\n    });\n  });\n});\n```", "```js\n$ yarn add sinon --dev\n```", "```js\nimport { spy } from 'sinon';\n```", "```js\nconst next = spy();\n```", "```js\nit('should call next() once', function () {\n  assert(next.calledOnce);\n});\n```", "```js\ndescribe('checkEmptyPayload', function () {\n  let req;\n  let res;\n  let next;\n  ...\n  (['POST', 'PATCH', 'PUT']).forEach((method) => {\n describe(`When req.method is ${method}`, function () {\n describe('and the content-length header is not \"0\"', function () {\n let clonedRes;\n\n beforeEach(function () {\n req = {\n method,\n headers: {\n 'content-length': '1',\n },\n };\n res = {};\n next = spy();\n clonedRes = deepClone(res);\n checkEmptyPayload(req, res, next);\n });\n\n it('should not modify res', function () {\n assert(deepEqual(res, clonedRes));\n });\n\n it('should call next()', function () {\n assert(next.calledOnce);\n });\n });\n });\n });\n});\n```", "```js\ndescribe('and the content-length header is \"0\"', function () {\n  let resJsonReturnValue;\n\n  beforeEach(function () {\n    req = {\n      method,\n      headers: {\n        'content-length': '0',\n      },\n    };\n    resJsonReturnValue = {};\n    res = {\n      status: spy(),\n      set: spy(),\n      json: spy(),\n    };\n    next = spy();\n    checkEmptyPayload(req, res, next);\n  });\n\n  describe('should call res.status()', function () {\n    it('once', function () {\n      assert(res.status.calledOnce);\n    });\n    it('with the argument 400', function () {\n      assert(res.status.calledWithExactly(400));\n    });\n  });\n\n  describe('should call res.set()', function () {\n    it('once', function () {\n      assert(res.set.calledOnce);\n    });\n    it('with the arguments \"Content-Type\" and \"application/json\"', function () {\n      assert(res.set.calledWithExactly('Content-Type', 'application/json'));\n    });\n  });\n\n  describe('should call res.json()', function () {\n    it('once', function () {\n      assert(res.json.calledOnce);\n    });\n    it('with the correct error object', function () {\n      assert(res.json.calledWithExactly({ message: 'Payload should not be empty' }));\n    });\n  });\n\n  it('should not call next()', function () {\n    assert(next.notCalled);\n  });\n});\n```", "```js\nresJsonReturnValue = {};\nres = {\n  status: spy(),\n  set: spy(),\n  json: stub().returns(resJsonReturnValue),\n};\n```", "```js\ndescribe('and the content-length header is \"0\"', function () {\n  let resJsonReturnValue;\n  let returnedValue;\n\n  beforeEach(function () {\n    ...\n    returnedValue = checkEmptyPayload(req, res, next);\n  });\n\n  ...\n\n  it('should return whatever res.json() returns', function () {\n assert.strictEqual(returnedValue, resJsonReturnValue);\n });\n\n  ...\n});\n```", "```js\n$ git add -A && git commit -m \"Add unit tests for checkEmptyPayload middleware\"\n```", "```js\nimport create from '../../../engines/users/create';\nfunction createUser(req, res, db) {\n  create(req, db)\n .then(onFulfilled, onRejected)\n .catch(...)\n}\n```", "```js\nimport { stub } from 'sinon';\nimport ValidationError from '../../../validators/errors/validation-error';\n\nconst createStubs = {\n  success: stub().resolves({ _id: 'foo'}),\n  validationError: stub().rejects(new ValidationError()),\n  otherError: stub().rejects(new Error()),\n}\n```", "```js\nfunction createUser(req, res, db, create, ValidationError) {\n  create(req)\n    .then(onFulfilled, onRejected)\n    .catch(...)\n}\n```", "```js\n...\nimport ValidationError from '../../../validators/errors/validation-error';\nimport createUser from '.';\n\nconst generateCreateStubs = {\n  success: () => stub().resolves({ _id: 'foo'})\n}\n\ndescribe('create', function () {\n  describe('When called with valid request object', function (done) {\n    ...\n    createUser(req, res, db, generateCreateStubs.success(), ValidationError)\n      .then((result) => {\n        // Assertions here\n      })\n  })\n})\n```", "```js\ncreateUser.__set__('create', createUserStubs.success)\n```", "```js\nfunction createUser(req, res, db, create, ValidationError) { ... }\n```", "```js\nimport ValidationError from './validators/errors/validation-error';\nimport createUserHandler from './handlers/users/create';\nimport createUserEngine from './engines/users/create';\n```", "```js\nconst handlerToEngineMap = new Map([\n  [createUserHandler, createUserEngine],\n]);\n```", "```js\napp.post('/users', injectHandlerDependencies(createUserHandler, client, handlerToEngineMap, ValidationError));\n```", "```js\nfunction injectHandlerDependencies(handler, db, handlerToEngineMap, ValidationError) {\n  const engine = handlerToEngineMap.get(handler);\n  return (req, res) => { handler(req, res, db, engine, ValidationError); };\n}\n```", "```js\n$ git add -A && git commit -m \"Implement dependency injection pattern\"\n```", "```js\nfunction createUser() {\n  aVerySlowCreate()\n    .then((result) => {\n      res.status(201);\n    });\n}\n```", "```js\ndescribe(\"When create resolves with the new user's ID\", function () {\n  beforeEach(function () {\n    createUser(req, res, db, create, ValidationError);\n  });\n  it('should call res.status() once', function () {\n    assert(res.status.calledOnce);\n  });\n});\n```", "```js\nfunction createUser(req, res, db, create, ValidationError) {\n  return create(req, db)\n    ...\n}\n```", "```js\nbeforeEach(function () {\n  create = generateCreateStubs.success();\n  return createUser(req, res, db, create, ValidationError);\n});\n```", "```js\nit('should fail', function() {\n  createUser(...)\n    .catch(actualError => assert(actualError, expectedError))\n});\n```", "```js\n$ git add -A && git commit -m \"Add unit tests for Create User request handler\"\n```", "```js\nimport createUserValidator from './validators/users/create';\n...\nconst handlerToValidatorMap = new Map([\n [createUserHandler, createUserValidator],\n]);\n...\napp.post('/users', injectHandlerDependencies(createUserHandler, client, handlerToEngineMap, handlerToValidatorMap, ValidationError));\n\n```", "```js\nfunction injectHandlerDependencies(\n  handler, db, handlerToEngineMap, handlerToValidatorMap, ValidationError,\n) {\n  const engine = handlerToEngineMap.get(handler);\n  const validator = handlerToValidatorMap.get(handler);\n  return (req, res) => { handler(req, res, db, engine, validator, ValidationError); };\n}\n```", "```js\nfunction createUser(req, res, db, create, validator, ValidationError) {\n  return create(req, db, validator, ValidationError)\n    ...\n}\n```", "```js\n$ git add -A && git commit -m \"Implement dependency injection for engine\"\n```", "```js\nimport assert from 'assert';\nimport { stub } from 'sinon';\nimport ValidationError from '../../../validators/errors/validation-error';\nimport create from '.';\n\ndescribe('User Create Engine', function () {\n  let req;\n  let db;\n  let validator;\n  const dbIndexResult = {};\n  beforeEach(function () {\n    req = {};\n    db = {\n      index: stub().resolves(dbIndexResult),\n    };\n  });\n  describe('When invoked and validator returns with undefined', function () {\n    let promise;\n    beforeEach(function () {\n      validator = stub().returns(undefined);\n      promise = create(req, db, validator, ValidationError);\n      return promise;\n    });\n    describe('should call the validator', function () {\n      it('once', function () {\n        assert(validator.calledOnce);\n      });\n      it('with req as the only argument', function () {\n        assert(validator.calledWithExactly(req));\n      });\n    });\n    it('should relay the promise returned by db.index()', function () {\n      promise.then(res => assert.strictEqual(res, dbIndexResult));\n    });\n  });\n\n  describe('When validator returns with an instance of ValidationError', function () {\n    it('should reject with the ValidationError returned from validator', function () {\n      const validationError = new ValidationError();\n      validator = stub().returns(validationError);\n      return create(req, db, validator, ValidationError)\n        .catch(err => assert.strictEqual(err, validationError));\n    });\n  });\n});\n```", "```js\n$ git add -A && git commit -m \"Implement unit tests for Create User engine\"\n```", "```js\n\"test\": \"yarn run test:unit && yarn run test:integration && yarn run test:e2e\",\n\"test:unit\": \"mocha 'src/**/*.unit.test.js' --require @babel/register\",\n\"test:integration\": \"dotenv -e envs/test.env -e envs/.env mocha -- src/**/*.integration.test.js' --require @babel/register\",\n```", "```js\ncreate(req, db, createUserValidator, ValidationError)\n```", "```js\nimport assert from 'assert';\nimport elasticsearch from 'elasticsearch';\nimport ValidationError from '../../../validators/errors/validation-error';\nimport createUserValidator from '../../../validators/users/create';\nimport create from '.';\n\nconst db = new elasticsearch.Client({\n  host: `${process.env.ELASTICSEARCH_PROTOCOL}://${process.env.ELASTICSEARCH_HOSTNAME}:${process.env.ELASTICSEARCH_PORT}`,\n});\n\ndescribe('User Create Engine', function () {\n  describe('When invoked with invalid req', function () {\n    it('should return promise that rejects with an instance of ValidationError', function () {\n      const req = {};\n      create(req, db, createUserValidator, ValidationError)\n        .catch(err => assert(err instanceof ValidationError));\n    });\n  });\n  describe('When invoked with valid req', function () {\n    it('should return a success object containing the user ID', function () {\n      const req = {\n        body: {\n          email: 'e@ma.il',\n          password: 'password',\n          profile: {},\n        },\n      };\n      create(req, db, createUserValidator, ValidationError)\n        .then((result) => {\n          assert.equal(result.result, 'created');\n          assert.equal(typeof result._id, 'string');\n        });\n    });\n  });\n});\n\n```", "```js\n$ git add -A && git commit -m \"Add integration tests for Create User engine\"\n```", "```js\n$ yarn add nyc --dev\n```", "```js\n\"test:unit:coverage\": \"nyc --reporter=html --reporter=text yarn run test:unit\",\n```", "```js\n$ git add -A && git commit -m \"Implement test coverage for unit tests\"\n```", "```js\n      return res.json({ message: err.message });\n    }\n    throw err;\n  }).catch(() => {\n    res.status(500);\n```", "```js\nconst generateCreateStubs = {\n  success: () => stub().resolves({ _id: USER_ID }),\n  genericError: () => stub().rejects(new Error()),\n  validationError: () => stub().rejects(new ValidationError(VALIDATION_ERROR_MESSAGE)),\n};\n...\ndescribe('createUser', function () {\n  ...\n  describe('When create rejects with an instance of Error', function () {\n    beforeEach(function () {\n      create = generateCreateStubs.genericError();\n      return createUser(req, res, db, create, validator, ValidationError);\n    });\n    describe('should call res.status()', function () {\n      it('once', function () {\n        assert(res.status.calledOnce);\n      });\n      it('with the argument 500', function () {\n        assert(res.status.calledWithExactly(500));\n      });\n    });\n\n    describe('should call res.set()', function () {\n      it('once', function () {\n        assert(res.set.calledOnce);\n      });\n      it('with the arguments \"Content-Type\" and \"application/json\"', function () {\n        assert(res.set.calledWithExactly('Content-Type', 'application/json'));\n      });\n    });\n\n    describe('should call res.json()', function () {\n      it('once', function () {\n        assert(res.json.calledOnce);\n      });\n      it('with a validation error object', function () {\n        assert(res.json.calledWithExactly({ message: 'Internal Server Error' }));\n      });\n    });\n  });\n});\n\n```", "```js\n$ git add -A && git commit -m \"Test catch block in createUser\"\n```", "```js\nit('This will always pass', function () {\n  it('Even though you may expect it to fail', function () {\n    assert(true, false);\n  });\n});\n```", "```js\n\"test:coverage\": \"nyc --reporter=html --reporter=text yarn run test\",\n\"test:integration:coverage\": \"nyc --reporter=html --reporter=text yarn run test:integration\",\n\"test:e2e:coverage\": \"nyc --reporter=html --reporter=text yarn run test:e2e\",\n```", "```js\n\"test:serve\": \"dotenv -e envs/test.env -e envs/.env babel-node src/index.js\",\n```", "```js\nyarn run test:serve &\n```", "```js\n{\n  \"exclude\": [\n    \"coverage/**\",\n    \"packages/*/test/**\",\n    \"test/**\",\n    \"test{,-*}.js\",\n    \"**/*{.,-}test.js\"\n    ,\"**/__tests__/**\",\n    \"**/node_modules/**\",\n    \"dist/\",\n    \"spec/\",\n    \"src/**/*.test.js\"\n  ]\n}\n```", "```js\n$ git add -A && git commit -m \"Implement coverage for all tests\"\n```", "```js\n$ git checkout create-user/main\n$ git merge --no-ff create-user/refactor-modules\n$ git checkout dev\n$ git merge --no-ff create-user/main\n```"]