- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating the Example Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, I create the example project that is used throughout this part
    of the book, using the features described in *Part 1*. In later chapters, I’ll
    start to add new features, but this chapter is all about building the foundation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example project for this chapter – and for all the other
    chapters in this book – from [https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development).
    See *Chapter 1* for how to get help if you have problems running the examples.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example project will use the features and packages introduced in *Part 1*
    of this book. The backend server will be written in TypeScript and the code files
    will be in the `src/server` folder. The TypeScript compiler will write JavaScript
    files to the `dist/server` folder, where they will be executed by the Node.js
    runtime, which will listen for HTTP requests on port `5000`, as shown in *Figure
    9.1*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_09_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: The backend server'
  prefs: []
  type: TYPE_NORMAL
- en: The client-side part of the application will be simpler than the backend and
    used only to send requests and process responses to demonstrate server-side features.
    The client-side code will be written in JavaScript and packaged into a bundle
    using webpack. The bundle will be served by the webpack development server, which
    will listen for HTTP requests on port 5100, as shown in *Figure 9.2*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_09_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: Adding the client-side part of the project'
  prefs: []
  type: TYPE_NORMAL
- en: The browser will make requests to the backend server on port 5000\. The Express
    router will be used to match requests to handler functions, starting with a single
    `/test` URL just to get started. Requests for static content, such as HTML files
    and images, will be served from the `static` folder, using the Express `static`
    middleware component.
  prefs: []
  type: TYPE_NORMAL
- en: All other requests will be forwarded to the webpack server, which will allow
    the client-side bundle to be requested and allow the live reload feature to work,
    as shown in *Figure 9.3*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_09_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: Routing requests'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a new command prompt, navigate to a convenient location, and create a folder
    named `part2app`. Navigate to the `part2app` folder and run the command shown
    in *Listing 9.1* to initialize the project and create the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 9.1: Initializing the project'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the sections that follow, I go through the process of creating the different
    parts of the project, starting with the backend server. I start by installing
    the JavaScript packages each part of the application requires, all of which were
    introduced in *Part 1* of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the application packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application packages are those whose features are incorporated into either
    the backend server or the client-side code. *Table 9.1* describes the application
    packages used in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 9.1: The application packages used in this chapter'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains CSS styles and JavaScript code to style the client-side
    content. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains enhancements to the Node.js API to simplify HTTP request
    handling. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '| This package sets security-related headers in HTTP responses. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '| This package forwards HTTP requests and will be used to connect the backend
    server to the webpack development server. |'
  prefs: []
  type: TYPE_TB
- en: To install these packages, run the commands shown in *Listing 9.2* in the `part2app`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 9.2: Installing the application packages'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Installing the development tool packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The development tool packages provide features that are used during development
    but are not included when the application is deployed. *Table 9.2* describes the
    tool packages used in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 9.2: The development tool packages used in this chapter'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '| This file contains the TypeScript compiler configuration settings for working
    with Node.js. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '| This package allows multiple commands to be started at once. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains the watcher for TypeScript files. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains the TypeScript compiler. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains the webpack bundler. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains the command-line interface for webpack. |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains the webpack development HTTP server. |'
  prefs: []
  type: TYPE_TB
- en: To install these packages, run the commands shown in *Listing 9.3* in the `part2app`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 9.3: Installing the development tool packages'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Installing the type packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The final packages contain descriptions of the types used by two of the development
    packages, which makes them easier to use with TypeScript, as described in *Table
    9.3*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 9.3: The type description packages'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains the descriptions of the Express API |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '| This package contains the descriptions of the Node.js API |'
  prefs: []
  type: TYPE_TB
- en: To install these packages, run the commands shown in *Listing 9.4* in the `part2app`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 9.4: Installing the type packages'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Creating the configuration files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create the configuration for the TypeScript compiler, add a file named `tsconfig.json`
    to the `part2app` folder with the content shown in *Listing 9.5*.
  prefs: []
  type: TYPE_NORMAL
- en: Your code editor may report errors with the `tsconfig.json` file, but these
    will be resolved when you start the development tools in *Listing 9.12*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 9.5: The contents of the tsconfig.json file in the part2app folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This file builds on the configuration contained in the `@tsconfig/node20` package
    added to the project in *Listing 9.4*. The `rootDir` and `include` settings are
    used to tell the compiler to process files in the `src/server` folder. The `outDir`
    setting tells the compiler to write the processed JavaScript files into the `dist/server`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: To create the configuration file for webpack, add a file named `webpack.config.mjs`
    to the `part2app` folder with the content shown in *Listing 9.6*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 9.6: The contents of the webpack.config.mjs file in the part2app folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This configuration file tells webpack to bundle the JavaScript files it finds
    in the `src/client` folder and to write the bundle that is created to the `dist/client`
    folder. (Although, as noted in *Part 1*, webpack will keep the bundle file in
    memory during development and only write the file to disk when the application
    is being prepared for deployment.)
  prefs: []
  type: TYPE_NORMAL
- en: To define the commands that will be used to start the development tools, add
    the setting shown in *Listing 9.7* to the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: Listing 9.7\. Defining scripts in the package.json file in the part2app folder
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `server` command uses the `tsc-watch` package to compile the backend TypeScript
    code and execute the JavaScript that is produced. The `client` command starts
    the `webpack` development HTTP server. The `start` command uses the `npm-run-all`
    command so that both the `client` and `server` commands can be started together.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the backend server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create the `src/server` folder and add to it a file named `server.ts` with the
    content shown in *Listing 9.8*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 9.8: The contents of the server.ts file in the src/server folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The code creates an HTTP server that listens for requests on port 5000\. The
    Express package is used to decode JSON request bodies, serve static content, and
    forward unhandled requests to the webpack HTTP server.
  prefs: []
  type: TYPE_NORMAL
- en: The Express router is used to match HTTP POST requests sent to the `/test` URL.
    To create the handler, add a file named `testHandler.ts` to the `src/server` folder
    with the content shown in *Listing 9.9*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 9.9: The contents of the testHandler.ts file in the src/server folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The handler sets the `Content-Type` header of the response and writes the request
    body to the response, which has the effect of echoing the data sent by the client.
    In *Part 1*, I used the `pipe` method to achieve a similar effect, but that won’t
    work in this example because the Express JSON middleware will read the request
    body and decode the JSON data it contains into a JavaScript object, which means
    there is no data in the request stream to read. For this reason, I create the
    response using the `Request.body` property, which is where the object created
    by the JSON middleware can be found.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the HTML and client-side JavaScript code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To define the HTML document that will be delivered to the browser, create the
    `static` folder and add to it a file named `index.html` with the content shown
    in *Listing 9.10*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 9.10: The contents of the index.html file in the static folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This file contains a button that will be used to send HTTP requests to the backend
    server and a table that will be used to display details of the response. To create
    the JavaScript code that will respond to the button and send the request, add
    a file named `client.js` to the `src/client` folder with the content shown in
    *Listing 9.11*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 9.11: The contents of the client.js file in the src/client folder'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The JavaScript code in this file uses the APIs provided by the browser to send
    an HTTP POST request to the `/test` URL and display details of the response received
    from the backend server.
  prefs: []
  type: TYPE_NORMAL
- en: Running the example application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All that remains is to make sure the example application works as expected.
    Run the command shown in *Listing 9.12* in the `part2app` folder to start the
    development tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 9.12: Starting the development tools'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Give the tools a moment to start up and then use a web browser to request `http://localhost:5000`.
    The browser will receive the HTML document defined in *Listing 9.10*, which contains
    a link to the bundle that is provided by webpack. Click the **Send Request** button
    and the client-side JavaScript will send an HTTP request to the backend server,
    producing the response shown in *Figure 9.4*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21959_09_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4: Running the example application'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, I created the example project that will be used throughout
    this part of the book, using the packages and features described in *Part 1*.
    In the next chapter, I will describe the key features required for web applications,
    starting with using templates to generate HTML content.
  prefs: []
  type: TYPE_NORMAL
