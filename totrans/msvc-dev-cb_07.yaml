- en: Monitoring and Observability
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Structured JSON logging
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collecting metrics with StatsD and Graphite
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collecting metrics with Prometheus
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making debugging easier with tracing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alerting when something goes wrong
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microservices add complexity to an architecture. With more moving parts in a
    system, monitoring and observing the behavior of the system becomes more important
    and more challenging. In a microservice architecture, failure conditions impacting
    one service can cascade in unexpected ways, impacting the system as a whole. A
    faulty switch somewhere in a datacenter may be causing unusually high latency
    for a service, perhaps resulting in intermittent timeouts in requests originating
    from the API Gateway, which may result in unexpected user impact, which results
    in an alert being fired. This kind of scenario is not uncommon in a microservice
    architecture and requires forethought so that engineers can easily determine the
    nature of customer-impacting incidents. Distributed systems are bound to experience
    certain failures and special consideration must be taken to build observability
    into systems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Another shift that microservices have necessitated is the move to DevOps. Many
    traditional monitoring solutions were developed at a time when operations were
    the sole responsibility of a special and distinct group of system administrators
    or operations engineers. System administrators and operations engineers are often
    interested in system-level or host-level metrics, such as CPU, memory disk, and
    network usage. These metrics are important but only make up a small part of observability.
    **Observability** must also be considered by engineers writing microservices. It's
    equally important to use metrics to be able to observe events unique to a system,
    such as certain types of exceptions being thrown or the number of events emitted
    to a queue.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Planning for observability also gives us the information we need to effectively
    test systems in production. Ephemeral environments for staging and integration
    testing can be useful, but there are entire classes of failure states that they
    are unable to test for. As discussed in [Chapter 5](b569ef24-285f-40bf-97b0-0ac9c1a79494.xhtml),
    *Reliability Patterns*, Gamedays and other forms of failure injection are critical
    for improving the resilience of systems. Observable systems lend themselves to
    this kind of testing, allowing engineers to gain confidence in our understanding
    of the system.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll introduce several tenants of monitoring and observability.
    We'll demonstrate how to modify our services to emit structured logs. We'll also
    take a look at metrics, using a number of different systems for collecting, aggregating,
    and visualizing metrics. Finally we'll look at tracing, a way to look at requests
    as they travel through various components of a system and alert us when user-impacting
    error conditions are detected.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Structured JSON logging
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Outputting useful logs is a key part of building an observable service. What
    constitutes a useful log is subjective, but a good set of guidelines is that logs
    should contain timestamped information about key events in a system. A good logging
    system supports the notion of configurable log levels, so the amount of information
    sent to logs can be dialed up or down for a specific amount of time depending
    on the needs of engineers working with the system. For example, when testing a
    service against failure scenarios in production, it may be useful to turn up the
    log level and get more detail about events in the system.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: The two most popular logging libraries for Java applications are **Log4j** ([https://logging.apache.org/log4j/2.x/](https://logging.apache.org/log4j/2.x/))
    and **Logback** ([https://logback.qos.ch/](https://logback.qos.ch/)). By default,
    both of these libraries will emit log entries in an unstructured format, usually
    space-separated fields including information such as a timestamp, log level, and
    message. This is useful, but especially so in a microservices architecture, where
    multiple services are emitting event logs possibly to a centralized log store;
    it's extremely useful to emit structured logs with some consistency.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: JSON has become a common standard for passing messages between systems. Nearly
    every popular language has libraries for parsing and generating JSON. It's lightweight,
    yet structured, making it a good choice for data, such as event logs. Emitting
    event logs in JSON makes it easier to feed your service's logs into a centralized
    store and have log data analyzed and queried.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll modify our message-service to emit logs using the popular
    `logback` library for Java applications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s have a look at the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the message-service project from [Chapter 6](5c67f295-78fb-4ae9-a596-39f384f6e9f2.xhtml),
    *Security*. The first change we''ll make is to add the `logback` library to the
    `build.gradle` file:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a `logback.xml` configuration file. In the configuration file, we''ll
    create a single logger, called `jsonLogger`, that references a single appender,
    called `consoleAppender`:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add a single sample log message to `Application.java` to test our new logging
    configuration:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the application and see that log messages are now emitted in JSON:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Collecting metrics with StatsD and Graphite
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metrics are numeric measurements over time. The most common types of metrics
    collected in our systems are counters, timers, and gauges. A counter is exactly
    what it sounds like, a value that is incremented a number of times over some time
    period. A timer can be used to measure recurring events in a system, such as the
    amount of time it takes to serve a request or perform a database query. Gauges
    are just arbitrary numeric values that can be recorded.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '**StatsD** is an open source network daemon invented in 2011 at Etsy. Metrics
    data is pushed to a `statsd` server, often on the same server, which aggregates
    data before sending it on to a durable backend. One of the most common backends
    used with `statsd` is **Graphite**, an open source time-series storage engine
    and graphing tool. Together, Graphite and StatsD make up a very popular metrics
    stack. They''re easy to get started with and enjoy large communities and a large
    selection of tools and libraries.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot has a sub-project called **Actuator** that adds a number of production
    readiness features to a service. Actuator gives us our services certain metrics
    for free, together with a project called micrometer, Actuator enables a vendor-neutral
    API to various metric's backends. We'll use Actuator and micrometer in this recipe
    and the next one.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll add Actuator to the message-service we've worked with
    in previous recipes. We'll create a few custom metrics and demonstrate using `statsd`
    and `graphite` to graph metrics from our application. We'll run `statsd` and `graphite`
    locally in docker containers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at the following steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the message-service project from previous recipes. We''re going to upgrade
    the version of Spring Boot and add `actuator` and `micrometer` to our list of
    dependencies. Modify the `build.gradle` file to look like the following:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open `application.yml` in the `src/main/resources` directory and add the following:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Our application now supports emitting metrics to a locally-running instance
    of `statsd`. Open `MessageController.java` and add the `Timed` annotation to the
    class as well as the `get` method:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In order to demonstrate that metrics are actually being emitted, we''ll run
    `statsd` and graphite locally in a docker container. Having installed `docker`,
    run the following command, which will pull down an image from `dockerhub` and
    run a container locally:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, visit `http://localhost` to see your metrics!
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Collecting metrics with Prometheus
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Prometheus** is an open source monitoring and alerting toolkit originally
    developed in 2012 at **SoundCloud**. It was inspired by Borgmon at Google. In
    contrast to the push model employed by systems such as `statsd`, Prometheus uses
    a pull model for collecting metrics. Instead of each service being responsible
    for pushing metrics to a `statsd` server, Prometheus is responsible for scraping
    an endpoint exposed by services that have metrics. This inversion of responsibilities
    provides some benefits when operating metrics at scale. Targets in Prometheus
    can be configured manually or via service discovery.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: In contrast to the hierarchical format that systems such as Graphite use to
    store metrics data, Prometheus employs a multidimensional data model. Time-series
    data in Prometheus is identified by a metric name (such as `http_request_duration_seconds`)
    and one or more labels (such as `service=message-service` and `method=POST`).
    This format can make it easier to standardize metrics across a number of different
    applications, which is particularly valuable in a microservices architecture.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll continue to use message-service and the Actuator and micrometer
    libraries. We'll configure micrometer to use the Prometheus metrics registry and
    we'll expose an endpoint that Prometheus can scrape in order to collect metrics
    from our service. We'll then configure Prometheus to scrape the message-service
    (running locally) and run Prometheus locally to verify that we can query our metrics.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the message-service and edit `build.gradle` to include actuator and the
    micrometer-prometheus dependencies:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the following to `application.yml`. This will enable an endpoint that exposes
    metrics collected in the Prometheus metrics registry. Notice that we''re opening
    another port for the management endpoints added by `actuator`:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can now test that our service is exposing metrics on the `/manage/prometheus`
    endpoint. Run the service and make the following `curl` request:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Configure and run Prometheus in a docker container. Create a new file in the
    `/tmp` directory, called `prometheus.yml`, with information about our target:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Download and extract the version of Prometheus for your platform. Instructions
    are on the Prometheus website ([https://prometheus.io/docs/introduction/first_steps/](https://prometheus.io/docs/introduction/first_steps/)).
    Run Prometheus with the configuration file we created in the previous step:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Open `http://localhost:9090` in your browser to issue Prometheus queries and
    see your metrics! Until you start making requests to your service, the only metrics
    you'll see will be the JVM and system metrics, but this should give you an idea
    of the kind of querying you can do with Prometheus and demonstrate how the scraper
    works.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making debugging easier with tracing
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a microservices architecture, a single request can go through several different
    services and result in writes to several different data stores and event queues.
    When debugging a production incident, it isn't always clear whether a problem
    exists in one system or another. This lack of specificity means metrics and logs
    only form a small part of the picture. Sometimes we need to zoom out and look
    at the complete life cycle of a request from the user agent to a terminal service
    and back again.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: In 2010, engineers at Google published a paper describing **Dapper** ([https://research.google.com/archive/papers/dapper-2010-1.pdf](https://research.google.com/archive/papers/dapper-2010-1.pdf)),
    a large-scale distributed systems tracing infrastructure. The paper described
    how Google had been using an internally developed tracing system to aid in observing
    system behavior and debugging performance issues. This work inspired others, including
    engineers at Twitter who, in 2012, introduced an open source distributed tracing
    system called **Zipkin** ([https://blog.twitter.com/engineering/en_us/a/2012/distributed-systems-tracing-with-zipkin.html](https://blog.twitter.com/engineering/en_us/a/2012/distributed-systems-tracing-with-zipkin.html)).
    Zipkin started out as an implementation of the Dapper paper but evolved into a
    full set of tools for analyzing performance and inspecting requests to Twitter
    infrastructure.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: All of the work going on in the tracing space made apparent a need for some
    kind of standardized API. The **OpenTracing** ([http://opentracing.io/](http://opentracing.io/))
    framework is an attempt to do just that. OpenTracing defines a specification detailing
    a pan-language standard for traces. Many engineers from different companies have
    contributed to this effort, including the engineers at Uber who originally created
    Jaeger ([https://eng.uber.com/distributed-tracing/](https://eng.uber.com/distributed-tracing/)),
    an open source, end-to-end distributed tracing system that conforms to the OpenTracing
    specification.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll modify our message-service to add support for tracing.
    We'll then run Jaeger in a docker container so that we can see a few traces in
    practice.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the message-service project and replace the contents of `build.gradle`
    with the following:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Open `application.yml` in the `src/main/resources` directory and add a section
    for `opentracing` configuration. Here we''re configuring our `opentracing` implementation
    to connect to an instance of Jaeger running locally on port `6831`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In order to collect traces, we''ll run an instance of Jaeger locally. Docker
    makes this easy with the following command:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Run message-service and make a few example requests (even if they result in
    a 404). Open `http://localhost:16686` in your browser and you'll see Jaeger's
    web UI. Hit search and explore the trace data collected so far!
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alerting us when something goes wrong
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're seriously looking at microservices, you're probably running a 24/7
    service. Customers demand that your service is available to use at any time. Contrast
    this increase in the need for availability with the reality that distributed systems
    are constantly experiencing some kind of failure. No system is ever completely
    healthy.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Whether you have a monolith or microservices architecture, it is pointless to
    try to avoid production incidents altogether. Instead, you should try to optimize
    how you are able to respond to failures, limiting their impact on customers by
    reducing the time it takes to resolve them.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是采用单体架构还是微服务架构，试图完全避免生产事故都是没有意义的。相反，你应该尝试优化你应对故障的方式，通过减少解决故障所需的时间来限制其对客户的影响。
- en: Reducing the time it takes to resolve incidents (often measured as mean time
    to resolve or MTTR) involves first reducing the **Mean Time To Detect** (**MTTD**).
    Being able to accurately alert the right on-call engineer when a service is in
    a customer-impacting failure state is paramount to being able to maintain uptime.
    Good alerts should be actionable and urgent; if your system notifies on-call engineers
    when failures are either unactionable or non-urgent (not customer-impacting),
    you risk burning out on-call engineers and creating what is commonly referred
    to as alert fatigue. Alert fatigue is very real and can have a more catastrophic
    impact on uptime than any amount of software bugs or failing hardware. It is essential
    to continuously improve your system's alerting to get thresholds and other factors
    just right, to prevent false positives while maintaining alerting for truly customer-impacting
    incidents.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 减少解决事故所需的时间（通常以平均解决时间或MTTR衡量）首先需要减少**平均检测时间**（**MTTD**）。在服务处于影响客户的故障状态时，能够准确地向值班工程师发出警报对于保持正常运行至关重要。好的警报应该是可操作的且紧急的；如果你的系统在故障不可操作或非紧急（不影响客户）时通知值班工程师，你可能会让值班工程师疲惫不堪，并造成通常所说的告警疲劳。告警疲劳是真实存在的，并且可能对正常运行时间产生比任何数量的软件错误或故障硬件更灾难性的影响。持续改进你的系统告警，以获得阈值和其他因素的恰到好处，防止误报，同时保持对真正影响客户的故障的告警。
- en: Alerting infrastructure is not something you want to build yourself. **PagerDuty**
    is an SaaS tool that allows you to create escalation policies and schedules for
    teams of engineers who are on-call for specific services. Using PagerDuty, you
    can set up a rotating schedule so that an engineer on a team of five, for example,
    can expect to be on-call one week in every five. Escalation policies allow you
    to configure a set of steps in case the on-call engineer is unavailable (perhaps
    they're driving their car on the freeway). Escalation policies are often configured
    to page a secondary on-call schedule, a manager, or even the entire team in the
    event that an incident goes unacknowledged for a certain amount of time. Using
    a system such as PagerDuty allows engineers on a team to enjoy much-needed off-call
    time while knowing that customer-impacting incidents will be responded to promptly.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 告警基础设施不是你想自己构建的东西。**PagerDuty**是一个SaaS工具，允许你为特定服务的值班工程师团队创建升级策略和日程安排。使用PagerDuty，你可以设置一个轮换日程，例如，一个五人团队的工程师可以预期每五周值班一周。升级策略允许你在值班工程师不可用的情况下（例如，他们可能在高速公路上开车）配置一系列步骤。升级策略通常配置为在事故未被确认一定时间后，向二级值班日程、经理甚至整个团队发送警报。使用像PagerDuty这样的系统，可以让团队中的工程师在享受必要的非值班时间的同时，知道影响客户的故障将会得到及时响应。
- en: Alerts can be configured manually using any number of supporting integrations,
    but this is time-consuming and error-prone. Instead, it's desirable to have a
    system that allows you to automate the creation and maintenance of alerts for
    your services. The Prometheus monitoring and alerting toolkit covered in this
    chapter includes a tool called Alertmanager which allows you to do just that.
    In this recipe, we'll modify our message-service to add alerts using Alertmanager.
    Specifically, we'll configure a single alert that fires when the average response
    time exceeds 500 ms for at least 5 minutes. We'll work from the version of message-service
    that already includes Prometheus metrics. We won't add any PagerDuty integration
    in this recipe, since that would require a PagerDuty account in order to follow
    along. PagerDuty has an excellent integration guide on its website. We'll configure
    `alertmanager` to send a simple WebHook-based alert.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s have a look at the following steps:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'In a previous recipe, we configured Prometheus with a file called `prometheus.yml`.
    We''ll need to add the `alertmanager` configuration to this file, so open it again
    and add the following:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create a new file called `/tmp/rules.yml`. This file defines the rules we want
    Prometheus to be able to creates alerts for:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a new file called `/tmp/alertmanager.yml`. This is the file that will
    describe our alerting configuration. It is broken into a few different sections, global
    sets of certain configuration options that impact how `alertmanager` works. The
    section called receivers is where we configure our alert notification systems. In
    this case, it''s a WebHook to a service running locally. This is just for demo
    purposes; we''ll write a small ruby script that listens for HTTP requests and
    prints the payload to the standard output:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here''s the source code for the small ruby service that will print out our
    alerts:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the ruby script, restart `prometheus`, and start `alertmanager`. With these
    three systems running, we''ll be ready to test our alert:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In order to get our alert to fire, open message-service and add the following
    line to `MessageController.java`. It''s a single line that will force the controller
    to sleep for 600 milliseconds before returning a response. Note that this is above
    our threshold described in our rules configuration:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With that in place, run your updated message service and make a number of requests
    to it. After one minute, Prometheus should notify Alertmanager, which should then
    notify your local debug ruby service. Your alert is working!
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
