["```js\n// app.js                                                   (1)\nimport { calculator } from './calculator.js'\nimport { display } from './display.js'\ndisplay(calculator('2 + 2 / 4'))\n// display.js                                               (5)\nexport function display () {\n  // ...\n}\n// calculator.js                                            (2)\nimport { parser } from './parser.js'\nimport { resolver } from './resolver.js'\nexport function calculator (expr) {\n  return resolver(parser(expr))\n}\n// parser.js                                                (3)\nexport function parser (expr) {\n  // ...\n}\n// resolver.js                                              (4)\nexport function resolver (tokens) {\n  // ...\n} \n```", "```js\n{\n  'app.js': (module, require) => {/* ... */},\n  'calculator.js': (module, require) => {/* ... */},\n  'display.js': (module, require) => {/* ... */},\n  'parser.js': (module, require) => {/* ... */},\n  'resolver.js': (module, require) => {/* ... */}\n} \n```", "```js\n(module, require) => {\n  const { parser } = require('parser.js')\n  const { resolver } = require('resolver.js')\n  module.exports.calculator = function (expr) {\n    return resolver(parser(expr))\n  }\n} \n```", "```js\n((modulesMap) => {                                       // (1)\n  const require = (name) => {                            // (2)\n    const module = { exports: {} }                       // (3)\n    modulesMap[name](module, require)                    // (4)\n    return module.exports                                // (5)\n  }\n  require('app.js')                                      // (6)\n})(\n  {\n    'app.js': (module, require) => {/* ... */},\n    'calculator.js': (module, require) => {/* ... */},\n    'display.js': (module, require) => {/* ... */},\n    'parser.js': (module, require) => {/* ... */},\n    'resolver.js': (module, require) => {/* ... */},\n  }\n) \n```", "```js\nnpm install --global webpack-cli \n```", "```js\nnpm init \n```", "```js\nwebpack-cli init \n```", "```js\n    \"build\": \"webpack --config webpack.config.cjs\"\n    \"start\": \"webpack-dev-server --config webpack.config.cjs\" \n    ```", "```js\nimport nunjucks from 'nunjucks'\nconst template = '<h1>Hello <i>{{ name }}</i></h1>'\nexport function sayHello (name) {\n  return nunjucks.renderString(template, { name })\n} \n```", "```js\nimport { sayHello } from './say-hello.js'\nconst body = document.getElementsByTagName('body')[0]\nbody.innerHTML = sayHello('Browser') \n```", "```js\nnpm run build \n```", "```js\n// src/server.js\nimport { sayHello } from './say-hello.js'\nconsole.log(sayHello('Node.js')) \n```", "```js\nnode src/server.js \n```", "```js\n<h1>Hello <i>Node.js</i></h1> \n```", "```js\nimport nunjucks from 'nunjucks'\nconst template = '<h1>Hello <i>{{ name }}</i></h1>'\nexport function sayHello (name) {\n  if (typeof window !== 'undefined' && window.document) {\n    // client-side code\n    return nunjucks.renderString(template, { name })\n  }\n  // Node.js code\n  return `Hello \\u001b[1m${name}\\u001b[0m`\n} \n```", "```js\n    import { clientFunctionality } from 'clientModule'\n    import { serverFunctionality } from 'serverModule'\n    if (typeof window !== 'undefined' && window.document) {\n      clientFunctionality()\n    } else {\n      serverFunctionality()\n    } \n    ```", "```js\nmoduleList.forEach(function(module) {\n  import(module)\n}) \n```", "```js\nfunction getControllerModule (controllerName) {\n  return import(`./controller/${controllerName}`)\n} \n```", "```js\nimport nunjucks from 'nunjucks'\nexport function sayHello (name) {\n  if (typeof __BROWSER__ !== 'undefined') {\n    // client-side code\n    const template = '<h1>Hello <i>{{ name }}</i></h1>'\n    return nunjucks.renderString(template, { name })\n  }\n  // Node.js code\n  return `Hello \\u001b[1m${name}\\u001b[0m`\n} \n```", "```js\nnpm install --save-dev terser-webpack-plugin \n```", "```js\n// ...\nconst TerserPlugin = require('terser-webpack-plugin')\nmodule.exports = {\n  mode: 'production',\n  // ...\n  plugins: [\n    // ...\n    new webpack.DefinePlugin({\n      __BROWSER__: true\n    })\n  ],\n  // ...\n  optimization: {\n    // ...\n    minimize: true,\n    minimizer: [new TerserPlugin()]\n  }\n} \n```", "```js\nif (true) {\n  const template = '<h1>Hello <i>{{ name }}</i></h1>'\n  return nunjucks.renderString(template, { name })\n}\nreturn `Hello \\u001b[1m${name}\\u001b[0m` \n```", "```js\nconst template = '<h1>Hello <i>{{ name }}</i></h1>'\nreturn nunjucks.renderString(template, { name }) \n```", "```js\n// src/say-hello.js\nimport chalk from 'chalk'\nexport function sayHello (name) {\n  return `Hello ${chalk.green(name)}`\n}\n// src/say-hello-browser.js\nimport nunjucks from 'nunjucks'\nconst template = '<h1>Hello <i>{{ name }}</i></h1>'\nexport function sayHello (name) {\n  return nunjucks.renderString(template, { name })\n} \n```", "```js\nplugins: [\n  // ...\n  new webpack.NormalModuleReplacementPlugin(\n    /src\\/say-hello\\.js$/,\n    path.resolve(__dirname, 'src', 'say-hello-browser.js')\n  )\n] \n```", "```js\nnpm init -y\nnpm install --save-dev webpack webpack-cli\nnode_modules/.bin/webpack init \n```", "```js\nnpm install --save react react-dom \n```", "```js\nimport react from 'react'\nimport ReactDOM from 'react-dom'\nconst h = react.createElement                            // (1)\nclass Hello extends react.Component {                    // (2)\n  render () {                                            // (3)\n    return h('h1', null, [                               // (4)\n      'Hello ',\n      this.props.name || 'World'                         // (5)\n    ])\n  }\n}\nReactDOM.render(                                         // (6)\n  h(Hello, { name: 'React' }),\n  document.getElementsByTagName('body')[0]\n) \n```", "```js\nnpm start \n```", "```js\nimport react from 'react'\nimport ReactDOM from 'react-dom'\nclass Hello extends react.Component {\n  render () {\n    return **<****h1****>****Hello {this.props.name || 'World'}****</****h1****>**\n  }\n}\nReactDOM.render(\n  **<****Hello****name****=****\"React\"****/>**,\n  document.getElementsByTagName('body')[0]\n) \n```", "```js\nimport react from 'react'\nimport ReactDOM from 'react-dom'\n**import** **htm** **from****'htm'**\n**const** **html = htm.bind(react.createElement)**          // (1)\nclass Hello extends react.Component {\n  render () {                                       // (2)\n    return **html`****<****h1****>**\n      **Hello** **${****this****.props.name ||** **'World'****}**\n    **</****h1****>****`**\n  }\n}\nReactDOM.render(\n  **html`****<****${Hello}****name****=****\"React\"****/>****`,**                   // (3)\n  document.getElementsByTagName('body')[0]\n) \n```", "```js\n// src/RecentGithubProjects.js\nimport react from 'react'\nimport htm from 'htm'\nconst html = htm.bind(react.createElement)\nfunction createRequestUri (query) {\n  return `https://api.github.com/search/repositories?q=${\n    encodeURIComponent(query)\n  }&sort=updated`\n}\nexport class RecentGithubProjects extends react.Component {\n  constructor (props) {                                    // (1)\n    super(props)                                           // (2)\n    this.state = {                                         // (3)\n      loading: true,\n      projects: []\n    }\n  }\n  async loadData () {                                      // (4)\n    this.setState({ loading: true, projects: [] })\n    const response = await fetch(\n      createRequestUri(this.props.query),\n      { mode: 'cors' }\n    )\n    const responseBody = await response.json()\n    this.setState({\n      projects: responseBody.items,\n      loading: false\n    })\n  }\n  componentDidMount () {                                   // (5)\n    this.loadData()\n  }\n  componentDidUpdate (prevProps) {                         // (6)\n    if (this.props.query !== prevProps.query) {\n      this.loadData()\n    }\n  }\n  render () {                                              // (7)\n    if (this.state.loading) {\n      return 'Loading ...'\n    }\n                                                           // (8)\n    return html`<ul>\n      ${this.state.projects.map(project => html`\n        <li key=${project.id}>\n          <a href=${project.html_url}>${project.full_name}</a>:\n          ${' '}${project.description}\n        </li>\n      `)}\n    </ul>`\n  }\n} \n```", "```js\n// src/App.js\nimport react from 'react'\nimport htm from 'htm'\nimport { RecentGithubProjects } from './RecentGithubProjects.js'\nconst html = htm.bind(react.createElement)\nexport class App extends react.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      query: 'javascript',\n      label: 'JavaScript'\n    }\n    this.setQuery = this.setQuery.bind(this)\n  }\n  setQuery (e) {\n    e.preventDefault()\n    const label = e.currentTarget.text\n    this.setState({ label, query: label.toLowerCase() })\n  }\n  render () {\n    return html`<div>\n      <nav>\n        <a href=\"#\" onClick=${this.setQuery}>JavaScript</a>\n        ${' '}\n        <a href=\"#\" onClick=${this.setQuery}>Node.js</a>\n        ${' '}\n        <a href=\"#\" onClick=${this.setQuery}>React</a>\n      </nav>\n      <h1>Recently updated ${this.state.label} projects</h1>\n      <${RecentGithubProjects} query=${this.state.query}/>\n    </div>`\n  }\n} \n```", "```js\n// src/index.js\nimport react from 'react'\nimport ReactDOM from 'react-dom'\nimport htm from 'htm'\nimport { App } from './App.js'\nconst html = htm.bind(react.createElement)\nReactDOM.render(\n  html`<${App}/>`,\n  document.getElementsByTagName('body')[0]\n) \n```", "```js\nnode â€“r esm script.js \n```", "```js\nnpm install \n```", "```js\nexport const authors = [\n  {\n    id: 'author\\'s unique id',\n    name: 'author\\'s name',\n    bio: 'author\\'s biography',\n    books: [ // author's books\n      {\n        id: 'book unique id',\n        title: 'book title',\n        year: 1914 // book publishing year\n      },\n      // ... more books\n    ]\n  },\n  // ... more authors\n] \n```", "```js\nsrc\nâ”œâ”€â”€ data\nâ”‚   â””â”€â”€ **authors.js**              â€“ data file\nâ””â”€â”€ frontend\n    â”œâ”€â”€ **App.js**                  â€“ application component\n    â”œâ”€â”€ components\n    â”‚   â”œâ”€â”€ **Header.js**           â€“ header component\n    â”‚   â””â”€â”€ pages\n    â”‚       â”œâ”€â”€ **Author.js**       â€“ author page\n    â”‚       â”œâ”€â”€ **AuthorsIndex.js** â€“ index page\n    â”‚       â””â”€â”€ **FourOhFour.js**   â€“ 404 page\n    â””â”€â”€ **index.js**                â€“ project entry point \n```", "```js\nimport react from 'react'\nimport reactDOM from 'react-dom'\nimport htm from 'htm'\nimport { BrowserRouter } from 'react-router-dom'\nimport { App } from './App.js'\nconst html = htm.bind(react.createElement)\nreactDOM.render(\n  html`<${BrowserRouter}><${App}/></>`,\n  document.getElementById('root')\n) \n```", "```js\nimport react from 'react'\nimport htm from 'htm'\nimport { Switch, Route } from 'react-router-dom'\nimport { AuthorsIndex } from './components/pages/AuthorsIndex.js'\nimport { Author } from './components/pages/Author.js'\nimport { FourOhFour } from './components/pages/FourOhFour.js'\nconst html = htm.bind(react.createElement)\nexport class App extends react.Component {\n  render () {\n    return html`\n      <${Switch}>\n        <${Route}\n          path=\"/\"\n          exact=${true}\n          component=${AuthorsIndex}\n        />\n        <${Route}\n          path=\"/author/:authorId\"\n          component=${Author}\n        />\n        <${Route}\n          path=\"*\"\n          component=${FourOhFour}\n        />\n      </>\n    `\n  }\n} \n```", "```js\nimport react from 'react'\nimport htm from 'htm'\nimport { Link } from 'react-router-dom'\nconst html = htm.bind(react.createElement)\nexport class Header extends react.Component {\n  render () {\n    return html`<header>\n      <h1>\n        <${Link} to=\"/\">My library</>\n      </h1>\n    </header>`\n  }\n} \n```", "```js\nimport react from 'react'\nimport htm from 'htm'\nimport { Link } from 'react-router-dom'\nimport { Header } from '../Header.js'\nimport { authors } from '../../../data/authors.js'\nconst html = htm.bind(react.createElement)\nexport class AuthorsIndex extends react.Component {\n  render () {\n    return html`<div>\n      <${Header}/>\n      <div>${authors.map((author) =>\n        html`<div key=${author.id}>\n          <p>\n            <${Link} to=\"${`/author/${author.id}`}\">\n              ${author.name}\n            </>\n          </p>\n        </div>`)}\n      </div>\n    </div>`\n  }\n} \n```", "```js\nimport react from 'react'\nimport htm from 'htm'\nimport { FourOhFour } from './FourOhFour.js'\nimport { Header } from '../Header.js'\nimport { authors } from '../../../data/authors.js'\nconst html = htm.bind(react.createElement)\nexport class Author extends react.Component {\n  render () {\n    const author = authors.find(\n      author => author.id === this.props.match.params.authorId\n    )\n    if (!author) {\n      return html`<${FourOhFour} error=\"Author not found\"/>`\n    }\n    return html`<div>\n      <${Header}/>\n      <h2>${author.name}</h2>\n      <p>${author.bio}</p>\n      <h3>Books</h3>\n      <ul>\n        ${author.books.map((book) =>\n          html`<li key=${book.id}>${book.title} (${book.year})</li>`\n        )}\n      </ul>\n    </div>`\n  }\n} \n```", "```js\nimport react from 'react'\nimport htm from 'htm'\nimport { Link } from 'react-router-dom'\nimport { Header } from '../Header.js'\nconst html = htm.bind(react.createElement)\nexport class FourOhFour extends react.Component {\n  render () {\n    return html`<div>\n      <${Header}/>\n      <div>\n        <h2>404</h2>\n        <h3>${this.props.error || 'Page not found'}</h3>\n        <${Link} to=\"/\">Go back to the home page</>\n      </div>\n    </div>`\n  }\n} \n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>My library</title>\n  </head>\n  <body>\n  <div id=\"root\"></div>\n  <script type=\"text/javascript\" src=\"img/main.js\"></script></body>\n</html> \n```", "```js\nnpm install --save fastify fastify-static esm \n```", "```js\nimport { resolve, dirname } from 'path'\nimport { fileURLToPath } from 'url'\nimport react from 'react'\nimport reactServer from 'react-dom/server.js'\nimport htm from 'htm'\nimport fastify from 'fastify'\nimport fastifyStatic from 'fastify-static'\nimport { StaticRouter } from 'react-router-dom'\nimport { App } from './frontend/App.js'\nconst __dirname = dirname(fileURLToPath(import.meta.url))\nconst html = htm.bind(react.createElement)\n// (1)\nconst template = ({ content }) => `<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>My library</title>\n  </head>\n  <body>\n    <div id=\"root\">${content}</div>\n    <script type=\"text/javascript\" src=\"img/main.js\"></script>\n  </body>\n</html>`\nconst server = fastify({ logger: true })                   // (2)\nserver.register(fastifyStatic, {                           // (3)\n  root: resolve(__dirname, '..', 'public'),\n  prefix: '/public/'\n})\nserver.get('*', async (req, reply) => {                    // (4)\n  const location = req.raw.originalUrl\n                                                           // (5)\n  const serverApp = html`\n    <${StaticRouter} location=${location}>\n      <${App}/>\n    </>\n  `\n  const content = reactServer.renderToString(serverApp)    // (6)\n  const responseHtml = template({ content })\n  reply.code(200).type('text/html').send(responseHtml)\n})\nconst port = Number.parseInt(process.env.PORT) || 3000     // (7)\nconst address = process.env.ADDRESS || '127.0.0.1'\nserver.listen(port, address, function (err) {\n  if (err) {\n    console.error(err)\n    process.exit(1)\n  }\n}) \n```", "```js\nnode -r esm src/server.js \n```", "```js\ncurl http://localhost:3000/ \n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>My library</title>\n  </head>\n  <body>\n    <div id=\"root\"><div><header><h1><a href=\"/\">My library</a></h1></header><div><h2>Authors</h2><div><div><a href=\"/author/joyce\"><p>James Joyce</p></a></div><div><a href=\"/author/h-g-wells\"><p>Herbert George Wells</p></a></div><div><a href=\"/author/orwell\"><p>George Orwell</p></a></div></div></div></div></div>\n    <script type=\"text/javascript\" src=\"img/main.js\"></script>\n  </body>\n</html> \n```", "```js\ncurl -i http://localhost:3000/blah \n```", "```js\nHTTP/1.1 200 OK\ncontent-type: text/html\ncontent-length: 367\nDate: Sun, 05 Apr 2020 18:38:47 GMT\nConnection: keep-alive\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>My library</title>\n  </head>\n  <body>\n    <div id=\"root\"><div><header><h1><a href=\"/\">My library</a></h1></header><div><h2>404</h2><h3>Page not found</h3><a href=\"/\">Go back to the home page</a></div></div></div>\n    <script type=\"text/javascript\" src=\"img/main.js\"></script>\n  </body>\n</html> \n```", "```js\nserver.get('*', async (req, reply) => {\n  const location = req.raw.originalUrl\n  **const** **staticContext = {}**\n  const serverApp = html`\n    <${StaticRouter}\n      location=${location}\n      **context****=****${staticContext}**\n    >\n      <${App}/>\n    </>\n  `\n  const content = reactServer.renderToString(serverApp)\n  const responseHtml = template({ content })\n  **let** **code =** **200**\n  **if** **(staticContext.statusCode) {**\n    **code = staticContext.statusCode**\n  **}**\n  reply.code(**code**).type('text/html').send(responseHtml)\n}) \n```", "```js\nif (this.props.staticContext) {\n  this.props.staticContext.statusCode = 404\n} \n```", "```js\nif (!author) {\n  return html`<${FourOhFour}\n    **staticContext****=****${****this****.****props****.****staticContext}**\n    error=\"Author not found\"\n  />`\n}\n// ... \n```", "```js\nnpm install --save fastify-cors superagent \n```", "```js\nnode -r esm src/api.js \n```", "```js\ncurl -i http://localhost:3001/api/authors\ncurl -i http://localhost:3001/api/author/joyce\ncurl -i http://localhost:3001/api/author/invalid \n```", "```js\nimport react from 'react'\nimport htm from 'htm'\nimport { Link } from 'react-router-dom'\n**import** **superagent** **from****'superagent'**\nimport { Header } from '../Header.js'\nconst html = htm.bind(react.createElement)\nexport class AuthorsIndex extends react.Component {\n  **constructor** **(props) {**\n    **super****(props)**\n    **this****.state = {**\n      **authors****: [],**\n      **loading****:** **true**\n    **}**\n  **}**\n  **async** **componentDidMount () {**\n    **const** **{ body } =** **await** **superagent.get(****'http://localhost:3001/api/authors'****)**\n    **this****.setState({** **loading****:** **false****,** **authors****: body })**\n  **}**\n  render () {\n    **if** **(****this****.state.loading) {**\n      **return** **html`****<****${Header}****/><****div****>****Loading ...****</****div****>****`**\n    **}**\n    return html`<div>\n      <${Header}/>\n      <div>${**this****.****state****.**authors.map((author) =>\n        html`<div key=${author.id}>\n          <p>\n            <${Link} to=\"${`/author/${author.id}`}\">\n              ${author.name}\n            </>\n          </p>\n        </div>`)}\n      </div>\n    </div>`\n  }\n} \n```", "```js\nimport react from 'react'\nimport htm from 'htm'\n**import** **superagent** **from****'superagent'**\nimport { FourOhFour } from './FourOhFour.js'\nimport { Header } from '../Header.js'\nconst html = htm.bind(react.createElement)\nexport class Author extends react.Component {\n  **constructor** **(props) {**\n    **super****(props)**\n    **this****.state = {**\n      **author****:** **null****,**\n      **loading****:** **true**\n    **}**\n  **}**\n  **async** **loadData () {**\n    **let** **author =** **null**\n    **this****.setState({** **loading****:** **false****, author })**\n    **try** **{**\n      **const** **{ body } =** **await** **superagent.get(**\n        **`http://localhost:3001/api/author/****${**\n          **this****.****props****.****match****.****params****.****authorId**\n        **}****`****)**\n      **author = body**\n    **}** **catch** **(e) {}**\n    **this****.setState({** **loading****:** **false****, author })**\n  **}**\n  **componentDidMount () {**\n    **this****.loadData()**\n  **}**\n  **componentDidUpdate (prevProps) {**\n    **if** **(prevProps.match.params.authorId !==**\n      **this****.props.match.params.authorId) {**\n      **this****.loadData()**\n    **}**\n  **}**\n  render () {\n    **if** **(****this****.state.loading) {**\n      **return** **html`****<****${Header}****/><****div****>****Loading ...****</****div****>****`**\n    **}**\n    if (!**this****.state.**author) {\n      return html`<${FourOhFour}\n        staticContext=${this.props.staticContext}\n        error=\"Author not found\"\n      />`\n    }\n    return html`<div>\n      <${Header}/>\n      <h2>${**this****.****state****.**author.name}</h2>\n      <p>${**this****.****state****.**author.bio}</p>\n      <h3>Books</h3>\n      <ul>\n        ${**this****.****state****.**author.books.map((book) =>\n          html`<li key=${book.id}>\n            ${book.title} (${book.year})\n          </li>`\n        )}\n      </ul>\n    </div>`\n  }\n} \n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>My library</title>\n  </head>\n  <body>\n    <div id=\"root\"><div><header><h1><a href=\"/\">My library</a></h1></header>**<div>Loading ...</div>**</div></div>\n    <script type=\"text/javascript\" src=\"img/main.js\"></script>\n  </body>\n</html> \n```", "```js\nimport { AuthorsIndex } from './components/pages/AuthorsIndex.js'\nimport { Author } from './components/pages/Author.js'\nimport { FourOhFour } from './components/pages/FourOhFour.js'\nexport const routes = [\n  {\n    path: '/',\n    exact: true,\n    component: AuthorsIndex\n  },\n  {\n    path: '/author/:authorId',\n    component: Author\n  },\n  {\n    path: '*',\n    component: FourOhFour\n  }\n] \n```", "```js\n// src/frontend/App.js\nimport react from 'react'\nimport htm from 'htm'\nimport { Switch, Route } from 'react-router-dom'\nimport { routes } from './routes.js'\nconst html = htm.bind(react.createElement)\nexport class App extends react.Component {\n  render () {\n    return html`<${Switch}>\n      **${routes****.map(routeConfig =>**\n        **html`****<****${Route}**\n          **key****=****${****routeConfig.****path}**\n          **...****${routeConfig}**\n        **/>****`**\n      **)****}**\n    </>`\n  }\n} \n```", "```js\n// ...\nimport { StaticRouter**, matchPath** } from 'react-router-dom'\n**import** **{ routes }** **from****'./frontend/routes.js'**\n// ... \n```", "```js\n// ...\nconst template = ({ content**, serverData** }) => `<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>My library</title>\n  </head>\n  <body>\n    <div id=\"root\">${content}</div>\n    **${serverData ?** **`<script type=\"text/javascript\">**\n**window.__STATIC_CONTEXT__=****${****JSON****.stringify(****serverData****)****}**\n    **</script>`** **:** **''****}**\n    <script type=\"text/javascript\" src=\"img/main.js\"></script>\n  </body>\n</html>`\n// ... \n```", "```js\n// ...\nserver.get('*', async (req, reply) => {\n  const location = req.raw.originalUrl\n  let component                                            // (1)\n  let match\n  for (const route of routes) {\n    component = route.component\n    match = matchPath(location, route)\n    if (match) {\n      break\n    }\n  }\n  let staticData                                           // (2)\n  let staticError\n  let hasStaticContext = false\n  if (typeof component.preloadAsyncData === 'function') {\n    hasStaticContext = true\n    try {\n      const data = await component.preloadAsyncData({ match })\n      staticData = data\n    } catch (err) {\n      staticError = err\n    }\n  }\n  const staticContext = {\n    [location]: {\n      data: staticData,\n      err: staticError\n    }\n  }\n                                                           // (3)\n  const serverApp = html`\n    <${StaticRouter}\n      location=${location}\n      context=${staticContext}\n    >\n      <${App}/>\n    </>\n  `\n  const content = reactServer.renderToString(serverApp)\n  const serverData = hasStaticContext ? staticContext : null\n  const responseHtml = template({ content, serverData })\n  const code = staticContext.statusCode\n    ? staticContext.statusCode\n    : 200\n  reply.code(code).type('text/html').send(responseHtml)\n// ... \n```", "```js\nimport react from 'react'\nexport class AsyncPage extends react.Component {\n  static async preloadAsyncData (props) {                   // (1)\n    throw new Error('Must be implemented by sub class')\n  }\n  render () {\n    throw new Error('Must be implemented by sub class')\n  }\n  constructor (props) {                                     // (2)\n    super(props)\n    const location = props.match.url\n    this.hasData = false\n    let staticData\n    let staticError\n    const staticContext = typeof window !== 'undefined'\n      ? window.__STATIC_CONTEXT__ // client-side\n      : this.props.staticContext  // server-side\n    if (staticContext && staticContext[location]) {\n      const { data, err } = staticContext[location]\n      staticData = data\n      staticError = err\n      this.hasStaticData = true\n      typeof window !== 'undefined' &&\n        delete staticContext[location]\n    }\n    this.state = {\n      ...staticData,\n      staticError,\n      loading: !this.hasStaticData\n    }\n  }\n  async componentDidMount () {                              // (3)\n    if (!this.hasStaticData) {\n      let staticData\n      let staticError\n      try {\n        const data = await this.constructor.preloadAsyncData(\n          this.props\n        )\n        staticData = data\n      } catch (err) {\n        staticError = err\n      }\n      this.setState({\n        ...staticData,\n        loading: false,\n        staticError\n      })\n    }\n  }\n} \n```", "```js\nimport react from 'react'\nimport htm from 'htm'\nimport { Link } from 'react-router-dom'\nimport superagent from 'superagent'\n**import** **{ AsyncPage }** **from****'./AsyncPage.js'**\nimport { Header } from '../Header.js'\nconst html = htm.bind(react.createElement)\nexport class AuthorsIndex extends **AsyncPage** {\n  **static****async** **preloadAsyncData (props) {**\n    **const** **{ body } =** **await** **superagent.get(**\n      **'http://localhost:3001/api/authors'**\n    **)**\n    **return** **{** **authors****: body }**\n  **}**\n  render () {\n    // unchanged...\n  }\n} \n```", "```js\nimport react from 'react'\nimport htm from 'htm'\nimport superagent from 'superagent'\n**import** **{ AsyncPage }** **from****'./AsyncPage.js'**\nimport { FourOhFour } from './FourOhFour.js'\nimport { Header } from '../Header.js'\nconst html = htm.bind(react.createElement)\nexport class Author extends **AsyncPage** {\n  **static****async** **preloadAsyncData (props) {**\n    **const** **{ body } =** **await** **superagent.get(**\n      **`http://localhost:3001/api/author/****${**\n         **props.****match****.****params****.****authorId**\n      **}****`**\n    **)**\n    **return** **{** **author****: body }**\n  **}**\n  render () {\n    // unchanged...\n  }\n} \n```"]