- en: Chapter 6. Ember Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using components in an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using events in components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing actions in components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing properties to a component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using yield with components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Components are a major feature of Ember.js. With components, you can encapsulate
    code and create widgets and custom tags. In addition, you can pass properties
    to a component, handle events and actions, and wrap content inside of it. Often,
    it can take the place of your controller.
  prefs: []
  type: TYPE_NORMAL
- en: Components align closely to the **W3C** custom elements specification. The W3C
    specification is still in consideration, although, given enough time, it will
    probably be adopted by the Web.
  prefs: []
  type: TYPE_NORMAL
- en: Using components in an application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Components can be used in applications in a variety of ways. In this recipe,
    we'll see how to create a component and add it to a template.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin, we'll create a simple component that displays student information.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new application, generate a new component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All components must have a dash in their names. This will generate the `student-info`
    component. This stub will be created in the `app/components` and `app/templates/components`
    folders as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `student-info.js` file in the `app/components` folder. Add a few simple
    properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this component, we added three properties, `name`, `grade`, and `nickName`.
    We'll use these later in our template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the component template in the `app/templates/components` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this template, we are simply displaying information from the component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, let''s edit the `application.hbs` file in the `app/templates` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component is added to the application template by adding the Handlebars
    expression `{{student-info}}` to it. This will register an inline Handlebars helper
    automatically and render the contents of the `student-info.hbs` file to the `application.hbs`
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's change this example and add the block form.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `student-info.hbs` file and add `yield` to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `{{yield}}` expression will be the placeholder where the outside template
    will render when the component is in block form. We'll discuss this more in the
    *Using yield with components* recipe.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `application.hbs` file with the new block form component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component has a hash (`#`) in front of the name. This is a signal to the
    Handlebars templating engine that the component will be in block form. The `yield`
    helper in the `student-info.hbs` file will display the contents in the block.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `ember server` and you'll see this output:![How to do it...](img/00031.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The students component is displayed here in the application template in block
    form.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: All components are `div` tags. In other words, the component template that is
    created by default will be rendered in a `div` tag. This can be changed using
    the `tagName` property. You simply need to add this property to the component
    JavaScript file in the `components` directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creating a student component dynamically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If needed, you can defer the selection of the component until runtime. Let's
    take a look at an example of doing this with the student component that we created
    in the earlier section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new project, create a new `student-info` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate the necessary files for the `student-info` component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the component file and add this information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This component has a few simple properties.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the component template with this information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Just as before, we are showing some simple properties that are retrieved from
    the component context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new application route in the `app/routes` folder. Add a new `model`
    method called `comp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This model sends back a string array. This array will be used in our template
    as the name of the component that we want to display dynamically.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `application.hbs` file in the `app/templates` folder. Add a new
    `each` helper that will display the new dynamic component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To display a dynamic component, you must use the `{{component}}` helper. The
    first argument of the helper is the name of the component that you want to use.
    In this case, `{{comp}}` is rendered to `student-info`. Note that we can use the
    component helper inline or in block form. If the component is rendered inline,
    `yield` is not used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After running `ember server`, the template will render with the dynamic component:![Creating
    a student component dynamically](img/00032.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Components are used to encapsulate data into a form that can be easily reused
    throughout an application. Each component can be in block or inline form and is
    rendered as a `div` tag by default. Components have a template and JavaScript
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Using events in components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating components, you can attach events to them. Let's take a look at
    an example of this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new project, generate a new component called `student-info`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate a component file in the `component` directory and the `templates/components`
    folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `app/components/student-info.js` file. Add a new `click` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first thing that you'll notice in this example is that we are using the
    ES2015 destructuring assignment. The destructuring assignment syntax extracts
    data from arrays or objects. Instead of typing `Ember.$` everywhere, I can just
    type `$`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Ember CLI by default has jQuery installed. We are using the jQuery syntax to
    fade the HTML document and fade it back after the component is clicked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We aren''t limited to just the `click` event though. There are several events
    that are available to Ember:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Touch events:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`touchStart`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`touchMove`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`touchEnd`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`touchCancel`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Keyboard events:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keyDown`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`keyUp`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`keyPress`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Mouse events:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseDown`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`mouseUp`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`contextMenu`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`click`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`doubleClick`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`mouseMove`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`focusIn`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`focusOut`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`mouseEnter`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`mouseLeave`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Form events:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`submit`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`change`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`focusIn`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`focusOut`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`input`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'HTML5 drag and drop events:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dragStart`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`drag`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`dragEnter`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`dragLeave`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`dragOver`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`dragEnd`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`drop`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For the last step, we need to add the component to our application template.
    There is no need to edit the component template. For now, we''ll just set the
    component to be in block form so that any click on the element will trigger the
    event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `student-info` component is in block form. Click anywhere in the block to
    trigger the `click` event and cause the HTML document to fade.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There is an `index.html` file in the root of the `app` folder. This file has
    the default HTML and `head` tags. It also contains some links to your CSS and
    vendor files. You may notice that there are `{{content-for}}` helpers. These are
    used with Ember add-ons and should not be deleted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `ember server` and the template should render as follows:![How to do it...](img/00033.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The HTML document will fade if any part of the student info block `div` is clicked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ember events in components work by adding the name of the event as a method
    in the component. These events are fired in the template that the component has
    been added to. Components, by default, are `div` tags. So, any event that occurs
    must occur in the context of the `div` tag in the template that is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Ember supports several different types of events, including double-clicking,
    HTML 5 drag and drop events, and touch events. Custom events can be registered
    using the `Ember.Application.customEvents` method.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing actions in components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Components can communicate changes with actions. These actions can be sent back
    to the parent or be handled in the component. Let's take a look at a few recipes
    that show this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we'll create a student list that we will then manipulate.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new project, generate a `student-list` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate the `student-list` component and the necessary files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `student-list.js` file in the `app/components` folder. We''ll need
    to create a few `actions` and a new array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first part of this component is the `init` method. This will fire as soon
    as the component is initialized. This is a private method that sets up the component.
    As we are overriding this framework method, we must call `super` so that the component
    is created correctly. The `setup` method is then called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `setup` method creates a new `listOfStudents` array, clears it, and creates
    three new string objects by popping them onto the array. As we are creating the
    `listOfStudents` array in the `init` method, it will be local to this component
    instance. It's good practice to declare objects or properties in the `init` or
    `didInsertElement` methods. Otherwise, if the object or array is declared as a
    property of the component, the component will no longer have its own independent
    state. We'll be discussing the `didInsertElement` hook later in the book.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There are two `actions` listed, `remove` and `reset`. Both will tie back into
    actions in the component's template that we'll use later. The `remove` action
    removes or pops off one object from the top of the array. The `reset` method calls
    `setup`, and this returns the component to its original state.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a couple of buttons and use the `each` helper to list the contents of the
    array in the `student-list.hbs` file in the `app/templates/components` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `{{action}}` helper will fire when the `remove` and `reset` buttons are
    pressed. The first argument to the `action` helper is always the action name.
    The `each` helper lists the contents of the `listOfStudents` Ember array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For the last part, add the `student-list` component to the application template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will display the contents of the `student-list` component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After starting `ember server`, your output will look as follows:![How to do
    it...](img/00034.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pressing the **Remove** button will remove each item one by one. The `Reset`
    button will reset the array back.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Closure actions with our student component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ember provides you with a way to send actions from a parent to child component.
    We can use closure actions to make this possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new project, generate a new `application` route and a `student-list` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate the `application.js` file in the `app/routes` folder, the
    `application` controller, and the `student-list` component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the application route file, add a new `listOfStudents` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This might look familiar to you from the previous example. Here, we are creating
    a new array called `listOfStudents`. The `beforeModel` hook will run before the
    model is set up. In this `beforeModel`, the `reset` method is called. This adds
    the default data to the array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The model hook returns the `listOfStudents` array. In addition, we added two
    actions, `remove` and `reset`, to remove an item or reset the items back to the
    original array, respectively.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This was essentially the same code that we had in the component earlier but
    we moved it to the route instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `application.hbs` file and add the component that we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This template will show a list of students from our model and our `student-list`
    component. The `onRemove` and `onReset` properties are set to actions that are
    basically functions in our parent controller that we can pass to the component.
    This is called a **closure action**. All closure actions must have parentheses
    surrounding the `(action 'removeController')` action.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add two new actions to the controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These two actions use `this.send` to send the action to the `removeRoute` and
    `resetRoute` actions that we defined earlier. You can use the `send` method to
    trigger actions from parent routes or controllers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the component template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This component displays two buttons that are linked to actions that are defined
    in the component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the component JavaScript file with the two new actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These actions will be triggered from the component template. At this point,
    they'll trigger the function that was passed to it from the closure actions, `onRemove`
    and `onReset`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To invoke these methods, you can do it using either `this.get` or `this.attrs`.
    The `this.get` method and the name of the property, in this case `onRemove`, will
    invoke the method passed to it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the other case, you can use `this.attrs` to access the attributes on the
    property to invoke the function that was passed on, `this.attrs.onReset()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The action will flow this way: **application template -> component -> controller
    -> route**. The end result is the route triggering the action to remove or reset
    the list.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `ember server` and you should see a list that you can now delete or reset:![Closure
    actions with our student component](img/00035.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on the **Remove** or **Reset** buttons will trigger an action that
    was passed in from the controller. This action will bubble up to the route to
    reset or remove an item from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Actions can be handled in a few ways in a component. Actions can be added to
    different HTML tags and be handled within components. Actions can also be sent
    to parent components or controllers using closure actions or send.
  prefs: []
  type: TYPE_NORMAL
- en: Closure actions make the passing of actions much easier. We can pass down actions
    to components that they can then invoke. This helps separate logic between different
    parent routes, controllers, and components.
  prefs: []
  type: TYPE_NORMAL
- en: Passing properties to a component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Components by default are isolated from their surroundings. Any data that the
    component needs must be passed in. In this recipe, we'll create a student list.
    However, we will pass data to the component to be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new application, generate a new component and the `application` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate the `application.js` file in the `routes` folder and the
    files necessary from the `student-list` component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `application.js` file in the `app/routes` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This model will return a simple array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `student-list` template in the `app/templates/components` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will take the `compModel` property and iterate over it using the `each`
    helper.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `application.hbs` file in the `app/templates` folder. Add the new
    `student-info` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `student-list` template has the `compModel` property. This property passes
    in the model that is the application model that we set up earlier in the route.
    Keep in mind that `compModel` is accessed from the inside of the component. The
    model is accessed outside the component. The component does not have any access
    to the model unless it's passed to it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run `ember server` and you should see a list of elements in the model:![How
    to do it...](img/00036.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Components are isolated sets of code that do not have access to the outside
    world. In other words, components must have any data that it needs passed to it.
    You can set this up by adding properties after the name of the component in the
    Handlebars expression.
  prefs: []
  type: TYPE_NORMAL
- en: Using yield with components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Components can be set up in block or inline form. When in block form, components
    can yield information. In this recipe, we'll look at an example of using yield
    to show information in a template.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new project, create a new student component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create the student component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `student-info` template file and add some text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `{{yield}}` expression in the component will be where the text in the block
    will be rendered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the new `student-info` component to the application template file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When in block form, designated by the hash `#`, the information in the block
    will show up in `{{yield}}`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After running `ember server`, the following screen will be displayed:![How to
    do it...](img/00037.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, the component `yield` template displayed the information in
    the block.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `{{yield}}` Handlebars expression works by taking the information in the
    component block and rendering it. The block form is designated by the hash, `#`.
    Inline components do not have the hash and do not yield information.
  prefs: []
  type: TYPE_NORMAL
