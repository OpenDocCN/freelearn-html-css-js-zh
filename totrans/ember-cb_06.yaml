- en: Chapter 6. Ember Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。Ember 组件
- en: 'In this chapter, you''ll learn the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下菜谱：
- en: Using components in an application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用中使用组件
- en: Using events in components
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在组件中使用事件
- en: Implementing actions in components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在组件中实现动作
- en: Passing properties to a component
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将属性传递给组件
- en: Using yield with components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在组件中使用 yield
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Components are a major feature of Ember.js. With components, you can encapsulate
    code and create widgets and custom tags. In addition, you can pass properties
    to a component, handle events and actions, and wrap content inside of it. Often,
    it can take the place of your controller.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是 Ember.js 的一个主要特性。使用组件，您可以封装代码并创建小部件和自定义标签。此外，您可以将属性传递给组件，处理事件和动作，并在其中包装内容。通常，它可以取代您的控制器。
- en: Components align closely to the **W3C** custom elements specification. The W3C
    specification is still in consideration, although, given enough time, it will
    probably be adopted by the Web.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 组件与 **W3C** 自定义元素规范紧密对齐。尽管 W3C 规范仍在考虑中，但鉴于足够的时间，它可能会被 Web 所采用。
- en: Using components in an application
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在应用中使用组件
- en: Components can be used in applications in a variety of ways. In this recipe,
    we'll see how to create a component and add it to a template.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 组件可以在应用中以多种方式使用。在本菜谱中，我们将了解如何创建组件并将其添加到模板中。
- en: How to do it...
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: To begin, we'll create a simple component that displays student information.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个简单的组件来显示学生信息。
- en: 'In a new application, generate a new component:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新应用中生成一个新的组件：
- en: '[PRE0]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All components must have a dash in their names. This will generate the `student-info`
    component. This stub will be created in the `app/components` and `app/templates/components`
    folders as well.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有组件名称都必须包含一个连字符。这将生成 `student-info` 组件。此占位符将在 `app/components` 和 `app/templates/components`
    文件夹中创建。
- en: 'Edit the `student-info.js` file in the `app/components` folder. Add a few simple
    properties:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `app/components` 文件夹中的 `student-info.js` 文件。添加一些简单的属性：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this component, we added three properties, `name`, `grade`, and `nickName`.
    We'll use these later in our template.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此组件中，我们添加了三个属性，`name`、`grade` 和 `nickName`。我们将在模板中稍后使用这些属性。
- en: 'Update the component template in the `app/templates/components` folder:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `app/templates/components` 文件夹中的组件模板：
- en: '[PRE2]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this template, we are simply displaying information from the component.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此模板中，我们只是显示组件中的信息。
- en: 'Finally, let''s edit the `application.hbs` file in the `app/templates` folder:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们编辑 `app/templates` 文件夹中的 `application.hbs` 文件：
- en: '[PRE3]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The component is added to the application template by adding the Handlebars
    expression `{{student-info}}` to it. This will register an inline Handlebars helper
    automatically and render the contents of the `student-info.hbs` file to the `application.hbs`
    file.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过向其中添加 Handlebars 表达式 `{{student-info}}` 来将组件添加到应用模板中。这将自动注册内联 Handlebars 辅助函数并将
    `student-info.hbs` 文件的内容渲染到 `application.hbs` 文件中。
- en: Let's change this example and add the block form.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们更改此示例并添加块形式。
- en: 'Edit the `student-info.hbs` file and add `yield` to it:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `student-info.hbs` 文件并添加 `yield`：
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `{{yield}}` expression will be the placeholder where the outside template
    will render when the component is in block form. We'll discuss this more in the
    *Using yield with components* recipe.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{{yield}}` 表达式将是外部模板在组件以块形式渲染时的占位符。我们将在 *使用 yield 与组件* 菜谱中进一步讨论这一点。'
- en: 'Update the `application.hbs` file with the new block form component:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用新块形式组件更新 `application.hbs` 文件：
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The component has a hash (`#`) in front of the name. This is a signal to the
    Handlebars templating engine that the component will be in block form. The `yield`
    helper in the `student-info.hbs` file will display the contents in the block.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 组件名称前有一个哈希 (`#`) 符号。这是向 Handlebars 模板引擎发出信号，表示组件将以块形式存在。`student-info.hbs` 文件中的
    `yield` 辅助函数将显示块中的内容。
- en: Run `ember server` and you'll see this output:![How to do it...](img/00031.jpeg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `ember server` 并查看此输出：![如何操作...](img/00031.jpeg)
- en: The students component is displayed here in the application template in block
    form.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 学生组件在此应用模板中以块形式显示。
- en: Tip
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: All components are `div` tags. In other words, the component template that is
    created by default will be rendered in a `div` tag. This can be changed using
    the `tagName` property. You simply need to add this property to the component
    JavaScript file in the `components` directory.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有组件都是 `div` 标签。换句话说，默认创建的组件模板将在 `div` 标签中渲染。这可以通过 `tagName` 属性来更改。您只需将此属性添加到
    `components` 目录中的组件 JavaScript 文件中即可。
- en: Creating a student component dynamically
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动态创建学生组件
- en: If needed, you can defer the selection of the component until runtime. Let's
    take a look at an example of doing this with the student component that we created
    in the earlier section.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，你可以在运行时延迟选择组件。让我们看看一个例子，使用我们在早期部分创建的学生组件来做这件事。
- en: 'In a new project, create a new `student-info` component:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新项目中，创建一个新的`student-info`组件：
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will generate the necessary files for the `student-info` component.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将为`student-info`组件生成必要的文件。
- en: 'Edit the component file and add this information:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑组件文件并添加以下信息：
- en: '[PRE7]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This component has a few simple properties.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此组件有几个简单的属性。
- en: 'Update the component template with this information:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下信息更新组件模板：
- en: '[PRE8]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Just as before, we are showing some simple properties that are retrieved from
    the component context.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 就像之前一样，我们正在显示从组件上下文中检索的一些简单属性。
- en: 'Create a new application route in the `app/routes` folder. Add a new `model`
    method called `comp`:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/routes`文件夹中创建一个新的应用程序路由。添加一个名为`comp`的新`model`方法：
- en: '[PRE9]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This model sends back a string array. This array will be used in our template
    as the name of the component that we want to display dynamically.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此模型返回一个字符串数组。此数组将用作我们模板中要动态显示的组件的名称。
- en: 'Update the `application.hbs` file in the `app/templates` folder. Add a new
    `each` helper that will display the new dynamic component:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`app/templates`文件夹中的`application.hbs`文件。添加一个新的`each`助手，该助手将显示新的动态组件：
- en: '[PRE10]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To display a dynamic component, you must use the `{{component}}` helper. The
    first argument of the helper is the name of the component that you want to use.
    In this case, `{{comp}}` is rendered to `student-info`. Note that we can use the
    component helper inline or in block form. If the component is rendered inline,
    `yield` is not used.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要显示动态组件，你必须使用`{{component}}`助手。助手的第一个参数是你想要使用的组件的名称。在这种情况下，`{{comp}}`被渲染为`student-info`。请注意，我们可以使用组件助手的内联形式或块形式。如果组件以内联形式渲染，则不使用`yield`。
- en: After running `ember server`, the template will render with the dynamic component:![Creating
    a student component dynamically](img/00032.jpeg)
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ember server`后，模板将使用动态组件进行渲染：![动态创建学生组件](img/00032.jpeg)
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Components are used to encapsulate data into a form that can be easily reused
    throughout an application. Each component can be in block or inline form and is
    rendered as a `div` tag by default. Components have a template and JavaScript
    file.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 组件用于将数据封装成可以在整个应用程序中轻松重用的形式。每个组件可以是块形式或内联形式，默认情况下以`div`标签的形式渲染。组件有一个模板和JavaScript文件。
- en: Using events in components
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在组件中使用事件
- en: When creating components, you can attach events to them. Let's take a look at
    an example of this.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建组件时，你可以将事件附加到它们上。让我们看看一个例子。
- en: How to do it...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In a new project, generate a new component called `student-info`:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新项目中，生成一个名为`student-info`的新组件：
- en: '[PRE11]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will generate a component file in the `component` directory and the `templates/components`
    folder.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将在`component`目录和`templates/components`文件夹中生成组件文件。
- en: 'Edit the `app/components/student-info.js` file. Add a new `click` event:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`app/components/student-info.js`文件。添加一个新的`click`事件：
- en: '[PRE12]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The first thing that you'll notice in this example is that we are using the
    ES2015 destructuring assignment. The destructuring assignment syntax extracts
    data from arrays or objects. Instead of typing `Ember.$` everywhere, I can just
    type `$`.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个例子中，你首先会注意到我们正在使用ES2015解构赋值。解构赋值语法从数组或对象中提取数据。我无需在所有地方都键入`Ember.$`，只需键入`$`即可。
- en: Ember CLI by default has jQuery installed. We are using the jQuery syntax to
    fade the HTML document and fade it back after the component is clicked.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Ember CLI默认安装了jQuery。我们正在使用jQuery语法来淡入HTML文档，并在组件被点击后淡出。
- en: 'We aren''t limited to just the `click` event though. There are several events
    that are available to Ember:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然我们不仅仅限于`click`事件。Ember还有几个可用的事件。
- en: 'Touch events:'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触摸事件：
- en: '`touchStart`'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`touchStart`'
- en: '`touchMove`'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`touchMove`'
- en: '`touchEnd`'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`touchEnd`'
- en: '`touchCancel`'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`touchCancel`'
- en: 'Keyboard events:'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键盘事件：
- en: '`keyDown`'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`keyDown`'
- en: '`keyUp`'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`keyUp`'
- en: '`keyPress`'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`keyPress`'
- en: 'Mouse events:'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标事件：
- en: '`mouseDown`'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mouseDown`'
- en: '`mouseUp`'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mouseUp`'
- en: '`contextMenu`'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`contextMenu`'
- en: '`click`'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`click`'
- en: '`doubleClick`'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`doubleClick`'
- en: '`mouseMove`'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mouseMove`'
- en: '`focusIn`'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`focusIn`'
- en: '`focusOut`'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`focusOut`'
- en: '`mouseEnter`'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mouseEnter`'
- en: '`mouseLeave`'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`mouseLeave`'
- en: 'Form events:'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单事件：
- en: '`submit`'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`submit`'
- en: '`change`'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`change`'
- en: '`focusIn`'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`focusIn`'
- en: '`focusOut`'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`focusOut`'
- en: '`input`'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`input`'
- en: 'HTML5 drag and drop events:'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5拖放事件：
- en: '`dragStart`'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`dragStart`'
- en: '`drag`'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`drag`'
- en: '`dragEnter`'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`dragEnter`'
- en: '`dragLeave`'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`dragLeave`'
- en: '`dragOver`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`dragOver`'
- en: '`dragEnd`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`dragEnd`'
- en: '`drop`'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`drop`'
- en: 'For the last step, we need to add the component to our application template.
    There is no need to edit the component template. For now, we''ll just set the
    component to be in block form so that any click on the element will trigger the
    event:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于最后一步，我们需要将组件添加到我们的应用程序模板中。目前不需要编辑组件模板。我们将只设置组件为块形式，以便任何对元素的点击都将触发事件：
- en: '[PRE13]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `student-info` component is in block form. Click anywhere in the block to
    trigger the `click` event and cause the HTML document to fade.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`student-info` 组件是块形式的。点击块中的任何位置将触发 `click` 事件，导致 HTML 文档淡出。'
- en: There is an `index.html` file in the root of the `app` folder. This file has
    the default HTML and `head` tags. It also contains some links to your CSS and
    vendor files. You may notice that there are `{{content-for}}` helpers. These are
    used with Ember add-ons and should not be deleted.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `app` 文件夹的根目录下有一个 `index.html` 文件。此文件包含默认的 HTML 和 `head` 标签。它还包含一些指向你的 CSS
    和供应商文件的链接。你可能注意到有 `{{content-for}}` 辅助函数。这些与 Ember 插件一起使用，不应删除。
- en: Run `ember server` and the template should render as follows:![How to do it...](img/00033.jpeg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `ember server`，模板应按以下方式渲染：![如何做...](img/00033.jpeg)
- en: The HTML document will fade if any part of the student info block `div` is clicked.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果点击学生信息块 `div` 的任何部分，HTML 文档将淡出。
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Ember events in components work by adding the name of the event as a method
    in the component. These events are fired in the template that the component has
    been added to. Components, by default, are `div` tags. So, any event that occurs
    must occur in the context of the `div` tag in the template that is rendered.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Ember 组件中的事件通过在组件中添加事件名称作为方法来工作。这些事件在组件被添加到的模板中触发。默认情况下，组件是 `div` 标签。因此，任何事件都必须在渲染的模板中的
    `div` 标签的上下文中发生。
- en: Ember supports several different types of events, including double-clicking,
    HTML 5 drag and drop events, and touch events. Custom events can be registered
    using the `Ember.Application.customEvents` method.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Ember 支持多种不同类型的事件，包括双击、HTML 5 拖放事件和触摸事件。可以使用 `Ember.Application.customEvents`
    方法注册自定义事件。
- en: Implementing actions in components
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在组件中实现动作
- en: Components can communicate changes with actions. These actions can be sent back
    to the parent or be handled in the component. Let's take a look at a few recipes
    that show this.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 组件可以通过动作与变化进行通信。这些动作可以发送回父组件或在组件中处理。让我们看看几个展示这一点的示例。
- en: How to do it...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: In this recipe, we'll create a student list that we will then manipulate.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将创建一个学生列表，然后对其进行操作。
- en: 'In a new project, generate a `student-list` component:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新项目中，生成一个 `student-list` 组件：
- en: '[PRE14]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will generate the `student-list` component and the necessary files.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将生成 `student-list` 组件和必要的文件。
- en: 'Update the `student-list.js` file in the `app/components` folder. We''ll need
    to create a few `actions` and a new array:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `app/components` 文件夹中的 `student-list.js` 文件。我们需要创建几个 `actions` 和一个新的数组：
- en: '[PRE15]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The first part of this component is the `init` method. This will fire as soon
    as the component is initialized. This is a private method that sets up the component.
    As we are overriding this framework method, we must call `super` so that the component
    is created correctly. The `setup` method is then called.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此组件的第一部分是 `init` 方法。该方法将在组件初始化时立即触发。这是一个私有方法，用于设置组件。由于我们正在重写此框架方法，我们必须调用 `super`
    以确保组件正确创建。然后调用 `setup` 方法。
- en: The `setup` method creates a new `listOfStudents` array, clears it, and creates
    three new string objects by popping them onto the array. As we are creating the
    `listOfStudents` array in the `init` method, it will be local to this component
    instance. It's good practice to declare objects or properties in the `init` or
    `didInsertElement` methods. Otherwise, if the object or array is declared as a
    property of the component, the component will no longer have its own independent
    state. We'll be discussing the `didInsertElement` hook later in the book.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`setup` 方法创建一个新的 `listOfStudents` 数组，将其清空，并通过将其弹出到数组中来创建三个新的字符串对象。由于我们在 `init`
    方法中创建 `listOfStudents` 数组，它将属于此组件实例的局部变量。在 `init` 或 `didInsertElement` 方法中声明对象或属性是良好的实践。否则，如果对象或数组被声明为组件的属性，组件将不再拥有其独立的独立状态。我们将在本书的后面讨论
    `didInsertElement` 钩子。'
- en: There are two `actions` listed, `remove` and `reset`. Both will tie back into
    actions in the component's template that we'll use later. The `remove` action
    removes or pops off one object from the top of the array. The `reset` method calls
    `setup`, and this returns the component to its original state.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a couple of buttons and use the `each` helper to list the contents of the
    array in the `student-list.hbs` file in the `app/templates/components` folder:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `{{action}}` helper will fire when the `remove` and `reset` buttons are
    pressed. The first argument to the `action` helper is always the action name.
    The `each` helper lists the contents of the `listOfStudents` Ember array.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For the last part, add the `student-list` component to the application template:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will display the contents of the `student-list` component.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After starting `ember server`, your output will look as follows:![How to do
    it...](img/00034.jpeg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pressing the **Remove** button will remove each item one by one. The `Reset`
    button will reset the array back.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Closure actions with our student component
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ember provides you with a way to send actions from a parent to child component.
    We can use closure actions to make this possible.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new project, generate a new `application` route and a `student-list` component:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will generate the `application.js` file in the `app/routes` folder, the
    `application` controller, and the `student-list` component.
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the application route file, add a new `listOfStudents` array:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This might look familiar to you from the previous example. Here, we are creating
    a new array called `listOfStudents`. The `beforeModel` hook will run before the
    model is set up. In this `beforeModel`, the `reset` method is called. This adds
    the default data to the array.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The model hook returns the `listOfStudents` array. In addition, we added two
    actions, `remove` and `reset`, to remove an item or reset the items back to the
    original array, respectively.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This was essentially the same code that we had in the component earlier but
    we moved it to the route instead.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `application.hbs` file and add the component that we just created:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This template will show a list of students from our model and our `student-list`
    component. The `onRemove` and `onReset` properties are set to actions that are
    basically functions in our parent controller that we can pass to the component.
    This is called a **closure action**. All closure actions must have parentheses
    surrounding the `(action 'removeController')` action.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add two new actions to the controller:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: These two actions use `this.send` to send the action to the `removeRoute` and
    `resetRoute` actions that we defined earlier. You can use the `send` method to
    trigger actions from parent routes or controllers.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the component template file:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This component displays two buttons that are linked to actions that are defined
    in the component.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the component JavaScript file with the two new actions:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: These actions will be triggered from the component template. At this point,
    they'll trigger the function that was passed to it from the closure actions, `onRemove`
    and `onReset`.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些动作将从组件模板触发。此时，它们将触发从关闭操作传递给它的函数，即`onRemove`和`onReset`。
- en: To invoke these methods, you can do it using either `this.get` or `this.attrs`.
    The `this.get` method and the name of the property, in this case `onRemove`, will
    invoke the method passed to it.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要调用这些方法，你可以使用`this.get`或`this.attrs`。在这种情况下，`this.get`方法和属性名`onRemove`将调用传递给它的方法。
- en: In the other case, you can use `this.attrs` to access the attributes on the
    property to invoke the function that was passed on, `this.attrs.onReset()`.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在另一种情况下，你可以使用`this.attrs`来访问属性上的属性以调用传递的函数，即`this.attrs.onReset()`。
- en: 'The action will flow this way: **application template -> component -> controller
    -> route**. The end result is the route triggering the action to remove or reset
    the list.'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 动作将按此方式流动：**应用模板 -> 组件 -> 控制器 -> 路由**。最终结果是路由触发动作以删除或重置列表。
- en: Run `ember server` and you should see a list that you can now delete or reset:![Closure
    actions with our student component](img/00035.jpeg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ember server`，你应该会看到一个可以删除或重置的列表：![使用我们的学生组件的关闭操作](img/00035.jpeg)
- en: Clicking on the **Remove** or **Reset** buttons will trigger an action that
    was passed in from the controller. This action will bubble up to the route to
    reset or remove an item from the list.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**删除**或**重置**按钮将触发从控制器传递进来的动作。这个动作将冒泡到路由以重置或从列表中删除一个项目。
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Actions can be handled in a few ways in a component. Actions can be added to
    different HTML tags and be handled within components. Actions can also be sent
    to parent components or controllers using closure actions or send.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件中可以通过几种方式处理动作。动作可以添加到不同的HTML标签中，并在组件内部处理。动作还可以通过关闭操作或发送操作发送到父组件或控制器。
- en: Closure actions make the passing of actions much easier. We can pass down actions
    to components that they can then invoke. This helps separate logic between different
    parent routes, controllers, and components.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭操作使得传递动作变得更容易。我们可以将动作传递给组件，然后它们可以调用这些动作。这有助于在不同父路由、控制器和组件之间分离逻辑。
- en: Passing properties to a component
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将属性传递给组件
- en: Components by default are isolated from their surroundings. Any data that the
    component needs must be passed in. In this recipe, we'll create a student list.
    However, we will pass data to the component to be rendered.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 组件默认情况下与其周围环境隔离。组件需要的任何数据都必须传递进来。在这个菜谱中，我们将创建一个学生列表。然而，我们将传递数据到组件以进行渲染。
- en: How to do it...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'In a new application, generate a new component and the `application` route:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新应用中，生成一个新的组件和`application`路由：
- en: '[PRE24]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This will generate the `application.js` file in the `routes` folder and the
    files necessary from the `student-list` component.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将在`routes`文件夹中生成`application.js`文件以及从`student-list`组件必需的文件。
- en: 'Edit the `application.js` file in the `app/routes` folder:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`app/routes`文件夹中的`application.js`文件：
- en: '[PRE25]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This model will return a simple array.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此模型将返回一个简单的数组。
- en: 'Update the `student-list` template in the `app/templates/components` folder:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`app/templates/components`文件夹中的`student-list`模板：
- en: '[PRE26]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This will take the `compModel` property and iterate over it using the `each`
    helper.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将使用`compModel`属性，并通过`each`辅助函数遍历它。
- en: 'Edit the `application.hbs` file in the `app/templates` folder. Add the new
    `student-info` component:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`app/templates`文件夹中的`application.hbs`文件。添加新的`student-info`组件：
- en: '[PRE27]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `student-list` template has the `compModel` property. This property passes
    in the model that is the application model that we set up earlier in the route.
    Keep in mind that `compModel` is accessed from the inside of the component. The
    model is accessed outside the component. The component does not have any access
    to the model unless it's passed to it.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`student-list`模板具有`compModel`属性。这个属性传递了在路由中之前设置的模型，即应用程序模型。请注意，`compModel`是从组件内部访问的。模型是从组件外部访问的。除非将其传递给它，否则组件无法访问模型。'
- en: Run `ember server` and you should see a list of elements in the model:![How
    to do it...](img/00036.jpeg)
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ember server`，你应该在模型中看到元素列表：![如何实现...](img/00036.jpeg)
- en: How it works...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Components are isolated sets of code that do not have access to the outside
    world. In other words, components must have any data that it needs passed to it.
    You can set this up by adding properties after the name of the component in the
    Handlebars expression.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是独立的代码集合，无法访问外部世界。换句话说，组件必须通过传递给它任何所需的数据。您可以通过在Handlebars表达式中组件名称后添加属性来设置此操作。
- en: Using yield with components
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用组件的yield
- en: Components can be set up in block or inline form. When in block form, components
    can yield information. In this recipe, we'll look at an example of using yield
    to show information in a template.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 组件可以以块或内联形式设置。当以块形式时，组件可以提供信息。在这个菜谱中，我们将查看使用yield在模板中显示信息的示例。
- en: How to do it...
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In a new project, create a new student component:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新项目中，创建一个新的学生组件：
- en: '[PRE28]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will create the student component.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建学生组件。
- en: 'Edit the `student-info` template file and add some text:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`student-info`模板文件并添加一些文本：
- en: '[PRE29]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `{{yield}}` expression in the component will be where the text in the block
    will be rendered.
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 组件中的`{{yield}}`表达式将是块中文本将被渲染的地方。
- en: 'Add the new `student-info` component to the application template file:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的`student-info`组件添加到应用程序模板文件中：
- en: '[PRE30]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: When in block form, designated by the hash `#`, the information in the block
    will show up in `{{yield}}`.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当以块形式时，由哈希符号`#`指定，块中的信息将显示在`{{yield}}`中。
- en: After running `ember server`, the following screen will be displayed:![How to
    do it...](img/00037.jpeg)
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ember server`后，将显示以下屏幕：![如何操作...](img/00037.jpeg)
- en: As you can see, the component `yield` template displayed the information in
    the block.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您所见，组件`yield`模板显示了块中的信息。
- en: How it works...
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `{{yield}}` Handlebars expression works by taking the information in the
    component block and rendering it. The block form is designated by the hash, `#`.
    Inline components do not have the hash and do not yield information.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`{{yield}}` Handlebars表达式通过获取组件块中的信息并将其渲染出来来工作。块形式由哈希符号`#`指定。内联组件没有哈希符号，并且不提供信息。'
