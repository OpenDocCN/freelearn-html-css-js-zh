- en: Preformatted text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This typography style is used for displaying blocks of code on a website using
    the `<pre>` tag. Like the previous components, its `top-margin` has been removed
    and it has a `bottom margin` of `1rem`.
  prefs: []
  type: TYPE_NORMAL
- en: Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The table component has been adjusted slightly to ensure consistent text alignment
    in all cells. The styles for the `<caption>` tag have also been adjusted a bit
    for better legibility.
  prefs: []
  type: TYPE_NORMAL
- en: Forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The form component is much simpler in Bootstrap 4\. Much of the default styling
    has been removed to make the component easier to use and customize. Here are some
    of the highlights you should be aware of:'
  prefs: []
  type: TYPE_NORMAL
- en: Most of the styles have been removed on the `<fieldset>` tag. The borders, padding,
    and margin are no longer there.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<legend>` tag has been simplified and is much more minimal in look now.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `<label>` tag is now set to `display: inline-block` to allow margins to
    be added.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Default margins have been removed from the following tags: `<input>`, `<select>`,
    `<textarea>`, and `<button>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<textarea>`s can now only be resized vertically. They can''t be resized horizontally,
    which often breaks page layouts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That covers the key elements you need to be aware of with Reboot. If you're
    interested in learning more, please check out the docs at [http://v4-alpha.getbootstrap.com/content/reboot/](http://v4-alpha.getbootstrap.com/content/reboot/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've reviewed the Reboot CSS reset, it's time to actually start covering
    the content components and adding them to our blog project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Content classes in Bootstrap 4 are not that different from version 3\. If you
    are fluent in Bootstrap 3, you may want to jump ahead to the next chapter at this
    point.
  prefs: []
  type: TYPE_NORMAL
- en: Learning to use typography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Bootstrap 4, there are no major changes with the core typographic HTML tags.
    Header tags and their supporting CSS classes still work as they always have. However,
    there are some new utility classes you can use with some type tags to provide
    further variations for things like headers and titles. Later on in the book we'll
    be using a number of type tags and styles in our blog project. A couple of quick
    examples would be header tags for page and post titles, and lists for a number
    of different components. Let's start by reviewing the new display heading classes
    in Bootstrap 4.
  prefs: []
  type: TYPE_NORMAL
- en: Using display headings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Regular header tags work great in the flow of a page and are key for setting
    up the hierarchy of an article. For a landing page or other display-type templates,
    you may require additional header styles. This is where you can use the new display
    heading classes to create slightly larger titles with some different styling.
    There are four different levels of display headings you can use and the markups
    to render them are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Keep in mind you can apply these classes to any header tag you like. `display-1`
    will be the largest and the headers will shrink as you increase their size. For
    example,Â `display-4` would be the smallest of the options. Here''s what the headers
    will look like when rendered in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using display headings](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Keep in mind, you can apply these classes to any header tag you like. `display-1`
    will be the largest and the headers will shrink as you increase their size. For
    example, `display-4` would be the smallest of the options.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing headings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may want to add some additional context to your headers and you can easily
    do this with some included Bootstrap 4 utility classes. By using a contextual
    text class, you can tag on a description to a heading like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, I''ve added a class of `text-muted` to a `<small>` tag that
    is nested within my header tag. This will style the descriptive part of the text
    a bit differently, which creates a nice looking effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing headings](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using the lead class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another utility text class that has been added to Bootstrap 4 is the `lead`
    class. This class is used if you want to make a paragraph of text stand out. It
    will increase the font size by 25% and set the font-weight of the text to light
    or 300\. It''s easy to add, as the following code shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the lead class](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, this gives the text a unique look. This would be good to use
    as the first paragraph in a blog post or perhaps to call out some text at the
    top of a landing page.
  prefs: []
  type: TYPE_NORMAL
- en: Working with lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bootstrap 4 comes with a number of list options out of the box. These CSS classes
    can be applied to the `<ul>`, `<ol>`, or `<dl>` tags to generate some styling.
    Let's start with the unstyled list.
  prefs: []
  type: TYPE_NORMAL
- en: Coding an unstyled list
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In some cases, you may want to remove the default bullets or numbers that come
    with ordered or unordered lists. This can be useful when creating a navigation,
    or perhaps you just want to create a list of items without bullet points. You
    can do this by using the `list-unstyled` class on the wrapping list tag. Here''s
    an example of a basic unstyled, unordered list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce a list with no bullet points that will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding an unstyled list](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also nest additional lists inside if we want to create multi-level,
    indented lists. However, keep in mind that the `list-unstyled` class will only
    work on the first level of your list. Any nested additional lists will have their
    bullets or numbers. The code for this variation would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding variation will look like the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding an unstyled list](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, if we check out this code sample in a browser, you'll notice you will see
    the bullet points for the child list that is nested within the parent.
  prefs: []
  type: TYPE_NORMAL
- en: Creating inline lists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The unstyled list is probably the one you will use the most. The next most
    useful class is `list-inline`, which will line up each `<li>` in a horizontal
    line. This is very useful for creating navigations or sub-navigations in a website
    or application. The code for this list is almost the same as the last, but we
    change the class name to `list-inline`. We also need to add a class of `list-inline-item`
    to each `<li>` tag. This is a new change for Bootstrap 4, so make sure you don''t
    miss it in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As I mentioned, the code is similar to the unstyled list, with a few changes.
    Here''s what it will look like when rendered in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating inline lists](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: I think you can see how this would be a lightweight way to set up a horizontal
    navigation for your project. Let's move onto the last list type, which is a description
    list.
  prefs: []
  type: TYPE_NORMAL
- en: Using description lists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A description list allows you to create a horizontal display for terms and
    descriptions. Let''s take a look at a basic list''s code and then break it down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few things going on here that you need to be aware of, so let me
    break them all down for you:'
  prefs: []
  type: TYPE_NORMAL
- en: First you start a description list using the `<dl>` tag. It requires a class
    of `dl-horizontal` to trigger the list component styles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each row is made up of a `<dt>` and `<dd>` tag. `<dt>` stands for term, while
    `<dd>` stands for description. Each tag should take a column class and is flexible,
    depending on how you want to lay out your list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the third row, you'll notice a class called `text-truncate`. This class will
    truncate really long terms or text so they don't run outside the width of the
    column. This is a good technique to use for long chunks of text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that I''ve explained all the code for the description list, let''s see
    what this sample should look like in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using description lists](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That completes the typography styles that you need to know about in Bootstrap
    4\. Next, let me teach you what you can do with images in Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: How to style images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Bootstrap allows you to do a few useful things with images through the use
    of CSS classes. These things include: making images responsive, converting images
    to shapes, and aligning images. In the next section, I''ll show you how to apply
    all these techniques to your images.'
  prefs: []
  type: TYPE_NORMAL
- en: Making images responsive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bootstrap 4 comes with a new responsive image class that is super-handy when
    developing websites or web-based applications. When applying the class `img-fluid`
    to an `<img>` tag, it will automatically set the `max-width` of the image to `100%`
    and the `height` to `auto`. The result will be an image that scales with the size
    of the device viewport. Here''s what the code looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s as easy as adding that class to the image to trigger the responsive controls.
    A word of advice: I would recommend making your images a little bit bigger than
    the maximum size you think you will need. That way, the image will look good on
    all screen sizes.'
  prefs: []
  type: TYPE_NORMAL
- en: Using image shapes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bootstrap allows you to apply three different shape styles to images:'
  prefs: []
  type: TYPE_NORMAL
- en: '`img-rounded` will add round corners to your image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`img-circle` will crop your image into a circle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`img-thumbnail` will add round corners and a border to make the image look
    like a thumbnail'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As with the responsive images, all you need to do is add a single CSS class
    to the `<img>` tag to apply these styles. The reason you would want to use these
    classes is to avoid having to actually create these variations in an app such
    as Photoshop. It''s much easier to apply this simple image formatting using code.
    Here''s the code for each variation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''ve coded that up, it should look like this in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using image shapes](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I'm using one of my own images here; you'll need to swap in an image in your
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Aligning images with CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final Bootstrap classes you can apply to images are the alignment classes.
    They will allow you to align your image to the left, right, or center of your
    layout. Like the previous examples, you only need to add a single CSS class to
    the `<img>` tag to apply the alignment you want. With left and right alignment,
    you can also provide a column size within the class name. The best policy would
    be to use the same size as the column the image is contained within. Therefore,
    if your image is displayed in a column with a class of `col-xs-4`, then use the
    `-xs` unit in the alignment class name. Here''s what the left and right alignment
    code looks like using the extra small size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Aligning images with CSS](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Aligning images with CSS](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The final image alignment class you can use is to center the image in the layout.
    The class name for this is a little bit different, as you can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Aligning images with CSS](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That concludes the section on image classes that you can use in your Bootstrap
    layouts. Next we will look at writing and rendering tables using Bootstrap 4.
  prefs: []
  type: TYPE_NORMAL
- en: Coding tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tables in Bootstrap 4 are largely unchanged from the previous version of the
    framework. However, there are a few new things, like inverse color table options
    and responsive tables. Let's start with the basics and we will build in the new
    features as we go.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the basic table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The basic table structure in Bootstrap takes advantage of almost all the available
    HTML table tags. The header is wrapped in `<thead>` and the body `<tbody>` tags.
    This will allow additional styling as we get into the inverse table layout. For
    now, let''s see how we put together a basic table in Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the syntax is fairly straightforward. The only class being
    applied is the root `table` class on the `<table>` tag. This needs to be applied
    to any table variation you are using in Bootstrap. This will produce a table that
    looks like the following in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the basic table](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the syntax is fairly straightforward. The only class being applied
    is the root `table` class on the `<table>` tag. This needs to be applied to any
    table variation you are using in Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Inversing a table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let me quickly show you one of the new table classes in Bootstrap 4\. If we
    add the class `table-inverse` to the `<table>` tag, the table colors will flip
    to be a dark background with light text. Here''s the code you need to change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This slight variation in code will produce a table that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inversing a table](img/00045.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That's a pretty handy trick to know if you need to get a quick variation of
    the basic table styles going.
  prefs: []
  type: TYPE_NORMAL
- en: Inversing the table header
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perhaps you don''t want to inverse the entire table? If that is the case, you
    can use the `thead-inverse` class on the `<thead>` tag to only inverse that row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If this variation is applied, then your table will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inversing the table header](img/00046.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you're looking for a more subtle design for your project, this approach may
    be more appealing to you.
  prefs: []
  type: TYPE_NORMAL
- en: Adding striped rows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although not new to Bootstrap 4, the `table-striped` class is one that I use
    all the time. Applying this class to the `<table>` tag will add zebra striping
    to your table, starting with the first row in the body and applying a light grey
    background color on all the odd numbered rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Using this class will produce a table that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding striped rows](img/00047.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now our table is starting to come together. With a few classes, we can get an
    attractive-looking layout. Let's see what else we can do with tables.
  prefs: []
  type: TYPE_NORMAL
- en: Adding borders to a table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another style that is regularly used is to add borders to your table. This
    can be done in the same way as stripes. Just change or add another class to the
    `<table>` tab called `table-bordered`. For this example, I''ll remove the stripes
    and add the borders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we''ve added the borders and taken away the stripes, our table should
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Adding borders to a table](img/00048.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It's important to know that you can combine the table classes and use more than
    one. What if you wanted a table with stripes and borders? You can do that easily,
    by including both of the corresponding classes.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a hover state to rows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s possible and easy to add a hover state to each of your table rows. To
    do so, you just need to add the `table-hover` class to the `<table>` tag. When
    used, if you hover over a row in the table, its background color will change to
    indicate a state change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here I''ve removed the other table classes to show you the basic hover table
    option. When viewed in the browser, the table should look like the following when
    a row is hovered over with the mouse:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a hover state to rows](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In some cases you may require a table with smaller text and compressed height.
    This can be done by adding the `table-sm` class to the `<table>` tag. This will
    make the look of the table more compact when viewing it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you choose to use this class, your table should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a hover state to rows](img/00050.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating smaller tables
  prefs: []
  type: TYPE_NORMAL
- en: That concludes the core table variations that you can apply through a simple
    CSS class. Before we move on, there are a couple more important points on tables
    that we should go over.
  prefs: []
  type: TYPE_NORMAL
- en: Color-coating table rows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In some cases, you may want to color the background of a table row in a different
    color. This can easily be achieved through the use of some included contextual
    classes. There are five different color variations you can choose from:'
  prefs: []
  type: TYPE_NORMAL
- en: '`table-active` is the hover color, light grey by default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table-success` is green for a positive action'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table-info` is blue for an informational highlight'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table-warning` is yellow to call out something that needs attention'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`table-danger` is red for a negative or error action'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The precedingÂ classes can be applied to either a `<tr>` or `<td>` tag. If I
    apply all of these color variations to a single table, they look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Color-coating table rows](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, these classes can be useful for validation or just highlighting
    a particular row that needs to stand out more.
  prefs: []
  type: TYPE_NORMAL
- en: Making tables responsive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adding responsiveness to tables has never been very easy to do with CSS. Thankfully,
    Bootstrap 4 comes with some support built right in that you can easily take advantage
    of. To make a table responsive, you simply need to wrap a `<div>` around your
    `<table>` that has a class of `table-responsive` on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If you view the table on a viewport that is smaller than 768px, then the table
    cells will scroll horizontally, so they can all be viewed. If the viewport is
    larger, you will see no difference in the table compared to a regular one.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With tables finished off, that brings this chapter to a close. I hope this
    has been a good introduction to content components in Bootstrap, as well as a
    good review of what''s new for these types of components in Bootstrap 4\. To review,
    we learned about: Reboot, typography, images, and tables. In the next chapter,
    we''ll start to jump into some more complicated components and build them into
    our blog project.'
  prefs: []
  type: TYPE_NORMAL
- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What allowance does the description list provide the user?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A description list allows the user to create a horizontal display for terms
    and descriptions
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Allowance for creating navigations or sub-navigations in a website or application
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When creating a navigation, or perhaps you just want to create a list of items
    without bullet points
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the changes that takes place in an image when the img-fluid class is
    applied to `<img>` tag?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It will automatically set the width to 100%
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It will set the height to auto
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It will automatically set the max-width of the image to 100% and the height
    to auto
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is the shape style of images?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`img-border`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`img-thumbnail`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`img-pixel`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`img-round`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What will the below snippet output?![Assessments](img/00052.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It makes the table responsive
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If you `hover` over a row in the table, its background color will change to
    indicate a state change
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Will add zebra striping to your table, starting with the first row in the body
    and applying a light grey `background color` on all the odd numbered rows
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The table colors will flip to be a dark background with light text
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With left and right alignment, you can also provide a `column size` within the
    `class name`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
