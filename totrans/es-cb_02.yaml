- en: Staying Compatible with Legacy Browsers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与旧版浏览器保持兼容
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Installing Node.js with NVM
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用NVM安装Node.js
- en: Installing and configuring webpack
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置webpack
- en: Adding fallback script tags to load client bundles
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加回退脚本标签以加载客户端包
- en: Shimming methods with Babel Polyfill
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Babel Polyfill模拟方法
- en: Supporting new language features with Babel
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Babel支持新语言功能
- en: Using tools to analyze webpack bundles
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用工具分析webpack包
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the preceding chapter, we covered how to take advantage of the new ECMAScript
    modules to load code from multiple files and organize our code. This cutting-edge
    technique has only recently become available in browsers. In practice, production
    websites try to target as many users as possible. This often means targeting older
    browsers. In addition, JavaScript also runs in other environments (such as Node.js) that
    do not support ECMAScript modules.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了如何利用新的ECMAScript模块从多个文件加载代码并组织我们的代码。这项前沿技术最近才在浏览器中可用。在实践中，生产网站试图针对尽可能多的用户。这通常意味着针对旧浏览器。此外，JavaScript还运行在其他环境（如Node.js）中，这些环境不支持ECMAScript模块。
- en: The good news is that we don't have to change our source code in order to support
    these platforms. There are tools available that produce a single JavaScript file
    from multiple source files. This way we can use modules to organize our code,
    and run our programs on more platforms.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，我们不需要更改源代码来支持这些平台。有工具可以将多个源文件生成一个单一的JavaScript文件。这样我们就可以使用模块来组织我们的代码，并在更多平台上运行我们的程序。
- en: The recipes in this chapter focus on installation and configuration of webpack
    in order to provide a fallback option for platforms that don't support ES modules
    and other more recent additions to the language.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的配方侧重于webpack的安装和配置，以便为不支持ES模块和其他语言更新添加的平台提供回退选项。
- en: Installing Node.js with NVM – Linux and macOS
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NVM在Linux和macOS上安装Node.js
- en: 'Node provides installation binaries for Windows and macOS on its website:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Node在其网站上提供了Windows和macOS的安装二进制文件：
- en: '[https://nodejs.org/en/download/](https://nodejs.org/en/download/).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://nodejs.org/en/download/](https://nodejs.org/en/download/).'
- en: It's easy to install Node.js by downloading the appropriate installer for your
    OS and processor. However, it is useful to have a version manager so that you
    can work on projects that require different versions, and use the latest version.
    This is especially useful if your package manager doesn't provide a recent version
    of Node.js (for example, Ubuntu).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过下载适用于您的操作系统和处理器的适当安装程序来安装Node.js很容易。然而，拥有一个版本管理器很有用，这样您就可以在需要不同版本的项目上工作，并使用最新版本。这对于您的包管理器不提供Node.js的最新版本（例如，Ubuntu）尤其有用。
- en: Subsequent recipes will assume that Node.js is installed. This recipe demonstrates
    how to install Node.js for Linux and macOS. The next recipe will cover the installation
    instructions for Windows.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 后续配方将假设已安装Node.js。此配方演示了如何在Linux和macOS上安装Node.js。下一配方将涵盖Windows的安装说明。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe is only for Linux and macOS. See the next recipe for Windows instructions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方仅适用于Linux和macOS。有关Windows说明，请参阅下一配方。
- en: You must have git installed. This comes installed on macOS, and Linux distributions
    should provide git through their package managers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须已安装git。它在macOS上已安装，Linux发行版应通过其包管理器提供git。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序。
- en: 'Clone the `nvm` project into a directory in your home folder:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`nvm`项目克隆到您的家目录中的一个目录中：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code to the bottom of your `~/.bashrc` or `~/.zshrc` file.
    If you don''t know what shell you are running, it is probably bash and you should
    add the entry to `~/.bashrc`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的`~/.bashrc`或`~/.zshrc`文件的底部。如果您不知道您正在运行什么shell，它可能是bash，您应该将条目添加到`~/.bashrc`：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Save the file and return to your command line:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并返回到您的命令行：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Confirm your installation by checking the version number of `nvm`:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过检查`nvm`的版本号来确认您的安装：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'List all of the node versions available for installation:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出所有可安装的node版本：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Install the latest **Long Term Support** (**LTS**) or stable version. (At the
    time of writing, version 8.9.4 is the latest LTS version):'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装最新的**长期支持**（**LTS**）或稳定版本。（在撰写本文时，版本8.9.4是最新LTS版本）：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Confirm the installation of `node` and `npm` by checking their version numbers:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过检查`node`和`npm`的版本号来确认它们的安装：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The keys to this installation are *step 4* and *step 5*. The *step* *4* ensures
    that the `nvm` executable is part of your environment's PATH, and the associated
    environment variables are set. When you run `nvm install 6.11`, the `nvm` executable
    is run, and the node binaries are installed to the expected location.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此安装的关键是 *步骤 4* 和 *步骤 5*。*步骤 4* 确保了 `nvm` 可执行文件是您环境 PATH 的一部分，并且设置了相关环境变量。当您运行
    `nvm install 6.11` 时，`nvm` 可执行文件将被运行，node 二进制文件将被安装到预期位置。
- en: There's more...
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'If we have also installed version v9.6.1, we would use the following command
    to set it as the default:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还安装了版本 v9.6.1，我们可以使用以下命令将其设置为默认版本：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now when we open a new shell, v9.6.1 will be the Node.js version in use.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们打开一个新的 shell，v9.6.1 将是正在使用的 Node.js 版本。
- en: 'Installing Node.js with NVM: Windows'
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 NVM 安装 Node.js：Windows
- en: Subsequent recipes will assume that Node.js is installed. This recipe demonstrates
    how to install Node.js for Windows.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 后续的食谱将假设已经安装了 Node.js。本食谱演示了如何在 Windows 上安装 Node.js。
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe is meant for the Windows environment. See the previous recipe for
    macOS and Linux instructions.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱适用于 Windows 环境。有关 macOS 和 Linux 指令，请参阅前面的食谱。
- en: 'You must also have git installed. You can download git from the following link:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您还必须安装 git。您可以从以下链接下载 git：
- en: '[https://git-scm.com/download/win](https://git-scm.com/download/win).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://git-scm.com/download/win](https://git-scm.com/download/win)。'
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Visit the project release page:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问项目发布页面：
- en: '[https://github.com/coreybutler/nvm-windows/releases](https://github.com/coreybutler/nvm-windows/releases).'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/coreybutler/nvm-windows/releases](https://github.com/coreybutler/nvm-windows/releases)。'
- en: Download the latest `nvm-setup.zip` file.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载最新的 `nvm-setup.zip` 文件。
- en: Extract the downloaded ZIP.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压下载的 ZIP 文件。
- en: Double-click **nvm-setup**.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 **nvm-setup**。
- en: Go through the wizard to complete the installation.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向导完成安装。
- en: Open the Command Prompt.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符。
- en: 'Confirm the installation by checking the version number of `nvm`:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过检查 `nvm` 的版本号来确认安装：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'List all of the Node.js versions available for installation:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出所有可安装的 Node.js 版本：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Install the latest LTS or stable version (at time of writing, version 8.9.4
    is the latest LTS version):'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装最新的 LTS 或稳定版本（截至编写时，版本 8.9.4 是最新的 LTS 版本）：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Enter the following command to activate this version:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以激活此版本：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The installation downloads the installation wizard. The installation wizard
    downloads the executable files associated with `nvm`, and adjusts the PATH environment
    variable. The PATH is used to look up programs when they are executed on the command
    line. If a program is in one of the folders found in the PATH, then it can be
    executed without referencing its absolute or relative path.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序会下载安装向导。安装向导会下载与 `nvm` 相关的可执行文件，并调整 PATH 环境变量。PATH 用于在命令行上执行程序时查找程序。如果一个程序位于
    PATH 中找到的文件夹之一中，那么它可以不引用其绝对或相对路径而执行。
- en: There's more...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'If we have also installed version v9.6.1, we would use the following command
    to set it as the default:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还安装了版本 v9.6.1，我们可以使用以下命令将其设置为默认版本：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now when we open a new shell, v8.6.0 will be the Node.js version in use. Unlike
    the macOS and Linux versions, the last version selected is maintained through
    shell sessions, and a default doesn't need to be set.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们打开一个新的 shell，v8.6.0 将是正在使用的 Node.js 版本。与 macOS 和 Linux 版本不同，最后选择的版本将通过 shell
    会话保持，并且不需要设置默认版本。
- en: Installing and configuring webpack
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置 webpack
- en: As mentioned before, there are a few options for creating JavaScript bundles.
    Rollup and Babel are popular tools that can perform this task. The webpack is
    a good option because it is widely used and has a large plugin base.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，创建 JavaScript 包有几个选项。Rollup 和 Babel 是流行的工具，可以执行此任务。webpack 是一个好的选择，因为它被广泛使用，并且拥有庞大的插件库。
- en: This recipe demonstrates how to install and configure webpack to build a JavaScript
    bundle.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱演示了如何安装和配置 webpack 以构建 JavaScript 包。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You'll need to have Node.js installed. If not, please see the appropriate recipe
    for installing Node.js with `nvm`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装 Node.js。如果没有，请参阅使用 `nvm` 安装 Node.js 的相应食谱。
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open your command-line application, navigate to your workspace, and create
    a new node package:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序，导航到您的 workspace，并创建一个新的 node 包：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Duplicate the `main.js` file from the *Nesting modules under a single namespace* recipe
    in [Chapter 1](85357458-c80c-4ebf-8ada-ce99243c496e.xhtml), *Building with Modules*:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[第1章](85357458-c80c-4ebf-8ada-ce99243c496e.xhtml)中的*Nesting modules under a
    single namespace*配方复制`main.js`文件：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create the `rockets` dependencies directory (these files can be copied from
    *Nesting modules under a single namespace* recipe in [Chapter 1](85357458-c80c-4ebf-8ada-ce99243c496e.xhtml),
    *Building with Modules*):'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '创建`rockets`依赖目录（这些文件可以从[第1章](85357458-c80c-4ebf-8ada-ce99243c496e.xhtml)中的*Nesting
    modules under a single namespace*配方复制而来，*使用模块构建*）:'
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create an `index.js` file that loads and executes the main function from `main.js`:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`index.js`文件，该文件加载并执行`main.js`中的主函数：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Install webpack:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装webpack：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a webpack configuration file, named `webpack.config.js`, with an entry
    point at `index.js` and this output filename: `bundle.js`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '创建一个名为`webpack.config.js`的webpack配置文件，入口点为`index.js`，输出文件名为`bundle.js`:'
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add a build script to `package.json`:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`package.json`中添加一个构建脚本：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the webpack build to create `bundle.js`:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '运行webpack构建以创建`bundle.js`:'
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You should see output that describes the build created and the modules contained
    therein. See the following output:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该会看到描述构建创建和其中包含的模块的输出。请参阅以下输出：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Run the produced `bundle.js` file with `node`:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`node`运行生成的`bundle.js`文件：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: You should see the rockets count down and blast off.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到火箭倒计时并发射。
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Installing webpack with `npm` downloads the published package to the `node_modules`
    directory. Because webpack also includes an executable, it is installed under
    `node_modules/.bin`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`npm`安装webpack会将发布的包下载到`node_modules`目录。因为webpack还包括一个可执行文件，所以它被安装到`node_modules/.bin`下。
- en: The webpack configuration is fairly simple. It specifies an entry point and
    an output. The entry point defines where webpack begins its traversal. Next, it
    visits all the modules that are imported by the entry point and then all the modules
    imported by those. This is repeated until all the dependencies have been visited.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: webpack配置相当简单。它指定了一个入口点和输出点。入口点定义了webpack开始遍历的位置。接下来，它访问由入口点导入的所有模块，然后是那些模块导入的所有模块。这个过程会一直重复，直到所有依赖项都被访问。
- en: Then all the dependencies are merged into a single file. The file location is
    defined by the output settings. In this case, the output is defined as `bundle.js`.
    The output bundles are placed in the current directory.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，所有依赖项都被合并到一个文件中。文件位置由输出设置定义。在这种情况下，输出被定义为`bundle.js`。输出捆绑包被放置在当前目录中。
- en: You can visit the webpack docs for more detail on how it works and how to configure
    it for different scenarios at: [https://webpack.js.org/](https://webpack.js.org/).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://webpack.js.org/](https://webpack.js.org/)查看webpack文档，了解更多关于其工作原理以及如何针对不同场景进行配置的详细信息。
- en: Adding fallback script tags to load client bundles
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加回退脚本标签以加载客户端捆绑包
- en: In the previous recipe, we showed how to combine multiple modules with webpack.
    This recipe demonstrates how to load these into browsers that don't support ES
    modules.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的配方中，我们展示了如何使用webpack组合多个模块。本配方演示了如何将这些模块加载到不支持ES模块的浏览器中。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you have webpack installed and configured. It is suggested
    that you complete the previous recipe, *Installing and configuring webpack*, before
    continuing with this recipe.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方假设你已经安装并配置了webpack。建议你在继续本配方之前完成之前的配方，*安装和配置webpack*。
- en: You will also need to have Python installed. If you haven't yet, visit the *Installing
    Python, using `SimpleHTTPServer` to host a local static file server *recipe in
    [Chapter 1](85357458-c80c-4ebf-8ada-ce99243c496e.xhtml), *Building with Modules*.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要安装Python。如果你还没有安装，请访问[第1章](85357458-c80c-4ebf-8ada-ce99243c496e.xhtml)中的*安装Python，使用`SimpleHTTPServer`托管本地静态文件服务器*配方，以及*使用模块构建*。
- en: How to do it...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to the directory containing
    the `02-creating-client-bundles` package.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序，导航到包含`02-creating-client-bundles`包的目录。
- en: Start the Python HTTP server.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Python HTTP服务器。
- en: 'Create a file named `index.html` (copied from the *Nesting modules under a
    single namespace* recipe in [Chapter 1](85357458-c80c-4ebf-8ada-ce99243c496e.xhtml),
    *Building with Modules*):'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '创建一个名为`index.html`的文件（从[第1章](85357458-c80c-4ebf-8ada-ce99243c496e.xhtml)中的*Nesting
    modules under a single namespace*配方复制而来，*使用模块构建*）:'
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add a `nomodule` script tag to the body after the existing `module` in the `<script>`
    tag:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<script>`标签中现有的`module`之后添加一个`nomodule`脚本标签：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Run the `webpack` build command:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`webpack`构建命令：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open your ES module-compatible browser, open the Developer tools to the Network
    tab, and visit the URL:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的 ES 模块兼容浏览器，打开开发者工具到网络标签，并访问 URL：
- en: '`http://localhost:8000/`.'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the individual files loaded by the browser:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到浏览器加载的各个文件：
- en: '![](img/306a1e80-618f-4911-bb2c-a949f4225e7b.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/306a1e80-618f-4911-bb2c-a949f4225e7b.png)'
- en: 'Open a browser that isn''t compatible with ES modules. Open the Developer tools
    to Network and visit the URL:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个不兼容 ES 模块的浏览器。打开开发者工具中的网络，并访问 URL：
- en: '`http://localhost:8000/`.'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the `bundle.js` file loaded instead:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到加载了 `bundle.js` 文件：
- en: '![](img/ddfaefd4-a27c-4ae9-bdb4-4bd57f928820.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddfaefd4-a27c-4ae9-bdb4-4bd57f928820.png)'
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We saw in previous recipes that a script tag with the attribute `type="module"`
    will be executed and treated like an ES module. Browsers that don't support ES
    modules will not execute this script at all.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的配方中，我们看到了带有属性 `type="module"` 的脚本标签将被执行并像 ES 模块一样处理。不支持 ES 模块的浏览器根本不会执行此脚本。
- en: If we were to insert a normal script tag, it would be executed by newer browsers
    as well. In order to avoid running duplicated code we use the `nomodule` attribute.
    This tells newer browsers that support ES modules to ignore ID.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们插入一个普通的脚本标签，它也会被较新的浏览器执行。为了避免运行重复的代码，我们使用 `nomodule` 属性。这告诉支持 ES 模块的新浏览器忽略
    ID。
- en: Thus, we get the desired behavior. The module tags are executed by compatible
    browsers and ignored by older browsers. `nomodule`-attributed scripts are ignored
    by ES module-compatible browsers and executed by legacy browsers.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们得到了期望的行为。模块标签由兼容的浏览器执行，并由旧浏览器忽略。`nomodule` 属性的脚本由 ES 模块兼容的浏览器忽略并由旧浏览器执行。
- en: At the time of writing, `nomodule` is an experimental feature and is not supported
    by all browsers. However, it may be supported in the future.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，`nomodule` 是一个实验性功能，并非所有浏览器都支持。然而，它可能在将来得到支持。
- en: See also
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相关内容
- en: Shimming newer features with Babel
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Babel 镜像新特性
- en: Shimming methods with Babel Polyfill
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Babel Polyfill 镜像方法
- en: In the previous two recipes, we saw how to create a client bundle and load it
    into a browser. This make it possible to use ES modules in source code without
    breaking compatibility with older browsers.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个配方中，我们看到了如何创建客户端包并将其加载到浏览器中。这使得在源代码中使用 ES 模块成为可能，同时不会破坏与旧浏览器的兼容性。
- en: However, there are also new methods available in newer versions of the language
    that we'll be using in later chapters.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，语言的新版本中也有新的方法可用，我们将在后面的章节中使用。
- en: This recipe demonstrates how to use the `babel-polyfill` library to support
    those methods.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方演示了如何使用 `babel-polyfill` 库来支持这些方法。
- en: Getting ready
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you have the code created in earlier recipes in this
    chapter, and that you have installed Python and know how to start the static HTTP
    server. Please visit the earlier recipes or copy the code.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方假设您已经创建了本章早期配方中的代码，并且已经安装了 Python，并知道如何启动静态 HTTP 服务器。请访问早期配方或复制代码。
- en: How to do it...
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open your command line application and navigate to the directory containing
    the `02-creating-client-bundles` package.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序，导航到包含 `02-creating-client-bundles` 包的目录。
- en: Start the Python HTTP server.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Python HTTP 服务器。
- en: 'Update the `main.js` file to use the `Array.prototype.values` method, and use
    `for..of` to loop over the resulting iterator:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `main.js` 文件以使用 `Array.prototype.values` 方法，并使用 `for..of` 循环遍历生成的迭代器：
- en: '[PRE26]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Install the Babel Polyfill package:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Babel Polyfill 包：
- en: '[PRE27]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To shim the bundle, update the `webpack.config.js` file to add Babel Polyfill
    to the entry point:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要镜像包，更新 `webpack.config.js` 文件以将 Babel Polyfill 添加到入口点：
- en: '[PRE28]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To shim ES modules, you''ll need to import the file directly. Update `index.html`
    to import the polyfill:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要镜像 ES 模块，您需要直接导入该文件。更新 `index.html` 以导入 polyfill：
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now open a browser, open the Developer Console, and visit the URL:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开一个浏览器，打开开发者控制台，并访问 URL：
- en: '`http://localhost:8000/`.'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'Whether the browser supports `Array.prototype.values` or not, the code should
    run and display output as follows:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不论浏览器是否支持 `Array.prototype.values`，代码都应该运行并显示如下输出：
- en: '![](img/2efe5777-4481-43d9-abf8-fd4079bf0f33.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2efe5777-4481-43d9-abf8-fd4079bf0f33.png)'
- en: How it works...
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `babel-polyfill` package, appropriately enough, provides what are known
    as polyfills. A polyfill fills in the gaps that legacy browsers leave in the ECMAScript
    spec.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`babel-polyfill` 包，恰如其分地，提供了所谓的 polyfill。polyfill 填补了旧浏览器在 ECMAScript 规范中留下的空白。'
- en: In the previous example, it just so happens that the current version, 61, of
    Chrome does not implement the `Array.prototype.values` method. The polyfill code
    runs before the main function. It looks to see if the `values` method is implemented
    on the `Array.prototype` object. If it isn't implemented natively, then polyfill
    implements the method. If it is implemented then polyfill leaves the native implementation
    in place.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，恰好当前版本，61，的 Chrome 没有实现 `Array.prototype.values` 方法。polyfill 代码在主函数之前运行。它会检查
    `Array.prototype` 对象上是否实现了 `values` 方法。如果没有原生的实现，那么 polyfill 会实现这个方法。如果已经实现了，那么
    polyfill 就会保留原生的实现。
- en: In this way, the polyfill library makes a large set of newer methods available.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式，polyfill 库使大量新的方法变得可用。
- en: Supporting new language features with Babel
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Babel 支持新语言特性
- en: In the previous recipe, we saw how to use the `babel-polyfill` library to support
    new ES methods. This add methods to the language at runtime, so that source code
    that depends on them runs correctly.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个配方中，我们看到了如何使用 `babel-polyfill` 库来支持新的 ES 方法。这个库在运行时向语言添加方法，以便依赖于它们的源代码能够正确运行。
- en: There are other language features that are relatively new to ECMAScript, such
    as the arrow function, **let** and **const** variable declarations, and spread
    operators. These features are not universally supported. Babel provides a mechanism
    to use them at the source level, and remain compatible with a build step.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: ECMAScript 中有一些相对较新的语言特性，例如箭头函数、**let** 和 **const** 变量声明以及扩展运算符。这些特性并不被普遍支持。Babel
    提供了一种机制，可以在源代码级别使用它们，同时保持与构建步骤的兼容性。
- en: This recipe demonstrates how to use Babel within webpack, in order to support
    these features in older browsers.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方演示了如何在 webpack 中使用 Babel，以便在旧浏览器中支持这些特性。
- en: Getting ready
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you have the code created in earlier recipes in this
    chapter, and that you have installed Python. Please visit these earlier recipes
    or copy the code.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方假设你已经创建了本章早期配方中的代码，并且已经安装了 Python。请访问这些早期配方或复制代码。
- en: How to do it...
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to the directory containing
    the `02-creating-client-bundles` package.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序并导航到包含 `02-creating-client-bundles` 包的目录。
- en: Start the Python HTTP server.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Python HTTP 服务器。
- en: 'Update the `main.js` file to use the arrow function syntax:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `main.js` 文件以使用箭头函数语法：
- en: '[PRE30]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Install Babel, the `preset-es2015`, and the associated webpack loader:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Babel、`preset-es2015` 以及相关的 webpack 加载器：
- en: '[PRE31]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a Babel configuration file named `.babelrc`:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `.babelrc` 的 Babel 配置文件：
- en: '[PRE32]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Configure `webpack` to use Babel for transpiling new language features:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置 `webpack` 以使用 Babel 进行新语言特性的转换：
- en: '[PRE33]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add a webpack build command to the script section of the `package.json` file:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 webpack 构建命令添加到 `package.json` 文件的脚本部分：
- en: '[PRE34]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Run the `webpack` build:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `webpack` 构建：
- en: '[PRE35]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, open a browser and open the Developer Console while visiting the URL:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开浏览器并访问以下 URL 时打开开发者控制台：
- en: '`http://localhost:8000/`.'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`。'
- en: 'You should see the code running correctly:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到代码运行正确：
- en: '![](img/0357de08-e664-480c-9104-807c079d278c.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0357de08-e664-480c-9104-807c079d278c.png)'
- en: How it works...
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Babel project provides a compiler, commonly known as a **transpiler**. A
    transpiler is a program that ingests source code and produces some target code.
    The most common use for the Babel transpiler is to take JavaScript source files
    and translate newer features.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Babel 项目提供了一个编译器，通常称为 **转译器**。转译器是一个程序，它接受源代码并生成一些目标代码。Babel 转译器的最常见用途是将 JavaScript
    源文件转换为更新的特性。
- en: When the transpiler sees an expression that uses a language feature that needs
    to be translated, it produces a logically equivalent expression. The produced
    expressions can be very similar, or very different from the source expression.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当转译器遇到需要翻译的语言特性的表达式时，它会生成一个逻辑上等效的表达式。生成的表达式可以与源表达式非常相似，也可以非常不同。
- en: 'For more details on how to use Babel to support different platforms, look at
    its website at:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于如何使用 Babel 支持不同平台的信息，请访问其网站：
- en: '[https://babeljs.io/](https://babeljs.io/).'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://babeljs.io/](https://babeljs.io/)。'
- en: There's more...
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The previous recipe uses the ES2015 preset. This means that Babel will always
    produce ES2015 (ES5)-compatible code regardless of current browser support.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个配方使用了 ES2015 预设。这意味着无论当前浏览器的支持情况如何，Babel 总是会生成 ES2015（ES5）兼容的代码。
- en: 'The Babel `env` preset is more sophisticated, and uses platform compatibility
    to determine which language features need to be translated. See the following
    example from the project readme:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Babel的`env`预设更为复杂，它使用平台兼容性来确定哪些语言特性需要被翻译。请参见项目readme中的以下示例：
- en: '[PRE36]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The preceding configuration targets the last two version of all browsers except
    Safari, which is targeted all the way back to version 7\. This project allows
    Babel to discard translations that are no longer needed as browsers implement
    more language features.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的配置针对的是除Safari以外的所有浏览器的最后两个版本，而Safari则从版本7开始一直被针对。这个项目允许Babel在浏览器实现更多语言特性时丢弃不再需要的翻译。
- en: You can find more documentation and support for the `babel-preset-env` project
    at its repository at: [https://github.com/babel/babel-preset-env](https://github.com/babel/babel-preset-env).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`babel-preset-env`项目的仓库中找到更多文档和支持：[https://github.com/babel/babel-preset-env](https://github.com/babel/babel-preset-env)。
- en: Using tools to analyze webpack bundles
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用工具分析webpack包
- en: A major disadvantage of transpiling and using Polyfills is that the source code
    can diverge quite dramatically from the source code. This can often result in
    bloated bundle sizes. If you look at the file size of the `bundle.js` file after
    the Polyfill library was added (see the previous two recipes), then you'll see
    that it is over 200Kb. This is quite large when compared to 5Kb without the Polyfill.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码转换并使用Polyfills的一个主要缺点是源代码可能会与源代码有相当大的差异。这通常会导致包的大小膨胀。如果你查看添加Polyfill库后的`bundle.js`文件的大小（参见前两个菜谱），那么你会发现它超过了200Kb。与没有Polyfill的5Kb相比，这相当大。
- en: With many bundles, it is difficult to find out what files are responsible for
    the large file size, and what the dependencies are between them.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多包，很难找出哪些文件导致了文件大小的增加，以及它们之间的依赖关系。
- en: In this recipe, we will see how to use analysis tools to get a better perspective
    on our webpack bundles.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何使用分析工具来更好地了解我们的webpack包。
- en: Getting ready
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: It will be helpful to have the source code available from previous recipes to
    bootstrap this recipe. Otherwise, you'll need to reference *Exporting/importing
    multiple modules for external use *recipe from [Chapter 1](85357458-c80c-4ebf-8ada-ce99243c496e.xhtml)*, Building
    with Modules*, for how to create the `index.html` file.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从之前的菜谱中获取源代码来启动这个菜谱会有所帮助。否则，你需要参考来自[第1章](85357458-c80c-4ebf-8ada-ce99243c496e.xhtml)的*导出/导入多个模块以供外部使用*菜谱，*使用模块构建*，了解如何创建`index.html`文件。
- en: How to do it...
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open your command-line application and navigate to the directory containing
    the `02-creating-client-bundles` package.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序并导航到包含`02-creating-client-bundles`包的目录。
- en: 'Run the webpack and output the profile output to a JSON file:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行webpack并将配置输出到JSON文件：
- en: '[PRE37]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'To see which modules are taking up the most space in your bundle, open your
    browser and visit the URL:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看占用你包最多空间的模块，打开你的浏览器并访问以下URL：
- en: '[https://chrisbateman.github.io/webpack-visualizer/](https://chrisbateman.github.io/webpack-visualizer/).'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://chrisbateman.github.io/webpack-visualizer/](https://chrisbateman.github.io/webpack-visualizer/).'
- en: Drag and drop the file or use the file selector to select compilation-stats.json.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拖放文件或使用文件选择器选择编译统计文件`compilation-stats.json`。
- en: 'You should see a chart that will give you hoverable module size information:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该会看到一个图表，它将提供可悬停的模块大小信息：
- en: '![](img/cb9dfeb9-f9cb-490f-b36c-cbf68277e883.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cb9dfeb9-f9cb-490f-b36c-cbf68277e883.png)'
- en: Now that you know which modules are large, you can look for the dependencies.
    Visit the webpack analyzer homepage at: [https://webpack.github.io/analyse/](https://webpack.github.io/analyse/).
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经知道了哪些模块很大，你可以查找依赖关系。访问webpack分析器主页：[https://webpack.github.io/analyse/](https://webpack.github.io/analyse/)。
- en: Drag and drop the file or use the file selector to select compilation-stats.json.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拖放文件或使用文件选择器选择编译统计文件`compilation-stats.json`。
- en: You should see the interface change after it loads the file. Click on the Modules
    line in the header.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件加载后，你应该会看到界面发生变化。点击页眉中的“模块”行。
- en: 'From here, you can see individual modules and where the dependencies are:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里，你可以看到单个模块以及依赖关系在哪里：
- en: '![](img/57357af1-24f0-4712-8d3e-6b37c7da9ffb.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/57357af1-24f0-4712-8d3e-6b37c7da9ffb.png)'
- en: How it works...
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何工作...
- en: In *step 2*, we ran the webpack command and output statistics in a JSON file.
    This data includes information such as file size contribution and dependencies.
    The sites we opened up read that JSON data and produced a visualization. The first
    site, WEBPACK VISUALIZER ([https://chrisbateman.github.io/webpack-visualizer/](https://chrisbateman.github.io/webpack-visualizer/)), uses
    the file size data and emphasizes how much each package contributes to the overall
    bundle size. This is useful for identifying the culprits when it comes to inflated
    bundle sizes.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在**步骤 2**中，我们运行了webpack命令，并将统计信息输出到一个JSON文件中。这些数据包括诸如文件大小贡献和依赖项等信息。我们打开的网站读取了这些JSON数据，并生成了可视化。第一个网站，WEBPACK
    VISUALIZER ([https://chrisbateman.github.io/webpack-visualizer/](https://chrisbateman.github.io/webpack-visualizer/))，使用文件大小数据并强调每个包对整体包大小的贡献。这对于识别导致包大小膨胀的罪魁祸首非常有用。
- en: Unfortunately, removing a large dependency isn't always easy. Dependencies can
    be multiple levels-deep and difficult to find. Once we know what is contributing
    to large bundle sizes, then we can use the second tool, Webpack Visualizer, to
    extract them.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，移除大型依赖项并不总是容易的。依赖项可能有多层深度且难以查找。一旦我们知道是什么导致了大型包的大小，那么我们就可以使用第二个工具，Webpack
    Visualizer，来提取它们。
