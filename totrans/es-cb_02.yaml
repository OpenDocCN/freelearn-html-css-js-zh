- en: Staying Compatible with Legacy Browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js with NVM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring webpack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding fallback script tags to load client bundles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shimming methods with Babel Polyfill
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supporting new language features with Babel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using tools to analyze webpack bundles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding chapter, we covered how to take advantage of the new ECMAScript
    modules to load code from multiple files and organize our code. This cutting-edge
    technique has only recently become available in browsers. In practice, production
    websites try to target as many users as possible. This often means targeting older
    browsers. In addition, JavaScript also runs in other environments (such as Node.js) that
    do not support ECMAScript modules.
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that we don't have to change our source code in order to support
    these platforms. There are tools available that produce a single JavaScript file
    from multiple source files. This way we can use modules to organize our code,
    and run our programs on more platforms.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter focus on installation and configuration of webpack
    in order to provide a fallback option for platforms that don't support ES modules
    and other more recent additions to the language.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js with NVM – Linux and macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Node provides installation binaries for Windows and macOS on its website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://nodejs.org/en/download/](https://nodejs.org/en/download/).'
  prefs: []
  type: TYPE_NORMAL
- en: It's easy to install Node.js by downloading the appropriate installer for your
    OS and processor. However, it is useful to have a version manager so that you
    can work on projects that require different versions, and use the latest version.
    This is especially useful if your package manager doesn't provide a recent version
    of Node.js (for example, Ubuntu).
  prefs: []
  type: TYPE_NORMAL
- en: Subsequent recipes will assume that Node.js is installed. This recipe demonstrates
    how to install Node.js for Linux and macOS. The next recipe will cover the installation
    instructions for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is only for Linux and macOS. See the next recipe for Windows instructions.
  prefs: []
  type: TYPE_NORMAL
- en: You must have git installed. This comes installed on macOS, and Linux distributions
    should provide git through their package managers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Clone the `nvm` project into a directory in your home folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the bottom of your `~/.bashrc` or `~/.zshrc` file.
    If you don''t know what shell you are running, it is probably bash and you should
    add the entry to `~/.bashrc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and return to your command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm your installation by checking the version number of `nvm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'List all of the node versions available for installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the latest **Long Term Support** (**LTS**) or stable version. (At the
    time of writing, version 8.9.4 is the latest LTS version):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm the installation of `node` and `npm` by checking their version numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The keys to this installation are *step 4* and *step 5*. The *step* *4* ensures
    that the `nvm` executable is part of your environment's PATH, and the associated
    environment variables are set. When you run `nvm install 6.11`, the `nvm` executable
    is run, and the node binaries are installed to the expected location.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we have also installed version v9.6.1, we would use the following command
    to set it as the default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now when we open a new shell, v9.6.1 will be the Node.js version in use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing Node.js with NVM: Windows'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Subsequent recipes will assume that Node.js is installed. This recipe demonstrates
    how to install Node.js for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is meant for the Windows environment. See the previous recipe for
    macOS and Linux instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You must also have git installed. You can download git from the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://git-scm.com/download/win](https://git-scm.com/download/win).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visit the project release page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/coreybutler/nvm-windows/releases](https://github.com/coreybutler/nvm-windows/releases).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Download the latest `nvm-setup.zip` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the downloaded ZIP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click **nvm-setup**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go through the wizard to complete the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Command Prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Confirm the installation by checking the version number of `nvm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'List all of the Node.js versions available for installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the latest LTS or stable version (at time of writing, version 8.9.4
    is the latest LTS version):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the following command to activate this version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The installation downloads the installation wizard. The installation wizard
    downloads the executable files associated with `nvm`, and adjusts the PATH environment
    variable. The PATH is used to look up programs when they are executed on the command
    line. If a program is in one of the folders found in the PATH, then it can be
    executed without referencing its absolute or relative path.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we have also installed version v9.6.1, we would use the following command
    to set it as the default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now when we open a new shell, v8.6.0 will be the Node.js version in use. Unlike
    the macOS and Linux versions, the last version selected is maintained through
    shell sessions, and a default doesn't need to be set.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned before, there are a few options for creating JavaScript bundles.
    Rollup and Babel are popular tools that can perform this task. The webpack is
    a good option because it is widely used and has a large plugin base.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates how to install and configure webpack to build a JavaScript
    bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll need to have Node.js installed. If not, please see the appropriate recipe
    for installing Node.js with `nvm`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open your command-line application, navigate to your workspace, and create
    a new node package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Duplicate the `main.js` file from the *Nesting modules under a single namespace* recipe
    in [Chapter 1](85357458-c80c-4ebf-8ada-ce99243c496e.xhtml), *Building with Modules*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `rockets` dependencies directory (these files can be copied from
    *Nesting modules under a single namespace* recipe in [Chapter 1](85357458-c80c-4ebf-8ada-ce99243c496e.xhtml),
    *Building with Modules*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `index.js` file that loads and executes the main function from `main.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Install webpack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a webpack configuration file, named `webpack.config.js`, with an entry
    point at `index.js` and this output filename: `bundle.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a build script to `package.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the webpack build to create `bundle.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see output that describes the build created and the modules contained
    therein. See the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the produced `bundle.js` file with `node`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You should see the rockets count down and blast off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing webpack with `npm` downloads the published package to the `node_modules`
    directory. Because webpack also includes an executable, it is installed under
    `node_modules/.bin`.
  prefs: []
  type: TYPE_NORMAL
- en: The webpack configuration is fairly simple. It specifies an entry point and
    an output. The entry point defines where webpack begins its traversal. Next, it
    visits all the modules that are imported by the entry point and then all the modules
    imported by those. This is repeated until all the dependencies have been visited.
  prefs: []
  type: TYPE_NORMAL
- en: Then all the dependencies are merged into a single file. The file location is
    defined by the output settings. In this case, the output is defined as `bundle.js`.
    The output bundles are placed in the current directory.
  prefs: []
  type: TYPE_NORMAL
- en: You can visit the webpack docs for more detail on how it works and how to configure
    it for different scenarios at: [https://webpack.js.org/](https://webpack.js.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Adding fallback script tags to load client bundles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we showed how to combine multiple modules with webpack.
    This recipe demonstrates how to load these into browsers that don't support ES
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you have webpack installed and configured. It is suggested
    that you complete the previous recipe, *Installing and configuring webpack*, before
    continuing with this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: You will also need to have Python installed. If you haven't yet, visit the *Installing
    Python, using `SimpleHTTPServer` to host a local static file server *recipe in
    [Chapter 1](85357458-c80c-4ebf-8ada-ce99243c496e.xhtml), *Building with Modules*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to the directory containing
    the `02-creating-client-bundles` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the Python HTTP server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `index.html` (copied from the *Nesting modules under a
    single namespace* recipe in [Chapter 1](85357458-c80c-4ebf-8ada-ce99243c496e.xhtml),
    *Building with Modules*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `nomodule` script tag to the body after the existing `module` in the `<script>`
    tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `webpack` build command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your ES module-compatible browser, open the Developer tools to the Network
    tab, and visit the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the individual files loaded by the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/306a1e80-618f-4911-bb2c-a949f4225e7b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open a browser that isn''t compatible with ES modules. Open the Developer tools
    to Network and visit the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the `bundle.js` file loaded instead:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ddfaefd4-a27c-4ae9-bdb4-4bd57f928820.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw in previous recipes that a script tag with the attribute `type="module"`
    will be executed and treated like an ES module. Browsers that don't support ES
    modules will not execute this script at all.
  prefs: []
  type: TYPE_NORMAL
- en: If we were to insert a normal script tag, it would be executed by newer browsers
    as well. In order to avoid running duplicated code we use the `nomodule` attribute.
    This tells newer browsers that support ES modules to ignore ID.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, we get the desired behavior. The module tags are executed by compatible
    browsers and ignored by older browsers. `nomodule`-attributed scripts are ignored
    by ES module-compatible browsers and executed by legacy browsers.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, `nomodule` is an experimental feature and is not supported
    by all browsers. However, it may be supported in the future.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Shimming newer features with Babel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shimming methods with Babel Polyfill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous two recipes, we saw how to create a client bundle and load it
    into a browser. This make it possible to use ES modules in source code without
    breaking compatibility with older browsers.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are also new methods available in newer versions of the language
    that we'll be using in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates how to use the `babel-polyfill` library to support
    those methods.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you have the code created in earlier recipes in this
    chapter, and that you have installed Python and know how to start the static HTTP
    server. Please visit the earlier recipes or copy the code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command line application and navigate to the directory containing
    the `02-creating-client-bundles` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the Python HTTP server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `main.js` file to use the `Array.prototype.values` method, and use
    `for..of` to loop over the resulting iterator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the Babel Polyfill package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To shim the bundle, update the `webpack.config.js` file to add Babel Polyfill
    to the entry point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To shim ES modules, you''ll need to import the file directly. Update `index.html`
    to import the polyfill:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open a browser, open the Developer Console, and visit the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Whether the browser supports `Array.prototype.values` or not, the code should
    run and display output as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2efe5777-4481-43d9-abf8-fd4079bf0f33.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `babel-polyfill` package, appropriately enough, provides what are known
    as polyfills. A polyfill fills in the gaps that legacy browsers leave in the ECMAScript
    spec.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous example, it just so happens that the current version, 61, of
    Chrome does not implement the `Array.prototype.values` method. The polyfill code
    runs before the main function. It looks to see if the `values` method is implemented
    on the `Array.prototype` object. If it isn't implemented natively, then polyfill
    implements the method. If it is implemented then polyfill leaves the native implementation
    in place.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, the polyfill library makes a large set of newer methods available.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting new language features with Babel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we saw how to use the `babel-polyfill` library to support
    new ES methods. This add methods to the language at runtime, so that source code
    that depends on them runs correctly.
  prefs: []
  type: TYPE_NORMAL
- en: There are other language features that are relatively new to ECMAScript, such
    as the arrow function, **let** and **const** variable declarations, and spread
    operators. These features are not universally supported. Babel provides a mechanism
    to use them at the source level, and remain compatible with a build step.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates how to use Babel within webpack, in order to support
    these features in older browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you have the code created in earlier recipes in this
    chapter, and that you have installed Python. Please visit these earlier recipes
    or copy the code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to the directory containing
    the `02-creating-client-bundles` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the Python HTTP server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `main.js` file to use the arrow function syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Babel, the `preset-es2015`, and the associated webpack loader:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a Babel configuration file named `.babelrc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure `webpack` to use Babel for transpiling new language features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a webpack build command to the script section of the `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `webpack` build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open a browser and open the Developer Console while visiting the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the code running correctly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0357de08-e664-480c-9104-807c079d278c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Babel project provides a compiler, commonly known as a **transpiler**. A
    transpiler is a program that ingests source code and produces some target code.
    The most common use for the Babel transpiler is to take JavaScript source files
    and translate newer features.
  prefs: []
  type: TYPE_NORMAL
- en: When the transpiler sees an expression that uses a language feature that needs
    to be translated, it produces a logically equivalent expression. The produced
    expressions can be very similar, or very different from the source expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more details on how to use Babel to support different platforms, look at
    its website at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://babeljs.io/](https://babeljs.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous recipe uses the ES2015 preset. This means that Babel will always
    produce ES2015 (ES5)-compatible code regardless of current browser support.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Babel `env` preset is more sophisticated, and uses platform compatibility
    to determine which language features need to be translated. See the following
    example from the project readme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The preceding configuration targets the last two version of all browsers except
    Safari, which is targeted all the way back to version 7\. This project allows
    Babel to discard translations that are no longer needed as browsers implement
    more language features.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more documentation and support for the `babel-preset-env` project
    at its repository at: [https://github.com/babel/babel-preset-env](https://github.com/babel/babel-preset-env).
  prefs: []
  type: TYPE_NORMAL
- en: Using tools to analyze webpack bundles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A major disadvantage of transpiling and using Polyfills is that the source code
    can diverge quite dramatically from the source code. This can often result in
    bloated bundle sizes. If you look at the file size of the `bundle.js` file after
    the Polyfill library was added (see the previous two recipes), then you'll see
    that it is over 200Kb. This is quite large when compared to 5Kb without the Polyfill.
  prefs: []
  type: TYPE_NORMAL
- en: With many bundles, it is difficult to find out what files are responsible for
    the large file size, and what the dependencies are between them.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to use analysis tools to get a better perspective
    on our webpack bundles.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It will be helpful to have the source code available from previous recipes to
    bootstrap this recipe. Otherwise, you'll need to reference *Exporting/importing
    multiple modules for external use *recipe from [Chapter 1](85357458-c80c-4ebf-8ada-ce99243c496e.xhtml)*, Building
    with Modules*, for how to create the `index.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to the directory containing
    the `02-creating-client-bundles` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the webpack and output the profile output to a JSON file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To see which modules are taking up the most space in your bundle, open your
    browser and visit the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://chrisbateman.github.io/webpack-visualizer/](https://chrisbateman.github.io/webpack-visualizer/).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Drag and drop the file or use the file selector to select compilation-stats.json.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see a chart that will give you hoverable module size information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cb9dfeb9-f9cb-490f-b36c-cbf68277e883.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that you know which modules are large, you can look for the dependencies.
    Visit the webpack analyzer homepage at: [https://webpack.github.io/analyse/](https://webpack.github.io/analyse/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag and drop the file or use the file selector to select compilation-stats.json.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the interface change after it loads the file. Click on the Modules
    line in the header.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From here, you can see individual modules and where the dependencies are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/57357af1-24f0-4712-8d3e-6b37c7da9ffb.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *step 2*, we ran the webpack command and output statistics in a JSON file.
    This data includes information such as file size contribution and dependencies.
    The sites we opened up read that JSON data and produced a visualization. The first
    site, WEBPACK VISUALIZER ([https://chrisbateman.github.io/webpack-visualizer/](https://chrisbateman.github.io/webpack-visualizer/)), uses
    the file size data and emphasizes how much each package contributes to the overall
    bundle size. This is useful for identifying the culprits when it comes to inflated
    bundle sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, removing a large dependency isn't always easy. Dependencies can
    be multiple levels-deep and difficult to find. Once we know what is contributing
    to large bundle sizes, then we can use the second tool, Webpack Visualizer, to
    extract them.
  prefs: []
  type: TYPE_NORMAL
