["```js\n// Model definition\nvar User = Backbone.Model.extend({\n  initialize: function () {\n    this.on('change', function () {\n      console.log('User model changed!');\n    });\n  }\n});\n\n// Collection definition\nvar Users = Backbone.Collection.extend({\n  model: User,\n  url : '/users',\n  initialize: function () {\n    this.on('change', function () {\n      console.log('Users collection changed!');\n    });\n  }\n});\n\nvar users = new Users(),\n  newUser = new User({\n    name: 'Jayashi De',\n    age: 21\n  });\n\nusers.add([newUser]);\n\n// Change an attribute of the model\nnewUser.set('age', 22);\n```", "```js\nusers.fetch();\n```", "```js\nvar user = users.get(1);\nuser.save();\n```", "```js\nvar User = Backbone.Model.extend();\n\nvar Users = Backbone.Collection.extend({\n  model: User,\n  comparator: 'age'\n});\n\nvar users = new Users();\nusers.add([{\n  name: 'John Doe', \n  age: 29\n}, {\n  name: 'Richard Smith',\n  age: 35\n}, {\n  name: 'Swarnendu De',\n  age: 29\n}, {\n  name: 'Emily Johnson',\n  age: 25\n}, {\n  name: 'Sarah Castle',\n  age: 40\n}, {\n  name: 'Ben Cooper',\n  age: 29\n}]);\n\nconsole.log(users.pluck('name')); // [\"Emily Johnson\", \"John Doe\", // \"Swarnendu De\", \"Ben Cooper\", \"Richard Smith\", \"Sarah Castle\"]\n\nconsole.log(users.pluck('age')); // 25, 29, 29, 29, 35, 40\n```", "```js\n// Underscore's sortBy() comparator\ncomparator: function (model) {\n  return model.get('age');\n}\n\n// Underscore's sort() comparator\ncomparator: function (model1, model2) {\n  return model1.get('age') < model2.get('age');\n}\n```", "```js\ncomparator: function (model1, model2) {\n  // If age is same, then sort by name\n  if (model1.get('age') === model2.get('age')) {\n    return model1.get('name') > model2.get('name');\n  } else {\n    return model1.get('age') > model2.get('age');\n  }\n}  \n\nconsole.log(users.pluck('name'));\nconsole.log(users.pluck('age'));\n```", "```js\n[\"Emily Johnson\", \"Ben Cooper\", \"John Doe\", \"Swarnendu De\", \"Richard Smith\", \"Sarah Castle\"]\n[25, 29, 29, 29, 35, 40]\n```", "```js\nvar users = new Backbone.Collection([\n  { name: 'John', company: 'A' }, \n  { name: 'Bill', company: 'B' }, \n  { name: 'Rick', company: 'A' }\n]);\n\nusers.where({\n  company: 'A'\n});\n```", "```js\nvar filteredData = users.where({\n  company: 'A'\n});\n\n// Reset the collection with array with filtered data\nusers.reset(filteredData);\n\n// A collection with only filtered data\nconsole.log(users);\n```", "```js\nusers.where({\n  company: 'B'\n});\n```", "```js\nvar filteredData = users.where({\n  company: 'A'\n});\n\n// Create a new collection that will only hold filtered data\nvar filteredCollection = new Backbone.Collection();\n\n// Reset this collection every time \n// there is a new set of filtered data\nfilteredCollection.reset(filteredData);\n\nconsole.log(filteredCollection, users);\n```", "```js\nvar FilterCollection = Backbone.Collection.extend({\n  _totalData: [],\n  _isFiltered: false,\n\n  initialize: function (data) {\n    // The initial data sent to collection will be saved\n    if (data) {\n      this._setTotalData(data);\n    }\n\n    // If some data is added later, \n    // that should reflect in _totalData \n    this.on('add', function () {\n      this._setTotalData();\n    }, this);\n  },\n\n  // Every time a new data has been added to the collection\n  _setTotalData: function (data) {\n    this._totalData = data || this.toJSON();\n  },\n\n  // Apply a new filter to the collection\n  applyFilter: function (criteria) {\n    // Clear the previous filter\n    this.clearFilter();\n\n    // Apply new filter \n    this.reset(this.where(criteria));\n\n    // Mark this as filtered\n    this._isFiltered = true;\n  },\n\n  // Clear all filters applied to this collection\n  clearFilter: function () {\n    // skip first reset event while the collection \n    // has the original data\n    if (this._isFiltered) {\n      // Reset the collection with complete data set\n      this.reset(this._totalData);\n      this._isFiltered = false;\n    }\n  }\n});\n```", "```js\nvar filteredCollection = new FilterCollection ([\n  { name: 'John', company: 'A' }, \n  { name: 'Bill', company: 'B' }, \n  { name: 'Rick', company: 'A' }\n]);\n\n// Add another data to check whether add event is working or not\nfilteredCollection.add({\n  name: 'John',\n  company: 'C'\n});\n\n// Filter with company\nfilteredCollection.applyFilter({\n  company: 'A'\n});\n\n// Filter with name\nfilteredCollection.applyFilter({\n  name: 'John'\n});\n\nconsole.log(filteredCollection); \n// Shows two data both with name : 'John'\n```", "```js\nvar Employee = Backbone.Model.extend();\nvar Developer = Employee.extend();\nvar Manager = Employee.extend();\n\nvar Employees = Backbone.Collection.extend({\n  url: 'employees.json',\n  model: function (attrs, options) {\n    // For each data, check the attribute type\n    switch (attrs.type) {\n      case \"Developer\":\n        return new Developer(attrs, options);\n        break;\n\n      case \"Manager\":\n        return new Manager(attrs, options);\n        break;\n    }\n  }\n});\n\nvar employees = new Employees();\nemployees.fetch();\nconsole.log(employees);\n```"]