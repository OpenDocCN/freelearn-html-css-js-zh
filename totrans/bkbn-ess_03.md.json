["```js\nvar Cat = Backbone.Model.extend({\n     // The properties and methods of our \"Cat\" class would go here\n});\n```", "```js\nvar garfield = new Cat({\n    name: 'Garfield',\n    owner: 'John'\n}, {\n    estimateWeight: true\n});\n```", "```js\nvar book = new Backbone.Model({pages: 200});\nbook.renderBlackAndWhite = true;\nbook.renderBlackAndWhite // is a property of book\nbook.attributes.pages; // is an attribute of book\nbook.attributes.currentPage = 1; // is also an attribute of book}\n```", "```js\nvar Book = Backbone.Model.extend({\n\n    defaults: {publisher: 'Packt Publishing'}\n});\nvar book = new Book();\nbook.attributes.publisher; // 'Packt Publishing'\n```", "```js\nvar Book = Backbone.Model.extend({\n    defaults: {publisher: {name: 'Packt Publishing'}}\n});\nvar book1 = new Book();\nbook1.attributes.publisher.name // == 'Packt Publishing'\nvar book2 = new Book();\nbook2.attributes.publisher.name = 'Wack Publishing';\nbook1.attributes.publisher.name // == 'Wack Publishing'!\n```", "```js\nvar Book = Backbone.Model.extend({\n    initialize: function(attributes, options) {\n        this.renderBlackAndWhite =  options.renderBlackAndWhite;\n    }\n});\n```", "```js\nvar book = new Book({pages: 200});\nbook.attributes.pages = 100; // don't do this!\n```", "```js\nbook.set('pages', 100); // do this!\n```", "```js\nbook.set({pages: 50, currentPage: 49});\n```", "```js\nbook.unset('currentPage');// book.attributes.currentPage == undefined\ndelete book.attributes.currentPage; don't do this!\n```", "```js\nbook.set({pages: 50});\nvar bookPages = book.get('pages'); // == 50\nbookPages = book.attributes.pages;// same effect, but again don't do this!\n```", "```js\nget: function(attr) {\n    return this.attributes[attr];\n}\n```", "```js\nbook.get('pages'); // good\nbook.attributes.pages; // bad?\n```", "```js\nvar book = new Backbone.Model({pages: 50});\nbook.on('change:pages', function() { // triggers when the \"pages\" of book  change\n    alert('the number of pages changed!');\n});\nbook.set('pages', 51); // will alert \"the number of pages has changed\"\nbook.off('changes:pages');\nbook.set('pages', 52); // will no longer alert\n```", "```js\nbook.on('change destroy', function() {    // this callback will trigger after a change or a destroy\n});\n```", "```js\nvar Author = Backbone.Model.extend({\n    listenForDeathOfRival: function(rival) {\n        rival.on('destroy', function celebrateRivalDeath() {\n            alert('Hurray!  I, ' + this.get('name') + ', hated ' + \n                  rival.get('name') + '!');\n        }, this); // \"this\" is our \"context\" argument\n    }\n});\nvar keats = new Author({name: 'John Keats');\nvar byron = new Author({name; 'Lord Byron'});\nbyron.listenForDeathOfRival(keats);\nkeats.destroy(); // will alert \"Hurray!  I, Lord Byron, hated  John Keats!\"\n```", "```js\nsomeModel.trigger('fakeEvent', 5);\n```", "```js\nvar Book = new Backbone.Model.extend({\n    urlRoot: '/books'\n});\nnew Book().save(); // will initiate a PUT request to \"/books\"\n```", "```js\nvar Book = Backbone.extend({\n    url: function() {\n        if (this.get('fiction')) {\n            return '/fiction;\n        } else {\n            return  '/nonfiction';\n        }\n    }\n});\nvar theHobbit = new Book({fiction: true});\nalert(theHobbit.url()); // alerts \"/fiction\"\n```", "```js\nvar urls = {\n    books: function() {\n        return this.get('fiction') ? '/fiction' : '/nonfiction';\n    },\n    magazines: '/magazines'\n};\nvar Book = Backbone.Model.extend({url:  urls.books});\nvar Magazine = Backbone.Model.extend({urlRoot:  urls.magazines});\n```", "```js\nvar Book = Backbone.Model.extend({idAttribute: 'deweyDecimalNumber'})\nvar warAndPeace = new Book({{deweyDecimalNumber: '082 s 891.73/3'});\nwarAndPeace.get('deweyDecimalNumber'); // '082 s 891.73/3'\nwarAndPeace.id; // also '082 s 891.73/3'\n```", "```js\nvar warAndPeace = new Book({deweyDecimalNumber: '082 s 891.73/3'});\nvar fiftyShades = new Book();\nwarAndPeace.isNew(); // false\nfiftyShades.isNew(); // true\n```", "```js\nvar warAndPeace = new Backbone.Model({{id: 55});\nvar shades = new Backbone.Model();\nvar bookGroup = {};\nbookGroup[warAndPeace.id] =  warAndPeace; // bookGroup = {55: warAndPeace}\nbookGroup[shades.id] = shades; // doesn't work because shades.id is undefined\n```", "```js\nvar bookGroup = {};\nbookGroup[warAndPeace.cid] = warAndPeace; // bookGroup = {c1: warAndPeace}\nbookGroup[fiftyShades .cid] = fiftyShades;\n// bookGroup = {c1: warAndPeace, c2: fiftyShades};\n```", "```js\nvar book = new Book({id: 55});\nbook.fetch({\n    success: function() {\n        alert('the fetch completed successfully');\n    },\n    error: function() {\n        alert('an error occurred during the fetch');\n    }\n});\n```", "```js\nvar promise = book.fetch().done(function() {\n        alert('the fetch completed successfully');\n}).fail(function() {\n        alert('an error occurred during the fetch');\n});\n```", "```js\nvar warAndPeace = new Backbone.Model({{id: 55});\nvar fiftyShades = new Backbone.Model({id: 56});\nvar warAndPeacePromise = warAndPeace.fetch();\nvar fiftyShadesPromise = fiftyShades.fetch();\n$.when( warAndPeacePromise, fiftyShadesPromise).then(function() {\n    alert('Both books have now been successfully fetched!');\n});\n```", "```js\n{\n    book: {\n        pages: 300,\n        name: 'The Hobbit'\n    },\n    otherInfo: 'stuff we don't care about'\n}\n```", "```js\nvar Book = Backbone.Model.extend({\n    parse: function(response) {\n        return response.pages; // Backbone will call this.set(response.pages);\n    }\n});\n```", "```js\nvar book = new Book({\n    pages: 20,\n    title: 'Ideas for Great Book Titles'\n});\nbook.save().done(function(response) {\n    alert(response); // alerts the the response's JSON\n});\n```", "```js\nvar Book = Backbone.Model.extend({\n    toJSON: function(originalJson) {\n        return {\n            data:  originalJson,\n            otherInfo: 'stuff'\n        };\n    }\n});\nvar book = new Book({pages: 100);\nbook.save(); // will send: {book: {pages: 100}, otherInfo: 'stuff'}\n```", "```js\nvar Book = Backbone.Model.extend({\n    validate: function(attributes) {\n        var isValid = this.get('pages') >= 10;\n        return isValid;\n    }\n});\nvar tooShort = new Book({pages: 5});\nvar wasAbleToSave = tooShort.save(); // == false\n```", "```js\ntooShort.save().fail(function() {\n    // this code will never be reached\n});\n```", "```js\nvar savePromise = tooShort.save();\nif (savePromise) {\n    savePromise.done(function() {\n        // this code will be reached if both the validation and AJAX call succeed\n    }).fail(function() {\n        // this code will be reached if the validation passes but the AJAX fails\n    });\n} else {\n     // this code will be reached if the validation fails\n}\n```", "```js\nvar book = new Backbone.Model({pages: 20, title: 'Short Title'};\nvar attributeKeys = _.keys(book.attributes);\nalert(attributeKeys); // alerts ['pages', 'title']\n```", "```js\nvar attributeKeys =  book.keys();\nalert(attributeKeys); // alerts ['pages', 'title'];\n```"]