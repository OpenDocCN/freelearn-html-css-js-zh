["```js\n    <button data-dojo-type=\"dijit.form.ToggleButton\" data-dojo-props=\"iconClass:'dijitCheckBoxIcon', checked: true, onChange: layerSwitcherChanged\">LayerSwitcher</button>\n    <button data-dojo-type=\"dijit.form.ToggleButton\" data-dojo-props=\"iconClass:'dijitCheckBoxIcon', checked: true, onChange: panZoomBarChanged\">PanZoomBar</button>\n    <button data-dojo-type=\"dijit.form.ToggleButton\" data-dojo-props=\"iconClass:'dijitCheckBoxIcon', checked: true, onChange: mousePositionChanged\">MousePosition</button>\n    <button data-dojo-type=\"dijit.form.ToggleButton\" data-dojo-props=\"iconClass:'dijitCheckBoxIcon', checked: true, onChange: overviewMapChanged\">OverviewMap</button>\n    <button data-dojo-type=\"dijit.form.ToggleButton\" data-dojo-props=\"iconClass:'dijitCheckBoxIcon', checked: true, onChange: graticuleChanged\">Graticule</button>\n    <button data-dojo-type=\"dijit.form.ToggleButton\" data-dojo-props=\"iconClass:'dijitCheckBoxIcon', checked: true, onChange: scaleChanged\">Scale</button>\n    <button data-dojo-type=\"dijit.form.ToggleButton\" data-dojo-props=\"iconClass:'dijitCheckBoxIcon', checked: true, onChange: scaleLineChanged\">ScaleLine</button>\n    <button data-dojo-type=\"dijit.form.ToggleButton\" data-dojo-props=\"iconClass:'dijitCheckBoxIcon', checked: true, onChange: permalinkChanged\">Permalink</button>\n\n    ```", "```js\n    <div id=\"ch05_visual_controls\" style=\"width: 100%; height: 90%;\"></div>\n\n    ```", "```js\n    <!-- The magic comes here -->\n    <script type=\"text/javascript\">\n        // Create map\n        var map = new OpenLayers.Map(\"ch05_visual_controls\", {\n            controls: []\n        });    \n        var osm = new OpenLayers.Layer.OSM();        \n        map.addLayer(osm);\n\n    ```", "```js\n        // Add controls\n        var layerSwitcher = new OpenLayers.Control.LayerSwitcher({'ascending':false});\n        var panZoomBar = new OpenLayers.Control.PanZoomBar();\n        var mousePosition = new OpenLayers.Control.MousePosition();\n        var overviewMap = new OpenLayers.Control.OverviewMap({maximized: true});\n        var graticule = new OpenLayers.Control.Graticule({displayInLayerSwitcher: false});\n        var scale = new OpenLayers.Control.Scale();\n        var scaleline = new OpenLayers.Control.ScaleLine();\n        var permalink = new OpenLayers.Control.Permalink();\n\n        map.addControls([layerSwitcher, panZoomBar, mousePosition, overviewMap,\n            graticule, scale, scaleline, permalink]);\n\n        map.setCenter(new OpenLayers.LonLat(0, 0), 2);\n\n    ```", "```js\n        function layerSwitcherChanged(checked) {\n            if(checked) {\n                layerSwitcher = new OpenLayers.Control.LayerSwitcher({'ascending':false});\n                map.addControl(layerSwitcher);\n            } else {\n                map.removeControl(layerSwitcher);\n                layerSwitcher.destroy();\n            }\n        }\n        function panZoomBarChanged(checked) {\n            if(checked) {\n                panZoomBar = new OpenLayers.Control.PanZoomBar();\n                map.addControl(panZoomBar);\n            } else {\n                map.removeControl(panZoomBar);\n                panZoomBar.destroy();\n            }\n        }\n        function mousePositionChanged(checked) {\n            if(checked) {\n                mousePosition = new OpenLayers.Control.MousePosition();\n                map.addControl(mousePosition);\n            } else {\n                map.removeControl(mousePosition);\n                mousePosition.destroy();\n            }\n        }\n\n    ```", "```js\n    function overviewMapChanged(checked) {\n            if(checked) {\n                overviewMap = new OpenLayers.Control.OverviewMap({maximized: true});\n                map.addControl(overviewMap);\n            } else {\n                map.removeControl(overviewMap);\n                overviewMap.destroy();\n            }\n        }\n        function graticuleChanged(checked) {\n            if(checked) {\n                graticule = new OpenLayers.Control.Graticule({displayInLayerSwitcher: false});\n                map.addControl(graticule);\n            } else {\n                map.removeControl(graticule);\n                graticule.destroy();\n            }\n        }\n        function scaleChanged(checked) {\n            if(checked) {\n                scale = new OpenLayers.Control.Scale();\n                map.addControl(scale);\n            } else {\n                map.removeControl(scale);\n                scale.destroy();\n            }\n        }\n        function scaleLineChanged(checked) {\n            if(checked) {\n                scaleline = new OpenLayers.Control.ScaleLine();\n                map.addControl(scaleline);\n            } else {\n                map.removeControl(scaleline);\n                scaleline.destroy();\n            }\n        }\n        function permalinkChanged(checked) {\n            if(checked) {\n                permalink = new OpenLayers.Control.Permalink();\n                map.addControl(permalink);\n            } else {\n                map.removeControl(permalink);\n                permalink.destroy();\n            } \n        }\n    </script>\n\n    ```", "```js\n    // Create map\n    var map = new OpenLayers.Map(\"ch05_visual_controls\", {\n        controls: []\n    }); \n\n```", "```js\n    var layerSwitcher = new OpenLayers.Control.LayerSwitcher({'ascending':false});\n    ...\n    ...\n    ...\n    var permalink = new OpenLayers.Control.Permalink();\n\n    map.addControls([layerSwitcher, panZoomBar, mousePosition, overviewMap, graticule, scale, scaleline, permalink]);\n\n```", "```js\n    var layerSwitcher = new OpenLayers.Control.LayerSwitcher({'ascending':false});\n\n```", "```js\n    var overviewMap = new OpenLayers.Control.OverviewMap({maximized: true});\n\n```", "```js\n    var graticule = new OpenLayers.Control.Graticule({ displayInLayerSwitcher: false});\n\n```", "```js\n<button data-dojo-type=\"dijit.form.ToggleButton\" data-dojo-props=\"iconClass:'dijitCheckBoxIcon', checked: true, onChange: overviewMapChanged\">OverviewMap</button>\n\n```", "```js\n    function overviewMapChanged(checked) {\n        if(checked) {\n            overviewMap = new OpenLayers.Control.OverviewMap({maximized: true});\n            map.addControl(overviewMap);\n        } else {\n            map.removeControl(overviewMap);\n            overviewMap.destroy();\n        }\n    }\n\n```", "```js\n    <button data-dojo-type=\"dijit.form.ToggleButton\" data-dojo-props=\"iconClass:'dijitCheckBoxIcon', checked: true, onChange: navigationChanged\">Navigation</button>\n\n    ```", "```js\n    <div id=\"ch05_nav_history\" style=\"width: 100%; height: 90%;\"></div>\n\n    ```", "```js\n    <script type=\"text/javascript\">\n        // Create map\n        var map = new OpenLayers.Map(\"ch05_nav_history\", {\n            controls: []\n        });    \n        var osm = new OpenLayers.Layer.OSM();        \n        map.addLayer(osm);\n\n    ```", "```js\n        // Add controls\n        var navigation = new OpenLayers.Control.Navigation();\n        var history = new OpenLayers.Control.NavigationHistory();\n        var panel = new OpenLayers.Control.Panel();\n        panel.addControls([history.next, history.previous]);\n\n        map.addControls([navigation, history, panel]);\n        map.setCenter(new OpenLayers.LonLat(0, 0), 4);\n\n    ```", "```js\n        function navigationChanged(checked) {\n            if(checked) {\n                navigation.activate();\n            } else {\n                navigation.deactivate();\n            }\n        }\n    </script>\n\n    ```", "```js\n    var navigation = new OpenLayers.Control.Navigation();\n    ....\n    ....\n    map.addControls([navigation, ...]);\n\n```", "```js\n    function navigationChanged(checked) {\n        if(checked) {\n            navigation.activate();\n        } else {\n            navigation.deactivate();\n        }\n    }\n\n```", "```js\n    var history = new OpenLayers.Control.NavigationHistory();\n    var panel = new OpenLayers.Control.Panel();\n    panel.addControls([history.next, history.previous]);\n\n```", "```js\n    map.addControls([navigation, history, panel]);\n\n```", "```js\n    <button data-dojo-type=\"dijit.form.Button\" data-dojo-props=\"onClick: geolocationClick\">Geolocation</button>\n    <div id=\"ch05_geolocating\" style=\"width: 100%; height: 90%;\"></div>\n\n    ```", "```js\n    <script type=\"text/javascript\">\n        // Create map\n        var map = new OpenLayers.Map(\"ch05_geolocating\");    \n        var osm = new OpenLayers.Layer.OSM();        \n        map.addLayer(osm);\n\n    ```", "```js\n        // Add controls\n        var geolocate = new OpenLayers.Control.Geolocate({\n            eventListeners: {\n                \"locationupdated\": locateMarker,\n                \"locationfailed\": function() {\n                    console.log('Location detection failed');\n                }\n            }\n        });\n        map.addControl(geolocate);\n\n    ```", "```js\n        var markers = new OpenLayers.Layer.Markers(\"Markers\");\n        map.addLayer(markers);\n\n    ```", "```js\n        map.setCenter(new OpenLayers.LonLat(0, 0), 6);\n\n    ```", "```js\n        function geolocationClick() {\n            geolocate.deactivate();\n            geolocate.activate();\n        }\n\n    ```", "```js\n        function locateMarker(event) {\n\n    ```", "```js\n            // Remove any existing marker\n            markers.clearMarkers();\n\n    ```", "```js\n            var size = new OpenLayers.Size(32, 37);\n            var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);\n            var icon = new OpenLayers.Icon('./recipes/data/icons/symbol_blank.png', size, offset);\n            icon.setOpacity(0.7);\n\n            // Create a lonlat instance from the event location.\n            // NOTE: The coordinates are transformed to the map's projection by\n            // the geolocate control.\n            var lonlat = new OpenLayers.LonLat(event.point.x, event.point.y);\n\n            // Add the marker\n            var popup = null;\n            var marker = new OpenLayers.Marker(lonlat, icon);\n\n    ```", "```js\n            marker.events.on({\n                \"mouseover\": function() {\n                    if(popup) {\n                        map.removePopup(popup);\n                    }\n\n                    var content = \"<strong>Longitude:</strong> \" + lonlat.lon + \"<br/>\" + \"<strong>Latitude:</strong> \" + lonlat.lat;\n\n                    popup = new OpenLayers.Popup.FramedCloud(\n                    \"popup\", lonlat, new OpenLayers.Size(250, 100), content,\n                    null, true, null);\n\n                    map.addPopup(popup);\n                }\n            });\n\n            markers.addMarker(marker);\n        }\n    </script>\n\n    ```", "```js\n    var geolocate = new OpenLayers.Control.Geolocate({\n        eventListeners: {\n            \"locationupdated\": locateMarker,\n            \"locationfailed\": function() {\n                console.log('Location detection failed');\n            }\n        }\n    });\n\n```", "```js\n    function geolocationClick() {\n        geolocate.deactivate();\n        geolocate.activate();\n    }\n\n```", "```js\n    function locateMarker(event) {...}\n\n```", "```js\n    <style>\n        .olControlNavToolbar {\n            top: 0px;\n            left: 0px;\n            float: left;\n        }\n        .olControlNavToolbar div {\n            float: left;\n        }\n    </style>\n\n    ```", "```js\n    <table>\n        <tr>\n            <td>\n                Navigation: <div id=\"navigation\" class=\"olControlNavToolbar\"></div>\n            </td>\n            <td>\n                Position: <div id=\"mouseposition\" style=\"font-size: smaller;\"></div>\n            </td>\n        </tr>\n    </table>\n\n    <div id=\"ch05_control_outside\" style=\"width: 100%; height: 90%;\"></div>\n\n    ```", "```js\n    <script type=\"text/javascript\">\n        // Create map\n        var map = new OpenLayers.Map(\"ch05_control_outside\");    \n        var osm = new OpenLayers.Layer.OSM();        \n        map.addLayer(osm);\n        map.setCenter(new OpenLayers.LonLat(0, 0), 3);\n\n    ```", "```js\n        var mousePosition = new OpenLayers.Control.MousePosition({\n            div: document.getElementById('mouseposition') \n        });\n        map.addControl(mousePosition);\n\n        var navToolbarControl = new OpenLayers.Control.NavToolbar({\n            div: document.getElementById(\"navigation\")\n        });\n        map.addControl(navToolbarControl);\n    </script>\n\n    ```", "```js\nPosition: <div id=\"mouseposition\" style=\"font-size: smaller;\"></div>\n...\nvar mousePosition = new OpenLayers.Control.MousePosition({\n    div: document.getElementById('mouseposition') \n});\n\n```", "```js\nNavigation: <div id=\"navigation\" class=\"olControlNavToolbar\"></div>\n...\nvar navToolbarControl = new OpenLayers.Control.NavToolbar({\n    div: document.getElementById(\"navigation\")\n});\n\n```", "```js\n<style>\n    .olControlNavToolbar {\n        top: 0px;\n        left: 0px;\n        float: left;\n    }\n    .olControlNavToolbar div {\n        float: left;\n    }\n</style>\n\n```", "```js\n    <form action=\"\">\n        Vector Layer A: <input id=\"rbA\" type=\"radio\" dojoType=\"dijit.form.RadioButton\" onChange=\"layerAChanged\" name=\"layer\" value=\"layerA\" checked/>\n        Vector Layer B: <input id=\"rbB\" type=\"radio\" dojoType=\"dijit.form.RadioButton\" onChange=\"layerBChanged\" name=\"layer\" value=\"layerB\"/>\n    </form>\n    <div id=\"ch05_editing_vector\" style=\"width: 100%; height: 100%;\"></div>\n\n    ```", "```js\n    <script type=\"text/javascript\">\n        // Create map\n        var map = new OpenLayers.Map(\"ch05_editing_vector\");    \n        var osm = new OpenLayers.Layer.OSM();        \n        map.addLayer(osm);\n        map.addControl(new OpenLayers.Control.LayerSwitcher());\n        map.setCenter(new OpenLayers.LonLat(0, 0), 3);\n\n    ```", "```js\n        var vectorLayerA = new OpenLayers.Layer.Vector(\"Vector layer A\");\n        var vectorLayerB = new OpenLayers.Layer.Vector(\"Vector layer B\");\n        map.addLayers([vectorLayerA, vectorLayerB]);\n\n    ```", "```js\n        var editingToolbarControl = new OpenLayers.Control.EditingToolbar(vectorLayerA);\n        map.addControl(editingToolbarControl);\n\n    ```", "```js\n        function layerAChanged(checked) {\n            if(checked) {\n                var controls = editingToolbarControl.getControlsByClass(\"OpenLayers.Control.DrawFeature\");\n                for(var i=0; i< controls.length; i++) {\n                    controls[i].layer = vectorLayerA;\n                }\n            }\n        }\n        function layerBChanged(checked) {\n            if(checked) {\n                var controls = editingToolbarControl.getControlsByClass(\"OpenLayers.Control.DrawFeature\");\n                for(var i=0; i< controls.length; i++) {\n                    controls[i].layer = vectorLayerB;\n                }\n            }\n        }\n    </script>\n\n    ```", "```js\n    function layerAChanged(checked) {\n        if(checked) {\n            var controls = editingToolbarControl.getControlsByClass(\"OpenLayers.Control.DrawFeature\");\n            for(var i=0; i< controls.length; i++) {\n                controls[i].layer = vectorLayerA;\n            }\n        }\n    }\n\n```", "```js\n        var controls = [\n          new OpenLayers.Control.DrawFeature(layer, OpenLayers.Handler.Point, {'displayClass': 'olControlDrawFeaturePoint'}),\n          new OpenLayers.Control.DrawFeature(layer, OpenLayers.Handler.Path, {'displayClass': 'olControlDrawFeaturePath'}),\n          new OpenLayers.Control.DrawFeature(layer, OpenLayers.Handler.Polygon, {'displayClass': 'olControlDrawFeaturePolygon'})\n        ];\n\n```", "```js\n    <form action=\"\">\n        <button data-dojo-type=\"dijit.form.ToggleButton\" data-dojo-props=\"iconClass:'dijitCheckBoxIcon', checked: false, onChange: modifyChanged\">Modify</button>\n        Reshape: <input id=\"reshape\" dojoType=\"dijit.form.CheckBox\"onChange=\"changeMode\" name=\"layer\"/>\n        Resize: <input id=\"resize\" dojoType=\"dijit.form.CheckBox\" onChange=\"changeMode\" name=\"layer\"/>\n        Rotate <input id=\"rotate\" dojoType=\"dijit.form.CheckBox\" onChange=\"changeMode\" name=\"layer\"/>\n        Drag: <input id=\"drag\" dojoType=\"dijit.form.CheckBox\" onChange=\"changeMode\" name=\"layer\"/>\n        Filter: <select dojoType=\"dijit.form.Select\" id=\"filter\" onChange=\"changeFilter\" name=\"filter\" style=\"width: 200px;\">\n            <option value=\"ALL\" selected>No Filter</option>\n            <option value=\"POINT\">POINT</option>\n            <option value=\"PATH\">PATH</option>\n            <option value=\"POLYGON\">POLYGON</option>\n        </select>\n    </form>\n\n    ```", "```js\n    <div id=\"ch05_modify\" style=\"width: 100%; height: 100%;\"></div>\n\n    ```", "```js\n    <script type=\"text/javascript\">\n        // Create map\n        var map = new OpenLayers.Map(\"ch05_modify\");    \n        var osm = new OpenLayers.Layer.OSM();        \n        map.addLayer(osm);\n        map.addControl(new OpenLayers.Control.LayerSwitcher());\n        map.setCenter(new OpenLayers.LonLat(0, 0), 3);\n\n    ```", "```js\n        var vectorLayer = new OpenLayers.Layer.Vector(\"Vector layer\");\n        map.addLayer(vectorLayer);\n\n    ```", "```js\n        var editingToolbarControl = new OpenLayers.Control.EditingToolbar(vectorLayer);\n        map.addControl(editingToolbarControl);\n\n    ```", "```js\n        var modifyControl = new OpenLayers.Control.ModifyFeature(vectorLayer);\n        map.addControl(modifyControl);\n\n    ```", "```js\n        function modifyChanged(checked) {\n            if(checked) {\n                modifyControl.activate();\n            } else {\n                modifyControl.deactivate();\n            }\n        }\n\n    ```", "```js\n        function changeMode() {\n            var reshape = dijit.byId(\"reshape\").get(\"checked\");\n            var resize = dijit.byId(\"resize\").get(\"checked\");\n            var rotate = dijit.byId(\"rotate\").get(\"checked\");\n            var drag = dijit.byId(\"drag\").get(\"checked\");\n\n            var mode = null;\n            if(reshape) {\n                mode |= OpenLayers.Control.ModifyFeature.RESHAPE;\n            }\n            if(resize) {\n                mode |= OpenLayers.Control.ModifyFeature.RESIZE;\n            }\n            if(rotate) {\n                mode |= OpenLayers.Control.ModifyFeature.ROTATE;\n            }\n            if(drag) {\n                mode |= OpenLayers.Control.ModifyFeature.DRAG;\n            }\n\n            modifyControl.deactivate();\n            modifyControl.mode = mode;\n            modifyControl.activate();\n        }\n\n    ```", "```js\n        function changeFilter(value) {\n\n            modifyControl.deactivate();\n            map.removeControl(modifyControl);\n            modifyControl.destroy();\n\n            var geometryTypes = null;\n            if(value==\"POINT\") {\n                geometryTypes = [\"OpenLayers.Geometry.Point\"];\n            } else if(value==\"PATH\") {\n                geometryTypes = [\"OpenLayers.Geometry.LineString\"];\n            } else if(value==\"POLYGON\") {\n                geometryTypes = [\"OpenLayers.Geometry.Polygon\"];\n            } \n            modifyControl = new OpenLayers.Control.ModifyFeature(vectorLayer, {\n                geometryTypes: geometryTypes\n            });\n            map.addControl(modifyControl);\n            modifyControl.activate();\n        }\n    </script>\n\n    ```", "```js\n    function modifyChanged(checked) {\n        if(checked) {\n            modifyControl.activate();\n        } else {\n            modifyControl.deactivate();\n        }\n    }\n\n```", "```js\nmode = OpenLayers.Control.ModifyFeature.RESHAPE | OpenLayers.Control.ModifyFeature.RESIZE;\n\n```", "```js\n        var map = new OpenLayers.Map(\"ch05_measure\");    \n        var osm = new OpenLayers.Layer.OSM();        \n        map.addLayer(osm);\n        map.addControl(new OpenLayers.Control.LayerSwitcher());\n        map.setCenter(new OpenLayers.LonLat(0, 0), 3);\n\n    ```", "```js\n        var measureControl = new OpenLayers.Control.Measure(OpenLayers.Handler.Path, {\n            persist: true,\n            eventListeners: {\n                'measure': measure,\n                'measurepartial': measurepartial\n            }\n        });\n\n    ```", "```js\n        function measureClick(checked) {\n            var path = dijit.byId('path').get('checked');\n            var polygon = dijit.byId('polygon').get('checked');\n            var regular = dijit.byId('regular').get('checked');\n\n            if(checked){\n                if(path) {\n                    measureControl.updateHandler(OpenLayers.Handler.Path, {persist: true});\n                } else if(polygon) {\n                    measureControl.updateHandler(OpenLayers.Handler.Polygon, {persist: true});\n                } else if(regular) {\n                    measureControl.updateHandler(OpenLayers.Handler.RegularPolygon, {persist: true});\n                }\n                map.addControl(measureControl);\n                measureControl.activate();\n            } else {\n                measureControl.deactivate();\n                map.removeControl(measureControl);\n            }\n\n            dojo.byId('value').innerHTML = \"\";\n        }\n\n    ```", "```js\n        function measure(event) {\n            var message = event.measure + \" \" + event.units;\n            if(event.order>1) {\n                message += \"2\";\n            }\n            dojo.byId('value').innerHTML = message;\n        }\n\n        function measurepartial(event) {\n            var message = event.measure + \" \" + event.units;\n            dojo.byId('value').innerHTML = message;\n        }\n\n    ```", "```js\n        function changeImmediate(checked) {\n            measureControl.setImmediate(checked);\n        }\n        function changeGeodesic(checked) {\n            measureControl.geodesic = checked;\n        }\n\n    ```", "```js\n    var measureControl = new OpenLayers.Control.Measure(OpenLayers.Handler.Path, {\n        persist: true,\n        eventListeners: {\n            'measure': measure,\n            'measurepartial': measurepartial\n        }\n    });\n\n```", "```js\nmeasureControl.updateHandler(OpenLayers.Handler.Polygon, {persist: true});\n\n```", "```js\n    function changeImmediate(checked) {\n        measureControl.setImmediate(checked);\n    }\n\n```", "```js\n    function changeGeodesic(checked) {\n        measureControl.geodesic = checked;\n    }\n\n```", "```js\n    <button dojoType=\"dijit.form.ToggleButton\" id=\"getfeatureButton\" onChange=\"getFeatureClick\" iconClass='dijitCheckBoxIcon' checked=\"false\">Activated</button>\n    Get Information from:\n    USA <input id=\"usa\" dojoType=\"dijit.form.RadioButton\" onChange=\"changeHandler\" checked name=\"layer\"/>\n    Europe <input id=\"europe\" dojoType=\"dijit.form.RadioButton\" onChange=\"changeHandler\" name=\"layer\"/>\n\n    <div id=\"ch05_getfeature\" style=\"width: 100%; height: 100%;\"></div>\n\n    ```", "```js\n        OpenLayers.ProxyHost = \"./utils/proxy.php?url=\";\n\n    ```", "```js\n        var map = new OpenLayers.Map(\"ch05_getfeature\");    \n        // Add a WMS layer\n        var wms = new OpenLayers.Layer.WMS(\"Basic\", \"http://labs.metacarta.com/wms/vmap0\",\n        {\n            layers: 'basic'\n        });\n        map.addLayer(wms);\n        map.addControl(new OpenLayers.Control.LayerSwitcher());\n        map.setCenter(new OpenLayers.LonLat(0, 40), 3);\n\n    ```", "```js\n        var statesLayer = new OpenLayers.Layer.Vector(\"States\", {\n            protocol: new OpenLayers.Protocol.WFS({\n                url: \"http://demo.opengeo.org/geoserver/wfs\",\n                featureType: \"states\",\n                featureNS: \"http://www.openplans.org/topp\"\n            }),\n            strategies: [new OpenLayers.Strategy.BBOX()]\n        });\n        map.addLayer(statesLayer);\n\n        var europeLayer = new OpenLayers.Layer.Vector(\"Europe (GML)\", {\n            protocol: new OpenLayers.Protocol.HTTP({\n                url: \"http://localhost:8080/openlayers-cookbook/recipes/data/europe.gml\",\n                format: new OpenLayers.Format.GML()\n            }),\n            strategies: [new OpenLayers.Strategy.Fixed()]\n        });\n        map.addLayer(europeLayer);\n\n    ```", "```js\n        var selected = new OpenLayers.Layer.Vector(\"Selected\", {\n            styleMap: new OpenLayers.Style(OpenLayers.Feature.Vector.style[\"temporary\"])\n        });\n        map.addLayer(selected);\n\n    ```", "```js\n        var getFeature = new OpenLayers.Control.GetFeature({\n            protocol: statesLayer.protocol,\n            box: true,\n            hover: false,\n            multipleKey: \"shiftKey\",\n            toggleKey: \"ctrlKey\",\n            eventListeners: {\n                \"featureselected\": function(event) {\n                    selected.addFeatures([event.feature]);\n                },\n                \"featureunselected\": function(event) {\n                    selected.removeFeatures([event.feature]);\n                }\n            }\n        });\n        map.addControl(getFeature);\n\n    ```", "```js\n        function getFeatureClick(checked) {\n            if(checked) {\n                getFeature.activate();\n            } else {\n                getFeature.deactivate();\n            }\n        }\n\n    ```", "```js\n        function changeHandler() {\n            var usa = dijit.byId('usa').get('checked');\n            if(usa) {\n                getFeature.protocol = statesLayer.protocol;\n            } else {\n                getFeature.protocol = europeLayer.protocol;\n            }\n        }\n\n    ```", "```js\n    var wms = new OpenLayers.Layer.WMS(\"Basic\", \"http://labs.metacarta.com/wms/vmap0\",\n    {\n        layers: 'basic'\n    });\n\n```", "```js\n    var statesLayer = new OpenLayers.Layer.Vector(\"States\", {\n        protocol: new OpenLayers.Protocol.WFS(...),\n        strategies: [new OpenLayers.Strategy.BBOX()]\n    });\n\n    var europeLayer = new OpenLayers.Layer.Vector(\"Europe (GML)\", {\n        protocol: new OpenLayers.Protocol.HTTP(...),\n        strategies: [new OpenLayers.Strategy.Fixed()]\n    });\n\n```", "```js\n    var getFeature = new OpenLayers.Control.GetFeature({\n        protocol: statesLayer.protocol,\n        box: true,\n        hover: false,\n        multipleKey: \"shiftKey\",\n        toggleKey: \"ctrlKey\",\n        eventListeners: {\n            \"featureselected\": function(event) {\n                selected.addFeatures([event.feature]);\n            },\n            \"featureunselected\": function(event) {\n                selected.removeFeatures([event.feature]);\n            }\n        }\n    });\n\n```", "```js\n            \"featureselected\": function(event) {\n                selected.addFeatures([event.feature]);\n            },\n            \"featureunselected\": function(event) {\n                selected.removeFeatures([event.feature]);\n            }\n\n```", "```js\n    var selected = new OpenLayers.Layer.Vector(\"Selected\", {\n        styleMap: new OpenLayers.Style(OpenLayers.Feature.Vector.style[\"temporary\"])\n    });\n\n```", "```js\n    <button dojoType=\"dijit.form.ToggleButton\" id=\"featureInfoButton\" onChange=\"featureInfoChange\" iconClass='dijitCheckBoxIcon' checked=\"false\">Activated</button>\n    <div id=\"ch05_wmsfeatureinfo\" style=\"width: 100%; height: 100%;\"></div>\n\n    ```", "```js\n        OpenLayers.ProxyHost = \"./utils/proxy.php?url=\";\n        // Create map\n        var map = new OpenLayers.Map(\"ch05_wmsfeatureinfo\"); \n\n    ```", "```js\n        var wms = new OpenLayers.Layer.WMS(\"Basic\", \"http://demo.opengeo.org/geoserver/wms\",\n        {\n            layers: 'topp:naturalearth'\n        });\n        map.addLayer(wms);\n         var wms2 = new OpenLayers.Layer.WMS(\"Basic\", \"http://demo.opengeo.org/geoserver/wms\",\n        {\n            layers: 'topp:states',\n            transparent: true\n        },{\n            isBaseLayer: false\n        });\n        map.addLayer(wms2);\n\n    ```", "```js\n        map.addControl(new OpenLayers.Control.LayerSwitcher());\n        map.setCenter(new OpenLayers.LonLat(-90, 40), 4);\n\n    ```", "```js\n        var featureInfo = new OpenLayers.Control.WMSGetFeatureInfo({\n            url: 'http://demo.opengeo.org/geoserver/wms', \n            title: 'Identify features by clicking',\n            queryVisible: true,\n            eventListeners: {\n                \"getfeatureinfo\": function(event) {\n                    map.addPopup(new OpenLayers.Popup.FramedCloud(\n                    \"chicken\", \n                    map.getLonLatFromPixel(event.xy),\n                    null,\n                    event.text,\n                    null,\n                    true\n                ));\n                }\n            }\n        });\n        map.addControl(featureInfo);\n\n    ```", "```js\n        function featureInfoChange(checked) {\n            if(checked) {\n                featureInfo.activate();\n            } else {\n                featureInfo.deactivate();\n            }\n        }\n\n    ```", "```js\n    OpenLayers.ProxyHost = \"./utils/proxy.php?url=\";\n\n```", "```js\n     var wms2 = new OpenLayers.Layer.WMS(\"Basic\", \"http://demo.opengeo.org/geoserver/wms\",\n    {\n        layers: 'topp:states',\n        transparent: true\n    },{\n        isBaseLayer: false\n    });\n\n```", "```js\n    var featureInfo = new OpenLayers.Control.WMSGetFeatureInfo({\n        url: 'http://demo.opengeo.org/geoserver/wms', \n        queryVisible: true,\n        eventListeners: {...}\n    });\n\n```", "```js\n        eventListeners: {\n            \"getfeatureinfo\": function(event) {\n                map.addPopup(new OpenLayers.Popup.FramedCloud(\n                \"chicken\", \n                map.getLonLatFromPixel(event.xy),\n                null,\n                event.text,\n                null,\n                true\n            ));\n            }\n        }\n\n```"]