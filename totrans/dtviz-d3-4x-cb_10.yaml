- en: Chapter 10. Interacting with Your Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with the mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with a multi-touch device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the zoom and pan behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the drag behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*The ultimate goal of visualization design is to optimize applications so that
    they help us perform cognitive work more efficiently.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Ware C. (2012)*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The goal of data visualization is to help the audience gain information from
    a large quantity of raw data quickly and efficiently through metaphor, mental
    model alignment, and cognitive magnification. So far, in this book, we have introduced
    various techniques to leverage D3 library by implementing many types of visualization.
    However, we haven''t touched a crucial aspect of visualization: human interaction.
    Various research have concluded the unique value of human interaction in information
    visualization.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Visualization combined with computational steering allows faster analyses
    of more sophisticated scenarios...This case study adequately demonstrate that
    the interaction of a complex model with steering and interactive visualization
    can extend the applicability of the modelling beyond research*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Barrass I. & Leng J (2011)*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this chapter, we will focus on D3 human visualization interaction support;
    or, as mentioned earlier, you will learn how to add computational steering capability
    to your visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with mouse events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The mouse is the most common and popular human-computer interaction control
    found on most desktop and laptop computers. Even today, with multi-touch devices
    rising to dominance, touch events are still commonly emulated with mouse events.
    In this recipe, we will learn how to handle standard mouse events in D3.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/mouse.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/mouse.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following code example, we will explore techniques of registering and
    handling mouse events in D3\. Although in this particular example we are handling
    only `click` and `mousemove`, the techniques utilized here can be applied easily
    to all other standard mouse events supported by modern browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates the following interactive visualization when you click
    on the SVG image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Mouse interaction
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In D3, to register an event listener, we need to invoke the `on` function on
    a particular selection. The given event listener will be attached to all the selected
    elements for the specified event (refer to line A). The following code in this
    recipe attaches a `mousemove` event listener, which displays the current mouse
    position (refer to line B):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'On line C, we used `d3.mouse` function to obtain the current mouse position
    relative to the given container element. This function returns a two-element array
    [x, y]. After this, we also registered an event listener for a mouse `click` event
    on line D using the same `on` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once again, we retrieved the current mouse position using the `d3.mouse` function
    and then generated five concentric expanding circles to simulate the ripple effect.
    The ripple effect was simulated using geometrically increasing delay (refer to
    line F) with decreasing `stroke-width` (refer to line E). Finally, when the transition
    effect is over, the circles were removed using a transition `end` listener (refer
    to line G). If you are not familiar with this type of transition control, refer
    to [Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition with
    Style*, for more details.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although we have only demonstrated how to listen on the `click` and `mousemove`
    events in this recipe, you can listen on any event that your browser supports
    through the `on` function. The following is a list of mouse events that are useful
    to know when building your interactive visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '`click`: Dispatched when a user clicks on a mouse button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dbclick`: Dispatched when a mouse button is clicked twice'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mousedown`: Dispatched when the mouse button is pressed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseenter`: Dispatched when the mouse button is moved onto the limits of
    an element or one of its descendent elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseleave`: Dispatched when the mouse button is moved off the limits of an
    element and all of its descendent elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mousemove`: Dispatched when the mouse button is moved over an element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseout`: Dispatched when the mouse button is moved off of the boundaries
    of an element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseover`: Dispatched when the mouse button is moved onto the limits of an
    element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseup`: Dispatched when a mouse button is released over an element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to [Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition
    with Style*, for more details on the ripple effect technique used in this recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to W3C DOM Level 3 Events specification for a complete list of event types
    at [https://www.w3.org/TR/DOM-Level-3-Events/](https://www.w3.org/TR/DOM-Level-3-Events/)
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the `d3.mouse` API document for more details on mouse detection at
    [https://github.com/d3/d3-selection/blob/master/README.md#mouse](https://github.com/d3/d3-selection/blob/master/README.md#mouse)
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interacting with a multi-touch device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, with the proliferation of multi-touch devices, any visualization that
    targets mass consumption needs to worry about its interact-ability not only through
    the traditional pointing device but also through multi-touches and gestures. In
    this recipe, we will explore touch support offered by D3 to see how it can be
    leveraged to generate some pretty interesting interaction with multi-touch-capable
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/touch.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/touch.html)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will generate a progress-circle around the user''s touches,
    and once the progress is completed, a subsequent ripple effect will be triggered
    around the circle. However, if the user prematurely ends their touch, we shall
    stop the progress-circle without generating the ripples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates the following interactive visualization on a touch-enabled
    device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Touch Interaction
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Event listener for touch events are registered through D3 selection''s `on`
    function similar to what we have done with mouse events in the previous recipe
    (refer to line A):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'One crucial difference here is that we have registered our touch event listener
    on the `body` element instead of the `svg` element since there are default touch
    behaviors defined with many OS and browsers and we would like to override it with
    our custom implementation. This is done through the following function call (refer
    to line B):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the touch event is triggered, we will retrieve multiple touch point data
    using the `d3.touches` function, as illustrated by the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of returning a two-element array as the `d3.mouse` function does, `d3.touches`
    returns an array of two-element arrays since there could be multiple touch points
    for each touch event. Each touch position array has data structure that looks
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image_10_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Touch position array
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we also used array index in this recipe to establish object constancy.
    Once the touch data is bound to the selection, the progress circle was generated
    for each touch around the user''s touch point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is done through a standard arc transition with arc attribute tweening
    (refer to line D) as explained in [Chapter 7](ch07.html "Chapter 7. Getting into
    Shape"), *Getting into Shape*. If the progress-circle has not yet been canceled
    by the user even though the transition is over, then a ripple effect similar to
    what we have done in the previous recipe is generated on line E. Since we have
    registered the same event listener `touch` function on both the `touchstart` and
    `touchend` events, we can use the following lines to remove progress-circle and
    also set a flag to indicate that this progress circle has stopped prematurely:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We need to set this stateful flag on `d`, which is the touch data array, since
    there is no way to cancel a transition once it starts; hence, even after you remove
    the progress-circle element from the DOM tree, the transition will still complete
    and trigger line E.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have demonstrated touch interaction through the `touchstart` and `touchend`
    events; however, you can use the same pattern to handle any other touch events
    supported by your browser. The following list contains the proposed touch event
    types recommended by W3C:'
  prefs: []
  type: TYPE_NORMAL
- en: '`touchstart`: It is dispatched when the user places a touch point on the touch
    surface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`touchend`: It is dispatched when the user removes a touch point from the touch
    surface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`touchmove`: It is dispatched when the user moves a touch point along the touch
    surface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`touchcancel`: It is dispatched when a touch point is disrupted in an implementation-specific
    manner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to [Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition
    with Style*, for more details on object constancy and the ripple effect technique
    used in this recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to [Chapter 7](ch07.html "Chapter 7. Getting into Shape"), *Getting into
    Shape*, for more details on the progress-circle attribute tween transition technique
    used in this recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the W3C Touch Events proposed recommendation for a complete list of
    touch event types at [https://www.w3.org/TR/touch-events](https://www.w3.org/TR/touch-events/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the `d3.touch` API document for more details on multi-touch detection
    at [https://github.com/d3/d3-selection/blob/master/README.md#touches](https://github.com/d3/d3-selection/blob/master/README.md#touches)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing zoom and pan behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zooming and panning are common and useful techniques in data visualization,
    which work particularly well with SVG-based visualization, since vector graphic
    does not suffer from pixilation as its bitmap counterpart would. Zooming is especially
    useful when you are dealing with large dataset when it is impractical or impossible
    to visualize the entire dataset, thus a zoom and drill-down approach needs to
    be employed. In this recipe, we will explore D3's built-in support for both zooming
    and panning.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/zoom.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/zoom.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will implement geometric zooming and panning using D3 zoom
    support. Let''s see how this is done in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates the following zooming and panning effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Original
  prefs: []
  type: TYPE_NORMAL
- en: The previous image show the original state of the visualization while the following
    one shows what happen when user zooms in either through scrolling the mouse wheel
    on a desktop or using multi-gesture on touch screen devices.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Zoom
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows what happen when user drags (pan) the image either
    with their mouse or finger.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pan
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, you might be surprised to see how little code is necessary to
    implement this fully functional zoom and pan effect with D3\. If you have this
    recipe open in your browser, you will also notice zooming and panning reacts perfectly
    well to both mouse wheel and multi-touch gesture. Most of the heavy lifting is
    done by D3 library. What we have to do here is simply define what a zoom behavior
    is. Let''s see how this is done in the code; firstly, we need to define zoom behavior
    on a SVG container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see on line A, a `d3.zoom` function was created (refer to line B)
    and invoked on the `svg` container. The `d3.zoom` will automatically create event
    listeners to handle the low-level zooming and panning gesture on the associated
    SVG container (in our case, the `svg` element itself). The low-level zoom gesture
    will then be translated to a high-level D3 zoom event. The default event listeners
    support both mouse and touch events. On line C, we define `scaleExtent` with a
    two-element array [1, 10] (a range). The scale extent defines how much zoom should
    be allowed (in our case, we allow 10X zoom). Finally, on line D, we register a
    custom zoom event handler to handle D3 zoom events. Now, let''s take a look at
    what task this zoom event handler performs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `zoom` function, we simply delegate the actual zooming and panning to
    SVG transformation. To further simplify this task, the D3 zoom event has also
    calculated the necessary translate and scale. So, all we need to do is embed them
    into a SVG transform attribute. Here are the properties contained in a zoom event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`transform.x` and `transform.y`: Current translation vector'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transform.k`: A number representing the current scale'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this point, you might be asking what the point of having this `zoomHandler`
    function is. Why can't D3 take care of this step for us? The reason is that D3
    zoom behavior is not designed specifically for SVG, but rather designed as a general
    zoom behavior support mechanism. Therefore, this zoom function implements the
    translation of general zoom and pan events into SVG-specific transformation.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The zoom function is also capable of performing additional tasks other than
    the simple coordinate system transformation. For example, a common technique is
    to load additional data when the user issues a zoom gesture, hence implementing
    the drill-down capability in zoom function. A well-known example is a digital
    map; as you increase zoom level on a map, more data and details then can be loaded
    and illustrated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](ch02.html "Chapter 2. Be Selective"), *Be Selective*, for
    more details on `d3.selection.call` function and selection manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to W3C SVG coordinate system transformations specification for more information
    on how zoom and pan effect was achieved in SVG at [https://www.w3.org/TR/SVG/coords.html#EstablishingANewUserSpace](https://www.w3.org/TR/SVG/coords.html#EstablishingANewUserSpace)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the `d3.zoom` API document for more details on D3 zoom support at [https://github.com/d3/d3-zoom/blob/master/README.md#zoom](https://github.com/d3/d3-zoom/blob/master/README.md#zoom)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing drag behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another common behavior in interactive visualization that we will cover in this
    chapter is **dragging**. Drag is useful to provide capabilities in visualization
    that allow graphical rearrangement or even user input through force; we will discuss
    this in the next chapter. In this recipe, we will explore how the drag behavior
    is supported in D3.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your local copy of the following file in your web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/drag.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/drag.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we will produce four circles that can be dragged using D3 drag behavior
    support and additionally with SVG boundary detection while being dragging. Now,
    let''s see how to implement this in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe generates the drag behavior on the following four circles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Original
  prefs: []
  type: TYPE_NORMAL
- en: The preceding image shows what this recipe renders in its original state while
    the following image show what happens when user drags each circle away from the
    center.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_10_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dragged
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we can see, drag support follows a pattern similar to the D3 zoom support.
    The main drag capability is provided by the `d3.drag` function (refer to line
    A). D3 drag behavior automatically creates appropriate low-level event listeners
    to handle drag gestures on the given element and then translates low-level events
    to high-level D3 drag events. Both mouse and touch events are supported, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In this recipe, we are interested in the `drag` event, and it is handled by
    our `move` function. Similar to the zoom behavior, the D3 drag behavior support
    is event driven, therefore, it allows maximum flexibility in implementation, supporting
    not only SVG but also the HTML canvas. Once defined, the behavior can be attached
    to any element by calling it on a given selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, in the `move` function, we simply use SVG transformation to move the
    dragged element to a proper location (refer to line D) based on the information
    conveyed by the drag event (refer to line C):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'One additional condition we check here is to calculate the SVG boundaries constraint
    so the user cannot drag an element outside of the SVG. This is achieved by the
    following check:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Other than the drag event, the D3 drag behavior also supports two other event
    types. The following list shows all supported drag event types and their attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dragstart`: It is triggered when a drag gesture starts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drag`: It is fired when the element is dragged. The `d3.event` object will
    contain *x* and *y* properties that represent the current absolute drag coordinates
    of the element. It will also contain the *dx* and *dy* properties representing
    the element''s coordinates relative to its position at the beginning of the gesture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dragend`: It is triggered when a drag gesture has finished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to [Chapter 2](ch02.html "Chapter 2. Be Selective"), *Be Selective*, for
    more details on `d3.selection.call` function and selection manipulation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the `d3.behavior.drag` API document for more details on D3 drag support
    at [https://github.com/d3/d3-drag/blob/master/README.md#drag](https://github.com/d3/d3-drag/blob/master/README.md#drag)
    .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
