- en: Chapter 10. Interacting with Your Visualization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。与您的可视化交互
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Interacting with the mouse
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与鼠标交互
- en: Interacting with a multi-touch device
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与多触控设备交互
- en: Implementing the zoom and pan behavior
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现缩放和平移行为
- en: Implementing the drag behavior
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现拖拽行为
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: '*The ultimate goal of visualization design is to optimize applications so that
    they help us perform cognitive work more efficiently.*'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*可视化设计的最终目标是优化应用程序，以便它们能帮助我们更有效地完成认知工作。*'
- en: '*Ware C. (2012)*'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Ware C. (2012)*'
- en: 'The goal of data visualization is to help the audience gain information from
    a large quantity of raw data quickly and efficiently through metaphor, mental
    model alignment, and cognitive magnification. So far, in this book, we have introduced
    various techniques to leverage D3 library by implementing many types of visualization.
    However, we haven''t touched a crucial aspect of visualization: human interaction.
    Various research have concluded the unique value of human interaction in information
    visualization.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化的目标是帮助观众通过隐喻、心智模型对齐和认知放大，快速有效地从大量原始数据中获取信息。到目前为止，在这本书中，我们已经介绍了各种技术，通过实现多种类型的可视化来利用D3库。然而，我们还没有触及可视化的重要方面：人机交互。各种研究已经得出结论，人机交互在信息可视化中具有独特的价值。
- en: '*Visualization combined with computational steering allows faster analyses
    of more sophisticated scenarios...This case study adequately demonstrate that
    the interaction of a complex model with steering and interactive visualization
    can extend the applicability of the modelling beyond research*'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*将可视化与计算引导相结合，可以更快地分析更复杂的场景……本案例研究充分证明了复杂模型与引导和交互式可视化的交互可以扩展建模的应用范围，超越研究领域*'
- en: '*Barrass I. & Leng J (2011)*'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Barrass I. & Leng J (2011)*'
- en: In this chapter, we will focus on D3 human visualization interaction support;
    or, as mentioned earlier, you will learn how to add computational steering capability
    to your visualization.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于D3的人机可视化交互支持；或者，如前所述，您将学习如何将计算引导能力添加到您的可视化中。
- en: Interacting with mouse events
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与鼠标事件交互
- en: The mouse is the most common and popular human-computer interaction control
    found on most desktop and laptop computers. Even today, with multi-touch devices
    rising to dominance, touch events are still commonly emulated with mouse events.
    In this recipe, we will learn how to handle standard mouse events in D3.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标是大多数桌面和笔记本电脑上最常见的、最受欢迎的人机交互控制方式。即使今天，随着多点触控设备逐渐占据主导地位，触摸事件仍然通常通过鼠标事件来模拟。在本食谱中，我们将学习如何在D3中处理标准鼠标事件。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/mouse.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/mouse.html)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/mouse.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/mouse.html)'
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'In the following code example, we will explore techniques of registering and
    handling mouse events in D3\. Although in this particular example we are handling
    only `click` and `mousemove`, the techniques utilized here can be applied easily
    to all other standard mouse events supported by modern browsers:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码示例中，我们将探讨在D3中注册和处理鼠标事件的技术。尽管在这个特定的例子中我们只处理了`click`和`mousemove`，但这里使用的技术可以轻松应用于现代浏览器支持的所有其他标准鼠标事件：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This recipe generates the following interactive visualization when you click
    on the SVG image:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击SVG图像时，本食谱将生成以下交互式可视化：
- en: '![How to do it...](img/image_10_001.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现...](img/image_10_001.jpg)'
- en: Mouse interaction
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标交互
- en: How it works...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In D3, to register an event listener, we need to invoke the `on` function on
    a particular selection. The given event listener will be attached to all the selected
    elements for the specified event (refer to line A). The following code in this
    recipe attaches a `mousemove` event listener, which displays the current mouse
    position (refer to line B):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在D3中，要注册事件监听器，我们需要在特定的选择上调用`on`函数。给定的事件监听器将被附加到所有选定的元素上，用于指定的事件（参见图A）。本食谱中的以下代码附加了一个`mousemove`事件监听器，它显示当前鼠标位置（参见图B）：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On line C, we used `d3.mouse` function to obtain the current mouse position
    relative to the given container element. This function returns a two-element array
    [x, y]. After this, we also registered an event listener for a mouse `click` event
    on line D using the same `on` function:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在第C行，我们使用`d3.mouse`函数获取相对于给定容器元素的当前鼠标位置。此函数返回一个包含两个元素的数组[x, y]。之后，我们还在第D行使用相同的`on`函数注册了一个鼠标`click`事件监听器：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Once again, we retrieved the current mouse position using the `d3.mouse` function
    and then generated five concentric expanding circles to simulate the ripple effect.
    The ripple effect was simulated using geometrically increasing delay (refer to
    line F) with decreasing `stroke-width` (refer to line E). Finally, when the transition
    effect is over, the circles were removed using a transition `end` listener (refer
    to line G). If you are not familiar with this type of transition control, refer
    to [Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition with
    Style*, for more details.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 再次使用`d3.mouse`函数检索当前鼠标位置，然后生成五个同心扩大的圆来模拟涟漪效果。涟漪效果是通过几何级数增加的延迟（参见图F）和减少的`stroke-width`（参见图E）来模拟的。最后，当过渡效果完成后，使用过渡`end`监听器（参见图G）移除圆圈。如果您不熟悉这种类型的过渡控制，请参阅[第6章](ch06.html
    "第6章。以风格过渡")，*以风格过渡*，以获取更多详细信息。
- en: There's more...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Although we have only demonstrated how to listen on the `click` and `mousemove`
    events in this recipe, you can listen on any event that your browser supports
    through the `on` function. The following is a list of mouse events that are useful
    to know when building your interactive visualization:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在这个食谱中只演示了如何监听`click`和`mousemove`事件，但您可以通过`on`函数监听浏览器支持的任何事件。以下是在构建您的交互式可视化时有用的一些鼠标事件列表：
- en: '`click`: Dispatched when a user clicks on a mouse button'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`click`: 当用户点击鼠标按钮时触发'
- en: '`dbclick`: Dispatched when a mouse button is clicked twice'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbclick`: 当鼠标按钮被连续点击两次时触发'
- en: '`mousedown`: Dispatched when the mouse button is pressed'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mousedown`: 当鼠标按钮被按下时触发'
- en: '`mouseenter`: Dispatched when the mouse button is moved onto the limits of
    an element or one of its descendent elements'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mouseenter`: 当鼠标按钮移入元素边界或其任何后代元素的边界时触发'
- en: '`mouseleave`: Dispatched when the mouse button is moved off the limits of an
    element and all of its descendent elements'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mouseleave`: 当鼠标按钮移出元素及其所有后代元素的边界时触发'
- en: '`mousemove`: Dispatched when the mouse button is moved over an element'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mousemove`: 当鼠标按钮在元素上移动时触发'
- en: '`mouseout`: Dispatched when the mouse button is moved off of the boundaries
    of an element'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mouseout`: 当鼠标按钮移出元素边界时触发'
- en: '`mouseover`: Dispatched when the mouse button is moved onto the limits of an
    element'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mouseover`: 当鼠标按钮移入元素边界时触发'
- en: '`mouseup`: Dispatched when a mouse button is released over an element'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mouseup`: 当鼠标按钮在元素上释放时触发'
- en: See also
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to [Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition
    with Style*, for more details on the ripple effect technique used in this recipe.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关本食谱中使用的涟漪效果技术的更多详细信息，请参阅[第6章](ch06.html "第6章。以风格过渡")，*以风格过渡*。
- en: Refer to W3C DOM Level 3 Events specification for a complete list of event types
    at [https://www.w3.org/TR/DOM-Level-3-Events/](https://www.w3.org/TR/DOM-Level-3-Events/)
    .
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关事件类型的完整列表，请参阅W3C DOM Level 3 Events规范[https://www.w3.org/TR/DOM-Level-3-Events/](https://www.w3.org/TR/DOM-Level-3-Events/)。
- en: Refer to the `d3.mouse` API document for more details on mouse detection at
    [https://github.com/d3/d3-selection/blob/master/README.md#mouse](https://github.com/d3/d3-selection/blob/master/README.md#mouse)
    .
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关鼠标检测的更多详细信息，请参阅[d3.mouse API文档](https://github.com/d3/d3-selection/blob/master/README.md#mouse)。
- en: Interacting with a multi-touch device
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与多触控设备交互
- en: Today, with the proliferation of multi-touch devices, any visualization that
    targets mass consumption needs to worry about its interact-ability not only through
    the traditional pointing device but also through multi-touches and gestures. In
    this recipe, we will explore touch support offered by D3 to see how it can be
    leveraged to generate some pretty interesting interaction with multi-touch-capable
    devices.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，随着多触控设备的普及，任何面向大众消费的可视化都需要考虑其交互性，不仅通过传统的指针设备，还要通过多触控和手势。在本食谱中，我们将探索D3提供的触摸支持，看看它如何被利用来生成一些与多触控设备非常有趣的交互。
- en: Getting ready
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/touch.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/touch.html)
    .'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/touch.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/touch.html)
    .'
- en: How to do it...
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will generate a progress-circle around the user''s touches,
    and once the progress is completed, a subsequent ripple effect will be triggered
    around the circle. However, if the user prematurely ends their touch, we shall
    stop the progress-circle without generating the ripples:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将围绕用户的触摸生成进度圆环，一旦进度完成，就会在圆环周围触发后续的波纹效果。然而，如果用户提前结束触摸，我们应停止进度圆环而不生成波纹：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This recipe generates the following interactive visualization on a touch-enabled
    device:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方在触摸设备上生成以下交互式可视化：
- en: '![How to do it...](img/image_10_002.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_10_002.jpg)'
- en: Touch Interaction
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 触摸交互
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Event listener for touch events are registered through D3 selection''s `on`
    function similar to what we have done with mouse events in the previous recipe
    (refer to line A):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 D3 选择器的 `on` 函数注册触摸事件监听器，这与我们在前一个示例中处理鼠标事件的方式类似（参考行 A）：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'One crucial difference here is that we have registered our touch event listener
    on the `body` element instead of the `svg` element since there are default touch
    behaviors defined with many OS and browsers and we would like to override it with
    our custom implementation. This is done through the following function call (refer
    to line B):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的一个关键区别是我们将触摸事件监听器注册在 `body` 元素上而不是 `svg` 元素上，因为许多操作系统和浏览器定义了默认的触摸行为，我们希望用我们的自定义实现来覆盖它。这是通过以下函数调用实现的（参考行
    B）：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once the touch event is triggered, we will retrieve multiple touch point data
    using the `d3.touches` function, as illustrated by the following code snippet:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦触发触摸事件，我们将使用 `d3.touches` 函数检索多个触摸点数据，如下面的代码片段所示：
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Instead of returning a two-element array as the `d3.mouse` function does, `d3.touches`
    returns an array of two-element arrays since there could be multiple touch points
    for each touch event. Each touch position array has data structure that looks
    like the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `d3.mouse` 函数返回的二维数组不同，`d3.touches` 返回一个二维数组的数组，因为每个触摸事件可能有多个触摸点。每个触摸位置数组的数据结构如下所示：
- en: '![How it works...](img/image_10_003.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/image_10_003.jpg)'
- en: Touch position array
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 触摸位置数组
- en: 'Here, we also used array index in this recipe to establish object constancy.
    Once the touch data is bound to the selection, the progress circle was generated
    for each touch around the user''s touch point:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们还在本配方中使用了数组索引来建立对象一致性。一旦触摸数据绑定到选择器，进度圆环就会在每个触摸点周围生成：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'This is done through a standard arc transition with arc attribute tweening
    (refer to line D) as explained in [Chapter 7](ch07.html "Chapter 7. Getting into
    Shape"), *Getting into Shape*. If the progress-circle has not yet been canceled
    by the user even though the transition is over, then a ripple effect similar to
    what we have done in the previous recipe is generated on line E. Since we have
    registered the same event listener `touch` function on both the `touchstart` and
    `touchend` events, we can use the following lines to remove progress-circle and
    also set a flag to indicate that this progress circle has stopped prematurely:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过标准的弧形过渡和弧形属性插值（参考行 D）实现的，如第 7 章[“形状塑造”](ch07.html "第 7 章。形状塑造")中所述。如果进度圆环尚未被用户取消，即使过渡已经完成，则在线
    E 上生成类似于我们在前一个示例中所做的波纹效果。由于我们在 `touchstart` 和 `touchend` 事件上注册了相同的 `touch` 事件监听器，我们可以使用以下行来移除进度圆环并设置一个标志以指示此进度圆环已提前停止：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We need to set this stateful flag on `d`, which is the touch data array, since
    there is no way to cancel a transition once it starts; hence, even after you remove
    the progress-circle element from the DOM tree, the transition will still complete
    and trigger line E.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在 `d` 上设置这个状态标志，即触摸数据数组，因为没有方法可以取消已经开始的过渡；因此，即使您从 DOM 树中移除了进度圆环元素，过渡仍然会完成并触发行
    E。
- en: There's more...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'We have demonstrated touch interaction through the `touchstart` and `touchend`
    events; however, you can use the same pattern to handle any other touch events
    supported by your browser. The following list contains the proposed touch event
    types recommended by W3C:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过 `touchstart` 和 `touchend` 事件演示了触摸交互；然而，你可以使用相同的模式来处理浏览器支持的任何其他触摸事件。以下列表包含了
    W3C 推荐的触摸事件类型：
- en: '`touchstart`: It is dispatched when the user places a touch point on the touch
    surface.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touchstart`：当用户在触摸表面上放置一个触摸点时，它会被触发。'
- en: '`touchend`: It is dispatched when the user removes a touch point from the touch
    surface.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touchend`：当用户从触摸表面上移除一个触摸点时，它会被触发。'
- en: '`touchmove`: It is dispatched when the user moves a touch point along the touch
    surface.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touchmove`：当用户在触摸表面上移动一个触摸点时，它会被触发。'
- en: '`touchcancel`: It is dispatched when a touch point is disrupted in an implementation-specific
    manner.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touchcancel`：当触摸点以一种特定于实现的方式被干扰时，它会被触发。'
- en: See also
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考内容
- en: Refer to [Chapter 6](ch06.html "Chapter 6. Transition with Style"), *Transition
    with Style*, for more details on object constancy and the ripple effect technique
    used in this recipe.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 [第 6 章](ch06.html "第 6 章。过渡风格")，*过渡风格*，以获取关于在此配方中使用对象恒定和涟漪效果技术的更多详细信息。
- en: Refer to [Chapter 7](ch07.html "Chapter 7. Getting into Shape"), *Getting into
    Shape*, for more details on the progress-circle attribute tween transition technique
    used in this recipe
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 [第 7 章](ch07.html "第 7 章。进入形状")，*进入形状*，以获取关于在此配方中使用进度圆环属性缓动过渡技术的更多详细信息
- en: Refer to the W3C Touch Events proposed recommendation for a complete list of
    touch event types at [https://www.w3.org/TR/touch-events](https://www.w3.org/TR/touch-events/)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 W3C 触摸事件建议的推荐，以获取触摸事件类型的完整列表，链接为 [https://www.w3.org/TR/touch-events](https://www.w3.org/TR/touch-events/)
- en: Refer to the `d3.touch` API document for more details on multi-touch detection
    at [https://github.com/d3/d3-selection/blob/master/README.md#touches](https://github.com/d3/d3-selection/blob/master/README.md#touches)
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 `d3.touch` API 文档，以获取关于多触摸检测的更多详细信息，链接为 [https://github.com/d3/d3-selection/blob/master/README.md#touches](https://github.com/d3/d3-selection/blob/master/README.md#touches)
- en: Implementing zoom and pan behavior
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现缩放和滚动行为
- en: Zooming and panning are common and useful techniques in data visualization,
    which work particularly well with SVG-based visualization, since vector graphic
    does not suffer from pixilation as its bitmap counterpart would. Zooming is especially
    useful when you are dealing with large dataset when it is impractical or impossible
    to visualize the entire dataset, thus a zoom and drill-down approach needs to
    be employed. In this recipe, we will explore D3's built-in support for both zooming
    and panning.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放和滚动是数据可视化中常见且有用的技术，与基于 SVG 的可视化配合得非常好，因为矢量图形不会像位图那样受到像素化的影响。当处理大型数据集时，放大特别有用，因为无法或不可能可视化整个数据集，因此需要采用缩放和钻取的方法。在此配方中，我们将探索
    D3 内置的缩放和滚动支持。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/zoom.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/zoom.html)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/zoom.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/zoom.html)'
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this recipe, we will implement geometric zooming and panning using D3 zoom
    support. Let''s see how this is done in the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，我们将使用 D3 缩放支持实现几何放大和滚动。让我们看看以下代码是如何实现的：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This recipe generates the following zooming and panning effect:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方生成以下缩放和滚动效果：
- en: '![How to do it...](img/image_10_004.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_10_004.jpg)'
- en: Original
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 原始
- en: The previous image show the original state of the visualization while the following
    one shows what happen when user zooms in either through scrolling the mouse wheel
    on a desktop or using multi-gesture on touch screen devices.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张图像显示了可视化的原始状态，而下一张图像显示了当用户通过在桌面上的鼠标滚轮滚动或使用触摸屏设备的多手势放大时发生了什么。
- en: '![How to do it...](img/image_10_005.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_10_005.jpg)'
- en: Zoom
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 放大
- en: The following screenshot shows what happen when user drags (pan) the image either
    with their mouse or finger.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了当用户用鼠标或手指拖动（滚动）图像时发生了什么。
- en: '![How to do it...](img/image_10_006.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_10_006.jpg)'
- en: Pan
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动
- en: How it works...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'At this point, you might be surprised to see how little code is necessary to
    implement this fully functional zoom and pan effect with D3\. If you have this
    recipe open in your browser, you will also notice zooming and panning reacts perfectly
    well to both mouse wheel and multi-touch gesture. Most of the heavy lifting is
    done by D3 library. What we have to do here is simply define what a zoom behavior
    is. Let''s see how this is done in the code; firstly, we need to define zoom behavior
    on a SVG container:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你可能会惊讶地看到实现这个完全功能的缩放和拖动效果所需的代码是多么少。如果你在浏览器中打开了这份食谱，你也会注意到缩放和拖动对鼠标滚轮和多指触摸手势都反应得非常好。大部分的重活都是由
    D3 库完成的。我们在这里需要做的只是简单地定义缩放行为是什么。让我们看看代码中是如何实现的；首先，我们需要在 SVG 容器上定义缩放行为：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As we can see on line A, a `d3.zoom` function was created (refer to line B)
    and invoked on the `svg` container. The `d3.zoom` will automatically create event
    listeners to handle the low-level zooming and panning gesture on the associated
    SVG container (in our case, the `svg` element itself). The low-level zoom gesture
    will then be translated to a high-level D3 zoom event. The default event listeners
    support both mouse and touch events. On line C, we define `scaleExtent` with a
    two-element array [1, 10] (a range). The scale extent defines how much zoom should
    be allowed (in our case, we allow 10X zoom). Finally, on line D, we register a
    custom zoom event handler to handle D3 zoom events. Now, let''s take a look at
    what task this zoom event handler performs:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在行 A 中看到的，创建了一个 `d3.zoom` 函数（参考行 B），并在 `svg` 容器上调用它。`d3.zoom` 将自动创建事件监听器来处理关联的
    SVG 容器（在我们的例子中，是 `svg` 元素本身）上的低级缩放和拖动手势。低级缩放手势随后将被转换为高级 D3 缩放事件。默认的事件监听器支持鼠标和触摸事件。在行
    C 中，我们使用一个包含两个元素 [1, 10]（一个范围）的数组定义了 `scaleExtent`。缩放范围定义了允许缩放的程度（在我们的例子中，我们允许
    10 倍缩放）。最后，在行 D 中，我们注册了一个自定义的缩放事件处理器来处理 D3 缩放事件。现在，让我们看看这个缩放事件处理器执行了什么任务：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the `zoom` function, we simply delegate the actual zooming and panning to
    SVG transformation. To further simplify this task, the D3 zoom event has also
    calculated the necessary translate and scale. So, all we need to do is embed them
    into a SVG transform attribute. Here are the properties contained in a zoom event:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `zoom` 函数中，我们只是将实际的缩放和拖动委托给 SVG 转换。为了进一步简化这个任务，D3 缩放事件也计算了必要的平移和缩放。所以，我们只需要将它们嵌入到
    SVG 转换属性中。以下是缩放事件中包含的属性：
- en: '`transform.x` and `transform.y`: Current translation vector'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transform.x` 和 `transform.y`：当前平移向量'
- en: '`transform.k`: A number representing the current scale'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transform.k`：表示当前缩放比例的数字'
- en: At this point, you might be asking what the point of having this `zoomHandler`
    function is. Why can't D3 take care of this step for us? The reason is that D3
    zoom behavior is not designed specifically for SVG, but rather designed as a general
    zoom behavior support mechanism. Therefore, this zoom function implements the
    translation of general zoom and pan events into SVG-specific transformation.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你可能想知道拥有这个 `zoomHandler` 函数的目的是什么。为什么 D3 不能为我们处理这一步呢？原因在于 D3 的缩放行为并不是专门为
    SVG 设计的，而是作为一个通用的缩放行为支持机制设计的。因此，这个缩放函数实现了将通用的缩放和拖动事件转换为 SVG 特定的转换。
- en: There's more...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The zoom function is also capable of performing additional tasks other than
    the simple coordinate system transformation. For example, a common technique is
    to load additional data when the user issues a zoom gesture, hence implementing
    the drill-down capability in zoom function. A well-known example is a digital
    map; as you increase zoom level on a map, more data and details then can be loaded
    and illustrated.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放函数还能够执行除了简单的坐标系统转换之外的其他任务。例如，一种常见的技巧是在用户发出缩放手势时加载额外的数据，从而在缩放函数中实现钻取功能。一个著名的例子是数字地图；当你增加地图的缩放级别时，更多的数据和细节就可以被加载和展示。
- en: See also
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to [Chapter 2](ch02.html "Chapter 2. Be Selective"), *Be Selective*, for
    more details on `d3.selection.call` function and selection manipulation
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考第 2 章 [选择性地使用](ch02.html "第 2 章。选择性地使用")，*选择性地使用*，了解更多关于 `d3.selection.call`
    函数和选择操作的信息
- en: Refer to W3C SVG coordinate system transformations specification for more information
    on how zoom and pan effect was achieved in SVG at [https://www.w3.org/TR/SVG/coords.html#EstablishingANewUserSpace](https://www.w3.org/TR/SVG/coords.html#EstablishingANewUserSpace)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考W3C SVG坐标系统转换规范，了解更多关于在 SVG 中如何实现缩放和拖动效果的信息，请访问 [https://www.w3.org/TR/SVG/coords.html#EstablishingANewUserSpace](https://www.w3.org/TR/SVG/coords.html#EstablishingANewUserSpace)
- en: Refer to the `d3.zoom` API document for more details on D3 zoom support at [https://github.com/d3/d3-zoom/blob/master/README.md#zoom](https://github.com/d3/d3-zoom/blob/master/README.md#zoom)
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考`d3.zoom` API文档以获取有关D3缩放支持的更多详细信息，[https://github.com/d3/d3-zoom/blob/master/README.md#zoom](https://github.com/d3/d3-zoom/blob/master/README.md#zoom)
- en: Implementing drag behavior
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现拖动行为
- en: Another common behavior in interactive visualization that we will cover in this
    chapter is **dragging**. Drag is useful to provide capabilities in visualization
    that allow graphical rearrangement or even user input through force; we will discuss
    this in the next chapter. In this recipe, we will explore how the drag behavior
    is supported in D3.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨的另一个常见交互式可视化行为是**拖动**。拖动对于提供可视化中的图形重新排列或甚至通过力量提供用户输入的能力非常有用；我们将在下一章中讨论这一点。在此菜谱中，我们将探讨如何在D3中支持拖动行为。
- en: Getting ready
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/drag.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/drag.html)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/drag.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter10/drag.html)'
- en: How to do it...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here, we will produce four circles that can be dragged using D3 drag behavior
    support and additionally with SVG boundary detection while being dragging. Now,
    let''s see how to implement this in code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将生成四个可以使用D3拖动行为支持拖动的圆圈，并且在拖动过程中还带有SVG边界检测。现在，让我们看看如何在代码中实现这一点：
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This recipe generates the drag behavior on the following four circles:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱在以下四个圆圈上生成拖动行为：
- en: '![How to do it...](img/image_10_007.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/image_10_007.jpg)'
- en: Original
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 原始
- en: The preceding image shows what this recipe renders in its original state while
    the following image show what happens when user drags each circle away from the
    center.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张图片显示了此菜谱在其原始状态下渲染的内容，而下一张图片显示了当用户将每个圆圈从中心拖动时会发生什么。
- en: '![How to do it...](img/image_10_008.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/image_10_008.jpg)'
- en: Dragged
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 拖动
- en: How it works...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As we can see, drag support follows a pattern similar to the D3 zoom support.
    The main drag capability is provided by the `d3.drag` function (refer to line
    A). D3 drag behavior automatically creates appropriate low-level event listeners
    to handle drag gestures on the given element and then translates low-level events
    to high-level D3 drag events. Both mouse and touch events are supported, as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，拖动支持遵循与D3缩放支持类似的模式。主要的拖动能力由`d3.drag`函数提供（参考行A）。D3拖动行为自动创建适当的低级事件监听器来处理给定元素上的拖动手势，然后将低级事件转换为高级D3拖动事件。支持鼠标和触摸事件，如下所示：
- en: '[PRE13]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this recipe, we are interested in the `drag` event, and it is handled by
    our `move` function. Similar to the zoom behavior, the D3 drag behavior support
    is event driven, therefore, it allows maximum flexibility in implementation, supporting
    not only SVG but also the HTML canvas. Once defined, the behavior can be attached
    to any element by calling it on a given selection:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在此菜谱中，我们关注的是`drag`事件，它由我们的`move`函数处理。与缩放行为类似，D3拖动行为支持是事件驱动的，因此，它允许在实现中具有最大的灵活性，不仅支持SVG，还支持HTML画布。一旦定义，该行为可以通过在给定的选择上调用它来附加到任何元素：
- en: '[PRE14]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, in the `move` function, we simply use SVG transformation to move the
    dragged element to a proper location (refer to line D) based on the information
    conveyed by the drag event (refer to line C):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`move`函数中，我们简单地使用SVG转换将拖动的元素移动到合适的位置（参考行D），这是基于拖动事件传递的信息（参考行C）：
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'One additional condition we check here is to calculate the SVG boundaries constraint
    so the user cannot drag an element outside of the SVG. This is achieved by the
    following check:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里检查的另一个附加条件是计算SVG边界约束，以便用户不能将元素拖动到SVG之外。这是通过以下检查实现的：
- en: '[PRE16]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: There's more...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Other than the drag event, the D3 drag behavior also supports two other event
    types. The following list shows all supported drag event types and their attributes:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 除了拖动事件之外，D3拖动行为还支持两种其他事件类型。以下列表显示了所有支持的拖动事件类型及其属性：
- en: '`dragstart`: It is triggered when a drag gesture starts.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dragstart`：当拖动手势开始时触发。'
- en: '`drag`: It is fired when the element is dragged. The `d3.event` object will
    contain *x* and *y* properties that represent the current absolute drag coordinates
    of the element. It will also contain the *dx* and *dy* properties representing
    the element''s coordinates relative to its position at the beginning of the gesture.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`drag`: 当元素被拖动时触发。`d3.event` 对象将包含代表元素当前绝对拖动坐标的 *x* 和 *y* 属性。它还将包含代表元素相对于手势开始时位置的
    *dx* 和 *dy* 属性。'
- en: '`dragend`: It is triggered when a drag gesture has finished.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dragend`: 当拖动手势完成时触发。'
- en: See also
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to [Chapter 2](ch02.html "Chapter 2. Be Selective"), *Be Selective*, for
    more details on `d3.selection.call` function and selection manipulation.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 `d3.selection.call` 函数和选择操作的更多详细信息，请参阅[第2章](ch02.html "第2章。选择") *选择*。
- en: Refer to the `d3.behavior.drag` API document for more details on D3 drag support
    at [https://github.com/d3/d3-drag/blob/master/README.md#drag](https://github.com/d3/d3-drag/blob/master/README.md#drag)
    .
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 D3 拖动支持的更多详细信息，请参阅 `d3.behavior.drag` API 文档，链接为 [https://github.com/d3/d3-drag/blob/master/README.md#drag](https://github.com/d3/d3-drag/blob/master/README.md#drag)。
