- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 1\. TypeScript Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1.01: Creating a Library for Working with Strings'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Here are the steps that will help you create all the functions listed in the
    activity problem statement.
  prefs: []
  type: TYPE_NORMAL
- en: toTitleCase
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `toTitleCase` function will process a string and capitalize the first letter
    of each word, but will make all the other letters lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Test cases for this function are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the steps to help you write this function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This function will take a single parameter that is a string and return a string
    as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'First off, we will split the input into an array of strings using the split
    string method. We''ll split on every space character:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will define a new array that will hold each word as we transform it
    into title case, and use a for..of loop to loop through the array of words:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For each word we will extract the first character and the rest of the characters
    using the slice string method. We will transform the initial to uppercase, and
    the rest of the characters to lowercase. Next, we''ll join them back together
    to form a complete word and push the result to the holding array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At last, we will join all the processed words together, with a separating space,
    and we have our result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we can test whether the function gives the expected results for the given
    test inputs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We should receive the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: countWords
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are the steps to help you write this function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The countWords function will count the number of separate words within a string.
    Words are delimited by spaces, dashes (-), or underscores (_). Test cases for
    this function are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `countWords` function using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Split the words using a regex that will match any occurrence of a space, underscore,
    or dash character:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return the length of the array that is the result of the split:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the function and console out the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: toWords
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `toWords` function will return all the words that are within a string. Words
    are delimited by spaces, dashes (`-`), or underscores (`_`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Test cases for this function are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This function is very similar to the previous one we developed. The significant
    difference is that we need to return not only the number of words but also the
    actual words themselves. So, instead of a number, this function will return an
    array of strings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code to create this function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once more, we will need to split the input into an array of strings using the
    split string method, using the [ _-] regular expression. Split the words using
    a regular expression that will match any occurrence of a space, underscore, or
    dash character:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we have the words, we can just return them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we can test whether the function gives the expected results for the given
    test inputs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We should receive the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: repeat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`repeat` will take a string and a number and return that same string repeated
    that number of times.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Test cases for this function are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the steps to help you write this function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This function will take two parameters, one that is a string and a second one
    that is a number, and return a string as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'There are many ways to implement this function, and we''ll illustrate one approach.
    We can create an array with the required number of elements, and then use the
    array''s `fill` method to fill it with the value of the string. In that way, we
    will have an array of `times` elements, and each element will have the `input`
    value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we just need to join all the instances, using an empty string as the
    delimiter. That way, we''re making sure that no spaces or commas are inserted
    between the strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we can test whether the function gives the expected results for the given
    test inputs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We should receive the following results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: isAlpha
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`isAlpha` returns `true` if the string only has alpha characters (that is, letters).
    Test cases for this function are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the steps to help you write this function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This function will take a single parameter that is a string and return a Boolean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For this function to work, we need to check whether each character is a lower-
    or uppercase letter. One of the best ways to determine that is to use a regular
    expression that checks it. In particular, the character group [a-z] will check
    for a single character and if we use the star quantifier (*), we can tell the
    regular expression to check for all the characters. We can add the i modifier
    to the regular expression to make the match case-insensitive, so we don''t need
    to worry about letter casing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to actually test our input. Since we only need to know whether
    the string matches, we can use the test method of the regular expression and return
    its result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we can test whether the function gives the expected results for the given
    test inputs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We should receive the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: isBlank
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`isBlank` returns `true` if the string is blank, that is, it consists only
    of whitespace characters.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Test cases for this function are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the steps to help you write this function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This function will take a single parameter that is a string and return a Boolean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For this function to work, we need to check whether each character in the string
    is a whitespace character. We can use a regular expression to determine that,
    or we can use some kind of looping construct that will iterate through the string.
    One approach would be to test whether the first character is a space, and if it
    is, slice it off:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This loop will execute until it reaches a non-whitespace character. If it does
    not encounter one, it will only stop when there is no first element of the string,
    that is, when the string is the empty string. If that''s the case, our original
    input only contained whitespace, and we can return true. Otherwise, we should
    return false:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we can test whether the function gives the expected results for the given
    test inputs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We should receive the following results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that there are multiple ways to implement all the preceding functions.
    The code shown is just one way to implement them, and these implementations are
    mostly for illustrative purposes. For example, a proper string utility library
    will need to have much more robust and extensive test suites.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2\. Declaration Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 2.01: Building a Heat Map Declaration File'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this activity, we''ll be building a TypeScript application named `heat map
    log system` that will track the baseball pitch data and ensure the integrity of
    the data. Perform the following steps to implement this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the following GitHub repository at [https://packt.link/dqDPk](https://packt.link/dqDPk)
    and download the activity project containing the specs and configuration elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Visual Studio Code editor and then open the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change to the `activity-starter` directory in the terminal or command prompt
    by writing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to install the dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will now see the following files in the `activity-starter` directory:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.19: Starter project files'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B14508_02_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.19: Starter project files'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `HeatMapTypes.d.ts` declaration file in the `types/` directory, define
    a module called `HeatMapTypes`, and export the interface named `Pitcher`. Define
    three attributes for the `Pitcher``batterHotZones`, `pitcherHotZones`, and `coordinateMap`.
    The data structures should be the same for all three attributes, `Array<Array<number>>`,
    but `coordinateMap` should be optional. Write the following code to accomplish
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code in the editor looks like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.20: Creating a pitcher interface'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B14508_02_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.20: Creating a pitcher interface'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `heat_map_data.ts` and import the declaration files. Create and export
    a `let` variable called `data` and assign it to the `Pitcher` type. You will need
    to import the `lodash` library, which was installed when you initially ran `npm
    install`. Write the following code to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add values to the `data` variable that adhere to the declaration rules. Assign
    nested arrays as values to both the `batterHotZones` and `pitcherHotZones` attributes.
    Add the following code to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new function named `findMatch()` that takes in both the `batterHotZones`
    and `pitcherHotZones` arrays and utilize the `lodash` function, `intersectionWith()`,
    to return the identical nested array. Finally, store the value of the `findMatch()`
    function in the `coordinateMap` attribute that was defined in the declaration
    file. Write the following code to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, in the terminal, type the following commands to generate the JavaScript
    code and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we run the preceding commands, the following output is displayed in the terminal:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding output, the common values from both the attributes are fetched
    and then printed. In this case, the common values are `[3, 2]`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, change the values of both the attributes. Write the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, in the terminal, type the following commands to generate the JavaScript
    code and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we run the preceding commands, the following output is displayed in the terminal:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding output, the common values are `[10.2, -5]` and `[3, 2]`. Finally,
    we built a heat map log system that will track the baseball pitch data and ensure
    the integrity of the data.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 3.01: Building a Flight Booking System with Functions'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start with the stubs provided in code samples. We have three files: `index.ts`,
    `bookings.ts`, and `flights.ts`. The `index.ts` file is a bit abstract and will
    just represent some of the transactions we push into our system. `bookings.ts`
    handles the user-facing activities of managing a booking, and `flights.ts` is
    the back office of filling up flights and making sure that everybody has a seat.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `index.ts` file won''t change unless you feel like changing it and adding
    some new scenarios. Let''s run it without adding any code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So we have work to do. Several functions are not yet implemented. Let's start
    by looking at `flights.ts`. There is a partial implementation there as we have
    an interface called `Flights` that describes the attributes of a flight, a list
    of available flights implementing that interface, and even a method to fetch the
    flights, called `getDestinations`. We need to implement logic to check to see
    whether the number of seats we want to book are still available, logic that can
    hold seats while we confirm a reservation, and logic that converts those seats
    held into reserved seats once our payment has been processed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To check availability, we should see whether the number of seats we''re requesting
    exceeds the number of remaining seats while holding any held seats in reserve.
    We can express this as `seatsRequested <= seatsRemaining - seatsHeld`, which is
    a Boolean expression that can be returned by the function. This can be written
    as an arrow function in the `flights.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `holdSeats` function should confirm that the requested seats are available
    and hold them if they are. If there aren''t enough seats remaining, we need to
    throw an error and interrupt the flow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To round out `flights.ts`, we have `reserveSeats`. This function operates similarly
    to `holdSeats`, but it confirms that the seats we wish to reserve have been held,
    and then converts them into reserved seats by increasing the `seatsHeld` property
    and reducing the `seatsRemaining` property by the same amount:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That should do it for `flights.ts`. However, our program still won't run until
    we implement `bookings.ts`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First of all, we''re going to use a factory pattern for creating bookings.
    That means we''ll have a function that returns a function to create bookings.
    We''ll employ currying to create a closure so that we can initialize the `createBooking`
    function with `bookingNumber` in order to give each booking a unique identifier.
    The factory could look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our factory takes `bookingNumber` as an argument to initialize this value and
    then increments the number each time it creates a new booking. We assign some
    default values to the booking to confirm to the `Booking` interface already provided
    in the module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To call the factory and get a `createBooking` function with `bookingNumber`
    already curried into it, we can simply write the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have yet to write functions to start the booking process, handle the payment,
    and complete the booking, thereby reserving the seats on a flight. To begin the
    booking, we need to check availability on the flight we''ve chosen based on the
    number of seats we''re requesting. If that is successful, we can create the booking
    and hold the seats. Otherwise, we can raise an error to alert the user to the
    fact that the booking cannot be completed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In order to check flight availability and hold seats, we need to import these
    functions from `flights.ts`. This has already been done at the top of the `bookings.ts`
    module. The `export` keyword is used throughout these modules to make functions
    available to other modules. Some functions lack the `export` keyword, and so can
    only be invoked from within the module, effectively making them private.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll cheat a little with our `processPayment` function since we aren''t implementing
    a payment system. We will just mark the booking as paid and return it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To complete the booking, we call `reserveSeats` in the `flights` module and
    then update our counts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With all the functions implemented, we can invoke our program again and see
    the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 3.02: Writing Unit Tests'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `describe` block, fetch the destinations for this scenario and then
    cache the first one as `flight`. Now, we can write a simple test to test that
    the correct number of destinations were returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We could test each of the individual destinations and their properties as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Check the availability of several of the destinations. We can introduce all
    sorts of scenarios. Here are a few:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first destination has at least three seats available. The second does not
    have five available, and so on.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Try holding some seats in the next test. We should test both success and failure scenarios:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that in order to ensure that the `catch` block was reached, we're expecting
    three assertions in this test. Without that, the test would still turn green even
    if, for some reason, the last call to `holdSeats` didn't throw an error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finish up the flights test with a unit test to reserve seats:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This test runs through a few scenarios, including another error condition. In
    some cases, it might be appropriate to put error conditions in separate tests.
    A good rule of thumb for this is that each of your tests should be easy to comprehend
    and maintain. If any module or function gets to be too big, just break it up.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, write some tests for bookings using the same principles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s now try running the tests and see how things look:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The tests passed! But we haven''t hit 100% line coverage yet. We can actually
    open up the coverage report, which will be inside the `coverage/lcov-report` directory
    in the root of our project. The coverage tool (Istanbul) that comes bundled with
    Jest will produce an HTML report that we can open in any browser. This will show
    us the exact piece of code that hasn''t been covered:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 3.2: HTML report produced by the tool'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B14508_03_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.2: HTML report produced by the tool'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We''ve missed one error scenario. Let''s add that as a new `describe` block
    to avoid further complicating the tests we''ve already written:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's no particular need to have a new `describe` block, but in this case,
    it might make the code a bit cleaner. Use `describe` and test blocks for readability
    and maintenance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s now run the tests again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We've hit our goal of 100% line coverage!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 4\. Classes and Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 4.01: Creating a User Model Using Classes, Objects, and Interfaces'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this activity, we''ll be building a user authentication system that will
    pass login data to a backend API to register and sign users into our baseball
    scorecard application. Perform the following steps to implement this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit the following GitHub repository and download the activity project containing
    the specs and configuration elements: [https://packt.link/oaWbW](https://packt.link/oaWbW).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `activity-solution` directory contains the completed solution code, and
    the `activity-starter` directory provides the basic start code to work with.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the Visual Studio Code editor and then open the terminal. Change into
    the `activity-starter` directory in the terminal or command prompt and run the
    following command to install the dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will now see the following files in the `activity-starter` directory:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.10: Activity project files'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B14508_04_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.10: Activity project files'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `auth.ts` file inside the `activity-starter` folder and create an
    interface named `ILogin` containing two string attributes, namely, `email` and
    `password`. Write the following code to accomplish this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `Login` class that takes in an object that contains the string attributes
    of `email` and `password`. Also, pass the `ILogin` interface as a parameter to
    the `constructor` function inside the `Login` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an interface named `IAuth` containing two attributes, `user` and `source`.
    Here, the `user` attribute will be of the `Login` type, and the `source` attribute
    will be of the `string` type. Write the following code to implement this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `Auth` class that takes in an object containing the attributes of
    `user` and `source`. Also, create a `constructor` function that will take the
    `IAuth` interface as a parameter. Write the following code to accomplish this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''ll add a `validUser()` method to the `Auth` class, which returns
    a string stating that the user is authenticated if `email` is equal to `admin@example.com`,
    and if `password` is equal to `secret123`. If either of those values doesn''t
    match, the function will return a string stating that the user is not authenticated.
    Write the following code to define this function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create two objects of the `Login` class, namely, `goodUser` and `badUser`.
    For the `goodUser` object, set the `email` value to `admin@example.com` and `password`
    to `secret123`. For the `badUser` object, set the `email` value to `admin@example.com`
    and `password` to `whoops`. Write the following code to accomplish this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create two objects of the `Auth` class, namely, `authAttemptFromGoodUser` and
    `authAttemptFromBadUser`. For the first object, assign the `goodUser` object of
    the `Login` class to the `user` attribute and `Google` to the `source` attribute.
    For the second object, assign the `badUser` object of the `Login` class to the
    `user` attribute and `Google` to the `source` attribute. Once both objects are
    created, call the `validUser()` function of the `Auth` class and print the results
    in the terminal. Write the following code to accomplish this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, in the terminal, type the following commands to generate the JavaScript
    code and run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we run the preceding commands, the following output is displayed in the terminal:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding output, the `validUser()` function returns a `true` value when
    the correct details of `user` and `password` are passed. When incorrect details
    are passed, the function returns a `false` value.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Interfaces and Inheritance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 5.01: Building a User Management Component Using Interfaces'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a user object interface with the following properties: `email : string`,
    `loginAt : number`, and `token : string`. Make `loginAt` and `token` optional:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build a class interface with a global property user and use the interface created
    in *Step 1* to apply user object rules. You need to define a `getUser` method
    that returns the user object. Use the interface to ensure that the return object
    is a user object. Finally, define a `login` method that takes a `user` object
    and `password(type string)` as arguments. Use the user object interface as the
    `user` argument type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a class called `UserClass` that implements the class interface from
    *Step 2*. Your login method should assign the local function''s `user` argument
    to the global user property and return the global user. The `getUser` method should
    return the global user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an instance of your class, as declared in *Step 2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a user object instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Console out our methods to ensure that they are working as expected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The expected output is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This user management class is a central location where you can isolate all your
    application's user-related functions and rules. The rules you have crafted by
    using interfaces to implement your code will ensure that your code is better supported,
    easier to work with, and bug-free.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Activity 5.02: Creating a Prototype Web Application for a Vehicle Showroom
    Using Inheritance'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a parent class that will hold all common methods and properties for
    a base vehicle, define a constructor method that allows you to initialize the
    base properties of this class, and add a method that returns your properties as
    an object. If necessary, add an access modifier to properties and class methods
    you want to control access to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Derive two child classes from your parent class that are types of vehicles,
    for example, `Car` and `Truck`. Override your constructor to add some unique properties
    to your child classes based on the type of vehicles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Derive a class from one of the child classes created in *Step 3*, for example,
    `Suv`, which will have some of the things a truck might have, so it would be logical
    to extend `Truck`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instantiate your child class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Console out our child class instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will obtain the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this activity, you created the bare minimum classes that we require for the
    web application. We have shown how we can build complexity, reuse, and extend
    application code with inheritance in TypeScript.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 6\. Advanced Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 6.01: Intersection Type'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `Motor` type, which will house some common properties you may reuse
    on their own or in combination with other types to describe a vehicle object.
    You can use the following properties as a starting point: `color`, `doors`, `wheels`,
    and `fourWheelDrive`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `Truck` type with properties common to a truck, for example, `doubleCab`
    and `winch`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Intersect the two types to create a `PickUpTruck` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build a `TruckBuilder` function that returns our `PickUpTruck` type and also
    takes `PickUpTruck` as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Console out the function return:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the following output once you run the file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 6.02: Union Type'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build a `LandPack` and an `AirPack` type. Make sure to have a literal to identify
    the package type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Construct a union type, `ComboPack`, which can be `LandPack` or `AirPack`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make a `Shipping` class to process your packages. Make sure to use your literal
    to identify your package types and modify your package with the correct label
    for its type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create two package objects of the `AirPack` and `LandPack` types. Then, instantiate
    your `Shipping` class, process your new objects, and console out the modified
    objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you run the file, you will obtain the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 6.03: Index Type'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build your `PackageStatus` index type using an interface with a `status` property
    of the `string` type and a value of the `Boolean` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `Package` type that includes a property of the `PackageStatus` type
    and some common properties of a typical package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make a class to process your `Package` type, which takes the `Package` type
    on initialization, has a method to return your `packageStatus` property, and a
    method that updates and returns the `packageStatus` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `Package` object called `pack`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instantiate your `PackageProcess` class with your new `pack` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Console out your `pack` status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update your `pack` status and console out your new `pack` status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you run the file, you should obtain the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first line in the preceding output displays the original `pack` status,
    whereas the second line displays the updated `pack` status.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 7\. Decorator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 7.01: Creating Decorators for Call Counting'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a class called `Person` with the public properties `firstName`, `lastName`,
    and `birthday`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a constructor that initializes the properties via the constructor parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a private field called `_title` and expose it via a `getter` and `setter`
    as a property called `title`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method called `getFullName` that will return the full name of person:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a method called `getAge` that will return the current age of the person
    (by subtracting the birthday from the current year):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a global object called `count` and initialize it to the empty object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a constructor wrapping decorator factory called `CountClass` that will
    take a string parameter called `counterName`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the wrapping code, increase the `count` object''s property defined in
    the `counterName` parameter by 1 and then set the prototype chain of the wrapped
    constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method wrapping decorator factory called `CountMethod` that will take
    a string parameter called `counterName`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add checks for whether the descriptor parameter has `value`, `get`, and `set` properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In each respective branch, add code that wraps the method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the wrapping code, increase the `count` object''s property defined in
    the `counterName` parameter by 1:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Decorate the class using the `CountClass` decorator, with a `person` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Decorate `getFullName`, `getAge`, and the `title` property getter with the
    `CountMethod` decorator, with the `person-full-name`, `person-age`, and `person-title`
    parameters, respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write code outside the class that will instantiate three `person` objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write code that will call the `getFullName` and `getAge` methods on the objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write code that will check whether the `title` property is empty and set it
    to something if it is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write code that will log the `count` object to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you run the file, you will obtain the following output on the console:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 7.02: Using Decorators to Apply Cross-Cutting Concerns'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the code for the `BasketBallGame` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a class decorator factory called `Authenticate` that will take a `permission`
    parameter and return a class decorator with constructor wrapping. The class decorator
    should load the `permissions` metadata property (array of `strings`), then check
    if the passed parameter is an element of the array. If the passed parameter is
    not an element of the array, the class decorator should throw an error, and if
    present, it should continue with the class creation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a metadata property of the `BasketballGame` class called `permissions`
    with the value ["`canUpdateScore`"]:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the class decorator factory on the `BasketballGame` class with a parameter
    value of "`canUpdateScore"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method decorator called `MeasureDuration` that will use method wrapping
    to start a timer before the method body is executed and stop it after it''s done.
    You need to calculate the duration and push it to a metadata property called `durations`
    for the method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the `MeasureDuration` method decorator on the `updateScore` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method decorator factory called `Audit` that will take a message parameter
    and return a method decorator. The method decorator should use method wrapping
    to get the arguments and the return value of the method. After the successful
    execution of the original method, it should display the audit log to the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Apply the `Audit` method decorator factory on the `updateScore` method, with
    a parameter value of `Updated score`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a parameter decorator called `OneTwoThree` that will add the decorated
    parameter in the `one-two-three` metadata property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method decorator called `Validate` that will use method wrapping to
    load all values for the `one-two-three` metadata property, and for all marked
    parameters, check their value. If the value is 1, 2, or 3, you should continue
    the execution of the original method. If not, you should stop the execution with
    an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Apply the `OneTwoThree` decorator to the `byPoints` parameter of `updateScore`
    and apply the `Validate` decorator to the `updateScore` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `game` object and update its score a few times:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you run the file, the console should reflect the application of all decorators:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 8\. Dependency Injection in TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 8.01: DI-Based Calculator'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this activity, we will build a basic calculator that utilizes DI to evaluate
    mathematical expressions, as well as logging its output to either the console
    or a file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start things off, define the basic building block of our calculator – an
    operator. This is defined via an interface, which actual implementations can rely
    on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You need to create this file in the `src/interfaces` folder and save it as `operator.interface.ts`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, implement the first operator – the addition operator. This will be a
    class that implements the `Operator` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code needs to be written in a file called `add.operator.ts` in
    `src\operators`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make this operator available for injection by InversifyJS by adding the `@injectable`
    decorator to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, since interfaces don''t exist at runtime, we need to create some runtime
    representation of our abstraction for `AddOperator`. This is usually done using
    symbols, and will be used by InversifyJS at runtime to understand what needs to
    be injected. We''ll define it under a `TYPES` constant, which we''ll be able to
    add other symbols for later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code needs to be written in a new file saved in the `src\types\` folder.
    We have named this file `index.ts`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, build a first draft for our calculator, which will use `AddOperator`,
    via DI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we implement a `Calculator` class that has a single method – `evaluate`,
    which takes in an expression as a string, and returns the result for that expression.
    This code needs to be written in a new file called `index.ts`, saved in the `src/calculator`
    folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The current implementation only supports expressions in the form of X+Y (where
    X and Y can be any numbers). We'll fix that later in the activity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Calculator gets `AddOperator` in DI, and in order to evaluate the expression,
    it first runs through a regular expression to split it by numbers, and then it
    *destructures* the result array. Lastly, it uses the `evaluate` method of `AddOperator`
    to perform the final expression evaluation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This means that the calculator's responsibility is only to destructure the expression
    into its individual parts, and then pass it off to `AddOperator` to handle the
    math evaluation logic. This demonstrates how using DI helps to retain the single
    responsibility principle of SOLID.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Configure the IoC container (in the `src/ioc.config.ts` file) so that `Calculator`
    can receive `AddOperator` when it asks for `TYPES.AddOperator`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, our main file (`src/main.ts`), which will kick things off when we
    run the application, is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is just using our previously defined IoC container and asking it for a
    `Calculator` instance. This is how we ask for instances of symbols explicitly
    in InversifyJS in an imperative API, which we need here, since we want to kick
    things off. Since InversifyJS is the one creating `Calculator`, it also looks
    at its constructor and sees that we've asked for a `TYPES.AddOperator`, which
    it then looks up in the IoC container again to resolve and gives that to the calculator's
    constructor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once you run this file, you should obtain the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that you can either run the code by executing `npm start` in the `activity-starter`
    folder or by executing `npx ts-node main.ts` in the `src` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the `AddOperator` class were also to require dependencies using `@inject`,
    the same process described above would be repeated again to get them, and so on
    recursively until all dependencies have been resolved.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we can implement the other operators, similar to how we did with `AddOperator`
    – just replace the symbol with the relevant one (`-`, `*`, `/`) and the evaluate
    method''s implementation with the relevant math operation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the code for `SubtractOperator` (`subtract.operator.ts`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the code for `MultiplyOperator` (`multiply.operator.ts`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the code for `DivideOperator` (`divide.operator.ts`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, instead of creating an injection token for each `Operator`, injecting each
    one into `Calculator`, and then acting on each, we can create a more generic implementation
    of `Calculator` with the help of the `@multiInject` decorator. This decorator
    allows an injection token to be specified and an array of all implementations
    registered for that token to be obtained. This way, `Calculator` is not even coupled
    to an abstraction for any specific operator and only gets a dynamic list of operators,
    which can have any implementation as long as it conforms to the `Operator` interface.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `types/index.ts` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This replaces our `AddOperator` symbol from earlier with a more generic one.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the calculator app code (`src/calculator/index.ts`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `ioc.config.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, fix the naïve `evaluate` method of `Calculator` to be more generic, too.
    First, instead of relying on a specific token, `tryParseNumberString` and `tryParseOperatorSymbol`
    yourself. However, you can refer to `utils/math.ts` to help you complete this
    step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, reduce this array to get our final result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Simplify the code in the `ioc.config.ts` file even further by leveraging barrels.
    Create `operator/index.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `ioc.config.ts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This means we now import an `Operators` object from the barrel file, which includes
    everything that's exposed there. We take the values of that barrel object and
    bind each one to `TYPES.Operator`, generically.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This means that adding another `Operator` object only requires us to create
    a new class that implements the `Operator` interface and add it to our `operators/index.ts`
    file. The rest of the code should work without any changes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Our `main.ts` file is changed to a slightly more complicated expression:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you run the `main.ts` file (using `npx ts-node main.ts`), you should obtain
    the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Bonus:**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As a bonus, let''s say that we want some reporting on the operations performed
    in the calculator. We can add logging pretty easily without too many changes.
    We''ll create two reporting implementations, one to the console and another to
    a filesystem:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The filesystem implementation will only work in a Node.js environment, since
    it will use some modules only available to it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Define the `Logger` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will serve as the public API that the consumers wanting a logger can use,
    and that our implementations will need to adhere to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the console-based implementation of `Logger` first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is a simple wrapper class around the `console` object that's built into
    browser engines and Node.js. It adheres to our `Logger` interface, and so allows
    consumers to depend on it. For the example, we've also added the type of the message
    to the beginning of the actual output.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create an injection token for it, and register it in our container. The
    updated code for the `types/index.ts` file is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The updated code for the `src/ioc.config.ts` file is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, use the logger in our `Calculator` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that we use the `@optional` decorator to indicate to InversifyJS that
    `Calculator` doesn't *require* a `Logger` to operate, but if it has one it can
    inject, `Calculator` can use it. This is also why it's marked as an optional argument
    in the constructor, and why we need to check whether it exists before calling
    the `log` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output to the console when running it should be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, let's say we want to replace our console-based logger with a file-based
    one, which will persist across runs so that we can track the calculator's evaluation history.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a `FileLogger` class that implements `Logger`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And finally, all we need to do in order to replace our console-based logger
    with a file-based one is a single-line change in our IoC container configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For console-based logging, use this command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For file-based logging, use this command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure to import this logger correctly in the `ioc.config.ts` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The final output to the file is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.8: Final output of the file-based logger in activity-starter/src//tmp/calculator.log,
    after changing the app to use it'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B14508_08_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.8: Final output of the file-based logger in activity-starter/src//tmp/calculator.log,
    after changing the app to use it'
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Generics and Conditional Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 9.01: Creating a DeepPartial<T> Type'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s build this type up, step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create a `PartialPrimitive` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, let''s start by defining a basic `DeepPartial<T>` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we need to handle more complex structures – such as arrays, sets, and
    maps. These require using the `infer` keyword, and in addition to that, require
    some more "manual wiring" for each of these types.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s start with adding handling for the `Array` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This would''ve worked, but due to current limitations in TypeScript at the
    time of writing, this doesn''t compile, since `DeepPartial<T>` circularly references itself:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.17: Current TypeScript version limitation not allowing generic'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: types to reference themselves
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B14508_09_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This works around the problem and compiles fine.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, to support a `Set`, a similar approach to what we did in the previous
    step is needed, so we''ll create an `interface` to serve as a "middle-man" for
    building the entire generic type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly to arrays and sets, maps also need the approach wherein we need create
    an `interface` to serve as a "middle-man" for building the entire generic type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This workaround is no longer needed as of TypeScript 3.7.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Lastly, let''s make our `DeepPartial<T>` type support objects too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This completes the `DeepPartial<T>` implementation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A great use case for the `DeepPartial<T>` type is in a server-side `PATCH`
    method handler, which updates a given resource with new data. In `PATCH` requests,
    all fields are usually optional:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice that we use `DeepPartial<User>` to correctly type the body of the request,
    before passing it in the `update` method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.18: The correctly typed request body'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14508_09_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.18: The correctly typed request body'
  prefs: []
  type: TYPE_NORMAL
- en: As can be seen in the preceding figure, due to the usage of `DeepPartial<T>`,
    the request's body is typed correctly, such that all fields are optional, including
    nested ones.
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Event Loop and Asynchronous Behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 10.01: Movie Browser Using XHR and Callbacks'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: In the `script.ts` file, locate the `search` function and verify that it takes
    a single string parameter and that its body is empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Construct a new `XMLHttpRequest` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Construct a new string for the search result URL using the `getSearchUrl` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `open` and `send` methods of the `xhr` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an event handler for the `xhr` object''s `onload` event. Take the response
    and parse it as a JSON object. Store the result in a variable of the `SearchResultApi`
    interface. This data will have the results of our search in a `results` field.
    If we get no results, this means that our search failed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the search returned no results, call the `clearResults` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the search returned some results, just take the first one and store it in
    a variable, ignoring the other ones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `onload` handler, in the successful search branch, create a new
    `XMLHttpRequest` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Construct a new string for the search result URL using the `getMovieUrl` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `open` and `send` method of the constructed `xhr` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an event handler for the `xhr` object''s `onload` event. Take the response
    and parse it as a JSON object. Store the result in a variable of the `MovieResultApi`
    interface. This response will have the general data for our movie, specifically,
    everything except the people who were involved in the movie. We will need to have
    another call to the API to get the data about the people:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `onload` handler, create a new `XMLHttpRequest` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Construct a new string for the search result URL using the `getPeopleUrl` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `open` and `send` method of the constructed `xhr` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an event handler for the `xhr` object''s `onload` event. Take the response,
    and parse it as a JSON object. Store the result in a variable of the `PeopleResultApi`
    interface. This response will have data about the people who were involved in
    the movie:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we actually have all the data we need, so we can actually create our own
    object, inside the people `onload` handler, which is inside the movie `onload`
    handler, which is inside the search `onload` handler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The people data has `cast` and `crew` properties. We''ll only take the first
    six cast members, so first sort the `cast` property according to the `order` property
    of the cast members. Then slice off the first six cast members into a new array:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Transform the cast data (which is `CastResultApi` objects) into your own `Character`
    objects. We need to map the `character` field of `CastResultApi` to the `name`
    field of `Character`, the `name` field to the `actor` name, and the `profile_path`
    field to the `image` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the `crew` property of the people data, we''ll only need the director
    and the writer. Since there can be multiple directors and writers, we''ll get
    the names of all directors and writers and concatenate them, respectively. For
    the directors, from the `crew` property, filter the people who have a `department`
    of `Directing` and a `job` of `Director`. For those objects, take the `name` property,
    and `join` it together with an `&` in between:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the writers, from the `crew` property, filter the people who have a `department`
    of `Writing` and a `job` of `Writer`. For those objects, take the `name` property,
    and `join` it together with an `&` in between:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new `Movie` object (using object literal syntax). Fill in all the
    properties of the `Movie` object using the data from the movie and people responses
    we''ve prepared so far:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `showResults` function with the movie we constructed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In your parent directory (`Activity01` in this case), install dependencies with
    `npm i`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile the program using `tsc ./script.ts ./interfaces.ts ./display.ts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the compilation ended successfully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `index.html` using the browser of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the following in your browser:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.5: The final web page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14508_10_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.5: The final web page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 10.02: Movie Browser Using fetch and Promises'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: In the `script.ts` file, locate the `search` function and verify that it takes
    a single string parameter and that its body is empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Above the `search` function, create a helper function called `getJsonData`.
    This function will use the `fetch` API to get data from an endpoint and format
    it as JSON. It should take a single string called `url` as a parameter, and it
    should return a promise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the body of the `getJsonData` function, add code that calls the `fetch`
    function with the `url` parameter, and `then` call the `json` method on the returned
    response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `search` method, construct a new string for the search result URL using
    the `getSearchUrl` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `getJsonData` function with `searchUrl` as a parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `then` handler to the promise returned from `getJsonData`. The handler
    takes a single parameter of the type `SearchResultApi`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the body of the handler, check whether we have any results and if we don''t,
    throw an error. If we do have results, return the first item. Note that the handler
    returns an object with `id` and `title` properties, but the `then` method actually
    returns a promise of that data. This means that after the handler, we can chain
    other `then` calls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add another `then` call to the previous handler. This handler will take a `movieResult`
    parameter that contains the `id` and `title` of the movie. Use the `id` property
    to call the `getMovieUrl` and `getPeopleUrl` methods to, respectively, get the
    correct URLs for the movie details and for the cast and crew:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After getting the URLs, call the `getJsonData` function with both of them,
    and assign the resulting values to variables. Note that the `getJsonData(movieUrl)`
    call will return a promise of `MovieResultApi`, and `getJsonData(peopleUrl)` will
    return a promise of `PeopleResultApi`. Assign those result values to variables
    called `dataPromise` and `peoplePromise`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the static `Promise.all` method with `dataPromise` and `peoplePromise`
    as parameters. This will create another promise based on those two values, and
    this promise will be resolved successfully if and only if both (that is, all)
    promises that are contained within resolve successfully. Its return value will
    be a promise of an array of results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return the promise generated by the `Promise.all` call from the handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add another `then` handler to the chain. This handler will take the array returned
    from `Promise.all` as a single parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Deconstruct the parameter into two variables. The first element of the array
    should be the `movieData` variable of type `MovieResultApi`, and the second element
    of the array should be the `peopleData` variable of type `PeopleResultApi`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The people data has `cast` and `crew` properties. We''ll only take the first
    six cast members, so first sort the `cast` property according to the `order` property
    of the cast members. Then slice off the first six cast members into a new array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Transform the cast data (which is `CastResultApi` objects) into our own `Character`
    objects. We need to map the `character` field of `CastResultApi` to the `name`
    field of `Character`, the `name` field to the `actor` name, and the `profile_path`
    field to the `image` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the `crew` property of the people data, we''ll only need the director
    and the writer. Since there can be multiple directors and writers, we''ll get
    the names of all directors and writers and concatenate them, respectively. For
    the directors, from the `crew` property, filter the people who have a `department`
    of `Directing` and a `job` of `Director`. For those objects, take the `name` property,
    and `join` it together with an `&` in between:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the writers, from the `crew` property, filter the people who have a `department`
    of `Writing` and a `job` of `Writer`. For those objects, take the `name` property,
    and `join` it together with an `&` in between:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new `Movie` object (using object literal syntax). Fill in all the
    properties of the `Movie` object using the data from the movie and people responses
    we''ve prepared so far:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return the `Movie` object from the handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note that we did not do any UI interactions in our code. We just received a
    string, did some promise calls, and returned a value. The UI work can now be done
    in UI-oriented code. In this case, that''s in the `click` event handler of the
    `search` button. We should simply add a `then` handler to the `search` call that
    will call the `showResults` method, and a `catch` handler that will call the `clearResults`
    method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output should be the same as the previous activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 10.03: Movie Browser Using fetch and async/await'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `script.ts` file, locate the `search` function and verify that it takes
    a single string parameter and that its body is empty. Note that this function
    is now marked with the `async` keyword, which allows us to use the `await` operator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the body of the `getJsonData` function, add code that calls and `await`s
    the `fetch` function with the `url` parameter, and then call calls the `json`
    method on the returned response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `search` method, construct a new string for the search result URL using
    the `getSearchUrl` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `getJsonData` function with the `searchUrl` as a parameter, and `await`
    the result. Place the result in the `SearchResultApi` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether we have any results and if we don''t, throw an error. If we do
    have results, set the first item of the `result` property in a variable called
    `movieResult`. This object will contain the `id` and `title` properties of the movie:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `id` property to call the `getMovieUrl` and `getPeopleUrl` methods
    to, respectively, get the correct URLs for the movie details and for the cast
    and crew:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After getting the URLs, call the `getJsonData` function with both and assign
    the resulting values to variables. Note that the `getJsonData(movieUrl)` call
    will return a promise of `MovieResultApi`, and `getJsonData(peopleUrl)` will return
    a promise of `PeopleResultApi`. Assign those result values to variables called
    `dataPromise` and `peoplePromise`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the static `Promise.all` method with `dataPromise` and `peoplePromise`
    as parameters. This will create another promise based on those two values, and
    this promise will be resolved successfully if and only if both (that is, all)
    promises that are contained within resolve successfully. Its return value will
    be a promise of an array of results. `await` this promise, and place its result
    in a variable of type array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Deconstruct that array into two variables. The first element of the array should
    be the `movieData` variable of type `MovieResultApi`, and the second element of
    the array should be the `peopleData` variable of type `PeopleResultApi`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The people data has `cast` and `crew` properties. We''ll only take the first
    six cast members, so first sort the `cast` property according to the `order` property
    of the cast members. Then slice off the first six cast members into a new array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Transform the cast data (which is `CastResultApi` objects) into our own `Character`
    objects. We need to map the `character` field of `CastResultApi` to the `name`
    field of `Character`, the `name` field to the `actor` name, and the `profile_path`
    field to the `image` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the `crew` property of the people data, we''ll only need the director
    and the writer. Since there can be multiple directors and writers, we''ll get
    the names of all directors and writers, and concatenate them, respectively. For
    the directors, from the `crew` property, filter the people who have a `department`
    of `Directing` and a `job` of `Director`. For those objects, take the `name` property,
    and `join` it together with an `&` in between:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the writers, from the `crew` property, filter the people who have a `department`
    of `Writing` and a `job` of `Writer`. For those objects, take the `name` property,
    and `join` it together with an `&` in between:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new `Movie` object (using object literal syntax). Fill in all the
    properties of the `Movie` object using the data from the movie and people responses
    we''ve prepared so far:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return the `Movie` object from the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note that we did not do any UI interactions in our code. We just received a
    string, did some promise calls, and returned a value. The UI work can now be done
    in UI-oriented code. In this case, that''s in the `click` event handler of the
    `search` button. We should simply `await` the result of the `search` call and
    then call the `showResults` method with it. We can use a standard `catch` expression
    to handle any errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output should be the same as the previous activity.
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Higher-Order Functions and Callbacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 11.01: Higher-Order Pipe Function'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this activity, we''ll build a higher-order `pipe` function that accepts
    functions as arguments, and composes them from left to right, returning a function
    that accepts the arguments of the first function, and returns the type of the
    last function. When the returned function is run, it iterates over the given functions,
    feeding the return value of each function to the next one:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by defining a type definition for the supported functions to compose,
    a function that accepts one argument of type `T` and returns one of type `R`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As mentioned, we'll only support functions accepting up to one argument, for simplicity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that in order to deal with the special case of 0 arguments, we need to
    check whether `T extends void` and returns a parameterless function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, let''s start by writing a simple implementation of the `pipe` function,
    one that supports only a single function, making it essentially an identity function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we require two overloads for the function, one for the special case
    of no parameters, and another for a single-parameter function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s expand this to support two functions by adding another overload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous implementation no longer works, since we need to support both a
    single function, as well as multiple functions, so we can no longer just return
    `fn`. We'll add a naïve implementation for now and expand it to a more generic
    solution in the next steps.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The naïve implementation for supporting two functions is to simply check whether
    `fn2` is `undefined` – if it is, we only have a single function at hand, and can
    simply return `fn1`. Otherwise, we need to return a function that composes `fn1`
    and `fn2` on the given argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can persist with the preceding approach, but it is tedious, and supporting
    more functions means changing the implementation. Instead, we can make the actual
    implementation accept an array of functions and reduce them, starting with `arg`
    as the initial value, and running the current function, `fn`, on the accumulator
    (the previous result). Let''s do that, while still only supporting up to two functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, we can expand our support for more functions by only needing to change
    the function declaration by adding another overload with the correct type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the case of three functions:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the case of four functions:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the case of five functions:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In each overload, we have the first generic as `T` – this is the type of argument
    that the returned function will have, and `R` – the return type of the returned
    function. Between them we have `A`, `B`, `C,` and so on, as the interim return
    type/argument type of the second…second to last functions. For all the preceding
    steps, make sure to export the functions by adding `export` before the `function`
    keyword.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we can use our `pipe` function to compose any functions we want, while
    staying completely type-safe:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the this code should result in the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 12\. Guide to Promises in TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 12.01: Building a Promise App'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can get started the same way we started building our API from the sample
    from GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The only dependencies we''re using here are `http-server` to power our web
    application and `typescript` to transpile our code. Now that our project is set
    up, let''s quickly create an `index.html` file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And then a `styles.css` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we will create an `app.ts` file and create a very rough client library that
    implements a `fetch` abstraction similar to what we created in *Chapter 3, Functions*.
    Because TypeScript doesn't run natively in a web browser, we will need to use
    `tsc` to transpile our TypeScript code into JavaScript. There are some advanced
    tools such as webpack and Parcel that can help with this, but those are out of
    scope for this chapter so we will keep this simple and just use a single `app.ts`
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We''ll use our `PromiseModel` interface again in our web app and create a `fetchClient`
    function using currying:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Building on the model of curried `fetch` functions, let''s create some resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'These functions handle invoking the resources and updating page elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we''ll do some ugly HTML manipulation to update the UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Altogether, the `app.ts` file looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It's not hard to see why view frameworks are popular; however, this should do
    the trick for putting together a full-stack application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now let''s compile and run our web application. In one Command Prompt window,
    enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will transpile the TypeScript code in watch mode so that it restarts when
    changes are made.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the HTTP server in another window with `npx http-server . -c-1` as we
    did in *Exercise 12.03, Promise.allSettled*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now navigate a web browser to `http://localhost:8080/`. You should see a form
    like the one that follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.10: Initial load'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B14508_12_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 12.10: Initial load'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you don't see "Promise Delete" then it could be that your API from Exercise
    6, Implementing a RESTful API backed by sqlite isn't running. Return to that exercise
    and follow the steps there.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can add and delete promises. Here are some examples:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the promise `Always lint my code` and save it. You should see the following:![Figure
    12.11: One promise made'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B14508_12_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 12.11: One promise made'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the promise `Never block the event loop` and save it:![Figure 12.12: Text
    entered'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B14508_12_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 12.12: Text entered'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the following promise saved:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.13: Text saved'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14508_12_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.13: Text saved'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 12.14* and *Figure 12.15* show some more examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.14: Another promise saved'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14508_12_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.14: Another promise saved'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.15: Another promise saved'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14508_12_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.15: Another promise saved'
  prefs: []
  type: TYPE_NORMAL
- en: Try to add to the application and make use of the API to get a single promise
    or update promises.
  prefs: []
  type: TYPE_NORMAL
- en: 13\. Async/Await in TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 13.01: Refactoring Chained Promises to Use await'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go over what needed to change in order to make this work:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, the `await` keyword can only be used inside an `async` function,
    so we must add that keyword to the function declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we have to replace `then` with `await`. Let's look again at what the `render`
    function does. In our simple case, it just returns a promise that resolves to
    a string, but in the real world, it would render something in a web browser and
    then resolve to a string. Since we want to log out that string, we can actually
    resolve the promise inside a `console.log` statement. Even though `console.log`
    is a synchronous operation, putting `await` inside it will cause the function
    to print out the resolved promise value, exactly as we would hope.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The refactored program is six lines shorter and eliminates nesting:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the file using `npx` `ts-node` `refactor.ts`. You should get the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 14\. TypeScript and React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 14.01: The Blog'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new React application as outlined earlier in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepare a Firestore database with authentication on Firebase as outlined in
    *Exercise 14.04, Getting Started with Firebase*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the Firebase client with `npm i firebase`. Firebase includes typings
    so we won't need to install those separately.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a directory called `services` under `src` and a file called `firebase.ts`
    there. The Firebase integration can be pretty basic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure to use the values from the Firebase dashboard. This will expose Firebase's
    authentication and database capabilities to the rest of your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set up two providers under `src/providers` called `StoriesProvider.ts` and
    `UserProvider.ts`. Now, `UserProvider.ts` will be simpler, so let''s do that one
    first. Like *Exercise 14.03*, *React Context*, we''ll employ `createContext` and
    `useState`, but we''ll also need `useEffect`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`StoriesProvider.ts` is responsible for persisting stories (the blog links)
    and comments on the stories. To make this work, start by creating interfaces for
    comments and stories. Comments should belong to stories. Here''s a sample of how
    that could be done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With those interfaces created, we need to implement some methods in our provider,
    namely methods for adding comments and stories as well as a method that will fetch
    all the stories. To do that, we''ll need to access a collection in our database.
    This can be done with a single line of code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code will create the collection if it doesn't exist. The `storiesDB` object
    we created has methods for fetching, adding, and updating documents from the collection.
    With those methods implemented, we add our stories data and the methods that handle
    the data to our provider value. This means that components that use `StoriesContext`
    will be able to call those methods or access that data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Again, the solution to this somewhat complicated provider is available on GitHub.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Raw document data is a bit difficult to work with, but Firebase has the concept
    of a converter that we can create, which will tell it how to map document fields
    to our TypeScript objects. Create and export a converter implementing the `fromFirestore`
    and `toFirestore` methods. Using those should eliminate some type errors and avoid
    us needing to use `any`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install React Router (`react-dom` and `react-router-dom`). Set the default route
    to a home page. Then, create `Add`, `Signin`, and `Signup` pages. Put the pages
    under `src/pages`. Just put some text on them in a basic function component to
    verify routing is working as expected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build out the `Signup` page first as it's hard to sign in without having signed
    up. Now we'll use Material-UI. Install `@material-ui/core` and `@material-ui/icons`
    and we can start building components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our `Signup` page can be created using `Container`, `TextField`, and `Button`,
    which are all available components in Material-UI. How your page ultimately looks
    is up to you, but you will need two `TextField` components. One of those should
    have both a `type` and `name` of `"email"` and the other should have `"password"`
    for both of those props.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll track the state of both the email and password fields using `useState`
    and an `onChange` event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When the button is clicked, we should call a method on the `auth` object we
    exported from our Firebase service earlier to create a new user using the given
    email address and password.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Upon successfully signing in, let's send the user back to the home page with
    the `useHistory` React Hook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Signin` page will be a lot like the `Signup` page. It also needs to capture
    the user's email address and password and have a button to submit the form. This
    time we should call a method on `auth` to sign the user in via an email and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our `Add` page creates new posts to the blog. We'll capture the title of the
    post and a link. Add additional fields if you like. This will work similarly to
    the prior two pages, but now we will use `StoriesContext` instead of `UserContext`
    to expose the method to add stories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the home page, we can just load up all the stories and display them as a
    Material-UI `List`. It's possible to just output the `story` object and wrap it
    in HTML tags to make it look presentable, but a better solution is to create a
    `Story` component that can better encapsulate the object. Add a `Story` component
    to `src/components` and use that for your story display.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To manage comments, each story should have its own comments. It's a good idea
    to create this as a separate component that each story will contain. The `Comments`
    component can contain a list of each individual comments (another component!)
    as well as controls for grabbing that method to add comments from `StoriesContext`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, everything is working quite well, but we should add some navigation
    elements so users don't have to key in the different routes. We can use the `AppBar`,
    `Toolbar`, `Menu`, `MenuItem`, and `Button` components from Material-UI to create
    some attractive navigation options. Navigation itself can be performed via the
    `useHistory` React Hook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Author_Page1.png)'
  prefs: []
  type: TYPE_IMG
- en: Hey!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're Ben Grynhaus, Jordan Hudgens, Rayon Hunte, Matt Morgan, and Wekoslav Stefanovski,
    the authors of this book. We really hope you enjoyed reading our book and found
    it useful for learning TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: It would really help us (and other potential readers!) if you could leave a
    review on Amazon sharing your thoughts on *The TypeScript Workshop*.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the link https://packt.link/r/1838828494.
  prefs: []
  type: TYPE_NORMAL
- en: OR
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code to leave your review.
  prefs: []
  type: TYPE_NORMAL
- en: '![Barcode](img/qr-code-https___packt.link_r_1838828494.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Your review will help us to understand what's worked well in this book and what
    could be improved upon for future editions, so it really is appreciated.
  prefs: []
  type: TYPE_NORMAL
- en: Best wishes,
  prefs: []
  type: TYPE_NORMAL
- en: Ben Grynhaus, Jordan Hudgens, Rayon Hunte, Matt Morgan, and Wekoslav Stefanovski
  prefs: []
  type: TYPE_NORMAL
- en: '![Packt Logo](img/Packt_Logo.png)'
  prefs: []
  type: TYPE_IMG
