["```js\nfunction createMesh(geom, imageFile) {\n  var texture = THREE.ImageUtils.loadTexture(\"../assets/textures/general/\" + imageFile)\n\n  var mat = new THREE.MeshPhongMaterial();\n  mat.map = texture;\n\n  var mesh = new THREE.Mesh(geom, mat);\n  return mesh;\n}\n```", "```js\ntexture = THREE.ImageUtils.loadTexture('texture.png', {}, function() { renderer.render(scene); });\n```", "```js\n(0,1),(0,0),(1,0),(1,1)\n```", "```js\nvar loader = new THREE.DDSLoader();\nvar texture = loader.load( '../assets/textures/  seafloor.dds' );\n\nvar mat = new THREE.MeshPhongMaterial();\nmat.map = texture;\n```", "```js\nvar loader = new THREE.DDSLoader();\nvar texture = loader.load( '../assets/textures/ seafloor.dds' );\n\nvar mat = new THREE.MeshPhongMaterial();\nmat.map = texture;\n```", "```js\nvar loader = new THREE.TGALoader();\nvar texture = loader.load( '../assets/textures/crate_color8.tga' );\n\nvar mat = new THREE.MeshPhongMaterial();\nmat.map = texture;\n```", "```js\nfunction createMesh(geom, imageFile, bump) {\n  var texture = THREE.ImageUtils.loadTexture(\"../assets/textures/general/\" + imageFile)\n  var mat = new THREE.MeshPhongMaterial();\n  mat.map = texture;\n\n  var bump = THREE.ImageUtils.loadTexture(\n    \"../assets/textures/general/\" + bump)\n  mat.bumpMap = bump;\n  mat.bumpScale = 0.2;\n\n  var mesh = new THREE.Mesh(geom, mat);\n  return mesh;\n}\n```", "```js\nfunction createMesh(geom, imageFile, normal) {\n  var t = THREE.ImageUtils.loadTexture(\"../assets/textures/general/\" + imageFile);\n  var m = THREE.ImageUtils.loadTexture(\"../assets/textures/general/\" + normal);\n\n  var mat2 = new THREE.MeshPhongMaterial();\n  mat2.map = t;\n  mat2.normalMap = m;\n\n  var mesh = new THREE.Mesh(geom, mat2);\n  return mesh;\n}\n```", "```js\nvar lm = THREE.ImageUtils.loadTexture('../assets/textures/lightmap/lm-1.png');\nvar wood = THREE.ImageUtils.loadTexture('../assets/textures/general/floor-wood.jpg');\nvar groundMaterial = new THREE.MeshBasicMaterial({lightMap: lm, map: wood});\ngroundGeom.faceVertexUvs[1] = groundGeom.faceVertexUvs[0];\n```", "```js\nfunction createCubeMap() {\n\n  var path = \"../assets/textures/cubemap/parliament/\";\n  var format = '.jpg';\n  var urls = [\n    path + 'posx' + format, path + 'negx' + format,\n    path + 'posy' + format, path + 'negy' + format,\n    path + 'posz' + format, path + 'negz' + format\n  ];\n\n  var textureCube = THREE.ImageUtils.loadTextureCube( urls );\n  return textureCube;\n}\n```", "```js\nvar urls = [\n  'right.png',\n  'left.png',\n  'top.png',\n  'bottom.png',\n  'front.png',\n  'back.png'\n];\n```", "```js\nvar textureCube = THREE.ImageUtils.loadTexture(\"360-degrees.png\", new THREE.UVMapping());\n```", "```js\nvar textureCube = createCubeMap();\nvar shader = THREE.ShaderLib[ \"cube\" ];\nshader.uniforms[ \"tCube\" ].value = textureCube;\nvar material = new THREE.ShaderMaterial( {\n  fragmentShader: shader.fragmentShader,\n  vertexShader: shader.vertexShader,\n  uniforms: shader.uniforms,\n  depthWrite: false,\n  side: THREE.BackSide\n});\ncubeMesh = new THREE.Mesh(new THREE.BoxGeometry(100, 100, 100), material);\n```", "```js\nvar sphere1 = createMesh(new THREE.SphereGeometry(10, 15, 15), \"plaster.jpg\");\nsphere1.material.envMap = textureCube;\nsphere1.rotation.y = -0.5;\nsphere1.position.x = 12;\nsphere1.position.y = 5;\nscene.add(sphere1);\n\nvar cube = createMesh(new THREE.CubeGeometry(10, 15, 15), \"plaster.jpg\",\"plaster-normal.jpg\");\nsphere2.material.envMap = textureCube;\nsphere2.rotation.y = 0.5;\nsphere2.position.x = -12;\nsphere2.position.y = 5;\nscene.add(cube);\n```", "```js\nvar textureCube = THREE.ImageUtils.loadTextureCube( urls, new THREE.CubeRefractionMapping());\n```", "```js\nVar cubeCamera = new THREE.CubeCamera(0.1, 20000, 256);\nscene.add(cubeCamera);\n```", "```js\nvar dynamicEnvMaterial = new THREE.MeshBasicMaterial({envMap: cubeCamera.renderTarget });\nvar envMaterial = new THREE.MeshBasicMaterial({envMap: textureCube });\n```", "```js\nsphere = new THREE.Mesh(sphereGeometry, dynamicEnvMaterial);\nsphere.name = 'sphere';\nscene.add(sphere);\n\nvar cylinder = new THREE.Mesh(cylinderGeometry, envMaterial);\ncylinder.name = 'cylinder';\nscene.add(cylinder);\ncylinder.position.set(10, 0, 0);\n\nvar cube = new THREE.Mesh(boxGeometry, envMaterial);\ncube.name = 'cube';\nscene.add(cube);\ncube.position.set(-10, 0, 0);\n```", "```js\nfunction render() {\n  sphere.visible = false;\n  cubeCamera.updateCubeMap( renderer, scene );\n  sphere.visible = true;\n  renderer.render(scene, camera);\n  ...\n  requestAnimationFrame(render);\n}\n```", "```js\nvar specularTexture=THREE.ImageUtils.loadTexture(\"../assets/textures/planets/EarthSpec.png\");\nvar normalTexture=THREE.ImageUtils.loadTexture(\"../assets/textures/planets/EarthNormal.png\");\n\nvar planetMaterial = new THREE.MeshPhongMaterial();\nplanetMaterial.specularMap = specularTexture;\nplanetMaterial.specular = new THREE.Color( 0xff0000 );\nplanetMaterial.shininess = 1;\n\nplanetMaterial.normalMap = normalTexture;\n```", "```js\ngeom.faceVertexUvs[0][0][0].x = 0.5;\ngeom.faceVertexUvs[0][0][0].y = 0.7;\ngeom.faceVertexUvs[0][0][1].x = 0.4;\ngeom.faceVertexUvs[0][0][1].y = 0.1;\ngeom.faceVertexUvs[0][0][2].x = 0.4;\ngeom.faceVertexUvs[0][0][2].y = 0.5;\n```", "```js\ncube.material.map.wrapS = THREE.RepeatWrapping;\ncube.material.map.wrapT = THREE.RepeatWrapping;\n```", "```js\ncube.material.map.repeat.set(repeatX, repeatY);\n```", "```js\ncube.material.map.needsUpdate = true;\n```", "```js\n<div class=\"fs-container\">\n  <div id=\"canvas-output\" style=\"float:left\">\n  </div>\n</div>\n...\nvar canvas = document.createElement(\"canvas\");\n$('#canvas-output')[0].appendChild(canvas);\n$('#canvas-output').literallycanvas(\n  {imageURLPrefix: '../libs/literally/img'});\n```", "```js\nfunction createMesh(geom) {\n\n  var canvasMap = new THREE.Texture(canvas);\n  var mat = new THREE.MeshPhongMaterial();\n  mat.map = canvasMap;\n  var mesh = new THREE.Mesh(geom,mat);\n\n  return mesh;\n}\n```", "```js\nfunction render() {\n  stats.update();\n\n  cube.rotation.y += 0.01;\n  cube.rotation.x += 0.01;\n\n  cube.material.map.needsUpdate = true;\n  requestAnimationFrame(render);\n  webGLRenderer.render(scene, camera);\n}\n```", "```js\nvar ctx = canvas.getContext(\"2d\");\nfunction fillWithPerlin(perlin, ctx) {\n\n  for (var x = 0; x < 512; x++) {\n    for (var y = 0; y < 512; y++) {\n      var base = new THREE.Color(0xffffff);\n      var value = perlin.noise(x / 10, y / 10, 0);\n      base.multiplyScalar(value);\n      ctx.fillStyle = \"#\" + base.getHexString();\n      ctx.fillRect(x, y, 1, 1);\n    }\n  }\n}\n```", "```js\nvar bumpMap = new THREE.Texture(canvas);\n\nvar mat = new THREE.MeshPhongMaterial();\nmat.color = new THREE.Color(0x77ff77);\nmat.bumpMap = bumpMap;\nbumpMap.needsUpdate = true;\n\nvar mesh = new THREE.Mesh(geom, mat);\nreturn mesh;\n```", "```js\n<video  id=\"video\"\n  style=\"display: none;\n  position: absolute; left: 15px; top: 75px;\"\n  src=\"img/Big_Buck_Bunny_small.ogv\"\n  controls=\"true\" autoplay=\"true\">\n</video>\n```", "```js\nvar video  = document.getElementById('video');\ntexture = new THREE.Texture(video);\ntexture.minFilter = THREE.LinearFilter;\ntexture.magFilter = THREE.LinearFilter;\ntexture.generateMipmaps = false;\n```", "```js\nvar materialArray = [];\nmaterialArray.push(new THREE.MeshBasicMaterial({color: 0x0051ba}));\nmaterialArray.push(new THREE.MeshBasicMaterial({color: 0x0051ba}));\nmaterialArray.push(new THREE.MeshBasicMaterial({color: 0x0051ba}));\nmaterialArray.push(new THREE.MeshBasicMaterial({color: 0x0051ba}));\nmaterialArray.push(new THREE.MeshBasicMaterial({map: texture }));\nmaterialArray.push(new THREE.MeshBasicMaterial({color: 0xff51ba}));\n\nvar faceMaterial = new THREE.MeshFaceMaterial(materialArray);\nvar mesh = new THREE.Mesh(geom,faceMaterial);\n```", "```js\nif ( video.readyState === video.HAVE_ENOUGH_DATA ) {\n  if (texture) texture.needsUpdate = true;\n}\n```", "```js\nvar video = document.getElementById('video');\ntexture = new THREE.VideoTexture(video);\n```"]