- en: Building a Custom Application Using ServiceNow Scripting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ServiceNow脚本构建自定义应用程序
- en: In this final chapter, we will be looking at building a custom application using
    ServiceNow scripting. Custom applications are a great way to create functionality
    not included with the ServiceNow product. We will be looking at creating a custom
    application and using scripting as part of our application. We will also learn
    about end-to-end creation of a custom application before exploring how to test
    and deploy our new custom application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一章中，我们将探讨使用ServiceNow脚本构建自定义应用程序。自定义应用程序是创建ServiceNow产品中未包含的功能的绝佳方式。我们将探讨创建自定义应用程序，并将脚本作为应用程序的一部分使用。在探索如何测试和部署我们的新自定义应用程序之前，我们还将学习自定义应用程序的端到端创建。
- en: 'In this chapter, we will be looking at the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: Creating a custom application with ServiceNow scripting
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ServiceNow脚本创建自定义应用程序
- en: End-to-end development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端到端开发
- en: Testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: Deployment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署
- en: Creating a custom application with ServiceNow scripting
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ServiceNow脚本创建自定义应用程序
- en: The ability to build a custom application in ServiceNow makes ServiceNow such
    a versatile product. As ServiceNow was first released to the market as a service
    desk solution, developers have explored the potential of the platform, and since
    then it has been used in various areas of the business.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在ServiceNow中构建自定义应用程序的能力使ServiceNow成为一个如此通用的产品。由于ServiceNow最初作为服务台解决方案推向市场，开发者们探索了该平台的可能性，从那时起，它已被用于商业的各个领域。
- en: However, there are still many ways of using ServiceNow that are not included
    with the baseline system, and for this, we can create a custom application.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仍有许多使用ServiceNow的方法不包括在基线系统中，为此，我们可以创建一个自定义应用程序。
- en: Before creating a custom application, it is worth considering whether a custom
    application will provide the best solution. Sometimes, we can use an existing
    ServiceNow application to perform the functionality we want to achieve, using
    it directly or slightly modifying it for our needs. If this is the case, then
    it is worth considering not creating a custom application and using the platform
    instead.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建自定义应用程序之前，值得考虑的是否自定义应用程序将提供最佳解决方案。有时，我们可以使用现有的ServiceNow应用程序来执行我们想要实现的功能，直接使用它或对其进行轻微修改以满足我们的需求。如果是这种情况，那么考虑不创建自定义应用程序并使用该平台可能是有价值的。
- en: If the functionality you need would take a large modification to an existing
    application or simply does not exist at that point, it is advisable to create
    a custom application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要的功能需要对现有应用程序进行大量修改，或者在那个阶段根本不存在，那么创建一个自定义应用程序是明智的选择。
- en: Creating the application
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序
- en: Once we create a new application, we can then start adding application files
    to that application. The application files we create become part of the application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了一个新的应用程序，我们就可以开始向该应用程序添加应用程序文件。我们创建的应用程序文件成为应用程序的一部分。
- en: 'To create a new application, we can navigate to System Applications | Applications,
    and we will be shown the current applications that have been created on this instance.
    We then need to click on the New button on the far right, as shown in *Figure
    12.1*:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新应用程序，我们可以导航到系统应用程序 | 应用程序，我们将看到在此实例上创建的当前应用程序。然后我们需要点击如图*12.1*所示的右侧的“新建”按钮：
- en: '![](img/c2c637c1-b0b6-4963-a633-f72c2565d33d.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c2c637c1-b0b6-4963-a633-f72c2565d33d.png)'
- en: 'Figure 12.1: Instance applications page'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1：实例应用程序页面
- en: Once the New button has been selected, you are given a series of choices about
    where you would like to start from when creating your application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了“新建”按钮，您将获得一系列关于创建应用程序时希望从哪里开始的选择。
- en: 'We can see the options given in *Figure 12.2*:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在*图12.2*中看到提供的选项：
- en: '![](img/fee4af3f-2811-4a2f-8a44-d2eec8b28571.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fee4af3f-2811-4a2f-8a44-d2eec8b28571.png)'
- en: 'Figure 12.2: Application creation options'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2：应用程序创建选项
- en: From this set of choices, we can decide from what starting point we want to
    create our application. The top two choices are the most commonly used generally.
    Starting from scratch is exactly that, only the application is created and the
    new application scope. No tables or modules or access controls are made for you.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一系列选择中，我们可以决定从哪个起点创建我们的应用程序。前两个选择通常是最常用的。从头开始正是如此，只创建应用程序和新的应用程序范围。不会为您创建任何表格、模块或访问控制。
- en: Creating a custom application guides you through creating a table, modules,
    and access controls. After that, it is much the same as starting from scratch.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: The third option, to start from a service, is rarely used in my experience,
    but allows a developer to enhance a service created from the service creator and
    potentially overwrite it when complete.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The final option here is not available as part of the baseline system, but can
    be used if service management is activated. This option again is not as well used,
    although it allows creation from an existing process.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'When selecting start from a template, we are presented with a further page,
    which we can see in *Figure 12.3*:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0757dc50-cb82-4394-b7a6-81763d62fa91.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: Application creation template option choices'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: From here, we can either create from a predefined template, or configure settings
    further to create the application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Now the custom application has been created, we can start to add application
    files and build up the application.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Building the application
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the application has been created, we can start to build up the application
    with application files. These are the files that, when put together, make up the
    application. When the application is created, an application scope is also created
    for the application. On the creation of the application, you will also be put
    into the new application scope, so it is important to be aware of this.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: You will also see that your update set has changed once you create a new update
    set to a new default update set for the application scope you are now in. As you
    are in the application scope of your new application, any customizations made
    will be added to your new application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep track of the current scope and update set, it can be useful to show
    the application and update set picker when developing. These two options can be
    set in the Developer tab of the system settings, which can be seen in the following
    figure:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51eb18c5-daa8-4024-8907-8f4e956b8a77.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: Developer system settings showing the application and update set
    picker'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: By setting the two picker options in *Figure 12.4*, we are then shown the current
    application scope and update set at the top of the screen in the header bar. These
    are shown in a drop-down field, so both can easily be changed if required.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see here both of the picker drop-down fields that are displayed in the
    header bar:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff3299b7-ad08-4a58-887b-7bda31f2b284.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.5: Application and update set picker'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: These picker fields are especially helpful if you are working between update
    sets or in multiple scopes for your current development.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: When working in multiple tabs, it can be a wise idea to refresh your browser
    page to ensure that the pickers are up-to-date on the tab you are working on.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have created and started to build our application, we can move on
    to the development of our application.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Example application
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will also build an example custom application to reinforce
    the theory that we learn. For our example, we will build an application to hold
    data for users' access.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create the application. From the options we saw in *Figure
    12.2*, we are going to select Create custom application. Once we have selected
    this, we are given the form shown in *Figure 12.6*:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe1a7467-9607-4dd5-86b0-ec4a6db9c906.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.6: Create custom application form'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: In this form, we need to give our application a name, which will then fill in
    the rest of the fields. We can change the values in the fields, but in the Scope
    field, the prefix will have to be the prefix for your company or developer instance.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: For our example, we also want to create a table, so we'll need to check the
    Create Table option too. This gives us some extra table fields to fill in. These
    will be populated for you, but you can change them to fit your needs.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can see the filled-in form for our user access application. Custom
    application prefixes start with `x_` and are followed by the prefix specific to
    you or your company. This scope is mandatory, and specific to you. The blank spaces
    in *Figure 12.7* are where this prefix would be shown:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee9fb49f-4b49-4e51-b2e6-d4e2a6a23b41.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.7: Completed custom application form'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Now we have completed the form, we click on the Create button at the bottom
    of the form.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'We are given a confirmation popup before the application and new table are
    created, which we can see here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf6ef86b-15fd-4021-b336-d1cd617ffcf1.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.8: Custom application creation confirmation popup'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: For our example, we will click on OK and create the application. Once the application
    is created, we are given a button to edit the application that opens up the development
    studio, which we will explore more in the next section.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully created our application and will pick up our user access
    application example in the next section.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: End-to-end development
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once an application has been created on an instance, we can move on to developing
    the application. When we are in the application scope of our application, all
    customizations are added to the application. We can either make changes to the
    instance in the same way we usually would do development outside of an application,
    for example, creating and amending scripts, or we can use the studio ServiceNow
    provides for us.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Studio
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The studio was created by ServiceNow for use when creating custom applications.
    Some developers prefer the studio, as it shows the application in one place, whereas
    others prefer to develop as they would in the global scope.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: To access the studio, navigate to System Applications | Studio. This will open
    a new tab in your browser and give us the opportunity to load one of the applications
    that have been created on the current instance.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the Load Application form in *Figure 12.9*:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce12bfc7-5279-4eea-a46e-4a0bfd73d752.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.9: Studio load application form'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'In the list, you will see the applications available to load on the instance
    you are working in. Once we have loaded the application we want to work on in
    the studio, we can see the current application files on the left-hand side. We
    can see the screen show in *Figure 12.10*:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7afb710-65ec-4df2-86ef-3514bdd43f03.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: Figure 12.10:  Sample studio for a test application
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: As an example, a business rule and client script have been created for this
    test application.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: When we have a new application, we need to create a new application file to
    start. To create a new application file, we can click on the Create Application
    File button we can see in the preceding figure.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'We are then given the Create Application File screen, shown in *Figure 12.11*,
    where we can select what type of application file we want to create in our application:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e75ac6f-de31-4301-982c-7d37a966b87b.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: Figure 12.11:  Application file creation screen
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: There are many application file types to choose from, with some of the more
    common being client scripts, business rules, access controls, and tables. Once
    the application file has been selected, click Create to start editing the application
    file. Once the application file is finished and saved, it will appear in the left-hand
    pane of the studio.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the main benefits of using the studio is that you can keep track of
    all the application files in the left-hand pane very easily and amend them by
    clicking on them. Another big benefit is the ability to use tabs to quickly flick
    between different application files. We can see this in *Figure 12.12*:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37f3b60f-738a-4b2e-9469-9ba7c17d111a.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.12: Studio tabbed development example'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the preceding figure, we can have many tabs open for different
    application files. This can be for new or existing application files, and is certainly
    one of the features I like about using Studio.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Studio is very good for collating all of the aspects of an application together,
    but whether to use it or not is the developer's preference. Some developers swear
    by it, others will not use it at all, and some developers are somewhere in between.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Application development
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether using studio or not, once an application is created, we need to do the
    development and make sure that all of the application files we need for our application
    are created. Each application is different, and the ability to create unique applications
    in ServiceNow is almost limitless.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: When developing your application, remember the skills and techniques we have
    covered in the earlier chapters of this book to get the best out of it.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: When creating a new application, I would recommend considering the table structure
    of the application first and associated relationships. Once the table structure
    is in place, the other application files will be easier to plan and place into
    the application.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'ServiceNow also allows us to add records considered as data to our custom applications.
    This allows us to take across records where the Update sync attribute we discovered
    in the previous chapter is not set to true for the table. To do this, we can right-click
    on the header bar for a list view, and we are given the option to Create Application
    Files, as shown in *Figure 12.13*:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8fe5b2d5-0d59-4bf2-9538-f390277fea98.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.13: Creating application files from a list view'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 12.13*, we are looking at an incident list with only one record
    in the list due to the filter. On selecting the Create Application Files option,
    we will then be given a popup to select how the application files should be added.
    This popup can be seen in *Figure 12.14*:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea5bcf12-6c51-4316-9f5e-75d8c2d78b80.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.14: Creating application files popup'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'This popup in *Figure 12.14* has a field of Load When, and this is the most
    important field on this form. From here, we have the following three options that
    we can choose:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: New Install and Upgrades
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New Install
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New Install with Demo Data
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first two options are quite straightforward: the data is either loaded
    only with a new installation of the application and never again, or with a new
    installation and for future upgrades of the application. The third option is slightly
    different, but the concept of demo data will be familiar to most system admins.
    With this option, the records will be available to add when the application is
    deployed, although it is not mandatory. When we discuss deployment later on in
    the chapter, the options around including demo data will become clear.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a selection has been made for the Load When field, we can click on OK,
    and the records will be added to our application. We can see what that looks like
    for our test application and our previous example in *Figure 12.15*:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94ef2a4c-1892-42ce-89f6-4cefa3643dac.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.15: Sample application files shown included in an application related
    list'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 12.15*, we can see that the incident record that was showing in our
    list view has been moved into the application files of our custom application.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: After all of the application files needed for your application have been added,
    we can then move to testing the application.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Example application
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have had a look at how to develop our applications, we can develop our
    example application too. Our example application user access has been created,
    and we can either develop in the usual way or use the studio to create new application
    files from.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: From simply creating our application, we will already see some application files
    as part of our application, which will show in the studio or in the application
    definition.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now see what our application looks like in the studio in the following
    figure:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a82bc43-348f-43d1-b5cd-e806969afb15.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.16: Studio for user access application'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: We can already see that, by creating our application, we have a table, role,
    some access controls, an application menu, and modules. These have all been created
    in our application scope.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经可以看到，通过创建我们的应用程序，我们已经有一个表、角色、一些访问控制、应用程序菜单和模块。所有这些都在我们的应用程序范围内创建。
- en: Now we need to create another table to act in a similar way to a many-to-many
    relationship table between user and access. We could create an `m2m` table, but
    we will just create a normal table this time around as we do not want an Edit
    button in the related list between the tables. We can create this table by navigating
    to System Definition | Tables & Columns and clicking on Create Table in the usual
    way, and it will be added to the application too.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建另一个表，以在用户和访问之间起到类似多对多关系表的作用。我们可以创建一个`m2m`表，但这次我们将创建一个普通表，因为我们不希望在表之间有编辑按钮的相关列表。我们可以通过导航到系统定义
    | 表与列并按常规方式点击创建表来创建此表，并且它也将添加到应用程序中。
- en: We have two tables we need now, so we will add some reference fields to the
    User Access table for User and Access. The access field links to our other new
    application table.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要两个表，因此我们将向用户访问表添加一些参考字段，用于用户和访问。访问字段链接到我们的另一个新应用程序表。
- en: 'We can see what the form looks like, now with some dummy data in it, in *Figure
    12.17*:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到表单的样子，其中包含一些示例数据，如下所示：
- en: '![](img/97a92eea-d50a-49b7-b4fb-5fcc7729649b.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97a92eea-d50a-49b7-b4fb-5fcc7729649b.png)'
- en: 'Figure 12.17: User access custom table form view'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.17：用户访问自定义表视图
- en: We also need to add a Name field to our access table, so we can identify each
    access item, and we'll add a related list to see all users with that access too.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在我们的访问表中添加一个名称字段，以便我们可以识别每个访问项，并且我们将添加一个相关列表来查看具有该访问权限的所有用户。
- en: 'We can see what this form looks like now, again with some dummy data, as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到这个表单的样子，再次使用一些示例数据，如下所示：
- en: '![](img/78f4765c-b3db-4d8c-9d85-01eada965ecc.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78f4765c-b3db-4d8c-9d85-01eada965ecc.png)'
- en: 'Figure 12.18: Access custom table form view'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.18：访问自定义表视图
- en: The table structure for our User Access application is now complete. There are
    now three tables that will be used in the application, which are the user table,
    supplied with baseline ServiceNow, the access table, and the user access table.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用户访问应用程序的表结构现在已完成。现在应用程序中将使用三个表，分别是用户表、提供基线ServiceNow的用户表、访问表和用户访问表。
- en: We have created a way of keeping track of the access each user has in ServiceNow.
    It is generally a good practice to do the table structure of a custom application
    first, as any scripts or relationships are then easier to plan for the application.
    Having to add tables later in the application can cause problems or a significant
    amount of rework in the case of some applications.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一种跟踪ServiceNow中每个用户访问权限的方法。通常，首先进行自定义应用程序的表结构是一个好的做法，因为任何脚本或关系都更容易为应用程序规划。在应用程序中后期添加表可能会引起问题或导致某些应用程序的大量返工。
- en: We also want to make sure that once a user has been given access in our application,
    we stop that user being selected for the same access, which means creating a scripted
    advanced reference qualifier.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还想要确保一旦用户在我们的应用程序中获得了访问权限，我们就停止该用户被选中进行相同的访问，这意味着需要创建一个脚本化的高级参考限定符。
- en: 'First, we will add some script in an advanced reference qualifier to call a
    script include for us. This reference qualifier will be for the User field on
    the User Access table:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在高级参考限定符中添加一些脚本，以调用脚本包含。这个参考限定符将用于用户访问表上的用户字段：
- en: '[PRE0]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now we have the reference qualifier calling a script include, and we need to
    create the script include and input code to return only the users without the
    currently selected access.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了调用脚本包含的引用限定符，我们需要创建脚本包含和输入代码，以返回没有当前选中访问权限的用户。
- en: 'Our script include code will look like this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们脚本包含的代码将看起来像这样：
- en: '[PRE1]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code will check all of the current user access records with the currently
    selected access from the form and ensure that the users returned to be selected
    are users that do not currently have this access.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将检查所有当前用户访问记录，确保返回给选定的用户是目前没有此访问权限的用户。
- en: This is done by returning the string `sys_idNOT IN` and the contents of the
    array that has been populated with all of the users that currently have access
    to the current access on the form. This can be a very helpful technique to filter
    out all records we do not want, to only leave the records we do that to be displayed
    to the user.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the script include created in the following figure:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a6f9f12-d545-45fe-8bc5-d4acb9749c55.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.19: Script include providing advanced reference qualifier functionality'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our script complete and our tables in place, we are happy to
    complete our application development-wise. There are certainly further additions
    we could make to this application to enhance it, like adding extra validation,
    scripts, or fields to the tables, but we will finish the application at this point
    for our example.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A big part of any custom application is testing it to make sure that it functions
    correctly. Applications with errors or poor functionality can quickly leave customers
    disillusioned with the application, and often the application will then not be
    used. Therefore, it is extremely important that any application is thoroughly
    tested before it is deployed.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: When testing a new custom application, it is important to also test around the
    application as well as the application itself. This means do not just test that
    the application works, also test that any applications the new application is
    linked or related to also still functions in the way it did before. This is particularly
    important when dealing with access controls and security, and always ensure that
    no access is granted that should not be and that existing users of an application
    are not locked out of data they had access to before.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: If we do come across issues when performing our testing, it is worth remembering
    the techniques that we learned in the [Chapter 9](5526cad2-945c-4410-9980-a794a3d362a6.xhtml),
    *Debugging the Script*, with regard to debugging applications. We can use the
    session debugging tools, including debugging scopes, to fix any problems we encounter.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also the option of the following scoped application logging levels
    to fix issues:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Error
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warn
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Info
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debug
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These logs can be important for finding out where problems lie, and remember
    that `gs.log` will not work in a custom application scope.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: It is a good practice to check the system logs when testing your custom application,
    to ensure that no logging messages have been left in that should not have been.
    We need to ensure that these logging messages do not get deployed into a production
    instance if they are not required.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Example application
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the development is complete, for our example application, we will look
    at testing it. The main aspect of our application we need to look at is the script
    we created.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: However, it is always important to check every aspect of your application, especially
    against the requirements of the stakeholders that the application will be for.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Some dummy data has been added so that we can check our script is working correctly
    in the user access and access tables. The User table is populated with users in
    the ServiceNow baseline system that you can use when testing applications.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the entries in the User Access table in the following figure:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9f900fc-27fd-4f3b-8de3-ac301c7309ce.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.20: User access custom table list view'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: As can be seen in *Figure 12.20*, there are two users that have access to Server
    A100\. This means that if we try to select these users when Server A100 is selected,
    we should not be able to pick those users.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check if this is possible or not:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af6803f8-559e-4ec2-bc0e-c106854cb228.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.21: User access custom table form testing the User field reference
    qualifier'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: As we can see in the previous figure, after searching for `Fred`, we do not
    see `Fred Luddy`, which is a good sign and it tells us that our scripted reference
    qualifier is working correctly.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: As part of testing, we will also remove the access to Server A100 from `Fred
    Luddy` and check that he is then available for selection when creating a user
    access records for Service A100\. With the code we have created, this test also
    passes and meets the requirements.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: There are further tests you can perform, and the level of testing a developer
    undertakes is often dependent on a number of variables. This can include the impact
    of the new application on current applications, and whether testing is performed
    by a separate testing team or not. We will complete testing for our example user
    access application here.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: When testing your applications, choose a level of testing suitable for your
    needs, and remember to test edge cases if you think that they may bring about
    testing failures.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Deployment
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once all of the testing has been completed, we can then move on to deploying
    our custom application to other instances. We can deploy our custom application
    once we have completed it in the following three main ways:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Publish the application to an update set
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish to the application repository
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish to the ServiceNow store
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's have a look at how to deploy using each method.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Publish to an update set
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first method we will look at is how to publish the custom application to
    an update set. This is a very helpful method as this allows the update set to
    be sent to other instances as a retrieved update set, or even exported and imported
    on any ServiceNow instance. This makes this method of deployment arguably the
    most versatile.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: To publish a custom application to an update set, we first need to navigate
    to the application record. To do this, we can navigate to System Applications
    | Applications and then click on the name of the application. Make sure not to
    click on edit as this will open the studio instead.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the related links menu, click on the option to Publish to Update Set...
    and then the following screen will be shown:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在相关链接菜单下，点击“发布到更新集...”选项，然后以下屏幕将显示：
- en: '![](img/98ec1103-5413-494e-843d-1186a5978745.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/98ec1103-5413-494e-843d-1186a5978745.png)'
- en: 'Figure 12.22: Publish to update set popup'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/12.22_publish_to_update_set_popup.png)'
- en: In our example, we see the Test Application name, but your custom application
    name will appear here. Enter a Version, and it is recommended to add a Description,
    so users will know the function of your application. We saw how we can add data
    files to our application as demo data earlier in the chapter. The final checkbox
    allows that demo data to be included in or excluded from the update set we create.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们看到的是测试应用程序名称，但您的自定义应用程序名称将在这里显示。输入版本号，并建议添加描述，这样用户就会知道应用程序的功能。我们在本章前面看到，我们可以如何将数据文件添加到我们的应用程序中作为演示数据。最后的复选框允许将演示数据包含在或排除在我们创建的更新集中。
- en: 'Once the pop-up form is complete, a progress bar will appear:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦弹出表单完成，将出现一个进度条：
- en: '![](img/09ec2610-5855-46b0-ac52-ad79009f43f5.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/09ec2610-5855-46b0-ac52-ad79009f43f5.png)'
- en: 'Figure 12.23: Publishing application progress bar'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.23：发布应用程序进度条
- en: Click on the Done button once the publishing completes, and you will be redirected
    to the update set that has been created. The update set is created at a complete
    state, so it is ready to be retrieved from other instances immediately. Remember
    that it is also possible to export the update set to XML.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 发布完成后，点击“完成”按钮，您将被重定向到已创建的更新集。更新集处于完整状态，因此可以立即从其他实例检索。请记住，也可以将更新集导出为XML格式。
- en: Now, the application is contained in a completed update set, it can be easily
    moved between instances.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，应用程序包含在一个完成的更新集中，它可以很容易地在实例之间移动。
- en: Publish to the application repository
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布到应用程序仓库
- en: Next, we look at how to publish our custom application to the application repository.
    The application repository is company-wide, and it allows easy movement of new
    custom applications and upgrades between instances in the same company.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们看看如何将我们的自定义应用程序发布到应用程序仓库。应用程序仓库是公司范围内的，它允许在同一公司的实例之间轻松移动新的自定义应用程序和升级。
- en: First, we need to navigate to the Application Record. To do this, we can navigate
    to System Applications | Applications and then click on the name of the application
    again.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要导航到应用程序记录。为此，我们可以导航到系统应用程序 | 应用程序，然后再次点击应用程序的名称。
- en: In the related links, click on the link Publish to My Application Repository.
    Follow through the process in a similar way to publishing into an update set,
    and the application will then be available in the application repository for all
    of the other instances associated with the current instance company.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在相关链接中，点击“发布到我的应用程序仓库”链接。按照与发布到更新集类似的方式完成流程，然后应用程序将可供与当前实例公司关联的其他所有实例使用。
- en: We can then install the application on a different instance in the same company
    by navigating to System Applications | Applications and clicking on the Downloads
    tab. From here, we should see the application that we sent to the repository displayed
    with the option to install.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过导航到系统应用程序 | 应用程序并点击下载选项卡，在同一个公司的不同实例上安装应用程序。从这里，我们应该看到我们发送到仓库的应用程序，并显示安装选项。
- en: Once the application has been installed, updates made to the application in
    the instance where the application was created will also be available to other
    instances for the specific company, if they are added to the repository as the
    application was.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序被安装，对创建应用程序的实例中应用程序所做的更新也将对其他实例中的特定公司可用，如果它们像应用程序一样被添加到仓库中。
- en: Publish to the ServiceNow store
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布到ServiceNow商店
- en: The final deployment method we will explore is to publish an application to
    the ServiceNow store. The ServiceNow store is a way for developers to create custom
    applications that are then sold through the ServiceNow store to companies looking
    for that functionality in their instance. Applications can be sold for a one-off
    fee, monthly subscription, or through consultancy with the developing company.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要探索的最终部署方法是发布一个应用程序到ServiceNow商店。ServiceNow商店是开发者创建自定义应用程序的一种方式，这些应用程序随后通过ServiceNow商店出售给那些在其实例中寻找该功能的公司。应用程序可以一次性收费，按月订阅，或者通过与发展公司进行咨询来销售。
- en: To be able to publish applications to the ServiceNow store, the company must
    be a technology partner of ServiceNow, so this option will not be available in
    all instances.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: To begin the process, we again navigate to System Applications | Applications
    and then click on the name of the application. Once we have the application record
    open, we click on the related link Publish to ServiceNow Store. This packages
    up the code in the application into a staging area that can be edited before publishing.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Publishing an application to the ServiceNow store is quite an involved process,
    which requires ServiceNow to review the application itself and the relevant documentation
    about the application. We have explored how to start the process here, but once
    the process has been started, ServiceNow will guide you through the requirements
    from a developer to take an application into the ServiceNow store.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Example application
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our user access example application is now complete, having been developed and
    tested. We will now need to deploy the application to other ServiceNow instances.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: For our example, we will choose the method of publishing to an update set so
    that we could take this application to any ServiceNow instance. As we learned
    earlier in this section, we need to open up the user access application and click
    on the related link Publish to Update Set... to start.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'In the window that appears, we fill in the form as shown here:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51f082ee-2153-4713-9dd1-ed653ce016e1.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.24: Publish to update set popup for user access application'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: We do not have demo data for our user access application, so we can uncheck
    the box. A description has also been added to let administrators who install the
    application know what functionality the application can provide.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Once the Publish button is clicked, we can then see the new update set once
    the process has completed. This update set is already set to Complete when is
    is created.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the update set created for our application here:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b8c4c62-ae4e-4182-91a1-589c32b26c30.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.25: Update set for published custom application user access'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: The update set for our application can now be exported to XML using the related
    link, which will then allow the application to be imported into any other ServiceNow
    instance.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: To import the update set into another instance, a system administrator can simply
    import the XML by right-clicking the header bar of a list view and selecting Import
    XML. The update set will then be available to be previewed and committed.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to set up or use an existing update source to pull this
    completed update set into another ServiceNow instance you have.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Using our user access application example, we have seen the various stages of
    custom application development and how to progress through each stage. ServiceNow
    is such an open-ended platform that the custom applications that can be created
    are almost limitless.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we looked at how to build a custom application. We looked
    at how to create a new custom application and the different starting points available.
    The end-to-end development of a custom application was looked into, including
    the use of studio. We finished by delving into how to test and deploy a custom
    application once development is complete.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后一章，我们探讨了如何构建一个自定义应用程序。我们讨论了如何创建一个新的自定义应用程序以及可用的不同起点。我们深入研究了自定义应用程序的端到端开发，包括使用工作室。最后，我们探讨了在开发完成后如何测试和部署自定义应用程序。
- en: Through this chapter, we have also seen how to take an example user access application
    through all of the stages of creating a custom application. From creation to development
    and then to testing, we finally created an update set containing our application
    for deployment on other ServiceNow instances.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们还看到了如何将一个示例用户访问应用程序带过创建自定义应用程序的所有阶段。从创建到开发，再到测试，我们最终创建了一个包含我们的应用程序的更新集，以便在其他ServiceNow实例上部署。
- en: Building a custom application is a great learning experience and a fantastic
    way to practice the techniques we have covered in this book. I hope that you enjoy
    being creative and creating some custom applications of your own.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 构建自定义应用程序是一个极好的学习经历，也是练习本书中涵盖的技术的一个绝佳方式。我希望你们能享受创造性和创建自己的一些自定义应用程序。
