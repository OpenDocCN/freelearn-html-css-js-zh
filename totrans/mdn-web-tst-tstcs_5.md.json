["```js\n// ...fixture('Redmine log in tests')    .page('http://demo.redmine.org/');test.only('Create a new user', async (t) => { /* ... */ });test('Log in', async (t) => { /* ... */ });test('Log out', async (t) => { /* ... */ });fixture('Redmine entities creation tests')    .page('http://demo.redmine.org/');test('Create a new project', async (t) => { /* ... */ });test('Create a new issue', async (t) => { /* ... */ });test('Verify that the issue is displayed on a project page', async (t) => { /* ... */ });test('Upload a file', async (t) => { /* ... */ });fixture('Redmine entities editing tests')    .page('http://demo.redmine.org/');test('Edit the issue', async (t) => { /* ... */ });test('Verify that the updated issue is displayed on a project page', async (t) => { /* ... */ });test('Search for the issue', async (t) => { /* ... */ });fixture.only('Redmine entities deletion tests')    .page('http://demo.redmine.org/');test('Delete the issue', async (t) => { /* ... */ });test('Delete the file', async (t) => { /* ... */ });\n```", "```js\n// ...fixture('Redmine log in tests')    .page('http://demo.redmine.org/');test('Create a new user', async (t) => { /* ... */ });test.skip('Log in', async (t) => { /* ... */ });test.skip('Log out', async (t) => { /* ... */ });fixture.skip('Redmine entities creation tests')    .page('http://demo.redmine.org/');test('Create a new project', async (t) => { /* ... */ });test('Create a new issue', async (t) => { /* ... */ });test('Verify that the issue is displayed on a project page', async (t) => { /* ... */ });test('Upload a file', async (t) => { /* ... */ });fixture('Redmine entities editing tests')    .page('http://demo.redmine.org/');test('Edit the issue', async (t) => { /* ... */ });test.skip('Verify that the updated issue is displayed on a project page', async (t) => { /* ... */ });test.skip('Search for the issue', async (t) => { /* ... */ });fixture.skip('Redmine entities deletion tests')    .page('http://demo.redmine.org/');test('Delete the issue', async (t) => { /* ... */ });test('Delete the file', async (t) => { /* ... */ });\n```", "```js\n    fixture('My first set of tests')    .page('https://test-site.com')    .before(async (t) => {        await createTestData();    });\n    ```", "```js\n    fixture('My first set of tests')    .page('https://test-site.com')    .after(async (t) => {        await deleteTestData();    });\n    ```", "```js\n    fixture('My first set of tests')    .page('https://test-site.com')    .beforeEach(async (t) => {        await t.click('#log-in');    });\n    ```", "```js\n    fixture('My first set of tests')    .page('https://test-site.com')    .afterEach(async (t) => {        await t.click('#delete-test-data');    });\n    ```", "```js\n    test     .before(async (t) => {        await t.click('#log-in');    })    ('My first Test', async (t) => { /* ... */ });\n    ```", "```js\n    test     .after(async (t) => {        await t.click('#delete-test-data');    })    ('My first Test', async (t) => { /* ... */ });\n    ```", "```js\n// ...fixture('Redmine entities creation tests')    .page('http://demo.redmine.org/')    .beforeEach(async (t) => {        await t.click('.login')            .typeText('#username', `test_user_testcafe_poc${randomDigits1}@sharklasers.com`)            .typeText('#password', 'test_user_testcafe_poc')            .click('[name=\"login\"]');    });\n```", "```js\ntest('Create a new project', async (t) => {    await t.click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_project${randomDigits1}`)        .click('[value=\"Create\"]')        .expect(Selector('#flash_notice').innerText).eql('Successful creation.')        .expect(getPageUrl()).contains(`/projects/test_project${randomDigits1}/settings`);});\n```", "```js\ntest('Create a new issue', async (t) => {    await t.click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_project${randomDigits2}`)        .click('[value=\"Create\"]')        .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits2}\"]`)        .click('.new-issue')        .typeText('#issue_subject', `Test issue   ${randomDigits2}`)        .typeText('#issue_description', `Test issue description ${randomDigits2}`)        .click('#issue_priority_id')        .click(Selector('#issue_priority_id option').withText('High'))        .click('[value=\"Create\"]')        .expect(Selector('#flash_notice').innerText).contains('created.');});\n```", "```js\ntest('Verify that the issue is displayed on a project page', async (t) => {    await t.click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_    project${randomDigits3}`)        .click('[value=\"Create\"]')        .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits3}\"]`)        .click('.new-issue')        .typeText('#issue_subject', `Test issue ${randomDigits3}`)        .typeText('#issue_description', `Test issue description ${randomDigits3}`)        .click('#issue_priority_id')        .click(Selector('#issue_priority_id option').withText('High'))        .click('[value=\"Create\"]')        .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits3}\"]`)        .click('#main-menu .issues')        .expect(Selector('.subject a').innerText).\ncontains(`Test issue ${randomDigits3}`);});\n```", "```js\ntest('Upload a file', async (t) => {    await t.click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_project${randomDigits8}`)        .click('[value=\"Create\"]')        .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits8}\"]`)        .click('.files')        .click('.icon-add')        .setFilesToUpload('input.file_selector', './uploads/test-file.txt')        .click('[value=\"Add\"]')        .expect(Selector('.filename').innerText).eql('test-file.txt')        .expect(Selector('.digest').innerText).eql('d8e8fca2dc0f896fd7cb4cb0031ba249');});\n```", "```js\nfixture('Redmine entities editing tests')    .page('http://demo.redmine.org/')    .beforeEach(async (t) => {        await t.click('.login')            .typeText('#username', `test_user_testcafe_poc${randomDigits1}@sharklasers.com`)            .typeText('#password', 'test_user_testcafe_poc')            .click('[name=\"login\"]');    });\n```", "```js\ntest('Edit the issue', async (t) => {    await t.click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_project${randomDigits4}`)        .click('[value=\"Create\"]')        .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits4}\"]`)        .click('.new-issue')        .typeText('#issue_subject', `Test issue ${randomDigits4}`)        .typeText('#issue_description', `Test issue description ${randomDigits4}`)        .click('#issue_priority_id')        .click(Selector('#issue_priority_id option').withText('High'))        .click('[value=\"Create\"]')        .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits4}\"]`)        .click('#main-menu .issues')        .click(Selector('.subject a').withText(`Test issue ${randomDigits4}`))        .click('.icon-edit')        .selectText('#issue_subject')        .pressKey('delete')        .typeText('#issue_subject', `Issue ${randomDigits4} updated`)        .click('#issue_priority_id')        .click(Selector('#issue_priority_id option').withText('Normal'))        .click('[value=\"Submit\"]')        .expect(Selector('#flash_notice').innerText).eql('Successful update.');});\n```", "```js\ntest('Verify that the updated issue is displayed on a project page', async (t) => {    await t.click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_project${randomDigits5}`)        .click('[value=\"Create\"]')        .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits5}\"]`)        .click('.new-issue')        .typeText('#issue_subject', `Test issue ${randomDigits5}`)        .typeText('#issue_description', `Test issue description ${randomDigits5}`)        .click('#issue_priority_id')        .click(Selector('#issue_priority_id option').withText('High'))        .click('[value=\"Create\"]')        .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits5}\"]`)        .click('#main-menu .issues')        .click(Selector('.subject a').withText(`Test issue ${randomDigits5}`))        .click('.icon-edit')        .selectText('#issue_subject')        .pressKey('delete')        .typeText('#issue_subject', `Issue ${randomDigits5} updated`)        .click('#issue_priority_id')        .click(Selector('#issue_priority_id option').         withText('Normal'))        .click('[value=\"Submit\"]')        .click('#main-menu .issues')        .expect(Selector('.subject a').innerText).eql(`Issue ${randomDigits5} updated`);});\n```", "```js\ntest('Search for the issue', async (t) => {    await t.click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_project${randomDigits6}`)        .click('[value=\"Create\"]')        .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits6}\"]`)        .click('.new-issue')        .typeText('#issue_subject', `Test issue ${randomDigits6}`)        .typeText('#issue_description', `Test issue description ${randomDigits6}`)        .click('#issue_priority_id')        .click(Selector('#issue_priority_id option').         withText('High'))        .click('[value=\"Create\"]')        .navigateTo('http://demo.redmine.org/search')        .typeText('#search-input', `Test issue ${randomDigits6}`)        .click('[value=\"Submit\"]')        .expect(Selector('#search-results').innerText).contains(`Test issue ${randomDigits6}`);});\n```", "```js\nfixture('Redmine entities deletion tests')    .page('http://demo.redmine.org/')    .beforeEach(async (t) => {        await t.click('.login')            .typeText('#username', `test_user_testcafe_poc${randomDigits1}@sharklasers.com`)            .typeText('#password', 'test_user_testcafe_poc')            .click('[name=\"login\"]');});\n```", "```js\ntest('Delete the issue', async (t) => {    await t.click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_  project${randomDigits7}`)        .click('[value=\"Create\"]')        .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits7}\"]`)        .click('.new-issue')        .typeText('#issue_subject', `Test issue ${randomDigits7}`)        .typeText('#issue_description', `Test issue description ${randomDigits7}`)        .click('#issue_priority_id')        .click(Selector('#issue_priority_id option').withText('High'))        .click('[value=\"Create\"]')        .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits7}\"]`)        .click('#main-menu .issues')        .click(Selector('.subject a').withText(`Test issue ${randomDigits7}`))        .setNativeDialogHandler(() => true)        .click('.icon-del')        .expect(Selector('.subject a').withText(`Test issue ${randomDigits7}`).exists).notOk()        .expect(Selector('.nodata').innerText).eql('No data to display');});\n```", "```js\ntest('Delete the file', async (t) => {    await t.click('#top-menu .projects')        .click('.icon-add')        .typeText('#project_name', `test_  project${randomDigits9}`)        .click('[value=\"Create\"]')        .click('#top-menu .projects')        .click(`[href*=\"/projects/test_project${randomDigits9}\"]`)        .click('.files')        .click('.icon-add')        .setFilesToUpload('input.file_selector', './uploads/test-file.txt')        .click('[value=\"Add\"]')        .click('#top-menu .projects')        .click(`[href*=\"/projects/test_\n         project${randomDigits9}\"]`)        .click('.files')        .setNativeDialogHandler(() => true)        .click(Selector('.filename a').withText('test-file.txt').parent('.file').find('.buttons a').withAttribute('data-method', 'delete'))        .expect(Selector('.filename').withText('test-file.txt').exists).notOk()        .expect(Selector('.digest').withText('d8e8fca2dc0f896fd7cb4cb0031ba249').exists).         notOk();});\n```", "```js\n    $ npx testcafe --help\n    ```", "```js\n    $ npx testcafe chrome tests/basic-tests.js --quarantine-mode\n    ```", "```js\n    $ npx testcafe chrome tests/basic-tests.js --debug-mode\n    ```", "```js\n    $ npx testcafe chrome tests/basic-tests.js --debug-on-fail\n    ```", "```js\n    $ npx testcafe chrome tests/basic-tests.js --disable-page-caching\n    ```", "```js\n    $ npx testcafe chrome tests/basic-tests.js --skip-js-errors\n    ```", "```js\n    $ npx testcafe chrome tests/basic-tests.js --skip-uncaught-errors\n    ```", "```js\n    $ npx testcafe chrome tests/basic-tests.js --test \"Click a link\"\n    ```", "```js\n    $ npx testcafe chrome tests/basic-tests.js --test-grep \"Click.*\"\n    ```", "```js\n    $ npx testcafe chrome tests/basic-tests.js --fixture \"My first Fixture\"\n    ```", "```js\n    $ npx testcafe chrome tests/basic-tests.js --fixture-grep \"Suite.*\"\n    ```", "```js\n    $ npx testcafe chrome tests/basic-tests.js --test-meta suite=fast,env=staging\n    ```", "```js\n    $ npx testcafe chrome tests/basic-tests.js --fixture-meta suite=long,env=production\n    ```", "```js\n    $ npx testcafe chrome tests/basic-tests.js --app \"node index.js\"\n    ```", "```js\n    $ npx testcafe chrome tests/basic-tests.js --concurrency 4\n    ```", "```js\n    $ npx testcafe chrome tests/basic-tests.js --speed 0.8\n    ```"]