["```js\nconst { CheckerPlugin } = require(\"awesome-typescript-loader\"); \nconst webpack = require(\"webpack\"); \nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\"); \nconst CopyWebpackPlugin = require(\"copy-webpack-plugin\"); \nconst path = require (\"path\"); \n\nconst corePlugins = [ \n    new CheckerPlugin(), \n    new webpack.DefinePlugin({ \n        \"process.env.NODE_ENV\": JSON.stringify(process.env.NODE_ENV || \"development\") \n    }), \n    new ExtractTextPlugin({ \n        filename: \"[name].css\", \n        allChunks: true \n    }), \n    new CopyWebpackPlugin([ \n        { from: \"./web/frontend/index.html\", to: \"index.html\" } \n    ]), \n```", "```js\n    new webpack.optimize.CommonsChunkPlugin({ \n        name: \"vendor\", \n        minChunks: (module) => { \n            return module.context && module.context.includes(\"node_modules\"); \n        } \n    }) \n]; \n\nconst devPlugins = []; \n\nconst prodPlugins = [ \n    new webpack.optimize.UglifyJsPlugin({ output: { comments: false } }) \n]; \n\nconst isProduction = process.env.NODE_ENV === \"production\"; \nconst plugins = isProduction ? corePlugins.concat(prodPlugins) : corePlugins.concat(devPlugins); \n```", "```js\nmodule.exports = { \n    entry: [ \n        \"zone.js/dist/zone\", \n        \"./web/frontend/main.ts\" \n    ], \n    devServer: { \n        inline: true \n    }, \n    output: { \n        filename: \"[name].js\", \n        chunkFilename: \"[name]-chunk.js\", \n        publicPath: \"/public/\", \n        path: path.resolve(__dirname, \"public\") \n    }, \n    devtool: isProduction ? \"source-map\" : \"eval-source-map\", \n    resolve: { \n        extensions: [\".webpack.js\", \".ts\", \".tsx\", \".js\"] \n    }, \n    module: { \n        rules: [ \n            { \n                enforce: \"pre\", \n                test: /.js$/, \n                loader: \"source-map-loader\", \n                exclude: [/node_modules/] \n            }, \n            { \n                test: /.(ts|tsx)$/, \n                loader: \"awesome-typescript-loader\", \n                exclude: [/node_modules/] \n            }, \n            { \n                test: /.scss$/, \n                use: ExtractTextPlugin.extract({ \n                    fallback: \"style-loader\", \n                    use: [\"css-loader\", \"resolve-url-loader\", \"sass-loader\"] \n                }) \n            } \n        ] \n    }, \n    plugins: plugins \n}; \n```", "```js\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\"; \nimport { AppModule } from \"./app.module\"; \n\nplatformBrowserDynamic().bootstrapModule(AppModule).catch((err) => { \n  console.error(err); // tslint:disable-line \n}); \n```", "```js\nnpm install --save platform-browser-dynamic\n```", "```js\nimport { NgModule } from \"@angular/core\"; \nimport { BrowserModule } from \"@angular/platform-browser\"; \nimport { CommonModule } from \"@angular/common\"; \nimport { AppRoutingModule } from \"./app-routing.module\"; \nimport { AppComponent } from \"./app.component\"; \nimport { LayoutModule } from \"./config/layout.module\"; \nimport \"../../node_modules/bootstrap/scss/bootstrap.scss\"; \nimport \"./app.scss\"; \n\n@NgModule({ \n    bootstrap: [AppComponent], \n    declarations: [AppComponent], \n    imports: [ \n        BrowserModule, \n        CommonModule, \n        AppRoutingModule, \n        LayoutModule \n    ] \n}) \nexport class AppModule { \n} \n```", "```js\nimport { Component } from \"@angular/core\"; \n\n@Component({ \n    selector: \"app-root\", \n    template: ` \n    <app-layout></app-layout>`, \n}) \nexport class AppComponent { \n} \n```", "```js\n<body> \n    <app-root>Loading...</app-root> \n    <script src=\"img/vendor.js\"></script> \n    <script src=\"img/main.js\"></script> \n  </body> \n```", "```js\nimport { Component, OnInit } from \"@angular/core\"; \nimport { Route } from \"../components/header.component\"; \n\n@Component({ \n  selector: \"app-layout\", \n  template: ` \n    <div> \n        <app-header \n            bg=\"primary\" \n            title=\"TsMovies\" \n            rootPath=\"\" \n            [links]=\"appRoutes\" \n        ></app-header> \n        <main> \n            <router-outlet></router-outlet> \n        </main> \n    </div> \n  ` \n}) \nexport class LayoutComponent { \n    public appRoutes: Route[] = [ \n        { label: \"Movies\", path: \"movies\" }, \n        { label: \"Actors\", path: \"actors\" } \n    ]; \n} \n```", "```js\nbg=\"primary\" \n```", "```js\n[links]=\"appRoutes\" \n```", "```js\nimport { Component, Input, Attribute } from \"@angular/core\"; \n\ntype BgColor = \"primary\" | \"secondary\" | \"success\" | \n               \"danger\" | \"warning\" | \"info\" | \"light\" | \n               \"dark\" | \"white\"; \n\nexport interface Route { \n    label: string; \n    path: string; \n} \n\n@Component({ \n    selector: \"app-header\", \n    template: ` \n        <nav [ngClass]=\"navClass\"> \n        <a class=\"navbar-brand\" [routerLink]=\"rootPath\" routerLinkActive=\"active\"> \n            {{title}} \n        </a> \n        <ul class=\"navbar-nav\"> \n            <li *ngFor=\"let link of links\"> \n                <a class=\"navbar-brand\" [routerLink]=\"link.path\" routerLinkActive=\"active\"> \n                    {{link.label}} \n                </a> \n            </li> \n        </ul> \n    </nav>` \n}) \nexport class HeaderComponent { \n\n    public navClass!: string; \n    public title!: string; \n    public rootPath!: string; \n    @Input() public links!: Route[]; \n\n    public constructor( \n        @Attribute(\"bg\") bg: BgColor, \n        @Attribute(\"title\") title: string, \n        @Attribute(\"rootPath\") rootPath: string, \n    ) { \n        this.navClass = `navbar navbar-expand-lg navbar-light bg-${bg}`; \n        this.title = title; \n        this.rootPath = rootPath; \n    } \n} \n```", "```js\n<li *ngFor=\"let link of links\"> \n   // ... \n</li> \n```", "```js\n@Component({ \n    selector: \"app-row\", \n    template: ` \n        <div class=\"row\"> \n            <ng-content></ng-content> \n        </div> \n    ` \n}) \nexport class RowComponent {} \n```", "```js\n<app-row> \n    <h1>Title</h1> \n</app-row> \n<app-row> \n    <h2>Subtitle</h2> \n</app-row> \n```", "```js\nimport { Component, EventEmitter, Input, Output } from \"@angular/core\"; \n\n@Component({ \n    selector: \"app-text-field\", \n    template: ` \n        <input \n            type=\"text\" \n            className=\"form-control\" \n            [id]=\"id\" \n            [placeholder]=\"placeholder\" \n            (input)=\"onEdit($event)\" \n        /> \n    ` \n}) \nexport class TextFieldComponent { \n\n    @Input() public id!: string; \n    @Input() public placeholder!: string; \n    @Output() public onChange = new EventEmitter<{k: string; v: string}>(); \n\n    public onEdit(event: any) { \n        const value = (event.target as any).value; \n        const key = (event.target as any).id; \n        this.onChange.emit({ v: value, k: key }); \n    } \n\n} \n```", "```js\n(input)=\"onEdit($event)\" \n```", "```js\npublic onEdit(event: any) { \n    const value = (event.target as any).value; \n    const key = (event.target as any).id; \n    this.onChange.emit({ v: value, k: key }); \n} \n```", "```js\n<app-text-field \n    [id]=\"'title'\" \n    [placeholder]=\"'Title'\" \n    (onChange)=\"edit($event)\" \n></app-text-field> \n```", "```js\n@Component({ \n    selector: \"app-row\", \n    template: ` \n        <div class=\"row\"> \n            <ng-content></ng-content> \n        </div> \n    ` \n}) \nexport class RowComponent {} \n```", "```js\n<app-row> \n    Hello! \n</app-row> \n```", "```js\n<app-row> \n    <div class=\"row\"> \n        Hello! \n    </div> \n</app-row> \n```", "```js\n<app-row class=\"row\"> \n    Hello! \n</app-row> \n```", "```js\n@Component({ \n    host: { \n        \"[class]\": \"'row'\" \n    }, \n    selector: \"app-row\", \n    template: ` \n        <ng-content></ng-content> \n    ` \n}) \nexport class RowComponent {} \n```", "```js\n<main> \n    <router-outlet></router-outlet> \n</main> \n```", "```js\nimport { NgModule } from \"@angular/core\"; \nimport { Routes, RouterModule } from \"@angular/router\"; \nimport { HomePageComponent } from \"./pages/homepage.component\"; \nimport { MoviesPageComponent } from \"./pages/moviespage.component\"; \nimport { ActorsPageComponent } from \"./pages/actorspage.component\"; \n\nexport const appRoutes: Routes = [ \n    { path: \"\", component: HomePageComponent }, \n    { path: \"movies\", component: MoviesPageComponent }, \n    { path: \"actors\", component: ActorsPageComponent } \n]; \n\n@NgModule({ \n    exports: [RouterModule], \n    imports: [ \n        RouterModule.forRoot( \n          appRoutes, \n          { useHash: false } \n      ) \n    ] \n}) \n\nexport class AppRoutingModule {} \n```", "```js\n<main> \n    <router-outlet></router-outlet> \n</main> \n```", "```js\n<a class=\"navbar-brand\" [routerLink]=\"link.path\" routerLinkActive=\"active\"> \n    {{link.label}} \n</a> \n```", "```js\nimport { Injectable } from \"@angular/core\"; \nimport { MovieInterface } from \"../../universal/entities/movie\"; \nimport * as interfaces from \"../interfaces\"; \n\n@Injectable() \nexport class MovieService implements interfaces.MovieService { \n\n    public async getAll() { \n        return new Promise<MovieInterface[]>(async (res, rej) => { \n            try { \n                const response = await fetch(\"/api/v1/movies/\", { method: \"GET\" }); \n                const movs: MovieInterface[] = await response.json(); \n                // We use setTimeout to simulate a slow request \n                // this should allow us to see the loading component \n                setTimeout( \n                    () => { \n                        res(movs); \n                    }, \n                    1500 \n                ); \n            } catch (error) { \n                rej(error); \n            } \n        }); \n    } \n```", "```js\n    public async create(movie: Partial<MovieInterface>) { \n        const response = await fetch( \n            \"/api/v1/movies/\", \n            { \n                body: JSON.stringify(movie), \n                headers: { \n                    \"Accept\": \"application/json, text/plain, */*\", \n                    \"Content-Type\": \"application/json\" \n                }, \n                method: \"POST\" \n            } \n        ); \n        const newMovie: MovieInterface = await response.json(); \n        return newMovie; \n    } \n```", "```js\n    public async delete(id: number) { \n        const response = await fetch(`/api/v1/movies/${id}`, { method: \"DELETE\" }); \n        await response.json(); \n    } \n\n} \n```", "```js\nimport { Component, OnInit, Inject } from \"@angular/core\"; \nimport { MovieInterface } from \"../../universal/entities/movie\"; \nimport * as interfaces from \"../interfaces\"; \nimport { MOVIE_SERVICE } from \"../config/types\"; \n\nfunction isValidNewMovie(o: any) { \n    if ( \n        o === null || \n        o === undefined || \n        // new movies don't have ID \n        o.id !== undefined || \n        typeof o.title !== \"string\" || \n        isNaN(o.year) \n    ) { \n        return false; \n    } \n    return true; \n} \n```", "```js\n@Component({ \n    selector: \"movies-page\", \n    template: ` \n        <app-container> \n            <app-row> \n                <app-column width=\"12\"> \n                    <div style=\"text-align: right; margin-bottom: 10px\"> \n                        <app-button (clicked)=\"focusEditor()\"> \n                            Add Movie \n                        </app-button> \n                    </div> \n                </app-column> \n            </app-row> \n            <app-row> \n                <app-column width=\"12\"> \n                    <app-list-group [isLoaded]=\"isLoaded\" [errorMsg]=\"fetchErrorMsg\"> \n                        <app-list-group-item *ngFor=\"let movie of movies\"> \n                            <app-row> \n                                <app-column width=\"8\"> \n                                    <h5>{{movie.title}}</h5> \n                                    <p>{{movie.year}}</p> \n                                </app-column> \n                                <app-column width=\"4\" style=\"text-align: right\"> \n                                    <app-button kind=\"danger\" (clicked)=\"focusDeleteDialog(movie.id)\"> \n                                        Delete \n                                    </app-button> \n                                </app-column> \n                            </app-row> \n                        </app-list-group-item> \n                    </app-list-group> \n                </app-column> \n            </app-row> \n```", "```js\n            <div *ngIf=\"editorValue\"> \n                <app-modal \n                    [title]=\"'Movie Editor'\" \n                    [acceptLabel]=\"'Save'\" \n                    [cancelLabel]=\"'Cancel'\" \n                    [error]=\"saveStatus\" \n                    (onCancel)=\"focusOutEditor()\" \n                    (onAccept)=\"saveMovie()\" \n                > \n                    <form> \n                        <app-text-field \n                            [id]=\"'title'\" \n                            [title]=\"'Title'\" \n                            [placeholder]=\"'Title'\" \n                            [errorMsg]=\"isValidTitle\" \n                            (onChange)=\"edit($event)\" \n                        ></app-text-field> \n                        <app-text-field \n                            [id]=\"'year'\" \n                            [title]=\"'Year'\" \n                            [placeholder]=\"'Year'\" \n                            [errorMsg]=\"isValidYear\" \n                            (onChange)=\"edit($event)\" \n                        ></app-text-field> \n                    </form> \n                </app-modal> \n            </div> \n```", "```js\n            <div *ngIf=\"deleteMovieId !== null\"> \n                <app-modal \n                    [title]=\"'Delete?'\" \n                    [acceptLabel]=\"'Delete'\" \n                    [cancelLabel]=\"'Cancel'\" \n                    [error]=\"deleteStatus\" \n                    (onCancel)=\"focusOutDeleteDialog()\" \n                    (onAccept)=\"deleteMovie()\" \n                > \n                    Are you sure? \n                </app-modal> \n            </div> \n        </app-container> \n    ` \n}) \n```", "```js\nexport class MoviesPageComponent implements OnInit { \n\n    // Contains the movies that have been already loaded from the server \n    public movies: MovieInterface[]; \n\n    // Used to represent the status of the HTTP GET calls \n    public isLoaded!: boolean; \n\n    // Display error if loading fails \n    public fetchErrorMsg: null | string; \n\n    // Used to represent the status of the HTTP DELETE call \n    public deleteStatus: null | string; \n\n    // Used to represent the status of the HTTP POST and HTTP PUT calls \n    public saveStatus: null | string; \n\n    // Used to display the confirmation dialog before deleting a movie \n    // null hides the modal and number displays the modal \n    public deleteMovieId: null | number; \n\n    // Used to hold the values of the movie editor or null when nothing is being edited \n    public editorValue: null | Partial<MovieInterface>; \n    public isValidTitle!: null | string; \n    public isValidYear!: null | string; \n\n    public movieService!: interfaces.MovieService; \n```", "```js\n    public constructor( \n        @Inject(MOVIE_SERVICE) movieService: interfaces.MovieService \n    ) { \n        this.movieService = movieService; \n        this.movies = []; \n        this.fetchErrorMsg = null; \n        this.isLoaded = false; \n        this.deleteStatus = null; \n        this.saveStatus = null; \n        this.deleteMovieId = null; \n        this.editorValue = null; \n        this.isValidTitle = null; \n        this.isValidYear = null; \n    } \n```", "```js\n    public async ngOnInit() { \n        this.isLoaded = false; \n        try { \n            this.movies = await this.movieService.getAll(); \n            this.isLoaded = true; \n            this.fetchErrorMsg = null; \n        } catch (err) { \n            this.isLoaded = true; \n            this.fetchErrorMsg = \"Loading failed!\"; \n        } \n    } \n```", "```js\n    public focusEditor() { \n        this.editorValue = {}; \n    } \n\n    public focusOutEditor() { \n        this.editorValue = null; \n    } \n\n    public focusDeleteDialog(id: number) { \n        this.deleteMovieId = id; \n    } \n\n    public focusOutDeleteDialog() { \n        this.deleteMovieId = null; \n    } \n    public edit(keyVal: any) { \n        const movie = { \n            ...(this.editorValue || {}), \n            ...{[keyVal.k]: keyVal.v} \n  }; \n        if (movie.title) { \n            this.isValidTitle = (movie.title && movie.title.length) > 0 ? null : \"Title cannot be empty!\"; \n        } \n        if (movie.year) { \n            this.isValidYear = isNaN(movie.year) === false ? null : \"Year must be a number!\"; \n        } \n        this.editorValue = movie; \n    } \n```", "```js\n    public async saveMovie() { \n        if (isValidNewMovie(this.editorValue)) { \n            const newMovie = await this.movieService.create(this.editorValue as any); \n            this.movies.push(newMovie); \n            this.saveStatus = null; \n            this.editorValue = null; \n        } else { \n            this.saveStatus = \"Invalid movie!\"; \n        } \n    } \n\n    public async deleteMovie() { \n        try { \n            if (this.deleteMovieId) { \n                await this.movieService.delete(this.deleteMovieId); \n                this.movies = this.movies.filter((m) => m.id !== this.deleteMovieId); \n                this.deleteStatus = null; \n                this.deleteMovieId = null; \n            } \n        } catch (err) { \n            this.deleteStatus = \"Cannot delete movie!\"; \n        } \n    } \n\n} \n```", "```js\nimport { InjectionToken } from \"@angular/core\"; \nimport { MovieService, ActorService } from \"../interfaces\"; \n\nexport const ACTOR_SERVICE = new InjectionToken<MovieService>(\"ActorService\"); \nexport const MOVIE_SERVICE = new InjectionToken<MovieService>(\"MovieService\"); \n```", "```js\nimport { InjectionToken } from \"@angular/core\"; \n// ... \n@Injectable() \nexport class MovieService implements interfaces.MovieService { \n    // ... \n```", "```js\nimport { NgModule } from \"@angular/core\"; \nimport { CommonModule } from \"@angular/common\"; \nimport { MoviesPageComponent } from \"./moviespage.component\"; \nimport { ComponentsModule } from \"../components/components.module\"; \nimport { MovieService } from \"../services/movie_service\"; \nimport { MOVIE_SERVICE } from \"../config/types\"; \n\n@NgModule({ \n    declarations: [ \n        MoviesPageComponent \n    ], \n    exports: [ \n        MoviesPageComponent \n    ], \n    imports: [CommonModule, ComponentsModule], \n    providers: [ \n        { provide: MOVIE_SERVICE, useClass: MovieService } \n    ] \n}) \nexport class MoviesPageModule { \n} \n```", "```js\nimport { Component, Inject } from \"@angular/core\"; \n// ... \npublic constructor( \n        @Inject(MOVIE_SERVICE) movieService: interfaces.MovieService \n    ) { \n        this.movieService = movieService; \n        // ... \n    } \n```"]