- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Discovering the Keys to Quality Work as a Web Developer
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作为网络开发者，发现高质量工作的关键
- en: Learning to code and landing a web development position is all well and good,
    but once you do that, it’s time to start thinking about the things you can do
    to ensure you perform well. And not just perform well, but continue to improve
    your performance over time and help, if it’s what you want, to move up the corporate
    ladder of success.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 学习编码并找到网络开发职位是好事，但一旦你做到了这一点，你就应该开始思考你可以做些什么来确保你表现良好。而且不仅仅是表现良好，还要随着时间的推移继续提高你的表现，如果你愿意，还可以帮助你向上攀登成功的职业阶梯。
- en: I’m talking about things such as attention to detail, learning to use search
    engines and other online tools effectively, how to make effective use of developer
    tools that aren’t focused on producing code but rather ensuring the quality of
    the code you write, and your ability to multitask. These are things that anyone
    can learn and know, regardless of your level of experience, and that should become
    habits over time (even if you stop consciously thinking about them after a while).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我在谈论诸如关注细节、学习有效地使用搜索引擎和其他在线工具、如何有效地使用那些不专注于生成代码而是确保你编写代码的质量的开发者工具，以及你的多任务处理能力。这些都是任何人都可以学习和了解的事情，无论你的经验水平如何，而且随着时间的推移，这些应该成为习惯（即使过了一段时间后你不再有意识地思考它们）。
- en: These skills are important because the goal is to always be working at a high
    level of quality and always producing solid results, but without killing yourself
    to achieve it. Your boss will want this of you, but if you take personal pride
    in your work, then it becomes (relatively) easy to make that boss happy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技能之所以重要，是因为目标是始终以高质量的标准工作，并始终产出稳固的结果，但又不至于让自己过度劳累。你的老板会希望你这样做，但如果你对自己的工作感到自豪，那么让老板满意（相对而言）就会变得容易。
- en: 'So, in this chapter, we’ll cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将涵盖以下主题：
- en: Sweating the small stuff
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小事也要上心
- en: Exercising your Google-Fu
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锻炼你的Google-Fu
- en: Recognizing MVP sites
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别MVP网站
- en: Tooling around – other tools to know about and use
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具的使用——其他需要了解和使用的工具
- en: Multitasking (like a CPU on the wind!)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多任务处理（就像风中的CPU一样！）
- en: Sweating the small stuff
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小事也要上心
- en: You have probably heard the expression “Don’t sweat the small stuff.” The idea
    here is to not let stress build by worrying about things that have a low impact,
    or that you can’t do much about. However, in earlier chapters, I made the point
    that attention to detail is a key attribute of a good developer. “Sweating the
    small stuff,” as I like to say, is what web development is all about.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过“小事不用太在意”这句话。这里的观点是不要因为担心那些影响较小或你无法做太多的事情而让压力积累。然而，在前面几章中，我提出了关注细节是优秀开发者关键属性的观点。“小事也要上心”，正如我所说的，这正是网络开发的核心。
- en: Having good attention to detail is an important skill to cultivate in yourself
    because while it’s obvious that big mistakes can lead to big problems, small oversights
    can sometimes snowball into significant issues as well, if not necessarily with
    the same immediacy.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注重细节是一个重要的技能，需要你在自己身上培养，因为虽然大错误会导致大问题，但小疏忽有时也可能演变成重大问题，尽管不一定有同样的紧迫性。
- en: So, you *do* have to sweat the small stuff in this field, but the phrase, in
    this case, isn’t about managing stress – it’s about being as thorough and as accurate
    in your work as you can be, accounting for as much as you can, whether big or
    small. This is a crucial skill in producing work that is as robust, efficient,
    and bug-free as possible.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这个领域，你确实需要小事也要上心，但这里的短语并不是关于管理压力——而是关于尽可能详尽和准确地完成工作，考虑到尽可能多的因素，无论大小。这是制作尽可能稳健、高效和零缺陷工作的关键技能。
- en: Scrutinizing code, thoughtfully considering system architecture, and ensuring
    your designs meet both current and future needs are the things we’re most interested
    in doing well and with proper attention to detail.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细审查代码、深思熟虑系统架构，并确保你的设计满足当前和未来的需求，这是我们最感兴趣做好并给予适当关注细节的事情。
- en: As an example, let’s say that you’re building a website that involves storing
    user information. This involves writing information to a relational database.
    You might decide that the key of your user table – the column that uniquely identifies
    a user – should be a combination of each person’s first and last names. This might
    seem reasonable at first, and in fact, it would work perfectly fine, at least
    for a while. But what happens if two people with the same first and last name
    – a situation that certainly can occur in the real world – try signing up? Due
    to a relatively small mistake in the database’s design, a new user can’t even
    register due to the name conflict. Or worse, the system could, depending on how
    the code is written, comingle the two people’s data. Ironically, as I wrote these
    words, I’m dealing with a situation where my insurance company has somehow comingled
    my and my dad’s accounts precisely because we have the same first and last names.
    You wouldn’t think things like that happen for real, but you’d be very wrong!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你正在构建一个涉及存储用户信息的网站。这涉及到将信息写入关系型数据库。你可能会决定用户表的关键——唯一标识用户的列——应该是每个人的名字和姓氏的组合。这乍一看似乎是合理的，事实上，它至少在一段时间内会运行得很好。但如果两个同名同姓的人——这种情况在现实生活中确实可能发生——尝试注册会发生什么呢？由于数据库设计中相对小的错误，新用户可能因为姓名冲突而无法注册。或者更糟糕的是，根据代码的编写方式，系统可能会将两个人的数据混合在一起。具有讽刺意味的是，当我写下这些话的时候，我正在处理一个情况，我的保险公司不知何故将我和我父亲的账户混合在一起，因为我们有相同的名字和姓氏。你不会认为这样的事情真的会发生，但你大错特错了！
- en: So, learning to pay attention to details is important. It can also be difficult
    because, especially early in your career, you won’t have much experience to base
    your observations on. All you can do at that point is to try and think through
    various scenarios, game them out, and look for gotchas as best you can. Experience
    isn’t a guarantee of success, nor is it always needed. Thinking logically – another
    point I’ve made a few times – is ultimately what it comes down to. Of course,
    the more experience you have, the better you will be able to think logically since
    you’ll have more information to base it on, but it’s not the be-all, end-all of
    attention to detail.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，学会关注细节很重要。这也可能很困难，因为，尤其是在你职业生涯的早期，你不会有太多经验可以依据。在那个阶段，你能做的只是尝试思考各种场景，模拟它们，并尽可能多地寻找陷阱。经验并不是成功的保证，也并非总是需要的。逻辑思考——这是我多次提到的一个观点——最终才是关键。当然，你拥有的经验越多，你将能够更好地进行逻辑思考，因为你有更多的信息可以依据，但这并不是关注细节的全部。
- en: You also have to be a little bit careful if you focus too exclusively on the
    minutia of a project as you can sometimes lose the forest for the trees, as the
    saying goes. You also always need to be mindful of the big picture and keep sight
    of the overall goals and objectives that the details work to achieve. Striking
    the right balance is what’s needed, and that primarily comes from practice. You’ve
    got to do these things and exercise these mental muscles to build them up properly
    over time.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你过于专注于项目的细节，你也需要稍微小心一点，因为正如俗话所说，你有时可能会因为树木而忽略了森林。你始终需要关注大局，并保持对细节所努力实现的总体目标和目标的视野。找到正确的平衡是必要的，而这主要来自于实践。你必须做这些事情，锻炼这些心理肌肉，以便随着时间的推移正确地建立它们。
- en: 'When it comes to attention to detail, perhaps the most important consideration
    is focus, and how you can keep your mind pointed in the right direction, or to
    say it another way: staying in the moment.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到注意力时，最重要的考虑因素可能是专注，以及你如何保持你的思维指向正确的方向，或者换句话说：活在当下。
- en: Staying in the moment
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活在当下
- en: One trick that can help you achieve better attention to detail is “staying in
    the moment.” It’s easy for all of us to become distracted by the various trials
    and tribulations of life – we all have things working in the back of our minds
    almost all the time, things we’re worried about or persistent problems we’re trying
    to solve – but the trick is to learn to push that stuff way back in your mind
    and focus on the here and now, on the main problem at hand.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可以帮助你提高注意力的技巧是“活在当下”。我们所有人很容易被生活中各种各样的考验和磨难所分散注意力——我们几乎总是有一些事情在脑海中萦绕，我们担心的事情或者我们试图解决的问题——但关键是要学会将这些事情深深埋藏在心底，专注于此时此刻，专注于手头的主要问题。
- en: If your mind is wandering or pre-occupied by things other than, for example,
    working on that database mentioned earlier – even if you don’t immediately realize
    it’s happening – you will often find your focus isn’t where it needs to be, and
    you’ll wind up missing details that could have led you to better decisions, such
    as the problem with the key of the database if you use names. The problem with
    the key may have occurred to you if you were fully focused on that design task
    and not allowing your mind to wander (there are never any guarantees of course,
    but you want to give yourself the best odds at least).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的思绪飘散，专注于其他事情，比如之前提到的那个数据库——即使你没有立即意识到这一点——你往往会发现你的注意力不在需要的地方，你可能会错过可能导致更好决策的细节，比如如果你使用名称，数据库键的问题。如果你在专注于那个设计任务，不让你的思绪飘散，你可能会想到数据库键的问题（当然，没有任何保证，但你至少想给自己最好的机会）。
- en: While staying in the moment is a general concept, there are some concrete steps
    you can take to help you achieve this – things we call **mindfulness exercises**.
    These are practices that are designed to help bring your attention to the present
    moment and help you become more aware of your thoughts, feelings, and surroundings.
    They can be quite beneficial for improving focus, reducing stress, and enhancing
    overall well-being.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然保持当下是一个普遍的概念，但你可以通过一些具体的步骤来帮助你实现这一点——我们称之为**正念练习**。这些练习旨在帮助你将注意力集中在当下，并帮助你更加意识到你的思想、感受和周围环境。它们对于提高专注力、减少压力和提升整体福祉非常有益。
- en: 'Specifically, here are some common mindfulness exercises you can work on:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，以下是一些你可以练习的常见正念练习：
- en: '*Mindful breathing*: This is perhaps the most basic mindfulness exercise, but
    also can be the most useful. All it takes is to focus your attention on your breath.
    Notice the inhalation and exhalation, the rhythm of it. It’s an autonomic function
    of your body, of course, something you rarely pay attention to (unless there’s
    a problem!), so focusing on it can be an interesting experience. When your mind
    inevitably wanders, gently bring it back to your breath, and re-focus on the moment.
    This can be done anywhere at any time, even for just a few minutes, and can not
    only help you learn to focus on details but can also serve as a fantastic way
    to simply relax, which also tends to aid in attention to detail.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*正念呼吸*：这可能是最基础的正念练习，但同时也可能是最有用的。只需将你的注意力集中在呼吸上。注意吸入和呼出的节奏。这当然是你身体的自主功能，是你很少关注的事情（除非有问题发生！），所以专注于它可能是一种有趣的经验。当你的思绪不可避免地飘散时，轻轻地将其带回到呼吸上，并重新集中注意力在当下。这可以在任何地方、任何时候进行，即使只有几分钟，不仅能帮助你学会关注细节，还可以作为简单放松的绝佳方式，这也有助于提高对细节的关注。'
- en: '*Body scan meditation*: This exercise might not fly in an office environment,
    but it’s something you can do at home. You simply lie down or sit in a comfortable
    chair and focus your attention slowly and deliberately on each part of your body,
    from your toes to the top of your head. You’re “scanning” your body, in other
    words. As you do, notice any sensations, tension, or discomfort in each part,
    and try to relax any tension you notice.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*身体扫描冥想*：这种练习可能不适合在办公环境中进行，但你可以在家中做。你只需躺下或坐在舒适的椅子上，然后缓慢而故意地将你的注意力集中在身体的每一部分，从脚趾到头顶。换句话说，你正在“扫描”你的身体。在这个过程中，注意身体每一部分的任何感觉、紧张或不适，并尝试放松你注意到的任何紧张。'
- en: '*Mindful observation*: To do this exercise, choose an object in your vicinity
    – any object will do – and focus your mind on just observing it for a minute or
    two. Notice everything you can about it, observing it as if you’re seeing it for
    the first time. If you happen to be near a window, finding a bird, squirrel, or
    other animal can be an especially enjoyable “object” to use for this exercise.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*正念观察*：为了做这个练习，选择你附近的一个物体——任何物体都可以——然后专注于观察它一分钟或两分钟。注意你能注意到的关于它的每一件事，就像你第一次看到它一样去观察。如果你碰巧靠近窗户，找到一只鸟、松鼠或其他动物可以是一个特别有趣的“物体”来用于这个练习。'
- en: '*Mindful listening*: Instead of focusing on an object as with mindful observation,
    this exercise involves listening to sounds in your environment, whether it’s the
    chirping of birds, the rustling of leaves, or distant traffic.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*正念倾听*：与正念观察不同，这个练习涉及倾听你环境中的声音，无论是鸟儿的鸣叫、树叶的沙沙声，还是远处的交通。'
- en: '*Mindful eating*: While this exercise probably isn’t something that will typically
    help you pay attention to detail during a given task, it’s an exercise that can
    hone your skill a bit by exercising it with a common example. This exercise involves
    paying full attention to the simple, everyday experience of eating! As you eat,
    take notice of the color, texture, and taste of your food. Chew slowly and be
    aware of the sensations and flavors in each bite. You can almost make a game of
    it! It will train your brain to focus more on the moment, getting it used to the
    sensation of doing so.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*正念饮食*：虽然这个练习可能不会在执行特定任务时帮助你关注细节，但它可以通过一个常见的例子来锻炼你的技能。这个练习涉及到全神贯注于简单、日常的饮食体验！当你吃饭时，注意食物的颜色、质地和味道。慢慢咀嚼，注意每一口的感觉和味道。你几乎可以把它变成一个游戏！这将训练你的大脑更加专注于当下，让它习惯于这种感受。'
- en: '*Walking meditation*: In a similar vein, practice mindfulness while walking.
    This involves becoming aware of the sensation of your feet touching the ground,
    the rhythm of your steps, and your breathing. Take note of the simple fact that
    your legs are moving more or less on their own! It’s kind of a weird thing to
    realize! Also, take care to see the sights, sounds, and smells around you as you
    walk.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*行走冥想*：在类似的方式中，练习行走时的正念。这涉及到意识到你的脚接触地面的感觉，你步伐的节奏，以及你的呼吸。注意这样一个简单的事实：你的腿几乎是在自己移动！这是一个很奇怪的认识！此外，在行走时，注意你周围的环境、声音和气味。'
- en: '*Mindful stretching or yoga*: Many people do yoga regularly, and for good reason:
    it can help focus the mind! Fortunately, it doesn’t require buying a proper yoga
    mat and finding a good yoga class in your town. Instead, you can sit in a comfortable
    position and engage in slow, deliberate, light stretching, taking care to pay
    attention to the physical sensations in your muscles and joints as you move. The
    key here is to be very gentle because this exercise is supposed to be relaxing,
    so you don’t want to overdo it, especially if this isn’t a regular activity for
    you.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*正念拉伸或瑜伽*：许多人定期练习瑜伽，原因很好：它可以帮助集中注意力！幸运的是，这不需要购买专业的瑜伽垫，也不需要在你的城市找到一个好的瑜伽班。相反，你可以坐一个舒适的姿势，进行缓慢、有目的的轻度拉伸，在移动时注意肌肉和关节的物理感觉。这里的关键是要非常温柔，因为这个练习旨在放松，所以你不想做得太过分，尤其是如果你这不是一个常规活动的话。'
- en: One final general “exercise” is simply to take a break from what you’re doing
    for a few minutes and allow your mind to wander for a little while! You’d be surprised
    how just letting go for a minute or two can paradoxically help you re-focus on
    the task at hand afterward. In addition, it allows your mind time to process things
    at a lower level, which is often exactly what you need to break through a tricky
    problem or challenge.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个一般性的“练习”就是简单地休息几分钟，让你的思绪随意飘荡一会儿！你会惊讶地发现，仅仅放松一两分钟，反而可以帮助你在之后重新集中精力完成任务。此外，这也给你的大脑留出时间在较低层次上处理事情，这往往是突破棘手问题或挑战所必需的。
- en: Of course, attention to detail and sweating the small stuff is the goal, but
    at some point, you’re going to have to simply know stuff to get your work done.
    But not one of us knows everything, myself included! What we *do* all have to
    know though is how to find the information we need and gain the knowledge we require
    as we go, and one of the primary ways in this day and age to do so is through
    online search engines. Let’s talk about that a bit now.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，关注细节和努力做好每一件小事是我们的目标，但到了某个阶段，你必须知道一些东西才能完成你的工作。但没有人知道所有的事情，包括我自己！然而，我们所有人都必须知道的是如何找到我们需要的信息，并在前进的过程中获得我们所需的知识，而在当今这个时代，实现这一目标的主要方式之一就是通过在线搜索引擎。现在让我们来谈谈这一点。
- en: Exercising your Google-Fu
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锻炼你的Google技能
- en: As I’ve mentioned a few times before, as a web developer, you won’t be expected
    to know everything off the top of your head. There is simply too much to know
    – too much to keep in your meat-computer all at once. Instead, what *will* be
    expected of you is that you keep some general concepts in your head, particularly
    concerning the stuff you’re using at the moment in your head – if you’re currently
    writing a lot of JavaScript, then it’s reasonable (and, fortunately, natural)
    to start to remember things such as the methods available on arrays since you’ll
    be using those frequently
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到几次的那样，作为一名网页开发者，你不需要一开始就知道所有的事情。知识太多了——太多需要一次性保存在你的“肉脑”中。相反，期望你的是，你在大脑中保留一些一般概念，尤其是关于你目前使用的东西——如果你目前正在大量编写JavaScript，那么记住数组上可用的方法是很合理（而且幸运的是，很自然）的，因为你将经常使用这些方法。
- en: But what will *always* be expected is that you can search for information when
    you need it and synthesize it into actions as you go. The term “Google-Fu” is
    often used to describe this ability, playfully combining “Google” and “Kung-fu”
    to describe a person’s skill and efficient use of Google (or any search engine).
    It involves the ability to quickly find precise information.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 但始终期望的是，当你需要信息时能够搜索到它，并在行动中将其综合起来。术语“Google-Fu”经常用来描述这种能力，俏皮地将“Google”和“Kung-fu”结合起来，以描述一个人对Google（或任何搜索引擎）的技能和高效使用。这涉及到快速找到精确信息的能力。
- en: You may think that just means entering the right keywords, and that’s a big
    part of it, but it also involves understanding how search engines work and using
    advanced search techniques such as Boolean operators, filters, and specific search
    commands to create better search terms that more quickly and accurately get you
    the information you need.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为这仅仅意味着输入正确的关键词，这确实是其中很大一部分，但它还涉及到理解搜索引擎的工作原理，并使用高级搜索技术，如布尔运算符、过滤器以及特定的搜索命令，以创建更好的搜索词，更快、更准确地获取你需要的信息。
- en: 'Let’s look at a few of these key points that play into developing your Google-Fu
    skills:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看一些关键点，这些点对于培养你的Google-Fu技能至关重要：
- en: '*Effective keyword selection*: It should come as no surprise that choosing
    precise, relevant keywords is necessary to get you the information you need quickly.
    For example, searching for `array methods` won’t provide such specific results
    compared to `javascript array methods`. However, you also have to be aware that
    being *too* specific can result in missing some results that would have been useful.
    For example, searching for `javascript array methods that deal with collections`
    might filter out some sites dealing with methods such as `map()` and `reduce()`
    – this is because some sites might discuss these methods without actually using
    the word collections, so they wouldn’t match your query as much as others. Those
    sites may also be ranked lower in the results, causing you to miss them either
    way. It’s all about finding the right balance between being specific *enough*
    but not *too* specific.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*有效的关键词选择*：选择精确、相关的关键词对于快速获取你需要的信息是必要的，这并不令人惊讶。例如，搜索`array methods`不会提供与`javascript
    array methods`相比如此具体的搜索结果。然而，你也必须意识到，过于具体可能会导致错过一些有用的结果。例如，搜索`javascript array
    methods that deal with collections`可能会过滤掉一些处理方法如`map()`和`reduce()`的网站——这是因为一些网站可能会讨论这些方法，但实际上并没有使用“collections”这个词，所以它们与你的查询匹配程度不如其他网站。这些网站也可能在结果中排名较低，导致你无论如何都会错过它们。这都是在寻找一个合适的平衡点，既要足够具体，又不要过于具体。'
- en: '*Boolean operators*: Google allows you to use the same sort of Boolean keywords
    as most programming languages do, allowing you to craft more precise search terms.
    For example, searching for `javascript array methods for collections not map`
    can get you the results you need if you know that `map()` isn’t involved. The
    `and`, `or`, and `not` keywords are the most common Boolean operators to be used
    in this way.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*布尔运算符*：Google允许你使用与大多数编程语言相同的布尔关键词，让你能够构建更精确的搜索词。例如，搜索`javascript array methods
    for collections not map`可以获取你需要的结果，如果你知道`map()`没有涉及。`and`、`or`和`not`是这种用法中最常见的布尔运算符。'
- en: '*Quotes*: When using a search engine such as Google, you have to understand
    the difference between using and not using quotes. When you use quotes, you’re
    telling Google to search for that *exact* phrase. Searching for `"javascript methods
    of array"` will only find pages that say `javascript methods of array` in that
    precise way.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*引号*：当使用谷歌等搜索引擎时，你必须理解使用引号和不使用引号之间的区别。当你使用引号时，你是在告诉谷歌搜索那个*确切*的短语。搜索`"javascript
    methods of array"`只会找到以那种精确方式说`javascript methods of array`的页面。'
- en: Without the quotes, sites that contain the words `javascript`, `methods`, and
    `array` will be in the result (Google and most other search engines drop frequently
    used words such as `of` and `an`). As with effective keyword selection, quoting
    a search term can unnecessarily make your search too specific and cause you to
    miss good results.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有引号时，包含单词`javascript`、`methods`和`array`的网站将会出现在结果中（谷歌和大多数其他搜索引擎会丢弃常用词如`of`和`an`）。与有效的关键词选择一样，使用引号搜索词可能会使你的搜索过于具体，从而导致你错过好的结果。
- en: '*Asterisks*: In a search term, an asterisk can be used as a wildcard. A wildcard
    essentially means “can be anything.” For example, searching for `*zamm*` means
    that so long as `zamm` appears in a result, there can be anything before and/or
    after it (or nothing before and/or after it) and it will match. So, for example,
    results with Zammetti in it would be found (because there’s nothing before `zamm`,
    which the leading asterisk allows for, and `etti` after it, which the trailing
    asterisk allows for), as well as the Journal of Applied Mathematics and Mechanics
    (which is named ZAMM and therefore would satisfy the wildcards as well), ZAMM
    Foods, Zamm Advisors, and Alex Zamm.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*星号*：在搜索词中，星号可以用作通配符。通配符基本上意味着“可以是任何东西”。例如，搜索`*zamm*`意味着只要`zamm`出现在结果中，它之前和/或之后可以是任何东西（或者什么都没有），它都会匹配。所以，例如，包含Zammetti的结果会被找到（因为`zamm`之前没有东西，前面的星号允许，以及之后有`etti`，后面的星号允许），以及应用数学和力学杂志（其名称为ZAMM，因此也会满足通配符），ZAMM食品，Zamm顾问，以及Alex
    Zamm。'
- en: You should use this sparingly as it can often lead to a lot of results unrelated
    to what you’re looking for, but it can sometimes be useful, especially if combined
    with other keywords and perhaps Boolean operators. For example, searching for
    `*zamm* mathematics, not advisors` might get you results more in line with technical
    materials while excluding those about cloud migration companies (Zamm Advisors).
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该谨慎使用这个功能，因为它经常会带来很多与你所寻找内容无关的结果，但有时它也可能很有用，尤其是当与其他关键词以及可能的布尔运算符结合使用时。例如，搜索`*zamm*
    mathematics, not advisors`可能会得到更符合技术材料的结果，同时排除那些关于云迁移公司（Zamm Advisors）的结果。
- en: '*Site-specific search*: Sometimes, you will know that what you’re searching
    for can be found on a given site, but you might not be sure where specifically.
    In such cases, Google allows you to search specific sites by prepending `site:`
    to your search query. For example, to search the popular movie database site IMDB
    for information about the movie Predator, you could search for `site:imdb.com
    predator`. As a web developer, searching GitHub specifically is a common thing
    you’ll do when looking for an example of how to do something in code, so `site:github.com`
    is one to keep in mind.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*特定网站搜索*：有时，你可能知道你正在寻找的内容可以在某个特定的网站上找到，但你可能不确定具体在哪里。在这种情况下，谷歌允许你通过在搜索查询前加上`site:`来搜索特定网站。例如，为了在流行的电影数据库网站IMDB上搜索关于电影《食人鱼》的信息，你可以搜索`site:imdb.com
    predator`。作为一个网页开发者，在寻找代码中如何做某事的示例时，专门搜索GitHub是很常见的事情，所以`site:github.com`是一个需要记住的。'
- en: '*File type search*: Although somewhat less common, Google, and other search
    engines, also allow you to search for specific document types. If you’re looking
    for a PDF, you can prepend the search query with `filetype:` to search for PDFs.
    For example, you can find some chapters of one of my books about Flutter by searching
    for `filetype:pdf` `zammetti flutter`.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*文件类型搜索*：尽管不太常见，但谷歌和其他搜索引擎也允许你搜索特定文档类型。如果你正在寻找PDF文件，你可以在搜索查询前加上`filetype:`来搜索PDF文件。例如，你可以通过搜索`filetype:pdf
    zammetti flutter`来找到关于Flutter的我的书中的一些章节。'
- en: '*Time-based filters*: Most search engines offer the ability to limit your results
    to a specific timeframe. In Google, it’s under the **Tools** menu that you should
    see below the search box after you do a search. Here, you can request results
    from just the past week or month, for example. This can be immensely helpful when
    you’re looking up information about a recent security exploit, for example.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基于时间的过滤器*：大多数搜索引擎都提供限制结果到特定时间范围的能力。在Google中，你可以在搜索框下方找到**工具**菜单，这是在你进行搜索之后应该看到的。在这里，你可以请求只显示过去一周或一个月的结果，例如。当你需要查找有关最近的安全漏洞的信息时，这可以非常有帮助。'
- en: Being able to search for answers quickly and efficiently via a search engine
    such as Google is something you can practice. To do so, just think of a topic,
    and start trying some searches. As a general rule, if you have to look down past
    the fifth or tenth search result, then you probably could improve the search query.
    After a while, you’ll tend to find that the first couple of results will generally
    contain what you need; otherwise, it’ll tell you that your search query wasn’t
    quite good enough. This is a general rule and there will always be exceptions,
    but I’ve found it to be true the vast majority of the time when you’re crafting
    good queries. Keep working on queries that don’t give you the results you need
    quickly by making them more specific.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 能够通过像Google这样的搜索引擎快速有效地搜索答案是一种你可以练习的技能。要做到这一点，只需思考一个主题，然后开始尝试进行一些搜索。一般来说，如果你必须向下滚动到第五个或第十个搜索结果，那么你可能需要改进搜索查询。过了一段时间，你会发现前几个结果通常会包含你需要的内容；否则，它会告诉你你的搜索查询还不够好。这是一个普遍的规则，但总会有例外，但我发现，当你构建好的查询时，这几乎总是正确的。通过使它们更加具体来继续改进那些不能快速给出所需结果的查询。
- en: 'That’s another general rule: start with a more general query and only start
    to make it more specific if you aren’t getting what you need. This strategy will
    help you not miss good results by being overly specific. However, one big exception
    to this rule is if you are researching a specific error message. In that case,
    I would encourage you to copy the entire error message and search for it literally
    (though I would always start with no quotes in it). It’s exceedingly rare that
    you will be the first person to have encountered a specific error message, so
    you’re likely to get a satisfactory answer in the first one to three results.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这又是一个普遍的规则：从一个更一般的查询开始，只有当你没有得到你需要的内容时，才开始使其更加具体。这种策略将帮助你不会因为过于具体而错过好的结果。然而，这个规则的一个大例外是，如果你正在研究一个特定的错误信息。在这种情况下，我鼓励你复制整个错误信息并直接搜索它（尽管我总是建议在它里面不使用引号）。你将是第一个遇到特定错误信息的人的情况极其罕见，因此你很可能会在前一个到三个结果中找到满意的答案。
- en: 'Search engines are now also integrating AI into their results. For example,
    at the time of writing, Google will usually show you a generative AI experiment
    section above the usual search results. These results tend to be very good for
    certain types of searches. For example, `how do I sort an array in Javascript`
    is likely to get you a good result, as seen in *Figure 10**.1*), primarily because
    generative AI tends to work better when you ask a question naturally as opposed
    to just searching for a collection of keywords as you might tend to do with a
    straight web search:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索引擎现在也将人工智能集成到其搜索结果中。例如，在撰写本文时，Google通常会显示一个生成式人工智能实验部分，位于常规搜索结果之上。这些结果对于某些类型的搜索来说非常好。例如，搜索“如何在JavaScript中排序数组”可能会得到一个很好的结果，如*图10.1*所示），主要是因为生成式人工智能在您自然提问时通常比您在直接进行网络搜索时搜索一系列关键词时表现得更好：
- en: '![Figure 10.1: An example of a Google search that yields immediately useful
    results](img/B18315_10_1.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1：一个Google搜索立即产生有用结果的示例](img/B18315_10_1.jpg)'
- en: 'Figure 10.1: An example of a Google search that yields immediately useful results'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1：一个Google搜索立即产生有用结果的示例
- en: These days, my strategy is to always start with a literal question, written
    as if I were asking it of another human being, and see if the AI results are good.
    If not, only then do I move on to looking at the web search results. And even
    then, writing a literal question often yields better results. In my experience,
    it comes down to how common a question it is. For example, `how do I sort an array
    in JavaScript` is a common question developers ask, and so, AI results aside,
    you’re highly likely to get a good first web search result.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些天，我的策略是始终从一个直接的问题开始，就像我是在向另一个人提问一样，看看AI的结果如何。如果没有，那么我才会转向查看网络搜索结果。即使如此，写一个直接的问题通常也能得到更好的结果。根据我的经验，这取决于问题的普遍性。例如，`如何在JavaScript中排序数组`是开发者经常问的问题，所以，除了AI结果之外，你很可能在第一次网络搜索中就得到一个好的结果。
- en: If I find that I’m not getting good results with that approach either, only
    then do I shift to a more keyword-centric strategy. So, I might try searching
    for `sort array javascript` instead in this example. And, of course, I start looking
    further down the list of results, though the quality of them tends to drop off
    after the first few regardless.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我发现即使采用那种方法也没有得到好的结果，那么我才会转向一个更以关键词为中心的策略。所以，在这个例子中，我可能会尝试搜索`sort array javascript`。当然，我还会开始查看结果列表的更下方，尽管这些结果的质量在最初几项之后往往会下降。
- en: Of course, as you use search engines more and more, one thing you’ll start to
    realize is that a lot of the best results come from a handful of common sites.
    These are what I term the **most value player** (**MVP**) sites. These are sites
    geared toward us developers, or that provide a place for developers to congregate,
    so sometimes, it’s better to just go directly to these sites. But whether you
    get to them directly or via search results, they are good to know about, so let’s
    look at some of them now.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，随着你越来越多地使用搜索引擎，你开始意识到，很多最好的结果都来自少数几个常见的网站。这些就是我所说的**最有价值球员**（**MVP**）网站。这些网站是为我们开发者量身定制的，或者为开发者提供了一个聚集的地方，所以有时候，直接访问这些网站会更好。但无论你是直接访问还是通过搜索结果到达，了解它们都是有益的，所以现在让我们来看看其中的一些。
- en: Recognizing MVP sites
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别MVP网站
- en: There are many useful sites on the internet, many of which you’ll encounter
    on your web development journey, but I think there are two that especially stand
    above the rest – **Stack Overflow** (**SO**) and **Mozilla Developer Network**
    (**MDN**). You’ll probably find that a lot of your time – and a lot of your search
    results – leads to them, so let’s take a look at them both here.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上有许多有用的网站，你在你的网络开发之旅中会遇到很多，但我认为有两个特别突出——**Stack Overflow**（**SO**）和**Mozilla开发者网络**（**MDN**）。你可能发现，你大部分的时间和搜索结果都指向它们，所以让我们来看看这两个。
- en: SO
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SO
- en: SO ([stackoverflow.com](https://stackoverflow.com)) has quickly become a central
    part of the landscape for developers the world over. Launched in 2008 by two gentlemen
    named Jeff Arwood and Joel Spolsky, it presents a question-and-answer format to
    its users, specifically developers, to ask and answer questions about software
    development and related topics.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: SO ([stackoverflow.com](https://stackoverflow.com)) 已经迅速成为全球开发者景观的一个核心部分。由两位名叫Jeff
    Arwood和Joel Spolsky的绅士于2008年启动，它为用户提供了一种问答格式，特别是为开发者提供提问和回答关于软件开发及相关主题的问题。
- en: Having been around for several years and built up content over that period,
    it is now something of a database with all sorts of developer knowledge contained
    in it. That’s why search engine results for software development-related searches
    will so often land there. But it’s still a very active site on its own which you
    can use independent of search engines.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 经过几年的发展并积累了大量内容，它现在已经成为一个数据库，包含了各种开发者知识。这就是为什么与软件开发相关的搜索结果经常指向那里。但作为一个独立的网站，它仍然非常活跃，你可以独立于搜索引擎使用它。
- en: 'Once you go to SO and create a free account, you’ll be able to ask questions
    in various categories and with various tags to identify what it’s about, and then
    sit back and wait for people to answer! And here’s the best part: as you answer
    questions, you gain reputation points, which incentivizes people to answer. While
    not particularly common in my experience, being able to say you have a high reputation
    score on SO can sometimes look pretty good to people during an interview, so it’s
    worth answering questions when you feel ready to.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你访问SO并创建一个免费账户，你将能够以各种类别和标签提问，以标识其内容，然后坐下来等待人们回答！而且这是最好的部分：当你回答问题时，你会获得声誉点，这激励人们回答。虽然在我的经验中并不常见，但能够说你在SO上有一个高声誉分数有时在面试中会给人们留下很好的印象，所以当你准备好时回答问题是有价值的。
- en: In addition, both questions and answers get voted on by the SO community. With
    more upvotes to questions comes more visibility, which usually means more answers,
    and upvotes help answers earn more reputation for their writers. All of this leads
    to a community-based moderation such that “good” questions and answers get raised,
    in a sense, while “bad” questions and answers get pushed down (less reputation,
    possibly less occurrence in search results, and so on).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，问题和答案都由SO社区进行投票。问题获得更多赞同意味着更高的可见度，这通常意味着更多的答案，赞同有助于回答者获得更多声誉。所有这些都导致了一种基于社区的监管，使得“好”的问题和答案在某种程度上得到提升，而“坏”的问题和答案则被推下（声誉更低，可能在搜索结果中出现的频率更低，等等）。
- en: '*Figure 10**.2* shows an example of an SO question and an answer to it. Notice
    how the site isn’t anything fancy, which is nice because it keeps the focus on
    the content, which is what matters. From this screenshot, you can see that this
    question has received five answers, one of which has gotten nine upvotes. This
    question was accepted by the person who asked it, as denoted by the checkmark
    below the vote counts. I’ll talk about this shortly, but take note of the answer
    and how the person provides several alternatives, with nicely formatted and explained
    (via comments) code. This is what I would deem a “good” answer:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*图10**.2* 展示了一个SO问题和对其的回答的例子。注意网站并不花哨，这很好，因为它保持了内容的焦点，这才是最重要的。从这张截图可以看出，这个问题收到了五个回答，其中有一个获得了九个赞同。这个问题被提问者接受，如下面的投票计数下的勾号所示。我很快就会谈到这一点，但请注意这个回答以及提供者如何提供几个替代方案，代码格式良好且解释得当（通过评论）。这就是我认为的“好”答案：'
- en: '![Figure 10.2: SO, in all its glory](img/B18315_10_2.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2：SO，全貌尽收眼底](img/B18315_10_2.jpg)'
- en: 'Figure 10.2: SO, in all its glory'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2：SO，全貌尽收眼底
- en: This all naturally leads to the very fair question of what constitutes a “good”
    and “bad” question and answer. Being community-driven, there are no hard-and-fast
    rules. You’re always kind of subject to the whims of the other developers that
    make up the community. But there are some general guidelines to keep in mind.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这自然引出了一个非常公平的问题：什么是构成“好”和“坏”问题与答案的标准。由于是社区驱动的，没有硬性规定。你总是某种程度上受制于构成社区的其它开发者的随意性。但也有一些一般性指南需要记住。
- en: Asking good questions
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提出好问题
- en: First, before you even ask a question, be sure to take some time trying to find
    a suitable answer on SO. As I mentioned earlier, you’ll rarely be the first person
    to encounter a given situation, so there’s a fair chance what you intend to ask
    has already been answered. It’s not at all uncommon on SO to post a question and
    immediately get a (not especially polite) answer that it’s a duplicate of an existing
    question. Try to avoid that if you can by finding that answer on your own, whether
    through Google or directly searching within SO itself.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在你提出问题之前，确保花些时间在SO上尝试找到合适的答案。正如我之前提到的，你很少是第一个遇到某种情况的人，所以你打算问的问题很可能已经被回答了。在SO上发帖提问并立即得到一个（并不特别礼貌）的回答，说它是现有问题的重复，这种情况并不少见。尽量通过自己找到答案来避免这种情况，无论是通过Google还是直接在SO内部搜索。
- en: Next, when asking a question, it should come as no surprise that being friendly
    is an effective way to start. Simple things like “Hi! I’m having a problem with
    *X* and would appreciate any help I can get on it” helps you come across as someone
    people want to assist. Don’t come across like you’re entitled to answers – that’s
    it in a nutshell.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在提问时，友好地开始是有效的方式，这应该不会让人感到惊讶。像“嗨！我在*X*上遇到问题，并希望得到任何我能得到的帮助”这样的简单事情会让你显得像是一个人们愿意帮助的人。不要显得你理应得到答案——这就是关键。
- en: As you get answers, even if some aren’t helpful or even downright rude (which,
    fair warning, some will be), continue to be professional, patient, and polite.
    Developers can sometimes be a blunt group of people, but that doesn’t mean they
    are being mean or aren’t legitimately trying to help. Give them the benefit of
    the doubt, expand on the question if needed, and provide additional information,
    always while being polite. Of course, if you do run into people who just seem
    to want to make you have a difficult day, ignoring them is perfectly acceptable
    and probably the best thing to do in such situations.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '当你得到答案时，即使有些答案没有帮助，甚至非常无礼（提前警告，有些答案确实会这样），也要继续保持专业、耐心和礼貌。开发者有时可能是一群直言不讳的人，但这并不意味着他们在恶意或不是真正试图帮助。给他们一个好处，如果需要，扩展问题，并始终提供额外信息，同时保持礼貌。当然，如果你遇到那些似乎只是想让你过得艰难的人，忽略他们是完全可以接受的，在这种情况下，这可能是最好的做法。 '
- en: 'After that, it’s important to show that you’ve done some work. Questions like
    “I’m trying to get my app to run in Tomcat but it’s not working, it’s giving me
    some error, please help,” is a sure way to get ignored, or downvoted. Instead,
    spell out what you’ve tried so far to resolve the issue, and provide as much detail
    as possible:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，重要的是要表明你已经做了一些工作。像“我试图让我的应用程序在 Tomcat 中运行，但它不起作用，它给我一些错误，请帮助”这样的问题肯定会被忽视，或者被踩。相反，详细说明你迄今为止为解决问题所尝试的方法，并尽可能提供详细信息：
- en: What error specifically did you get?
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你具体遇到了什么错误？
- en: What were you specifically trying to do when it happened?
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当它发生时，你具体尝试做什么？
- en: Where did you research to try and find an answer yourself?
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你在哪里进行了研究，试图自己找到答案？
- en: Failing that, what did you try on your own before deciding you needed help?
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果那样做不行，你在决定需要帮助之前，自己尝试了什么？
- en: People on SO really tend not to like it when someone asking a question seemingly
    hasn’t tried to resolve it themselves, so you want to make it clear that you have,
    and that means providing details.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: SO 上的用户真的很不喜欢那些看似没有尝试自己解决问题的人提出的问题，所以你想要清楚地表明你已经尝试过，这意味着提供详细信息。
- en: Do your best to isolate the problem too. In other words, try to remove as much
    from the problem as possible so it’s focused as best you can. If you have a piece
    of code that isn’t working, try to remove any code that you are certain works
    and that isn’t necessary to understand the problem code. Developers rarely need
    to see one hundred different functions to figure out why one isn’t working right,
    so don’t spam the question with a lot of extraneous content.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量隔离问题。换句话说，尝试从问题中尽可能多地移除内容，以便尽可能集中。如果你有一段不起作用的代码，尝试移除任何你确信是有效的且对理解问题代码不必要的代码。开发者很少需要看到一百个不同的函数来找出为什么某个函数不起作用，所以不要在问题中添加大量无关内容。
- en: Also, be sure to spell out the precise result you’re looking for and write a
    good, clear, but as concise as possible title for the post. The title should clearly
    describe the problem in as few words as possible. For example, “Help, JavaScript
    problem” is too generic to be of value, but “JavaScript array sort not resulting
    in properly sorted array” is much more specific and isn’t overly long either.
    Also, ensure you’re only really asking one question per post; otherwise, things
    can get very confusing and not very helpful in a hurry.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，务必详细说明你想要得到的精确结果，并为帖子写一个清晰、简洁但尽可能简洁的标题。标题应尽可能用最少的词语描述问题。例如，“帮助，JavaScript问题”过于笼统，没有价值，但“JavaScript数组排序未产生正确排序的数组”则更为具体，而且也不算太长。另外，确保你每篇帖子只真正问一个问题；否则，事情可能会变得非常混乱，而且很快就不会有帮助。
- en: As the answers start to roll in, you may need to engage a bit to get what you
    need. That might mean clarifying your question, or providing more information
    as requested. Remember that SO is a dialogue between you and the people willing
    to help. Sometimes, you’ll get precisely what you need immediately; other, times
    you may need to go through some back-and-forth to get there. And, of course, fight
    the urge to get frustrated if it takes a while or you ultimately don’t get an
    answer. Keep in mind that these are people who are giving their time and energy
    to try and help you, so even if they give you wrong answers, don’t hold it against
    them. It’s all but certain they didn’t do it on purpose! Just roll with it and
    remember that even a wrong answer can sometimes be helpful, might even get you
    to see something you didn’t before, and find the answer as a result.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 随着答案开始陆续到来，你可能需要稍微参与其中，以获取你需要的信息。这可能意味着澄清你的问题，或者提供所需的信息。记住，Stack Overflow是你与愿意帮助的人之间的对话。有时，你可能会立即得到你需要的答案；其他时候，你可能需要经过一些来回的交流才能得到。当然，如果花费了一些时间或者最终没有得到答案，要抵制住沮丧的冲动。请记住，这些人是在花费他们的时间和精力来尝试帮助你，所以即使他们给出了错误的答案，也不要怪罪他们。他们几乎肯定不是故意这么做的！就随它去吧，记住，即使是错误的答案有时也可能是有帮助的，甚至可能让你看到之前没有看到的东西，并因此找到答案。
- en: Lastly, when you do find good answers, be sure to upvote them, and be sure to
    accept correct answers that help you solve your problem. This is important to
    keep the reputation system working and keep providing incentives for people to
    help each other. Some people are on SO a lot specifically to answer as many questions
    as possible to get their reputation as high as possible, while others will just
    be occasional visitors who will help when they can. Either way, you want to ensure
    they get credit for helping you so that they’ll be more inclined to help others
    – and maybe that’s you again! – next time too.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当你找到好的答案时，一定要为它们点赞，并确保接受那些帮助你解决问题的正确答案。这对保持声誉系统正常运作并继续为人们提供互相帮助的激励很重要。有些人之所以在Stack
    Overflow上花费很多时间，就是为了回答尽可能多的问题，以获得尽可能高的声誉，而有些人只是偶尔的访客，在他们能帮忙的时候帮忙。无论如何，你想要确保他们得到帮助你的认可，这样他们就会更有可能下次也帮助别人——也许那又是你！
- en: One final thing I’ll mention is that just the simple act of writing a good question
    on SO can help you discover the answer on your own! I can’t tell you how many
    times I’ve spent 20 minutes writing up a question, and halfway in I realized what
    the answer was. This happens in the same way that rubber duck debugging does.
    Rubber duck debugging is when a developer – sometimes very literally – talks through
    a problem to a rubber duck. Yes, a real, physical, rubber duck like kids often
    play with in the bathtub! It sounds weird and silly, I know, but the simple act
    of explaining a problem, talking through what you’ve tried to resolve it, and
    detailing what you think could be the problem is all it takes to unblock your
    brain and have that “eureka!” moment you need. So, whether you get yourself an
    actual rubber duck, or just type a question on SO that you ultimately don’t even
    post, sometimes that alone will get the job done, weird as it seems!
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我要提到的最后一件事是，仅仅在Stack Overflow上写出一个好的问题，就能帮助你自己发现答案！我无法告诉你我花了多少时间来撰写一个问题，而在 halfway
    in 我突然意识到答案了。这就像橡皮鸭调试一样发生。橡皮鸭调试是指开发者——有时甚至非常直接——将问题与橡皮鸭讨论。是的，一个真实的、物理的橡皮鸭，就像孩子们在浴缸里经常玩的那样！我知道这听起来很奇怪和愚蠢，但仅仅解释一个问题，讨论你尝试解决它所做的一切，以及详细说明你认为可能的问题，这就是解开你的大脑并得到你需要的“eureka！”时刻的全部。所以，无论你是真的买了一个橡皮鸭，还是只是在Stack
    Overflow上打出一个问题，最终甚至没有发布，有时候这本身就足以完成任务，尽管看起来很奇怪！
- en: Giving good answers
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提供好的答案
- en: Of course, asking good questions is only half the equation. Especially early
    in your web developer journey, it’s the position you’ll find yourself in most
    of the time. But eventually, you may find your confidence and experience at a
    point where you’ll want to answer some questions. You might even find that you
    can answer some early on because you just so happen to have encountered something
    someone else is not struggling with. Either way, providing good answers is important
    to making SO work.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，提出好的问题只是方程的一半。特别是在你作为网络开发者旅程的早期，你大部分时间都会处于提问者的位置。但最终，你可能会发现自己信心和经验到了一个点，你想要回答一些问题。你甚至可能会发现，你可以早期回答一些问题，因为你恰好遇到了别人正在努力解决的问题。无论如何，提供好的答案是让Stack
    Overflow正常运作的重要因素。
- en: Ensure your answers are direct. You’ll often find answers that are generally
    good but go off on tangents about why this technology or design choice isn’t ideal
    – this isn’t always bad, and sometimes it’s very necessary to answer a given question,
    but sometimes, it’s just someone stating an unsolicited opinion and it has no
    real benefit to the person asking the question. So, stay focused on providing
    a specific answer to the specific question asked as much as possible.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的回答直接明了。你经常会发现一些回答虽然总体上不错，但却偏离了主题，讨论为什么这项技术或设计选择并不理想——这并不总是坏事，有时回答特定问题非常必要，但有时，这只是某人表达未经请求的观点，对提问者并没有实际的帮助。所以，尽可能专注于提供对特定问题的具体答案。
- en: When answering questions, always remember that not all developers are on the
    same level. Some are just starting, some have much more experience than you, and
    all the stops on the spectrum in between those two. Try to avoid assumptions,
    and always remain polite. Be respectful and professional at all times no matter
    what happens. To be sure, you may sometimes get a reply like “No, that’s wrong,
    I tried that, do better next time” or something rude like that. Just ignore it
    rather than start a flame war with someone (even though they kind of would deserve
    it with a reply like that!). It’s just not worth the time and energy you’ll waste.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 回答问题时，始终要记住，并非所有开发者都处于同一水平。有些人刚开始，有些人比你有更多经验，以及介于这两者之间的所有水平。尽量减少假设，并始终保持礼貌。无论发生什么，都要尊重和职业。当然，你可能会收到像“不，那是错的，我试过了，下次做得更好”或类似无礼的回复。但最好是忽略它，而不是与某人开始一场口水战（尽管他们确实应该得到这样的回复！）。这根本不值得你浪费时间和精力。
- en: When answering, you want to be as clear and concise as possible, and what can
    help there is giving simple examples. Sometimes, a simple example is worth a thousand
    words. You’ll also want to explain your solution in as simplistic terms as possible.
    Again, don’t make assumptions about what others know – explain every little thing
    as if you’re sure they don’t know it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 回答时，你希望尽可能清晰简洁，这可以通过提供简单的例子来帮助。有时，一个简单的例子胜过千言万语。你还需要尽可能以最简单的方式解释你的解决方案。再次强调，不要假设其他人知道什么——就像你确信他们不知道一样，解释每一个细节。
- en: Be sure to cite references where appropriate. This is a fantastic way to help
    others learn by showing information sources they may not have been aware of and
    allowing them to learn beyond the horizon of the question they asked without coming
    across as pushy. They may get the answer you gave, but then go read the documentation
    you used to arrive at it and learn other things they didn’t think of in the process.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在适当的地方引用参考文献。这是一种极好的帮助他人学习的方式，通过展示他们可能不知道的信息来源，并允许他们在超出他们提问的问题范围之外学习，而不会显得过于强硬。他们可能会得到你给出的答案，但随后会阅读你用来得出答案的文档，并在这个过程中学习到他们之前没有考虑到的其他东西。
- en: 'Finally, while I’ve said this several times, I think it’s important enough
    to say once more: whether asking or answering questions, no matter how your interactions
    go, always take the high road! SO sometimes gets a reputation for toxic interactions,
    but if you keep things positive, I think you’ll find those are very rare (and
    they will then be easy to ignore when and if they do happen). Remember that SO
    is a village, a bunch of people interacting and working together. As with any
    village, there are probably some not-so-pleasant people floating around that you
    might run into. Do everything you can to never be one of them yourself and I believe
    you’ll find SO a valuable resource.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，虽然我已经说过几次，但我认为这很重要，所以我想再说一遍：无论提问还是回答问题，无论你的互动如何，始终要选择高尚的道路！SO有时会因有毒的互动而闻名，但如果你保持积极的态度，我认为你会发现这种情况非常罕见（如果发生，也容易忽略）。记住，SO是一个村庄，一群人相互交流和合作。就像任何村庄一样，可能有一些不太愉快的人四处游荡，你可能会遇到。尽你所能，永远不要成为他们中的一员，我相信你会发现SO是一个宝贵的资源。
- en: Of course, SO is a social environment where you interact with other people.
    That isn’t the only choice, though. Another way you’ll often get answers is just
    by reading documentation on various sites. As a web developer specifically, though,
    there’s probably one site that you’ll find yourself on more times than not, and
    that’s the MDN. So, let’s talk about that now.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，SO是一个社交环境，你在这里与其他人互动。但这并不是唯一的选择。你通常会通过阅读各种网站上的文档来获得答案。但作为一个特定的网络开发者，你可能发现自己经常访问的一个网站就是MDN。那么，让我们现在就来谈谈它。
- en: MDN
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MDN
- en: 'MDN or MDN Web Docs, as it’s sometimes called, is one of the most comprehensive
    resources for web developers. The site offers reference documentation, tutorials,
    examples, and guides for all things web technologies. It’s a very respected source
    of information. You can find MDN here: [https://developer.mozilla.org](https://developer.mozilla.org).
    In *Figure 10**.3*, I’ve selected a JavaScript object to show some reference material
    for it:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: MDN 或 MDN Web Docs，有时也这么称呼，是面向网页开发者的最全面资源之一。该网站提供关于所有网络技术的参考文档、教程、示例和指南。它是一个非常受尊敬的信息来源。您可以在以下链接找到
    MDN：[https://developer.mozilla.org](https://developer.mozilla.org)。在 *图 10.3*
    中，我选择了一个 JavaScript 对象来展示一些关于它的参考材料：
- en: '![Figure 10.3: MDN](img/B18315_10_3.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.3：MDN](img/B18315_10_3.jpg)'
- en: 'Figure 10.3: MDN'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3：MDN
- en: 'Some of the highlights of MDN are as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: MDN 的一些亮点如下：
- en: '*Documentation*: MDN is well-known for its thorough documentation. It covers
    the main web technologies such as HTML, CSS, and JavaScript, but also covers other
    topics in web development such as important protocols, web extensions for browsers,
    and accessibility. The content is incredibly detailed and well-organized, and
    it includes tons of examples. All of this makes it a valuable resource for both
    beginners and experienced developers.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*文档*：MDN 以其详尽的文档而闻名。它涵盖了主要网络技术，如 HTML、CSS 和 JavaScript，还涵盖了网络开发的其它主题，例如重要的协议、浏览器的网络扩展和可访问性。内容极其详细且组织良好，并包含大量示例。所有这些使其成为初学者和经验丰富的开发者宝贵的资源。'
- en: '*Community-driven*: While not a social site like SO, MDN is its community-driven
    nature nonetheless. Both professional developers and volunteers from around the
    world contribute to its content regularly but in a more formal way than a site
    such as SO. This helps to ensure that the information presented is both accurate
    and up to date at all times and takes the latest web standards and best practices
    into account. The MDN maintainers work closely with web standards bodies such
    as the **World Wide Web Consortium** (**W3C**) and the **Web Hypertext Application
    Technology Working Group** (**WHATWG**) to help ensure that the documentation
    reflects the most current web standards.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*社区驱动*：虽然不像 SO 那样是一个社交网站，但 MDN 仍然具有其社区驱动的特性。来自世界各地的专业开发者和志愿者定期以更正式的方式为其内容做出贡献，但不如
    SO 网站那样。这有助于确保提供的信息始终准确且最新，并考虑到最新的网络标准和最佳实践。MDN 维护者与网络标准机构如 **世界万维网联盟**（**W3C**）和
    **网络超文本应用技术工作组**（**WHATWG**）紧密合作，以确保文档反映了最当前的网络标准。'
- en: '*Tutorials and guides*: While MDN provides a wealth of reference material,
    it goes beyond that by providing tutorials and learning paths for those new to
    web development or looking to expand their skills. These resources are designed
    to be practical and easy to follow and to give you the knowledge and skills you
    need, so you can consider it not just a reference site but also a learning site.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*教程和指南*：虽然 MDN 提供了大量参考材料，但它还提供了针对新接触网页开发或希望扩展技能的人的教程和学习路径。这些资源旨在实用且易于遵循，并为您提供所需的知识和技能，因此您可以考虑它不仅是一个参考网站，也是一个学习网站。'
- en: '*Accessibility and internationalization*: MDN emphasizes web accessibility
    information, helping to ensure that the web content you build using the information
    it provides is accessible to people with disabilities (we discussed accessibility
    in [*Chapter 5*](B18315_05.xhtml#_idTextAnchor129)). It also offers content in
    multiple languages, reflecting its global user base.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*可访问性和国际化*：MDN 强调网络可访问性信息，有助于确保您使用其提供的信息构建的网络内容对残疾人士可访问（我们已在 [*第 5 章*](B18315_05.xhtml#_idTextAnchor129)
    中讨论了可访问性）。它还提供多种语言的内容，反映了其全球用户基础。'
- en: '*Compatibility and browser support*: MDN includes detailed information on browser
    compatibility for different web features, which is crucial for developers aiming
    to create cross-platform web applications. With it, you can ensure that a given
    feature will work across a range of browsers as you expect it to, maximizing the
    audience for the sites you build.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*兼容性和浏览器支持*：MDN 包含了关于不同网络特性浏览器兼容性的详细信息，这对于旨在创建跨平台网络应用的开发者至关重要。有了它，您可以确保给定的特性将按预期在一系列浏览器中工作，从而最大化您构建的网站受众。'
- en: '*Dev tools*: MDN also provides guides and references for browser dev tools.
    This helps developers debug and optimize their code by exploring ways the dev
    tools can be used.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开发工具*：MDN 还提供了关于浏览器开发工具的指南和参考。这有助于开发者通过探索开发工具的使用方式来调试和优化他们的代码。'
- en: '*Open-source and free*: MDN is an open-source resource, and its content is
    available for free. This is thanks to Mozilla’s mission to keep the internet open
    and accessible. Their most well-known product, the Firefox browser, is a primary
    example of this goal, but MDN isn’t far behind!'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开源和免费*: MDN 是一个开源资源，其内容免费提供。这得益于 Mozilla 使命，即保持互联网开放和可访问。他们最知名的产品，Firefox
    浏览器，是这个目标的典范，但 MDN 也不遑多让！'
- en: Unlike SO, MDN isn’t a social site. There isn’t the sort of interaction with
    other developers there that you’ll experience with SO. But it’s one of the absolute
    best sites you can bookmark to use as a source of reference material available.
    It is highly accurate, always up to date, and just generally reliable in every
    way that matters.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 与 SO 不同，MDN 不是一个社交网站。在那里，你不会体验到 SO 上的那种与其他开发者的互动。但它是你可以书签并用作参考材料来源的绝对最好的网站之一。它非常准确，始终是最新的，并且在所有重要的方面都非常可靠。
- en: Another consideration when we talk about things you can do as a developer to
    be successful is the judicious use of various tools that help you write better
    code. IDEs are of course one of those, but there are also standalone tools (which
    can also usually be integrated into your IDE as well) that can examine your code
    and help you make it better. We’ll talk about some of those next.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论作为开发者为了成功可以做的事情时，另一个考虑因素是明智地使用各种帮助你编写更好代码的工具。IDEs 当然是其中之一，但还有独立的工具（这些工具通常也可以集成到你的
    IDE 中）可以检查你的代码并帮助你改进它。我们将在下一节讨论其中的一些。
- en: Tooling around – other tools to know about and use
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具集 – 其他需要了解和使用的相关工具
- en: When you write code, it’s you against the machine. You write your code, you
    run it, you see what it does or doesn’t do right, and you debug it. You do this
    over and over again until it’s working as expected. You mold that clay, in digital
    form!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写代码时，是你与机器对抗。你编写代码，运行它，查看它做得对或不对，然后调试它。你一次又一次地这样做，直到它按预期工作。你就是在数字形式中塑造那块粘土！
- en: But there’s almost always something you could do to make it better. Unless the
    code is small and trivial, that tends to be the case. Maybe there are still bugs
    in it that you just haven’t discovered. Maybe there are things you could do to
    make it perform better. Maybe there are security issues that will only be problems
    in certain very specific situations (which, unfortunately, threat actors are very
    good at finding). Or, maybe it’s simply not formatted as consistently as it could
    be.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 但几乎总是有你可以做的事情来让它变得更好。除非代码很小且简单，否则通常是这样的情况。也许其中还有你尚未发现的错误。也许你可以做些事情来提高它的性能。也许存在只有在某些非常具体的情况下才会成为问题的安全问题（不幸的是，威胁行为者非常擅长找到这些问题）。或者，也许它只是没有像它本可以的那样格式化得那么一致。
- en: 'In all these cases, you don’t have to go it alone! Some tools can help you
    write better code. They fall into three broad categories: **static code analysis**
    (**SCA**) tools, linters, and stylers. There is significant overlap between these,
    and often, you’ll hear developers just talking about “static analysis tools” in
    a general way, but there are enough differences to create these three broad categories.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些情况下，你不必孤军奋战！有些工具可以帮助你编写更好的代码。它们分为三个广泛的类别：**静态代码分析**（**SCA**）工具、代码检查器和格式化工具。它们之间有显著的交叉，通常，你会听到开发者一般地谈论“静态分析工具”，但它们之间有足够的差异，可以创建这三个广泛的类别。
- en: Regardless of the category, though, they involve tools that analyze your code,
    report issues, and give you recommendations. Being a professional developer will
    almost certainly involve using these tools. And even if you wind up working somewhere
    that doesn’t make use of these tools generally, you, as a good developer, should
    do so on your own regardless because they really can bring a lot of benefits to
    your work.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，无论哪个类别，它们都涉及分析你的代码、报告问题和提供建议的工具。作为一名专业开发者，几乎肯定会使用这些工具。即使你最终在一个通常不使用这些工具的地方工作，作为一个好的开发者，你也应该自己使用它们，因为它们确实可以给你的工作带来很多好处。
- en: Let’s start by talking about SCA tools, which are probably the broadest and
    most fungible of the categories.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从 SCA 工具开始讨论，这可能是这个类别中最广泛和最通用的。
- en: SCA tools
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SCA 工具
- en: The purpose of SCA tools is to analyze source code without actually executing
    it, alerting you to problems you may not see on your own.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: SCA 工具的目的是在不实际执行源代码的情况下分析它，提醒你那些你可能自己看不到的问题。
- en: These types of tools typically run from a command line, where you simply tell
    it where your source code is and it will go off and do its thing. Some of them
    have GUIs to make using them a little easier. Most can be integrated into your
    IDE and executed from there.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的工具通常从命令行运行，你只需告诉它你的源代码在哪里，它就会去执行其任务。其中一些具有GUI，使得使用它们更容易一些。大多数都可以集成到你的IDE中，并从那里执行。
- en: In addition, it’s not at all uncommon to find these tools integrated into a
    CI/CD pipeline, and sometimes in drastic ways. For example, it’s often the case
    that the build will fail, alerting the entire development team if any SCA failure
    occurs. This helps to ensure that the code is in good shape before it’s pushed
    out and deployed for people to see, whether to a development environment or even
    to production.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将这些工具集成到CI/CD管道中并不罕见，有时甚至非常彻底。例如，构建通常会失败，如果发生任何SCA失败，会警告整个开发团队。这有助于确保代码在推送到并部署供人们查看之前处于良好状态，无论是开发环境还是甚至生产环境。
- en: Popular examples
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流行示例
- en: 'While far from an exhaustive list, which will be true of all of these categories
    where I give examples, some of the more widely-known SCA tools are as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然远非详尽的列表，但所有这些类别中我都会给出示例，其中一些更广为人知的SCA工具如下：
- en: '**SonarQub**: A widely used tool that looks for all sorts of problems with
    code. It can point out, for example, places where your code may fail given specific
    inputs, as well as places where your code doesn’t properly encode output and therefore
    can result in a security exploit. It supports the notion of quality gates, which
    are rules that you can set that determine whether a review passes or fails. Since
    it can be integrated into CI/CD pipelines, the build can fail based on these gates
    if configured to do so. While SonarQube is generally seen as a very good tool,
    it can be a bit more complex to set up and use.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SonarQube**：这是一个广泛使用的工具，用于查找代码中所有各种问题。例如，它可以指出在给定特定输入时你的代码可能会失败的地方，以及你的代码没有正确编码输出，因此可能导致安全漏洞的地方。它支持质量门的概念，即你可以设置的规则，用于确定审查是否通过或失败。由于它可以集成到CI/CD管道中，如果配置为这样做，构建可以根据这些门失败。虽然SonarQube通常被认为是一个非常不错的工具，但它的设置和使用可能稍微复杂一些。'
- en: '**Veracode**: Veracode is similar to SonarQube but is focused almost exclusively
    on security issues. It is cloud-based, which tends to make it easier to use that
    SonarQube. It is often as easy as uploading your source code and clicking a button.
    You’ll get back a report that details its findings, complete with links directly
    to the source code. It can not only detect problems in your code but can also
    point out dependencies you may be using that themselves have known exploits. Veracode
    also offers a dynamic analysis option, which means it can scan your code at runtime,
    which allows it to detect flaws that can’t be detected statically.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Veracode**：Veracode与SonarQube类似，但几乎专注于安全问题。它是基于云的，这通常使得它比SonarQube更容易使用。它通常只需要上传你的源代码并点击一个按钮。你将得到一份详细的报告，其中包含其发现的结果，并直接链接到源代码。它不仅可以检测你代码中的问题，还可以指出你可能正在使用的具有已知漏洞的依赖项。Veracode还提供动态分析选项，这意味着它可以在运行时扫描你的代码，这允许它检测静态分析无法检测到的缺陷。'
- en: '**Coverity**: This tool is known for its advanced static analysis capabilities,
    particularly in detecting security vulnerabilities. It claims to test every line
    of code and potential execution path, and then state the root cause of each defect
    clearly, making it easy to fix problems. Some of the types of problems it can
    detect include resource leaks (when your code doesn’t properly clean up after
    itself and wastes things like memory), use of uninitialized data (a very common
    flaw that often leads to security vulnerabilities), and control flow issues (when
    the logic of your code can lead to code being executed that you don’t intend to).'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Coverity**：这款工具因其先进的静态分析能力而闻名，尤其是在检测安全漏洞方面。它声称测试每一行代码和潜在的执行路径，并清楚地指出每个缺陷的根本原因，使得问题修复变得容易。它可以检测的问题类型包括资源泄露（当你的代码没有正确清理自身并浪费了像内存这样的资源时）、使用未初始化的数据（一个非常常见的缺陷，通常会导致安全漏洞），以及控制流问题（当你的代码逻辑可能导致执行你不希望执行的代码）。'
- en: While some offer more robust capabilities, all of these can be integrated into
    CI/CD pipelines, and also IDEs, though the capabilities provided in each case
    can differ significantly. For example, while Veracode can be integrated into your
    IDE and report problems immediately, the capabilities are a bit limited since
    the cloud hosting model means the full capabilities of Veracode can’t run on your
    machine. This is just something to keep in mind when using these tools.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然一些提供了更强大的功能，但所有这些都可以集成到CI/CD管道中，也可以集成到IDE中，尽管每种情况下提供的能力可能差异很大。例如，虽然Veracode可以集成到你的IDE中并立即报告问题，但由于云托管模型意味着Veracode的全部功能不能在你的机器上运行，因此功能有限。这只是在使用这些工具时需要记住的一点。
- en: In addition, and again with some variety in their level of support, all of these
    tools support multiple programming languages and technology stacks. Other tools
    target specific languages (FindBugs, for example, is a Java-only SCA), so it’s
    important to research each tool to determine if it will meet your technology needs.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些工具在支持水平上存在一些差异，但所有这些工具都支持多种编程语言和技术堆栈。其他工具针对特定语言（例如，FindBugs是一个仅针对Java的SCA工具），因此研究每个工具以确定它是否满足你的技术需求是很重要的。
- en: The bottom line is that using these tools will help you detect problems early
    and in most cases before your code is deployed or run. This means your output
    will be more solid and robust, and that’s the ultimate goal.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 底线是，使用这些工具将帮助你及早发现问题，在大多数情况下在代码部署或运行之前。这意味着你的输出将更加稳固和健壮，这是最终目标。
- en: Linters
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码检查器
- en: '**Linters** perform much the same function as SCA tools but at a somewhat different
    level. While the analysis done by SCA tools can be very in-depth, linters tend
    to not go as deeply into the code. SCA tools will normally go deeper by, in a
    sense, executing your code – not literally, but in the sense that they can analyze
    the code and determine how data will flow through it, thereby finding deep flaws
    in the code.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码检查器**执行与SCA工具几乎相同的功能，但处于不同的层面。虽然SCA工具进行的分析可能非常深入，但代码检查器通常不会深入到代码中。SCA工具通常会通过执行你的代码（不是字面上的执行，而是在它们可以分析代码并确定数据如何通过它的意义上）来更深入地分析，从而发现代码中的深层缺陷。'
- en: Linters, by contrast, look for specific patterns, known constructs that tend
    to lead to errors, as well as code that doesn’t adhere to established standards.
    This means that linters tend to be much faster than SCA tools, which means using
    them regularly is much less intrusive. SCA tools, by contrast, can often take
    significant time to perform their analysis. Linters can find security issues just
    like SCA tools can, but they do so at a higher level.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 与之相反，代码检查器（linters）寻找特定的模式，已知容易导致错误的构造，以及不符合既定标准的代码。这意味着代码检查器通常比安全代码分析（SCA）工具要快得多，这意味着定期使用它们干扰性更小。相比之下，SCA工具通常需要花费相当长的时间来执行其分析。代码检查器可以像SCA工具一样找到安全问题，但它们在更高的层面上这样做。
- en: In essence, think of linters as tools that look at your code more or less as
    text, looking for specific patterns that may indicate an issue, whereas SCA tools
    are more like you as a programmer when debugging in that you’re walking through
    the code in your head.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，可以将代码检查器视为将你的代码视为文本的工具，寻找可能表明问题的特定模式，而SCA工具则更像你在调试时作为程序员，你在脑海中逐行遍历代码。
- en: 'Linters help maintain a consistent coding style, making the code more readable
    and maintainable, based on rules you set. Again, this is just about pattern recognition:
    a linter can tell you if you forget to put a semicolon on the end of a line if
    you’ve configured its rules to tell you that, for example.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 代码检查器有助于维护一致的编码风格，使代码更易于阅读和维护，基于你设置的规则。再次强调，这仅仅是模式识别：如果配置了规则来告诉你，例如，如果你忘记在行尾放置分号，代码检查器可以告诉你。
- en: Linters are almost always language-specific as a result since the variations
    across different programming languages tend to lead to different patterns to look
    for.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 由于不同编程语言之间的差异往往导致不同的查找模式，因此代码检查器几乎总是语言特定的。
- en: Popular examples
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流行例子
- en: 'Here are a few popular examples of linters:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些流行的代码检查器例子：
- en: '**ESLint**: This is a linter for JavaScript. It is highly configurable in that
    you can determine the rules it should use at a very fine-grained level. It supports
    the latest Javascript standards, which helps to ensure your code is written in
    a modern, robust way.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ESLint**：这是一个JavaScript的代码检查器。它可以非常灵活地配置，你可以在非常细粒度的层面上确定它应该使用的规则。它支持最新的JavaScript标准，这有助于确保你的代码以现代、健壮的方式编写。'
- en: '**Pylint**: This linter is a popular one for Pythion. It is flexible, similar
    to how ESLint is, and can find all sorts of bugs and code smells (bits of code
    that developers tend to view as, while not being outright bugs, things that typically
    shouldn’t be done a given way).'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pylint**: 这是一个流行的Python代码检查工具。它具有灵活性，类似于ESLint，可以找到各种错误和代码异味（开发者倾向于认为虽然不是明显的错误，但通常不应该以某种方式编写的代码片段）。'
- en: '**CheckStyle**: A popular linter for Java. It primarily focuses on code style
    and formatting, not so much on error detection, though there is some of that in
    it as well. It is highly configurable, though that configuration can be somewhat
    complex.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CheckStyle**: 这是一个流行的Java代码检查工具。它主要关注代码风格和格式，虽然也包含一些错误检测功能。它具有高度的可配置性，尽管这种配置可能相对复杂。'
- en: Stylers
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 风格化工具
- en: While linters will point out problems in code, they don’t touch the code. This
    is true of SCA tools as well. The other class of tools is stylers (sometimes called
    formatters), and these very much do touch your code. They can automatically format
    source code to a particular style guide, ensuring consistency across even an entire
    codebase. Unlike linters, they don’t just flag issues but also reformat the code
    to meet the specified guidelines.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然代码检查工具会指出代码中的问题，但它们不会修改代码。这对于源代码分析（SCA）工具也是如此。另一类工具是风格化工具（有时称为格式化工具），它们确实会修改你的代码。它们可以自动将源代码格式化为特定的风格指南，确保整个代码库的一致性。与代码检查工具不同，它们不仅会标记问题，还会重新格式化代码以满足指定的指南。
- en: '**Stylers** tend to be straightforward to use and often configurable to fit
    team-specific styles and rules. However, they can also be dangerous. I don’t mean
    dangerous in terms of anything being broken – I don’t recall ever seeing a styler
    break code – but dangerous in the sense that it can alter the structure of code
    very quickly. If you didn’t set the rules right, then you’ll probably wind up
    having a cleanup task on your hands (which, hopefully, just means altering the
    rules and re-running the styler, but that may not always work).'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**风格化工具**通常使用简单，并且通常可以配置以适应团队特定的风格和规则。然而，它们也可能存在风险。我并不是说它们会破坏代码——我不记得曾经看到过风格化工具破坏代码——但它们的风险在于它们可以非常快速地改变代码的结构。如果你没有正确设置规则，那么你可能最终会手头上有清理工作（希望这仅仅意味着更改规则并重新运行风格化工具，但这并不总是有效）。'
- en: Stylers are all about maintaining consistent, appropriate formatting and styling
    of code, but I have to caution you against relying on them. Many developers believe
    they can write code any way they want because they know they will run a styler
    on it when they’re done, at which point it will have the correct styling. In my
    experience, this is a poor way to work.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 风格化工具的主要目的是维护代码的一致性和适当的格式化风格，但我必须警告您不要过分依赖它们。许多开发者认为他们可以以任何他们想要的方式编写代码，因为他们知道当他们完成时，将会运行风格化工具，这时代码将具有正确的风格。根据我的经验，这是一种不好的工作方式。
- en: My wife, a trained chef, always impresses upon me when we prepare a meal together
    that a true professional chef will clean up as they go. They don’t simply make
    a big mess as they’re cooking and then clean it up at the end. They are constantly
    cleaning up their station because that leads to fewer mistakes (you don’t want
    to cut yourself because you slipped on a messy station) and more consistent results.
    I’ve come to view coding in the same way.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我的妻子是一位受过训练的大厨，每次我们一起准备餐点时，她都会强调一个真正的专业厨师会在烹饪过程中不断清理。他们不会简单地做饭时制造一个大混乱，然后在最后清理。他们不断清理自己的工作台，因为这会导致更少的错误（你不想因为在一个混乱的工作台上滑倒而割伤自己）并得到更一致的结果。我已经开始以同样的方式看待编码。
- en: I’ve seen developers write code where sometimes, they indent with two spaces
    and sometimes with four. Sometimes, they put braces on the end of a line and sometimes
    alone on the next line. To be sure, the code doesn’t care – it’ll work just fine
    either way. But this sloppiness leads to more mistakes just because inconsistency
    tends to make code harder to follow, which is why we care about it at all.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我见过开发者编写代码时，有时用两个空格缩进，有时用四个空格缩进。有时，他们在行尾放置花括号，有时则单独在下一行放置。当然，代码本身并不在乎——它无论如何都能正常工作。但这种随意性会导致更多错误，因为不一致性往往会使代码更难以跟踪，这也是我们为什么关心它的原因。
- en: 'I believe that like a professional chef, a professional developer cleans up
    as they go. For us, that means writing well-formatted and most importantly consistently-formatted
    code *as you go*. Yes, you should use a styler at the end to catch any mistakes
    you’ve made because, after all, none of us are perfect. But to put it simply:
    you want that styler to do as little as possible! There should be little for it
    to change in your code because you’ve already styled it properly yourself in effect.
    Make this a habit, something you do without thinking, and it won’t get in the
    way of your work at all. I would argue it’ll make you more efficient since your
    brain won’t have to deal with the inconsistency of your work as you debug.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信，就像专业厨师一样，专业开发者会边做边清理。对我们来说，这意味着在编写代码时，要写出格式良好且最重要的是格式一致的代码*边写边格式化*。是的，你应该在最后使用一个格式化工具来捕捉你犯的错误，因为毕竟，我们都不是完美的。但简单来说：你希望这个格式化工具尽可能少地工作！在你的代码中应该很少有它需要改变的地方，因为你实际上已经自己正确地格式化了。养成这个习惯，让它成为你不用思考就能做的事情，它不会妨碍你的工作。我会争辩说，这会使你更有效率，因为你的大脑在调试时不需要处理你工作的不一致性。
- en: Popular examples
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流行示例
- en: 'Some popular stylers that you might encounter are as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到的一些流行格式化工具如下：
- en: '**Prettier**: One of the most widely adopted stylers, it supports many languages
    and integrates with most IDEs and even plain old text editors. It normally takes
    nothing more than pressing a key combination and your code will be reformatted
    instantly. While Prettier is configurable, it’s a bit limited in this area purposely.
    Instead, Prettier is what we call an *opinionated* tool. By default, it uses a
    set of sensible and common settings, the goal being that you shouldn’t have to
    configure it at all.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Prettier**：最受欢迎的代码格式化工具之一，它支持许多语言，并与大多数IDE以及普通的文本编辑器集成。通常只需按下一个键组合，你的代码就会立即被重新格式化。虽然Prettier可以配置，但在这个领域它故意有些限制。相反，Prettier是我们所说的有“意见”的工具。默认情况下，它使用一组合理且常见的设置，目标是让你根本不需要对其进行配置。'
- en: '**Black**: A well-known Python styler, it is known for its uncompromising approach
    to formatting Python code. It is even more opinionated than Prettier and therefore
    has fewer configuration options. So long as you like the style it provides, it’s
    excellent and will work for you immediately with almost no setup cost.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Black**：一个知名的Python代码格式化工具，以其对Python代码格式化的坚定方法而闻名。它比Prettier更有意见，因此配置选项更少。只要你喜欢它提供的风格，它就非常出色，几乎不需要任何设置成本就能立即为你工作。'
- en: '**Gofmt**: Gofmt is the de facto standard for formatting code written in the
    Go languages. It is used almost universally by Go developers. It implements the
    Go community coding standards and offers comparatively few configuration options.
    However, it is extremely fast and very widely adopted, and it’s almost certainly
    what you’ll use if you do any Go development.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gofmt**：Gofmt是Go语言编写的代码的默认格式化标准。它几乎被所有Go开发者普遍使用。它实现了Go社区编码标准，并提供了相对较少的配置选项。然而，它非常快，并且被广泛采用，如果你进行任何Go开发，几乎可以肯定你会使用它。'
- en: Be they SCA tools, linters, or stylers, incorporating these tools into your
    daily workflow can significantly enhance code quality and maintainability, as
    well as reduce bug counts. Integrating them into your development workflow, including
    CI/CD pipelines, can streamline code reviews, enhance team collaboration, and
    enforce coding standards (which is something developers otherwise almost enjoy
    fighting about!). They are particularly beneficial in larger projects or teams,
    ensuring a unified code base despite multiple contributors.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 不论是SCA工具、linters还是stylers，将这些工具融入你的日常工作流程可以显著提高代码质量和可维护性，同时减少错误数量。将它们集成到你的开发流程中，包括CI/CD管道，可以简化代码审查，增强团队协作，并强制执行编码标准（这是开发者们通常不太愿意争论的事情！）。它们在大型项目或团队中尤其有益，确保尽管有多个贡献者，代码库仍然保持统一。
- en: Of course, there isn’t a tool for everything. Sometimes, it all comes down to
    you and your brain and how you use it. Well, to be more specific, it **always**
    does! Let’s look at some aspects of that now.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，没有工具能解决所有问题。有时，一切都取决于你和你的大脑以及你如何使用它。好吧，更具体地说，它**总是**是这样的！现在让我们看看这方面的某些方面。
- en: Using the best tool of all – you!
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用最好的工具——你自己！
- en: The sorts of tools we’ve been discussing all have the explicit purpose of making
    your code better in some way, be that more error-free, formatted well, or anything
    else. And these tools are fantastic and definitely should be used. But there’s
    one that you should be using at all times, and that’s you – you and your brain!
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在讨论的工具都有明确的目的是以某种方式改进你的代码，无论是更无错误、格式良好，还是其他任何东西。这些工具是出色的，并且绝对应该使用。但有一个你应该始终使用，那就是你自己——你和你的大脑！
- en: The best developers won’t rely on the tools discussed; instead, they will use
    them as backup because all along they will have been writing clean, solid code.
    No one is perfect, of course, which is why we need these tools to be watching
    over our backs, so to speak, to catch what we miss. But if we’re doing things
    right, then there should be very little for these tools to catch anyway because
    we will, out of habit, have been writing our code with proper formatting all along,
    and with solid development principles all along.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的开发者不会依赖于所讨论的工具；相反，他们会将它们作为备份使用，因为一直以来他们都在编写干净、稳固的代码。当然，没有人是完美的，这就是为什么我们需要这些工具来“监视”我们的后背，换句话说，捕捉我们遗漏的地方。但如果我们做对了，那么这些工具要捕捉的东西应该非常少，因为出于习惯，我们一直以来都在用适当的格式编写代码，并始终遵循稳健的开发原则。
- en: But one other thing you’ll want to keep in mind is commenting code because while
    these tools can point out places you haven’t commented well, to some extent, this
    is by and large an area you have to do yourself because generally speaking, the
    machine doesn’t know what you’re thinking (some of the new AI-based tooling is
    starting to change this, but we’re still in early days of that, so it’s better
    to develop good habits yourself).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 但还有一件事你需要记住，那就是注释代码，因为虽然这些工具可以指出你没有很好地注释的地方，在某种程度上，这主要是一个你必须自己做的领域，因为一般来说，机器不知道你在想什么（一些基于新AI的工具开始改变这一点，但我们仍然处于这个领域的早期阶段，所以最好是自己培养良好的习惯）。
- en: Documenting our code is very important, and that’s where writing comments in
    that code comes into play. In your career, you will undoubtedly meet developers
    who will tell you that commenting code isn’t necessary if it is “self-documenting.”
    What do they mean by this?
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 记录我们的代码非常重要，这就是为什么在代码中编写注释变得很重要。在你的职业生涯中，你无疑会遇到一些开发者告诉你，如果代码是“自文档”的，那么注释代码是不必要的。他们这是什么意思？
- en: 'What they mean is that code should be written clearly and “obviously,” and
    part of that is good naming. For example, take a look at this code:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 他们这意味着代码应该被编写得清晰且“明显”，其中一部分是良好的命名。例如，看看这段代码：
- en: '[PRE0]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What does that do? Well, you can tell that the `getAc()` function will return…
    something. And it’ll be stored in the `ac` variable. That’s all obvious. But what
    does `getAc()` return? And what is the `ac` variable hold?
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这会做什么呢？你可以看出`getAc()`函数将返回……某物。它将被存储在`ac`变量中。这一切都很明显。但`getAc()`返回什么？`ac`变量又是什么？
- en: 'You could rewrite this code in a much clearer way:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用更清晰的方式重写这段代码：
- en: '[PRE1]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, it’s obvious what’s going on because the name of the variable and the
    name of the function spell out – by their very names – what they’re for. There’s
    no guesswork. That’s what is meant by self-documenting code: naming things in
    such a way that they convey information about their purpose.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，很明显正在发生什么，因为变量的名称和函数的名称本身就清楚地说明了它们的作用。没有猜测的必要。这就是所谓的自文档代码：以某种方式命名事物，以便它们传达它们的目的信息。
- en: However, even when you do that, there is information that can’t be properly
    conveyed by just good variable and function names. That’s where comments in the
    code come into play. As I mentioned, there is a fair bit of debate about commenting
    in code, with some developers preferring as little as possible, while others would
    argue that there should be more comments than actual code in your code!
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使你这样做，也有一些信息仅仅通过良好的变量和函数名称是无法适当传达的。这就是代码中的注释发挥作用的地方。正如我提到的，关于代码注释有很多争议，一些开发者更喜欢尽可能少地注释，而另一些开发者则会争论说，你的代码中应该有比实际代码更多的注释！
- en: 'In my experience, the best answer falls somewhere in the middle. One key tenet
    to keep in mind is that comments should explain the *why* of the code, not the
    *what*. In other words, you shouldn’t comment on every line of code explaining
    what it does because – assuming it’s written clearly, as described previously
    – the line tells you what it does anyway. The code itself is the what, so don’t
    do this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，最好的答案往往介于两者之间。一个需要记住的关键原则是，注释应该解释代码的*原因*，而不是*内容*。换句话说，你不应该对每一行代码都进行注释，解释它做什么，因为——假设它像之前描述的那样写得清晰——这一行本身就已经告诉你它在做什么了。代码本身是内容，所以不要这样做：
- en: '[PRE2]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Instead, I would suggest that a better way to comment this code might be as
    follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我建议注释这段代码的更好方式可能是如下所示：
- en: '[PRE3]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: While similar information is conveyed, the combination of well-named variables
    and functions plus some judicious comments is sufficient. If you also have a blank
    line after the `saveToDatabase()` call before starting the next action, then the
    single comment has the benefit of logically grouping the lines. You can easily
    tell those six lines of code are related to updating the account, and the comment
    acts as a signpost for them.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然传达了类似的信息，但良好的命名变量和函数加上一些明智的注释就足够了。如果你在`saveToDatabase()`调用之后留一个空行，然后开始下一个动作，那么单行注释的好处就是逻辑上分组这些行。你可以轻松地看出这六行代码与更新账户相关，注释就像是一个路标，为它们指路。
- en: But even that comment might not truly be necessary (except for the aforementioned
    signpost) because it doesn’t explain *why* the code exists. Why are we adding
    a transaction and updating the account? The why of things is where comments come
    to earn their keep. Explaining how parts of the code work together is ripe for
    commenting. Describing any gotchas that might be in the code – that’s worth commenting.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 但即使这样的注释也可能并非真正必要（除了前面提到的路标之外），因为它并没有解释代码存在的*原因*。为什么我们要添加交易并更新账户？事情的原因正是注释发挥作用的地方。解释代码各部分是如何协同工作的，非常适合添加注释。描述代码中可能存在的任何陷阱——这也是值得注释的。
- en: 'For example, you might write a comment above that `getCheckingAccountFromLastName()`
    function - something along the lines of this:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能会在`getCheckingAccountFromLastName()`函数上方写一条注释——大致像这样：
- en: '[PRE4]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Don’t focus on the syntax because that differs from language to language (this
    is for Java). But more importantly, here, you can see a detailed description of
    the function, as well as some details that might aid future developers (which
    may well be you!). You can also see what arguments it accepts, what it returns,
    and some conditions on its operation.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 不要专注于语法，因为语法会因语言而异（这是针对Java的）。但更重要的是，在这里，你可以看到函数的详细描述，以及可能帮助未来开发者（可能就是你！）的一些细节。你还可以看到它接受什么参数，返回什么，以及它的操作条件。
- en: One of the reasons some developers say that commenting is to be avoided is because
    “the comments lie.” What they mean is that if you modify that function such that
    it will return `null` rather than an empty `Account` object when `inLastName`
    is `null` – a change that might be necessary for some reason later – if you don’t
    update the comment along with the code then the comment will, in fact, “lie.”
    It tells you to expect an empty `Account` object when `inLastName` is `null`,
    but that’s no longer the case.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发者说应该避免注释的原因之一是“注释在撒谎”。他们的意思是，如果你修改那个函数，使其在`inLastName`为`null`时返回`null`而不是空的`Account`对象——这种改变可能出于某种原因在以后是必要的——如果你不更新注释，那么注释实际上就会“撒谎”。它告诉你当`inLastName`为`null`时应该期待一个空的`Account`对象，但情况已经不再是这样了。
- en: While some say you can avoid this by not writing comments, which is undoubtedly
    true, it’s not a good answer. Instead, the right way to solve that problem is
    to treat comments as being just as important as the code. When you change the
    code, get in the habit of changing the comment too. Some developers will update
    the comment first to, in a sense, give themselves a guideline for the work they’re
    about to do. Either way, don’t treat comments as an afterthought and you’ll tend
    not to wind up with “lying” comments.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有人说你可以通过不写注释来避免这个问题，这无疑是正确的，但这并不是一个好的答案。相反，正确解决这个问题的方法是将注释视为与代码一样重要。当你更改代码时，养成同时更改注释的习惯。一些开发者会先更新注释，从某种意义上说，为自己即将要做的工作提供一个指南。无论如何，不要将注释视为事后之想，这样你就不会倾向于得到“撒谎”的注释。
- en: At the end of the day, get into the habit of commenting more, not less, but
    also keep an eye out for superfluous comments. If you find yourself commenting
    more about what is happening rather than why, then you’re probably taking it too
    far, and it also may indicate that you haven’t written your code in a self-documenting
    way (because why would you need so many comments if the code didn’t make things
    obvious already?)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，养成多注释而不是少注释的习惯，但也要留意多余的注释。如果你发现自己更多地注释了正在发生的事情而不是原因，那么你可能做得太过分了，这也可能表明你没有以自文档化的方式编写代码（因为如果代码本身已经很明确，你还需要那么多注释做什么？）
- en: 'But I can tell you, as someone who has had to deal with large volumes of code
    that had little to no comments, I will take an overly-verbosely-commented code
    base over one with sparse comments any day of the week, no matter how self-documenting
    it’s written. Even bad comments are like bad pizza: it’s still pretty good! Ultimately,
    it’s all about balance. Too much commenting that isn’t useful can just get in
    the way, but not enough is just as bad. Shoot for the middle ground.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 但我可以告诉你，作为一个不得不处理大量代码且注释很少的人，我宁愿选择注释过多的代码库，也不愿选择注释稀疏的代码库，无论它写得多么自文档化。即使是糟糕的注释，也像糟糕的披萨一样：它仍然相当不错！最终，一切都关于平衡。过多的无用注释可能会妨碍，但不足同样糟糕。追求中间地带。
- en: Besides commenting and having good habits, another aspect of using your brain
    is the fact that in this line of work, a lot of the time, you’ll need that brain
    to work on more than one thing at a time. Let’s get into what that means.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 除了注释和养成良好的习惯之外，使用大脑的另一个方面是，在这个行业中，很多时候你需要大脑同时处理多件事情。让我们来探讨这意味着什么。
- en: Multitasking (like a CPU on the wind!)
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多任务处理（就像风中的CPU！）
- en: 'The CPU in your computer is an amazing technical achievement. A gentleman by
    the name of Ben Driscoll said it best in a tweet one time: “If you ever code something
    that feels like a hack, but it works, just remember that a CPU is literally a
    rock that we tricked into thinking.”'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您电脑中的CPU是一项惊人的技术成就。一位名叫本·德里科尔的绅士在一次推文中说得最好：“如果你编写的代码感觉像是一种黑客行为，但又能工作，那就记住，CPU实际上是一块我们欺骗使其产生思考的石头。”
- en: What’s perhaps most amazing about it is how it can (seemingly) do many things
    at once. When you’re using Windows, OSX, or a Linux-based desktop, you can have
    many windows opened at once with many different programs running at the same time.
    While the CPU isn’t the only thing responsible for that, it’s certainly a key
    part and it always blows my mind when I stop and think about it.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 最令人惊讶的可能就是它（看似）能同时做很多事情。当你使用Windows、OSX或基于Linux的桌面时，你可以同时打开多个窗口，同时运行多个不同的程序。虽然CPU不是唯一负责这一点的因素，但它无疑是关键部分，每当我停下来思考这一点时，都会让我感到震惊。
- en: To a certain extent, as a web developer, you will have to act like a CPU, handling
    multiple tasks at once. Of course, a human being just can’t do quite as much at
    a single time as a CPU can, but the CPU is pulling a trick on you. You see, it’s
    not doing multiple things at once either (I admit I’m simplifying this a bit here
    to make the comparison work, but it’s true enough at a high level to work). Instead,
    what a CPU is doing is switching between many tasks very fast – so fast that the
    illusion of it all happening at the same time is maintained on a human timescale.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在一定程度上，作为一名网页开发者，你将不得不像CPU一样，同时处理多个任务。当然，人类一次无法像CPU那样做那么多，但CPU正在对你施展魔法。你看，它也不是一次同时做很多事情（我承认我在这里简化了一些，以便进行比较，但在高层次上这是真实的）。相反，CPU所做的是在许多任务之间快速切换——快到在人类的时间尺度上保持了所有事情同时发生的错觉。
- en: Web developers often have to work in the same general way. That’s because the
    outcome of one task will often feed another, but the process becomes cyclic, and
    therefore iterative.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 网页开发者通常必须以相同的方式工作。这是因为一个任务的结果通常会影响到另一个任务，但这个过程变成了循环的，因此是迭代的。
- en: For example, as you write the HTML and CSS for a website, you may realize that
    the images you prepared earlier won’t quite work as planned. As a result, you
    have to go back and redo them. You can choose to wait until you’re done with the
    coding and then redo the images – and sometimes that’s totally viable and probably
    the best way to go – but other times, redoing the images may then feed back into
    the HTML and CSS in some way that causes you to have to tweak that now (maybe
    you decide that you need to put shadows on the images, which means you may have
    to go back and remove the CSS that also puts shadows on them).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当你为网站编写HTML和CSS时，你可能会意识到你之前准备好的图片不会完全按计划工作。结果，你必须回去重新做它们。你可以选择等到编码完成后再重新做图片——有时候这完全可行，可能也是最好的方法——但有时重新做图片可能会以某种方式反馈到HTML和CSS中，导致你必须现在进行调整（也许你决定需要在图片上添加阴影，这意味着你可能需要回去移除也添加阴影的CSS）。
- en: Or it could be that as you write the code, you want to deploy it for your customers
    to see as you work. So, you have to alternate between coding and deploying.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在你编写代码时，你可能想要在工作过程中部署它，让你的客户看到。所以，你必须在编码和部署之间交替。
- en: What should be clear is that you have to do as a CPU does and switch between
    tasks. Hopefully, you don’t have to do it as fast as a CPU and not as regularly!
    Ideally, it’s usually better to complete one task before moving on to another
    as a human being. That’s not always possible, though.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 应该清楚的是，你必须像CPU一样在任务之间切换。希望你不需要像CPU那样快，也不需要那么频繁地这样做！理想情况下，作为一个人类，通常在开始另一个任务之前完成一个任务会更好。但这并不总是可能的。
- en: If you suspect this can get stressful, then you are right, it definitely can
    be. So, how can you deal with that?
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你怀疑这可能会很有压力，那么你是对的，这确实可能会。那么，你如何应对这种情况呢？
- en: Keeping notes
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持笔记
- en: One thing that I find helps me is to keep judicious notes about the tasks I’m
    working on. I’ll write down where I am on a given task every so often and record
    the steps I’ve already taken. I’ll also write down what I plan to do next, and
    what I think is required going forward.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现对我有帮助的是，对正在进行的任务保持明智的笔记。我会不时地写下我在特定任务上的进度，并记录我已经采取的步骤。我还会写下我计划接下来做什么，以及我认为接下来需要做什么。
- en: The benefit of this is that when I have to switch to another task for a while
    and then come back to the first one, I’m not trying to recreate my entire mental
    model of the task from scratch. Instead, I have comments and outlines and maybe
    even simple diagrams to help me pick up where I left off faster.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的优点是，当我必须暂时切换到另一个任务然后再回到第一个任务时，我并不需要从头开始重新构建整个任务的心理模型。相反，我有注释、大纲甚至简单的图表来帮助我更快地继续之前的工作。
- en: I also tend to like to keep these notes somewhere I can access them all the
    time – my current choice is Google Keep, but you can use anything that lets you
    get to your information anywhere. I find this beneficial because sometimes you’ll
    have random, intrusive thoughts about a task during downtime, or during other
    tasks sometimes, and it’s helpful to be able to jot down notes about the thought
    in the same place all the other information about the task already is. That way,
    when I go back to the task, the thought is right there waiting for me (even if
    it immediately left my head after I wrote it down, which happens a lot!)
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我也倾向于将这些笔记保存在我可以随时访问的地方——我目前的选择是Google Keep，但你可以使用任何让你在任何地方获取信息的东西。我发现这很有益处，因为有时你会在空闲时间或进行其他任务时突然想到一个任务，能够把关于这个想法的笔记记在所有其他关于这个任务的信息所在的地方会很有帮助。这样，当我回到任务时，想法就在那里等待着我（即使在我写下它之后立即从我的脑海中消失，这种情况经常发生！）
- en: Keeping notes is good, but ultimately, you still have to switch between tasks
    and manage those tasks, and that can be stressful, notes or not. One part of that
    stress can come from poor time management. So, how do you manage the time allotted
    to each task in a way that this at least has a chance to reduce stress? One approach
    that works pretty well is time-boxing.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 保持笔记是好的，但最终，你仍然需要在任务之间切换并管理这些任务，这可能会很有压力，不管有没有笔记。压力的一部分可能来自不良的时间管理。那么，你如何管理分配给每个任务的宝贵时间，以至少有机会减少压力？一种效果相当好的方法是时间盒。
- en: Time-boxing
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间盒
- en: '**Time-boxing** (sometimes called time-slicing) involves defining how long
    it will take you to complete a task before starting it and sticking to that limit
    no matter what.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**时间盒**（有时称为时间切片）涉及在开始任务之前定义完成任务所需的时间，并坚持这个限制，无论发生什么。'
- en: Maybe you have to write some code, so you time-box that to an hour. Then, you
    go off and code for an hour. But if 20 minutes in you realize you have to modify
    your images, instead of switching tasks immediately, you continue coding until
    you either reach your hour time box limit or you finish earlier than that (which
    is always okay). Only then do you move on to the images, and again you would time-box
    that task as well.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 可能你需要编写一些代码，所以你将其时间框设定为一个小时。然后，你离开去编码一个小时。但如果在20分钟后你意识到你需要修改你的图像，那么，而不是立即切换任务，你应该继续编码，直到你达到小时时间框的限制或者比那更早完成（这总是可以的）。只有在你达到小时时间框限制或者更早完成之后，你才会转向处理图像，并且你也会对那个任务进行时间框管理。
- en: There may be cases where you *have* to break out of a time box – if you simply
    can’t continue the code unless the images are right, for example – but in most
    situations, that tends to not be the case. Even tasks you discover as you work
    can usually wait until your current task is done. Of course, you may consider
    something you discover as you work to simply be part of the task at hand anyway,
    in which case your time box should still stand, but you alter the work you’re
    doing within it slightly.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有一些情况你必须打破时间框——比如，除非图像正确，否则你无法继续编码——但在大多数情况下，情况并非如此。即使你在工作中发现的任务通常也可以等到你当前的任务完成后再进行。当然，你可能会认为你在工作中发现的事情本身就是当前任务的一部分，在这种情况下，你的时间框仍然有效，但你可以在其中稍微调整你的工作。
- en: One of the biggest problems people deal with as they work on a project, whether
    you effectively time-box tasks or not, is interruptions, usually from other people.
    As with a real CPU, which can sometimes need to have its current task interrupted
    for something important, a human CPU faces this issue as well. How can you deal
    with that?
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们在项目上工作时，他们面临的最大问题之一，无论你是否有效地对任务进行时间框管理，都是中断，通常来自其他人。就像一个真实的CPU有时可能需要中断当前任务以处理重要的事情一样，人类的CPU也会面临这个问题。你该如何应对？
- en: Deferring and Do Not Disturb
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 延迟和勿扰
- en: The trick is to defer any interruptions you can in a way that comes across well
    to others. It also requires an awareness of the communication channel the interruption
    comes in on.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 技巧在于以对他人来说合适的方式延迟任何可以延迟的中断。这也需要你意识到中断是通过哪种沟通渠道发生的。
- en: What I mean is that someone walking up to your desk and starting a conversation
    with you has a different immediacy to it than a text message, an instant message,
    or an email. The hope is that people use an appropriate communication channel,
    but they don’t always. If someone has a question that doesn’t require an immediate
    response for example, then an email is usually better than a phone call. If, on
    the other hand, they have a problem that is keeping them from continuing their
    work at all (what we usually call a **blocker**), then they may have no choice
    but to come over to your desk and get your immediate attention.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，有人走到你的办公桌前和你开始交谈，这比收到一条短信、即时消息或电子邮件具有不同的紧迫性。希望人们使用适当的沟通渠道，但他们并不总是这样做。例如，如果有人有一个不需要立即回答的问题，那么电子邮件通常比电话更好。另一方面，如果他们有一个问题让他们无法继续工作（我们通常称之为**阻碍者**），那么他们可能别无选择，只能走到你的办公桌前并立即引起你的注意。
- en: What you have to be aware of is that unless the situation is severe, you have
    the option of deferring! You can simply say “I’m right in the middle of something
    at the moment, let me get back to you as soon as I free up.” Yes, if they perceive
    their need as being more immediate, then they may not take it quite as well as
    they otherwise would, but at some point, that becomes a “not my problem” situation
    for you. After all, you have work to get done, and that’s hard to do if you can’t
    focus on it because you have to help others.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要意识到的是，除非情况严重，否则你有选择延迟的权利！你可以说：“我现在正忙于某事，等我空下来再给你回复。”是的，如果他们认为自己的需求更加紧急，他们可能不会像平时那样好接受，但到了某个时候，这对你来说就变成了“不是我的问题”的情况。毕竟，你还有工作要做，如果你不能专注于它，因为你必须帮助别人，那就很难完成。
- en: Still, being the person who is recognized as always being helpful and the person
    who usually has the answers is a nice feeling, but it’s also difficult when factoring
    in the work you are doing. Constant context-switching can be a productivity killer
    when it’s unplanned. Therefore, when things get to a certain point, putting up
    a Do Not Disturb sign might be appropriate.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，成为那个总是被认为乐于助人、通常有答案的人是一种美好的感觉，但考虑到你正在做的工作，这也很难。如果没有计划，频繁的上下文切换可能会成为生产力的杀手。因此，当事情达到一定程度时，挂上勿扰标志可能是合适的。
- en: In an office environment, that could be a literal sign! If you have an office,
    then closing the door might be essentially what it is. Or when dealing with instant
    messaging systems such as Microsoft Teams, setting your status to Do Not Disturb
    for a while is a terrific way to get the focus time you need. Like I said earlier,
    being a go-to person has its benefits, but it can’t usually be without limits;
    otherwise, you’ll find your productivity sinking like a stone.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在办公室环境中，这可能是一个字面上的标志！如果你有办公室，那么关上门可能就是它的本质。或者当处理即时通讯系统，如Microsoft Teams时，将你的状态设置为勿扰一段时间是获得所需专注时间的一个极好的方法。就像我之前说的，成为一个求助者有其好处，但通常不能没有限制；否则，你会发现你的生产力像石头一样下降。
- en: Final thoughts
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后的想法
- en: So, at the end of the day, as with a CPU, you have to expect and deal with context-switching
    as a web developer. It tends to be a pretty natural part of the job. But you have
    to do what you can to manage it. You won’t always be able to, but time-boxing
    and limiting or outright shutting down communication channels – true emergencies
    excepted – for a little while are some of the ways you can achieve that.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，最终，就像CPU一样，你必须预料到并处理作为网络开发者的上下文切换。这通常是工作的一部分。但你必须尽你所能来管理它。你不会总是能这样做，但时间分箱和限制或完全关闭沟通渠道——真正的紧急情况除外——是一段时间内你可以实现这一目标的一些方法。
- en: I like to take it as a bit of a challenge! I get interrupted *a lot* on the
    job because I’m one of those go-to people. So, every time it happens, I like to
    push myself to be as helpful as I can, as quickly as I can, and then see how fast
    I can get my work back on track. It almost becomes something of a game!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢把它当作一种挑战！我在工作中经常被打断，因为我就是那些求助者之一。所以，每次发生这种情况，我都喜欢尽力快速地帮助，然后看看我多快能将我的工作重新回到正轨。这几乎变成了一种游戏！
- en: The final piece of advice I’d leave you with is that when you do inevitably
    see your productivity slip, take note of how you help others get their work done.
    Remember that as part of a team, it’s usually the output of the team as a whole
    that most matters. Therefore, even if you didn’t get a lot done yourself on a
    given day, realizing the work you helped others get done shows you how you *were*
    productive, just in a different way!
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我要留给你的最后一项建议是，当你不可避免地看到你的生产力下降时，注意你是如何帮助他人完成工作的。记住，作为一个团队的一部分，通常整个团队的工作成果才是最重要的。因此，即使你在某一天自己没有做很多工作，意识到你帮助他人完成的工作可以显示出你*是如何*有生产力的，只是以不同的方式！
- en: Reviewing the roadmap
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查路线图
- en: 'We’re rapidly approaching the end, and as a result, the roadmap is filling
    out quickly! *Figure 10**.4* shows the updated web developer roadmap:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正迅速接近尾声，因此路线图也在迅速完善！*图10.4*展示了更新后的网络开发者路线图：
- en: '![Figure 10.4: The roadmap, with a few more boxes filled in](img/B18315_10_04_NEW.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4：路线图，填入了一些更多的框](img/B18315_10_04_NEW.jpg)'
- en: 'Figure 10.4: The roadmap, with a few more boxes filled in'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4：路线图，填入了一些更多的框
- en: In this chapter, the **Code Quality** and **Soft Skills** boxes were revealed.
    Regarding soft skills, the next chapter is all about that, but a lot of what was
    discussed in this chapter can also be to, a degree, labeled soft skills. Certainly,
    attention to detail and multitasking would fall into that category, so I felt
    it was appropriate to uncover here, even though the next chapter will dive deeper
    into that topic.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，揭示了**代码质量**和**软技能**的框。关于软技能，下一章将全部关于这个话题，但本章讨论的许多内容也可以在一定程度上被标记为软技能。当然，关注细节和多任务处理会属于这一类别，所以我感觉在这里揭露是合适的，尽管下一章将更深入地探讨这个话题。
- en: Summary
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the key skill of paying attention to detail, and
    we looked at some ways you help you achieve that, to help you stay in the moment.
    We then looked at making effective use of search engines, and helpful websites
    where you can get information – especially help from other developers when needed.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了关注细节的关键技能，并探讨了一些帮助你实现这一目标的方法，以帮助你保持专注。然后，我们探讨了如何有效地使用搜索引擎，以及你可以获取信息的有帮助的网站——特别是当需要时从其他开发者那里获得帮助。
- en: Then, we looked at some common tools that developers use to ensure code quality
    including static analysis tools.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们探讨了开发者用来确保代码质量的一些常用工具，包括静态分析工具。
- en: Finally, we talked about the idea of multitasking – as CPUs do – and how it’s
    almost inevitable that you’ll need to be able to shift gears often as a web developer
    to be effective. We also talked about strategies to help deal with the stress
    that can naturally come out of that context-switching.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们讨论了多任务处理的概念——就像CPU一样——以及作为网页开发者，你几乎不可避免地需要经常转换档位才能有效工作。我们还讨论了应对由此产生的压力的策略。
- en: Much of this discussion could be said to focus on “soft skills,” but in the
    next chapter, we’ll look at more traditional terms regarding soft skills – things
    such as interpersonal relationships, and communication skills. We’ll also talk
    about development methodologies a little bit, with a specific focus on something
    called the Agile methodology, since it’s so popular these days, and because to
    a large degree, it’s an exercise in soft skills to make it work!
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分讨论可以归结为关注“软技能”，但在下一章中，我们将探讨更多关于软技能的传统术语——比如人际关系和沟通技巧。我们还会稍微谈谈开发方法，特别关注一种称为敏捷方法的东西，因为如今它非常流行，并且从很大程度上说，它是软技能的练习，以便使其有效运作！
