- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying a Sequelize Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After installing an admin dashboard, configuring our web application to book
    flights, and having built a backend server, we are now ready to start developing
    the frontend interface along with deploying the application. Just in time too,
    because our board members want to see some progress, and they would like to see
    a working prototype for purchasing a ticket.
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout this chapter, and to meet the requirements of our board members,
    we will need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Refactor some of our current routes and add another route for listing flight
    schedules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrate Express’ static middleware and secure the admin interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a page to list and book flights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy the application to a service such as Fly.io
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the tasks in this chapter, we will be installing the following additional
    software:'
  prefs: []
  type: TYPE_NORMAL
- en: A version control manager called Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Fly.io CLI for deploying to a cloud application platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/Supercharging-Node.js-Applications-with-Sequelize/tree/main/ch10](https://github.com/PacktPublishing/Supercharging-Node.js-Applications-with-Sequelize/tree/main/ch10).
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring and adding flight schedule routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start creating the customer interface for purchasing a boarding ticket,
    we will need to make several adjustments to our code base. Let us begin by creating
    a new file located at `routes/airplanes.js` and moving the `app.post(''/airplanes'',
    …)` and `app.get(''/airplanes/:id'', …)` blocks into that file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This route will return an `Airplane` model record based on the primary key,
    which is defined in Express’ Request object (indicated by the `:id` symbol). If
    there were no records to be found, then we will return a `404` (not found) status.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will take the `createAirplane` code block from `routes/flights.js`
    and move it into the `routes/airplanes.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Within `routes/flights.js`, we will want to add a new handler called `flightSchedules`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, within the `index.js` file, in the project’s root directory, we
    can remove the `app.get(''/'', …)` block and modify the route requiring blocks
    (just above the block that we removed) to match the new method paths as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `app.get(''/airplanes/:id'', …)` block should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And below that, we can add the flight schedule route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will want to adjust the error returned from the customers model. Within
    `models/customers.js`, replace the existing attributes with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The last modification for flights and booking a ticket involves making some
    adjustments to the `routes/tickets.js` file. First, we will want to add Sequelize’s
    `ValidationError` at the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we will be finding, or creating, a customer throughout the booking process,
    we will want to change the `req.body` line to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And below that line, we will add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will tell Sequelize to find or create a customer record using the email
    as a key and will hydrate the record with the name (if the record is new) from
    the `POST` request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just above the `await schedule.addBoardingTicket(…)` block, we will want to
    add a method that defines the customer association for the newly created boarding
    ticket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The remaining modification for this file is replacing the `catch` block with
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This error block will check whether the incoming error is a Sequelize `ValidationError`
    type and if so, will map out the errors to `errorObj` with the column (`err.path`)
    as a key and the error message (`err.message`) as the value – then, it will return
    the `error` object. The next `if` block will check whether the error is a generic
    `Error` type, and if so, return the `error.message` value – otherwise, it will
    return the `error` variable as a string. This will provide a more ergonomic way
    of handling errors for a quick prototype website.
  prefs: []
  type: TYPE_NORMAL
- en: Those are all of the modifications that are necessary for managing flights and
    creating flight tickets. The next step is to set the foundation for our static
    assets and secure our admin dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Express’ static middleware and securing the admin interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before exposing our application to the general public, we will need to secure
    the admin dashboard routes, along with exposing the static assets for frontend
    development. First, we will want to create a new directory with an empty file
    located at `public/index.xhtml`. After that, we can start making modifications
    to the `index.js` file (within the project’s root directory). At the top, we will
    need Node.js’ path module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Just below the `app.use(''/graphql'', server)` block, we will want to tell
    Express to serve static assets that are found within the public directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Express will try to find a matching file with the associated route in the public
    directory before cascading down to our API routes (for example, `/airplanes` or
    `/flights`). The reason why we use `path.join` here is to avoid mismatches from
    relative paths, which allows us to run the application from any directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will want to secure our admin dashboard – in the name of brevity,
    we will use the HTTP authentication method. This will require us to install the
    `express-basic-auth` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the requirement at the top of `index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the `app.use(adminJs.options.rootPath, router)` block with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This will tell Express to ask for a username and password combination (`admin`
    and `supersecret` respectively) when accessing the AdminJS root path. Now, when
    we start our application and head over to `http://localhost:3000/admin`, we should
    be greeted by a login dialog similar to that in *Figure 10.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Admin login ](img/Figure_10.01_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Admin login
  prefs: []
  type: TYPE_NORMAL
- en: Now that our AdminJS routes are secure, we can start creating the frontend page
    that our customers will see when they visit the application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In a real-world scenario application, instead of using basic authentication,
    we would use another form of authentication such as JSON Web Tokens or a Single
    Sign-On Service.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a page to list and book flights
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this application, we will be requiring two external libraries to help build
    the frontend components for the application. The first library is **Bulma**, which
    is a CSS framework designed for quick prototyping and doesn’t require its own
    JavaScript library. For more information on Bulma, you can visit its website,
    located at [https://bulma.io/](https://bulma.io/). The next library is **AlpineJS**,
    which is a framework that helps us avoid writing JavaScript to modify states or
    behaviors by using HTML tags and markup. More information can be found at [https://alpinejs.dev/](https://alpinejs.dev/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Other fantastic frontend frameworks that can be used instead of AlpineJS include
    VueJS, React, or Deepkit. AlpineJS was chosen for this book due to its minimal
    setup and requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us start with the bare necessities, the HTML for a simple header section
    of the website:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within `public/index.xhtml`, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the first `<section>`, we will want to add another with a container separated
    by two columns as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `x-data` attribute will tell AlpineJS what kind of shape our model and data
    will hold. This data will be propagated down to children elements. The `x-init`
    attribute will run upon initialization of the element and will fetch from our
    API calling `/flights`. Afterward, we take the results and convert them into a
    JSON object and then we assign the JSON response to the `flights` array within
    our `x-data` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first column, from the section that we just created, we will want to
    create a table that renders all of the available flights:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: AlpineJS will recognize the `x-for` attribute, which operates similarly to `for`
    loops in other languages – anything inside of that block will be rendered for
    each iteration. If the `flights` array is empty, then the `template` block will
    not be rendered. The `x-on:click` attribute will add a click event listener to
    the `button` element, which will assign the selected variable (part of our `x-data`
    model from the parent element) to the associated flight entry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will want to create the logic for handling our form submission. Just
    above the closing body tag (`</body>`), we will want to add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `data`, `formMessages`, and `loading` variables are all states for AlpineJS.
    We can choose whatever names we want, as it does not matter for AlpineJS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for the submission event handling part, just below the `loading: false`
    block, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once the submit event has been invoked, a `POST` `/book-flight` request is made
    with the necessary JSON headers and body parameters. The `this.selected.id` variable
    will reference our parent’s element’s `x-data` model.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the fetch, we will need to handle the appropriate responses. Let us start
    with a successful path and add the following code just after the fetch block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method will check whether the data is JSON or plain text. Then, it will
    check whether the response is OK (and return a rejected promise if it returned
    errors). If the ticket was successfully created, we will reset the email, name,
    and seat to their initial values and set `success` to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We are setting the name and email to empty strings in the previous example to
    clear out the current form’s data. If we were to omit these explicit values, then
    AlpineJS would show the name and email inputs with their previous values when
    the `flightForm` appears on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we can add the `catch` and `finally` blocks and close the remaining
    script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The caught error will propagate itself to `formMessages` as an array and regardless
    of success or failure, we will want to use the `finally` block to set the loading
    state to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s return to the section with the two columns that we created earlier –
    in the second column, we will want to add a success message as well as the form
    itself. We will start with a section that displays information about the currently
    selected flight for our form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `x-show` attribute will hide an element if the value yields as `true`. The
    next few elements will use the data from our selected object property from the
    parent element’s `x-data` model. This element should be hidden until we select
    a flight. The `x-text` attribute will tell AlpineJS to render the element’s `innerText`
    to the value associated with the attribute (for example, `selected.originAirport`,
    or `selected.departureTime`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the `hero` section is setup, we will add a form for the success message
    when a flight is successfully booked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We encapsulated the states of `flightForm` and the events within the `<form>`
    tag. The `@submit.prevent="submit"` attribute will tell AlpineJS to prevent bubble
    propagation when submitting the event and to use our `submit` function inside
    of the `flightForm` method.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will check to see whether `success` is `true` and if so, show the order
    confirmation section. We will want some way to reset the state once a client has
    purchased a ticket (in case they want to purchase another ticket), which is what
    the `x-on:click` event does when we click the **OK** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for the actual form, we will check to see whether `data.success` is `false`
    and if so, show the form with some basic fields. Inside the same `form` attribute,
    add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `x-model` attribute will bind the input’s value with the `x-data` object
    (for example, `x-model="data.email"` will associate itself with the `data.email`
    attribute of `flightForm`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Just below this code, we can add the call-to-action buttons for purchasing
    a ticket or canceling the order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `:disabled` attribute is an AlpineJS shorthand code for disabling a particular
    element under a specific condition (in our case, this would be the loading variable).
    Clicking on the `data.success` variable to `false`, and make `formMessages` into
    an empty array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can add a template for handling our `formMessages` variable and
    close the remaining HTML tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our frontend application should now be complete. If we visit `http://localhost:3000/`,
    it should look similar to *Figure 10.2*. Clicking on the **Book Flight** button
    should generate something similar to *Figure 10.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Welcome to Avalon Airlines! ](img/Figure_10.02_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Welcome to Avalon Airlines!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Booking a flight ](img/Figure_10.03_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Booking a flight
  prefs: []
  type: TYPE_NORMAL
- en: 'When we click on **Purchase Ticket** without entering any information, we should
    be greeted with a few warnings, as shown in *Figure 10.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Warnings from Sequelize ](img/Figure_10.04_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Warnings from Sequelize
  prefs: []
  type: TYPE_NORMAL
- en: 'When we enter in the appropriate information, the application will create a
    new customer and boarding ticket along with a success message, as shown in *Figure
    10.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – The success message ](img/Figure_10.05_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – The success message
  prefs: []
  type: TYPE_NORMAL
- en: 'Visiting the admin dashboard will confirm that our ticket and customer account
    were created successfully. We can see the boarding tickets at `http://localhost:3000/admin/resources/BoardingTickets`
    (remember to log in with appropriate credentials), similar to *Figure 10.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – The admin dashboard showing the boarding tickets ](img/Figure_10.06_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – The admin dashboard showing the boarding tickets
  prefs: []
  type: TYPE_NORMAL
- en: It looks as though our application is ready to be deployed. In the next section,
    we will go over the requirements for setting up an environment on a cloud application
    platform such as Fly.io.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we begin, we will want to make sure our project is initialized as a
    git repository, if your machine does not have git installed you may find instruction
    on how to install the binary here [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).
    If you’ve been following along, and haven’t yet initialized your project as a
    git repository, you can do so by running the following command in your project’s
    root directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: For the deployment process, we will use a cloud hosting service called **Fly.io**
    ([https://fly.io/](https://fly.io/)). Fly.io offers a useful command line tool
    to help us register and authenticate into an account in addition to making application
    deployments easier. Detailed instructions on getting started with Fly.io’s CLI
    can be found at [https://fly.io/docs/hands-on/install-flyctl/](https://fly.io/docs/hands-on/install-flyctl/).
  prefs: []
  type: TYPE_NORMAL
- en: 'For MacOS users, with Homebrew, we can install the binary with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Linux users can install the binary with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'For Window users, Fly.io recommends using the PowerShell for downloading the
    binary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Once the binary installation has been completed, we will need to login, or register
    a new account, and then create a new application. If you have not created your
    free Fly.io account previously, we can use the following command to get started
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can authenticate ourselves if we had registered an account
    previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'After we have authenticated, we can now deploy our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will ask us for an application name and region which we can leave
    these values as blank or its default value. We will also be asked if we want to
    create a Postgres database and deploy the application right away which we should
    decline by entering in the “n” key as a response. The following should look similar
    to your screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Don’t deploy the application just yet. We will need to enable MySQL with our
    Fly.io application first. At the moment, Fly.io does not offer a way to sidecar
    a MySQL database within the same application as our web application. The solution
    for this is to create a separate a Fly.io application with MySQL only.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the project’s root directory, we will want to create a new folder called,
    “fly-mysql” and run the following command within that folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Respond to the questions the same way we originally did in the previous `fly
    launch` command. Now, our database will need to be stored somewhere, so let us
    begin by creating a volume on Fly.io and choosing the same region as the previous
    step. Within the *fly-mysql* directory run the following command to create a new
    volume:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The “--size” parameter for `fly volumes create <name>` references the number
    of gigabytes as its unit. For more information about the `volumes` Fly.io subcommand
    more information can be found at [https://fly.io/docs/reference/volumes/](https://fly.io/docs/reference/volumes/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can set our passwords for the MySQL instance (replace “password” with
    something more appropriate):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Throughout this process, Fly.io has created a `fly.toml` file for its applications
    (one for our web application in the project’s root directory and another for MySQL
    in the `fly-mysql` directory). This is similar to Heroku’s `Procfile` or CloudFlare’s
    `wrangler.toml` file. Within the fly.toml file we will want to replace its contents,
    after the first line (the application’s name) or starting from the `kill_signal`
    line, with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'After modifying the file’s contents, we can scale our MySQL application to
    have 256 MB of RAM and deploy the MySQL instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, going back to the project’s root directory, we can add a `DATABSE_URL`
    environment secret to our web application’s Fly.io configuration by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Replace `YOUR_PASSWORD` with the password that was previously set for the MySQL’s
    application’s `MYSQL_PASSWORD` secret. Your MySQL’s application name should be
    available in the `fly-mysql/fly.toml` file marked with the `app` key.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you lose track of your application’s names, the Fly.io CLI provides a way
    to list all of your account’s application using the `flyctl apps list` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to make some modifications to the `package.json` file. Since the
    application’s builder is using Heroku’s buildpacks, the application will be built
    with whatever the latest `start` script by default which currently uses nodemon.
    We can ensure the application is built with the proper Node.js version, and removing
    the nodemon dependency by replacing the `start` script within `package.json` to
    look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Now, for when we are developing the application locally, we will want to execute
    `npm run dev` instead of `npm run start`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: More information, and caveats, for Heroku’s Node.js buildpack can be found at
    [https://devcenter.heroku.com/articles/nodejs-support](https://devcenter.heroku.com/articles/nodejs-support).
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Avalon Airlines project, we would need to open and modify the `config/index.js`
    file and replace the production object with the appropriate database connection
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Fly.io will deploy within a container cluster that exposes ports from a dynamic
    range. Due to this stipulation, we are required to modify the `app.listen(3000,
    …)` at the bottom of `index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'This will use the `PORT` environment variable, and default to a value of 3000
    if the environment variable is not found, exposing our Express application properly
    on Fly.io’s ecosystem. There is one more change on the project root directory
    within the `fly.toml` file we will need to replace the `[env]` block with the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Everything else should remain the same, and now, we can deploy and open our
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You may receive a similar error as, “Cannot find module 'sequelize',” this can
    be from a third-party application dependency such as Admin.js. As a temporarily
    solution we can manually install, and save, the original Sequelize library by
    entering `npm i sequelize` into your terminal within the projects directory and
    re-deploy your application.
  prefs: []
  type: TYPE_NORMAL
- en: You may notice that the website looks a little bare, we can head over to the
    `/admin` dashboard route and start populating our airplane inventory and flight
    schedules. Once that is done, we can start processing and booking tickets for
    Avalon Airlines!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7 – The Avalon Airlines homepage with a flight scheduled! ](img/Figure_10.7_B17841.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – The Avalon Airlines homepage with a flight scheduled!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went through the process of adding a frontend page with
    the ability to generate a list of flight schedules and create boarding tickets.
    We also learned how to deploy our application to a cloud application environment.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! We have completed the process of becoming familiar with Sequelize
    to deploying a Sequelize-based web application. In a real-world scenario, we would
    want to make a few more adjustments, such as securely storing database credentials,
    setting up transactional emails, adding more pages, processing credit cards, and
    having an actual seating inventory management system. At this point, the rest
    is up to you and only the sky is the limit! Hopefully, this will be a satisfying
    start for you! It certainly should be, because the Avalon Airlines board members
    are pleased so far, and they’ve decided to fund our next round.
  prefs: []
  type: TYPE_NORMAL
