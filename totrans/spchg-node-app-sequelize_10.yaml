- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Deploying a Sequelize Application
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署Sequelize应用程序
- en: After installing an admin dashboard, configuring our web application to book
    flights, and having built a backend server, we are now ready to start developing
    the frontend interface along with deploying the application. Just in time too,
    because our board members want to see some progress, and they would like to see
    a working prototype for purchasing a ticket.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了管理仪表板、配置了我们的Web应用程序以预订航班并构建了后端服务器之后，我们现在可以开始开发前端界面并部署应用程序。正好及时，因为我们的董事会成员希望看到一些进展，并且他们希望看到购买票证的运行原型。
- en: 'Throughout this chapter, and to meet the requirements of our board members,
    we will need to do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，为了满足董事会成员的要求，我们需要执行以下操作：
- en: Refactor some of our current routes and add another route for listing flight
    schedules
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构一些当前的路由并添加另一个列出航班时刻表的路由
- en: Integrate Express’ static middleware and secure the admin interface
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成Express的静态中间件并保护管理界面
- en: Create a page to list and book flights
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个页面来列出和预订航班
- en: Deploy the application to a service such as Fly.io
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序部署到Fly.io等服务
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For the tasks in this chapter, we will be installing the following additional
    software:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的任务，我们将安装以下附加软件：
- en: A version control manager called Git
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为Git的版本控制管理器
- en: The Fly.io CLI for deploying to a cloud application platform
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到云应用程序平台的Fly.io CLI
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/Supercharging-Node.js-Applications-with-Sequelize/tree/main/ch10](https://github.com/PacktPublishing/Supercharging-Node.js-Applications-with-Sequelize/tree/main/ch10).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码文件，地址为[https://github.com/PacktPublishing/Supercharging-Node.js-Applications-with-Sequelize/tree/main/ch10](https://github.com/PacktPublishing/Supercharging-Node.js-Applications-with-Sequelize/tree/main/ch10)。
- en: Refactoring and adding flight schedule routes
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构并添加航班时刻表路由
- en: 'Before we start creating the customer interface for purchasing a boarding ticket,
    we will need to make several adjustments to our code base. Let us begin by creating
    a new file located at `routes/airplanes.js` and moving the `app.post(''/airplanes'',
    …)` and `app.get(''/airplanes/:id'', …)` blocks into that file as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始创建购买登机牌的客户界面之前，我们需要对我们的代码库进行一些调整。让我们首先创建一个位于`routes/airplanes.js`的新文件，并将`app.post('/airplanes',
    …)`和`app.get('/airplanes/:id', …)`块移动到该文件中，如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This route will return an `Airplane` model record based on the primary key,
    which is defined in Express’ Request object (indicated by the `:id` symbol). If
    there were no records to be found, then we will return a `404` (not found) status.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由将根据主键返回一个`Airplane`模型记录，主键在Express的请求对象中定义（由`:id`符号表示）。如果没有找到记录，则返回`404`（未找到）状态。
- en: 'Next, we will take the `createAirplane` code block from `routes/flights.js`
    and move it into the `routes/airplanes.js` file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将从`routes/flights.js`中的`createAirplane`代码块将其移动到`routes/airplanes.js`文件中：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Within `routes/flights.js`, we will want to add a new handler called `flightSchedules`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在`routes/flights.js`中，我们希望添加一个名为`flightSchedules`的新处理程序：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After that, within the `index.js` file, in the project’s root directory, we
    can remove the `app.get(''/'', …)` block and modify the route requiring blocks
    (just above the block that we removed) to match the new method paths as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，在项目根目录下的`index.js`文件中，我们可以删除`app.get('/', …)`块并修改需要匹配新方法路径的路线要求块（在我们删除的块上方）如下：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `app.get(''/airplanes/:id'', …)` block should now look as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.get(''/airplanes/:id'', …)`块现在应如下所示：'
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And below that, we can add the flight schedule route:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面，我们可以添加航班时刻表路由：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we will want to adjust the error returned from the customers model. Within
    `models/customers.js`, replace the existing attributes with the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将想要调整客户模型返回的错误。在`models/customers.js`中，将现有的属性替换为以下代码：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The last modification for flights and booking a ticket involves making some
    adjustments to the `routes/tickets.js` file. First, we will want to add Sequelize’s
    `ValidationError` at the top of the file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于航班和预订票证的最后修改，我们需要对`routes/tickets.js`文件进行一些调整。首先，我们希望在文件顶部添加Sequelize的`ValidationError`：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Since we will be finding, or creating, a customer throughout the booking process,
    we will want to change the `req.body` line to this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在预订过程中查找或创建客户，我们希望将`req.body`行更改为以下内容：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And below that line, we will add the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在此行下方，我们将添加以下内容：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will tell Sequelize to find or create a customer record using the email
    as a key and will hydrate the record with the name (if the record is new) from
    the `POST` request.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉 Sequelize 使用电子邮件作为键来查找或创建一个客户记录，并且将从 `POST` 请求中填充记录的名称（如果记录是新的）。
- en: 'Just above the `await schedule.addBoardingTicket(…)` block, we will want to
    add a method that defines the customer association for the newly created boarding
    ticket:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `await schedule.addBoardingTicket(…)` 块上方，我们希望添加一个定义新创建登机牌客户关联的方法：
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The remaining modification for this file is replacing the `catch` block with
    the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件剩余的修改是将 `catch` 块替换为以下代码：
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This error block will check whether the incoming error is a Sequelize `ValidationError`
    type and if so, will map out the errors to `errorObj` with the column (`err.path`)
    as a key and the error message (`err.message`) as the value – then, it will return
    the `error` object. The next `if` block will check whether the error is a generic
    `Error` type, and if so, return the `error.message` value – otherwise, it will
    return the `error` variable as a string. This will provide a more ergonomic way
    of handling errors for a quick prototype website.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此错误块将检查传入的错误是否为 Sequelize `ValidationError` 类型，如果是，则将错误映射到 `errorObj`，其中列（`err.path`）作为键，错误消息（`err.message`）作为值
    - 然后，它将返回 `error` 对象。下一个 `if` 块将检查错误是否为通用的 `Error` 类型，如果是，则返回 `error.message`
    值 - 否则，它将返回 `error` 变量作为字符串。这将提供一种更方便的方式来处理错误，以便快速原型网站。
- en: Those are all of the modifications that are necessary for managing flights and
    creating flight tickets. The next step is to set the foundation for our static
    assets and secure our admin dashboard.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是管理航班和创建机票所必需的所有修改。下一步是为我们的静态资产打下基础并确保我们的管理仪表板安全。
- en: Integrating Express’ static middleware and securing the admin interface
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成 Express 的静态中间件和确保管理界面安全
- en: 'Before exposing our application to the general public, we will need to secure
    the admin dashboard routes, along with exposing the static assets for frontend
    development. First, we will want to create a new directory with an empty file
    located at `public/index.xhtml`. After that, we can start making modifications
    to the `index.js` file (within the project’s root directory). At the top, we will
    need Node.js’ path module:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在将我们的应用程序公开给公众之前，我们需要确保管理仪表板路由安全，同时公开静态资产以供前端开发使用。首先，我们希望创建一个新目录，并在 `public/index.xhtml`
    中放置一个空文件。之后，我们可以开始修改位于项目根目录中的 `index.js` 文件。在顶部，我们需要 Node.js 的路径模块：
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Just below the `app.use(''/graphql'', server)` block, we will want to tell
    Express to serve static assets that are found within the public directory:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app.use('/graphql', server)` 块下方，我们希望告诉 Express 服务器公共目录中找到的静态资产：
- en: '[PRE13]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Express will try to find a matching file with the associated route in the public
    directory before cascading down to our API routes (for example, `/airplanes` or
    `/flights`). The reason why we use `path.join` here is to avoid mismatches from
    relative paths, which allows us to run the application from any directory.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Express 将在级联到我们的 API 路由（例如 `/airplanes` 或 `/flights`）之前，在公共目录中尝试找到相关路由的匹配文件。我们在这里使用
    `path.join` 的原因是为了避免相对路径的不匹配，这允许我们从任何目录运行应用程序。
- en: 'Next, we will want to secure our admin dashboard – in the name of brevity,
    we will use the HTTP authentication method. This will require us to install the
    `express-basic-auth` package:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们希望确保我们的管理仪表板安全 - 为了简洁起见，我们将使用 HTTP 认证方法。这需要我们安装 `express-basic-auth` 包：
- en: '[PRE14]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the requirement at the top of `index.js`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `index.js` 的顶部添加要求：
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Replace the `app.use(adminJs.options.rootPath, router)` block with the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `app.use(adminJs.options.rootPath, router)` 块替换为以下内容：
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will tell Express to ask for a username and password combination (`admin`
    and `supersecret` respectively) when accessing the AdminJS root path. Now, when
    we start our application and head over to `http://localhost:3000/admin`, we should
    be greeted by a login dialog similar to that in *Figure 10.1*:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉 Express 在访问 AdminJS 根路径时请求用户名和密码组合（分别是 `admin` 和 `supersecret`）。现在，当我们启动应用程序并转到
    `http://localhost:3000/admin` 时，我们应该会看到一个类似于 *图 10.1* 中的登录对话框：
- en: '![Figure 10.1 – Admin login ](img/Figure_10.01_B17841.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – 管理登录](img/Figure_10.01_B17841.jpg)'
- en: Figure 10.1 – Admin login
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – 管理登录
- en: Now that our AdminJS routes are secure, we can start creating the frontend page
    that our customers will see when they visit the application.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 AdminJS 路由已经安全，我们可以开始创建客户在访问应用程序时将看到的前端页面。
- en: Note
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In a real-world scenario application, instead of using basic authentication,
    we would use another form of authentication such as JSON Web Tokens or a Single
    Sign-On Service.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际场景的应用程序中，我们不会使用基本身份验证，而是会使用其他形式的身份验证，例如JSON Web Tokens或单点登录服务。
- en: Creating a page to list and book flights
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个列出和预订航班的页面
- en: For this application, we will be requiring two external libraries to help build
    the frontend components for the application. The first library is **Bulma**, which
    is a CSS framework designed for quick prototyping and doesn’t require its own
    JavaScript library. For more information on Bulma, you can visit its website,
    located at [https://bulma.io/](https://bulma.io/). The next library is **AlpineJS**,
    which is a framework that helps us avoid writing JavaScript to modify states or
    behaviors by using HTML tags and markup. More information can be found at [https://alpinejs.dev/](https://alpinejs.dev/).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个应用程序，我们将需要两个外部库来帮助构建应用程序的前端组件。第一个库是**Bulma**，这是一个为快速原型设计而设计的CSS框架，不需要自己的JavaScript库。有关Bulma的更多信息，您可以访问其网站，位于[https://bulma.io/](https://bulma.io/)。下一个库是**AlpineJS**，这是一个框架，它通过使用HTML标签和标记来帮助我们避免编写JavaScript来修改状态或行为。更多信息可以在[https://alpinejs.dev/](https://alpinejs.dev/)找到。
- en: Note
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Other fantastic frontend frameworks that can be used instead of AlpineJS include
    VueJS, React, or Deepkit. AlpineJS was chosen for this book due to its minimal
    setup and requirements.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用作AlpineJS替代品的其他出色的前端框架包括VueJS、React或Deepkit。AlpineJS被选为这本书的原因是其最小化的设置和需求。
- en: 'Let us start with the bare necessities, the HTML for a simple header section
    of the website:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最基本的需求开始，这是网站简单页眉部分的HTML：
- en: 'Within `public/index.xhtml`, add the following code:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`public/index.xhtml`中，添加以下代码：
- en: '[PRE17]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After the first `<section>`, we will want to add another with a container separated
    by two columns as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个`<section>`之后，我们希望添加另一个带有两个列分隔的容器：
- en: '[PRE18]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `x-data` attribute will tell AlpineJS what kind of shape our model and data
    will hold. This data will be propagated down to children elements. The `x-init`
    attribute will run upon initialization of the element and will fetch from our
    API calling `/flights`. Afterward, we take the results and convert them into a
    JSON object and then we assign the JSON response to the `flights` array within
    our `x-data` attribute.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`x-data`属性将告诉AlpineJS我们的模型和数据将保持什么形状。这些数据将被传播到子元素。`x-init`属性将在元素的初始化时运行，并从我们的API调用`/flights`。之后，我们获取结果并将它们转换为JSON对象，然后我们将JSON响应分配给`x-data`属性中的`flights`数组。'
- en: 'In the first column, from the section that we just created, we will want to
    create a table that renders all of the available flights:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一列，从我们刚刚创建的章节开始，我们希望创建一个表格，以渲染所有可用的航班：
- en: '[PRE19]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: AlpineJS will recognize the `x-for` attribute, which operates similarly to `for`
    loops in other languages – anything inside of that block will be rendered for
    each iteration. If the `flights` array is empty, then the `template` block will
    not be rendered. The `x-on:click` attribute will add a click event listener to
    the `button` element, which will assign the selected variable (part of our `x-data`
    model from the parent element) to the associated flight entry.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: AlpineJS将识别`x-for`属性，它的工作方式与其他语言的`for`循环类似——该块内的任何内容都将为每次迭代渲染。如果`flights`数组为空，则`template`块将不会渲染。`x-on:click`属性将为`button`元素添加一个点击事件监听器，该监听器将选定的变量（来自父元素的`x-data`模型的一部分）分配给相关的航班条目。
- en: 'Next, we will want to create the logic for handling our form submission. Just
    above the closing body tag (`</body>`), we will want to add the following:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将想要创建处理我们的表单提交的逻辑。在关闭`<body>`标签（`</body>`）的上方，我们希望添加以下内容：
- en: '[PRE20]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `data`, `formMessages`, and `loading` variables are all states for AlpineJS.
    We can choose whatever names we want, as it does not matter for AlpineJS.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`data`、`formMessages`和`loading`变量都是AlpineJS的状态。我们可以选择任何我们想要的名称，因为它对AlpineJS来说并不重要。'
- en: 'Now, for the submission event handling part, just below the `loading: false`
    block, add the following:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '现在，对于提交事件处理部分，在`loading: false`块下方添加以下内容：'
- en: '[PRE21]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Once the submit event has been invoked, a `POST` `/book-flight` request is made
    with the necessary JSON headers and body parameters. The `this.selected.id` variable
    will reference our parent’s element’s `x-data` model.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦提交事件被调用，就会发出一个带有必要的JSON头和正文参数的`POST` `/book-flight`请求。`this.selected.id`变量将引用父元素的`x-data`模型。
- en: 'After the fetch, we will need to handle the appropriate responses. Let us start
    with a successful path and add the following code just after the fetch block:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在获取之后，我们需要处理适当的响应。让我们从成功的路径开始，并在获取块之后添加以下代码：
- en: '[PRE22]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This method will check whether the data is JSON or plain text. Then, it will
    check whether the response is OK (and return a rejected promise if it returned
    errors). If the ticket was successfully created, we will reset the email, name,
    and seat to their initial values and set `success` to `true`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将检查数据是否为 JSON 或纯文本。然后，它将检查响应是否为 OK（如果返回错误，则返回一个被拒绝的承诺）。如果机票成功创建，我们将重置电子邮件、名称和座位到它们的初始值，并将
    `success` 设置为 `true`。
- en: Note
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We are setting the name and email to empty strings in the previous example to
    clear out the current form’s data. If we were to omit these explicit values, then
    AlpineJS would show the name and email inputs with their previous values when
    the `flightForm` appears on the screen.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个例子中，我们将名称和电子邮件设置为空字符串以清除当前表单的数据。如果我们省略这些显式值，那么当 `flightForm` 出现在屏幕上时，AlpineJS
    将显示名称和电子邮件输入框及其之前的值。
- en: 'After that, we can add the `catch` and `finally` blocks and close the remaining
    script:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们可以添加 `catch` 和 `finally` 块并关闭剩余的脚本：
- en: '[PRE23]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The caught error will propagate itself to `formMessages` as an array and regardless
    of success or failure, we will want to use the `finally` block to set the loading
    state to `false`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获到的错误将自身传播到 `formMessages` 数组中，无论成功与否，我们都会想要使用 `finally` 块将加载状态设置为 `false`。
- en: 'Let’s return to the section with the two columns that we created earlier –
    in the second column, we will want to add a success message as well as the form
    itself. We will start with a section that displays information about the currently
    selected flight for our form:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到我们之前创建的两个列的部分——在第二个列中，我们想要添加一个成功消息以及表单本身。我们将从一个显示当前选定的航班信息的部分开始：
- en: '[PRE24]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `x-show` attribute will hide an element if the value yields as `true`. The
    next few elements will use the data from our selected object property from the
    parent element’s `x-data` model. This element should be hidden until we select
    a flight. The `x-text` attribute will tell AlpineJS to render the element’s `innerText`
    to the value associated with the attribute (for example, `selected.originAirport`,
    or `selected.departureTime`).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`x-show` 属性会在值返回为 `true` 时隐藏一个元素。接下来的几个元素将使用来自父元素 `x-data` 模型的选中对象属性的数据。此元素应该在选择航班之前隐藏。`x-text`
    属性将告诉 AlpineJS 将元素的 `innerText` 渲染为与属性关联的值（例如，`selected.originAirport` 或 `selected.departureTime`）。'
- en: 'Once the `hero` section is setup, we will add a form for the success message
    when a flight is successfully booked:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦设置了 `hero` 部分，我们将添加一个表单用于成功预订航班时的成功消息：
- en: '[PRE25]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We encapsulated the states of `flightForm` and the events within the `<form>`
    tag. The `@submit.prevent="submit"` attribute will tell AlpineJS to prevent bubble
    propagation when submitting the event and to use our `submit` function inside
    of the `flightForm` method.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `<form>` 标签中封装了 `flightForm` 的状态和事件。`@submit.prevent="submit"` 属性将告诉 AlpineJS
    在提交事件时防止冒泡传播，并在 `flightForm` 方法中使用我们的 `submit` 函数。
- en: Next, we will check to see whether `success` is `true` and if so, show the order
    confirmation section. We will want some way to reset the state once a client has
    purchased a ticket (in case they want to purchase another ticket), which is what
    the `x-on:click` event does when we click the **OK** button.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将检查 `success` 是否为 `true`，如果是，则显示订单确认部分。我们想要有一种方式在客户购买机票后重置状态（以防他们想要购买另一张机票），这就是我们点击
    **OK** 按钮时 `x-on:click` 事件所做的事情。
- en: 'Now, for the actual form, we will check to see whether `data.success` is `false`
    and if so, show the form with some basic fields. Inside the same `form` attribute,
    add the following:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，对于实际的表单，我们将检查 `data.success` 是否为 `false`，如果是，则显示带有一些基本字段的表单。在相同的 `form` 属性中，添加以下内容：
- en: '[PRE26]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `x-model` attribute will bind the input’s value with the `x-data` object
    (for example, `x-model="data.email"` will associate itself with the `data.email`
    attribute of `flightForm`).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`x-model` 属性会将输入的值与 `x-data` 对象绑定（例如，`x-model="data.email"` 将与其关联 `flightForm`
    的 `data.email` 属性）。'
- en: 'Just below this code, we can add the call-to-action buttons for purchasing
    a ticket or canceling the order:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此代码下方，我们可以添加用于购买机票或取消订单的调用操作按钮：
- en: '[PRE27]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `:disabled` attribute is an AlpineJS shorthand code for disabling a particular
    element under a specific condition (in our case, this would be the loading variable).
    Clicking on the `data.success` variable to `false`, and make `formMessages` into
    an empty array.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`:disabled` 属性是 AlpineJS 的简写代码，用于在特定条件下禁用特定元素（在我们的情况下，这将是指示变量）。点击 `data.success`
    变量将其设置为 `false`，并将 `formMessages` 设置为空数组。'
- en: 'Finally, we can add a template for handling our `formMessages` variable and
    close the remaining HTML tags:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以为处理 `formMessages` 变量添加一个模板，并关闭剩余的HTML标签：
- en: '[PRE28]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Our frontend application should now be complete. If we visit `http://localhost:3000/`,
    it should look similar to *Figure 10.2*. Clicking on the **Book Flight** button
    should generate something similar to *Figure 10.3*:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的前端应用程序现在应该完成了。如果我们访问 `http://localhost:3000/`，它应该类似于*图10.2*。点击**预订航班**按钮应该生成类似于*图10.3*的内容：
- en: '![Figure 10.2 – Welcome to Avalon Airlines! ](img/Figure_10.02_B17841.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – 欢迎来到Avalon航空公司！](img/Figure_10.02_B17841.jpg)'
- en: Figure 10.2 – Welcome to Avalon Airlines!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 欢迎来到Avalon航空公司！
- en: '![Figure 10.3 – Booking a flight ](img/Figure_10.03_B17841.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3 – 预订航班](img/Figure_10.03_B17841.jpg)'
- en: Figure 10.3 – Booking a flight
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 预订航班
- en: 'When we click on **Purchase Ticket** without entering any information, we should
    be greeted with a few warnings, as shown in *Figure 10.4*:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击**购买票务**而没有输入任何信息时，我们应该看到一些警告，如图*图10.4*所示：
- en: '![Figure 10.4 – Warnings from Sequelize ](img/Figure_10.04_B17841.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4 – Sequelize 的警告](img/Figure_10.04_B17841.jpg)'
- en: Figure 10.4 – Warnings from Sequelize
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – Sequelize 的警告
- en: 'When we enter in the appropriate information, the application will create a
    new customer and boarding ticket along with a success message, as shown in *Figure
    10.5*:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们输入适当的信息时，应用程序将创建一个新的客户和登机牌，并显示成功消息，如图*图10.5*所示：
- en: '![Figure 10.5 – The success message ](img/Figure_10.05_B17841.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图10.5 – 成功消息](img/Figure_10.05_B17841.jpg)'
- en: Figure 10.5 – The success message
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 – 成功消息
- en: 'Visiting the admin dashboard will confirm that our ticket and customer account
    were created successfully. We can see the boarding tickets at `http://localhost:3000/admin/resources/BoardingTickets`
    (remember to log in with appropriate credentials), similar to *Figure 10.6*:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 访问管理仪表板将确认我们的票务和客户账户已成功创建。我们可以在 `http://localhost:3000/admin/resources/BoardingTickets`（请记住使用适当的凭据登录）查看登机牌，类似于*图10.6*：
- en: '![Figure 10.6 – The admin dashboard showing the boarding tickets ](img/Figure_10.06_B17841.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图10.6 – 显示登机牌的管理仪表板](img/Figure_10.06_B17841.jpg)'
- en: Figure 10.6 – The admin dashboard showing the boarding tickets
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6 – 显示登机牌的管理仪表板
- en: It looks as though our application is ready to be deployed. In the next section,
    we will go over the requirements for setting up an environment on a cloud application
    platform such as Fly.io.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们的应用程序已经准备好部署了。在下一节中，我们将讨论在云应用程序平台（如 Fly.io）上设置环境的要求。
- en: Deploying the application
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署应用程序
- en: 'Before we begin, we will want to make sure our project is initialized as a
    git repository, if your machine does not have git installed you may find instruction
    on how to install the binary here [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).
    If you’ve been following along, and haven’t yet initialized your project as a
    git repository, you can do so by running the following command in your project’s
    root directory:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们需要确保我们的项目已初始化为git仓库，如果你的机器没有安装git，你可以在以下链接中找到如何安装二进制文件的说明[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)。如果你一直在跟随，但尚未将项目初始化为git仓库，你可以在项目的根目录中运行以下命令：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: For the deployment process, we will use a cloud hosting service called **Fly.io**
    ([https://fly.io/](https://fly.io/)). Fly.io offers a useful command line tool
    to help us register and authenticate into an account in addition to making application
    deployments easier. Detailed instructions on getting started with Fly.io’s CLI
    can be found at [https://fly.io/docs/hands-on/install-flyctl/](https://fly.io/docs/hands-on/install-flyctl/).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于部署过程，我们将使用一个名为**Fly.io**的云托管服务([https://fly.io/](https://fly.io/))。Fly.io
    提供了一个有用的命令行工具，可以帮助我们注册和验证账户，同时使应用程序部署更加容易。有关如何开始使用 Fly.io 的 CLI 的详细说明，请参阅[https://fly.io/docs/hands-on/install-flyctl/](https://fly.io/docs/hands-on/install-flyctl/)。
- en: 'For MacOS users, with Homebrew, we can install the binary with this command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于MacOS用户，使用Homebrew，我们可以使用以下命令安装二进制文件：
- en: '[PRE30]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Linux users can install the binary with this command:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 用户可以使用以下命令安装二进制文件：
- en: '[PRE31]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'For Window users, Fly.io recommends using the PowerShell for downloading the
    binary:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 用户，Fly.io 建议使用 PowerShell 下载二进制文件：
- en: '[PRE32]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Once the binary installation has been completed, we will need to login, or register
    a new account, and then create a new application. If you have not created your
    free Fly.io account previously, we can use the following command to get started
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦二进制安装完成，我们需要登录或注册一个新账户，然后创建一个新的应用程序。如果您之前没有创建您的免费 Fly.io 账户，我们可以使用以下命令开始：
- en: '[PRE33]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Alternatively, we can authenticate ourselves if we had registered an account
    previously:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果我们之前已经注册了一个账户，我们可以通过以下方式进行身份验证：
- en: '[PRE34]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'After we have authenticated, we can now deploy our application:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进行身份验证后，现在我们可以部署我们的应用程序：
- en: '[PRE35]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This command will ask us for an application name and region which we can leave
    these values as blank or its default value. We will also be asked if we want to
    create a Postgres database and deploy the application right away which we should
    decline by entering in the “n” key as a response. The following should look similar
    to your screen:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将要求我们输入应用程序名称和区域，我们可以将这些值留空或使用默认值。我们还将被询问是否想要创建一个 Postgres 数据库并立即部署应用程序，我们应该通过输入“n”键作为响应来拒绝。以下内容应与您的屏幕类似：
- en: '[PRE36]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Don’t deploy the application just yet. We will need to enable MySQL with our
    Fly.io application first. At the moment, Fly.io does not offer a way to sidecar
    a MySQL database within the same application as our web application. The solution
    for this is to create a separate a Fly.io application with MySQL only.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 不要立即部署应用程序。我们首先需要通过 Fly.io 应用程序启用 MySQL。目前，Fly.io 不提供在同一个应用程序中作为我们的网络应用程序的 MySQL
    数据库进行 sidecar 的方式。解决方案是创建一个仅包含 MySQL 的单独 Fly.io 应用程序。
- en: 'In the project’s root directory, we will want to create a new folder called,
    “fly-mysql” and run the following command within that folder:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目的根目录中，我们希望在名为“fly-mysql”的新文件夹中创建一个文件夹，并在该文件夹中运行以下命令：
- en: '[PRE37]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Respond to the questions the same way we originally did in the previous `fly
    launch` command. Now, our database will need to be stored somewhere, so let us
    begin by creating a volume on Fly.io and choosing the same region as the previous
    step. Within the *fly-mysql* directory run the following command to create a new
    volume:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以与之前 `fly launch` 命令中相同的方式回答问题。现在，我们的数据库需要存储在某个地方，所以让我们首先在 Fly.io 上创建一个卷，并选择与之前步骤相同的区域。在
    `*fly-mysql*` 目录中运行以下命令以创建一个新的卷：
- en: '[PRE38]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Note
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The “--size” parameter for `fly volumes create <name>` references the number
    of gigabytes as its unit. For more information about the `volumes` Fly.io subcommand
    more information can be found at [https://fly.io/docs/reference/volumes/](https://fly.io/docs/reference/volumes/).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`fly volumes create <name>` 的 “--size” 参数表示以千兆字节为单位的数字。有关 `volumes` Fly.io
    子命令的更多信息，请参阅 [https://fly.io/docs/reference/volumes/](https://fly.io/docs/reference/volumes/)。'
- en: 'Now, we can set our passwords for the MySQL instance (replace “password” with
    something more appropriate):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以为 MySQL 实例设置密码（将“password”替换为更合适的密码）：
- en: '[PRE39]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Throughout this process, Fly.io has created a `fly.toml` file for its applications
    (one for our web application in the project’s root directory and another for MySQL
    in the `fly-mysql` directory). This is similar to Heroku’s `Procfile` or CloudFlare’s
    `wrangler.toml` file. Within the fly.toml file we will want to replace its contents,
    after the first line (the application’s name) or starting from the `kill_signal`
    line, with the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个过程中，Fly.io 为其应用程序创建了一个 `fly.toml` 文件（一个位于项目根目录中的用于我们的网络应用程序，另一个位于 `fly-mysql`
    目录中的用于 MySQL）。这类似于 Heroku 的 `Procfile` 或 CloudFlare 的 `wrangler.toml` 文件。在 `fly.toml`
    文件中，我们希望在第一行（应用程序的名称）或从 `kill_signal` 行开始替换其内容，如下所示：
- en: '[PRE40]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'After modifying the file’s contents, we can scale our MySQL application to
    have 256 MB of RAM and deploy the MySQL instance:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 修改完文件内容后，我们可以将我们的 MySQL 应用程序扩展到拥有 256 MB 的 RAM 并部署 MySQL 实例：
- en: '[PRE41]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, going back to the project’s root directory, we can add a `DATABSE_URL`
    environment secret to our web application’s Fly.io configuration by running the
    following command:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到项目的根目录，我们可以通过运行以下命令将一个名为 `DATABSE_URL` 的环境密钥添加到我们的网络应用程序的 Fly.io 配置中：
- en: '[PRE42]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Replace `YOUR_PASSWORD` with the password that was previously set for the MySQL’s
    application’s `MYSQL_PASSWORD` secret. Your MySQL’s application name should be
    available in the `fly-mysql/fly.toml` file marked with the `app` key.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `YOUR_PASSWORD` 替换为之前为 MySQL 应用程序设置的 `MYSQL_PASSWORD` 密码。您的 MySQL 应用程序名称应在带有
    `app` 键的 `fly-mysql/fly.toml` 文件中可用。
- en: Note
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you lose track of your application’s names, the Fly.io CLI provides a way
    to list all of your account’s application using the `flyctl apps list` command.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您忘记了应用程序的名称，Fly.io CLI 提供了一种使用 `flyctl apps list` 命令列出您账户中所有应用程序的方法。
- en: 'We will need to make some modifications to the `package.json` file. Since the
    application’s builder is using Heroku’s buildpacks, the application will be built
    with whatever the latest `start` script by default which currently uses nodemon.
    We can ensure the application is built with the proper Node.js version, and removing
    the nodemon dependency by replacing the `start` script within `package.json` to
    look like the following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对 `package.json` 文件进行一些修改。由于应用程序的构建器正在使用 Heroku 的构建包，应用程序将默认使用最新的 `start`
    脚本，目前使用 nodemon。我们可以确保应用程序使用正确的 Node.js 版本构建，并通过在 `package.json` 中的 `start` 脚本替换来删除
    nodemon 依赖项，如下所示：
- en: '[PRE43]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Now, for when we are developing the application locally, we will want to execute
    `npm run dev` instead of `npm run start`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们本地开发应用程序时，我们将想要执行 `npm run dev` 而不是 `npm run start`。
- en: Note
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: More information, and caveats, for Heroku’s Node.js buildpack can be found at
    [https://devcenter.heroku.com/articles/nodejs-support](https://devcenter.heroku.com/articles/nodejs-support).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Heroku 的 Node.js 构建包的更多信息以及注意事项，可以在 [https://devcenter.heroku.com/articles/nodejs-support](https://devcenter.heroku.com/articles/nodejs-support)
    找到。
- en: 'From the Avalon Airlines project, we would need to open and modify the `config/index.js`
    file and replace the production object with the appropriate database connection
    values:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Avalon 航空公司项目开始，我们需要打开并修改 `config/index.js` 文件，并用适当的数据库连接值替换生产对象：
- en: '[PRE44]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Fly.io will deploy within a container cluster that exposes ports from a dynamic
    range. Due to this stipulation, we are required to modify the `app.listen(3000,
    …)` at the bottom of `index.js`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Fly.io 将在容器集群中部署，该集群公开动态范围内的端口。由于这一规定，我们被要求修改 `index.js` 底部的 `app.listen(3000,
    …)`：
- en: '[PRE45]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'This will use the `PORT` environment variable, and default to a value of 3000
    if the environment variable is not found, exposing our Express application properly
    on Fly.io’s ecosystem. There is one more change on the project root directory
    within the `fly.toml` file we will need to replace the `[env]` block with the
    following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用 `PORT` 环境变量，如果未找到环境变量，则默认为 3000，正确地在 Fly.io 的生态系统上公开我们的 Express 应用程序。在
    `fly.toml` 文件的项目根目录中，我们还需要进行一项更改，即用以下内容替换 `[env]` 块：
- en: '[PRE46]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Everything else should remain the same, and now, we can deploy and open our
    application:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 其他内容应保持不变，现在，我们可以部署并打开我们的应用程序：
- en: '[PRE47]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Note
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You may receive a similar error as, “Cannot find module 'sequelize',” this can
    be from a third-party application dependency such as Admin.js. As a temporarily
    solution we can manually install, and save, the original Sequelize library by
    entering `npm i sequelize` into your terminal within the projects directory and
    re-deploy your application.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会收到类似“无法找到模块 'sequelize'”的错误，这可能是来自第三方应用程序依赖项，例如 Admin.js。作为一个临时解决方案，我们可以在项目目录中的终端中手动安装并保存原始
    Sequelize 库，方法是输入 `npm i sequelize` 并重新部署您的应用程序。
- en: You may notice that the website looks a little bare, we can head over to the
    `/admin` dashboard route and start populating our airplane inventory and flight
    schedules. Once that is done, we can start processing and booking tickets for
    Avalon Airlines!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到网站看起来有点简陋，我们可以前往 `/admin` 控制台路由并开始填充我们的飞机库存和航班计划。一旦完成，我们就可以开始处理和预订 Avalon
    航空公司的机票了！
- en: '![Figure 10.7 – The Avalon Airlines homepage with a flight scheduled! ](img/Figure_10.7_B17841.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.7 – Avalon 航空公司主页，显示已安排的航班！](img/Figure_10.7_B17841.jpg)'
- en: Figure 10.7 – The Avalon Airlines homepage with a flight scheduled!
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7 – Avalon 航空公司主页，显示已安排的航班！
- en: Summary
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we went through the process of adding a frontend page with
    the ability to generate a list of flight schedules and create boarding tickets.
    We also learned how to deploy our application to a cloud application environment.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了添加具有生成航班计划列表和创建登机牌功能的前端页面的过程。我们还学习了如何将我们的应用程序部署到云应用程序环境中。
- en: Congratulations! We have completed the process of becoming familiar with Sequelize
    to deploying a Sequelize-based web application. In a real-world scenario, we would
    want to make a few more adjustments, such as securely storing database credentials,
    setting up transactional emails, adding more pages, processing credit cards, and
    having an actual seating inventory management system. At this point, the rest
    is up to you and only the sky is the limit! Hopefully, this will be a satisfying
    start for you! It certainly should be, because the Avalon Airlines board members
    are pleased so far, and they’ve decided to fund our next round.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们已经完成了从熟悉 Sequelize 到部署基于 Sequelize 的 Web 应用的过程。在现实场景中，我们可能还想进行一些调整，例如安全存储数据库凭证、设置事务性电子邮件、添加更多页面、处理信用卡以及拥有实际的座位库存管理系统。到目前为止，剩下的就取决于你了，只有天空才是极限！希望这对你来说是一个令人满意的开端！这确实应该是，因为
    Avalon 航空公司的董事会成员到目前为止都很满意，他们已经决定资助我们下一轮。
