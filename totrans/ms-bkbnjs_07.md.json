["```js\n$ npm bundle\n$ npm start\n\n```", "```js\n// get only the index.html file\ngulp.src('app/index.html');\n\n// get all the files with .html extension\ngulp.src('app/*.html');\n\n// get all the .js files available 1 path depth in \n// the app directory\ngulp.src('app/*/*.js');\n\n// get all the .js files in every subdirectory available\ngulp.src('app/**/*.js');\n```", "```js\n$ npm install -g gulp\n\n```", "```js\n$ npm install -save-dev gulp\n\n```", "```js\nvar gulp = require('gulp');\n\ngulp.task('hello', function() {\n  console.log('Hello world!');\n});\n```", "```js\n$ gulp hello\n[22:43:15] Using gulpfile ~/path/to/project/gulpfile.js\n[22:43:15] Starting 'hello'...\nHello world!\n[22:43:15] Finished 'hello' after 118 Î¼s\n\n```", "```js\n$ npm install --save-dev gulp gulp-load-plugins gulp-util\n\n```", "```js\n$ npm install --save-dev jstifywatchify vinyl-source-stream\n\n```", "```js\nvar gulp = require('gulp');\nvar $ = require('gulp-load-plugins')();\nvar browserify = require('browserify');\nvar jstify = require('jstify');\nvar source = require('vinyl-source-stream');\n\n// Bundle files with browserify\ngulp.task('browserify', () => {\n  // set up the browserify instance on a task basis\n  var bundler = browserify({\n    entries: 'app/js/main.js',\n    debug: true,\n    // defining transforms here will avoid crashing your stream\n    transform: [jstify]\n  });\n\n  return bundler.bundle()\n    .on('error', $.util.log)\n    .pipe(source('app.js'))\n    .pipe(gulp.dest('.tmp/js'));\n});\n```", "```js\n$ gulp browserify\n[07:13:18] Using gulpfile ~/path/to/your/project/gulpfile.js\n[07:13:18] Starting 'browserify'...\n[07:13:19] Finished 'browserify' after 1.13 s\n\n```", "```js\n$ npm start\n\n```", "```js\n$ npm install --save-dev vinyl-buffergulp-sourcemaps\n\n```", "```js\n// ...\nvar buffer = require('vinyl-buffer');\n\n// Bundle files with browserify\ngulp.task('browserify', () => {\n  // set up the browserify instance on a task basis\n  var bundler = browserify({\n    entries: 'app/js/main.js',\n    debug: true,\n    // defining transforms here will avoid crashing your stream\n    transform: [jstify]\n  });\n\n  return bundler.bundle()\n    .on('error', $.util.log)\n    .pipe(source('app.js'))\n .pipe(buffer())\n .pipe($.sourcemaps.init({loadMaps: true}))\n // Add transformation tasks to the pipeline here.\n .on('error', $.util.log)\n .pipe($.sourcemaps.write('./'))\n    .pipe(gulp.dest('.tmp/js'));\n});\n```", "```js\n$ npm install --save-dev watchify\n\n```", "```js\n//...\nvar watchify = require('watchify');\n\n// Bundle files with browserify\ngulp.task('browserify-2', () => {\n  // set up the browserify instance on a task basis\n  var bundler = browserify({\n    entries: 'app/js/main.js',\n    debug: true,\n    // defining transforms here will avoid crashing your stream\n    transform: [jstify]\n  });\n\n bundler = watchify(bundler);\n\n var rebundle = function() {\n    return bundler.bundle()\n      .on('error', $.util.log)\n      .pipe(source('app.js'))\n      .pipe(buffer())\n      .pipe($.sourcemaps.init({loadMaps: true}))\n        // Add transformation tasks to the pipeline here.\n        .on('error', $.util.log)\n      .pipe($.sourcemaps.write('./'))\n      .pipe(gulp.dest('.tmp/js'));\n };\n\n bundler.on('update', rebundle);\n\n return rebundle();\n});\n```", "```js\n$ npm install --save-dev browser-sync\n\n```", "```js\n// ...\nvar browserSync = require('browser-sync');\nvar reload = browserSync.reload;\n\ngulp.task('serve', () =>{\n  browserSync({\n    port: 9000,\n    ui: {\n      port: 9001\n    },\n    server: {\n      baseDir: ['.tmp', 'app']\n    }\n  });\n\n  gulp.watch([\n    'app/*.html',\n    'app/**/*.css',\n    '.tmp/**/*.js'\n  ]).on('change', reload);\n});\n```", "```js\n// ...\nvar browserSync = require('browser-sync');\nvar reload = browserSync.reload;\n\ngulp.task('serve', ['browserify'], () => {\n// ...\n});\n```", "```js\n$ npm install --save-dev gulp-nodemon\n\n```", "```js\n// ...\nvar nodemon = require('gulp-nodemon');\n\ngulp.task('express', () => {\n  nodemon({\n    script: 'server/index.js',\n    ignore: ['app']\n  });\n});\n```", "```js\nvar httpProxy = require('http-proxy');\n\ngulp.task('serve', ['browserify', 'express'], () => {\n var serverProxy = httpProxy.createProxyServer();\n\n  browserSync({\n    port: 9000,\n    ui: {\n      port: 9001\n    },\n    server: {\n      baseDir: ['.tmp', 'app'],\n middleware: [\n function (req, res, next) {\n if (req.url.match(/^\\/(api|avatar)\\/.*/)) {\n serverProxy.web(req, res, {\n target: 'http://localhost:8000'\n });\n } else {\n next();\n }\n }\n ]\n    }\n  });\n\n  gulp.watch([\n    'app/*.html',\n    'app/**/*.css',\n    '.tmp/**/*.js'\n  ]).on('change', reload);\n});\n```", "```js\n$ npm install --save-dev http-proxy\n\n```", "```js\n$ npm install --save-dev gulp-useref\n\n```", "```js\n// ...\n\ngulp.task('html', function() {\n  var assets = $.useref.assets();\n\n  return gulp.src('app/*.html')\n    .pipe(assets)\n    .pipe(assets.restore())\n    .pipe($.useref())\n    .pipe(gulp.dest('dist'));\n});\n```", "```js\n<html>\n<head>\n<!-- ... -->\n<!-- build:css(app) css/vendor.css -->\n<link rel=\"stylesheet\" href=\"css/bootstrap.css\">\n<link rel=\"stylesheet\" href=\"css/main.css\">\n<!-- endbuild -->\n<!-- ... -->\n</head>\n<!-- ... -->\n</html>\n```", "```js\n<!-- build:<type>(alternate search path) <path> -->\n... HTML Markup, list of script / link tags.\n<!-- endbuild -->\n```", "```js\n<html>\n<head>\n<!-- ... -->\n<link rel=\"stylesheet\" href=\"css/vendor.css\">\n<!-- ... -->\n</head>\n<!-- ... -->\n</html>\n```", "```js\n$ npm install --save-dev gulp-minify-css\n\n```", "```js\n// ...\nvar minifyCss = require('gulp-minify-css');\n\ngulp.task('html', function() {\n  var assets = $.useref.assets();\n\n  return gulp.src('app/*.html')\n    .pipe(assets)\n .pipe(minifyCss())\n    .pipe(assets.restore())\n    .pipe($.useref())\n    .pipe(gulp.dest('dist'));\n});\n```", "```js\n$ npm install --save-dev gulp-if gulp-uglify\n\n```", "```js\n// ...\n\ngulp.task('html', function() {\n  var assets = $.useref.assets();\n\n  return gulp.src('app/*.html')\n    .pipe(assets)\n .pipe($.if('*.js', uglify()))\n .pipe($.if('*.css', minifyCss()))\n    .pipe(assets.restore())\n    .pipe($.useref())\n    .pipe(gulp.dest('dist'));\n});\n```", "```js\n$ npm install --save-dev gulp-imagemin\n\n```", "```js\ngulp.task('images', function() {\n  gulp.src('app/images/*.{jpg,gif,svg,png}')\n    .pipe($.imagemin())\n    .pipe(gulp.dest('dist/images'));\n});\n```", "```js\n// ...\n\ngulp.task('fonts', function () {\n  return gulp.src([\n    'app/{,styles/}fonts/**/*',\n    'node_modules/bootstrap/dist/fonts/**/*'\n  ])\n    .pipe($.flatten())\n    .pipe(gulp.dest('dist/fonts'));\n});\n```", "```js\n$ npm install --save-dev gulp-flatten\n```", "```js\n$ npm install --save-dev babelify\n\n```", "```js\n$ npm install --save-dev babel-preset-es2015\n\n```", "```js\n// .babelrc\n{\n  \"presets\": [\"es2015\"]\n}\n```", "```js\n// Bundle files with browserify for production\ngulp.task('browserify:dist', function () {\n  // set up the browserify instance on a task basis\n  var bundler = browserify({\n    entries: 'app/js/main.js',\n    // defining transforms here will avoid crashing your stream\n    transform: [babelify, jstify]\n  });\n\n  return bundler.bundle()\n    .on('error', $.util.log)\n    .pipe(source('app.js'))\n    .pipe(buffer())\n    .pipe($.uglify())\n    .pipe(gulp.dest('dist/js'));\n});\n```", "```js\ngulp.task('serve:dist', ['browserify:dist', 'images', 'fonts', 'express'], () => {\n  var serverProxy = httpProxy.createProxyServer();\n\n  browserSync({\n    port: 9000,\n    ui: {\n      port: 9001\n    },\n    server: {\n      baseDir: 'dist',\n      middleware: [\n        function (req, res, next) {\n          if (req.url.match(/^\\/(api|avatar)\\/.*/)) {\n            serverProxy.web(req, res, {\n              target: 'http://localhost:8000'\n            });\n          } else {\n            next();\n          }\n        }\n      ]\n    }\n  });\n});\n```", "```js\n$ gulp serve:dist\n[11:18:04] Using gulpfile ~/Projects/mastering-backbone/ch07/gulpfile.js\n[11:18:04] Starting 'browserify:dist'...\n[11:18:04] Starting 'images'...\n[11:18:04] Finished 'images' after 305 ms\n[11:18:04] Starting 'fonts'...\n[11:18:04] Starting 'express'...\n[11:18:05] Finished 'express' after 141 ms\n[11:18:05] gulp-imagemin: Minified 0 images\n[11:18:05] [nodemon] 1.8.1\n[11:18:05] [nodemon] to restart at any time, enter `rs`\n[11:18:05] [nodemon] watching: *.*\n[11:18:05] [nodemon] starting `node server/index.js`\nExpress server is running on port 8000\n[11:18:08] Finished 'fonts' after 4.04 s\n[11:18:12] Finished 'browserify:dist' after 8.02 s\n[11:18:12] Starting 'serve:dist'...\n[11:18:12] Finished 'serve:dist' after 40 ms\n[11:18:12] [nodemon] restarting due to changes...\n[BS] Access URLs:\n --------------------------------------\n Local: http://localhost:9000\n External: http://192.168.100.4:9000\n --------------------------------------\n UI: http://localhost:9001\n UI External: http://192.168.100.4:9001\n --------------------------------------\n[BS] Serving files from: dist\n[11:18:12] [nodemon] starting `node server/index.js`\nExpress server is running on port 8000\n\n```"]