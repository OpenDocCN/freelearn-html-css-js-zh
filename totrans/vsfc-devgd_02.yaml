- en: Chapter 2. Controllers and Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A set of instructions that can react on the user's interaction with Visualforce
    markup (for example, a button click or a link click) is called as a controller.
    A controller can control the behavior of a page and it can be used to access the
    data which should be displayed on the page.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will introduce you to a few types of controllers and extensions
    that can be used for Visualforce pages. We will learn the types of controllers
    with examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard list controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom controllers and controller extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with large sets of data on a Visualforce page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order of execution of a Visualforce page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation rules and standard controllers or custom controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the transient keyword
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considerations for creating custom controllers and controller extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look closer at controllers and extensions…
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter includes a set of examples to explain the important elements and
    features of Visualforce. Starting from this chapter we will build an order processing
    application. There are four custom objects (API names: `Customer__c`, `Item__c`,
    `Order__c`, `Order_Line__c`) in this application. The following is the E-R diagram
    of an order processing application which we will create on the Force.com platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controllers and Extensions](img/9818_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The E-R diagram of an order processing application
  prefs: []
  type: TYPE_NORMAL
- en: Standard controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Force.com platform provides a few types of controllers. The first one is
    standard controller and every **sObject** has a standard controller. They have
    the same logic and functionality as they are originally used in standard pages.
    Therefore we can use standard controllers with Visualforce pages. For example,
    if we use Contact standard controller for a Visualforce page, we can implement
    the standard `Save` method for Contact without writing any additional Apex code.
    This behavior is the same as implementing the `Save` method on the standard Contact
    edit page.
  prefs: []
  type: TYPE_NORMAL
- en: How to use a standard controller with a Visualforce page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `<apex:page>` tag has an attribute called `standardController` which is
    used to associate a standard controller with a Visualforce Page. The value of
    the `standardController` attribute would be the API name of an sObject:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code shows the usage of the `standardController` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You cannot use the `standardController` and `controller` attributes at the same
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Standard controller actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Visualforce pages, we can define the `action` attribute for the following
    standard Visualforce components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<apex:commandButton>`: This component creates a button that calls an action'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:commandLink>`: This component creates a link that calls an action'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:actionPoller>`: This component periodically calls an action'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:actionSupport>`: This component makes an event (such as `onclick`, `onmouseover`,
    and so on) on another named component and calls an action'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:actionFunction>`: This component defines a new JavaScript function that
    calls an action'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<apex:page>`: This component calls an action when the page is loaded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An action method can be called from the page using the {`!`} notation. For example,
    if your action method's name is `MyFirstMethod`, then you can use the {`!MyFirstMethod`}
    notation for calling the action method from the page markup.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This action method can be from a standard controller or a custom controller
    or a controller extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'A standard controller has a few standard action methods, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`save`: This method inserts/updates a record. Upon successful completion it
    will be redirected to the standard detail page or a custom Visualforce page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quicksave`: This method inserts/updates a record. There are no redirections
    to a detail page or custom Visualforce page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`edit`: This method navigates the user to the edit page for current record.
    Upon successful completion it will be returned to the page that invoked the action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete`: This method deletes the current record. It redirects the user to
    the list view page by selecting the most recently viewed list filter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cancel`: This method cancels an edit operation. Upon successful completion
    it will be returned to the page that invoked the edit action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list`: This method redirects to the list view page by selecting the most recently-viewed
    list filter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, the following page allows us to insert a new customer or update
    an existing customer record. If we are going to use this page to update a customer
    record, then the URL must be specified with the ID query string parameter. Every
    standard controller has a getter method that returns the record specified by the
    ID query string parameter in the page URL. When we click on **Save**, the `save`
    action is triggered on the standard controller, and the details of the customer
    are updated. If we are going to use this page to insert a customer record, then
    the URL must not be specified as a parameter. In this scenario, when we click
    on **Save**, the `save` action is triggered on the standard controller, and a
    new customer record is inserted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The page markup allows you to access fields of a particular sObject by using
    `{!sObjectAPIName.FieldAPIName}`. For example, if you want to access the `Email`
    field of the `Customer` object, the page that uses the `Customer__c` standard
    controller can use `{!Customer__c.Email__c}` to return the value of the `Email`
    field of the customer who is in the current context.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following page allows us to view a customer record. In this page also,
    the URL must be specified in the ID query string parameter. The getter method
    of the `Customer__c` standard controller returns the record specified by the ID
    query string parameter in the page URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To check the accessibility of a particular object for the logged user, you can
    use the `{!$ObjectType.objectname.accessible}` notation. This expression returns
    a Boolean value. For a example, if you want to check the accessibility of the
    `Customer` object, you can use `{!$ObjectType.Customer__c.accessible}`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code explains the usage of object accessibility. According to
    the example, you can see the **Save** button, only if the particular user has
    security permission to access the customer record.
  prefs: []
  type: TYPE_NORMAL
- en: Standard list controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second controller type is the standard list controller which can be used
    for displaying or performing an action on a set of records (including related
    lists, list pages, and mass action pages). It allows us to filter records on a
    particular page. We can use standard list controllers for Account, Asset, Campaign,
    Case, Contact, Contract, Idea, Lead, Opportunity, Order, Product2, Solution, User,
    and all the custom objects.
  prefs: []
  type: TYPE_NORMAL
- en: How to use a standard list controller with Visualforce
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the standard controller, we can specify the `standardController`
    attribute of the `<apex:page>` component. Additionally, we need to specify the
    `recordSetVar` attribute of the `<apex:page>` component.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `standardController` attribute specifies the type of records that we want
    to access. The `recordSetVar` attribute indicates that the page uses a list controller
    and the variable name (used to access data in the record collection) of the record
    collection.
  prefs: []
  type: TYPE_NORMAL
- en: The following markup explains how the page can access a list of records when
    the page is associated with a list controller. In the following example, you can
    refer to a list of customer records.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot illustrates the result of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use a standard list controller with Visualforce](img/9818_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The result page of the customer list example
  prefs: []
  type: TYPE_NORMAL
- en: Standard list controller actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All the standard Visualforce components that have the `action` attribute can
    be used with a Visualforce page with a standard list controller. The usage of
    those components is same as for a standard controller. The following action methods
    are supported by all standard list controllers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`save`: This action method inserts/updates a record. Upon successful completion
    it will be redirected to the standard detail page or custom Visualforce page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quicksave`: This method inserts/updates a record. There are no redirections
    to a detail page or a custom Visualforce page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`List`: This method redirects to the list view page by selecting the most recently
    viewed list filter when the filter ID is not specified by the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cancel`: This method cancels an edit operation. Upon successful completion
    it will be returned to the page which invoked the edit action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`first`: This method displays the first page of records in the set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`last`: This method displays the last page of records in the set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`next`: This method displays the next page of records in the set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`previous`: This method displays the previous page of records in the set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List views in Salesforce standard pages can be used for filtering records that
    are displayed on the page. For example, on the customer home page, you can select
    **start with c view** from the list view dropdown and view the customers whose
    name starts with the letter c. You can implement this functionality on a page
    associated with a list controller.
  prefs: []
  type: TYPE_NORMAL
- en: Pagination can be added to a page associated with a list controller. The pagination
    feature allows you to implement the next and previous actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to create a simple list of customers with a list view and pagination,
    create a page with the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the preceding code is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Standard list controller actions](img/9818_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Viewing customer list with pagination
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, a list controller returns 20 records per page. To control the number
    of records displayed on each page, use a controller extension to set the `pageSize`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Custom controllers and controller extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Custom controllers are used to implement the logic and functionality without
    using a standard controller and controller extensions are used to extend the logic
    and functionality of a standard controller or a custom controller. Custom controllers
    and Controller extension are written using Apex.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding custom controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Custom controllers are used to implement logic and functionality without using
    a standard controller. Custom controllers are written using Apex. The following
    are the instances where you might want to use use a custom controller:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement a completely different functionality without relying on the standard
    controller's behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Override existing functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make new actions for the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customize the navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use HTTP callouts or web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a wizard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a greater control over accessing information on a page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run your page without applying permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Only one controller can be used in a particular page.
  prefs: []
  type: TYPE_NORMAL
- en: Building a custom controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can build a custom controller via the **Setup** page and theVisualforce
    editor. All the administrator and developer functionality are included in the
    **Setup** page, and you can find the **Setup** page from the menu which appears
    after clicking on your name (at the top of the page).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Visualforce editor allows us to edit the markup of a Visualforce page in
    the same window and we can see that the result of the page will also be displayed
    on the same page. This editor has important functionality such as autocompletion,
    syntax highlighting, quick fix features (developers can create components on the
    fly), and compile on save using the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Via the **Setup** page: This can be done by navigating to **Your Name** | **Setup**
    | **Develop** | **Apex Classes** | **New**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Via the Visualforce editor: After creating the page you can specify the custom
    controller''s name in the controller attribute of the `<apex:page>` tag and then
    click on the **Save** button. Then, if you are a developer, the page will be asking
    you to create the class with the name that you entered. Then, the newly-created
    controller will be shown on the Visualforce editor, as shown in the next screenshot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You have the choice to write controller classes using the `sharing` or `without
    sharing` keyword, which is influenced to run the particular page in the system
    mode or user mode.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Building a custom controller](img/9818_02_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Creating a custom controller via the Visualforce editor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following class is an example of custom controllers. This custom controller
    has the functionality for retrieving the existing item list from the `Item__c`
    custom object and adding a new item record. `insertNewItem` is the action method
    of `ItemController`. `ExistingITems` is a list of item properties which is used
    to retrieve the existing item records. The `ExistingITems` property has an overriden
    `get` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A custom controller uses a nonparameterized constructor. You cannot create a
    constructor that includes parameters for a custom controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding controller is associated with the following Visualforce page.
    This page has two `<apex:pageBlock>` components: one for displaying the existing
    item records table and other for inserting new items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Understanding controller extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Controller extensions are used to extend the logic and functionality of a standard
    controller or a custom controller. A controller extension cannot be on a page
    without a standard controller or a custom controller. Controller extensions are
    written using Apex. Use controller extensions when you want to:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep the majority of functionality of a standard or custom controller as it,
    is and add more functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a Visualforce page that should run according to the user's permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a controller extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can build a controller extension in the same way as for building the custom
    controller.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Extensions cannot live by themselves on a page. They can be used on a Visualforce
    page with a custom controller or a standard controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following class is a simple example of a controller extension. This controller
    extension is used to extend the logic and the functionality of the `Order__c`
    custom object''s standard controller. In this extension, we have a one-parameterized
    constructor to fetch the order record from the standard controller. `getRecord()`
    is the method for fetching records from the standard controller. The `prepareFullOrder()`
    method is a custom method that is implemented for querying the order lines of
    a particular order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A controller extension uses one-parameterized constructor with the `ApexPages.StandardController`
    type of argument or a custom controller type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following Visualforce page uses the preceding controller extension. On
    the page, we have a page block with two sections. The first section shows us the
    order header details. The second section is there to show the order lines of a
    particular order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Controller methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are three types of methods which can be used within a custom controller
    or a controller extension:'
  prefs: []
  type: TYPE_NORMAL
- en: Getter methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setter methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Action methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getter methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Developers can use getter methods to display a database or other computed values
    in the Visualforce markup. This means that getter methods are used to pass data
    from Apex controllers to the Visualforce page. There are two ways to define getter
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, getter methods are named as `getVariable`, where the variable is
    the name of the attribute that is returned by the getter method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'A getter method can define an attribute by using the default getter and setter
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The variable can be accessed on the Visualforce page with the `{!}` expression.
  prefs: []
  type: TYPE_NORMAL
- en: Setter methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Setter methods are used to pass user-defined values to the Apex controller.
    Setter methods are defined in the same way as getter methods are defined. The
    following example uses default getter and setter methods to search for items that
    are already in the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the Visualforce page that uses the preceding controller. The
    `Keyword` attribute has the default getter and setter methods for the `<apex:inputText>`
    component, which is used to acquire the user''s input. The `ExistingItems` list
    attribute also has the default getter and setter methods to search and display
    the search result. When the user enters a keyword to search for and clicks on
    the **Search** button, the `SearchItems()` action method will be executed and
    this will acquire the keyword search text and run the query to search for the
    items. Before the action method executes, the keyword setter method will be executed.
    Then the query result will be collected to the `ExistingItems` list attribute
    and then the `ExistingItems` getter method will be executed and the page will
    display the search result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Action methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Action methods are used to implement our custom or extended logic and functionality
    in a custom controller or a controller extension. Action methods can be triggered
    on page events such as button clicks or JavaScript events. In Visualforce pages,
    we can define the action attribute in many standard Visualforce components. The
    components are `<apex:commandButton>`, `<apex:commandLink>`, `<apex:actionPoller>`,
    `<apex:actionSupport>`, `<apex:actionFunction>`, and `<apex:page>`. The preceding
    item search example has an action method called `SearchItems`. `SearchItems` is
    used to query items according to the user input given for item search.
  prefs: []
  type: TYPE_NORMAL
- en: Working with large sets of data on the Visualforce page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On a Visualforce page, we have to work with a single record as well as large
    sets of data. When we work with large sets of data, we may use iteration components
    such as `<apex:pageBlockTable>`, `<apex:repeat>`, and `<apex:dataTable>`. These
    iteration components are limited to a maximum of 1000 items in a collection. Refer
    the search item example for the usage of the iteration component. We have used
    `<apex:pageBlockTable>` in the previous search item example.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Custom controllers and controller extensions adhere to the Apex governor limits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visualforce provides the "read-only mode" feature to overcome the limit on
    the number of rows that can be queried within one request and the limit on the
    number of collection items that can be iterated on the page. There are two ways
    to set up the Visualforce''s read-only mode feature, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Setting the read-only mode for controller methods**: For this setting, we
    can define Visualforce controller methods with the `@ReadOnly` annotation. This
    read-only mode relaxes the number of records queried within one query from 50,000
    to 1 million rows. The `@ReadOnly` annotation for the read-only mode is used in
    JavaScript remoting as the target of remote JavaScript call to load the data set
    for the `<apex:chart>` component and display some values in a component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Setting the read-only mode for an entire page**: This read-only mode can
    be enabled by adding a `true` value for the `readOnly` attribute, which is on
    `<apex:page>.` This read-only mode relaxes the number of records queried within
    one query from 50,000 to 1 million. It also increases the maximum number of items
    in a collection for an iteration component. Because this is a read-only mode,
    you have to note that the page cannot execute any DML operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order of execution of a Visualforce page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Visualforce page has a life cycle or life-time. This time is defined as the
    period between the creation of the page and its destruction during the user session.
    The life cycle is defined by the type of Visuaforce page request and the content
    of the page. There are two types of Visualforce page requests, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Get request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Postback request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order of execution for a Visualforce page's get requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we request a new page by entering a URL or by clicking on a button or
    a link, a get request is created. The following diagram illustrates how a Visualforce
    page interacts with a custom controller or a controller extension during a get
    request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Order of execution for a Visualforce page''s get requests](img/9818_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Order of Execution for Visualforce page's get requests
  prefs: []
  type: TYPE_NORMAL
- en: 'The order of execution is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Constructor methods are called by initiating the controller objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there are any custom components, they are created and constructor methods
    are called on their associated class. If any attribute is specified in a component
    using an expression, those expressions are also evaluated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any `assignTo` attributes and expressions are evaluated. After that, the `action`
    attribute on the `<apex:page>` component is evaluated and all the getter or setter
    methods are called.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the page contains an `<apex:form>` tag, then all of the information representing
    the state of the database is encrypted and saved in the view state between page
    requests. Whenever the page is updated, that view state is also updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the resultant HTML is sent to the browser. If there are any client-side
    technologies (such as JavaScript, and CSS), the browser executes them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Order of execution for a Visualforce page's postback requests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some user interactions (for example, a `save` action triggered by the user''s
    button click) require page updates, typically those page updates are performed
    by postback requests. The following diagram illustrates how a Visualforce page
    interacts with a custom controller or a controller extension during a postback
    request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Order of execution for a Visualforce page''s postback requests](img/9818_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Order of execution for a Visualforce page's postback requests
  prefs: []
  type: TYPE_NORMAL
- en: 'The order is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The view state is decoded and used as the basis for updating the values on the
    page during a postback request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expressions are evaluated and setters are executed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The action is executed. On its successful completion, the data is updated. If
    the postback request redirects the user to the same page, the view state is updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The results are sent to the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we want to execute an action without performing validations on the input
    or data changes on the page, we can use an immediate attribute with the `true`
    value for a particular component.
  prefs: []
  type: TYPE_NORMAL
- en: The postback request can end with a page redirect and sometimes the custom controller
    or the controller extension may be shared on both the originating page and the
    redirected page. If the postback request contains an `<apex:form>` component,
    only the ID query parameter is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `action` attribute of the `<apex:page>` component is evaluated only during
    a get request. Once the user is redirected to another page, the view state and
    controller objects are deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Validation rules and standard controllers/custom controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Validation rules can be applied to custom or standard objects for validating
    data on insert and update operations. When we perform such operations on a Visualforce
    page, it uses a standard controller or a custom controller, and that record may
    cause a validation rule error, which we can display on the Visualforce page as
    we do on standard pages. A validation rule has two options to select the position
    for displaying the error for a particular field. If we choose **top of the page**,
    the error can be displayed by using the `<apex:pageMessages>` or `<apex:messages>`
    component within the `<apex:page>` component. If we choose the **field** option,
    the error will be shown in the associated field residing next to the `<apex:inputField>`
    component. For an example, you can see the sample page given in the *Building
    a custom controller* section.
  prefs: []
  type: TYPE_NORMAL
- en: You can try the example by entering a non-numeric character for the **Unit Price**
    field. An error message will be displayed near to the `Unit_Price__c` field, related
    to the `<apex:inputField>` component.
  prefs: []
  type: TYPE_NORMAL
- en: Using the transient keyword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `transient` keyword is used for declaring variables, and is used in Apex
    classes. Declaring a variable as transient reduces the view state size. Variables
    with the `transient` keyword cannot be saved and should not be transmitted as
    a part of the view state of the particular Visualforce page. Transient variables
    are needed only for the duration of a page request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `transient` keyword is used in a serializable Apex class, which means the
    classes that implement the `Batchable` or `Schedulable` interfaces. The following
    Apex objects are natively considered as `transient`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PageReference`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`XmlStreamClasses`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Collections` (only if the type of object that they hold is automatically marked
    as `transient`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most objects generated by system methods such as `Schema.getGlobalDescribe`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instances of the `JSONParser` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following example has a transient `datatime` variable and a non-transient
    `datatime` variable. This example shows the major feature of transient variables,
    which is that they cannot be saved and should not be a part of the view state.
    When we click on the **Refresh** button, the transient date will be recreated
    but the non-transient date will have its original value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Considerations for creating custom controllers and controller extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you are creating custom controllers and controller extensions, keep the
    following consideration in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: The most important thing to keep in your mind is Apex governor limits.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apex classes can be run in the system mode and user mode by using `without sharing`
    and `with sharing` respectively. Sensitive data can be exposed without sharing
    controllers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `webservice` methods must be defined as global. All other methods are public.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to access the database in less time by using sets, maps, or lists. This
    will increase the efficiency of your code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apex methods and variables are not instantiated in a guaranteed order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You cannot implement **Data Manipulation Language** (**DML**) in the constructor
    method of a controller.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You cannot define the `@future` annotation for any getter method, setter method,
    or constructor method of a controller.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Primitive data types (String, Integer, and so on) are passed by value and non-primitive
    Apex data types (list, maps, set, sObject, and so on) are passed by the reference
    to a component's controller.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we became familiar with types of controllers and extensions.
    We learned the differences and the usage of standard controller, standard list
    controller, custom controller, and controller extension. We learned how to handle
    the code in order work with a large set of data. Further, we have seen the order
    of execution of a Visualforce page, usage of the transient keyword, and the interconnection
    between validation rules and controllers.
  prefs: []
  type: TYPE_NORMAL
