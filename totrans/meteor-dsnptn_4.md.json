["```js\n# /products/client/products.coffee\n\nTemplate.created \"products\", ->\n  @autorun =>\n    tags = Session.get \"products.tags\"\n filter =\n page: Number(FlowRouter.getQueryParam(\"page\")) or 0\n\n    if tags and not _.isEmpty tags\n      _.extend filter,\n        tags:tags\n\n    order = Session.get \"global.order\"\n    if order and not _.isEmpty order\n      _.extend filter,\n        order:order\n\n    @subscribe \"products\", filter\n\nTemplate.products.helpers\n  ...\n\n pages:\n current: ->\n FlowRouter.getQueryParam(\"page\") or 0\n\nTemplate.products.events\n \"click .next-page\": ->\n FlowRouter.setQueryParams\n page: Number(FlowRouter.getQueryParam(\"page\")) + 1\n\n \"click .previous-page\": ->\n if Number(FlowRouter.getQueryParam(\"page\")) - 1 < 0\n page = 0\n else\n page = Number(FlowRouter.getQueryParam(\"page\")) - 1\n\n FlowRouter.setQueryParams\n page: page\n\n```", "```js\n# /products/server/products_pub.coffee\n\nMeteor.publish \"products\", (ops={}) ->\n  limit = 10\n product_options =\n skip:ops.page * limit\n limit:limit\n sort:\n name:1\n\n  if ops.tags and not _.isEmpty ops.tags\n    @relations\n      collection:Tags\n      ... \n          collection:ProductsTags\n          ...\n              collection:Products\n              foreign_key:\"product\"\n options:product_options\n              mappings:[\n                ...\n              ]\n\n  else\n Counts.publish this,\"products\",\n Products.find()\n noReady:true\n\n    @relations\n      collection:Products\n options:product_options\n      mappings:[\n        ...\n      ]\n\n  if ops.order and not _.isEmpty ops.order\n    ...\n\n  @ready()\n```", "```js\nCounts.publish <always this>,<name of count>, <collection to count>, <parameters>\n```", "```js\n# /products/client/products.coffee\n\n...\n\nTemplate.products.helpers\n  pages:\n    current: ->\n      FlowRouter.getQueryParam(\"page\") or 0\n\n    is_last_page: ->\n      current_page = Number(FlowRouter.getQueryParam(\"page\")) or 0\n\n      max_allowed = 10 + current_page * 10\n      max_products = Counts.get \"products\"\n\n      max_allowed > max_products\n\n//- /products/client/products.jade\n\ntemplate(name=\"products\")\n  div#products.template\n    ...\n      section#featured_products\n        div.container\n          div.row\n            br.visible-xs\n            //- PAGINATION\n            div.col-xs-4\n              button.btn.btn-block.btn-primary.previous-page\n                i.fa.fa-chevron-left\n\n            div.col-xs-4\n              button.btn.btn-block.btn-info {{pages.current}}\n\n            div.col-xs-4\n              unless pages.is_last_page\n                button.btn.btn-block.btn-primary.next-page\n                  i.fa.fa-chevron-right\n\n            div.clearfix\n            br\n\n            //- PRODUCTS\n            +momentum(plugin=\"fade-fast\")\n                         ...\n```", "```js\n# /products/server/products_pub.coffee\n\nMeteor.publish \"products\", (ops={}) ->\n  limit = 10\n  product_options =\n    skip:ops.page * limit\n    limit:limit\n    sort:\n      name:1\n\n filter = {}\n\n if ops.search and not _.isEmpty ops.search\n _.extend filter,\n name:\n $regex: ops.search\n $options:\"i\"\n\n  if ops.tags and not _.isEmpty ops.tags\n    @relations\n      collection:Tags\n      mappings:[\n          ...\n          collection:ProductsTags\n          mappings:[ \n              collection:Products\n filter:filter\n              ...\n      ]\n\n  else\n    Counts.publish this,\"products\",\n Products.find filter\n      noReady:true\n\n    @relations\n      collection:Products\n filter:filter\n      ...\n\n  if ops.order and not _.isEmpty ops.order\n    ...\n\n  @ready()\n```", "```js\n# /products/client/products.coffee\n\nTemplate.created \"products\", ->\n  @autorun =>\n    ops =\n      page: Number(FlowRouter.getQueryParam(\"page\")) or 0\n      search: FlowRouter.getQueryParam \"search\"\n    ...\n\n    @subscribe \"products\", ops\n\nTemplate.products.helpers\n  ...\n\n  pages:\n    search: ->\n      FlowRouter.getQueryParam \"search\"\n\n    ...\n\nTemplate.products.events\n  ...\n\n  \"change .search\": (event) ->\n    search = $(event.currentTarget).val()\n\n    if _.isEmpty search\n      search = null\n\n    FlowRouter.setQueryParams\n      search:search\n      page:null\n```", "```js\n//- /products/client/products.jade\n\ntemplate(name=\"products\")\n  div#products.template\n    header#promoter\n      ...\n\n    div#content\n      section#features\n        ...\n\n      section#featured_products\n        div.container\n          div.row\n            //- SEARCH\n            div.col-xs-12\n              div.form-group.has-feedback\n                input.input-lg.search.form-control(type=\"text\" placeholder=\"Search products\" autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\" value=\"{{pages.search}}\")\n                span(style=\"pointer-events:auto; cursor:pointer;\").form-control-feedback.fa.fa-search.fa-2x\n\n            ...\n```", "```js\nRoles.userIsInRole <user-id OR user-object>, [<list of allowed roles>], <group>\n```", "```js\nif Roles.userIsInRole Meteor.userId(), [\"admin\",\"manager\"]\n  # allow\n```", "```js\n# /_globals/server/initial_setup.coffee\n\nMeteor.startup ->\n  # Users\n  if Meteor.users.find().count() is 0\n    user = Accounts.createUser\n      email:\"you@email.com\"\n      password:\"1234\"\n\n    Roles.addUsersToRoles user,[\"admin\"]\n```", "```js\n# /login/login_route.coffee\n\nFlowRouter.route \"/login\",\n  name:\"login\"\n  triggersEnter:[RT.non_user_only]\n  action: ->\n    BlazeLayout.render \"layout\",\n      content:\"login\"\n```", "```js\n# /_globals/router/config.coffee\n\nif Meteor.isClient\n  BlazeLayout.setRoot 'body'\n\n  FlowRouter.wait()\n  Meteor.startup ->\n    # Initialize roles before FlowRouter\n    Tracker.autorun (computation) ->\n      if Roles.subscription.ready() and not FlowRouter._initialized\n        FlowRouter.initialize()\n        computation.stop()\n```", "```js\n# /_globals/router/triggers.coffee\n\n@RT =\n  non_user_only: (context,redirect) ->\n    if Meteor.userId()\n      if context and context.oldRoute\n        redirect context.oldRoute.path\n      else\n        redirect \"/\"\n\n  admin_only: (context,redirect) ->\n    if not Roles.userIsInRole Meteor.userId(),[\"admin\"]\n      if context and context.oldRoute\n        redirect context.oldRoute.path\n      else\n        redirect \"/\"\n```", "```js\n# /_globals/router/triggers.coffee\n\n@RT =\n  non_user_only: (context,redirect) ->\n    ...\n\n  admin_only: (context,redirect) ->\n    ...\n\nFlowRouter.triggers.enter [RT.admin_only], except:[\"products\",\"login\",\"cart\",\"order_quantity\"]\n```", "```js\n//- /login/client/login.jade\n\ntemplate(name=\"login\")\n  div#login.template\n    div.vertical-align.container\n      div.row\n        div.col-xs-12.col-sm-6.col-sm-offset-3\n          form.login\n            div.form-group\n              label Email\n              input.email.input-lg.form-control.text-center(type=\"text\" placeholder=\"email\" value=\"{{email}}\" autocapitalize=\"off\" autocorrect=\"off\" autocomplete=\"off\")\n\n            div.form-group\n              label Password\n              input.password.input-lg.form-control.text-center(type=\"password\" placeholder=\"password\")\n\n            if error\n              div.row\n                div.col-xs-12\n                  div.alert.alert-warning {{error}}\n\n            button.login.btn.btn-block.btn-primary.btn-lg Log In\n\n# /login/client/login.coffee\n\nTemplate.created \"login\", ->\n  @error = new ReactiveVar false\n\nTemplate.login.events\n  \"submit .login\": (event,i) ->\n    event.preventDefault()\n    email = $(\".email\").val()\n    pw = $(\".password\").val()\n\n    # Check Email\n    if email and not _.isEmpty email.trim()\n      email = email.replace /\\s/g,\"\"\n      email = email.trim().toLowerCase()\n    else\n      i.error.set \"Email is invalid\"\n      return\n\n    # Check Password\n    if not pw or _.isEmpty pw\n      i.error.set \"Password is invalid\"\n      return\n\n    i.error.set false\n\n    Meteor.loginWithPassword email, pw, (error) ->\n      if not error\n        i.error.set false\n        $(\"input\").val \"\"\n        FlowRouter.go \"dashboard\"\n      else\n        i.error.set error.reason\n\nTemplate.login.helpers\n  \"error\": ->\n    Template.instance().error.get()\n```", "```js\n# Malicious User\nProducts.update(\"productid\",{$set:{you:\"have been modified\"}})\n```", "```js\n# /_globals/lib/collections/orders/orders_collection.coffee\n\n@Orders = new Mongo.Collection \"orders\"\n\nOrders.attachSchema new SimpleSchema\n  status:\n    type:String\n    allowedValues:[\"new\",\"pending\",\"complete\"]\n\n  total_products:\n    type:Number\n\n  subtotal:\n    type:Number\n\n  tax_total:\n    type:Number\n    optional:true\n\n  total:\n    type:Number\n\n  date_created:\n    type:Number\n    autoValue: ->\n      if @isInsert\n        return Date.now()\n      if @isUpsert\n        $setOnInsert:Date.now()\n\n@OrderDetails = new Mongo.Collection \"order_details\"\n\nOrderDetails.attachSchema new SimpleSchema\n  order:\n    type:String\n\n  product:\n    type:String\n\n  price:\n    type:Number\n\n  quantity:\n    type:Number\n\n  subtotal:\n    type:Number\n\n  tax:\n    type:Object\n    optional:true\n\n  \"tax.rate\":\n    type:Number\n\n  \"tax.amount\":\n    type:Number\n\n  total:\n    type:Number\n```", "```js\npeople:\n  type:[Object]\n\n\"people.$.name\":\n  type:String\n\n\"people.$.age\":\n  type:Number\n```", "```js\n/_globals/lib/collections/orders/server/orders_permissions.coffee\n\nMeteor.startup ->\n  # Admin may only modify status\n  Orders.permit \"update\"\n    .ifLoggedIn()\n    .ifHasRole \"admin\"\n    .onlyProps \"status\"\n    .apply()\n```", "```js\n  Orders.permit \"update\"\n    .ifLoggedIn()\n    .ifHasRole \"admin\"\n    .onlyProps \"status\"\n    .apply()\n\n  Orders.permit [\"insert\",\"remove\"]\n    .never()\n    .apply()\n```", "```js\nSecurity.defineMethod <function name>,\n  transform:<function>\n  deny: <function (type, args, userid, doc, fields, modifier)>\n```", "```js\n# /_globals/server/security.coffee\n\nSecurity.defineMethod \"ifUserIsOwner\",\n  deny: (type,args,user,doc) ->\n    user isnt (doc.user or doc._id)\n```", "```js\n# /_globals/server/security.coffee\n\nSecurity.defineMethod \"ifUserIsOwner\",\n  ...\n\nSecurity.permit([\"update\"]).collections([Meteor.users])\n  .ifUserIsOwner()\n  .onlyProps [\"emails\"]\n  .apply()\n\nSecurity.permit([\"insert\",\"update\",\"remove\"]).collections([Meteor.users])\n  .ifHasRole \"admin\"\n  .apply()\n```", "```js\n# /orders/cart/cart_methods.coffee\n\nMeteor.methods\n  \"cart.add-to-cart\": (ops={}) ->\n    # Validate data\n    check ops,\n      order:Match.Optional(Match.OneOf(String,null))\n      product:String\n      quantity:Number\n\n    ...\n\n    # Insert Order if it doesn't exist\n    unless order\n      ...\n    else\n      # Validate order status\n      if order.status isnt \"new\"\n        throw new Meteor.Error 405, \"Not Allowed\"\n\n      order_id = order._id\n\n    ...\n```", "```js\ncheck <value>, <pattern>\n```", "```js\n# /orders/cart/cart_methods.coffee\n\nMeteor.methods\n  \"cart.add-to-cart\": (ops={}) ->\n    # Validate data\n    ...\n\n    # Insert Order if it doesn't exist\n    unless order\n      ...\n      if Meteor.isServer\n        Meteor.defer ->\n          Email.send\n            to:\"you@email.com\"\n            from:\"me@email.com\"\n            subject:\"New Customer!\"\n            text:\"Someone has created a new order\"\n\n    ...\n```", "```js\nmeteor add browser-policy\n```", "```js\n# /_globals/server/security.coffee\n\nMeteor.startup ->\n  # Prevent webapp from loading on an iframe\n  BrowserPolicy.framing.disallow()\n\n  # Prevent inline scripting\n  BrowserPolicy.content.disallowInlineScripts()\n\n  trusted_sites = [\n    '*.google-analytics.com'\n    '*.mxpnl.com'\n    'placehold.it'\n    'placeholdit.imgix.net'\n  ]\n\n  _.each trusted_sites, (trusted_site) ->\n    BrowserPolicy.content.allowOriginForAll \"https://#{trusted_site}\"\n```", "```js\n# /_globals/lib/collections/stripe/payments_collection.coffee\n\n@Payments = new Mongo.Collection \"payments\"\n\n# /_globals/lib/collections/stripe/server/payments_permissions.coffee\n\nMeteor.startup ->\n  # Nobody may modify\n  Payments.permit [\"insert\",\"remove\",\"update\"]\n    .never()\n    .apply()\n\n# /_globals/server/stripe.coffee\n\n@Stripe =\n  secret:\"secret-key\"\n  publishable:\"publishable-key\"\n\n# /stripe/server/payments.coffee\n\n_.extend Stripe,\n  get_payments: (ops={}) ->\n    params =\n      limit:100\n\n    if ops.starting_after_id\n      _.extend params,\n        starting_after:ops.starting_after_id\n\n    HTTP.get \"https://api.stripe.com/v1/charges\",\n      headers:\n        \"Authorization\":\"Bearer #{Stripe.secret}\"\n      params:params\n      (error,result) ->\n        if not error\n          _.each result.data?.data, (charge) ->\n            Payments.upsert _id:charge.id,\n              $set:charge\n\n          if result.data.has_more\n            last = _.last result.data.data\n            Stripe.get_payments\n              starting_after_id:last.id\n\n        else\n          throw new Meteor.Error error\n\nMeteor.setInterval Stripe.get_payments,3600000\n```", "```js\n# /stripe/server/payments.coffee\n\n_.extend Stripe,\n payments:\n    get: (ops={}) ->\n if not Stripe.payments.is_running\n Stripe.payments.is_running = true\n\n        params =\n          limit:100\n\n        if ops.starting_after_id\n          _.extend params,\n            starting_after:ops.starting_after_id\n\n        HTTP.get \"https://api.stripe.com/v1/charges\",\n          headers:\n            \"Authorization\":\"Bearer #{Stripe.secret}\"\n          params:params\n          (error,result) ->\n            if not error\n              _.each result.data?.data, (charge) ->\n                Payments.upsert _id:charge.id,\n                  $set:charge\n\n              if result.data.has_more\n                last = _.last result.data.data\n                Stripe.payments.get\n                  starting_after_id:last.id\n else\n Stripe.payments.is_running = false\n\n            else\n Stripe.payments.is_running = false\n              throw new Meteor.Error error\n\n set_interval: ->\n Meteor.setInterval Stripe.payments.get,360000\n\n is_running:false\n\nStripe.payments.set_interval()\n```", "```js\n# /stripe/server/payments.coffee\n\n_.extend Stripe,\n  payments:\n    get: (ops={}) ->\n      if not Stripe.payments.is_running\n        Stripe.payments.is_running = true\n\n        params =\n          limit:100\n\n        if ops.starting_after_id\n          _.extend params,\n            starting_after:ops.starting_after_id\n else\n date_after = moment().utc().startOf(\"day\").subtract(10,\"days\").unix()\n latest_payment = Payments.findOne created:$gte:date_after,\n sort:\n created:1\n\n if latest_payment\n _.extend params\n starting_after:latest_payment.id\n        ...\n```", "```js\n# /_globals/server/stripe.coffee\n\n@Stripe =\n  secret:\"secret\"\n  publishable:\"public\"\n  hooks:\n    v1:new Restivus\n      apiPath:\"stripe\"\n      version:\"v1\"\n```", "```js\n# /stripe/server/endpoints/charges.coffee\n\nMeteor.startup ->\n  Stripe.hooks.v1.addRoute \"charge\",\n    post: ->\n      payment = @request.body.data?.object\n      if payment\n        Payments.upsert _id:payment.id,\n          $set:payment\n\n      @done()\n```"]