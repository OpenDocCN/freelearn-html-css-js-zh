- en: Chapter 4. Asynchronous Testing – AJAX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 异步测试 – AJAX
- en: Inevitably, there comes a time in every JavaScript application when asynchronous
    code needs to be tested.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个JavaScript应用程序中，不可避免地会有一个时刻需要测试异步代码。
- en: Asynchronous means that you cannot deal with it in a linear fashion—a function
    might return immediately after its execution, but the result will come later,
    usually through a callback.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 异步意味着你不能以线性方式处理它——一个函数可能在执行后立即返回，但结果会在稍后到来，通常是通过回调。
- en: 'This is a very common pattern while dealing with AJAX requests, for example,
    through jQuery:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理AJAX请求时，这是一个非常常见的模式，例如，通过jQuery：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this chapter, we are going to learn the different ways Jasmine allows us
    to write tests for asynchronous code.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习Jasmine允许我们以不同方式编写异步代码测试的不同方法。
- en: Acceptance criterion
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验收标准
- en: 'To demonstrate Jasmine support of asynchronous testing, we are going to implement
    the following acceptance criterion:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示Jasmine对异步测试的支持，我们将实现以下验收标准：
- en: Stock when fetched, should update its share price
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 股票在取回时，应更新其股价
- en: 'Using the techniques we have showed you until now, you could write this acceptance
    criterion in `StockSpec.js`, inside the `spec` folder file, as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们至今为止向您展示的技术，您可以在`spec`文件夹中的`StockSpec.js`文件中编写以下验收标准：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'That would lead to the implementation of the `fetch` function from the `Stock.js`
    file inside the `src` folder, as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致在`src`文件夹中的`Stock.js`文件中实现`fetch`函数，如下所示：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The important part in the preceding code is the `$.getJSON` call, an AJAX request
    expecting a JSON response containing an updated share price, such as:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码中的重要部分是`$.getJSON`调用，一个期望包含更新股价的JSON响应的AJAX请求，如下所示：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By now, you can see that we are stuck; in order to run this spec, we will need
    a server running.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可以看到我们陷入了困境；为了运行此规范，我们需要一个正在运行的服务器。
- en: Setting up the scenario
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置场景
- en: Since this book is all about JavaScript, we are going to create a very simple
    **Node.js** server to be used by the specs. Node.js is a platform that allows
    the development of network applications, such as web servers, using JavaScript.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这本书全部关于JavaScript，我们将创建一个非常简单的**Node.js**服务器，用于规范测试。Node.js是一个允许使用JavaScript开发网络应用程序的平台，例如Web服务器。
- en: In [Chapter 6](ch06.html "Chapter 6. Light Speed Unit Testing"), *Light Speed
    Unit Testing*, we are going to see alternative solutions to test AJAX requests
    without the need for a server. And in [Chapter 8](ch08.html "Chapter 8. Build
    Automation"), *Build Automation*, we are going to see how to use Node.js as a
    foundation for an advanced build system.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](ch06.html "第6章. 光速单元测试")中，我们将看到测试AJAX请求而不需要服务器的替代解决方案。在[第8章](ch08.html
    "第8章. 构建自动化")中，我们将看到如何将Node.js作为高级构建系统的基础。
- en: Installing Node.js
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Node.js
- en: If you already have Node.js installed, you can skip to the next section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了Node.js，您可以跳到下一节。
- en: 'There are installers available for Windows and Mac OS X. Perform the following
    steps to install Node.js:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了适用于Windows和Mac OS X的安装程序。按照以下步骤安装Node.js：
- en: Go to the Node.js website [http://nodejs.org/](http://nodejs.org/).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往Node.js网站[http://nodejs.org/](http://nodejs.org/)。
- en: Click on the **Install** button.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**按钮。
- en: Once the download is completed, execute the installer and follow the steps.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，运行安装程序并按照步骤操作。
- en: To check other installation methods and instructions on how to install Node.js
    on Linux distributions, check the official documentation at [https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查其他安装方法和有关如何在Linux发行版上安装Node.js的说明，请查看官方文档[https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager)。
- en: Once you are done, you should have the `node` and `npm` commands available on
    your command line.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你应该可以在命令行上使用`node`和`npm`命令。
- en: Coding the server
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写服务器代码
- en: 'For the purpose of learning how to write asynchronous specs, we are going to
    create a server that returns some fake data. Create a new file in the project''s
    root folder called `server.js` and add the following code to it:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习如何编写异步规范，我们将创建一个返回一些假数据的服务器。在项目的根目录中创建一个名为`server.js`的新文件，并将其中的以下代码添加到该文件中：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To handle the HTTP requests, we use **Express**, a Node.js web application framework.
    By reading the code, you can see that it defines a route to `/stocks/:symbol`,
    so it accepts requests such as `http://localhost:8000/stocks/AOUE` and responds
    with JSON data.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: We also use the `express.static` module to serve the spec runner at `http://localhost:8000/SpecRunner.html`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: There is a requirement to circumvent the SOP. This is a policy that dictates,
    for security reasons, that AJAX requests aren't allowed to be performed on domains
    different than the application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: This issue was first demonstrated while using HTML fixtures in [Chapter 3](ch03.html
    "Chapter 3. Testing Frontend Code"), *Testing Frontend Code*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Chrome browser inspector, you can see errors in the console while
    opening the `SpecRunner.html` file with a `file://` protocol (basically, the way
    you''ve been doing until now):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding the server](img/B04138_04_01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: This shows the same origin policy error
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: By serving the runner, and all of the application and test code under the same
    base URL, we prevent this problem from happening and are able to run the specs
    on any browser.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Running the server
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run the server, first you need to install its dependencies (Express) using
    Node''s package manager. Inside the application root folder, run the `npm` command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This command will download Express and place it inside a new folder called `node_modules`
    inside the project folder.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you should be able to run the server by invoking the following `node` command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To check whether it is working, hit `http://localhost:8000/stocks/AOUE` on
    your browser, and you should receive the JSON response:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now that we have our server dependency working, we can get back to writing the
    spec.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Writing the spec
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the server running, open your browser at `http://localhost:8000/SpecRunner.html`
    to see the results of our specs.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that even though the server is running, and the spec appears to
    be correct, it is failing. This is due to the fact that `stock.fetch()` is asynchronous.
    A call to `stock.fetch()` returns immediately, allowing Jasmine to run the expectations
    before the AJAX request is completed:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To fix this, we need to embrace the asynchronicity of the `stock.fetch()` function
    and instruct Jasmine to wait for its execution before running the expectations.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous setups and teardowns
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the example shown, we invoke the `fetch` function during the spec's setup
    (the `beforeEach` function).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'The only thing we need to do to identify that this setup step is asynchronous
    is add a `done` argument to its function definition:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once Jasmine identifies this `done` argument, it passes as its value a function
    that must be called once the asynchronous operation is completed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'So we could then pass this `done` function as a `success` callback of the `fetch`
    function:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'At the implementation, invoke it once the AJAX operation is completed:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That is all there is to it; Jasmine will wait for the AJAX operation to be completed
    and the test will pass.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: When required, it is also possible to have asynchronous `afterEach` definitions
    using the same `done` argument.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous specs
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another approach would be to have an asynchronous spec instead of an asynchronous
    setup. To demonstrate how this would work, we are going to need to rewrite our
    previous acceptance criteria:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Again, all we have to do is add a `done` argument to its function definition
    and invoke the `done` function once the test is done:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The difference here is that we had to move the expectation for it to be inside
    the `success` callback right before invoking the `done` function.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Timeout
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When writing asynchronous specs, Jasmine will wait for 5 seconds, by default,
    for the `done` callback to be called, failing the spec if it is not called before
    this timeout.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: In this contrived example, where the server was a simple stub returning static
    data, that timeout was not a problem, but there are situations where that default
    time is not enough to complete an asynchronous task.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Although it is not recommended to have long-running specs, it is nice to know
    there is a way around this default behavior by changing a simple configuration
    variable in Jasmine called `jasmine.DEFAULT_TIMEOUT_INTERVAL`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'To make it take effect in the entire suite, one could set it at the `SpecHelper.js`
    file, as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To make it take effect over a single spec, change its value in `beforeEach`
    and restore it during `afterEach`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have seen how to test asynchronous code, a scenario common
    when testing server interactions (AJAX).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: I have also presented you with the Node.js platform and used it to code a simple
    server to be used as a test fixture.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 6](ch06.html "Chapter 6. Light Speed Unit Testing"), *Light Speed
    Unit Testing*, we are going to see different solutions to AJAX testing—solutions
    that don't require a server running.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about spies and how we can use them
    to perform behavior checking.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
