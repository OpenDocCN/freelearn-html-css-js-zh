- en: Chapter 4. Asynchronous Testing – AJAX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inevitably, there comes a time in every JavaScript application when asynchronous
    code needs to be tested.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous means that you cannot deal with it in a linear fashion—a function
    might return immediately after its execution, but the result will come later,
    usually through a callback.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a very common pattern while dealing with AJAX requests, for example,
    through jQuery:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this chapter, we are going to learn the different ways Jasmine allows us
    to write tests for asynchronous code.
  prefs: []
  type: TYPE_NORMAL
- en: Acceptance criterion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate Jasmine support of asynchronous testing, we are going to implement
    the following acceptance criterion:'
  prefs: []
  type: TYPE_NORMAL
- en: Stock when fetched, should update its share price
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the techniques we have showed you until now, you could write this acceptance
    criterion in `StockSpec.js`, inside the `spec` folder file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'That would lead to the implementation of the `fetch` function from the `Stock.js`
    file inside the `src` folder, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The important part in the preceding code is the `$.getJSON` call, an AJAX request
    expecting a JSON response containing an updated share price, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: By now, you can see that we are stuck; in order to run this spec, we will need
    a server running.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since this book is all about JavaScript, we are going to create a very simple
    **Node.js** server to be used by the specs. Node.js is a platform that allows
    the development of network applications, such as web servers, using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 6](ch06.html "Chapter 6. Light Speed Unit Testing"), *Light Speed
    Unit Testing*, we are going to see alternative solutions to test AJAX requests
    without the need for a server. And in [Chapter 8](ch08.html "Chapter 8. Build
    Automation"), *Build Automation*, we are going to see how to use Node.js as a
    foundation for an advanced build system.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you already have Node.js installed, you can skip to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are installers available for Windows and Mac OS X. Perform the following
    steps to install Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Node.js website [http://nodejs.org/](http://nodejs.org/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Install** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the download is completed, execute the installer and follow the steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To check other installation methods and instructions on how to install Node.js
    on Linux distributions, check the official documentation at [https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager](https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager).
  prefs: []
  type: TYPE_NORMAL
- en: Once you are done, you should have the `node` and `npm` commands available on
    your command line.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the purpose of learning how to write asynchronous specs, we are going to
    create a server that returns some fake data. Create a new file in the project''s
    root folder called `server.js` and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To handle the HTTP requests, we use **Express**, a Node.js web application framework.
    By reading the code, you can see that it defines a route to `/stocks/:symbol`,
    so it accepts requests such as `http://localhost:8000/stocks/AOUE` and responds
    with JSON data.
  prefs: []
  type: TYPE_NORMAL
- en: We also use the `express.static` module to serve the spec runner at `http://localhost:8000/SpecRunner.html`.
  prefs: []
  type: TYPE_NORMAL
- en: There is a requirement to circumvent the SOP. This is a policy that dictates,
    for security reasons, that AJAX requests aren't allowed to be performed on domains
    different than the application.
  prefs: []
  type: TYPE_NORMAL
- en: This issue was first demonstrated while using HTML fixtures in [Chapter 3](ch03.html
    "Chapter 3. Testing Frontend Code"), *Testing Frontend Code*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Chrome browser inspector, you can see errors in the console while
    opening the `SpecRunner.html` file with a `file://` protocol (basically, the way
    you''ve been doing until now):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding the server](img/B04138_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This shows the same origin policy error
  prefs: []
  type: TYPE_NORMAL
- en: By serving the runner, and all of the application and test code under the same
    base URL, we prevent this problem from happening and are able to run the specs
    on any browser.
  prefs: []
  type: TYPE_NORMAL
- en: Running the server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run the server, first you need to install its dependencies (Express) using
    Node''s package manager. Inside the application root folder, run the `npm` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This command will download Express and place it inside a new folder called `node_modules`
    inside the project folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you should be able to run the server by invoking the following `node` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To check whether it is working, hit `http://localhost:8000/stocks/AOUE` on
    your browser, and you should receive the JSON response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our server dependency working, we can get back to writing the
    spec.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the spec
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the server running, open your browser at `http://localhost:8000/SpecRunner.html`
    to see the results of our specs.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that even though the server is running, and the spec appears to
    be correct, it is failing. This is due to the fact that `stock.fetch()` is asynchronous.
    A call to `stock.fetch()` returns immediately, allowing Jasmine to run the expectations
    before the AJAX request is completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To fix this, we need to embrace the asynchronicity of the `stock.fetch()` function
    and instruct Jasmine to wait for its execution before running the expectations.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous setups and teardowns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the example shown, we invoke the `fetch` function during the spec's setup
    (the `beforeEach` function).
  prefs: []
  type: TYPE_NORMAL
- en: 'The only thing we need to do to identify that this setup step is asynchronous
    is add a `done` argument to its function definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Once Jasmine identifies this `done` argument, it passes as its value a function
    that must be called once the asynchronous operation is completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we could then pass this `done` function as a `success` callback of the `fetch`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'At the implementation, invoke it once the AJAX operation is completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: That is all there is to it; Jasmine will wait for the AJAX operation to be completed
    and the test will pass.
  prefs: []
  type: TYPE_NORMAL
- en: When required, it is also possible to have asynchronous `afterEach` definitions
    using the same `done` argument.
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous specs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another approach would be to have an asynchronous spec instead of an asynchronous
    setup. To demonstrate how this would work, we are going to need to rewrite our
    previous acceptance criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, all we have to do is add a `done` argument to its function definition
    and invoke the `done` function once the test is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The difference here is that we had to move the expectation for it to be inside
    the `success` callback right before invoking the `done` function.
  prefs: []
  type: TYPE_NORMAL
- en: Timeout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When writing asynchronous specs, Jasmine will wait for 5 seconds, by default,
    for the `done` callback to be called, failing the spec if it is not called before
    this timeout.
  prefs: []
  type: TYPE_NORMAL
- en: In this contrived example, where the server was a simple stub returning static
    data, that timeout was not a problem, but there are situations where that default
    time is not enough to complete an asynchronous task.
  prefs: []
  type: TYPE_NORMAL
- en: Although it is not recommended to have long-running specs, it is nice to know
    there is a way around this default behavior by changing a simple configuration
    variable in Jasmine called `jasmine.DEFAULT_TIMEOUT_INTERVAL`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make it take effect in the entire suite, one could set it at the `SpecHelper.js`
    file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To make it take effect over a single spec, change its value in `beforeEach`
    and restore it during `afterEach`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have seen how to test asynchronous code, a scenario common
    when testing server interactions (AJAX).
  prefs: []
  type: TYPE_NORMAL
- en: I have also presented you with the Node.js platform and used it to code a simple
    server to be used as a test fixture.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 6](ch06.html "Chapter 6. Light Speed Unit Testing"), *Light Speed
    Unit Testing*, we are going to see different solutions to AJAX testing—solutions
    that don't require a server running.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn about spies and how we can use them
    to perform behavior checking.
  prefs: []
  type: TYPE_NORMAL
