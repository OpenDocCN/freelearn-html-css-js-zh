- en: '[CHAPTER 9](toc.xhtml#c09)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Testing API](toc.xhtml#c09)'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Introduction](toc.xhtml#s229a)'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node.js is a versatile runtime environment that allows developers to run JavaScript
    on the server-side. When it comes to testing REST APIs, Node.js offers numerous
    libraries and tools to streamline the process. With Node.js, you can write automated
    tests that interact with your RESTful APIs, send HTTP requests, and verify responses.
    It provides a flexible and scalable platform for running API tests, making it
    an excellent choice for both unit and integration testing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Node.js also allows you to leverage various testing frameworks and libraries,
    such as Mocha, Chai, Jest, and Supertest. These tools simplify the creation of
    test suites, assertion checks, and test runners for your API endpoints. In addition,
    Node.js’s asynchronous nature is well-suited for making HTTP requests and handling
    asynchronous responses, which is crucial in testing APIs. This asynchronous capability
    ensures that your tests can efficiently handle multiple requests and responses
    simultaneously.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore the process of creating test cases and performing
    API validation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[Structure](toc.xhtml#s230a)'
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Unit Testing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha Framework
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define Test Cases
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify Developed API
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Overview of Unit Testing](toc.xhtml#s231a)'
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit testing is a fundamental practice in software development that ensures
    that individual units of code are working as intended. In the context of a REST
    API, this means testing each endpoint and the associated business logic separately
    to verify that they respond correctly to different inputs and situations.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing is just one part of testing a REST API. It complements other types
    of testing, such as integration testing (testing how different parts of the API
    work together) and end-to-end testing (testing the entire application from the
    user’s perspective).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Unit testing is a critical practice in software development, but it is highly
    specific to the codebase that you are working with. When writing unit test cases,
    it is important to cover a wide range of scenarios to ensure your code functions
    correctly. Here are some key points to consider when writing unit tests:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '**Test Case Structure:**'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe what the test case is testing using ``**describe**`` blocks. Create
    individual test cases using ``**it**`` blocks. Structure your tests logically,
    covering various aspects of your code.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Test Data:**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include test data or mock data that covers different input scenarios. Include
    edge cases, boundary values, and typical inputs to validate your code’s behavior
    in different situations.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Assertions:**'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use assertions provided by your testing framework (for example, Chai, Jest,
    Jasmine) to check that the code produces the expected results. Verify that the
    actual results match the expected results.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Error Handling:**'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure your code handles errors or exceptions correctly. Test scenarios where
    exceptions or errors are expected to be thrown.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Code Coverage:**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aim for good code coverage, ensuring that as much of your code as possible is
    executed by your tests. Use code coverage tools to identify untested code paths.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Mocks and Stubs:**'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use mocks and stubs to simulate external dependencies like databases, APIs,
    or services. Ensure that your code interacts correctly with these dependencies.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Positive and Negative Testing:**'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test with positive scenarios where everything works as expected. Test with negative
    scenarios, where things may go wrong, and the code handles errors correctly.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Regression Testing:**'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Periodically run your unit tests to catch regressions when new code changes
    are introduced.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Automation**'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit tests are automated, meaning they can be run automatically by a testing
    framework without manual intervention.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Fast Execution**'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit tests are designed to be fast, so they can be run frequently during development.
    This quick feedback loop helps catch issues early in the development process.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Remember that unit tests should focus on a single unit of code (a function,
    method, or a small component) and should be fast to execute. Writing comprehensive
    unit tests helps identify and resolve issues early in the development process,
    leading to more robust and maintainable code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: End-to-End Testing, on the other hand, assesses the entire application from
    start to finish. It simulates real user scenarios. It essentially tests how a
    user would interact with the application and includes real database connections,
    network connections, and more. If there is any other application needed to be
    connected, it connects that as well.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, for testing features, we will connect to a real database to
    fetch data. When we use real database connection in tests which ideally would
    be unit tests, we move towards a more integrated testing approach. Sometimes,
    it may be referred to as integration tests.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[Mocha Framework](toc.xhtml#s232a)'
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mocha is a popular JavaScript test framework for Node.js and web browsers. It
    provides a versatile and feature-rich environment for writing and running test
    cases for your JavaScript applications. Mocha is often used in conjunction with
    assertion libraries like Chai for making assertions in test cases.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'Mocha is well-regarded for its flexibility and wide adoption among developers
    for various reasons:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '**Ease of Use:**'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha’s syntax is easy to learn and write, making it accessible for both beginners
    and experienced developers.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Support for Various Test Styles:**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha supports different test styles such as BDD (Behavior-Driven Development),
    TDD (Test-Driven Development), and QUnit.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Asynchronous Testing:**'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha has built-in support for testing asynchronous code, allowing you to use
    `**callbacks**`, `**promises**`, or `**async**`/`**await**`.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Hooks:**'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha provides hooks like `**before**`, `**after**`, `**beforeEach**`, and `**afterEach**`
    to set up and tear down test fixtures.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Reporter System:**'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha offers a range of built-in reporters for generating test reports and results
    in different formats, as well as custom reporter support.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Parallel Test Execution:**'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha can run tests in parallel, which can significantly reduce test execution
    time for large test suites.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Test Suites and Nested Descriptions:**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can organize your tests into hierarchical suites and describe blocks for
    better structure and readability.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Timeouts:**'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha allows you to set timeout limits for individual tests or test suites,
    helping identify slow or blocking tests.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Test Skips and Exclusivity:**'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can skip or focus on specific tests or suites using `**.skip**` and `**.only**`.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Browser and Node.js Support:**'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha can be used both in Node.js and in web browsers.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Mocha’s flexibility, extensive ecosystem, and active community make it a popular
    choice for testing JavaScript applications, ranging from small libraries to large
    complex projects.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: To use Mocha, you typically install it as an npm package and write your test
    cases in JavaScript or a testing framework like Chai. Mocha provides a command-line
    interface for running tests, and it can be integrated into Continuous Integration
    (CI) pipelines to automate testing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[Installing Mocha and Chai](toc.xhtml#s233a)'
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mocha is a testing framework, and Chai is an assertion library often used together
    for testing. Install them as development dependencies in our project through `**cmd**`
    enter the following command with root of project directory
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '`**$ npm install mocha chai @types/mocha @types/chai --save-dev**`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have successfully installed Chai, let us explore how to utilize it.
    Chai serves as a versatile assertion library, effectively functioning as a plugin
    for your testing needs. `**Chai**` offers three primary styles: `**"expect**`,`**"**`
    `**"should**`,`**"**` and `**"assert**`.`**"**` You can use any of these, but
    `**"expect"**` is the most popular choice.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '`const chai = require(''chai'');`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '`const expect = chai.expect;`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '`// Expect a value to be equal to another value`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(5).to.equal(5);`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '`// Expect an array to include a specific element`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '`expect([1, 2, 3]).to.include(2);`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '`// Expect a value to be a certain data type`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(''Hello'').to.be.a(''string'');`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '`// Expect an object to have a property`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '`expect({ name: ''John'' }).to.have.property(''name'');`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: You can chain various methods to create complex assertions. `**Chai**` provides
    a wide range of assertion methods to check equality, check for the existence of
    properties, and more. Chai is often used in conjunction with testing frameworks
    like Mocha.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Let us create one directory with the name as `**tests**` in `**src**` directory
    of the project with `**test.spec.ts**` file. The test file extension must be `**.spec.ts**`
    so that tooling can identify it as a file with tests (also known as a spec file).
    As per the following directory structure you can make test files.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '`**tests/**`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '`├── user/`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '`│   ├── user.spec.ts`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '`├── project/`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '`│   ├── project.spec.ts`'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '`├── task/`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '`│   ├── task.spec.ts`'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '`├── common/`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '`│   ├── utility.spec.ts`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '`└── mocha.opts`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a Mocha configuration file (`**mocha.opts**`) if you want to
    specify Mocha options. This file is optional, but it can be handy for configuring
    Mocha behavior. Here is a simple example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '`--require ts-node/register`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '`--require chai/register-assert`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '`--require chai/register-expect`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '`--require chai/register-should`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '`--require chai-http/register`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `**tsconfig.json**` file add `**"types": ["express", "./src/custom.d.ts"]**`
    in `**compilerOptions**`.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `**package.json**` file add test script as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '`"scripts": {`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '`"test": "mocha --require ts-node/register src/**/*.spec.ts`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '`src/**/**/*.spec.ts`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '`",`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '`…`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Currently, no test cases are defined, so it will display 0 passing tests.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.1.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.1:** Run Test Script'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[Defining a Test Case](toc.xhtml#s234a)'
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After the configuration is added, let us define first basic test case in `**utility.spec.ts**`
    file with the following code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '`import chai from ''chai'';`'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '`import chaiHttp from ''chai-http'';`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.use(chaiHttp);import { describe, it } from ''mocha'';`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '`// Use Chai with Chai HTTP`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '`const expect = chai.expect;`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''Array'', function () {`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''#indexOf()'', function () {`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return -1 when the value is not present'', function () {`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '`expect([1, 2, 3].indexOf(4)).to.equal(-1);`'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: This test case checks if the `**indexOf**` function correctly returns `**-1**`
    when the value is not present in the array. Chai expect function is used for clear
    and readable assertions in your test cases. If the expectation is met, the test
    will pass; otherwise, it will fail and provide feedback on what went wrong.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the test in `**cmd**` with entering `**$ npm run test**` which gives following
    output :'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '`**Array**`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '`**1) #indexOf()**`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔should return -1 when the value is not present**`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.2.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.2:** Utility Success Test Case'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'If you change expect line with `**expect([1, 2, 3].indexOf(3)).to.equal(-1)**`;
    that fails the test case and gives following output with red mark:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '`**Array**`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '`**1) #indexOf()**`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '`**should return -1 when the value is not present**`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.3.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.3:** Utility Fail Test Case'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: This is a very basic test case to get started. Now, let us dive into more test
    cases by connecting our application and configuring it for execution.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[Configuring the Application](toc.xhtml#s235a)'
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to make some changes in `**express_server.ts**` file. Since we want
    to connect `**express**` app in test cases, we need to export it. Here is the
    updated code:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '`import express from ''express'';`'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '`import * as bodyParser from ''body-parser'';`'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '`import { IServerConfig } from ''./utils/config'';`'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '`import * as config from ''../server_config.json'';`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Routes } from ''./routes'';`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '`export class ExpressServer {`'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '`private static server = null;`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '`public server_config: IServerConfig = config;`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '`**public app;**`'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '`constructor() {`'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '`const port = this.server_config.port ?? 3000;`'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '`// initialize express app`'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '`**this.app = express();**`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '`this.app.use(bodyParser.urlencoded({ extended: false }));`'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '`this.app.use(bodyParser.json());`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '`this.app.get(''/ping'', (req, res) => {`'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '`res.send(''pong'');`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '`const routes = new Routes(this.app);`'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '`if (routes) {`'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log(''Server Routes started for server'');`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '`ExpressServer.server = this.app.listen(port, () => {`'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '``console.log(`Server is running on port ${port} with pid = ${process.pid}`);``'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '`//close the express server for safe on uncaughtException`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '`public closeServer(): void {`'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '`ExpressServer.server.close(() => {`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log(''Server closed'');`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '`process.exit(0);`'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, when dealing with test cases, it is necessary to connect to the
    database. Replace the code in the `**db.ts**` file with the following:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '`import { DataSource, Repository } from ''typeorm'';`'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '`import { IServerConfig } from ''./config'';`'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '`import * as config from ''../../server_config.json'';`'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Roles } from ''../components/roles/roles_entity'';`'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Users } from ''../components/users/users_entity'';`'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Projects } from ''../components/projects/projects_entity'';`'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Tasks } from ''../components/tasks/tasks_entity'';`'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Comments } from ''../components/comments/comments_entity'';`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '`export class DatabaseUtil {`'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '`private server_config: IServerConfig = config;`'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '`private static connection: DataSource | null = null;`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '`private repositories: Record<string, Repository<any>> = {};`'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '`constructor() {`'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '`this.connectDatabase();`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '`/**`'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '`* Establishes a database connection or returns the existing connection if
    available.`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '`* @returns The database connection instance.`'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '`*/`'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '`public async connectDatabase(): **Promise<DataSource>** {`'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '`try {`'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '`**if (DatabaseUtil.connection) {**`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '`**return Promise.resolve(DatabaseUtil.connection);**`'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '`**}** else {`'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '`const db_config = this.server_config.db_config;`'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '`const AppSource = new DataSource({`'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '`type: ''postgres'',`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '`host: db_config.host,`'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '`port: db_config.port,`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '`username: db_config.username,`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '`password: db_config.password,`'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '`database: db_config.dbname,`'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '`entities: [Roles, Users, Projects, Tasks, Comments,Files],`'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '`synchronize: true,`'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '`logging: true,`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '`poolSize: 10`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '`await AppSource.initialize();`'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '`DatabaseUtil.connection = AppSource;`'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log(''Connected to the database'');`'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '`return DatabaseUtil.connection;`'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '`} catch (error) {`'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '`console.error(''Error connecting to the database:'', error);`'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '`/**`'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '`* Get the repository for a given entity.`'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '`* @param entity - The entity for which the repository is needed.`'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '`* @returns The repository instance for the entity.`'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '`*/`'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '`public getRepository(entity) {`'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '`try {`'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '`// Check if a valid database connection is available`'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '`if (DatabaseUtil.connection) {`'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '`const entityName = entity.name;`'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '`// Check if the repository instance already exists, if not, create it`'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '`if (!this.repositories[entityName]) {`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '`this.repositories[entityName] = DatabaseUtil.connection.getRepository(entity);`'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '`return this.repositories[entityName];`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '`return null;`'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '`} catch (error) {`'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '``console.error(`Error while getRepository => ${error.message}`);``'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the code, we have introduced a `**promise**` to ensure that the
    test cases run only after the database connection is established. This helps prevent
    potential errors that could occur otherwise.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: In case we want to mock the database connection, there are libraries available
    to do so. One such library is `**sinon**`, `**https://sinonjs.org/**`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '`**Sinon**` is a testing library used for creating spies, stubs, and mocks
    in JavaScript tests, rather than specifically for mocking databases. It can be
    used to intercept and simulate behavior in functions, methods, or any kind of
    operation in your codebase, including database operations, API requests, or any
    other external service interactions. This makes it incredibly useful for writing
    unit and integration tests where you need to isolate the part of the code being
    tested.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter, we are interested in checking our API against a real database.
    Hence, we do not need to use a mock database connection. However, for the sake
    of completion, an example is added at the end of this chapter.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, replace following code in `**utility.spec.ts**` file to export app in
    test cases:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '`import { DatabaseUtil } from ''../../utils/db'';`'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '`import { ExpressServer } from ''../../express_server'';`'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '`import chai from ''chai'';`'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '`import chaiHttp from ''chai-http'';`'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.use(chaiHttp);`'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '`import { describe, it } from ''mocha'';`'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '`// Use Chai with Chai HTTP`'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '`const expect = chai.expect;`'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '`let app, expressServer;`'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '`**before(async () => {**`'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '`const databaseUtil = new DatabaseUtil();`'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '`await databaseUtil.connectDatabase();`'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '`expressServer = new ExpressServer();`'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '`app = expressServer.app;`'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '`**});**`'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '`// Close the server after all tests are done`'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '`**after(function (done) {**`'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '`expressServer.closeServer(done);`'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '`**});**`'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '`export { app };`'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: It imports necessary modules like `**DatabaseUtil**`, `**ExpressServer**`, and
    the testing libraries `**(chai and chai-http). chai.use(chaiHttp)**` configures
    chai to work with HTTP requests, enabling you to make HTTP requests and perform
    assertions on their responses.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[Hooks](toc.xhtml#s236a)'
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the context of testing frameworks like Mocha, `**"before"**` and `**"after"**`
    are known as test hooks. They are used to set up and tear down the testing environment.
    Here is what they do:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '**Before Hook** (`**before**`): This hook is executed before any test cases
    within a test suite (defined using describe) are run. It is typically used for
    setting up the environment or any common context needed for the tests. For example,
    you might use it to establish a database connection, initialize variables, or
    start a server.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '`**before(() => {**`'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '`// Set up the testing environment`'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '**After Hook** (`**after**`): This hook is executed after all test cases within
    a test suite have run. It is commonly used for cleaning up the environment, releasing
    resources, or performing any necessary actions after the tests are completed.
    For example, you might use it to close a database connection, shut down a server,
    or perform `**cleanup**` tasks.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '`**after(() => {**`'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '`// Clean up the testing environment`'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how the `**"before"**` and `**"after"**` hooks fit into the test lifecycle:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '**Before All Tests**: The `**"before"**` hook is executed before any of the
    test cases within the suite are run. It is a one-time setup for the entire suite.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '**Run Test Cases**: All the test cases (it blocks) within the suite are executed.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '**After All Tests**: The `**"after"**` hook is executed once all the test cases
    in the suite have been completed. It is a one-time `**cleanup**` step for the
    suite.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: These hooks are useful for ensuring a consistent and clean test environment
    for each test suite. They help avoid code repetition and make it easier to manage
    resources like database connections, servers, or other setup and teardown tasks.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: There are also `**beforeEach()**`, and `**afterEach()**` hooks that will execute
    before each test case and after each test case respectively.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: 'We can explore hook with another example such as payment create one `**payment.spec.ts**`
    file with following code :'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '`import { expect } from ''chai'';`'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '`import { describe, it } from ''mocha'';`'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '`class Payment {`'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '`private amount: number;`'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '`private method: string;`'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '`constructor(amount: number, method: string) {`'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '`this.amount = amount;`'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '`this.method = method;`'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '`processPayment(): string {`'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '`// Simulate payment processing`'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '``return `Payment of ${this.amount} processed via ${this.method}`;``'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''Payment'', () => {`'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '`let payment: Payment;`'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '`// Before hook: This will run before the test suite before(() => {`'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log(''Setting up payment processing…'');`'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '`// Perform setup tasks, e.g., initialize payment gateway`'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '`payment = new Payment(100, ''Credit Card'');`'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '`// After hook: This will run after the test suite after(() => {`'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log(''Tearing down payment processing…'');`'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '`// Perform teardown tasks, e.g., close payment gateway connection`'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '`payment = null!;`'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '`// Test case`'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should process payment successfully'', () => {`'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '`// Act`'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '`const result = payment.processPayment();`'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '`// Assert`'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(result).to.equal(''Payment of 100 processed via Credit Card'');`'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: We have a Payment class with a `**processPayment**` method that simulates processing
    a payment transaction.
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use Mocha’s before hook to perform setup tasks before the test suite. This
    includes initializing payment processing, such as setting up a payment gateway.
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use Mocha’s after hook to perform teardown tasks after the test suite. This
    includes closing the payment gateway connection.
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We define a single test case to verify that the payment is processed successfully.
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before the test suite runs, the `**"Setting up payment processing…"**` message
    will be logged, indicating that payment processing is being set up.
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the test suite runs, the `**"Tearing down payment processing…"**` message
    will be logged, indicating that payment processing is being torn down.
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now run the test script in the terminal and it will display following output:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.4.jpg)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.4:** Hook Example with Payment'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '[Verifying APIs through Test cases](toc.xhtml#s237a)'
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the world of software development, ensuring that your application’s APIs
    work as intended is of paramount importance. To achieve this, we rely on test
    cases, which are a structured approach to validating the functionality, correctness,
    and performance of APIs. Verifying APIs through test cases involves systematically
    testing various aspects of your API to guarantee that it behaves as expected.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '[Login Test](toc.xhtml#s238a)'
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `**"user.spec.ts"**` file within the `**"tests"**` directory, specifically
    within the `**"user"**` subdirectory, and include the following code:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '`import chai from ''chai'';`'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '`import chaiHttp from ''chai-http'';`'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.use(chaiHttp);`'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '`import { describe, it } from ''mocha'';`'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '`// Use Chai with Chai HTTP`'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '`const expect = chai.expect;`'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '`import { app } from ''../common/utility.spec'';`'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '`let authToken; // Declare a variable to store the authentication token`'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''Login API'', () => {`'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return a success message when login is successful'', (done) =>
    {`'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '`**chai.request(app)** // Replace ''app'' with your Express app instance`'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '`**.post(**''**/api/login**''**)**`'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '`**.send({ email:** ''**yamipanchal1993@gmail.com**''**, password:** ''**Abc@123456**''
    **})**`'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '`.end((err, res) => {`'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(200);**`'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(res.body).to.have.property(''status'').equal(''success'');`'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '`authToken = res.body.data.accessToken; // Save the authentication token`'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '`done();`'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return an error message when login fails'', (done) => {`'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.request(app)`'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '`.post(''/api/login'')`'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '`**.send({ email:** ''**yamipanchal1993@gmail.com**''**, password:** ''**wrongpassword**''
    **})**`'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: '`.end((err, res) => {`'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(400);**`'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '`**expect(res.body).to.have.property(''message'').equal(''Password is not valid'');**`'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '`done();`'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '`export { authToken };`'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: Run the test case in `**cmd**` through the `**npm run**` test which provides
    the following output.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '`> pms-be@1.0.0 test`'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '`Login API`'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '`1) "**before all**" hook in "**{root}**"`'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '`Connected to the database`'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔> should return a success message when login is successful (75ms)**`'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔ should return an error message when login fails (46ms)**`'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.5.jpg)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.5:** Login Test Case'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: Here, we define two test cases for Login api in that the first has valid data
    and the second has the wrong password.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '`**describe(''Login API'', () => { … });**`: This line defines a test suite
    using the describe function. In this case, it is a suite named `**"Login API"**`
    that groups related test cases together.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**it(''should return a success message when login is successful'', (done)
    => { … });**`: Within the test suite, there is an individual test case defined
    using the it function. This test case has a description that explains what it
    is testing, which is that it should return a success message when the login is
    successful. The `**(done)**` function is passed as an argument, indicating that
    this is an asynchronous test, and the done function is used to signal the completion
    of the test.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**chai.request(app)**`: This line uses the chai-http library to make an HTTP
    request to an Express.js app. app should be replaced with the actual instance
    of your Express app. `**.post(''/api/login'')**`: This line specifies that it
    is a POST request to the `**''/api/login''**` endpoint. It is likely that this
    endpoint is responsible for handling user login.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.send({ email: ''yamipanchal1993@gmail.com'', password: ''Abc@123'' })**`:
    Here, the code sends a JSON object in the request body with the email and password
    values for the login attempt.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.end((err, res) => { … });**`: This is the `**callback**` function that
    gets executed when the HTTP request is completed. It receives two parameters:
    err for any errors that might occur during the request, and res for the response
    from the server.'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(200);**`: This line uses Chai’s expect assertion
    to check if the HTTP response has a status code of 200, which typically indicates
    a successful request.'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res.body).to.have.property(''status'').equal(''success'');**`: This
    line checks that the response body contains a property named ‘status’ with the
    value `**''success''**`. It is a common way to check if an API response indicates
    a successful operation.'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**authToken = res.body.data.accessToken;**`: If the login is successful, this
    line extracts the authentication token from the response and stores it in the
    authToken variable. This token is often used for subsequent authenticated requests.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**done();**`: Finally, the `**done**` function is called to indicate that
    the test has completed.'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This code is a test case for login API returns a successful response with the
    expected status code and message. It also captures the authentication token for
    further testing, typically for authenticated routes.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: '[List of User Test](toc.xhtml#s239a)'
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the same file, add the following test case code to verify the List of user
    API.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''GET List of Users'', () => {`'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return array with status code 200'', (done) => {`'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.request(app)`'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: '`.get(''/api/users'')`'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '`.set(''Authorization'',`'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: '`` `Bearer ${authToken}`) // Pass the token in the headers ``'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '`.end((err, res) => {`'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: '`// console.log(res);`'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(res).to.have.status(200);`'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(res.body).to.have.property(''data'').to.be.an(''array'');`'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '`done();`'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '`Output`'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: '`> pms-be@1.0.0 test`'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: '`Login API`'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '`1) "**before all**" hook in "**{root}**"`'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '`Connected to the database`'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return a success message when login is successful (75ms)`'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return an error message when login fails (46ms)`'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: '`**GET List of Users**`'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔ should return array with status code 200**`'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: '`Server closed`'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.6.jpg)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.6:** User List Get API Testcase'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the details of the key parts of the proceeding code:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: '`**describe(''GET List of Users'', () => { … });**`: This line defines a new
    test suite with the description `**"GET List of Users"**`. This suite groups together
    related test cases that are concerned with retrieving a list of users.'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**it(''should return array with status code 200'', (done) => { … });**`: Within
    the test suite, there is an individual test case defined using the it function.
    The test case description specifies that it should return an array with a status
    code of 200\. The (`**done**`) function is used to indicate that this is an asynchronous
    test, and the done function will be called when the test is complete.'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.get(''/api/users'')**`: This line specifies that it is a GET request to
    the `**''/api/users''**` endpoint. This endpoint is likely responsible for fetching
    a list of users.'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.set(''Authorization'', Bearer ${authToken}):**` Here, the code is setting
    an `**"Authorization"**` header in the HTTP request. It includes an authentication
    token in the header, typically in the format `**"Bearer <token>"**`. This is a
    common way to authenticate API requests. `**authToken**` is expected to contain
    the token obtained during a successful login (as shown in your previous code snippet).'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.end((err, res) => { … });**`: This is the `**callback**` function that
    gets executed when the HTTP request is completed. It receives two parameters:
    `**err**` for any errors that might occur during the request, and `**res**` for
    the response from the server.'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(200);**`: This line uses Chai’s expect assertion
    to check if the HTTP response has a status code of 200, which typically indicates
    a successful request. This is the common way to ensure that the server responded
    with a 200 `**OK**` status for a successful `**GET**` request.'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res.body).to.have.property(''data'').to.be.an(''array'');**`: This
    line checks that the response body contains a property named `**''data**`,`**''**`
    and that this property’s value is an array. This is a way to verify that the response
    contains a list of users in the form of an array.'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**done();**`: Finally, the `**done**` function is called to signal that the
    test has completed.'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This code is a test case for an Express.js API endpoint that tests whether a
    GET request to fetch a list of users returns the expected status code (`**200**`)
    and verifies that the response contains an array of user data. It also includes
    the authorization token in the request header for authentication, assuming that
    the `**authToken**` variable holds a valid token obtained from a login request.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '[Add User Test](toc.xhtml#s240a)'
  id: totrans-423
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the same file, add the following test case that verifies add user API.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''ADD User'', () => {`'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return with status code 201'', (done) => {`'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.request(app)`'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '`.post(''/api/users'')`'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '`.set(''Authorization'',`'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: '`` `Bearer ${authToken}`) // Pass the token in the headers ``'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: '`.send({`'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: '`''fullname'': ''Super Admin'',`'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: '`''username'': ''pms-admin1'',`'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: '`''email'': ''admin@pms1.com'',`'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '`''password'': ''Admin@pms1'',`'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: '`''role_id'': ''dbda47e4-f843-4263-a4d6-69ef80156f81''`'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '`})`'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: '`.end((err, res) => {`'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(201);**`'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: '`done();`'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return with status code 409'', (done) => {`'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.request(app)`'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: '`.post(''/api/users'')`'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: '`.set(''Authorization'',`'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: '`` `Bearer ${authToken}`) // Pass the token in the headers ``'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: '`.send({`'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: '`''fullname'': ''Super Admin'',`'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: '`''username'': ''pms-admin1'',`'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: '`''email'': ''admin@pms1.com'',`'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: '`''password'': ''Admin@pms1'',`'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: '`''role_id'': ''dbda47e4-f843-4263-a4d6-69ef80156f81''`'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: '`})`'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: '`.end((err, res) => {`'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(409);**`'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: '`**expect(res.body).to.have.property(''message'').equal(''Key (username)=(pms-admin1)
    already exists.'');**`'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: '`done();`'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '`Output`'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: '`> pms-be@1.0.0 test`'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '`Login API`'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: '`1) "before all" hook in "{root}"`'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: '`Connected to the database`'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return a success message when login is successful (75ms)`'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return an error message when login fails (46ms)`'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: '`GET List of Users`'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return array with status code 200`'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: '`**ADD User**`'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔ should return array with status code 201**`'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔ should return with status code 409 (54ms)**`'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: '`Server closed`'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.7.jpg)'
  id: totrans-476
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.7:** Add User API Test Case'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the details of the key parts of the proceeding code:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: '`**describe(''ADD User'', () => { … });**`: This line defines a test suite
    with the description `**"ADD User"**`. This suite groups together related test
    cases that are concerned with adding new users.'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first test case:'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**it(''should return with status code 201'', (done) => { … });**`: This test
    case description indicates that it is testing whether adding a user should return
    a status code of `**201**` (Created). The (`**done**`) function is used to indicate
    that this is an asynchronous test, and the `**done**` function will be called
    when the test is complete.'
  id: totrans-481
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.post(''/api/users'')**`: It’s a `**POST**` request to the `**''/api/users''**`
    endpoint, presumably used to add a new user.'
  id: totrans-482
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.set(''Authorization'', Bearer ${authToken})**`: This line sets an `**"Authorization"**`
    header in the HTTP request, including the authentication token for authorization.'
  id: totrans-483
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.send({ … })**`: The code sends a JSON object in the request body with user
    information, including the user’s fullname, username, email, password, and role
    IDs. This represents the data you are trying to add.'
  id: totrans-484
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.end((err, res) => { … });**`: The `**callback**` function that gets executed
    when the HTTP request is completed.'
  id: totrans-485
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(201);**`: This line uses Chai’s expect assertion
    to check if the HTTP response has a status code of 201, indicating that the user
    creation was successful.'
  id: totrans-486
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**done();**`: Finally, the `**done**` function is called to signal that the
    test has completed.'
  id: totrans-487
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second test case:'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**it(''should return with status code 409'', (done) => { … });**`: This test
    case description indicates that it’s testing whether adding a user with the same
    username should return a status code of `**409**` (Conflict).'
  id: totrans-489
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The structure of this test case is similar to the first one, with the main
    differences being the expected status code and the additional checks:'
  id: totrans-490
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(409);**`: This line checks if the HTTP response
    has a status code of `**409**`, indicating a conflict.'
  id: totrans-491
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res.body).to.have.property(''message'').equal(''Key (username)=(pms-admin1)
    already exists.'');**`: This line verifies that the response body contains a specific
    message indicating that the provided username already exists.'
  id: totrans-492
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**done();**`: As before, the done function is called to signal the completion
    of the test.'
  id: totrans-493
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This code contains two test cases. The first test case checks if a new user
    is successfully added with a 201 status code, while the second test case checks
    if a conflict (409 status code) is returned when attempting to add a user with
    an existing username. The second test case also verifies the presence of an error
    message in the response.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: '[Delete User Test](toc.xhtml#s241a)'
  id: totrans-495
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within the existing file, include the following test case code to validate the
    functionality of the user deletion API.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''Delete User'', () => {`'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return with status code 200'', (done) => {`'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.request(app)`'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: '`.delete(''/api/users/0ddc59fe-a9ea-4060-9b39-5118fe13937d'')`'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: '`.set(''Authorization'',`'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: '`` `Bearer ${authToken}`) // Pass the token in the headers ``'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: '`.end((err, res) => {`'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(res).to.have.status(201);`'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: '`done();`'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return with status code 404'', (done) => {`'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.request(app)`'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: '`.delete(''/api/users/0ddc59fe-a9ea-4060-9b39-5118fe13937d'')`'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: '``.set(''Authorization'', `Bearer ${authToken}`) // Pass the token in the headers``'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: '`.end((err, res) => {`'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(res).to.have.status(404);`'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: '`done();`'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: '`Output`'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: '`> pms-be@1.0.0 test`'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '`Login API`'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: '`1) "before all" hook in "{root}"`'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: '`Connected to the database`'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return a success message when login is successful (75ms)`'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return an error message when login fails (46ms)`'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: '`GET List of Users`'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return array with status code 200`'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: '`ADD User`'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: '`X should return array with status code 201`'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return with status code 409 (54ms)`'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: '`**Delete User**`'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔ should return with status code 200**`'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔ should return with status code 404**`'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: '`Server closed`'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.8.jpg)'
  id: totrans-535
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.8:** Delete User API Testcase'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: In this code, Add User test case displays fail because same user is already
    in database. Similarly, the Delete User test case might fail if the user you're
    trying to delete doesn't exist in the database when the test runs.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: 'The first test case:'
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**it(''should return with status code 200'', (done) => { … });**`: The description
    of this test case indicates that it is testing whether a successful user deletion
    should return a status code of `**200**` (`**OK**`). The (done) function is used
    to indicate that this is an asynchronous test, and the done function will be called
    when the test is complete.'
  id: totrans-539
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.delete(''/api/users/0ddc59fe-a9ea-4060-9b39-5118fe13937d'')**`: It is a
    DELETE request to a specific endpoint `**''**`/`**api/users/''**` with a user
    identifier (for example, `**''0ddc59fe-a9ea-4060-9b39-5118fe13937d''**`) in the
    URL. This typically represents the action of deleting a specific user by their
    unique identifier.'
  id: totrans-540
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.set(''Authorization'', Bearer ${authToken})**`: This line sets an `**"Authorization"**`
    header in the HTTP request, including the authentication token for authorization.'
  id: totrans-541
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.end((err, res) => { … });**`: The `**callback**` function that gets executed
    when the HTTP request is completed.'
  id: totrans-542
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(201);**`: There is a potential issue in this
    line. It checks if the HTTP response has a status code of `**201**`, but the test
    case description implies that it should be expecting a `**200**` status code.
    This line should be corrected to `**expect(res).to.have.status(200)**`;.'
  id: totrans-543
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**done();**`: Finally, the `**done**` function is called to signal that the
    test has completed.'
  id: totrans-544
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second test case:'
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**it(''should return with status code 404'', (done) => { … });**`: The description
    of this test case indicates that it is testing whether attempting to delete a
    user that does not exist should return a status code of `**404 (Not Found)**`.
    The structure of this test case is similar to the first one, with the main difference
    being the expected status code:'
  id: totrans-546
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(404);**`: This line checks if the HTTP response
    has a status code of 404, indicating that the requested user was not found.'
  id: totrans-547
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**done();**`: As before, the done function is called to signal the completion
    of the test.'
  id: totrans-548
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This code contains two test cases for testing the user deletion functionality
    through an Express.js API. The first test case checks if a user is successfully
    deleted with a `**200**` status code, and the second test case checks if attempting
    to delete a non-existent user results in a `**404**` status code.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: In this manner, you have the flexibility to create distinct test scenarios for
    various sections within your application, including user management, project handling,
    task management, and comment features. For each of these APIs, you can define
    specific test cases. Additionally, you can extend your testing suite by incorporating
    cases that verify authentication failures, such as testing for a `**401**` status
    code when authentication is missing and a 403 status code when authorization is
    not granted for certain API endpoints.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: '[Mocking Database Connection](toc.xhtml#s242a)'
  id: totrans-551
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To mock the database connection, we can use the popular library — `**sinon**`.
    Let us install the library with npm.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: '`npm install sinon –save-dev`'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider if we have a function to get the user for a given id as:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: '`// db.ts`'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: '`async function getUserByUserId(user_id:string) {`'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: '`// actual logic to fetch the user from database`'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: '`module.exports = { getUserByUserId };`'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: We can use sinon to mock this behavior -
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: '`const sinon = require(''sinon'');`'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: '`const { expect } = require(''chai'');`'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
- en: '`const db = require(''../db'');`'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''getUserByUserId'', function() {`'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return mocked user data'', async function() {`'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: '`// Create a stub for getUserByUserId`'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: '`const mockUser = { id: 1, name: ''Alice M'' };`'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: '`const stub = sinon.stub(db, ''getUserByUserId'').resolves(mockUser);`'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: '`// Call the function (which is now stubbed)`'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: '`const user = await getUserByUserId(1);`'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: '`// Verify the function returned the mocked data`'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(user).to.deep.equal(mockUser);`'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: '`// Restore the original function`'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: '`stub.restore();`'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, `**sinon.stub()**` is used to replace the actual function
    `**getUserByUserId()**` with a version that returns a promise which resolves to
    the `**mockUser**`. This test does not connect to an actual database. This way
    it ensures that the test is isolated and repeatable. `**stub.restore()**` at the
    end restores the original function.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: '[Conclusion](toc.xhtml#s243a)'
  id: totrans-578
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, the test cases presented in the code examples provide a comprehensive
    approach to testing various aspects of an Express.js API application. These test
    cases cover different scenarios which include Login and user management APIs.
    These tests are an essential part of ensuring the reliability, security, and correctness
    of the API, and they can help identify and address issues early in the development
    process.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: By systematically testing the application, you can increase its robustness and
    enhance the overall quality of your software.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 通过系统地测试应用程序，您可以提高其鲁棒性并提升您软件的整体质量。
- en: In the next chapter, we will learn how to build and deploy our application.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何构建和部署我们的应用程序。
