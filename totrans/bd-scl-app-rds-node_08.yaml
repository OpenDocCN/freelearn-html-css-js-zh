- en: '[CHAPTER 9](toc.xhtml#c09)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Testing API](toc.xhtml#c09)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Introduction](toc.xhtml#s229a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Node.js is a versatile runtime environment that allows developers to run JavaScript
    on the server-side. When it comes to testing REST APIs, Node.js offers numerous
    libraries and tools to streamline the process. With Node.js, you can write automated
    tests that interact with your RESTful APIs, send HTTP requests, and verify responses.
    It provides a flexible and scalable platform for running API tests, making it
    an excellent choice for both unit and integration testing.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js also allows you to leverage various testing frameworks and libraries,
    such as Mocha, Chai, Jest, and Supertest. These tools simplify the creation of
    test suites, assertion checks, and test runners for your API endpoints. In addition,
    Node.js’s asynchronous nature is well-suited for making HTTP requests and handling
    asynchronous responses, which is crucial in testing APIs. This asynchronous capability
    ensures that your tests can efficiently handle multiple requests and responses
    simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore the process of creating test cases and performing
    API validation.
  prefs: []
  type: TYPE_NORMAL
- en: '[Structure](toc.xhtml#s230a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Unit Testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define Test Cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify Developed API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Overview of Unit Testing](toc.xhtml#s231a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit testing is a fundamental practice in software development that ensures
    that individual units of code are working as intended. In the context of a REST
    API, this means testing each endpoint and the associated business logic separately
    to verify that they respond correctly to different inputs and situations.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing is just one part of testing a REST API. It complements other types
    of testing, such as integration testing (testing how different parts of the API
    work together) and end-to-end testing (testing the entire application from the
    user’s perspective).
  prefs: []
  type: TYPE_NORMAL
- en: 'Unit testing is a critical practice in software development, but it is highly
    specific to the codebase that you are working with. When writing unit test cases,
    it is important to cover a wide range of scenarios to ensure your code functions
    correctly. Here are some key points to consider when writing unit tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Test Case Structure:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe what the test case is testing using ``**describe**`` blocks. Create
    individual test cases using ``**it**`` blocks. Structure your tests logically,
    covering various aspects of your code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Test Data:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include test data or mock data that covers different input scenarios. Include
    edge cases, boundary values, and typical inputs to validate your code’s behavior
    in different situations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Assertions:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use assertions provided by your testing framework (for example, Chai, Jest,
    Jasmine) to check that the code produces the expected results. Verify that the
    actual results match the expected results.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Error Handling:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure your code handles errors or exceptions correctly. Test scenarios where
    exceptions or errors are expected to be thrown.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Code Coverage:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aim for good code coverage, ensuring that as much of your code as possible is
    executed by your tests. Use code coverage tools to identify untested code paths.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Mocks and Stubs:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use mocks and stubs to simulate external dependencies like databases, APIs,
    or services. Ensure that your code interacts correctly with these dependencies.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Positive and Negative Testing:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test with positive scenarios where everything works as expected. Test with negative
    scenarios, where things may go wrong, and the code handles errors correctly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Regression Testing:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Periodically run your unit tests to catch regressions when new code changes
    are introduced.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Automation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit tests are automated, meaning they can be run automatically by a testing
    framework without manual intervention.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Fast Execution**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit tests are designed to be fast, so they can be run frequently during development.
    This quick feedback loop helps catch issues early in the development process.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Remember that unit tests should focus on a single unit of code (a function,
    method, or a small component) and should be fast to execute. Writing comprehensive
    unit tests helps identify and resolve issues early in the development process,
    leading to more robust and maintainable code.
  prefs: []
  type: TYPE_NORMAL
- en: End-to-End Testing, on the other hand, assesses the entire application from
    start to finish. It simulates real user scenarios. It essentially tests how a
    user would interact with the application and includes real database connections,
    network connections, and more. If there is any other application needed to be
    connected, it connects that as well.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, for testing features, we will connect to a real database to
    fetch data. When we use real database connection in tests which ideally would
    be unit tests, we move towards a more integrated testing approach. Sometimes,
    it may be referred to as integration tests.
  prefs: []
  type: TYPE_NORMAL
- en: '[Mocha Framework](toc.xhtml#s232a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mocha is a popular JavaScript test framework for Node.js and web browsers. It
    provides a versatile and feature-rich environment for writing and running test
    cases for your JavaScript applications. Mocha is often used in conjunction with
    assertion libraries like Chai for making assertions in test cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mocha is well-regarded for its flexibility and wide adoption among developers
    for various reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ease of Use:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha’s syntax is easy to learn and write, making it accessible for both beginners
    and experienced developers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Support for Various Test Styles:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha supports different test styles such as BDD (Behavior-Driven Development),
    TDD (Test-Driven Development), and QUnit.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Asynchronous Testing:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha has built-in support for testing asynchronous code, allowing you to use
    `**callbacks**`, `**promises**`, or `**async**`/`**await**`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Hooks:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha provides hooks like `**before**`, `**after**`, `**beforeEach**`, and `**afterEach**`
    to set up and tear down test fixtures.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Reporter System:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha offers a range of built-in reporters for generating test reports and results
    in different formats, as well as custom reporter support.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Parallel Test Execution:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha can run tests in parallel, which can significantly reduce test execution
    time for large test suites.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Test Suites and Nested Descriptions:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can organize your tests into hierarchical suites and describe blocks for
    better structure and readability.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Timeouts:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha allows you to set timeout limits for individual tests or test suites,
    helping identify slow or blocking tests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Test Skips and Exclusivity:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can skip or focus on specific tests or suites using `**.skip**` and `**.only**`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Browser and Node.js Support:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocha can be used both in Node.js and in web browsers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Mocha’s flexibility, extensive ecosystem, and active community make it a popular
    choice for testing JavaScript applications, ranging from small libraries to large
    complex projects.
  prefs: []
  type: TYPE_NORMAL
- en: To use Mocha, you typically install it as an npm package and write your test
    cases in JavaScript or a testing framework like Chai. Mocha provides a command-line
    interface for running tests, and it can be integrated into Continuous Integration
    (CI) pipelines to automate testing.
  prefs: []
  type: TYPE_NORMAL
- en: '[Installing Mocha and Chai](toc.xhtml#s233a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mocha is a testing framework, and Chai is an assertion library often used together
    for testing. Install them as development dependencies in our project through `**cmd**`
    enter the following command with root of project directory
  prefs: []
  type: TYPE_NORMAL
- en: '`**$ npm install mocha chai @types/mocha @types/chai --save-dev**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have successfully installed Chai, let us explore how to utilize it.
    Chai serves as a versatile assertion library, effectively functioning as a plugin
    for your testing needs. `**Chai**` offers three primary styles: `**"expect**`,`**"**`
    `**"should**`,`**"**` and `**"assert**`.`**"**` You can use any of these, but
    `**"expect"**` is the most popular choice.'
  prefs: []
  type: TYPE_NORMAL
- en: '`const chai = require(''chai'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const expect = chai.expect;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Expect a value to be equal to another value`'
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(5).to.equal(5);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Expect an array to include a specific element`'
  prefs: []
  type: TYPE_NORMAL
- en: '`expect([1, 2, 3]).to.include(2);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Expect a value to be a certain data type`'
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(''Hello'').to.be.a(''string'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Expect an object to have a property`'
  prefs: []
  type: TYPE_NORMAL
- en: '`expect({ name: ''John'' }).to.have.property(''name'');`'
  prefs: []
  type: TYPE_NORMAL
- en: You can chain various methods to create complex assertions. `**Chai**` provides
    a wide range of assertion methods to check equality, check for the existence of
    properties, and more. Chai is often used in conjunction with testing frameworks
    like Mocha.
  prefs: []
  type: TYPE_NORMAL
- en: Let us create one directory with the name as `**tests**` in `**src**` directory
    of the project with `**test.spec.ts**` file. The test file extension must be `**.spec.ts**`
    so that tooling can identify it as a file with tests (also known as a spec file).
    As per the following directory structure you can make test files.
  prefs: []
  type: TYPE_NORMAL
- en: '`**tests/**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── user/`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│   ├── user.spec.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── project/`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│   ├── project.spec.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── task/`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│   ├── task.spec.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: '`├── common/`'
  prefs: []
  type: TYPE_NORMAL
- en: '`│   ├── utility.spec.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: '`└── mocha.opts`'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a Mocha configuration file (`**mocha.opts**`) if you want to
    specify Mocha options. This file is optional, but it can be handy for configuring
    Mocha behavior. Here is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--require ts-node/register`'
  prefs: []
  type: TYPE_NORMAL
- en: '`--require chai/register-assert`'
  prefs: []
  type: TYPE_NORMAL
- en: '`--require chai/register-expect`'
  prefs: []
  type: TYPE_NORMAL
- en: '`--require chai/register-should`'
  prefs: []
  type: TYPE_NORMAL
- en: '`--require chai-http/register`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `**tsconfig.json**` file add `**"types": ["express", "./src/custom.d.ts"]**`
    in `**compilerOptions**`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `**package.json**` file add test script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"scripts": {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`"test": "mocha --require ts-node/register src/**/*.spec.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: '`src/**/**/*.spec.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: '`",`'
  prefs: []
  type: TYPE_NORMAL
- en: '`…`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: Currently, no test cases are defined, so it will display 0 passing tests.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.1:** Run Test Script'
  prefs: []
  type: TYPE_NORMAL
- en: '[Defining a Test Case](toc.xhtml#s234a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After the configuration is added, let us define first basic test case in `**utility.spec.ts**`
    file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import chai from ''chai'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import chaiHttp from ''chai-http'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.use(chaiHttp);import { describe, it } from ''mocha'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Use Chai with Chai HTTP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const expect = chai.expect;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''Array'', function () {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''#indexOf()'', function () {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return -1 when the value is not present'', function () {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`expect([1, 2, 3].indexOf(4)).to.equal(-1);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: This test case checks if the `**indexOf**` function correctly returns `**-1**`
    when the value is not present in the array. Chai expect function is used for clear
    and readable assertions in your test cases. If the expectation is met, the test
    will pass; otherwise, it will fail and provide feedback on what went wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the test in `**cmd**` with entering `**$ npm run test**` which gives following
    output :'
  prefs: []
  type: TYPE_NORMAL
- en: '`**Array**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**1) #indexOf()**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔should return -1 when the value is not present**`'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.2:** Utility Success Test Case'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you change expect line with `**expect([1, 2, 3].indexOf(3)).to.equal(-1)**`;
    that fails the test case and gives following output with red mark:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**Array**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**1) #indexOf()**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**should return -1 when the value is not present**`'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.3:** Utility Fail Test Case'
  prefs: []
  type: TYPE_NORMAL
- en: This is a very basic test case to get started. Now, let us dive into more test
    cases by connecting our application and configuring it for execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[Configuring the Application](toc.xhtml#s235a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to make some changes in `**express_server.ts**` file. Since we want
    to connect `**express**` app in test cases, we need to export it. Here is the
    updated code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import express from ''express'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import * as bodyParser from ''body-parser'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { IServerConfig } from ''./utils/config'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import * as config from ''../server_config.json'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Routes } from ''./routes'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`export class ExpressServer {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`private static server = null;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`public server_config: IServerConfig = config;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**public app;**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`constructor() {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const port = this.server_config.port ?? 3000;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// initialize express app`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**this.app = express();**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`this.app.use(bodyParser.urlencoded({ extended: false }));`'
  prefs: []
  type: TYPE_NORMAL
- en: '`this.app.use(bodyParser.json());`'
  prefs: []
  type: TYPE_NORMAL
- en: '`this.app.get(''/ping'', (req, res) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`res.send(''pong'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const routes = new Routes(this.app);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`if (routes) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log(''Server Routes started for server'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ExpressServer.server = this.app.listen(port, () => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '``console.log(`Server is running on port ${port} with pid = ${process.pid}`);``'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`//close the express server for safe on uncaughtException`'
  prefs: []
  type: TYPE_NORMAL
- en: '`public closeServer(): void {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ExpressServer.server.close(() => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log(''Server closed'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`process.exit(0);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, when dealing with test cases, it is necessary to connect to the
    database. Replace the code in the `**db.ts**` file with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { DataSource, Repository } from ''typeorm'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { IServerConfig } from ''./config'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import * as config from ''../../server_config.json'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Roles } from ''../components/roles/roles_entity'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Users } from ''../components/users/users_entity'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Projects } from ''../components/projects/projects_entity'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Tasks } from ''../components/tasks/tasks_entity'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { Comments } from ''../components/comments/comments_entity'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`export class DatabaseUtil {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`private server_config: IServerConfig = config;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`private static connection: DataSource | null = null;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`private repositories: Record<string, Repository<any>> = {};`'
  prefs: []
  type: TYPE_NORMAL
- en: '`constructor() {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`this.connectDatabase();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`/**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`* Establishes a database connection or returns the existing connection if
    available.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`* @returns The database connection instance.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`*/`'
  prefs: []
  type: TYPE_NORMAL
- en: '`public async connectDatabase(): **Promise<DataSource>** {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`try {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**if (DatabaseUtil.connection) {**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**return Promise.resolve(DatabaseUtil.connection);**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**}** else {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const db_config = this.server_config.db_config;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const AppSource = new DataSource({`'
  prefs: []
  type: TYPE_NORMAL
- en: '`type: ''postgres'',`'
  prefs: []
  type: TYPE_NORMAL
- en: '`host: db_config.host,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`port: db_config.port,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`username: db_config.username,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`password: db_config.password,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`database: db_config.dbname,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`entities: [Roles, Users, Projects, Tasks, Comments,Files],`'
  prefs: []
  type: TYPE_NORMAL
- en: '`synchronize: true,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`logging: true,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`poolSize: 10`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`await AppSource.initialize();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`DatabaseUtil.connection = AppSource;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log(''Connected to the database'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`return DatabaseUtil.connection;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`} catch (error) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`console.error(''Error connecting to the database:'', error);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`/**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`* Get the repository for a given entity.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`* @param entity - The entity for which the repository is needed.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`* @returns The repository instance for the entity.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`*/`'
  prefs: []
  type: TYPE_NORMAL
- en: '`public getRepository(entity) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`try {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Check if a valid database connection is available`'
  prefs: []
  type: TYPE_NORMAL
- en: '`if (DatabaseUtil.connection) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const entityName = entity.name;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Check if the repository instance already exists, if not, create it`'
  prefs: []
  type: TYPE_NORMAL
- en: '`if (!this.repositories[entityName]) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`this.repositories[entityName] = DatabaseUtil.connection.getRepository(entity);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`return this.repositories[entityName];`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`return null;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`} catch (error) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '``console.error(`Error while getRepository => ${error.message}`);``'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the code, we have introduced a `**promise**` to ensure that the
    test cases run only after the database connection is established. This helps prevent
    potential errors that could occur otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: In case we want to mock the database connection, there are libraries available
    to do so. One such library is `**sinon**`, `**https://sinonjs.org/**`.
  prefs: []
  type: TYPE_NORMAL
- en: '`**Sinon**` is a testing library used for creating spies, stubs, and mocks
    in JavaScript tests, rather than specifically for mocking databases. It can be
    used to intercept and simulate behavior in functions, methods, or any kind of
    operation in your codebase, including database operations, API requests, or any
    other external service interactions. This makes it incredibly useful for writing
    unit and integration tests where you need to isolate the part of the code being
    tested.'
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter, we are interested in checking our API against a real database.
    Hence, we do not need to use a mock database connection. However, for the sake
    of completion, an example is added at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, replace following code in `**utility.spec.ts**` file to export app in
    test cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { DatabaseUtil } from ''../../utils/db'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { ExpressServer } from ''../../express_server'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import chai from ''chai'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import chaiHttp from ''chai-http'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.use(chaiHttp);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { describe, it } from ''mocha'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Use Chai with Chai HTTP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const expect = chai.expect;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`let app, expressServer;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**before(async () => {**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const databaseUtil = new DatabaseUtil();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`await databaseUtil.connectDatabase();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`expressServer = new ExpressServer();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`app = expressServer.app;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**});**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Close the server after all tests are done`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**after(function (done) {**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`expressServer.closeServer(done);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**});**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`export { app };`'
  prefs: []
  type: TYPE_NORMAL
- en: It imports necessary modules like `**DatabaseUtil**`, `**ExpressServer**`, and
    the testing libraries `**(chai and chai-http). chai.use(chaiHttp)**` configures
    chai to work with HTTP requests, enabling you to make HTTP requests and perform
    assertions on their responses.
  prefs: []
  type: TYPE_NORMAL
- en: '[Hooks](toc.xhtml#s236a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the context of testing frameworks like Mocha, `**"before"**` and `**"after"**`
    are known as test hooks. They are used to set up and tear down the testing environment.
    Here is what they do:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Before Hook** (`**before**`): This hook is executed before any test cases
    within a test suite (defined using describe) are run. It is typically used for
    setting up the environment or any common context needed for the tests. For example,
    you might use it to establish a database connection, initialize variables, or
    start a server.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**before(() => {**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Set up the testing environment`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '**After Hook** (`**after**`): This hook is executed after all test cases within
    a test suite have run. It is commonly used for cleaning up the environment, releasing
    resources, or performing any necessary actions after the tests are completed.
    For example, you might use it to close a database connection, shut down a server,
    or perform `**cleanup**` tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: '`**after(() => {**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Clean up the testing environment`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how the `**"before"**` and `**"after"**` hooks fit into the test lifecycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Before All Tests**: The `**"before"**` hook is executed before any of the
    test cases within the suite are run. It is a one-time setup for the entire suite.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Run Test Cases**: All the test cases (it blocks) within the suite are executed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**After All Tests**: The `**"after"**` hook is executed once all the test cases
    in the suite have been completed. It is a one-time `**cleanup**` step for the
    suite.'
  prefs: []
  type: TYPE_NORMAL
- en: These hooks are useful for ensuring a consistent and clean test environment
    for each test suite. They help avoid code repetition and make it easier to manage
    resources like database connections, servers, or other setup and teardown tasks.
  prefs: []
  type: TYPE_NORMAL
- en: There are also `**beforeEach()**`, and `**afterEach()**` hooks that will execute
    before each test case and after each test case respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can explore hook with another example such as payment create one `**payment.spec.ts**`
    file with following code :'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { expect } from ''chai'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { describe, it } from ''mocha'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`class Payment {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`private amount: number;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`private method: string;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`constructor(amount: number, method: string) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`this.amount = amount;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`this.method = method;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`processPayment(): string {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Simulate payment processing`'
  prefs: []
  type: TYPE_NORMAL
- en: '``return `Payment of ${this.amount} processed via ${this.method}`;``'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''Payment'', () => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`let payment: Payment;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Before hook: This will run before the test suite before(() => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log(''Setting up payment processing…'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Perform setup tasks, e.g., initialize payment gateway`'
  prefs: []
  type: TYPE_NORMAL
- en: '`payment = new Payment(100, ''Credit Card'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// After hook: This will run after the test suite after(() => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`console.log(''Tearing down payment processing…'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Perform teardown tasks, e.g., close payment gateway connection`'
  prefs: []
  type: TYPE_NORMAL
- en: '`payment = null!;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Test case`'
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should process payment successfully'', () => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Act`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const result = payment.processPayment();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Assert`'
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(result).to.equal(''Payment of 100 processed via Credit Card'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example:'
  prefs: []
  type: TYPE_NORMAL
- en: We have a Payment class with a `**processPayment**` method that simulates processing
    a payment transaction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use Mocha’s before hook to perform setup tasks before the test suite. This
    includes initializing payment processing, such as setting up a payment gateway.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use Mocha’s after hook to perform teardown tasks after the test suite. This
    includes closing the payment gateway connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We define a single test case to verify that the payment is processed successfully.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before the test suite runs, the `**"Setting up payment processing…"**` message
    will be logged, indicating that payment processing is being set up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the test suite runs, the `**"Tearing down payment processing…"**` message
    will be logged, indicating that payment processing is being torn down.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now run the test script in the terminal and it will display following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.4:** Hook Example with Payment'
  prefs: []
  type: TYPE_NORMAL
- en: '[Verifying APIs through Test cases](toc.xhtml#s237a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the world of software development, ensuring that your application’s APIs
    work as intended is of paramount importance. To achieve this, we rely on test
    cases, which are a structured approach to validating the functionality, correctness,
    and performance of APIs. Verifying APIs through test cases involves systematically
    testing various aspects of your API to guarantee that it behaves as expected.
  prefs: []
  type: TYPE_NORMAL
- en: '[Login Test](toc.xhtml#s238a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a `**"user.spec.ts"**` file within the `**"tests"**` directory, specifically
    within the `**"user"**` subdirectory, and include the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import chai from ''chai'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import chaiHttp from ''chai-http'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.use(chaiHttp);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { describe, it } from ''mocha'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Use Chai with Chai HTTP`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const expect = chai.expect;`'
  prefs: []
  type: TYPE_NORMAL
- en: '`import { app } from ''../common/utility.spec'';`'
  prefs: []
  type: TYPE_NORMAL
- en: '`let authToken; // Declare a variable to store the authentication token`'
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''Login API'', () => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return a success message when login is successful'', (done) =>
    {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**chai.request(app)** // Replace ''app'' with your Express app instance`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**.post(**''**/api/login**''**)**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**.send({ email:** ''**yamipanchal1993@gmail.com**''**, password:** ''**Abc@123456**''
    **})**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.end((err, res) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(200);**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(res.body).to.have.property(''status'').equal(''success'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`authToken = res.body.data.accessToken; // Save the authentication token`'
  prefs: []
  type: TYPE_NORMAL
- en: '`done();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return an error message when login fails'', (done) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.request(app)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.post(''/api/login'')`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**.send({ email:** ''**yamipanchal1993@gmail.com**''**, password:** ''**wrongpassword**''
    **})**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.end((err, res) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(400);**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**expect(res.body).to.have.property(''message'').equal(''Password is not valid'');**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`done();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`export { authToken };`'
  prefs: []
  type: TYPE_NORMAL
- en: Run the test case in `**cmd**` through the `**npm run**` test which provides
    the following output.
  prefs: []
  type: TYPE_NORMAL
- en: '`> pms-be@1.0.0 test`'
  prefs: []
  type: TYPE_NORMAL
- en: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Login API`'
  prefs: []
  type: TYPE_NORMAL
- en: '`1) "**before all**" hook in "**{root}**"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Connected to the database`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔> should return a success message when login is successful (75ms)**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔ should return an error message when login fails (46ms)**`'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.5:** Login Test Case'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we define two test cases for Login api in that the first has valid data
    and the second has the wrong password.
  prefs: []
  type: TYPE_NORMAL
- en: '`**describe(''Login API'', () => { … });**`: This line defines a test suite
    using the describe function. In this case, it is a suite named `**"Login API"**`
    that groups related test cases together.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**it(''should return a success message when login is successful'', (done)
    => { … });**`: Within the test suite, there is an individual test case defined
    using the it function. This test case has a description that explains what it
    is testing, which is that it should return a success message when the login is
    successful. The `**(done)**` function is passed as an argument, indicating that
    this is an asynchronous test, and the done function is used to signal the completion
    of the test.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**chai.request(app)**`: This line uses the chai-http library to make an HTTP
    request to an Express.js app. app should be replaced with the actual instance
    of your Express app. `**.post(''/api/login'')**`: This line specifies that it
    is a POST request to the `**''/api/login''**` endpoint. It is likely that this
    endpoint is responsible for handling user login.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.send({ email: ''yamipanchal1993@gmail.com'', password: ''Abc@123'' })**`:
    Here, the code sends a JSON object in the request body with the email and password
    values for the login attempt.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.end((err, res) => { … });**`: This is the `**callback**` function that
    gets executed when the HTTP request is completed. It receives two parameters:
    err for any errors that might occur during the request, and res for the response
    from the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(200);**`: This line uses Chai’s expect assertion
    to check if the HTTP response has a status code of 200, which typically indicates
    a successful request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res.body).to.have.property(''status'').equal(''success'');**`: This
    line checks that the response body contains a property named ‘status’ with the
    value `**''success''**`. It is a common way to check if an API response indicates
    a successful operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**authToken = res.body.data.accessToken;**`: If the login is successful, this
    line extracts the authentication token from the response and stores it in the
    authToken variable. This token is often used for subsequent authenticated requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**done();**`: Finally, the `**done**` function is called to indicate that
    the test has completed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This code is a test case for login API returns a successful response with the
    expected status code and message. It also captures the authentication token for
    further testing, typically for authenticated routes.
  prefs: []
  type: TYPE_NORMAL
- en: '[List of User Test](toc.xhtml#s239a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the same file, add the following test case code to verify the List of user
    API.
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''GET List of Users'', () => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return array with status code 200'', (done) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.request(app)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.get(''/api/users'')`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.set(''Authorization'',`'
  prefs: []
  type: TYPE_NORMAL
- en: '`` `Bearer ${authToken}`) // Pass the token in the headers ``'
  prefs: []
  type: TYPE_NORMAL
- en: '`.end((err, res) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// console.log(res);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(res).to.have.status(200);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(res.body).to.have.property(''data'').to.be.an(''array'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`done();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Output`'
  prefs: []
  type: TYPE_NORMAL
- en: '`> pms-be@1.0.0 test`'
  prefs: []
  type: TYPE_NORMAL
- en: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Login API`'
  prefs: []
  type: TYPE_NORMAL
- en: '`1) "**before all**" hook in "**{root}**"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Connected to the database`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return a success message when login is successful (75ms)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return an error message when login fails (46ms)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**GET List of Users**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔ should return array with status code 200**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Server closed`'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.6:** User List Get API Testcase'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the details of the key parts of the proceeding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**describe(''GET List of Users'', () => { … });**`: This line defines a new
    test suite with the description `**"GET List of Users"**`. This suite groups together
    related test cases that are concerned with retrieving a list of users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**it(''should return array with status code 200'', (done) => { … });**`: Within
    the test suite, there is an individual test case defined using the it function.
    The test case description specifies that it should return an array with a status
    code of 200\. The (`**done**`) function is used to indicate that this is an asynchronous
    test, and the done function will be called when the test is complete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.get(''/api/users'')**`: This line specifies that it is a GET request to
    the `**''/api/users''**` endpoint. This endpoint is likely responsible for fetching
    a list of users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.set(''Authorization'', Bearer ${authToken}):**` Here, the code is setting
    an `**"Authorization"**` header in the HTTP request. It includes an authentication
    token in the header, typically in the format `**"Bearer <token>"**`. This is a
    common way to authenticate API requests. `**authToken**` is expected to contain
    the token obtained during a successful login (as shown in your previous code snippet).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.end((err, res) => { … });**`: This is the `**callback**` function that
    gets executed when the HTTP request is completed. It receives two parameters:
    `**err**` for any errors that might occur during the request, and `**res**` for
    the response from the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(200);**`: This line uses Chai’s expect assertion
    to check if the HTTP response has a status code of 200, which typically indicates
    a successful request. This is the common way to ensure that the server responded
    with a 200 `**OK**` status for a successful `**GET**` request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res.body).to.have.property(''data'').to.be.an(''array'');**`: This
    line checks that the response body contains a property named `**''data**`,`**''**`
    and that this property’s value is an array. This is a way to verify that the response
    contains a list of users in the form of an array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**done();**`: Finally, the `**done**` function is called to signal that the
    test has completed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This code is a test case for an Express.js API endpoint that tests whether a
    GET request to fetch a list of users returns the expected status code (`**200**`)
    and verifies that the response contains an array of user data. It also includes
    the authorization token in the request header for authentication, assuming that
    the `**authToken**` variable holds a valid token obtained from a login request.
  prefs: []
  type: TYPE_NORMAL
- en: '[Add User Test](toc.xhtml#s240a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the same file, add the following test case that verifies add user API.
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''ADD User'', () => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return with status code 201'', (done) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.request(app)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.post(''/api/users'')`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.set(''Authorization'',`'
  prefs: []
  type: TYPE_NORMAL
- en: '`` `Bearer ${authToken}`) // Pass the token in the headers ``'
  prefs: []
  type: TYPE_NORMAL
- en: '`.send({`'
  prefs: []
  type: TYPE_NORMAL
- en: '`''fullname'': ''Super Admin'',`'
  prefs: []
  type: TYPE_NORMAL
- en: '`''username'': ''pms-admin1'',`'
  prefs: []
  type: TYPE_NORMAL
- en: '`''email'': ''admin@pms1.com'',`'
  prefs: []
  type: TYPE_NORMAL
- en: '`''password'': ''Admin@pms1'',`'
  prefs: []
  type: TYPE_NORMAL
- en: '`''role_id'': ''dbda47e4-f843-4263-a4d6-69ef80156f81''`'
  prefs: []
  type: TYPE_NORMAL
- en: '`})`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.end((err, res) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(201);**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`done();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return with status code 409'', (done) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.request(app)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.post(''/api/users'')`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.set(''Authorization'',`'
  prefs: []
  type: TYPE_NORMAL
- en: '`` `Bearer ${authToken}`) // Pass the token in the headers ``'
  prefs: []
  type: TYPE_NORMAL
- en: '`.send({`'
  prefs: []
  type: TYPE_NORMAL
- en: '`''fullname'': ''Super Admin'',`'
  prefs: []
  type: TYPE_NORMAL
- en: '`''username'': ''pms-admin1'',`'
  prefs: []
  type: TYPE_NORMAL
- en: '`''email'': ''admin@pms1.com'',`'
  prefs: []
  type: TYPE_NORMAL
- en: '`''password'': ''Admin@pms1'',`'
  prefs: []
  type: TYPE_NORMAL
- en: '`''role_id'': ''dbda47e4-f843-4263-a4d6-69ef80156f81''`'
  prefs: []
  type: TYPE_NORMAL
- en: '`})`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.end((err, res) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(409);**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**expect(res.body).to.have.property(''message'').equal(''Key (username)=(pms-admin1)
    already exists.'');**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`done();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Output`'
  prefs: []
  type: TYPE_NORMAL
- en: '`> pms-be@1.0.0 test`'
  prefs: []
  type: TYPE_NORMAL
- en: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Login API`'
  prefs: []
  type: TYPE_NORMAL
- en: '`1) "before all" hook in "{root}"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Connected to the database`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return a success message when login is successful (75ms)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return an error message when login fails (46ms)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET List of Users`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return array with status code 200`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**ADD User**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔ should return array with status code 201**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔ should return with status code 409 (54ms)**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Server closed`'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.7:** Add User API Test Case'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the details of the key parts of the proceeding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**describe(''ADD User'', () => { … });**`: This line defines a test suite
    with the description `**"ADD User"**`. This suite groups together related test
    cases that are concerned with adding new users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first test case:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**it(''should return with status code 201'', (done) => { … });**`: This test
    case description indicates that it is testing whether adding a user should return
    a status code of `**201**` (Created). The (`**done**`) function is used to indicate
    that this is an asynchronous test, and the `**done**` function will be called
    when the test is complete.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.post(''/api/users'')**`: It’s a `**POST**` request to the `**''/api/users''**`
    endpoint, presumably used to add a new user.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.set(''Authorization'', Bearer ${authToken})**`: This line sets an `**"Authorization"**`
    header in the HTTP request, including the authentication token for authorization.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.send({ … })**`: The code sends a JSON object in the request body with user
    information, including the user’s fullname, username, email, password, and role
    IDs. This represents the data you are trying to add.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.end((err, res) => { … });**`: The `**callback**` function that gets executed
    when the HTTP request is completed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(201);**`: This line uses Chai’s expect assertion
    to check if the HTTP response has a status code of 201, indicating that the user
    creation was successful.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**done();**`: Finally, the `**done**` function is called to signal that the
    test has completed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second test case:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**it(''should return with status code 409'', (done) => { … });**`: This test
    case description indicates that it’s testing whether adding a user with the same
    username should return a status code of `**409**` (Conflict).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The structure of this test case is similar to the first one, with the main
    differences being the expected status code and the additional checks:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(409);**`: This line checks if the HTTP response
    has a status code of `**409**`, indicating a conflict.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res.body).to.have.property(''message'').equal(''Key (username)=(pms-admin1)
    already exists.'');**`: This line verifies that the response body contains a specific
    message indicating that the provided username already exists.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**done();**`: As before, the done function is called to signal the completion
    of the test.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This code contains two test cases. The first test case checks if a new user
    is successfully added with a 201 status code, while the second test case checks
    if a conflict (409 status code) is returned when attempting to add a user with
    an existing username. The second test case also verifies the presence of an error
    message in the response.
  prefs: []
  type: TYPE_NORMAL
- en: '[Delete User Test](toc.xhtml#s241a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within the existing file, include the following test case code to validate the
    functionality of the user deletion API.
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''Delete User'', () => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return with status code 200'', (done) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.request(app)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.delete(''/api/users/0ddc59fe-a9ea-4060-9b39-5118fe13937d'')`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.set(''Authorization'',`'
  prefs: []
  type: TYPE_NORMAL
- en: '`` `Bearer ${authToken}`) // Pass the token in the headers ``'
  prefs: []
  type: TYPE_NORMAL
- en: '`.end((err, res) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(res).to.have.status(201);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`done();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return with status code 404'', (done) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`chai.request(app)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`.delete(''/api/users/0ddc59fe-a9ea-4060-9b39-5118fe13937d'')`'
  prefs: []
  type: TYPE_NORMAL
- en: '``.set(''Authorization'', `Bearer ${authToken}`) // Pass the token in the headers``'
  prefs: []
  type: TYPE_NORMAL
- en: '`.end((err, res) => {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(res).to.have.status(404);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`done();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Output`'
  prefs: []
  type: TYPE_NORMAL
- en: '`> pms-be@1.0.0 test`'
  prefs: []
  type: TYPE_NORMAL
- en: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Login API`'
  prefs: []
  type: TYPE_NORMAL
- en: '`1) "before all" hook in "{root}"`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Connected to the database`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return a success message when login is successful (75ms)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return an error message when login fails (46ms)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET List of Users`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return array with status code 200`'
  prefs: []
  type: TYPE_NORMAL
- en: '`ADD User`'
  prefs: []
  type: TYPE_NORMAL
- en: '`X should return array with status code 201`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔** should return with status code 409 (54ms)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**Delete User**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔ should return with status code 200**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`**✔ should return with status code 404**`'
  prefs: []
  type: TYPE_NORMAL
- en: '`Server closed`'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 9.8:** Delete User API Testcase'
  prefs: []
  type: TYPE_NORMAL
- en: In this code, Add User test case displays fail because same user is already
    in database. Similarly, the Delete User test case might fail if the user you're
    trying to delete doesn't exist in the database when the test runs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first test case:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**it(''should return with status code 200'', (done) => { … });**`: The description
    of this test case indicates that it is testing whether a successful user deletion
    should return a status code of `**200**` (`**OK**`). The (done) function is used
    to indicate that this is an asynchronous test, and the done function will be called
    when the test is complete.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.delete(''/api/users/0ddc59fe-a9ea-4060-9b39-5118fe13937d'')**`: It is a
    DELETE request to a specific endpoint `**''**`/`**api/users/''**` with a user
    identifier (for example, `**''0ddc59fe-a9ea-4060-9b39-5118fe13937d''**`) in the
    URL. This typically represents the action of deleting a specific user by their
    unique identifier.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.set(''Authorization'', Bearer ${authToken})**`: This line sets an `**"Authorization"**`
    header in the HTTP request, including the authentication token for authorization.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**.end((err, res) => { … });**`: The `**callback**` function that gets executed
    when the HTTP request is completed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(201);**`: There is a potential issue in this
    line. It checks if the HTTP response has a status code of `**201**`, but the test
    case description implies that it should be expecting a `**200**` status code.
    This line should be corrected to `**expect(res).to.have.status(200)**`;.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**done();**`: Finally, the `**done**` function is called to signal that the
    test has completed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second test case:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**it(''should return with status code 404'', (done) => { … });**`: The description
    of this test case indicates that it is testing whether attempting to delete a
    user that does not exist should return a status code of `**404 (Not Found)**`.
    The structure of this test case is similar to the first one, with the main difference
    being the expected status code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**expect(res).to.have.status(404);**`: This line checks if the HTTP response
    has a status code of 404, indicating that the requested user was not found.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**done();**`: As before, the done function is called to signal the completion
    of the test.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This code contains two test cases for testing the user deletion functionality
    through an Express.js API. The first test case checks if a user is successfully
    deleted with a `**200**` status code, and the second test case checks if attempting
    to delete a non-existent user results in a `**404**` status code.
  prefs: []
  type: TYPE_NORMAL
- en: In this manner, you have the flexibility to create distinct test scenarios for
    various sections within your application, including user management, project handling,
    task management, and comment features. For each of these APIs, you can define
    specific test cases. Additionally, you can extend your testing suite by incorporating
    cases that verify authentication failures, such as testing for a `**401**` status
    code when authentication is missing and a 403 status code when authorization is
    not granted for certain API endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: '[Mocking Database Connection](toc.xhtml#s242a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To mock the database connection, we can use the popular library — `**sinon**`.
    Let us install the library with npm.
  prefs: []
  type: TYPE_NORMAL
- en: '`npm install sinon –save-dev`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider if we have a function to get the user for a given id as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`// db.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: '`async function getUserByUserId(user_id:string) {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// actual logic to fetch the user from database`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: '`module.exports = { getUserByUserId };`'
  prefs: []
  type: TYPE_NORMAL
- en: We can use sinon to mock this behavior -
  prefs: []
  type: TYPE_NORMAL
- en: '`const sinon = require(''sinon'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const { expect } = require(''chai'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const db = require(''../db'');`'
  prefs: []
  type: TYPE_NORMAL
- en: '`describe(''getUserByUserId'', function() {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`it(''should return mocked user data'', async function() {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Create a stub for getUserByUserId`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const mockUser = { id: 1, name: ''Alice M'' };`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const stub = sinon.stub(db, ''getUserByUserId'').resolves(mockUser);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Call the function (which is now stubbed)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`const user = await getUserByUserId(1);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Verify the function returned the mocked data`'
  prefs: []
  type: TYPE_NORMAL
- en: '`expect(user).to.deep.equal(mockUser);`'
  prefs: []
  type: TYPE_NORMAL
- en: '`// Restore the original function`'
  prefs: []
  type: TYPE_NORMAL
- en: '`stub.restore();`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: '`});`'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, `**sinon.stub()**` is used to replace the actual function
    `**getUserByUserId()**` with a version that returns a promise which resolves to
    the `**mockUser**`. This test does not connect to an actual database. This way
    it ensures that the test is isolated and repeatable. `**stub.restore()**` at the
    end restores the original function.
  prefs: []
  type: TYPE_NORMAL
- en: '[Conclusion](toc.xhtml#s243a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, the test cases presented in the code examples provide a comprehensive
    approach to testing various aspects of an Express.js API application. These test
    cases cover different scenarios which include Login and user management APIs.
    These tests are an essential part of ensuring the reliability, security, and correctness
    of the API, and they can help identify and address issues early in the development
    process.
  prefs: []
  type: TYPE_NORMAL
- en: By systematically testing the application, you can increase its robustness and
    enhance the overall quality of your software.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to build and deploy our application.
  prefs: []
  type: TYPE_NORMAL
