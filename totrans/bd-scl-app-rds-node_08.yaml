- en: '[CHAPTER 9](toc.xhtml#c09)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第9章](toc.xhtml#c09)'
- en: '[Testing API](toc.xhtml#c09)'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[测试API](toc.xhtml#c09)'
- en: '[Introduction](toc.xhtml#s229a)'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[介绍](toc.xhtml#s229a)'
- en: Node.js is a versatile runtime environment that allows developers to run JavaScript
    on the server-side. When it comes to testing REST APIs, Node.js offers numerous
    libraries and tools to streamline the process. With Node.js, you can write automated
    tests that interact with your RESTful APIs, send HTTP requests, and verify responses.
    It provides a flexible and scalable platform for running API tests, making it
    an excellent choice for both unit and integration testing.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是一个多功能的运行环境，允许开发者将JavaScript运行在服务器端。当涉及到测试REST API时，Node.js提供了众多库和工具来简化这一过程。使用Node.js，你可以编写与你的RESTful
    API交互的自动化测试，发送HTTP请求，并验证响应。它提供了一个灵活且可扩展的平台来运行API测试，使其成为单元测试和集成测试的绝佳选择。
- en: Node.js also allows you to leverage various testing frameworks and libraries,
    such as Mocha, Chai, Jest, and Supertest. These tools simplify the creation of
    test suites, assertion checks, and test runners for your API endpoints. In addition,
    Node.js’s asynchronous nature is well-suited for making HTTP requests and handling
    asynchronous responses, which is crucial in testing APIs. This asynchronous capability
    ensures that your tests can efficiently handle multiple requests and responses
    simultaneously.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js还允许你利用各种测试框架和库，如Mocha、Chai、Jest和Supertest。这些工具简化了测试套件的创建、断言检查和API端点的测试运行器。此外，Node.js的异步特性非常适合进行HTTP请求和处理异步响应，这在测试API中至关重要。这种异步能力确保你的测试可以高效地同时处理多个请求和响应。
- en: In this chapter, we will explore the process of creating test cases and performing
    API validation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨创建测试用例和执行API验证的过程。
- en: '[Structure](toc.xhtml#s230a)'
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[结构](toc.xhtml#s230a)'
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论以下主题：
- en: Overview of Unit Testing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试概述
- en: Mocha Framework
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mocha框架
- en: Define Test Cases
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义测试用例
- en: Verify Developed API
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证开发的API
- en: '[Overview of Unit Testing](toc.xhtml#s231a)'
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[单元测试概述](toc.xhtml#s231a)'
- en: Unit testing is a fundamental practice in software development that ensures
    that individual units of code are working as intended. In the context of a REST
    API, this means testing each endpoint and the associated business logic separately
    to verify that they respond correctly to different inputs and situations.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是软件开发中的基本实践，确保单个代码单元按预期工作。在REST API的上下文中，这意味着分别测试每个端点和相关的业务逻辑，以验证它们对不同输入和情况是否正确响应。
- en: Unit testing is just one part of testing a REST API. It complements other types
    of testing, such as integration testing (testing how different parts of the API
    work together) and end-to-end testing (testing the entire application from the
    user’s perspective).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试只是测试REST API的一部分。它补充了其他类型的测试，如集成测试（测试API的不同部分如何协同工作）和端到端测试（从用户的角度测试整个应用程序）。
- en: 'Unit testing is a critical practice in software development, but it is highly
    specific to the codebase that you are working with. When writing unit test cases,
    it is important to cover a wide range of scenarios to ensure your code functions
    correctly. Here are some key points to consider when writing unit tests:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是软件开发中的关键实践，但它高度特定于你正在工作的代码库。在编写单元测试用例时，重要的是要涵盖广泛的情况，以确保你的代码正确运行。以下是在编写单元测试时需要考虑的一些关键点：
- en: '**Test Case Structure:**'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试用例结构：**'
- en: Describe what the test case is testing using ``**describe**`` blocks. Create
    individual test cases using ``**it**`` blocks. Structure your tests logically,
    covering various aspects of your code.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`**describe**`块描述测试用例正在测试的内容。使用`**it**`块创建单个测试用例。逻辑地构建你的测试，涵盖代码的各个方面。
- en: '**Test Data:**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试数据：**'
- en: Include test data or mock data that covers different input scenarios. Include
    edge cases, boundary values, and typical inputs to validate your code’s behavior
    in different situations.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 包含覆盖不同输入场景的测试数据或模拟数据。包括边缘情况、边界值和典型输入，以验证你的代码在不同情况下的行为。
- en: '**Assertions:**'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**断言：**'
- en: Use assertions provided by your testing framework (for example, Chai, Jest,
    Jasmine) to check that the code produces the expected results. Verify that the
    actual results match the expected results.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用你的测试框架提供的断言（例如，Chai、Jest、Jasmine）来检查代码是否产生预期的结果。验证实际结果是否与预期结果相符。
- en: '**Error Handling:**'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理：**'
- en: Ensure your code handles errors or exceptions correctly. Test scenarios where
    exceptions or errors are expected to be thrown.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保代码正确处理错误或异常。测试预期抛出异常或错误的场景。
- en: '**Code Coverage:**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码覆盖率：**'
- en: Aim for good code coverage, ensuring that as much of your code as possible is
    executed by your tests. Use code coverage tools to identify untested code paths.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 争取良好的代码覆盖率，确保尽可能多的代码通过测试被执行。使用代码覆盖率工具来识别未测试的代码路径。
- en: '**Mocks and Stubs:**'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟和存根：**'
- en: Use mocks and stubs to simulate external dependencies like databases, APIs,
    or services. Ensure that your code interacts correctly with these dependencies.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用模拟和存根来模拟外部依赖，如数据库、API 或服务。确保代码与这些依赖正确交互。
- en: '**Positive and Negative Testing:**'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**积极和消极测试：**'
- en: Test with positive scenarios where everything works as expected. Test with negative
    scenarios, where things may go wrong, and the code handles errors correctly.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用一切按预期工作的积极场景进行测试。使用可能出错且代码能够正确处理错误的消极场景进行测试。
- en: '**Regression Testing:**'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回归测试：**'
- en: Periodically run your unit tests to catch regressions when new code changes
    are introduced.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 定期运行单元测试，以捕捉引入新代码更改时的回归。
- en: '**Automation**'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**'
- en: Unit tests are automated, meaning they can be run automatically by a testing
    framework without manual intervention.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单元测试是自动化的，这意味着它们可以由测试框架自动运行，无需人工干预。
- en: '**Fast Execution**'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速执行**'
- en: Unit tests are designed to be fast, so they can be run frequently during development.
    This quick feedback loop helps catch issues early in the development process.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 单元测试旨在快速执行，以便在开发过程中频繁运行。这个快速反馈循环有助于在开发早期阶段捕捉问题。
- en: Remember that unit tests should focus on a single unit of code (a function,
    method, or a small component) and should be fast to execute. Writing comprehensive
    unit tests helps identify and resolve issues early in the development process,
    leading to more robust and maintainable code.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，单元测试应专注于单个代码单元（一个函数、方法或一个小组件），并且应该快速执行。编写全面的单元测试有助于在开发早期阶段识别和解决问题，从而产生更健壮和可维护的代码。
- en: End-to-End Testing, on the other hand, assesses the entire application from
    start to finish. It simulates real user scenarios. It essentially tests how a
    user would interact with the application and includes real database connections,
    network connections, and more. If there is any other application needed to be
    connected, it connects that as well.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端测试另一方面评估整个应用程序从开始到结束。它模拟真实用户场景。它本质上测试用户如何与应用程序交互，包括真实数据库连接、网络连接等。如果需要连接其他应用程序，它也会连接。
- en: In this chapter, for testing features, we will connect to a real database to
    fetch data. When we use real database connection in tests which ideally would
    be unit tests, we move towards a more integrated testing approach. Sometimes,
    it may be referred to as integration tests.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，为了测试功能，我们将连接到真实数据库以获取数据。当我们使用真实数据库连接进行测试时，这理想上应该是单元测试，我们转向了更集成的测试方法。有时，这可能会被称为集成测试。
- en: '[Mocha Framework](toc.xhtml#s232a)'
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[Mocha 框架](toc.xhtml#s232a)'
- en: Mocha is a popular JavaScript test framework for Node.js and web browsers. It
    provides a versatile and feature-rich environment for writing and running test
    cases for your JavaScript applications. Mocha is often used in conjunction with
    assertion libraries like Chai for making assertions in test cases.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Mocha 是一个流行的 Node.js 和网页浏览器的 JavaScript 测试框架。它为编写和运行 JavaScript 应用程序的测试用例提供了一个灵活且功能丰富的环境。Mocha
    通常与 Chai 等断言库结合使用，以便在测试用例中进行断言。
- en: 'Mocha is well-regarded for its flexibility and wide adoption among developers
    for various reasons:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Mocha 因其灵活性和在开发者中的广泛采用而受到好评，原因有很多：
- en: '**Ease of Use:**'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易用性：**'
- en: Mocha’s syntax is easy to learn and write, making it accessible for both beginners
    and experienced developers.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mocha 的语法易于学习和编写，这使得它既适合初学者也适合经验丰富的开发者。
- en: '**Support for Various Test Styles:**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持各种测试风格：**'
- en: Mocha supports different test styles such as BDD (Behavior-Driven Development),
    TDD (Test-Driven Development), and QUnit.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mocha 支持不同的测试风格，如 BDD（行为驱动开发）、TDD（测试驱动开发）和 QUnit。
- en: '**Asynchronous Testing:**'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步测试：**'
- en: Mocha has built-in support for testing asynchronous code, allowing you to use
    `**callbacks**`, `**promises**`, or `**async**`/`**await**`.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mocha 内置了对测试异步代码的支持，允许您使用 `**回调**`、`**承诺**` 或 `**async**`/`**await**`。
- en: '**Hooks:**'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**钩子：**'
- en: Mocha provides hooks like `**before**`, `**after**`, `**beforeEach**`, and `**afterEach**`
    to set up and tear down test fixtures.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mocha 提供了 `**before**`、`**after**`、`**beforeEach**` 和 `**afterEach**` 等钩子来设置和清理测试固定装置。
- en: '**Reporter System:**'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**报告系统：**'
- en: Mocha offers a range of built-in reporters for generating test reports and results
    in different formats, as well as custom reporter support.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mocha 提供了多种内置的报告器，用于以不同格式生成测试报告和结果，以及自定义报告器的支持。
- en: '**Parallel Test Execution:**'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行测试执行：**'
- en: Mocha can run tests in parallel, which can significantly reduce test execution
    time for large test suites.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mocha 可以并行运行测试，这可以显著减少大型测试套件的测试执行时间。
- en: '**Test Suites and Nested Descriptions:**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试套件和嵌套描述：**'
- en: You can organize your tests into hierarchical suites and describe blocks for
    better structure and readability.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以将测试组织成层次套件和描述块，以获得更好的结构和可读性。
- en: '**Timeouts:**'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超时：**'
- en: Mocha allows you to set timeout limits for individual tests or test suites,
    helping identify slow or blocking tests.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mocha 允许您为单个测试或测试套件设置超时限制，有助于识别缓慢或阻塞的测试。
- en: '**Test Skips and Exclusivity:**'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试跳过和独占性：**'
- en: You can skip or focus on specific tests or suites using `**.skip**` and `**.only**`.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使用 `**.skip**` 和 `**.only**` 跳过或专注于特定的测试或测试套件。
- en: '**Browser and Node.js Support:**'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览器和 Node.js 支持：**'
- en: Mocha can be used both in Node.js and in web browsers.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Mocha 既可以用于 Node.js，也可以用于网页浏览器。
- en: Mocha’s flexibility, extensive ecosystem, and active community make it a popular
    choice for testing JavaScript applications, ranging from small libraries to large
    complex projects.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Mocha 的灵活性、广泛的生态系统和活跃的社区使其成为测试 JavaScript 应用程序的流行选择，从小型库到大型复杂项目。
- en: To use Mocha, you typically install it as an npm package and write your test
    cases in JavaScript or a testing framework like Chai. Mocha provides a command-line
    interface for running tests, and it can be integrated into Continuous Integration
    (CI) pipelines to automate testing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Mocha，您通常将其作为 npm 包安装，并用 JavaScript 或 Chai 等测试框架编写测试用例。Mocha 提供了命令行界面来运行测试，并且它可以集成到持续集成
    (CI) 管道中来自动化测试。
- en: '[Installing Mocha and Chai](toc.xhtml#s233a)'
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[安装 Mocha 和 Chai](toc.xhtml#s233a)'
- en: Mocha is a testing framework, and Chai is an assertion library often used together
    for testing. Install them as development dependencies in our project through `**cmd**`
    enter the following command with root of project directory
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Mocha 是一个测试框架，Chai 是一个断言库，通常一起用于测试。通过在项目根目录下使用 `**cmd**` 命令，将它们作为开发依赖项安装到我们的项目中
- en: '`**$ npm install mocha chai @types/mocha @types/chai --save-dev**`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`**$ npm install mocha chai @types/mocha @types/chai --save-dev**`'
- en: 'After you have successfully installed Chai, let us explore how to utilize it.
    Chai serves as a versatile assertion library, effectively functioning as a plugin
    for your testing needs. `**Chai**` offers three primary styles: `**"expect**`,`**"**`
    `**"should**`,`**"**` and `**"assert**`.`**"**` You can use any of these, but
    `**"expect"**` is the most popular choice.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在您成功安装 Chai 之后，让我们来探索如何利用它。Chai 是一个多功能的断言库，有效地作为您测试需求的插件。`**Chai**` 提供了三种主要风格：`**"expect**`、`**"should**`
    和 `**"assert**`。您可以使用其中任何一种，但 `**"expect"**` 是最受欢迎的选择。
- en: '`const chai = require(''chai'');`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`const chai = require(''chai'');`'
- en: '`const expect = chai.expect;`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`const expect = chai.expect;`'
- en: '`// Expect a value to be equal to another value`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 预期一个值等于另一个值`'
- en: '`expect(5).to.equal(5);`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`expect(5).to.equal(5);`'
- en: '`// Expect an array to include a specific element`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 预期一个数组包含特定元素`'
- en: '`expect([1, 2, 3]).to.include(2);`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`expect([1, 2, 3]).to.include(2);`'
- en: '`// Expect a value to be a certain data type`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 预期一个值是特定数据类型`'
- en: '`expect(''Hello'').to.be.a(''string'');`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`expect(''Hello'').to.be.a(''string'');`'
- en: '`// Expect an object to have a property`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 预期一个对象具有属性`'
- en: '`expect({ name: ''John'' }).to.have.property(''name'');`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`expect({ name: ''John'' }).to.have.property(''name'');`'
- en: You can chain various methods to create complex assertions. `**Chai**` provides
    a wide range of assertion methods to check equality, check for the existence of
    properties, and more. Chai is often used in conjunction with testing frameworks
    like Mocha.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将各种方法链式调用以创建复杂的断言。`**Chai**` 提供了广泛的断言方法来检查相等性、检查属性的存在等。Chai 通常与 Mocha 等测试框架一起使用。
- en: Let us create one directory with the name as `**tests**` in `**src**` directory
    of the project with `**test.spec.ts**` file. The test file extension must be `**.spec.ts**`
    so that tooling can identify it as a file with tests (also known as a spec file).
    As per the following directory structure you can make test files.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在项目的 `**src**` 目录下创建一个名为 `**tests**` 的目录，并在其中创建一个 `**test.spec.ts**` 文件。测试文件的扩展名必须是
    `**.spec.ts**`，这样工具才能将其识别为测试文件（也称为规范文件）。根据以下目录结构，您可以创建测试文件。
- en: '`**tests/**`'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`**tests/**`'
- en: '`├── user/`'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── user/`'
- en: '`│   ├── user.spec.ts`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`│   ├── user.spec.ts`'
- en: '`├── project/`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── common/`'
- en: '`│   ├── project.spec.ts`'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`│   ├── project.spec.ts`'
- en: '`├── task/`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── project/`'
- en: '`│   ├── task.spec.ts`'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`│   ├── user.spec.ts`'
- en: '`├── common/`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── common/`'
- en: '`│   ├── utility.spec.ts`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`│   ├── utility.spec.ts`'
- en: '`└── mocha.opts`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`└── mocha.opts`'
- en: 'You can create a Mocha configuration file (`**mocha.opts**`) if you want to
    specify Mocha options. This file is optional, but it can be handy for configuring
    Mocha behavior. Here is a simple example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个 Mocha 配置文件 (`**mocha.opts**`)，如果您想指定 Mocha 选项。此文件是可选的，但它可以方便地配置 Mocha
    的行为。以下是一个简单的示例：
- en: '`--require ts-node/register`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`--require ts-node/register`'
- en: '`--require chai/register-assert`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`--require chai/register-assert`'
- en: '`--require chai/register-expect`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`--require chai/register-expect`'
- en: '`--require chai/register-should`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加配置后，让我们在 `**utility.spec.ts**` 文件中定义第一个基本测试用例，代码如下：
- en: '`--require chai-http/register`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`--require chai-http/register`'
- en: 'In the `**tsconfig.json**` file add `**"types": ["express", "./src/custom.d.ts"]**`
    in `**compilerOptions**`.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '在 `**tsconfig.json**` 文件中，在 `**compilerOptions**` 下添加 `**"types": ["express",
    "./src/custom.d.ts"]**`。'
- en: 'In the `**package.json**` file add test script as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `**package.json**` 文件中添加以下测试脚本：
- en: '`"scripts": {`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`"scripts": {`'
- en: '`"test": "mocha --require ts-node/register src/**/*.spec.ts`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`"test": "mocha --require ts-node/register src/**/*.spec.ts`'
- en: '`src/**/**/*.spec.ts`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/**/**/*.spec.ts`'
- en: '`",`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`",`'
- en: '`…`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`…`'
- en: '`}`'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个 Mocha 配置文件 (`**mocha.opts**`)，如果您想指定 Mocha 选项。此文件是可选的，但它可以方便地配置 Mocha
    的行为。以下是一个简单的示例：
- en: Currently, no test cases are defined, so it will display 0 passing tests.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 目前没有定义测试用例，所以将显示 0 个通过测试。
- en: '![](img/9.1.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9.1.jpg)'
- en: '**Figure 9.1:** Run Test Script'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9.1:** 运行测试脚本'
- en: '[Defining a Test Case](toc.xhtml#s234a)'
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[定义测试用例](toc.xhtml#s234a)'
- en: 'After the configuration is added, let us define first basic test case in `**utility.spec.ts**`
    file with the following code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加配置后，让我们在 `**utility.spec.ts**` 文件中定义第一个基本测试用例，代码如下：
- en: '`import chai from ''chai'';`'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`import chai from ''chai'';`'
- en: '`import chaiHttp from ''chai-http'';`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`import chaiHttp from ''chai-http'';`'
- en: '`chai.use(chaiHttp);import { describe, it } from ''mocha'';`'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`chai.use(chaiHttp);import { describe, it } from ''mocha'';`'
- en: '`// Use Chai with Chai HTTP`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 使用 Chai 和 Chai HTTP`'
- en: '`const expect = chai.expect;`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`const expect = chai.expect;`'
- en: '`describe(''Array'', function () {`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe(''Array'', function () {`'
- en: '`describe(''#indexOf()'', function () {`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe(''#indexOf()'', function () {`'
- en: '`it(''should return -1 when the value is not present'', function () {`'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`it(''should return -1 when the value is not present'', function () {`'
- en: '`expect([1, 2, 3].indexOf(4)).to.equal(-1);`'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`expect([1, 2, 3].indexOf(4)).to.equal(-1);`'
- en: '`});`'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: This test case checks if the `**indexOf**` function correctly returns `**-1**`
    when the value is not present in the array. Chai expect function is used for clear
    and readable assertions in your test cases. If the expectation is met, the test
    will pass; otherwise, it will fail and provide feedback on what went wrong.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此测试用例检查 `**indexOf**` 函数是否在数组中不存在值时正确返回 `**-1**`。Chai expect 函数用于在测试用例中进行清晰和可读的断言。如果满足预期，测试将通过；否则，它将失败，并提供有关出错原因的反馈。
- en: 'Run the test in `**cmd**` with entering `**$ npm run test**` which gives following
    output :'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `**cmd**` 中运行测试，输入 `**$ npm run test**`，将得到以下输出：
- en: '`**Array**`'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`**数组**`'
- en: '`**1) #indexOf()**`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`**1) #indexOf()**`'
- en: '`**✔should return -1 when the value is not present**`'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔当值不存在时应返回 -1**`'
- en: '![](img/9.2.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9.2.jpg)'
- en: '**Figure 9.2:** Utility Success Test Case'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9.2:** 工具成功测试用例'
- en: 'If you change expect line with `**expect([1, 2, 3].indexOf(3)).to.equal(-1)**`;
    that fails the test case and gives following output with red mark:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将 expect 行更改为 `**expect([1, 2, 3].indexOf(3)).to.equal(-1)**`，则测试用例将失败，并显示以下带有红色标记的输出：
- en: '`**Array**`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`**数组**`'
- en: '`**1) #indexOf()**`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`**1) #indexOf()**`'
- en: '`**should return -1 when the value is not present**`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`**当值不存在时应返回 -1**`'
- en: '![](img/9.3.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9.3.jpg)'
- en: '**Figure 9.3:** Utility Fail Test Case'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**图9.3:** 工具失败测试用例'
- en: This is a very basic test case to get started. Now, let us dive into more test
    cases by connecting our application and configuring it for execution.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/**/**/*.spec.ts`'
- en: '[Configuring the Application](toc.xhtml#s235a)'
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[配置应用程序](toc.xhtml#s235a)'
- en: 'We need to make some changes in `**express_server.ts**` file. Since we want
    to connect `**express**` app in test cases, we need to export it. Here is the
    updated code:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`**express_server.ts**`文件中做一些修改。由于我们想在测试用例中连接`**express**`应用，我们需要将其导出。以下是更新后的代码：
- en: '`import express from ''express'';`'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`import express from ''express'';`'
- en: '`import * as bodyParser from ''body-parser'';`'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`import * as bodyParser from ''body-parser'';`'
- en: '`import { IServerConfig } from ''./utils/config'';`'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { IServerConfig } from ''./utils/config'';`'
- en: '`import * as config from ''../server_config.json'';`'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`import * as config from ''../server_config.json'';`'
- en: '`import { Routes } from ''./routes'';`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { Routes } from ''./routes'';`'
- en: '`export class ExpressServer {`'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`export class ExpressServer {`'
- en: '`private static server = null;`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`private static server = null;`'
- en: '`public server_config: IServerConfig = config;`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`public server_config: IServerConfig = config;`'
- en: '`**public app;**`'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`**public app;**`'
- en: '`constructor() {`'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`constructor() {`'
- en: '`const port = this.server_config.port ?? 3000;`'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`const port = this.server_config.port ?? 3000;`'
- en: '`// initialize express app`'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`//初始化express应用`'
- en: '`**this.app = express();**`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`**this.app = express();**`'
- en: '`this.app.use(bodyParser.urlencoded({ extended: false }));`'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.app.use(bodyParser.urlencoded({ extended: false }));`'
- en: '`this.app.use(bodyParser.json());`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.app.use(bodyParser.json());`'
- en: '`this.app.get(''/ping'', (req, res) => {`'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.app.get(''/ping'', (req, res) => {`'
- en: '`res.send(''pong'');`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.send(''pong'');`'
- en: '`});`'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`const routes = new Routes(this.app);`'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`const routes = new Routes(this.app);`'
- en: '`if (routes) {`'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`if (routes) {`'
- en: '`console.log(''Server Routes started for server'');`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log(''服务器路由已启动'');`'
- en: '`}`'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`ExpressServer.server = this.app.listen(port, () => {`'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExpressServer.server = this.app.listen(port, () => {`'
- en: '``console.log(`Server is running on port ${port} with pid = ${process.pid}`);``'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '``console.log(`服务器正在端口 ${port} 上运行，进程ID = ${process.pid}`);``'
- en: '`});`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`}`'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`//close the express server for safe on uncaughtException`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`//在未捕获异常时安全关闭express服务器`'
- en: '`public closeServer(): void {`'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`public closeServer(): void {`'
- en: '`ExpressServer.server.close(() => {`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExpressServer.server.close(() => {`'
- en: '`console.log(''Server closed'');`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log(''服务器已关闭'');`'
- en: '`process.exit(0);`'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`process.exit(0);`'
- en: '`});`'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`}`'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: 'Similarly, when dealing with test cases, it is necessary to connect to the
    database. Replace the code in the `**db.ts**` file with the following:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在处理测试用例时，需要连接到数据库。将`**db.ts**`文件中的代码替换为以下内容：
- en: '`import { DataSource, Repository } from ''typeorm'';`'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { DataSource, Repository } from ''typeorm'';`'
- en: '`import { IServerConfig } from ''./config'';`'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { IServerConfig } from ''./config'';`'
- en: '`import * as config from ''../../server_config.json'';`'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`import * as config from ''../../server_config.json'';`'
- en: '`import { Roles } from ''../components/roles/roles_entity'';`'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { Roles } from ''../components/roles/roles_entity'';`'
- en: '`import { Users } from ''../components/users/users_entity'';`'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { Users } from ''../components/users/users_entity'';`'
- en: '`import { Projects } from ''../components/projects/projects_entity'';`'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { Projects } from ''../components/projects/projects_entity'';`'
- en: '`import { Tasks } from ''../components/tasks/tasks_entity'';`'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { Tasks } from ''../components/tasks/tasks_entity'';`'
- en: '`import { Comments } from ''../components/comments/comments_entity'';`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { Comments } from ''../components/comments/comments_entity'';`'
- en: '`export class DatabaseUtil {`'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`export class DatabaseUtil {`'
- en: '`private server_config: IServerConfig = config;`'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`private server_config: IServerConfig = config;`'
- en: '`private static connection: DataSource | null = null;`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`private static connection: DataSource | null = null;`'
- en: '`private repositories: Record<string, Repository<any>> = {};`'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`private repositories: Record<string, Repository<any>> = {};`'
- en: '`constructor() {`'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`constructor() {`'
- en: '`this.connectDatabase();`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.connectDatabase();`'
- en: '`}`'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`/**`'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`/**`'
- en: '`* Establishes a database connection or returns the existing connection if
    available.`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`* 建立数据库连接或返回可用的现有连接。`'
- en: '`* @returns The database connection instance.`'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`* @returns 返回数据库连接实例。`'
- en: '`*/`'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`*/`'
- en: '`public async connectDatabase(): **Promise<DataSource>** {`'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`public async connectDatabase(): **Promise<DataSource>** {`'
- en: '`try {`'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`try {`'
- en: '`**if (DatabaseUtil.connection) {**`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`**if (DatabaseUtil.connection) {**`'
- en: '`**return Promise.resolve(DatabaseUtil.connection);**`'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`**return Promise.resolve(DatabaseUtil.connection);**`'
- en: '`**}** else {`'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`**}** else {`'
- en: '`const db_config = this.server_config.db_config;`'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`const db_config = this.server_config.db_config;`'
- en: '`const AppSource = new DataSource({`'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`const AppSource = new DataSource({`'
- en: '`type: ''postgres'',`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`type: ''postgres'',`'
- en: '`host: db_config.host,`'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`host: db_config.host,`'
- en: '`port: db_config.port,`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`port: db_config.port,`'
- en: '`username: db_config.username,`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`username: db_config.username,`'
- en: '`password: db_config.password,`'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`password: db_config.password,`'
- en: '`database: db_config.dbname,`'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`database: db_config.dbname,`'
- en: '`entities: [Roles, Users, Projects, Tasks, Comments,Files],`'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`entities: [Roles, Users, Projects, Tasks, Comments,Files],`'
- en: '`synchronize: true,`'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`synchronize: true,`'
- en: '`logging: true,`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`logging: true,`'
- en: '`poolSize: 10`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`poolSize: 10`'
- en: '`});`'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`await AppSource.initialize();`'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`await AppSource.initialize();`'
- en: '`DatabaseUtil.connection = AppSource;`'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`DatabaseUtil.connection = AppSource;`'
- en: '`console.log(''Connected to the database'');`'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log(''已连接到数据库'');`'
- en: '`return DatabaseUtil.connection;`'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`return DatabaseUtil.connection;`'
- en: '`}`'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`} catch (error) {`'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`} catch (error) {`'
- en: '`console.error(''Error connecting to the database:'', error);`'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.error(''Error connecting to the database:'', error);`'
- en: '`}`'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`/**`'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`/**`'
- en: '`* Get the repository for a given entity.`'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`* 获取给定实体的存储库。`'
- en: '`* @param entity - The entity for which the repository is needed.`'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`* @param entity - 需要存储库的实体。`'
- en: '`* @returns The repository instance for the entity.`'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`* @returns 实体的存储库实例。`'
- en: '`*/`'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`*/`'
- en: '`public getRepository(entity) {`'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`public getRepository(entity) {`'
- en: '`try {`'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`try {`'
- en: '`// Check if a valid database connection is available`'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 检查是否有有效的数据库连接`'
- en: '`if (DatabaseUtil.connection) {`'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`if (DatabaseUtil.connection) {`'
- en: '`const entityName = entity.name;`'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`const entityName = entity.name;`'
- en: '`// Check if the repository instance already exists, if not, create it`'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 检查存储库实例是否已存在，如果不存在，则创建它`'
- en: '`if (!this.repositories[entityName]) {`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`if (!this.repositories[entityName]) {`'
- en: '`this.repositories[entityName] = DatabaseUtil.connection.getRepository(entity);`'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.repositories[entityName] = DatabaseUtil.connection.getRepository(entity);`'
- en: '`}`'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`return this.repositories[entityName];`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`return this.repositories[entityName];`'
- en: '`}`'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`return null;`'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`return null;`'
- en: '`} catch (error) {`'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`} catch (error) {`'
- en: '``console.error(`Error while getRepository => ${error.message}`);``'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '``console.error(`Error while getRepository => ${error.message}`);``'
- en: '`}`'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: As shown in the code, we have introduced a `**promise**` to ensure that the
    test cases run only after the database connection is established. This helps prevent
    potential errors that could occur otherwise.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如代码所示，我们引入了一个`**promise**`来确保测试用例仅在数据库连接建立后运行。这有助于防止可能发生的潜在错误。
- en: In case we want to mock the database connection, there are libraries available
    to do so. One such library is `**sinon**`, `**https://sinonjs.org/**`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要模拟数据库连接，有可用的库来完成这项工作。其中一个这样的库是`**sinon**`，`**https://sinonjs.org/**`。
- en: '`**Sinon**` is a testing library used for creating spies, stubs, and mocks
    in JavaScript tests, rather than specifically for mocking databases. It can be
    used to intercept and simulate behavior in functions, methods, or any kind of
    operation in your codebase, including database operations, API requests, or any
    other external service interactions. This makes it incredibly useful for writing
    unit and integration tests where you need to isolate the part of the code being
    tested.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`**Sinon**`是一个用于在JavaScript测试中创建间谍、存根和模拟的测试库，而不是专门用于模拟数据库。它可以用来拦截和模拟函数、方法或代码库中的任何类型的操作，包括数据库操作、API请求或任何其他外部服务交互。这使得它在编写需要隔离被测试代码部分的单元和集成测试时非常有用。'
- en: For this chapter, we are interested in checking our API against a real database.
    Hence, we do not need to use a mock database connection. However, for the sake
    of completion, an example is added at the end of this chapter.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，我们感兴趣的是检查我们的API与真实数据库的兼容性。因此，我们不需要使用模拟数据库连接。然而，为了完整性，本章末尾添加了一个示例。
- en: 'Now, replace following code in `**utility.spec.ts**` file to export app in
    test cases:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下代码替换为`**utility.spec.ts**`文件中的导出应用在测试用例中：
- en: '`import { DatabaseUtil } from ''../../utils/db'';`'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { DatabaseUtil } from ''../../utils/db'';`'
- en: '`import { ExpressServer } from ''../../express_server'';`'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { ExpressServer } from ''../../express_server'';`'
- en: '`import chai from ''chai'';`'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`import chai from ''chai'';`'
- en: '`import chaiHttp from ''chai-http'';`'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`import chaiHttp from ''chai-http'';`'
- en: '`chai.use(chaiHttp);`'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`chai.use(chaiHttp);`'
- en: '`import { describe, it } from ''mocha'';`'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { describe, it } from ''mocha'';`'
- en: '`// Use Chai with Chai HTTP`'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 使用Chai与Chai HTTP`'
- en: '`const expect = chai.expect;`'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`const expect = chai.expect;`'
- en: '`let app, expressServer;`'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`let app, expressServer;`'
- en: '`**before(async () => {**`'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`**before(async () => {**`'
- en: '`const databaseUtil = new DatabaseUtil();`'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`const databaseUtil = new DatabaseUtil();`'
- en: '`await databaseUtil.connectDatabase();`'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`await databaseUtil.connectDatabase();`'
- en: '`expressServer = new ExpressServer();`'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`expressServer = new ExpressServer();`'
- en: '`app = expressServer.app;`'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`app = expressServer.app;`'
- en: '`**});**`'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`**});**`'
- en: '`// Close the server after all tests are done`'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 在所有测试完成后关闭服务器`'
- en: '`**after(function (done) {**`'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`**after(function (done) {**`'
- en: '`expressServer.closeServer(done);`'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`expressServer.closeServer(done);`'
- en: '`**});**`'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`**});**`'
- en: '`export { app };`'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`export { app };`'
- en: It imports necessary modules like `**DatabaseUtil**`, `**ExpressServer**`, and
    the testing libraries `**(chai and chai-http). chai.use(chaiHttp)**` configures
    chai to work with HTTP requests, enabling you to make HTTP requests and perform
    assertions on their responses.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 它导入必要的模块，如`**DatabaseUtil**`、`**ExpressServer**`以及测试库`**(chai and chai-http)**`。`chai.use(chaiHttp)`配置chai以与HTTP请求一起工作，使您能够发出HTTP请求并对它们的响应进行断言。
- en: '[Hooks](toc.xhtml#s236a)'
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[钩子](toc.xhtml#s236a)'
- en: 'In the context of testing frameworks like Mocha, `**"before"**` and `**"after"**`
    are known as test hooks. They are used to set up and tear down the testing environment.
    Here is what they do:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mocha 等测试框架的上下文中，`**"before"**` 和 `**"after"**` 被称为测试钩子。它们用于设置和清理测试环境。以下是它们的作用：
- en: '**Before Hook** (`**before**`): This hook is executed before any test cases
    within a test suite (defined using describe) are run. It is typically used for
    setting up the environment or any common context needed for the tests. For example,
    you might use it to establish a database connection, initialize variables, or
    start a server.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '**钩子之前** (`**before**`): 这个钩子在测试套件（使用 describe 定义）中的任何测试用例运行之前执行。它通常用于设置环境或测试所需的任何公共上下文。例如，你可能用它来建立数据库连接、初始化变量或启动服务器。'
- en: '`**before(() => {**`'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`**before(() => {**`'
- en: '`// Set up the testing environment`'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 设置测试环境`'
- en: '`});`'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '**After Hook** (`**after**`): This hook is executed after all test cases within
    a test suite have run. It is commonly used for cleaning up the environment, releasing
    resources, or performing any necessary actions after the tests are completed.
    For example, you might use it to close a database connection, shut down a server,
    or perform `**cleanup**` tasks.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**钩子之后** (`**after**`): 这个钩子在测试套件中的所有测试用例运行之后执行。它通常用于清理环境、释放资源或执行测试完成后必要的操作。例如，你可能用它来关闭数据库连接、关闭服务器或执行
    `**清理**` 任务。'
- en: '`**after(() => {**`'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`**after(() => {**`'
- en: '`// Clean up the testing environment`'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 清理测试环境`'
- en: '`});`'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: 'Here is how the `**"before"**` and `**"after"**` hooks fit into the test lifecycle:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何将 `**"before"**` 和 `**"after"**` 钩子融入到测试生命周期中的：
- en: '**Before All Tests**: The `**"before"**` hook is executed before any of the
    test cases within the suite are run. It is a one-time setup for the entire suite.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '**所有测试之前**：`**"before"**` 钩子在套件中的任何测试用例运行之前执行。它是整个套件的单一设置。'
- en: '**Run Test Cases**: All the test cases (it blocks) within the suite are executed.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行测试用例**：套件中所有的测试用例（it 块）都会被执行。'
- en: '**After All Tests**: The `**"after"**` hook is executed once all the test cases
    in the suite have been completed. It is a one-time `**cleanup**` step for the
    suite.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '**所有测试之后**：`**"after"**` 钩子在一次所有测试用例在套件中完成后执行。它是套件的单一 `**清理**` 步骤。'
- en: These hooks are useful for ensuring a consistent and clean test environment
    for each test suite. They help avoid code repetition and make it easier to manage
    resources like database connections, servers, or other setup and teardown tasks.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这些钩子对于确保每个测试套件都有一个一致且干净的测试环境非常有用。它们有助于避免代码重复，并使管理数据库连接、服务器或其他设置和清理任务变得更容易。
- en: There are also `**beforeEach()**`, and `**afterEach()**` hooks that will execute
    before each test case and after each test case respectively.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 也有 `**beforeEach()**` 和 `**afterEach()**` 钩子，它们分别在每个测试用例之前和之后执行。
- en: 'We can explore hook with another example such as payment create one `**payment.spec.ts**`
    file with following code :'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过另一个示例来探索钩子，例如创建一个 `**payment.spec.ts**` 文件，包含以下代码：
- en: '`import { expect } from ''chai'';`'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { expect } from ''chai'';`'
- en: '`import { describe, it } from ''mocha'';`'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { describe, it } from ''mocha'';`'
- en: '`class Payment {`'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`class Payment {`'
- en: '`private amount: number;`'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`private amount: number;`'
- en: '`private method: string;`'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`private method: string;`'
- en: '`constructor(amount: number, method: string) {`'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`constructor(amount: number, method: string) {`'
- en: '`this.amount = amount;`'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.amount = amount;`'
- en: '`this.method = method;`'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.method = method;`'
- en: '`}`'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`processPayment(): string {`'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`processPayment(): string {`'
- en: '`// Simulate payment processing`'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 模拟支付处理`'
- en: '``return `Payment of ${this.amount} processed via ${this.method}`;``'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '``return `Payment of ${this.amount} processed via ${this.method}`;``'
- en: '`}`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`describe(''Payment'', () => {`'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe(''Payment'', () => {`'
- en: '`let payment: Payment;`'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`let payment: Payment;`'
- en: '`// Before hook: This will run before the test suite before(() => {`'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 在钩子之前：这将运行在测试套件之前before(() => {`'
- en: '`console.log(''Setting up payment processing…'');`'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log(''正在设置支付处理…'');`'
- en: '`// Perform setup tasks, e.g., initialize payment gateway`'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 执行设置任务，例如，初始化支付网关`'
- en: '`payment = new Payment(100, ''Credit Card'');`'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`payment = new Payment(100, ''Credit Card'');`'
- en: '`});`'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`// After hook: This will run after the test suite after(() => {`'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 钩子之后：这将运行在测试套件之后after(() => {`'
- en: '`console.log(''Tearing down payment processing…'');`'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log(''正在拆除支付处理…'');`'
- en: '`// Perform teardown tasks, e.g., close payment gateway connection`'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 执行清理任务，例如，关闭支付网关连接`'
- en: '`payment = null!;`'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`payment = null!;`'
- en: '`});`'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`// Test case`'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 测试用例`'
- en: '`it(''should process payment successfully'', () => {`'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`it(''should process payment successfully'', () => {`'
- en: '`// Act`'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 行动`'
- en: '`const result = payment.processPayment();`'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`const result = payment.processPayment();`'
- en: '`// Assert`'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 断言`'
- en: '`expect(result).to.equal(''Payment of 100 processed via Credit Card'');`'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`expect(result).to.equal(''通过信用卡处理了100元的支付'');`'
- en: '`});`'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: 'In this example:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中：
- en: We have a Payment class with a `**processPayment**` method that simulates processing
    a payment transaction.
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一个具有 `**processPayment**` 方法的 Payment 类，该方法模拟处理支付交易。
- en: We use Mocha’s before hook to perform setup tasks before the test suite. This
    includes initializing payment processing, such as setting up a payment gateway.
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 Mocha 的 before 钩子在测试套件之前执行设置任务。这包括初始化支付处理，例如设置支付网关。
- en: We use Mocha’s after hook to perform teardown tasks after the test suite. This
    includes closing the payment gateway connection.
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 Mocha 的 after 钩子在测试套件之后执行清理任务。这包括关闭支付网关连接。
- en: We define a single test case to verify that the payment is processed successfully.
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义了一个单独的测试用例来验证支付是否成功处理。
- en: Before the test suite runs, the `**"Setting up payment processing…"**` message
    will be logged, indicating that payment processing is being set up.
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试套件运行之前，将记录 `**"Setting up payment processing…"**` 消息，表示正在设置支付处理。
- en: After the test suite runs, the `**"Tearing down payment processing…"**` message
    will be logged, indicating that payment processing is being torn down.
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试套件运行后，将记录 `**"Tearing down payment processing…"**` 消息，表示正在拆解支付处理。
- en: 'Now run the test script in the terminal and it will display following output:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在终端中运行测试脚本，它将显示以下输出：
- en: '![](img/9.4.jpg)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9.4.jpg)'
- en: '**Figure 9.4:** Hook Example with Payment'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9.4：带有支付的钩子示例**'
- en: '[Verifying APIs through Test cases](toc.xhtml#s237a)'
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[通过测试用例验证 API](toc.xhtml#s237a)'
- en: In the world of software development, ensuring that your application’s APIs
    work as intended is of paramount importance. To achieve this, we rely on test
    cases, which are a structured approach to validating the functionality, correctness,
    and performance of APIs. Verifying APIs through test cases involves systematically
    testing various aspects of your API to guarantee that it behaves as expected.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发的世界里，确保你的应用程序的 API 按预期工作至关重要。为了实现这一点，我们依赖于测试用例，这是一种结构化的方法，用于验证 API 的功能、正确性和性能。通过测试用例验证
    API 涉及系统地测试 API 的各个方面，以确保其按预期行为。
- en: '[Login Test](toc.xhtml#s238a)'
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[登录测试](toc.xhtml#s238a)'
- en: 'Create a `**"user.spec.ts"**` file within the `**"tests"**` directory, specifically
    within the `**"user"**` subdirectory, and include the following code:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `**"tests"**` 目录下，特别是 `**"user"**` 子目录中创建一个 `**"user.spec.ts"**` 文件，并包含以下代码：
- en: '`import chai from ''chai'';`'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`import chai from ''chai'';`'
- en: '`import chaiHttp from ''chai-http'';`'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`import chaiHttp from ''chai-http'';`'
- en: '`chai.use(chaiHttp);`'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`chai.use(chaiHttp);`'
- en: '`import { describe, it } from ''mocha'';`'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { describe, it } from ''mocha'';`'
- en: '`// Use Chai with Chai HTTP`'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 使用 Chai 和 Chai HTTP`'
- en: '`const expect = chai.expect;`'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`const expect = chai.expect;`'
- en: '`import { app } from ''../common/utility.spec'';`'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { app } from ''../common/utility.spec'';`'
- en: '`let authToken; // Declare a variable to store the authentication token`'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`let authToken; // 声明一个变量来存储认证令牌`'
- en: '`describe(''Login API'', () => {`'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe(''Login API'', () => {`'
- en: '`it(''should return a success message when login is successful'', (done) =>
    {`'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`it(''should return a success message when login is successful'', (done) =>
    {`'
- en: '`**chai.request(app)** // Replace ''app'' with your Express app instance`'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`**chai.request(app)** // 将 ''app'' 替换为你的 Express 应用实例`'
- en: '`**.post(**''**/api/login**''**)**`'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`**.post(**''**/api/login**''**)**`'
- en: '`**.send({ email:** ''**yamipanchal1993@gmail.com**''**, password:** ''**Abc@123456**''
    **})**`'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`**.send({ email:** ''**yamipanchal1993@gmail.com**''**, password:** ''**Abc@123456**''
    **})**`'
- en: '`.end((err, res) => {`'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`.end((err, res) => {`'
- en: '`**expect(res).to.have.status(200);**`'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`**expect(res).to.have.status(200);**`'
- en: '`expect(res.body).to.have.property(''status'').equal(''success'');`'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`expect(res.body).to.have.property(''status'').equal(''success'');`'
- en: '`authToken = res.body.data.accessToken; // Save the authentication token`'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`authToken = res.body.data.accessToken; // 保存认证令牌`'
- en: '`done();`'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`done();`'
- en: '`});`'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`it(''should return an error message when login fails'', (done) => {`'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`it(''should return an error message when login fails'', (done) => {`'
- en: '`chai.request(app)`'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`chai.request(app)`'
- en: '`.post(''/api/login'')`'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`.post(''/api/login'')`'
- en: '`**.send({ email:** ''**yamipanchal1993@gmail.com**''**, password:** ''**wrongpassword**''
    **})**`'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`**.send({ email:** ''**yamipanchal1993@gmail.com**''**, password:** ''**wrongpassword**''
    **})**`'
- en: '`.end((err, res) => {`'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`.end((err, res) => {`'
- en: '`**expect(res).to.have.status(400);**`'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`**expect(res).to.have.status(400);**`'
- en: '`**expect(res.body).to.have.property(''message'').equal(''Password is not valid'');**`'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`**expect(res.body).to.have.property(''message'').equal(''密码无效'');**`'
- en: '`done();`'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`done();`'
- en: '`});`'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`export { authToken };`'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`export { authToken };`'
- en: Run the test case in `**cmd**` through the `**npm run**` test which provides
    the following output.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `**cmd**` 通过 `**npm run**` test 运行测试用例，将提供以下输出。
- en: '`> pms-be@1.0.0 test`'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`> pms-be@1.0.0 test`'
- en: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
- en: '`Login API`'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`登录 API`'
- en: '`1) "**before all**" hook in "**{root}**"`'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`1) "**before all**" hook in "**{root}**"`'
- en: '`Connected to the database`'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`连接到数据库`'
- en: '`**✔> should return a success message when login is successful (75ms)**`'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔> should return a success message when login is successful (75ms)**`'
- en: '`**✔ should return an error message when login fails (46ms)**`'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔ should return an error message when login fails (46ms)**`'
- en: '![](img/9.5.jpg)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9.5.jpg)'
- en: '**Figure 9.5:** Login Test Case'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9.5：登录测试用例**'
- en: Here, we define two test cases for Login api in that the first has valid data
    and the second has the wrong password.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为登录 API 定义了两个测试用例，第一个有有效数据，第二个有错误的密码。
- en: '`**describe(''Login API'', () => { … });**`: This line defines a test suite
    using the describe function. In this case, it is a suite named `**"Login API"**`
    that groups related test cases together.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**describe(''Login API'', () => { … });**`: 这行代码使用 describe 函数定义了一个测试套件。在这种情况下，它是一个名为
    `**"Login API"**` 的套件，将相关的测试用例组合在一起。'
- en: '`**it(''should return a success message when login is successful'', (done)
    => { … });**`: Within the test suite, there is an individual test case defined
    using the it function. This test case has a description that explains what it
    is testing, which is that it should return a success message when the login is
    successful. The `**(done)**` function is passed as an argument, indicating that
    this is an asynchronous test, and the done function is used to signal the completion
    of the test.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**it(''should return a success message when login is successful'', (done)
    => { … });**`: 在测试套件中，使用 it 函数定义了一个单独的测试用例。这个测试用例有一个描述，解释了它要测试的内容，即当登录成功时应该返回一个成功消息。`**(done)**`
    函数作为参数传递，表示这是一个异步测试，done 函数用于表示测试完成。'
- en: '`**chai.request(app)**`: This line uses the chai-http library to make an HTTP
    request to an Express.js app. app should be replaced with the actual instance
    of your Express app. `**.post(''/api/login'')**`: This line specifies that it
    is a POST request to the `**''/api/login''**` endpoint. It is likely that this
    endpoint is responsible for handling user login.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**chai.request(app)**`: 这行代码使用 chai-http 库向 Express.js 应用程序发送 HTTP 请求。app
    应替换为你的 Express 应用的实际实例。`**.post(''/api/login'')**`: 这行代码指定了一个 POST 请求到 `**''/api/login''**`
    端点。这个端点可能负责处理用户登录。'
- en: '`**.send({ email: ''yamipanchal1993@gmail.com'', password: ''Abc@123'' })**`:
    Here, the code sends a JSON object in the request body with the email and password
    values for the login attempt.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**.send({ email: ''yamipanchal1993@gmail.com'', password: ''Abc@123'' })**`:
    这里，代码在请求体中发送一个包含电子邮件和密码值的 JSON 对象，用于登录尝试。'
- en: '`**.end((err, res) => { … });**`: This is the `**callback**` function that
    gets executed when the HTTP request is completed. It receives two parameters:
    err for any errors that might occur during the request, and res for the response
    from the server.'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**.end((err, res) => { … });**`: 这是在 HTTP 请求完成后执行的 `**回调函数**`。它接收两个参数：err
    用于请求过程中可能发生的任何错误，res 用于服务器的响应。'
- en: '`**expect(res).to.have.status(200);**`: This line uses Chai’s expect assertion
    to check if the HTTP response has a status code of 200, which typically indicates
    a successful request.'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**expect(res).to.have.status(200);**`: 这行代码使用 Chai 的 expect 断言检查 HTTP 响应是否有状态码
    200，这通常表示请求成功。'
- en: '`**expect(res.body).to.have.property(''status'').equal(''success'');**`: This
    line checks that the response body contains a property named ‘status’ with the
    value `**''success''**`. It is a common way to check if an API response indicates
    a successful operation.'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**expect(res.body).to.have.property(''status'').equal(''success'');**`: 这行代码检查响应体是否包含名为
    ''status'' 的属性，其值为 `**''success''**`。这是检查 API 响应是否表示成功操作的一种常见方式。'
- en: '`**authToken = res.body.data.accessToken;**`: If the login is successful, this
    line extracts the authentication token from the response and stores it in the
    authToken variable. This token is often used for subsequent authenticated requests.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**authToken = res.body.data.accessToken;**`: 如果登录成功，这行代码从响应中提取认证令牌并将其存储在 authToken
    变量中。此令牌通常用于后续的认证请求。'
- en: '`**done();**`: Finally, the `**done**` function is called to indicate that
    the test has completed.'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**done();**`: 最后，调用 `**done**` 函数来表示测试已完成。'
- en: This code is a test case for login API returns a successful response with the
    expected status code and message. It also captures the authentication token for
    further testing, typically for authenticated routes.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是登录 API 返回预期状态码和消息的成功响应的测试用例。它还捕获了认证令牌，通常用于后续的认证请求。
- en: '[List of User Test](toc.xhtml#s239a)'
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[用户测试列表](toc.xhtml#s239a)'
- en: In the same file, add the following test case code to verify the List of user
    API.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一文件中，添加以下测试用例代码以验证用户列表 API。
- en: '`describe(''GET List of Users'', () => {`'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe(''获取用户列表'', () => {`'
- en: '`it(''should return array with status code 200'', (done) => {`'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`it(''应当返回状态码为 200 的数组'', (done) => {`'
- en: '`chai.request(app)`'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`chai.request(app)`'
- en: '`.get(''/api/users'')`'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`.get(''/api/users'')`'
- en: '`.set(''Authorization'',`'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`.set(''Authorization'',`'
- en: '`` `Bearer ${authToken}`) // Pass the token in the headers ``'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '`` `Bearer ${authToken}`) // 在头部传递 token ``'
- en: '`.end((err, res) => {`'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`.end((err, res) => {`'
- en: '`// console.log(res);`'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`// console.log(res);`'
- en: '`expect(res).to.have.status(200);`'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`expect(res).to.have.status(200);`'
- en: '`expect(res.body).to.have.property(''data'').to.be.an(''array'');`'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`expect(res.body).to.have.property(''data'').to.be.an(''array'');`'
- en: '`done();`'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`done();`'
- en: '`});`'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`Output`'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`输出`'
- en: '`> pms-be@1.0.0 test`'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`> pms-be@1.0.0 test`'
- en: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
- en: '`Login API`'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`登录 API`'
- en: '`1) "**before all**" hook in "**{root}**"`'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`1) "**before all**" 钩子在 "**{root}**"`'
- en: '`Connected to the database`'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`连接到数据库`'
- en: '`**✔** should return a success message when login is successful (75ms)`'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔** 应当在登录成功时返回成功消息 (75ms)`'
- en: '`**✔** should return an error message when login fails (46ms)`'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔** 应当在登录失败时返回错误消息 (46ms)`'
- en: '`**GET List of Users**`'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`**获取用户列表**`'
- en: '`**✔ should return array with status code 200**`'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔ 应当返回状态码为 200 的数组**`'
- en: '`Server closed`'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '`服务器关闭`'
- en: '![](img/9.6.jpg)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
  zh: '![图片 9.6](img/9.6.jpg)'
- en: '**Figure 9.6:** User List Get API Testcase'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9.6：用户列表获取 API 测试用例**'
- en: 'Here are the details of the key parts of the proceeding code:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是前面代码中关键部分的详细信息：
- en: '`**describe(''GET List of Users'', () => { … });**`: This line defines a new
    test suite with the description `**"GET List of Users"**`. This suite groups together
    related test cases that are concerned with retrieving a list of users.'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**describe(''获取用户列表'', () => { … });**`: 这一行定义了一个新的测试套件，描述为 `**"获取用户列表"**`。这个套件将相关的测试用例组合在一起，这些测试用例涉及获取用户列表。'
- en: '`**it(''should return array with status code 200'', (done) => { … });**`: Within
    the test suite, there is an individual test case defined using the it function.
    The test case description specifies that it should return an array with a status
    code of 200\. The (`**done**`) function is used to indicate that this is an asynchronous
    test, and the done function will be called when the test is complete.'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**it(''应当返回状态码为 200 的数组'', (done) => { … });**`: 在测试套件中，使用 it 函数定义了一个单独的测试用例。测试用例描述指定它应返回一个状态码为
    200 的数组。(`**done**`) 函数用于指示这是一个异步测试，当测试完成时将调用 done 函数。'
- en: '`**.get(''/api/users'')**`: This line specifies that it is a GET request to
    the `**''/api/users''**` endpoint. This endpoint is likely responsible for fetching
    a list of users.'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**.get(''/api/users'')**`: 这一行指定了对 `**''/api/users''**` 端点的 GET 请求。这个端点可能负责获取用户列表。'
- en: '`**.set(''Authorization'', Bearer ${authToken}):**` Here, the code is setting
    an `**"Authorization"**` header in the HTTP request. It includes an authentication
    token in the header, typically in the format `**"Bearer <token>"**`. This is a
    common way to authenticate API requests. `**authToken**` is expected to contain
    the token obtained during a successful login (as shown in your previous code snippet).'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**.set(''Authorization'', Bearer ${authToken}):**` 这里，代码正在设置 HTTP 请求中的 `**"Authorization"**`
    头部。它将身份验证令牌包含在头部，通常格式为 `**"Bearer <token>"**`。这是验证 API 请求的常用方法。`**authToken**`
    预期将包含在成功登录期间获得的令牌（如你之前的代码片段所示）。'
- en: '`**.end((err, res) => { … });**`: This is the `**callback**` function that
    gets executed when the HTTP request is completed. It receives two parameters:
    `**err**` for any errors that might occur during the request, and `**res**` for
    the response from the server.'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**.end((err, res) => { … });**`: 这是当 HTTP 请求完成时执行的 `**回调函数**`。它接收两个参数：`**err**`
    用于可能发生在请求期间的错误，`**res**` 用于来自服务器的响应。'
- en: '`**expect(res).to.have.status(200);**`: This line uses Chai’s expect assertion
    to check if the HTTP response has a status code of 200, which typically indicates
    a successful request. This is the common way to ensure that the server responded
    with a 200 `**OK**` status for a successful `**GET**` request.'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**expect(res).to.have.status(200);**`: 这一行使用 Chai 的 expect 断言来检查 HTTP 响应是否有状态码
    200，这通常表示请求成功。这是确保服务器对成功的 `**GET**` 请求返回 200 `**OK**` 状态的常用方法。'
- en: '`**expect(res.body).to.have.property(''data'').to.be.an(''array'');**`: This
    line checks that the response body contains a property named `**''data**`,`**''**`
    and that this property’s value is an array. This is a way to verify that the response
    contains a list of users in the form of an array.'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**expect(res.body).to.have.property(''data'').to.be.an(''array'');**`: 这行代码检查响应体是否包含名为
    `**''data**` 的属性，并且该属性的值是一个数组。这是验证响应包含以数组形式呈现的用户列表的一种方式。'
- en: '`**done();**`: Finally, the `**done**` function is called to signal that the
    test has completed.'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**done();**`: 最后，调用 `**done**` 函数来表示测试已完成。'
- en: This code is a test case for an Express.js API endpoint that tests whether a
    GET request to fetch a list of users returns the expected status code (`**200**`)
    and verifies that the response contains an array of user data. It also includes
    the authorization token in the request header for authentication, assuming that
    the `**authToken**` variable holds a valid token obtained from a login request.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是一个 Express.js API 端点测试用例，用于测试获取用户列表的 GET 请求是否返回预期的状态码 (`**200**`)，并验证响应包含用户数据数组。它还在请求头中包含授权令牌进行身份验证，假设
    `**authToken**` 变量包含从登录请求中获取的有效令牌。
- en: '[Add User Test](toc.xhtml#s240a)'
  id: totrans-423
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[添加用户测试](toc.xhtml#s240a)'
- en: In the same file, add the following test case that verifies add user API.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一文件中，添加以下测试用例以验证添加用户 API。
- en: '`describe(''ADD User'', () => {`'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe(''添加用户'', () => {`'
- en: '`it(''should return with status code 201'', (done) => {`'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '`it(''should return with status code 201'', (done) => {`'
- en: '`chai.request(app)`'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '`chai.request(app)`'
- en: '`.post(''/api/users'')`'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '`.post(''/api/users'')`'
- en: '`.set(''Authorization'',`'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`.set(''Authorization'',`'
- en: '`` `Bearer ${authToken}`) // Pass the token in the headers ``'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`` `Bearer ${authToken}`) // 在头部传递令牌 ``'
- en: '`.send({`'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '`.send({`'
- en: '`''fullname'': ''Super Admin'',`'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '`''fullname'': ''Super Admin'',`'
- en: '`''username'': ''pms-admin1'',`'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '`''username'': ''pms-admin1'',`'
- en: '`''email'': ''admin@pms1.com'',`'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '`''email'': ''admin@pms1.com'',`'
- en: '`''password'': ''Admin@pms1'',`'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '`''password'': ''Admin@pms1'',`'
- en: '`''role_id'': ''dbda47e4-f843-4263-a4d6-69ef80156f81''`'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '`''role_id'': ''dbda47e4-f843-4263-a4d6-69ef80156f81''`'
- en: '`})`'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '`})`'
- en: '`.end((err, res) => {`'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '`.end((err, res) => {`'
- en: '`**expect(res).to.have.status(201);**`'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '`**expect(res).to.have.status(201);**`'
- en: '`done();`'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '`done();`'
- en: '`});`'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`it(''should return with status code 409'', (done) => {`'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '`it(''should return with status code 409'', (done) => {`'
- en: '`chai.request(app)`'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '`chai.request(app)`'
- en: '`.post(''/api/users'')`'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '`.post(''/api/users'')`'
- en: '`.set(''Authorization'',`'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '`.set(''Authorization'',`'
- en: '`` `Bearer ${authToken}`) // Pass the token in the headers ``'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '`` `Bearer ${authToken}`) // 在头部传递令牌 ``'
- en: '`.send({`'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '`.send({`'
- en: '`''fullname'': ''Super Admin'',`'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '`''fullname'': ''Super Admin'',`'
- en: '`''username'': ''pms-admin1'',`'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '`''username'': ''pms-admin1'',`'
- en: '`''email'': ''admin@pms1.com'',`'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '`''email'': ''admin@pms1.com'',`'
- en: '`''password'': ''Admin@pms1'',`'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '`''password'': ''Admin@pms1'',`'
- en: '`''role_id'': ''dbda47e4-f843-4263-a4d6-69ef80156f81''`'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '`''role_id'': ''dbda47e4-f843-4263-a4d6-69ef80156f81''`'
- en: '`})`'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`})`'
- en: '`.end((err, res) => {`'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '`.end((err, res) => {`'
- en: '`**expect(res).to.have.status(409);**`'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '`**expect(res).to.have.status(409);**`'
- en: '`**expect(res.body).to.have.property(''message'').equal(''Key (username)=(pms-admin1)
    already exists.'');**`'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '`**expect(res.body).to.have.property(''message'').equal(''键（username）=（pms-admin1）已存在.'');**`'
- en: '`done();`'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '`done();`'
- en: '`});`'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`Output`'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '`输出`'
- en: '`> pms-be@1.0.0 test`'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '`> pms-be@1.0.0 测试`'
- en: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
- en: '`Login API`'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '`登录 API`'
- en: '`1) "before all" hook in "{root}"`'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '`1) "before all" 钩子在 "{root}"`'
- en: '`Connected to the database`'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '`连接到数据库`'
- en: '`**✔** should return a success message when login is successful (75ms)`'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔** 应在登录成功时返回成功消息（75ms）`'
- en: '`**✔** should return an error message when login fails (46ms)`'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔** 应在登录失败时返回错误消息（46ms）`'
- en: '`GET List of Users`'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '`获取用户列表`'
- en: '`**✔** should return array with status code 200`'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔** 应返回状态码 200 的数组`'
- en: '`**ADD User**`'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '`**添加用户**`'
- en: '`**✔ should return array with status code 201**`'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔ 应返回状态码 201**`'
- en: '`**✔ should return with status code 409 (54ms)**`'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔ 应返回状态码 409（54ms）**`'
- en: '`Server closed`'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '`服务器关闭`'
- en: '![](img/9.7.jpg)'
  id: totrans-476
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9.7.jpg)'
- en: '**Figure 9.7:** Add User API Test Case'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9.7：添加用户 API 测试用例**'
- en: 'Here are the details of the key parts of the proceeding code:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是前面代码关键部分的详细信息：
- en: '`**describe(''ADD User'', () => { … });**`: This line defines a test suite
    with the description `**"ADD User"**`. This suite groups together related test
    cases that are concerned with adding new users.'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**describe(''添加用户'', () => { … });**`: 这行代码定义了一个测试套件，其描述为 `**"添加用户"**`。该套件将相关的测试用例组合在一起，这些测试用例涉及添加新用户。'
- en: 'The first test case:'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个测试用例：
- en: '`**it(''should return with status code 201'', (done) => { … });**`: This test
    case description indicates that it is testing whether adding a user should return
    a status code of `**201**` (Created). The (`**done**`) function is used to indicate
    that this is an asynchronous test, and the `**done**` function will be called
    when the test is complete.'
  id: totrans-481
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**it(''should return with status code 201'', (done) => { … });**`: 这个测试用例描述表明，它正在测试添加用户是否应该返回状态码
    `**201**`（已创建）。`(`**done**`) 函数用于指示这是一个异步测试，当测试完成时将调用 `**done**` 函数。'
- en: '`**.post(''/api/users'')**`: It’s a `**POST**` request to the `**''/api/users''**`
    endpoint, presumably used to add a new user.'
  id: totrans-482
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**.post(''/api/users'')**`: 这是一个 `**POST**` 请求到 `**''/api/users''**` 端点，可能是用于添加新用户。'
- en: '`**.set(''Authorization'', Bearer ${authToken})**`: This line sets an `**"Authorization"**`
    header in the HTTP request, including the authentication token for authorization.'
  id: totrans-483
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**.set(''Authorization'', Bearer ${authToken})**`: 这行代码在 HTTP 请求中设置了一个 `**"Authorization"**`
    标头，包括用于授权的认证令牌。'
- en: '`**.send({ … })**`: The code sends a JSON object in the request body with user
    information, including the user’s fullname, username, email, password, and role
    IDs. This represents the data you are trying to add.'
  id: totrans-484
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**.send({ … })**`: 这段代码在请求体中发送一个包含用户信息的 JSON 对象，包括用户的姓名、用户名、电子邮件、密码和角色 ID。这代表您尝试添加的数据。'
- en: '`**.end((err, res) => { … });**`: The `**callback**` function that gets executed
    when the HTTP request is completed.'
  id: totrans-485
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**.end((err, res) => { … });**`: 当 HTTP 请求完成时执行的 `**回调**` 函数。'
- en: '`**expect(res).to.have.status(201);**`: This line uses Chai’s expect assertion
    to check if the HTTP response has a status code of 201, indicating that the user
    creation was successful.'
  id: totrans-486
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**expect(res).to.have.status(201);**`: 这行代码使用 Chai 的 expect 断言来检查 HTTP 响应是否具有状态码
    201，表示用户创建成功。'
- en: '`**done();**`: Finally, the `**done**` function is called to signal that the
    test has completed.'
  id: totrans-487
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**done();**`: 最后，调用 `**done**` 函数来表示测试已完成。'
- en: 'The second test case:'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个测试用例：
- en: '`**it(''should return with status code 409'', (done) => { … });**`: This test
    case description indicates that it’s testing whether adding a user with the same
    username should return a status code of `**409**` (Conflict).'
  id: totrans-489
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**it(''should return with status code 409'', (done) => { … });**`: 这个测试用例描述表明，正在测试添加具有相同用户名的用户是否应该返回状态码
    `**409**`（冲突）。'
- en: 'The structure of this test case is similar to the first one, with the main
    differences being the expected status code and the additional checks:'
  id: totrans-490
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个测试用例的结构与第一个类似，主要区别在于预期的状态码和额外的检查：
- en: '`**expect(res).to.have.status(409);**`: This line checks if the HTTP response
    has a status code of `**409**`, indicating a conflict.'
  id: totrans-491
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**expect(res).to.have.status(409);**`: 这行代码检查 HTTP 响应是否具有状态码 `**409**`，表示冲突。'
- en: '`**expect(res.body).to.have.property(''message'').equal(''Key (username)=(pms-admin1)
    already exists.'');**`: This line verifies that the response body contains a specific
    message indicating that the provided username already exists.'
  id: totrans-492
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**expect(res.body).to.have.property(''message'').equal(''Key (username)=(pms-admin1)
    already exists.'');**`: 这行代码验证响应体包含一个特定的消息，表明提供的用户名已存在。'
- en: '`**done();**`: As before, the done function is called to signal the completion
    of the test.'
  id: totrans-493
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**done();**`: 如前所述，调用 `**done**` 函数来表示测试已完成。'
- en: This code contains two test cases. The first test case checks if a new user
    is successfully added with a 201 status code, while the second test case checks
    if a conflict (409 status code) is returned when attempting to add a user with
    an existing username. The second test case also verifies the presence of an error
    message in the response.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码包含两个测试用例。第一个测试用例检查是否成功添加了新用户并返回 201 状态码，而第二个测试用例检查在尝试添加具有现有用户名的用户时是否返回冲突（409
    状态码），第二个测试用例还验证了响应中是否存在错误消息。
- en: '[Delete User Test](toc.xhtml#s241a)'
  id: totrans-495
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[删除用户测试](toc.xhtml#s241a)'
- en: Within the existing file, include the following test case code to validate the
    functionality of the user deletion API.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 在现有文件中，包含以下测试用例代码以验证用户删除 API 的功能。
- en: '`describe(''Delete User'', () => {`'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe(''Delete User'', () => {`'
- en: '`it(''should return with status code 200'', (done) => {`'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '`it(''should return with status code 200'', (done) => {`'
- en: '`chai.request(app)`'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '`chai.request(app)`'
- en: '`.delete(''/api/users/0ddc59fe-a9ea-4060-9b39-5118fe13937d'')`'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '`.delete(''/api/users/0ddc59fe-a9ea-4060-9b39-5118fe13937d'')`'
- en: '`.set(''Authorization'',`'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '`.set(''Authorization'','
- en: '`` `Bearer ${authToken}`) // Pass the token in the headers ``'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '`` `Bearer ${authToken}`) // 在头部传递令牌 ``'
- en: '`.end((err, res) => {`'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '`.end((err, res) => {`'
- en: '`expect(res).to.have.status(201);`'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '`expect(res).to.have.status(201);`'
- en: '`done();`'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '`done();`'
- en: '`});`'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`it(''should return with status code 404'', (done) => {`'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '`it(''should return with status code 404'', (done) => {`'
- en: '`chai.request(app)`'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '`chai.request(app)`'
- en: '`.delete(''/api/users/0ddc59fe-a9ea-4060-9b39-5118fe13937d'')`'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '`.delete(''/api/users/0ddc59fe-a9ea-4060-9b39-5118fe13937d'')`'
- en: '``.set(''Authorization'', `Bearer ${authToken}`) // Pass the token in the headers``'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '``.set(''Authorization'', `Bearer ${authToken}`) // 在头部传递令牌``'
- en: '`.end((err, res) => {`'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '`.end((err, res) => {`'
- en: '`expect(res).to.have.status(404);`'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '`expect(res).to.have.status(404);`'
- en: '`done();`'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '`done();`'
- en: '`});`'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`Output`'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '`输出`'
- en: '`> pms-be@1.0.0 test`'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '`> pms-be@1.0.0 test`'
- en: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '`> mocha --require ts-node/register ''src/**/*.spec.ts''`'
- en: '`Login API`'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '`登录 API`'
- en: '`1) "before all" hook in "{root}"`'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '`1) "{root}" 中的 "before all" 钩子`'
- en: '`Connected to the database`'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '`连接到数据库`'
- en: '`**✔** should return a success message when login is successful (75ms)`'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔** 应在登录成功时返回成功消息（75ms)`'
- en: '`**✔** should return an error message when login fails (46ms)`'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔** 应在登录失败时返回错误消息（46ms)`'
- en: '`GET List of Users`'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '`获取用户列表`'
- en: '`**✔** should return array with status code 200`'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔** 应返回包含状态码 200 的数组`'
- en: '`ADD User`'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '`添加用户`'
- en: '`X should return array with status code 201`'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '`X 应返回包含状态码 201 的数组`'
- en: '`**✔** should return with status code 409 (54ms)`'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔** 应在 54ms 内返回状态码 409`'
- en: '`**Delete User**`'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '`**删除用户**`'
- en: '`**✔ should return with status code 200**`'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔ should return with status code 200**`'
- en: '`**✔ should return with status code 404**`'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '`**✔ should return with status code 404**`'
- en: '`Server closed`'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '`服务器已关闭`'
- en: '![](img/9.8.jpg)'
  id: totrans-535
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9.8.jpg)'
- en: '**Figure 9.8:** Delete User API Testcase'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9.8：删除用户 API 测试用例**'
- en: In this code, Add User test case displays fail because same user is already
    in database. Similarly, the Delete User test case might fail if the user you're
    trying to delete doesn't exist in the database when the test runs.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，添加用户测试用例显示失败，因为同一用户已在数据库中。同样，如果测试运行时您尝试删除的用户不存在于数据库中，删除用户测试用例可能会失败。
- en: 'The first test case:'
  id: totrans-538
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个测试用例：
- en: '`**it(''should return with status code 200'', (done) => { … });**`: The description
    of this test case indicates that it is testing whether a successful user deletion
    should return a status code of `**200**` (`**OK**`). The (done) function is used
    to indicate that this is an asynchronous test, and the done function will be called
    when the test is complete.'
  id: totrans-539
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**it(''should return with status code 200'', (done) => { … });**`: 此测试用例的描述表明，它正在测试成功删除用户是否应返回状态码
    `**200**` (`**OK**`)。(done) 函数用于指示这是一个异步测试，当测试完成时将调用 done 函数。'
- en: '`**.delete(''/api/users/0ddc59fe-a9ea-4060-9b39-5118fe13937d'')**`: It is a
    DELETE request to a specific endpoint `**''**`/`**api/users/''**` with a user
    identifier (for example, `**''0ddc59fe-a9ea-4060-9b39-5118fe13937d''**`) in the
    URL. This typically represents the action of deleting a specific user by their
    unique identifier.'
  id: totrans-540
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**.delete(''/api/users/0ddc59fe-a9ea-4060-9b39-5118fe13937d'')**`: 这是一个针对特定端点
    `**''**`/`**api/users/''**` 的 DELETE 请求，其中包含用户标识符（例如，`**''0ddc59fe-a9ea-4060-9b39-5118fe13937d''**`）在
    URL 中。这通常表示通过其唯一标识符删除特定用户的行为。'
- en: '`**.set(''Authorization'', Bearer ${authToken})**`: This line sets an `**"Authorization"**`
    header in the HTTP request, including the authentication token for authorization.'
  id: totrans-541
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**.set(''Authorization'', Bearer ${authToken})**`: 这行代码在 HTTP 请求中设置了一个 `**"Authorization"**`
    标头，包括用于授权的认证令牌。'
- en: '`**.end((err, res) => { … });**`: The `**callback**` function that gets executed
    when the HTTP request is completed.'
  id: totrans-542
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**.end((err, res) => { … });**`: 当 HTTP 请求完成时执行的 `**callback**` 函数。'
- en: '`**expect(res).to.have.status(201);**`: There is a potential issue in this
    line. It checks if the HTTP response has a status code of `**201**`, but the test
    case description implies that it should be expecting a `**200**` status code.
    This line should be corrected to `**expect(res).to.have.status(200)**`;.'
  id: totrans-543
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**expect(res).to.have.status(201);**`: 这行代码中可能存在潜在问题。它检查 HTTP 响应是否具有状态码 `**201**`，但测试用例的描述暗示它应该期望状态码
    `**200**`。这行代码应更正为 `**expect(res).to.have.status(200)**`;。'
- en: '`**done();**`: Finally, the `**done**` function is called to signal that the
    test has completed.'
  id: totrans-544
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**done();**`: 最后，调用 `**done**` 函数以表示测试已完成。'
- en: 'The second test case:'
  id: totrans-545
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个测试用例：
- en: '`**it(''should return with status code 404'', (done) => { … });**`: The description
    of this test case indicates that it is testing whether attempting to delete a
    user that does not exist should return a status code of `**404 (Not Found)**`.
    The structure of this test case is similar to the first one, with the main difference
    being the expected status code:'
  id: totrans-546
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**it(''should return with status code 404'', (done) => { … });**`: 此测试用例的描述表明，它正在测试尝试删除不存在的用户是否应返回状态码
    `**404 (Not Found)**`。此测试用例的结构与第一个类似，主要区别在于预期的状态码：'
- en: '`**expect(res).to.have.status(404);**`: This line checks if the HTTP response
    has a status code of 404, indicating that the requested user was not found.'
  id: totrans-547
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**expect(res).to.have.status(404);**`: 这行代码检查 HTTP 响应是否具有 404 状态码，表示请求的用户未找到。'
- en: '`**done();**`: As before, the done function is called to signal the completion
    of the test.'
  id: totrans-548
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**done();**`: 如前所述，调用 done 函数以表示测试完成。'
- en: This code contains two test cases for testing the user deletion functionality
    through an Express.js API. The first test case checks if a user is successfully
    deleted with a `**200**` status code, and the second test case checks if attempting
    to delete a non-existent user results in a `**404**` status code.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码包含两个测试用例，用于通过 Express.js API 测试用户删除功能。第一个测试用例检查是否成功删除了用户并返回了 `**200**` 状态码，第二个测试用例检查尝试删除不存在用户是否会导致返回
    `**404**` 状态码。
- en: In this manner, you have the flexibility to create distinct test scenarios for
    various sections within your application, including user management, project handling,
    task management, and comment features. For each of these APIs, you can define
    specific test cases. Additionally, you can extend your testing suite by incorporating
    cases that verify authentication failures, such as testing for a `**401**` status
    code when authentication is missing and a 403 status code when authorization is
    not granted for certain API endpoints.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式，您可以根据应用程序的不同部分创建不同的测试场景，包括用户管理、项目管理、任务管理和评论功能。对于这些 API 中的每一个，您都可以定义特定的测试用例。此外，您可以通过包含验证身份验证失败的案例来扩展您的测试套件，例如，当认证缺失时测试
    `**401**` 状态码，当某些 API 端点未授权时测试 403 状态码。
- en: '[Mocking Database Connection](toc.xhtml#s242a)'
  id: totrans-551
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[模拟数据库连接](toc.xhtml#s242a)'
- en: To mock the database connection, we can use the popular library — `**sinon**`.
    Let us install the library with npm.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 为了模拟数据库连接，我们可以使用流行的库——`**sinon**`。让我们使用 npm 安装这个库。
- en: '`npm install sinon –save-dev`'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install sinon –save-dev`'
- en: 'Consider if we have a function to get the user for a given id as:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑如果我们有一个根据给定 ID 获取用户的函数：
- en: '`// db.ts`'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: '`// db.ts`'
- en: '`async function getUserByUserId(user_id:string) {`'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '`async function getUserByUserId(user_id:string) {`'
- en: '`// actual logic to fetch the user from database`'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 从数据库获取用户的实际逻辑`'
- en: '`}`'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`module.exports = { getUserByUserId };`'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '`module.exports = { getUserByUserId };`'
- en: We can use sinon to mock this behavior -
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 sinon 来模拟这种行为 -
- en: '`const sinon = require(''sinon'');`'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '`const sinon = require(''sinon'');`'
- en: '`const { expect } = require(''chai'');`'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '`const { expect } = require(''chai'');`'
- en: '`const db = require(''../db'');`'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '`const db = require(''../db'');`'
- en: '`describe(''getUserByUserId'', function() {`'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe(''getUserByUserId'', function() {`'
- en: '`it(''should return mocked user data'', async function() {`'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '`it(''should return mocked user data'', async function() {`'
- en: '`// Create a stub for getUserByUserId`'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 为 getUserByUserId 创建存根`'
- en: '`const mockUser = { id: 1, name: ''Alice M'' };`'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '`const mockUser = { id: 1, name: ''Alice M'' };`'
- en: '`const stub = sinon.stub(db, ''getUserByUserId'').resolves(mockUser);`'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '`const stub = sinon.stub(db, ''getUserByUserId'').resolves(mockUser);`'
- en: '`// Call the function (which is now stubbed)`'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 调用函数（现在已被存根化）`'
- en: '`const user = await getUserByUserId(1);`'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '`const user = await getUserByUserId(1);`'
- en: '`// Verify the function returned the mocked data`'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 验证函数返回了模拟数据`'
- en: '`expect(user).to.deep.equal(mockUser);`'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '`expect(user).to.deep.equal(mockUser);`'
- en: '`// Restore the original function`'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 恢复原始函数`'
- en: '`stub.restore();`'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '`stub.restore();`'
- en: '`});`'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`});`'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: In the preceding example, `**sinon.stub()**` is used to replace the actual function
    `**getUserByUserId()**` with a version that returns a promise which resolves to
    the `**mockUser**`. This test does not connect to an actual database. This way
    it ensures that the test is isolated and repeatable. `**stub.restore()**` at the
    end restores the original function.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`**sinon.stub()**` 用于用返回一个解析为 `**mockUser**` 的 promise 的版本替换实际的 `**getUserByUserId()**`
    函数。这个测试没有连接到实际的数据库。这样它确保了测试是隔离和可重复的。`**stub.restore()**` 在最后恢复原始函数。
- en: '[Conclusion](toc.xhtml#s243a)'
  id: totrans-578
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[结论](toc.xhtml#s243a)'
- en: In this chapter, the test cases presented in the code examples provide a comprehensive
    approach to testing various aspects of an Express.js API application. These test
    cases cover different scenarios which include Login and user management APIs.
    These tests are an essential part of ensuring the reliability, security, and correctness
    of the API, and they can help identify and address issues early in the development
    process.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，代码示例中展示的测试用例提供了一个全面的方法来测试 Express.js API 应用程序的各个方面。这些测试用例涵盖了不同的场景，包括登录和用户管理
    API。这些测试是确保 API 的可靠性、安全性和正确性的关键部分，并且它们可以帮助在开发早期阶段识别和解决问题。
- en: By systematically testing the application, you can increase its robustness and
    enhance the overall quality of your software.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 通过系统地测试应用程序，您可以提高其鲁棒性并提升您软件的整体质量。
- en: In the next chapter, we will learn how to build and deploy our application.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何构建和部署我们的应用程序。
