["```js\n    webPush.setGCMAPIKey(/*GCM API KEY*/);\n    ```", "```js\nvar baseURL = 'https://localhost:3012/';\n```", "```js\nreturn registration.pushManager.getSubscription()\n```", "```js\nreturn registration.pushManager.getSubscription()\n  .then(function(subscription) {\n    if (subscription) {\n      return subscription;\n    }\n\n    return registration.pushManager.subscribe({ userVisibleOnly: true });\n  });\n```", "```js\nfetch(baseURL + 'register', {\n    method: 'post',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      endpoint: subscription.endpoint,\n    }),\n  });\n```", "```js\ndocument.querySelector('#send').onclick = function() {\n  var delay = document.querySelector('#notification-delay').value;\n  var ttl = document.querySelector('#notification-ttl').value;\n\n  fetch(baseURL + 'sendNotification?endpoint=' + endpoint + '&delay=' + delay +\n        '&ttl=' + ttl,\n    {\n      method: 'post',\n    }\n  );\n};\n```", "```js\n<section id=\"notification-input\">\n    <form>\n      <h1>Notification</h1>\n      Delay Time&nbsp;<input id='notification-delay' type='number' value='2'></input> <small>s</small><br/>\n      <br/>\n      Active Time&nbsp;<input id='notification-ttl' type='number' value='0'></input> <small>s</small><br/>\n    </form>\n    <button id=\"send\">Send Notification!</button>\n</section>\n```", "```js\n{\n  \"name\": \"Simple Push Notification\",\n  \"short_name\": \"push-simple\",\n  \"start_url\": \"./index.html\",\n  \"display\": \"standalone\",\n  \"gcm_sender_id\": \"46143029380\",\n  \"gcm_user_visible_only\": true\n}\n```", "```js\n'use strict';\n\nself.addEventListener('push', function(event) {\n  event.waitUntil(\n    self.registration.showNotification('SW Push Notification', {\n      body: 'Notification received!',\n    })\n  );\n}); \n```", "```js\ndocument.querySelector('#send').onclick = function() {\n  var delay = document.querySelector('#notification-delay').value;\n  var ttl = document.querySelector('#notification-ttl').value;\n\n  fetch(baseURL + 'sendNotification?endpoint=' + endpoint + '&delay=' + delay +\n        '&ttl=' + ttl,\n    {\n      method: 'post',\n    }\n  );\n};\n```", "```js\n'use strict';\n\nself.addEventListener('push', function(event) {\n  event.waitUntil(\n    self.registration.showNotification('SW Rich Push Notification', {\n      body: 'Richer than richest',\n      icon: 'amazon-logo.png',\n      vibrate: [300, 100, 300]\n    })\n  );\n});\n```", "```js\n'use strict';\n\nself.addEventListener('push', function(event) {\n  event.waitUntil(\n     self.registration.showNotification('SW Push Notification', {\n      body: 'Notification ' + count++,\n      tag: 'swc'\n    })  );\n});\n```", "```js\n    webPush.setGCMAPIKey(/*GCM API KEY*/);\n    ```", "```js\nvar baseURL = 'https://localhost:3012/'; \n```", "```js\nreturn registration.pushManager.getSubscription()\n```", "```js\nreturn registration.pushManager.getSubscription()\n  .then(function(subscription) {\n    if (subscription) {\n      return subscription;\n    }\n\n    return registration.pushManager.subscribe({ userVisibleOnly: true });\n});\n```", "```js\nfetch(baseURL + 'register', {\n    method: 'post',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      endpoint: subscription.endpoint,\n    }),\n});\n```", "```js\ndocument.querySelector('#send').onclick = function() {\n  fetch(baseURL + 'sendNotification?endpoint=' + endpoint, {\n      method: 'post',\n  });\n};\n```", "```js\n<section id=\"notification-input\">\n    <form>\n      <h1>Notification</h1>\n      <p><strong>Click 'Send notification' &amp; try:</strong></p>\n      <ul>\n        <li>Close this page: Click the notification, and it will be reopened.</li>\n        <li>Switch to another page: Click the notification, and it will be re-focused</li>\n        <li>Remain on current page: A different notification will be shown, Clicking will not do anything.</li>\n      </ul>\n    </form>\n    <button id=\"send\">Send Notification!</button>\n</section>\n```", "```js\n{\n  \"name\": \"SW Push Clients Notification\",\n  \"short_name\": \"push-clients\",\n  \"start_url\": \"./index.html\",\n  \"display\": \"standalone\",\n  \"gcm_sender_id\": \"46143029380\",\n  \"gcm_user_visible_only\": true\n}\n```", "```js\n'use strict';\n\nself.addEventListener('push', function(event) {\n  event.waitUntil(\n    self.clients.matchAll().then(function(clients) {\n\n      var focused = clients.some(function(client) {\n        return client.focused;\n      });\n\n      var notificationMessage;\n\n      if (focused) {\n        notificationMessage = 'Same Page';\n      } else if (clients.length > 0) {\n        notificationMessage = 'Diffrerent Page, ' +\n                              'click here to gain focus';\n      } else {\n        notificationMessage = 'Page Closed, ' +\n                              'click here to re-open it!';\n      }\n\n      return self.registration.showNotification('ServiceWorker Cookbook', {\n        body: notificationMessage,\n      });\n    })\n  );\n});\n```", "```js\n    webPush.setGCMAPIKey(/*GCM API KEY*/);\n    ```", "```js\nvar baseURL = 'https://localhost:3012/'; \n```", "```js\nreturn registration.pushManager.getSubscription()\n```", "```js\nreturn registration.pushManager.getSubscription()\n  .then(function(subscription) {\n    if (subscription) {\n      return subscription;\n    }\n\n    return registration.pushManager.subscribe({ userVisibleOnly: true });\n});\n```", "```js\nfetch(baseURL + 'register', {\n    method: 'post',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      endpoint: subscription.endpoint,\n    }),\n  });\n```", "```js\ndocument.querySelector('#subscription-button').onclick = function() {\n  fetch(baseURL + 'sendNotification?endpoint=' + endpoint, {\n      method: 'post',\n  });\n};\n```", "```js\nfunction unsubscribe() {\n  getSubscription().then(function(subscription) {\n    return subscription.unsubscribe()\n      .then(function() {\n        console.log('Unsubscribed', subscription.endpoint);\n        return fetch('unregister', {\n          method: 'post',\n          headers: {\n            'Content-type': 'application/json'\n          },\n          body: JSON.stringify({\n            endpoint: subscription.endpoint\n          })\n        });\n      });\n  }).then(setSubscribeButton);\n}\n\nfunction setSubscribeButton() {\n  subscriptionBtn.onclick = subscribe;\n  subscriptionBtn.textContent = 'Subscribe!';\n}\n\nfunction setUnsubscribeButton() {\n  subscriptionBtn.onclick = unsubscribe;\n  subscriptionBtn.textContent = 'Unsubscribe!';\n}\n```", "```js\n<section id=\"notification-input\">\n    <form>\n      <h1>Notification</h1>\n      <p>Click to subscribe</p>\n    </form>\n    <button id=\"subscription-button\" disabled=true></button>\n</section>\n```", "```js\n{\n  \"name\": \"SW Push Notification Subscription Management\",\n  \"short_name\": \"push-with_subscription\",\n  \"start_url\": \"./index.html\",\n  \"display\": \"standalone\",\n  \"gcm_sender_id\": \"46143029380\",\n  \"gcm_user_visible_only\": true\n}\n```", "```js\n'use strict';\n\nself.addEventListener('push', function(event) {\n  event.waitUntil(self.registration.showNotification('ServiceWorker Cookbook', {\n    body: 'Push Notification Subscription Management'\n  }));\n});\n\nself.addEventListener('pushsubscriptionchange', function(event) {\n  console.log('Subscription expired');\n  event.waitUntil(\n    self.registration.pushManager.subscribe({ userVisibleOnly: true })\n    .then(function(subscription) {\n      console.log('Subscribed after expiration', subscription.endpoint);\n      return fetch('register', {\n        method: 'post',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify({\n          endpoint: subscription.endpoint\n        })\n      });\n    })\n  );\n});\n```", "```js\nfunction sendNotification(endpoint) {\n  webPush.sendNotification(endpoint).then(function() {\n    console.log('Push Application Server - Notification sent to ' + endpoint);\n  }).catch(function() {\n    console.log('ERROR in sending Notification, endpoint removed ' + endpoint);\n    subscriptions.splice(subscriptions.indexOf(endpoint), 1);\n  });\n}\n```", "```js\nsetInterval(function() {\n  subscriptions.forEach(sendNotification);\n}, pushInterval * 1000);\n\nfunction isSubscribed(endpoint) {\n  return (subscriptions.indexOf(endpoint) >= 0);\n}\n```", "```js\n    webPush.setGCMAPIKey(/*GCM API KEY*/);\n    ```", "```js\nvar baseURL = 'https://localhost:3012/'; \n```", "```js\nreturn registration.pushManager.getSubscription()\n```", "```js\nreturn registration.pushManager.getSubscription()\n  .then(function(subscription) {\n    if (subscription) {\n      return subscription;\n    }\n\n  return registration.pushManager.subscribe({ userVisibleOnly: true });\n});\n```", "```js\nvar rawKey = subscription.getKey ? subscription.getKey('p256dh') : '';\nkey = rawKey ?\nbtoa(String.fromCharCode.apply(null, new Uint8Array(rawKey))) : '';\nvar rawAuthSecret = subscription.getKey ? subscription.getKey('auth') : '';\nauthSecret = rawAuthSecret ?\nbtoa(String.fromCharCode.apply(null, new Uint8Array(rawAuthSecret))) : '';\n\n  endpoint = subscription.endpoint;\n```", "```js\nfetch(baseURL + 'register', {\n    method: 'post',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      endpoint: subscription.endpoint,\n      key: key,\n      authSecret: authSecret\n    }),\n  });\n```", "```js\nfetch(baseURL + 'sendNotification', {\n    method: 'post',\n    headers: {\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify({\n      endpoint: endpoint,\n      key: key,\n      visible: visible,\n      num: notificationNum,\n    }),\n  });\n```", "```js\ndocument.querySelector('#clear').onclick = function() {\n  window.caches.open('notifications').then(function(cache) {\n    Promise.all([\n      cache.put(new Request('invisible'), new Response('0', {\n        headers: {\n          'content-type': 'application/json'\n        }\n      })),\n      cache.put(new Request('visible'), new Response('0', {\n        headers: {\n          'content-type': 'application/json'\n        }\n      })),\n    ]).then(function() {\n      updateNotificationNumbers();\n    });\n  });\n};\n```", "```js\nfunction updateNotificationNumbers() {\n  window.caches.open('notifications').then(function(cache) {\n    ['visible', 'invisible'].forEach(function(type) {\n      cache.match(type).then(function(res) {\n        if(res) {\n          res.text().then(function(text) {\n            document.getElementById('sent-' + type).textContent = text;\n          });\n        }\n      });\n    });\n  });\n}\n```", "```js\nwindow.onload = function() {\n  updateNotificationNumbers();\n  setInterval(updateNotificationNumbers, 1000);\n};\n```", "```js\n<section id=\"notification-input\">\n    <ul>\n      <li>Select <strong>Visible notifications</strong> - They will appear one after another on your screen. The quota will not be enforced;</li>\n      <li>Select <strong>Invisible notifications</strong> - They won't appear on your screen, but the number at the bottom of the page will update once the page is re-opened, to indicate the number of invisible notifications sent before reaching the quota.</li>\n    </ul>\n\n    <form>\n    Notifications to send: <input id=\"notification-count\" type=\"number\" value=\"30\"></input>\n    </form>\n\n    <button id=\"visible\">Visible notifications</button>\n    <button id=\"invisible\">Invisible notifications</button>\n\n    <p>Received <span id=\"sent-visible\">0</span> visible notifications<br />\n    Received <span id=\"sent-invisible\">0</span> invisible notifications</p>\n    <button id=\"clear\">Clear</button>\n  </section> id=\"subscription-button\" disabled=true></button>\n</section>\n```", "```js\n{\n  \"name\": \"SW Push Quota\",\n  \"short_name\": \"push-quota\",\n  \"start_url\": \"./index.html\",\n  \"display\": \"standalone\",\n  \"gcm_sender_id\": \"46143029380\",\n  \"gcm_user_visible_only\": true\n}\n```", "```js\nself.addEventListener('push', function(event) {\n\n  var visible = event.data ? event.data.json() : false;\n\n  if (visible) {\n    event.waitUntil(updateNumber('visible').then(function(num) {\n      return self.registration.showNotification('SW', {\n        body: 'Received ' + num + ' visible notifications',\n      });\n    }));\n  } else {\n    event.waitUntil(updateNumber('invisible'));\n  }\n});\n```", "```js\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(cacheName).then(function(cache) {\n      return Promise.all([\n        cache.put(new Request('invisible'), new Response('0', {\n          headers: {\n            'content-type': 'application/json'\n          }\n        })),\n        cache.put(new Request('visible'), new Response('0', {\n          headers: {\n            'content-type': 'application/json'\n          }\n        })),\n      ]);\n    })\n  );\n});\n```", "```js\napp.post('/sendNotification', function(req, res) {\n  var num = 1;\n  var promises = [];\n\n  var intervalID = setInterval(function() {\n     promises.push(webPush.sendNotification(req.body.endpoint, {\n       TTL: 200,\n       payload: JSON.stringify(req.body.visible),\n       userPublicKey: req.body.key,\n       userAuth: req.body.authSecret,\n     }));\n\n     if (num++ === Number(req.body.num)) {\n       clearInterval(intervalID);\n\n       Promise.all(promises)\n       .then(function() {\n         res.sendStatus(201);\n       });\n     }\n   }, 1000);\n});\n```"]