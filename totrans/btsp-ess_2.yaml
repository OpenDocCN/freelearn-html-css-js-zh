- en: Chapter 2. Getting Started with Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we understood why and where we need to use Bootstrap.
    We also know the main ingredients on what Bootstrap is made up of. In this chapter,
    we will download and start using Bootstrap. Importantly, we will start developing
    our own simple web application using all major features of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to download Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the Bootstrap file structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic introduction of CSS preprocessors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start using Bootstrap with a sample web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap, being an open source software (released under MIT license), full
    source code is available freely.
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways how you can download Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the precompiled bundle:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigate to [https://github.com/twbs/bootstrap/releases/download/v3.3.1/bootstrap-3.3.1-dist.zip](https://github.com/twbs/bootstrap/releases/download/v3.3.1/bootstrap-3.3.1-dist.zip).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: This will download the compiled and minified `bootstrap-3.3.1-dist.zip` file,
    which contains all the packaged CSS, JavaScript, and Font files.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This book is structured with Bootstrap version 3.3.1, which is the latest version
    at the time of writing.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Get the full source code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigate to [https://github.com/twbs/bootstrap/archive/v3.3.1.zip](https://github.com/twbs/bootstrap/archive/v3.3.1.zip).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: This will download the full source code bundle of Bootstrap. You have to install
    and compile the source code before actually using this.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In later chapters, we will see how to set up the development environment for
    Bootstrap source code and how to compile and generate the distributable files.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: In case you are planning to build a development environment of Bootstrap and
    customizing the framework, downloading the full source code is required. Otherwise,
    you can very well do with the distributable pre-compiled bundle.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: The Bootstrap file structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have downloaded both the flavors of Bootstrap, let's examine what
    the downloaded archives contain. However, for your usage, you would download any
    one of them.
  prefs: []
  type: TYPE_NORMAL
- en: A precompiled bundle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A precompiled and distributable bundle comes with three folders. The following
    is the snapshot of the folders and their contents.
  prefs: []
  type: TYPE_NORMAL
- en: '![A precompiled bundle](img/B03987_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'folder: css'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This folder encapsulates all the Bootstrap CSS files. For development purposes,
    you may use the full CSS files (nonminified copies); however, for production deployment,
    it is always suggested to use the minified versions—such as `bootstrap.min.css`
    and `bootstrap-theme.min.css`. However, using the bootstrap theme is optional,
    as the original bootstrap CSS comes with colors and other styling tags. Having
    said this, it is always better and suggested to use the theme file as well because
    it gives you a clean way to override the color combinations and themes of original
    Bootstrap. Thus, when you want to implement your own color scheme and branding,
    you would override and change the theme file, rather than the original Bootstrap
    CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: 'folder: fonts'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This folder comes with all the custom fonts Bootstrap uses. One of the major
    utilizations of this is to generate the Glyphicons used in Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will later see how and where you would use these Glyphicons.
  prefs: []
  type: TYPE_NORMAL
- en: 'folder: js'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All JavaScript components and plugins of Bootstrap are stored in this folder.
    Again you should use the minified version—the `bootstrap.min.js` file for production
    deployment.
  prefs: []
  type: TYPE_NORMAL
- en: As you know, the Bootstrap JS plugins use jQuery, thus before using these JavaScript
    add-ons, you must include jQuery in your HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, this JS file comes with all the JavaScript plugins offered by Bootstrap,
    however, if you require to use only some selected plugins, you can include specific
    JS files as well. We will explore more on this in the later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: A source code bundle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are the files and folders that come with the source code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: '![A source code bundle](img/B03987_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the source code bundle is quite exhaustive, distributing lot
    many things.
  prefs: []
  type: TYPE_NORMAL
- en: However, the following are the most important of all.
  prefs: []
  type: TYPE_NORMAL
- en: 'rfolder: dist'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the folder where all final distributable files are collected. If you
    see the contents of this folder are the same as the distributable bundle we saw
    in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: When we will build the development environment for Bootstrap (in the later chapters),
    we will see that compiled output files will be stored in this folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'folder: fonts'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Source folder and files for all the fonts used in Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'folder: grunt'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bootstrap uses Grunt to execute all the build-, compilation-, and packaging-related
    tasks. This folder contains all those relevant and required files.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will see how to use Grunt to compile Bootstrap in detail in the later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'folder: js'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the source files for the Bootstrap JavaScript plugins are stored here.
  prefs: []
  type: TYPE_NORMAL
- en: 'folder: less'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bootstrap uses CSS preprocessor LESS for compilation, customization, and packaging
    purposes. This folder contains all the LESS files to generate the final CSS files.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are other files and folders also, in the source code bundle; however,
    we will explore more on these when we will discuss about the `Dev` environment
    of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: CSS preprocessors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might have noticed that we just mentioned about the LESS files in Bootstrap
    source bundle. In this context, before continuing further into Bootstrap, we will
    briefly discuss this new language and technique in CSS3.
  prefs: []
  type: TYPE_NORMAL
- en: A CSS preprocessor is a program that takes some preprocessed code and convert
    them into the good old CSS code that browsers understand. This model has been
    innovated to make CSS more dynamic, productive, multiusable, efficient, and organized.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, CSS has not been a programming language (it is still not), and
    all those powers you enjoy in a language (such as .NET, Java, or PHP) are simply
    absent. Coding in CSS has always been Write Everything Twice (WET), now with preprocessors
    finally we can do **Don't Repeat Yourself** (**DRY**) programming as well.
  prefs: []
  type: TYPE_NORMAL
- en: To understand the scenario better, let's take some basic examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a standard CSS segment we are in the habit of writing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It is obvious to note that many of those attributes are duplicated. More painful
    it is when we want to change one attribute (for example `color`)— we need to change
    this in all the three places.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter now a preprocessor language. Our new code would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: So what we have done is simply created a class with all the common attributes
    in place and included that class in all the required places. Thus, if I want to
    change the `color`, I would just do it once in the `.text` class, and all the
    others will be updated.
  prefs: []
  type: TYPE_NORMAL
- en: This greatly improves the reusability and efficiency of your CSS development
    and maintenance. Earlier we just saw the syntax of one CSS preprocessor language—LESS.
    There are quite a few other similar languages, such as Sass, Stylus, Turbine,
    and Switch CSS. Although **Syntactically Awesome Stylesheets** (**Sass**) and
    LESS are among the most popular of them.
  prefs: []
  type: TYPE_NORMAL
- en: There are quite a few interesting and powerful features being offered by these
    languages. Some important features are given below.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that, wherever not explicitly mentioned, all the following syntaxes
    are of the LESS preprocessor language.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, you can define variables also in the preprocessed code. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As per Wikipedia, "a mixin is a class that contains a combination of methods
    from other classes." In case of CSS, this greatly enhances reusability, since
    you define one class and set of rules there, and reuse that set in a number of
    instances elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: The first code segment earlier (the one with the `.text`, `.text-large` and
    other classes) is an example of mixin written in LESS. There we have defined the
    `.text` class once and have used that in more than one places.
  prefs: []
  type: TYPE_NORMAL
- en: Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Interestingly enough, now you can do mathematical operations as well using
    CSS preprocessors. For example, in LESS, you write this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting CSS code that would get generated will be simply as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Nesting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider this code segment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This definitely looks more organized and structured than writing the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The first one is the preprocessed code you would write in LESS, and the second
    one is a generated (or processed) CSS code ready to be rendered in the browser—which
    is nothing different from what we were usually writing in earlier days.
  prefs: []
  type: TYPE_NORMAL
- en: Since each of these preprocessors is just another language, they have their
    own syntaxes and way of writing the code—which is not essentially the syntax you
    are familiar with CSS. However, after processing (that is, compilation), they
    all generate the standard and same CSS code that the browser can comprehend.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The scope of this book does not cover full installation and working guide for
    CSS preprocessors, so we will restrict ourselves to the Bootstrap context only.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap supports Sass and LESS both; in this book, we will be covering Bootstrap
    with LESS. In the later chapters, we will see how these features have been used
    in various places in Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: How to use Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you might have guessed, to use Bootstrap you need to include all the CSS
    and JavaScript files in your HTML page. One way to do this is after downloading
    Bootstrap and include the CSS and JavaScript files, or another way is to directly
    use Bootstrap's CDN files.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CDN stands for Content Delivery (or Distribution) Network. It is a large system
    of the distributed servers over the Internet across multiple locations. The objective
    is to provide high performance and high availability of content to the end users.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case of a downloaded local copy of Bootstrap, we add this in the HTML HEAD
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, in case of Bootstrap''s CDN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is our first HTML page using Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output would look like on a desktop screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use Bootstrap](img/B03987_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Well of course, it may not be a very impressive web page, but we still have
    started creating a web page using the elementary classes of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, more importantly, the following is the view of the same page on a
    mobile screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use Bootstrap](img/B03987_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you may have noticed, that the two blocks have been automatically adjusted
    and rendered in a vertical pattern, whereas in the desktop, they are rendered
    in horizontal pattern.
  prefs: []
  type: TYPE_NORMAL
- en: We will be creating a sample basic online store application in this book. In
    each of the later chapters we will explore and learn more about each Bootstrap
    features; and will add more functionalities in this application.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, we will end up creating a full simple and responsive application
    user experience using Bootstrap. Here we are starting to create the base structure
    of the application.
  prefs: []
  type: TYPE_NORMAL
- en: The application folder structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start with, here is our application folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The application folder structure](img/B03987_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please keep in mind that we are restricting ourselves only to create the HTML/client
    side part of the application; of course, the server side or data transaction part
    is out of the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the downloaded copies of all the files in our application, rather
    than using any CDN links.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `bs` folder is just the unzipped and unmodified version of the precompiled
    bundle. In this folder, we have all the required files for Bootstrap, ready to
    be consumed. Thus, in the HTML code, we have referenced the CSS and JS files in
    the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `js` folder is to have all the custom (our application-specific files) and
    other third-party JavaScript files. We should not merge any other JS or CSS files
    in Bootstrap folder; this is why, we have created a separate folder to store all
    those files other than Bootstrap. In this case, we have added the jQuery script
    file here (`jquery-2.0.3.min.js`).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just to remind you that Bootstrap uses and is dependent on jQuery for all its
    JavaScript plugins. Hence, we have added jQuery before referencing the Bootstrap
    JS file.
  prefs: []
  type: TYPE_NORMAL
- en: The `index.html` file is the home page of our simple application—in the earlier
    text, you saw the code of this file. We will add more HTML files at this location
    as and when required by the application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we got introduced to the CSS preprocessors available in the
    market; we also understood some of the features and advantages of using these
    preprocessor tools and languages.
  prefs: []
  type: TYPE_NORMAL
- en: We saw how to download Bootstrap framework and also what the flavors available
    in the Bootstrap package are. We learned that the files and folders are available
    and included in each of those distributed packages.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how to create a simple web page including and using Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: We have started creating a sample web application and created our first page
    using Bootstrap CSS. We also laid a foundation structure on which we will develop
    the sample web application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore all the CSS classes and features offered
    in Bootstrap and will add more functionality to our web application using these
    classes.
  prefs: []
  type: TYPE_NORMAL
