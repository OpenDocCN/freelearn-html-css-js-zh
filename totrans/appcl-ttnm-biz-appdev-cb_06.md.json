["```js\n//Create our application namespace\nvar my = {\n  basicGeo : require('bencoding.basicgeo'),\n  isAndroid : Ti.Platform.osname === 'android'\n};\n```", "```js\nmy.available = my.basicGeo.createAvailability();\n```", "```js\nmy.basicGeo.purpose = 'Demo of basicGeo';\n```", "```js\n    var win = Ti.UI.createWindow({\n      backgroundColor: '#fff', title: 'benCoding Geo Recipe', \n      barColor:'#000',fullscreen:false\n    });\n    ```", "```js\n    var txtAddress = Ti.UI.createTextField({\n      hintText:'enter address', height:40, \n      left:5, right:60, top:55\n    });\n    win.add(txtAddress);\n    ```", "```js\n    var mapView = Ti.Map.createView({\n      top:160, bottom:0, left:5, right:5, \n      userLocation:false\n    });\n    win.add(mapView);\n    ```", "```js\nvar placeHelpers = {\n```", "```js\n      address :function(place){\n        if(my.isAndroid){\n    ```", "```js\n          return place.address;\n        }else{\n    ```", "```js\n          var lines = place.addressDictionary\n          .FormattedAddressLines;\n          var iLength = lines.length, address = '';\n          for (iLoop=0;iLoop < iLength;iLoop++){\n            if(address.length>0){\n              address += ' ' + lines[iLoop];\n            }else{\n              address = lines[iLoop];\n            }\n          }\n          return address;\n        }\n      },\n    ```", "```js\n      addToMap: function(place){\n        var lat = place.latitude, \n        lng = place.longitude, \n        title = placeHelpers.address(place);\n        var pin = Ti.Map.createAnnotation({\n          latitude:lat,longitude:lng,\n          title:title\n        });\n        mapView.addAnnotation(pin);\n    ```", "```js\n        var region = {latitude:lat,\n         longitude:lng,animate:true,\n         latitudeDelta:0.04, longitudeDelta:0.04};\n         mapView.setLocation(region);\n      }\n    };\n    ```", "```js\n    var findButton = Ti.UI.createButton({\n      right:5, top:55, height:40, width:50, title:'Find'\n    });\n    win.add(findButton);\n    ```", "```js\n    findButton.addEventListener('click',function(e){\n    ```", "```js\n      function resultsCallback(e){\n    ```", "```js\n        if(!e.success){\n          alert('Sorry we encountered an error.');\n          return;\n        }\n    ```", "```js\n        if(e.placeCount === 0){\n          alert('Unable to find your address.');\n          return;\n        }\n    ```", "```js\n        txtAddress.value = \n        placeHelpers.address(e.places[0]);\n      };\n    ```", "```js\n      var currentGeo = my.basicGeo.createCurrentGeolocation();\n    ```", "```js\n      if(my.isAndroid){\n        currentGeo.setCache(true);\n      }\n    ```", "```js\n      currentGeo.getCurrentPlace(resultsCallback);\n    });\n    ```", "```js\n    var addressOnMapButton = Ti.UI.createButton({\n      right:5, left:5, height:40, \n      title:'Show address on Map',top:110\n    });\n    win.add(searchTextAddressButton);\n    ```", "```js\n    searchTextAddressButton.addEventListener('click',function(e){\n    ```", "```js\n      if(txtAddress.value.length==0){\n        alert('Please enter an address to display');\n      }\n    ```", "```js\n      function forwardGeoCallback(e){\n        if(!e.success){\n          alert('Sorry we encountered an error.');\n          return;\n        }\n        if(e.placeCount === 0){\n          alert('Unable to find address entered.');\n          return;\n        }\n    ```", "```js\n        placeHelpers.addToMap(e.places[0]);\n      };\n    ```", "```js\n      var geoCoder = my.basicGeo.createGeocoder();\n    ```", "```js\n      geoCoder.forwardGeocoder(txtAddress.value,\n      forwardGeoCallback);\n    });\n    ```", "```js\n    win.addEventListener('open',function(e){\n    ```", "```js\n      if(!my.available.reverseGeoSupported){\n    ```", "```js\n        if(my.isAndroid){\n          alert(\"Configuration isn't supported.\");\n        }else{\n          alert('iOS 5 or greater is required');\n        }\n      }\t\n    });\t\n    win.open({modal:true});\n    ```", "```js\n//Create our application namespace\nvar my = {\n  picker : require('provider_picker'),\n  currentProvider:null,\n  providers:[\n    require('./GeoProviders/geonames_geoprovider'),\n    require('./GeoProviders/bencoding_geoprovider'),\n    require('./GeoProviders/google_geoprovider')\n  ]\n};\n```", "```js\nmy.currentProvider.addKey('demo');\n```", "```js\nmy.currentProvider.addPurpose('Demo of Geo Provider');\n```", "```js\n    var win = Ti.UI.createWindow({\n      backgroundColor: '#fff', title: 'Ti.GeoProviders', \n      barColor:'#000',fullscreen:false\n    });\n    ```", "```js\n    var mapView = Ti.Map.createView({\n      top:140, bottom:0, width:Ti.UI.FILL,\n      userLocation:false\t\n    });\n    win.add(mapView);\n    ```", "```js\n    var picker = my.picker.createPicker({\n      top:30, height:40},lookup.updateProvider\n    });\n    win.add(picker);\n    ```", "```js\n    var findButton = Ti.UI.createButton({\n      title:'Find Current Location', \n      left:10, right:10,top:30,height:40\n    });\n    win.add(findButton);\n    ```", "```js\n    findButton.addEventListener('click',function(e){\n    ```", "```js\n      if(!Ti.Network.online){\n    ```", "```js\n        alert(\"You must be online to run this recipe\");\n        return;\n      }\n    ```", "```js\n      my.currentProvider.getCurrentAddress(\n      lookup.onSuccess,lookup.onError);\n    });\n    ```", "```js\n    var lookup = {\n    ```", "```js\n      updateProvider : function(providerKey){\n    ```", "```js\n        my.currentProvider = my.providers[providerKey];\n\n        if(my.currentProvider.providerName == 'geonames'){\n          my.currentProvider.provider.addKey('demo');\n        }\n    ```", "```js\n        my.currentProvider.addPurpose('Geo Demo');\n      },\n    ```", "```js\n      addToMap: function(lat,lng,title){\n        var pin = Ti.Map.createAnnotation({\n          latitude:lat,longitude:lng,\n          title:title\n        });\n        mapView.addAnnotation(pin);\n    ```", "```js\n        var region = {latitude:lat,\n        longitude:lng,animate:true,\n        latitudeDelta:0.04,\n        longitudeDelta:0.04};\n        mapView.setLocation(region);\n      },\n    ```", "```js\n      onSuccess : function(e){\n        if(!e.found){\n          alert(\"Unable to find your location\");\n          return;\n        }\n    ```", "```js\n        var title = my.currentProvider.generateAddress(e);\n        lookup.addToMap(e.latitude,e.longitude,title);\n      },\n    ```", "```js\n      onError: function(e){\n        alert(\"Error Details:\" JSON.stringify(e));\n      }\n    };\n    ```", "```js\n//Create our application namespace\nvar my = {\n  multiProvider : \n  require('./GeoProviders/reverse_multi_geoprovider')\n};\n```", "```js\nmy.multiProvider.addProvider({\n  key : 'demo',\n  providerString:'GeoProviders/geonames_geoprovider'\n});\n\nmy.multiProvider.addProvider({\n  providerString:'GeoProviders/bencoding_geoprovider'\n});\nmy.multiProvider.addProvider({\n  providerString:'GeoProviders/google_geoprovider'\n});\n```", "```js\nmy.multiProvider.addPurpose('Demo of Geo Provider');\n```", "```js\nvar win = Ti.UI.createWindow({\n  backgroundColor: '#fff', title: 'Multi-Tenant Geo', \n  barColor:'#000',fullscreen:false\n});\n```", "```js\nvar mapView = Ti.Map.createView({\n  top:120, bottom:0,width:Ti.UI.FILL,\n  userLocation:false\t\n});\nwin.add(mapView);\n```", "```js\n    var lookup = {\n    ```", "```js\n      addToMap: function(lat,lng,title){\n        var pin = Ti.Map.createAnnotation({\n        latitude:lat,longitude:lng,\n        title:title\t\n      });\n      mapView.addAnnotation(pin);\n    ```", "```js\n      var region = {latitude:lat,longitude:lng,\n        latitudeDelta:0.04,   \n        longitudeDelta:0.04};\n        mapView.setLocation(region);\n      },\n    ```", "```js\n      onSuccess : function(e){\n        if(!e.found){\n          alert(\"Unable to find your location\");\n          return;\n        }\n    ```", "```js\n        var provider = my.multiProvider.getProvider(\n        e.provider.name);\n        var title = provider.generateAddress(e);\n        lookup.addToMap(e.latitude,e.longitude,title);\n      },\n    ```", "```js\n      onError: function(e){\n        alert(\"Error finding your location\");\n      }\n    };\n    ```", "```js\n    var findButton = Ti.UI.createButton({\n      title:'Find Current Location', \n      left:10, right:10,top:70,height:40\n    });\n    win.add(findButton);\n    ```", "```js\n    findButton.addEventListener('click',function(e){\n    ```", "```js\n      if(!Ti.Network.online){\n        alert(\"You must be online to run this recipe\");\n        return;\n      }\t\n    ```", "```js\n      my.multiProvider.getCurrentAddress(\n      lookup.onSuccess,lookup.onError);\n    });\t\n    ```", "```js\n//Create our application namespace\nvar my = {\n  forward : require('forwardGeo')\n};\n```", "```js\nmy.startAddress  = {\n  needRefresh:true,lat:40.748433, lng:-73.985656,\n  address:'350 5th Ave  New York, NY 10118'\n};\n\nmy.endAddress = {\n  needRefresh:false, lat:40.75773, lng:-73.985708,\n  address:'1560 Broadway, New York, NY 10036'\n};\n```", "```js\n    var win = Ti.UI.createWindow({\n      backgroundColor: '#fff', title: 'Geo Distance Recipe', \n      barColor:'#000',fullscreen:false\n    });\n    ```", "```js\n    var txtStartAddress = Ti.UI.createTextField({\n      hintText:'enter starting address', \n      value: my.startAddress.address,\n      height:40, left:5, right:5, top:55,\n      borderStyle:Ti.UI.INPUT_BORDERSTYLE_ROUNDED\n    });\n    win.add(txtStartAddress);\n    ```", "```js\n    var txtEndAddress = Ti.UI.createTextField({\n      hintText:'enter destination address', \n      value: my.endAddress.address,\n      height:40, left:5, right:5, top:125,\n      borderStyle:Ti.UI.INPUT_BORDERSTYLE_ROUNDED\n    });\n    win.add(txtEndAddress);\n    ```", "```js\n    var findButton = Ti.UI.createButton({\n      title:'Calculate Distance between', height:40,\n      left:5, right:5, top:180\n    });\n    win.add(findButton);\n    ```", "```js\nvar geo ={\n```", "```js\n    distanceInUnits: function(lat1, lng1, lat2, lng2){\n      var rOfEarth = 6371; \n      var dLat = (lat2-lat1)*Math.PI/180;  \n      var dLon = (lng2-lng1)*Math.PI/180;   \n      var a = Math.sin(dLat/2) * Math.sin(dLat/2) +  \n      Math.cos(lat1*Math.PI/180) *\n      Math.cos(lat2*Math.PI/180) *   \n      Math.sin(dLon/2) * Math.sin(dLon/2);   \n      var c = 2 * Math.asin(Math.sqrt(a));   \n      var distance = rOfEarth * c;\n    ```", "```js\n      return {\n        distance: ((distance < 1) ? \n        (distance * 1000) : distance),\n        unit: ((distance < 1) ? 'm' : 'km')\n      };\n    },\n    ```", "```js\n    findLocations : function(callback){\n    ```", "```js\n      function onFinish(e){\n        if(!e.success){\n          alert(e.message);\n          return;\n        }\n    ```", "```js\n        my.startAddress = e.start;\n        my.endAddress = e.end;\n        callback();\n      };\n    ```", "```js\n        my.forward.forwardGeo(my.startAddress,\n        my.endAddress,onFinish);\n      }\t\n    };\n    ```", "```js\nfindButton.addEventListener('click',function(e){\n```", "```js\n      if(!my.forward.isSupported()){\n        alert('Forward Geocoding is not supported');\n        return;\n      }\t\n    ```", "```js\n      function findDistance(){\n    ```", "```js\n        var result = geo.distanceInUnits(\n        my.startAddress.lat,my.startAddress.lng,\n        my.endAddress.lat,my.endAddress.lng);\n    ```", "```js\n        if(result.unit=='km'){\n          result.distance = \t\n          result.distance.toFixed(3);\n        }\n        distanceLabel.text = result.distance + \" \" + \n        result.unit + \" between addresses\";\n      };\n    ```", "```js\n      if(my.startAddress.needRefresh || \n      my.endAddress.needRefresh){\n        geo.findLocations(findDistance);\n      }else{\n    ```", "```js\n        findDistance();\n      }\t\n    });\n    ```", "```js\n<ios>\n  <min-ios-ver>5.0</min-ios-ver>\n  <plist>\n    <dict>\n <key>UIBackgroundModes</key>\n <array>\n <string>location</string>\n </array>\n      <key>NSLocationUsageDescription</key>\n      <string>Demo Geo App</string>\n    </dict>\n  </plist>\n</ios>\n```", "```js\n<android xmlns:android=\n\"http://schemas.android.com/apk/res/android\">\n <services>\n <service url=\"bGeo/Ti.Geo.Timer.js\" type=\"interval\"/>\n </services>\n</android>\n```", "```js\nvar my = {\n  bGeo : require('bGeo/Ti.Geo.Background'),\n  isAndroid : Ti.Platform.osname === 'android',\n  session:{started:false}\n};\n```", "```js\nmy.bGeo.purpose = \"Demo Background Recipe\";\n```", "```js\n    my.bGeo.distanceFilter = 100;\n    ```", "```js\n    my.bGeo.trackSignificantLocationChange = true; \n    ```", "```js\n    my.bGeo.minAge = 3;\n    ```", "```js\n    my.bGeo.maxAge = 30;\n    ```", "```js\n    var win = Ti.UI.createWindow({\n      backgroundColor: '#fff', title: 'Background Geo Recipe', \n      barColor:'#000',fullscreen:false\n    });\n    ```", "```js\n    var mapView = Ti.Map.createView({\n      top:80, bottom:0, left:5, right:5, userLocation:false\n    });\n    win.add(mapView);\n    ```", "```js\n    var startStopButton = Ti.UI.createButton({\n      title:((my.bGeo.active()) ? 'stop' :'start'),\n      top:30, height:40,left:5, width:75\n    });\n    win.add(startStopButton);\n    ```", "```js\n    var clearButton = Ti.UI.createButton({\n      title:'Clear', top:30, height:40,left:85, width:75\n    });\n    win.add(clearButton);\n    ```", "```js\n    var refreshButton = Ti.UI.createButton({\n      title:'Refresh', top:30, height:40,left:165, width:75\n    });\n    win.add(refreshButton);\n    ```", "```js\nvar assistant = {\n```", "```js\n      addToMap : function(e){\n        var pin = Ti.Map.createAnnotation({\n          latitude:e.latitude,\n          longitude:e.longitude\t\n        });\n        mapView.addAnnotation(pin);\n        var region = {latitude:e.latitude,\n        longitude:e.longitude,\n        latitudeDelta:0.04, longitudeDelta:0.04};\n        mapView.setLocation(region);\n      },\n    ```", "```js\n      locationChangeCallback : function(e){\n        assistant.addToMap(e);\n      },\n    ```", "```js\n      locationErrorCallBack : function(e){\n        alert('Error due to ' + e.message);\n      }\n    };\n    ```", "```js\nmy.bGeo.addEventListener('change',\nassistant.locationChangeCallback);\n```", "```js\nmy.bGeo.addEventListener('error',\nassistant.locationErrorCallBack);\n```", "```js\nstartStopButton.addEventListener('click',function(e){\n```", "```js\n      if(my.bGeo.active(){\n        my.bGeo.stop();\n      }else{\n    ```", "```js\n        my.bGeo.start();\n      }\n    ```", "```js\n      startStopButton.title=((my.bGeo.active()) ? \n      'stop' :'start');\n    });\n    ```", "```js\n    refreshButton.addEventListener('click',function(e){\n    ```", "```js\n      mapView.removeAllAnnotations();\n    ```", "```js\n      var results = my.bGeo.readCache();\n    ```", "```js\n      for (iLoop=0;iLoop < results.length;iLoop++){\n        assistant.addToMap(results[iLoop]);\n      }\n    });\n    ```", "```js\n    clearButton.addEventListener('click',function(e){\n      my.bGeo.clearCache();\n      mapView.removeAllAnnotations();\n    });\n    ```", "```js\n    if(!my.isAndroid){\n    ```", "```js\n      Ti.App.addEventListener('resumed',function(e){\n    ```", "```js\n        if(my.bGeo.active()){\n          my.bGeo.paused();\n        }\n      });\n    ```", "```js\n      Ti.App.addEventListener('paused',function(e){\n    ```", "```js\n        if(my.bGeo.active()){\n          my.bGeo.restart();\n        }\n      });\n    ```", "```js\n      Ti.App.addEventListener('close',function(e){\n        my.bGeo.stop();\n      });\n    }\n    ```"]