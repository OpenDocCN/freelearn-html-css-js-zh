["```js\n$ yarn add cucumber babel-register --dev\n```", "```js\n$ tree --dirsfirst spec\nspec\n└── cucumber\n ├── features\n │   └── users\n │       └── register\n │           └── main.feature\n └── steps\n ├── assertions\n │   └── index.js\n ├── interactions\n │   ├── input.js\n │   └── navigation.js\n └── index.js\n```", "```js\n#!/bin/bash\n\n# Set environment variables from .env and set NODE_ENV to test\nsource <(dotenv-export | sed 's/\\\\n/\\n/g')\nexport NODE_ENV=test\n\n# Run our web server as a background process\nyarn run serve > /dev/null 2>&1 &\n\n# Polling to see if the server is up and running yet\nTRIES=0\nRETRY_LIMIT=50\nRETRY_INTERVAL=0.2\nSERVER_UP=false\nwhile [ $TRIES -lt $RETRY_LIMIT ]; do\n  if netstat -tulpn 2>/dev/null | grep -q \":$SERVER_PORT_TEST.*LISTEN\"; then\n    SERVER_UP=true\n    break\n  else\n    sleep $RETRY_INTERVAL\n    let TRIES=TRIES+1\n  fi\ndone\n\n# Only run this if API server is operational\nif $SERVER_UP; then\n  # Run the test in the background\n  npx dotenv cucumberjs spec/cucumber/features -- --compiler js:babel-register --require spec/cucumber/steps &\n\n  # Waits for the next job to terminate - this should be the tests\n  wait -n\nfi\n\n# Terminate all processes within the same process group by sending a SIGTERM signal\nkill -15 0\n```", "```js\nyarn run serve > /dev/null 2>&1 &\n```", "```js\n$ yarn add dotenv-cli --dev\n```", "```js\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"node\": \"current\"\n      }\n    }]\n  ]\n}\n```", "```js\n\"scripts\": {\n  \"build\": \"rm -rf dist/ && webpack\",\n  \"serve\": \"./scripts/serve.sh\",\n  \"test:e2e\": \"./scripts/e2e.test.sh\"\n}\n```", "```js\nFeature: Register User\n\n  User visits the Registration Page, fills in the form, and submits\n\n  Background: Navigate to the Registration Page\n\n    When user navigates to /\n\n  Scenario: Password Too Short\n\n    When user types in \"valid@ema.il\" in the \"#email\" element\n    And user types in \"shortpw\" in the \"#password\" element\n    Then the \"#register-button\" element should have a \"disabled\" attribute\n```", "```js\n<Input label=\"Email\" type=\"email\" name=\"email\" id=\"email\" ... />\n<Input label=\"Password\" type=\"password\" name=\"password\" id=\"password\" ... />\n<Button title=\"Register\" id=\"register-button\" ... />\n```", "```js\nfunction Button(props) {\n  return <button id={props.id} disabled={props.disabled}>{props.title}</button>\n}\n```", "```js\n$ yarn add selenium-webdriver --dev\n```", "```js\n$ yarn add chromedriver --dev\n```", "```js\nimport { After, Before } from 'cucumber';\nimport webdriver from 'selenium-webdriver';\n\nBefore(function () {\n  this.driver = new webdriver.Builder()\n    .forBrowser(\"chrome\")\n    .build();\n  return this.driver;\n});\n\nAfter(function () {\n  this.driver.quit();\n});\n```", "```js\nimport { Given, When, Then } from 'cucumber';\n\nWhen(/^user navigates to ([\\w-_\\/?=:#]+)$/, function (location) {\n  return this.driver.get(`http://${process.env.SERVER_HOST_TEST}:${process.env.SERVER_PORT_TEST}${location}`);\n});\n```", "```js\nWhen user types in \"valid@ema.il\" in the \"#email\" element\n```", "```js\nimport { Given, When, Then } from 'cucumber';\nimport { By } from 'selenium-webdriver';\n\nWhen(/^user types in (?:\"|')(.+)(?:\"|') in the (?:\"|')([\\.#\\w]+)(?:\"|') element$/, async function (text, selector) {\n  this.element = await this.driver.findElement(By.css(selector));\n  return this.element.sendKeys(text);\n});\n```", "```js\nThen the \"#register-button\" element should have a \"disabled\" attribute\n```", "```js\nimport assert from 'assert';\nimport { Given, When, Then } from 'cucumber';\nimport { By } from 'selenium-webdriver';\n\nWhen(/^the (?:\"|')([\\.#\\w-]+)(?:\"|') element should have a (?:\"|')([\\w_-]+)(?:\"|') attribute$/, async function (selector, attributeName) {\n  const element = await this.driver.findElement(By.css(selector));\n  const attributeValue = await element.getAttribute(attributeName);\n  assert.equal(attributeValue, 'true');\n});\n```", "```js\n$ yarn run test:e2e\n```", "```js\n......\n\n1 scenario (1 passed)\n4 steps (4 passed)\n0m02.663s\n```", "```js\n$ yarn add geckodriver --dev\n```", "```js\nthis.driver = new webdriver.Builder()\n  .forBrowser(\"firefox\")\n  .build();\n```", "```js\n$ yarn run test:e2e -- chrome firefox\n```", "```js\nif $SERVER_UP; then\n  for browser in \"$@\"; do\n    export TEST_BROWSER=\"$browser\"\n    echo -e \"\\n---------- $TEST_BROWSER test start ----------\"\n    npx dotenv cucumberjs spec/cucumber/features -- --compiler js:babel-register --require spec/cucumber/steps\n    echo -e \"----------- $TEST_BROWSER test end -----------\\n\"\n  done\nelse\n  >&2 echo \"Web server failed to start\"\nfi\n```", "```js\nthis.driver = new webdriver.Builder()\n  .forBrowser(process.env.TEST_BROWSER || \"chrome\")\n  .build();\n```", "```js\n$ yarn run test:e2e\n\n---------- chrome test start ----------\n......\n\n1 scenario (1 passed)\n4 steps (4 passed)\n0m01.899s\n----------- chrome test end -----------\n\n---------- firefox test start ----------\n......\n\n1 scenario (1 passed)\n4 steps (4 passed)\n0m03.258s\n----------- firefox test end -----------\n```", "```js\n\"test:e2e\": \"yarn run test:e2e:all\",\n\"test:e2e:all\": \"yarn run test:e2e:chrome firefox\",\n\"test:e2e:chrome\": \"./scripts/e2e.test.sh chrome\",\n\"test:e2e:firefox\": \"./scripts/e2e.test.sh firefox\"\n```", "```js\nScenario Outline: Invalid Input\n\n  Tests that the 'Register' button is disabled when either input elements contain invalid values\n\n  When user types in \"<email>\" in the \"#email\" element\n  And user types in \"<password>\" in the \"#password\" element\n  Then the \"#register-button\" element should have a \"disabled\" attribute\n\nExamples:\n\n| testCase       | email         | password       |\n| Both Invalid   | invalid-email | shortpw        |\n| Invalid Email  | invalid-email | abcd1234qwerty |\n| Short Password | valid@ema.il  | shortpw        |\n```", "```js\nconst request = new Request('http://localhost:8080/users/', {})\n```", "```js\nconst request = new Request('http://%%API_SERVER_HOST%%:%%API_SERVER_PORT%%/users/', {})\n```", "```js\nyarn add string-replace-loader --dev\n```", "```js\nAPI_SERVER_PORT_TEST=8888\n API_SERVER_HOST_TEST=localhost\n API_SERVER_PORT_PROD=8080\n API_SERVER_HOST_PROD=localhost\n```", "```js\n...\n\nif (process.env.NODE_ENV === 'test') {\n  process.env.API_SERVER_HOST = process.env.API_SERVER_HOST_TEST;\n  process.env.API_SERVER_PORT = process.env.API_SERVER_PORT_TEST;\n} else {\n  process.env.API_SERVER_HOST = process.env.API_SERVER_HOST_PROD;\n  process.env.API_SERVER_PORT = process.env.API_SERVER_PORT_PROD;\n}\n\nmodule.exports = { \n  entry: { ... },\n  output: { ... },\n  module: {\n    rules: [\n      {\n        test: /\\.jsx?$/,\n        exclude: /node_modules/,\n        use: [\n          {\n            loader: \"babel-loader\",\n            options: { ... }\n          },\n          {\n            loader: 'string-replace-loader',\n            options: {\n              multiple: [\n                 { search: '%%API_SERVER_HOST%%', replace: process.env.API_SERVER_HOST, flags: 'g' },\n                 { search: '%%API_SERVER_PORT%%', replace: process.env.API_SERVER_PORT, flags: 'g' }\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  },\n  plugins: [...]\n};\n```", "```js\ngit submodule add git@github.com:d4nyll/hobnob.git api\n```", "```js\n\"api:init\": \"git submodule update --init\",\n\"api:install\": \"yarn install --cwd api\",\n\"api:serve\": \"yarn --cwd api run build && dotenv -e api/.env.example node api/dist/index.js\",\n\"api:update\": \"git submodule update --init --remote\",\n```", "```js\n...\nexport NODE_ENV=test\n\nyarn run api:init > /dev/null 2>&1 &\nyarn run api:install > /dev/null 2>&1 &\nyarn run api:serve > /dev/null 2>&1 &\n\nyarn run serve > /dev/null 2>&1 &\n...\n```", "```js\nScenario: Valid Input\n\n  Tests that the 'Register' button is enabled when valid values are provided, and that upon successful registration, the UI display will display the message \"You've been registered successfully\"\n\n  When user types in a valid email in the \"#email\" element\n  And user types in a valid password in the \"#password\" element\n  Then the \"#register-button\" element should not have a \"disabled\" attribute\n\n  When user clicks on the \"#register-button\" element\n  Then the \"#registration-success\" element should appear within 2000 milliseconds\n```", "```js\nWhen(/^user types in an? (in)?valid (\\w+) in the (?:\"|')([\\.#\\w-]+)(?:\"|') element$/, async function (invalid, type, selector) {\n  const textToInput = generateSampleData(type, !invalid);\n  this.element = await this.driver.findElement(By.css(selector));\n  return this.element.sendKeys(textToInput);\n});\n```", "```js\n$ yarn add chance --dev\n```", "```js\nimport Chance from 'chance';\nconst chance = new Chance();\n\nfunction generateSampleData (type, valid = true) {\n  switch (type) {\n    case 'email':\n      return valid ? chance.email() : chance.string()\n      break;\n    case 'password':\n      return valid ? chance.string({ length: 13 }) : chance.string({ length: 5 });\n      break;\n    default:\n      throw new Error('Unsupported data type')\n      break;\n  }\n}\n\nexport {\n  generateSampleData,\n}\n```", "```js\nWhen(/^the (?:\"|')([\\.#\\w-]+)(?:\"|') element should( not)? have a (?:\"|')([\\w_-]+)(?:\"|') attribute$/, async function (selector, negation, attributeName) {\n  const element = await this.driver.findElement(By.css(selector));\n  const attributeValue = await element.getAttribute(attributeName);\n  const expectedValue = negation ? null : 'true';\n  assert.equal(attributeValue, expectedValue);\n});\n```", "```js\nimport { Given, When, Then } from 'cucumber';\nimport { By } from 'selenium-webdriver';\n\nWhen(/^user clicks on the (?:\"|')([\\.#\\w-]+)(?:\"|') element$/, async function (selector) {\n  const element = await this.driver.findElement(By.css(selector));\n  return element.click();\n});\n```", "```js\ndriver.wait(<condition>, <timeout>, <message>)\n```", "```js\nimport chai, { expect } from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport { By, until } from 'selenium-webdriver';\n\nchai.use(chaiAsPromised);\n\nThen(/^the (?:\"|')([\\.#\\w-]+)(?:\"|') element should appear within (\\d+) milliseconds$/, function (selector, timeout) {\n  return expect(this.driver.wait(until.elementLocated(By.css(selector)), timeout)).to.be.fulfilled;\n});\n```", "```js\n---------- firefox test start ----------\n........................F.\n\nFailures:\n\n1) Scenario: Valid Input # spec/cucumber/features/users/register/main.feature:24\n    Before # spec/cucumber/steps/index.js:5\n    When user navigates to / # spec/cucumber/steps/interactions/navigation.js:3\n    When user types in a valid email in the \"#email\" element # spec/cucumber/steps/interactions/input.js:10\n    And user types in a valid password in the \"#password\" element # spec/cucumber/steps/interactions/input.js:10\n    Then the \"#register-button\" element should not have a \"disabled\" attribute # spec/cucumber/steps/assertions/index.js:9\n    When user clicks on the \"#register-button\" element # spec/cucumber/steps/interactions/element.js:4\n    Then the \"#registration-success\" element should appear within 2000 milliseconds # spec/cucumber/steps/assertions/index.js:16\n       AssertionError: expected promise to be fulfilled but it was rejected with 'TimeoutError: Waiting for element to be located By(css selector, #registration-success)\\nWait timed out after 2002ms'\n    After # spec/cucumber/steps/index.js:12\n\n4 scenarios (1 failed, 3 passed)\n18 steps (1 failed, 17 passed)\n0m10.403s\n----------- firefox test end -----------\n```", "```js\nfetch(request)\n  .then(response => {\n    if (response.status === 201) {\n      return response.text();\n    } else {\n      throw new Error('Error creating new user');\n    }\n  })\n  .then(console.log)\n  .catch(console.log)\n```", "```js\nfetch(request)\n  .then(response => { ... })\n  .then(userId => this.setState({ userId }))\n  .catch(console.error)\n```", "```js\nconstructor(props) {\n  super(props);\n  this.state = {\n    userId: null,\n    ...\n  };\n}\n```", "```js\nrender() {\n  if(this.state.userId) {\n    return <div id=\"registration-success\">You have registered successfully</div>\n  }\n  ...\n}\n```", "```js\n$ yarn add react-router react-router-dom\n```", "```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport RegistrationForm from './components/registration-form/index.jsx';\n\nReactDOM.render((\n  <BrowserRouter>\n    <RegistrationForm />\n  </BrowserRouter>\n), document.getElementById('renderTarget'));\n```", "```js\n...\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nReactDOM.render((\n  <BrowserRouter>\n    <Route exact path=\"/register\" component={RegistrationForm} />\n  </BrowserRouter>\n), document.getElementById('renderTarget'));\n```", "```js\n\"GET /register\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.117 Safari/537.36\"\n\"GET /register\" Error (404): \"Not found\"\n```", "```js\n$ yarn add pushstate-server --dev\n```", "```js\npushstate-server dist/ $WEB_SERVER_PORT_TEST\n```", "```js\n- When user navigates to /\n + When user navigates to /register\n```", "```js\nimport { Link } from 'react-router-dom';\n\n...\nclass RegistrationForm extends React.Component {\n  render() {\n    ...\n    <div id=\"registration-success\">\n      <h1>You have registered successfully!</h1>\n      <p>Where do you want to go next?</p>\n      <Link to='/'><Button title=\"Home\"></Button></Link>\n      <Link to='/login'><Button title=\"Login\"></Button></Link>\n    </div>\n  }\n}\n```", "```js\nFeature: Login User\n\n  User visits the Login Page, fills in the form, and submits\n\n  Background: Navigate to the Login Page\n\n    When user navigates to /login\n\n  Scenario Outline: Invalid Input\n\n    Tests that the 'Login' button is disabled when either input elements contain invalid values\n\n    When user types in \"<email>\" in the \"#email\" element\n    And user types in \"<password>\" in the \"#password\" element\n    Then the \"#login-button\" element should have a \"disabled\" attribute\n\n  Examples:\n\n  | testCase | email | password |\n  | Both Invalid | invalid-email | shortpw |\n  | Invalid Email | invalid-email | abcd1234qwerty |\n  | Short Password | valid@ema.il | shortpw |\n\n  Scenario: Valid Input\n\n    Tests that the 'Login' button is enabled when valid values are provided, and that upon successful login, the UI display will display the message \"You've been logged in successfully\"\n\n    When a random user is registered\n    And user types in his/her email in the \"#email\" element\n    And user types in his/her password in the \"#password\" element\n    Then the \"#login-button\" element should not have a \"disabled\" attribute\n\n    When user clicks on the \"#login-button\" element\n    Then the \"#login-success\" element should appear within 2000 milliseconds\n```", "```js\nimport chai, { expect } from 'chai';\nimport chaiAsPromised from 'chai-as-promised';\nimport { Given, When, Then } from 'cucumber';\nimport { By, until } from 'selenium-webdriver';\nimport bcrypt from 'bcryptjs';\nimport fetch, { Request } from 'node-fetch';\nimport { generateSampleData } from '../utils';\n\nchai.use(chaiAsPromised);\n\nThen(/^a random user is registered$/, function () {\n\n  this.email = generateSampleData('email');\n  this.password = generateSampleData('password');\n  this.digest = bcrypt.hashSync(this.password, 10);\n\n  const payload = {\n    email: this.email,\n    digest: this.digest\n  };\n\n  const request = new Request(`http://${process.env.API_SERVER_HOST_TEST}:${process.env.API_SERVER_PORT_TEST}/users/`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    mode: 'cors',\n    body: JSON.stringify(payload)\n  })\n  return fetch(request)\n    .then(response => {\n      if (response.status === 201) {\n        this.userId = response.text();\n      } else {\n        throw new Error('Error creating new user');\n      }\n    })\n});\n```", "```js\n$ yarn add node-fetch --dev\n```", "```js\nimport React from 'react';\nimport bcrypt from 'bcryptjs';\nimport { validator } from '../../utils';\nimport Button from '../button/index.jsx';\nimport Input from '../input/index.jsx';\n\nfunction retrieveSalt (email) {\n  const url = new URL('http://%%API_SERVER_HOST%%:%%API_SERVER_PORT%%/salt/');\n  url.search = new URLSearchParams({ email });\n\n  const request = new Request(url, {\n    method: 'GET',\n    mode: 'cors'\n  });\n\n  return fetch(request)\n    .then(response => {\n      if (response.status === 200) {\n        return response.text();\n      } else {\n        throw new Error('Error retrieving salt');\n      }\n    })\n}\n\nfunction login (email, digest) {\n\n  // Send the credentials to the server\n  const payload = { email, digest };\n  const request = new Request('http://%%API_SERVER_HOST%%:%%API_SERVER_PORT%%/login/', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    mode: 'cors',\n    body: JSON.stringify(payload)\n  })\n  return fetch(request)\n    .then(response => {\n      if (response.status === 200) {\n        return response.text();\n      } else {\n        throw new Error('Error logging in');\n      }\n    })\n}\n\nclass LoginForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      token: null,\n      email: {\n        value: \"\",\n        valid: null\n      },\n      password: {\n        value: \"\",\n        valid: null\n      }\n    };\n  }\n\n  handleLogin = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const email = this.state.email.value;\n    const password = this.state.password.value;\n\n    retrieveSalt(email)\n      .then(salt => bcrypt.hashSync(password, salt))\n      .then(digest => login(email, digest))\n      .then(token => this.setState({ token }))\n      .catch(console.error)\n  }\n\n  handleInputChange = (name, event) => {\n    const value = event.target.value;\n    const valid = validator[name](value);\n    this.setState({\n      [name]: { value, valid }\n    });\n  }\n\n  render() {\n    if(this.state.token) {\n      return (\n        <div id=\"login-success\">\n          <h1>You have logged in successfully!</h1>\n          <p>Where do you want to go next?</p>\n          <Link to='/'><Button title=\"Home\"></Button></Link>\n          <Link to='/profile'><Button title=\"Profile\"></Button></Link>\n        </div>\n      )\n    }\n    return [\n      <form onSubmit={this.handleLogin}>\n        <Input label=\"Email\" type=\"email\" name=\"email\" id=\"email\" value={this.state.email.value} valid={this.state.email.valid} onChange={this.handleInputChange} />\n        <Input label=\"Password\" type=\"password\" name=\"password\" id=\"password\" value={this.state.password.value} valid={this.state.password.valid} onChange={this.handleInputChange} />\n        <Button title=\"Login\" id=\"login-button\" disabled={!(this.state.email.valid && this.state.password.valid)}/>\n      </form>,\n      <p>Don't have an account? <Link to='/register'>Register</Link></p>\n    ]\n  }\n}\n\nexport default LoginForm;\n```", "```js\n<BrowserRouter>\n  <Route exact path=\"/register\" component={RegistrationForm} />,\n  <Route exact path=\"/login\" component={LoginForm} />\n</BrowserRouter>\n```", "```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport RegistrationForm from './components/registration-form/index.jsx';\nimport LoginForm from './components/login-form/index.jsx';\n\nReactDOM.render((\n  <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/register\" component={RegistrationForm} />,\n      <Route exact path=\"/login\" component={LoginForm} />\n    </Switch>\n  </BrowserRouter>\n), document.getElementById('renderTarget'));\n```"]