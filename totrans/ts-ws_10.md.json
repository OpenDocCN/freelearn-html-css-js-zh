["```js\ntype Only FooAndBar = Extract<\"foo\" | \"bar\" | \"baz\", \"foo\" | \"bar\">;  // \"foo\" | \"bar\"\n```", "```js\n// identity.ts\nfunction identity(x: number): number {\n    return x;\n}\n```", "```js\n// identityString.ts\nfunction identityString(x: string) {\n    return x;\n}\n```", "```js\n// identity.js\nfunction identity(x) {\n    return x;\n}\n// identityString.js\nfunction identityString(x) {\n    return x;\n}\n```", "```js\nfunction identity(x: any): any {\n    return x;\n}\nconst result = identity('foo');\nresult.toFixed();\n```", "```js\nfunction identity<T>(x: T): T {\n\treturn x;\n}\n```", "```js\nconst arr = [1, 2, 3];\n```", "```js\ntype Dictionary<V> = Record<string, V>;\n```", "```js\nclass Box<T>  {\n    private _value: T;\n    constructor(value: T) {\n        this._value = value\n    }\n    get value(): T {\n        return this.value;\n    }\n}\n```", "```js\nclass Box<T>  {\n    ...\n    map<U>(mapper: (value: T) => U): U {\n        return mapper(this.value)\n    }\n}\n```", "```js\n    class Set<T> {\n    }\n    ```", "```js\n    class Set<T> {\n      private items: T[];\n      constructor(initialItems: T[] = []) {\n        this.items = initialItems;\n      }\n    }\n    ```", "```js\n    class Set<T> {\n      private items: T[];\n      //...\n      get size(): number {\n        return this.items.length;\n      }\n    }\n    ```", "```js\n    class Set<T> {\n      private items: T[];\n      //...\n      has(item: T): boolean {\n        return this.items.includes(item);\n      }\n    }\n    ```", "```js\n    class Set<T> {\n      ...\n      add(item: T): void {\n        if (!this.has(item)) {\n          this.items.push(item);\n        }\n      }\n      remove(item: T): void {\n        const itemIndex = this.items.indexOf(item);\n        if (itemIndex >= 0) {\n          this.items.splice(itemIndex, 1);\n        }\n      }\n    }\n    ```", "```js\n    const set = new Set <number>([1,2,3]);  \n    set.add(1) // works – since 1 is a number\n    set.add('hello') //Error – since 'hello' is not a number\n    ```", "```js\ninterface FetchResponse {\n\tstatus: number;\n\theaders: Headers;\n\tdata: any;\n}\nasync function fetchJson(url: string): Promise<FetchResponse> {\n\tconst response = await fetch(url);\n\treturn {\n\t\theaders: response.headers,\n\t\tstatus: response.status,\n\t\tdata: await response.json(),\n\t};\n}\n```", "```js\n\tconst { data } = await fetchJson('https://jsonplaceholder.typicode.com/todos/1');\n\tconsole.log(data.title.toUpperCase()); // does data have a title property? What type is it?..\n```", "```js\n// fetchJson.ts\ninterface FetchResponse<T> {\n    status: number;\n    headers: Headers;\n    data: T;\n}\nasync function fetchJson<T>(url: string): Promise<FetchResponse<T>> {\n    const response = await fetch(url);\n    return {\n        headers: response.headers,\n        status: response.status,\n        data: await response.json(),\n    };\n}\n```", "```js\n// usage.ts\n(async () => {\n    interface Todo {\n        userId: number;\n        id: number;\n        title: string;\n        completed: boolean;\n    }\n    const { data } = await fetchJson<Todo>('https://jsonplaceholder.typicode.com/todos/1');\n    console.log(data.title); // ✅ title is of type 'string'\n    console.log(data.doesntExist); // ❌ 'doesntExist' doesn't compile\n})();\n```", "```js\nconst response = await fetchJson('https://jsonplaceholder.typicode.com/todos/1');\nconst todo = response.data as Todo;\n```", "```js\nfunction map<T, U>(fn: (item: T) => U) {\n    return (items: T[]) => {\n        return items.map(fn);\n    };\n}\nconst multiplier = map((x: number) => x * 2);\nconst multiplied = multiplier([1, 2, 3]); // returns: [2, 4, 6]\n```", "```js\ninterface Array<T> {\n    // ...\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\n    // ...\n}\n```", "```js\nfunction getLength<T extends any[] | string>(x: T): number {\n\treturn x.length;\n}\n```", "```js\nfunction toDate<T extends Date | number>(value: T) {\n    if (value instanceof Date) {\n        return value;\n    }\n    return new Date(value);\n}\n```", "```js\n    function memoize(fn: Function, keyGetter?: (args: any[]) => string) {\n        // TODO: we'll implement the function in the next steps\n    }\n    ```", "```js\n    function memoize(fn: Function, keyGetter?: (args: any[]) => string) {\n        const cache: Record<string, any> = {};\n        return (...args: any[]) => {\n            const key = (keyGetter || JSON.stringify)(args);\n            if (!(key in cache)) {\n                cache[key] = fn(...args);\n            }\n            return cache[key];\n        };\n    }\n    ```", "```js\n    function expensiveCalculation(a: number, b: number) {\n        const timeout = 10000;\n        const start = Date.now();\n        while (Date.now() <= start + timeout);\n        return a + b;\n    }\n    ```", "```js\n    const memoizedExpensiveCalculation = memoize(expensiveCalculation);\n    ```", "```js\n    expensiveCalculation(\"not-a-number\", 1); \n    memoizedExpensiveCalculation(\"not-a-number\", 1); \n    ```", "```js\n    type AnyFunction = (...args: any[]) => any;\n    type KeyGetter<Fn extends AnyFunction> = (...args: Parameters<Fn>) => string;\n    ```", "```js\n    function memoize<Fn extends AnyFunction>(fn: Fn, keyGetter?: KeyGetter<Fn>) {\n    ```", "```js\n    function memoize<Fn extends AnyFunction>(fn: Fn, keyGetter?: KeyGetter<Fn>) {\n        const cache: Record<string, ReturnType<Fn>> = {};\n        return (...args: Parameters<Fn>) => {\n            const key = (keyGetter || JSON.stringify)(args);\n            if (!(key in cache)) {\n                cache[key] = fn(...args);\n            }\n            return cache[key];\n        };\n    }\n    ```", "```js\ninterface Identifiable<Id extends string | number = number> {\n    id: Id;\n}\n```", "```js\ninterface Person extends Identifiable<number> {\n    name: string;\n    age: number;\n}\ninterface Car extends Identifiable<string> {\n    make: string;\n}\ndeclare const p: Person; // typeof p.id === 'number'\ndeclare const c: Car; // typeof c.id === 'string';\n```", "```js\ninterface Identifiable<Id extends string | number = number> {\n    id: Id;\n}\n```", "```js\ninterface Person extends Identifiable {\n    name: string;\n    age: number;\n}\ninterface Car extends Identifiable<string> {\n    make: string;\n}\n```", "```js\n@types/react package\n```", "```js\ntype NonNullable<T> = T extends null | undefined ? never : T; \n```", "```js\nfunction isNonNullable<T>(x: T): x is NonNullable<T> {\n    return x !== null && x !== undefined;\n}\n```", "```js\ntype ArrayItem<T extends any[]> = T extends Array<infer U> ? U : never;\n```", "```js\ntype PromiseValueType<T> = T extends Promise<any> ? T : never;\n```"]