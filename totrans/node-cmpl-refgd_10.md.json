["```js\nbind-address = 127.0.0.1\n```", "```js\nCREATE DATABASE notes;\nCREATE USER 'notes'@'localhost' IDENTIFIED BY 'notes';\nGRANT ALL PRIVILEGES ON notes.* TO 'notes'@'localhost' WITH GRANT OPTION;  \n```", "```js\nCREATE DATABASE userauth;\nCREATE USER 'userauth'@'localhost' IDENTIFIED BY 'userauth';\nGRANT ALL PRIVILEGES ON userauth.* TO 'userauth'@'localhost' WITH GRANT OPTION;  \n```", "```js\n$ mysql -u root -p <chap10/users/mysql-create-db.sql\n$ mysql -u root -p <chap10/notes/models/mysql-create-db.sql  \n```", "```js\n$ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\n$ sudo apt-get update\n$ sudo apt-get install -y nodejs build-essential  \n```", "```js\ndbname: notes \nusername: notes \npassword: notes12345\nparams: \n    host: localhost \n    port: 3306 \n    dialect: mysql \n```", "```js\n\"on-server\": \"SEQUELIZE_CONNECT=models/sequelize-server-mysql.yaml NOTES_MODEL=sequelize USER_SERVICE_URL=http://localhost:3333 PORT=3000 node --experimental-modules ./app\",  \n```", "```js\ndbname: userauth \nusername: userauth \npassword: userauth \nparams: \n    host: localhost \n    port: 3306 \n    dialect: mysql \n```", "```js\n\"on-server\": \"PORT=3333 SEQUELIZE_CONNECT=sequelize-server-mysql.yaml node --experimental-modules ./user-server\", \n```", "```js\n# ls /opt  \n```", "```js\n$ rsync --archive --verbose ./ root@159.89.145.190:/opt/\n```", "```js\n# ls /opt\nnotes  users  \n```", "```js\n# rm -rf node_modules\n# npm install  \n```", "```js\n# export PATH=./node_modules/.bin:${PATH}  \n```", "```js\n# mysql -u root -p <users/mysql-create-db.sql\n# mysql -u root -p <notes/models/mysql-create-db.sql  \n```", "```js\n# cd /opt/users\n# DEBUG=users:* npm run on-server\n\n> user-auth-server@0.0.1 on-server /opt/users\n> PORT=3333 SEQUELIZE_CONNECT=sequelize-server-mysql.yaml node --experimental-modules ./user-server\n\n(node:9844) ExperimentalWarning: The ESM module loader is experimental.\n\n```", "```js\n# cd /opt/users/\n# PORT=3333 node users-add.js \nCreated { id: 1, username: 'me', password: 'w0rd', provider: 'local',\n familyName: 'Einarrsdottir', givenName: 'Ashildr', middleName: '',\n emails: '[]', photos: '[]',\n updatedAt: '2018-02-02T00:43:16.923Z', createdAt: '2018-02-02T00:43:16.923Z' }\n# PORT=3333 node users-list.js \nList [ { id: 'me', username: 'me', provider: 'local',\n familyName: 'Einarrsdottir', givenName: 'Ashildr', middleName: '',\n emails: '[]', photos: '[]' } ]\n```", "```js\n users:error /create-user Error: Please install mysql2 package manually\n\n```", "```js\n# cd ../notes\n# npm run on-server\n\n> notes@0.0.0 on-server /opt/notes\n> SEQUELIZE_CONNECT=models/sequelize-server-mysql.yaml NOTES_MODEL=sequelize USER_SERVICE_URL=http://localhost:3333 PORT=3000 node --experimental-modules ./app\n\n(node:9932) ExperimentalWarning: The ESM module loader is experimental.\n```", "```js\nTWITTER_CALLBACK_HOST=http://159.89.145.190:3000 \n```", "```js\n{\n  \"name\": \"pm2deploy\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"start\": \"pm2 start ecosystem.json\",\n    \"stop\": \"pm2 stop ecosystem.json\",\n    \"restart\": \"pm2 restart ecosystem.json\",\n    \"status\": \"pm2 status\",\n    \"save\": \"pm2 save\",\n    \"startup\": \"pm2 startup\"\n  },\n  \"dependencies\": {\n    \"pm2\": \"^2.9.3\"\n  }\n}\n\n```", "```js\n{\n  \"apps\" : [\n    {\n      \"name\": \"User Authentication\",\n      \"script\": \"user-server.mjs\",\n      \"cwd\": \"/opt/users\",\n      \"node_args\": \"--experimental-modules\",\n      \"env\": {\n        \"PORT\": \"3333\",\n        \"SEQUELIZE_CONNECT\": \"sequelize-server-mysql.yaml\"\n      },\n      \"env_production\": { \"NODE_ENV\": \"production\" }\n    },\n    {\n      \"name\": \"Notes\",\n      \"script\": \"app.mjs\",\n      \"cwd\": \"/opt/notes\",\n      \"node_args\": \"--experimental-modules\",\n      \"env\": {\n        \"PORT\": \"3000\",\n        \"SEQUELIZE_CONNECT\": \"models/sequelize-server-mysql.yaml\",\n        \"NOTES_MODEL\": \"sequelize\",\n        \"USER_SERVICE_URL\": \"http://localhost:3333\",\n        \"TWITTER_CONSUMER_KEY\": \"..\",\n        \"TWITTER_CONSUMER_SECRET\": \"..\",\n        \"TWITTER_CALLBACK_HOST\": \"http://45.55.37.74:3000\"\n      },\n      \"env_production\": { \"NODE_ENV\": \"production\" }\n    }\n  ]\n}\n\n```", "```js\n# pm2 list\n# pm2 describe 1\n# pm2 logs 1  \n```", "```js\n# pm2 save\n[PM2] Saving current process list...\n[PM2] Successfully saved in /root/.pm2/dump.pm2\n\n# pm2 startup\n[PM2] Init System found: systemd\nPlatform systemd\nTemplate\n[Unit]\nDescription=PM2 process manager\nDocumentation=https://pm2.keymetrics.io/\nAfter=network.target\n\n... more output is printed\n```", "```js\nCommand list \n[ 'systemctl enable pm2-root', \n  'systemctl start pm2-root', \n  'systemctl daemon-reload', \n  'systemctl status pm2-root' ] \n[PM2] Writing init configuration in /etc/systemd/system/pm2-root.service \n[PM2] Making script booting at startup... \n...\n[DONE]  \n>>> Executing systemctl start pm2-root \n[DONE]  \n>>> Executing systemctl daemon-reload \n[DONE]  \n>>> Executing systemctl status pm2-root\n\n```", "```js\n# systemctl status pm2-root \n● pm2-root.service - PM2 process manager \n Loaded: loaded (/etc/systemd/system/pm2-root.service; enabled; vendor preset: enabled) \n Active: active (running) since Fri 2018-02-02 22:27:45 UTC; 29min ago \n Docs: https://pm2.keymetrics.io/ \n Process: 738 ExecStart=/opt/init/node_modules/pm2/bin/pm2 resurrect (code=exited, status=0/SUCCESS) \n Main PID: 873 (PM2 v2.9.3: God) \n Tasks: 30 (limit: 4915) \n Memory: 171.6M \n CPU: 11.528s \n CGroup: /system.slice/pm2-root.service \n ├─873 PM2 v2.9.3: God Daemon (/root/.pm2) \n ├─895 node /opt/users/user-server.mjs \n └─904 node /opt/notes/app.mjs\n\n```", "```js\n$ docker run hello-world \nUnable to find image 'hello-world:latest' locally \nlatest: Pulling from library/hello-world \nca4f61b1923c: Pull complete \nDigest: sha256:66ef312bbac49c39a89aa9bcc3cb4f3c9e7de3788c944158df3ee0176d32b751 \nStatus: Downloaded newer image for hello-world:latest \n\nHello from Docker! \nThis message shows that your installation appears to be working correctly. \n\nTo generate this message, Docker took the following steps: \n 1\\. The Docker client contacted the Docker daemon. \n 2\\. The Docker daemon pulled the \"hello-world\" image from the Docker Hub. \n (amd64) \n 3\\. The Docker daemon created a new container from that image which runs the \n executable that produces the output you are currently reading. \n 4\\. The Docker daemon streamed that output to the Docker client, which sent it \n to your terminal. \n\nTo try something more ambitious, you can run an Ubuntu container with: \n $ docker run -it ubuntu bash \n\nShare images, automate workflows, and more with a free Docker ID: \n https://cloud.docker.com/ \n\nFor more examples and ideas, visit: \n https://docs.docker.com/engine/userguide/\n\n```", "```js\n$ docker rm boring_lumiere\nboring_lumiere \n```", "```js\n$ docker pull mysql/mysql-server:5.7\n5.7: Pulling from mysql/mysql-server\n4040fe120662: Pull complete \nd049aa45d358: Pull complete \na6c7ed00840d: Pull complete \n853789d8032e: Pull complete \nDigest: sha256:1b4c7c24df07fa89cdb7fe1c2eb94fbd2c7bd84ac14bd1779e3dec79f75f37c5\nStatus: Downloaded newer image for mysql/mysql-server:5.7\n```", "```js\n$ docker run --name=mysql --env MYSQL_ROOT_PASSWORD=f00bar  mysql/mysql-server:5.7 \n[Entrypoint] MySQL Docker Image 5.7.21-1.1.4 \n[Entrypoint] Initializing database \n[Entrypoint] Database initialized \n... \n[Entrypoint] ignoring /docker-entrypoint-initdb.d/* \n[Entrypoint] Server shut down \n[Entrypoint] MySQL init process done. Ready for start up. \n[Entrypoint] Starting MySQL 5.7.21-1.1.4\n\n```", "```js\n$ docker exec -it mysql mysql -u root -p \nEnter password:  \nWelcome to the MySQL monitor.  Commands end with ; or \\g. \nYour MySQL connection id is 4 \nServer version: 5.7.21 MySQL Community Server (GPL) \n\nCopyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved. \n\nOracle is a registered trademark of Oracle Corporation and/or its \naffiliates. Other names may be trademarks of their respective \nowners. \n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. \n\nmysql> show databases; \n+--------------------+ \n| Database           | \n+--------------------+ \n| information_schema | \n| mysql              | \n| performance_schema | \n| sys                | \n+--------------------+ \n4 rows in set (0.00 sec) \n\nmysql> \n```", "```js\n$ docker stop mysql \nmysql $ docker rm mysql\nmysql\n\n```", "```js\ndocker network create --driver bridge authnet\n```", "```js\n$ sh -x buildauthnet.sh\n+ docker network create --driver bridge authnet \n3021e2069278c2acb08d94a2d31507a43f089db1c02eecc97792414b498eb785\n```", "```js\nPS C:\\Users\\david\\chap10\\authnet> Get-ExecutionPolicy\nRestricted\nPS C:\\Users\\david\\chap10\\authnet> Set-ExecutionPolicy Unrestricted\n```", "```js\n$ docker network ls \nNETWORK ID          NAME                DRIVER              SCOPE \n3021e2069278        authnet             bridge              local\n\n```", "```js\n$ docker network inspect authnet\n ... much JSON output\n\n```", "```js\ndocker run --name db-userauth --env MYSQL_RANDOM_ROOT_PASSWORD=true \\ \n    --env MYSQL_USER=userauth --env MYSQL_PASSWORD=userauth \\ \n    --env MYSQL_DATABASE=userauth \\ \n    --volume `pwd`/my.cnf:/etc/my.cnf \\\n    --volume `pwd`/../userauth-data:/var/lib/mysql \\ \n    --network authnet mysql/mysql-server:5.7\n\n```", "```js\ndocker volume create db-userauth-volume\n\ndocker run --name db-userauth --env MYSQL_RANDOM_ROOT_PASSWORD=true --env MYSQL_USER=userauth --env MYSQL_PASSWORD=userauth --env MYSQL_DATABASE=userauth --volume $PSScriptRoot\\my.cnf:/etc/my.cnf --volume db-userauth-volume:/var/lib/mysql --network authnet mysql/mysql-server:5.7\n```", "```js\n$ sh startdb.sh \n... much output\n[Entrypoint] GENERATED ROOT PASSWORD: UMyh@q]@j4qijyj@wK4s4SkePIkq\n... much output\n\n```", "```js\n$ docker network inspect authnet\n```", "```js\n$ docker exec -it db-userauth mysql -u userauth -p \nEnter password:  \nWelcome to the MySQL monitor.  Commands end with ; or \\g.\n   ... much output mysql> show databases; \n+--------------------+ \n| Database           | \n+--------------------+ \n| information_schema | \n| userauth           | \n+--------------------+ \n2 rows in set (0.00 sec) \n\nmysql> use userauth; \nDatabase changed \nmysql> show tables; \nEmpty set (0.00 sec)\n\n```", "```js\n$ docker cp db-userauth:/etc/my.cnf . \n$ ls \nmy.cnf  mysql-data  startdb.sh \n\n```", "```js\n# socket=/var/lib/mysql/mysql.sock \nbind-address = 0.0.0.0\n```", "```js\n$ docker stop db-userauth \ndb-userauth\n$ docker rm db-userauth   \ndb-userauth $ sh ./startdb.sh \n[Entrypoint] MySQL Docker Image 5.7.21-1.1.4 \n[Entrypoint] Starting MySQL 5.7.21-1.1.4\n\n```", "```js\n$ docker network inspect authnet \n        \"Name\": \"authnet\",\n         ...\n                    \"Subnet\": \"172.18.0.0/16\", \n                    \"Gateway\": \"172.18.0.1\"\n        ... \n \"Containers\": { \n \"Name\": \"db-userauth\", \n \"MacAddress\": \"02:42:ac:12:00:02\", \n \"IPv4Address\": \"172.18.0.2/16\",\n   ...\n```", "```js\n# cat /etc/resolv.conf \nsearch attlocal.net \nnameserver 127.0.0.11 \noptions ndots:0\n\n```", "```js\n# mysql -h db-userauth -u userauth -p \nEnter password: \nWelcome to the MySQL monitor.  Commands end with ; or \\g. \nYour MySQL connection id is 33 \nServer version: 5.7.21 MySQL Community Server (GPL)\n\n```", "```js\nFROM node:10\n\nENV DEBUG=\"users:*\" \nENV PORT=\"3333\" \nENV SEQUELIZE_CONNECT=\"sequelize-docker-mysql.yaml\" \nENV REST_LISTEN=\"0.0.0.0\" \n\nRUN mkdir -p /userauth\nCOPY package.json sequelize-docker-mysql.yaml *.mjs *.js /userauth/\nWORKDIR /userauth\nRUN apt-get update -y \\\n && apt-get -y install curl python build-essential git ca-certificates \\\n && npm install --unsafe-perm \n\nEXPOSE 3333 \nCMD npm run docker \n```", "```js\ndbname: userauth \nusername: userauth \npassword: userauth \nparams: \n    host: db-userauth \n    port: 3306 \n    dialect: mysql \n```", "```js\nserver.listen(process.env.PORT, \n  process.env.REST_LISTEN ? process.env.REST_LISTEN : \"localhost\", \n  () => { log(server.name +' listening at '+ server.url); }); \n```", "```js\n\"docker\": \"node --experimental-modules ./user-server\",\n\"docker-build\": \"docker build -t node-web-development/userauth .\"\n```", "```js\n$ npm run docker-build\n\n> user-auth-server@0.0.1 docker-build /Users/david/chap10/users\n> docker build -t node-web-development/userauth .\n\nSending build context to Docker daemon 33.8MB\nStep 1/11 : FROM node:9.5\n ---> a696309517c6\nStep 2/11 : ENV DEBUG=\"users:*\"\n ---> Using cache\n ---> f8cc103432e8\n\nStep 3/11 : ENV PORT=\"3333\"\n ---> Using cache\n ---> 39b24b8b554e\n... more output\n```", "```js\ndocker run -it --name userauth --net=authnet node-web-development/userauth\n```", "```js\n$ sh -x startserver.sh \n+ docker run -it --name userauth --net=authnet node-web-development/userauth\n\n> user-auth-server@0.0.1 docker /userauth\n> node --experimental-modules ./user-server\n\n(node:17) ExperimentalWarning: The ESM module loader is experimental.\n users:service User-Auth-Service listening at http://0.0.0.0:3333 +0ms\n\n```", "```js\n$ docker network inspect authnet  \n```", "```js\n$ docker exec -it userauth bash\nroot@a29d833287bf:/userauth# ls \nnode_modules                 user-server.mjs  users-list.js \npackage-lock.json            users-add.js     users-sequelize.mjs \npackage.json                 users-delete.js \nsequelize-docker-mysql.yaml  users-find.js\n\n```", "```js\nroot@a29d833287bf:/userauth# PORT=3333 node users-list.js \nList [] \nroot@a29d833287bf:/userauth# PORT=3333 node users-add.js \nCreated { id: 1, username: 'me', password: 'w0rd', provider: 'local', \n familyName: 'Einarrsdottir', givenName: 'Ashildr', \n middleName: '', emails: '[]', photos: '[]', \n updatedAt: '2018-02-05T01:54:53.320Z', createdAt: '2018-02-\n 05T01:54:53.320Z' } \nroot@a29d833287bf:/userauth# PORT=3333 node users-list.js \nList [ { id: 'me', username: 'me', provider: 'local', \n familyName: 'Einarrsdottir', givenName: 'Ashildr', middleName: '', \n emails: '[]', photos: '[]' } ]\n\n```", "```js\nroot@a29d833287bf:/userauth# ps -eafw \nUID        PID  PPID  C STIME TTY          TIME CMD \nroot         1     0  0 01:52 pts/0    00:00:00 /bin/sh -c npm run docker \nroot         9     1  0 01:52 pts/0    00:00:00 npm \nroot        19     9  0 01:52 pts/0    00:00:00 sh -c node --experimental-modules ./user-server \nroot        20    19  0 01:52 pts/0    00:00:01 node --experimental-modules ./user-server \nroot        30     0  0 01:54 pts/1    00:00:00 bash \nroot        70    30  0 01:57 pts/1    00:00:00 ps -eafw \nroot@a29d833287bf:/userauth# ping db-userauth \nPING db-userauth (172.18.0.2): 56 data bytes \n64 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.105 ms \n64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.077 ms \n^C--- db-userauth ping statistics --- \n2 packets transmitted, 2 packets received, 0% packet loss \nround-trip min/avg/max/stddev = 0.077/0.091/0.105/0.000 ms \nroot@a29d833287bf:/userauth# ping userauth \nPING userauth (172.18.0.3): 56 data bytes \n64 bytes from 172.18.0.3: icmp_seq=0 ttl=64 time=0.132 ms \n64 bytes from 172.18.0.3: icmp_seq=1 ttl=64 time=0.095 ms \n^C--- userauth ping statistics --- \n2 packets transmitted, 2 packets received, 0% packet loss\n\n```", "```js\n$ docker exec -it db-userauth bash \nbash-4.2# mysql -u userauth -p \nEnter password:  \nWelcome to the MySQL monitor.  Commands end with ; or \\g.\n ... mysql> use userauth \n\nDatabase changed \nmysql> show tables; \n+--------------------+ \n| Tables_in_userauth | \n+--------------------+ \n| Users              | \n+--------------------+ \n1 row in set (0.00 sec) \n\nmysql> select * from Users; \n+----+----------+----------+----------+---------------+-----------+--...\n| id | username | password | provider | familyName    | givenName |  ...\n+----+----------+----------+----------+---------------+-----------+--...\n|  1 | me       | w0rd     | local    | Einarrsdottir | Ashildr   |  ...\n+----+----------+----------+----------+---------------+-----------+--...\n1 row in set (0.00 sec)\n\n```", "```js\ndocker network create --driver bridge frontnet\n```", "```js\n$ sh -x buildfrontnet.sh \n+ docker network create --driver bridge frontnet\nf3df227d4bfff57bc7aed1e096a2ad16f6cebce4938315a54d9386a42d1ae3ed\n$ docker network ls\nNETWORK ID NAME DRIVER SCOPE\n3021e2069278 authnet bridge local\nf3df227d4bff frontnet bridge local  \n```", "```js\ndocker run --name db-notes --env MYSQL_RANDOM_ROOT_PASSWORD=true \\\n --env MYSQL_USER=notes --env MYSQL_PASSWORD=notes12345 \\\n --env MYSQL_DATABASE=notes \\\n --volume `pwd`/my.cnf:/etc/my.cnf \\\n --volume `pwd`/../notes-data:/var/lib/mysql \\\n --network frontnet mysql/mysql-server:5.7\n```", "```js\ndocker volume create notes-data-volume\n\ndocker run --name db-notes --env MYSQL_RANDOM_ROOT_PASSWORD=true --env MYSQL_USER=notes --env MYSQL_PASSWORD=notes12345 --env MYSQL_DATABASE=notes --volume $PSScriptRoot\\my.cnf:/etc/my.cnf --volume notes-data-volume:/var/lib/mysql --network frontnet mysql/mysql-server:5.7\n```", "```js\n$ mkdir ../notes-data\n$ sh -x startdb.sh \n+ pwd\n+ pwd\n+ docker run --name db-notes --env MYSQL_RANDOM_ROOT_PASSWORD=true --env MYSQL_USER=notes --env MYSQL_PASSWORD=notes12345 --env MYSQL_DATABASE=notes --volume /home/david/nodewebdev/node-web-development-code-4th-edition/chap10/frontnet/my.cnf:/etc/my.cnf --volume /home/david/nodewebdev/node-web-development-code-4th-edition/chap10/frontnet/../notes-data:/var/lib/mysql --network frontnet mysql/mysql-server:5.7\n[Entrypoint] MySQL Docker Image 5.7.21-1.1.4\n[Entrypoint] Initializing database\n[Entrypoint] Database initialized\n[Entrypoint] GENERATED ROOT PASSWORD: 3kZ@q4hBItYGYj3Mes!AdiP83Nol\n[Entrypoint] ignoring /docker-entrypoint-initdb.d/*\n[Entrypoint] Server shut down\n[Entrypoint] MySQL init process done. Ready for start up.\n[Entrypoint] Starting MySQL 5.7.21-1.1.4\n```", "```js\n$ docker exec -it userauth bash \nroot@0a2009334b79:/userauth# ping db-notes \nping: unknown host\n\n```", "```js\nFROM node:10 \n\nENV DEBUG=\"notes:*,messages:*\" \nENV SEQUELIZE_CONNECT=\"models/sequelize-docker-mysql.yaml\" \nENV NOTES_MODEL=\"sequelize\" \nENV USER_SERVICE_URL=\"http://userauth:3333\" \nENV PORT=\"3000\" \nENV NOTES_SESSIONS_DIR=\"/sessions\" \n# ENV TWITTER_CONSUMER_KEY=\"...\"\n# ENV TWITTER_CONSUMER_SECRET=\"...\"\n# Use this line when the Twitter Callback URL\n# has to be other than localhost:3000\n# ENV TWITTER_CALLBACK_HOST=http://45.55.37.74:3000 \n\nRUN mkdir -p /notesapp /notesapp/minty /notesapp/partials /notesapp/public /notesapp/routes /notesapp/theme /notesapp/views\nCOPY minty/ /notesapp/minty/\nCOPY models/*.mjs models/sequelize-docker-mysql.yaml /notesapp/models/\nCOPY partials/ /notesapp/partials/\nCOPY public/ /notesapp/public/\nCOPY routes/ /notesapp/routes/\nCOPY theme/ /notesapp/theme/\nCOPY views/ /notesapp/views/\nCOPY app.mjs package.json /notesapp/\n\nWORKDIR /notesapp\nRUN apt-get update -y \\\n && apt-get -y install curl python build-essential git ca-certificates \\\n && npm install --unsafe-perm\n\n# Uncomment to build the theme directory\n# WORKDIR /notesapp/theme\n# RUN npm run download && npm run build && npm run clean\n\nWORKDIR /notesapp\n\nVOLUME /sessions \nEXPOSE 3000 \nCMD node --experimental-modules ./app\n```", "```js\nCOPY . /notesapp\n```", "```js\n \"scripts\": {\n    ...\n    \"clean\": \"rm -rf bootstrap-4.0.0/node_modules\"\n    ...\n}\n```", "```js\ndbname: notes \nusername: notes \npassword: notes12345\nparams: \n    host: db-notes \n    port: 3306 \n    dialect: mysql \n```", "```js\nconst sessionStore  = new FileStore({ \n    path: process.env.NOTES_SESSIONS_DIR ?             \n          process.env.NOTES_SESSIONS_DIR : \"sessions\" \n}); \n```", "```js\n\"scripts\": {\n    ...\n    \"docker\": \"node --experimental-modules ./app\",\n    \"docker-build\": \"docker build -t node-web-development/notes .\"\n    ...\n}\n```", "```js\n$ npm run docker-build\n\n> notes@0.0.0 docker-build /Users/david/chap10/notes\n> docker build -t node-web-development/notes .\n\nSending build context to Docker daemon 76.27MB\nStep 1/22 : FROM node:9.5\n ---> a696309517c6\nStep 2/22 : ENV DEBUG=\"notes:*,messages:*\"\n ---> Using cache\n ---> 8628ecad9fa4\n```", "```js\ndocker run -it --name notes --net=frontnet -p 3000:3000 node-web-development/notes\n```", "```js\n$ sh -x startserver.sh \n+ docker run -it --name notes --net=frontnet -p 3000:3000 node-web-development/notes\n(node:6) ExperimentalWarning: The ESM module loader is experimental.\n notes:debug-INDEX Listening on port 3000 +0ms\n```", "```js\n$ docker exec -it notes bash \nroot@125a196c3fd5:/notesapp# ping userauth \nping: unknown host \nroot@125a196c3fd5:/notesapp# ping db-notes \nPING db-notes (172.19.0.2): 56 data bytes \n64 bytes from 172.19.0.2: icmp_seq=0 ttl=64 time=0.136 ms \n^C--- db-notes ping statistics --- \n1 packets transmitted, 1 packets received, 0% packet loss \nround-trip min/avg/max/stddev = 0.136/0.136/0.136/0.000 ms \nroot@125a196c3fd5:/notesapp# \n\n```", "```js\n$ docker network inspect frontnet\n$ docker network inspect authnet\n```", "```js\ndocker run -it --name notes --net=authnet --net=frontnet -p 3000:3000 node-web-development/notes\n```", "```js\n$ docker network connect authnet notes\n```", "```js\n$ docker network disconnect authnet notes \n$ docker network connect frontnet userauth\n\n```", "```js\n$ docker network disconnect frontnet userauth\n$ docker network connect authnet notes\n$ docker exec -it notes bash\nroot@7fce818e9a4d:/notesapp# ping userauth\nPING userauth (172.18.0.3): 56 data bytes\n64 bytes from 172.18.0.3: icmp_seq=0 ttl=64 time=0.103 ms\n^C--- userauth ping statistics ---\n1 packets transmitted, 1 packets received, 0% packet loss\nround-trip min/avg/max/stddev = 0.103/0.103/0.103/0.000 ms\nroot@7fce818e9a4d:/notesapp# ping db-userauth\nPING db-userauth (172.18.0.2): 56 data bytes\n64 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.201 ms\n^C--- db-userauth ping statistics ---\n1 packets transmitted, 1 packets received, 0% packet loss\nround-trip min/avg/max/stddev = 0.201/0.201/0.201/0.000 ms\nroot@7fce818e9a4d:/notesapp# \n```", "```js\ndocker run --name db-notes \\\n  ...\n  --volume `pwd`/../notes-data:/var/lib/mysql \\\n  ...\n```", "```js\n$ docker inspect --format '{{json .Mounts}}' db-notes\n[{\"Type\":\"bind\",\n\"Source\":\"/Users/david/chap10/frontnet/my.cnf\",\"Destination\":\"/etc/my.cnf\",\n\"Mode\":\"\",\"RW\":true,\"Propagation\":\"rprivate\"},{\"Type\":\"volume\",\"Name\":\"39f9a80b49e3ecdebc7789de7b7dd2366c400ee7fbfedd6e4df18f7e60bad409\",\n\"Source\":\"/var/lib/docker/volumes/39f9a80b49e3ecdebc7789de7b7dd2366c400ee7fbfedd6e4df18f7e60bad409/_data\",\"Destination\":\"/var/lib/mysql\",\n\"Driver\":\"local\",\"Mode\":\"\",\"RW\":true,\"Propagation\":\"\"}]\n```", "```js\n$ docker inspect --format '{{json .Mounts}}' db-notes \n[{\"Type\":\"bind\",\n\"Source\":\"/Users/david/chap10/frontnet/my.cnf\",\"Destination\":\"/etc/my.cnf\",\n\"Mode\":\"\",\"RW\":true,\"Propagation\":\"rprivate\"},\n{\"Type\":\"bind\",\n\"Source\":\"/Users/david/chap10/notes-data\",\"Destination\":\"/var/lib/mysql\",\n\"Mode\":\"\",\"RW\":true,\"Propagation\":\"rprivate\"}]\n\n```", "```js\n$ docker run -it ...\n```", "```js\n$ docker run --detach --restart always ...\n```", "```js\nversion: '3'\nservices:\n\n  db-userauth:\n    image: \"mysql/mysql-server:5.7\"\n    container_name: db-userauth\n    command: [ \"mysqld\", \"--character-set-server=utf8mb4\", \n              \"--collation-server=utf8mb4_unicode_ci\",\n              \"--bind-address=0.0.0.0\" ]\n    expose:\n      - \"3306\"\n    networks:\n      - authnet\n    volumes:\n      - db-userauth-data:/var/lib/mysql\n      - ../authnet/my.cnf:/etc/my.cnf\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"true\"\n      MYSQL_USER: userauth\n      MYSQL_PASSWORD: userauth\n      MYSQL_DATABASE: userauth\n    restart: always\n\n  userauth:\n    build: ../users\n    container_name: userauth\n    depends_on:\n      - db-userauth\n    networks:\n      - authnet\n      - frontnet\n    restart: always\n\n  db-notes:\n    image: \"mysql/mysql-server:5.7\"\n    container_name: db-notes\n    command: [ \"mysqld\", \"--character-set-server=utf8mb4\", \n              \"--collation-server=utf8mb4_unicode_ci\",\n              \"--bind-address=0.0.0.0\" ]\n    expose:\n      - \"3306\"\n    networks:\n      - frontnet\n    volumes:\n      - db-notes-data:/var/lib/mysql\n      - ../frontnet/my.cnf:/etc/my.cnf\n    environment:\n      MYSQL_RANDOM_ROOT_PASSWORD: \"true\"\n      MYSQL_USER: notes\n      MYSQL_PASSWORD: notes12345\n      MYSQL_DATABASE: notes\n    restart: always\n\n  notes:\n    build: ../notes\n    container_name: notes\n    restart: always\n    depends_on:\n      - db-notes\n    networks:\n      - frontnet\n    ports:\n      - \"3000:3000\"\n    restart: always\n\nnetworks:\n  frontnet:\n    driver: bridge\n  authnet:\n    driver: bridge\n\nvolumes: \n  db-userauth-data: \n  db-notes-data:\n```", "```js\n$ docker volume ls \nDRIVER              VOLUME NAME \n... \nlocal               compose_db-notes-data \nlocal               compose_db-userauth-data \n...\n\n```", "```js\n$ docker volume inspect compose_db-notes-data\n$ docker volume inspect compose_db-userauth-data  \n```", "```js\ndb-auth: \n  .. \n  volumes: \n    # - db-userauth-data:/var/lib/mysql \n    - ../userauth-data:/var/lib/mysql \n\ndb-notes: \n  .. \n  volumes: \n    # - db-notes-data:/var/lib/mysql \n    - ../notes-data:/var/lib/mysql \n```", "```js\n$ docker stop db-notes userauth db-auth notesapp\ndb-notes\nuserauth\ndb-auth\nnotesapp\n$ docker rm db-notes userauth db-auth notesapp\ndb-notes\nuserauth\ndb-auth\nnotesapp  \n```", "```js\n$ docker-compose build\nBuilding db-auth\n.. lots of output\n$ docker-compose up\nCreating db-auth\nRecreating compose_db-notes_1\nRecreating compose_userauth_1\nRecreating compose_notesapp_1\nAttaching to db-auth, db-notes, userauth, notesapp \n```", "```js\n$ docker exec -it userauth bash\nroot@9972adbbdbb3:/userauth# PORT=3333 node users-add.js \nCreated { id: 2,\n username: 'me', password: 'w0rd', provider: 'local',\n familyName: 'Einarrsdottir', givenName: 'Ashildr', middleName: '',\n emails: '[]', photos: '[]',\n updatedAt: '2018-02-07T02:24:04.257Z', createdAt: '2018-02-07T02:24:04.257Z' }\nroot@9972adbbdbb3:/userauth# \n```", "```js\n^CGracefully stopping... (press Ctrl+C again to force) \nStopping db-userauth ... done \nStopping userauth    ... done \nStopping db-notes    ... done \nStopping notes       ... done\n\n```", "```js\n$ docker-machine create --driver digitalocean --digitalocean-size 2gb \\\n --digitalocean-access-token TOKEN-FROM-PROVIDER \\\n sandbox\nRunning pre-create checks...\nCreating machine...\n(sandbox) Creating SSH key...\n(sandbox) Creating Digital Ocean droplet...\n(sandbox) Waiting for IP address to be assigned to the Droplet...\nWaiting for machine to be running, this may take a few minutes...\nDetecting operating system of created instance...\nWaiting for SSH to be available...\nDetecting the provisioner...\nProvisioning with ubuntu(systemd)...\nInstalling Docker...\nCopying certs to the local machine directory...\nCopying certs to the remote machine...\nSetting Docker configuration on the remote daemon...\nChecking connection to Docker...\nDocker is up and running!\nTo see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env sandbox\n```", "```js\n$ docker-machine env sandbox\nexport DOCKER_TLS_VERIFY=\"1\"\nexport DOCKER_HOST=\"tcp://45.55.37.74:2376\"\nexport DOCKER_CERT_PATH=\"/home/david/.docker/machine/machines/sandbox\"\nexport DOCKER_MACHINE_NAME=\"sandbox\"\n# Run this command to configure your shell: \n# eval $(docker-machine env sandbox)\n```", "```js\n$ eval $(docker-machine env sandbox) \n$ docker-machine ls \nNAME      ACTIVE   DRIVER         STATE     URL                      SWARM   DOCKER        ERRORS \nsandbox   *        digitalocean   Running   tcp://45.55.37.74:2376           v18.01.0-ce    \n\n```", "```js\n$ docker run hello-world \nUnable to find image 'hello-world:latest' locally \nlatest: Pulling from library/hello-world \nca4f61b1923c: Pull complete  \nDigest: sha256:66ef312bbac49c39a89aa9bcc3cb4f3c9e7de3788c944158df3ee0176d32b751 \nStatus: Downloaded newer image for hello-world:latest \n ... $ docker images \nREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE \nhello-world         latest              f2a91732366c        2 months ago        1.85kB\n\n```", "```js\n$ docker-compose build\ndb-userauth uses an image, skipping\ndb-notes uses an image, skipping\nBuilding notes\nStep 1/22 : FROM node:9.5\n9.5: Pulling from library/node\nf49cf87b52c1: Pull complete\n7b491c575b06: Pull complete\nb313b08bab3b: Pull complete\n51d6678c3f0e: Pull complete\n...\n```", "```js\n$ docker-compose up \nCreating notes ... done\nRecreating db-userauth ... done\nRecreating db-notes ... done\nCreating notes ... \nAttaching to db-userauth, db-notes, userauth, notes\n```", "```js\n - ../authnet/my.cnf:/etc/my.cnf\n...\n - ../frontnet/my.cnf:/etc/my.cnf\n```", "```js\n ...\n  db-userauth:\n    build: ../authnet\n    container_name: db-userauth\n    networks:\n      - authnet\n    volumes:\n      - db-userauth-data:/var/lib/mysql\n    restart: always\n  ...\n db-notes:\n    build: ../frontnet\n    container_name: db-notes\n    networks:\n      - frontnet\n    volumes:\n      - db-notes-data:/var/lib/mysql\n    restart: always\n```", "```js\nFROM mysql/mysql-server:5.7\nEXPOSE 3306\nCOPY my.cnf /etc/\nENV MYSQL_RANDOM_ROOT_PASSWORD=\"true\"\nENV MYSQL_USER=userauth\nENV MYSQL_PASSWORD=userauth\nENV MYSQL_DATABASE=userauth\nCMD [ \"mysqld\", \"--character-set-server=utf8mb4\", \\\n  \"--collation-server=utf8mb4_unicode_ci\", \"--bind-address=0.0.0.0\" ]\n```", "```js\nFROM mysql/mysql-server:5.7\nEXPOSE 3306\nCOPY my.cnf /etc/\nENV MYSQL_RANDOM_ROOT_PASSWORD=\"true\"\nENV MYSQL_USER=notes\nENV MYSQL_PASSWORD=notes12345\nENV MYSQL_DATABASE=notes\nCMD [ \"mysqld\", \"--character-set-server=utf8mb4\", \\\n  \"--collation-server=utf8mb4_unicode_ci\", \"--bind-address=0.0.0.0\" ]\n```", "```js\n$ docker-compose build\n... much output\n$ docker-compose up --force-recreate\n... much output\n```", "```js\n$ docker exec -it userauth bash\nroot@931dd2a267b4:/userauth# PORT=3333 node users-list.js \nList [ { id: 'me', username: 'me', provider: 'local',\n familyName: 'Einarrsdottir', givenName: 'Ashildr', middleName: '',\n emails: '[]', photos: '[]' } ] \n```", "```js\n$ docker-machine ip sandbox\n45.55.37.74\n```", "```js\n$ docker volume ls\nDRIVER VOLUME NAME\nlocal compose_db-notes-data\nlocal compose_db-userauth-data\n```", "```js\n$ docker volume inspect compose_db-notes-data\n[\n {\n \"CreatedAt\": \"2018-02-07T06:30:06Z\",\n \"Driver\": \"local\",\n \"Labels\": {\n \"com.docker.compose.project\": \"compose\",\n \"com.docker.compose.volume\": \"db-notes-data\"\n },\n \"Mountpoint\": \"/var/lib/docker/volumes/compose_db-notes-\n data/_data\",\n \"Name\": \"compose_db-notes-data\",\n \"Options\": {},\n \"Scope\": \"local\"\n }\n]\n```", "```js\n$ docker-machine ssh sandbox\nWelcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-112-generic x86_64)\n\n * Documentation: https://help.ubuntu.com\n * Management: https://landscape.canonical.com\n * Support: https://ubuntu.com/advantage\n\n Get cloud support with Ubuntu Advantage Cloud Guest:\n http://www.ubuntu.com/business/services/cloud\n\n4 packages can be updated.\n0 updates are security updates.\n\nLast login: Wed Feb 7 04:00:29 2018 from 108.213.68.139\nroot@sandbox:~#\n```", "```js\nroot@sandbox:~# ls /var/lib/docker/volumes/compose_db-notes-data/_data \nauto.cnf         client-key.pem  ib_logfile1  mysql.sock.lock     public_key.pem \nca-key.pem       ib_buffer_pool  ibtmp1       notes               server-cert.pem \nca.pem           ibdata1         mysql        performance_schema  server-key.pem \nclient-cert.pem  ib_logfile0     mysql.sock   private_key.pem     sys\n\n```", "```js\n$ docker-compose stop\nStopping notesapp ... done\nStopping userauth ... done\nStopping db-notes ... done\nStopping db-auth ... done\n```", "```js\n$ docker-machine stop sandbox\nStopping \"sandbox\"...\nMachine \"sandbox\" was stopped.\n```", "```js\n$ docker-machine rm sandbox\nAbout to remove sandbox\nAre you sure? (y/n): y\nSuccessfully removed sandbox  \n```"]