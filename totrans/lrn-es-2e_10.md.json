["```js\ndocument.cookie = \"myFirstCookie=good;\"\ndocument.cookie = \"mySecondCookie=great;\"\nconsole.log(document.cookie);\n```", "```js\ndocument.cookie = \"myFirstCookie=good;\"\ndocument.cookie = \"mySecondCookie=great;\"\nconsole.log(document.cookie);\ndocument.cookie = \"mySecondCookie=; expires=Thu, 01 Jan 1970 00:00:00 GMT\";\nconsole.log(document.cookie);\n```", "```js\ndocument.cookie = \"awesomecookie=yes;\";\ndocument.cookie = \"ilovecookies=sure;\";\ndocument.cookie = \"great=yes\";\n\nfunction getCookie(name) {\n    const cookies = document.cookie.split(';');\n    for(let i=0;i < cookies.length;i++) {\n        if(cookies[i].trim().indexOf(name) === 0) {\n            return cookies[i].split('=')[1];\n        }\n    }\n    return null;\n}\n\nconsole.log(getCookie(\"ilovecookies\"));\nconsole.log(getCookie(\"doesnotexist\"));\n```", "```js\nsure\nnull\n```", "```js\nlocalStorage.setItem('myKey', 'awesome value');\nconsole.log('entry added');\n```", "```js\nconst now = performance.now();\n\nfor(let i=0;i<1000;i++) {\n    localStorage.setItem(`myKey${i}`, `myValue${i}`);\n}\n\nconst then = performance.now();\nconsole.log('Done')\nconsole.log(`Time taken: ${(then - now)/1000} milliseconds per operation`);\n```", "```js\nconst item = localStorage.getItem('myKey');\nconsole.log(item); // my awesome value\n```", "```js\nlocalStorage.removeItem('myKey');\nconsole.log(localStorage.getItem('myKey')); // null\n```", "```js\nlocalStorage.clear();\nconsole.log(localStorage); // blank object {}\n```", "```js\n    localStorage.setItem('getItem', 'whohoo we are not overwriting getItem'); // #1\n    localStorage.getItem('getItem'); // whohoo we are not overwriting getItem\n\n    localStorage.getItem = 'oh no I'm screwed'; // #2 \n    localStorage.getItem('getItem'); // Error! getItem is not a function.\n    ```", "```js\n    localStorage.setItem('length', 100); // Stores \"1\" as string in localStorage\n    localStorage.length = 100; // Ignored by localStorage\n    ```", "```js\nsessionStorage.setItem('my key', 'awesome value');\nconsole.log('Added to session storage');\n```", "```js\nconst item = sessionStorage.getItem('myKey');\nconsole.log(item); // my awesome value\n```", "```js\nsessionStorage.removeItem('myKey');\nconsole.log(sessionStorage.getItem('myKey')); // null\n```", "```js\nsessionStorage.clear();\nconsole.log(sessionStorage); // blank object {}\n```", "```js\nwindow.addEventListener('storage', e => { \n  console.log(e);\n});\nlocalStorage.setItem('myKey', 'myValue'); // note that this line was run in another tab\n```", "```js\nconst open = window.indexedDB.open(\"myDB\", 1);\n```", "```js\nconst open = window.indexedDB.open(\"types\", 1);\n\n// Let us create a schema for the database\nopen.onupgradeneeded = () => {\n    const dbHandler = open.result;\n    const storeHandler = dbHandler.createObjectStore(\"frontend\");\n};\n```", "```js\nconst open = window.indexedDB.open(\"types\", 1);\n\nopen.onupgradeneeded = () => {\n    const dbHandler = open.result;\n    const storeHandler = dbHandler.createObjectStore(\"frontend\");\n    storeHandler.add({\n        latestVersion: 5,\n        cool: \"yes\",\n        easy2use: \"yes\"\n    }, \"HTML5\");\n};\n```", "```js\nconst open = window.indexedDB.open(\"types\", 1); // same database as above\nopen.onsuccess = () => {\n    const dbHandler = open.result;\n    const transaction = dbHandler.transaction(['frontend'], 'readonly');\n    const storeHandler = transaction.objectStore('frontend');\n    const req = storeHandler.get(\"HTML5\");\n    req.onsuccess = e => {\n        console.log(e.target.result);\n    }\n};\n```", "```js\n{latestVersion: 5, cool: \"yes\", easy2use: \"yes\"}\n```", "```js\nconst open = window.indexedDB.open(\"types\", 1); // same database as above\nopen.onsuccess = () => {\n    const dbHandler = open.result;\n    const transaction = dbHandler.transaction(['frontend'], 'readwrite');\n    const storeHandler = transaction.objectStore('frontend');\n    storeHandler.delete(\"HTML5\");\n};\n```"]