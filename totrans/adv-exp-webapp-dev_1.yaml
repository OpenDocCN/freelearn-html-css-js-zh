- en: Chapter 1. Foundations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 基础
- en: '*Advanced Express Web Application Development* will guide you through the process
    of building a nontrivial, single-page application using **Express**.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*高级Express Web应用程序开发* 将指导您通过使用 **Express** 构建一个非平凡的单页应用程序的过程。'
- en: Express is a fast, unopinionated, minimalist, and flexible web application framework
    for **Node.js** written by TJ. Holowaychuk. It was inspired by **Sinatra** , a
    web framework for Ruby. Express provides a robust set of features for building
    single, multi-page, and hybrid web applications and has quickly become the most
    popular web development framework for node. Express is built on top of an extensible
    HTTP server framework—also developed by TJ. Holowaychuk—called **Connect**. Connect
    provides a set of high performance plugins known as middleware. Connect includes
    over 20 commonly used middleware, including a logger, session support, cookie
    parser, and more.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Express 是由 TJ. Holowaychuk 编写的快速、无偏见、极简和灵活的 Web 应用程序框架，适用于 **Node.js**。它受到了
    Ruby 的 Web 框架 **Sinatra** 的启发。Express 提供了一套强大的功能，用于构建单页、多页和混合 Web 应用程序，并迅速成为 node
    最受欢迎的 Web 开发框架。Express 是建立在可扩展的 HTTP 服务器框架之上，该框架也由 TJ. Holowaychuk 开发，称为 **Connect**。Connect
    提供了一组高性能插件，称为中间件。Connect 包含超过 20 个常用中间件，包括日志记录器、会话支持、cookie 解析器等。
- en: This book will guide you through the process of building a single-page application
    called Vision; a dashboard for software development projects that integrates with
    GitHub to give you a single-screen snapshot of your software development projects
    issues and commits. This project will allow us to demonstrate the advanced features
    Express has to offer and will give us the opportunity to explore the kind of issues
    encountered in a commercial development and production deployment of a node/Express
    application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将指导您构建一个名为 Vision 的单页应用程序的过程；这是一个软件开发项目的仪表板，与 GitHub 集成，为您提供软件项目问题和提交的单屏快照。此项目将使我们能够展示
    Express 提供的高级功能，并为我们提供探索在商业开发和 node/Express 应用程序的生产部署中遇到的问题的机会。
- en: Feature set
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能集
- en: We will now begin the process of building a Vision application. We will start
    from scratch with a test-first approach. Along the way, we will explore some best
    practices and offer tips for when developing web applications with node and Express.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将开始构建 Vision 应用程序的过程。我们将从零开始，采用先测试后开发的方法。在这个过程中，我们将探讨一些最佳实践，并提供在用 node 和
    Express 开发 Web 应用程序时的技巧。
- en: 'The Vision application will include the following features:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Vision 应用程序将包括以下功能：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot is of our Vision application; it contains a list of
    projects, repositories, commits, and issues. The upper-right corner has a login
    link that we will use for authentication:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是我们的 Vision 应用程序；它包含项目列表、仓库、提交和问题。右上角有一个登录链接，我们将用它进行身份验证：
- en: '![Feature set](img/2494OS_01_1.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![功能集](img/2494OS_01_1.jpg)'
- en: Installation
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: 'If you do not have node installed, visit: [http://nodejs.org/download/](http://nodejs.org/download/).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未安装 node，请访问：[http://nodejs.org/download/](http://nodejs.org/download/)。
- en: 'There is also an installation guide on the node GitHub repository wiki if you
    prefer not to or cannot use an installer: [https://github.com/joyent/node/wiki/Installation](https://github.com/joyent/node/wiki/Installation).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不希望或无法使用安装程序，可以在 node GitHub 仓库的 wiki 上找到安装指南：[https://github.com/joyent/node/wiki/Installation](https://github.com/joyent/node/wiki/Installation)。
- en: 'Let''s install Express globally:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们全局安装 Express：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Download the source code for this book here: [https://github.com/AndrewKeig/advanced-express-application-development](https://github.com/AndrewKeig/advanced-express-application-development.).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处下载本书的源代码：[https://github.com/AndrewKeig/advanced-express-application-development](https://github.com/AndrewKeig/advanced-express-application-development)。
- en: 'If you have downloaded the source code, install its dependencies by running
    this command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已下载源代码，可以通过运行以下命令安装其依赖项：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: package.json
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: package.json
- en: 'Let''s start by creating a root project folder called `vision` and add a `package.json`
    file to it: `./package.json`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先创建一个名为 `vision` 的根项目文件夹，并向其中添加一个 `package.json` 文件：`./package.json`：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你购买的所有 Packt 书籍的账户中下载所有示例代码文件，账户地址为 [http://www.packtpub.com](http://www.packtpub.com)。如果你在其他地方购买了这本书，你可以访问
    [http://www.packtpub.com/support](http://www.packtpub.com/support) 并注册以将文件直接通过电子邮件发送给你。
- en: Testing Express with Mocha and SuperTest
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Mocha 和 SuperTest 测试 Express
- en: 'Now that we have Express installed and our `package.json` file in place, we
    can begin to drive out our application with a test-first approach. We will now
    install two modules to assist us: `mocha` and `supertest`.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 Express 并设置了 `package.json` 文件，我们可以开始使用测试优先的方法来驱动我们的应用程序。我们现在将安装两个模块来帮助我们：`mocha`
    和 `supertest`。
- en: 'Mocha is a testing framework for node; it''s flexible, has good async support,
    and allows you to run tests in both a TDD and BDD style. It can also be used on
    both the client and server side. Let''s install Mocha with the following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Mocha 是一个针对 node 的测试框架；它灵活，具有良好的异步支持，并允许你以 TDD 和 BDD 风格运行测试。它也可以在客户端和服务器端使用。让我们使用以下命令安装
    Mocha：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'SuperTest is an integration testing framework that will allow us to easily
    write tests against a RESTful HTTP server. Let''s install SuperTest:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: SuperTest 是一个集成测试框架，它将使我们能够轻松地编写针对 RESTful HTTP 服务器的测试。让我们安装 SuperTest：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Feature: Heartbeat'
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能：心跳
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's add a test to `./test/heartbeat.js` for our `Heartbeat` feature. This
    resource will get a status from the route `/heartbeat` and return a `200 Ok` status
    code. Let's write our first integration test using Mocha and SuperTest. First
    off, create a folder named `/test` inside your `vision` folder.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `./test/heartbeat.js` 中为我们的 `Heartbeat` 功能添加一个测试。这个资源将从 `/heartbeat` 路由获取状态并返回
    `200 Ok` 状态码。让我们使用 Mocha 和 SuperTest 编写我们的第一个集成测试。首先，在你的 `vision` 文件夹内创建一个名为 `/test`
    的文件夹。
- en: Our test describes `heartbeat`; it expects the response to have a `JSON` content
    type and a status code equal to `200 Ok`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的测试描述了 `heartbeat`；它期望响应具有 `JSON` 内容类型和状态码等于 `200 Ok`。
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s implement the `Heartbeat` feature; we start by creating a simple Express
    server, `./lib/express/index.js`. We include the `express` and `http` modules
    and create an Express application. We then add an application setting via `app.set`
    called `port` and set it to `3000`. We define a `/heartbeat` route via `app.get`
    withwhich we pass a request handler, `function`, that takes two parameters: `req`
    (request) and `res` (response). We use the response object to return a JSON response.
    We create an HTTP server with `http.createServer` by passing our Express application
    to it; we listen on port `3000` as defined in our application setting called `port`.
    We then export the application with `module.exports`; exporting the application
    allows us to test it.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现 `Heartbeat` 功能；我们首先创建一个简单的 Express 服务器，`./lib/express/index.js`。我们包含 `express`
    和 `http` 模块并创建一个 Express 应用程序。然后我们通过 `app.set` 添加一个名为 `port` 的应用程序设置并将其设置为 `3000`。我们通过
    `app.get` 定义一个 `/heartbeat` 路由，并传递一个请求处理器 `function`，该处理器接受两个参数：`req`（请求）和 `res`（响应）。我们使用响应对象返回一个
    JSON 响应。我们通过将我们的 Express 应用程序传递给 `http.createServer` 创建一个 HTTP 服务器；我们在名为 `port`
    的应用程序设置中监听端口 `3000`。然后我们通过 `module.exports` 导出应用程序；导出应用程序允许我们对其进行测试。
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We now create `./app.js` in the root of our project and export the `express`
    module:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在项目的根目录下创建 `./app.js` 并导出 `express` 模块：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To run our test, execute the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行我们的测试，执行以下命令：
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should then receive the response:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该收到以下响应：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If successful, try running the application by executing this command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，尝试通过执行以下命令来运行应用程序：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'With the app running, run the following `curl` command in a new terminal and
    you can see our `heartbeat` JSON response return a `200 Ok` status code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序运行后，在新的终端中运行以下 `curl` 命令，你可以看到我们的 `heartbeat` JSON 响应返回 `200 Ok` 状态码：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Continuous testing with Mocha
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Mocha 进行持续测试
- en: 'One of the great things about working with a dynamic language and one of the
    things that has drawn me to node is the ability to easily do **Test-Driven Development**
    and continuous testing. Simply run Mocha with the `-w` watch switch and Mocha
    will respond when changes to our codebase are made, and will automatically rerun
    the tests:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与动态语言一起工作的一个优点之一，也是吸引我使用 node 的原因之一，是能够轻松地进行 **测试驱动开发** 和持续测试。只需运行带有 `-w` 监视开关的
    Mocha，当我们的代码库发生变化时，Mocha 将做出响应，并自动重新运行测试：
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Code coverage with Mocha and JSCoverage
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Mocha 和 JSCoverage 进行代码覆盖率测试
- en: Mocha is able to generate a code coverage report with a little help from **JSCoverage**
    . Install JSCoverage for your environment from [http://siliconforks.com/jscoverage/](http://siliconforks.com/jscoverage/).
    JSCoverage will parse source code and generate an instrumented version; this enables
    mocha to execute this generated code and create a report. We will need to update
    `./app.js`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Mocha 能够在 **JSCoverage** 的帮助下生成代码覆盖率报告。从 [http://siliconforks.com/jscoverage/](http://siliconforks.com/jscoverage/)
    为您的环境安装 JSCoverage。JSCoverage 将解析源代码并生成一个经过仪器化的版本；这使得 mocha 能够执行此生成的代码并创建报告。我们需要更新
    `./app.js`。
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'JSCoverage takes as arguments an input directory, and an output directory:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: JSCoverage 将输入目录和输出目录作为参数：
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Depending on your version of JSCoverage, you may need to add the `–no-highlight`
    switch:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的 JSCoverage 版本，您可能需要添加 `–no-highlight` 开关：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following command will generate the coverage report, as shown in the following
    screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将生成覆盖率报告，如下截图所示：
- en: '[PRE18]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Code coverage with Mocha and JSCoverage](img/2494OS_01_2.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Mocha 和 JSCoverage 的代码覆盖率](img/2494OS_01_2.jpg)'
- en: Configuring Express with Nconf
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Nconf 配置 Express
- en: '**Nconf** is a configuration tool that we will use to create hierarchical/environment
    configuration files for our application. Let''s install Nconf:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nconf** 是一个配置工具，我们将使用它来为我们的应用程序创建分层/环境配置文件。让我们安装 Nconf：'
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The first thing we will do is to move the following hardcoded port number from
    our Express application into our configuration:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的是将以下硬编码的端口号从我们的 Express 应用程序移动到我们的配置中：
- en: '[PRE20]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s create the module `./lib/configuration/index.js`, which will allow us
    to to read configuration data from JSON files. We import the `nconf` module and
    define a constructor function, `Config`. We then load a configuration file based
    on the current environment and load the default configuration that holds non-environmental
    configuration data. We also define a function `get(key)`, which accepts a key
    and returns a value. We will use this function to read configuration data:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建模块 `./lib/configuration/index.js`，这将允许我们从 JSON 文件中读取配置数据。我们导入 `nconf` 模块并定义一个构造函数，`Config`。然后根据当前环境加载配置文件，并加载包含非环境配置数据的默认配置。我们还定义了一个函数
    `get(key)`，它接受一个键并返回一个值。我们将使用此函数来读取配置数据：
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s write some configuration for our application. Add the following default
    configuration to `./config/default.json`; this will be shared amongst all environments:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的应用程序编写一些配置。将以下默认配置添加到 `./config/default.json`；这将在所有环境中共享：
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now add the following configuration to the development, test, and coverage
    config files: `./config/development.json`, `./config/test.json`, and `./config/coverage.json`.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将以下配置添加到开发、测试和覆盖率配置文件中：`./config/development.json`、`./config/test.json` 和
    `./config/coverage.json`。
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s change our Express server `./lib/express/index.js` so that it reads
    `express:port` from configuration:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更改我们的 Express 服务器 `./lib/express/index.js`，使其从配置中读取 `express:port`：
- en: '[PRE24]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Extracting routes
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提取路由
- en: Express supports multiple options for application structure. Extracting elements
    of an Express application into separate files is one option; a good candidate
    for this is routes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Express 支持多种应用程序结构选项。将 Express 应用程序中的元素提取到单独的文件中是一种选择；对于此选项，路由是一个很好的候选者。
- en: 'Let''s extract our route heartbeat into `./lib/routes/heartbeat.js`; the following
    listing simply exports the route as a function called `index`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将路由心跳提取到 `./lib/routes/heartbeat.js`；以下列表只是将路由作为一个名为 `index` 的函数导出：
- en: '[PRE25]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let''s make a change to our Express server and remove the anonymous function
    we pass to `app.get` for our route and replace it with a call to the function
    in the following listing. We import the route `heartbeat` and pass in a callback
    function, `heartbeat.index`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对 Express 服务器进行修改，并移除我们传递给 `app.get` 的匿名函数，并用以下列表中的函数调用替换它。我们导入路由 `heartbeat`
    并传递一个回调函数，`heartbeat.index`：
- en: '[PRE26]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 404 handling middleware
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 404 处理中间件
- en: 'In order to handle a `404 Not Found` response, let''s add a 404 not found middleware.
    Let''s write a test, `./test/heartbeat.js`; the content type returned should be
    JSON and the status code expected should be `404 Not Found`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理 `404 Not Found` 响应，让我们添加一个 404 未找到中间件。让我们编写一个测试，`./test/heartbeat.js`；返回的内容类型应该是
    JSON，期望的状态码应该是 `404 Not Found`：
- en: '[PRE27]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, add the following middleware to `./lib/middleware/notFound.js`. Here we
    export a function called `index` and call `res.json`, which returns a 404 status
    code and the message `Not Found`. The next parameter is not called as our 404
    middleware ends the request by returning a response. Calling next would call the
    next middleware in our Express stack; we do not have any more middleware due to
    this, it''s customary to add error middleware and 404 middleware as the last middleware
    in your server:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下中间件添加到`./lib/middleware/notFound.js`。在这里，我们导出一个名为`index`的函数并调用`res.json`，它返回404状态码和消息`Not
    Found`。下一个参数没有调用，因为我们的404中间件通过返回响应来结束请求；调用next将调用我们的Express堆栈中的下一个中间件；由于这个原因，我们没有更多的中间件，通常将错误中间件和404中间件作为服务器中的最后一个中间件添加：
- en: '[PRE28]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now add the 404 not found middleware to `./lib/express/index.js`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '现在将404未找到中间件添加到`./lib/express/index.js`:'
- en: '[PRE29]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Logging middleware
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志中间件
- en: 'Express comes with a logger middleware via Connect; it''s very useful for debugging
    an Express application. Let''s add it to our Express server `./lib/express/index.js`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 'Express通过Connect提供了一个日志中间件；这对于调试Express应用程序非常有用。让我们将其添加到我们的Express服务器`./lib/express/index.js`:'
- en: '[PRE30]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `immediate` option will write a log line on request instead of on response.
    The `dev` option provides concise output colored by the response status. The logger
    middleware is placed high in the Express stack in order to log all requests.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`immediate`选项将在请求上而不是在响应上写入日志行。`dev`选项提供按响应状态着色的简洁输出。日志中间件被放置在Express堆栈的较高位置，以便记录所有请求。'
- en: Logging with Winston
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Winston进行日志记录
- en: 'We will now add logging to our application using **Winston**; let''s install
    Winston:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用**Winston**对我们的应用程序添加日志记录；让我们安装Winston：
- en: '[PRE31]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The 404 middleware will need to log 404 not found, so let's create a simple
    logger module, `./lib/logger/index.js`; the details of our logger will be configured
    with Nconf. We import Winston and the configuration modules. We define our `Logger`
    function, which constructs and returns a file logger—`winston.transports.File`—that
    we configure using values from our `config`. We default the loggers maximum size
    to 1 MB, with a maximum of three rotating files. We instantiate the `Logger` function,
    returning it as a singleton.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 404中间件需要记录404未找到，因此让我们创建一个简单的日志模块，`./lib/logger/index.js`；我们的日志器配置将与Nconf一起进行。我们导入Winston和配置模块。我们定义我们的`Logger`函数，它构建并返回一个文件日志器—`winston.transports.File`—我们使用`config`中的值进行配置。我们将日志器的最大大小默认设置为1
    MB，最多三个旋转文件。我们实例化`Logger`函数，将其作为单例返回。
- en: '[PRE32]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let''s add the `Logger` configuration details to our config files `./config/development.json`
    and `./config/test.json`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们将`Logger`配置细节添加到我们的配置文件`./config/development.json`和`./config/test.json`:'
- en: '[PRE33]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Let''s alter the `./lib/middleware/notFound.js` middleware to log errors. We
    import our `logger` and log an error message via `logger` when a `404 Not Found`
    response is thrown:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改`./lib/middleware/notFound.js`中间件以记录错误。我们导入我们的`logger`并通过`logger`记录错误信息，当抛出`404
    Not Found`响应时：
- en: '[PRE34]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Task automation with Grunt
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Grunt进行任务自动化
- en: 'Grunt is a task runner and a great way to automate your node projects. Let''s
    add a simple grunt script to our project in order to automate running tests and
    code coverage. Let''s install Grunt and Grunt CLI:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Grunt是一个任务运行器，是自动化Node项目的绝佳方式。让我们向我们的项目添加一个简单的Grunt脚本，以自动化运行测试和代码覆盖率。让我们安装Grunt和Grunt
    CLI：
- en: '[PRE35]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The `grunt-cafe-mocha` is a grunt module for running mocha; this module will
    also allow us to automate code coverage reports:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`grunt-cafe-mocha`是一个用于运行mocha的Grunt模块；此模块还将允许我们自动化代码覆盖率报告：'
- en: '[PRE36]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `grunt-jscoverage` simply generates an instrumented version of our source
    code and writes it to `./lib-cov`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`grunt-jscoverage`简单地生成我们源代码的仪器版本并将其写入`./lib-cov`:'
- en: '[PRE37]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The `grunt-env` allows you to set the current node environment, `NODE_ENV`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`grunt-env`允许您设置当前的Node环境，`NODE_ENV`:'
- en: '[PRE38]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Let''s create a grunt file `./gruntfile.js`. We load the `grunt` modules we
    just installed, and `grunt.initConfig` contains a configuration for each grunt
    module:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个Grunt文件`./gruntfile.js`。我们加载我们刚刚安装的`grunt`模块，`grunt.initConfig`包含每个Grunt模块的配置：
- en: '[PRE39]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The configuration for `cafemocha` contains two sections; one for running our
    tests and one for generating a code coverage report. In order to run our tests
    from grunt, execute the following command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`cafemocha`的配置包含两个部分；一个用于运行我们的测试，另一个用于生成代码覆盖率报告。要从Grunt运行我们的测试，请执行以下命令：'
- en: '[PRE40]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The following line registers a task that sets the environment using `env` and
    runs both the `jscoverage` and `cafemocha:coverage` tasks in sequence:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行注册了一个任务，该任务使用`env`设置环境并按顺序运行`jscoverage`和`cafemocha:coverage`任务：
- en: '[PRE41]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In order to run our coverage from grunt, execute the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从 grunt 运行我们的覆盖率测试，请执行以下命令：
- en: '[PRE42]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This command will generate the coverage report as described earlier.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将生成之前描述的覆盖率报告。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have put in place a fairly solid framework for developing our Vision project;
    we have implemented a simple feature, heartbeat, which when visited, simply informs
    us whether our Express server is up and running. We have automated various development
    tasks, such as running tests and creating code coverage reports. We also have
    in place some logging using Winston. In the next chapter, we will implement a
    web API.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为我们的 Vision 项目建立了一个相当稳固的框架；我们实现了一个简单的功能，心跳，当访问时，它只会告诉我们我们的 Express 服务器是否正在运行。我们还自动化了各种开发任务，例如运行测试和创建代码覆盖率报告。我们还使用了
    Winston 进行了一些日志记录。在下一章中，我们将实现一个 Web API。
