- en: Chapter 4. Tips and Tricks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will learn how to use some features of Sencha Architect.
    In other words, we will learn short recipes of how to do a few tasks that can
    help us a lot when developing a Sencha Architect project, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Using third-party plugins (non-native plugins)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding HTML code to index HTML pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing an existing project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom components for reuse (team project)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multilanguage apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sencha Architect + Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we start, we will save the examples we are going to create for this chapter
    inside the `sencha-architect/chapter04` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting and importing an existing project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's say you are working on this very cool project and want to share it with
    someone. You do not need to zip the entire project folder and send it. Sencha
    Architect has a better way of doing it.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let's say we want to send the project we developed in the first
    chapter (`extBooks`) to a friend by email. So with the project opened with Sencha
    Architect, we will choose **File** | **Archive Project** (*Step 1*). Sencha Architect
    will ask where you want to save the project; let's choose the `chapter04` folder
    we created and we will save the file as `ExtBooksChp02` (*Step 2*). Sencha Architect
    will save the file with the extension `.xda` (*Step 3*).
  prefs: []
  type: TYPE_NORMAL
- en: 'This file contains all the files from the `extBooks` project, including the
    `php` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting and importing an existing project](img/9819OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s consider we emailed the file to a friend and this friend wants
    to open the project using Sencha Architect as well. So our friend needs to open
    Sencha Architect, go to **File** | **Import Archive** (*Step 4*) and choose the
    `.xda` file we sent (*Step 5*). The project will be opened, and if this friend
    wants to save this project to run it locally, he/she just needs to click on **Save**,
    and give it a name—for example: **chap02** (*Step 6*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting and importing an existing project](img/9819OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And if we go to the project directory we will see the complete project as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting and importing an existing project](img/9819OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `.xda` file is very compact. This is a great way of sharing Sencha Project
    files. For source code control, it is recommended to put all the project files
    under your source code control system (`.git`, `.svn`, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Using Sencha Architect with Eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sencha Architect is a great IDE, and even if it is specific for Sencha frameworks,
    it does not mean that you cannot use it with your favorite IDE, such as Eclipse,
    Netbeans, Visual Studio, Aptana, and others. In this topic we will demonstrate
    how to use Sencha Architect with Eclipse, and you can use the same logic for any
    other IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we are working on a Java project, and the frontend will be developed
    with Ext JS, and therefore, we will use Sencha Architect do to all the Ext JS
    code for us. If we take a look at the structure of a Java Web project created
    with Eclipse, we will have a structure as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Sencha Architect with Eclipse](img/9819OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside **WebContent**, we will add our JSS, CSS, and HTML (or JSP) files, so
    the Ext JS code must be inside the `WebContent` folder. How can we save a Sencha
    Architect project so that we can have exactly what we need? When we save the Sencha
    Architect project, we need to select the Eclipse project as the root folder (`Save
    Path:`) and the `Project Name:` will be `WebContent` as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Sencha Architect with Eclipse](img/9819OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This way all the Ext JS code will be located inside the `WebContent`, and we
    can use Eclipse as the code editor for the Java code and Sencha Architect for
    the Ext JS code. The project will look as shown in the following screenshot, which
    is exactly what is expected from a Java web project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Sencha Architect with Eclipse](img/9819OS_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a custom component for reuse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You created a really cool component using Sencha Architect, and now you want
    to share it with the world so other developers can also use this component in
    their projects. Is that possible? The answer is yes!
  prefs: []
  type: TYPE_NORMAL
- en: You can also use this to share components with your development team or even
    to reuse the same components in other Senha Architect projects. As Ext JS and
    Sencha Touch share part of the API, especially the data package, you can also
    use this feature to import models and stores from an Ext JS project to a Sencha
    Touch project and vice versa!
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, you need to select **Models**, **Stores**, **Views**, or **Controllers**,
    right-click on it, and click on the **Export to File…** option. In the following
    screenshot, we are exporting the **Book** **Model** from the `extBooks` project
    (`chap02`)—*Step 1*. Next, we need to save it—we will name it `BookModel` (*Step
    2*). Once it is saved, Sencha Architect will save it with the `.xdc` extension
    (*Step 3*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a custom component for reuse](img/9819OS_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To import it, we need to go to **Edit** | **Import Component…** and choose
    the `BookModel.xdc` file (*Step 4*). Sencha Architect will save the component
    into the toolbox, so we can give it a `Name` and select a `Category` for it (*Step
    5*). Then we can go to the toolbox and use it as any other component from the
    toolbox (*Step 6*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a custom component for reuse](img/9819OS_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In case you want to reuse a **View** in a future project, you can also use
    the **Save to Toolbox…** option (*Step 7*). It will also ask you which **name**
    and which **category** you want to save the view to (*Step 8*). Then, the **BooksGrid**
    will also be available in the toolbox (*Step 9*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a custom component for reuse](img/9819OS_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And as we already learned in [Chapter 2](ch02.html "Chapter 2. Creating an Ext
    JS App"), *Creating an Ext JS App* and [Chapter 3](ch03.html "Chapter 3. Creating
    a Sencha Touch App"), *Creating a Sencha Touch App*, to use a component from the
    toolbox, we can select the **View**, **Model**, **Store**, or **Controller** from
    the project inspector, and when we double-click on the toolbox component, it will
    be created as a child of the selected item of the project inspector or will be
    created as a **Model**, **Store**, **View**, or **Controller** if we select the
    package.
  prefs: []
  type: TYPE_NORMAL
- en: Adding HTML code to app.html
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we already learned that we cannot edit code in Sencha Architect unless
    it is for a function or template. If we take a look at Sencha Ext JS examples
    ([http://www.sencha.com/products/extjs/examples/](http://www.sencha.com/products/extjs/examples/)),
    we will see that many examples have HTML tags (DIV, P) inside the `index.html`
    of the example. What if we want to create applications like those? Is it possible?
    Again, the answer is yes.
  prefs: []
  type: TYPE_NORMAL
- en: You will not be able to manually edit the `app.html` file to add the HTML code
    that you want. As we saw in [Chapter 2](ch02.html "Chapter 2. Creating an Ext
    JS App"), *Creating an Ext JS App* and [Chapter3](ch03.html "Chapter 3. Creating
    a Sencha Touch App"), *Creating a Sencha Touch App*, if you do change any file
    generated with Sencha Architect, when you open the same project on Sencha Architect,
    it will override all your changes with the original code.
  prefs: []
  type: TYPE_NORMAL
- en: But how can we add HTML code? The answer is by using DOM manipulation using
    Sencha code, also called as Ext Core, available on both Ext JS and Sencha Touch
    frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, when we create a Sencha Architect application (Ext JS or Sencha Touch),
    select the **Application** icon from the project inspector (*Step 1*), go to the
    config panel, locate the **launch** function, and click on the **+** icon (*Step
    2*). Then, a green diamond icon will appear and we can click on the arrow icon
    (*Step 3*) as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding HTML code to app.html](img/9819OS_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The code editor will be opened and we can use Ext Core to manipulate the DOM.
    In this case, we are appending HTML tags to the HTML body:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding HTML code to app.html](img/9819OS_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we run the project, the output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding HTML code to app.html](img/9819OS_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using third-party plugins (non-native plugins)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plugins are a huge help when we want to develop something that is not available
    within the Sencha API. The plugins that are supported natively already come as
    an option in Sencha Architect, but there are a lot of plugins that are shared
    by other developers that we can find on Sencha Forums.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to focus on a particular case here, because we have already seen how
    to add a new property, and for some components, we can easily add the plugins
    or features property, and then add the plugin configuration. But the components
    that have native plugins supported by the API do not allow us to do so, like for
    instance, the grid panel from Ext JS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can only use the plugins and features that are available within Sencha Architect.
    What if we want to use a third-party plugin or feature such as the Filter Plugin?
    It is possible, but we need to use an advanced feature from Sencha Architect,
    which is "creating overrides". A disclaimer about overrides: this has to be avoided.
    Whenever you can use a set method to change a property, use it. Overrides should
    be your last resource and they should be used very carefully, because if you do
    not use them carefully, you can change the behavior of a component and something
    may stop working. But we will demonstrate how to do it in a safe way!'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the **BooksGrid** as an example in this topic. Let''s say we need
    to use the Filter Plugin on it, so we need to create an override first. To do
    it, select the **BooksGrid** from the project inspector, open the code editor,
    and click on the **Create Override** button (*Step 1*). Sencha Architect will
    display a warning (*Step 2*). We can click on **Yes** to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The code editor will open (*Step 3*) the override class so we can enter our
    code. In this case, we will have complete freedom to do whatever we need to on
    this file. So let''s add the `features()` function with the declaration of the
    plugin and also the `initComponent()` function as shown in the following screenshot
    (*Step 4*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One thing that is very important is that we must call the `callParent()` function
    (`callOverriden()` is deprecated already in Ext JS 4.1 and later versions) to
    make sure we will continue to have all the original behavior of the component
    (in this case the `BooksGrid` class). The only thing we want to do is to add a
    new feature to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'And we are done with the override! To go back to the original class we can
    use the navigator as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that `requires` was added to the class `Packt.view.override.BooksGrid`,
    which is the class we just wrote. The next step is to add the plugin on the class
    requires. To do so, we need to select the **BooksGrid**, go to the config panel,
    and add the requires with the name of the plugin (**Ext.ux.grid.FiltersFeature**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some developers like to add the plugin file directly as a JavaScript file on
    `app.html`/`index.html`. Sencha provides the dynamic loading feature so let''s
    take advantage of it and use it! First, we cannot forget to add the `ux` folder
    with the plugin on the project root folder as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to set the application loader. Select the **Application** from
    the project inspector (*Step 5*), then go to the config panel, locate the **Loader
    Config** property, click on the **+** icon (*Step 6*), then click on the arrow
    icon (*Step 7*). The details of the loader will be available on the config panel.
    Locate the **paths** property and click on it (*Step 8*). The code editor will
    be opened with the loader path''s default value, which is **{"Ext": "."}** (*Step
    9*). Do not remove it; simply add the path of the `Ext.ux` namespace which is
    the `ux` folder (*Step 10*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And we are almost done! We need to add the `filterable` option in each column
    we want to allow the user to filter its values (*Step 11*): we can use the config
    panel to add a new property (we need to select the desired column from the project
    inspector first—always remember to do this). And then, we can choose what type
    of property we want to add (*Step 12* and *Step 14*). For example, we can add
    `filterable: true` (*Step 13*) for the `id` column and `filterable:` `{type: ''string''}`
    (*Step 15* and *Step 16*) to the `Name` column as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And the plugin is ready to be used!
  prefs: []
  type: TYPE_NORMAL
- en: Creating multilanguage apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another feature that is very useful is to have is a multilingual application,
    and many developers try to do it within Sencha Architect. The issue is that we
    usually have a JavaScript object with the translations we want to apply to a text
    on the application. For example, let''s say we want to translate the `BooksGrid`;
    first we will need to create a JavaScript file with the desired translations (one
    for each column of the grid):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code contains Portuguese translations. The way we want to use
    it, is applying the value of the translation in a specific column, and the column
    label we need to use is given in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'What happens is that the text property on Sencha Architect only allows you
    to enter a string and you cannot enter an object as the text property value; how
    do we solve this? We have two choices: whenever the user changes the language,
    we can call the `setText()` or `setTitle()` method, passing the new value for
    all the components we have on the application. But this is too much work. Or,
    we can use an override. In our case, as we already have an override from a previous
    topic, we just need to add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: And then the multilingual app is ready to be used.
  prefs: []
  type: TYPE_NORMAL
- en: Creating util and custom classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In most of the projects that you are going to work on, you will probably need
    to create `util` classes with functions you can reuse or properties that you will
    treat as constants. And you can also use them on Sencha Architect. So let's say
    we need to create a function that sums two given values and returns the result.
    This function can be used in several places of your project, and is independent
    from any business logic. So we need to create a class. Sencha Architect provides
    the capability to create stores, models, controllers, and views, but we want to
    create another type of class. We can create an Ext class using the **+** icon
    on the top of the project inspector (*Step 1*).Then, click on **Class**, and select
    a package where you want to create this class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create inside the **Controllers** package. Sencha Architect will list
    the new class under the desired package with the ext icon (*Step 2*). Next, you
    can give a name to your class, an alias, and choose other options, such as **singleton**:
    true (*Step 3*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating util and custom classes](img/9819OS_04_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In classes like this, you can add properties and functions, but you will be
    limited to the fact that all the changes must be made using the config panel.
    It is not a file that you have total control over as an override.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s create the sum function we talked about. We need to go
    to **Functions** and click on the **+** icon (*Step 4*—on the config panel), choose
    a name for our function and click on **Next** (*Step 5*), then enter the parameters
    (*Step 6*), and then an arrow icon will appear (*Step 7*) and if we click on it,
    the code editor will be opened so we can enter our code (*Step 8*). If we need
    to change any configuration, such as the function name or add, edit, or remove
    parameters, we can do it using the config panel (*Step 9*). And as usual, we will
    have the code generated by Sencha Architect (*Step 10*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating util and custom classes](img/9819OS_04_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we would like to use the `sum()` function we can simply call `Packt.controller.Utils.sum(1,2)`
    and the return will be `3`!
  prefs: []
  type: TYPE_NORMAL
- en: An alternative if you really want to have total control on the code is to create
    an `Ext` class, and then create an override. Then it will be as if you were using
    any code editor. But in this case, you will not be able to use the functionalities
    of Sencha Architect.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you try to change the extend class (the default is `Ext.Base`) to `Ext.grid.Panel`
    for example, Sencha Architect will recognize that this class is supported by the
    tool and will ask you if you want to transform (and if positive, it will be as
    if you chose the component from the toolbox). If not, you will have the freedom
    to create each property or function by yourself (and Sencha Architect will not
    list the available properties on the config panel, but you will be able to add
    your own features and plugins as an example):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating util and custom classes](img/9819OS_04_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Working with sub-packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When working with the MVC architecture and Sencha projects, we are already
    working with four packages that help us to organize our application better: `model`,
    `view`, `controller`, and `store`. But when our application starts to grow and
    we have many classes, it is normal to organize the classes even more inside each
    package into sub-packages.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating sub-packages within Sencha Architect is very simple. Let''s consider
    we want to create a new view named `Profile`. If we name the class `Profile` (`userClassName`),
    this class will be created inside the `app/view` directory. But if we want it
    to be created inside `app/view/security` we need to name the ID `security.Profile`
    (*Step 1*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with sub-packages](img/9819OS_04_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the project inspector, the classes will not be separated by sub-folders;
    we will see only a dot (`.`) separating the name of the class from its sub-package
    (*Step 2*). But in the project's folder, we can see that Sencha Architect created
    the sub-folders for us (*Step 3*). And in case we need to do a quick search, we
    can always use the quick open option on the top of the project inspector (*Step
    4*).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create as many sub-packages as we need. We just need to separate the
    name of the sub-packages with a dot (`.`) as given in the following example: `package1.package2.package3.NameOfTheClass`.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we learned some useful tricks that can help in our everyday
    tasks while working with Sencha projects using Sencha Architect. We learned advanced
    topics such as creating overrides to use third party plugins and features and
    implement multilingual apps. We learned that it is possible to use Sencha Architect
    with our favorite IDE, create custom components to share within our development
    team or even other developers, and also how to save a component in the toolbox
    to be reused in other projects. We have also learned how to manipulate the DOM
    within Sencha Architect to add HTML tags to the `app.html` page and create projects
    similar to the ones from Ext JS examples.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will learn how to work with Resources. We will learn
    how to change the SDK path, create new CSS and JS files, work with Google Maps,
    and other examples.
  prefs: []
  type: TYPE_NORMAL
