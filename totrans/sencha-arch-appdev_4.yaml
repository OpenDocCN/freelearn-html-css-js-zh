- en: Chapter 4. Tips and Tricks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章.技巧与窍门
- en: 'In this chapter we will learn how to use some features of Sencha Architect.
    In other words, we will learn short recipes of how to do a few tasks that can
    help us a lot when developing a Sencha Architect project, such as:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用 Sencha Architect 的一些功能。换句话说，我们将学习一些简短的食谱，了解如何完成一些可以帮助我们在开发 Sencha
    Architect 项目时受益的任务，例如：
- en: Using third-party plugins (non-native plugins)
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用第三方插件（非原生插件）
- en: Adding HTML code to index HTML pages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 HTML 代码添加到 index HTML 页面
- en: Importing an existing project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入现有项目
- en: Creating custom components for reuse (team project)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建可重用自定义组件（团队项目）
- en: Multilanguage apps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多语言应用
- en: Sencha Architect + Eclipse
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sencha Architect + Eclipse
- en: Before we start, we will save the examples we are going to create for this chapter
    inside the `sencha-architect/chapter04` folder.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们将把本章将要创建的示例保存在 `sencha-architect/chapter04` 文件夹中。
- en: Exporting and importing an existing project
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出和导入现有项目
- en: Let's say you are working on this very cool project and want to share it with
    someone. You do not need to zip the entire project folder and send it. Sencha
    Architect has a better way of doing it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在处理一个非常酷的项目，并想与某人分享。你不需要压缩整个项目文件夹并发送它。Sencha Architect 有更好的方法来做这件事。
- en: For example, let's say we want to send the project we developed in the first
    chapter (`extBooks`) to a friend by email. So with the project opened with Sencha
    Architect, we will choose **File** | **Archive Project** (*Step 1*). Sencha Architect
    will ask where you want to save the project; let's choose the `chapter04` folder
    we created and we will save the file as `ExtBooksChp02` (*Step 2*). Sencha Architect
    will save the file with the extension `.xda` (*Step 3*).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们想要将第一章中开发的项目（`extBooks`）通过电子邮件发送给朋友。因此，在用 Sencha Architect 打开项目后，我们将选择
    **文件** | **归档项目** (*步骤 1*)。Sencha Architect 将询问您希望将项目保存到何处；让我们选择我们创建的 `chapter04`
    文件夹，并将文件保存为 `ExtBooksChp02` (*步骤 2*)。Sencha Architect 将以 `.xda` 扩展名保存文件 (*步骤 3*)。
- en: 'This file contains all the files from the `extBooks` project, including the
    `php` files:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件包含 `extBooks` 项目的所有文件，包括 `php` 文件：
- en: '![Exporting and importing an existing project](img/9819OS_04_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![导出和导入现有项目](img/9819OS_04_01.jpg)'
- en: 'Now, let''s consider we emailed the file to a friend and this friend wants
    to open the project using Sencha Architect as well. So our friend needs to open
    Sencha Architect, go to **File** | **Import Archive** (*Step 4*) and choose the
    `.xda` file we sent (*Step 5*). The project will be opened, and if this friend
    wants to save this project to run it locally, he/she just needs to click on **Save**,
    and give it a name—for example: **chap02** (*Step 6*):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们假设我们已将文件通过电子邮件发送给朋友，而这个朋友也想使用 Sencha Architect 打开项目。因此，我们的朋友需要打开 Sencha
    Architect，转到 **文件** | **导入归档** (*步骤 4*) 并选择我们发送的 `.xda` 文件 (*步骤 5*)。项目将被打开，如果这个朋友想将项目保存到本地运行，他/她只需点击
    **保存**，并给它起一个名字——例如：**chap02** (*步骤 6*)：
- en: '![Exporting and importing an existing project](img/9819OS_04_02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![导出和导入现有项目](img/9819OS_04_02.jpg)'
- en: 'And if we go to the project directory we will see the complete project as shown
    in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进入项目目录，我们将看到如下截图所示的完整项目：
- en: '![Exporting and importing an existing project](img/9819OS_04_03.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![导出和导入现有项目](img/9819OS_04_03.jpg)'
- en: The `.xda` file is very compact. This is a great way of sharing Sencha Project
    files. For source code control, it is recommended to put all the project files
    under your source code control system (`.git`, `.svn`, and so on).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`.xda` 文件非常紧凑。这是共享 Sencha 项目文件的好方法。对于源代码控制，建议将所有项目文件放在您的源代码控制系统（`.git`、`.svn`
    等）下。'
- en: Using Sencha Architect with Eclipse
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Sencha Architect 与 Eclipse
- en: Sencha Architect is a great IDE, and even if it is specific for Sencha frameworks,
    it does not mean that you cannot use it with your favorite IDE, such as Eclipse,
    Netbeans, Visual Studio, Aptana, and others. In this topic we will demonstrate
    how to use Sencha Architect with Eclipse, and you can use the same logic for any
    other IDE.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Architect 是一个优秀的 IDE，尽管它是为 Sencha 框架定制的，但这并不意味着你不能与你的 favorite IDE（如
    Eclipse、Netbeans、Visual Studio、Aptana 等）一起使用。在本主题中，我们将演示如何使用 Sencha Architect
    与 Eclipse，你可以用同样的逻辑来使用任何其他 IDE。
- en: 'Let''s say we are working on a Java project, and the frontend will be developed
    with Ext JS, and therefore, we will use Sencha Architect do to all the Ext JS
    code for us. If we take a look at the structure of a Java Web project created
    with Eclipse, we will have a structure as shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在开发一个 Java 项目，前端将使用 Ext JS 开发，因此我们将使用 Sencha Architect 来为我们处理所有的 Ext JS
    代码。如果我们查看使用 Eclipse 创建的 Java Web 项目的结构，我们将看到如下所示的截图：
- en: '![Using Sencha Architect with Eclipse](img/9819OS_04_04.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Eclipse 与 Sencha Architect](img/9819OS_04_04.jpg)'
- en: 'Inside **WebContent**, we will add our JSS, CSS, and HTML (or JSP) files, so
    the Ext JS code must be inside the `WebContent` folder. How can we save a Sencha
    Architect project so that we can have exactly what we need? When we save the Sencha
    Architect project, we need to select the Eclipse project as the root folder (`Save
    Path:`) and the `Project Name:` will be `WebContent` as shown in the following
    screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **WebContent** 中，我们将添加我们的 JSS、CSS 和 HTML（或 JSP）文件，因此 Ext JS 代码必须位于 `WebContent`
    文件夹内。我们如何保存 Sencha Architect 项目，以便我们能够得到我们需要的 exactly what we need？当我们保存 Sencha
    Architect 项目时，我们需要选择 Eclipse 项目作为根文件夹（`Save Path:`），而 `Project Name:` 将如以下截图所示：
- en: '![Using Sencha Architect with Eclipse](img/9819OS_04_05.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Eclipse 与 Sencha Architect](img/9819OS_04_05.jpg)'
- en: 'This way all the Ext JS code will be located inside the `WebContent`, and we
    can use Eclipse as the code editor for the Java code and Sencha Architect for
    the Ext JS code. The project will look as shown in the following screenshot, which
    is exactly what is expected from a Java web project:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这样所有 Ext JS 代码都将位于 `WebContent` 内，我们可以使用 Eclipse 作为 Java 代码的代码编辑器，而使用 Sencha
    Architect 作为 Ext JS 代码的编辑器。项目将看起来如下所示截图，这正是从 Java 网络项目中期望得到的样子：
- en: '![Using Sencha Architect with Eclipse](img/9819OS_04_06.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Eclipse 与 Sencha Architect](img/9819OS_04_06.jpg)'
- en: Creating a custom component for reuse
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建可重用自定义组件
- en: You created a really cool component using Sencha Architect, and now you want
    to share it with the world so other developers can also use this component in
    their projects. Is that possible? The answer is yes!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您使用 Sencha Architect 创建了一个非常酷的组件，现在您想与世界分享它，以便其他开发人员也可以在他们的项目中使用此组件。这是否可能？答案是肯定的！
- en: You can also use this to share components with your development team or even
    to reuse the same components in other Senha Architect projects. As Ext JS and
    Sencha Touch share part of the API, especially the data package, you can also
    use this feature to import models and stores from an Ext JS project to a Sencha
    Touch project and vice versa!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用此功能与您的开发团队共享组件，甚至在其他 Senha Architect 项目中重用相同的组件。由于 Ext JS 和 Sencha Touch
    共享部分 API，特别是数据包，您还可以使用此功能将模型和存储从 Ext JS 项目导入到 Sencha Touch 项目，反之亦然！
- en: 'To do so, you need to select **Models**, **Stores**, **Views**, or **Controllers**,
    right-click on it, and click on the **Export to File…** option. In the following
    screenshot, we are exporting the **Book** **Model** from the `extBooks` project
    (`chap02`)—*Step 1*. Next, we need to save it—we will name it `BookModel` (*Step
    2*). Once it is saved, Sencha Architect will save it with the `.xdc` extension
    (*Step 3*):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，您需要选择 **模型**、**存储**、**视图**或**控制器**，右键单击它，然后单击 **导出到文件…** 选项。在以下截图中，我们正在从
    `extBooks` 项目（`chap02`）导出 **Book** **模型**（*步骤 1*）。接下来，我们需要保存它——我们将将其命名为 `BookModel`（*步骤
    2*）。一旦保存，Sencha Architect 将以 `.xdc` 扩展名保存它（*步骤 3*）：
- en: '![Creating a custom component for reuse](img/9819OS_04_07.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![创建可重用自定义组件](img/9819OS_04_07.jpg)'
- en: 'To import it, we need to go to **Edit** | **Import Component…** and choose
    the `BookModel.xdc` file (*Step 4*). Sencha Architect will save the component
    into the toolbox, so we can give it a `Name` and select a `Category` for it (*Step
    5*). Then we can go to the toolbox and use it as any other component from the
    toolbox (*Step 6*):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要导入它，我们需要转到 **编辑** | **导入组件…** 并选择 `BookModel.xdc` 文件（*步骤 4*）。Sencha Architect
    将组件保存到工具箱中，因此我们可以给它一个 `名称` 并为其选择一个 `类别`（*步骤 5*）。然后我们可以转到工具箱并像使用任何其他工具箱组件一样使用它（*步骤
    6*）：
- en: '![Creating a custom component for reuse](img/9819OS_04_08.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![创建可重用自定义组件](img/9819OS_04_08.jpg)'
- en: 'In case you want to reuse a **View** in a future project, you can also use
    the **Save to Toolbox…** option (*Step 7*). It will also ask you which **name**
    and which **category** you want to save the view to (*Step 8*). Then, the **BooksGrid**
    will also be available in the toolbox (*Step 9*):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在未来的项目中重用 **视图**，您也可以使用 **保存到工具箱…** 选项（*步骤 7*）。它也会询问您要将视图保存到哪个 **名称** 和哪个
    **类别**（*步骤 8*）。然后，**BooksGrid** 也将可在工具箱中使用（*步骤 9*）：
- en: '![Creating a custom component for reuse](img/9819OS_04_09.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![创建可重用自定义组件](img/9819OS_04_09.jpg)'
- en: And as we already learned in [Chapter 2](ch02.html "Chapter 2. Creating an Ext
    JS App"), *Creating an Ext JS App* and [Chapter 3](ch03.html "Chapter 3. Creating
    a Sencha Touch App"), *Creating a Sencha Touch App*, to use a component from the
    toolbox, we can select the **View**, **Model**, **Store**, or **Controller** from
    the project inspector, and when we double-click on the toolbox component, it will
    be created as a child of the selected item of the project inspector or will be
    created as a **Model**, **Store**, **View**, or **Controller** if we select the
    package.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第 2 章](ch02.html "第 2 章。创建 Ext JS 应用")中已经学到的，*创建 Ext JS 应用*和[第 3 章](ch03.html
    "第 3 章。创建 Sencha Touch 应用")，*创建 Sencha Touch 应用*，要使用工具箱中的组件，我们可以从项目检查器中选择**视图**、**模型**、**存储**或**控制器**，当我们双击工具箱组件时，它将作为项目检查器所选项目的子项创建，或者如果我们选择包，它将作为**模型**、**存储**、**视图**或**控制器**创建。
- en: Adding HTML code to app.html
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 HTML 代码添加到 app.html 文件中
- en: So far, we already learned that we cannot edit code in Sencha Architect unless
    it is for a function or template. If we take a look at Sencha Ext JS examples
    ([http://www.sencha.com/products/extjs/examples/](http://www.sencha.com/products/extjs/examples/)),
    we will see that many examples have HTML tags (DIV, P) inside the `index.html`
    of the example. What if we want to create applications like those? Is it possible?
    Again, the answer is yes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解到，除非是为了函数或模板，否则我们无法在 Sencha Architect 中编辑代码。如果我们查看 Sencha Ext JS
    示例([http://www.sencha.com/products/extjs/examples/](http://www.sencha.com/products/extjs/examples/))，我们会看到许多示例在示例的
    `index.html` 中包含 HTML 标签（DIV、P）。如果我们想创建类似的应用程序，这是可能的吗？答案是肯定的。
- en: You will not be able to manually edit the `app.html` file to add the HTML code
    that you want. As we saw in [Chapter 2](ch02.html "Chapter 2. Creating an Ext
    JS App"), *Creating an Ext JS App* and [Chapter3](ch03.html "Chapter 3. Creating
    a Sencha Touch App"), *Creating a Sencha Touch App*, if you do change any file
    generated with Sencha Architect, when you open the same project on Sencha Architect,
    it will override all your changes with the original code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您将无法手动编辑 `app.html` 文件以添加您想要的 HTML 代码。正如我们在[第 2 章](ch02.html "第 2 章。创建 Ext JS
    应用")中看到的，*创建 Ext JS 应用*和[第 3 章](ch03.html "第 3 章。创建 Sencha Touch 应用")，*创建 Sencha
    Touch 应用*，如果您更改了 Sencha Architect 生成的任何文件，当您在 Sencha Architect 中打开相同的项目时，它将用原始代码覆盖您所有的更改。
- en: But how can we add HTML code? The answer is by using DOM manipulation using
    Sencha code, also called as Ext Core, available on both Ext JS and Sencha Touch
    frameworks.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们如何添加 HTML 代码呢？答案是使用 Sencha 代码（也称为 Ext Core）进行 DOM 操作，这在 Ext JS 和 Sencha Touch
    框架中都是可用的。
- en: 'To do so, when we create a Sencha Architect application (Ext JS or Sencha Touch),
    select the **Application** icon from the project inspector (*Step 1*), go to the
    config panel, locate the **launch** function, and click on the **+** icon (*Step
    2*). Then, a green diamond icon will appear and we can click on the arrow icon
    (*Step 3*) as shown in the following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，当我们创建 Sencha Architect 应用程序（Ext JS 或 Sencha Touch）时，从项目检查器中选择**应用程序**图标（*步骤
    1*），转到配置面板，找到**启动**函数，并单击**+**图标（*步骤 2*）。然后，将出现一个绿色菱形图标，我们可以单击箭头图标（*步骤 3*），如下面的截图所示：
- en: '![Adding HTML code to app.html](img/9819OS_04_10.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![将 HTML 代码添加到 app.html](img/9819OS_04_10.jpg)'
- en: 'The code editor will be opened and we can use Ext Core to manipulate the DOM.
    In this case, we are appending HTML tags to the HTML body:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 代码编辑器将打开，我们可以使用 Ext Core 来操作 DOM。在这种情况下，我们正在将 HTML 标签追加到 HTML 主体中：
- en: '![Adding HTML code to app.html](img/9819OS_04_11.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![将 HTML 代码添加到 app.html](img/9819OS_04_11.jpg)'
- en: 'If we run the project, the output will be as shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行项目，输出将如下面的截图所示：
- en: '![Adding HTML code to app.html](img/9819OS_04_12.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![将 HTML 代码添加到 app.html](img/9819OS_04_12.jpg)'
- en: Using third-party plugins (non-native plugins)
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用第三方插件（非原生插件）
- en: Plugins are a huge help when we want to develop something that is not available
    within the Sencha API. The plugins that are supported natively already come as
    an option in Sencha Architect, but there are a lot of plugins that are shared
    by other developers that we can find on Sencha Forums.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要开发 Sencha API 中不可用的东西时，插件非常有帮助。已经原生支持的插件在 Sencha Architect 中作为选项提供，但还有许多其他开发者共享的插件，我们可以在
    Sencha 论坛上找到。
- en: 'We want to focus on a particular case here, because we have already seen how
    to add a new property, and for some components, we can easily add the plugins
    or features property, and then add the plugin configuration. But the components
    that have native plugins supported by the API do not allow us to do so, like for
    instance, the grid panel from Ext JS:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里想关注一个特定的案例，因为我们已经看到了如何添加一个新属性，并且对于某些组件，我们可以轻松地添加插件或功能属性，然后添加插件配置。但是，API
    支持原生插件的组件不允许我们这样做，例如，Ext JS 的网格面板：
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_13.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![使用第三方插件（非原生插件）](img/9819OS_04_13.jpg)'
- en: 'We can only use the plugins and features that are available within Sencha Architect.
    What if we want to use a third-party plugin or feature such as the Filter Plugin?
    It is possible, but we need to use an advanced feature from Sencha Architect,
    which is "creating overrides". A disclaimer about overrides: this has to be avoided.
    Whenever you can use a set method to change a property, use it. Overrides should
    be your last resource and they should be used very carefully, because if you do
    not use them carefully, you can change the behavior of a component and something
    may stop working. But we will demonstrate how to do it in a safe way!'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只能在 Sencha Architect 内部使用的插件和功能。如果我们想使用第三方插件或功能，比如 Filter 插件呢？这是可能的，但我们需要使用
    Sencha Architect 的一个高级功能，即“创建覆盖”。关于覆盖的声明：这必须避免。只要可能，使用设置方法来更改属性。覆盖应该是你的最后选择，并且应该非常小心地使用，因为如果你不谨慎使用，你可能会改变组件的行为，导致某些功能停止工作。但我们将演示如何以安全的方式完成它！
- en: 'We will use the **BooksGrid** as an example in this topic. Let''s say we need
    to use the Filter Plugin on it, so we need to create an override first. To do
    it, select the **BooksGrid** from the project inspector, open the code editor,
    and click on the **Create Override** button (*Step 1*). Sencha Architect will
    display a warning (*Step 2*). We can click on **Yes** to continue:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这个主题中使用 **BooksGrid** 作为示例。假设我们需要在它上使用 Filter 插件，因此我们需要首先创建一个覆盖。为此，从项目检查器中选择
    **BooksGrid**，打开代码编辑器，然后单击 **创建覆盖** 按钮（*步骤 1*）。Sencha Architect 将显示一个警告（*步骤 2*）。我们可以单击
    **是** 继续操作：
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_14.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![使用第三方插件（非原生插件）](img/9819OS_04_14.jpg)'
- en: 'The code editor will open (*Step 3*) the override class so we can enter our
    code. In this case, we will have complete freedom to do whatever we need to on
    this file. So let''s add the `features()` function with the declaration of the
    plugin and also the `initComponent()` function as shown in the following screenshot
    (*Step 4*):'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 代码编辑器将打开（*步骤 3*）覆盖类，这样我们就可以输入我们的代码。在这种情况下，我们将对这个文件有完全的自由去做我们需要做的任何事情。所以让我们添加
    `features()` 函数，其中包含插件的声明，以及 `initComponent()` 函数，如以下截图所示（*步骤 4*）：
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_15.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![使用第三方插件（非原生插件）](img/9819OS_04_15.jpg)'
- en: One thing that is very important is that we must call the `callParent()` function
    (`callOverriden()` is deprecated already in Ext JS 4.1 and later versions) to
    make sure we will continue to have all the original behavior of the component
    (in this case the `BooksGrid` class). The only thing we want to do is to add a
    new feature to it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有一件事非常重要，那就是我们必须调用 `callParent()` 函数（`callOverriden()` 在 Ext JS 4.1 及以后的版本中已经弃用）以确保我们继续拥有组件的所有原始行为（在这种情况下是
    `BooksGrid` 类）。我们唯一想要做的是向其中添加一个新功能。
- en: 'And we are done with the override! To go back to the original class we can
    use the navigator as shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了覆盖！要回到原始类，我们可以使用以下截图所示的导航器：
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_16.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![使用第三方插件（非原生插件）](img/9819OS_04_16.jpg)'
- en: 'Notice that `requires` was added to the class `Packt.view.override.BooksGrid`,
    which is the class we just wrote. The next step is to add the plugin on the class
    requires. To do so, we need to select the **BooksGrid**, go to the config panel,
    and add the requires with the name of the plugin (**Ext.ux.grid.FiltersFeature**):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到 `requires` 已经添加到 `Packt.view.override.BooksGrid` 类中，这是我们刚刚编写的类。下一步是在需要类中添加插件。为此，我们需要选择
    **BooksGrid**，转到配置面板，并添加具有插件名称的 `requires`（**Ext.ux.grid.FiltersFeature**）：
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_17.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![使用第三方插件（非原生插件）](img/9819OS_04_17.jpg)'
- en: 'Some developers like to add the plugin file directly as a JavaScript file on
    `app.html`/`index.html`. Sencha provides the dynamic loading feature so let''s
    take advantage of it and use it! First, we cannot forget to add the `ux` folder
    with the plugin on the project root folder as shown in the following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发者喜欢直接将插件文件作为JavaScript文件添加到`app.html`/`index.html`中。Sencha提供了动态加载功能，所以让我们利用它并使用它！首先，我们不能忘记在项目根目录中添加包含插件的`ux`文件夹，如下面的截图所示：
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_18.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![使用第三方插件（非原生插件）](img/9819OS_04_18.jpg)'
- en: 'Next, we need to set the application loader. Select the **Application** from
    the project inspector (*Step 5*), then go to the config panel, locate the **Loader
    Config** property, click on the **+** icon (*Step 6*), then click on the arrow
    icon (*Step 7*). The details of the loader will be available on the config panel.
    Locate the **paths** property and click on it (*Step 8*). The code editor will
    be opened with the loader path''s default value, which is **{"Ext": "."}** (*Step
    9*). Do not remove it; simply add the path of the `Ext.ux` namespace which is
    the `ux` folder (*Step 10*):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，我们需要设置应用程序加载器。从项目检查器中选择**应用程序**（*步骤5*），然后转到配置面板，找到**加载器配置**属性，点击**+**图标（*步骤6*），然后点击箭头图标（*步骤7*）。加载器的详细信息将在配置面板上显示。定位到**paths**属性并点击它（*步骤8*）。代码编辑器将以加载器路径的默认值打开，该默认值为**{"Ext":
    "."}**（*步骤9*）。不要删除它；只需添加`Ext.ux`命名空间的路劲，即`ux`文件夹的路劲（*步骤10*）：'
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_19.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![使用第三方插件（非原生插件）](img/9819OS_04_19.jpg)'
- en: 'And we are almost done! We need to add the `filterable` option in each column
    we want to allow the user to filter its values (*Step 11*): we can use the config
    panel to add a new property (we need to select the desired column from the project
    inspector first—always remember to do this). And then, we can choose what type
    of property we want to add (*Step 12* and *Step 14*). For example, we can add
    `filterable: true` (*Step 13*) for the `id` column and `filterable:` `{type: ''string''}`
    (*Step 15* and *Step 16*) to the `Name` column as shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '我们几乎完成了！我们需要在每个我们希望用户能够过滤其值的列中添加`filterable`选项（*步骤11*）：我们可以使用配置面板添加一个新属性（首先我们需要从项目检查器中选择所需的列——始终记得这样做）。然后，我们可以选择我们想要添加的属性类型（*步骤12*和*步骤14*）。例如，我们可以为`id`列添加`filterable:
    true`（*步骤13*）以及为`Name`列添加`filterable:` `{type: ''string''}`（*步骤15*和*步骤16*），如下面的截图所示：'
- en: '![Using third-party plugins (non-native plugins)](img/9819OS_04_20.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![使用第三方插件（非原生插件）](img/9819OS_04_20.jpg)'
- en: And the plugin is ready to be used!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 插件已经准备好使用！
- en: Creating multilanguage apps
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建多语言应用程序
- en: 'Another feature that is very useful is to have is a multilingual application,
    and many developers try to do it within Sencha Architect. The issue is that we
    usually have a JavaScript object with the translations we want to apply to a text
    on the application. For example, let''s say we want to translate the `BooksGrid`;
    first we will need to create a JavaScript file with the desired translations (one
    for each column of the grid):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常有用的功能是拥有一个多语言应用程序，许多开发者尝试在Sencha Architect中实现它。问题是，我们通常有一个JavaScript对象，其中包含我们想要应用于应用程序上文本的翻译。例如，假设我们想要翻译`BooksGrid`；首先我们需要创建一个包含所需翻译的JavaScript文件（每个网格列一个）：
- en: '[PRE0]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code contains Portuguese translations. The way we want to use
    it, is applying the value of the translation in a specific column, and the column
    label we need to use is given in the following code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码包含葡萄牙语翻译。我们想要使用的方式是将翻译值应用于特定列，而我们需要使用的列标签如下面的代码所示：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'What happens is that the text property on Sencha Architect only allows you
    to enter a string and you cannot enter an object as the text property value; how
    do we solve this? We have two choices: whenever the user changes the language,
    we can call the `setText()` or `setTitle()` method, passing the new value for
    all the components we have on the application. But this is too much work. Or,
    we can use an override. In our case, as we already have an override from a previous
    topic, we just need to add the following code to it:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 发生的事情是，Sencha Architect上的文本属性只允许你输入一个字符串，你不能将对象作为文本属性值输入；我们如何解决这个问题？我们有两种选择：每当用户更改语言时，我们可以调用`setText()`或`setTitle()`方法，为应用程序上的所有组件传递新的值。但这太麻烦了。或者，我们可以使用覆盖。在我们的情况下，因为我们已经从一个先前的主题中有了覆盖，我们只需要向其中添加以下代码：
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And then the multilingual app is ready to be used.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后多语言应用程序也准备好了。
- en: Creating util and custom classes
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建util和自定义类
- en: In most of the projects that you are going to work on, you will probably need
    to create `util` classes with functions you can reuse or properties that you will
    treat as constants. And you can also use them on Sencha Architect. So let's say
    we need to create a function that sums two given values and returns the result.
    This function can be used in several places of your project, and is independent
    from any business logic. So we need to create a class. Sencha Architect provides
    the capability to create stores, models, controllers, and views, but we want to
    create another type of class. We can create an Ext class using the **+** icon
    on the top of the project inspector (*Step 1*).Then, click on **Class**, and select
    a package where you want to create this class.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在你将要参与的大多数项目中，你可能需要创建带有可重用函数或被视为常量的属性的`util`类。你还可以在Sencha Architect中使用它们。所以假设我们需要创建一个函数，该函数将两个给定的值相加并返回结果。这个函数可以在你的项目的多个地方使用，并且与任何业务逻辑无关。因此，我们需要创建一个类。Sencha
    Architect提供了创建存储、模型、控制器和视图的能力，但我们想创建另一种类型的类。我们可以通过项目检查器顶部的**+**图标创建一个Ext类（*步骤1*）。然后，点击**类**，并选择你想要创建此类的包。
- en: 'Let''s create inside the **Controllers** package. Sencha Architect will list
    the new class under the desired package with the ext icon (*Step 2*). Next, you
    can give a name to your class, an alias, and choose other options, such as **singleton**:
    true (*Step 3*):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在**控制器**包内创建。Sencha Architect将列出新的类，并在所需包下显示ext图标（*步骤2*）。接下来，你可以给你的类命名，一个别名，并选择其他选项，例如**单例**：true（*步骤3*）：
- en: '![Creating util and custom classes](img/9819OS_04_21.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![创建util和自定义类](img/9819OS_04_21.jpg)'
- en: In classes like this, you can add properties and functions, but you will be
    limited to the fact that all the changes must be made using the config panel.
    It is not a file that you have total control over as an override.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样的类中，你可以添加属性和函数，但你将受到所有更改都必须通过配置面板进行的限制。这不是一个你可以完全控制的覆盖文件。
- en: 'For example, let''s create the sum function we talked about. We need to go
    to **Functions** and click on the **+** icon (*Step 4*—on the config panel), choose
    a name for our function and click on **Next** (*Step 5*), then enter the parameters
    (*Step 6*), and then an arrow icon will appear (*Step 7*) and if we click on it,
    the code editor will be opened so we can enter our code (*Step 8*). If we need
    to change any configuration, such as the function name or add, edit, or remove
    parameters, we can do it using the config panel (*Step 9*). And as usual, we will
    have the code generated by Sencha Architect (*Step 10*):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们创建我们之前提到的求和函数。我们需要转到**函数**并点击**+**图标（*步骤4*——在配置面板上），为我们的函数命名，然后点击**下一步**（*步骤5*），然后输入参数（*步骤6*），然后会出现一个箭头图标（*步骤7*），如果我们点击它，代码编辑器将打开，我们可以输入我们的代码（*步骤8*）。如果我们需要更改任何配置，例如函数名或添加、编辑或删除参数，我们可以使用配置面板（*步骤9*）来完成。并且像往常一样，我们将拥有由Sencha
    Architect生成的代码（*步骤10*）：
- en: '![Creating util and custom classes](img/9819OS_04_22.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![创建util和自定义类](img/9819OS_04_22.jpg)'
- en: If we would like to use the `sum()` function we can simply call `Packt.controller.Utils.sum(1,2)`
    and the return will be `3`!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想使用`sum()`函数，我们可以简单地调用`Packt.controller.Utils.sum(1,2)`，返回值将是`3`！
- en: An alternative if you really want to have total control on the code is to create
    an `Ext` class, and then create an override. Then it will be as if you were using
    any code editor. But in this case, you will not be able to use the functionalities
    of Sencha Architect.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的想对代码有完全的控制权，可以创建一个`Ext`类，然后创建一个覆盖。这样，它将类似于使用任何代码编辑器。但在这个情况下，你将无法使用Sencha
    Architect的功能。
- en: 'In case you try to change the extend class (the default is `Ext.Base`) to `Ext.grid.Panel`
    for example, Sencha Architect will recognize that this class is supported by the
    tool and will ask you if you want to transform (and if positive, it will be as
    if you chose the component from the toolbox). If not, you will have the freedom
    to create each property or function by yourself (and Sencha Architect will not
    list the available properties on the config panel, but you will be able to add
    your own features and plugins as an example):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试更改扩展类（默认为`Ext.Base`）为`Ext.grid.Panel`等，Sencha Architect将识别这个类是受工具支持的，并将询问你是否想要转换（如果回答是，它将类似于从工具箱中选择组件）。如果不是，你将拥有自由创建每个属性或函数（Sencha
    Architect将不会在配置面板上列出可用的属性，但你将能够添加自己的功能和插件，例如）：
- en: '![Creating util and custom classes](img/9819OS_04_23.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![创建 util 和自定义类](img/9819OS_04_23.jpg)'
- en: Working with sub-packages
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与子包一起工作
- en: 'When working with the MVC architecture and Sencha projects, we are already
    working with four packages that help us to organize our application better: `model`,
    `view`, `controller`, and `store`. But when our application starts to grow and
    we have many classes, it is normal to organize the classes even more inside each
    package into sub-packages.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 MVC 架构和 Sencha 项目中工作时，我们已经在使用四个帮助我们更好地组织应用程序的包：`model`、`view`、`controller`
    和 `store`。但是当我们的应用程序开始增长并且我们有很多类时，在每个包内部进一步组织类是正常的。
- en: 'Creating sub-packages within Sencha Architect is very simple. Let''s consider
    we want to create a new view named `Profile`. If we name the class `Profile` (`userClassName`),
    this class will be created inside the `app/view` directory. But if we want it
    to be created inside `app/view/security` we need to name the ID `security.Profile`
    (*Step 1*):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Sencha Architect 中创建子包非常简单。让我们假设我们想要创建一个名为 `Profile` 的新视图。如果我们命名类为 `Profile`
    (`userClassName`)，则此类将在 `app/view` 目录内创建。但如果我们想让它创建在 `app/view/security` 中，我们需要命名
    ID 为 `security.Profile` (*步骤 1*)：
- en: '![Working with sub-packages](img/9819OS_04_24.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![与子包一起工作](img/9819OS_04_24.jpg)'
- en: In the project inspector, the classes will not be separated by sub-folders;
    we will see only a dot (`.`) separating the name of the class from its sub-package
    (*Step 2*). But in the project's folder, we can see that Sencha Architect created
    the sub-folders for us (*Step 3*). And in case we need to do a quick search, we
    can always use the quick open option on the top of the project inspector (*Step
    4*).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目检查器中，类不会由子文件夹分开；我们将只看到点 (`.`) 将类的名称与其子包分开 (*步骤 2*)。但在项目的文件夹中，我们可以看到 Sencha
    Architect 为我们创建了子文件夹 (*步骤 3*)。如果我们需要快速搜索，我们始终可以使用项目检查器顶部的快速打开选项 (*步骤 4*)。
- en: 'We can create as many sub-packages as we need. We just need to separate the
    name of the sub-packages with a dot (`.`) as given in the following example: `package1.package2.package3.NameOfTheClass`.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建我们需要的任意数量的子包。我们只需要用点 (`.`) 分隔子包的名称，如下例所示：`package1.package2.package3.NameOfTheClass`。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we learned some useful tricks that can help in our everyday
    tasks while working with Sencha projects using Sencha Architect. We learned advanced
    topics such as creating overrides to use third party plugins and features and
    implement multilingual apps. We learned that it is possible to use Sencha Architect
    with our favorite IDE, create custom components to share within our development
    team or even other developers, and also how to save a component in the toolbox
    to be reused in other projects. We have also learned how to manipulate the DOM
    within Sencha Architect to add HTML tags to the `app.html` page and create projects
    similar to the ones from Ext JS examples.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了一些有用的技巧，这些技巧可以帮助我们在使用 Sencha Architect 处理 Sencha 项目时完成日常任务。我们学习了高级主题，例如创建覆盖以使用第三方插件和功能，以及实现多语言应用程序。我们了解到可以使用
    Sencha Architect 与我们喜欢的 IDE 一起使用，创建自定义组件以在开发团队内部或甚至其他开发者之间共享，以及如何将组件保存到工具箱中以便在其他项目中重复使用。我们还学习了如何在
    Sencha Architect 中操作 DOM，以便向 `app.html` 页面添加 HTML 标签，并创建类似于 Ext JS 示例中的项目。
- en: In the next chapter we will learn how to work with Resources. We will learn
    how to change the SDK path, create new CSS and JS files, work with Google Maps,
    and other examples.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何处理资源。我们将学习如何更改 SDK 路径，创建新的 CSS 和 JS 文件，处理 Google Maps 以及其他示例。
