- en: Chapter 6. Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will cover the steps needed to make our web application live.
    Also, you will learn how to set up an SSL certificate and how to track errors
    occurring in production actively. This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Modulus.io
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Compose.io
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic error tracking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an SSL certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Modulus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modulus is currently the best place to host a Meteor project. Why? It is easy
    to set up and maintain. While there are several other services where we can obtain
    the same results, every single one of them requires more expertise with servers
    and a considerable amount of time on your end. We are not developing a server.
    We are developing an application.
  prefs: []
  type: TYPE_NORMAL
- en: Modulus.io provides support for sticky sessions, web sockets, and free SSL endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that Meteor's Galaxy hosting service is going to be released soon
    and will undoubtedly become the best place to host a Meteor web application. Until
    then, Modulus is the way to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating a free account at [http://modulus.io](http://modulus.io):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Modulus](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you need to install the `demeteorizer` tool and the `modulus CLI` tool.
    Run the following commands in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This did not work! If your `npm install` command fails, then you need to install
    `node` and `npm`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure that we install `npm` properly, we need to add `homebrew` first.
    Install this by running this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is done, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When this command finishes installing everything, we will have both `node` and
    `npm` available globally from our command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can install both `demeteorizer` and `modulus` easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Excellent. Now we have all the tools that we need. Let''s create a new project
    (if you want to feel like a pro, you can use the CLI too):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Modulus](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Make sure to select **Node.JS** as the runtime environment for the project and
    set the size of memory of the servo to **192MB**. If you find there is a lot of
    traffic coming in, you can increase the memory of the server at any time to scale
    your application easily.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Modulus](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have created your servo, go to the **ADMINISTRATION** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Modulus](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now copy the URL that has been generated for the project found next to the
    **Your Project URL** text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Modulus](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Scroll all the way to the end of the page to the **ENVIRONMENT VARIABLES**.
    The first thing that we need to do is set the `ROOT_URL` environment variable.
    Paste the project URL here. Make sure it has the `https` protocol. Here, we are
    taking advantage of Modulus'' secure SSL endpoint. The `wizonesolutions:canonical`
    package will make sure that all routes will hit our `ROOT_URL`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Modulus](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need to set up our database. We cannot deploy this yet because the
    application is not aware of where it is supposed to save information.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although Modulus.io offers MongoDB hosting, Modulus does not grant access to
    Meteor's **oplog tailing** feature and does not have any support for multiple
    replica sets. Both these features are must-haves for production and this is why.
  prefs: []
  type: TYPE_NORMAL
- en: A MongoDB Replica Set is an exact copy of your database. When you first create
    a database in Compose, you are automatically given a primary Replica Set with
    a secondary Replica Set to support it. Since failures happen, the secondary Replica
    Set exists to replace the primary replica set immediately when the primary fails.
    In the database world, this is known as data redundancy.
  prefs: []
  type: TYPE_NORMAL
- en: This layer of security adds an interesting problem; how do the secondary databases
    know about the changes that are happening to the primary? The operations log,
    or oplog for short, is a special collection that Mongo uses to record all the
    changes that are being made to the database. These changes are read by the Replica
    Sets to reflect all necessary changes.
  prefs: []
  type: TYPE_NORMAL
- en: Great, now let's understand how Meteor uses the oplog. Meteor's default `poll`
    and `diff` method of watching changes in the database is slow. It works by comparing
    changes between the database and the client every 10 seconds. This creates multiple
    unnecessary hits on your database by default and is not fast (since a change can
    occur 9 seconds before Meteor looks for changes) as well. To make Meteor perform
    better, the Meteor team tapped into Mongo's oplog. By listening for changes in
    Mongo's oplog, Meteor knows exactly when and which changes to push to the client.
    This is called oplog tailing.
  prefs: []
  type: TYPE_NORMAL
- en: Oplog tailing drastically improves Meteor's reactivity performance by effectively
    tailing Mongo's operations log. It is guaranteed that a production app will not
    run smoothly without taking advantage of this feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create your account with `compose.io`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Compose](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now create a new MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Compose](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now click the **Users** tab. Here, we need to add a user that will have access
    to the database and the oplog. This is the user that Modulus will use. In the
    following example, we are setting the user to `root`, the password to `root`,
    and `oplog access` to `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Compose](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **Admin** tab. Copy the database URI that you see displayed under
    **Replica Set URI**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Compose](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Notice the `<user>` and `<password>` sections of the string. We are going to
    replace these fields with the user credentials that we had defined previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to Modulus.io and visit the project''s **ADMINISTRATION** page. Scroll
    to the **ENVIRONMENT VARIABLES** section. Here, we need to add the URI that we
    had just copied in to two different variables: `MONGO_URL` and `MONGO_OPLOG_URL`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `MONGO_URL` will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Notice that you can remove the query parameters (anything after and including
    the question mark).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `MONGO_OPLOG_URL` will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we have modified the information after the trailing slash to `/local?authSource=online_shop`
    where `online_shop` is the name of the database.
  prefs: []
  type: TYPE_NORMAL
- en: Excellent! This is the last time we will have to configure anything for our
    project's deployment. Now we can use the `modulus` CLI to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to your terminal and run the following command to log in to your user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you use your GitHub account to create your Modulus account, then pass the
    `github` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow the instructions on the command line. Once you are logged in, you will
    need to make sure that you are in your Meteor project''s `root` directory (where
    you run the Meteor command). From here, run the following command to deploy to
    your new server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Modulus will ask which project you want to deploy to and begin. What does Modulus
    do? It first identifies that the project is a Meteor project, then it runs **demeteorizer**
    to convert the project into a common Node.js app. This app is then deployed to
    the server and automatically initiated.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Kadira
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perfect! Now that we can deploy production quality web applications, we need
    to understand how to identify issues with them. This is where `kadira.io` comes
    into the picture. Kadira is a Meteor-specific performance and error-monitoring
    tool. It will collect `Meteor.Errors` triggered on both the client and the server.
    It will also show performance data for publishers and subscribers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kadira does this and more, and the starting plan is completely free. Let''s
    begin by signing up. After you have signed up, you need to create a new app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Kadira](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Decide a name for the app, and enter the same in the field, and click on **Create
    App**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Kadira](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once created, you will see a view like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Kadira](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To finish, you will need to copy the code in step 2 and install the `meteorhacks:kadira`
    and `meteorhacks:zones` packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `meteorhacks:zones` package improves the description of the errors from
    the client side. Kadira will take advantage of this package automatically. It
    is important to note that the `meteorhacks:zones` package is optional because
    it is still in active development and can cause strange behavior in Meteor. Now,
    let''s create a configuration file for Kadira:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We are done! With this simple configuration, we can now easily track application
    errors and more on Kadira:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Kadira](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You will notice the **Errors** tab on the top-left side of the screen. This
    tab will show us a list of all the errors that will occur in our application.
    Have a look at `meteorhacks` and their academy to learn more about optimizing
    your Meteor web application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an SSL certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**SSL**, or **Secure Sockets Layer**, is a technology that creates an encrypted
    connection between clients and the server. This is necessary if we want to ensure
    that the data transferred to our server is encrypted; this includes data such
    as credit card information.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up SSL can be painful because it requires some command-line knowledge.
    We like to buy our SSL certificates from [https://www.namecheap.com/](https://www.namecheap.com/)
    because they are cheap and they get the job done.
  prefs: []
  type: TYPE_NORMAL
- en: 'The cheapest SSL certificate that you can get is **PositiveSSL**; you can find
    the offering at this endpoint: [https://www.namecheap.com/security/ssl-certificates/single-domain.aspx](https://www.namecheap.com/security/ssl-certificates/single-domain.aspx).'
  prefs: []
  type: TYPE_NORMAL
- en: 'After buying the certificate, you will need to generate a **Certificate Signing
    Request** (**CSR**). Let''s do this. You will be first redirected to your **Purchase
    Summary**. Click on **Manage**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up an SSL certificate](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now click **Activate Now** and leave the window open:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up an SSL certificate](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, open up a terminal at your project directory, and create a `/.csr` directory
    by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s use `openssl` to create our CSR. Run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will give you a prompt for your site contact information; all the information
    fields must be filled out with your company or your information. The most important
    field is the **Common name** field, which must be `www.yourdomain.com`. Including
    the `www` will secure both `www.yourdomain.com` and `yourdomain.com`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command has created a `private.key` file and a `server.csr` file; you can
    check this by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Keep `private.key` somewhere safe! You will need this later. Now open the `server.csr`
    file with any text editor such as Sublime, Atom, or, if you prefer something more
    basic, you can use nano or vim. You can view the contents of the current directory
    folder by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy all the text in this file. This should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to namecheap, and change the select box to **Other** and paste the CSR to
    namecheap''s **Enter csr** textarea field. This should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up an SSL certificate](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now fill out the approver information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up an SSL certificate](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Make sure that the e-mail you select is active and under your control! If you
    cannot receive e-mails from the e-mail that you have selected, you will not be
    able to apply the SSL certificate to your webapp! In the next screen, simply submit
    your order and wait for the **SSL Certificate Validation** e-mail to arrive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up an SSL certificate](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy your validation code, and click on the **here** link in the e-mail. This
    will take you to another site where you need to paste the validation code you
    copied and click on **Next**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up an SSL certificate](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Close the window, and wait until you receive a new e-mail with a ZIP file.
    Download the ZIP file and unzip it. This will contain four files: `AddTrustExternalCARoot.crt`,
    `COMODORSAAddTrustCA.crt`, `COMODORSADomainValidationSecureServerCA.crt`, and
    `www_yourdomain_com.crt`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to use these files to create a Certificate Authority Bundle for
    Modulus. This is, basically, a concatenated version of all our certificates. Generate
    this by issuing this command in your command line where the certificates are located:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This command will produce a new `certificate_bundle.crt` directory with all
    the certificates concatenated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now browse to the Modulus.io administration page; make sure that you have already
    pointed your custom URL to your instance of Modulus by adding your domain name
    to the custom domains list. Click on the plus icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up an SSL certificate](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now open the `private.key` file that was generated together with the CSR, and
    copy the entire text inside the file. Paste the information to the **Private Key**
    textarea. Then open the `certificate_bundle.crt` file, copy the information here,
    and paste it to the **Certificate** textarea:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up an SSL certificate](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Make sure to point your certificate to the `www` domain and the `non-www` domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now to complete the process, we need to make sure that the `wizonesolutions:canonical`
    package routes traffic to the secured domain. Scroll to the **ENVIRONMENT VARIABLES**
    section, and replace `ROOT_URL` with your domain starting with the `https` protocol.
    Your `ROOT_URL` should look like this: `https://yourdomain.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: You might need to restart your server to make sure that all your settings take
    effect. Now go to your site, and you will see that you are automatically directed
    to a properly secured version of your site!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is straightforward. We learned how to deploy our application to
    a production server hosted by modulus.io. Also, we learned how to set up our Modulus
    project to a production quality database server provided by Compose. We chose
    Compose over Modulus because we can set up oplog tailing for Meteor through it.
    To help us track application errors, we installed Kadira. Also, we learned how
    to set up an SSL certificate for our server to secure our site further. With this
    knowledge, we can build production quality web applications.
  prefs: []
  type: TYPE_NORMAL
