- en: Chapter 6. Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。部署
- en: 'This chapter will cover the steps needed to make our web application live.
    Also, you will learn how to set up an SSL certificate and how to track errors
    occurring in production actively. This chapter will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍使我们的网络应用程序上线所需的步骤。您还将学习如何设置 SSL 证书以及如何积极跟踪生产中发生的错误。本章将涵盖以下主题：
- en: Setting up Modulus.io
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Modulus.io
- en: Setting up Compose.io
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Compose.io
- en: Automatic error tracking
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动错误跟踪
- en: Setting up an SSL certificate
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 SSL 证书
- en: Setting up Modulus
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Modulus
- en: Modulus is currently the best place to host a Meteor project. Why? It is easy
    to set up and maintain. While there are several other services where we can obtain
    the same results, every single one of them requires more expertise with servers
    and a considerable amount of time on your end. We are not developing a server.
    We are developing an application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Modulus 目前是托管 Meteor 项目的最佳场所。为什么？它易于设置和维护。虽然还有其他几个服务可以提供相同的结果，但每个都需要更多的服务器专业知识，并且您需要投入相当多的时间。我们不是在开发服务器。我们是在开发应用程序。
- en: Modulus.io provides support for sticky sessions, web sockets, and free SSL endpoints.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Modulus.io 提供了对粘性会话、WebSockets 和免费 SSL 端点的支持。
- en: Keep in mind that Meteor's Galaxy hosting service is going to be released soon
    and will undoubtedly become the best place to host a Meteor web application. Until
    then, Modulus is the way to go.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Meteor 的 Galaxy 主机服务即将发布，并将无疑成为托管 Meteor 网络应用程序的最佳场所。在此之前，Modulus 是最佳选择。
- en: 'Let''s start by creating a free account at [http://modulus.io](http://modulus.io):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在 [http://modulus.io](http://modulus.io) 创建一个免费账户开始：
- en: '![Setting up Modulus](img/00005.jpeg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Modulus](img/00005.jpeg)'
- en: 'Next, you need to install the `demeteorizer` tool and the `modulus CLI` tool.
    Run the following commands in your terminal:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要安装 `demeteorizer` 工具和 `modulus CLI` 工具。在您的终端中运行以下命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This did not work! If your `npm install` command fails, then you need to install
    `node` and `npm`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这没有工作！如果您的 `npm install` 命令失败，那么您需要安装 `node` 和 `npm`。
- en: 'To make sure that we install `npm` properly, we need to add `homebrew` first.
    Install this by running this command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们正确安装 `npm`，我们首先需要添加 `homebrew`。通过运行以下命令进行安装：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once this is done, run this command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，运行以下命令：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When this command finishes installing everything, we will have both `node` and
    `npm` available globally from our command line.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个命令完成所有安装后，我们将在命令行中全局可用 `node` 和 `npm`。
- en: 'Now we can install both `demeteorizer` and `modulus` easily:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以轻松安装 `demeteorizer` 和 `modulus`：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Excellent. Now we have all the tools that we need. Let''s create a new project
    (if you want to feel like a pro, you can use the CLI too):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 优秀。现在我们拥有了所有需要的工具。让我们创建一个新的项目（如果您想感觉像专业人士，您也可以使用 CLI）：
- en: '![Setting up Modulus](img/00006.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Modulus](img/00006.jpeg)'
- en: Make sure to select **Node.JS** as the runtime environment for the project and
    set the size of memory of the servo to **192MB**. If you find there is a lot of
    traffic coming in, you can increase the memory of the server at any time to scale
    your application easily.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 确保选择项目的运行环境为 **Node.JS** 并将服务器的内存大小设置为 **192MB**。如果您发现有很多流量进入，您可以在任何时候增加服务器的内存以轻松扩展应用程序。
- en: '![Setting up Modulus](img/00007.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Modulus](img/00007.jpeg)'
- en: 'Once you have created your servo, go to the **ADMINISTRATION** tab:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 创建您的服务器后，转到 **管理** 选项卡：
- en: '![Setting up Modulus](img/00008.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Modulus](img/00008.jpeg)'
- en: 'Now copy the URL that has been generated for the project found next to the
    **Your Project URL** text:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在复制位于 **您的项目 URL** 文本旁边的项目生成的 URL：
- en: '![Setting up Modulus](img/00009.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Modulus](img/00009.jpeg)'
- en: 'Scroll all the way to the end of the page to the **ENVIRONMENT VARIABLES**.
    The first thing that we need to do is set the `ROOT_URL` environment variable.
    Paste the project URL here. Make sure it has the `https` protocol. Here, we are
    taking advantage of Modulus'' secure SSL endpoint. The `wizonesolutions:canonical`
    package will make sure that all routes will hit our `ROOT_URL`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 将页面滚动到最底部的 **环境变量**。我们需要做的第一件事是设置 `ROOT_URL` 环境变量。在此粘贴项目 URL。确保它具有 `https` 协议。在这里，我们正在利用
    Modulus 的安全 SSL 端点。`wizonesolutions:canonical` 包将确保所有路由都将击中我们的 `ROOT_URL`：
- en: '![Setting up Modulus](img/00010.jpeg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Modulus](img/00010.jpeg)'
- en: Next, we need to set up our database. We cannot deploy this yet because the
    application is not aware of where it is supposed to save information.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要设置我们的数据库。我们无法部署此应用程序，因为应用程序不知道它应该在哪里保存信息。
- en: Setting up Compose
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Compose
- en: Although Modulus.io offers MongoDB hosting, Modulus does not grant access to
    Meteor's **oplog tailing** feature and does not have any support for multiple
    replica sets. Both these features are must-haves for production and this is why.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Modulus.io提供MongoDB托管服务，但Modulus并不提供对Meteor的**oplog tailing**功能的访问权限，也没有对多个副本集的支持。这两个功能对于生产环境来说是必不可少的，原因如下。
- en: A MongoDB Replica Set is an exact copy of your database. When you first create
    a database in Compose, you are automatically given a primary Replica Set with
    a secondary Replica Set to support it. Since failures happen, the secondary Replica
    Set exists to replace the primary replica set immediately when the primary fails.
    In the database world, this is known as data redundancy.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB副本集是您数据库的精确副本。当您在Compose中首次创建数据库时，您会自动获得一个主副本集和一个辅助副本集来支持它。由于故障是不可避免的，辅助副本集的存在是为了在主副本集失败时立即替换它。在数据库领域，这被称为数据冗余。
- en: This layer of security adds an interesting problem; how do the secondary databases
    know about the changes that are happening to the primary? The operations log,
    or oplog for short, is a special collection that Mongo uses to record all the
    changes that are being made to the database. These changes are read by the Replica
    Sets to reflect all necessary changes.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这层安全性带来了一个有趣的问题；辅助数据库如何知道主数据库正在发生的变化？操作日志，简称oplog，是Mongo用于记录对数据库所做的所有更改的特殊集合。这些更改由副本集读取，以反映所有必要的更改。
- en: Great, now let's understand how Meteor uses the oplog. Meteor's default `poll`
    and `diff` method of watching changes in the database is slow. It works by comparing
    changes between the database and the client every 10 seconds. This creates multiple
    unnecessary hits on your database by default and is not fast (since a change can
    occur 9 seconds before Meteor looks for changes) as well. To make Meteor perform
    better, the Meteor team tapped into Mongo's oplog. By listening for changes in
    Mongo's oplog, Meteor knows exactly when and which changes to push to the client.
    This is called oplog tailing.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，现在让我们了解Meteor如何使用oplog。Meteor默认的`poll`和`diff`方法用于监视数据库中的更改速度较慢。它通过每10秒比较数据库和客户端之间的更改来实现。这默认会在您的数据库上创建多次不必要的访问，并且速度不快（因为更改可能在Meteor寻找更改之前9秒发生）。为了使Meteor表现更好，Meteor团队利用了Mongo的oplog。通过监听Mongo的oplog中的更改，Meteor可以确切地知道何时以及哪些更改需要推送到客户端。这被称为oplog
    tailing。
- en: Oplog tailing drastically improves Meteor's reactivity performance by effectively
    tailing Mongo's operations log. It is guaranteed that a production app will not
    run smoothly without taking advantage of this feature.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Oplog tailing通过有效地跟踪Mongo的操作日志，极大地提高了Meteor的反应性能。保证没有利用这个功能的实际生产应用将无法顺利运行。
- en: 'Create your account with `compose.io`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`compose.io`创建您的账户：
- en: '![Setting up Compose](img/00011.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![设置Compose](img/00011.jpeg)'
- en: 'Now create a new MongoDB:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个新的MongoDB：
- en: '![Setting up Compose](img/00012.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![设置Compose](img/00012.jpeg)'
- en: 'Now click the **Users** tab. Here, we need to add a user that will have access
    to the database and the oplog. This is the user that Modulus will use. In the
    following example, we are setting the user to `root`, the password to `root`,
    and `oplog access` to `true`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击**用户**标签页。在这里，我们需要添加一个可以访问数据库和oplog的用户。这就是Modulus将使用的用户。在以下示例中，我们将用户设置为`root`，密码为`root`，并将`oplog
    access`设置为`true`：
- en: '![Setting up Compose](img/00013.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![设置Compose](img/00013.jpeg)'
- en: 'Click on the **Admin** tab. Copy the database URI that you see displayed under
    **Replica Set URI**:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**管理**标签页。复制显示在**副本集URI**下的数据库URI：
- en: '![Setting up Compose](img/00014.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![设置Compose](img/00014.jpeg)'
- en: Notice the `<user>` and `<password>` sections of the string. We are going to
    replace these fields with the user credentials that we had defined previously.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意字符串中的`<user>`和`<password>`部分。我们将用之前定义的用户凭据替换这些字段。
- en: 'Go back to Modulus.io and visit the project''s **ADMINISTRATION** page. Scroll
    to the **ENVIRONMENT VARIABLES** section. Here, we need to add the URI that we
    had just copied in to two different variables: `MONGO_URL` and `MONGO_OPLOG_URL`.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Modulus.io并访问项目的**管理**页面。滚动到**环境变量**部分。在这里，我们需要将刚刚复制的URI添加到两个不同的变量中：`MONGO_URL`和`MONGO_OPLOG_URL`。
- en: 'The `MONGO_URL` will look like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`MONGO_URL`将看起来像这样：'
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that you can remove the query parameters (anything after and including
    the question mark).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意您可以删除查询参数（问号及其之后的内容）。
- en: 'The `MONGO_OPLOG_URL` will look like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`MONGO_OPLOG_URL`将看起来像这样：'
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice that we have modified the information after the trailing slash to `/local?authSource=online_shop`
    where `online_shop` is the name of the database.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们在尾随斜杠之后修改了信息，将其修改为 `/local?authSource=online_shop`，其中 `online_shop` 是数据库名称。
- en: Excellent! This is the last time we will have to configure anything for our
    project's deployment. Now we can use the `modulus` CLI to deploy.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 极好！这是我们最后一次为项目部署配置任何内容。现在我们可以使用 `modulus` CLI 进行部署。
- en: 'Go to your terminal and run the following command to log in to your user:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 前往您的终端并运行以下命令以登录到您的用户：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you use your GitHub account to create your Modulus account, then pass the
    `github` flag:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 GitHub 账户创建您的 Modulus 账户，那么请传递 `github` 标志：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Follow the instructions on the command line. Once you are logged in, you will
    need to make sure that you are in your Meteor project''s `root` directory (where
    you run the Meteor command). From here, run the following command to deploy to
    your new server:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 按照命令行的说明操作。一旦登录，请确保您位于 Meteor 项目的 `root` 目录（运行 Meteor 命令的地方）。从这里，运行以下命令以部署到您的新服务器：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Modulus will ask which project you want to deploy to and begin. What does Modulus
    do? It first identifies that the project is a Meteor project, then it runs **demeteorizer**
    to convert the project into a common Node.js app. This app is then deployed to
    the server and automatically initiated.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Modulus 会询问您要将项目部署到哪个项目，并开始部署。Modulus 做什么？它首先确定项目是一个 Meteor 项目，然后运行 **demeteorizer**
    将项目转换为通用的 Node.js 应用程序。然后，该应用程序被部署到服务器并自动启动。
- en: Setting up Kadira
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Kadira
- en: Perfect! Now that we can deploy production quality web applications, we need
    to understand how to identify issues with them. This is where `kadira.io` comes
    into the picture. Kadira is a Meteor-specific performance and error-monitoring
    tool. It will collect `Meteor.Errors` triggered on both the client and the server.
    It will also show performance data for publishers and subscribers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 完美！现在我们可以部署生产质量的网络应用程序了，我们需要了解如何识别它们的问题。这就是 `kadira.io` 发挥作用的地方。Kadira 是一个针对
    Meteor 的性能和错误监控工具。它将收集客户端和服务器上触发的 `Meteor.Errors`。它还将显示发布者和订阅者的性能数据。
- en: 'Kadira does this and more, and the starting plan is completely free. Let''s
    begin by signing up. After you have signed up, you need to create a new app:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Kadira 可以做更多的事情，而且起始计划完全是免费的。让我们先注册一下。注册后，您需要创建一个新的应用程序：
- en: '![Setting up Kadira](img/00015.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Kadira](img/00015.jpeg)'
- en: 'Decide a name for the app, and enter the same in the field, and click on **Create
    App**:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为应用程序决定一个名称，并在字段中输入相同的名称，然后点击**创建应用程序**：
- en: '![Setting up Kadira](img/00016.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Kadira](img/00016.jpeg)'
- en: 'Once created, you will see a view like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 创建后，您将看到如下视图：
- en: '![Setting up Kadira](img/00017.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Kadira](img/00017.jpeg)'
- en: 'To finish, you will need to copy the code in step 2 and install the `meteorhacks:kadira`
    and `meteorhacks:zones` packages:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 完成，您需要复制步骤 2 中的代码并安装 `meteorhacks:kadira` 和 `meteorhacks:zones` 包：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `meteorhacks:zones` package improves the description of the errors from
    the client side. Kadira will take advantage of this package automatically. It
    is important to note that the `meteorhacks:zones` package is optional because
    it is still in active development and can cause strange behavior in Meteor. Now,
    let''s create a configuration file for Kadira:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`meteorhacks:zones` 包改进了客户端的错误描述。Kadira 将自动利用这个包。需要注意的是，`meteorhacks:zones`
    包是可选的，因为它仍在积极开发中，可能会在 Meteor 中引起奇怪的行为。现在，让我们为 Kadira 创建一个配置文件：'
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We are done! With this simple configuration, we can now easily track application
    errors and more on Kadira:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了！使用这个简单的配置，我们现在可以轻松地在 Kadira 上跟踪应用程序错误等：
- en: '![Setting up Kadira](img/00018.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Kadira](img/00018.jpeg)'
- en: You will notice the **Errors** tab on the top-left side of the screen. This
    tab will show us a list of all the errors that will occur in our application.
    Have a look at `meteorhacks` and their academy to learn more about optimizing
    your Meteor web application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您会在屏幕的左上角注意到**错误**标签。此标签将显示我们应用程序中可能发生的所有错误列表。查看 `meteorhacks` 和他们的学院以了解更多关于优化您的
    Meteor 网络应用程序的信息。
- en: Setting up an SSL certificate
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 SSL 证书
- en: '**SSL**, or **Secure Sockets Layer**, is a technology that creates an encrypted
    connection between clients and the server. This is necessary if we want to ensure
    that the data transferred to our server is encrypted; this includes data such
    as credit card information.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**SSL**，或**安全套接字层**，是一种在客户端和服务器之间创建加密连接的技术。如果我们想确保传输到我们服务器的数据是加密的，这是必要的；这包括信用卡信息等数据。'
- en: Setting up SSL can be painful because it requires some command-line knowledge.
    We like to buy our SSL certificates from [https://www.namecheap.com/](https://www.namecheap.com/)
    because they are cheap and they get the job done.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 SSL 可能会很痛苦，因为它需要一些命令行知识。我们喜欢从 [https://www.namecheap.com/](https://www.namecheap.com/)
    购买我们的 SSL 证书，因为它们便宜且能完成任务。
- en: 'The cheapest SSL certificate that you can get is **PositiveSSL**; you can find
    the offering at this endpoint: [https://www.namecheap.com/security/ssl-certificates/single-domain.aspx](https://www.namecheap.com/security/ssl-certificates/single-domain.aspx).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以获得的最低成本的 SSL 证书是**PositiveSSL**；您可以在以下端点找到该产品：[https://www.namecheap.com/security/ssl-certificates/single-domain.aspx](https://www.namecheap.com/security/ssl-certificates/single-domain.aspx)。
- en: 'After buying the certificate, you will need to generate a **Certificate Signing
    Request** (**CSR**). Let''s do this. You will be first redirected to your **Purchase
    Summary**. Click on **Manage**:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在购买证书后，您需要生成一个**证书签名请求**（**CSR**）。让我们来做这件事。您首先将被重定向到**购买摘要**页面。点击**管理**：
- en: '![Setting up an SSL certificate](img/00019.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![设置 SSL 证书](img/00019.jpeg)'
- en: 'Now click **Activate Now** and leave the window open:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击**立即激活**并保持窗口打开：
- en: '![Setting up an SSL certificate](img/00020.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![设置 SSL 证书](img/00020.jpeg)'
- en: 'Next, open up a terminal at your project directory, and create a `/.csr` directory
    by running:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在您的项目目录中打开终端，并运行以下命令创建一个 `/.csr` 目录：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let''s use `openssl` to create our CSR. Run this command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用 `openssl` 创建我们的 CSR。运行以下命令：
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will give you a prompt for your site contact information; all the information
    fields must be filled out with your company or your information. The most important
    field is the **Common name** field, which must be `www.yourdomain.com`. Including
    the `www` will secure both `www.yourdomain.com` and `yourdomain.com`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提示您输入网站联系信息；所有信息字段都必须填写您的公司或您的信息。最重要的字段是**通用名称**字段，它必须是 `www.yourdomain.com`。包括
    `www` 将同时保护 `www.yourdomain.com` 和 `yourdomain.com`。
- en: 'The command has created a `private.key` file and a `server.csr` file; you can
    check this by running:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 命令已创建一个 `private.key` 文件和一个 `server.csr` 文件；您可以通过运行以下命令来检查：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Keep `private.key` somewhere safe! You will need this later. Now open the `server.csr`
    file with any text editor such as Sublime, Atom, or, if you prefer something more
    basic, you can use nano or vim. You can view the contents of the current directory
    folder by running:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请将 `private.key` 放在一个安全的地方！您稍后需要这个文件。现在使用任何文本编辑器（如 Sublime、Atom）或如果您更喜欢更基础的编辑器，可以使用
    nano 或 vim 打开 `server.csr` 文件。您可以通过运行以下命令来查看当前目录文件夹的内容：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Copy all the text in this file. This should look like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 复制此文件中的所有文本。它应该看起来像这样：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Go to namecheap, and change the select box to **Other** and paste the CSR to
    namecheap''s **Enter csr** textarea field. This should look like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 namecheap，将选择框更改为**其他**并将 CSR 粘贴到 namecheap 的**输入 csr**文本区域字段。它应该看起来像这样：
- en: '![Setting up an SSL certificate](img/00021.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![设置 SSL 证书](img/00021.jpeg)'
- en: 'Now fill out the approver information:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在填写审批人信息：
- en: '![Setting up an SSL certificate](img/00022.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![设置 SSL 证书](img/00022.jpeg)'
- en: 'Make sure that the e-mail you select is active and under your control! If you
    cannot receive e-mails from the e-mail that you have selected, you will not be
    able to apply the SSL certificate to your webapp! In the next screen, simply submit
    your order and wait for the **SSL Certificate Validation** e-mail to arrive:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您选择的电子邮件是活跃的并且受您控制！如果您无法从您选择的电子邮件接收电子邮件，您将无法将 SSL 证书应用到您的 webapp！在下一屏，只需提交您的订单并等待**SSL
    证书验证**电子邮件到达：
- en: '![Setting up an SSL certificate](img/00023.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![设置 SSL 证书](img/00023.jpeg)'
- en: 'Copy your validation code, and click on the **here** link in the e-mail. This
    will take you to another site where you need to paste the validation code you
    copied and click on **Next**:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 复制您的验证码，然后在电子邮件中的**此处**链接上点击。这将带您到另一个网站，您需要粘贴复制的验证码并点击**下一步**：
- en: '![Setting up an SSL certificate](img/00024.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![设置 SSL 证书](img/00024.jpeg)'
- en: 'Close the window, and wait until you receive a new e-mail with a ZIP file.
    Download the ZIP file and unzip it. This will contain four files: `AddTrustExternalCARoot.crt`,
    `COMODORSAAddTrustCA.crt`, `COMODORSADomainValidationSecureServerCA.crt`, and
    `www_yourdomain_com.crt`.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭窗口，等待您收到一个包含 ZIP 文件的新的电子邮件。下载 ZIP 文件并将其解压。这将包含四个文件：`AddTrustExternalCARoot.crt`、`COMODORSAAddTrustCA.crt`、`COMODORSADomainValidationSecureServerCA.crt`
    和 `www_yourdomain_com.crt`。
- en: 'Now, we need to use these files to create a Certificate Authority Bundle for
    Modulus. This is, basically, a concatenated version of all our certificates. Generate
    this by issuing this command in your command line where the certificates are located:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要使用这些文件为Modulus创建一个证书颁发机构包。这基本上是我们所有证书的串联版本。通过在证书所在命令行中运行此命令来生成它：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This command will produce a new `certificate_bundle.crt` directory with all
    the certificates concatenated.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将生成一个包含所有证书的`certificate_bundle.crt`目录。
- en: 'Now browse to the Modulus.io administration page; make sure that you have already
    pointed your custom URL to your instance of Modulus by adding your domain name
    to the custom domains list. Click on the plus icon:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，浏览到Modulus.io的管理页面；确保您已经通过将域名添加到自定义域名列表中，将自定义URL指向您的Modulus实例。点击加号图标：
- en: '![Setting up an SSL certificate](img/00025.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![设置SSL证书](img/00025.jpeg)'
- en: 'Now open the `private.key` file that was generated together with the CSR, and
    copy the entire text inside the file. Paste the information to the **Private Key**
    textarea. Then open the `certificate_bundle.crt` file, copy the information here,
    and paste it to the **Certificate** textarea:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开与CSR一起生成的`private.key`文件，复制文件内的全部文本。将信息粘贴到**私钥**文本区域。然后打开`certificate_bundle.crt`文件，复制信息到这里，并将其粘贴到**证书**文本区域：
- en: '![Setting up an SSL certificate](img/00026.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![设置SSL证书](img/00026.jpeg)'
- en: Make sure to point your certificate to the `www` domain and the `non-www` domain.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 确保将您的证书指向`www`域名和非`www`域名。
- en: 'Now to complete the process, we need to make sure that the `wizonesolutions:canonical`
    package routes traffic to the secured domain. Scroll to the **ENVIRONMENT VARIABLES**
    section, and replace `ROOT_URL` with your domain starting with the `https` protocol.
    Your `ROOT_URL` should look like this: `https://yourdomain.com`.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为了完成这个过程，我们需要确保`wizonesolutions:canonical`包将流量路由到受保护的域名。滚动到**环境变量**部分，并将`ROOT_URL`替换为以`https`协议开始的您的域名。您的`ROOT_URL`应如下所示：`https://yourdomain.com`。
- en: You might need to restart your server to make sure that all your settings take
    effect. Now go to your site, and you will see that you are automatically directed
    to a properly secured version of your site!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要重新启动服务器以确保所有设置生效。现在访问您的网站，您将看到您被自动重定向到您网站的受保护版本！
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter is straightforward. We learned how to deploy our application to
    a production server hosted by modulus.io. Also, we learned how to set up our Modulus
    project to a production quality database server provided by Compose. We chose
    Compose over Modulus because we can set up oplog tailing for Meteor through it.
    To help us track application errors, we installed Kadira. Also, we learned how
    to set up an SSL certificate for our server to secure our site further. With this
    knowledge, we can build production quality web applications.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容直接明了。我们学习了如何将我们的应用程序部署到由modulus.io托管的托管服务器上。我们还学习了如何将我们的Modulus项目设置到由Compose提供的生产质量数据库服务器上。我们选择Compose而不是Modulus，因为我们可以通过它设置Meteor的oplog
    tailing。为了帮助我们跟踪应用程序错误，我们安装了Kadira。我们还学习了如何为我们的服务器设置SSL证书以进一步保护我们的网站。有了这些知识，我们可以构建生产质量的Web应用程序。
