["```js\nExt.define('Examples.plugin.ClearButton', {\n  alias : 'plugin.clearbutton',\n\n  hideClearButtonWhenEmpty : true,\n  hideClearButtonWhenMouseOut : true,\n  animateClearButton : true,\n  clearOnEscape : true,\n  clearButtonCls : 'ext-ux-clearbutton',\n  textField : null,\n  animateWithCss3 : false,\n\n  constructor : function(cfg) {\n    Ext.apply(this, cfg);\n\n    this.callParent(arguments);\n  },\n\n  init : function(textField) {\n    this.textField = textField;\n    if (!textField.rendered) {\n      textField.on('afterrender', this.handleAfterRender, this);\n    }\n    else {\n      this.handleAfterRender();\n    }\n  }\n```", "```js\nhandleAfterRender : function(textField) {\n  this.isTextArea = (this.textField.inputEl.dom.type.toLowerCase() == 'textarea');\n  this.createClearButtonEl();\n  this.addListeners();\n  this.repositionClearButton();\n  this.updateClearButtonVisibility();\n  this.addEscListener();\n}\n```", "```js\ncreateClearButtonEl : function() {\n  var animateWithClass = this.animateClearButton &&this.animateWithCss3;\n  this.clearButtonEl = this.textField.bodyEl.createChild({\n    tag : 'div',\n    cls : this.clearButtonCls\n  });\n  if (this.animateClearButton) {\n    this.animateWithCss3 = this.supportsCssTransition(this.clearButtonEl);\n  }\n  if (this.animateWithCss3) {\n    this.clearButtonEl.addCls(this.clearButtonCls + '-off');\n  }\n  else {\n    this.clearButtonEl.setStyle('visibility', 'hidden');\n  }\n}\n```", "```js\nsupportsCssTransition: function(el) {\n  var styles = ['transitionProperty', 'WebkitTransitionProperty','MozTransitionProperty', 'OTransitionProperty','msTransitionProperty', 'KhtmlTransitionProperty'];\n\n  var style = el.dom.style;\n  for(var i = 0, length = styles.length; i < length; ++i) {\n    if(style[styles[i]] !== 'undefined') { \n      return true;\n    }\n  }\n  return false;\n}\n```", "```js\naddListeners: function() { \n  var textField = this.textField;\n  var bodyEl = textField.bodyEl;\n  bodyEl.on('mouseover', this.handleMouseOverInputField, this);\n  bodyEl.on('mouseout', this.handleMouseOutOfInputField, this);\n\n  textField.on('destroy', this.handleDestroy, this);\n  textField.on('resize', this.repositionClearButton, this);\n  textField.on('change', function() {\n    this.repositionClearButton();\n    this.updateClearButtonVisibility();\n  }, this);\n\n  var clearButtonEl = this.clearButtonEl;\n  clearButtonEl.on('mouseover', this.handleMouseOverClearButton,this);\n  clearButtonEl.on('mouseout', this.handleMouseOutOfClearButton,this);\n  clearButtonEl.on('mousedown', this.handleMouseDownOnClearButton,this);\n    clearButtonEl.on('mouseup', this.handleMouseUpOnClearButton,this);\n  clearButtonEl.on('click', this.handleMouseClickOnClearButton,this);\n}\n```", "```js\nhandleMouseOverInputField: function(event, htmlElement, object) {\n  this.clearButtonEl.addCls(this.clearButtonCls +'-mouse-over-input');\n  if (event.getRelatedTarget() == this.clearButtonEl.dom) {\n    this.clearButtonEl.removeCls(this.clearButtonCls +'-mouse-over-button');\n    this.clearButtonEl.removeCls(this.clearButtonCls +'-mouse-down');\n  }\n  this.updateClearButtonVisibility();\n},\nhandleMouseOutOfInputField: function(event, htmlElement, object) {\n  this.clearButtonEl.removeCls(this.clearButtonCls +'-mouse-over-input');\n  if (event.getRelatedTarget() == this.clearButtonEl.dom) { \n    this.clearButtonEl.addCls(this.clearButtonCls +'-mouse-over-button');\n  }\n  this.updateClearButtonVisibility();\n}\n```", "```js\nhandleDestroy: function() {\n  this.clearButtonEl.destroy();\n}\n```", "```js\nhandleMouseOverClearButton: function(event, htmlElement, object) {\n  event.stopEvent();\n  if (this.textField.bodyEl.contains(event.getRelatedTarget())) {\n    return;\n  }\n  this.clearButtonEl.addCls(this.clearButtonCls +'-mouse-over-button');\n  this.updateClearButtonVisibility();\n},\n\nhandleMouseOutOfClearButton: function(event, htmlElement, object){\n  event.stopEvent();\n  if (this.textField.bodyEl.contains(event.getRelatedTarget())) { \n    return;\n  }\n  this.clearButtonEl.removeCls(this.clearButtonCls +'-mouse-over-button');\n    this.clearButtonEl.removeCls(this.clearButtonCls +'-mouse-down');\n  this.updateClearButtonVisibility();\n},\n\nhandleMouseDownOnClearButton: function(event, htmlElement,object){\n  if (!this.isLeftButton(event)) {\n    return;\n  }\n  this.clearButtonEl.addCls(this.clearButtonCls +'-mouse-down');\n},\n\nhandleMouseUpOnClearButton: function(event, htmlElement, object) {\n  if (!this.isLeftButton(event)) {\n    return;\n  }\n  this.clearButtonEl.removeCls(this.clearButtonCls +'-mouse-down');\n},\n\nhandleMouseClickOnClearButton: function(event, htmlElement, object) {\n  if (!this.isLeftButton(event)) {\n    return;\n  }\n  this.textField.setValue('');\n  this.textField.focus();\n}\n```", "```js\nrepositionClearButton: function() {\n  var clearButtonEl = this.clearButtonEl;\n  if (!clearButtonEl) {\n    return;\n  }\n  var clearButtonPosition = this.calculateClearButtonPosition(this.textField);\n  clearButtonEl.dom.style.right = clearButtonPosition.right +'px';\n  clearButtonEl.dom.style.top = clearButtonPosition.top + 'px';\n}\n```", "```js\ncalculateClearButtonPosition: function(textField) {\n  var positions = textField.inputEl.getBox(true, true);\n  var top = positions.y;\n  var right = positions.x;\n  if (this.fieldHasScrollBar()) {\n    right += Ext.getScrollBarWidth();\n  }\n  if (this.textField.triggerWrap) {\n    right += this.textField.getTriggerWidth();\n  }\n  return {\n    right: right,\n    top: top\n  };\n}\n```", "```js\nfieldHasScrollBar: function() {\n  if (!this.isTextArea) {\n    return false;\n  }\n\n  var inputEl = this.textField.inputEl;\n  var overflowY = inputEl.getStyle('overflow-y');\n  if (overflowY == 'hidden' || overflowY == 'visible') {\n    return false;\n  }\n  if (overflowY == 'scroll') {\n    return true;\n  }\n  if (inputEl.dom.scrollHeight <= inputEl.dom.clientHeight) {\n    return false;\n  }\n  return true;\n}\n```", "```js\nupdateClearButtonVisibility: function() {\n  var oldVisible = this.isButtonCurrentlyVisible();\n  var newVisible = this.shouldButtonBeVisible();\n\n  var clearButtonEl = this.clearButtonEl;\n  if (oldVisible != newVisible) {\n    if(this.animateClearButton && this.animateWithCss3) {\n      this.clearButtonEl.removeCls(this.clearButtonCls +(oldVisible ? '-on' : '-off'));\n      clearButtonEl.addCls(this.clearButtonCls + (newVisible ? '-on' : '-off'));\n    }\n    else {\n      clearButtonEl.stopAnimation();\n      clearButtonEl.setVisible(newVisible,this.animateClearButton);\n    }\n\n    clearButtonEl.setStyle('background-color',this.textField.inputEl.getStyle('background-color'));\n\n    if (!(this.isTextArea && Ext.isGecko) && !Ext.isIE) {\n      var deltaPaddingRight = clearButtonEl.getWidth() - this.clearButtonEl.getMargin('l');\n      var currentPaddingRight = this.textField.inputEl.getPadding('r');\n      var factor = (newVisible ? +1 : -1);\n      this.textField.inputEl.dom.style.paddingRight = (currentPaddingRight + factor * deltaPaddingRight) + 'px';\n    }\n  }\n}\n```", "```js\nisButtonCurrentlyVisible: function() {\n  if (this.animateClearButton && this.animateWithCss3) {\n    return this.clearButtonEl.hasCls(this.clearButtonCls + '-on');\n  } \n  var cachedVisible = Ext.core.Element.data(this.clearButtonEl.dom, 'isVisible');\n  if (typeof(cachedVisible) == 'boolean') {\n    return cachedVisible;\n  }\n  return this.clearButtonEl.isVisible();\n},\n\nshouldButtonBeVisible: function() {\n  if (this.hideClearButtonWhenEmpty && Ext.isEmpty(this.textField.getValue())) {\n\n    return false;\n  }\n\n  var clearButtonEl = this.clearButtonEl;\n\n  if (this.hideClearButtonWhenMouseOut && !clearButtonEl.hasCls(this.clearButtonCls + '-mouse-over-button') && !clearButtonEl.hasCls(this.clearButtonCls + '-mouse-over-input')) {\n\n    return false;\n  }\n\n  return true;\n}\n```", "```js\naddEscListener: function() {\n  if (!this.clearOnEscape) {\n    return;\n  }\n\n  this.textField.inputEl.on('keydown', function(e) {\n    if (e.getKey() == Ext.EventObject.ESC) {\n      if (this.textField.isExpanded) {\n        return;\n      }\n      Ext.Function.defer(this.textField.setValue, 1,this.textField, ['']);\n      e.stopEvent();\n    }\n  },\n  this);\n}\n```"]