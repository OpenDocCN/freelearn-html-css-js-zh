- en: Chapter 2. Cross-platform UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Cross-platform HUD progress indicator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In-app notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Screen Break Menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metro Style Tab Control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slideout Menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Titanium is not a write-once-and-run-anywhere application framework, but more
    of a write-once-and-modify-for-each-platform one. Nowhere is this more important
    than in the user interface of your app. Great user experiences involve making
    the user feel familiar and at the same time accentuate the device the app is running
    upon. Titanium does this by embracing both common and platform-specific UI widgets.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter will demonstrate how to create helpful UI widgets
    to create a unique cross-platform experience for your Enterprise users. Each recipe
    is designed to be easily branded and used within your existing Titanium Enterprise
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-platform HUD progress indicator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Heads Up Display** (**HUD**) interaction pattern, named after the UIKit
    `UIProgressHUD` component, is an effective way to provide progress information
    to your users. This is especially true for Enterprise mobile apps, as they typically
    are deeply integrated with backend systems. So the app does not appear sluggish
    or unresponsive while making these calls. It is recommended to use the `Waiting`
    or `Progress` indicators to provide feedback to the users. This recipe demonstrates
    how to use an `HUD` module to present a `Waiting` indicator to inform your user
    about the progress of long-running actions in your app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This chainable CommonJS `HUD` module, `hud.js`, provides a native iOS and Android
    progress indicator experience. This is a simple recipe demonstrating how to use
    the `HUD` module. You can use this example to easily incorporate the module into
    your Titanium project.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the HUD module to your project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Adding the `HUD` module to your project is easy. Simply copy the `hud.js` file
    into the `Resources` folder of your project, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the HUD module to your project](img/5343OT_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve added the `hud.js` file to your project, you need to use `require`
    to import the module into your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a sample window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To demonstrate the `HUD` module, we create a basic window with a single button.
    To do this, first we create a `Ti.UI.Window` and attach a button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Adding HUD listeners
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next in our example, we add a series of listeners. The following code block
    demonstrates how to add a listener, to be fired when the HUD window is closed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also listen to an `open` event, which will fire when the HUD window
    is opened:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `dblclick` event is fired when the user double taps on the HUD window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `hudTextChanged` event is fired whenever `updateMessage` is called to update
    the HUD window message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you are using the **Close Timer** functionality, it is helpful to know if
    your window is being closed by the timer or by some other method. To help determine
    this, you can subscribe to the `timerClose` event, as shown in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a HUD indicator
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can now use the button created earlier, to demonstrate how to show the HUD
    window. To the click handler of the button we've added logic to `load` the `HUD`
    module with the message text, `Please Wait...`. Then we call the `show` method,
    which displays the HUD window to the user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On Android, you might wish to hide the navigation bar so that the HUD window
    can take up the entire screen. If you don't hide the navigation bar, the `HUD`
    module will set the window title to the same text as provided for the HUD display
    message.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the HUD message
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: By calling the `updateMessage` function, you can update the HUD window text
    at any time. The following line demonstrates how to update the text from `Please
    Wait...` to `Still waiting...`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Closing the HUD window
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are two ways to close the `HUD` module window. The first and most common
    way is to call the `hide` function, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The second way to close the HUD window is to use the `addCloseTimer` function
    on the `HUD` module before the `show` function is called, as highlighted in the
    following snippet. In this example, the HUD window will close after 5,000 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `addCloseTimer` function is helpful in dealing with timeout situations.
    For example, when making network calls you might wish to abandon the process after
    five seconds so as not to keep the user waiting too long.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `HUD` module provides a series of functions to create, update, and maintain
    the HUD progress window. The following list provides a description of each method
    along with their associated functionalities:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `load` function: This is called to build the `Ti.UI.Window`, `Ti.UI.ActivityIndicator`,
    and `Ti.UI.Label`, that will later be used to display your progress indicator.
    Please note you will need to first call the `load` function, followed by the `show`
    function, to display the HUD window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `show` function: This displays the HUD window. Please note you first need
    to call the `load` method before calling `show`. If this is done out of sequence,
    the HUD window will not appear.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `updateMessage` function: To update the HUD label, you call this function,
    providing a string with the updated text to be displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `hide` function: Calling this will close the HUD window and remove all
    of the HUD objects created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `addCloseTimer` function: You use this function to set a timer that will
    close the HUD window after the provided duration (in milliseconds).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `removeCloseTimer` function: You use this function to close the timer that
    you set using `addCloseTimer`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `addEventListener` function: The HUD module supports several events as
    detailed in the next section. You can subscribe to these events using this function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `removeEventListener` function: Any events you have subscribed to, can
    be removed by calling this function. To remove an event, you need to provide the
    same name and callback arguments as you used while calling `addEventListener`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: All functions in the HUD module are chainable, similar to jQuery functions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In-app notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is often a requirement to alert your users that something has happened.
    Titanium allows you to use the `alert` function, just as you would do on the web.
    But, often this modal alert can be limiting and outside of your design requirements.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe walks through how to use the `NotifyUI` module to create cross-platform,
    branded notification windows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`NotifyUI` is a CommonJS module consisting of a single JavaScript file, `notify.js`,
    and a few image assets used for styling. You can control the styling of the module
    through configuration or by updating core image files, making it easy to fit your
    existing branding requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe is a simple demonstration on how to use the `NotifyUI` module. You
    can use this example to quickly incorporate the module into your Titanium project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshots show this recipe in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the NotifyUI module to your project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adding the `NotifyUI` module to your project is easy. Simply copy the `NotifyUI`
    folder into the `Resources` folder of your Titanium project, as highlighted in
    the following screenshot. This will install the CommonJS module and all supporting
    images.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the NotifyUI module to your project](img/5343OT_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `NotifyUI` folder must be copied to the `Resources` folder of your Titanium
    project in order for this recipe to work as designed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you''ve added the `NotifyUI` folder to your project, you need to use `require`
    to import the module into your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Creating a sample window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To demonstrate the `NotifyUI` module, we create a basic window with two buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Adding NotifyUI listeners
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next in our example, we add a series of listeners. The following code block
    demonstrates how to add a listener, to be fired when the `NotifyUI` notification
    window is closed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can also listen to `open` event, which will fire when the notification window
    is opened.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `dblclick` event is fired when the user double taps on the notification
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `textChanged` event is fired from the `NotifyUI` module whenever `updateMessage`
    is called to update the notification window message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you are using the Close Timer functionality, it is helpful to know if your
    window is being closed by the timer or by some other method. To help determine
    this, you can subscribe to the `timerClose` event, as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Showing a message window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can now use the button created earlier, to demonstrate how to show the notification
    window. To the click handler of the button we've added logic to `load` the module
    with the message text, `Hello World`, and the style, `complete`. Then we call
    the `show` method, which displays the notification window to the user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Updating a message
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'By calling the `updateMessage` function, you can update the notification text
    any time. The following demonstrates how to update the text from `Hello World`
    to `I''m a new message`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Closing a message window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are three ways to close the notification window. The first and most common
    way is to call the `hide` function, as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The second way to close the notification window is to use the `addCloseTimer`
    function before the `show` function is called, as shown in the following code
    block. In this example, the window will automatically close after 5,000 milliseconds
    (5 seconds).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The third and the final way to close the notification window is to have the
    user double tap on the message. This gesture will trigger the module to internally
    handle the close actions.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `NotifyUI` module provides a series of functions to create, update, and
    maintain the notification window. The following list provides a description of
    each method, along with their associated functionalities:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `load` function: This is called to build the `Ti.UI.Window`, `Ti.UI.Label`,
    and associated notification style, that will later be used to display your notification.
    Please note you will need to first call the `load` function, followed by the `show`
    function, to display the notification window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `show` function: This displays the notification window. Please note you
    first need to call the `load` method before calling `show`. If this is done out
    of sequence, the notification window will not appear. These sequenced operations
    provide the flexibility to separate the load and show operations. This can be
    important if you have several notification events in succession.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `updateMessage` function: To update the notification label, you call this
    function, providing it a string with the updated text to be displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `hide` function: Calling this will close the notification window and remove
    all the `NotifyUI` objects created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `addCloseTimer` function: You use this function to set a timer that will
    close the notification window after the provided duration (in milliseconds).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `removeCloseTimer` function: Using this you can close the timer that you
    set using `addCloseTimer`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `addEventListener` function: The `NotifyUI` module supports several events
    as detailed in the next section. You can subscribe to these events using this
    function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `removeEventListener` function: Any events you have subscribed to can be
    removed by calling this function. To remove an event, you need to provide the
    same arguments as you used while calling `addEventListener`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: A majority of the `NotifyUI` functions are chainable, providing a useable pattern
    similar to the one provided by jQuery.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Built-in message styles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `NotifyUI` module comes with the following built-in styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Complete**: This displays a window with a blue background and the default
    text, `Completed`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Built-in message styles](img/5343OT_02_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Error**: This displays a window with a red background and the default text,
    `Error`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Built-in message styles](img/5343OT_02_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Warning**: This displays a window with an orange background and the default
    text, `Warning`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Built-in message styles](img/5343OT_02_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Success**: This displays a window with a green background and the default
    text, `Success`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Built-in message styles](img/5343OT_02_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: All default message texts and text colors can be updated by providing the `message`
    and `messageColor` object properties to the `load` function call.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Screen Break Menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enterprise apps often contain a number of features. Providing a compelling way
    to display these features and submenus can be challenging. One unique navigation
    option is to implement a Screen Break Menu, similar to how iOS folders work. This
    navigation technique allows you to present additional information only when requested
    by the user.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will demonstrate how you can implement a cross-platform version
    of the Screen Break animation and link this effect to a menu view.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe walks through using the screen break interaction pattern to create
    additional space for an **Add Notes** field. You can easily tweak this recipe
    for more complex menu needs, such as implementing advanced options or an interactive
    help menu.
  prefs: []
  type: TYPE_NORMAL
- en: Menu when closed
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the menu is closed, all space is usable for other controls. The following
    image shows the Screen Break Menu in its closed state.
  prefs: []
  type: TYPE_NORMAL
- en: '![Menu when closed](img/5343OT_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The menu, when opened
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the menu is opened, the screen is split and the bottom section of the
    `Ti.UI.Window` is animated, exposing a menu area. The following example shows
    the Screen Break Menu, when opened, and displaying a `Ti.UI.TextArea` for taking
    notes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The menu, when opened](img/5343OT_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the Screen Break Menu to your project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Screen Break Menu is a CommonJS module consisting of a single JavaScript
    file. To install it, simply copy the `breakmenu.js` file into your project, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Screen Break Menu to your project](img/5343OT_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you''ve added the `breakmenu.js` file to your project, you need to use
    `require` to import the module into your code, as the following snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Creating the sample window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To demonstrate the Screen Break Menu, we create a basic window with a single
    button. When this button is clicked, the Screen Break Menu is activated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Adding Screen Break Menu listeners
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next in our example, we add a series of listeners. The following code block
    demonstrates how to add a listener, to be fired when the Screen Break Menu starts,
    to show the menu.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `broken` event is fired when the menu is fully displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `closing` event is fired when the menu starts to close. This will take a
    second to fully close.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Only when the menu is fully hidden, the `closed` event is fired.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a notes menu object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Displaying a `Ti.UI.View` is at the core of the Screen Break Menu. In this example,
    we create a notes menu object containing `Ti.UI.View` and `Ti.UI.TextArea` controls.
    These controls are used to present the user with an area for entering notes, when
    the Screen Break Menu is visible.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Showing the menu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the sample's button is pressed, the `breakScreen` function is called to
    show the Screen Break Menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `breakScreen` function takes the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter is the `Ti.UI.Window` that you wish to split in order to
    reveal the menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter is the `Ti.UI.View` that you wish to use as your menu.
    Please note this can only be a `Ti.UI.View` object type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The final parameter is the `settings` object. This object contains the following
    properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`breakStartPoint`: The position measured from the top of the screen indicating
    where the break should start.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bottomViewHeight`: This property decides the height of the bottom-half section.
    This value determines the size of the bottom half of the screen that is animated
    down the screen.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slideFinishPoint`: The position from the top of the screen indicating where
    the bottom view should slide to.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need to adjust these `settings` properties to meet your screen layout
    requirements.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following code block implements all the three properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Metro Style Tab Control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A tabbed interface is an effective way to organize your Enterprise Titanium
    app. With their rising prevalence in smart phones and well designed, compelling
    UI/UX consumer applications, the expectation level for UI-rich Enterprise application
    is increasing among Enterprise users. Your average Enterprise user is now starting
    to expect a richer experience than provided in a traditional tabbed interface.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates how to create a unique cross-platform experience using
    the **Metro Style Tab Control** for your Enterprise app. This control allows you
    to use the tabbed interaction pattern in a compelling new way while still meeting
    your branding or organizational styling requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe walks through the process of creating a Metro Style Tab Control
    to organize your app's navigation. The Tab Control is designed to be easily configured
    to meet your corporate branding and display requirements.
  prefs: []
  type: TYPE_NORMAL
- en: The next example shows a simple 3-tab navigator at the top of our cross-platform
    app. The following sections will walk you through the process of creating this
    sample, and demonstrate how to configure the control to meet your specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the Tab Control to your project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Metro Tab Control` is a CommonJS module, consisting of a single JavaScript
    file. To install, simply copy the `tabcontrol.js` file into your project, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Tab Control to your project](img/5343OT_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you''ve added the `tabcontrol.js` file to your project, you need to use
    `require` to import the module into your code, as the following snippet demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Creating a sample window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To demonstrate the Metro Style Tab Control, create a `Ti.UI.Window` to attach
    this custom control with three tabs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Creating the settings object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When creating the Tab Control, you need a `tabSettings` object and an array
    of tabs. The `tabSettings` object contains all the properties needed to create
    the Tab Control. The tabs are then added to the control. When creating the `tabSettings`
    object, you can use any valid `Ti.UI.ScrollView` properties as the Tab Control
    provides a wrapper around the Titanium native `Ti.UI.ScrollView`.
  prefs: []
  type: TYPE_NORMAL
- en: The `tabSettings` object also has a Tab Control-specific object called `selectedCue`.
    The `selectedCue` object contains the `selectedBackgroundColor` and `backgroundColor`
    properties. The `selectedBackgroundColor` property is the color used to provide
    a visual cue when the tab is selected. The `backgroundColor` property is the default
    background color used for the visual cue area.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Defining tabs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You define all of the tabs in the Tab Control at the time of creation. For this
    example, we will first create an empty array, and then push each Tab Definition
    into the array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: A **Tab Definition** has two main parts, the `Tab` and the `Label` sections.
    In the `Tab` section, you can use any parameter that is valid, when creating a
    `Ti.UI.View` object. Any additional parameters will be considered custom properties
    of the `Tab` object and will be available once the Tab Control has been added
    to the `Ti.UI.Window`.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Label` section, you can use any parameter that is valid, when creating
    a `Ti.UI.Label` object. The `Label` section also has a tab-specific property called
    `selectedFont`. The `selectedFont` object has the same properties as the `Ti.UI.Label`
    font object, but is only applied when the tab has been selected. The next sample
    is used to demonstrate an increase in the font size and weight.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure you include a `width` property in your tab definition or `TabStrip`
    will not layout correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: To complete this recipe, add `tab1` and `tab2` using the same pattern as demonstrated
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Tab Control to the window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The next step in the recipe is to call the `createTabStrip` method, providing
    our settings object, and array of tabs. This method returns an instance of the
    custom tab control that is then added to the example''s `Ti.UI.Window`, as shown
    in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Adding tab listeners
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Metro Tab Control is derived from the `Ti.UI.ScrollView`. It, therefore,
    inherits its base listeners such as `pinch`, `scroll`, and `click`. Additional
    events are also available for you to subscribe to.
  prefs: []
  type: TYPE_NORMAL
- en: When a user taps on a tab, the `tabClick` event is fired, providing the index
    of the tab tapped.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When a tab is selected, the `indexChanged` event is fired, providing the current
    and prior index values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Slideout Menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a Slideout menu for navigation has become a popular way to display navigation
    options. This navigation pattern was made popular by Facebook and Path apps. The
    strength of this navigation pattern is that it can effectively present a large
    number of menu options. Most Enterprise apps can benefit from this kind of navigation
    as it increases feature discoverability.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will demonstrate how to create a sample app using the Slideout
    menu to access four application views, and a logout button. The `Slideout Menu`
    module provides a chainable CommonJS module to easily manage your menu and visual
    assets that can be easily branded.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshots show the Slideout menu when open in our sample cross-platform
    app. The following steps will walk you through creating this sample, and demonstrate
    how to configure the control to meet your needs.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5343OT_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing the Ti.Draggable module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When running on Android, the Slideout menu uses a popular native module called
    `Ti.Draggable`. This module enables the user to easily slide back the menu cover.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install this module, you can easily copy the `modules` directory from the
    recipe''s source, or download the `Ti.Draggable` project from [https://github.com/pec1985/TiDraggable](https://github.com/pec1985/TiDraggable).
    Once you have the unzipped module, you will want to copy the contents into your
    project''s `modules` folder, as highlighted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Ti.Draggable module](img/5343OT_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After you have copied the files into the `modules` directory, you will need
    to add the module to your project. This is easily done in Titanium Studio by clicking
    on the `tiapp.xml` file. Once the project configuration screen has loaded, click
    on the green plus button (shown circled in the following screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Ti.Draggable module](img/5343OT_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will then be presented with a list of all the modules you have installed.
    Select the **ti.draggable [android]** module, as shown circled in the following
    screenshot. After selecting this module, click on **OK** to add the reference
    module to your project.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Ti.Draggable module](img/5343OT_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have added the module, make sure you save your project before running
    it. After saving, you will need to clean your project. You do this by selecting
    **Clean…** under the **Project** toolbar option in Titanium Studio, as demonstrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Ti.Draggable module](img/5343OT_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the Slideout Menu module to your project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adding the `Slideout Menu` module to your project is easy. Simply copy the `SlideOutMenu`
    folder into the `Resources` folder of your Titanium project, as shown in the following
    screenshot. This will install the CommonJS module and all supporting images.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Slideout Menu module to your project](img/5343OT_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `SlideOutMenu` folder must be located in the `root` folder of your Titanium
    project in order for this recipe to work as designed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you've added the `SlideOutMenu` folder to your project, you need to use
    `require` to import the module into your code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Defining our content views
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this sample, we have created a CommonJS module that works as a view factory.
    In your app, these views would be the content you wish to have displayed on the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The following snippet builds a `views` object that contains our placeholder
    views created by the sample view factory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Building our menu items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next step in our recipe is to define our menu items. When open, the menu
    will display an array of menu items, as shown by `menuData` in the following snippet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each menu item can contain the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Title**: This property is used to display the menu text of the item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Detail Cue**: The property `hasDetail` determines if the `more` arrow visual
    cue should be displayed. This property is optional, and by default `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View Pointer**: The optional property view is used to hold a reference to
    the view that should be displayed when the menu item is pressed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Opening the app window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To open the sample window, you first need to call the `addMenuItems` function
    and provide the `menuData` array that we created earlier. This will create the
    menu objects within the module. Next, you need to pipe the result of the `addMenuItems`
    function into the `open` method. This will open your main application window and
    display the first view in your menu.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Adding menu listeners
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Slideout menu provides listeners for `buttonclick`, `switch`, `open`, `close`,
    and `sliding`. The following details each of these events as used in the sample.
  prefs: []
  type: TYPE_NORMAL
- en: When a menu item is tapped, the `buttonclick` event is fired, providing the
    menu item index.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When a display view is switched for another view, the `switch` event is fired.
    This event can be used to help load display-view content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As the user slides the display view to expose the menu, the `sliding` event
    is fired. This provides the view distance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the menu is fully displayed, the `open` event is fired. This event is helpful
    for tracking visual state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the menu is fully closed, the `menuClosed` event is fired. This event is
    helpful for tracking visual state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding custom application listeners
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our example app also uses the following custom application level events. These
    events are fired by our sample views to close and toggle the menu.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Slideout Menu` module provides several functions to help you build your
    app's navigation system.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the menu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next snippet demonstrates how to use the `addMenuItems` helper function
    to create a menu using a list of menu items. See this recipe's *How to do it…*
    section for an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Opening the menu container
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following line demonstrates how to open the menu container and display the
    first menu item. See this recipe's *How to do it…* section for an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `addMenuItems` function needs to be called before the menu container can
    be opened.
  prefs: []
  type: TYPE_NORMAL
- en: Showing the menu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following line demonstrates how to fully display the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Toggling the menu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When designing your navigator, you will want to implement a button to allow
    your users to open and close the menu. The `toggle` method, shown in the following
    snippet, performs this operation for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Closing the menu
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following line demonstrates how you can hide the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Determining menu state
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use the following line to determine if the menu is now fully in view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Accessing the current view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will often need to access the currently displayed view to perform input
    validation or other operations. The following line demonstrates how you can easily
    access the current view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Closing the menu container
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following line demonstrates how to close the menu container and all associated
    display views:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Using the sample's Global Events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each of our sample views can fire two helpful custom-application-level events.
    The first of these events is `app:toggle_menu`, which is called when you tap on
    the menu icon. This will either show or hide the menu, depending on its current
    status.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Often, a user wants to start working with the screen before the menu has fully
    closed. To facilitate this, each display view will call the `app:close_menu` event
    on a double tap. This will automatically close the view and allow the user to
    continue working with the current screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is inspired by and contains forks of several great open source projects.
    The `MASlidingMenu.js` CommonJS module used in this recipe is the fork of the
    `MASlidingMenu` project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MASlidingMenu`: Available at [https://github.com/appersonlabs/MASlidingMenu](https://github.com/appersonlabs/MASlidingMenu).
    Author: Matt Apperson.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TiDraggable`: Available at [https://github.com/pec1985/TiDraggable](https://github.com/pec1985/TiDraggable).
    Author: Pedro Enrique.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CoverSliderExample`: Available at [https://github.com/atsusy/CoverSliderExample](https://github.com/atsusy/CoverSliderExample).
    Author: Atsushi Kataoka.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
