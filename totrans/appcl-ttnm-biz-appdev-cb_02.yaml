- en: Chapter 2. Cross-platform UI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章. 跨平台UI
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Cross-platform HUD progress indicator
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨平台HUD进度指示器
- en: In-app notifications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用内通知
- en: Screen Break Menu
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 屏幕断点菜单
- en: Metro Style Tab Control
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Metro样式标签控件
- en: Slideout Menu
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 滑出菜单
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Titanium is not a write-once-and-run-anywhere application framework, but more
    of a write-once-and-modify-for-each-platform one. Nowhere is this more important
    than in the user interface of your app. Great user experiences involve making
    the user feel familiar and at the same time accentuate the device the app is running
    upon. Titanium does this by embracing both common and platform-specific UI widgets.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Titanium不是一个一次编写到处运行的应用程序框架，而是一个一次编写，针对每个平台修改的框架。现在没有比在应用程序的用户界面中这一点更重要了。出色的用户体验涉及让用户感到熟悉，同时突出显示应用程序运行的设备。Titanium通过拥抱通用和平台特定的UI小部件来实现这一点。
- en: The recipes in this chapter will demonstrate how to create helpful UI widgets
    to create a unique cross-platform experience for your Enterprise users. Each recipe
    is designed to be easily branded and used within your existing Titanium Enterprise
    apps.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱将演示如何创建有用的UI小部件，为您的企业用户提供独特的跨平台体验。每个食谱都设计得易于品牌化和在现有的Titanium Enterprise应用程序中使用。
- en: Cross-platform HUD progress indicator
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨平台HUD进度指示器
- en: The **Heads Up Display** (**HUD**) interaction pattern, named after the UIKit
    `UIProgressHUD` component, is an effective way to provide progress information
    to your users. This is especially true for Enterprise mobile apps, as they typically
    are deeply integrated with backend systems. So the app does not appear sluggish
    or unresponsive while making these calls. It is recommended to use the `Waiting`
    or `Progress` indicators to provide feedback to the users. This recipe demonstrates
    how to use an `HUD` module to present a `Waiting` indicator to inform your user
    about the progress of long-running actions in your app.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**抬头显示**（**HUD**）交互模式，以UIKit的`UIProgressHUD`组件命名，是一种向用户提供进度信息的有效方式。这对于企业移动应用尤其如此，因为它们通常与后端系统深度集成。因此，在执行这些调用时，应用程序不会显得缓慢或无响应。建议使用`Waiting`或`Progress`指示器向用户提供反馈。本食谱演示了如何使用`HUD`模块来显示一个`Waiting`指示器，通知您的用户关于应用程序中长时间运行的操作的进度。'
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This chainable CommonJS `HUD` module, `hud.js`, provides a native iOS and Android
    progress indicator experience. This is a simple recipe demonstrating how to use
    the `HUD` module. You can use this example to easily incorporate the module into
    your Titanium project.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个可链式CommonJS `HUD`模块，`hud.js`，提供了原生iOS和Android进度指示器体验。这是一个简单的食谱，演示了如何使用`HUD`模块。您可以使用此示例轻松地将模块集成到您的Titanium项目中。
- en: '![Getting ready](img/5343OT_02_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/5343OT_02_01.jpg)'
- en: Adding the HUD module to your project
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将HUD模块添加到您的项目中
- en: 'Adding the `HUD` module to your project is easy. Simply copy the `hud.js` file
    into the `Resources` folder of your project, as shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 将`HUD`模块添加到您的项目中非常简单。只需将`hud.js`文件复制到项目中的`Resources`文件夹，如下截图所示：
- en: '![Adding the HUD module to your project](img/5343OT_02_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![将HUD模块添加到您的项目中](img/5343OT_02_02.jpg)'
- en: 'Once you''ve added the `hud.js` file to your project, you need to use `require`
    to import the module into your code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将`hud.js`文件添加到项目中，您需要使用`require`将模块导入到您的代码中：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating a sample window
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个示例窗口
- en: 'To demonstrate the `HUD` module, we create a basic window with a single button.
    To do this, first we create a `Ti.UI.Window` and attach a button:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示`HUD`模块，我们创建了一个带有单个按钮的基本窗口。为此，首先我们创建一个`Ti.UI.Window`并附加一个按钮：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Adding HUD listeners
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加HUD监听器
- en: 'Next in our example, we add a series of listeners. The following code block
    demonstrates how to add a listener, to be fired when the HUD window is closed:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中接下来，我们添加一系列的监听器。以下代码块演示了如何添加一个监听器，当HUD窗口关闭时触发：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can also listen to an `open` event, which will fire when the HUD window
    is opened:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以监听一个`open`事件，当HUD窗口打开时将触发：
- en: '[PRE3]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `dblclick` event is fired when the user double taps on the HUD window:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户在HUD窗口上双击时，会触发`dblclick`事件：
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `hudTextChanged` event is fired whenever `updateMessage` is called to update
    the HUD window message:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当调用`updateMessage`来更新HUD窗口消息时，会触发`hudTextChanged`事件：
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you are using the **Close Timer** functionality, it is helpful to know if
    your window is being closed by the timer or by some other method. To help determine
    this, you can subscribe to the `timerClose` event, as shown in the following snippet:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您正在使用 **关闭计时器** 功能，了解您的窗口是因计时器还是其他方法而关闭的很有帮助。为了帮助确定这一点，您可以订阅 `timerClose`
    事件，如下面的代码片段所示：
- en: '[PRE6]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Creating a HUD indicator
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建 HUD 指示器
- en: We can now use the button created earlier, to demonstrate how to show the HUD
    window. To the click handler of the button we've added logic to `load` the `HUD`
    module with the message text, `Please Wait...`. Then we call the `show` method,
    which displays the HUD window to the user.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用之前创建的按钮，来演示如何显示 HUD 窗口。我们为按钮的点击处理程序添加了逻辑，以使用消息文本 `请等待...` 加载 `HUD` 模块。然后我们调用
    `show` 方法，该方法将 HUD 窗口显示给用户。
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: On Android, you might wish to hide the navigation bar so that the HUD window
    can take up the entire screen. If you don't hide the navigation bar, the `HUD`
    module will set the window title to the same text as provided for the HUD display
    message.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Android 上，您可能希望隐藏导航栏，以便 HUD 窗口可以占据整个屏幕。如果您不隐藏导航栏，`HUD` 模块将设置窗口标题与提供的 HUD 显示消息相同的文本。
- en: Updating the HUD message
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新 HUD 消息
- en: By calling the `updateMessage` function, you can update the HUD window text
    at any time. The following line demonstrates how to update the text from `Please
    Wait...` to `Still waiting...`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用 `updateMessage` 函数，您可以在任何时间更新 HUD 窗口的文本。以下行演示了如何将文本从 `请等待...` 更新为 `仍在等待...`。
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Closing the HUD window
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 关闭 HUD 窗口
- en: 'There are two ways to close the `HUD` module window. The first and most common
    way is to call the `hide` function, as shown here:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以关闭 `HUD` 模块窗口。第一种也是最常见的方法是调用 `hide` 函数，如下所示：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The second way to close the HUD window is to use the `addCloseTimer` function
    on the `HUD` module before the `show` function is called, as highlighted in the
    following snippet. In this example, the HUD window will close after 5,000 milliseconds.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭 HUD 窗口的第二种方法是，在调用 `show` 方法之前，在 `HUD` 模块上使用 `addCloseTimer` 函数，如下面的代码片段所示。在这个例子中，HUD
    窗口将在 5,000 毫秒后关闭。
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `addCloseTimer` function is helpful in dealing with timeout situations.
    For example, when making network calls you might wish to abandon the process after
    five seconds so as not to keep the user waiting too long.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`addCloseTimer` 函数有助于处理超时情况。例如，在执行网络调用时，您可能希望在五秒后放弃该过程，以免让用户等待过长时间。'
- en: How it works…
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `HUD` module provides a series of functions to create, update, and maintain
    the HUD progress window. The following list provides a description of each method
    along with their associated functionalities:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`HUD` 模块提供了一系列用于创建、更新和维护 HUD 进度窗口的函数。以下列表提供了每个方法的描述以及它们相关的功能：'
- en: 'The `load` function: This is called to build the `Ti.UI.Window`, `Ti.UI.ActivityIndicator`,
    and `Ti.UI.Label`, that will later be used to display your progress indicator.
    Please note you will need to first call the `load` function, followed by the `show`
    function, to display the HUD window.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`load` 函数：此函数用于构建 `Ti.UI.Window`、`Ti.UI.ActivityIndicator` 和 `Ti.UI.Label`，这些将在以后用于显示您的进度指示器。请注意，您需要首先调用
    `load` 函数，然后调用 `show` 函数，以显示 HUD 窗口。'
- en: 'The `show` function: This displays the HUD window. Please note you first need
    to call the `load` method before calling `show`. If this is done out of sequence,
    the HUD window will not appear.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show` 函数：此函数用于显示 HUD 窗口。请注意，在调用 `show` 之前，您首先需要调用 `load` 方法。如果顺序错误，HUD 窗口将不会显示。'
- en: 'The `updateMessage` function: To update the HUD label, you call this function,
    providing a string with the updated text to be displayed.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updateMessage` 函数：要更新 HUD 标签，您需要调用此函数，并提供一个包含要显示的更新文本的字符串。'
- en: 'The `hide` function: Calling this will close the HUD window and remove all
    of the HUD objects created.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hide` 函数：调用此函数将关闭 HUD 窗口并移除所有创建的 HUD 对象。'
- en: 'The `addCloseTimer` function: You use this function to set a timer that will
    close the HUD window after the provided duration (in milliseconds).'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addCloseTimer` 函数：您可以使用此函数设置一个计时器，在指定的持续时间（以毫秒为单位）后关闭 HUD 窗口。'
- en: 'The `removeCloseTimer` function: You use this function to close the timer that
    you set using `addCloseTimer`.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`removeCloseTimer` 函数：您可以使用此函数关闭使用 `addCloseTimer` 设置的计时器。'
- en: 'The `addEventListener` function: The HUD module supports several events as
    detailed in the next section. You can subscribe to these events using this function.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addEventListener` 函数：HUD 模块支持下一节中详细说明的几个事件。您可以使用此函数订阅这些事件。'
- en: 'The `removeEventListener` function: Any events you have subscribed to, can
    be removed by calling this function. To remove an event, you need to provide the
    same name and callback arguments as you used while calling `addEventListener`.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`removeEventListener`函数：您订阅的任何事件都可以通过调用此函数来移除。要移除事件，您需要提供与调用`addEventListener`时相同的名称和回调参数。'
- en: Tip
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: All functions in the HUD module are chainable, similar to jQuery functions.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: HUD模块中的所有函数都是可链式的，类似于jQuery函数。
- en: In-app notifications
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用内通知
- en: There is often a requirement to alert your users that something has happened.
    Titanium allows you to use the `alert` function, just as you would do on the web.
    But, often this modal alert can be limiting and outside of your design requirements.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 常常需要提醒用户某些事情已经发生。Titanium允许您使用`alert`函数，就像在网页上做的那样。但是，这种模态警告通常可能限制性较强，不符合您的设计要求。
- en: This recipe walks through how to use the `NotifyUI` module to create cross-platform,
    branded notification windows.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱介绍了如何使用`NotifyUI`模块创建跨平台的、品牌化的通知窗口。
- en: Getting ready
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: '`NotifyUI` is a CommonJS module consisting of a single JavaScript file, `notify.js`,
    and a few image assets used for styling. You can control the styling of the module
    through configuration or by updating core image files, making it easy to fit your
    existing branding requirements.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`NotifyUI`是一个由单个JavaScript文件`notify.js`和一些用于样式的图像资产组成的CommonJS模块。您可以通过配置或更新核心图像文件来控制模块的样式，使其容易适应您现有的品牌要求。'
- en: This recipe is a simple demonstration on how to use the `NotifyUI` module. You
    can use this example to quickly incorporate the module into your Titanium project.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱是关于如何使用`NotifyUI`模块的一个简单演示。您可以使用这个示例快速将模块集成到您的Titanium项目中。
- en: 'The following screenshots show this recipe in action:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了此菜谱的实际操作：
- en: '![Getting ready](img/5343OT_02_03.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/5343OT_02_03.jpg)'
- en: Adding the NotifyUI module to your project
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将NotifyUI模块添加到您的项目中
- en: Adding the `NotifyUI` module to your project is easy. Simply copy the `NotifyUI`
    folder into the `Resources` folder of your Titanium project, as highlighted in
    the following screenshot. This will install the CommonJS module and all supporting
    images.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 将`NotifyUI`模块添加到您的项目中非常简单。只需将`NotifyUI`文件夹复制到Titanium项目的`Resources`文件夹中，如以下截图所示。这将安装CommonJS模块及其所有支持图像。
- en: '![Adding the NotifyUI module to your project](img/5343OT_02_04.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![将NotifyUI模块添加到您的项目中](img/5343OT_02_04.jpg)'
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `NotifyUI` folder must be copied to the `Resources` folder of your Titanium
    project in order for this recipe to work as designed.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个菜谱按预期工作，必须将`NotifyUI`文件夹复制到您的Titanium项目的`Resources`文件夹中。
- en: How to do it…
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Once you''ve added the `NotifyUI` folder to your project, you need to use `require`
    to import the module into your code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将`NotifyUI`文件夹添加到项目中，您需要使用`require`将模块导入到您的代码中：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating a sample window
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建示例窗口
- en: 'To demonstrate the `NotifyUI` module, we create a basic window with two buttons:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示`NotifyUI`模块，我们创建了一个包含两个按钮的基本窗口：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Adding NotifyUI listeners
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加NotifyUI监听器
- en: 'Next in our example, we add a series of listeners. The following code block
    demonstrates how to add a listener, to be fired when the `NotifyUI` notification
    window is closed:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中接下来，我们添加了一系列监听器。以下代码块演示了如何添加一个监听器，当`NotifyUI`通知窗口关闭时触发：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can also listen to `open` event, which will fire when the notification window
    is opened.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以监听`open`事件，该事件在通知窗口打开时触发。
- en: '[PRE14]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The `dblclick` event is fired when the user double taps on the notification
    window.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户双击通知窗口时，会触发`dblclick`事件。
- en: '[PRE15]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `textChanged` event is fired from the `NotifyUI` module whenever `updateMessage`
    is called to update the notification window message.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当调用`updateMessage`来更新通知窗口消息时，`textChanged`事件由`NotifyUI`模块触发。
- en: '[PRE16]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you are using the Close Timer functionality, it is helpful to know if your
    window is being closed by the timer or by some other method. To help determine
    this, you can subscribe to the `timerClose` event, as shown in the following snippet:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是关闭计时器功能，了解窗口是通过计时器关闭还是通过其他方法关闭是有帮助的。为了帮助确定这一点，您可以订阅`timerClose`事件，如下面的代码片段所示：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Showing a message window
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示消息窗口
- en: We can now use the button created earlier, to demonstrate how to show the notification
    window. To the click handler of the button we've added logic to `load` the module
    with the message text, `Hello World`, and the style, `complete`. Then we call
    the `show` method, which displays the notification window to the user.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用之前创建的按钮来演示如何显示通知窗口。我们为按钮的点击处理程序添加了逻辑来 `load` 模块，包含消息文本 `Hello World`
    和样式 `complete`，然后调用 `show` 方法，该方法向用户显示通知窗口。
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Updating a message
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 更新消息
- en: 'By calling the `updateMessage` function, you can update the notification text
    any time. The following demonstrates how to update the text from `Hello World`
    to `I''m a new message`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用 `updateMessage` 函数，你可以随时更新通知文本。以下演示了如何将文本从 `Hello World` 更新为 `I'm a new
    message`：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Closing a message window
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关闭消息窗口
- en: 'There are three ways to close the notification window. The first and most common
    way is to call the `hide` function, as shown in the following snippet:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方式可以关闭通知窗口。第一种也是最常见的方式是调用 `hide` 函数，如下面的代码片段所示：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The second way to close the notification window is to use the `addCloseTimer`
    function before the `show` function is called, as shown in the following code
    block. In this example, the window will automatically close after 5,000 milliseconds
    (5 seconds).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭通知窗口的第二种方式是在调用 `show` 函数之前使用 `addCloseTimer` 函数，如下面的代码块所示。在这个例子中，窗口将在 5,000
    毫秒（5 秒）后自动关闭。
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The third and the final way to close the notification window is to have the
    user double tap on the message. This gesture will trigger the module to internally
    handle the close actions.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭通知窗口的第三种和最后一种方式是让用户双击消息。这个手势将触发模块内部处理关闭操作。
- en: How it works…
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The `NotifyUI` module provides a series of functions to create, update, and
    maintain the notification window. The following list provides a description of
    each method, along with their associated functionalities:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`NotifyUI` 模块提供了一系列用于创建、更新和维护通知窗口的函数。以下列表提供了每种方法的描述，以及它们相关的功能：'
- en: 'The `load` function: This is called to build the `Ti.UI.Window`, `Ti.UI.Label`,
    and associated notification style, that will later be used to display your notification.
    Please note you will need to first call the `load` function, followed by the `show`
    function, to display the notification window.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`load` 函数：此函数用于构建 `Ti.UI.Window`、`Ti.UI.Label` 和相关的通知样式，这些样式将用于稍后显示通知。请注意，你需要首先调用
    `load` 函数，然后调用 `show` 函数来显示通知窗口。'
- en: 'The `show` function: This displays the notification window. Please note you
    first need to call the `load` method before calling `show`. If this is done out
    of sequence, the notification window will not appear. These sequenced operations
    provide the flexibility to separate the load and show operations. This can be
    important if you have several notification events in succession.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show` 函数：此函数用于显示通知窗口。请注意，在调用 `show` 之前，你需要首先调用 `load` 方法。如果顺序错误，通知窗口将不会显示。这些顺序操作提供了分离加载和显示操作的灵活性。如果你有多个连续的通知事件，这可能很重要。'
- en: 'The `updateMessage` function: To update the notification label, you call this
    function, providing it a string with the updated text to be displayed.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`updateMessage` 函数：要更新通知标签，你需要调用此函数，并为其提供一个包含要显示的更新文本的字符串。'
- en: 'The `hide` function: Calling this will close the notification window and remove
    all the `NotifyUI` objects created.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hide` 函数：调用此函数将关闭通知窗口并移除所有创建的 `NotifyUI` 对象。'
- en: 'The `addCloseTimer` function: You use this function to set a timer that will
    close the notification window after the provided duration (in milliseconds).'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addCloseTimer` 函数：你使用此函数来设置一个计时器，该计时器将在提供的持续时间（以毫秒为单位）后关闭通知窗口。'
- en: 'The `removeCloseTimer` function: Using this you can close the timer that you
    set using `addCloseTimer`.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`removeCloseTimer` 函数：使用此函数可以关闭使用 `addCloseTimer` 设置的计时器。'
- en: 'The `addEventListener` function: The `NotifyUI` module supports several events
    as detailed in the next section. You can subscribe to these events using this
    function.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addEventListener` 函数：`NotifyUI` 模块支持下一节中详细说明的几个事件。你可以使用此函数来订阅这些事件。'
- en: 'The `removeEventListener` function: Any events you have subscribed to can be
    removed by calling this function. To remove an event, you need to provide the
    same arguments as you used while calling `addEventListener`.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`removeEventListener` 函数：你可以通过调用此函数来移除你已订阅的任何事件。要移除一个事件，你需要提供与调用 `addEventListener`
    时相同的参数。'
- en: Tip
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: A majority of the `NotifyUI` functions are chainable, providing a useable pattern
    similar to the one provided by jQuery.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 大多数 `NotifyUI` 函数都是可链式的，提供了一种类似于 jQuery 提供的模式，便于使用。
- en: Built-in message styles
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置消息样式
- en: 'The `NotifyUI` module comes with the following built-in styles:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`NotifyUI` 模块包含以下内置样式：'
- en: '**Complete**: This displays a window with a blue background and the default
    text, `Completed`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完成**：这会显示一个带有蓝色背景和默认文本“完成”的窗口'
- en: '[PRE22]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![Built-in message styles](img/5343OT_02_05.jpg)'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![内置消息样式](img/5343OT_02_05.jpg)'
- en: '**Error**: This displays a window with a red background and the default text,
    `Error`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误**：这会显示一个带有红色背景和默认文本“错误”的窗口'
- en: '[PRE23]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![Built-in message styles](img/5343OT_02_06.jpg)'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![内置消息样式](img/5343OT_02_06.jpg)'
- en: '**Warning**: This displays a window with an orange background and the default
    text, `Warning`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警告**：这会显示一个带有橙色背景和默认文本“警告”的窗口'
- en: '[PRE24]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![Built-in message styles](img/5343OT_02_07.jpg)'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![内置消息样式](img/5343OT_02_07.jpg)'
- en: '**Success**: This displays a window with a green background and the default
    text, `Success`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成功**：这会显示一个带有绿色背景和默认文本“成功”的窗口'
- en: '[PRE25]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![Built-in message styles](img/5343OT_02_08.jpg)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![内置消息样式](img/5343OT_02_08.jpg)'
- en: Tip
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: All default message texts and text colors can be updated by providing the `message`
    and `messageColor` object properties to the `load` function call.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有默认消息文本和文本颜色都可以通过向 `load` 函数调用提供 `message` 和 `messageColor` 对象属性来更新。
- en: Screen Break Menu
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 屏幕断点菜单
- en: Enterprise apps often contain a number of features. Providing a compelling way
    to display these features and submenus can be challenging. One unique navigation
    option is to implement a Screen Break Menu, similar to how iOS folders work. This
    navigation technique allows you to present additional information only when requested
    by the user.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 企业应用程序通常包含许多功能。提供一种引人入胜的方式来显示这些功能和子菜单可能具有挑战性。一个独特的导航选项是实现屏幕断点菜单，类似于 iOS 文件夹的工作方式。这种导航技术允许您仅在用户请求时呈现额外信息。
- en: In this recipe, we will demonstrate how you can implement a cross-platform version
    of the Screen Break animation and link this effect to a menu view.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将演示如何实现跨平台的屏幕断点动画，并将其链接到菜单视图。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe walks through using the screen break interaction pattern to create
    additional space for an **Add Notes** field. You can easily tweak this recipe
    for more complex menu needs, such as implementing advanced options or an interactive
    help menu.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱通过使用屏幕断点交互模式来创建额外的空间，用于“添加笔记”字段。您可以轻松调整此食谱以满足更复杂的菜单需求，例如实现高级选项或交互式帮助菜单。
- en: Menu when closed
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 菜单关闭时
- en: When the menu is closed, all space is usable for other controls. The following
    image shows the Screen Break Menu in its closed state.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当菜单关闭时，所有空间都可以用于其他控件。以下图片显示了屏幕断点菜单在关闭状态下的样子。
- en: '![Menu when closed](img/5343OT_02_09.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![菜单关闭时](img/5343OT_02_09.jpg)'
- en: The menu, when opened
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 菜单打开时
- en: 'When the menu is opened, the screen is split and the bottom section of the
    `Ti.UI.Window` is animated, exposing a menu area. The following example shows
    the Screen Break Menu, when opened, and displaying a `Ti.UI.TextArea` for taking
    notes:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当菜单打开时，屏幕被分割，`Ti.UI.Window` 的底部区域会进行动画处理，暴露出菜单区域。以下示例显示了打开的屏幕断点菜单，并显示了一个 `Ti.UI.TextArea`
    用于记笔记：
- en: '![The menu, when opened](img/5343OT_02_10.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![菜单打开时](img/5343OT_02_10.jpg)'
- en: Adding the Screen Break Menu to your project
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将屏幕断点菜单添加到您的项目中
- en: 'The Screen Break Menu is a CommonJS module consisting of a single JavaScript
    file. To install it, simply copy the `breakmenu.js` file into your project, as
    shown in the following screenshot:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕断点菜单是一个由单个 JavaScript 文件组成的 CommonJS 模块。要安装它，只需将 `breakmenu.js` 文件复制到您的项目中，如下面的截图所示：
- en: '![Adding the Screen Break Menu to your project](img/5343OT_02_11.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![将屏幕断点菜单添加到您的项目中](img/5343OT_02_11.jpg)'
- en: How to do it…
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Once you''ve added the `breakmenu.js` file to your project, you need to use
    `require` to import the module into your code, as the following snippet demonstrates:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将 `breakmenu.js` 文件添加到您的项目中，您需要使用 `require` 将模块导入到您的代码中，如下面的代码片段所示：
- en: '[PRE26]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Creating the sample window
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建示例窗口
- en: To demonstrate the Screen Break Menu, we create a basic window with a single
    button. When this button is clicked, the Screen Break Menu is activated.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示屏幕断点菜单，我们创建了一个带有单个按钮的基本窗口。当点击此按钮时，屏幕断点菜单会被激活。
- en: '[PRE27]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Adding Screen Break Menu listeners
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加屏幕断点菜单监听器
- en: Next in our example, we add a series of listeners. The following code block
    demonstrates how to add a listener, to be fired when the Screen Break Menu starts,
    to show the menu.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中接下来，我们添加了一系列监听器。以下代码块演示了如何添加一个监听器，当屏幕断开菜单开始时触发，以显示菜单。
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `broken` event is fired when the menu is fully displayed.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当菜单完全显示时，会触发`broken`事件。
- en: '[PRE29]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `closing` event is fired when the menu starts to close. This will take a
    second to fully close.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当菜单开始关闭时，会触发`closing`事件。这将花费一秒钟才能完全关闭。
- en: '[PRE30]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Only when the menu is fully hidden, the `closed` event is fired.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有当菜单完全隐藏时，才会触发`closed`事件。
- en: '[PRE31]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Creating a notes menu object
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建笔记菜单对象
- en: Displaying a `Ti.UI.View` is at the core of the Screen Break Menu. In this example,
    we create a notes menu object containing `Ti.UI.View` and `Ti.UI.TextArea` controls.
    These controls are used to present the user with an area for entering notes, when
    the Screen Break Menu is visible.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 显示`Ti.UI.View`是屏幕断开菜单的核心。在这个例子中，我们创建了一个包含`Ti.UI.View`和`Ti.UI.TextArea`控件的笔记菜单对象。这些控件用于在屏幕断开菜单可见时，向用户提供一个输入笔记的区域。
- en: '[PRE32]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Showing the menu
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示菜单
- en: When the sample's button is pressed, the `breakScreen` function is called to
    show the Screen Break Menu.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当样本按钮被按下时，会调用`breakScreen`函数以显示屏幕断开菜单。
- en: 'The `breakScreen` function takes the following parameters:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`breakScreen`函数接受以下参数：'
- en: The first parameter is the `Ti.UI.Window` that you wish to split in order to
    reveal the menu.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数是您希望分割以显示菜单的`Ti.UI.Window`。
- en: The second parameter is the `Ti.UI.View` that you wish to use as your menu.
    Please note this can only be a `Ti.UI.View` object type.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个参数是您希望用作菜单的`Ti.UI.View`。请注意，这只能是一个`Ti.UI.View`对象类型。
- en: 'The final parameter is the `settings` object. This object contains the following
    properties:'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个参数是`settings`对象。此对象包含以下属性：
- en: '`breakStartPoint`: The position measured from the top of the screen indicating
    where the break should start.'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`breakStartPoint`：从屏幕顶部测量的位置，表示断开应该开始的位置。'
- en: '`bottomViewHeight`: This property decides the height of the bottom-half section.
    This value determines the size of the bottom half of the screen that is animated
    down the screen.'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bottomViewHeight`：此属性决定下半部分的屏幕高度。此值决定了屏幕下半部分的大小，该部分将沿着屏幕向下动画。'
- en: '`slideFinishPoint`: The position from the top of the screen indicating where
    the bottom view should slide to.'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slideFinishPoint`：从屏幕顶部测量的位置，表示底部视图应该滑动到的位置。'
- en: Tip
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You will need to adjust these `settings` properties to meet your screen layout
    requirements.
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您需要调整这些`settings`属性以满足您的屏幕布局需求。
- en: 'The following code block implements all the three properties:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块实现了所有三个属性：
- en: '[PRE33]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Metro Style Tab Control
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metro风格标签控件
- en: A tabbed interface is an effective way to organize your Enterprise Titanium
    app. With their rising prevalence in smart phones and well designed, compelling
    UI/UX consumer applications, the expectation level for UI-rich Enterprise application
    is increasing among Enterprise users. Your average Enterprise user is now starting
    to expect a richer experience than provided in a traditional tabbed interface.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 分页界面是组织您的企业钛金应用的有效方式。随着智能手机和精心设计、引人入胜的UI/UX消费者应用的日益普及，企业用户对UI丰富的企业应用的需求水平正在提高。您的普通企业用户现在开始期待比传统分页界面提供更丰富的体验。
- en: This recipe demonstrates how to create a unique cross-platform experience using
    the **Metro Style Tab Control** for your Enterprise app. This control allows you
    to use the tabbed interaction pattern in a compelling new way while still meeting
    your branding or organizational styling requirements.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱演示了如何使用**Metro风格标签控件**为您的企业应用创建独特的跨平台体验。此控件允许您以引人入胜的新方式使用分页交互模式，同时满足您的品牌或组织风格要求。
- en: Getting ready
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe walks through the process of creating a Metro Style Tab Control
    to organize your app's navigation. The Tab Control is designed to be easily configured
    to meet your corporate branding and display requirements.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱通过创建一个用于组织应用导航的Metro风格标签控件的过程进行说明。标签控件设计得易于配置，以满足您的企业品牌和显示需求。
- en: The next example shows a simple 3-tab navigator at the top of our cross-platform
    app. The following sections will walk you through the process of creating this
    sample, and demonstrate how to configure the control to meet your specific needs.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例显示了位于我们跨平台应用顶部的简单3标签导航器。以下各节将指导您创建此样本，并演示如何配置控件以满足您的特定需求。
- en: '![Getting ready](img/5343OT_02_12.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/5343OT_02_12.jpg)'
- en: Adding the Tab Control to your project
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将标签控制添加到你的项目中
- en: '`Metro Tab Control` is a CommonJS module, consisting of a single JavaScript
    file. To install, simply copy the `tabcontrol.js` file into your project, as shown
    in the following screenshot:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`Metro Tab Control`是一个CommonJS模块，由一个JavaScript文件组成。要安装，只需将`tabcontrol.js`文件复制到你的项目中，如下面的屏幕截图所示：'
- en: '![Adding the Tab Control to your project](img/5343OT_02_13.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![将标签控制添加到你的项目中](img/5343OT_02_13.jpg)'
- en: How to do it…
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Once you''ve added the `tabcontrol.js` file to your project, you need to use
    `require` to import the module into your code, as the following snippet demonstrates:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将`tabcontrol.js`文件添加到你的项目中，你需要使用`require`将模块导入到你的代码中，如下面的代码片段所示：
- en: '[PRE34]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Creating a sample window
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建示例窗口
- en: To demonstrate the Metro Style Tab Control, create a `Ti.UI.Window` to attach
    this custom control with three tabs.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要演示Metro样式标签控制，创建一个`Ti.UI.Window`来附加这个自定义控制，并带有三个标签。
- en: '[PRE35]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Creating the settings object
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建设置对象
- en: When creating the Tab Control, you need a `tabSettings` object and an array
    of tabs. The `tabSettings` object contains all the properties needed to create
    the Tab Control. The tabs are then added to the control. When creating the `tabSettings`
    object, you can use any valid `Ti.UI.ScrollView` properties as the Tab Control
    provides a wrapper around the Titanium native `Ti.UI.ScrollView`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建标签控制时，你需要一个`tabSettings`对象和一个标签数组。`tabSettings`对象包含创建标签控制所需的所有属性。然后，将这些标签添加到控制中。在创建`tabSettings`对象时，你可以使用任何有效的`Ti.UI.ScrollView`属性，因为标签控制是在Titanium原生`Ti.UI.ScrollView`的基础上提供包装的。
- en: The `tabSettings` object also has a Tab Control-specific object called `selectedCue`.
    The `selectedCue` object contains the `selectedBackgroundColor` and `backgroundColor`
    properties. The `selectedBackgroundColor` property is the color used to provide
    a visual cue when the tab is selected. The `backgroundColor` property is the default
    background color used for the visual cue area.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`tabSettings`对象还有一个特定于标签控制的名为`selectedCue`的对象。`selectedCue`对象包含`selectedBackgroundColor`和`backgroundColor`属性。`selectedBackgroundColor`属性是在标签被选中时提供视觉提示所使用的颜色。`backgroundColor`属性是用于视觉提示区域的默认背景颜色。'
- en: '[PRE36]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Defining tabs
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义标签
- en: You define all of the tabs in the Tab Control at the time of creation. For this
    example, we will first create an empty array, and then push each Tab Definition
    into the array.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 你在创建标签控制时定义所有标签。对于这个例子，我们首先创建一个空数组，然后将每个标签定义推入数组中。
- en: '[PRE37]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: A **Tab Definition** has two main parts, the `Tab` and the `Label` sections.
    In the `Tab` section, you can use any parameter that is valid, when creating a
    `Ti.UI.View` object. Any additional parameters will be considered custom properties
    of the `Tab` object and will be available once the Tab Control has been added
    to the `Ti.UI.Window`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**标签定义**有两个主要部分，即`Tab`和`Label`部分。在`Tab`部分，你可以使用在创建`Ti.UI.View`对象时有效的任何参数。任何额外的参数将被视为`Tab`对象的自定义属性，一旦标签控制被添加到`Ti.UI.Window`中，这些属性将可用。'
- en: In the `Label` section, you can use any parameter that is valid, when creating
    a `Ti.UI.Label` object. The `Label` section also has a tab-specific property called
    `selectedFont`. The `selectedFont` object has the same properties as the `Ti.UI.Label`
    font object, but is only applied when the tab has been selected. The next sample
    is used to demonstrate an increase in the font size and weight.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Label`部分，你可以使用在创建`Ti.UI.Label`对象时有效的任何参数。`Label`部分还有一个特定于标签的属性，称为`selectedFont`。`selectedFont`对象具有与`Ti.UI.Label`字体对象相同的属性，但仅在标签被选中时应用。以下示例用于演示字体大小和字重的增加。
- en: Tip
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Make sure you include a `width` property in your tab definition or `TabStrip`
    will not layout correctly.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在你的标签定义或`TabStrip`中包含一个`width`属性，否则布局将不正确。
- en: '[PRE38]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: To complete this recipe, add `tab1` and `tab2` using the same pattern as demonstrated
    earlier.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个食谱，使用前面演示的相同模式添加`tab1`和`tab2`。
- en: Adding Tab Control to the window
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将标签控制添加到窗口中
- en: 'The next step in the recipe is to call the `createTabStrip` method, providing
    our settings object, and array of tabs. This method returns an instance of the
    custom tab control that is then added to the example''s `Ti.UI.Window`, as shown
    in the following snippet:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱的下一步中，需要调用`createTabStrip`方法，提供我们的设置对象和标签数组。此方法返回一个自定义标签控制的实例，然后将其添加到示例的`Ti.UI.Window`中，如下面的代码片段所示：
- en: '[PRE39]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Adding tab listeners
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加标签监听器
- en: The Metro Tab Control is derived from the `Ti.UI.ScrollView`. It, therefore,
    inherits its base listeners such as `pinch`, `scroll`, and `click`. Additional
    events are also available for you to subscribe to.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Metro Tab Control是从`Ti.UI.ScrollView`派生出来的。因此，它继承了其基本监听器，如`pinch`、`scroll`和`click`。还有其他事件可供您订阅。
- en: When a user taps on a tab, the `tabClick` event is fired, providing the index
    of the tab tapped.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击标签时，将触发`tabClick`事件，提供被点击标签的索引。
- en: '[PRE40]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: When a tab is selected, the `indexChanged` event is fired, providing the current
    and prior index values.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当选择标签时，将触发`indexChanged`事件，提供当前和之前的索引值。
- en: '[PRE41]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Slideout Menu
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Slideout Menu
- en: Using a Slideout menu for navigation has become a popular way to display navigation
    options. This navigation pattern was made popular by Facebook and Path apps. The
    strength of this navigation pattern is that it can effectively present a large
    number of menu options. Most Enterprise apps can benefit from this kind of navigation
    as it increases feature discoverability.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Slideout菜单进行导航已成为显示导航选项的一种流行方式。这种导航模式由Facebook和Path应用推广。这种导航模式的优点是它可以有效地展示大量的菜单选项。大多数企业应用都可以从这种类型的导航中受益，因为它增加了功能可发现性。
- en: Getting ready
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: In this recipe, we will demonstrate how to create a sample app using the Slideout
    menu to access four application views, and a logout button. The `Slideout Menu`
    module provides a chainable CommonJS module to easily manage your menu and visual
    assets that can be easily branded.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将演示如何使用Slideout菜单创建一个示例应用，通过它访问四个应用视图，以及一个注销按钮。`Slideout Menu`模块提供了一个可链式CommonJS模块，可以轻松管理您的菜单和视觉资产，这些资产可以轻松地进行品牌化。
- en: The following screenshots show the Slideout menu when open in our sample cross-platform
    app. The following steps will walk you through creating this sample, and demonstrate
    how to configure the control to meet your needs.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在我们的示例跨平台应用中打开的Slideout菜单。以下步骤将指导您创建此示例，并演示如何配置控件以满足您的需求。
- en: '![Getting ready](img/5343OT_02_14.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![准备中](img/5343OT_02_14.jpg)'
- en: Installing the Ti.Draggable module
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Ti.Draggable模块
- en: When running on Android, the Slideout menu uses a popular native module called
    `Ti.Draggable`. This module enables the user to easily slide back the menu cover.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android上运行时，Slideout菜单使用一个流行的本地模块，称为`Ti.Draggable`。此模块使用户能够轻松地滑动菜单封面。
- en: 'To install this module, you can easily copy the `modules` directory from the
    recipe''s source, or download the `Ti.Draggable` project from [https://github.com/pec1985/TiDraggable](https://github.com/pec1985/TiDraggable).
    Once you have the unzipped module, you will want to copy the contents into your
    project''s `modules` folder, as highlighted in the following screenshot:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装此模块，您可以轻松地从菜谱的源代码中复制`modules`目录，或者从[https://github.com/pec1985/TiDraggable](https://github.com/pec1985/TiDraggable)下载`Ti.Draggable`项目。一旦您有了解压的模块，您将希望将其内容复制到您的项目`modules`文件夹中，如下面的截图所示：
- en: '![Installing the Ti.Draggable module](img/5343OT_02_15.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![安装Ti.Draggable模块](img/5343OT_02_15.jpg)'
- en: After you have copied the files into the `modules` directory, you will need
    to add the module to your project. This is easily done in Titanium Studio by clicking
    on the `tiapp.xml` file. Once the project configuration screen has loaded, click
    on the green plus button (shown circled in the following screenshot).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在您将文件复制到`modules`目录后，您需要将模块添加到您的项目中。在Titanium Studio中，通过点击`tiapp.xml`文件可以轻松完成此操作。一旦项目配置屏幕加载，点击下面的绿色加号按钮（如下面的截图所示）。
- en: '![Installing the Ti.Draggable module](img/5343OT_02_16.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![安装Ti.Draggable模块](img/5343OT_02_16.jpg)'
- en: You will then be presented with a list of all the modules you have installed.
    Select the **ti.draggable [android]** module, as shown circled in the following
    screenshot. After selecting this module, click on **OK** to add the reference
    module to your project.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将看到一个包含您已安装的所有模块的列表。选择**ti.draggable [android]**模块，如下面的截图所示。选择此模块后，点击**OK**将引用模块添加到您的项目中。
- en: '![Installing the Ti.Draggable module](img/5343OT_02_17.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![安装Ti.Draggable模块](img/5343OT_02_17.jpg)'
- en: 'Once you have added the module, make sure you save your project before running
    it. After saving, you will need to clean your project. You do this by selecting
    **Clean…** under the **Project** toolbar option in Titanium Studio, as demonstrated
    in the following screenshot:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您添加了模块，在运行之前请确保保存您的项目。保存后，您需要清理您的项目。您可以通过在Titanium Studio的**项目**工具栏选项下选择**清理…**来完成此操作，如下面的截图所示：
- en: '![Installing the Ti.Draggable module](img/5343OT_02_18.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![安装Ti.Draggable模块](img/5343OT_02_18.jpg)'
- en: Adding the Slideout Menu module to your project
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Slideout Menu模块添加到您的项目中
- en: Adding the `Slideout Menu` module to your project is easy. Simply copy the `SlideOutMenu`
    folder into the `Resources` folder of your Titanium project, as shown in the following
    screenshot. This will install the CommonJS module and all supporting images.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 将`Slideout Menu`模块添加到您的项目中很简单。只需将`SlideOutMenu`文件夹复制到您的Titanium项目中的`Resources`文件夹，如下面的截图所示。这将安装CommonJS模块及其所有支持图像。
- en: '![Adding the Slideout Menu module to your project](img/5343OT_02_19.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![将Slideout Menu模块添加到您的项目中](img/5343OT_02_19.jpg)'
- en: Tip
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `SlideOutMenu` folder must be located in the `root` folder of your Titanium
    project in order for this recipe to work as designed.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个食谱按设计工作，`SlideOutMenu`文件夹必须位于您的Titanium项目根目录中。
- en: How to do it…
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Once you've added the `SlideOutMenu` folder to your project, you need to use
    `require` to import the module into your code.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 将`SlideOutMenu`文件夹添加到您的项目后，您需要使用`require`将模块导入到您的代码中。
- en: '[PRE42]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Defining our content views
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义我们的内容视图
- en: For this sample, we have created a CommonJS module that works as a view factory.
    In your app, these views would be the content you wish to have displayed on the
    screen.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们创建了一个CommonJS模块，它作为一个视图工厂工作。在您的应用程序中，这些视图将是您希望在屏幕上显示的内容。
- en: '[PRE43]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The following snippet builds a `views` object that contains our placeholder
    views created by the sample view factory.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段构建了一个包含我们由示例视图工厂创建的占位符视图的`views`对象。
- en: '[PRE44]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Building our menu items
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建我们的菜单项
- en: The next step in our recipe is to define our menu items. When open, the menu
    will display an array of menu items, as shown by `menuData` in the following snippet.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们食谱的下一步是定义我们的菜单项。当菜单打开时，菜单将显示一系列菜单项，如下面的代码片段中的`menuData`所示。
- en: 'Each menu item can contain the following properties:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 每个菜单项可以包含以下属性：
- en: '**Title**: This property is used to display the menu text of the item.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标题**：此属性用于显示菜单项的文本。'
- en: '**Detail Cue**: The property `hasDetail` determines if the `more` arrow visual
    cue should be displayed. This property is optional, and by default `false`.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**细节提示**：属性`hasDetail`确定是否显示`更多`箭头视觉提示。此属性是可选的，默认为`false`。'
- en: '**View Pointer**: The optional property view is used to hold a reference to
    the view that should be displayed when the menu item is pressed.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图指针**：可选属性视图用于保存当菜单项被按下时应显示的视图的引用。'
- en: '[PRE45]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Opening the app window
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打开应用程序窗口
- en: To open the sample window, you first need to call the `addMenuItems` function
    and provide the `menuData` array that we created earlier. This will create the
    menu objects within the module. Next, you need to pipe the result of the `addMenuItems`
    function into the `open` method. This will open your main application window and
    display the first view in your menu.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开示例窗口，您首先需要调用`addMenuItems`函数并提供我们之前创建的`menuData`数组。这将创建模块内的菜单对象。接下来，您需要将`addMenuItems`函数的结果传递给`open`方法。这将打开您的主应用程序窗口并显示菜单中的第一个视图。
- en: '[PRE46]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Adding menu listeners
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加菜单监听器
- en: The Slideout menu provides listeners for `buttonclick`, `switch`, `open`, `close`,
    and `sliding`. The following details each of these events as used in the sample.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Slideout菜单提供了对`buttonclick`、`switch`、`open`、`close`和`sliding`事件的监听。以下详细说明了在示例中使用这些事件。
- en: When a menu item is tapped, the `buttonclick` event is fired, providing the
    menu item index.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当菜单项被点击时，会触发`buttonclick`事件，提供菜单项的索引。
- en: '[PRE47]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: When a display view is switched for another view, the `switch` event is fired.
    This event can be used to help load display-view content.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当显示视图切换到另一个视图时，会触发`switch`事件。此事件可用于帮助加载显示视图的内容。
- en: '[PRE48]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: As the user slides the display view to expose the menu, the `sliding` event
    is fired. This provides the view distance.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户滑动显示视图以显示菜单时，会触发`sliding`事件。这提供了视图距离。
- en: '[PRE49]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: When the menu is fully displayed, the `open` event is fired. This event is helpful
    for tracking visual state.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当菜单完全显示时，会触发`open`事件。此事件有助于跟踪视觉状态。
- en: '[PRE50]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: When the menu is fully closed, the `menuClosed` event is fired. This event is
    helpful for tracking visual state.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当菜单完全关闭时，会触发`menuClosed`事件。此事件有助于跟踪视觉状态。
- en: '[PRE51]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Adding custom application listeners
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加自定义应用程序监听器
- en: Our example app also uses the following custom application level events. These
    events are fired by our sample views to close and toggle the menu.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例应用程序还使用了以下自定义应用程序级别事件。这些事件由我们的示例视图触发，用于关闭和切换菜单。
- en: '[PRE52]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: How it works…
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `Slideout Menu` module provides several functions to help you build your
    app's navigation system.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`Slideout Menu`模块提供了几个函数，帮助您构建应用程序的导航系统。'
- en: Creating the menu
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建菜单
- en: The next snippet demonstrates how to use the `addMenuItems` helper function
    to create a menu using a list of menu items. See this recipe's *How to do it…*
    section for an example.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段演示了如何使用`addMenuItems`辅助函数通过菜单项列表创建菜单。请参阅本食谱的*如何做…*部分以获取示例。
- en: '[PRE53]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Opening the menu container
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打开菜单容器
- en: The following line demonstrates how to open the menu container and display the
    first menu item. See this recipe's *How to do it…* section for an example.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行演示了如何打开菜单容器并显示第一个菜单项。请参阅本食谱的*如何做…*部分以获取示例。
- en: '[PRE54]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Tip
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `addMenuItems` function needs to be called before the menu container can
    be opened.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在菜单容器可以打开之前，需要调用`addMenuItems`函数。
- en: Showing the menu
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 显示菜单
- en: 'The following line demonstrates how to fully display the menu:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行演示了如何完全显示菜单：
- en: '[PRE55]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Toggling the menu
  id: totrans-281
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 切换菜单
- en: 'When designing your navigator, you will want to implement a button to allow
    your users to open and close the menu. The `toggle` method, shown in the following
    snippet, performs this operation for you:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计您的导航器时，您将希望实现一个按钮，允许用户打开和关闭菜单。以下代码片段显示了`toggle`方法如何执行此操作：
- en: '[PRE56]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Closing the menu
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关闭菜单
- en: 'The following line demonstrates how you can hide the menu:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行演示了您如何隐藏菜单：
- en: '[PRE57]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Determining menu state
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确定菜单状态
- en: 'You can use the following line to determine if the menu is now fully in view:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下行来确定菜单是否现在已完全显示：
- en: '[PRE58]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Accessing the current view
  id: totrans-290
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问当前视图
- en: 'You will often need to access the currently displayed view to perform input
    validation or other operations. The following line demonstrates how you can easily
    access the current view:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 您通常会需要访问当前显示的视图以执行输入验证或其他操作。以下行演示了您如何轻松访问当前视图：
- en: '[PRE59]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Closing the menu container
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关闭菜单容器
- en: 'The following line demonstrates how to close the menu container and all associated
    display views:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行演示了如何关闭菜单容器及其所有相关显示视图：
- en: '[PRE60]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Using the sample's Global Events
  id: totrans-296
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用示例的全局事件
- en: Each of our sample views can fire two helpful custom-application-level events.
    The first of these events is `app:toggle_menu`, which is called when you tap on
    the menu icon. This will either show or hide the menu, depending on its current
    status.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的每个示例视图都可以触发两个有用的自定义应用程序级事件。第一个事件是`app:toggle_menu`，当您点击菜单图标时被调用。这将根据其当前状态显示或隐藏菜单。
- en: '[PRE61]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Often, a user wants to start working with the screen before the menu has fully
    closed. To facilitate this, each display view will call the `app:close_menu` event
    on a double tap. This will automatically close the view and allow the user to
    continue working with the current screen.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，用户希望在菜单完全关闭之前就开始使用屏幕。为了方便起见，每个显示视图将在双击时调用`app:close_menu`事件。这将自动关闭视图，并允许用户继续在当前屏幕上工作。
- en: '[PRE62]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: See also
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关阅读
- en: This recipe is inspired by and contains forks of several great open source projects.
    The `MASlidingMenu.js` CommonJS module used in this recipe is the fork of the
    `MASlidingMenu` project.
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本食谱灵感来源于并包含几个优秀的开源项目的分支。本食谱中使用的`MASlidingMenu.js` CommonJS模块是`MASlidingMenu`项目的分支。
- en: '`MASlidingMenu`: Available at [https://github.com/appersonlabs/MASlidingMenu](https://github.com/appersonlabs/MASlidingMenu).
    Author: Matt Apperson.'
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MASlidingMenu`：可在[https://github.com/appersonlabs/MASlidingMenu](https://github.com/appersonlabs/MASlidingMenu)找到。作者：Matt
    Apperson。'
- en: '`TiDraggable`: Available at [https://github.com/pec1985/TiDraggable](https://github.com/pec1985/TiDraggable).
    Author: Pedro Enrique.'
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TiDraggable`：可在[https://github.com/pec1985/TiDraggable](https://github.com/pec1985/TiDraggable)找到。作者：Pedro
    Enrique。'
- en: '`CoverSliderExample`: Available at [https://github.com/atsusy/CoverSliderExample](https://github.com/atsusy/CoverSliderExample).
    Author: Atsushi Kataoka.'
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CoverSliderExample`：可在[https://github.com/atsusy/CoverSliderExample](https://github.com/atsusy/CoverSliderExample)找到。作者：Atsushi
    Kataoka。'
