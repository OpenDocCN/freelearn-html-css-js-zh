["```js\nwindow.performance \n```", "```js\nwindow.performance.getEntries() \n```", "```js\n{ \n  connectEnd: 1354.525000002468 \n  connectStart: 1354.525000002468 \n  domainLookupEnd: 1354.525000002468 \n  domainLookupStart: 1354.525000002468 \n  duration: 179.89400000078604 \n  entryType: \"resource\" \n  fetchStart: 1354.525000002468 \n  initiatorType: \"link\" \n  name: \"https://developer.chrome.com/static/css/out/site.css\" \n  redirectEnd: 0 \n  redirectStart: 0 \n  requestStart: 1380.8379999827594 \n  responseEnd: 1534.419000003254 \n  responseStart: 1533.6550000065472 \n  secureConnectionStart: 0 \n  startTime: 1354.525000002468 \n} \n```", "```js\nnode --max_old_space_size=1024 server.js --production \n```", "```js\nts-node --inspect main.ts  \n```", "```js\nthrow new Error(); \n```", "```js\nthrow new Error(\"My basic custom error\"); \n```", "```js\nexport class Exception extends Error { \n\n    public constructor(public message: string) { \n        super(message); \n        // Set the prototype explicitly. \n        Object.setPrototypeOf(this, Exception.prototype); \n    } \n    public sayHello() { \n        return `hello ${this.message}`; \n    } \n} \n```", "```js\ntry { \n    // code that we want to work \n    throw new Error(\"Oops!\"); \n} \ncatch (e) { \n    // code executed if expected to work fails \n    console.log(e); \n} \nfinally { \n    // code always executed after try or try and catch (when \n     errors) \n    console.log(\"finally!\"); \n} \n```"]