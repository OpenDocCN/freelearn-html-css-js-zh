- en: Using a Light Sensor to Create a Night-Light
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at the ways we can still use analog sensors with
    Johnny-Five and the Raspberry Pi, even without the Pi having built-in analog input
    pins. We'll use that knowledge to build a night-light that turns on and off an
    LED based on the ambient light in the room.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using an analog sensor with the Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ambient light sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our night-light
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this project, you will need a regular LED of any color, and a TSL2561 light
    sensor, available on Adafruit ([https://www.adafruit.com/product/439](https://www.adafruit.com/product/439)) and
    through many other providers.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter is available at [https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter05](https://github.com/PacktPublishing/Hands-On-Robotics-with-JavaScript/tree/master/Chapter05).
  prefs: []
  type: TYPE_NORMAL
- en: Using an analog sensor with the Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We talked about the lack of multiple PWM output pins on the Pi in [Chapter 3](c7b761b9-d526-4998-8ec4-375debe53806.xhtml),* Building **Interactive
    Projects with RGB LED*, but an issue we haven't entirely addressed yet is with
    inputs. Digital inputs, such as buttons and switches, anything that is either
    on or off, are easy with the Pi, any digital output pin can also be used as a
    digital input pin. But what about things that require more than two states, such
    as sensors that detect light, temperature, moisture, distances, or anything else
    we'd like to measure in quantity? The answer lies in using specialized communication
    protocols developed over the years that allow digital pins to communicate analog
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the right sensors for your Pi project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you're looking at sensors for a Raspberry Pi project, you need to be sure
    that any analog sensor you use has a digital interface. The two most common are
    I²C and SPI, and we'll talk about how to tell which your sensor has (or hasn't!)
    and whether that device can be used with Johnny-Five.
  prefs: []
  type: TYPE_NORMAL
- en: I2C devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I²C devices require two more pins to work along with power and a ground pin—an
    SDA (data) and SCL (clock) pin. The details of how these are used is beyond the
    scope of this book (see the *Further reading* section for more information), but
    do know that you can hook multiple devices to the same SDA and SCL pins, so long
    as the devices have different I²C addresses. The address is a two-digit hex number,
    that is easy to find for nearly all I²C devices, and in some cases the address
    can be configured physically on the device.
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter's project, we will be using the TSL2561, which can have two
    different addresses configured to it. We'll stick with the default, 0x39 (on the
    Adafruit model) for now.
  prefs: []
  type: TYPE_NORMAL
- en: SPI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SPI devices get tricky quickly, you need five pins: power, ground, microcontroller
    to sensor data (MOSI), sensor to microcontroller data (MISO), and a chip select
    line. While multiple devices on a set of SPI pins can share MISO and MOSI pins,
    they each need their own chip select pin, so the microcontroller can signal the
    device it wishes to communicate with.'
  prefs: []
  type: TYPE_NORMAL
- en: How to determine if your sensor will work with Johnny-Five
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to see if there already are drivers for the sensor you are eyeing
    in Johnny-Five is to check the documentation at the Johnny-Five website. Find
    the sensor type, and find out what chip the sensor is using (for example, our
    light sensor uses the TSL2561). Then, on the API page for the sensor, at the top,
    is nearly always a list of supported controllers and chips. If the chip number
    on your sensor matches one in that list, it is already compatible with Johnny-Five: just
    remember that even though analog sensors are compatible with Johnny-Five, they
    will not work with the Pi, because it has no analog input pins of its own.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, here''s the list of supported light-sensor controllers and chips,
    and you can see the **TSL2561** in the list, so we''re good to start building
    out our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5063ccb7-d5df-43c7-aee8-c4aef9c0f966.png)'
  prefs: []
  type: TYPE_IMG
- en: The ambient light sensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with our night-light project, we'll start by wiring up our TSL2561
    I²C light sensor and making sure we get good data reads by having it print out
    to the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up the sensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to wire up our light sensor, we'll need to know which are the SDA and
    SCL pins of the Pi. For the Pi 3 and 3 B+, SDA is P1-P3 and SCL is P1-P5; these
    are also usually labelled on the cobblers as **SDA** and **SCL**. In order to
    get the sensor working, we'll need the power pin; this sensor is not 5V tolerant,
    so we'll need to use a 3.3V power pin. We can attach GND on the sensor to any
    ground pin.
  prefs: []
  type: TYPE_NORMAL
- en: 'The SDA and SCL pins on the sensor need to be connected to the SDA and SCL
    pins on the Pi, respectively. In the end, your light sensor should be wired up
    like the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08e749e2-e6d3-47a9-a742-966da27ca45e.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we've wired up our sensor, it's time to figure out how to print that
    data using Johnny-Five and other Node.js modules so we can make sure it's up and
    running.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a program to get readings and print them to the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sensor object events in Johnny-Five are different from button events, because,
    well, sensors are different to buttons! Let's take a look at the differences and
    how to get the data we need from our light sensor.
  prefs: []
  type: TYPE_NORMAL
- en: The Johnny-Five sensor events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The two main events we''ll see from sensors are `data` and `change`. The only
    real difference is in the name: `data` events are fired every time data is retrieved,
    while `change` is fired when the data changes. I tend to use `change` when building
    sensor-based projects unless I''m distinctly logging data over time.'
  prefs: []
  type: TYPE_NORMAL
- en: You can configure the time between data collection in the construction of the
    sensor object, as well as the threshold that the change in data must pass in order
    to fire the `change` event.
  prefs: []
  type: TYPE_NORMAL
- en: Handling sensor data in the event handler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you receive data from a sensor, it will be attached to the JavaScript `this` object,
    so when you create a callback for the event handler, do not use the arrow syntax,
    as you will lose the bindings Johnny-Five places on the `this` object in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of a generic data handler for a `change` event on a Johnny-Five
    sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've established how we'll get the data, let's talk about what the
    data will look like and how we can manipulate it.
  prefs: []
  type: TYPE_NORMAL
- en: Using and formatting Johnny-Five sensor data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many ways to receive the data sent from a sensor in Johnny-Five,
    as you can see by the documentation shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19c05048-c270-424c-aad9-680bcd6674fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Boolean, raw, analog, constrained, and value can leave you with a lot to process.
    What each one means is shown in the preceding diagram, however take note that
    there is a good reason the default value is the same as analog: a scaled reading
    between `0` and `255`. It has a lot to do with the variety of sensors available,
    the varying granularities of data, and using scaling to make sure you only have
    to keep one number range in mind, regardless of how many sensors you are using.'
  prefs: []
  type: TYPE_NORMAL
- en: Using .scaleTo() and .fscaleTo() to fine-tune measurements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''d like to impose an arbitrary scale on your sensor (say `0` – `100`
    for percentage), you have some options built into the Johnny-Five API: `.scaleTo()`
    and `.fscaleTo()`. These will scale the raw value from the sensor to match the
    min and max values you pass in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now that we know how to handle the data, let's start on our night-light by creating
    code to print the light-sensor values to the command line. This will also allow
    us to tweak the change threshold setting and determine what value of the light
    sensor we should use as an indicator to turn our LED off and on.
  prefs: []
  type: TYPE_NORMAL
- en: Printing sensor data to the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To print data from our sensor to the command line, we''ll use the code in `print-light-sensor.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Your output on run should look something like this, with the numbers varying
    when you cover or shine light onto the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2e2b978-5c46-402b-94b2-c68616aec74e.png)'
  prefs: []
  type: TYPE_IMG
- en: This is nice, but a little hard to comprehend. What we'll do next is add in
    the `npm` module `barcli` to show a nice bar graph that allows us to comprehend
    in real time the data we're seeing.
  prefs: []
  type: TYPE_NORMAL
- en: Using barcli to make the data easier to see
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That data stream can be hard to process! Let's take a look at leveraging the
    power of Node.js to make this easier to see.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your `project` folder, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To install `barcli`, a library that creates bar graphs in the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Reading the `barcli` documentation (see *Further reading*), we'll need to import
    `barcli`, construct a `barcli` object with the settings we need, then tell when
    to update and with what data.
  prefs: []
  type: TYPE_NORMAL
- en: Importing barcli and constructing our barcli graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To import `barcli`, at the top of your `print-light-sensor.js` file, following
    the other `require()` statements, add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the `board.on(''ready'')` handler, we''ll add the bar graph constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Getting the bar graph to update
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remove the `console.log()` line from the `lightSensor.on(''change'')` handler
    and replace it with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you''re ready to roll! Move the `project` folder over to the Pi, navigate
    to the folder in your Pi SSH session, and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To make sure that `barcli` is properly installed on the Pi, run the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a bar graph now, shown as follows, that changes when you shine
    light on or cover the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b680808-4d11-4c56-b112-81b666c9bfda.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, for our night-light project, you'll want to find a value for the light
    sensor that we will use to turn the LED on and off; `barcli` makes this much easier
    by making that value much easier to see.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've got the value that works for you (I settled on `25`), we're ready
    to build our night-light.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our night-light
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know our light sensor works, we can add an LED and create our night-light.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up the LED
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Connect the short leg of your LED to a ground rail using a 330K ohm resistor,
    and wire the long leg to GPIO #5, also known as P1-29:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/419275ca-1a2e-46dc-8099-bdfd3405f453.png)'
  prefs: []
  type: TYPE_IMG
- en: Coding this project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a file in the same folder as the other files from this chapter, and copy
    the contents of `print-light-sensor-readings.js` into it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the start of the `board.on(''ready'')` handler, add a constructor for our
    LED:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And in the `lightSensor.on(''change'')` function, replace the `console.log`
    statement with the logic that will turn the LED on and off:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And we''re ready to run! Load the folder onto your Pi, navigate to the folder
    in your Pi''s SSH session, and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When you cover the light sensor with your thumb, the LED should light up, as
    shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a0b501d-17db-4c6c-92c7-6c77f6a3a8af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And when you remove your thumb (in a well-lit room), the LED will turn off,
    as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba983d0e-e9c4-41e4-8477-b24f5d9feb18.png)'
  prefs: []
  type: TYPE_IMG
- en: And with that, you have successfully coded and built your night-light!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about analog sensors and the limitations of the
    Pi for analog input. We learned about digital interfaces that allow us to collect
    analog data in Pi projects. We used this knowledge to set up a light sensor, with
    bar graphs from `barcli` to find a good threshold for an LED to turn on and off.
    Finally, we used all of this together to build a night light that illuminates
    in the dark and turns off in the light.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is an analog input sensor?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why can't analog input sensors directly interface with the Raspberry Pi?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name two digital interfaces we can use with the Pi to collect analog data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What two pins (besides power and ground) do I²C sensors need to operate?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the events that a sensor object can fire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is `barcli` helpful in processing changing sensor data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**More information on analog inputs**: [https://learn.sparkfun.com/tutorials/analog-to-digital-conversion](https://learn.sparkfun.com/tutorials/analog-to-digital-conversion)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More information on SPI**: [https://learn.sparkfun.com/tutorials/serial-peripheral-interface-spi](https://learn.sparkfun.com/tutorials/serial-peripheral-interface-spi)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More information on I²C**: [https://learn.sparkfun.com/tutorials/i2c](https://learn.sparkfun.com/tutorials/i2c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More information on using SPI and I²C with the Pi**: [https://learn.sparkfun.com/tutorials/raspberry-pi-spi-and-i2c-tutorial](https://learn.sparkfun.com/tutorials/raspberry-pi-spi-and-i2c-tutorial)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
