- en: Larger Structures with Design Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining steps with template functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assembling customized instances with builders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replicating instances with factories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing a structure with the visitor pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a singleton to manage instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying an existing design pattern to fit different use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining existing design patterns to fit different use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Classes, like objects and functions, are the fundamental building blocks from
    which we create programs. As programs grow, it becomes more difficult to efficiently
    and systematically define relationships between entities. When the relationships
    between data and functionality grow complicated, we can use classes and other
    objects to organize them. But what do we do when classes and objects proliferate?
  prefs: []
  type: TYPE_NORMAL
- en: Design patterns can be a helpful guide. Useful design patterns are refined from
    practical implementation. These patterns are intended to solve patterns of a given
    shape in predictable ways. When properly implemented, they form a contract of
    expected behaviors. This predictability and regularity (with other implementations
    of the pattern) assist in reasoning about code and a higher level of abstraction.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll see how common design patterns can be used as blueprints
    for organizing larger structures.
  prefs: []
  type: TYPE_NORMAL
- en: Defining steps with template functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A template is a design pattern that details the order a given set of operations
    are to be executed in; however, a template does not outline the steps themselves.
    This pattern is useful when behavior is divided in to phases that have some conceptual
    or side effect dependency that requires them to be executed in a specific order.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use the template function design pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `09-01-defining-steps-with-template-functions`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` file that loads and runs a `main` function from
    `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new abstract `class` named `Mission`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a function named `execute` that calls three instance methods—`determineDestination`,
    `determinPayload`, and `launch`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `LunarRover` class that extends the `Mission` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a constructor that assigns `name` to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the three methods called by `Mission.execute`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `JovianOrbiter` class that also extends the `Mission` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates both concrete mission types and executes
    them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/17f7e161-ba42-4534-b30f-2c7fab39c4bb.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Mission` abstract class defines the `execute` method, which calls the other
    instance methods in a particular order. You'll notice that the methods called
    are not defined by the `Mission` class. This implementation detail is the responsibility
    of the extending classes. This use of abstract classes allows child classes to
    be used by code that takes advantage of the interface defined by the abstract
    class.
  prefs: []
  type: TYPE_NORMAL
- en: In the template function pattern, it is the responsibility of the child classes
    to define the steps. When they are instantiated, and the `execute` method is called,
    those steps are then performed in the specified order.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, we'd be able to ensure that `Mission.execute` was not overridden by
    any inheriting classes. Overriding this method works against the pattern and breaks
    the contract associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: This pattern is useful for organizing data-processing pipelines. The guarantee
    that these steps will occur in a given order means that, if side effects are eliminated,
    the instances can be organized more flexibly. The implementing class can then
    organize these steps in the best possible way.
  prefs: []
  type: TYPE_NORMAL
- en: Assembling customized instances with builders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The previous recipe shows how to organize the operations of a class. Sometimes,
    object initialization can also be complicated. In these situations, it can be
    useful to take advantage of another design pattern: builders.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use builders to organize the initialization
    of more complicated objects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `09-02-assembling-instances-with-builders`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Mission`, which that
    takes a `name` constructor argument and assigns it to an instance property. Also,
    create a `describe` method that prints out some details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create classes named `Destination`, `Payload`, and `Rocket`, which receive
    a `name` property as a constructor parameter and assign it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `MissionBuilder` class that defines the `setMissionName`, `setDestination`,
    `setPayload`, and `setRocket` methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `build` method that creates a new `Mission` instance with the appropriate
    properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that uses `MissionBuilder` to create a new mission
    instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser: `http://localhost:8000/`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your output should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6cf25134-2e1e-4673-9212-3606668ae3e2.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The builder defines methods for assigning all the relevant properties and defines
    a build method that ensures that each is called and assigned appropriately. Builders
    are like template functions, but instead of ensuring that a set of operations
    are executed in the correct order, they ensure that an instance is properly configured
    before returning.
  prefs: []
  type: TYPE_NORMAL
- en: Because each instance method of `MissionBuilder` returns the `this` reference,
    the methods can be chained. The last line of the `main` function calls `describe`
    on the new `Mission` instance that is returned from the `build` method.
  prefs: []
  type: TYPE_NORMAL
- en: Replicating instances with factories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like builders, factories are a way of organizing object construction. They differ
    from builders in how they are organized. Often, the interface of factories is
    a single function call. This makes factories easier to use, if less customizable,
    than builders.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use factories to easily replicate instances.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `09-03-replicating-instances-with-factories`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Mission`. Add a constructor
    that takes a `name` constructor argument and assigns it to an instance property.
    Also, define a simple `describe` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create three classes named`Destination`, `Payload`, and `Rocket`, that take
    `name` as a constructor argument and assign it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `MarsMissionFactory` object with a single `create` method that takes
    two arguments: `name` and `rocket`. This method should create a new `Mission`
    using those arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` method that creates and describes two similar missions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your output should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8128d8d6-c25a-45fc-993a-296ce42bda19.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `create` method takes a subset of the properties needed to create a new
    mission. The remaining values are provided by the method itself. This allows factories
    to simplify the process of creating similar instances. In the `main` function,
    you can see that two Mars missions have been created, only differing in name and
    `Rocket` instance. We've halved the number of values needed to create an instance.
  prefs: []
  type: TYPE_NORMAL
- en: This pattern can help reduce instantiation logic. In this recipe, we simplified
    the creation of different kinds of missions by identifying the common attributes,
    encapsulating those in the body of the factory function, and using arguments to
    supply the remaining properties. In this way, commonly used instance shapes can
    be created without additional boilerplate code.
  prefs: []
  type: TYPE_NORMAL
- en: Processing a structure with the visitor pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The patterns we've seen thus far organize the construction of objects and the
    execution of operations. The next pattern we'll look at is specially made to traverse
    and perform operations on hierarchical structures.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll be looking at the visitor pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, this recipe assumes that you've completed the previous recipe, *Assembling
    customized instances with builders*. If not, complete that recipe first.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `09-02-assembling-instances-with-builders` folder to a new `09-04-processing-a-structure-with-the-visitor-pattern `directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a class named `MissionInspector` to `main.js`. Create a `visitor` method
    that calls a corresponding method for each of the following types: `Mission`,
    `Destination`, `Rocket`, and `Payload`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `visitMission` method that logs out an `ok` message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `visitDestination` method that throws an error if the destination
    is not in an approved list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `visitPayload` method that throws an error if the `payload` isn''t
    valid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `visitRocket` method that logs out an `ok` message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an `accept` method to the `Mission` class that calls `accept` on its constituents,
    then tells `visitor` to visit the current instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an `accept` method to the `Destination` class that tells `visitor` to visit
    the current instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an `accept` method to the `Payload` class that tells `visitor` to visit
    the current instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an `accept` method to the `Rocket` class that tells `visitor` to visit
    the current instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates different instances with the builder,
    visits them with the `MissionInspector` instance, and logs out any thrown errors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your output should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/53fd4e1c-d6ce-416c-a89c-d64a7c6dd8db.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The visitor pattern has two components. The visitor processes the subject objects
    and the subjects tell other related subjects about the visitor, and when the current
    subject should be visited.
  prefs: []
  type: TYPE_NORMAL
- en: The `accept` method is required for each subject to receive a notification that
    there is a visitor. That method then makes two types of method call. The first
    is the `accept` method on its related subjects. The second is the `visitor` method
    on the visitor. In this way, the visitor traverses a structure by being passed
    around by the subjects.
  prefs: []
  type: TYPE_NORMAL
- en: The `visitor` methods are used to process different types of node. In some languages,
    this is handled by language-level **polymorphism**. In JavaScript, we can use
    run-time type checks to do this.
  prefs: []
  type: TYPE_NORMAL
- en: The visitor pattern is a good option for processing hierarchical structures
    of objects, where the structure is not known ahead of time, but the types of subjects
    are known.
  prefs: []
  type: TYPE_NORMAL
- en: Using a singleton to manage instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, there are objects that are resource intensive. They may require time,
    memory, battery power, or network usage that are unavailable or inconvenient.
    It is often useful to manage the creation and sharing of instances.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to use singletons to manage instances.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `09-05-singleton-to-manage-instances`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Rocket`**.** Add
    a constructor takes a `name` constructor argument and assigns it to an instance
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `RocketManager` object that has a `rockets` property. Add a `findOrCreate`
    method that indexes `Rocket` instances by the `name` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates instances with and without the manager.
    Compare the instances and see whether they are identical:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your output should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/03775438-0d01-404c-86c0-7af5f2b0731c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The object stores references to the instances, indexed by the string value given
    with `name`. This map is created when the module loads, so it is persisted through
    the life of the program. The singleton is then able to look up the object and
    returns instances created by `findOrCreate` with the same name.
  prefs: []
  type: TYPE_NORMAL
- en: Conserving resources and simplifying communication are primary motivations for
    using singletons. Creating a single object for multiple uses is more efficient
    in terms of space and time needed than creating several. Plus, having single instances
    for messages to be communicated through makes communication between different
    parts of a program easier.
  prefs: []
  type: TYPE_NORMAL
- en: Singletons may require more sophisticated indexing if they are relying on more
    complicated data.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying an existing design pattern to fit different use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Patterns are not commandments received from a higher plane. They have their
    origins in, and have been refined from, real-world engineering projects. Patterns
    can be modified to fit new situations better.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to modify the factory pattern to make creating
    missions easier.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `09-06-modifying-existing-design-pattern-to-fit-differet-use-cases`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Mission`. Add a constructor
    that takes a `name` constructor argument and assigns it to an instance property.
    Also, define a simple `print` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `Destination`. Add a constructor takes a name constructor
    takes a `name` constructor argument and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `Payload`. Add a constructor that takes a `name` constructor
    argument and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `Rocket`. Add a constructor that takes a `name` constructor
    argument and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a function named `MissionProgramFactoryFn` that takes `rocketName`,
    `destinationName`, and `payloadName` arguments. This function should return a
    function that receives a `name` argument and returns a new `mission` with all
    of the properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates two program factories. Create and describe
    multiple missions with the instances:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your output should appear as follows:![](img/db6a42fd-fa3c-4b08-b667-b72a942fd2b9.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding example, we modified the factory pattern to be a bit more flexible.
    Rather than calling the factory function directly, we created new ones with the
    `MissionProgramFactoryFn` function. In effect, we created a factory of factories!
  prefs: []
  type: TYPE_NORMAL
- en: Variables within a JavaScript function are available to any blocks contained
    by that function. Thus, the `rocketName`, `destinationName`, and `payloadName`
    values are available to the body of the factory functions returned from `MissionProgramFactoryFn`. 
    This way, we reuse common values for new instances without repeating them.
  prefs: []
  type: TYPE_NORMAL
- en: Returning a function from a function is called a second-order function; this
    pattern is common in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Combining existing design patterns to fit different use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modifying and extending patterns doesn't mean that we must forge ahead into
    *terra incognita*. It is still advisable to use well-known patterns when tackling
    new problems.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to combine two patterns to better fit a given
    use case.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you already have a workspace that allows you to create and
    run ES modules in your browser. If you don't, please see the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `09-07-combine-design-patters-to-fit-new-use-case`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Mission`. Create
    a constructor that assigns a `name` argument to an instance variable. Add a simple
    `print` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `Destination`. Create a constructor that assigns a `name` argument
    to an instance variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `Payload`. Create a constructor that assigns a `name` argument
    to an instance variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `Rocket`. Create a constructor that assigns a `name` argument
    to an instance variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `MissionBuilder` class that defines setters for the mission''s `name`,
    `payload`, and `rocket`properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `build` function that assembles all of these properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `MarsMissionFactory` object that takes `name` and `rocket` arguments,
    and uses `MissionBuilder` to assemble a new mission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function that creates and describes a few instances of Mars
    missions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your output should appear as follows:![](img/f672f48e-2e12-4880-a393-09b6c0b82330.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`MarsMissionFactory` receives the values for the `name` and `rocket` properties
    of `mission`, then supplies the remaining values to a builder instance. This narrows
    the properties required to make a new `mission`, while still using the builder
    interface.'
  prefs: []
  type: TYPE_NORMAL
- en: This method of combining rather than modifying patterns is preferable in many
    use cases. Like more established library code, better-known patterns have better-defined
    contracts and more predictable behavior than custom ones. Their familiarity makes
    them easier for a newcomer to understand.
  prefs: []
  type: TYPE_NORMAL
