["```js\nsomeModel.attributes.foo = 'bar'; // don't do this\n$('#foo').append(someView.el); // feel free to do this\n```", "```js\nvar MyView = Backbone.View.extend({\n    // instance properties and methods of MyView go here\n}, {\n    // static properties and methods of MyView go here\n});\n```", "```js\nvar NiftyFormView = Backbone.View.extend({\n    className: 'nifty',\n    tagName: 'form'\n});\nvar niftyFormView = new NiftyFormView();\nvar niftyFormView2 = new Backbone.View({\n    className: 'nifty',\n    tagName: 'form'});\n// niftyFormView and niftyFormView2 have identical \"el\" properties\n```", "```js\nrender: function() {\n    return this;\n}\n```", "```js\nvar book = new Backbone.Model({ \n    title: 'Another Fake Title? Why?'\n});\nvar bookView = new Backbone.View({model: book});\n// book == bookView.model;\n```", "```js\nrender: function() {\n    this.$el.html(this.template(this.model.toJSON()));\n    return this;\n}\n```", "```js\nvar formView = new Backbone.View({tagName: 'form'});\nformView.$el.is('form'); // returns true\n```", "```js\nvar formView = new Backbone.View({\n    el: '<form><input value=\"foo\" /></form>'\n});\nvar $input = formView.$('input');\n$input.val(); // == \"foo\"\n```", "```js\nvar fooForm = new Backbone.View({id: 'foo', tagName: 'form'});\nvar $fooForm = fooForm.$el;\n```", "```js\nvar FormView = Backbone.View.extend({\n    id: 'clickableForm',\n    initialize: function() {\n        this.$el.on('click', _.bind(this.handleClick, this));\n    },\n    handleClick: function() {\n        alert('You clicked on ' + this.id + '!');\n    }\n});\nvar $form = new FormView().$el;\n$form.click(); // alerts \"You clicked on clickableForm!\"\n```", "```js\nvar FormView = Backbone.View.extend({\n    events: {'click': 'handleClick'},\n    id: 'clickableForm',\n\n    handleClick: function() {\n        alert('You clicked on ' + this.id + '!');\n    }\n});\nvar $form = new FormView().$el;\n$form.click(); // alerts \"You clicked on clickableForm!\"\n```", "```js\nvar formView = new Backbone.View({el: '#someForm'});\nformView.setElement($('#someOtherForm'));\n// formView.el == someOtherForm\n```", "```js\nrender: function() {\n    this.$el.html(this.template(this.model.toJSON()));\n    return this;\n}\n```", "```js\nvar author ={\n    firstName: 'Isaac',\n    lastName: 'Asimov',\n    genre: 'science-fiction'\n};\nvar templateString = '<%= firstName %> <%= lastName %> was a '+\n                     'great <%= genre %> author.';\nvar template = _.template(templateString);\nalert(template(author));\n// will alert \"Isaac Asimov was a great science-fiction author.\"\n```", "```js\nvar authorTemplate =  _.template(\n    '<h1>' +\n        '<%= firstName %> <%= lastName %> was a ' +\n        '<em><%= genre %></em> author.' +\n    '</h1>'\n);\nvar AuthorView = Backbone.View.extend({\n  template: authorTemplate,\n  render: function() {\n    this.$el.html(this.template(this.model.toJSON()));\n    return this;\n  }\n});\nvar tolkien = new Backbone.Model({\n    firstName: 'J.R.R.', // Tolkien's actual first name was John\n    lastName: 'Tolkien',\n    genre: 'fantasy'\n});\nvar tolkienView = new AuthorView({model: tolkien});\nvar tolkientHtml = tolkienView.render().$el.html();\nalert(tolkienHtml);\n// alerts \"<h1>J.R.R. Tolkien was a <em>fantasy</em> author.</h1>\"\n```", "```js\nvar heOrShe = '{{#if isMale }}he{{else}}she{{/if}}';\n```", "```js\nvar heOrSheTemplate = Handlebars.compile(heOrShe);\nalert(heOrSheTemplate({isMale: false})); // alerts \"she\"\n```", "```js\nvar AuthorView = Backbone.View.extend({\n  render: function() {\n    var h1View = new Backbone.View({tagName: 'h1'});\n    var emView = new Backbone.View({tagName: 'em'});\n    emView.text(this.model.get('genre'));\n    h1View.$el.html(this.model.get('firstName') + ' ' +\n                    this.model.get('lastName') + ' was a ');\n    h1View.$el.append(emView.el, ' author.');\n    this.$el.html(h1View.el);\n    return this;\n  }\n});\n```", "```js\nvar ListItemView = Backbone.View({\n    tagName: 'li',\n    template: _.template('<%= value1 %> <%= value2 %> are both ' +\n                         'values, just like <%= value3 %>'),\n    render: function() {\n        this.$el.html(this.template(this.model.toJSON()));\n        return this;\n    }\n});\nvar ListView = Backbone.View.extend({\n  tagName: 'ul',\n  render: function() {\n    this.$el.toggleClass('boldList', this.model.get('isBold'));\n    this.$el.toggleClass('largeFontList',\n                         this.model.get('useLargeFont'));\n    this.$el.empty();\n    this.collection.each(function(model) {\n        var itemView = new ListItemView({model: model});\n        this.$el.append(itemView.render().el);\n    }, this);\n    this.$el.html(this.template(this.model.toJSON()));\n    return this;\n  }\n});\n```", "```js\nvar ListView1 = Backbone.View.extend({\n    render: function() {\n        this.$el.append(new ListItemView().render().el);\n    }\n});\nvar ListView2 = Backbone.View.extend({\n    render: function() {\n        this.$el.append('<li>');\n        new ListItemView({el: this.$('li')}).render();\n    }\n});\n```", "```js\nvar ViewThatReturnsThis = Backbone.View.extend({render: function() {\n        // do the rendering\n        return this;\n    }\n});\nvar childView = new ViewThatReturnsThis();\nparentView.$el.append(childView.render().$el);\n```", "```js\nvar ViewThatReturns$el = Backbone.View.extend({render: function() {\n        // do the rendering\n        return this.$el;\n    }\n});\nvar childView = new ViewThatReturns$el();\nparentView.$el.append(childView.render());\n```", "```js\nparentView.$el.append(childView.render().nextMethod());// won't work\n```"]