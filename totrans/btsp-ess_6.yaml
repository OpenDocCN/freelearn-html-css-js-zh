- en: Chapter 6. Compiling and Building Bootstrap
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 编译和构建Bootstrap
- en: Until now, we have discussed the basics of Bootstrap, understood the architecture,
    and explored all the features and functionalities of Bootstrap.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了Bootstrap的基础知识，了解了其架构，并探索了Bootstrap的所有功能和特性。
- en: We have also created a simple web application using various Bootstrap components.
    However, we have used the Bootstrap CSS and JS files as it is and haven't changed
    or updated anything in any of the files. Even though updating of JavaScript files
    is very rare and you won't find any normal reason to change anything in the JS
    files, overriding the CSS files are very common, and in most of the cases, very
    much essential when you are building a web application using Bootstrap as frontend
    framework for final production use. You of course, would need to change the colors,
    fonts, and much more to meet your client's brand guide.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用各种Bootstrap组件创建了一个简单的Web应用程序。然而，我们使用了Bootstrap的CSS和JS文件，并没有更改或更新任何文件。尽管JavaScript文件的更新非常罕见，你也不会找到任何正常理由去更改JS文件中的内容，但覆盖CSS文件是非常常见的，在大多数情况下，当你使用Bootstrap作为前端框架进行最终生产使用时，这是非常必要的。你当然需要更改颜色、字体等等，以满足客户品牌指南。
- en: Even though it seems to be very easy to update the `bootstrap.css` file and
    enter your own colors, font names, and so on, but you can imagine that it is not
    at all the suggested approach.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管更新`bootstrap.css`文件并输入自己的颜色、字体名称等看起来非常简单，但你可能想象得到，这绝对不是建议的方法。
- en: As we have briefly discussed earlier, Bootstrap uses **LESS** preprocessor quite
    extensively and the right approach for overriding the CSS class values of Bootstrap
    is to change those variables in LESS files. Compiling and building Bootstrap means
    actually compiling those LESS files, generating the distributable CSS files, and
    also generating the final JavaScript files.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前简要讨论过的，Bootstrap广泛使用了**LESS**预处理器，覆盖Bootstrap CSS类值的正确方法是在LESS文件中更改这些变量。编译和构建Bootstrap实际上意味着编译这些LESS文件，生成可分发CSS文件，以及生成最终的JavaScript文件。
- en: 'In this chapter, we will look into how we can establish the compilation and
    build an environment for Bootstrap. In the next chapter, we will explore how to
    update the LESS variables in order to override the default look and feel of Bootstrap
    using this development environment. Here are the major points that we will cover
    here:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何为Bootstrap建立编译和构建环境。在下一章中，我们将探索如何使用这个开发环境更新LESS变量，以覆盖Bootstrap的默认外观和感觉。以下是本章将涵盖的主要要点：
- en: The list of tools required to build Bootstrap, how to install and configure
    those tools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Bootstrap所需的工具列表，如何安装和配置这些工具
- en: How to install Bootstrap source code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装Bootstrap源代码
- en: How to compile and build Bootstrap using these tools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用这些工具编译和构建Bootstrap
- en: Note
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will be using various tools for compiling and building Bootstrap here. However,
    we will not discuss those tools in depth, but will mainly focus on how to use
    those tools to build Bootstrap.
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们将使用各种工具来编译和构建Bootstrap。然而，我们不会深入讨论这些工具，而是主要关注如何使用这些工具来构建Bootstrap。
- en: Required tools
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必需的工具
- en: 'You will need the following tools:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要以下工具：
- en: Node.js
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js
- en: Grunt
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grunt
- en: Optionally, you may also use Bower; however, in our case, we will discuss about
    the steps involving and using node.js.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，你也可以使用Bower；然而，在我们的案例中，我们将讨论涉及和使用node.js的步骤。
- en: Node.js
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Node.js
- en: '**Node.js** is an open source runtime environment for server-side and networking
    applications. In simple terms, node.js is a server-side JavaScript runtime environment.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**Node.js**是一个开源的服务器和网络应用程序运行时环境。简单来说，node.js是一个服务器端JavaScript运行时环境。'
- en: The whole framework is based on the JavaScript language—it is written in JavaScript,
    it is executed within a JavaScript runtime environment; the applications developed
    on node.js are also based on JavaScript. It uses Google V8 JavaScript engine to
    execute the end application code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 整个框架基于JavaScript语言——它是用JavaScript编写的，在JavaScript运行时环境中执行；在node.js上开发的应用程序也是基于JavaScript的。它使用Google
    V8 JavaScript引擎来执行最终应用程序代码。
- en: Along with node.js, an important component that comes in the bundle is the **Node
    Package Manager** (**npm**). This component finds, extracts, and installs all
    the dependencies of a JavaScript application. In other words, it manages the whole
    dependency installation processes so that you need not have to find out which
    other elements we need to run and execute a particular software package.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了node.js，捆绑包中还包括一个重要的组件，即**节点包管理器**（**npm**）。该组件用于查找、提取和安装JavaScript应用程序的所有依赖项。换句话说，它管理整个依赖项安装过程，这样你就不必找出运行和执行特定软件包所需的其他元素。
- en: Thus, we will use the npm engine in order to get the source code and all other
    related software of Bootstrap. We will first install node.js, and the npm engine
    will come along with that.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用npm引擎来获取Bootstrap的源代码和所有相关软件。我们首先安装node.js，npm引擎将随它一起安装。
- en: Note
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The npm has a few advantages over Bower. For example, npm manages to avoid dependency
    conflicts by using nested dependencies. While, on the other hand, Bower is optimized
    only for frontends.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: npm相对于Bower有一些优势。例如，npm通过使用嵌套依赖项来避免依赖项冲突。而另一方面，Bower仅针对前端进行了优化。
- en: Installing node.js
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装node.js
- en: If you are using 64-bit Windows, you can get the latest node.js installer from
    [http://nodejs.org/dist/v0.12.1/x64/node-v0.12.1-x64.msi](http://nodejs.org/dist/v0.12.1/x64/node-v0.12.1-x64.msi).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用64位Windows，你可以从[http://nodejs.org/dist/v0.12.1/x64/node-v0.12.1-x64.msi](http://nodejs.org/dist/v0.12.1/x64/node-v0.12.1-x64.msi)获取最新的node.js安装程序。
- en: 'However, for other distributions, visit [https://nodejs.org/download/](https://nodejs.org/download/).
    There you will find various Windows, Linux, and Mac installer packages. After
    downloading this, install node.js in your machine. When installation is finished,
    make sure that you have the node.js installation folder included in your windows
    executable path. This is because we will use the npm **Command-line Interface**
    (**CLI**) later on. Let''s test our installation:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于其他发行版，请访问[https://nodejs.org/download/](https://nodejs.org/download/)。在那里你可以找到各种Windows、Linux和Mac安装程序包。下载后，在你的机器上安装node.js。安装完成后，确保node.js安装文件夹包含在Windows可执行路径中。这是因为我们稍后将会使用npm的**命令行界面**（**CLI**）。让我们测试我们的安装：
- en: Open windows command prompt.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Windows命令提示符。
- en: Write `npm`, and press *Enter*. If you get the following screen, everything
    is in order:![Installing node.js](img/B03987_06_01.jpg)
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`npm`，然后按*Enter*。如果你看到以下屏幕，说明一切正常：![安装node.js](img/B03987_06_01.jpg)
- en: Grunt
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Grunt
- en: As their website suggests, Grunt is the JavaScript task runner. Almost like
    Apache Ant, where you put a long list of tasks to do, and the engine executes
    each task one by one. In case of JavaScript-based frameworks and applications,
    we use Grunt.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如他们的网站所建议的，Grunt是JavaScript任务运行器。几乎就像Apache Ant一样，你将一个长长的任务列表放入其中，然后引擎逐个执行这些任务。在基于JavaScript的框架和应用程序的情况下，我们使用Grunt。
- en: Like in case of Ant, we have a `build.xml` file; in case of Grunt, we have a
    `Gruntfile.js` file—where all the tasks that are to be executed are listed, which
    means this is the file where the Grunt project is configured.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在Ant的情况下，我们有`build.xml`文件；在Grunt的情况下，我们有`Gruntfile.js`文件——其中列出了所有要执行的任务，这意味着这是配置Grunt项目的文件。
- en: In our current scope, we do not need to understand the full architecture of
    Grunt and Grunt file, we will just use this engine to compile and build Bootstrap.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们当前的范围内，我们不需要了解Grunt和Grunt文件的完整架构，我们只是使用这个引擎来编译和构建Bootstrap。
- en: However, first we have to install Grunt. For our purpose of compiling and building
    Bootstrap, we only need the `grunt-cli` module, not the full Grunt task runner.
    This is the CLI module of Grunt.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，首先我们必须安装Grunt。为了编译和构建Bootstrap的目的，我们只需要`grunt-cli`模块，而不是完整的Grunt任务运行器。这是Grunt的CLI模块。
- en: Installing Grunt-cli
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Grunt-cli
- en: The good part is that nothing needs to be manually downloaded for this. We have
    downloaded and installed npm in an earlier section, and now the rest of the installations
    will be handled and managed by npm only. Open the windows command prompt with
    administrative privileges.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 好处是，无需手动下载。我们已经在早期部分下载并安装了npm，现在其余的安装将由npm处理和管理。以管理员权限打开Windows命令提示符。
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: However, having the admin privilege is optional; if you can't manage that, go
    ahead with normal command prompt.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，拥有管理员权限是可选的；如果你无法管理，可以继续使用正常的命令提示符。
- en: 'Type this command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should see an output similar to the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到一个类似于以下截图的输出：
- en: '![Installing Grunt-cli](img/B03987_06_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![安装Grunt-cli](img/B03987_06_02.jpg)'
- en: As you can see, the `grunt-cli` module has been installed in my `C:\Users\Snig\AppData\Roaming\npm\node_modules`
    folder. The `grunt.cmd` command file is installed in `C:\Users\Snig\AppData\Roaming\npm`
    folder.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`grunt-cli` 模块已被安装在我的 `C:\Users\Snig\AppData\Roaming\npm\node_modules`
    文件夹中。`grunt.cmd` 命令文件被安装在 `C:\Users\Snig\AppData\Roaming\npm` 文件夹中。
- en: Check this output in your screen and mark the folder where `grunt-cli` has been
    installed. Check your windows `path` variable, if this folder has been added into
    the path or not. If not, you have to manually add this folder in your path.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的屏幕上检查这个输出，并标记 `grunt-cli` 已安装的文件夹。检查你的 Windows `path` 变量，如果这个文件夹已被添加到路径中，如果没有，你必须手动将这个文件夹添加到你的路径中。
- en: Tip
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Opening the windows command prompt with admin privileges (mentioned previously)
    is required only to update this system path.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用管理员权限（如前所述）打开 Windows 命令提示符仅用于更新此系统路径。
- en: Another way of course is to install the `grunt-cli` in the local folder where
    you are planning to install the Bootstrap source code, compile, and build them,
    which means your Bootstrap development folder.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法当然是在你计划安装 Bootstrap 源代码、编译和构建的本地文件夹中安装 `grunt-cli`，这意味着你的 Bootstrap 开发文件夹。
- en: Let's say, this folder in our case is `D:\Bootstrap`. This will be our development
    folder where we will download and install Bootstrap and will compile it and build
    it. Later on, in the next chapter, we will customize Bootstrap in this folder
    only.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 假设，在我们的例子中，这个文件夹是 `D:\Bootstrap`。这将是我们下载和安装 Bootstrap、编译和构建它的开发文件夹。在下一章中，我们只在这个文件夹中自定义
    Bootstrap。
- en: 'In order to install `grunt-cli` in this local folder, we run the following
    command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在这个本地文件夹中安装 `grunt-cli`，我们运行以下命令：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: However, we will go ahead with installing Grunt as in the first method—with
    the `–g` option. This option ensures that the package is installed in global mode.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们将继续使用第一种方法安装 Grunt，使用 `–g` 选项。此选项确保包以全局模式安装。
- en: Note
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more options and information on installing packages using npm, please see
    [https://docs.npmjs.com/cli/install](https://docs.npmjs.com/cli/install).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用 npm 安装包的更多选项和信息，请参阅 [https://docs.npmjs.com/cli/install](https://docs.npmjs.com/cli/install)。
- en: 'Once everything is done, you can test the installation by executing command
    Grunt in the windows command prompt, as shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一切完成后，你可以通过在 Windows 命令提示符中执行 Grunt 命令来测试安装，如下面的截图所示：
- en: '![Installing Grunt-cli](img/B03987_06_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Grunt-cli](img/B03987_06_03.jpg)'
- en: We are facing this error since we have executed grunt in a folder where no grunt
    project is configured, which means there is no `Gruntfile.js` file in this folder.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遇到这个错误是因为我们在没有配置 grunt 项目的文件夹中执行了 grunt，这意味着这个文件夹中没有 `Gruntfile.js` 文件。
- en: Installing Bootstrap
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Bootstrap
- en: 'We will now install Bootstrap, get the Bootstrap source code, and prepare to
    create our development environment for Bootstrap. Follow these steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将安装 Bootstrap，获取 Bootstrap 源代码，并为创建 Bootstrap 的开发环境做准备。按照以下步骤操作：
- en: Open windows command prompt and navigate to the `D:\Bootstrap` folder.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Windows 命令提示符并导航到 `D:\Bootstrap` 文件夹。
- en: 'Run the following command:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: '[PRE2]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You will get the following output:![Installing Bootstrap](img/B03987_06_04.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将得到以下输出：![安装 Bootstrap](img/B03987_06_04.jpg)
- en: 'As you might have guessed, Bootstrap 3.3.4 version has been downloaded and
    installed. Now, let''s have a look at our installation folder:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所猜，Bootstrap 3.3.4 版本已被下载和安装。现在，让我们看看我们的安装文件夹：
- en: You have got one new folder created named `node_modules`
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经创建了一个名为 `node_modules` 的新文件夹
- en: Inside the `node_modules` folder, another new folder has been created named
    `bootstrap`
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `node_modules` 文件夹中，已创建了一个名为 `bootstrap` 的新文件夹
- en: Inside this new folder, you have got the Bootstrap source code bundle
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个新文件夹中，你已经获取了 Bootstrap 源代码包
- en: 'Note that the previous command downloads and installs the latest available
    version of Bootstrap. If you need any older versions, you execute this command
    (we are installing Bootstrap version 3.3.1 here in this command):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，之前的命令下载并安装了 Bootstrap 的最新可用版本。如果你需要任何旧版本，你可以执行此命令（在此命令中我们安装 Bootstrap 版本
    3.3.1）：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should get this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到这个：
- en: '![Installing Bootstrap](img/B03987_06_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Bootstrap](img/B03987_06_05.jpg)'
- en: 'Now, if you check the contents of the newly created folders, you will see the
    downloaded source code bundle of Bootstrap:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你检查新创建文件夹的内容，你会看到 Bootstrap 下载的源代码包：
- en: '![Installing Bootstrap](img/B03987_06_06.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Bootstrap](img/B03987_06_06.jpg)'
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Interestingly, you can compare these files and folders with the source code
    bundle we had downloaded in [Chapter 2](ch02.html "Chapter 2. Getting Started
    with Bootstrap"), *Getting Started with Bootstrap*. There we had downloaded Bootstrap
    source code archive from GitHub using the URL [https://github.com/twbs/bootstrap/archive/v3.3.1.zip](https://github.com/twbs/bootstrap/archive/v3.3.1.zip).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，你可以将这些文件和文件夹与我们在[第2章](ch02.html "第2章. Bootstrap入门")中下载的源代码包进行比较，*Bootstrap入门*。在那里，我们使用URL
    [https://github.com/twbs/bootstrap/archive/v3.3.1.zip](https://github.com/twbs/bootstrap/archive/v3.3.1.zip)
    从GitHub下载了Bootstrap源代码存档。
- en: You can see both the downloaded versions are exactly the same. However, here
    we are creating our development environment for Bootstrap, not just downloading
    the source code.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到下载的版本完全相同。然而，我们现在正在为Bootstrap创建开发环境，而不仅仅是下载源代码。
- en: For understanding the background information on exactly what happened, npm is
    the repository and package manager for a number of JavaScript- and CSS-based tools
    and packages. Each of these packages are identified by a unique name.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解确切发生了什么，npm是许多基于JavaScript和CSS的工具和包的仓库和包管理器。每个包都有一个独特的名称。
- en: In our case, earlier we have installed `grunt-cli` and now we have installed
    `bootstrap`—`grunt-cli` and here `bootstrap` is the name of the package which
    we are trying to install. For the list of packages available in npm, you can visit
    [https://www.npmjs.com/](https://www.npmjs.com/).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们之前已经安装了`grunt-cli`，现在我们安装了`bootstrap`——`grunt-cli`和这里的`bootstrap`是我们试图安装的包的名称。要查看npm中可用的包列表，你可以访问[https://www.npmjs.com/](https://www.npmjs.com/)。
- en: 'If you search for package `bootstrap` there, you will get more than 2,000 results—this
    means that there are more than 2,000 packages available in npm by this name. Here
    is a screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你搜索`bootstrap`这个包，你会得到超过2,000个结果——这意味着在npm中，以这个名字命名的包有超过2,000个。以下是一个截图：
- en: '![Installing Bootstrap](img/B03987_06_07.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![安装Bootstrap](img/B03987_06_07.jpg)'
- en: 'If we click on the first one in this list, we will land into the main Bootstrap
    package page in npm ([https://www.npmjs.com/package/bootstrap](https://www.npmjs.com/package/bootstrap)):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击列表中的第一个，我们就会进入npm中的主要Bootstrap包页面([https://www.npmjs.com/package/bootstrap](https://www.npmjs.com/package/bootstrap))：
- en: '![Installing Bootstrap](img/B03987_06_08.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![安装Bootstrap](img/B03987_06_08.jpg)'
- en: As of now, we have got the Bootstrap source code bundle with us, we are now
    ready to compile, build, and generate the final distributable files.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有了Bootstrap源代码包，我们现在准备好编译、构建并生成最终的分发文件。
- en: Tip
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that, at the right-hand side menu, the installation command `npm install
    bootstrap` is mentioned. This is how you install Bootstrap via npm.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在右侧菜单中提到了安装命令`npm install bootstrap`。这就是通过npm安装Bootstrap的方法。
- en: Compiling and building Bootstrap
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译和构建Bootstrap
- en: If you explore the `bootstrap` folder, you can see a `dist` folder as well,
    which contains the final distributable CSS, JavaScript, and Font files. The target
    of building a project is to generate this `dist` folder so that it can be used
    in the actual application.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你探索`bootstrap`文件夹，你还可以看到一个`dist`文件夹，其中包含最终的CSS、JavaScript和字体文件。构建项目的目标就是生成这个`dist`文件夹，以便在实际应用中使用。
- en: First thing we would do is to delete this `dist` folder, since our processes
    would regenerate this. Deleting this is however not essential, since in any case,
    the build process will create or override the existing files and folders.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要做的事情是删除这个`dist`文件夹，因为我们的过程会重新生成它。然而，删除这个文件夹并不是必需的，因为无论如何，构建过程都会创建或覆盖现有的文件和文件夹。
- en: Installing dependencies
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: 'To install the dependencies, follow these steps:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装依赖项，请按照以下步骤操作：
- en: First, we need to install the other dependencies of building and running Bootstrap.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要安装构建和运行Bootstrap的其他依赖项。
- en: 'Go to the `D:\Bootstrap\node_modules\bootstrap` folder and run the command:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往`D:\Bootstrap\node_modules\bootstrap`文件夹并运行以下命令：
- en: '[PRE4]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will get the list of dependencies from the `package.json` file located
    in the current `bootstrap` folder and will install all of these. Taking a segment
    of the file, here are the list of dependencies as of Bootstrap 3.3.1:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从当前`bootstrap`文件夹中的`package.json`文件获取依赖项列表，并将安装所有这些依赖项。以下是从文件中摘取的一段，以下是Bootstrap
    3.3.1的依赖项列表：
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Thus, when the preceding command (`npm install`) is completed successfully
    (make sure that there are no errors in this step, otherwise the future steps may
    not work properly), you will get another `node_modules` folder beneath your `bootstrap`
    folder—this holds all the dependencies that are needed to build Bootstrap:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当前面的命令（`npm install`）成功完成后（确保此步骤没有错误，否则后续步骤可能无法正常工作），您将在`bootstrap`文件夹下获得另一个`node_modules`文件夹——这包含了构建Bootstrap所需的所有依赖项：
- en: '![Installing dependencies](img/B03987_06_09.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![安装依赖项](img/B03987_06_09.jpg)'
- en: As you can see, all the dependencies have been installed as listed in the `package.json`
    file.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，所有依赖项都已按照`package.json`文件中列出的内容安装。
- en: Building Bootstrap
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建Bootstrap
- en: 'Finally, it is time to compile and build Bootstrap. We are essentially doing
    the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是时候编译和构建Bootstrap了。我们实际上正在做以下事情：
- en: Compiling here means actually compiling the LESS files and generating the actual
    and final CSS files
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译（Compiling）在这里意味着实际编译LESS文件并生成实际的最终CSS文件。
- en: Building means final packaging or bundling of all CSS, JavaScript, and Font
    files, which are ready to be consumed in the actual application.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建（Building）意味着所有CSS、JavaScript和字体文件的最终打包或捆绑，这些文件准备在实际应用程序中使用。
- en: 'We again, go to the `D:\Bootstrap\node_modules\bootstrap` folder and run this
    command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次进入`D:\Bootstrap\node_modules\bootstrap`文件夹并运行此命令：
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If everything works fine, you would get this output:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，您将得到以下输出：
- en: '![Building Bootstrap](img/B03987_06_10.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![构建Bootstrap](img/B03987_06_10.jpg)'
- en: 'Let''s check the folder structure now. If you see the `bootstrap` folder, you
    will see the `dist` folder and files inside that has recreated. We will just have
    a brief look of what exactly happened behind the scenes. Grunt has executed at
    least 11 major tasks in this project:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们检查文件夹结构。如果您看到`bootstrap`文件夹，您将看到其中的`dist`文件夹和文件，它们已经被重新创建。我们将简要地看看幕后到底发生了什么。Grunt在这个项目中至少执行了11个主要任务：
- en: '| Task | Description |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 任务 | 描述 |'
- en: '| --- | --- |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `clean:dist` | Grunt has tried to delete the `dist` folder, which we had
    already removed earlier. Thus, you can see, you don''t have to manually clean
    up the `dist` folder. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `clean:dist` | Grunt尝试删除`dist`文件夹，这是我们之前已经删除的。因此，您可以看到，您不需要手动清理`dist`文件夹。|'
- en: '| `less:compileCore` | In this step, Grunt has compiled the LESS files and
    code to generate the Bootstrap main CSS file. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `less:compileCore` | 在此步骤中，Grunt已编译LESS文件和代码，以生成Bootstrap主CSS文件。|'
- en: '| `less:compileTheme` | In this step, Grunt has compiled the LESS files and
    code to generate the Bootstrap theme CSS file. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `less:compileTheme` | 在此步骤中，Grunt已编译LESS文件和代码，以生成Bootstrap主题CSS文件。|'
- en: '| `autoprefixer:core` | Autoprefixer is a tool or method that parses CSS files
    and adds vendor-specific prefixes (for example, `-webkit-transition: -webkit-transform
    1s;`). This task discovers all the places where you need this autoprefixer and
    adds the specific prefixes in the Bootstrap main CSS file. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `autoprefixer:core` | Autoprefixer是一个解析CSS文件并添加特定供应商前缀的工具或方法（例如，`-webkit-transition:
    -webkit-transform 1s;`）。此任务会查找所有需要此autoprefixer的地方，并在Bootstrap主CSS文件中添加特定的前缀。|'
- en: '| `autoprefixer:theme` | This task discovers all the places where you need
    this autoprefixer and adds the specific prefixes in the Bootstrap theme CSS file.
    |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `autoprefixer:theme` | 此任务会查找所有需要此autoprefixer的地方，并在Bootstrap主题CSS文件中添加特定的前缀。|'
- en: '| `csscomb:dist` | Formatted and beautified the CSS files. |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `csscomb:dist` | 格式化和美化CSS文件。|'
- en: '| `cssmin:minifyCore` | Finally, when the CSS files has been generated, this
    task minifies the files. In other words in this task, the `bootstrap.min.css`
    file has been created. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `cssmin:minifyCore` | 最后，当CSS文件生成后，此任务会压缩文件。换句话说，在这个任务中，创建了`bootstrap.min.css`文件。|'
- en: '| `cssmin:minifyTheme` | Similar to the previous one, this task creates the
    `bootstrap-theme.min.css` file. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `cssmin:minifyTheme` | 与上一个任务类似，此任务创建了`bootstrap-theme.min.css`文件。|'
- en: '| `copy:fonts` | As the name suggests, this task creates and copies all the
    Fonts files in the `dist` folder. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `copy:fonts` | 如其名所示，此任务在`dist`文件夹中创建并复制所有字体文件。|'
- en: '| `concat:bootstrap` | Having handled the CSS files until now, this task concatenates
    and merges all the individual JavaScript files into one final file—`bootstrap.js`.
    |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `concat:bootstrap` | 到目前为止，此任务已处理CSS文件，将所有单独的JavaScript文件合并成一个最终的文件——`bootstrap.js`。|'
- en: '| `uglify:core` | As the earlier tasks had minified the CSS files, this task
    also minifies the JavaScript file. In this step, the `bootstrap.min.js` file is
    created. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `uglify:core` | 由于前面的任务已经压缩了 CSS 文件，这个任务也将 JavaScript 文件进行压缩。在这一步中，创建了 `bootstrap.min.js`
    文件。 |'
- en: All these steps (along with some others) are mentioned and configured in the
    `Gruntfile.js` file, which you can find in the `bootstrap` source code folder.
    Thus finally, you have got the distributable version of your own Bootstrap CSS
    and JS files.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些步骤（以及一些其他步骤）都在 `Gruntfile.js` 文件中提及和配置，您可以在 `bootstrap` 源代码文件夹中找到它。因此，最终，您已经得到了您自己的
    Bootstrap CSS 和 JS 文件的可分发版本。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned a few new tools and systems that are quite useful
    and popular nowadays while creating CSS and JavaScript applications—node.js and
    Grunt.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了一些现在在创建 CSS 和 JavaScript 应用程序时相当有用且流行的工具和系统——node.js 和 Grunt。
- en: We saw how to install and configure these tools. Finally, we saw how to use
    these tools in order to compile Bootstrap LESS files and generate consumable CSS
    files. We learned how to package and build the Bootstrap files and generate the
    whole distributable bundle.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何安装和配置这些工具。最后，我们看到了如何使用这些工具来编译 Bootstrap LESS 文件并生成可消费的 CSS 文件。我们学习了如何打包和构建
    Bootstrap 文件并生成整个可分发包。
- en: In the next chapter, we will see how to customize Bootstrap to meet your design
    and look-and-feel requirements.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解如何自定义 Bootstrap 以满足您的设计和外观感受需求。
