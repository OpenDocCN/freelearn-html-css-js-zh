- en: Chapter 6. Compiling and Building Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we have discussed the basics of Bootstrap, understood the architecture,
    and explored all the features and functionalities of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: We have also created a simple web application using various Bootstrap components.
    However, we have used the Bootstrap CSS and JS files as it is and haven't changed
    or updated anything in any of the files. Even though updating of JavaScript files
    is very rare and you won't find any normal reason to change anything in the JS
    files, overriding the CSS files are very common, and in most of the cases, very
    much essential when you are building a web application using Bootstrap as frontend
    framework for final production use. You of course, would need to change the colors,
    fonts, and much more to meet your client's brand guide.
  prefs: []
  type: TYPE_NORMAL
- en: Even though it seems to be very easy to update the `bootstrap.css` file and
    enter your own colors, font names, and so on, but you can imagine that it is not
    at all the suggested approach.
  prefs: []
  type: TYPE_NORMAL
- en: As we have briefly discussed earlier, Bootstrap uses **LESS** preprocessor quite
    extensively and the right approach for overriding the CSS class values of Bootstrap
    is to change those variables in LESS files. Compiling and building Bootstrap means
    actually compiling those LESS files, generating the distributable CSS files, and
    also generating the final JavaScript files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look into how we can establish the compilation and
    build an environment for Bootstrap. In the next chapter, we will explore how to
    update the LESS variables in order to override the default look and feel of Bootstrap
    using this development environment. Here are the major points that we will cover
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: The list of tools required to build Bootstrap, how to install and configure
    those tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install Bootstrap source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to compile and build Bootstrap using these tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We will be using various tools for compiling and building Bootstrap here. However,
    we will not discuss those tools in depth, but will mainly focus on how to use
    those tools to build Bootstrap.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Required tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will need the following tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grunt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, you may also use Bower; however, in our case, we will discuss about
    the steps involving and using node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Node.js** is an open source runtime environment for server-side and networking
    applications. In simple terms, node.js is a server-side JavaScript runtime environment.'
  prefs: []
  type: TYPE_NORMAL
- en: The whole framework is based on the JavaScript language—it is written in JavaScript,
    it is executed within a JavaScript runtime environment; the applications developed
    on node.js are also based on JavaScript. It uses Google V8 JavaScript engine to
    execute the end application code.
  prefs: []
  type: TYPE_NORMAL
- en: Along with node.js, an important component that comes in the bundle is the **Node
    Package Manager** (**npm**). This component finds, extracts, and installs all
    the dependencies of a JavaScript application. In other words, it manages the whole
    dependency installation processes so that you need not have to find out which
    other elements we need to run and execute a particular software package.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, we will use the npm engine in order to get the source code and all other
    related software of Bootstrap. We will first install node.js, and the npm engine
    will come along with that.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The npm has a few advantages over Bower. For example, npm manages to avoid dependency
    conflicts by using nested dependencies. While, on the other hand, Bower is optimized
    only for frontends.
  prefs: []
  type: TYPE_NORMAL
- en: Installing node.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using 64-bit Windows, you can get the latest node.js installer from
    [http://nodejs.org/dist/v0.12.1/x64/node-v0.12.1-x64.msi](http://nodejs.org/dist/v0.12.1/x64/node-v0.12.1-x64.msi).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, for other distributions, visit [https://nodejs.org/download/](https://nodejs.org/download/).
    There you will find various Windows, Linux, and Mac installer packages. After
    downloading this, install node.js in your machine. When installation is finished,
    make sure that you have the node.js installation folder included in your windows
    executable path. This is because we will use the npm **Command-line Interface**
    (**CLI**) later on. Let''s test our installation:'
  prefs: []
  type: TYPE_NORMAL
- en: Open windows command prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write `npm`, and press *Enter*. If you get the following screen, everything
    is in order:![Installing node.js](img/B03987_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grunt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As their website suggests, Grunt is the JavaScript task runner. Almost like
    Apache Ant, where you put a long list of tasks to do, and the engine executes
    each task one by one. In case of JavaScript-based frameworks and applications,
    we use Grunt.
  prefs: []
  type: TYPE_NORMAL
- en: Like in case of Ant, we have a `build.xml` file; in case of Grunt, we have a
    `Gruntfile.js` file—where all the tasks that are to be executed are listed, which
    means this is the file where the Grunt project is configured.
  prefs: []
  type: TYPE_NORMAL
- en: In our current scope, we do not need to understand the full architecture of
    Grunt and Grunt file, we will just use this engine to compile and build Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: However, first we have to install Grunt. For our purpose of compiling and building
    Bootstrap, we only need the `grunt-cli` module, not the full Grunt task runner.
    This is the CLI module of Grunt.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Grunt-cli
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The good part is that nothing needs to be manually downloaded for this. We have
    downloaded and installed npm in an earlier section, and now the rest of the installations
    will be handled and managed by npm only. Open the windows command prompt with
    administrative privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: However, having the admin privilege is optional; if you can't manage that, go
    ahead with normal command prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see an output similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Grunt-cli](img/B03987_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the `grunt-cli` module has been installed in my `C:\Users\Snig\AppData\Roaming\npm\node_modules`
    folder. The `grunt.cmd` command file is installed in `C:\Users\Snig\AppData\Roaming\npm`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Check this output in your screen and mark the folder where `grunt-cli` has been
    installed. Check your windows `path` variable, if this folder has been added into
    the path or not. If not, you have to manually add this folder in your path.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Opening the windows command prompt with admin privileges (mentioned previously)
    is required only to update this system path.
  prefs: []
  type: TYPE_NORMAL
- en: Another way of course is to install the `grunt-cli` in the local folder where
    you are planning to install the Bootstrap source code, compile, and build them,
    which means your Bootstrap development folder.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say, this folder in our case is `D:\Bootstrap`. This will be our development
    folder where we will download and install Bootstrap and will compile it and build
    it. Later on, in the next chapter, we will customize Bootstrap in this folder
    only.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to install `grunt-cli` in this local folder, we run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: However, we will go ahead with installing Grunt as in the first method—with
    the `–g` option. This option ensures that the package is installed in global mode.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more options and information on installing packages using npm, please see
    [https://docs.npmjs.com/cli/install](https://docs.npmjs.com/cli/install).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once everything is done, you can test the installation by executing command
    Grunt in the windows command prompt, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Grunt-cli](img/B03987_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are facing this error since we have executed grunt in a folder where no grunt
    project is configured, which means there is no `Gruntfile.js` file in this folder.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now install Bootstrap, get the Bootstrap source code, and prepare to
    create our development environment for Bootstrap. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open windows command prompt and navigate to the `D:\Bootstrap` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will get the following output:![Installing Bootstrap](img/B03987_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you might have guessed, Bootstrap 3.3.4 version has been downloaded and
    installed. Now, let''s have a look at our installation folder:'
  prefs: []
  type: TYPE_NORMAL
- en: You have got one new folder created named `node_modules`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the `node_modules` folder, another new folder has been created named
    `bootstrap`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside this new folder, you have got the Bootstrap source code bundle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that the previous command downloads and installs the latest available
    version of Bootstrap. If you need any older versions, you execute this command
    (we are installing Bootstrap version 3.3.1 here in this command):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Bootstrap](img/B03987_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if you check the contents of the newly created folders, you will see the
    downloaded source code bundle of Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Bootstrap](img/B03987_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Interestingly, you can compare these files and folders with the source code
    bundle we had downloaded in [Chapter 2](ch02.html "Chapter 2. Getting Started
    with Bootstrap"), *Getting Started with Bootstrap*. There we had downloaded Bootstrap
    source code archive from GitHub using the URL [https://github.com/twbs/bootstrap/archive/v3.3.1.zip](https://github.com/twbs/bootstrap/archive/v3.3.1.zip).
  prefs: []
  type: TYPE_NORMAL
- en: You can see both the downloaded versions are exactly the same. However, here
    we are creating our development environment for Bootstrap, not just downloading
    the source code.
  prefs: []
  type: TYPE_NORMAL
- en: For understanding the background information on exactly what happened, npm is
    the repository and package manager for a number of JavaScript- and CSS-based tools
    and packages. Each of these packages are identified by a unique name.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, earlier we have installed `grunt-cli` and now we have installed
    `bootstrap`—`grunt-cli` and here `bootstrap` is the name of the package which
    we are trying to install. For the list of packages available in npm, you can visit
    [https://www.npmjs.com/](https://www.npmjs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you search for package `bootstrap` there, you will get more than 2,000 results—this
    means that there are more than 2,000 packages available in npm by this name. Here
    is a screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Bootstrap](img/B03987_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we click on the first one in this list, we will land into the main Bootstrap
    package page in npm ([https://www.npmjs.com/package/bootstrap](https://www.npmjs.com/package/bootstrap)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Bootstrap](img/B03987_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As of now, we have got the Bootstrap source code bundle with us, we are now
    ready to compile, build, and generate the final distributable files.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that, at the right-hand side menu, the installation command `npm install
    bootstrap` is mentioned. This is how you install Bootstrap via npm.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling and building Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you explore the `bootstrap` folder, you can see a `dist` folder as well,
    which contains the final distributable CSS, JavaScript, and Font files. The target
    of building a project is to generate this `dist` folder so that it can be used
    in the actual application.
  prefs: []
  type: TYPE_NORMAL
- en: First thing we would do is to delete this `dist` folder, since our processes
    would regenerate this. Deleting this is however not essential, since in any case,
    the build process will create or override the existing files and folders.
  prefs: []
  type: TYPE_NORMAL
- en: Installing dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install the dependencies, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to install the other dependencies of building and running Bootstrap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the `D:\Bootstrap\node_modules\bootstrap` folder and run the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will get the list of dependencies from the `package.json` file located
    in the current `bootstrap` folder and will install all of these. Taking a segment
    of the file, here are the list of dependencies as of Bootstrap 3.3.1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus, when the preceding command (`npm install`) is completed successfully
    (make sure that there are no errors in this step, otherwise the future steps may
    not work properly), you will get another `node_modules` folder beneath your `bootstrap`
    folder—this holds all the dependencies that are needed to build Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing dependencies](img/B03987_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, all the dependencies have been installed as listed in the `package.json`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Building Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, it is time to compile and build Bootstrap. We are essentially doing
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Compiling here means actually compiling the LESS files and generating the actual
    and final CSS files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building means final packaging or bundling of all CSS, JavaScript, and Font
    files, which are ready to be consumed in the actual application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We again, go to the `D:\Bootstrap\node_modules\bootstrap` folder and run this
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything works fine, you would get this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building Bootstrap](img/B03987_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s check the folder structure now. If you see the `bootstrap` folder, you
    will see the `dist` folder and files inside that has recreated. We will just have
    a brief look of what exactly happened behind the scenes. Grunt has executed at
    least 11 major tasks in this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Task | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `clean:dist` | Grunt has tried to delete the `dist` folder, which we had
    already removed earlier. Thus, you can see, you don''t have to manually clean
    up the `dist` folder. |'
  prefs: []
  type: TYPE_TB
- en: '| `less:compileCore` | In this step, Grunt has compiled the LESS files and
    code to generate the Bootstrap main CSS file. |'
  prefs: []
  type: TYPE_TB
- en: '| `less:compileTheme` | In this step, Grunt has compiled the LESS files and
    code to generate the Bootstrap theme CSS file. |'
  prefs: []
  type: TYPE_TB
- en: '| `autoprefixer:core` | Autoprefixer is a tool or method that parses CSS files
    and adds vendor-specific prefixes (for example, `-webkit-transition: -webkit-transform
    1s;`). This task discovers all the places where you need this autoprefixer and
    adds the specific prefixes in the Bootstrap main CSS file. |'
  prefs: []
  type: TYPE_TB
- en: '| `autoprefixer:theme` | This task discovers all the places where you need
    this autoprefixer and adds the specific prefixes in the Bootstrap theme CSS file.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `csscomb:dist` | Formatted and beautified the CSS files. |'
  prefs: []
  type: TYPE_TB
- en: '| `cssmin:minifyCore` | Finally, when the CSS files has been generated, this
    task minifies the files. In other words in this task, the `bootstrap.min.css`
    file has been created. |'
  prefs: []
  type: TYPE_TB
- en: '| `cssmin:minifyTheme` | Similar to the previous one, this task creates the
    `bootstrap-theme.min.css` file. |'
  prefs: []
  type: TYPE_TB
- en: '| `copy:fonts` | As the name suggests, this task creates and copies all the
    Fonts files in the `dist` folder. |'
  prefs: []
  type: TYPE_TB
- en: '| `concat:bootstrap` | Having handled the CSS files until now, this task concatenates
    and merges all the individual JavaScript files into one final file—`bootstrap.js`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `uglify:core` | As the earlier tasks had minified the CSS files, this task
    also minifies the JavaScript file. In this step, the `bootstrap.min.js` file is
    created. |'
  prefs: []
  type: TYPE_TB
- en: All these steps (along with some others) are mentioned and configured in the
    `Gruntfile.js` file, which you can find in the `bootstrap` source code folder.
    Thus finally, you have got the distributable version of your own Bootstrap CSS
    and JS files.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned a few new tools and systems that are quite useful
    and popular nowadays while creating CSS and JavaScript applications—node.js and
    Grunt.
  prefs: []
  type: TYPE_NORMAL
- en: We saw how to install and configure these tools. Finally, we saw how to use
    these tools in order to compile Bootstrap LESS files and generate consumable CSS
    files. We learned how to package and build the Bootstrap files and generate the
    whole distributable bundle.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to customize Bootstrap to meet your design
    and look-and-feel requirements.
  prefs: []
  type: TYPE_NORMAL
