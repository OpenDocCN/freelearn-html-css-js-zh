- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Initial Setup and Project Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I’ve been developing web applications for almost a decade now and the landscape
    has changed drastically since I began. To put that in reference, I’ve been building
    websites since JavaScript was so poorly supported by mainstream browsers that
    jQuery became the de facto standard for building interactive frontend experiences.
    But over time, we’ve seen more browsers willing to support ECMAScript standards
    and the ones that didn’t have died off (good riddance, Internet Explorer). JavaScript
    then re-emerged as a viable language. And with the rise of Node.js, developers
    could finally build an entire application, both frontend and backend, in a single
    programming language. JavaScript had taken over the web development world and
    firmly cemented its foothold.
  prefs: []
  type: TYPE_NORMAL
- en: As the technologies have matured, so too have development experiences. With
    the arrival of SvelteKit 1.0, we developers are given an intuitive experience
    allowing us to couple frontend and backend logic together in a way that leaves
    us wondering, “How did we do this before?” Before we dive into that experience,
    we’ll need to cover a few things.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we’ll cover the prerequisites for developing applications with SvelteKit.
    We’ll then move on to how SvelteKit is installed and discuss how projects are
    typically structured. From there, we’ll build a “Hello, World!” application so
    we can see everything in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'To summarize, we’ll discuss these topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing SvelteKit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SvelteKit’s Project Structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Hello, World!”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After covering all of this material, you should be reasonably comfortable setting
    up a new SvelteKit application for your next project.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The complete code for this chapter is available on GitHub at: [https://github.com/PacktPublishing/SvelteKit-Up-and-Running/tree/main/chapters/chapter01](https://github.com/PacktPublishing/SvelteKit-Up-and-Running/tree/main/chapters/chapter01)'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get the most out of this book and ensure you retain the information provided,
    it is recommended to work alongside the material as you read it. Type the commands
    and code shown into your project, but also feel free to experiment. To do this
    effectively, you will need a computer running Windows, macOS, or a Linux-based
    operating system as well as access to a terminal or command-line interface. Most
    modern computer hardware capable of running the latest versions of the aforementioned
    operating systems should be sufficient for your needs. Specifically, you’ll need
    a system with a minimum of 1 GB of RAM and at least a 1.6 GHz processor. This
    should work just fine for developing with SvelteKit, though performance may vary
    for your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Like many other web development projects, you’ll also need a web browser. The
    latest version of Firefox, Chrome, or Safari is recommended. You will also need
    to install Node.js. It is recommended to use the latest `npm` as it is available
    with a standard Node.js installation. It is possible to use `yarn` in place of
    `npm`, but it is probably easier to just use `npm`. If you’re worried about performance,
    `pnpm` will also work.
  prefs: []
  type: TYPE_NORMAL
- en: The final tool required will be a text editor or `ext install svelte.svelte-vscode`,
    and hit *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A macOS, Windows, or Linux-based computer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A modern web browser (Firefox, Chrome, or Safari)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Terminal access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js 18+ LTS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A package manager (`npm` comes installed with Node.js)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A text editor/IDE (with the recommended Svelte extension)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing SvelteKit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin, open your terminal or command-line interface and navigate to a directory
    where you are comfortable starting a new project. From there, we’ll run three
    simple commands. The first will create a new SvelteKit project with various prompts
    to initialize the application, the second will install dependencies, and the third
    will start our development server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When running the first command, you’ll be presented with several prompts. The
    first of these will ask you to install `create@svelte` to which your response
    should be `y` for yes. When prompted to select a directory to install the project
    in, leave the option blank to use the current directory (or specify the directory
    if you’d prefer to). You’ll then be asked which template to use. We’ll be working
    primarily with the option **Skeleton project** but feel free to come back and
    give the **SvelteKit demo app** a try in another directory at your convenience.
  prefs: []
  type: TYPE_NORMAL
- en: The next prompt pertains to **TypeScript** (**TS**) usage, for which SvelteKit
    has excellent support. However, to keep the focus of this book on SvelteKit itself
    and to appeal to developers that may not yet be familiar with TS, we will be using
    plain JavaScript. As such, to properly follow along with this text, you should
    select **No**. If you feel comfortable enough with TS, then by all means, select
    **Yes**. Be sure to select **Yes** for ESLint and Prettier support as they will
    very likely save you headaches and further improve your development experience.
    It is also recommended to include supported testing packages, but this book will
    not be covering testing strategies.
  prefs: []
  type: TYPE_NORMAL
- en: After installing the project dependencies with `npm install`, we run `npm run
    dev`, which starts our development server. The output from the command should
    look similar to that shown in *Figure 1**.1*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Showing the output from the Vite development server](img/Figure_1.01_B19024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Showing the output from the Vite development server
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice how quickly Vite starts our development server. Even though this is
    a bare-bones application, other bundling tools would have taken multiple seconds
    whereas Vite was ready in under one second. As shown in the output displayed in
    the terminal, the site can be viewed by navigating to `http://localhost:5173/`
    in your browser. If you would like to access the site from a device other than
    your development machine, for instance, on a mobile device, then you may append
    `–-host` to the appropriate `npm` script found in the `package.json` project file.
    Under the `scripts` entry, the new command would look like `"dev": "vite` `dev
    –-host"`.'
  prefs: []
  type: TYPE_NORMAL
- en: We’ve just covered the installation process for SvelteKit. At this point, it
    should be trivial for you to install your own SvelteKit-based project. We’ve covered
    how the various prompts from the `create@svelte` package allow you to customize
    the project to your liking. Now, let’s take a look at how a typical SvelteKit
    project is structured.
  prefs: []
  type: TYPE_NORMAL
- en: SvelteKit’s Project Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have installed a new SvelteKit project, open the project directory
    in your preferred editor. Within that folder, you’ll notice files that are commonly
    found in the root project folder of JavaScript applications such as `package.json`,
    `.gitignore`, and `README.md`, as well as configuration files pertaining to SvelteKit
    (`svelte.config.js`) and Vite (`vite.config.js`). You’ll also notice three subfolders:
    `static/`, `tests/`, and `src/`. Let’s look at them in detail in the following
    sections.'
  prefs: []
  type: TYPE_NORMAL
- en: static/
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This folder is where you may place static assets such as `robots.txt` (your
    guidelines for search engine site crawlers), static images such as favicons, or
    even a global CSS style sheet. These files should be able to be served “as is.”
    Files located in this folder will be available to your application logic as if
    they existed in the root folder of your project, that is, `/robots.txt`. You can
    also access them by prefixing the file path with `%sveltekit.assets%`. Note that
    if files here are changed, you may need to manually refresh the page to see changes.
    In some cases, you may even need to restart your development server as Vite has
    strong opinions about caching. You should not attempt to access files included
    in this directory programmatically. Rather, the paths should be “hardcoded” wherever
    the assets here are included.
  prefs: []
  type: TYPE_NORMAL
- en: tests/
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Logically, tests from the Playwright package (included in the various prompts
    we said *yes* to) are located here. To run the Playwright browser test, use the
    npm script `npm run test`. Unit tests from Vitest will be included alongside your
    source code. For example, if you included a file called `utilities.js`, unit tests
    for it would live alongside it as `utilities.test.js`. Vitest is a package from
    the developers of Vite that enables simple testing for Vite-based applications.
    **Test-Driven Development** (**TDD**) is an excellent practice to follow to ensure
    code performs as it is expected to. However, it is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: src/
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will be spending most of your time working in this folder as this is where
    the core logic for a SvelteKit application lives. There are a few files and directories
    that should be taken note of at this time:'
  prefs: []
  type: TYPE_NORMAL
- en: '`routes/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lib/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: routes/
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first subfolder to take note of is `src/routes/`. This directory will contain
    most files necessary for managing SvelteKit’s file-based routing mechanism. Its
    sibling folder `src/params/` will be covered later on, but for now, assume most
    logic related to managing the routes of your application is located here. As a
    brief example, if you’d like to add a static “about” page, then you would do so
    by creating `src/routes/about/+page.svelte` containing the appropriate markup
    and text.
  prefs: []
  type: TYPE_NORMAL
- en: lib/
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Svelte components and various other utilities can be placed in the `src/lib/`
    subfolder. This folder may not be present in the skeleton project template so
    you’ll have to add it on your own. It will be shown in the SvelteKit demo app.
    By placing your components here, you can easily reference them in `import` statements
    later on as the `$lib/` alias will be available throughout the application.
  prefs: []
  type: TYPE_NORMAL
- en: app.html
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are more files to cover that we will address later on, but for now, the
    final mention is `app.html`. This file serves as the base for the rest of your
    application to build off of. When opened, you’ll notice it contains references
    to `%sveltekit.head%`, which SvelteKit uses for injecting various script and link
    tags, and `%sveltekit.body%`, which is used for injecting the markup generated
    for the application.
  prefs: []
  type: TYPE_NORMAL
- en: To recap, the `static/` directory contains files that don’t frequently change,
    `tests/` contains tests from the Playwright package, and `src/` contains the source
    code of your project. Most Svelte components and other utilities you create can
    be placed at `src/lib/` so as to be easily accessed via the `$lib/` alias in `import`
    statements. If you’d like to add a new route to your application URL, you can
    do so by creating a `+page.svelte` file inside a directory with the corresponding
    name at `src/routes/`. And finally, your application will need a base to build
    off. That’s where `app.html` comes in. I’m sure you’re eager to finally build
    something, so let’s do it.
  prefs: []
  type: TYPE_NORMAL
- en: Hello World Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know a bit about what we’re looking at in a freshly initialized
    SvelteKit project, it seems appropriate to build a “Hello, World!” application.
    We’ll begin by opening `src/routes/+page.svelte` in our editor. At this point,
    it should only contain basic HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Since this file lives directly inside the `src/routes/` directory and not a
    sub-directory, it is available in the browser as the URL's root route (i.e., `/`).
    If we were to create a new folder within the routes directory (i.e., `src/routes/hello/`)
    and place another `+page.svelte` file inside of that (i.e., `src/routes/hello/+page.svelte`),
    then we would make the `/hello` route available as a valid URL for our app. We’ll
    cover more advanced routing techniques in later chapters, but for now, just know
    that to add a new route, you’ll need to create a folder using the desired route
    name in the `routes` directory as well as a `+``page.svelte` file.
  prefs: []
  type: TYPE_NORMAL
- en: Svelte Components
  prefs: []
  type: TYPE_NORMAL
- en: Readers familiar with Svelte will have noticed that the `+page.svelte` file
    extension is that of a Svelte component. That’s because *it is* a Svelte component!
    As such, we can adjust the HTML in it, customize the look with CSS in `<style>`
    tags, write JS inside of `<script>` tags, and import other Svelte components.
    If you’re unfamiliar with Svelte components, it’s recommended to learn at least
    the basics before continuing further. Check out *Svelte 3 Up and Running* by *Allessandro
    Segala* or visit the official Svelte website ([https://svelte.dev](https://svelte.dev))
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s make some changes to `src/routes/+page.svelte` to see what’s happening.
    Change the inner text of the `<h1>` tag to read `Hello, World!`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Thanks to Vite, the page in our browser is updated immediately after saving.
    If your setup has dual monitors available with code shown on one and your browser
    on the other, you’ll quickly see how valuable **Hot Module Replacement** (**HMR**)
    can be. The change we’ve made is all well and good, but it isn’t really a “Hello,
    World!” application if users can’t change the text. For a true “Hello, World!”
    example, we need to show some text that has been provided by the user. The following
    code is an implementation showing just that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This simple Svelte component creates a variable named `name` with the default
    value of “`World`.” From there, the HTML gives us a basic form binding the text
    input value to our variable and outputting the text inside an HTML `<h1>` tag.
    Thanks to Svelte’s reactivity and the binding of the text input value to the `name`
    variable, the text provided is shown immediately, even as it is typed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – The output from our “Hello, World!” component](img/Figure_1.02_B19024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – The output from our “Hello, World!” component
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed some of the prerequisite knowledge and tools needed
    for getting started with SvelteKit. You likely already had a computer running
    a capable operating system with a browser installed. You may even have had the
    latest LTS version of Node.js installed with the `npm` package manager. We also
    briefly touched on getting your editor prepared by installing Svelte-specific
    extensions.
  prefs: []
  type: TYPE_NORMAL
- en: We continued by covering the installation process of SvelteKit. The prompts
    provided during the installation make setting up a new SvelteKit project simple
    and easily customized to a developer’s liking.
  prefs: []
  type: TYPE_NORMAL
- en: After the project installation, we took a high-level look at SvelteKit’s project
    structure. While the `tests/` and `static/` directories are fairly straightforward,
    some nuances lie within the `src/` folder. For instance, keeping various Svelte
    components and other utilities in the `src/lib/` folder can help keep a project
    from becoming difficult to navigate. Components located there are also easily
    accessed across application code via the `$``lib/` alias.
  prefs: []
  type: TYPE_NORMAL
- en: We also created a rudimentary “Hello, World!” application. It showcased how
    simple SvelteKit makes it to start building an application from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll go over some of the various configuration options
    you may need to tweak in both SvelteKit and Vite to customize them to suit your
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Node.js: [https://nodejs.org](https://nodejs.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NVM: [https://github.com/nvm-sh/nvm](https://github.com/nvm-sh/nvm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SvelteKit: [https://kit.svelte.dev](https://kit.svelte.dev)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VS Code: [https://code.visualstudio.com/](https://code.visualstudio.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
