["```js\nvar http = require('http');\nhttp.createServer(function (req, res) {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello World\\n');\n}).listen(1337, '127.0.0.1');\nconsole.log('Server running at http://127.0.0.1:1337/');\n```", "```js\nvar express = require('express');\nvar app = express();\napp.get(\"/\", function(req, res, next) {\n  res.send(\"Hello world\");\n}).listen(1337);\nconsole.log('Server running at http://127.0.0.1:1337/');\n```", "```js\n{\n  \"name\": \"projectname\",\n  \"description\": \"description\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n    \"express\": \"3.x\"\n  }\n}\n```", "```js\nexpress --css less myapp\n```", "```js\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('static-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\n\nvar routes = require('./routes/index');\nvar users = require('./routes/users');\n\nvar app = express();\n```", "```js\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n```", "```js\napp.set('color', 'red');\napp.get('color'); // red\napp.enable('isAvailable');\n```", "```js\napp.use(favicon());\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded());\napp.use(cookieParser());\napp.use(require('less-middleware')({ src: path.join(__dirname, 'public') }));\napp.use(express.static(path.join(__dirname, 'public')));\n```", "```js\nGET / 200 554ms - 170b\nGET /stylesheets/style.css 200 18ms - 110b\n```", "```js\napp.use('/', routes);\napp.use('/users', users);\n```", "```js\napp.use(function(req, res, next) {\n    var err = new Error('Not Found');\n    err.status = 404;\n    next(err);\n});\n```", "```js\n// development error handler\nif (app.get('env') === 'development') {\n    app.use(function(err, req, res, next) {\n        res.status(err.status || 500);\n        res.render('error', {\n            message: err.message,\n            error: err\n        });\n    });\n}\n// production error handler\napp.use(function(err, req, res, next) {\n    res.status(err.status || 500);\n    res.render('error', {\n        message: err.message,\n        error: {}\n    });\n});\n```", "```js\nmodule.exports = app;\n```", "```js\n#!/usr/bin/env node\nvar debug = require('debug')('my-application');\nvar app = require('../app');\n\napp.set('port', process.env.PORT || 3000);\n\nvar server = app.listen(app.get('port'), function() {\n  debug('Express server listening on port ' + server.address().port);\n});\n```", "```js\nvar controller = function(req, res, next) {\n  res.send(\"response\");\n}\napp.get('/example/url', controller);\n```", "```js\nvar getUsers = function(req, res, next) {\n  // ...\n}\nvar createUser = function(req, res, next) {\n  // ...\n}\napp.get('/users', getUsers);\napp.post('/users', createUser);\n```", "```js\napp.all('/', serverHomePage);\n```", "```js\nvar isUserLogged = function(req, res, next) {\n  req.userLogged = Validator.isCurrentUserLogged();\n  next();\n}\nvar getUser = function(req, res, next) {\n  if(req.userLogged) {\n    res.send(\"You are logged in. Hello!\");\n  } else {\n    res.send(\"Please log in first.\");\n  }\n}\napp.get('/user', isUserLogged, getUser);\n```", "```js\n/user/45/profile\n```", "```js\nvar getUser = function(req, res, next) {\n  res.send(\"Show user with id = \" + req.params.id);\n}\napp.get('/user/:id/profile', getUser);\n```", "```js\nvar getUser = function(req, res, next) {\n  var userId = req.params.id;\n  var actionToPerform = req.params.action;\n  res.send(\"User (\" + userId + \"): \" + actionToPerform)\n}\napp.get('/user/:id/profile/:action', getUser);\n```", "```js\nvar getUser = function(req, res, next) {\n  var url = require('url');\n  var url_parts = url.parse(req.url, true);\n  var query = url_parts.query;\n  res.send(\"User: \" + query.action);\n}\napp.get('/user', getUser);\n```", "```js\napp.use(express.bodyParser());\nvar getUser = function(req, res, next) {\n  res.send(\"User: \" + req.body.action);\n}\napp.post('/user', getUser);\n```", "```js\nvar cookieParser = require('cookie-parser');\napp.use(cookieParser('optional secret string'));\napp.get('/', function(req, res, next){\n    var prop = req.cookies.propName\n});\n```", "```js\nres.send(\"simple text\");\n```", "```js\nres.send(404, 'Sorry, we cannot find that!');\n```", "```js\nres.sendfile(__dirname + \"/images/photo.jpg\");\n```", "```js\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n```", "```js\nh1= title\np Welcome to #{title}\n```", "```js\nres.render(\"index\", {title: \"Page title here\"});\n```", "```js\n<h1>Page title here</h1><p>Welcome to Page title here</p>\n```", "```js\ndoctype html\nhtml\n  head\n    title= title\n    link(rel='stylesheet', href='/stylesheets/style.css')\n  body\n    h1= title\n    hr\n    p That's a simple application using Express.\n```", "```js\n\"express-session\": \"~1.0.0\"\n```", "```js\nvar session = require('express-session');\napp.use(session({ secret: 'app', cookie: { maxAge: 60000 }}));\nvar verifyUser = function(req, res, next) {\n    if(req.session.loggedIn) {\n        next(); \n    } else {\n        res.send(\"show login form\");\n    }   \n}\napp.use('/', verifyUser, routes);\n```", "```js\ndoctype html\nhtml\n  head\n    title= title\n    link(rel='stylesheet', href='/stylesheets/style.css')\n  body\n    h1= title\n    hr\n    form(method='post')\n      label Username:\n      br\n      input(type='text', name='username')\n      br\n      label Password:\n      br\n      input(type='password', name='password')\n      br\n      input(type='submit')\n```", "```js\nres.render(\"login\", {title: \"Please log in.\"});\n```", "```js\napp.use(bodyParser());\n```", "```js\nvar verifyUser = function(req, res, next) {\n  if(req.session.loggedIn) {\n    next();  \n  } else {\n    var username = \"admin\", password = \"admin\";\n    if(req.body.username === username && \n    req.body.password === password) {\n      req.session.loggedIn = true;\n      res.redirect('/');\n    } else {\n      res.render(\"login\", {title: \"Please log in.\"});\n    }\n  }  \n}\n```", "```js\na(href='/logout') logout\n```", "```js\n// in app.js\nvar logout = function(req, res, next) {\n  req.session.loggedIn = false;\n  res.redirect('/');\n}\napp.all('/logout', logout);\n```"]