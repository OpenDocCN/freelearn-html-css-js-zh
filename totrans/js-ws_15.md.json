["```js\n$.getJSON('https:/www.somesite.com/someservice',\n      function(data) {\n      // this function is a callback and is called once\n             // the response to the service call is received\n      }\n    );\n```", "```js\n    console.log(\"start\");\n    setTimeout(function() {\n            console.log(\"in setTimeout\");\n        }, 0);\n    console.log(\"at end of code\");\n    ```", "```js\n    start\n    at end of code\n    in setTimeout\n    ```", "```js\n// Pyramid of DOOM!!!\n$.getJSON(ALL_LEAGUES_URL, function(leagueData) {\n    const leagueId = findLeagueId(leagueData, LEAGUE_NAME);\n    $.getJSON(ALL_TEAMS_URL, {id: leagueId}, function(teamData) {\n        const teamId = findTeamId(teamData, TEAM_NAME);\n        $.getJSON(ALL_PLAYERS_URL, {id: teamId}, function(playerData) {\n            playerData.player.forEach(player => {\n                $.getJSON(PLAYER_HONORS_URL, {id: player.idPlayer},\n                    function(honorData) {\n                        printHonors(honorData);\n                    }\n                );\n            });\n        });\n    });\n});\n```", "```js\nfetch(someURL)\n      .then(response =>response.json())\n      .then(jsonData =>parseSomeDataFromResponse(jsonData))\n      .then(someData =>doSomethingWithDataObtained(someData))\n      .catch(error => console.log(error));\n```", "```js\n    // hard coded data for purposes of illustration\n    const LEAGUE_NAME = \"English Premier League\";\n    const TEAM_NAME = \"Arsenal\";\n    const BASE_URL = \"https://www.thesportsdb.com/api/v1/json/1/\";\n    const ALL_LEAGUES_URL = BASE_URL + \"all_leagues.php\";\n    const ALL_TEAMS_URL = BASE_URL + \"lookup_all_teams.php\";\n    const ALL_PLAYERS_URL = BASE_URL + \"lookup_all_players.php\";\n    const PLAYER_HONORS_URL = BASE_URL + \"lookuphonors.php\";\n    ```", "```js\n    Function myFetch(url, params) {\n        if (params) {\n            url += \"?\" + encodeParams(params);\n        }\n        return fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(response.status);\n                }\n                Return response.json()\n            }\n        );\n    }\n    ```", "```js\n    Function encodeParams(params) {\n        return Object.keys(params)\n            .map(k => encodeURIComponent(k) + '=' +\n                      encodeURIComponent(params[k]))\n            .join('&');\n    }\n    ```", "```js\n    Function findLeagueId(leagueData, leagueName) {\n        const league = leagueData.leagues.find(l => l.strLeague === leagueName);\n        return league ? league.idLeague : null;\n    }\n    ```", "```js\n    Function findTeamId(teamData, teamName) {\n        const team = teamData.teams.find(t => t.strTeam === teamName);\n        return team ? team.idTeam : null;\n    } \n    ```", "```js\n    Function printHonors(honorData) {\n        if (honorData.honors != null) {\n            var playerLI = document.createElement(\"li\");\n            document.getElementById(\"honorsList\").append(playerLI);\n            var playerName =\n                document.createTextNode(honorData.honors[0].strPlayer);\n            playerLI.appendChild(playerName);\n            var honorsUL= document.createElement(\"ul\");\n            playerLI.appendChild(honorsUL);\n            honorData.honors.forEach(honor => {\n                var honorLI = document.createElement(\"li\");\n                honorsUL.appendChild(honorLI);\n                var honorText = document.createTextNode(\n                    `${honor.strHonour} - ${honor.strSeason}`);\n                honorLI.appendChild(honorText);\n            });\n        }\n    }\n    ```", "```js\n    <html>\n    <head>\n        <meta charset=\"utf-8\"/>\n        <script src=\"img/players.js\"></script>\n    </head>\n    <body>\n    Arsenal Player Honors:\n    <ul id=\"honorsList\"></ul>\n    <script>\n    ```", "```js\n    myFetch(ALL_LEAGUES_URL)\n      .then(leagueData => {\n          const leagueId = findLeagueId(leagueData, LEAGUE_NAME);\n          return myFetch(ALL_TEAMS_URL, {id: leagueId});\n      })\n    ```", "```js\n      .then(teamData => {\n          const teamId = findTeamId(teamData, TEAM_NAME);\n          return myFetch(ALL_PLAYERS_URL, {id: teamId});\n      })\n    ```", "```js\n        .then(playerData => {\n    ```", "```js\n          const honorReqests = playerData.player.map(player =>\n              myFetch(PLAYER_HONORS_URL, {id: player.idPlayer}));\n    ```", "```js\n          return Promise.all(honorReqests);\n      })\n      .then(honorResponses => honorResponses.forEach(printHonors))\n    ```", "```js\n    .catch(error => console.log(error));\n    ```", "```js\n    </script>\n    </body>\n    </html>\n    ```", "```js\npromise\n  .then(createPromiseForPlayer1())\n  .then(printDataForPlayer1())     // print once data for player 1 is loaded\n  .then(createPromiseForPlayer2()) // etc\n  .then(printDataForPlayer2())\n  .then(createPromiseForPlayer3())\n  .then(printDataForPlayer3())\n  .then(createPromiseForPlayer4())\n  .then(printDataForPlayer4())\n```", "```js\n .then(playerData => {\n      const honorReqests = playerData.player.map(player =>\n          myFetch(PLAYER_HONORS_URL, {id: player.idPlayer}));\n      return Promise.all(honorReqests);\n  })\n  .then(honorResponses => honorResponses.forEach(printHonors))\n  .catch(error => console.log(error));\n```", "```js\n  .then(playerData => {\n      const sequence = Promise.resolve();\n\n      playerData.player.forEach(player =>\n          sequence\n            .then(() => myFetch(PLAYER_HONORS_URL, {id: player.idPlayer}))\n            .then(printHonors));\n      return sequence;\n  })\n  .catch(error => console.log(error));\n```", "```js\n  .then(playerData =>playerData.player.reduce((sequence, player) =>\n          sequence\n            .then(() =>myFetch(PLAYER_HONORS_URL, {id: player.idPlayer}))\n            .then(printHonors)\n    , Promise.resolve())\n  )\n```", "```js\nmyFetch(ALL_LEAGUES_URL)\n  .then(leagueData =>getTeamsInLeague(leagueData, LEAGUE_NAME))\n  .then(teamData =>getPlayersOnTeam(teamData, TEAM_NAME))\n  .then(playerData =>getPlayerHonors(playerData))\n  .catch(console.log);\n```", "```js\nfunction getTeamsInLeague(leagueData, leagueName) {\n    const leagueId = findLeagueId(leagueData, leagueName);\n    return myFetch(ALL_TEAMS_URL, {id: leagueId});\n}\nFunction getPlayersOnTeam(teamData, teamName) {\n    const teamId = findTeamId(teamData, teamName);\n    return myFetch(ALL_PLAYERS_URL, {id: teamId});\n}\nfunction getPlayerHonors(playerData) {\n    const sequence = Promise.resolve();\n    playerData.player.forEach(player =>\n        sequence\n          .then(() => myFetch(PLAYER_HONORS_URL, {id: player.idPlayer}))\n          .then(printHonors));\n    return sequence;\n}\n```", "```js\nfetchResponsePromise = fetch(resource, init);\n```", "```js\n    const url = \"http://mysite.com/myservice\";\n    const data = {param1: 1234};\n    let responsePromise = fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data)\n    })\n    .then(response => response.json());\n    ```", "```js\n    var headerVal = response.get(\"Content-Type\");\n          // application/json\n    response.headers.forEach((val, key) => { \n        console.log(key, val); \n    });\n    ```", "```js\nnew Promise(function(resolve, reject) {\n});\n```", "```js\nconst promise = new Promise((resolve, reject) => {\n    // do something asynchronous, which eventually calls either:\n    //   resolve(someValue);  // fulfilled\n    // or\n  //   reject(\"failure reason\");  // rejected\n});\n```", "```js\nconst timeoutPromise = new Promise((resolve, reject) => { \n    setTimeout(() => {\n        // call resolve() to signal that async operation is complete\n        resolve(\"Called after three seconds!\");\n    }, 3000);\n});\ntimeoutPromise.then(console.log);\n```", "```js\n    function addDelay(ms, promise) {\n        return promise.then(returnVal =>\n            new Promise(resolve =>\n                setTimeout(() => resolve(returnVal), ms)\n            )\n        );\n    }\n    ```", "```js\n    const BASE_URL = \"https://www.thesportsdb.com/api/v1/json/1/\";\n    constnextEventUrl = BASE_URL + \"eventsnextleague.php?id=4328\";\n    addDelay(3000, fetch(nextEventUrl))\n      .then(response =>response.json())\n      .then(nextEvents => console.log(nextEvents.events[0].strEvent));\n    ```", "```js\nfetch(nextEventUrl)\n  .then(addDelay(1000))\n  .then(response =>response.json())\n  .then(nextEvents => console.log(nextEvents.events[1].strEvent));\n```", "```js\nfunction addDelay(ms, promise) {\n    if (promise === undefined) {\n        // In this case, only one param was specified.  Since you don't have\n        // the promise yet, return a function with the promise as a param and\n        // call addDelay() recursively with two params\n        return promise =>addDelay(ms, promise);\n    }\n    // if you reached this far, there were two parameters\n    return promise.then(returnVal =>\n        new Promise(resolve =>\nsetTimeout(() => resolve(returnVal), ms)\n        )\n    );\n}\n```", "```js\nfunction addDelay(ms, promise) {\n    if (promise === undefined) {\n```", "```js\n        return promise =>addDelay(ms, promise);\n    }\n```", "```js\n    return Promise.resolve(promise).then(returnVal =>\n        new Promise(resolve =>\nsetTimeout(() => resolve(returnVal), ms)\n        )\n    );\n}\n```", "```js\nconst BASE_URL = \"https://www.thesportsdb.com/api/v1/json/1/\";\nconst nextEventUrl = BASE_URL + \"eventsnextleague.php?id=4328\";\n```", "```js\nlet p1 = addDelay(3000, fetch(nextEventUrl))\n  .then(response => response.json())\n  .then(nextEvents => console.log(\"Use 1: \" + nextEvents.events[0].strEvent));\n```", "```js\nlet p2 = fetch(nextEventUrl)\n  .then(addDelay(1000))\n  .then(response =>response.json())\n  .then(nextEvents => console.log(\"Use 2: \" + nextEvents.events[1].strEvent));\n```", "```js\nlet p3 = addDelay(2000, \"This is a passed in value\")\n  .then(result => console.log(\"Use 3: \" + result));\n```", "```js\nPromise.all([p1, p2, p3])\n  .then(() => console.log(\"All done!\"));\n```", "```js\n    Use 2    (after 1 second)\n    Use 3    (after 2 seconds)\n    Use 1    (after 3 seconds)\n```", "```js\nmyFetch(ALL_LEAGUES_URL)\n  .then(leagueData => getTeamsInLeague(leagueData, LEAGUE_NAME))\n  .then(teamData => getPlayersOnTeam(teamData, TEAM_NAME))\n  .then(playerData => getPlayerHonors(playerData))\n  .catch(console.log)\n```", "```js\n    try {\n        let leagueData = await myFetch(ALL_LEAGUES_URL);\n        let teamData = await getTeamsInLeague(leagueData, LEAGUE_NAME);\n        let playerData = await getPlayersOnTeam(teamData, TEAM_NAME);\n        await getPlayerHonors(playerData);\n    } catch (err) {\n        console.log(\"caught error: \" + err);\n    }\n```", "```js\nfunction myFetch(url, params) {\n    if (params) {\n        url += \"?\" + encodeParams(params);\n    }\n    return fetch(url)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(response.status);\n            }\n            return response.json()\n        }\n    );\n}\n```", "```js\nasync function myFetch(url, params) {\n    if (params) {\n        url += \"?\" + encodeParams(params);\n    } \n    let response = await fetch(url);\n    if (!response.ok) {\n        throw new Error(response.status);\n    }\n    return response.json()\n}\n```", "```js\nfunction getPlayerHonors(playerData) {\n   const sequence = Promise.resolve();\n    playerData.player.forEach(player =>\n        sequence\n          .then(() => myFetch(PLAYER_HONORS_URL, {id: player.idPlayer}))\n          .then(printHonors));\n    return sequence;\n}\n```", "```js\nasync function getPlayerHonors(playerData) {\n    const playerPromises = playerData.player.map(async player =>\n        myFetch(PLAYER_HONORS_URL, {id: player.idPlayer}));\n    for (constplayerPromise of playerPromises) {\n        printHonors(await playerPromise);\n    }\n}\n```", "```js\nasync function* getPlayerHonorsGenerator(playerData) {\n\n    const playerPromises = playerData.player.map(async player =>\n        myFetch(PLAYER_HONORS_URL, {id: player.idPlayer}));\n\n    for (const playerPromise of playerPromises) {\n        yield playerPromise;\n    }\n}\nasync function getPlayerHonors(playerData) {\n    for await(const player of getPlayerHonorsGenerator(playerData)) {\n        printHonors(player);\n    }\n}\n```", "```js\nmyFetch(ALL_LEAGUES_URL)\n  .then(leagueData =>getTeamsInLeague(leagueData, LEAGUE_NAME))\n  .then(teamData =>getPlayersOnTeam(teamData, TEAM_NAME))\n  .then(playerData =>getPlayerHonors(playerData))\n  .catch(console.log)\n```", "```js\nmyFetch(ALL_LEAGUES_URL)\n  .then(getTeamsInLeague(LEAGUE_NAME))\n  .then(getPlayersOnTeam(TEAM_NAME))\n  .then(getPlayerHonors)\n  .catch(console.log)\n```", "```js\nfunction getTeamsInLeague(leagueData, leagueName) {\nconstleagueId = findLeagueId(leagueData, leagueName);\n    return myFetch(ALL_TEAMS_URL, {id: leagueId});\n}\nfunction getPlayersOnTeam(teamData, teamName) {\nconstteamId = findTeamId(teamData, teamName);\n    return myFetch(ALL_PLAYERS_URL, {id: teamId});\n}\n```"]