["```js\n`dist` \n```", "```js\n`src` \n```", "```js\n`src/admin` \n```", "```js\n`src/config` \n```", "```js\n`src/data` \n```", "```js\n`src/data/orm` \n```", "```js\n`src/data/validation` \n```", "```js\n`src/helpers` \n```", "```js\n`src/routes` \n```", "```js\n`src/authentication.ts` \n```", "```js\n`src/errors.ts` \n```", "```js\n`src/server.ts` \n```", "```js\n`src/sessions.ts` \n```", "```js\n`templates` \n```", "```js\n`products.json` \n```", "```js\n`server.config.json` \n```", "```js\n`development.env` \n```", "```js\nnpm init -y \n```", "```js\nnpm install --save-dev typescript@5.2.2\nnpm install --save-dev tsc-watch@6.0.4\nnpm install --save-dev nodemon@3.0.3\nnpm install --save-dev @tsconfig/node20\nnpm install --save-dev @types/node@20.6.1 \n```", "```js\nconsole.log(\"Hello, SportsStore\"); \n```", "```js\n{\n    \"extends\": \"@tsconfig/node20/tsconfig.json\",\n     \"compilerOptions\": {                      \n         \"rootDir\": \"src/\",  \n         \"outDir\": \"dist/\"       \n     },\n     \"include\": [\"src/**/*\"]\n} \n```", "```js\n{\n  \"name\": \"sportsstore\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n **\"scripts\": {**\n **\"watch\": \"tsc-watch --noClear --onsuccess \\\"node dist/server.js\\\"\",**\n **\"start\": \"nodemon --exec npm run watch\"**\n **},**\n **\"****nodemonConfig\": {**\n **\"ext\": \"js,handlebars,json\",**\n **\"ignore\": [\"dist/**\", \"node_modules/**\"]**\n **},**\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@tsconfig/node20\": \"^20.1.2\",\n    \"@types/node\": \"^20.6.1\",\n    \"nodemon\": \"^3.0.3\",\n    \"tsc-watch\": \"^6.0.4\",\n    \"typescript\": \"^5.2.2\"\n  }\n} \n```", "```js\nListing 16.6: Starting the build process \n```", "```js\nnpm start \n```", "```js\n...\nHello, SportsStore\n... \n```", "```js\nnpm install express@4.18.2\nnpm install helmet@7.1.0\nnpm install --save-dev @types/express@4.17.20 \n```", "```js\nimport { createServer } from \"http\";\nimport express, { Express } from \"express\";\nimport helmet from \"helmet\";\nconst port = 5000;\nconst expressApp: Express = express();\nexpressApp.use(helmet());\nexpressApp.use(express.json());\nexpressApp.use(express.urlencoded({extended: true}))\nexpressApp.get(\"/\", (req, resp) => {\n    resp.send(\"Hello, SportsStore\");\n})\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nexport enum Env {\n    Development = \"development\", Production = \"production\"\n}\nexport const getEnvironment = () : Env => {\n    const env = process.env.NODE_ENV;\n    return  env === undefined || env === Env.Development\n        ? Env.Development : Env.Production;\n} \n```", "```js\nexport const merge = (target: any, source: any) : any => {\n    Object.keys(source).forEach(key => {\n        if (typeof source[key] === \"object\"\n                && !Array.isArray(source[key])) {\n            if (Object.hasOwn(target, key)) {\n                merge(target[key], source[key]);\n            } else {\n                Object.assign(target, source[key])\n            }\n        } else {\n            target[key] = source[key];\n        }\n    });\n} \n```", "```js\nimport { readFileSync } from \"fs\";\nimport { getEnvironment, Env } from \"./environment\";\nimport { merge } from \"./merge\";\nconst file = process.env.SERVER_CONFIG ?? \"server.config.json\"\nconst data = JSON.parse(readFileSync(file).toString());\ntry {\n    const envFile = getEnvironment().toString() + \".\" + file;\n    const envData = JSON.parse(readFileSync(envFile).toString());\n    merge(data, envData);\n} catch {\n    // do nothing - file doesn't exist or isn't readable\n}\nexport const getConfig = (path: string, defaultVal: any = undefined) : any => {\n    const paths = path.split(\":\");\n    let val = data;\n    paths.forEach(p => val = val[p]);\n    return val ?? defaultVal;\n}\nexport { getEnvironment, Env }; \n```", "```js\n{\n    \"http\": {\n        \"port\": 5000\n    }\n} \n```", "```js\nimport { createServer } from \"http\";\nimport express, { Express } from \"express\";\nimport helmet from \"helmet\";\n**import { getConfig } from \"./config\";**\n**const port = getConfig(\"http:port\", 5000);**\nconst expressApp: Express = express();\nexpressApp.use(helmet());\nexpressApp.use(express.json());\nexpressApp.use(express.urlencoded({extended: true}))\nexpressApp.get(\"/\", (req, resp) => {\n    resp.send(\"Hello, SportsStore\");\n})\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nimport { Express } from \"express\";\nexport const createCatalogRoutes = (app: Express) => {\n    app.get(\"/\", (req, resp) => {\n        resp.send(\"Hello, SportsStore Route\");\n    })\n} \n```", "```js\nimport { Express } from \"express\";\nimport { createCatalogRoutes } from \"./catalog\";\nexport const createRoutes = (app: Express) => {\n    createCatalogRoutes(app);\n} \n```", "```js\nimport { createServer } from \"http\";\nimport express, { Express } from \"express\";\nimport helmet from \"helmet\";\nimport { getConfig } from \"./config\";\n**import { createRoutes } from \"./routes\";**\nconst port = getConfig(\"http:port\", 5000);\nconst expressApp: Express = express();\nexpressApp.use(helmet());\nexpressApp.use(express.json());\nexpressApp.use(express.urlencoded({extended: true}))\n**// expressApp.get(\"/\", (req, resp) => {**\n**//     resp.send(\"Hello, SportsStore\");**\n**// })**\n**createRoutes(expressApp);**\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nnpm install bootstrap@5.3.2\nnpm install handlebars@4.7.8\nnpm install express-handlebars@7.1.2 \n```", "```js\nimport { Env, getEnvironment } from \"../config\";\nexport const isDevelopment = (value: any) => {\n    return getEnvironment() === Env.Development\n} \n```", "```js\nimport { Express } from \"express\";\nimport { getConfig } from \"../config\";\nimport { engine } from \"express-handlebars\";\nimport * as env_helpers from \"./env\";\nconst location = getConfig(\"templates:location\");\nconst config = getConfig(\"templates:config\");\nexport const createTemplates = (app: Express) => {\n    app.set(\"views\", location);\n    app.engine(\"handlebars\", engine({\n        ...config, helpers: {...env_helpers }\n    }));\n    app.set(\"view engine\", \"handlebars\");\n} \n```", "```js\n{\n    \"http\": {\n        \"port\": 5000\n    },\n    **\"templates\": {**\n **\"location\": \"templates\",**\n **\"config\": {**\n **\"layoutsDir\": \"templates\",**\n **\"defaultLayout\":** **\"main_layout.handlebars\",**\n **\"partialsDir\": \"templates\"**\n **}**\n **}**\n} \n```", "```js\n...\nconst **config** = getConfig(\"templates:config\");\n... \n```", "```js\n...\napp.engine(\"handlebars\", engine({\n    ...**config**, helpers: {...env_helpers }\n}));\n... \n```", "```js\n<div class=\"h4 m-2\">Hello, SportsStore</div> \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <link href=\"/css/bootstrap.min.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n        <div class=\"bg-dark text-white p-2\">\n            <span class=\"navbar-brand ml-2\">SPORTS STORE</span>\n        </div>\n        {{{ body }}}\n    </body>\n</html> \n```", "```js\nimport { createServer } from \"http\";\nimport express, { Express } from \"express\";\nimport helmet from \"helmet\";\nimport { getConfig } from \"./config\";\nimport { createRoutes } from \"./routes\";\ni**mport { createTemplates } from \"./helpers\";**\nconst port = getConfig(\"http:port\", 5000);\nconst expressApp: Express = express();\nexpressApp.use(helmet());\nexpressApp.use(express.json());\nexpressApp.use(express.urlencoded({extended: true}))\n**expressApp.use(express.static(\"node_modules/bootstrap/dist\"));**\n**createTemplates(expressApp);**\ncreateRoutes(expressApp);\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nimport { Express } from \"express\";\nexport const createCatalogRoutes = (app: Express) => {\n    app.get(\"/\", (req, resp) => {\n        **//resp.send(\"Hello, SportsStore Route\");**\n **resp.render(\"index\");**\n    })\n} \n```", "```js\nimport { Express } from \"express\";\nexport const createCatalogRoutes = (app: Express) => {\n    app.get(\"/\", (req, resp) => {\n        resp.render(\"index\");\n    })\n    **app.get(\"/err\", (req, resp) => {**\n **throw new Error (\"Something bad happened\");**\n **});**\n\n **app.get(\"/asyncerr\"****, async (req, resp) => {**\n **throw new Error (\"Something bad happened asynchronously\");**\n **});**\n} \n```", "```js\nnpm install express-async-errors@3.1.1 \n```", "```js\n<div class=\"h2 bg-danger text-white text-center p-2 my-2\">\n    404 - Not Found\n</div>\n<div class=\"text-center\">\n    <a class=\"btn btn-secondary\" href=\"/\">OK</a>\n</div> \n```", "```js\n<div class=\"h2 bg-danger text-white text-center p-2 my-2\">\n    500 - Error\n</div>\n<div class=\"text-center\">\n    <a class=\"btn btn-secondary\" href=\"/\">OK</a>\n</div>\n{{#if (isDevelopment) }}\n    <div class=\"h4 bg-danger text-white p-1 mt-2\">Error Details</div>\n    <div class=\"h5 p-1\">Message: {{ error.message }}</div>\n    <div class=\"font-monospace p-1\">{{error.stack}}</div>\n {{/if }} \n```", "```js\n{\n    \"http\": {\n        \"port\": 5000\n    },\n    \"templates\": {\n        \"location\": \"templates\",\n        \"config\": {\n            \"layoutsDir\": \"templates\",\n            \"defaultLayout\": \"main_layout.handlebars\",\n            \"partialsDir\": \"templates\"\n        }\n    },\n   ** \"errors\": {**\n **\"400\": \"not_found\",**\n **\"500\": \"error\"**\n **}** \n} \n```", "```js\nimport { Express, ErrorRequestHandler } from \"express\";\nimport { getConfig } from \"./config\";\nimport \"express-async-errors\";\nconst template400 = getConfig(\"errors:400\");\nconst template500 = getConfig(\"errors:500\");\nexport const createErrorHandlers = (app: Express) => {\n    app.use((req, resp) => {\n        resp.statusCode = 404;\n        resp.render(template400);\n    });\n    const handler: ErrorRequestHandler = (error, req, resp, next) => {\n        console.log(error);\n        if (resp.headersSent) {\n            return next(error);\n        }\n        try {\n            resp.statusCode = 500;\n            resp.render(template500, { error} );\n        } catch (newErr) {\n            next(error);\n        }\n    }\n    app.use(handler);\n} \n```", "```js\nimport { createServer } from \"http\";\nimport express, { Express } from \"express\";\nimport helmet from \"helmet\";\nimport { getConfig } from \"./config\";\nimport { createRoutes } from \"./routes\";\nimport { createTemplates } from \"./helpers\";\n**import { createErrorHandlers } from \"./errors\";**\nconst port = getConfig(\"http:port\", 5000);\nconst expressApp: Express = express();\nexpressApp.use(helmet());\nexpressApp.use(express.json());\nexpressApp.use(express.urlencoded({extended: true}))\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\ncreateTemplates(expressApp);\ncreateRoutes(expressApp);\n**createErrorHandlers****(expressApp);**\nconst server = createServer(expressApp);\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nnpm install sqlite3@5.1.6\nnpm install sequelize@6.35.1 \n```", "```js\nexport interface  Product {\n    id?: number;\n    name: string;\n    description: string;\n    price: number;\n\n    category?: Category;\n    supplier?: Supplier;\n}\nexport interface Category {\n    id?: number;\n    name: string;\n    products?: Product[];\n}\nexport interface Supplier {\n    id?: number;\n    name: string;\n\n    products?: Product[];\n} \n```", "```js\nimport { Category, Product, Supplier } from \"./catalog_models\";\nexport interface CatalogRepository {\n    getProducts(): Promise<Product[]>;\n    storeProduct(p: Product): Promise<Product>;\n    getCategories() : Promise<Category[]>;\n    storeCategory(c: Category): Promise<Category>;\n    getSuppliers(): Promise<Supplier[]>;\n    storeSupplier(s: Supplier): Promise<Supplier>;\n} \n```", "```js\nimport { Model, CreationOptional, ForeignKey, InferAttributes,\n    InferCreationAttributes  } from \"sequelize\";\nexport class ProductModel extends Model<InferAttributes<ProductModel>,\n        InferCreationAttributes<ProductModel>> {\n    declare id?: CreationOptional<number>;\n    declare name: string;\n    declare description: string;\n    declare price: number;\n    declare categoryId: ForeignKey<CategoryModel[\"id\"]>;\n    declare supplierId: ForeignKey<SupplierModel[\"id\"]>;\n    declare category?: InferAttributes<CategoryModel>\n    declare supplier?: InferAttributes<SupplierModel>\n}\nexport class CategoryModel extends Model<InferAttributes<CategoryModel>,\n        InferCreationAttributes<CategoryModel>>   {\n    declare id?: CreationOptional<number>;\n    declare name: string;\n\n    declare products?:  InferAttributes<ProductModel>[];\n}\nexport class SupplierModel extends Model<InferAttributes<SupplierModel>,\n        InferCreationAttributes<SupplierModel>>  {\n    declare id?: CreationOptional<number>;  \n    declare name: string;\n    declare products?:  InferAttributes<ProductModel>[];\n} \n```", "```js\nimport { DataTypes, Sequelize } from \"sequelize\";\nimport { CategoryModel, ProductModel, SupplierModel } from \"./catalog_models\";\nconst primaryKey = {\n    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true }\n};\nexport const initializeCatalogModels = (sequelize: Sequelize) => {\n    ProductModel.init({\n        ...primaryKey,\n        name: { type: DataTypes.STRING},       \n        description: { type: DataTypes.STRING},\n        price: { type: DataTypes.DECIMAL(10, 2) }\n    }, { sequelize })\n    CategoryModel.init({\n        ...primaryKey,\n        name: { type: DataTypes.STRING}\n    }, { sequelize });\n    SupplierModel.init({\n        ...primaryKey,\n        name: { type: DataTypes.STRING}\n    }, { sequelize})\n    ProductModel.belongsTo(CategoryModel,\n        { foreignKey: \"categoryId\", as: \"category\"});   \n    ProductModel.belongsTo(SupplierModel,\n        { foreignKey: \"supplierId\", as: \"supplier\"});\n    CategoryModel.hasMany(ProductModel,\n        { foreignKey: \"categoryId\", as: \"products\"});\n    SupplierModel.hasMany(ProductModel,\n        { foreignKey: \"supplierId\", as: \"products\"});\n} \n```", "```js\nimport { Sequelize } from \"sequelize\";\nimport { initializeCatalogModels } from \"./catalog_helpers\";\nexport { ProductModel, CategoryModel, SupplierModel } from \"./catalog_models\";\nexport const initializeModels = (sequelize: Sequelize) => {\n    initializeCatalogModels(sequelize);\n} \n```", "```js\nimport { Sequelize } from \"sequelize\";\nimport { getConfig } from \"../../config\";\nimport { initializeModels, CategoryModel, ProductModel, SupplierModel }\n    from \"./models\";\nimport { readFileSync } from \"fs\";\nconst config = getConfig(\"catalog:orm_repo\");\nconst logging = config.logging\n        ? { logging: console.log, logQueryParameters: true}\n        : { logging: false };\nexport class BaseRepo {\n    sequelize: Sequelize;\n\n    constructor() {\n        this.sequelize = new Sequelize({ ...config.settings, ...logging })\n        this.initModelsAndDatabase();\n    }\n    async initModelsAndDatabase() : Promise<void> {\n        initializeModels(this.sequelize);\n        if (config.reset_db) {\n            await this.sequelize.drop();\n            await this.sequelize.sync();\n            await this.addSeedData();\n        } else {\n            await this.sequelize.sync();           \n        }\n    }   \n    async addSeedData() {\n        const data = JSON.parse(readFileSync(config.seed_file).toString());\n        await this.sequelize.transaction(async (transaction) => {\n            await SupplierModel.bulkCreate(data.suppliers, { transaction });\n            await CategoryModel.bulkCreate(data.categories, { transaction });\n            await ProductModel.bulkCreate(data.products, { transaction });\n        });\n    }   \n}\nexport type Constructor<T = {}> = new (...args: any[]) => T; \n```", "```js\nimport { CategoryModel, ProductModel, SupplierModel } from \"./models\";\nimport { BaseRepo, Constructor } from \"./core\"\nexport function AddQueries<TBase extends Constructor<BaseRepo>>(Base: TBase) {\n    return class extends Base {\n        getProducts() {\n            return ProductModel.findAll({\n                include: [\n                    {model: SupplierModel, as: \"supplier\" },\n                    {model: CategoryModel, as: \"category\"}],\n                raw: true, nest: true\n            });\n        }\n\n        getCategories() {\n            return CategoryModel.findAll({\n                raw: true, nest: true\n            })\n        }\n\n        getSuppliers() {\n            return SupplierModel.findAll({\n                raw: true, nest:true\n            });\n        }       \n    }\n} \n```", "```js\nimport { Transaction } from \"sequelize\";\nimport { Category, Product, Supplier } from \"../catalog_models\";\nimport { CategoryModel, ProductModel, SupplierModel } from \"./models\";\nimport { BaseRepo, Constructor } from \"./core\"\nexport function AddStorage<TBase extends Constructor<BaseRepo>>(Base: TBase)  {\n    return class extends Base {\n        storeProduct(p: Product) {\n            return  this.sequelize.transaction(async (transaction) => {\n\n                if (p.category) {\n                    p.category = await this.storeCategory(p.category)\n                }\n                if (p.supplier) {\n                    p.supplier = await this.storeSupplier(p.supplier);\n                }\n\n                const [stored] = await ProductModel.upsert({\n                    id: p.id, name: p.name, description: p.description,\n                    price: p.price, categoryId: p.category?.id,\n                    supplierId: p.supplier?.id\n                }, { transaction });\n                return stored;\n            });\n        }\n\n        async storeCategory(c: Category, transaction?: Transaction) {\n            const [stored] = await CategoryModel.upsert({\n                id: c.id, name: c.name\n            }, { transaction});\n            return stored;\n        }\n\n        async storeSupplier(s: Supplier, transaction?: Transaction) {\n            const [stored] = await SupplierModel.upsert({\n                id: s.id, name: s.name\n            }, {transaction});\n            return stored;\n        }      \n    }\n} \n```", "```js\nimport { CatalogRepository } from \"../catalog_repository\";\nimport { BaseRepo } from \"./core\";\nimport { AddQueries } from \"./queries\";\nimport { AddStorage } from \"./storage\";\nconst RepoWithQueries = AddQueries(BaseRepo);\nconst CompleteRepo = AddStorage(RepoWithQueries);\nexport const CatalogRepoImpl = CompleteRepo; \n```", "```js\n...\nconst RepoWithQueries = **AddQueries**(BaseRepo);\n... \n```", "```js\n...\nconst CompleteRepo = **AddStorage**(RepoWithQueries);\n... \n```", "```js\n...\nexport const **CatalogRepoImpl** = CompleteRepo;\n... \n```", "```js\nimport { CatalogRepository } from \"./catalog_repository\";\nimport { CatalogRepoImpl} from \"./orm\";\nexport const catalog_repository: CatalogRepository = new CatalogRepoImpl(); \n```", "```js\n{\n    \"http\": {\n        \"port\": 5000\n    },\n    \"templates\": {\n        \"location\": \"templates\",\n        \"config\": {\n            \"layoutsDir\": \"templates\",\n            \"defaultLayout\": \"main_layout.handlebars\",\n            \"partialsDir\": \"templates\"\n        }\n    },\n    \"errors\": {\n        \"400\": \"not_found\",\n        \"500\": \"error\"\n    },\n   ** \"catalog\": {**\n **\"orm_repo\": {**\n **\"settings\": {**\n **\"dialect\": \"sqlite\",**\n **\"storage\": \"****catalog.db\"**\n **},**\n **\"logging\": true,**\n **\"reset_db\": true,**\n **\"seed_file\": \"products.json\"**\n **}**\n **}**\n} \n```", "```js\n{\n    \"suppliers\": [\n        { \"id\": 1, \"name\": \"Acme Industries\"},\n        { \"id\": 2, \"name\": \"Big Boat Co\"},\n        { \"id\": 3, \"name\": \"London Chess\"}\n    ],\n    \"categories\": [\n        { \"id\": 1, \"name\": \"Watersports\"},\n        { \"id\": 2, \"name\": \"Soccer\"},\n        { \"id\": 3, \"name\": \"Chess\"}\n    ],\n    \"products\": [\n        {\"id\": 1, \"name\": \"Kayak\", \"description\": \"A boat for one person\",\n         \"price\": 275.00, \"categoryId\": 1, \"supplierId\": 2 },\n        {\"id\": 2, \"name\": \"Lifejacket\",\n            \"description\": \"Protective and fashionable\",\n            \"price\": 48.95, \"categoryId\": 1, \"supplierId\": 2 },\n        { \"id\": 3, \"name\": \"Soccer Ball\",\n            \"description\": \"FIFA-approved size and weight\",\n            \"price\": 19.50, \"categoryId\": 2, \"supplierId\": 1 },\n        { \"id\": 4, \"name\": \"Corner Flags\",\n            \"description\": \"Give your playing field a professional touch\",\n            \"price\": 34.95, \"categoryId\": 2, \"supplierId\": 1 },\n        { \"id\": 5, \"name\": \"Stadium\",\n            \"description\": \"Flat-packed 35,000-seat stadium\",\n            \"price\": 79500, \"categoryId\": 2, \"supplierId\": 1 },\n        { \"id\": 6, \"name\": \"Thinking Cap\",\n            \"description\": \"Improve brain efficiency by 75%\", \"price\": 16,\n            \"categoryId\": 3, \"supplierId\": 3 },           \n        { \"id\": 7, \"name\": \"Unsteady Chair\",\n            \"description\": \"Secretly give your opponent a disadvantage\",\n            \"price\": 29.95, \"categoryId\": 3, \"supplierId\": 3 },\n        { \"id\": 8, \"name\": \"Human Chess Board\",\n            \"description\": \"A fun game for the family\", \"price\": 75,\n            \"categoryId\": 3, \"supplierId\": 3 },\n        { \"id\": 9, \"name\": \"Bling King\",\n            \"description\": \"Gold-plated, diamond-studded King\",\n            \"price\": 1200, \"categoryId\": 3, \"supplierId\": 3 }           \n    ]\n} \n```", "```js\nimport { Express } from \"express\";\n**import { catalog_repository } from \"../data\";**\nexport const createCatalogRoutes = (app: Express) => {\n   ** app.get(\"/\"****, async (req, resp) => {**\n **const products = await catalog_repository.getProducts();**\n **resp.render(\"index\", { products });**\n **})**\n **// app.get(\"/err\", (req, resp) => {**\n **//     throw new Error (\"Something bad happened\");**\n **// });**\n\n **// app.get(\"/asyncerr\", async (req, resp) => {**\n **//     throw new Error (\"Something bad happened asynchronously\");**\n **// });**\n} \n```", "```js\n<table class=\"table table-sm table-striped\">\n    <thead>\n        <tr>\n            <th>ID</th><th>Name</th><th>Description</th>\n            <th>Price</th><th>Category</th><th>Supplier</th>\n        </tr>\n    </thead>\n    <tbody>\n        {{#each products }}\n            <tr>\n                <td>{{id}}</td><td>{{name}}</td>\n                <td>{{description}}</td><td>{{price}}</td>\n                <td>{{category.name}}</td><td>{{supplier.name}}</td>\n            </tr>\n        {{/each}}\n    </tbody>\n</table> \n```"]