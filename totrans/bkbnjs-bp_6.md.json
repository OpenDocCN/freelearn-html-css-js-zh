["```js\n    var signin   = require(\"./signin\");\n    ```", "```js\n    npm install bcrypt passport passport-local --save\n    ```", "```js\n    var passport = require(\"passport\");\n    var users    = new Bourne(\"users.json\");\n    ```", "```js\n    app.configure(function () {\n      app.use(express.urlencoded());\n      app.use(express.json());\n      app.use(express.multipart());\n      app.use(express.cookieParser());\n      app.use(express.session({ secret: 'podcast-app' }));\n      app.use(passport.initialize());\n      app.use(passport.session());\n      app.use(express.static('public'));\n    });\n    ```", "```js\n    passport.use(signin.strategy(users));\n    passport.serializeUser(signin.serialize);\n    passport.deserializeUser(signin.deserialize(users));\n    ```", "```js\n    app.get(\"/login\", function (req, res) {\n      res.render(\"login.ejs\");\n    });\n\n    app.post('/login', passport.authenticate('local', {\n      successRedirect: '/',\n      failureRedirect: '/login'\n    }));\n\n    app.get(\"/logout\", function (req, res) {\n      req.logout();\n      res.redirect('/');\n    });\n    ```", "```js\n    app.post('/create', function (req, res, next) {\n      var userAttrs = {\n        username: req.body.username,\n        passwordHash: signin.hashPassword(req.body.password)\n      };\n      users.findOne({ username: userAttrs.username }, \n        function (existingUser) {\n          if (!existingUser) {\n            users.insert(userAttrs, function (err, user) {\n              req.login(user, function (err) {\n                res.redirect(\"/\");\n              });\n            });\n          } else {\n            res.redirect(\"/\");\n          }\n        });\n    });\n    ```", "```js\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title></title>\n        <link rel=\"stylesheet\"  href=\"/bootstrap.min.css\" />\n        <link rel=\"stylesheet\"  href=\"/style.css\" />\n    </head>\n    <body>\n    <div class='container'>\n    <div class='row'>\n      <h1> Sign In </h1>\n      <form method=\"post\" action=\"/login\">\n        <div class='form-group'>\n          <label>Username</label>\n          <input name='username' type='text' class='form-control' />\n        </div>\n        <div class='form-group'>\n          <label>Password</label>\n          <input name='password' type='password' class='form-control' />\n        </div>\n        <button class='btn btn-primary'> Login </button>\n      </form>\n\n      <h1> Create Account </h1>\n      <form method=\"post\" action=\"/create\">\n        <div class='form-group'>\n          <label>Username</label>\n          <input name='username' type='text' class='form-control' />\n        </div>\n        <div class='form-group'>\n          <label>Password</label>\n          <input name='password' type='password' class='form-control' />\n        </div>\n        <button class='btn btn-primary'> Create </button>\n      </form>\n    </div>\n    </div>\n    </body>\n    </html>\n    ```", "```js\n    app.get('/*', function (req, res) {\n      if (!req.user) {\n        res.redirect(\"/login\");\n        return;\n      }\n      res.render('index.ejs', { \n        username: req.user.username\n      });\n    });\n    ```", "```js\nnpm install q xml2js --save\n\n```", "```js\nvar http        = require('http');\nvar Bourne      = require('bourne');\nvar Q           = require('q');\nvar parseString = require('xml2js').parseString;\nvar pcdb = new Bourne('podcasts.json');\nvar epdb = new Bourne('episodes.json');\n```", "```js\nfunction get (url) {\n  var deferred = Q.defer();\n  var req = http.get(url, function (res) {\n    var xml = '';\n    res.on('data', function (chunk) {\n      xml += chunk;\n    });\n    res.on('end', function () {\n      deferred.resolve(xml);\n    });\n  });\n  return deferred.promise;\n};\n```", "```js\nget('http://podcast.com/feed.xml').then(function (xml) {\n  // use the xml\n});\n```", "```js\nfunction parse(xml) {\n  var deferred = Q.defer();\n  parseString(xml, function (err, result) {\n    var rss = result.rss.channel[0];\n    var episodes = rss.item.map(function (item) {\n      return {\n        title:       item.title[0],\n        duration:    item['itunes:duration'][0],\n        audio:       item.enclosure[0].$.url,\n        link:        item.link[0],\n        description: item['content:encoded'][0], \n        pubDate:     item.pubDate[0],\n        listened:    false\n      };\n    });\n\n    var info = {\n      title: rss.title[0],\n      link:  rss.link[0],\n      image: rss['itunes:image'][0].$.href,\n      lastUpdated: +new Date()\n    };\n\n    deferred.resolve({ info: info, episodes: episodes });\n  });\n  return deferred.promise;\n}\n```", "```js\nfunction Podcast(feed, userId) {\n  var self      = this;\n  var info      = Q.defer();\n  var episodes  = Q.defer();\n  this.info     = info.promise;\n  this.episodes = episodes.promise;\n  this.ready    = Q.all([this.info, this.episodes]);\n}\n```", "```js\nif (typeof feed === 'string') {\n  get(feed).then(parse).then(function (data) {\n    data.info.userId = userId;\n    data.info.feed = feed;\n\n    pcdb.insert(data.info, function (err, data) {\n      info.resolve(data);\n    });\n\n    self.info.then(function (record) {\n      data.episodes.forEach(function (e) {\n        e.podcastId = record.id;\n      });\n\n      epdb.insertAll(data.episodes, function (err, records) {\n        episodes.resolve(records);            \n      });\n    });\n  });\n}\n```", "```js\nelse {\n  pcdb.findOne({ id: feed }, function (err, record) {\n    info.resolve(record);\n  });\n\n  epdb.find({ podcastId: feed }, function (err, records) {\n    episodes.resolve(records);\n  });\n}\n```", "```js\nPodcast.prototype.update = function () {\n  var deferred = Q.defer();\n  this.ready.spread(function (info, oldEpisodes) {\n    function resolve () {\n      epdb.find({ podcastId: info.id }, function (err, records) {\n        deferred.resolve(records);                       \n      });\n    }\n\n    var now = +new Date();\n    if (now - info.lastUpdated > 86400000) {\n      // update the podcast\n    } else {\n      resolve();\n    }\n  });\n  return deferred.promise;\n};\n```", "```js\nget(info.feed).then(parse).then(function (data) {\n  if (data.episodes.length > oldEpisodes.length) {\n    var oldTitles = oldEpisodes.map(function (e) { \n      return e.title; \n    }),\n    newEpisodes = data.episodes.filter(function (e) { \n      return oldTitles.indexOf(e.title) === -1; \n    });\n\n    epdb.insertAll(newEpisodes, resolve);\n  } else {\n    resolve();\n  }\n  pcdb.update({ id: info.id }, { lastUpdated: now });\n});\n```", "```js\nfunction Podcasts (id) {\n  this.id = id;\n}\n\nPodcasts.prototype.all = function () {\n  var d = Q.defer();\n  pcdb.find({ userId: this.id }, function (err, records) {\n    d.resolve(records);\n  });\n  return d.promise;\n};\n\nPodcasts.prototype.get = function (feed) {\n  return new Podcast(feed, this.id);\n};\n\nPodcasts.prototype.updateEpisode = function (id, update, cb) {\n  epdb.update({ id: id }, update, cb);\n};\n\nmodule.exports = Podcasts;\n```", "```js\nvar Podcasts = require('./podcasts');\n```", "```js\napp.get('/*', function (req, res) {\n  if (!req.user) {\n    res.redirect(\"/login\");\n    return;\n  }\n  req.user.podcasts = new Podcasts(req.user.id);\n  req.user.podcasts.all().then(function (records) {\n    res.render('index.ejs', { \n      podcasts: JSON.stringify(records),\n      username: req.user.username\n    });\n  });\n});\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n  <title> PodcastApp </title>\n  <link rel=\"stylesheet\"  href=\"/bootstrap.min.css\" />\n  <link rel=\"stylesheet\"  href=\"/style.css\" />\n</head>\n<body>\n<div class='container-fluid' id='main'>\n  <div class='row'>\n    <div id='podcasts' class='col-md-3'></div> \n    <div id='episodes' class='col-md-3'></div> \n    <div id='episode' class='col-md-6'></div> \n  </div>\n</div>\n<script src=\"img/jquery.js\"></script>\n<script src=\"img/underscore.js\"></script>\n<script src=\"img/backbone.js\"></script>\n<script src=\"img/bootstrap.min.js\"></script>\n\n<script src=\"img/models.js\"></script>\n<script src=\"img/views.js\"></script>\n<script src=\"img/router.js\"></script>\n</body>\n</html>\n```", "```js\nvar Episode = Backbone.Model.extend({\n  urlRoot: '/episode',\n  listen: function () {\n    this.save({ listened: true });\n  }\n});\nvar Episodes = Backbone.Collection.extend({\n  model: Episode,\n  initialize: function (models, options) {\n    this.podcast = options.podcast;\n  },\n  url: function () {\n    return this.podcast.url() + '/episodes';\n  },\n  comparator: function (a, b) {\n    return +new Date(b.get('pubDate')) - +new Date(a.get('pubDate'));\n  }\n});\n```", "```js\nvar Podcast = Backbone.Model.extend({\n  episodes: function () {\n    return this.episodes || (this.episodes = new Episodes([], { podcast: this }));\n  }\n});\n\nvar Podcasts = Backbone.Collection.extend({\n  model: Podcast,\n  url: '/podcasts',\n});\n```", "```js\n    _.templateSettings = {\n      interpolate: /\\{\\{(.+?)\\}\\}/g\n    };\n\n    function tmpl(selector) {\n      return _.template($(selector).html());\n    }\n    ```", "```js\n    var NavView = Backbone.View.extend({\n      el: '#navbar',\n      events: {\n        'click #addPodcast': 'addPodcast'\n      },\n      addPodcast: function (e) {\n        e.preventDefault();\n        Backbone.history.navigate('/podcasts/new', \n          { trigger: true });\n        return false;\n      }\n    });\n    ```", "```js\n    <nav id='navbar' class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\">\n      <div class=\"container-fluid\">\n        <div class=\"navbar-header\">\n          <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#navbar-tools\">\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n          </button>\n          <a class=\"navbar-brand\" href=\"#\">PodcastApp</a>\n        </div>\n\n        <div class=\"collapse navbar-collapse\" id=\"navbar-tools\">\n          <ul class=\"nav navbar-nav\">\n            <li><a id='addPodcast' href=\"#\">Add Podcast</a></li>\n            <li><p class=\"navbar-text\">Logged in as <%= username %></p></li>\n            <li><a href='/logout'>Log Out</a></li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n    ```", "```js\nbody { padding-top: 60px; }\n```", "```js\nvar PodcastListView = Backbone.View.extend({\n  className: 'list-group',\n  initialize: function (options) {\n    this.current = options.current || null;\n    this.listenTo(this.collection, 'add', this.render);\n  },\n  render: function () {\n    if (this.collection.length === 0) {\n      this.el.innerHTML = \"<a class='list-group-item'>No Podcasts</a>\";\n      return this;\n    }\n    this.el.innerHTML = '';\n    this.collection.forEach(this.renderItem, this);\n    return this;\n  },\n  renderItem: function (model) {\n    model.set({ current: this.current === model.get('id') });\n    var v = new PodcastListItemView({ model: model });\n    this.el.appendChild(v.render().el);\n  }\n});\n```", "```js\nvar PodcastListItemView = Backbone.View.extend({\n  tagName: 'a',\n  className: 'list-group-item',\n  template: tmpl('#podcastItem'),\n  initialize: function () {\n    this.model.episodes().on('count', this.displayCount, this);   \n  },\n  events: {\n    'click': 'displayEpisodes'\n  },\n  render: function () {\n    this.el.innerHTML = this.template(this.model.toJSON());\n    this.el.href = this.model.url();\n    this.$el.addClass( this.model.get('current') ? 'active': '');\n    this.displayCount();\n    return this;\n  }\n});\n```", "```js\n<script type='text/template' id='podcastItem'>\n  {{ title }} <span class='badge'></span>\n</script>\n```", "```js\ndisplayCount: function (evt) {\n  var eps = this.model.episodes();\n  eps.fetch().done(function () {\n    var count = eps.pluck('listened')\n      .filter(function (u) { return !u; }).length;\n    this.$('.badge').text(count);\n  }.bind(this));\n}\n```", "```js\ndisplayEpisodes: function (evt) {\n  evt.preventDefault();\n  Backbone.history.navigate(this.model.url(), { trigger: true });\n  return false;\n}\n```", "```js\nfunction Region(selector) {\n  this.el = $(selector); \n}\nRegion.prototype.show = function (views) {\n  if (!_.isArray(views)) { views = [views]; }\n  this.el.empty();\n  views.forEach(function (view) {\n    this.el.append(view.render().el); \n  }.bind(this));\n};\n```", "```js\nvar layout = {\n  podcasts: new Region('#podcasts'),\n  episodes: new Region('#episodes'),\n  episode:  new Region('#episode')\n};\n```", "```js\nvar Router = Backbone.Router.extend({\n  routes: {\n    '': 'index'\n  },\n  initialize: function (options) {\n    this.podcasts = options.podcasts;\n    this.nav = new NavView();\n  },\n  index: function () {\n    layout.podcasts.show(new PodcastListView({ \n    collection: this.podcasts \n  }));\n  }\n});\n```", "```js\n<script>\n  var r = new Router({\n    podcasts: new Podcasts(<%- podcasts %>)\n  });\n  Backbone.history.start({ pushState: true });\n</script>\n```", "```js\n<script type='text/template' id='newPodcast'>\n  <form class='form-inline'>\n    <div class=\"form-group\">\n      <input type=\"text\" placeholder=\"feed url\" class=\"form-control\">\n    </div>\n    <button class='btn btn-primary'> Add </button>\n  </form>\n</script>\n```", "```js\nvar NewPodcastView = Backbone.View.extend({\n  className: 'list-group-item',\n  template: tmpl('#newPodcast'),\n  events: {\n    'click button': 'addPodcast'\n  },\n  render: function () {\n    this.el.innerHTML = this.template();\n    return this;\n  },\n  addPodcast: function (e) {\n    e.preventDefault();\n    var feed = this.$el.find('input').val();\n    this.$el.addClass('loading').text('Loading Podcast . . . ');\n    this.collection.create({ feed: feed }, { \n      wait: true,\n      success: this.remove.bind(this)\n    });\n    Backbone.history.navigate('/');\n    return false;\n  }\n});\n```", "```js\n@keyframes pulse {\n  0% {\n    background: #fff;\n    color: #000;\n  }\n  100% {\n    background: #b81e0d;\n    color: #fff;\n  }\n}\n\n.loading {\n  animation: pulse 1s ease-in-out infinite alternate;\n}\n```", "```js\n'podcasts/new': 'newPodcast'\n```", "```js\nnewPodcast: function () {\n  var pv = new PodcastListView({ collection: this.podcasts });\n  layout.podcasts.show(pv);\n  pv.$el.append(new NewPodcastView({ \n    collection: this.podcasts \n  }).render().el);\n}\n```", "```js\napp.post('/podcasts', function (req, res) {\n  var podcast = req.user.podcasts.get(req.body.feed);\n  podcast.info.then(res.json.bind(res));\n});\n```", "```js\nvar EpisodesView = Backbone.View.extend({\n  className: 'list-group',\n  initialize: function (options) {\n    this.region = options.region; \n  },\n  render: function () {\n    this.collection.forEach(function (model) {\n      var v = new EpisodeListItemView({ \n        model: model,\n        layout: this.region\n      });\n      this.el.appendChild(v.render().el);\n    }, this);\n    return this;\n  }\n});\n```", "```js\nvar EpisodeListItemView = Backbone.View.extend({\n  className: 'list-group-item',\n  events: {\n    'click': 'displayEpisode'\n  },\n  initialize: function (options) {\n    this.layout = options.layout;\n    this.listenTo(this.model, 'change:listened', this.markAsListened);\n  },\n  render: function () {\n    this.el.innerText = this.model.get('title');\n    if (!this.model.get('listened')) {\n      this.$el.addClass('list-group-item-danger');\n    }\n    return this;\n  },\n  markAsListened: function () {\n    this.$el.removeClass('list-group-item-danger');\n  },\n  displayEpisode: function (evt) {\n    evt.preventDefault();\n    this.layout.show(new EpisodeView({ model: this.model }));\n    return false;\n  }\n});\n```", "```js\nvar EpisodesToolsView = Backbone.View.extend({\n  className: 'btn-tools btn-group',\n  events: {\n    'click #mark': 'mark'\n  },\n  render: function () {\n    this.el.innerHTML = \"<button id= 'mark' class=\"btn btn-default\">Mark As Listened</button>\";\n    return this;\n  },\n  mark: function (evt) {\n    this.collection.forEach(function (model) {\n      model.listen();\n    });\n    this.collection.trigger('count');\n  }\n});\n```", "```js\n.btn-tools {\n  margin-bottom: 20px;\n}\n```", "```js\napp.put('/episode/:id', function (req, res) {\n  req.user.podcasts.updateEpisode(parseInt(req.params.id, 10),\n    req.body, function (err, data) {\n      res.json(data);  \n    });\n});\n```", "```js\n'podcasts/:id': 'podcast'\n```", "```js\npodcast: function (id) {\n  layout.podcasts.show(new PodcastListView({ \n    collection: this.podcasts, \n    current: parseInt(id, 10) \n  }));\n  var podcast = this.podcasts.get(id);\n  var episodes = podcast.episodes();\n  episodes.fetch();\n  layout.episodes.show([\n    new EpisodesToolsView({\n      model: podcast,\n      collection: episodes\n    }),\n    new EpisodesView({\n      collection: episodes,\n      layout: layout.episode \n    })\n  ]);\n}\n```", "```js\napp.get('/podcasts/:id/episodes', function (req, res) {\n  var podcast = req.user.podcasts.get(parseInt(req.params.id, 10));\n  podcast.update().then(res.json.bind(res));\n});\n```", "```js\n<script type='text/template' id='episodeView'>\n  <div class='btn-group btn-tools'>\n    <button id='markOne' class=\"btn btn-default\">Mark As Listened</button>\n  </div>\n  <div class=\"panel panel-default\">\n    <div class=\"panel-body\">\n      <h1>{{title}}</h1>\n      <p>\n        <strong>Duration</strong>: {{duration}}\n        <strong>Date</strong>: {{pubDate}} \n      </p> \n      <audio controls='true' src=\"img/{{audio}}\"></audio>\n      {{description}}\n    </div>\n  </div>\n</script>\n```", "```js\nvar EpisodeView = Backbone.View.extend({\n  template: tmpl('#episodeView'),\n  events: {\n    'click #markOne': 'listen' \n  },\n  render: function () {\n    this.el.innerHTML = this.template(this.model.toJSON()); \n    this.$('audio')[0].addEventListener('play', this.listen.bind(this), false);\n    return this;\n  },\n  listen: function (evt) {\n    this.model.listen();\n    this.model.collection.trigger('count');\n  }\n});\n```"]