["```js\n$ npm install -g npm\n\n```", "```js\n$ npm init\n\n```", "```js\nname: (my-app)\nversion: (1.0.0)\ndescription:\nentry point: (index.js)\n\n```", "```js\n{ \n  \"name\": \"my-app\", \n  \"version\": \"1.0.0\", \n  \"author\": \"Philip Klauzinski\", \n  \"license\": \"MIT\", \n  \"description\": \"My JavaScript single page application.\" \n} \n\n```", "```js\n{ \n  \"name\": \"my-app\", \n  \"author\": \"Philip Klauzinski\", \n  \"description\": \"My JavaScript single page application.\", \n  \"private\": true \n} \n\n```", "```js\n$ npm install browserify --save-dev\n\n```", "```js\n{ \n  \"name\": \"my-app\", \n  \"version\": \"1.0.0\", \n  \"author\": \"Philip Klauzinski\", \n  \"license\": \"MIT\", \n  \"devDependencies\": { \n    \"browserify\": \"^12.0.1\" \n  } \n} \n\n```", "```js\n$ npm update --save-dev\n\n```", "```js\n$ npm update -D\n\n```", "```js\n$ npm update -g\n\n```", "```js\n$ npm install -g bower\n\n```", "```js\n$ npm install bower --save-dev\n\n```", "```js\n$ bower -v\n\n```", "```js\n$ bower init\n\n```", "```js\n? name: my-app \n? version: 0.0.0 \n? description: My app description. \n? main file: index.html \n? what types of modules does this package expose? (Press <space> to? what types of modules does this package expose? globals \n? keywords: my, app, keywords \n? authors: Philip Klauzinski \n? license: MIT \n? homepage: http://gui.ninja \n? set currently installed components as dependencies? No \n? add commonly ignored files to ignore list? Yes \n? would you like to mark this package as private which prevents it from being accidentally published to the registry? Yes \n\n```", "```js\n{ \n  \"name\": \"my-app\", \n  \"version\": \"0.0.0\", \n  \"authors\": [ \n    \"Philip Klauzinski\" \n  ], \n  \"description\": \"My app description.\", \n  \"main\": \"index.html\", \n  \"moduleType\": [ \n    \"globals\" \n  ], \n  \"keywords\": [ \n    \"my\", \n    \"app\", \n    \"keywords\" \n  ], \n  \"license\": \"MIT\", \n  \"homepage\": \"http://gui.ninja\", \n  \"ignore\": [ \n    \"**/.*\", \n    \"node_modules\", \n    \"bower_components\", \n    \"test\", \n    \"tests\" \n  ], \n  \"private\": true \n} \n\n```", "```js\n{ \n  \"name\": \"my-app\", \n  \"private\": true \n} \n\n```", "```js\n{ \n  \"directory\": \"path/to/my_components\" \n} \n\n```", "```js\n$ bower install jquery --save\n\n```", "```js\n$ bower install jquery -S\n\n```", "```js\n$ bower install mocha --save-dev\n\n```", "```js\n{ \n  \"name\": \"my-app\", \n  \"private\": true, \n  \"dependencies\": { \n    \"jquery\": \"~2.1.4\" \n  }, \n  \"devDependencies\": { \n    \"mocha\": \"~2.3.4\" \n  } \n} \n\n```", "```js\n$ bower install mocha -D\n\n```", "```js\n$ bower search phantomjs\n\n```", "```js\n phantom git://github.com/ariya/phantomjs.git\n dt-phantomjs git://github.com/keesey/dt-phantomjs\n qunit-phantomjs-runner git://github.com/jonkemp/...\n parse-cookie-phantomjs git://github.com/sindresorhus/...\n highcharts-phantomjs git://github.com/pesla/highcharts-phantomjs.git\n mocha-phantomjs git://github.com/metaskills/mocha-phantomjs.git\n purescript-phantomjs git://github.com/cxfreeio/purescript-phantomjs.git\n\n```", "```js\n$ bower install phantom --save-dev\n\n```", "```js\n$ npm install -g grunt-cli\n\n```", "```js\n$ npm install grunt --save-dev\n\n```", "```js\n{ \n  \"name\": \"my-app\", \n  \"version\": \"1.0.0\", \n  \"author\": \"Philip Klauzinski\", \n  \"license\": \"MIT\", \n  \"devDependencies\": { \n    \"grunt\": \"^0.4.5\" \n  } \n} \n\n```", "```js\n$ npm install grunt-contrib-jshint --save-dev\n\n```", "```js\n{ \n  \"name\": \"my-app\", \n  \"version\": \"1.0.0\", \n  \"author\": \"Philip Klauzinski\", \n  \"license\": \"MIT\", \n  \"devDependencies\": { \n    \"grunt\": \"^0.4.5\", \n    \"grunt-contrib-jshint\": \"^0.11.3\" \n  } \n} \n\n```", "```js\n$ npm install grunt-contrib-watch --save-dev\n\n```", "```js\n  \"devDependencies\": { \n    \"grunt\": \"^0.4.5\", \n    \"grunt-contrib-jshint\": \"^0.11.3\", \n    \"grunt-contrib-watch\": \"^0.6.1\" \n  } \n\n```", "```js\n$ npm install -g grunt-init\n\n```", "```js\nmodule.exports = { \n    // Object properties here \n};\n```", "```js\nmodule.exports = function() { \n    // Code for the module here \n};\n```", "```js\nmodule.exports = function(grunt) { \n    // Grunt code here \n};\n```", "```js\nmodule.exports = function(grunt) { \n    'use strict'; \n    grunt.initConfig({ \n        pkg: grunt.file.readJSON('package.json') \n});\n};\n```", "```js\nmodule.exports = function(grunt) { \n    'use strict'; \n    grunt.initConfig({ \n        pkg: grunt.file.readJSON('package.json'), \n        jshint: { \n            options: { \n                curly: true, \n                eqeqeq: true, \n                eqnull: true, \n                browser: true, \n                newcap: false, \n                es3: true, \n                forin: true, \n                indent: 4, \n                unused: 'vars', \n                strict: true, \n                trailing: true, \n                quotmark: 'single', \n                latedef: true, \n                globals: { \n                    jQuery: true \n                } \n            }, \n            files: { \n                src: ['Gruntfile.js', 'js/src/*.js'] \n            } \n        } \n    }); \n}; \n\n```", "```js\nwatch: { \n    jshint: { \n        files: ['js/src/*.js'], \n        tasks: ['jshint'] \n    } \n} \n\n```", "```js\n$ grunt watch:jshint\n\n```", "```js\ngrunt.loadNpmTasks('grunt-contrib-jshint'); \n\n```", "```js\ngrunt.loadNpmTasks('grunt-contrib-watch'); \n\n```", "```js\nmodule.exports = function(grunt) { \n    'use strict'; \n    grunt.initConfig({ \n        pkg: grunt.file.readJSON('package.json'), \n        jshint: { \n            options: { \n                curly: true, \n                eqeqeq: true, \n                eqnull: true, \n                browser: true, \n                newcap: false, \n                es3: true, \n                forin: true, \n                indent: 4, \n                unused: 'vars', \n                strict: true, \n                trailing: true, \n                quotmark: 'single', \n                latedef: true, \n                globals: { \n                    jQuery: true \n                } \n            }, \n            files: { \n                src: ['Gruntfile.js', 'js/src/*.js'] \n            } \n        }, \n        watch: { \n            jshint: { \n                files: ['js/src/*.js'], \n                tasks: ['jshint'] \n            } \n        } \n    }); \n    grunt.loadNpmTasks('grunt-contrib-jshint'); \n    grunt.loadNpmTasks('grunt-contrib-watch'); \n}; \n\n```", "```js\n$ grunt jshint\nRunning \"jshint:files\" (jshint) task\n>> 1 file lint free.\nDone, without errors\n\n```", "```js\n$ mkdir -p js/src\n\n```", "```js\nvar test = function() { \n    console.log('test'); \n}; \n\n```", "```js\n$ grunt jshint\nRunning \"jshint:files\" (jshint) task\n js/src/app.js\n 2 |    console.log('test');\n ^ Missing \"use strict\" statement.\n 1 |var test = function() {\n ^ 'test' is defined but never used.\n>> 2 errors in 2 files\nWarning: Task \"jshint:files\" failed. Use --force to continue.\nAborted due to warnings.\n\n```", "```js\nvar test = function() { \n    'use strict'; \n    console.log('test'); \n}; \ntest(); \n\n```", "```js\n$ grunt jshint\nRunning \"jshint:files\" (jshint) task\n>> 2 files lint free.\nDone, without errors.\n\n```", "```js\n$ grunt watch\n\n```", "```js\n$ grunt watch:jshint\n\n```", "```js\n$ grunt watch\nRunning \"watch\" task\nWaiting...\n\n```", "```js\nvar test = function() { \n    console.log('test'); \n}; \ntest() \n\n```", "```js\n>> File \"js/src/app.js\" changed.\nRunning \"jshint:files\" (jshint) task \n js/src/app.js\n 2 |    console.log('test');\n ^ Missing \"use strict\" statement.\n 4 |test()\n ^ Missing semicolon.\n>> 2 errors in 2 files\nWarning: Task \"jshint:files\" failed. Use --force to continue.\nAborted due to warnings.\n\n```", "```js\nvar test = function() { \n    'use strict'; \n    console.log('test'); \n}; \ntest(); \n\n```", "```js\ngrunt.registerTask('default', ['jshint', 'watch:jshint']);\n\n```", "```js\n$ grunt\nRunning \"jshint:files\" (jshint) task\n>> 2 files lint free.\nRunning \"watch:jshint\" (watch) task\nWaiting...\n\n```", "```js\ngrunt.registerTask('my-task', 'My custom task.', ['jshint']); \n\n```", "```js\ngrunt.registerTask('my-task', 'My custom task.', function() { \n    grunt.log.writeln('This is my custom task.'); \n}); \n\n```", "```js\n$ grunt my-task\nRunning \"my-task\" task\nThis is my custom task.\n\n```", "```js\ngrunt.registerTask('my-task', 'My custom task.', function(arg1, arg2) { \n    grunt.log.writeln(this.name + ' output...'); \n    grunt.log.writeln('arg1: ' + arg1 + ', arg2: ' + arg2); \n}); \n\n```", "```js\n$ grunt my-task:1:2\n\n```", "```js\nRunning \"my-task:1:2\" (my-task) task\nmy-task output...\narg1: 1, arg2: 2\n\n```", "```js\n$ grunt my-task\nRunning \"my-task\" task\nmy-task output...\narg1: undefined, arg2: undefined\nDone, without errors.\n\n```", "```js\ngrunt.registerTask('foo', 'My custom task.', function() { \n    grunt.log.writeln('Now calling the jshint and watch tasks...'); \n    grunt.task.run('jshint', 'watch'); \n}); \n\n```", "```js\n$ grunt foo\nRunning \"foo\" task\nNow calling the jshint and watch tasks...\nRunning \"jshint:files\" (jshint) task\n>> 2 files lint free.\nRunning \"watch\" task\nWaiting...\n\n```"]