["```js\ndoSomething(function (err, data) {\n  if(err) {\n    console.error(err);\n  } else {\n    request(data.url, function (err, response) {\n      if(err) {\n        console.error(err);\n      } else {\n        doSomethingElse(response, function (err, data) {\n          if(err) {\n            console.error(err);\n          } else {\n            // ...and so it goes!\n          }\n        })\n      }\n    })\n  }\n});\n```", "```js\nnew Promise<void>((resolve, reject) => {\n  setTimeout(() => resolve(), 100);\n});\n```", "```js\nnew Promise<void>((resolve, reject) => {\n  setTimeout(() => reject(), 100);\n});\n```", "```js\nfetch(\"https://my-server.com/my-resource\")\n  .then(value => console.log(value))\n  .catch(error => console.error(error));\n```", "```js\nfetch(\"https://my-server.com/my-resource\")\n  .then(data => showData(data))\n  .catch(error => handleError(error));\n```", "```js\nconst pendingPromise = new Promise((resolve, reject) => {});\nconsole.log(pendingPromise);\n```", "```js\nconst fulfilledPromise = new Promise(resolve => {\n  resolve(\"fulfilled!\");\n});\nconsole.log(fulfilledPromise);\n```", "```js\nconst rejectedPromise = new Promise((resolve, reject) => {\n  reject(\"rejected!\");\n});\nconsole.log(rejectedPromise);\n```", "```js\nExample01.ts\n1  const getTheValue = async (val: number, cb: Function) => {\n2    setTimeout(() => {\n3      const number = Math.floor(Math.random() * 100) + val;\n4      console.log(`The value is ${number}`);\n5      cb(number);\n6    }, 1000);\n7  };\n8  \n9  getTheValue(0, (output: number) => {\n10    getTheValue(output, (output: number) => {\n11      getTheValue(output, (output: number) => {\n12        getTheValue(output, (output: number) => {\n13          getTheValue(output, (output: number) => {\n14            getTheValue(output, (output: number) => {\n15              getTheValue(output, (output: number) => {\n16                getTheValue(output, (output: number) => {\n17                  getTheValue(output, (output: number) => {\n18                    getTheValue(output, () => {});\n19                  });\n20                });\n21              });\n22            });\n23          });\n24        });\n25      });\n26    });\n27  });\nLink to the example: https://packt.link/VHZJc\n```", "```js\nThe value is 49\nThe value is 133\nThe value is 206\nThe value is 302\nThe value is 395\nThe value is 444\nThe value is 469\nThe value is 485\nThe value is 528\nThe value is 615\n```", "```js\n    const getTheValue = async (val: number): Promise<number> => {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          const number = Math.floor(Math.random() * 100) + val;\n          console.log(`The value is ${number}`);\n          resolve(number);\n        }, 1000);\n      });\n    };\n    getTheValue(0)\n      .then((result: number) => getTheValue(result))\n      .then((result: number) => getTheValue(result))\n      .then((result: number) => getTheValue(result))\n      .then((result: number) => getTheValue(result))\n      .then((result: number) => getTheValue(result))\n      .then((result: number) => getTheValue(result))\n      .then((result: number) => getTheValue(result))\n      .then((result: number) => getTheValue(result))\n      .then((result: number) => getTheValue(result));\n    ```", "```js\n    The value is 50\n    The value is 140\n    The value is 203\n    The value is 234\n    The value is 255\n    The value is 300\n    The value is 355\n    The value is 395\n    The value is 432\n    The value is 451\n    ```", "```js\nExample02.ts\n1  const getTheValue = async (val: number): Promise<number> => {\n2   return new Promise((resolve, reject) => {\n3      setTimeout(() => {\n4        const number = Math.floor(Math.random() * 100) + val;\n5        if (number % 10 === 0) {\n6          reject(\"Bad modulus!\");\n7        } else {\n8          console.log(`The value is ${number}`);\n9          resolve(number);\n10        }\n11      }, 1000);\n12    });\n13  };\n14  \n15  getTheValue(0)\n16    .then((result: number) => getTheValue(result))\n17    .then((result: number) => getTheValue(result))\n18    .then((result: number) => getTheValue(result))\n19    .then((result: number) => getTheValue(result))\n20    .then((result: number) => getTheValue(result))\n21    .then((result: number) => getTheValue(result))\n22    .then((result: number) => getTheValue(result))\n23    .then((result: number) => getTheValue(result))\n24    .then((result: number) => getTheValue(result))\n25    .catch(err => console.error(err));\nLink to the example: https://packt.link/sBTgk\n```", "```js\nThe value is 25\nThe value is 63\nThe value is 111\nBad modulus!\n```", "```js\nExample03.ts\n1  const getTheValue = async (val: number) => {\n2    return new Promise<number>((resolve, reject) => {\n3      setTimeout(() => {\n4        const number = Math.floor(Math.random() * 100) + val;\n5        if (number % 10 === 0) {\n6          reject(\"Bad modulus!\");\n7        } else {\n8          console.log(`The value is ${number}`);\n9          resolve(number);\n10      }\n11     }, 1000);\n12   });\n13 };\n14 \n15 getTheValue(0)\n16   .then(result => getTheValue(result))\n17   .then(result => getTheValue(result))\n18   .then(result => getTheValue(result))\n19   .then(result => getTheValue(result))\n20   .then(result => getTheValue(result))\n21   .then(result => getTheValue(result))\n22   .then(result => getTheValue(result))\n23   .then(result => getTheValue(result))\n24   .then(result => getTheValue(result))\n25   .catch(err => console.error(err))\n26   .finally(() => console.log(\"We are done!\"));\nLink to the example: https://packt.link/izqwS\n```", "```js\nThe value is 69\nThe value is 99\nBad modulus!\nWe are done!\n```", "```js\nExample04.ts\n1  const getTheValue = async (val: number = 0) => {\n2    return new Promise<number>((resolve, reject) => {\n3      setTimeout(() => {\n4        const number = Math.floor(Math.random() * 100) + val;\n5        if (number % 10 === 0) {\n6          reject(\"Bad modulus!\");\n7        } else {\n8          console.log(`The value is ${number}`);\n9          resolve(number);\n10       }\n11     }, 1000);\n12   });\n13 };\n14\n15 Promise.all([\n16   getTheValue(),\n17   getTheValue(),\n18   getTheValue(),\n19   getTheValue(),\n20   getTheValue(),\n21   getTheValue(),\n22   getTheValue(),\n23   getTheValue(),\n24   getTheValue(),\n25   getTheValue()\n26 ])\n27   .then(values =>\n28     console.log(\n29       `The total is ${values.reduce((prev, current) => prev + current, 0)}`\n30     )\n31   )\n32   .catch(err => console.error(err))\n33   .finally(() => console.log(\"We are done!\"));\nLink to the example: https://packt.link/8pzx4\n```", "```js\n    const getTheValue = async (val: number = 0) => {\n      return new Promise<number>((resolve, reject) => {\n        setTimeout(() => {\n          const number = Math.floor(Math.random() * 100) + val;\n          if (number % 10 === 0) {\n            reject('Bad modulus!');\n          } else {\n            console.log(`The value is ${number}`);\n            resolve(number);\n          }\n        }, 1000);\n      });\n    };\n    Promise.all([\n      getTheValue(),\n      getTheValue(),\n      getTheValue(),\n      getTheValue(),\n      getTheValue(),\n      getTheValue(),\n      getTheValue(),\n      getTheValue(),\n      getTheValue(),\n      getTheValue(),\n    ])\n      .then((values) =>\n        console.log(\n          `The total is ${values.reduce((prev, current) => prev + current, 0)}`\n        )\n      )\n      .catch((err) => console.error(err))\n      .finally(() => console.log('We are done!'));\n    ```", "```js\n    const doIt = () => {\n      Promise.all([\n        getTheValue(),\n        getTheValue(),\n        getTheValue(),\n        getTheValue(),\n        getTheValue(),\n        getTheValue(),\n        getTheValue(),\n        getTheValue(),\n        getTheValue(),\n        getTheValue(),\n    ])\n      .then((values) =>\n          console.log(\n            `The total is ${values.reduce((prev, current) => prev + current, 0)}`\n          )\n      )\n      .catch((err) => console.error(err))\n      .finally(() => console.log('We are done!'));\n    ```", "```js\n      Promise.all(\n      Array(10)\n        .fill(null)\n        .map(() => getTheValue())\n    )\n    ```", "```js\n      .catch(doIt)\n    ```", "```js\n    const getTheValue = async (val: number = 0) => {\n      return new Promise<number>((resolve, reject) => {\n        setTimeout(() => {\n          const number = Math.floor(Math.random() * 100) + val;\n          if (number % 10 === 0) {\n            reject('Bad modulus!');\n          } else {\n            // console.log(`The value is ${number}`);\n            resolve(number);\n          }\n        }, 1000);\n      });\n    };\n    let loopCount = 0;\n    const doIt = () => {\n      Promise.all(\n        Array(10)\n          .fill(null)\n          .map(() => getTheValue())\n      )\n        .then((values) =>\n          console.log(\n            `The total is ${values.reduce((prev, current) => prev + current, 0)}`\n          )\n        )\n        .catch(doIt)\n        .finally(() => console.log(`completed loop ${++loopCount}`));\n    };\n    doIt();\n    ```", "```js\n    completed loop 1\n    The total is 438\n    completed loop 2\n    ```", "```js\nconst getTheValue = async (val: number = 0) => {\n  return new Promise<number>((resolve, reject) => {\n    setTimeout(() => {\n      const number = Math.floor(Math.random() * 100) + val;\n      // Arbitrary error condition - if the random number is divisible by 10.\n      if (number % 10 === 0) {\n        reject(\"Bad modulus!\");\n      } else {\n        console.log(`The value is ${number}`);\n        resolve(number);\n      }\n    }, 1000);\n  });\n};\nconst generateTheNumber = (iterations: number): void => {\n  Promise.allSettled(\n    // Produces an array of `iterations` length with the pending promises of `getTheValue()`.\n    Array(iterations)\n      .fill(null)\n      .map(() => getTheValue())\n  )\n    .then((settledResults) => {\n      // Map all the results into the failed, succeeded and total values.\n      const results = settledResults.reduce(\n        (prev, current) => {\n          return current.status === \"fulfilled\"\n            ? {\n                ...prev,\n                succeeded: prev.succeeded + 1,\n                total: prev.total + current.value,\n              }\n            : { ...prev, failed: prev.failed + 1 };\n        },\n        {\n          failed: 0,\n          succeeded: 0,\n          total: 0,\n        }\n      );\n      console.log(results);\n    })\n    .finally(() => console.log(\"We are done!\"));\n};\ngenerateTheNumber(10);\n```", "```js\ncurrent { status: 'fulfilled', value: 85 }\ncurrent { status: 'fulfilled', value: 25 }\ncurrent { status: 'fulfilled', value: 11 }\ncurrent { status: 'fulfilled', value: 43 }\ncurrent { status: 'rejected', reason: 'Bad modulus!' }\ncurrent { status: 'fulfilled', value: 41 }\ncurrent { status: 'fulfilled', value: 81 }\ncurrent { status: 'rejected', reason: 'Bad modulus!' }\ncurrent { status: 'rejected', reason: 'Bad modulus!' }\ncurrent { status: 'fulfilled', value: 7 }\n{ failed: 3, succeeded: 7, total: 293 } \nWe are done!\n```", "```js\nsettledResults [\n  { status: 'fulfilled', value: 85 },\n  { status: 'fulfilled', value: 25 },\n  { status: 'fulfilled', value: 11 },\n  { status: 'fulfilled', value: 43 },\n  { status: 'rejected', reason: 'Bad modulus!' },\n  { status: 'fulfilled', value: 41 },\n  { status: 'fulfilled', value: 81 },\n  { status: 'rejected', reason: 'Bad modulus!' },\n  { status: 'rejected', reason: 'Bad modulus!' },\n  { status: 'fulfilled', value: 7 }\n]\n```", "```js\n    Promise.all(\n      Array(3)\n        .fill(null)\n        .map(() => generateTheNumber(10))\n    );\n    ```", "```js\n    Promise.all(\n      Array(3)\n        .fill(null)\n        .map(() => generateTheNumber(10))\n    ).then((result) => console.log(result));\n    ```", "```js\n    const generateTheNumber = (iterations: number) => {\n      return Promise.allSettled(\n        Array(iterations)\n          .fill(null)\n          .map(() => getTheValue())\n      )\n        .then((settledResults) => {\n          const results = settledResults.reduce(\n            (prev, current) => {\n              return current.status === 'fulfilled'\n                ? {\n                    ...prev,\n                    succeeded: prev.succeeded + 1,\n                    total: prev.total + current.value,\n                  }\n                : { ...prev, failed: prev.failed + 1 };\n            },\n            {\n              failed: 0,\n              succeeded: 0,\n              total: 0,\n            }\n          );\n          return results;\n        })\n        .finally(() => console.log('Iteration done!'));\n    };\n    With that done we can get our output.\n    [\n      { failed: 0, succeeded: 10, total: 443 },\n      { failed: 1, succeeded: 9, total: 424 },\n      { failed: 2, succeeded: 8, total: 413 },\n    ]\n    ```", "```js\n      const totals = results.map((r) => r.total).sort();\n      console.log(`The highest total is ${totals[totals.length - 1]}.`);\n      console.log(`The lowest total is ${totals[0]}.`);\n    ```", "```js\n    The value is 62\n    The value is 77\n    The value is 75\n    The value is 61\n    The value is 61\n    The value is 61\n    The value is 15\n    The value is 83\n    The value is 4\n    The value is 23\n    Iteration done!\n    .\n    .\n    .\n    The highest total is 522.\n    The lowest total is 401.\n    ```", "```js\nconst oneSecond = new Promise((_resolve, reject) => {\n  setTimeout(() => reject(\"Too slow!\"), 1000);\n});\nconst upToTwoSeconds = new Promise(resolve => {\n  setTimeout(() => resolve(\"Made it!\"), Math.random() * 2000);\n});\nPromise.race([oneSecond, upToTwoSeconds])\n  .then(result => console.log(result))\n  .catch(err => console.error(err));\n```", "```js\nconst hello = \"hello\";\n```", "```js\nnew <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\n```", "```js\nnew Promise(resolve => {\n  resolve(\"This resolves!\");\n});\n```", "```js\nnew Promise<string>(resolve => {\n  resolve(\"This resolves!\");\n});\n```", "```js\nconst getPromise = async () => new Promise(resolve => resolve(Math.ceil(Math.random() * 100)));\nconst printResult = (result: number) => console.log(result);\ngetPromise().then(result => printResult(result)); \n```", "```js\nconst getPromise = async () => new Promise<number>(resolve => resolve(Math.ceil(Math.random() * 100)));\nconst printResult = (result: number) => console.log(result);\ngetPromise().then(result => printResult(result));\n```", "```js\n    npm i\n    ```", "```js\n    <html>\n      <head>\n        <title>The TypeScript Workshop - Exercise 12.03</title>\n        <link href=\"styles.css\" rel=\"stylesheet\"></link>\n      </head>\n      <body>\n        <div id=\"my-data\"></div>\n      </body>\n      <script type=\"module\" src=\"img/data-loader.js\"></script>\n    </html>\n    ```", "```js\n    body {\n      font-family: Arial, Helvetica, sans-serif;\n      font-size: 12px;\n    }\n    input {\n      width: 200;\n    }\n    ```", "```js\n    { \"message\": \"Hello Promise!\" }\n    ```", "```js\n    const updateUI = (message: any): void => {\n      const item = document.getElementById(\"my-data\");\n      if (item) {\n        item.innerText = `Here is your data: ${message}`;\n      }\n    };\n    const message = fetch(\"http://localhost:8080/data.json\");\n    updateUI(message);\n    ```", "```js\n    npx tsc -w data-loader.ts\n    ```", "```js\n    npx http-server . -c-1\n    ```", "```js\n     \"Here is your data: [object Promise]\". \n    ```", "```js\n    const message = fetch(\"http://localhost:8080/data.json\");\n    ```", "```js\nimport * as Q from \"q\";\nconst deferred = Q.defer();\ndeferred.resolve(123);\ndeferred.promise.then(val => console.log(val));\n```", "```js\nconst p = new Promise<number>((resolve, reject) => {\n  resolve(123);\n});\np.then(val => console.log(val));\n```", "```js\n{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./public\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true\n  }\n}\n```", "```js\nconst p = new Promise<number>((resolve, reject) => {\n  resolve(123);\n});\np.then(val => console.log(val));\n```", "```js\n const p = new Promise((resolve, reject) => {\n    resolve(123);\n});\np.then(val => console.log(val));\n```", "```js\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./public\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"forceConsistentCasingInFileNames\": true\n  }\n}\n```", "```js\n% npx tsc\nsrc/promise.ts:1:15 - error TS2585: 'Promise' only refers to a type, but is being used as a value here. Do you need to change your target library? Try changing the `lib` compiler option to es2015 or later.\n1 const p = new Promise<number>((resolve, reject) => {\n                ~~~~~~~\nFound 1 error.\n```", "```js\nimport { Promise } from \"bluebird\";\nconst p = new Promise<number>(resolve => {\n  resolve(123);\n});\np.then(val => console.log(val));\n```", "```js\nimport { Promise } from \"es6-promise\";\nconst p = new Promise<number>(resolve => {\n  resolve(123);\n});\np.then(val => console.log(val));\n```", "```js\nconst asyncAdder = (n1: number, n2: number, cb: Function) => {\n  let err: Error;\n  if (n1 === n2) {\n    cb(Error(\"Use doubler instead!\"));\n  } else {\n    cb(null, n1 + n2);\n  }\n};\nasyncAdder(3, 4, (err: Error, sum: number) => {\n  if (err) {\n    throw err;\n  }\n  console.log(sum);\n});\n```", "```js\nimport { promisify } from \"es6-promisify\";\nconst asyncAdder = (n1: number, n2: number, cb: Function) => {\n  let err: Error;\n  if (n1 === n2) {\n    cb(Error(\"Use doubler instead!\"));\n  } else {\n    cb(null, n1 + n2);\n  }\n};\nconst promiseAdder = promisify(asyncAdder);\npromiseAdder(3, 4)\n  .then((val: number) => console.log(val))\n  .catch((err: Error) => console.log(err));\n```", "```js\nimport { promisify } from \"bluebird\";\nconst asyncAdder = (n1: number, n2: number, cb: Function) => {\n  if (n1 === n2) {\n    cb(Error(\"Use doubler instead!\"));\n  } else {\n    cb(null, n1 + n2);\n  }\n};\nconst promiseAdder = promisify(asyncAdder);\npromiseAdder(3, 4)\n  .then((val: number) => console.log(val))\n  .catch((err: Error) => console.log(err));\n```", "```js\nimport { promisify } from \"util\";\nconst asyncAdder = (n1: number, n2: number, cb: Function) => {\n  let err: Error;\n  if (n1 === n2) {\n    cb(Error(\"Use doubler instead!\"));\n  } else {\n    cb(null, n1 + n2);\n  }\n};\nconst promiseAdder = promisify(asyncAdder);\npromiseAdder(3, 4)\n  .then((val: number) => console.log(val))\n  .catch((err: Error) => console.log(err));\n```", "```js\nimport { readFile } from \"fs\";\nimport { resolve } from \"path\";\nconst filePath = resolve(__dirname, \"text.txt\");\nreadFile(filePath, (err, data) => {\n  if (err) {\n    throw err;\n  }\n  console.log(data.toString());\n});\n```", "```js\nimport { readFileSync } from \"fs\";\nimport { resolve } from \"path\";\nconst filePath = resolve(__dirname, \"text.txt\");\nconsole.log(readFileSync(filePath).toString());\n```", "```js\nimport { promises } from \"fs\";\nimport { resolve } from \"path\";\nconst filePath = resolve(__dirname, \"text.txt\");\npromises.readFile(filePath).then(file => console.log(file.toString()));\n```", "```js\n    import { readFileSync, writeFileSync } from \"fs\";\n    import { resolve } from \"path\";\n    const file1 = readFileSync(resolve(__dirname, 'file1.txt'));\n    const file2 = readFileSync(resolve(__dirname, 'file2.txt'));\n    writeFileSync(resolve(__dirname, 'output.txt'), [file1, file2].join('\\n'));\n    ```", "```js\n    Text in file 1.\n    Text in file 2.\n    ```", "```js\n    import { readFile, writeFile } from 'fs';\n    import { resolve } from 'path';\n    readFile(resolve(__dirname, 'file1.txt'), (err, file1) => {\n      if (err) throw err;\n      readFile(resolve(__dirname, 'file1.txt'), (err, file2) => {\n        if (err) throw err;\n        writeFile(\n          resolve(__dirname, 'output.txt'),\n          [file1, file2].join('\\n'),\n          (err) => {\n            if (err) throw err;\n          }\n        );\n      });\n    });\n    ```", "```js\n    import { promises } from 'fs';\n    import { resolve } from 'path';\n    Promise.all([\n      promises.readFile(resolve(__dirname, 'file1.txt')),\n      promises.readFile(resolve(__dirname, 'file2.txt')),\n    ]);\n    ```", "```js\n    import { promises } from 'fs';\n    import { resolve } from 'path';\n    Promise.all([\n      promises.readFile(resolve(__dirname, 'file1.txt')),\n      promises.readFile(resolve(__dirname, 'file2.txt')),\n    ]).then((files) => {\n      promises.writeFile(resolve(__dirname, 'output.txt'), files.join('\\n'));\n    });\n    ```", "```js\n    Text in file 1.\n    Text in file 2.\n    ```", "```js\nimport { Database } from \"sqlite3\";\nconst db = new Database(\":memory:\", err => {\n  if (err) {\n    console.error(err);\n    return db.close();\n  }\n  db.run(\"CREATE TABLE promise (id int, desc char);\", err => {\n    if (err) {\n      console.error(err);\n      return db.close();\n    }\n    db.run(\n      \"INSERT INTO promise VALUES (1, 'I will always lint my code.');\",\n      () => {\n        db.all(\"SELECT * FROM promise;\", (err, rows) => {\n          if (err) {\n            console.error(err);\n            return db.close();\n          }\n          console.log(rows);\n          db.close(err => {\n            if (err) {\n              return console.error(err);\n            }\n          });\n        });\n      }\n    );\n  });\n});\n```", "```js\nimport { open } from \"sqlite\";\nimport * as sqlite from \"sqlite3\";\nopen({ driver: sqlite.Database, filename: \":memory:\" }).then((db) => {  return db\n    .run(\"CREATE TABLE promise (id int, desc char);\")\n    .then(() => {\n      return db.run(\n        \"INSERT INTO promise VALUES (1, 'I will always lint my code.');\"\n      );\n    })\n    .then(() => {\n      return db.all(\"SELECT * FROM promise;\");\n    })\n    .then(rows => {\n      console.log(rows);\n    })\n    .catch(err => console.error(err))\n    .finally(() => db.close());\n});\n```", "```js\n    npm i\n    ```", "```js\n    import { Database } from \"sqlite\";\n    import sqlite from \"sqlite3\";\n    export interface PromiseModel {\n      id: number;\n      desc: string;\n    }\n    export class PromiseDB {\n      private db: Database;\n      private initialized = false;\n      constructor() {\n        this.db = new Database({\n          driver: sqlite.Database,\n          filename: \":memory:\",\n        });\n      }\n    }\n    ```", "```js\n      initialize = () => {\n        if (this.initialized) {\n          return Promise.resolve(true);\n        }\n        return this.db\n          .open()\n          .then(() =>\n            this.db\n              .run(\"CREATE TABLE promise (id INTEGER PRIMARY KEY, desc CHAR);\")\n              .then(() => (this.initialized = true))\n          );\n      };\n    ```", "```js\n      create = (payload: PromiseModel) =>\n        this.db.run(\"INSERT INTO promise (desc) VALUES (?);\", payload.desc);\n    ```", "```js\n      delete = (id: number) => this.db.run(\"DELETE FROM promise WHERE id = ?\", id);\n    ```", "```js\n      getAll = () => this.db.all<PromiseModel[]>(\"SELECT * FROM promise;\");\n      getOne = (id: number) =>\n        this.db.get<PromiseModel>(\"SELECT * FROM promise WHERE id = ?\", id);\n    ```", "```js\n      update = (payload: PromiseModel) =>\n        this.db.run(\n          \"UPDATE promise SET desc = ? where id = ?\",\n          payload.desc,\n          payload.id\n        );\n    ```", "```js\n    import { Database } from \"sqlite\";\n    import sqlite from \"sqlite3\";\n    export interface PromiseModel {\n      id: number;\n      desc: string;\n    }\n    export class PromiseDB {\n      private db: Database;\n      private initialized = false;\n      constructor() {\n        this.db = new Database({\n          driver: sqlite.Database,\n          filename: \":memory:\",\n        });\n      }\n      initialize = () => {\n        if (this.initialized) {\n          return Promise.resolve(true);\n        }\n        return this.db\n          .open()\n          .then(() =>\n            this.db\n              .run(\"CREATE TABLE promise (id INTEGER PRIMARY KEY, desc CHAR);\")\n              .then(() => (this.initialized = true))\n          );\n      };\n      create = (payload: PromiseModel) =>\n        this.db.run(\"INSERT INTO promise (desc) VALUES (?);\", payload.desc);\n      delete = (id: number) => this.db.run(\"DELETE FROM promise WHERE id = ?\", id);\n      getAll = () => this.db.all<PromiseModel[]>(\"SELECT * FROM promise;\");\n      getOne = (id: number) =>\n        this.db.get<PromiseModel>(\"SELECT * FROM promise WHERE id = ?\", id);\n      update = (payload: PromiseModel) =>\n        this.db.run(\n          \"UPDATE promise SET desc = ? where id = ?\",\n          payload.desc,\n          payload.id\n        );\n    }\n    ```", "```js\n    import { createServer, IncomingMessage, Server, ServerResponse } from \"http\";\n    import { PromiseDB } from \"./db\";\n    class App {\n      public db: PromiseDB;\n      private server: Server;\n      constructor(private port: number) {\n        this.db = new PromiseDB();\n        this.server = createServer(this.requestHandler);\n      }\n    }\n    export const app = new App(3000);\n    ```", "```js\n      initialize = () => {\n        return Promise.all([\n          this.db.initialize(),\n          new Promise((resolve) => this.server.listen(this.port, () => resolve(true))),\n        ]).then(() => console.log(\"Application is ready!\"));\n      };\n    ```", "```js\n    requestHandler = (req: IncomingMessage, res: ServerResponse) => {\n        res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        res.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n        res.setHeader(\n          \"Access-Control-Allow-Methods\",\n          \"DELETE, GET, OPTIONS, POST, PUT\"\n        );\n        if (req.method === \"OPTIONS\") {\n          return res.end();\n        }\n        const urlParts = req.url?.split(\"/\") ?? \"/\";\n        switch (urlParts[1]) {\n          case \"promise\":\n            return promiseRouter(req, res);\n          default:\n            return this.handleError(res, 404, \"Not Found.\");\n        }\n      };\n    ```", "```js\n      handleError = (\n        res: ServerResponse,\n        statusCode = 500,\n        message = \"Internal Server Error.\"\n      ) => res.writeHead(statusCode).end(message);\n    ```", "```js\n    import { createServer, IncomingMessage, Server, ServerResponse } from \"http\";\n    import { PromiseDB } from \"./db\";\n    import { promiseRouter } from \"./router\";\n    class App {\n      public db: PromiseDB;\n      private server: Server;\n      constructor(private port: number) {\n        this.db = new PromiseDB();\n        this.server = createServer(this.requestHandler);\n      }\n      initialize = () => {\n        return Promise.all([\n          this.db.initialize(),\n          new Promise((resolve) => this.server.listen(this.port, () => resolve(true))),\n        ]).then(() => console.log(\"Application is ready!\"));\n      };\n      handleError = (\n        res: ServerResponse,\n        statusCode = 500,\n        message = \"Internal Server Error.\"\n      ) => res.writeHead(statusCode).end(message);\n    requestHandler = (req: IncomingMessage, res: ServerResponse) => {\n        res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        res.setHeader(\"Access-Control-Allow-Headers\", \"*\");\n        res.setHeader(\n          \"Access-Control-Allow-Methods\",\n          \"DELETE, GET, OPTIONS, POST, PUT\"\n        );\n        if (req.method === \"OPTIONS\") {\n          return res.end();\n        }\n        const urlParts = req.url?.split(\"/\") ?? \"/\";\n        switch (urlParts[1]) {\n          case \"promise\":\n            return promiseRouter(req, res);\n          default:\n            return this.handleError(res, 404, \"Not Found.\");\n        }\n      };\n    }\n    export const app = new App(3000);\n    app.initialize();\n    ```", "```js\n    const parseBody = (req: IncomingMessage): Promise<PromiseModel> => {\n      return new Promise((resolve, reject) => {\n        let body = \"\";\n        req.on(\"data\", (chunk) => (body += chunk));\n        req.on(\"end\", () => {\n          try {\n            resolve(JSON.parse(body));\n          } catch (e) {\n            reject(e);\n          }\n        });\n      });\n    };\n    ```", "```js\n    const handleCreate = (req: IncomingMessage, res: ServerResponse) =>\n      parseBody(req)\n        .then((body) => app.db.create(body).then(() => res.end()))\n        .catch((err) => app.handleError(res, 500, err.message));\n    ```", "```js\n    const handleDelete = (requestParam: number, res: ServerResponse) =>\n      app.db\n        .delete(requestParam)\n        .then(() => res.end())\n        .catch((err) => app.handleError(res, 500, err.message));\n    ```", "```js\n    const handleGetAll = (res: ServerResponse) =>\n      app.db\n        .getAll()\n        .then((data) => res.end(JSON.stringify(data)))\n        .catch((err) => app.handleError(res, 500, err.message));\n    const handleGetOne = (requestParam: number, res: ServerResponse) =>\n      app.db\n        .getOne(requestParam)\n        .then((data) => res.end(JSON.stringify(data)))\n        .catch((err) => app.handleError(res, 500, err.message));\n    ```", "```js\n    const handleUpdate = (req: IncomingMessage, res: ServerResponse) =>\n      parseBody(req)\n        .then((body) => app.db.update(body).then(() => res.end()))\n        .catch((err) => app.handleError(res, 500, err.message));\n    ```", "```js\n    export const promiseRouter = (req: IncomingMessage, res: ServerResponse) => {\n      const urlParts = req.url?.split(\"/\") ?? \"/\";\n      const requestParam = urlParts[2];\n      res.setHeader(\"Content-Type\", \"application/json\");\n      switch (req.method) {\n        case \"DELETE\":\n          if (requestParam) {\n            return handleDelete(Number.parseInt(requestParam), res);\n          }\n        case \"GET\":\n          if (requestParam) {\n            return handleGetOne(Number.parseInt(requestParam), res);\n          }\n          return handleGetAll(res);\n        case \"POST\":\n          return handleCreate(req, res);\n        case \"PUT\":\n          return handleUpdate(req, res);\n        default:\n          app.handleError(res, 404, \"Not Found.\");\n      }\n    };\n    ```", "```js\n     npx ts-node app.ts\n    ```", "```js\n    Application is ready!\n    ```"]