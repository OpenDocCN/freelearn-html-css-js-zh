["```js\n    <script>\n      export let title;\n      export let description;\n      $: document.title = `${title} - ${description}`;\n    </script>\n    ```", "```js\n    <!-- Parent.svelte -->\n    <slot />\n    ```", "```js\n    <script>\n      import Parent from './Parent.svelte';\n    </script>\n    <Parent>\n      <Child /> <!-- example of child components -->\n      <div /> <!-- example of child elements -->\n    </Parent>\n    ```", "```js\n<Carousel {items} let:currentItem let:next let:prev>\n  <button on:click={prev}>{'<'}</button>\n  <img src={currentItem} />\n  <button on:click={next}>{'>'}</button>\n</Carousel>\n```", "```js\n<Carousel {items} let:currentItem let:setCurrentIndex>\n  <img src={currentItem} />\n  {#each items as _, index}\n    <button on:click={() => setCurrentIndex(index)}>\n      {index}\n    </button>\n  {/each}\n</Carousel>\n```", "```js\n<script>\n  export let items;\n</script>\n<slot>\n```", "```js\n<Carousel>\n  <!-- content over here will be ignored if the Carousel don't have a <slot> element -->\n</Carousel>\n```", "```js\n<slot {currentIndex} {currentItem} {setCurrentIndex} {prev} {next} />\n```", "```js\nlet currentIndex = 0;\n```", "```js\nconst setCurrentIndex = (value) => { currentIndex = value; };\n```", "```js\n$: currentItem = items[currentIndex];\n```", "```js\nconst prev = () => setCurrentIndex((currentIndex - 1 + items.length) % items.length);\nconst next = () => setCurrentIndex((currentIndex + 1) % items.length);\n```", "```js\n<Autocomplete {search} let:value let:setValue let:searching let:suggestions let:selectSuggestion>\n  <input {value} on:input={event => setValue(event.currentTarget.value)}>\n  {#if searching}Searching...{/if}\n  {#if suggestions}\n    <ul>\n      {#each suggestions as suggestion}\n        <li on:click={() => selectSuggestion(suggestion)}>{suggestion}</li>\n      {/each}\n    </ul>\n  {/if}\n</Autocomplete>\n```", "```js\nctx.fillStyle = 'red';\nctx.strokeStyle = 'green';\nctx.rect(10, 10, 100, 100);\nctx.stroke();\nctx.fill();\n```", "```js\n<script>\n  let x = 10, y = 10, height = 100, width = 100;\n</script>\n<Canvas>\n  <Rectangle\n    fill=\"red\" stroke=\"green\"\n    {x} {y} {height} {width}\n  />\n</Canvas>\n```", "```js\n<script>\n  let x = 10, y = 10, height = 100, width = 100;\n  setInterval(() => {\n    height += 10;\n    width += 10;\n  }, 100);\n</script>\n<Canvas>\n  <Rectangle\n    fill=\"red\" stroke=\"green\"\n    {x} {y} {height} {width}\n  />\n</Canvas>\n```", "```js\n<script>\n  import { onMount } from 'svelte';\n  let canvas, ctx;\n  onMount(() => {\n    ctx = canvas.getContext('2d');\n  });\n</script>\n<canvas bind:this={canvas} />\n<slot />\n```", "```js\n<script>\n  import { setContext } from 'svelte';\n  // setting the context with the drawing context\n  setContext('canvas', () => ctx);\n</script>\n```", "```js\n<script>\n  import { getContext, onMount } from 'svelte';\n  const getCtx = getContext('canvas');\n  onMount(() => {\n    const ctx = getCtxt();\n    // draws a rectangle onto the canvas\n    ctx.fillRect(...);\n  });\n</script>\n```", "```js\n<script>\n  // ...\n  export let x, y, width, height;\n  $: draw(x, y, width, height);\n  function draw(x, y, width, height) {\n    const ctx = getCtx();\n    ctx.fillRect(x, y, width, height);\n  }\n</script>\n```", "```js\n<script>\n  // ...\n  function redrawCanvas() {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    // TODO: here we need to redraw all the rectangles\n  }\n  // Provide both the drawing context and the clearCanvas function to child components\n  setContext('canvas', { getCtx: () => ctx, redrawCanvas });\n</script>\n```", "```js\n<script>\n  const drawFunctions = new Set();\n  function registerDrawFunction(drawFn) {\n    drawFunctions.add(drawFn);\n    return () => {\n      drawFunctions.delete(drawFn);\n    };\n  }\n  function redrawCanvas() {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    // Redraw all the rectangles\n    for (const drawFn of drawFunctions) {\n      drawFn(ctx);\n    }\n  }\n  setContext('canvas', { registerDrawFunction, redrawCanvas });\n</script>\n```", "```js\n<script>\n  // ...\n  const { registerDrawFunction, redrawCanvas } = getContext('canvas');\n  function draw(ctx) {\n    ctx.fillRect(x, y, width, height);\n  }\n  onMount(() => {\n    // register the draw function\n    const unregister = registerDrawFunction(draw);\n    return () => {\n      unregister();\n      redrawCanvas();\n    };\n  });\n  // call redrawCanvas when x, y, height, width changes\n  $: x, y, height, width, redrawCanvas();\n</script>\n```"]