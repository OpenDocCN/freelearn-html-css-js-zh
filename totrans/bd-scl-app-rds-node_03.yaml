- en: '[CHAPTER 4](toc.xhtml#c04)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第四章](toc.xhtml#c04)'
- en: '[Planning the App](toc.xhtml#c04)'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[规划应用程序](toc.xhtml#c04)'
- en: '[Introduction](toc.xhtml#s103a)'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[介绍](toc.xhtml#s103a)'
- en: Node.Js has become the preferred choice when it comes to writing an application.
    There are more than 30 million websites powered by Node.js. These applications
    or websites or projects in general have a fair share of complexity. Netflix, LinkedIn,
    Uber, Paypal, and even NASA-like organizations use Node.js for their applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js已成为编写应用程序的首选选择。超过3000万个网站由Node.js驱动。这些应用程序或网站或项目在一般情况下都有相当复杂的部分。Netflix、LinkedIn、Uber、Paypal甚至类似NASA的组织都使用Node.js来开发他们的应用程序。
- en: For developing an application, planning is the crucial part. It helps to establish
    a clear goal and a path to follow to achieve the defined goal efficiently.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 开发应用程序时，规划是关键部分。它有助于明确目标并确定实现既定目标的路径。
- en: For the rest of the book, we are going to follow one common example to learn
    the important aspects of an application. We will see how to write, optimize, and
    test the app with standard techniques. We will be writing a project management
    software.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的剩余部分，我们将遵循一个共同示例来学习应用程序的重要方面。我们将看到如何使用标准技术编写、优化和测试应用程序。我们将编写一个项目管理软件。
- en: '[Structure](toc.xhtml#s104a)'
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[结构](toc.xhtml#s104a)'
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Overview of Project Management Application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目管理应用程序概述
- en: Database Design
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库设计
- en: Setting up the Project Structure
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置项目结构
- en: Installation of Project Dependency
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装项目依赖
- en: Project Directory Structure
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目目录结构
- en: Database Models (entities)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库模型（实体）
- en: Routing
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由
- en: '[Overview of the Application](toc.xhtml#s105a)'
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[应用程序概述](toc.xhtml#s105a)'
- en: Any project management software has a simple goal defined. Let the individuals
    and teams plan, organize, and execute the tasks to effectively take the project
    to its completion. A PMS should allow the respective users to create and manage
    projects. For each project, there can be many tasks to perform. Users should be
    able to communicate with each other. We will soon find out about these tasks and
    much more.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 任何项目管理软件都有一个简单的目标定义。让个人和团队规划、组织和执行任务，以有效地完成项目。项目管理软件应该允许用户创建和管理项目。对于每个项目，都可能有许多任务需要执行。用户应该能够相互沟通。我们将很快了解到这些任务以及更多内容。
- en: Our objective or scope of the Project Management System (PMS) project is to
    develop a small web application that serves as a basic project management tool.
    The application will have various features including secure user login, the ability
    to create projects and tasks, task assignment based on user roles, and the implementation
    of email notifications when tasks are assigned or completed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目管理系统（PMS）项目的目标或范围是开发一个小型Web应用程序，作为基本的项目管理工具。该应用程序将包括各种功能，包括安全的用户登录、创建项目和管理任务的能力、基于用户角色的任务分配，以及当任务被分配或完成时实施电子邮件通知。
- en: Additionally, the project will explore the implementation of a caching mechanism
    for APIs to enhance response times for requests. Moreover, it covers information
    for developers to do unit testing, along with how to build the application for
    the production environment and finally the deployment.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，项目还将探索实现API的缓存机制以提高请求响应时间。此外，它还包括为开发者提供单元测试信息，以及如何为生产环境构建应用程序，最后是部署。
- en: In order to get familiar with what we are going to build, we need to define
    the purpose, tasks we are going to perform, architecture, project structure, database
    design, and much more.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了熟悉我们将要构建的内容，我们需要定义目的、将要执行的任务、架构、项目结构、数据库设计以及更多内容。
- en: '[Roadmap](toc.xhtml#s106a)'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[路线图](toc.xhtml#s106a)'
- en: A typical roadmap for a project involves several key stages and activities.
    Here is a high-level overview of what the roadmap covers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的项目路线图涉及几个关键阶段和活动。以下是路线图涵盖的高级概述。
- en: Planning the application
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划应用程序
- en: Defining the modules
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义模块
- en: Database design
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库设计
- en: Setting up the project structure
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置项目结构
- en: Init the project
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化项目
- en: Connecting the database
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接数据库
- en: API development
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API开发
- en: API Caching
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API缓存
- en: Unit Testing
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Deployment
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署
- en: In this chapter, we will cover the first six of the preceding list. The last
    four topics have their dedicated chapters.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖前面列表中的前六个主题。最后四个主题有它们各自的章节。
- en: '[Scope](toc.xhtml#s107a)'
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[范围](toc.xhtml#s107a)'
- en: The purpose aforementioned has already given a good idea that we are going to
    develop a project management system. At times, we will refer to this as PMS also.
    Our first goal is to identify what our PMS should be capable of.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的目的已经给出了一个很好的想法，即我们将开发一个项目管理系统。有时，我们也会将其称为PMS。我们的第一个目标是确定我们的PMS应该具备哪些功能。
- en: 'We should be able to:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该能够：
- en: Manage users and login into the application.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理用户并登录到应用。
- en: Create and manage projects.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和管理项目。
- en: Create and manage tasks for the created projects.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为创建的项目创建和管理任务。
- en: Should be able to access and update the task details.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该能够访问和更新任务详情。
- en: Should be able to communicate with other members on a task.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该能够与任务上的其他成员进行沟通。
- en: Some basic project reports on a Dashboard.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在仪表板上提供一些基本的项目报告。
- en: '[Defining the Modules](toc.xhtml#s108a)'
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[定义模块](toc.xhtml#s108a)'
- en: Based on the tasks we should be able to perform, we can see that the PMS should
    have these must-have modules in the system.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们应能执行的任务，我们可以看到PMS系统应该具备以下必备模块。
- en: '[User Module](toc.xhtml#s109a)'
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[用户模块](toc.xhtml#s109a)'
- en: 'This module will allow us to manage users. We should be able to perform the
    following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块将使我们能够管理用户。我们应该能够执行以下操作：
- en: Add new users.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新用户。
- en: Edit users.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑用户。
- en: Delete users.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除用户。
- en: User Login.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户登录。
- en: Get a user profile.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取用户个人资料。
- en: Reset user password.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重置用户密码。
- en: '[Project Module](toc.xhtml#s110a)'
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[项目模块](toc.xhtml#s110a)'
- en: 'The project module will allow us to manage the projects. The following key
    tasks should be performed with the help of this module:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 项目模块将使我们能够管理项目。以下关键任务应通过此模块执行：
- en: Create new projects.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新项目。
- en: Update project details.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新项目详情。
- en: Delete projects.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除项目。
- en: Get project detail.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取项目详情。
- en: Get project statistics.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取项目统计信息。
- en: Manage project memberships.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理项目成员资格。
- en: '[Task Module](toc.xhtml#s111a)'
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[任务模块](toc.xhtml#s111a)'
- en: 'This module will allow us to manage tasks within a project. This is a key module
    which will enable us to:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块将使我们能够管理项目内的任务。这是一个关键模块，它将使我们能够：
- en: Create new tasks.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新任务。
- en: Update task details.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新任务详情。
- en: Delete tasks.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除任务。
- en: Get task details.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取任务详情。
- en: Attach supporting files.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附加支持文件。
- en: '[Comment Module](toc.xhtml#s112a)'
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[评论模块](toc.xhtml#s112a)'
- en: 'A task will always need a way to enable communication among team members. A
    comment module along with the tasks will facilitate this feature. The following
    tasks we should be able to perform:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 任务总是需要一个方式来使团队成员之间能够进行沟通。评论模块与任务一起将促进这一功能。以下是我们应该能够执行的任务：
- en: Add comments on tasks.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任务上添加评论。
- en: Allow users to update their own comments.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户更新自己的评论。
- en: Allow users and admins to delete the comments.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许用户和管理员删除评论。
- en: '[Database Design](toc.xhtml#s113a)'
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[数据库设计](toc.xhtml#s113a)'
- en: Designing the database for big projects is a tricky, on-going activity that
    is improvised with project timelines. Although it must be defined at the earliest.
    It involves defining the schema, tables, relationships, constraints, and data
    types to meet the specific requirements of the application.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为大型项目设计数据库是一个棘手、持续的活动，它随着项目时间表而即兴发挥。尽管它必须尽早定义。它涉及定义模式、表、关系、约束和数据类型，以满足应用的特定要求。
- en: Normalization helps optimize storage that includes data integrity by applying
    normalization rules to eliminate data redundancy. The goal of normalization is
    to avoid data duplication and maintain data integrity. Each piece of data is stored
    in only one place, reducing the risk of inconsistencies. The relationship between
    tables is maintained using primary and foreign keys.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 规范化通过应用规范化规则来消除数据冗余，有助于优化包括数据完整性在内的存储。规范化的目标是避免数据重复并保持数据完整性。每条数据只存储在一个地方，从而降低不一致的风险。表之间的关系通过主键和外键来维护。
- en: Normalization has its benefits in terms of storage, non-redundancy, and cleanliness.
    However, as the database grows with the number of tables along with complex features
    added to the application, the number of joins and complexity in the queries increase.
    This impacts readability, and results in slower performance if there are heavy
    read operations.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 规范化在存储、非冗余和整洁性方面有其好处。然而，随着数据库的增长，表的数量以及应用中添加的复杂功能，连接的数量和查询的复杂性也在增加。这影响了可读性，并在有大量读取操作时导致性能变慢。
- en: In this section, let us design the tables needed for our entities. We will try
    to keep the relationships to the minimum while maintaining a balance between redundancy
    and normalization wherever possible.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将设计我们实体所需的表。我们将尽量保持关系最小化，同时在可能的情况下在冗余和规范化之间保持平衡。
- en: '**Note:** *For this book, we are going to use the PostgreSQL database. Hence
    the data type in the following tables is specific to PostgreSQL. For each table,
    we will also specify if the column is a primary key or a unique key and if it
    can contain null values. If we are going to reference a column from another table,
    then we will mention the reference table and column.*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：*对于本书，我们将使用PostgreSQL数据库。因此以下表中的数据类型是特定于PostgreSQL的。对于每个表，我们还将指定列是否是主键或唯一键，以及它是否可以包含空值。如果我们打算引用另一个表中的列，那么我们将提及引用表和列。*'
- en: 'For all of the modules defined above, we need the following tables for our
    database:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上述定义的所有模块，我们需要以下表来构建我们的数据库：
- en: '`**User**`: Represents all of the users who can access the system'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**用户**`: 代表可以访问系统的所有用户'
- en: '`**Role**`: Each user will have a role assigned, for example, Project Manager,
    Admin, and others.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**角色**`: 每个用户都将被分配一个角色，例如，项目经理、管理员和其他。'
- en: '`**Project**`: Represents the project entity.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**项目**`: 代表项目实体。'
- en: '`**Task**`: Tasks associated with each project.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**任务**`: 与每个项目关联的任务。'
- en: '`**Comment**`: Comments added to each task.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**评论**`: 添加到每个任务的评论。'
- en: '*[Figure 4.1](#fig4_1)* shows a basic entity relationship diagram. This figure
    uses only primary keys and foreign keys used for each table.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*[图4.1](#fig4_1)* 展示了一个基本的实体关系图。此图仅使用每个表使用的唯一键和外键。'
- en: '![](img/4.1.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4.1.jpg)'
- en: '**Figure 4.1:** High-Level Entity Relationship Diagram'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4.1:** 高级实体关系图'
- en: The figure shows that each user has a role assigned. Each project is owned by
    a user. Each project has tasks assigned and each task can have comments. This
    diagram is a high-level ER Diagram. Now when we understand the relationship among
    the tables, we can explore each entity in detail followed by a detailed ER Diagram.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图表显示每个用户都被分配了一个角色。每个项目属于一个用户。每个项目都有分配的任务，每个任务都可以有评论。这是一个高级的实体关系图。现在当我们理解了表之间的关系后，我们可以详细地探讨每个实体，然后是详细的实体关系图。
- en: '[User Schema Table](toc.xhtml#s114a)'
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[用户架构表](toc.xhtml#s114a)'
- en: Let us begin with the User table which is vital for user authentication, authorization,
    and maintaining user-related data. It plays a crucial role in ensuring that each
    user’s information is accurately captured and secured while enabling the PMS to
    identify and manage individual users effectively.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从用户表开始，它是用户认证、授权和维护用户相关数据的关键。它在确保每个用户信息被准确捕捉和保障的同时，使PMS能够有效地识别和管理单个用户，发挥着至关重要的作用。
- en: For the sake of simplicity, we are adding only the user id, name, password,
    and some relevant details needed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，我们只添加了用户id、姓名、密码和一些相关的详细信息。
- en: '| **Column Name** | **Type** | **Data Type** | **Description** | **Primary?**
    | **Is Null** | **Unique** | **Reference** |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| **列名** | **类型** | **数据类型** | **描述** | **主键？** | **是否为空** | **唯一** | **引用**
    |'
- en: '| `user_id` | `uuid` | uuid | User’s unique identifier id | true | false |
    true | - |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `user_id` | `uuid` | uuid | 用户的唯一标识符id | true | false | true | - |'
- en: '| `email` | `email` | varchar(60) | User’s Email-id | false | false | true
    | - |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `email` | `email` | varchar(60) | 用户电子邮件地址 | false | false | true | - |'
- en: '| `full_name` | `string` | varchar(30) | User’s Full Name | false | true |
    false | - |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `full_name` | `string` | varchar(30) | 用户全名 | false | true | false | - |'
- en: '| username | `string` | varchar(30) | User’s Unique Name | false | false |
    true | - |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| username | `string` | varchar(30) | 用户的唯一名称 | false | false | true | - |'
- en: '| `password` | `string` | varchar(100) | User’s hashed Password | false | false
    | false | - |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `password` | `string` | varchar(100) | 用户加密密码 | false | false | false | -
    |'
- en: '| `role_id` | `uuid` | uuid | User’s role id | false | false | false | Role
    Table (role_id) |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `role_id` | `uuid` | uuid | 用户的角色id | false | false | false | 角色表 (role_id)
    |'
- en: '| `created_at` | `date` | timestamp | User’s Creation Time | false | false
    | false | - |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `created_at` | `date` | timestamp | 用户创建时间 | false | false | false | - |'
- en: '| `updated_at` | `date` | timestamp | User’s Data Updation Time | false | true
    | false | - |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `updated_at` | `date` | timestamp | 用户数据更新时间 | false | true | false | - |'
- en: '**Table 4.1:** User Table'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**表4.1:** 用户表'
- en: '[Role Schema Table](toc.xhtml#s115a)'
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[角色架构表](toc.xhtml#s115a)'
- en: User access to the application is determined by the assigned role and the permissions
    granted to that role. Users are allowed to perform specific actions within the
    application based on the rights associated with their assigned role. We have defined
    the role schema table for applications with constraints as follows.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 用户访问应用程序的权限由分配的角色和授予该角色的权限决定。用户可以根据其分配的角色所关联的权限在应用程序内执行特定的操作。我们已定义具有以下约束的应用程序角色模式表。
- en: '| **Column Name** | **Type** | **Data Type** | **Description** | **Primary?**
    | **Is Null** | **Unique** |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| **列名** | **类型** | **数据类型** | **描述** | **主键？** | **是否为空** | **唯一** |'
- en: '| `role_id` | `uuid` | uuid | Role’s unique identifier id | true | false |
    true |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `role_id` | `uuid` | uuid | 角色的唯一标识符id | 是 | 否 | 是 |  |'
- en: '| `name` | `email` | varchar(60) | Role’s name | false | false | true |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `name` | `email` | varchar(60) | 角色名称 | 否 | 否 | 是 |  |'
- en: '| `description` | `string` | varchar(30) | Role’s description | false | true
    | false |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `description` | `string` | varchar(30) | 角色描述 | 否 | 是 | 否 |  |'
- en: '| `rights` | `string` | text | Rights as permission of diff modules | false
    | false | false |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `rights` | `string` | text | 不同模块的权限 | 否 | 否 | 否 |  |'
- en: '| `created_at` | `date` | timestamp | Role Creation Time | false | false |
    false |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `created_at` | `date` | 时间戳 | 角色创建时间 | 否 | 否 | 否 |  |'
- en: '| `updated_at` | `date` | timestamp | Role’s Data Updation Time | false | true
    | false |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `updated_at` | `date` | 时间戳 | 角色数据更新时间 | 否 | 是 | 否 |  |'
- en: '**Table 4.2:** Role Table'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**表4.2：角色表**'
- en: '[Project Schema Table](toc.xhtml#s116a)'
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[项目模式表](toc.xhtml#s116a)'
- en: 'In a Project Management System (PMS), the project table serves as a central
    repository for storing information about different projects managed within the
    system. Each row in the project table represents a specific project, while each
    column stores various attributes or details related to those projects. We defined
    the schema for that as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目管理系统（PMS）中，项目表作为存储系统内管理不同项目信息的中心仓库。项目表中的每一行代表一个特定的项目，而每一列存储与这些项目相关的各种属性或细节。我们已定义如下模式：
- en: '| **Column Name** | **Type** | **Data Type** | **Description** | **Primary?**
    | **Is Null** | **Unique** | **Reference** |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| **列名** | **类型** | **数据类型** | **描述** | **主键？** | **是否为空** | **唯一** | **引用**
    |'
- en: '| `project_id` | `uuid` | integer | Project’s unique identifier id | true |
    false | true | - |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `project_id` | `uuid` | integer | 项目的唯一标识符id | 是 | 否 | 是 | - |'
- en: '| `name` | `string` | varchar(60) | Project’s Name | false | false | true |
    - |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `name` | `string` | varchar(60) | 项目名称 | 否 | 否 | 是 | - |'
- en: '| `description` | `string` | varchar(200) | Project’s Description | false |
    true | false | - |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `description` | `string` | varchar(200) | 项目描述 | 否 | 是 | 否 | - |'
- en: '| `user_ids` | `string` | text | Project’s assigned users_ids | false | true
    | false | User Table (user_id) |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `user_ids` | `string` | text | 项目分配的用户_ids | 否 | 是 | 否 | 用户表（user_id） |'
- en: '| `start_time` | `date` | timestamp | Project’s Start Date | false | true |
    false | - |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `start_time` | `date` | 时间戳 | 项目开始日期 | 否 | 是 | 否 | - |'
- en: '| `end_time` | `date` | timestamp | Project’s End Date | false | true | false
    | - |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| `end_time` | `date` | 时间戳 | 项目结束日期 | 否 | 是 | 否 | - |'
- en: '| `status` | `enum` | varchar(30) | Current Project Status | false | false
    | false | - |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| `status` | `enum` | varchar(30) | 当前项目状态 | 否 | 否 | 否 | - |'
- en: '| `created_at` | `date` | timestamp | User Creation Time | false | false |
    false | - |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| `created_at` | `date` | 时间戳 | 用户创建时间 | 否 | 否 | 否 | - |'
- en: '| `updated_at` | `date` | timestamp | User Data Updation Time | false | true
    | false |  |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| `updated_at` | `date` | 时间戳 | 用户数据更新时间 | 否 | 是 | 否 |  |'
- en: '**Table 4.3:** Project Table'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**表4.3：项目表**'
- en: '[Task Schema Table](toc.xhtml#s117a)'
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[任务模式表](toc.xhtml#s117a)'
- en: 'The task table is designed to store information about various tasks or activities
    associated with a specific project. Each row in the task table represents a specific
    task, while each column holds different attributes or details related to those
    tasks as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 任务表旨在存储与特定项目相关的各种任务或活动的信息。任务表中的每一行代表一个特定的任务，而每一列则持有与这些任务相关的不同属性或细节，如下所示：
- en: '| **Column Name** | **Type** | **Data Type** | **Description** | **Primary?**
    | **Is Null** | **Unique** | **Reference** |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| **列名** | **类型** | **数据类型** | **描述** | **主键？** | **是否为空** | **唯一** | **引用**
    |'
- en: '| `task_id` | `uuid` | uuid | Task’s unique identifier id | true | false |
    true | - |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| `task_id` | `uuid` | uuid | 任务的唯一标识符id | 是 | 否 | 是 | - |'
- en: '| `name` | `string` | varchar(60) | Task’s Name | false | false | true | -
    |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| `name` | `string` | varchar(60) | 任务名称 | 否 | 否 | 是 | - |'
- en: '| `description` | `string` | varchar(300) | Task’s Description | false | true
    | false | - |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| `description` | `string` | varchar(300) | 任务描述 | 否 | 是 | 否 | - |'
- en: '| `project_id` | `uuid` | varchar(35) | Associated Project Id | false | true
    | false | Project Table (project_id) |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| `project_id` | `uuid` | varchar(35) | 关联的项目ID | false | true | false | 项目表
    (project_id) |'
- en: '| `user_id` | `uuid` | uuid | Assigned User Id | false | true | false | User
    Table (user_id) |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| `user_id` | `uuid` | uuid | 分配的用户ID | false | true | false | 用户表 (user_id)
    |'
- en: '| `estimated_start_time` | `date` | timestamp | Task’s Estimated Start Date
    | false | true | false | - |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| `estimated_start_time` | `date` | 时间戳 | 任务的预计开始日期 | false | true | false
    | - |'
- en: '| `estimated_end_time` | `date` | timestamp | Task’s Estimated End Date | false
    | true | false | - |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `estimated_end_time` | `date` | 时间戳 | 任务的预计结束日期 | false | true | false |
    - |'
- en: '| `actual_start_time` | `date` | timestamp | Task’s Actual Start Date | false
    | true | false | - |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `actual_start_time` | `date` | 时间戳 | 任务的实际开始日期 | false | true | false | -
    |'
- en: '| `actual_end_time` | `date` | timestamp | Task’s Actual End Date | false |
    true | false | - |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `actual_end_time` | `date` | 时间戳 | 任务的实际结束日期 | false | true | false | - |'
- en: '| `priority` | `enum` | varchar(20) | Task’s priority e.g., High, Low, Medium
    | false | true | false | - |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `priority` | `enum` | varchar(20) | 任务的优先级，例如，高、低、中 | false | true | false
    | - |'
- en: '| `status` | `enum` | varchar(30) | Current Task Status | false | false | false
    | - |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `status` | `enum` | varchar(30) | 当前任务状态 | false | false | false | - |'
- en: '| `supported_files` | `string` | text | Supported Files url | false | true
    | false | - |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `supported_files` | `string` | 文本 | 支持的文件URL | false | true | false | - |'
- en: '| `created_at` | `date` | timestamp | Task’s Creation Time | false | false
    | false | - |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `created_at` | `date` | 时间戳 | 任务的创建时间 | false | false | false | - |'
- en: '| `updated_at` | `date` | timestamp | Task’s Data Updation Time | false | true
    | false | - |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `updated_at` | `date` | 时间戳 | 任务的更新时间 | false | true | false | - |'
- en: '**Table 4.4:** Task Table'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**表4.4:** 任务表'
- en: '[Comment Schema Table](toc.xhtml#s118a)'
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[评论架构表](toc.xhtml#s118a)'
- en: The comment table is designed to store comments or notes associated with various
    tasks. Each row in the comment table represents a specific comment related to
    a particular task, while each column holds different attributes or details related
    to those comments as follows.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 评论表的设计是为了存储与各种任务相关的评论或笔记。评论表中的每一行代表与特定任务相关的特定评论，而每一列则持有与这些评论相关的不同属性或细节，如下所示。
- en: '| **Column Name** | **Type** | **Data Type** | **Description** | **Primary?**
    | **Is Null** | **Unique** | **Reference** |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| **列名** | **类型** | **数据类型** | **描述** | **主键？** | **是否为空** | **唯一** | **引用**
    |'
- en: '| `comment_id` | `uuid` | uuid | Comment’s unique identifier id | true | false
    | true | - |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| `comment_id` | `uuid` | uuid | 评论的唯一标识符ID | true | false | true | - |'
- en: '| `comment` | `string` | varchar(300) | Comment | false | false | false | -
    |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| `comment` | `string` | varchar(300) | 评论 | false | false | false | - |'
- en: '| `task_id` | `uuid` | uuid | Task’s Id of given comment | false | false |
    false | Task Table (task_id) |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| `task_id` | `uuid` | uuid | 给定评论的任务ID | false | false | false | 任务表 (task_id)
    |'
- en: '| `user_id` | `uuid` | uuid | User’s Id on given comment | false | false |
    false | User Table (user_id) |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| `user_id` | `uuid` | uuid | 给定评论的用户ID | false | false | false | 用户表 (user_id)
    |'
- en: '| `supported_files` | `string` | text | attached file’s url | false | true
    | false | - |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| `supported_files` | `string` | 文本 | 附加文件的URL | false | true | false | - |'
- en: '| `created_at` | `date` | timestamp | Comment’s Creation Time | false | false
    | false | - |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| `created_at` | `date` | 时间戳 | 评论的创建时间 | false | false | false | - |'
- en: '| `updated_at` | `date` | timestamp | Comment’s Data Updation Time | false
    | true | false | - |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| `updated_at` | `date` | 时间戳 | 评论的更新时间 | false | true | false | - |'
- en: '**Table 4.5:** Comment Table'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**表4.5:** 评论表'
- en: This is the overview of PMS database design with raw schema tables. Now that
    we have the schema ready, we can head to start writing our project. We will first
    start by defining the project file structure.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这是PMS数据库设计的概述，包括原始的架构表。现在我们已经准备好了架构，我们可以开始编写我们的项目了。我们首先将定义项目文件结构。
- en: '![](img/4.2.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4.2.jpg)'
- en: '**Figure 4.2:** Entity Relationship Diagram'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4.2:** 实体关系图'
- en: '[Setting Up the Project Structure](toc.xhtml#s119a)'
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[设置项目结构](toc.xhtml#s119a)'
- en: The project structure is flexible and can be customized to suit the specific
    needs of your Node.js application, and we aim to minimize developers’ efforts
    by adhering to established standards throughout the development process.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 项目结构灵活，可以根据您的Node.js应用程序的具体需求进行定制，我们旨在通过在整个开发过程中遵循既定标准来最小化开发者的工作量。
- en: Let us start developing a PMS application in Node.js through the initialization
    project.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过初始化项目开始开发PMS应用程序。
- en: '[Init the project](toc.xhtml#s120a)'
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[初始化项目](toc.xhtml#s120a)'
- en: Before you begin, ensure that you have installed the LTS (Long Term Support)
    version of Node.js and PostgreSQL on your system.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保你已经安装了系统上的LTS（长期支持）版本的Node.js和PostgreSQL。
- en: '**PostgreSQL can be downloaded from [https://www.postgresql.org/download/](https://www.postgresql.org/download/).
    There are installers available for Linux, MacOs, Windows, BSD and Solaris. Since
    there are many flavors of Linux, the official website mentioned above also has
    separate instructions for each flavor.**'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**PostgreSQL可以从[https://www.postgresql.org/download/](https://www.postgresql.org/download/)下载。有适用于Linux、MacOs、Windows、BSD和Solaris的安装程序。由于Linux有多种版本，上述官方网站还提供了每种版本的单独说明。**'
- en: The directory name for the project can be kept as `**pms-be**`**.** `**pms**`
    stands for Project Management System and `**-be**` can be appended because we
    are creating an API backend of the app. Let us create a new directory ``**`pms-be`**``
    and navigate to it using the command prompt (`**cmd**`). Inside the directory,
    initiate a new Node.js project by running the command `**"npm init**`.`**"**`
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 项目目录名可以保持为 `**pms-be**`**.** `**pms**` 代表项目管理系统，而 `**-be**` 可以添加，因为我们正在创建应用程序的API后端。让我们创建一个新的目录
    `**`pms-be`**`` 并使用命令提示符 (`**cmd**`) 切换到它。在目录内，通过运行命令 `**"npm init**`.`**"**`
    初始化一个新的Node.js项目。
- en: 'Once `**"npm init"**` is executed, the setup process will prompt you to provide
    various details step by step. You can add the appropriate information and press
    `**"Enter"**` for each prompt:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行 `**"npm init"**`，设置过程将逐步提示你提供各种详细信息。你可以添加适当的信息，并按每个提示按 `**"Enter"**`。
- en: '`Package Name: (Default is **"**pms-be**"**)`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`包名: (默认为 **"**pms-be**"**)`'
- en: '`Version: (Default is **"**1.0.0**"**)`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`版本: (默认为 **"**1.0.0**"**)`'
- en: '`Description: **"**Project Management System**"**`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`描述: **"**项目管理系统**"**`'
- en: '`Entry Point: (Default is **"**index.js**"**) You can change it to **"**main.js**"**
    if needed.`'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`入口点: (默认为 **"**index.js**"**) 如果需要，你可以将其更改为 **"**main.js**"**。`'
- en: '`Test Command: If you don''t have a specific test command, you can leave this
    field blank.`'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`测试命令: 如果你没有特定的测试命令，你可以留空此字段。`'
- en: '`Git Repository: If your project is not using Git, leave this field blank.`'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Git仓库: 如果你的项目不使用Git，请留空此字段。`'
- en: '`Keywords: Add relevant keywords separated by commas.`'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`关键词: 添加相关的关键词，用逗号分隔。`'
- en: '`Author: Add the name of the project''s author.`'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`作者: 添加项目的作者姓名。`'
- en: '`License: (Default is **"**ISC**"**) You can choose a different license or
    keep it as **"**ISC.**"**`'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`许可证: (默认为 **"**ISC**"**) 你可以选择不同的许可证或保持为 **"**ISC.**"**`'
- en: '`Press **"**Enter**"** once more to complete the initialization process.`'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`再按一次 **"**Enter**"** 完成初始化过程。`'
- en: With this, your project’s initialization process will be successfully completed
    and the `**package.json**` file will be created.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，你的项目初始化过程将成功完成，并将创建 `**package.json**` 文件。
- en: '![](img/4.3.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片4.3](img/4.3.jpg)'
- en: '**Figure 4.3:** Init Project'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**图4.3:** 初始化项目'
- en: '[Installation of Project Dependency](toc.xhtml#s121a)'
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[项目依赖安装](toc.xhtml#s121a)'
- en: Once the project is initialized, the next step involves installing the necessary
    packages and tools as dependencies. We highly recommend using Visual Studio Code
    as the development tool because it offers various extensions, such as intellisense
    for programming languages, code prettier, and git packages, which significantly
    streamline the development process. These extensions help save a considerable
    amount of effort for developers, making the development experience more efficient
    and enjoyable.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目初始化完成，下一步就是安装必要的包和工具作为依赖项。我们强烈推荐使用Visual Studio Code作为开发工具，因为它提供了各种扩展，例如编程语言的intellisense、代码格式化工具和git包，这些扩展大大简化了开发过程。这些扩展帮助开发者节省大量精力，使开发体验更加高效和愉快。
- en: Now let us start to install the most required packages for project management
    system development such as `**express.js**`, `**postgresql(pg)**`, `**typescript**`,
    `**typeorm**`, `**ts-node**`, `**ts-lint**`, and so on, and later on we will install
    other packages as required while development.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始安装项目管理系统开发所需的最基本包，例如 `**express.js**`、`**postgresql(pg)**`、`**typescript**`、`**typeorm**`、`**ts-node**`、`**ts-lint**`
    等，在开发过程中，我们还将根据需要安装其他包。
- en: '`npm install express  --save`'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install express  --save`'
- en: '`npm install typescript -D`'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install typescript -D`'
- en: '`npm install pg --save`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install pg --save`'
- en: '`npm install typeorm --save`'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install typeorm --save`'
- en: '`npm install @types/express -D`'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install @types/express -D`'
- en: '`npm install @types/node -D`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install @types/node -D`'
- en: '`npm install @types/pg -D`'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install @types/pg -D`'
- en: '`npm install reflect-metadata --save`'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install reflect-metadata --save`'
- en: '`npm install uuid --save`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install uuid --save`'
- en: '`npm install @types/uuid -D`'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install @types/uuid -D`'
- en: '`npm install ts-node prettier eslint eslint-config-prettier eslint-plugin`'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install ts-node prettier eslint eslint-config-prettier eslint-plugin`'
- en: '`-prettier -D`'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`-prettier -D`'
- en: '`npm install @typescript-eslint/eslint-plugin @typescript-eslint/parser -D`'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install @typescript-eslint/eslint-plugin @typescript-eslint/parser -D`'
- en: Here, we share the `**package.json**` file for reference to install all packages
    and it will also change day by day through development.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们分享`**package.json**`文件以供参考，用于安装所有包，并且它将随着开发过程而不断变化。
- en: '`// package.json`'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`// package.json`'
- en: '`{`'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`"name": "pms-be",`'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`"name": "pms-be",`'
- en: '`"version": "1.0.0",`'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`"version": "1.0.0",`'
- en: '`"description": "Project Management System",`'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`"description": "项目管理系统",`'
- en: '`"main": "main.js",`'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`"main": "main.js",`'
- en: '`"scripts": {`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`"scripts": {`'
- en: '`"test": "echo \"Error: no test specified\" && exit 1",`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`"test": "echo \"Error: no test specified\" && exit 1",`'
- en: '`"start": "nodemon dist/src/main.js"`'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`"start": "nodemon dist/src/main.js"`'
- en: '`},`'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`},`'
- en: '`"author": "Ravi Kumar Gupta, Yamini Panchal",`'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`"author": "Ravi Kumar Gupta, Yamini Panchal",`'
- en: '`"license": "Proprietary",`'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`"license": "Proprietary",`'
- en: '`"devDependencies": {`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`"devDependencies": {`'
- en: '`"@types/express": "4.17.17",`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`"@types/express": "4.17.17",`'
- en: '`"@types/node": "20.4.2",`'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`"@types/node": "20.4.2",`'
- en: '`"@types/pg": "8.10.2",`'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`"@types/pg": "8.10.2",`'
- en: '`"@types/uuid": "9.0.2",`'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`"@types/uuid": "9.0.2",`'
- en: '`"@typescript-eslint/eslint-plugin": "5.59.8",`'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`"@typescript-eslint/eslint-plugin": "5.59.8",`'
- en: '`"@typescript-eslint/parser": "5.59.8",`'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`"@typescript-eslint/parser": "5.59.8",`'
- en: '`"eslint": "8.41.0",`'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`"eslint": "8.41.0",`'
- en: '`"eslint-config-prettier": "8.8.0",`'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`"eslint-config-prettier": "8.8.0",`'
- en: '`"eslint-plugin-prettier": "4.2.1",`'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`"eslint-plugin-prettier": "4.2.1",`'
- en: '`"nodemon": "2.0.22",`'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`"nodemon": "2.0.22",`'
- en: '`"prettier": "2.8.8",`'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`"prettier": "2.8.8",`'
- en: '`"ts-node": "10.9.1",`'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`"ts-node": "10.9.1",`'
- en: '`"typescript": "5.0.4"`'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`"typescript": "5.0.4"`'
- en: '`},`'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`},`'
- en: '`"dependencies": {`'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`"dependencies": {`'
- en: '`"express": "4.18.2",`'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`"express": "4.18.2",`'
- en: '`"pg": "8.11.1",`'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`"pg": "8.11.1",`'
- en: '`"reflect-metadata": "0.1.13",`'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`"reflect-metadata": "0.1.13",`'
- en: '`"typeorm": "0.3.17",`'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`"typeorm": "0.3.17",`'
- en: '`"uuid": "9.0.0"`'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`"uuid": "9.0.0"`'
- en: '`}`'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: 'Next, create a `**tsconfig.json**` file in the main directory of the project
    with the following code to ensure TypeScript compiles the code:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在项目主目录中创建一个`**tsconfig.json**`文件，并使用以下代码以确保TypeScript能够编译代码：
- en: '`// tsconfig.json`'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`// tsconfig.json`'
- en: '[PRE0][PRE1][PRE2][PRE3][PRE4] [PRE5]`    `npm install`    [PRE6] [PRE7]` [PRE8]`    `tsc
    --watch`    [PRE9] [PRE10]` [PRE11]`    `nodemon dist/src/main.js`    [PRE12]
    [PRE13]` [PRE14]`    `node src/main.js`    [PRE15] [PRE16][PRE17][PRE18]``js[PRE19]js
    `import cluster from ''cluster'';`    `import os from ''os'';`    `const numCPUs
    = os.cpus().length;`    `import { ExpressServer } from ''./express_server'';`    `if
    (cluster.isPrimary) {`    ``console.log(`Master process PID: ${process.pid}`);``    `for
    (let i = 0; i < numCPUs; i++) {`    `cluster.fork();`    `}`    `cluster.on(''exit'',
    (worker, code, signal) => {`    ``console.log(`Worker process ${worker.process.pid}
    exited with code ${code} and signal ${signal}`);``    `setTimeout(() => {`    `cluster.fork();`    `},
    1000);`    `});`    `} else {`    `// connect the express server`    `const server
    = new ExpressServer();`   [PRE20] `process.on(''uncaughtException'', (error: Error)
    => {`    ``console.error(`Uncaught exception in worker process``    ``${process.pid}:`,
    error);``    `// Close any open connections or resources`    `server.closeServer();`    `setTimeout(()
    => {`    `cluster.fork();`    `cluster.worker?.disconnect();`    `}, 1000);`    `});`    `//
    Gracefully handle termination signals`    `process.on(''SIGINT'', () => {`    `console.log(''Received
    SIGINT signal'');`    `// Close any open connections or resources`    `server.closeServer();`    `});`    `process.on(''SIGTERM'',
    () => {`    `console.log(''Received SIGTERM signal'');`    `// Close any open
    connections or resources`    `server.closeServer();`    `});`    `}`    As per
    the preceding code, we need to create `**express_server.ts**` as it is imported.
    So let us make it.    `// express_server.ts`   [PRE21][PRE22]``js[PRE23]`` `export
    interface IServerConfig {`    `port: number;`    `db_config: {`    `''db'': string;`    `''username'':
    string;`    `''password'': string;`    `''host'': string;`    `''port'': number;`    `''dbname'':
    string;`    `};`    `}`    Now to run the app, first compile the code with `**tsc
    --watch**`. After that, a `**dist**` folder will be created, and then run with
    `**nodemon**` `**dist/src/main.js**` while developing the app, the following output
    will be displayed.    Output :  ![](img/4.4.jpg)  **Figure 4.4:** Output Run Application    **Note**:
    *If you are using Visual Studio Code, you can configure and run the TypeScript
    watch task easily. To do this, press* `**"*Ctrl + P*"**`*, then select* `**"*Tasks:
    Run Task*"**` *and configure a task with* `***TypeScript***`*. Choose* `**"*tsc:watch
    -tsconfig.json*"**` *to enable watch mode for TypeScript compilation based on
    your* `***tsconfig.json***` *file.*    # [Connecting the Database](toc.xhtml#s125a)    TypeORM
    is widely used in modern TypeScript and JavaScript applications for its ease of
    use, flexibility, and abstraction of database operations. It simplifies the development
    process and improves maintainability when working with databases in Node.js. We
    already installed packages for `**postgreSQL**` and `**typeorm**`, respectively,
    using the following commands: `**npm i pg --save**`**,** `**npm i @types/pg -D**`
    and `**npm i typeorm -- save**`.    Now creates `**db.ts**` file in utils directory
    with the following code:    `// db.ts`    `import { DataSource } from ''typeorm'';`    `import
    { IServerConfig } from ''./config'';`    `import * as config from ''../../server_config.json'';`    `export
    class DatabaseUtil {`    `public server_config: IServerConfig = config;`    `constructor()
    {`    `this.connectDatabase();`    `}`    `private connectDatabase() {`    `try
    {`    `const db_config = this.server_config.db_config;`    `const AppDataSource
    = new DataSource({`    `type: ''postgres'',`    `host: db_config.host,`    `port:
    db_config.port,`    `username: db_config.username,`    `password: db_config.password,`    `database:
    db_config.dbname,`    `entities: [],`    `synchronize: true,`    `logging: false,`    `});`    `AppDataSource.initialize()`    `.then(()
    => {`    `console.log(''Connected to the database'');`    `})`    `.catch((error)
    => console.log(error));`    `} catch (error) {`    `console.error(''Error connecting
    to the database:'', error);`    `}`    `}`    `}`    For now, we have entities
    as blank arrays since we do not have any entities defined. Then import the database
    connection in `**main.ts**` with the updated following code:    `// main.ts`    `import
    cluster from ''cluster'';`    `import { ExpressServer } from ''./express_server'';`    `import
    { DatabaseUtil } from ''./utils/db'';`   [PRE24]`` `// connect the express server`    `const
    server = new ExpressServer();`    `// connect the database`    `new DatabaseUtil();`    `process.on(''uncaughtException'',
    (error: Error) => {`    ``console.error(`Uncaught exception in worker process
    ${process.pid}:`, error);``    `// Close any open connections or resources`    `server.closeServer();`    `setTimeout(()
    => {`    `cluster.fork();`    `cluster.worker?.disconnect();`    `}, 1000);`    `});`    `//
    Gracefully handle termination signals`    `process.on(''SIGINT'', () => {`    `console.log(''Received
    SIGINT signal'');`    `// Close any open connections or resources`    `server.closeServer();`    `});`    `process.on(''SIGTERM'',
    () => {`    `console.log(''Received SIGTERM signal'');`    `// Close any open
    connections or resources`    `server.closeServer();`    `});`    After running,
    the following output will be displayed on a successfully connected database.    Output:  ![](img/4.5.jpg)  **Figure
    4.5:** Database Connected Output    This way using typeorm postgreSQL database
    connected based on the database config defined in `**server_config.json**`.    #
    [Database Models (Entities)](toc.xhtml#s126a)    We have already seen database
    schema tables . To integrate the database schema into the code, we will create
    a components directory and subdirectories for roles, users, projects, tasks, and
    comments. In each of these directories, we will create a corresponding entity
    file.    `components`    `├── roles`    `│   └── roles_entity.ts`    `├── users`    `│  
    └── users_entity.ts`    `├── projects`    `│   └── projects_entity.ts`    `├──
    tasks`    `│   └── tasks_entity.ts`    `└── comments`    `└── comments_entity.ts`    We
    will start by defining the Roles entity:    # [Role Entity](toc.xhtml#s127a)    Create
    file `**role_entity.ts**` in role directory with the following code.    `// role_entity.ts`   [PRE25]`
    `import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn,`    `UpdateDateColumn
    } from ''typeorm'';`    `@Entity()`    `export class Roles {`    `@PrimaryGeneratedColumn(''uuid'')`    `role_id:
    string;`    `@Column({ length: 60, nullable: false, unique: true })`    `name:
    string;`    `@Column({ length: 200 })`    `description: string;`    `@Column({
    type: ''text'' })`    `rights: string;`    `@CreateDateColumn()`    `created_at:
    Date;`    `@UpdateDateColumn()`    `updated_at: Date;`    `}`    The code imports
    necessary decorators from TypeORM. These decorators are used to define the entity
    and its properties.    The `**@Entity()**` decorator marks the class `Roles` as
    a TypeORM entity, indicating that it represents a database table. It has the `**role_id**`
    as the primary key decorated with `**PrimaryGeneratedColumn**` with an auto-generated
    `UUID`, and the `name` field is defined as `unique` and `not` `nullable`.    The
    `**description**` field has a maximum length of 200 characters. The `**rights**`
    field uses the `**text**` data type to store larger textual data. The `**@CreateDateColumn()**`
    and `**@UpdateDateColumn()**` decorators handle the automatic insertion of data
    for respective insertion and updation time.    # [User Entity](toc.xhtml#s128a)    The
    Users entity represents the user information in the application’s database. Create
    `users_entity.ts` with the following code:    `// user_entity.ts`   [PRE26] `import
    { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn,`    `UpdateDateColumn,
    OneToOne, JoinColumn } from ''typeorm'';`    `import { Roles } from ''../roles/roles_entity'';`    `@Entity()`    `export
    class Users {`    `@PrimaryGeneratedColumn(''uuid'')`    `user_id: string;`    `@Column({
    length: 50, nullable: true })`    `fullname: string;`    `@Column({ length: 30,
    nullable: false, unique: true })`    `username: string;`    `@Column({ length:
    60, nullable: false, unique: true })`    `email: string;`    `@Column({ nullable:
    false })`    `password: string;`    `@Column({ nullable: false })`    `@ManyToOne(()
    => Roles)`    `@JoinColumn({ name: ''role_id'' })`    `role_id: Roles[''role_id''];`    `@CreateDateColumn()`    `created_at:
    Date;`    `@UpdateDateColumn()`    `updated_at: Date;`    `}`    As per user-defined
    entity, `**user_id**` serves as the primary key with auto-generated `**uuid**`,
    `**username**` and `**email**` will be unique with not-null constraints, `**fullname**`
    allows maximum 50 characters, and `**password**` also has a not-null constraints.    In
    this context, each user is linked with one role, establishing a many-to-one relationship
    between them, so there is many-to-one join established between two tables users
    and roles.    `**@ManyToOne(() => Roles)**`: This decorator specifies a many-to-one
    relationship between entities. It indicates that the current entity (likely representing
    a user or some other entity) has a many-to-one relationship with the Roles entity.
    The Roles entity is specified using a function that returns the target entity
    class.    `**@JoinColumn({ name: ''role_id**'' **})**`: This decorator specifies
    the column in the current entity that serves as the foreign key to establish the
    relationship. In this case, the `**role_id**` column is used as the foreign key.    `**role_id:
    Roles[''role_id**''**]**`: This line defines a TypeScript property `**role_id**`
    of type `**Roles[''role_id**''**]**`. It’s likely that Roles is an entity class
    representing roles in your application, and `**role_id**` is a property of that
    class representing the primary key or unique identifier of a role.    This is
    a basic overview of a many-to-one relationship.    # [Project Entity](toc.xhtml#s129a)    Now
    create a file `**projects_entity.ts**` with the following code:    `// projects_entity.ts`   [PRE27]`js
    [PRE28]js`` [PRE29]js[PRE30][PRE31][PRE32][PRE33]js[PRE34]js` [PRE35]`js`` [PRE36]`js[PRE37][PRE38][PRE39]'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
