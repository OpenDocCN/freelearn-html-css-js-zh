["```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath \"org.springframework.boot:spring-boot-gradle-plugin:1.4.4.RELEASE\"\n        classpath \"io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE\"\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\napply plugin: 'io.spring.dependency-management'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencyManagement {\n    imports {\n        mavenBom 'org.springframework.cloud:spring-cloud-netflix:1.4.4.RELEASE'\n    }\n}\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.4.4.RELEASE'\n    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-zuul'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\npackage com.packtpub.microservices.ch02.edgeproxy;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.zuul.EnableZuulProxy;\n\n@EnableZuulProxy\n@SpringBootApplication\npublic class EdgeProxyApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(EdgeProxyApplication.class, args);\n    }\n}\n```", "```js\nzuul:\n routes:\n  signup:\n   path: /signup\n   url: http://monolith.pichat-int.me\n  auth:\n   path: /auth/login\n   url: http://monolith.pichat-int.me\n```", "```js\nPOST / # Creates an attachment\nGET / # Fetch attachments, can filter by message_id\nDELETE /:attachment_id # Deletes the specified attachment\nGET /:id # Get the specific attachment\n```", "```js\nzuul:\n routes:\n  signup:\n   path: /signup\n   url: http://monolith.pichat-int.me\n  auth:\n   path: /auth/login\n   url: http://monolith.pichat-int.me\n  attachments:\n   path: /attachments/**\n   url: http://attachment-service.pichat-int.me\n```", "```js\n$ curl -D - http://localhost:8080/attachments/foo\nHTTP/1.1 500\nX-Application-Context: application\nContent-Type: application/json;charset=UTF-8\nTransfer-Encoding: chunked\nDate: Tue, 27 Mar 2018 12:52:21 GMT\nConnection: close\n\n{\"timestamp\":1522155141889,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"com.netflix.zuul.exception.ZuulException\",\"message\":\"attachment-service.pichat-int.me\"}%\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath \"org.springframework.boot:spring-boot-gradle-plugin:1.4.4.RELEASE\"\n        classpath \"io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE\"\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\napply plugin: 'io.spring.dependency-management'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencyManagement {\n    imports {\n        mavenBom 'org.springframework.cloud:spring-cloud-netflix:1.4.4.RELEASE'\n    }\n}\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.4.4.RELEASE'\n    compile group: 'org.springframework.cloud', name: 'spring-cloud-netflix-sidecar', version: '1.4.4.RELEASE'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\npackage com.packtpub.microservices;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.cloud.netflix.sidecar.EnableSidecar;\nimport org.springframework.stereotype.Controller;\n\n@EnableSidecar\n@Controller\n@EnableAutoConfiguration\npublic class SidecarController {\n    public static void main(String[] args) {\n        SpringApplication.run(SidecarController.class, args);\n    }\n}\n```", "```js\nserver:\n port: 5678\n\nsidecar:\n port: 3000\n health-uri: http://localhost:3000/health\n```", "```js\nGET /message_details/:message_id\n```", "```js\n{\n  \"message_details\": {\n    \"message\": {\n      \"id\": 1234,\n      \"body\": \"Hi There!\",\n      \"from_user_id\": \"user:4321\"\n    },\n    \"attachments\": [{\n      \"id\": 4543,\n      \"media_type\": 1,\n      \"url\": \"http://...\"\n    }],\n    \"from_user\": {\n      \"username\": \"paulosman\",\n      \"profile_pic\": \"http://...\",\n      \"display_name\": \"Paul Osman\"\n    },\n    \"recipients\": [\n      ...\n    ],\n    \"likes\": 200,\n    \"comments\": [{\n      \"id\": 943,\n      \"body\": \"cool pic\",\n      \"user\": {\n        \"username\": \"somebody\",\n        \"profile_pic\": \"http://...\"\n      }\n    }]\n  }\n}\n```", "```js\nplugins {\n    id 'org.springframework.boot' version '1.5.9.RELEASE'\n}\n\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\napply plugin: 'java'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.5.9.RELEASE'\n    compile group: 'com.netflix.hystrix', name: 'hystrix-core', version: '1.0.2'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\npackage com.packtpub.microservices.gateway.models;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n@JsonIgnoreProperties(ignoreUnknown = false)\npublic class Message {\n\n    private String id;\n    private String body;\n\n    @JsonProperty(\"from_user_id\")\n    private String fromUserId;\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getBody() {\n        return body;\n    }\n\n    public void setBody(String body) {\n        this.body = body;\n    }\n\n    public String getFromUserId() {\n        return fromUserId;\n    }\n\n    public void setFromUserId(String fromUserId) {\n        this.fromUserId = fromUserId;\n    }\n}\n```", "```js\npackage com.packtpub.microservices.gateway.commands;\n\nimport com.netflix.hystrix.HystrixCommand;\nimport com.netflix.hystrix.HystrixCommandGroupKey;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.client.RestTemplate;\n\npublic class AttachmentCommand extends HystrixCommand<String> {\n    private String messageId;\n\n    public AttachmentCommand(String messageId) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"AttachmentCommand\"));\n        this.messageId = messageId;\n    }\n\n    @Override\n    public String run() {\n        RestTemplate template = new RestTemplate();\n        String attachmentsUrl = \"http://localhost:4567/message/\" + messageId + \"/attachments\";\n        ResponseEntity<String> response = template.getForEntity(attachmentsUrl, String.class);\n        return response.getBody();\n    }\n}\n```", "```js\npackage com.packtpub.microservices.commands;\n\nimport com.netflix.hystrix.HystrixCommand;\nimport com.netflix.hystrix.HystrixCommandGroupKey;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.client.RestTemplate;\n\npublic class CommentCommand extends HystrixCommand<String> {\n\n    private String messageId;\n\n    public CommentCommand(String messageId) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"CommentGroup\"));\n        this.messageId = messageId;\n    }\n\n    @Override\n    public String run() {\n        RestTemplate template = new RestTemplate();\n        String commentsUrl = \"http://localhost:4567/message/\" + messageId + \"/comments\";\n        ResponseEntity<String> response = template.getForEntity(commentsUrl, String.class);\n        return response.getBody();\n    }\n}\n```", "```js\npackage com.packtpub.microservices.commands;\n\nimport com.netflix.hystrix.HystrixCommand;\nimport com.netflix.hystrix.HystrixCommandGroupKey;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.client.RestTemplate;\n\npublic class LikeCommand extends HystrixCommand<String> {\n\n    private String messageId;\n\n    public LikeCommand(String messageId) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"Likegroup\"));\n        this.messageId = messageId;\n    }\n\n    @Override\n    public String run() {\n        RestTemplate template = new RestTemplate();\n        String likesUrl = \"http://localhost:4567/message/\" + messageId + \"/likes\";\n        ResponseEntity<String> response = template.getForEntity(likesUrl, String.class);\n        return response.getBody();\n    }\n}\n```", "```js\npackage com.packtpub.microservices.commands;\n\nimport com.netflix.hystrix.HystrixCommand;\nimport com.netflix.hystrix.HystrixCommandGroupKey;\nimport com.packtpub.microservices.models.Message;\nimport org.springframework.web.client.RestTemplate;\n\npublic class MessageClient extends HystrixCommand<Message> {\n\n    private final String id;\n\n    public MessageClient(String id) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"MessageGroup\"));\n        this.id = id;\n    }\n\n    @Override\n    public Message run() {\n        RestTemplate template = new RestTemplate();\n        String messageServiceUrl = \"http://localhost:4567/message/\" + id;\n        Message message = template.getForObject(messageServiceUrl, Message.class);\n        return message;\n    }\n}\n```", "```js\npackage com.packtpub.microservices.commands;\n\nimport com.netflix.hystrix.HystrixCommand;\nimport com.netflix.hystrix.HystrixCommandGroupKey;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.client.RestTemplate;\n\npublic class UserCommand extends HystrixCommand<String> {\n\n    private String id;\n\n    public UserCommand(String id) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"UserGroup\"));\n        this.id = id;\n    }\n\n    @Override\n    public String run() {\n        RestTemplate template = new RestTemplate();\n        String userServiceUrl = \"http://localhost:4568/user/\" + id;\n        ResponseEntity<String> response = template.getForEntity(userServiceUrl, String.class);\n        return response.getBody();\n    }\n}\n```", "```js\npackage com.packtpub.microservices;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.packtpub.microservices.commands.*;\nimport com.packtpub.microservices.models.Message;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.http.MediaType;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.io.IOException;\nimport java.io.StringWriter;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\n\n@SpringBootApplication\n@RestController\npublic class MainController {\n\n    @RequestMapping(value = \"/message_details/{id}\", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\n    public Map<String, HashMap<String, String>> messageDetails(@PathVariable String id)\n            throws ExecutionException, InterruptedException, IOException {\n\n        Map<String, HashMap<String, String>> result = new HashMap<>();\n        HashMap<String, String> innerResult = new HashMap<>();\n\n        Message message = new MessageClient(id).run();\n        String messageId = message.getId();\n\n        Future<String> user = new UserClient(message.getFromUserId()).queue();\n        Future<String> attachments = new AttachmentClient(messageId).queue();\n        Future<String> likes = new LikeClient(messageId).queue();\n        Future<String> comments = new CommentClient(messageId).queue();\n\n        ObjectMapper mapper = new ObjectMapper();\n        StringWriter writer = new StringWriter();\n        mapper.writeValue(writer, message);\n\n        innerResult.put(\"message\", writer.toString());\n        innerResult.put(\"from_user\", user.get());\n        innerResult.put(\"attachments\", attachments.get());\n        innerResult.put(\"comments\", comments.get());\n        innerResult.put(\"likes\", likes.get());\n\n        result.put(\"message_details\", innerResult);\n\n        return result;\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(MainController.class, args);\n    }\n}\n```", "```js\n$ curl -H \"Content-Type: application/json\" http://localhost:8080/message_details/1234 \n```", "```js\nplugins {\n    id 'org.springframework.boot' version '1.5.9.RELEASE'\n}\n\ngroup 'com.packetpub.microservices'\nversion '1.0-SNAPSHOT'\n\napply plugin: 'java'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.5.9.RELEASE'\n    compile group: 'com.netflix.hystrix', name: 'hystrix-core', version: '1.0.2'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\npackage com.packtpub.microservices;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@EnableAutoConfiguration\n@RestController\npublic class MainController {\n    @RequestMapping(\"/message\")\n    public String message() {\n        return \"Hello, World!\";\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(MainController.class, args);\n    }\n}\n```", "```js\npackage com.packtpub.microservices;\n\nimport com.netflix.hystrix.HystrixCommand;\nimport com.netflix.hystrix.HystrixCommandGroupKey;\n\npublic class CommandHelloWorld extends HystrixCommand<String> {\n\n    private String name;\n\n    CommandHelloWorld(String name) {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n        this.name = name;\n    }\n\n    @Override\n    public String run() {\n        return \"Hello, \" + name + \"!\";\n    }\n}\n```", "```js\n@RequestMapping(\"/message\")\npublic String message() {\n    return new CommandHelloWorld(\"Paul\").execute();\n}\n```", "```js\npackage com.packtpub.microservices;\n\nimport com.netflix.hystrix.HystrixCommand;\nimport com.netflix.hystrix.HystrixCommandGroupKey;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.client.RestTemplate;\n\npublic class CommandHelloWorld extends HystrixCommand<String> {\n\n    CommandHelloWorld() {\n        super(HystrixCommandGroupKey.Factory.asKey(\"ExampleGroup\"));\n    }\n\n    @Override\n    public String run() {\n        RestTemplate restTemplate = new RestTemplate();\n        String messageResourceUrl = \"http://localhost:4567/\";\n        ResponseEntity<String> response = restTemplate.getForEntity(messageResourceUrl, String.class);\n        return response.getBody();\n    }\n\n    @Override\n    public String getFallback() {\n        return \"Hello, Fallback Message\";\n    }\n}\n```", "```js\npackage com.packetpub.microservices;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@EnableAutoConfiguration\n@RestController\npublic class MainController {\n\n    @RequestMapping(\"/message\")\n    public String message() {\n        return new CommandHelloWorld().execute();\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(MainController.class, args);\n    }\n}\n```", "```js\nrequire 'sinatra'\n\nget '/' do\n  \"Hello from Sinatra\"\nend\n```", "```js\nrequire 'sinatra'\n\nget '/' do\n  halt 503, 'Busy'\nend\n```", "```js\napt-get install nginx\n```", "```js\nlimit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;\nserver {\n    location /auth/signin {\n        limit_req zone=mylimit;\n        proxy_pass http://my_upstream;\n    }\n}\n```", "```js\n$ tar xvfz linkerd-1.3.4.tgz\n$ cd linkerd-1.3.4\n```", "```js\nlocalhost 8080\n```", "```js\n$ ./linkerd-1.3.4-exec config/linkerd.yaml\n```", "```js\n$ ./gradlew bootRun\n```", "```js\n$ curl -H \"Host: attachment-service\" http://localhost:4140/\n```"]