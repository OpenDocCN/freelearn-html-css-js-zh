["```js\n  Backbone.ExtraModel = Backbone.Model.extend({\n    // Add new method.\n    hello: function() {\n\n    },\n\n    // Override existing method.\n    toJSON: function() {\n\n    }\n  });\n```", "```js\n      var mixin = {\n        // Add new method.\n        hello: function() {\n\n        },\n\n        // Override existing method.\n        toJSON: function() {\n\n        }\n      }\n    ```", "```js\n      Backbone.NewModel = Backbone.Model.extend(mixin);\n    ```", "```js\n      Backbone.NewModel.mixin = mixin;\n    ```", "```js\n      _.extend(Backbone.Model.prototype, mixin);\n    ```", "```js\n      _.extend(Backbone.Model.prototype, mixin2);\n    ```", "```js\n{\n  \"$oid\": \"<id>\"\n}\n```", "```js\n    npm install -g grunt-init\n    ```", "```js\n    grunt-init-backbone-plugin npm install -g grunt-cli\n    ```", "```js\n    git clone --recursive https://github.com/dealancer/grunt-init-backbone-plugin.git ~/.grunt-init/backbone-plugin\n    ```", "```js\n     $ mkdir backbone-mongodb\n     $ cd backbone-mongodb\n\n    ```", "```js\n     $ grunt-init backbone-plugin\n\n    ```", "```js\n    // backbone-mongodb 0.1.0\n    //\n    // (c) 2013 Vadim Mirgorod\n    // Licensed under the MIT license.\n\n    (function(Backbone) {\n\n      // Define mixing that we will use in our extension.\n      var mixin = {\n\n        // Convert MongoDB Extended JSON into regular one.\n        parse: function(resp, options) {\n          if (_.isObject(resp._id))  {\n            resp[this.idAttribute] = resp._id.$oid;\n            delete resp._id;\n          }\n\n          return resp;\n        },\n\n        // Convert regular JSON into MongoDB extended one.\n        toExtendedJSON: function() {\n          var attrs = this.attributes;\n\n          var attrs = _.omit(attrs, this.idAttribute);\n          if (!_.isUndefined(this[this.idAttribute]))  {\n            attrs._id = { $oid: this[this.idAttribute] };\n          }\n\n          return attrs;\n        },\n\n        // Substitute toJSON method when performing synchronization.\n        sync: function() {\n          var toJSON = this.toJSON;\n          this.toJSON = this.toExtendedJSON;\n\n          var ret = Backbone.sync.apply(this, arguments);\n\n          this.toJSON = toJSON;\n\n          return ret;\n        }\n      }\n\n      // Create new MongoModel object.\n      Backbone.MongoModel = Backbone.Model.extend(mixin);\n\n      // Provide mixin to extend Backbone.Model.\n      Backbone.MongoModel.mixin = mixin;\n\n      // Another way to perform mixin.\n      //_.extend(Backbone.Model.prototype, mixin);\n\n    }).call(this, Backbone);\n    ```", "```js\n     $ git init\n     $ git remote add origin https://github.com/dealancer/backbone-mongo.git \n     $ git add *\n     $ git add .gitignore\n     $ git commit -m \"initial commit\"\n     $ git push -u origin master\n\n    ```", "```js\n      var Book = Backbone.MongoModel.extend({\n        urlRoot: '/books'\n      });\n\n      var Library = Backbone.Collection.extend({\n        url: '/books',\n        model: Book\n      });\n    ```", "```js\n      var library;\n\n      var attrs = {\n        id: 5,\n        title: \"The Tempest\",\n        author: \"Bill Shakespeare\",\n      };\n    ```", "```js\n      module('Backbone.Mongodb', _.extend(new Environment, {\n\n        setup : function() {\n\n          // Create new library.\n          library = new Library();\n\n          // Set init values.\n          library.create(attrs, {wait: false});\n        },\n\n        teardown: function() {\n\n        },\n      }));\n    ```", "```js\n      test(\"Export to MongoDB Extended JSON\", 2, function() {\n        var book = library.get(5);\n        ok(book);\n\n        var json = book.toJSON();\n        equal(json._id.$oid, 5);\n      });\n    ```", "```js\n    $ grunt\n\n    ```", "```js\n<!doctype html>\n<html>\n<head>\n  <meta charset='utf8'>\n  <title>Backbone Test Suite</title>\n  <link rel=\"stylesheet\"\n    href=\"../vendor/backbone/test/vendor/qunit.css\"\n    type=\"text/css\" media=\"screen\">\n  <script src=\"img/json2.js\">\n  </script>\n  <script src=\"img/jquery.js\">\n  </script>\n  <script src=\"img/qunit.js\">\n  </script>\n  <script src=\"img/underscore.js\">\n  </script>\n  <script src=\"img/backbone.js\"></script>\n  <script src=\"img/backbone-mongodb.js\"></script>\n  <script src=\"img/environment.js\">\n  </script>\n  <script src=\"img/noconflict.js\">\n  </script>\n  <script src=\"img/events.js\"></script>\n  <script src=\"img/model.js\"></script>\n  <script src=\"img/collection.js\">\n  </script>\n  <script src=\"img/router.js\"></script>\n  <script src=\"img/view.js\"></script>\n  <script src=\"img/sync.js\"></script>\n\n  <script src=\"img/mongodb.js\"></script>\n</head>\n<body>\n  <div id=\"qunit\"></div>\n  <div id=\"qunit-fixture\">\n    <div id=\"testElement\">\n      <h1>Test</h1>\n    </div>\n  </div>\n  <br>\n  <br>\n  <h1 id=\"qunit-header\">\n    <a href=\"#\">Backbone Speed Suite</a>\n  </h1>\n  <div id=\"jslitmus_container\" style=\"margin: 20px 10px;\">\n  </div>\n</body>\n</html>\n```", "```js\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    qunit: {\n      all: ['test/index.html']\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-qunit');\n\n  grunt.registerTask('default', ['qunit']);\n};\n```", "```js\n  <script src=\"img/jquery.mockjax.js\"></script>\n```", "```js\n          $.mockjax({\n            url: '/books',\n            responseTime: 10,\n            responseText: [\n              {_id: { \"$oid\": \"10\" }, one: 1},\n              {id: \"20\", one: 1}\n            ]\n          });\n\n          $.mockjax({\n            url: '/books/10',\n            responseTime: 10,\n            responseText: {_id: { \"$oid\": \"10\" }, one: 1}\n          });\n\n          $.mockjax({\n            url: '/books/20',\n            responseTime: 10,\n            responseText: {id: \"20\", one: 1}\n          });\n    ```", "```js\n          $.mockjaxClear();\n    ```", "```js\n      asyncTest(\"Read MongoDB Extended JSON\", 1, function() {\n        library.fetch();\n\n        setTimeout(function() {\n          ok(library.get('10'));\n          start();\n        }, 50);\n      });\n\n      asyncTest(\"Read regular JSON\", 1, function() {\n        library.fetch();\n\n        setTimeout(function() {\n          ok(library.get('20'));\n          start();\n        }, 50);\n      });\n    ```", "```js\ntest(\"Read MongoDB Extended JSON\", 1, function() {\n  // do not proceed on the next stop unless start() is called \n  stop();\n\n  library.fetch();\n\n  setTimeout(function() {\n    ok(library.get('10'));\n    start();\n  }, 50);\n});\n```", "```js\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    ```", "```js\n    <link rel=\"stylesheet\" href=\"lib/jquery.mobile/jquery.mobile-1.1.0.min.css\"/>\n    <link rel=\"stylesheet\" href=\"lib/ios_inspired/styles.css\"/>\n    <link rel=\"stylesheet\" href=\"css/styles.css\"/>\n    ```", "```js\n    $(document).bind(\"mobileinit\", function () {\n\n    });\n    ```", "```js\n      $.mobile.ajaxEnabled = false;\n      $.mobile.linkBindingEnabled = false;\n      $.mobile.hashListeningEnabled = false;\n      $.mobile.pushStateEnabled = false;\n    ```", "```js\n      $.extend($.mobile, {\n        slideText: \"slide\",\n        slideUpText: \"slideup\",\n        defaultPageTransition: \"slideup\",\n        defaultDialogTransition: \"slideup\"\n      });\n    ```", "```js\n      $('div[data-role=\"page\"]')\n        .live('pagehide', function (event, ui) {\n          $(event.currentTarget).remove();\n        }\n      );\n    ```", "```js\n      <script src=\"img/backbone-mongodb.js\"></script>\n    ```", "```js\n    jQuery.support.cors = true;\n    jQuery.ajaxSetup({ cache: false });\n    ```", "```js\n    _.extend(Backbone.Model.prototype, Backbone.MongoModel.mixin);\n    ```", "```js\n    var appConfig = {\n      baseURL: 'https://api.mongolab.com/api/1/databases/social-mobile-app/collections/',\n      addURL: '?apiKey=yGobEjzhT76Pjo9RaOLGfA89xCJXegpl'\n    }\n    ```", "```js\n    $(document).ready(function () {\n\n        // Create global variable within jQuery object.\n        $.tpl = {}\n\n        $('script.template').each(function(index) {\n\n          // Load template from DOM.\n          $.tpl[$(this).attr('id')] = _.template($(this).html());\n\n          // Remove template from DOM.\n          $(this).remove();\n        });\n\n    });\n    ```", "```js\n    var Workspace = Backbone.Router.extend({\n      routes: {\n        \"\": \"main\",\n        \"post/list\": \"postList\",\n        \"post/add\": \"postAdd\",\n        \"post/details/:id\": \"postDetails\",\n        \"post/delete/:id\": \"postDelete\",\n        \"settings\": \"settings\",\n        \"about\": \"about\",\n      },\n\n      main: function() {\n        this.changePage(new MainPageView());\n      },\n\n      postList: function() {\n        var postList = new PostList();\n        this.changePage(\n          new PostListPageView({collection: postList})\n        );\n        postList.fetch();\n      },\n\n      postAdd: function() {\n        this.changePage(new PostAddPageView());\n      },\n\n      postDetails: function(id) {\n        var post = new Post({id: id});\n        this.changePage(new PostDetailsPageView({model: post}));\n        post.fetch();\n      },\n\n      postDelete: function(id) {\n        var post = new Post({id: id});\n        this.showDialog(new PostDeleteDialogView({model: post}));\n        post.fetch();\n      },\n\n      settings: function() {\n        this.changePage(new SettingsPageView());\n      },\n\n      about: function() {\n        this.changePage(new AboutPageView());\n      }\n    }\n    ```", "```js\n      changePage: function (page) {\n        $(page.el).attr('data-role', 'page');\n\n        page.render();\n\n        $('body').append($(page.el));\n\n        $.mobile.changePage($(page.el), {\n          changeHash: false,\n          transition: this.historyCount++ ?\n            $.mobile.defaultPageTransition : 'none',\n        });\n      }\n    ```", "```js\n      showDialog: function(page) {\n        $(page.el).attr('data-role', 'dialog');\n\n        page.render();\n\n        $('body').append($(page.el));\n\n        $.mobile.changePage($(page.el), {\n          allowSamePageTransition: true,\n          reverse: false,\n          changeHash: false,\n          role: 'dialog',\n          transition: this.historyCount++ ? \n            $.mobile.defaultDialogTransition : 'none',\n        });\n      },\n    ```", "```js\n    var Post = Backbone.Model.extend({\n      defaults: {\n        title: \"\",\n        body: \"\",\n        created: new Date().toString(),\n      },\n\n      url: function() {\n        if (_.isUndefined(this.attributes.id)) {\n          return appConfig.baseURL + 'posts' + appConfig.addURL;\n        }\n        else {\n          return appConfig.baseURL + 'posts/' + \n            encodeURIComponent(this.attributes.id) + \n            appConfig.addURL;\n        }\n      },\n    });\n\n    var PostList = Backbone.Collection.extend({\n      model: Post,\n      url: function() {\n        return appConfig.baseURL + 'posts' + appConfig.addURL;\n      }\n    });\n    ```", "```js\n    var PostDetailsView = Backbone.View.extend({\n      initialize: function() {\n        this.model.bind('change', this.render, this);\n        this.template = $.tpl['post-details'];\n      },\n\n      render: function() {\n        $(this.el).html(this.template(this.model.toJSON())).\n          trigger('create');\n        return this;\n      },\n    });\n\n    var PostDetailsPageView = Backbone.View.extend({\n      initialize: function () {\n        this.template = $.tpl['post-details-page'];\n      },\n\n      render: function (eventName) {\n        $(this.el).html(this.template(this.model.toJSON()));\n        this.postDetailsView = new PostDetailsView({\n          el: $('.post-details', this.el), model: this.model\n        });\n\n        return this;\n      }\n    });\n    ```", "```js\n      <script type=\"text/html\" class=\"template\"\n              id=\"post-details-page\">\n        <div data-role=\"header\">\n          <h1>Post Details</h1>\n          <a href=\"#post/list\" data-rel=\"back\" data-theme=\"a\">\n            Back\n          </a>\n          <a href=\"#about\" data-theme=\"a\">About</a>\n        </div>\n\n        <div data-role=\"content\" class=\"post-details\"></div>\n\n        <div data-role=\"footer\" data-position=\"fixed\">\n          <div data-role=\"navbar\" data-theme=\"a\">\n            <ul>\n              <li><a href=\"#post/list\" id=\"list-button\"\n                     data-icon=\"custom\">\n                  View Posts\n              </a></li>\n              <li><a href=\"#post/add\" id=\"add-button\" \n                     data-icon=\"custom\">\n                Add Post</a></li>\n              <li><a href=\"#settings\" id=\"settings-button\" \n                     data-icon=\"custom\">\n                Settings\n              </a></li>\n            </ul>\n          </div>\n        </div>\n      </script>\n\n      <script type=\"text/html\" class=\"template\" id=\"post-details\">\n        <h1><%= title %></h1>\n        <small>Posted on <%= created %>.</small>\n        <p><%= body %></p>\n\n        <a href=\"#post/delete/<%= id %>\" name=\"delete-post\"\n          id=\"delete-post\" data-role=\"button\">Delete Post\n        </a>\n      </script>\n\n      <script type=\"text/html\" class=\"template\"\n              id=\"post-list-item\">\n        <div class=\"ui-btn-inner ui-li\">\n          <div class=\"ui-btn-text\">\n            <a class=\"ui-link-inherit\"\n               href=\"#post/details/<%= id %>\">\n              <%= title %>\n              <br><small><%= created %></small>\n            </a>\n          </div>\n        </div>\n      </script>\n    ```", "```js\n    #list-button span.ui-icon-custom {\n      background:\n        url(../lib/glyphish/152-rolodex.png) 0 0 no-repeat;\n    }\n\n    #add-button span.ui-icon-custom {\n      background:\n        url(../lib/glyphish/187-pencil.png) 0 0 no-repeat;\n    }\n\n    #settings-button span.ui-icon-custom {\n      background: url(../lib/glyphish/20-gear2.png) 0 0 no-repeat;\n    }\n    ```", "```js\n      <!-- CSS -->\n      <link rel=\"stylesheet\"\n        href=\"lib/jquery.mobile/jquery.mobile-1.1.0.min.css\"/>\n      <link rel=\"stylesheet\" href=\"lib/ios_inspired/styles.css\"/>\n      <link rel=\"stylesheet\" href=\"css/styles.css\"/>\n\n      <!-- Libraries -->\n      <script src=\"img/jquery.min.js\"></script>\n      <script src=\"img/jqm-config.js\"></script>\n      <script src=\"img/jquery.mobile-1.1.0.min.js\">\n      </script>\n      <script src=\"img/underscore-min.js\"></script>\n      <script src=\"img/backbone-min.js\"></script>\n      <script src=\"img/backbone-mongodb.js\"></script>\n\n      <!-- Config -->\n      <script src=\"img/app-config.js\"></script>\n\n      <!-- Template loader -->\n      <script src=\"img/template-loader.js\"></script>\n\n      <!-- SMA models and views -->\n      <script src=\"img/post.js\"></script>\n      <script src=\"img/post-list-page.js\"></script>\n      <script src=\"img/post-add-page.js\"></script>\n      <script src=\"img/post-details-page.js\"></script>\n      <script src=\"img/post-delete-dialog.js\"></script>\n      <script src=\"img/main-page.js\"></script>\n      <script src=\"img/settings-page.js\"></script>\n      <script src=\"img/about-page.js\"></script>\n\n      <!-- SMA main file and router -->\n      <script src=\"img/main.js\"></script>\n    ```", "```js\n    <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n        <widget xmlns = \"http://www.w3.org/ns/widgets\"\n            xmlns:gap = \"http://phonegap.com/ns/1.0\"\n            id = \"com.phonegap.example\"\n            versionCode =\"1\"\n            version = \"0.0.2\">\n        <!-- versionCode is optional and Android only -->\n\n        <preference name=\"phonegap-version\" value=\"2.7.0\" />\n\n        <name>Social Mobile App</name>\n\n        <description>\n          An example application to demonstrate Backbone.js and \n          jQueryMobile capabilities.\n        </description>\n\n        <author href=\"http://vmirgorod.name\"\n            email=\"dealancer@gmail.com\">\n            Vadim Mirgorod\n        </author>\n\n        <icon src=\"img/icon.png\" gap:role=\"default\" />\n\n        <preference name=\"orientation\" value=\"portrait\" />\n    </widget>\n    ```", "```js\n    @import url(\"../lib/jquery.mobile/jquery.mobile-1.1.0.min.css\");\n    @import url(\"../lib/ios_inspired/styles.css\");\n\n    // Custom styles\n    // ...\n    ```", "```js\n    <script data-main=\"js/app\"  src=\"img/require.js\"></script>\n    ```", "```js\n    require.config({\n\n      paths: {\n        jquery            : '../lib/jquery',\n        'jquery.mobile':\n         '../lib/jquery.mobile/jquery.mobile-1.1.0',\n        underscore: '../lib/underscore',\n        backbone: '../lib/backbone',\n        'backbone-mongodb': '../lib/backbone-mongodb',\n      }\n\n    });\n    ```", "```js\n      shim: {\n        'backbone-mongodb': {\n          deps: ['backbone'],\n          exports: 'Backbone'\n        },\n        'backbone': {\n          deps: ['underscore', 'jquery'],\n          exports: 'Backbone'\n        },\n        'underscore': {\n          exports: '_'\n        },\n        'jquery.mobile': ['jquery','jqm-config'],\n        'jqm-config': ['jquery'],\n        'jquery': {\n          exports: '$',\n        }\n      }\n    ```", "```js\n      map: {\n        '*': {\n          'backbone': 'backbone-mongodb',\n        },\n        'backbone-mongodb': {\n          'backbone': 'backbone'\n        }\n      }\n    ```", "```js\n    requirejs([ 'app-config', 'router' ],\n    function (appConfig, Router) {\n\n      $(document).ready(function () {\n\n        window.router = new Router();\n        Backbone.history.start({ pushState : false });\n\n      });\n\n    });\n    ```", "```js\n    // Filename: app-config.js\n\n    define(['jquery', 'backbone'],\n      function($, Backbone) {\n\n        // Enable cross site scripting.\n        $.support.cors = true;\n\n        // Disable ajax cache.\n        $.ajaxSetup({ cache: false });\n\n        // Add support of MongoDB Extended JSON.\n        _.extend(Backbone.Model.prototype,     \n          Backbone.MongoModel.mixin);\n\n        // Return app configuration.\n        return {\n          baseURL: 'https://api.mongolab.com/api/1/databases/\n            social-mobile-app/collections/',\n          addURL: '?apiKey=yGobEjzhT76Pjo9RaOLGfA89xCJXegpl'\n        }\n      }\n    );\n    ```", "```js\n    // Filename: template-loader.js\n\n    define(['jquery', 'underscore'],\n      function($, _) {\n\n        // Create global variable within jQuery object.\n        var tpl = {};\n\n        $('script.template').each(function(index) {\n\n          // Load template from DOM.\n          tpl[$(this).attr('id')] = _.template($(this).html());\n\n          // Remove template from DOM.\n          $(this).remove();\n        });\n\n        return tpl;\n      }\n    );\n    ```", "```js\n    // Filename: about-page.js\n\n    define(['jquery', 'backbone', 'template-loader'],\n      function($, Backbone, tpl) {\n        return Backbone.View.extend({\n          initialize: function () {\n            this.template = tpl['about-page'];\n          },\n\n          render: function (eventName) {\n            $(this.el).html(this.template());\n            return this;\n          },\n        });\n      }\n    );\n    ```", "```js\n    // Filename: router.js\n\n    define([\n      'jquery',\n      'jquery.mobile',\n      'backbone',\n      'model/post',\n      'collection/post',\n      'view/about-page',\n      'view/main-page',\n      'view/post-add-page',\n      'view/post-delete-dialog',\n      'view/post-details-page',\n      'view/post-list-page',\n      'view/settings-page',\n    ], function($, mobile, Backbone, PostModel, PostCollection,\n          AboutPageView, MainPageView, PostAddPageView,\n          PostDeleteDialogView, PostDetailsPageView,\n          PostListPageView, SettingsPageView) {\n\n      return Backbone.Router.extend({\n        // Router code\n      });\n    });\n    ```", "```js\ndefine(['jquery', 'backbone', 'template-loader'],\n  function($, Backbone, tpl) {\n\n    return Backbone.View.extend({\n      initialize: function () {\n        this.template = tpl['about-page'];\n      },\n\n      render: function (eventName) {\n        $(this.el).html(this.template());\n        return this;\n      },\n    });\n});\n```", "```js\nrequire.config({\n  shim: {\n    'jquery': {\n      exports: '$',\n    }\n  }\n});\n```", "```js\nrequire.config({\n  shim: {\n    'jquery.mobile': ['jquery','jqm-config'],\n    'jqm-config': ['jquery'],\n    'jquery': {\n      exports: '$',\n    }\n  }\n});\n```", "```js\nrequire.config({\n\n  paths: {\n    jquery            : '../lib/jquery',\n    'jquery.mobile':\n      '../lib/jquery.mobile/jquery.mobile-1.1.0',\n  }\n\n});\n```", "```js\n    $ npm install -g requirejs\n\n    ```", "```js\n    ({ \n        appDir: \"./src\", \n        baseUrl: \"js\", \n        dir: \"build\", \n        mainConfigFile: \"src/js/app.js\", \n        modules: [ \n            { \n                name: \"app\" \n            }, \n        ] \n    }) \n    ```", "```js\n    $ node r.js -o app.built.js\n\n    ```", "```js\n    $ sudo npm install -g phantomjs\n\n    ```", "```js\n    $ sudo npm install -g seoserver \n\n    ```", "```js\n    <meta name=\"fragment\" content=\"!\"> \n    ```", "```js\n    <IfModule mod_rewrite.c>\n     RewriteEngine on\n\n     RewriteCond %{QUERY_STRING} ^_escaped_fragment_=(.*)$\n     RewriteRule (.*) http://<host>:3000/<path>/index.html#%1? [P]\n    </IfModule>\n    ```", "```js\n    RewriteCond %{HTTP_USER_AGENT} ^YandexBot\n    RewriteRule (.*) http://<host>:3000/<path/>index.html#%1?\n    ```", "```js\n    $ seoserver -p 3000 start > seoserver.log\n\n    ```", "```js\n<meta name=\"fragment\" content=\"!\">\n```", "```js\nvar express = require('express');\nvar app = express();\nvar arguments = process.argv.splice(2);\nvar port = arguments[0] !== 'undefined' ? arguments[0] : 3000;\nvar getContent = function(url, callback) {\n  var content = '';\n\n  var phantom = require('child_process').spawn(\n    'phantomjs', [__dirname + '/phantom-server.js', url]\n  );\n\n  phantom.stdout.setEncoding('utf8');\n  phantom.stdout.on('data', function(data) {\n    content += data.toString();\n  });\n\n  phantom.stderr.on('data', function (data) {\n    console.log('stderr: ' + data);\n  });\n\n  phantom.on('exit', function(code) {\n    if (code !== 0) {\n      console.log('We have an error');\n    } else {\n      callback(content);\n    }\n  });\n};\n\nvar respond = function (req, res) {\n  res.eader(\"Access-Control-Allow-Origin\", \"*\");\n  res.eader(\n    \"Access-Control-Allow-Headers\", \"X-Requested-With\"\n  );\n\n  var url;\n  if(req.headers.referer) {\n    url = req.headers.referer;\n\n  }\n  if(req.headers['x-forwarded-host']) {\n    url = 'http://' + req.headers['x-forwarded-host'] + \n      req.params[0];\n\n  };\n\n  console.log('url:', url);\n\n  getContent(url, function (content) {\n    res.send(content);\n  });\n}\n\napp.get(/(.*)/, respond);\napp.listen(port);\n```", "```js\nvar page = require('webpage').create();\nvar system = require('system');\nvar lastReceived = new Date().getTime();\nvar requestCount = 0;\nvar responseCount = 0;\nvar requestIds = [];\n\npage.viewportSize = { width: 1024, height: 768 };\n\npage.onResourceReceived = function (response) {\n    if(requestIds.indexOf(response.id) !== -1) {\n        lastReceived = new Date().getTime();\n        responseCount++;\n        requestIds[requestIds.indexOf(response.id)] = null;\n    }\n};\n\npage.onResourceRequested = function (request) {\n    if(requestIds.indexOf(request.id) === -1) {\n        requestIds.push(request.id);\n        requestCount++;\n    }\n};\n\npage.open(system.args[1], function () {\n\n});\n\nvar checkComplete = function () {\n  if(new Date().getTime() - lastReceived > 300 && requestCount \n      === responseCount)  {\n    clearInterval(checkCompleteInterval);\n    console.log(page.content);\n    phantom.exit();\n  } else {\n\n  }\n}\nvar checkCompleteInterval = setInterval(checkComplete, 1);\n```", "```js\nvar div = document.createElement(\"div\");\ndiv.onclick = function () {  }\n```", "```js\n          var InvoiceItemModel = Backbone.Model.extend({\n            calculateAmount: function() {\n              return this.get('price') * this.get('quantity');\n            },\n\n            constructor: function InvoiceItemModel() {\n              InvoiceItemModel.__super__.constructor.apply(\n                this, arguments\n              );\n            }\n          });\n        ```", "```js\n    (function($){\n      $(document).ready(function () {\n\n      });\n    })(jQuery);\n    ```", "```js\n    <body><script src=\"img/main.js\"></script></body>\n    ```", "```js\n      var ControlsView = Backbone.View.extend({\n        render: function() {\n          var html = '<br><input id=\"addModel\" type=\"button\" ' +\n            'value=\"Add model\" id><input id=\"removeModel\" ' +\n            'type=\"button\" value=\"Remove model\"><input ' +\n            'id=\"removeTableView\" type=\"button\" ' +\n            'value=\"Remove table view\">';\n          $(this.el).html(html);\t\n\n          return this;\n        },\n\n        // Handle HTML events.\n        events: {\n          'click #addModel': 'addNewInvoiceItemModel',\n          'click #removeModel': 'removeInvoiceItemModel',\n          'click #removeTableView': 'removeInvoiceItemTableView',\n        },\n    //...\n\n        // Remove a view button handler.\n        removeInvoiceItemTableView: function() {\n          this.options.invoiceItemTableView.remove(); \n        },\n      });\n\n      //...\n\n      invoiceItemTableView = new InvoiceItemTableView({\n        collection: invoiceItemCollection\n      });\n\n      $('body').append(invoiceItemTableView.render().el);\n\n      $('body').append(new ControlsView({\n        collection: invoiceItemCollection,\n        invoiceItemTableView: invoiceItemTableView\n      }).render().el);\n    ```", "```js\n      var ControlsView = Backbone.View.extend({\n\n        // ...\n\n        removeInvoiceItemTableView: function() {\n          this.options.invoiceItemTableView.remove(); \n          delete this.options.invoiceItemTableView;\n        },\n      });\n    ```", "```js\n      var InvoiceItemTableView = Backbone.View.extend({\n\n        // ...\n\n        append: function(model) {\n          var view = new InvoiceItemView({ model: model });\n\n          $(this.el).append(\n            view.render().el\n          );\n\n          view.listenTo(this, 'clear', this.remove);\n        },\n\n        remove: function() {\n    this.trigger('clear'); \n\n          return InvoiceItemTableView.__super__.remove.\n     apply(\n     this, arguments\n     );\n        }\n      });\n    ```", "```js\n      var InvoiceItemView = Backbone.View.extend({\n\n        // ...\n\n        initialize: function() {\n          // Bind callback to destroy event of the model.\n          this.listenTo(\n     this.model, 'destroy', this.destroy, this\n     );\n        }\n      });\n      var InvoiceItemTableView = Backbone.View.extend({\n\n        // ...\n\n        initialize: function() {\n          // Bind callback to add event of the collection.\n          this.listenTo(\n            this.collection, 'add', this.append, this\n          );\n        }\n      });\n    ```"]