["```js\n*a* => b\n```", "```js\n/* [xDaysAgo(x)] returns the time [x] days before now, in ms since Unix\n    epoch. */\nlet *xDaysAgo*(*x*) =\n * Js.Date.now*() -. *float_of_int*(*x*) *. 24\\. *. 60\\. *. 60\\. *. 1_000.;\n```", "```js\n/* [xDaysAgo(now, x)] returns the time [x] days before [now], in ms\n    since Unix epoch. */\nlet *xDaysAgo*(*now*, *x*) =\n  *now* -. *float_of_int*(*x*) *. 24\\. *. 60\\. *. 60\\. *. 1_000.;\n```", "```js\nlet *sum*(*numbers*) = {\n  let *result* = *ref*(0);\n  for (*i* in 0 to *Array.length*(*numbers*) - 1) {\n    *result* := *result*^ + *numbers*[*i*];\n  };\n  *result*^\n};\n```", "```js\nlet *sendMoney*(*from*: string, *to_*: string, *amount*: float) = Js.log(\n  {j|Send \\$$*amount* from $*from* to $*to_*|j});\n```", "```js\nlet *sendMoney*(*from*, *to_*, *amount*) = {\n  assert(*from* != \"\");\n  assert(*to_* != \"\");\n  assert(*amount* > 0.);\n  *Js.log*({j|Send \\$$*amount* from $*from* to $*to_*|j});\n};\n```", "```js\n/* src/Ch07/Ch07_DomainTypes.re */\nmodule *NonEmptyString*: { /* (1) */\n type t = pri string; /* (2) */\n let *makeExn*: string => t;\n} = {\n type t = string;\n let *makeExn*(*string*) = { assert(*string* != \"\"); *string* };\n};\n\nmodule *PositiveFloat*: { /* (3) */\n type t = pri float;\n let *makeExn*: float => t;\n} = {\n type t = float;\n let *makeExn*(*float*) = { assert(*float* > 0.); *float* };\n let *toFloat*(*t*) = *t*;\n};\n\nlet *sendMoney*( /* (4) */\n *from*: *NonEmptyString*.t,\n *to_*: *NonEmptyString*.t,\n *amount*: *PositiveFloat*.t) = {\n\n let *from* = (*from* :> string); /* (5) */\n let *to_* = (*to_* :> string);\n let *amount* = (*amount* :> float);\n *Js.log*({j|Send \\$$*amount* from $*from* to $*to_*|j});\n};\n\n*sendMoney*( /* (6) */\n *NonEmptyString.makeExn*(\"Alice\"),\n *NonEmptyString.makeExn*(\"Bob\"),\n *PositiveFloat.makeExn*(32.));\n```", "```js\nlet *xDaysAgo*(*now*, *x*) = ...;\n```", "```js\nlet *xDaysAgo* = (*now*, *x*) => ...;\n```", "```js\nlet *xDaysAgo* = *now* => *x* => ...;\n```", "```js\nlet *result* = *xDaysAgo*(*now*, *x*);\n```", "```js\nlet *result* = *xDaysAgo*(*now*)(*x*);\n```", "```js\nlet *xDaysBeforeNow* = *xDaysAgo*(*Js.Date.now*());\nlet *result* = *xDaysBeforeNow*(10);\n```", "```js\nlet printEnveloppeLabel = (~firstname: string, ~lastname: string, ~address: string, ~country: string)\n  : unit => {\n    print_newline();\n    print_endline(firstname ++ \" \" ++ lastname);\n    print_endline(address);\n    print_endline(country);\n};\n```", "```js\nprintEnveloppeLabel(\"John\", \"Doe\", \"Some address in the US\", \"USA\");\n```", "```js\nlet printEnveloppeLabelUS = printEnveloppeLabel(~country=\"USA\");\nprintEnveloppeLabelUS(\"John\", \"Doe\", \"Some address in the US\");\n```", "```js\nlet printEnveloppeLabelDoeFamily = printEnveloppeLabelUS(~lastname=\"Doe\", ~address=\"Some address in the US\");\nprintEnveloppeLabelDoeFamily(~firstname=\"Jane\");\n```", "```js\nJohn Doe\nSome address in the US\nUSA\n\nJohn Doe\nSome address in the US\nUSA\n\nJane Doe\nSome address in the US\nUSA\n```", "```js\nPATTERN => body\n```", "```js\nPATTERN1 => PATTERN2 => ... => PATTERNn => body\n```", "```js\n(PATTERN1, PATTERN2, ..., PATTERNn) => body\n```", "```js\nlet *PATTERN* = VALUE;\n```", "```js\n/* src/Ch07/Ch07_FunctionLiterals.re */\nlet addV1(int1, int2) = int1 + int2; /* (1) */\nlet addV2 = (int1, int2) => int1 + int2; /* (2) */\nlet addV3 = int1 => int2 => int1 + int2; /* (3) */\n\n/** A way to convert values of type ['a] to and from floats. */\nmodule FloatConverter = {\n /* (4) */\n type t('a) = {encodeExn: 'a => float, decodeExn: float => 'a};\n\n /* (5) */\n let float = {encodeExn: float => float, decodeExn: float => float};\n let int = {encodeExn: float_of_int, decodeExn: int_of_float}; /* (6) */\n};\n\nlet greet = ({Ch03_Domain.Person.id, name}) => /* (7) */\n {j|Hello, $name with ID $id!|j};\n```", "```js\nlet *int* = {\n  *encodeExn*: *int* => *float_of_int*(*int*),\n  *decodeExn*: *float* => *int_of_float*(*float*)\n};\n```"]