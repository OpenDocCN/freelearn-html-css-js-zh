["```js\n<script type=\"text/javascript\" src=\"img/physi.js\"></script>\n```", "```js\nPhysijs.scripts.worker = '../libs/physijs_worker.js';\nPhysijs.scripts.ammo = '../libs/ammo.js';\n```", "```js\nvar scene = new Physijs.Scene();\nscene.setGravity(new THREE.Vector3(0, -10, 0));\n```", "```js\nvar stoneGeom = new THREE.BoxGeometry(0.6,6,2);\nvar stone = new Physijs.BoxMesh(stoneGeom, new THREE.MeshPhongMaterial({color: 0xff0000}));\nscene.add(stone);\n```", "```js\nrender = function() {\n  requestAnimationFrame(render);\n  renderer.render(scene, camera);\n  scene.simulate();\n}\n```", "```js\nfunction createGround() {\n  var ground_material = Physijs.createMaterial(new THREE.MeshPhongMaterial({ map: THREE.ImageUtils.loadTexture( '../assets/textures/general/wood-2.jpg' )}),0.9,0.3);\n\n  var ground = new Physijs.BoxMesh(new THREE.BoxGeometry(60, 1, 60), ground_material, 0);\n\n  var borderLeft = new Physijs.BoxMesh(new THREE.BoxGeometry (2, 3, 60), ground_material, 0);\n  borderLeft.position.x=-31;\n  borderLeft.position.y=2;\n  ground.add(borderLeft);\n\n  var borderRight = new Physijs.BoxMesh(new THREE. BoxGeometry (2, 3, 60), ground_material, 0);\n  borderRight.position.x=31;\n  borderRight.position.y=2;\n  ground.add(borderRight);\n\n  var borderBottom = new Physijs.BoxMesh(new THREE. BoxGeometry (64, 3, 2), ground_material, 0);\n  borderBottom.position.z=30;\n  borderBottom.position.y=2;\n  ground.add(borderBottom);\n\n  var borderTop = new Physijs.BoxMesh(new THREE.BoxGeometry (64, 3, 2), ground_material, 0);\n  borderTop.position.z=-30;\n  borderTop.position.y=2;\n  ground.add(borderTop);\n\n  scene.add(ground);\n}\n```", "```js\nvar stoneGeom = new THREE.BoxGeometry(0.6,6,2);\nvar stone = new Physijs.BoxMesh(stoneGeom, Physijs.createMaterial(new THREE.MeshPhongMaterial(color: scale(Math.random()).hex(),transparent:true, opacity:0.8})));\nstone.position.copy(point);\nstone.lookAt(scene.position);\nstone.__dirtyRotation = true;\nstone.position.y=3.5;\nscene.add(stone);\n```", "```js\nstones[0].rotation.x=0.2;\nstones[0].__dirtyRotation = true;\n```", "```js\nmesh.addEventListener( 'collision', function( other_object, relative_velocity, relative_rotation, contact_normal ) {\n});\n```", "```js\nsphere = new Physijs.SphereMesh(new THREE.SphereGeometry( 2, 20 ), Physijs.createMaterial(new THREE.MeshPhongMaterial({color: colorSphere, opacity: 0.8, transparent: true}), controls.sphereFriction, controls.sphereRestitution));\nbox.position.set(Math.random() * 50 -25, 20 + Math.random() * 5, Math.random() * 50 -25);\nscene.add( sphere );\n```", "```js\nvar plane = new Physijs.PlaneMesh(new THREE.PlaneGeometry(5,5,10,10), material);\n\nscene.add( plane );\n```", "```js\nnew Physijs.SphereMesh(new THREE.SphereGeometry(3,20),mat);\nnew Physijs.BoxMesh(new THREE.BoxGeometry(4,2,6),mat);\nnew Physijs.CylinderMesh(new THREE.CylinderGeometry(2,2,6),mat);\nnew Physijs.ConeMesh(new THREE.CylinderGeometry(0,3,7,20,10),mat);\n```", "```js\nvar merged = new THREE.Geometry();\nvar cyl = new THREE.CylinderGeometry(2, 2, 6);\nvar top = new THREE.SphereGeometry(2);\nvar bot = new THREE.SphereGeometry(2);\n\nvar matrix = new THREE.Matrix4();\nmatrix.makeTranslation(0, 3, 0);\ntop.applyMatrix(matrix);\n\nvar matrix = new THREE.Matrix4();\nmatrix.makeTranslation(0, -3, 0);\nbot.applyMatrix(matrix);\n\n// merge to create a capsule\nmerged.merge(top);\nmerged.merge(bot);\nmerged.merge(cyl);\n\n// create a physijs capsule mesh\nvar capsule = new Physijs.CapsuleMesh(merged, getMaterial());\n```", "```js\nvar convex = new Physijs.ConvexMesh(new THREE.TorusKnotGeometry(0.5,0.3,64,8,2,3,10), material);\n```", "```js\nvar date = new Date();\nvar pn = new Perlin('rnd' + date.getTime());\n\nfunction createHeightMap(pn) {\n\n  var ground_material = Physijs.createMaterial(\n    new THREE.MeshLambertMaterial({\n      map: THREE.ImageUtils.loadTexture('../assets/textures/ground/grasslight-big.jpg')\n    }),\n    0.3, // high friction\n    0.8 // low restitution\n  );\n\n  var ground_geometry = new THREE.PlaneGeometry(120, 100, 100, 100);\n  for (var i = 0; i < ground_geometry.vertices.length; i++) {\n    var vertex = ground_geometry.vertices[i];\n    var value = pn.noise(vertex.x / 10, vertex.y / 10, 0);\n    vertex.z = value * 10;\n  }\n  ground_geometry.computeFaceNormals();\n  ground_geometry.computeVertexNormals();\n\n  var ground = new Physijs.HeightfieldMesh(\n    ground_geometry,\n    ground_material,\n    0, // mass\n    100,\n    100\n  );\n  ground.rotation.x = Math.PI / -2;\n  ground.rotation.y = 0.4;\n  ground.receiveShadow = true;\n\n  return ground;\n}\n```", "```js\nfunction createPointToPoint() {\n  var obj1 = new THREE.SphereGeometry(2);\n  var obj2 = new THREE.SphereGeometry(2);\n\n  var objectOne = new Physijs.SphereMesh(obj1, Physijs.createMaterial(new THREE.MeshPhongMaterial({color: 0xff4444, transparent: true, opacity:0.7}),0,0));\n\n  objectOne.position.x = -10;\n  objectOne.position.y = 2;\n  objectOne.position.z = -18;\n\n  scene.add(objectOne);\n\n  var objectTwo = new Physijs.SphereMesh(obj2,Physijs.createMaterial(new THREE.MeshPhongMaterial({color: 0xff4444, transparent: true, opacity:0.7}),0,0));\n\n  objectTwo.position.x = -20;\n  objectTwo.position.y = 2;\n  objectTwo.position.z = -5;\n\n  scene.add(objectTwo);\n\n  var constraint = new Physijs.PointConstraint(objectOne, objectTwo, objectTwo.position);\n  scene.addConstraint(constraint);\n}\n```", "```js\nvar constraint = new Physijs.HingeConstraint(flipperLeft, flipperLeftPivot, flipperLeftPivot.position, new THREE.Vector3(0,1,0));\nscene.addConstraint(constraint);\nconstraint.setLimits(-2.2, -0.6, 0.1, 0);\n```", "```js\nconstraint.enableAngularMotor( controls.velocity, controls.acceleration );\n```", "```js\nflipperLeftConstraint.disableMotor();\n```", "```js\nvar constraint = new Physijs.SliderConstraint(sliderMesh, new THREE.Vector3(0, 2, 0), new THREE.Vector3(0, 1, 0));\n\nscene.addConstraint(constraint);\nconstraint.setLimits(-10, 10, 0, 0);\nconstraint.setRestitution(0.1, 0.1);\n```", "```js\nvar baseMesh = new THREE.SphereGeometry(1);\nvar armMesh = new THREE.BoxGeometry(2, 12, 3);\n\nvar objectOne = new Physijs.BoxMesh(baseMesh,Physijs.createMaterial(new THREE.MeshPhongMaterial({color: 0x4444ff, transparent: true, opacity:0.7}), 0, 0), 0);\nobjectOne.position.z = 0;\nobjectOne.position.x = 20;\nobjectOne.position.y = 15.5;\nobjectOne.castShadow = true;\nscene.add(objectOne);\n\nvar objectTwo = new Physijs.SphereMesh(armMesh,Physijs.createMaterial(new THREE.MeshPhongMaterial({color: 0x4444ff, transparent: true, opacity:0.7}), 0, 0), 10);\nobjectTwo.position.z = 0;\nobjectTwo.position.x = 20;\nobjectTwo.position.y = 7.5;\nscene.add(objectTwo);\nobjectTwo.castShadow = true;\n\nvar constraint = new Physijs.ConeTwistConstraint(objectOne, objectTwo, objectOne.position);\n\nscene.addConstraint(constraint);\n\nconstraint.setLimit(0.5*Math.PI, 0.5*Math.PI, 0.5*Math.PI);\nconstraint.setMaxMotorImpulse(1);\nconstraint.setMotorTarget(new THREE.Vector3(0, 0, 0));\n```", "```js\nfunction createWheel(position) {\n  var wheel_material = Physijs.createMaterial(\n   new THREE.MeshLambertMaterial({\n     color: 0x444444,\n     opacity: 0.9,\n     transparent: true\n    }),\n    1.0, // high friction\n    0.5 // medium restitution\n  );\n\n  var wheel_geometry = new THREE.CylinderGeometry(4, 4, 2, 10);\n  var wheel = new Physijs.CylinderMesh(\n    wheel_geometry,\n    wheel_material,\n    100\n  );\n\n  wheel.rotation.x = Math.PI / 2;\n  wheel.castShadow = true;\n  wheel.position = position;\n  return wheel;\n}\n```", "```js\nvar car = {};\nvar car_material = Physijs.createMaterial(new THREE.MeshLambertMaterial({\n    color: 0xff4444,\n    opacity: 0.9,  transparent: true\n  }),   0.5, 0.5 \n);\n\nvar geom = new THREE.BoxGeometry(15, 4, 4);\nvar body = new Physijs.BoxMesh(geom, car_material, 500);\nbody.position.set(5, 5, 5);\nbody.castShadow = true;\nscene.add(body);\n\nvar fr = createWheel(new THREE.Vector3(0, 4, 10));\nvar fl = createWheel(new THREE.Vector3(0, 4, 0));\nvar rr = createWheel(new THREE.Vector3(10, 4, 10));\nvar rl = createWheel(new THREE.Vector3(10, 4, 0));\n\nscene.add(fr);\nscene.add(fl);\nscene.add(rr);\nscene.add(rl);\n```", "```js\nvar frConstraint = new Physijs.DOFConstraint(fr,body, new THREE.Vector3(0,4,8));\nscene.addConstraint(frConstraint);\nvar flConstraint = new Physijs.DOFConstraint (fl,body, new THREE.Vector3(0,4,2));\nscene.addConstraint(flConstraint);\nvar rrConstraint = new Physijs.DOFConstraint (rr,body, new THREE.Vector3(10,4,8));\nscene.addConstraint(rrConstraint);\nvar rlConstraint = new Physijs.DOFConstraint (rl,body, new THREE.Vector3(10,4,2));\nscene.addConstraint(rlConstraint);\n```", "```js\nfrConstraint.setAngularLowerLimit({ x: 0, y: 0, z: 0 });\nfrConstraint.setAngularUpperLimit({ x: 0, y: 0, z: 0 });\nflConstraint.setAngularLowerLimit({ x: 0, y: 0, z: 0 });\nflConstraint.setAngularUpperLimit({ x: 0, y: 0, z: 0 });\n```", "```js\nrrConstraint.setAngularLowerLimit({ x: 0, y: 0.5, z: 0.1 });\nrrConstraint.setAngularUpperLimit({ x: 0, y: 0.5, z: 0 });\nrlConstraint.setAngularLowerLimit({ x: 0, y: 0.5, z: 0.1 });\nrlConstraint.setAngularUpperLimit({ x: 0, y: 0.5, z: 0 });\n```", "```js\nflConstraint.configureAngularMotor(2, 0.1, 0, -2, 1500);\nfrConstraint.conAngularMotor(2, 0.1, 0, -2, 1500);\n```", "```js\nflConstraint.enableAngularMotor(2);\nfrConstraint.enableAngularMotor(2);\n```", "```js\nvar helper = new THREE.GridHelper( 500, 10 );\nhelper.color1.setHex( 0x444444 );\nhelper.color2.setHex( 0x444444 );\nscene.add( helper );\n```", "```js\nvar listener1 = new THREE.AudioListener();\ncamera.add( listener1 );\n```", "```js\nvar cube = new THREE.BoxGeometry(40, 40, 40);\n\nvar material_1 = new THREE.MeshBasicMaterial({\n  color: 0xffffff,\n  map: THREE.ImageUtils.loadTexture(\"../assets/textures/animals/cow.png\")\n});\n\nvar mesh1 = new THREE.Mesh(cube, material_1);\nmesh1.position.set(0, 20, 100);\n\nvar sound1 = new THREE.Audio(listener1);\nsound1.load('../assets/audio/cow.ogg');\nsound1.setRefDistance(20);\nsound1.setLoop(true);\nsound1.setRolloffFactor(2);\n\nmesh1.add(sound1);\n```"]