["```js\n<form class=\"m-2\">\n    <table class=\"table table-sm table-striped\">\n        <thead>\n            <tr>\n                <th>ID</th><th>Name</th><th>Age</th><th>Years</th>\n                <th>Next Age</th><th></th>\n            </tr>\n        </thead>\n        <tbody>\n            {{#unless data }}<tr><td colspan=\"5\">No Data</td></tr>{{/unless }}\n            {{#each data }}\n                <tr>\n                    <td>{{ this.id }} </td>\n                    <td>{{ this.name }} </td>\n                    <td>{{ this.age }} </td>\n                    <td>{{ this.years }} </td>\n                    <td>{{ this.nextage }} </td>\n                    <td>\n                        <button class=\"btn btn-danger btn-sm\"\n                            formmethod=\"post\"\n                            formaction=\"/form/delete/{{this.id}}\">\n                                Delete\n                        </button> \n                    </td>\n                </tr>               \n            {{/each }}\n        </tbody>\n    </table>\n    <button class=\"btn btn-primary\"\n        formmethod=\"post\"\n        formaction=\"/form/add\">\n            Add\n    </button>                    \n    <input type=\"hidden\" name=\"name\" value=\"Alice\" />\n    <input type=\"hidden\" name=\"age\" value=\"40\" />\n    <input type=\"hidden\" name=\"years\" value=\"10\" />\n</form> \n```", "```js\nimport express, { Express } from \"express\";\nimport repository  from \"./data\";\nimport cookieMiddleware from \"cookie-parser\";\nimport { sessionMiddleware } from \"./sessions/session_helpers\";\nimport { Result } from \"./data/repository\";\nconst rowLimit = 10;\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}))\n    app.use(cookieMiddleware(\"mysecret\"));\n    app.use(sessionMiddleware());\n}\nexport const registerFormRoutes = (app: Express) => {\n    app.get(\"/form\", async (req, resp) => {\n        resp.render(\"data\", {data: await repository.getAllResults(rowLimit)});\n    });\n    app.post(\"/form/delete/:id\", async (req, resp) => {\n        const id = Number.parseInt(req.params[\"id\"]);\n        await repository.delete(id);\n        resp.redirect(\"/form\");\n        resp.end();\n    });\n\n    app.post(\"/form/add\", async (req, resp) => {\n        const nextage = Number.parseInt(req.body[\"age\"])\n            + Number.parseInt(req.body[\"years\"]);\n        await repository.saveResult({...req.body, nextage } as Result);\n        resp.redirect(\"/form\");\n        resp.end();\n    });\n} \n```", "```js\nnpm start \n```", "```js\nexport interface Credentials {\n    username: string;\n    hashedPassword: Buffer;\n    salt: Buffer;\n}\nexport interface AuthStore {\n    getUser(name: string) : Promise<Credentials | null>;\n    storeOrUpdateUser(username: string, password: string):\n        Promise<Credentials>;\n    validateCredentials(username: string, password: string): Promise<boolean>\n} \n```", "```js\nimport { DataTypes, InferAttributes, InferCreationAttributes, Model,\n    Sequelize } from \"sequelize\";\nimport { Credentials } from \"./auth_types\";\nexport class CredentialsModel\n        extends Model<InferAttributes<CredentialsModel>,\n            InferCreationAttributes<CredentialsModel>>\n        implements Credentials {\n    declare username: string;\n    declare hashedPassword: Buffer;\n    declare salt: Buffer;\n}\nexport const initializeAuthModels = (sequelize: Sequelize) => {\n    CredentialsModel.init({\n        username: { type: DataTypes.STRING, primaryKey: true },\n        hashedPassword: { type: DataTypes.BLOB },\n        salt: { type: DataTypes.BLOB }\n    }, { sequelize });\n} \n```", "```js\nimport { Sequelize } from \"sequelize\";\nimport { CredentialsModel, initializeAuthModels }\n    from \"./orm_auth_models\";\nimport { AuthStore } from \"./auth_types\"\nimport { pbkdf2, randomBytes, timingSafeEqual } from \"crypto\";\nexport class OrmAuthStore implements AuthStore {\n    sequelize: Sequelize;\n    constructor() {\n        this.sequelize = new Sequelize({\n            dialect: \"sqlite\",\n            storage: \"orm_auth.db\",\n            logging: console.log,\n            logQueryParameters: true\n        });\n        this.initModelAndDatabase();\n    }\n    async initModelAndDatabase() : Promise<void> {\n        initializeAuthModels(this.sequelize);\n        await this.sequelize.drop();       \n        await this.sequelize.sync();       \n        await this.storeOrUpdateUser(\"alice\", \"mysecret\");\n        await this.storeOrUpdateUser(\"bob\", \"mysecret\");       \n    }\n    async getUser(name: string) {\n        return await CredentialsModel.findByPk(name);\n    }\n    async storeOrUpdateUser(username: string, password: string) {\n        const salt = randomBytes(16);\n        const hashedPassword = await this.createHashCode(password, salt);\n        const [model] = await CredentialsModel.upsert({\n            username, hashedPassword, salt\n        });\n        return model;\n    }\n    async validateCredentials(username: string, password: string):\n            Promise<boolean> {\n        const storedCreds = await this.getUser(username);\n        if (storedCreds) {\n            const candidateHash =\n                await this.createHashCode(password, storedCreds.salt);\n            return timingSafeEqual(candidateHash, storedCreds.hashedPassword);\n        }\n        return false;\n    }\n    private createHashCode(password: string, salt: Buffer) : Promise<Buffer> {\n        return new Promise((resolve, reject) => {\n            pbkdf2(password, salt, 100000, 64, \"sha512\", (err, hash) => {\n                if (err) {\n                    reject(err)\n                };\n                resolve(hash);\n            })      \n        })\n    }\n} \n```", "```js\n`alice` \n```", "```js\n`mysecret` \n```", "```js\n`bob` \n```", "```js\n`mysecret` \n```", "```js\n{{#if failed }}\n    <h4 class=\"bg-danger text-white p-2 text-center\">\n        Authentication failed. Please try again.\n    </h4>\n{{/if}}\n<form method=\"post\">\n    <div class=\"m-2\">\n        <label class=\"form-label\">Name</label>\n        <input name=\"username\" class=\"form-control\" value=\"{{ username }}\"/>\n    </div>\n    <div class=\"m-2\">\n        <label class=\"form-label\">Password</label>\n        <input name=\"password\" type=\"password\" class=\"form-control\"\n            value=\"{{ password }}\"/>\n    </div>   \n    <button type=\"submit\" class=\"btn btn-primary mx-2\">Sign In</button>\n</form> \n```", "```js\nimport { Express } from \"express\"\nimport { AuthStore } from \"./auth_types\";\nimport { OrmAuthStore } from \"./orm_authstore\";\nconst store: AuthStore = new OrmAuthStore();\nexport const createAuth = (app: Express) => {\n    app.get(\"/signin\", (req, resp) => {\n        const data = {\n            username: req.query[\"username\"],\n            password: req.query[\"password\"],\n            failed: req.query[\"failed\"] ? true : false\n        }\n        resp.render(\"signin\", data);\n    });\n    app.post(\"/signin\", async (req, resp) => {\n        const username = req.body.username;\n        const password = req.body.password;\n        const valid = await store.validateCredentials(username, password);\n        if (valid) {\n            resp.redirect(\"/\");\n        } else {\n            resp.redirect(\n                `/signin?username=${username}&password=${password}&failed=1`);\n        }\n    });\n} \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\nimport httpProxy from \"http-proxy\";\nimport helmet from \"helmet\";\nimport { engine } from \"express-handlebars\";\nimport { registerFormMiddleware, registerFormRoutes } from \"./forms\";\nimport { createApi } from \"./api\";\n**import { createAuth } from \"./auth\";**\nconst port = 5000;\nconst expressApp: Express = express();\nconst proxy = httpProxy.createProxyServer({\n    target: \"http://localhost:5100\", ws: true\n});\nexpressApp.set(\"views\", \"templates/server\");\nexpressApp.engine(\"handlebars\", engine());\nexpressApp.set(\"view engine\", \"handlebars\");\nexpressApp.use(helmet());\nexpressApp.use(express.json({\n    type: [\"application/json\", \"application/json-patch+json\"]\n}));\nregisterFormMiddleware(expressApp);\n**createAuth(expressApp);**\nregisterFormRoutes(expressApp);\ncreateApi(expressApp);\nexpressApp.use(\"^/$\", (req, resp) => resp.redirect(\"/form\"));\nexpressApp.use(express.static(\"static\"));\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\nexpressApp.use((req, resp) => proxy.web(req, resp));\nconst server = createServer(expressApp);\nserver.on('upgrade', (req, socket, head) => proxy.ws(req, socket, head));\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nimport { Express } from \"express\"\nimport { AuthStore } from \"./auth_types\";\nimport { OrmAuthStore } from \"./orm_authstore\";\nconst store: AuthStore = new OrmAuthStore();\n**type** **User = { username: string }**\n**declare module \"express-session\" {**\n **interface SessionData { username: string; }**\n**}**\n**declare global {**\n **module** **Express {**\n **interface Request { user: User, authenticated: boolean }**\n **}**\n**}**\nexport const createAuth = (app: Express) => {\n    **app.****use((req, resp, next) => {**\n **const username = req.session.username;**\n **if (username) {**\n **req.authenticated = true;**\n **req.user = { username };**\n **}** **else {**\n **req.authenticated = false;**\n **}**\n **next();**\n **});**\n    app.get(\"/signin\", (req, resp) => {\n        const data = {\n            username: req.query[\"username\"],\n            password: req.query[\"password\"],\n            failed: req.query[\"failed\"] ? true : false\n        }\n        resp.render(\"signin\", data);\n    });\n    app.post(\"/signin\", async (req, resp) => {\n        const username = req.body.username;\n        const password = req.body.password;\n        const valid = await store.validateCredentials(username, password);\n        if (valid) {\n           ** req.session.username = username;**\n            resp.redirect(\"/\");\n        } else {\n            resp.redirect(\n                `/signin?username=${username}&password=${password}&failed=1`);\n        }\n    });\n    **app.post(\"/signout\", async (req, resp) => {**\n **req.session.destroy(() => {**\n **resp.****redirect(\"/\");**\n **})**\n **});**\n} \n```", "```js\n...\nreq.session.**username** = username;\n... \n```", "```js\n...\napp.use((req, resp, next) => {\n    const username = req.session.username;\n    if (username) {\n        req.authenticated = true;\n        req.user = { username };\n    } else {\n        req.authenticated = false;\n    }\n    **resp.locals.user = req.user;**\n **resp.locals.authenticated = req.authenticated;** \n    next();\n});\napp.get(\"/signin\", (req, resp) => {\n    const data = {\n        username: req.query[\"username\"],\n        password: req.query[\"password\"],\n        failed: req.query[\"failed\"] ? true : false,\n       ** signinpage: true**\n    }\n    resp.render(\"signin\", data);\n});\n... \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <script src=\"img/bundle.js\"></script>       \n        <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n      **  {{#if authenticated }}**\n **<div class=\"bg-primary text-white p-1 clearfix\">**\n **<form method=\"post\" action=\"/signout\">**\n **<span class=\"h5\">****User: {{ user.username }}</span>**\n **<button class=\"btn btn-secondary btn-sm float-end\"**\n **type=\"submit\">Sign Out</button>**\n **</form>**\n **</div>**\n **{{else }}**\n **{{#unless signinpage }}**\n **<div class=\"bg-primary text-white p-1 clearfix\">**\n **<a** **href=\"/signin\"**\n **class=\"btn btn-secondary btn-sm float-end\">Sign In</a>**\n **</div>**\n **{{/unless }}**\n **{{/if}}**\n        {{{ body }}}\n    </body>\n</html> \n```", "```js\n...\n{\n    \"username\": \"alice\",\n    \"password\": \"mysecret\"\n}\n... \n```", "```js\n...\n{\n  \"success\": true,\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\"\n}\n... \n```", "```js\n...\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n... \n```", "```js\nnpm install jsonwebtoken@9.0.2\nnpm install --save-dev @types/jsonwebtoken@9.0.5 \n```", "```js\nimport { Express } from \"express\"\nimport { AuthStore } from \"./auth_types\";\nimport { OrmAuthStore } from \"./orm_authstore\";\n**import jwt from \"jsonwebtoken\";**\n**const jwt_secret = \"mytokensecret\";**\nconst store: AuthStore = new OrmAuthStore();\ntype User = { username: string }\ndeclare module \"express-session\" {\n    interface SessionData { username: string; }\n}\ndeclare global {\n    module Express {\n        interface Request { user: User, authenticated: boolean }\n    }\n}\nexport const createAuth = (app: Express) => {\n    app.use((req, resp, next) => {\n        const username = req.session.username;\n        if (username) {\n            req.authenticated = true;\n            req.user = { username };\n     **   } else if (req.headers.authorization) {**\n **let token = req.headers.authorization;**\n **if (token.****startsWith(\"Bearer \")) {**\n **token = token.substring(7);**\n **}**\n **try {**\n **const decoded = jwt.verify(token, jwt_secret) as User;**\n **req.authenticated =** **true;**\n **req.user = { username: decoded.username };**\n **} catch {**\n **// do nothing - cannot verify token**\n **}**\n        } else {\n            req.authenticated = false;\n        }\n        resp.locals.user = req.user;\n        resp.locals.authenticated = req.authenticated;   \n        next();\n    });\n    app.get(\"/signin\", (req, resp) => {\n        const data = {\n            username: req.query[\"username\"],\n            password: req.query[\"password\"],\n            failed: req.query[\"failed\"] ? true : false,\n            signinpage: true\n        }\n        resp.render(\"signin\", data);\n    });\n    app.post(\"/signin\", async (req, resp) => {\n        const username = req.body.username;\n        const password = req.body.password;\n        const valid = await store.validateCredentials(username, password);\n        if (valid) {\n            req.session.username = username;\n            resp.redirect(\"/\");\n        } else {\n            resp.redirect(\n                `/signin?username=${username}&password=${password}&failed=1`);\n        }\n    });\n **app.post(\"/api/signin\",** **async (req, resp) => {**\n **const username = req.body.username;**\n **const password = req.body.password;**\n **const result: any = {**\n **success:** **await store.validateCredentials(username, password)**\n **}**\n **if (result.success) {**\n **result.token = jwt.sign({username} , jwt_secret,**\n **{ expiresIn: \"1hr\"});**\n **}**\n **resp.json(result);**\n **resp.end();** \n **});**\n    app.post(\"/signout\", async (req, resp) => {\n        req.session.destroy(() => {\n            resp.redirect(\"/\");\n        })\n    });\n} \n```", "```js\n...\nresult.token = jwt.sign({username} , jwt_secret, { expiresIn: \"1hr\"});\n... \n```", "```js\nimport { input } from \"@inquirer/prompts\";\nconst baseUrl = \"http://localhost:5000\";\n**let bearer_token;**\nexport const ops = {\n  **  \"Sign In\": async () => {**\n **const creds = {**\n **username: await** **input({message: \"Username?\"}),**\n **password: await input({message: \"Password?\"}),**\n **};**\n **const response = await** **sendRequest(\"POST\", \"/api/signin\", creds);**\n **if (response.success == true) {**\n **bearer_token = response.token;**\n **};**\n **},**\n **\"Sign Out\": () => { bearer_token = undefined** **},**\n    \"Get All\": () => sendRequest(\"GET\", \"/api/results\"),\n    // ... other operations omitted for brevity...\n}\nconst sendRequest = async (method, url, body, contentType) => {\n   ** const headers = { \"Content-Type\": contentType ?? \"application/json\"};**\n **if (bearer_token) {**\n **headers[\"Authorization\"] = \"Bearer \" + bearer_token;**\n **}**\n    const response = await fetch(baseUrl + url, {\n       ** method, headers, body****: JSON.stringify(body)**\n    });\n    if (response.status == 200) {\n        const data = await response.json();\n        (Array.isArray(data) ? data : [data])\n            .forEach(elem => console.log(JSON.stringify(elem)));\n        **return data;**\n    } else {\n        console.log(response.status + \" \" + response.statusText);\n    }\n} \n```", "```js\nnpm run cmdline \n```", "```js\n...\n? Select an operation Sign In\n? Username? alice\n? Password? mysecret\n{\"success\":true,\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFsaWNlIiwiaWF0IjoxNzA2MzQ2NDgyLCJleHAiOjE3MDYzNTAwODJ9.YjWggUNH1aP9CSGSnQGIQqZc36aQE7RG_Cb0ovEOj1k\"}\n... \n```", "```js\n`alice, bob` \n```", "```js\n`alice` \n```", "```js\n`alice, bob` \n```", "```js\n`alice` \n```", "```js\n`Users` \n```", "```js\n`Admins` \n```", "```js\nexport interface Credentials {\n    username: string;\n    hashedPassword: Buffer;\n    salt: Buffer;\n}\n**export interface Role {**\n **name: string;**\n **members****: string[];**\n**}**\nexport interface AuthStore {\n    getUser(name: string) : Promise<Credentials | null>;\n    storeOrUpdateUser(username: string, password: string):\n        Promise<Credentials>;\n    validateCredentials(username: string, password: string): Promise<boolean>\n    **getRole(name: string) : Promise****<Role | null>;**\n **getRolesForUser(username: string): Promise<string[]>;**\n **storeOrUpdateRole(role: Role****) : Promise<Role>;**\n **validateMembership(username: string, role: string): Promise<boolean>;**\n} \n```", "```js\n**import { DataTypes, InferAttributes, InferCreationAttributes, Model,**\n **Sequelize, HasManySetAssociationsMixin }**\n **from \"sequelize\";**\n**import** **{ Credentials, Role } from \"./auth_types\";**\nexport class CredentialsModel\n        extends Model<InferAttributes<CredentialsModel>,\n            InferCreationAttributes<CredentialsModel>>\n        implements Credentials {\n    declare username: string;\n    declare hashedPassword: Buffer;\n    declare salt: Buffer;\n **   declare RoleModels?: InferAttributes<RoleModel>[];**\n**}**\n**export class RoleModel extends Model<InferAttributes<****RoleModel>,**\n **InferCreationAttributes<RoleModel>>  {**\n **declare name: string;**\n **declare CredentialsModels?: InferAttributes<CredentialsModel>[];**\n **declare setCredentialsModels:**\n**HasManySetAssociationsMixin<CredentialsModel, string>;**\n**}**\nexport const initializeAuthModels = (sequelize: Sequelize) => {\n    CredentialsModel.init({\n        username: { type: DataTypes.STRING, primaryKey: true },\n        hashedPassword: { type: DataTypes.BLOB },\n        salt: { type: DataTypes.BLOB }\n    }, { sequelize });\n  **  RoleModel.init({**\n **name: { type: DataTypes.STRING, primaryKey:** **true },**\n **}, {  sequelize });**\n **RoleModel.belongsToMany(CredentialsModel,**\n **{ through: \"RoleMembershipJunction\", foreignKey: \"name\" });**\n **CredentialsModel.belongsToMany(****RoleModel,**\n **{ through: \"RoleMembershipJunction\", foreignKey: \"username\" });** \n} \n```", "```js\n...\nRoleModel.belongsToMany(CredentialsModel,\n    { through: \"RoleMembershipJunction\", foreignKey: \"name\" });\nCredentialsModel.belongsToMany(RoleModel,\n{ through: \"RoleMembershipJunction\", foreignKey: \"username\" });\n... \n```", "```js\n...\ndeclare RoleModels?: InferAttributes<RoleModel>[];\n...\ndeclare CredentialsModels?: InferAttributes<CredentialsModel>[];\n... \n```", "```js\n...\ndeclare **setCredentialsModels**: HasManySetAssociationsMixin<CredentialsModel, string>;\n... \n```", "```js\n**import** **{ Sequelize, Op } from \"sequelize\";**\n**import { CredentialsModel, initializeAuthModels, RoleModel }**\n **from \"./orm_auth_models\";**\n**import** **{ AuthStore, Role } from \"./auth_types\";**\nimport { pbkdf2, randomBytes, timingSafeEqual } from \"crypto\";\nexport class OrmAuthStore implements AuthStore {\n    sequelize: Sequelize;\n    constructor() {\n        this.sequelize = new Sequelize({\n            dialect: \"sqlite\",\n            storage: \"orm_auth.db\",\n            logging: console.log,\n            logQueryParameters: true\n        });\n        this.initModelAndDatabase();\n    }\n    async initModelAndDatabase() : Promise<void> {\n        initializeAuthModels(this.sequelize);\n        await this.sequelize.drop();       \n        await this.sequelize.sync();       \n        await this.storeOrUpdateUser(\"alice\", \"mysecret\");\n        await this.storeOrUpdateUser(\"bob\", \"mysecret\");       \n        **await this.storeOrUpdateRole({**\n **name: \"Users\",** **members: [\"alice\", \"bob\"]**\n **});**\n **await this.storeOrUpdateRole({**\n **name: \"Admins\", members: [\"alice\"]**\n **});**\n    }\n    // ...methods omitted for brevity...\n   ** async getRole(name: string) {**\n **const stored = await RoleModel.findByPk(name, {**\n **include: [{** **model: CredentialsModel, attributes: [\"username\"]}]**\n **});**\n **if (stored) {**\n **return {**\n **name: stored.name,**\n **members: stored.CredentialsModels?.****map(m => m.username) ?? []**\n **}**\n **}**\n **return null;**\n **}**\n **async getRolesForUser(username: string): Promise<string[]> {**\n **return** **(await RoleModel.findAll({**\n **include: [{**\n **model: CredentialsModel,**\n **where: { username },**\n **attributes: []**\n **}]**\n **})).map(rm** **=> rm.name);**\n **}**\n **async storeOrUpdateRole(role: Role) {**\n **return await this.sequelize.transaction(****async (transaction) => {**\n **const users = await CredentialsModel.findAll({**\n **where: { username: { [Op.in]: role.members } },**\n **transaction**\n **});** \n**const [rm] = await RoleModel.findOrCreate({**\n **where: { name: role.name}, transaction });**\n **await rm.setCredentialsModels(users, { transaction });**\n **return role;**\n **});**\n **}**\n**async validateMembership(username: string, rolename: string) {**\n **return (await this.getRolesForUser(username)).includes(rolename);**\n **}** \n} \n```", "```js\n...\nconst stored = await RoleModel.findByPk(name, {\n    include: [{ **model: CredentialsModel, attributes: [\"username\"]**}]\n});\n... \n```", "```js\n...\nreturn (await RoleModel.findAll({\n    include: [{\n        model: CredentialsModel,\n        where: { username },\n       ** attributes: []**\n    }]\n})).map(rm => rm.name);\n... \n```", "```js\n**import { Express****, NextFunction, RequestHandler } from \"express\";**\nimport { AuthStore } from \"./auth_types\";\nimport { OrmAuthStore } from \"./orm_authstore\";\nimport jwt from \"jsonwebtoken\";\nconst jwt_secret = \"mytokensecret\";\nconst store: AuthStore = new OrmAuthStore();\ntype User = { username: string }\ndeclare module \"express-session\" {\n    interface SessionData { username: string; }\n}\ndeclare global {\n    module Express {\n        interface Request { user: User, authenticated: boolean }\n    }\n}\nexport const createAuth = (app: Express) => {\n    // ...other routes omitted for brevity...\n **app.get(\"/unauthorized\", async (req, resp) => {**\n **resp.render(\"unauthorized\");**\n **});**\n**}**\n**export const roleGuard = (role: string)**\n **: RequestHandler****<Request, Response, NextFunction> => {**\n **return async (req, resp, next) => {**\n **if (req.authenticated) {**\n **const username = req.user.username****;**\n **if (await store.validateMembership(username, role)) {**\n **next();**\n **return;**\n **}**\n **resp.redirect(\"/unauthorized\");**\n **} else {**\n **resp.redirect(\"/signin\"****);** \n **}**\n **}**\n} \n```", "```js\n<div class=\"bg-danger text-white  m-1 p-2\">\n    <div class=\"h2\">Unauthorized</div>\n    <div class=\"h4\">\n        You do not have permission to perform this operation\n    </div>\n</div>\n<a href=\"/\" class=\"btn btn-secondary mx-1\">Back</a> \n```", "```js\nimport express, { Express } from \"express\";\nimport repository  from \"./data\";\nimport cookieMiddleware from \"cookie-parser\";\nimport { sessionMiddleware } from \"./sessions/session_helpers\";\n**import { roleGuard }** **from \"./auth\";**\n**import { Result } from \"./data/repository\";**\nconst rowLimit = 10;\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}))\n    app.use(cookieMiddleware(\"mysecret\"));\n    app.use(sessionMiddleware());\n}\nexport const registerFormRoutes = (app: Express) => {\n    app.get(\"/form\", async (req, resp) => {\n        resp.render(\"data\", {data: await repository.getAllResults(rowLimit)});\n    });\n  **  app.post(\"/form/delete/:id\", roleGuard(\"Admins\"), async (req, resp) => {**\n **const id =** **Number.parseInt(req.params[\"id\"]);**\n        await repository.delete(id);\n        resp.redirect(\"/form\");\n        resp.end();\n    });\n\n   ** app.post(\"****/form/add\", roleGuard(\"Users\"), async (req, resp) => {**\n **const nextage = Number.parseInt(req.body[\"age\"])**\n **+ Number.****parseInt(req.body[\"years\"]);**\n **await repository.saveResult({...req.body, nextage } as Result);**\n        resp.redirect(\"/form\");\n        resp.end();\n    });\n} \n```", "```js\n...\nconst id = Number.parseInt(req.params.id);\n... \n```", "```js\n...\nconst id = Number.parseInt(req.params[\"id\"]);\n... \n```", "```js\nimport { Express, NextFunction, RequestHandler } from \"express\"\nimport { AuthStore } from \"./auth_types\";\nimport { OrmAuthStore } from \"./orm_authstore\";\nimport jwt from \"jsonwebtoken\";\n**import { HookContext } from \"@feathersjs/feathers\";**\nconst jwt_secret = \"mytokensecret\";\n// ...statements omitted for brevity...\nexport const roleGuard = (role: string)\n        : RequestHandler<Request, Response, NextFunction> => {\n    return async (req, resp, next) => {\n        if (req.authenticated) {\n            const username = req.user.username;\n            if (await store.validateMembership(username, role)) {\n                next();\n                return;\n            }\n            resp.redirect(\"/unauthorized\");\n        } else {\n            resp.redirect(\"/signin\");           \n        }\n    }\n}\n**export const roleHook = (****role: string) => {**\n **return async (ctx: HookContext) => {**\n **if (!ctx.params.authenticated) {**\n **ctx.http = { status:** **401 };**\n **ctx.result = {};**\n **} else if (!(await store.validateMembership(**\n **ctx.params.user.username, role))) {**\n **ctx.http = {** **status: 403 };**\n **ctx.result = {};**\n **}**\n **}**\n**}** \n```", "```js\nimport { Express } from \"express\";\nimport { createAdapter } from \"./http_adapter\";\nimport { ResultWebService } from \"./results_api\";\nimport { Validator } from \"./validation_adapter\";\nimport { ResultWebServiceValidation } from \"./results_api_validation\";\nimport { FeathersWrapper } from \"./feathers_adapter\";\nimport { feathers } from \"@feathersjs/feathers\";\nimport feathersExpress, { rest } from \"@feathersjs/express\";\nimport { ValidationError } from \"./validation_types\";\n**import { roleHook } from \"../auth\";**\nexport const createApi = (app: Express) => {\n    const feathersApp = feathersExpress(feathers(), app).configure(rest());\n    const service = new Validator(new ResultWebService(),\n        ResultWebServiceValidation);\n    **feathersApp.use('/api/results',**\n **(req, resp, next) => {**\n **req.feathers.user = req.user;**\n **req.****feathers.authenticated = req.authenticated;**\n **next();**\n **},**\n **new FeathersWrapper(service));**\n    feathersApp.hooks({\n        error: {\n            all: [(ctx) => {                       \n                    if (ctx.error instanceof ValidationError) {\n                        ctx.http = { status: 400};\n                        ctx.error = undefined;\n                    }\n                }]\n        },\n       **before: {**\n **create: [roleHook(\"Users\")],**\n **remove: [roleHook(\"Admins\")],**\n **update: [roleHook(\"Admins\")],**\n**patch: [roleHook(\"Admins\")]**\n **}** \n    });\n} \n```", "```js\nnpm run cmdline \n```", "```js\n? Select an operation Store\n? Name? Joe\n? Age? 30\n? Years? 10\n401 Unauthorized \n```", "```js\n...\n? Select an operation Sign In\n? Username? bob\n? Password? mysecret\n{\"success\":true,\"token\":\"eyJhbGciOi...<...data omitted...>\"}\n? Select an operation Store\n? Name? Joe\n? Age? 30\n? Years? 10\n201 Created\n... \n```", "```js\n...\n? Select an operation Delete\n? ID? 1\n403 Forbidden\n... \n```", "```js\n...\n? Username? alice\n? Password? mysecret\n{\"success\":true,\"token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFsaWNlIiwiaWF0IjoxNzA2NDY1NzM2LCJleHAiOjE3MDY0NjkzMzZ9.GWEZl6qypJpdX-csNifgIRjZksZTxc-Nf35uVnTq4Ss\"}\n? Select an operation Delete\n? ID? 1\ntrue\n... \n```", "```js\nnpm install passport@0.7.0\nnpm install passport-local@1.0.0\nnpm install passport-jwt@4.0.1\nnpm install --save-dev @types/passport@1.0.16\nnpm install --save-dev @types/passport-local@1.0.38\nnpm install --save-dev @types/passport-jwt@4.0.1 \n```", "```js\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy }  from \"passport-local\";\nimport { Strategy as JwtStrategy, ExtractJwt  } from \"passport-jwt\";\nimport { AuthStore } from \"./auth_types\";\ntype Config = {\n    jwt_secret: string,\n    store: AuthStore\n}\nexport const configurePassport = (config: Config) => {\n    passport.use(new LocalStrategy(async (username, password, callback) => {\n        if (await config.store.validateCredentials(username, password)) {\n            return callback(null, { username });\n        }\n        return callback(null, false);\n    }));\n    passport.use(new JwtStrategy({\n        jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n        secretOrKey: config.jwt_secret\n    }, (payload, callback) => {\n        return callback(null, { username: payload.username });\n    }));\n    passport.serializeUser((user, callback) => {\n        callback(null, user);\n    });\n    passport.deserializeUser((user, callback) => {\n        callback(null, user as Express.User );\n    });   \n} \n```", "```js\n...\nif (await config.store.validateCredentials(username, password)) {\n   ** return callback(null, { username });**\n**}**\n**return callback(null, false);**\n... \n```", "```js\nimport { Express, NextFunction, RequestHandler } from \"express\"\nimport { AuthStore } from \"./auth_types\";\nimport { OrmAuthStore } from \"./orm_authstore\";\nimport jwt from \"jsonwebtoken\";\nimport { HookContext } from \"@feathersjs/feathers\";\n**import passport** **from \"passport\";**\n**import { configurePassport } from \"./passport_config\";**\nconst jwt_secret = \"mytokensecret\";\nconst store: AuthStore = new OrmAuthStore();\n**//type User = { username: string }**\ndeclare module \"express-session\" {\n    interface SessionData { username: string; }\n}\ndeclare global {\n    module Express {\n       ** //interface Request { user: User, authenticated: boolean }**\n **interface Request { authenticated: boolean }**\n **interface User {**\n **username: string**\n **}**\n    }\n}\nexport const createAuth = (app: Express) => {\n    configurePassport({ store, jwt_secret });\n    app.get(\"/signin\", (req, resp) => {\n        const data = {\n            **// username: req.query[\"username\"],**\n **// password: req.query[\"password\"],**\n            failed: req.query[\"failed\"] ? true : false,\n            signinpage: true\n        }\n        resp.render(\"signin\", data);\n    });\n   ** app.post****(\"/signin\", passport.authenticate(\"local\", {**\n **failureRedirect: `/signin?failed=1`,**\n **successRedirect: \"/\"**\n **}));**\n **app.use(passport.authenticate****(\"session\"), (req, resp, next) => {**\n **resp.locals.user = req.user;**\n **resp.locals.authenticated**\n **= req.authenticated = req.user** **!== undefined;** \n **next();**\n **});**\n    app.post(\"/api/signin\", async (req, resp) => {\n        const username = req.body.username;\n        const password = req.body.password;\n        const result: any = {\n            success: await store.validateCredentials(username, password)\n        }\n        if (result.success) {\n            result.token = jwt.sign({username} , jwt_secret,\n                { expiresIn: \"1hr\"});\n        }\n        resp.json(result);\n        resp.end();   \n    });\n    app.post(\"/signout\", async (req, resp) => {\n        req.session.destroy(() => {\n            resp.redirect(\"/\");\n        })\n    });\n    app.get(\"/unauthorized\", async (req, resp) => {\n        resp.render(\"unauthorized\");\n    });\n}\nexport const roleGuard = (role: string)\n        : RequestHandler<Request, Response, NextFunction> => {\n    return async (req, resp, next) => {\n        if (req.authenticated) {\n           ** const username = req.user****?.username;**\n **if (username != undefined**\n **&& await store.validateMembership(username, role)) {**\n                next();\n                return;\n            }\n            resp.redirect(\"/unauthorized\");\n        } else {\n            resp.redirect(\"/signin\");\n        }\n    }\n}\nexport const roleHook = (role: string) => {\n    return async (ctx: HookContext) => {\n        if (!ctx.params.authenticated) {\n            ctx.http = { status: 401 };\n            ctx.result = {};\n        } else if (!(await store.validateMembership(\n                ctx.params.user.username, role))) {\n            ctx.http = { status: 403 };\n            ctx.result = {};\n        }\n    }\n} \n```", "```js\n...\napp.post(\"/signin\", passport.**authenticate**(\"local\", {\n... \n```", "```js\n...\napp.use(passport.**authenticate**(\"session\"), (req, resp, next) => {\n... \n```", "```js\nimport { Express } from \"express\";\nimport { createAdapter } from \"./http_adapter\";\nimport { ResultWebService } from \"./results_api\";\nimport { Validator } from \"./validation_adapter\";\nimport { ResultWebServiceValidation } from \"./results_api_validation\";\nimport { FeathersWrapper } from \"./feathers_adapter\";\nimport { feathers } from \"@feathersjs/feathers\";\nimport feathersExpress, { rest } from \"@feathersjs/express\";\nimport { ValidationError } from \"./validation_types\";\nimport { roleHook } from \"../auth\";\n**import passport from \"passport\";**\nexport const createApi = (app: Express) => {\n    const feathersApp = feathersExpress(feathers(), app).configure(rest());\n    const service = new Validator(new ResultWebService(),\n        ResultWebServiceValidation);\n    **feathersApp.use('/api/results',**\n **passport.authenticate(\"jwt\", { session: false** **}),**\n **(req, resp, next) => {**\n **req.feathers.user = req.user;**\n **req.feathers.authenticated**\n **= req.authenticated = req.user !== undefined****;**\n **next();**\n **},**\n **new FeathersWrapper(service));**\n    feathersApp.hooks({\n        error: {\n            all: [(ctx) => {                       \n                    if (ctx.error instanceof ValidationError) {\n                        ctx.http = { status: 400};\n                        ctx.error = undefined;\n                    }\n                }]\n        },\n        before: {\n            create: [roleHook(\"Users\")],\n            remove: [roleHook(\"Admins\")],\n            update: [roleHook(\"Admins\")],\n            patch: [roleHook(\"Admins\")]\n        }       \n    });\n} \n```"]