["```js\n    $ npx express-generator --no-view benchmarking-http\n    $ cd benchmarking-http\n    $ npm install\n    ```", "```js\n    $ npm install --global autocannon\n    ```", "```js\n    $ npm start\n    ```", "```js\n    $ autocannon --connections 100 http://localhost:3000/\n    ```", "```js\n$ autocannon --connections 100 --duration 20 http://localhost:3000/\n```", "```js\n    $ touch post-server.js\n    ```", "```js\n    const express = require('express');\n    const app = express();\n    const bodyParser = require('body-parser');\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n    app.post('/', (req, res) => {\n      res.send(req.body);\n    });\n    app.listen(3000, () => {\n      console.log('Server listening on port 3000');\n    });\n    ```", "```js\n    $ node post-server.js\n    ```", "```js\n    $ autocannon --connections 100 --method POST --headers 'content-type=application/json' --body '{ \"hello\": \"world\"}' http://localhost:3000/\n    ```", "```js\n    $ npx express-generator --views=pug benchmarking-views\n    $ cd benchmarking-views\n    $ npm install\n    ```", "```js\n    $ npm start\n    ```", "```js\n    $ autocannon --connections 100 http://localhost:3000/\n    ```", "```js\n    $ NODE_ENV=production npm start\n    ```", "```js\n    $ autocannon --connections 100 http://localhost:3000/\n    ```", "```js\n$ npx express-generator --views=pug flamegraph-app\n$ cd flamegraph-app\n$ npm install\n```", "```js\n    $ npm install --global autocannon 0x\n    ```", "```js\n    $ 0x ./bin/www\n    Profiling\n    ```", "```js\n    $ autocannon --connections 100 http://localhost:3000\n    ```", "```js\n    $ NODE_ENV=production 0x ./bin/www\n    ```", "```js\n    $ autocannon --connections 100 http://localhost:3000\n    ```", "```js\n    $ npm install --global autocannon\n    ```", "```js\n    $ mkdir profiling-memory\n    $ cd profiling-memory\n    $ npm init --yes\n    ```", "```js\n    $ touch leaky-server.js\n    ```", "```js\n    const http = require('node:http');\n    const server = http.createServer((req, res) => {\n      server.on('connection', () => { });\n      res.end('Hello World!');\n    });\n    server.listen(3000, () => {\n      console.log('Server listening on port 3000');\n    });\n    ```", "```js\n    $ node --max-old-space-size=10 leaky-server.js\n    Server listening on port 3000\n    ```", "```js\n    $ autocannon http://localhost:3000\n    ```", "```js\n    $ node --inspect leaky-server.js\n    ```", "```js\n    $ autocannon http://localhost:3000\n    ```", "```js\n    $ touch server.js\n    ```", "```js\n    const http = require('node:http');\n    const server = http.createServer((req, res) => {\n      res.end('Hello World!');\n    });\n    server.on('connection', () => {});\n    server.listen(3000, () => {\n      console.log('Server listening on port 3000');\n    });\n    ```", "```js\n$ node --max-old-space-size=10 leaky-server.js\nServer listening on port 3000\n(node:16402) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 11 connection listeners added to [Server]. Use emitter.setMaxListeners() to increase limit\n```", "```js\nconst http = require('node:http');\nconst server = http.createServer((req, res) => {\n  server.setMaxListeners(1);\n  server.on('connection', () => { });\n  res.end('Hello World!');\n});\nserver.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});\n```", "```js\n(node:16629) MaxListenersExceededWarning: Possible EventEmitter memory leak detected. 2 connection listeners added to [Server]. Use emitter.setMaxListeners() to increase limit\n```", "```js\nrequire('events').EventEmitter.defaultMaxListeners = 15;\n```", "```js\n    $ mkdir optimize-sync\n    $ cd optimize-sync\n    $ npm init --yes\n    ```", "```js\n    $ npm install benchmark\n    ```", "```js\n    $ touch slow.js\n    ```", "```js\n    function sumOfSquares(maxNumber) {\n      const array = Array.from(Array(maxNumber + 1).keys());\n      return array\n        .map((number) => {\n          return number ** 2;\n        })\n        .reduce((accumulator, item) => {\n          return accumulator + item;\n        });\n    }\n    ```", "```js\n    module.exports = sumOfSquares;\n    ```", "```js\n    $ touch benchmark.js\n    ```", "```js\n    const benchmark = require('benchmark');\n    const slow = require('./slow');\n    const suite = new benchmark.Suite();\n    const maxNumber = 100;\n    suite.add('slow', function () {\n      slow(maxNumber);\n    });\n    suite.on('complete', printResults);\n    suite.run();\n    function printResults () {\n      this.forEach((benchmark) => {\n        console.log(benchmark.toString());\n      });\n      console.log('Fastest implementation is', this.filter('fastest')[0].name);\n    }\n    ```", "```js\n    $ node benchmark.js\n    slow x 231,893 ops/sec ±0.90% (90 runs sampled)\n    Fastest implementation is slow\n    ```", "```js\n    $ npx 0x benchmark.js\n    ```", "```js\n    $ touch loop.js\n    ```", "```js\n    function sumOfSquares(maxNumber) {\n        let i = 0;\n        let sum = 0;\n        for (i; i <= maxNumber; i++) {\n            sum += i ** 2;\n        }\n        return sum;\n    }\n    module.exports = sumOfSquares;\n    ```", "```js\n    const loop = require('./loop');\n    ```", "```js\n    suite.add('loop', function () {\n      loop(maxNumber);\n    });\n    ```", "```js\n    $ node benchmark.js\n    slow x 247,958 ops/sec ±1.17% (90 runs sampled)\n    loop x 7,337,014 ops/sec ±0.86% (94 runs sampled)\n    Fastest implementation is loop\n    ```", "```js\n    $ docker run --publish 27017:27017 --name node-mongo --detach mongo:7\n    ```", "```js\n    $ mkdir optimize-async\n    $ cd optimize-async\n    $ npm init --yes\n    $ npm install express mongodb\n    ```", "```js\n    $ touch values.js\n    ```", "```js\n    const { MongoClient } = require('mongodb');\n    const URL = 'mongodb://localhost:27017/';\n    const numberOfValues = 1000;\n    const values = [];\n    for (let count = 0; count < numberOfValues; count++) {\n      values.push({ value: Math.round(Math.random() * 100000) });\n    }\n    async function main () {\n      const client = new MongoClient(URL);\n      try {\n        await client.connect();\n        const db = client.db('data');\n        await db.collection('values').insertMany(values);\n        console.log(`Added ${numberOfValues} random values.`);\n      } catch (err) {\n        console.error(err);\n      } finally {\n        await client.close();\n      }\n    }\n    main().catch(console.error);\n    ```", "```js\n    $ node values.js\n    ```", "```js\n    $ npm install --global 0x autocannon\n    ```", "```js\n    $ touch server.js\n    ```", "```js\n    const { MongoClient } = require('mongodb');\n    const express = require('express');\n    const URL = 'mongodb://localhost:27017/';\n    const app = express();\n    (async () => {\n      try {\n        const client = new MongoClient(URL);\n        await client.connect();\n        const db = client.db('data');\n        const values = db.collection('values');\n        app.get('/', async (req, res) => {\n          try {\n            const data = await values.find({}).toArray();\n            const average =\n              data.reduce((accumulator, value) => accumulator + value.value, 0) /\n              data.length;\n            res.send(`Average of all values is ${average}.`);\n          } catch (err) {\n            res.send(err);\n          }\n        });\n        app.listen(3000, () => {\n          console.log('Server is running on port 3000');\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    })();\n    ```", "```js\n    $ node server.js\n    Server is running on port 3000\n    ```", "```js\n    $ autocannon --connections 500 http://localhost:3000\n    ```", "```js\n    $ 0x server.js\n    ```", "```js\n    $ autocannon --connections 500 http://localhost:3000\n    ```", "```js\n    $ touch calculate-average.js\n    ```", "```js\n    const { MongoClient } = require('mongodb');\n    const URL = 'mongodb://localhost:27017/';\n    async function main () {\n      const client = new MongoClient(URL);\n      try {\n        await client.connect();\n        const db = client.db('data');\n        const values = db.collection('values');\n        const averages = db.collection('averages');\n        const data = await values.find({}).toArray();\n        // Calculate average\n        const average =\n          data.reduce((accumulator, value) => accumulator + value.value, 0) /\n          data.length;\n        await averages.insertOne({ value: average });\n        console.log('Stored average in database.');\n      } catch (err) {\n        console.error(err);\n      } finally {\n        await client.close();\n      }\n    }\n    main().catch(console.error);\n    ```", "```js\n    $ node calculate-average.js\n    Stored average in database.\n    ```", "```js\n    $ touch server-no-processing.js\n    ```", "```js\n    const { MongoClient } = require('mongodb');\n    const express = require('express');\n    const URL = 'mongodb://localhost:27017/';\n    const app = express();\n    async function main () {\n      const client = new MongoClient(URL);\n      try {\n        await client.connect();\n        const db = client.db('data');\n        const average = db.collection('averages');\n        app.get('/', async (req, res) => {\n          try {\n            const data = await average.findOne({});\n            res.send(`Average of all values is ${data.value}.`);\n          } catch (err) {\n            console.error(err);\n            res.status(500).send('Error fetching average');\n          }\n        });\n        app.listen(3000, () => {\n          console.log('Server is listening on port 3000');\n        });\n      } catch (err) {\n        console.error(err);\n      }\n    }\n    main().catch(console.error);\n    ```", "```js\n    $ autocannon --connections 500 http://localhost:3000\n    ```", "```js\n$ mkdir worker-app\n$ cd worker-app\n```", "```js\n    $ touch hello-worker.js\n    ```", "```js\n    const {\n      Worker,\n      isMainThread,\n      parentPort,\n      workerData\n    } = require('node:worker_threads');\n    ```", "```js\n    if (isMainThread) {\n      // Main thread code\n    } else {\n      // Worker code\n    }\n    ```", "```js\n      const worker = new Worker(__filename, {\n        workerData: 'Beth'\n      });\n    ```", "```js\n      worker.on('message', (msg) => {\n        console.log(msg);\n      });\n    ```", "```js\n      const greeting = `Hello ${workerData}!`;\n      parentPort.postMessage(greeting);\n    ```", "```js\n    $ node hello-worker.js\n    Hello Beth!\n    ```", "```js\n    $ touch fibonacci.js\n    ```", "```js\n    const n = 10;\n    // Fibonacci calculator\n    const fibonacci = (n) => {\n      let a = 0;\n      let b = 1;\n      let next = 1;\n      let i = 2;\n      for (i; i <= n; i++) {\n        next = a + b;\n        a = b;\n        b = next;\n      }\n      console.log(`The Fibonacci number at position ${n} is ${next}`);\n    };\n    fibonacci(n);\n    console.log('...');\n    ```", "```js\n    $ node fibonacci.js\n    The Fibonacci number at position 10 is 55\n    ...\n    ```", "```js\n    $ touch fibonacci-worker.js\n    ```", "```js\n    const {\n      Worker,\n      isMainThread,\n      parentPort,\n      workerData\n    } = require('node:worker_threads');\n    ```", "```js\n    const n = 10;\n    // Fibonacci calculator\n    const fibonacci = (n) => {\n      let a = 0;\n      let b = 1;\n      let next = 1;\n      let i = 2;\n      for (i; i <= n; i++) {\n        next = a + b;\n        a = b;\n        b = next;\n      }\n      return next;\n    };\n    ```", "```js\n    if (isMainThread) {\n      // Main thread code\n      const worker = new Worker(__filename, {\n        workerData: n\n      });\n      worker.on('message', (msg) => {\n        console.log(`The Fibonacci number at position ${n} is ${msg}`);\n      });\n      console.log('...');\n    } else {\n      // Worker code\n      parentPort.postMessage(fibonacci(workerData));\n    }\n    ```", "```js\n    $ node fibonacci-worker.js\n    ...\n    The Fibonacci number at position 10 is 55\n    ```", "```js\n  const worker = new Worker(__filename, {\n    workerData: n,\n  });\n```"]