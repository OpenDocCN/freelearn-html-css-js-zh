- en: '*Chapter 11*: Using Bootstrap 5 with Advanced JavaScript Features'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn about some advanced JavaScript features that
    can be used with the interactive components of Bootstrap 5\. First, we will get
    a quick overview of the interactive components and see which requirements they
    have in common in terms of dependencies and initialization. Then, we will see
    how we can initialize interactive components with either data attributes or JavaScript.
    Following this, we will see how we can define options with either data attributes
    or JavaScript, and finally, we will take a closer look at how we can use JavaScript
    for methods and events.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Interactive components of Bootstrap 5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initializing interactive components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining options for interactive components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using JavaScript methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using JavaScript events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To preview the examples, you will need a code editor and a browser. The source
    code for all code examples can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: https://github.com/PacktPublishing/The-Missing-Bootstrap-5-Guide
  prefs: []
  type: TYPE_NORMAL
- en: Interactive components of Bootstrap 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start this chapter by getting an overview of the interactive components
    of Bootstrap 5\. For each component listed here, we will see which JavaScript
    file is being used, whether it requires custom initialization, which options,
    methods, and events it has, whether it has any dependencies, and for some of them
    also some additional information. In the following sections, we will then look
    closer at initialization, options, methods, and events, so this should just be
    regarded as an overview. At the end of the list, there’s also a summary to highlight
    the most important differences.
  prefs: []
  type: TYPE_NORMAL
- en: Accordion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This component is built using the collapse component described later.
  prefs: []
  type: TYPE_NORMAL
- en: Alert
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`alert.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom initialization**: No'
  prefs: []
  type: TYPE_NORMAL
- en: '**Options**: None'
  prefs: []
  type: TYPE_NORMAL
- en: '`close`, `dispose`, `getInstance`, `getOrCreateInstance`'
  prefs: []
  type: TYPE_NORMAL
- en: '`close.bs.alert`, `closed.bs.alert`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dependencies**: None'
  prefs: []
  type: TYPE_NORMAL
- en: This component can be dismissed with the close button component.
  prefs: []
  type: TYPE_NORMAL
- en: Button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`button.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom initialization**: No'
  prefs: []
  type: TYPE_NORMAL
- en: '**Options**: None'
  prefs: []
  type: TYPE_NORMAL
- en: '`toggle`, `dispose`, `getInstance`, `getOrCreateInstance`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Events**: None'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dependencies**: None'
  prefs: []
  type: TYPE_NORMAL
- en: Carousel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`carousel.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom initialization**: No'
  prefs: []
  type: TYPE_NORMAL
- en: '`interval`, `keyboard`, `pause`, `ride`, `wrap`, `touch`'
  prefs: []
  type: TYPE_NORMAL
- en: '`cycle`, `pause`, `prev`, `next`, `nextWhenVisible`, `to`, `dispose`, `getInstance`,
    `getOrCreateInstance`'
  prefs: []
  type: TYPE_NORMAL
- en: '`slide.bs.carousel`, `slid.bs.carousel`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dependencies**: None'
  prefs: []
  type: TYPE_NORMAL
- en: Collapse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`collapse.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom initialization**: No'
  prefs: []
  type: TYPE_NORMAL
- en: '`parent`, `toggle`'
  prefs: []
  type: TYPE_NORMAL
- en: '`toggle`, `show`, `hide`, `dispose`, `getInstance`, `getOrCreateInstance`'
  prefs: []
  type: TYPE_NORMAL
- en: '`show.bs.collapse`, `shown.bs.collapse`, `hide.bs.collapse`, `hidden.bs.collapse`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dependencies**: None'
  prefs: []
  type: TYPE_NORMAL
- en: Dropdown
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`dropdown.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom initialization**: No'
  prefs: []
  type: TYPE_NORMAL
- en: '`boundary`, `reference`, `display`, `offset`, `autoClose`, `popperConfig`'
  prefs: []
  type: TYPE_NORMAL
- en: '`toggle`, `show`, `hide`, `update`, `dispose`, `getInstance`, `getOrCreateInstance`'
  prefs: []
  type: TYPE_NORMAL
- en: '`show.bs.dropdown`, `shown.bs.dropdown`, `hide.bs.dropdown`, `hidden.bs.dropdown`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dependencies**: Popper'
  prefs: []
  type: TYPE_NORMAL
- en: This component requires the external third-party library Popper for positioning.
    It must be included before `bootstrap.js` or by using `bootstrap.bundle.js`, which
    contains Popper.
  prefs: []
  type: TYPE_NORMAL
- en: List group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This component uses `tab.js` to create tab navigation based on list groups.
    Please refer to the details for navs and tabs, which use the same JavaScript file.
  prefs: []
  type: TYPE_NORMAL
- en: Modal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`modal.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom initialization**: No'
  prefs: []
  type: TYPE_NORMAL
- en: '`backdrop`, `keyboard`, `focus`'
  prefs: []
  type: TYPE_NORMAL
- en: '`toggle`, `show`, `hide`, `handleUpdate`, `dispose`, `getInstance`, `getOrCreateInstance`'
  prefs: []
  type: TYPE_NORMAL
- en: '`show.bs.modal`, `shown.bs.modal`, `hide.bs.modal`, `hidden.bs.modal`, `hidePrevented.bs.modal`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dependencies**: None'
  prefs: []
  type: TYPE_NORMAL
- en: Navs and tabs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`tab.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom initialization**: No'
  prefs: []
  type: TYPE_NORMAL
- en: '**Options**: None'
  prefs: []
  type: TYPE_NORMAL
- en: '`show`, `dispose`, `getInstance`, `getOrCreateInstance`'
  prefs: []
  type: TYPE_NORMAL
- en: '`show.bs.tab`, `shown.bs.tab`, `hide.bs.tab`, `hidden.bs.tab`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dependencies**: None'
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript file used by this component is also used by the list group component.
  prefs: []
  type: TYPE_NORMAL
- en: Offcanvas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`offcanvas.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom initialization**: No'
  prefs: []
  type: TYPE_NORMAL
- en: '`backdrop`, `keyboard`, `scroll`'
  prefs: []
  type: TYPE_NORMAL
- en: '`toggle`, `show`, `hide`, `getInstance`, `getOrCreateInstance`'
  prefs: []
  type: TYPE_NORMAL
- en: '`show.bs.offcanvas`, `shown.bs.offcanvas`, `hide.bs.offcanvas`, `hidden.bs.offcanvas`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dependencies**: None'
  prefs: []
  type: TYPE_NORMAL
- en: Popover
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`popover.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom initialization**: Yes'
  prefs: []
  type: TYPE_NORMAL
- en: '`animation`, `container`, `content`, `delay`, `html`, `placement`, `selector`,
    `template`, `title`, `trigger`, `fallbackPlacements`, `boundary`, `customClass`,
    `sanitize`, `allowList`, `sanitizeFn`, `offset`, `popperConfig`'
  prefs: []
  type: TYPE_NORMAL
- en: '`show`, `hide`, `toggle`, `dispose`, `enable`, `disable`, `toggleEnabled`,
    `update`, `getInstance`, `getOrCreateInstance`'
  prefs: []
  type: TYPE_NORMAL
- en: '`show.bs.popover`, `shown.bs.popover`, `hide.bs.popover`, `hidden.bs.popover`,
    `inserted.bs.popover`'
  prefs: []
  type: TYPE_NORMAL
- en: '`tooltip.js`, Popover'
  prefs: []
  type: TYPE_NORMAL
- en: This component requires `tooltip.js` as a dependency. It also requires the external
    third-party library Popper for positioning. The latter must be included before
    `bootstrap.js` or by using `bootstrap.bundle.js`, which contains Popper.
  prefs: []
  type: TYPE_NORMAL
- en: Scrollspy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`scrollspy.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom initialization**: No'
  prefs: []
  type: TYPE_NORMAL
- en: '`rootMargin`, `smoothScroll`, `target`'
  prefs: []
  type: TYPE_NORMAL
- en: '`refresh`, `dispose`, `getInstance`, `getOrCreateInstance`'
  prefs: []
  type: TYPE_NORMAL
- en: '`activate.bs.scrollspy`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dependencies**: None'
  prefs: []
  type: TYPE_NORMAL
- en: Toast
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`toast.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom initialization**: Yes'
  prefs: []
  type: TYPE_NORMAL
- en: '`animation`, `autohide`, `delay`'
  prefs: []
  type: TYPE_NORMAL
- en: '`show`, `hide`, `dispose`, `getInstance`, `getOrCreateInstance`'
  prefs: []
  type: TYPE_NORMAL
- en: '`show.bs.toast`, `shown.bs.toast`, `hide.bs.toast`, `hidden.bs.toast`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dependencies**: None'
  prefs: []
  type: TYPE_NORMAL
- en: Tooltip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`tooltip.js`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom initialization**: Yes'
  prefs: []
  type: TYPE_NORMAL
- en: '`animation`, `container`, `delay`, `html`, `placement`, `selector`, `template`,
    `title`, `trigger`, `fallbackPlacements`, `boundary`, `customClass`, `sanitize`,
    `allowList`, `sanitizeFn`, `offset`, `popperConfig`'
  prefs: []
  type: TYPE_NORMAL
- en: '`show`, `hide`, `toggle`, `dispose`, `enable`, `disable`, `toggleEnabled`,
    `update`, `getInstance`, `getOrCreateInstance`'
  prefs: []
  type: TYPE_NORMAL
- en: '`show.bs.tooltip`, `shown.bs.tooltip`, `hide.bs.tooltip`, `hidden.bs.tooltip`,
    `inserted.bs.tooltip`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dependencies**: Popover'
  prefs: []
  type: TYPE_NORMAL
- en: This component requires the external third-party library Popper for positioning.
    It must be included before `bootstrap.js` or by using `bootstrap.bundle.js`, which
    contains Popper.
  prefs: []
  type: TYPE_NORMAL
- en: The `tooltip.js` file is required by the popover component as a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: We just ran through a list of all of the 15 components that use JavaScript in
    some way or another. Now, we will summarize this and highlight the most important
    differences among the components. Under the next four headings, we will therefore
    see which components stand out from the crowd.
  prefs: []
  type: TYPE_NORMAL
- en: Requires initialization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Components**: Popover, toast, tooltip'
  prefs: []
  type: TYPE_NORMAL
- en: These components can’t be initialized with the use of data attributes due to
    performance reasons. Hence, they must instead be initialized using custom JavaScript.
    We will see how in the *Initializing interactive components* section.
  prefs: []
  type: TYPE_NORMAL
- en: Has dependencies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Components**: Dropdown, popover, tooltip'
  prefs: []
  type: TYPE_NORMAL
- en: These components all require the external third-party library Popper for positioning.
    It must be included before `bootstrap.js` or by using `bootstrap.bundle.js`, which
    contains Popper.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, the popover component also requires the `tooltip.js` JavaScript
    file from the tooltip component as a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: Has no options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Components**: Alert, button, navs, and tabs'
  prefs: []
  type: TYPE_NORMAL
- en: These components don’t have any options.
  prefs: []
  type: TYPE_NORMAL
- en: Has no events
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Component**: Button'
  prefs: []
  type: TYPE_NORMAL
- en: This component doesn’t have any events.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing interactive components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how we can initialize interactive components in
    two different ways. First, we will see how we can do it with data attributes in
    the HTML, which is the default way, which you might have already been using. Then,
    we will see how we can do it with JavaScript instead. We can initialize most of
    the interactive components that come with Bootstrap 5 using data attributes and
    without adding any extra JavaScript code ourselves, while some of them we must
    initialize with our own JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing interactive components using data attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can initialize most of the interactive components that come with Bootstrap
    5 using data attributes and without adding any extra JavaScript code ourselves.
    For most components, we use the `data-bs-toggle` data attribute, with the value
    being the name of the component, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: However, for the carousel component, we must use `data-bs-ride="carousel"`,
    for the scrollspy component we must use `data-bs-spy="scroll"`, and, to dismiss
    the alert or offcanvas component, we must use `data-bs-dismiss="[alert/offcanvas]"`.
  prefs: []
  type: TYPE_NORMAL
- en: Other required data attributes
  prefs: []
  type: TYPE_NORMAL
- en: Various other data attributes are required for some components to make them
    work. The data attributes mentioned above are just the ones used to initialize
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing interactive components using JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we saw in the list at the beginning of this chapter, we must initialize some
    of the interactive components with our own JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, we want to create a tooltip component for the following badge
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `<div>` tag has the `title` attribute that is used by the tooltip component.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can initialize an interactive component by using the constructor function
    in JavaScript to create and initialize an object instance of a class using the
    `new` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, `element` can be either a DOM element or a CSS selector and `options`
    is an object and is optional. Options can still be defined using data attributes,
    even though we are initializing a component with JavaScript. We will learn more
    about options in the *Defining options for interactive components* section.
  prefs: []
  type: TYPE_NORMAL
- en: Using a DOM element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To initialize an interactive component using a DOM element, we must first store
    it in a variable, and then use that variable as a reference to the DOM element.
    Here’s an example of how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/initialization/index.xhtml line 14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: part-3/chapter-11/examples/initialization/js/script.js line 1-2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, we stored the element with `id="tooltipDOM"` in the `element`
    variable, which we then passed as an argument to the constructor function. We
    didn’t pass any options since we will take a closer look at that later in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Using a CSS selector
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To initialize an interactive component using a CSS selector, we can simply
    pass it as the argument to the constructor function. The element is then found
    using the `querySelector()` method. Here’s an example of how to do this using
    the ID of the `<div>` element as the selector:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/initialization/index.xhtml line 19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: part-3/chapter-11/examples/initialization/js/script.js line 4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Initializing multiple components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The various JavaScript plugins for the interactive components only support a
    single element. So, to initialize multiple elements, we can call the constructor
    function for each element in a list or an array. We will now see two different
    examples of how we can do just that.
  prefs: []
  type: TYPE_NORMAL
- en: Using a for loop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the first example, we will use the following HTML with three identical
    badge components that all have the same `tooltipLoop` class:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/initialization/index.xhtml line 24-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When using a `for` loop, we first store all `<div>` elements in the `tooltipLoopElements`
    variable. Then, we loop through this NodeList and call the constructor function
    for each element:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/initialization/js/script.js line 6-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using the map method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the second example, we will use the following HTML with three identical
    badge components that all have the same `tooltipMap` class:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/initialization/index.xhtml line 31-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'When using the `map()` method, we first store all `<div>` elements in the `tooltipMapElements`
    variable. However, this time we use the `slice()` and `call()` methods to turn
    the NodeList into an array. Then, we create a new array using the `map()` method
    and store it in the `tooltipMap` variable. For every element in the array, we
    call the constructor function like before:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/initialization/js/script.js line 11-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Data attribute required for the dropdown component
  prefs: []
  type: TYPE_NORMAL
- en: Even if you choose to initialize the dropdown component using JavaScript, the
    `data-bs-toggle="dropdown"` data attribute is still required on the trigger element
    for the dropdown.
  prefs: []
  type: TYPE_NORMAL
- en: We have now learned how to initialize interactive components in various ways.
    We will continue to learn how to define options for interactive components.
  prefs: []
  type: TYPE_NORMAL
- en: Defining options for interactive components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the list at the beginning of this chapter, we saw which options were available
    for interactive components. In the official documentation of Bootstrap 5, you
    will find a table describing all of the available options (if any) for each component.
    In this table, you will find the name, type, default value, and description for
    each option. You can access the components in the official documentation through
    this link: [getbootstrap.com/docs/5.1/components](http://getbootstrap.com/docs/5.1/components).'
  prefs: []
  type: TYPE_NORMAL
- en: Default options for all components of a type and common options for a group
    of components can be set via JavaScript, while options for individual components
    can be passed either via data attributes or via JavaScript. Let’s now see how
    this is done.
  prefs: []
  type: TYPE_NORMAL
- en: Defining default options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can change the default value for an option for a component by using the
    following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'As an example, we can set our tooltip components to have a default delay of
    1,000 milliseconds in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Defining options using data attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To define options using data attributes, we append the option name to `data-bs-`,
    and the case type of the option name should be changed from *camelCase* to *kebab-case*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s see how we can initialize a tooltip component with an option for
    how to trigger it. For this purpose, we can use the `trigger` option, which accepts
    a value of the `string` type. The default is `‘hover focus’`, and the possible
    values are `‘click | hover | focus | manual’`. We will make the tooltip trigger
    on click only using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The tooltip will now only be triggered on click for both showing and hiding
    – just like the popover component. Keep in mind that the previous code on its
    own will not initialize the tooltip component. As we just learned, this must be
    done with our own JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: Options that can’t be set using data attributes
  prefs: []
  type: TYPE_NORMAL
- en: 'The following options used by the popover and tooltip components can’t be set
    using data attributes due to security reasons: `sanitize`, `sanitizeFn`, and `allowList`.
    These are all related to using HTML in the content of the tooltip or popover.'
  prefs: []
  type: TYPE_NORMAL
- en: Defining options using JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned earlier in this chapter, it’s possible to pass an optional `options`
    object to the constructor when initializing an interactive component with JavaScript.
    To repeat, the syntax looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To define an option with an object, we simply use the option name as a property
    of the object and then give it a valid value depending on the type of option.
    Initializing the same tooltip component as before, with the `trigger` option set
    to `click`, will then look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The tooltip will now only be triggered on click for both showing and hiding.
  prefs: []
  type: TYPE_NORMAL
- en: Defining default, common, and individual options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned previously, we can define default, common, and individual options
    for components using JavaScript and data attributes. This is useful if you want
    to define some default options for all components of a type, options with the
    same value for a group of components, and individual options with different values
    for each instance of a component.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now see an example where we make use of all of this. In our HTML, we
    have four badge components to which we want to add a tooltip component. On each
    of the `<div>` elements, we define the placement for the tooltip using the `data-bs-placement`
    data attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/options/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in our JavaScript, we first define the default option for `delay` and
    set it to `1000` milliseconds. After that, we initialize the components using
    JavaScript with the `trigger` option set to `‘click’`:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/options/js/script.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The four badge components will now have a tooltip component each that will trigger
    on click with a delay of 1,000 milliseconds. The tooltips will be placed at the
    top, bottom, left, and right respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Using data attributes and JavaScript for the same option
  prefs: []
  type: TYPE_NORMAL
- en: If you specify the same option with both a data attribute and using JavaScript,
    the JavaScript setting will take precedence.
  prefs: []
  type: TYPE_NORMAL
- en: Using JavaScript methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the list at the beginning of this chapter, we saw that all interactive components
    have methods. In the official documentation of Bootstrap 5, you will find a table
    describing all of the available methods for each component. In this table, you
    will find the name and description for each method. You can access the components
    in the official documentation through this link: [getbootstrap.com/docs/5.2/components](http://getbootstrap.com/docs/5.2/components).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will see some examples of how to use specific methods for the tooltip
    component. In our example page, we first have a default tooltip component for
    comparison. The HTML for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/methods/index.xhtml line 15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The tooltip has the `id="tooltipDefault"` attribute, which we use to initialize
    it with the following JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/methods/js/script.js line 1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the tooltip is placed at the bottom using the `placement` option.
    This is simply to make the example page better visually.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the next tooltip component on the example page, we want it to show when
    the page loads and, at the same time, disable triggering on hover and focus. The
    HTML is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/methods/index.xhtml line 21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The tooltip has the `id="tooltipOnLoad"` attribute, which we will use for initialization.
    The JavaScript code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/methods/js/script.js line 3-4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The tooltip is placed at the bottom using the `placement` option and the method
    to trigger the tooltip is set to `manual`. This means that the tooltip will be
    triggered programmatically using JavaScript, which is exactly what we do in the
    line below where we call the `show()` method on the initialized tooltip component.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our final tooltip component on the example page, we want to toggle its
    visibility when we click a button placed elsewhere on the page. The HTML for this
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/methods/index.xhtml line 27-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The button has the `id="triggerForTooltip"` attribute, which we will use to
    attach an event listener, and the tooltip has the `id="tooltipOnButtonClick"`
    attribute, which we will use for initialization. The JavaScript code looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/methods/js/script.js line 6-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The first line is similar to the previous example: the tooltip is placed at
    the bottom using the `placement` option and the method to trigger the tooltip
    is set to `manual`. Below that, we first get the button element and then attach
    a `click` event to it and execute the `toggle()` method when the button is clicked.
    This will show and hide the tooltip.'
  prefs: []
  type: TYPE_NORMAL
- en: Asynchronous methods and transitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It’s important to know that all methods are asynchronous and start a transition.
    As soon as that transition is started, they return to the caller. This means that
    a method call on a component that is currently transitioning is ignored. Take
    the following example, which will show the modal, but not hide it, since the `hide()`
    method is called immediately after `show()` and therefore before the transition
    to show that the modal is finished:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead, if we want to execute some code when the transition is finished, we
    need to listen to the corresponding event, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Now, the modal will first show and then hide again when the modal’s `shown`
    event is fired. In the next section, we will see another example of how to use
    Bootstrap 5 events.
  prefs: []
  type: TYPE_NORMAL
- en: Using JavaScript events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the list at the beginning of this chapter, we saw that most interactive
    components have events. In the official documentation of Bootstrap 5, you will
    find a table describing all of the available events for each component. In this
    table, you will find the event type and description for each method. You can access
    the components in the official documentation through this link: [getbootstrap.com/docs/5.2/components](http://getbootstrap.com/docs/5.2/components).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will see an example of how to use a specific event for the tooltip component.
    In our example page, we have a button that triggers a modal component. In the
    modal footer, we have a **Confirm** button on which we want to show a tooltip
    when the modal is shown and the transition is finished.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what the HTML looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/events/index.xhtml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'The tooltip has the `id="tooltip"`, which we will use for initialization, and
    the content for the tooltip is placed in a `title` attribute. In the JavaScript
    code, we first store the DOM element of the modal in a variable and initialize
    the tooltip component. Then, in an event listener attached to the modal, we listen
    to the `shown.bs.modal` event and call the `show()` method on the tooltip component
    when it fires. The JavaScript code for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: part-3/chapter-11/examples/events/js/script.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: This example will now show the tooltip exactly when the transition for the modal
    is finished.
  prefs: []
  type: TYPE_NORMAL
- en: Events with properties
  prefs: []
  type: TYPE_NORMAL
- en: 'The two events for the carousel component have the following additional properties:
    `direction` (`"left"` or `"right"`), `relatedTarget` (DOM element), `from` (index
    number), and `to` (index number).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about some advanced JavaScript features that
    can be used with the interactive components of Bootstrap 5\. First, we got a quick
    overview of the interactive components and saw which requirements they have in
    common in terms of dependencies and initialization. Then, we saw how we can initialize
    interactive components with either data attributes or JavaScript. Following this,
    we saw how we can define options with either data attributes or JavaScript, and
    finally, we took a closer look at how we can use JavaScript for methods and events.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final chapter of this book, we will learn how to optimize the
    compiled Bootstrap 5 CSS and JavaScript code.
  prefs: []
  type: TYPE_NORMAL
