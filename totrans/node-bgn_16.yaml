- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Deploying Node.js Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署 Node.js 应用程序
- en: In this chapter, we will learn how to deploy our application to the public internet.
    We will learn how important it is to have a clear definition of the requirements
    and how to choose the best solution for our needs. We will push the application
    code to the GitHub repository in order to use GitHub Actions for continuous integration.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何将我们的应用程序部署到公共互联网。我们将了解明确定义需求的重要性以及如何选择最适合我们需求的解决方案。我们将把应用程序代码推送到
    GitHub 仓库，以便使用 GitHub Actions 进行持续集成。
- en: Finally, We will deploy the application in DigitalOcean and we will use PM2
    to keep the application running. We will configure and use MongoDB Atlas to host
    the database in the cloud.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将在 DigitalOcean 上部署应用程序，并使用 PM2 保持应用程序运行。我们将配置并使用 MongoDB Atlas 在云端托管数据库。
- en: 'To sum up, here are the main topics that we will explore in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，以下是本章我们将探讨的主要主题：
- en: How to define the requirements and how to choose the best solution for our needs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何定义需求以及如何选择最适合我们需求的最佳解决方案
- en: How to push the application code to the GitHub repository
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将应用程序代码推送到 GitHub 仓库
- en: How to use MongoDB Atlas to host the database as an external resource
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 MongoDB Atlas 将数据库作为外部资源托管
- en: How to use DigitalOcean Droplet to host the application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 DigitalOcean Droplet 托管应用程序
- en: How to use PM2 to keep the application running
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 PM2 保持应用程序运行
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术需求
- en: 'You will need to create accounts with the following providers in order to follow
    the examples in this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了遵循本章中的示例，您需要创建以下提供商的账户：
- en: 'DigitalOcean: [https://www.digitalocean.com/](https://www.digitalocean.com/)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'DigitalOcean: [https://www.digitalocean.com/](https://www.digitalocean.com/)'
- en: 'MongoDB Atlas: [https://www.mongodb.com/docs/atlas/tutorial/create-atlas-account/](https://www.mongodb.com/docs/atlas/tutorial/create-atlas-account/)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MongoDB Atlas: [https://www.mongodb.com/docs/atlas/tutorial/create-atlas-account/](https://www.mongodb.com/docs/atlas/tutorial/create-atlas-account/)'
- en: 'GitHub: [https://github.com/signup](https://github.com/signup)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'GitHub: [https://github.com/signup](https://github.com/signup)'
- en: The code files for the chapter can be found at [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在 [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)
    找到。
- en: Check out the code in action video for this chapter on [https://youtu.be/cWkqR2xJJ0k](https://youtu.be/cWkqR2xJJ0k)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 查看本章的操作视频代码在 [https://youtu.be/cWkqR2xJJ0k](https://youtu.be/cWkqR2xJJ0k)
- en: Note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'We will use DigitalOcean to host the application, but you can use any other
    provider or even your own laptop (as an alternative). If you don’t have a DigitalOcean
    account, you can create one here: [https://www.digitalocean.com/](https://www.digitalocean.com/).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 DigitalOcean 来托管应用程序，但你也可以使用任何其他提供商，甚至是你自己的笔记本电脑（作为替代方案）。如果你没有 DigitalOcean
    账户，你可以在这里创建一个：[https://www.digitalocean.com/](https://www.digitalocean.com/)。
- en: Defining the requirements
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义需求
- en: We have the application working on our computer, but we need to deploy it to
    the public internet. So, we need to define the requirements in order to choose
    the best solution for our needs.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在计算机上使应用程序运行，但我们需要将其部署到公共互联网。因此，我们需要定义需求，以便选择最适合我们需求的最佳解决方案。
- en: 'First of all, we need to consider the following technical questions:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要考虑以下技术问题：
- en: '*What is the target environment* (*bare metal, VMs, containers, cloud solutions...*)*?*
    As our application uses Node.js and standard NPM libraries, we can deploy it easily
    directly in bare metal machines or VMs. Other solutions are also possible but
    require some work to be done in terms of configuration.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目标环境是什么* (*裸机，虚拟机，容器，云解决方案...*)*？* 由于我们的应用程序使用 Node.js 和标准 NPM 库，我们可以轻松地在裸机或虚拟机上直接部署它。其他解决方案也是可能的，但需要在配置方面做一些工作。'
- en: '*What is the target platform* (*AWS, Azure, GCP, DigitalOcean, Heroku...*)*?*
    In our case, we don’t expect much traffic or many users at all. Also, we are not
    working in a team and don’t have any specific requirements, such as a Service-Level
    Agreement (SLA). We can safely choose to use the most simple provider in terms
    of the onboarding process that also has competitive pricing. In our case, we will
    use DigitalOcean.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目标平台是什么* (*AWS, Azure, GCP, DigitalOcean, Heroku...*)*？* 在我们的案例中，我们预期不会有太多流量或用户。此外，我们不是在团队中工作，也没有任何具体要求，例如服务级别协议（SLA）。我们可以安全地选择使用最简单的提供商，该提供商在入职流程方面具有竞争力定价。在我们的案例中，我们将使用
    DigitalOcean。'
- en: '*What is the target operating system* (*Linux, Windows, macOS...*)*?* Node.js
    is capable of running on common and exotic operating systems. Our application
    does not have any special dependencies on an operating system so we can easily
    choose Linux as it is the most popular OS for servers and also has the most extensive
    offering of the providers.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目标操作系统是什么*（Linux, Windows, macOS...）*？* Node.js 能够在常见的和异构的操作系统上运行。我们的应用程序对操作系统没有特殊依赖，因此我们可以轻松选择
    Linux，因为它是服务器上最受欢迎的操作系统，并且提供了最广泛的提供商服务。'
- en: '*What is the target architecture* (*x86, ARM...*)*?* In this case, our application
    is pure JavaScript. Node.js supports both architectures (x86 and ARM), so we can
    easily choose x86 because it is a more common architecture for servers, often
    with lower prices.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目标架构是什么*（x86, ARM...）*？* 在这种情况下，我们的应用程序是纯 JavaScript。Node.js 支持这两种架构（x86 和
    ARM），因此我们可以轻松选择 x86，因为它是一种更常见的服务器架构，通常价格更低。'
- en: '*What is the target Node.js version* (*18, 20, 21...*)*?* We have a clear dependency
    on Node.js 20.11.0, as we used this version while developing the application,
    but we can be sure that the application should work on any Node.js 20 LTS version.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目标 Node.js 版本是什么*（18, 20, 21...）*？* 我们对 Node.js 20.11.0 有明确的依赖，因为我们开发应用程序时使用了这个版本，但我们可以确信应用程序应该能在任何
    Node.js 20 LTS 版本上运行。'
- en: '*What is the target database* (*MongoDB, MySQL, PostgreSQL, Redis...*)*?* We
    depend on MongoDB, so we need to consider that as a dependency for our infrastructure
    decisions. Aside from this, there are no more external dependencies or services
    that we depend on. Managing a database is not simple, so in this case, we can
    safely choose any managed service. MongoDB provides MongoDB Atlas ([https://www.mongodb.com/atlas/database](https://www.mongodb.com/atlas/database))
    as their cloud solution for MongoDB in the cloud. Also, the free tier should cover
    our needs.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*目标数据库是什么*（MongoDB, MySQL, PostgreSQL, Redis...）*？* 我们依赖于 MongoDB，因此我们需要将其作为我们基础设施决策的依赖项考虑。除此之外，没有更多外部依赖项或服务。管理数据库并不简单，因此在这种情况下，我们可以安全地选择任何托管服务。MongoDB
    提供了 MongoDB Atlas ([https://www.mongodb.com/atlas/database](https://www.mongodb.com/atlas/database))
    作为他们在云中的 MongoDB 解决方案。此外，免费层应该能满足我们的需求。'
- en: So, as a summary, we will deploy the application that we have been building
    in the previous chapters. We will deploy a Node.js application with Express. The
    only external dependency is MongoDB. We will use a Linux machine with x86 architecture
    and the Node.js 20.x version. Also, we will use MongoDB Atlas to host the database
    so we don’t need to worry a lot about the operational aspects of the database.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总结一下，我们将部署我们在前几章中构建的应用程序。我们将部署一个使用 Express 的 Node.js 应用程序。唯一的外部依赖项是 MongoDB。我们将使用具有
    x86 架构的 Linux 机器和 Node.js 20.x 版本。此外，我们将使用 MongoDB Atlas 来托管数据库，这样我们就不必过多担心数据库的运营方面。
- en: 'Also, we need to consider the following things that are relevant to the team
    and the project, especially if we are working in a professional environment, if
    we plan to deploy an application for a long time, or expect to scale soon:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要考虑以下与团队和项目相关的事项，特别是如果我们在一个专业环境中工作，如果我们计划长期部署应用程序，或者预期很快会进行扩展：
- en: What is the budget?
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预算是多少？
- en: How many deployments are we expecting?
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们预计会有多少次部署？
- en: What is the team size?
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队规模是多少？
- en: What is the team’s experience and knowledge?
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队的经验和知识是什么？
- en: It is not the same to deploy a Node.js application for a pet project as for
    a big company with aggressive **Service-Level Agreements** (**SLAs**) and an infrastructure
    team with a lot of experience.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Node.js 应用程序部署到宠物项目与部署到拥有积极 **服务级别协议**（**SLAs**）和经验丰富的基础设施团队的大型公司并不相同。
- en: In our case, I will assume that this is the first time that you are deploying
    a Node.js application. Also, I will assume a limited budget, experience, and time
    to invest in maintaining the infrastructure, so we will try the cheapest option
    possible. Certainly, we won’t have a lot of deployments and we won’t have a lot
    of traffic. So, we don’t need to worry about scalability, performance, or high
    availability.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我将假设这是您第一次部署 Node.js 应用程序。此外，我将假设有限的预算、经验和时间来维护基础设施，因此我们将尝试尽可能便宜的选择。当然，我们不会有太多的部署，也不会有太多的流量。因此，我们不需要担心可扩展性、性能或高可用性。
- en: 'Overall, we have two main options that we will explore in this chapter and
    the next one:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，我们有两个主要选项，我们将在本章和下一章中探讨：
- en: Deploying the application on a bare metal machine or VM
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在裸金属机器或虚拟机上部署应用程序
- en: Deploying the application in a cloud solution
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云解决方案中部署应用程序
- en: You can deploy the application on a bare-metal machine, which can be an old
    laptop, a **single-board computer** (**SBC**) such as a Raspberry Pi, or a virtual
    machine on your own computer. In this scenario, you can choose to enable remote
    access to the machine or not. But in any case, this is a good option to learn
    and test the application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在裸机机器上部署应用程序，这可以是一台旧笔记本电脑，一个**单板计算机**（**SBC**）如树莓派，或者您自己计算机上的虚拟机。在这种情况下，您可以选择是否启用对机器的远程访问。但无论如何，这是一个学习和测试应用程序的好方法。
- en: Another option is to face the public internet and deploy the application in
    a cloud solution. There are many providers with a big product offering out there.
    So, in order to keep this simple, I will focus on a single provider for the compute
    resources (DigitalOcean) and a single provider for the database (MongoDB Atlas).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选项是面向公共互联网，并在云解决方案中部署应用程序。那里有许多提供大量产品服务的提供商。所以，为了保持简单，我将专注于单个计算资源提供商（DigitalOcean）和单个数据库提供商（MongoDB
    Atlas）。
- en: In the next section, we will create the GitHub repository, and we will push
    the code to the repository.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将创建 GitHub 仓库，并将代码推送到仓库。
- en: Using a GitHub repository
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitHub 仓库
- en: We will use GitHub to host the code and deploy the application. We will use
    GitHub Actions to run the tests and to check the code quality. We will then use
    GitHub to pull the code from the repository and deploy the application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 GitHub 来托管代码并部署应用程序。我们将使用 GitHub Actions 来运行测试并检查代码质量。然后我们将使用 GitHub 从仓库中拉取代码并部署应用程序。
- en: Creating a GitHub repository
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 GitHub 仓库
- en: 'You can create a new repository using this guide: [https://docs.github.com/en/repositories/creating-and-managing-repositories/quickstart-for-repositories](https://docs.github.com/en/repositories/creating-and-managing-repositories/quickstart-for-repositories)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用此指南创建一个新的仓库：[https://docs.github.com/en/repositories/creating-and-managing-repositories/quickstart-for-repositories](https://docs.github.com/en/repositories/creating-and-managing-repositories/quickstart-for-repositories)
- en: 'In my case, I created a repository called `nodejs-for-beginners`, as you can
    see in the screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，我创建了一个名为 `nodejs-for-beginners` 的仓库，如图表所示：
- en: '![Figure 16.1–  Web Browser Screenshot of the repository created](img/B21678_16_ForCEing_FS_1.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.1– 创建的仓库的网页浏览器截图](img/B21678_16_ForCEing_FS_1.jpg)'
- en: Figure 16.1– Web Browser Screenshot of the repository created
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.1– 创建的仓库的网页浏览器截图
- en: Now that we have a repository ready, it is time to start using it by adding
    our code to it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了仓库，是时候通过将我们的代码添加到其中来开始使用它了。
- en: Pushing the code to the repository
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将代码推送到仓库
- en: You will need to download the project from [https://github.com/PacktPublishing/NodeJS-for-Beginners/archive/refs/heads/main.zip](https://github.com/PacktPublishing/NodeJS-for-Beginners/archive/refs/heads/main.zip)
    and access the `step4` folder, and then you will need to push the code to the
    repository. You need to be sure that the `package.json` file is present in the
    root folder of the repository.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要从 [https://github.com/PacktPublishing/NodeJS-for-Beginners/archive/refs/heads/main.zip](https://github.com/PacktPublishing/NodeJS-for-Beginners/archive/refs/heads/main.zip)
    下载项目，并访问 `step4` 文件夹，然后您需要将代码推送到仓库。您需要确保 `package.json` 文件位于仓库根目录中。
- en: 'Here are two guides that can help you to push the code to the repository:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个指南可以帮助您将代码推送到仓库：
- en: 'How to clone a repository: [https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何克隆仓库：[https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository)
- en: 'How to push code: [https://docs.github.com/en/get-started/using-git/pushing-commits-to-a-remote-repository](https://docs.github.com/en/get-started/using-git/pushing-commits-to-a-remote-repository)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何推送代码：[https://docs.github.com/en/get-started/using-git/pushing-commits-to-a-remote-repository](https://docs.github.com/en/get-started/using-git/pushing-commits-to-a-remote-repository)
- en: Note
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In order to simplify the process, we are going to use only the `main` branch.
    But in the real world, most teams use multiple branches to manage their code so
    they can use great features such as pull requests, code reviews, and so on. That
    is out of the scope of this book.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化流程，我们将只使用 `main` 分支。但在现实世界中，大多数团队使用多个分支来管理他们的代码，以便他们可以使用诸如拉取请求、代码审查等出色功能。这超出了本书的范围。
- en: 'Once this is done, the repository should look like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成这些，仓库应该看起来像这样：
- en: '![Figure 16.2 – Web browser screenshot of the repository with the files and
    folders added](img/B21678_16_ForCEing_FS_2.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图16.2 – 添加了文件和文件夹的仓库的网页浏览器截图](img/B21678_16_ForCEing_FS_2.jpg)'
- en: Figure 16.2 – Web browser screenshot of the repository with the files and folders
    added
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.2 – 添加了文件和文件夹的仓库的网页浏览器截图
- en: Note
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are having issues running the project in this chapter while following
    the steps, or you tried an alternative approach, you can use the `step5` folder
    from the source code that you downloaded at the beginning of the chapter to compare
    and fix possible bugs more easily.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在按照本章步骤运行项目时遇到问题，或者你尝试了另一种方法，你可以使用本章开头下载的源代码中的`step5`文件夹来比较和更容易地修复可能的错误。
- en: In the next section, we will implement continuous integration with GitHub Actions.
    This is a great way to ensure that the application is working as expected.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用GitHub Actions实现持续集成。这是确保应用程序按预期工作的绝佳方式。
- en: Continuous integration with GitHub Actions
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GitHub Actions进行持续集成
- en: We can understand continuous integration as a way to do automatic checks on
    the code. This will help us to reduce human errors and will help us to mechanize
    the process of checking the project’s quality.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将持续集成理解为对代码进行自动检查的一种方式。这将帮助我们减少人为错误，并帮助我们使检查项目质量的过程自动化。
- en: This is an optional step that is not required in order to deploy the application,
    but if you want to get a better understanding of professional development environments,
    you can follow along.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可选步骤，不是部署应用程序所必需的，但如果你想更好地了解专业开发环境，你可以跟随操作。
- en: So, the first step is to define what we expect from the automation and then
    we can implement it. In our case, we want to install the dependencies, run the
    linter, and run the tests. And we want to do this every time that we push code
    to the repository.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，第一步是定义我们期望的自动化内容，然后我们可以实施它。在我们的例子中，我们想要安装依赖项，运行lint工具，并运行测试。我们希望在每次将代码推送到仓库时都这样做。
- en: 'In order to implement this, we will create the `.github/workflows/ci.yml` file
    with the following content:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将创建包含以下内容的`.github/workflows/ci.yml`文件：
- en: '[PRE0]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This YAML file defines a workflow called **Continous Integration** that will
    be triggered every time we push code to the repository. This workflow will run
    in a virtual machine with Ubuntu and it will run the following steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此YAML文件定义了一个名为**持续集成**的工作流，每次我们推送代码到仓库时都会触发。此工作流将在装有Ubuntu的虚拟机上运行，并执行以下步骤：
- en: Check the code from the repository.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查仓库中的代码。
- en: Install the dependencies by running the `npm` `install` command.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`npm install`命令安装依赖项。
- en: Run the linter by running the `npm run` `lint` command.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`npm run lint`命令运行lint工具。
- en: Generate a random JWT secret. We generate a random string with 30 characters
    that will be used as a JWT secret later on.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个随机的JWT密钥。我们生成一个30个字符的随机字符串，稍后将用作JWT密钥。
- en: Prepare the environment by running the `npm run` `infra:start` command.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`npm run infra:start`命令准备环境。
- en: Run the tests with the `MONGODB_URI`, `PORT`, `SALT_ROUNDS`, and `JWT_SECRET`
    environment variables, and we will use the JWT secret generated in the previous
    step.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`MONGODB_URI`、`PORT`、`SALT_ROUNDS`和`JWT_SECRET`环境变量运行测试，我们将使用上一步生成的JWT密钥。
- en: 'Once we push the code to the repository, we can check the status of the workflow
    in the **Actions** tab:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将代码推送到仓库，我们可以在**动作**选项卡中检查工作流的状态：
- en: '![Figure 16.3 – Web browser screenshot showing the GitHub actions](img/B21678_16_ForCEing_FS_3.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图16.3 – 显示GitHub actions的网页浏览器截图](img/B21678_16_ForCEing_FS_3.jpg)'
- en: Figure 16.3 – Web browser screenshot showing the GitHub actions
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.3 – 显示GitHub动作的网页浏览器截图
- en: 'If we click on the workflow, we can see the details of it:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击工作流，我们可以看到它的详细信息：
- en: '![Figure 16.4 – Web browser screenshot showing the GitHub Action execution
    details](img/B21678_16_ForCEing_FS_4.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图16.4 – 显示GitHub Action执行细节的网页浏览器截图](img/B21678_16_ForCEing_FS_4.jpg)'
- en: Figure 16.4 – Web browser screenshot showing the GitHub Action execution details
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.4 – 显示GitHub Action执行细节的网页浏览器截图
- en: As we can see, all the checks are passing, so we can be confident that the application
    is working as expected.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，所有的检查都通过了，因此我们可以有信心应用程序按预期工作。
- en: 'We can click on the **Run tests** step to see the details of the tests:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以点击**运行测试**步骤来查看测试的详细信息：
- en: '![Figure 16.5 – Web browser screenshot showing the tests execution step in
    detail](img/B21678_16_ForCEing_FS_5.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图16.5 – 展示测试执行步骤详细信息的网络浏览器截图](img/B21678_16_ForCEing_FS_5.jpg)'
- en: Figure 16.5 – Web browser screenshot showing the tests execution step in detail
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.5 – 展示测试执行步骤详细信息的网络浏览器截图
- en: As you can see, the tests are passing, the same way as on our local machine.
    Ultimately, the continuous integration machine is just a remote machine that will
    follow the steps that we define, and it is not very different from our own environment
    in that respect.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，测试正在通过，就像在我们的本地机器上一样。最终，持续集成机器只是一个将遵循我们定义的步骤的远程机器，在这方面它与我们的环境没有太大区别。
- en: Now, that we have the continuous integration in place, we can start thinking
    about preparing the MongoDB instance using Atlas in the next section.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经设置了持续集成，我们可以在下一节中开始考虑使用Atlas准备MongoDB实例。
- en: Using MongoDB Atlas
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MongoDB Atlas
- en: We will use MongoDB Atlas to host the database. We will create a free tier cluster
    and we will use the connection string to connect to the database.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用MongoDB Atlas托管数据库。我们将创建一个免费层集群，并使用连接字符串来连接到数据库。
- en: 'Here are some guides that will help you:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些指南将帮助您：
- en: 'How to create a free tier cluster: [https://docs.atlas.mongodb.com/tutorial/create-new-cluster/](https://docs.atlas.mongodb.com/tutorial/create-new-cluster/)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建免费层集群：[https://docs.atlas.mongodb.com/tutorial/create-new-cluster/](https://docs.atlas.mongodb.com/tutorial/create-new-cluster/)
- en: 'How to connect to the database: [https://www.mongodb.com/docs/atlas/driver-connection/](https://www.mongodb.com/docs/atlas/driver-connection/)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何连接到数据库：[https://www.mongodb.com/docs/atlas/driver-connection/](https://www.mongodb.com/docs/atlas/driver-connection/)
- en: 'In my case, I created a free tier cluster called `nodejs-for-beginners`, as
    you can see in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，我创建了一个名为`nodejs-for-beginners`的免费层集群，如以下屏幕截图所示：
- en: '![Figure 16.6 – Web browser screenshot showing the cluster creation details](img/B21678_16_ForCEing_FS_6.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图16.6 – 展示集群创建详细信息的网络浏览器截图](img/B21678_16_ForCEing_FS_6.jpg)'
- en: Figure 16.6 – Web browser screenshot showing the cluster creation details
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.6 – 展示集群创建详细信息的网络浏览器截图
- en: 'At the end of the process, you will have a connection string like this (but
    with your own credentials):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在过程结束时，您将得到一个类似这样的连接字符串（但使用您自己的凭据）：
- en: '[PRE1]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can use that connection string to connect to the database from the application.
    You only need to replace the value of the `MONGODB_URI` environment variable with
    the new connection string in the `.``env` file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用该连接字符串从应用程序连接到数据库。您只需要在`.env`文件中将`MONGODB_URI`环境变量的值替换为新连接字符串。
- en: 'It is important to notice that the username and password need to be URI encoded,
    so the special characters are converted. This can easily be done with the `encodeURIComponent`
    function ([https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent)).
    Here is a conversion example:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，用户名和密码需要进行URI编码，以便将特殊字符转换。这可以通过`encodeURIComponent`函数轻松完成（[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent)）。以下是一个转换示例：
- en: '[PRE2]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you run the test or run the application locally, you will see that the application
    is using the new database and the data is persisted in the cloud, as expected.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在本地运行测试或运行应用程序，您将看到应用程序正在使用新的数据库，数据如预期地持久保存在云端。
- en: 'In the following screenshot, you can see the data in the database:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中，您可以看到数据库中的数据：
- en: '![Figure 16.7 – Web browser screenshot showing the project details](img/Image96437.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图16.7 – 展示项目详细信息的网络浏览器截图](img/Image96437.jpg)'
- en: Figure 16.7 – Web browser screenshot showing the project details
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.7 – 展示项目详细信息的网络浏览器截图
- en: Note
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Once you are ready with the database, you can restore the `.env` file to the
    original state to avoid polluting the database with test data in future executions.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您准备好数据库，您可以将`.env`文件恢复到原始状态，以避免在未来的执行中将测试数据污染数据库。
- en: Now, that we have the external database ready, we can start thinking about deploying
    the application. In the next section, we will prepare the application using PM2.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好了外部数据库，我们可以开始考虑部署应用程序。在下一节中，我们将使用PM2准备应用程序。
- en: Deploying Node.js applications with PM2
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PM2部署Node.js应用程序
- en: This is a very *exciting* moment! We are about to make our application available
    on the public internet. In this case, we will use a DigitalOcean Droplet to host
    the application. A Droplet is a virtual machine with Ubuntu 23.10 and 0.5 GB of
    RAM that will host the application. We will use PM2 to keep the application running
    and to restart it if it crashes.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常*激动人心*的时刻！我们即将将我们的应用程序发布到公共互联网上。在这种情况下，我们将使用 DigitalOcean Droplet 来托管应用程序。Droplet
    是一个运行 Ubuntu 23.10 和 0.5 GB RAM 的虚拟机，将托管应用程序。我们将使用 PM2 来保持应用程序运行，并在它崩溃时重新启动它。
- en: 'If you don’t want to use DigitalOcean, as an alternative, you can use an old
    computer that has at least 4 GB RAM, Ubuntu (or another Linux distro), and have
    SSH communication enabled (no need to install Node.js or deploy a website at this
    point). An old laptop is a great option or even a Raspberry PI (3, 4, or 5) ([https://www.raspberrypi.com/](https://www.raspberrypi.com/))
    with Raspbian ([https://www.raspberrypi.com/software/](https://www.raspberrypi.com/software/))
    will do the job. Here, you can find two tutorials that will help you with the
    setup:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想使用 DigitalOcean，作为替代方案，你可以使用至少有 4 GB RAM 的旧电脑，安装 Ubuntu（或另一个 Linux 发行版），并启用
    SSH 通信（目前不需要安装 Node.js 或部署网站）。旧笔记本电脑是一个很好的选择，甚至可以是 Raspberry PI（3、4 或 5）([https://www.raspberrypi.com/](https://www.raspberrypi.com/))，安装
    Raspbian ([https://www.raspberrypi.com/software/](https://www.raspberrypi.com/software/))，这样也能完成任务。在这里，你可以找到两个教程，帮助你完成设置：
- en: '[https://www.xda-developers.com/turn-old-laptop-into-home-server](https://www.xda-developers.com/turn-old-laptop-into-home-server)/'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.xda-developers.com/turn-old-laptop-into-home-server](https://www.xda-developers.com/turn-old-laptop-into-home-server)/'
- en: '[https://www.youtube.com/watch?v=iSAF8D8rp0o](https://www.youtube.com/watch?v=iSAF8D8rp0o)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/watch?v=iSAF8D8rp0o](https://www.youtube.com/watch?v=iSAF8D8rp0o)'
- en: If the setup was done properly, you can skip the next section and jump directly
    to the *Preparing the* *machine* section.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置正确完成，你可以跳过下一节，直接跳到 *准备机器* 部分。
- en: Creating a DigitalOcean Droplet
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 DigitalOcean Droplet
- en: We will use DigitalOcean to host the application. We will use the most basic,
    cheap Droplet possible, currently with 512 MB RAM and 1 virtual CPU.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 DigitalOcean 来托管应用程序。我们将使用最基本、最便宜的 Droplet，目前拥有 512 MB RAM 和 1 个虚拟 CPU。
- en: Note
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'We will use the SSH key to access the machine, so please follow this guide
    if you don’t know how to do it:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 SSH 密钥来访问机器，所以如果你不知道如何操作，请遵循以下指南：
- en: '[https://docs.digitalocean.com/products/droplets/how-to/add-ssh-keys/](https://docs.digitalocean.com/products/droplets/how-to/add-ssh-keys/)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.digitalocean.com/products/droplets/how-to/add-ssh-keys/](https://docs.digitalocean.com/products/droplets/how-to/add-ssh-keys/)'
- en: 'In my case, I created a Droplet called `nodejs-for-beginners`, as you can see
    in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，我创建了一个名为 `nodejs-for-beginners` 的 Droplet，如下面的截图所示：
- en: '![Figure 16.8 – Web browser screenshot showing the droplet details](img/B21678_16_ForCEing_FS_8.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.8 – 显示 Droplet 详细信息的网页浏览器截图](img/B21678_16_ForCEing_FS_8.jpg)'
- en: Figure 16.8 – Web browser screenshot showing the droplet details
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.8 – 显示 Droplet 详细信息的网页浏览器截图
- en: As you can see, the droplet is available at the IP address `144.126.217.34`
    and we will use that IP address to access the machine using SSH or HTTP when the
    application is running.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Droplet 可在 IP 地址 `144.126.217.34` 上找到，我们将使用该 IP 地址通过 SSH 或 HTTP 访问机器，当应用程序运行时。
- en: Connecting to the machine
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到机器
- en: There are many ways to access the machine with SSH. The most common is to use
    the terminal directly. But in this case, we will use VSCode to connect to the
    machine. You can follow the guide at [https://code.visualstudio.com/docs/remote/ssh](https://code.visualstudio.com/docs/remote/ssh)
    to learn how to do it as it is more convenient than directly connect from your
    terminal to the machine.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SSH 访问机器有多种方法。最常见的是直接使用终端。但在这个案例中，我们将使用 VSCode 连接到机器。你可以按照[https://code.visualstudio.com/docs/remote/ssh](https://code.visualstudio.com/docs/remote/ssh)上的指南学习如何操作，因为它比直接从你的终端连接到机器更方便。
- en: In both cases, we need to use the same credentials. The username is `root` and
    the password is replaced by your SSH key that was added to your Droplet.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，我们需要使用相同的凭据。用户名是 `root`，密码被替换为你添加到 Droplet 中的 SSH 密钥。
- en: Now that we are able to connect to the machine, it is time to start setting
    up the environment.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经能够连接到机器，是时候开始设置环境了。
- en: Preparing the machine
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备机器
- en: 'Once you are connected to the machine, you can run the following commands in
    the terminal in order to create the working directory and access the new directory
    created:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你连接到机器，你可以在终端中运行以下命令以创建工作目录并访问新创建的目录：
- en: '[PRE3]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then we will install Node.js 20.11.0 using `nvm`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将使用 `nvm` 安装 Node.js 20.11.0：
- en: '[PRE4]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output should be something like this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于以下内容：
- en: '[PRE5]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The next step is to install PM2 globally on the machine:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在机器上全局安装 PM2：
- en: '[PRE6]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can check the version of PM2 with the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下方法检查 PM2 的版本：
- en: '[PRE7]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output should be something like this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该类似于以下内容：
- en: '[PRE8]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, we have the machine ready to work with our code. Our next step will be
    to bring the application code to our machine.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，机器已经准备好与我们的代码一起工作。我们的下一步是将应用程序代码带到我们的机器上。
- en: Cloning the repository
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆仓库
- en: If you are using a private repository, you will need to add the SSH key to the
    machine. You can follow the guide at [https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh),
    but you can prevent this step if you make the repository public.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用私有仓库，你需要将 SSH 密钥添加到机器上。你可以遵循[https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh)上的指南，但如果你将仓库设置为公开，则可以跳过此步骤。
- en: 'Then we will clone the repository:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将克隆仓库：
- en: '[PRE9]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can check that the code is present in the folder by checking the directory
    in VSCode or by running the following command:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过检查 VSCode 中的目录或运行以下命令来检查代码是否存在于文件夹中：
- en: '[PRE10]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This command will list all files, including hidden ones, in the current directory,
    and show detailed information about these files. The output should be something
    like this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将列出当前目录中的所有文件（包括隐藏文件），并显示这些文件的详细信息。输出应该类似于以下内容：
- en: '[PRE11]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We can confirm that the code has been downloaded, so our next step will be to
    install the dependencies.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以确认代码已被下载，因此我们的下一步将是安装依赖项。
- en: Installing the dependencies
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装依赖项
- en: 'After cloning the repository, we will install the dependencies:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在克隆仓库后，我们将安装依赖项：
- en: '[PRE12]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This might take a while as the machine is not very powerful, but it should finish
    without errors. If you have errors or the process is much longer than expected,
    you can try to increase the size of the Droplet, but this will increase the price
    per hour.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 由于机器性能不是很好，这个过程可能需要一些时间，但应该会无错误地完成。如果你遇到错误或过程比预期长得多，你可以尝试增加 Droplet 的大小，但这会增加每小时的费用。
- en: Preparing the environment
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备环境
- en: We will create a `.env` file as we did in the previous chapters, but we will
    use the connection string of the MongoDB Atlas cluster that we created in the
    previous section.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个 `.env` 文件，就像我们在前面的章节中所做的那样，但我们将使用上一节中创建的 MongoDB Atlas 集群的连接字符串。
- en: Once this is ready, the application is ready to run, but we will use PM2 to
    keep the application running and restart it if it crashes.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦准备就绪，应用程序就准备好运行了，但我们将使用 PM2 保持应用程序运行并在它崩溃时重新启动它。
- en: Managing the application with PM2
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 PM2 管理应用程序
- en: We decided to use PM2 as the process manager for our application, so you won’t
    start the application directly using `node` command like `node index.js`. We will
    let PM2 handle the application lifecycle.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决定使用 PM2 作为我们应用程序的进程管理器，因此你不会直接使用 `node` 命令（如 `node index.js`）启动应用程序。我们将让
    PM2 处理应用程序的生命周期。
- en: 'We will start the application with PM2:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 PM2 启动应用程序：
- en: '[PRE13]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can check the status of the application with the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下方法检查应用程序的状态：
- en: '[PRE14]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can check the logs of the application with this:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下方法检查应用程序的日志：
- en: '[PRE15]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can stop the application with this:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下方法停止应用程序：
- en: '[PRE16]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, we can start the application again with PM2 and check whether the application
    is available through the internet.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以再次使用 PM2 启动应用程序并检查应用程序是否可以通过互联网访问。
- en: Accessing the application
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问应用程序
- en: 'Now, we can access the application using the IP address of the Droplet. In
    my case, the IP address is `144.126.217.34` and the application is running in
    port `3000`, so I can access the application using the following URL: `http://144.126.217.34:3000`.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用 Droplet 的 IP 地址访问应用程序。在我的情况下，IP 地址是 `144.126.217.34`，应用程序运行在端口 `3000`
    上，因此我可以使用以下 URL 访问应用程序：`http://144.126.217.34:3000`。
- en: Note
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using a different host, such as a machine in your local network,
    this might be different, as it will depend on your local network configuration
    and/or firewalls. But if your network is correctly set up, then you should be
    able to access the website by using the IP address of the machine in your local
    network, for example, `192.168.1.44`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是不同的主机，例如你本地网络中的机器，这可能会不同，因为它将取决于你的本地网络配置和/或防火墙。但如果你的网络设置正确，那么你应该能够通过使用你本地网络中机器的
    IP 地址来访问网站，例如，`192.168.1.44`。
- en: 'We can see the application running as expected:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到应用程序按预期运行：
- en: '![Figure 16.9 – Web browser screenshot showing the project running using the
    droplet IP](img/B21678_16_ForCEing_FS_9.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.9 – 使用 Droplet IP 运行项目的网页浏览器截图](img/B21678_16_ForCEing_FS_9.jpg)'
- en: Figure 16.9 – Web browser screenshot showing the project running using the droplet
    IP
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.9 – 使用 Droplet IP 运行项目的网页浏览器截图
- en: Yes! The application is running as expected. We’ll explore another way to run
    our application in the next chapter, but this time we will use Docker.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！应用程序按预期运行。我们将在下一章探索另一种运行我们应用程序的方法，但这次我们将使用 Docker。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to deploy our application to the public internet.
    We learned how important it is to have a clear definition of the requirements
    and how to choose the best solution for our needs. We created accounts with the
    providers that we used in this chapter and we pushed the application code to the
    GitHub repository to have proper source control in place.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将我们的应用程序部署到公共互联网。我们了解到明确定义需求以及如何为我们的需求选择最佳解决方案是多么重要。我们为本章中使用的提供商创建了账户，并将应用程序代码推送到
    GitHub 仓库以实现适当的源代码控制。
- en: Finally, we used MongoDB Atlas to host the database as an external resource
    and we used a DigitalOcean Droplet to host the application. We learned how to
    use PM2 to keep the application running.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用 MongoDB Atlas 作为外部资源托管数据库，并使用 DigitalOcean Droplet 托管应用程序。我们学习了如何使用
    PM2 保持应用程序运行。
- en: Further reading
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'How To Set Up a Node.js Application for Production on Ubuntu 22.04: [https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-22-04](https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-22-04)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '如何在 Ubuntu 22.04 上为 Node.js 应用程序设置生产环境: [https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-22-04](https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-22-04)'
- en: 'Express Production best practices: [https://expressjs.com/en/advanced/best-practice-performance.html](https://expressjs.com/en/advanced/best-practice-performance.html)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Express 生产最佳实践: [https://expressjs.com/en/advanced/best-practice-performance.html](https://expressjs.com/en/advanced/best-practice-performance.html)'
