- en: '[CHAPTER 3](toc.xhtml#c03)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第 3 章](toc.xhtml#c03)'
- en: '[Overview of Express.js](toc.xhtml#c03)'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[Express.js 概述](toc.xhtml#c03)'
- en: '[Introduction](toc.xhtml#s76a)'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[介绍](toc.xhtml#s76a)'
- en: Express.js is a highly recognized and frequently utilized open-source framework
    of Node.js that facilitates the creation of web applications and REST APIs. It
    is a robust and adaptable framework that is favored by developers seeking to construct
    efficient and expandable web applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Express.js 是 Node.js 中高度认可和频繁使用的开源框架，它促进了网络应用程序和 REST API 的创建。它是一个强大且适应性强的框架，受到寻求构建高效和可扩展网络应用程序的开发者的青睐。
- en: It is a very popular framework due to its simplicity, flexibility, and scalability.
    Its popularity can be observed by looking at the average downloads per week. According
    to the npm registry, the Express.js package has been downloaded on average over
    27 million times per week.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其简单性、灵活性和可扩展性，它是一个非常受欢迎的框架。其受欢迎程度可以通过查看每周的平均下载量来观察。根据 npm 注册表，Express.js 包每周平均下载量超过
    2700 万次。
- en: '[Structure](toc.xhtml#s77a)'
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[结构](toc.xhtml#s77a)'
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Defining Express.js
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义 Express.js
- en: Advantages and Limitations of Express.js
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Express.js 的优势和局限性
- en: Express.js Installation and Creating a Basic Application
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Express.js 安装和创建基本应用程序
- en: Core Features of Express.js
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Express.js 的核心功能
- en: Security and Performance Best Practices
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性和性能最佳实践
- en: '[Defining Express.js](toc.xhtml#s78a)'
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[定义 Express.js](toc.xhtml#s78a)'
- en: In software development, a **framework** is a pre-written code that provides
    a set of generic functionality, tools, and guidelines for building applications.
    It is essentially a structured and standardized way of organizing and developing
    software, which helps to reduce development time and effort by providing pre-existing
    components and patterns that can be reused across multiple projects.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，一个 **框架** 是一段预写的代码，它提供了一套通用功能、工具和指南，用于构建应用程序。它本质上是一种结构化和标准化的软件开发方式，通过提供可跨多个项目重用的预存在组件和模式来帮助减少开发时间和努力。
- en: Express.js is one of the most popular open source, fast, and flexible frameworks
    of Node.js. It follows the “*unopinionated*” approach, which means that it does
    not enforce any specific architecture or patterns and allows developers to build
    their applications using their preferred tools and techniques. It provides a set
    of tools and features for building web applications and APIs using Node.js, including
    handling HTTP requests and responses, routing, middleware, templating engines,
    static file serving, and more. It has a large and active community of developers
    contributing to its development and maintenance.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Express.js 是 Node.js 中最受欢迎的开源、快速和灵活的框架之一。它遵循“*无偏见*”的方法，这意味着它不强制执行任何特定的架构或模式，并允许开发者使用他们偏好的工具和技术来构建他们的应用程序。它提供了一套用于使用
    Node.js 构建网络应用程序和 API 的工具和功能，包括处理 HTTP 请求和响应、路由、中间件、模板引擎、静态文件服务等等。它拥有一个庞大且活跃的开发者社区，他们为它的开发和维护做出贡献。
- en: Express.js is also known for its performance and scalability, with a lightweight
    and efficient core that allows it to handle high-traffic loads. Overall, Express.js
    is a powerful framework of Node.js that has all the required features to develop
    secure and scalable web applications.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Express.js 以其性能和可扩展性而闻名，拥有轻量级和高效的内核，使其能够处理高流量负载。总的来说，Express.js 是一个功能强大的 Node.js
    框架，拥有开发安全且可扩展网络应用程序所需的所有功能。
- en: '[Advantages of Express.js](toc.xhtml#s79a)'
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[Express.js 的优势](toc.xhtml#s79a)'
- en: 'Express.js has several advantages over other web application frameworks, including:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他网络应用程序框架相比，Express.js 有几个优势，包括：
- en: '**Minimalist**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简约**'
- en: Express.js has a straightforward design that helps to reduce the learning curve
    for developers who are new to the framework, enabling them to get up and running
    with their projects more quickly and easily.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Express.js 具有直观的设计，有助于降低新接触框架的开发者的学习曲线，使他们能够更快、更轻松地开始他们的项目。
- en: '**Flexible**'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活**'
- en: Express.js is a highly customizable and flexible framework. One such example
    of its flexibility is the middleware system, which allows developers to add custom
    logic to incoming requests or outgoing responses.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Express.js 是一个高度可定制和灵活的框架。其灵活性的一个例子是其中间件系统，它允许开发者向传入的请求或传出的响应添加自定义逻辑。
- en: '**Scalable**'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展**'
- en: Express.js provides built-in support for asynchronous programming using JavaScript
    promises and `**async**`/`**await**` syntax, which enables developers to write
    scalable code that can handle a large number of concurrent requests. It is well-suited
    for building large, complex applications that can handle high levels of traffic
    and data.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Express.js 提供了使用 JavaScript 承诺和 `**async**`/`**await**` 语法进行异步编程的内置支持，这使得开发者能够编写可扩展的代码，能够处理大量的并发请求。它非常适合构建大型、复杂的应用程序，能够处理高流量和数据。
- en: '**Compatibility with Node.js**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与 Node.js 的兼容性**'
- en: Express.js is built specifically to work with Node.js, which means that it is
    highly compatible with Node.js and its related libraries. Express.js is designed
    to leverage the features and capabilities of Node.js, such as its event-driven
    architecture and non-blocking I/O model. It is also able to seamlessly integrate
    with other Node.js libraries and tools.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Express.js 是专门为与 Node.js 一起工作而构建的，这意味着它与 Node.js 及其相关库高度兼容。Express.js 被设计为利用
    Node.js 的特性和功能，例如其事件驱动架构和非阻塞 I/O 模型。它还能够无缝集成其他 Node.js 库和工具。
- en: '**Collaborative community**'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作社区**'
- en: It has a very large and active community which is a key advantage of it. It
    ensures that the framework is constantly evolving and improving. Moreover, it
    provides valuable support for developers, making it easier for them to troubleshoot
    issues and learn from the experience of others.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它拥有一个非常庞大且活跃的社区，这是它的一个关键优势。这确保了框架不断发展和改进。此外，它还为开发者提供了宝贵的支持，使他们更容易解决问题并从他人的经验中学习。
- en: Express.js not only offers the aforementioned benefits, but also provides numerous
    additional advantages.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Express.js 不仅提供了上述好处，还提供了许多其他优势。
- en: '[Limitations of Express.js](toc.xhtml#s80a)'
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[Express.js 的局限性](toc.xhtml#s80a)'
- en: 'Like every coin has two sides, Express.js also has its limitations as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 就像每个硬币都有两面一样，Express.js 也有其局限性，如下所示：
- en: '**Incompatible with client-side application**'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与客户端应用程序不兼容**'
- en: Express.js is primarily focused on server-side web development, so it is not
    used for building complex client-side applications. However, it can be used in
    conjunction with other tools and frameworks to build full-stack applications.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Express.js 主要关注服务器端 Web 开发，因此它不用于构建复杂的客户端应用程序。然而，它可以与其他工具和框架结合使用来构建全栈应用程序。
- en: '**Lack of built-in features**'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏内置功能**'
- en: Express.js is a minimalist framework, which means that it does not come with
    all the built-in features and tools that some other frameworks provide. Developers
    may need to install and configure additional modules or libraries to add certain
    functionalities to their applications.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Express.js 是一个极简框架，这意味着它不提供某些其他框架提供的所有内置功能和工具。开发者可能需要安装和配置额外的模块或库，以向他们的应用程序添加某些功能。
- en: '**Inconsistency**'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不一致性**'
- en: Since Express.js is a minimalist framework, it does not enforce any standard
    way to structure an application or organize its code. As a result, developers
    are free to design their structures, which can pose a challenge for new developers
    trying to contribute to any existing project.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 Express.js 是一个极简框架，它不强制执行任何标准的方式来结构化应用程序或组织其代码。因此，开发者可以自由地设计他们的结构，这可能会给试图为任何现有项目做出贡献的新开发者带来挑战。
- en: Express.js has fewer limitations compared to other frameworks and offers more
    benefits, making it an easily approachable framework for developers.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他框架相比，Express.js 的局限性更少，并且提供了更多的好处，使其成为开发者易于接触的框架。
- en: '[Express.js Installation and Creating a Basic Application](toc.xhtml#s81a)'
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[Express.js 安装和创建基本应用程序](toc.xhtml#s81a)'
- en: 'To install Express.js, prior make sure you have Node.js installed on your machine,
    then you can perform the following steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 Express.js 之前，请确保您的机器上已安装 Node.js，然后您可以执行以下步骤：
- en: Create a new project directory and navigate into it using the command prompt
    or terminal.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的项目目录，并使用命令提示符或终端进入该目录。
- en: '`$ mkdir my-express-app`'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$ mkdir my-express-app`'
- en: '`$ cd my-express-app`'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$ cd my-express-app`'
- en: Initialize a new Node.js project. This will create a `**package**`**.**`**json**`
    file in your project directory.
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 初始化一个新的 Node.js 项目。这将创建一个位于项目目录中的 `**package**`**.**`**json**` 文件。
- en: '`$ npm init`'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$ npm init`'
- en: 'Install `**Express.js**` and typescript dependency with run the following command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装 `**Express.js**` 和 TypeScript 依赖项：
- en: '`$ npm install express typescript --save`'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$ npm install express typescript --save`'
- en: The `--save` option will automatically update your `**package.json**` file with
    the installed package and its version.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`--save`选项将自动更新您的`**package.json**`文件，包括已安装的包及其版本。
- en: Install development dependency as dev dependency for typescript with express.js
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将express.js作为开发依赖项安装到typescript
- en: '`$ npm install @types/express @types/node --save-dev`'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$ npm install @types/express @types/node --save-dev`'
- en: 'Create a new file called `**app.ts**` in the root directory of your project,
    and add the following code:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目的根目录中创建一个名为`**app.ts**`的新文件，并添加以下代码：
- en: '`import * as express from ''express'';`'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`import * as express from ''express'';`'
- en: '`import { Request, Response } from ''express'';`'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`import { Request, Response } from ''express'';`'
- en: '`const app: express.Application = express();`'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`const app: express.Application = express();`'
- en: '`app.get(''/'', (req: Request, res: Response) => {`'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`app.get(''/'', (req: Request, res: Response) => {`'
- en: '`res.send(''Hello World!'');`'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`res.send(''Hello World!'');`'
- en: '`});`'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`app.listen(3000, () => {`'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`app.listen(3000, () => {`'
- en: '`console.log(''Server listening on port 3000'');`'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`console.log(''Server listening on port 3000'');`'
- en: '`});`'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`});`'
- en: 'Compile the TypeScript code into JavaScript using the `**tsc**` command:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`**tsc**`命令将TypeScript代码编译成JavaScript：
- en: '`$ tsc app.ts`'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$ tsc app.ts`'
- en: 'Run the server with the `**node**` command:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`**node**`命令运行服务器：
- en: '`$ node app.js`'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$ node app.js`'
- en: '![](img/3.1.jpg)'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图3.1](img/3.1.jpg)'
- en: '**Figure 3.1:** Compile and Run Express Application'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**图3.1：编译并运行Express应用程序**'
- en: 'Now you should be able to visit `**http://localhost:3000**` in your web browser
    and see the message `"**Hello World!**"` displayed on the page:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该能够在您的网页浏览器中访问`**http://localhost:3000**`，并看到页面显示的消息为`"**Hello World!**"`：
- en: '![](img/3.2.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图3.2](img/3.2.jpg)'
- en: '**Figure 3.2:** Launch Express Application'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3.2：启动Express应用程序**'
- en: '[Core Features of Express.js](toc.xhtml#s82a)'
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[Express.js的核心功能](toc.xhtml#s82a)'
- en: 'Express.js is equipped with several fundamental features, some of which are
    as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Express.js配备了几个基本功能，其中一些如下：
- en: '[REST APIs](toc.xhtml#s83a)'
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[REST API](toc.xhtml#s83a)'
- en: A RESTful API is a web-based API that follows the principles of Representational
    State Transfer (REST) architectural style. It is a way of designing web services
    that are lightweight, maintainable, and scalable. RESTful APIs use HTTP methods
    to interact with resources that are identified by URIs.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful API是一种遵循表示状态转移（REST）架构风格的基于Web的API。它是一种设计轻量级、可维护和可扩展的Web服务的方式。RESTful
    API使用HTTP方法与由URI标识的资源进行交互。
- en: There are certain principles which should be followed while building REST APIs.
    These principles are a set of guidelines for designing an application.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建REST API时，应遵循某些原则。这些原则是一组设计应用程序的指南。
- en: '[REST Principles](toc.xhtml#s84a)'
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[REST原则](toc.xhtml#s84a)'
- en: 'There are a total of six guiding principles. In general, not all of these are
    mandatory to be followed to build applications; however, using these principles
    ensures better performance, efficiency, and scalability. These principles are:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 总共有六个指导原则。一般来说，构建应用程序时并不强制遵循所有这些原则；然而，使用这些原则可以确保更好的性能、效率和可扩展性。这些原则是：
- en: '**Client-Server Architecture**'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端-服务器架构**'
- en: The system should be divided into client and server. The client should communicate
    to the server over the network. Server-side and Client-side responsibilities must
    be independent and to be implemented by respective sides. This allows the evolution
    of both client and server independently.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 系统应分为客户端和服务器。客户端应通过网络与服务器通信。服务器端和客户端的责任必须是独立的，并由各自的一方实现。这允许客户端和服务器独立进化。
- en: '**Stateless Design**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态设计**'
- en: Whenever a client needs any data from the server it sends a request to the backend
    server. This principle says that each request from client to server must contain
    all of the information that server would need to understand the request. Server
    must not store the state of the session about the client.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当客户端需要从服务器获取任何数据时，它会向后端服务器发送一个请求。这个原则指出，客户端到服务器的每个请求都必须包含服务器理解请求所需的所有信息。服务器不得存储关于客户端的会话状态。
- en: '**Cacheable**'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可缓存**'
- en: Sometimes, there are responses which do not change too frequently. Such responses
    can be cached to improve performance. Responses should be defined as cacheable
    so that client can also know if it can reuse the same data or should request again.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有时，有些响应并不经常改变。这些响应可以被缓存以提高性能。响应应该定义为可缓存的，这样客户端也可以知道是否可以重用相同的数据或应该再次请求。
- en: '**Uniform Interface**'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统一接口**'
- en: 'The uniform interface simplifies the architecture by making it more modular,
    and allows easier development and deployment. There are four constraints which
    define a uniform interface :'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 统一接口通过使其更加模块化来简化架构，并允许更轻松的开发和部署。定义统一接口有四个约束：
- en: '**Resource Identification**: Resources can be identified through request URIs.
    For example, /projects clearly says that we are requesting the list of projects.
    A URI /projects/23 says that we are requesting a project using unique id 23.'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源标识**：资源可以通过请求URI进行标识。例如，/projects清楚地表明我们正在请求项目列表。URI /projects/23表示我们正在使用唯一ID
    23请求一个项目。'
- en: '**Resource Manipulation through Representations**: A resource is a conceptual
    entity identified by URI and the representation is the form of the resource when
    it is transferred over the network. The representation can be as JSON, XML, HTML,
    and so on. By sending or receiving these representations, clients manipulate resources.'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过表示进行资源操作**：资源是一个通过URI标识的概念性实体，表示是资源在网络中传输时的形式。表示可以是JSON、XML、HTML等。通过发送或接收这些表示，客户端操作资源。'
- en: A project can be represented (in JSON format) as
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个项目可以表示（以JSON格式）为
- en: '`{`'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`"name":"Mobile App",`'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`"name":"Mobile App",`'
- en: '`"description":"This project is to manage development of Mobile App"`'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`"description":"This project is to manage development of Mobile App"`'
- en: '`}`'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '**Self-descriptive Messages**: The messages being transferred between server
    and client should include enough information to describe how to process the message.
    This helps in decoupling of the client and server. Let us consider a request:'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自描述消息**：在服务器和客户端之间传输的消息应包含足够的信息来描述如何处理该消息。这有助于解耦客户端和服务器。让我们考虑一个请求：'
- en: '`GET /projects/23 HTTP/1.1`'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`GET /projects/23 HTTP/1.1`'
- en: '`Host: example.com`'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Host: example.com`'
- en: '`Accept: application/json`'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Accept: application/json`'
- en: 'The above can be a request from client to server. This clearly shows that we
    are making a GET request over HTTP for host example.com and it desires the response
    in JSON format using the Accept header. Let us see a sample response to this:'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述内容可以是客户端向服务器发出的请求。这清楚地表明我们正在通过HTTP向example.com主机发出GET请求，并希望使用Accept头以JSON格式接收响应。让我们看看这个请求的示例响应：
- en: '`HTTP/1.1 200 OK`'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`HTTP/1.1 200 OK`'
- en: '`Content-Type: application/json`'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Content-Type: application/json`'
- en: '`Content-Length: 122`'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Content-Length: 122`'
- en: '`{`'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`"id": 23,`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`"id": 23,`'
- en: '`"name":"Mobile App",`'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`"name":"Mobile App",`'
- en: '`"description":"This project is to manage development of Mobile App"`'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`"description":"This project is to manage development of Mobile App"`'
- en: '`}`'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: The preceding response shows that the status of the request was `**200 OK**`,
    the returned data is in JSON format and the body contains the requested project.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述响应显示请求的状态为`**200 OK**`，返回的数据是JSON格式，并且正文包含请求的项目。
- en: '**Hypermedia as the Engine of Application State (HATEOAS)**: The principle
    says that the client should interact with a RESTful application entirely through
    the hypermedia provided dynamically by the application servers. The client would
    have only the initial URI of the application. The hyperlinks needed further should
    be inside the response. This allows the dynamic discovery of actions and helps
    to decouple the client from the server. Each communication here would have self-descriptive
    messages.'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超媒体作为应用程序状态引擎（HATEOAS）**：该原则表示客户端应完全通过应用程序服务器动态提供的超媒体与RESTful应用程序交互。客户端将只有应用程序的初始URI。进一步需要的超链接将包含在响应中。这允许动态发现操作，并有助于解耦客户端和服务器。这里的每次通信都会有自描述的消息。'
- en: '**Layered Architecture**'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分层架构**'
- en: 'This principle insists that the application architecture should be divided
    into hierarchical layers. Each layer performs specific tasks. Let us consider
    a simple web application. The layers in it can be:'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个原则坚持认为应用程序架构应该分为分层层。每一层执行特定的任务。让我们考虑一个简单的Web应用程序。其中的层可以是：
- en: '**Client Layer**: User interacts with this layer, for example, web app or mobile
    app.'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端层**：用户与此层交互，例如Web应用程序或移动应用程序。'
- en: '**API Gateway Layer**: Entry point, every request goes through this layer.'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API网关层**：入口点，每个请求都通过这一层。'
- en: '**Application Layer**: Handles the business logic of processing the user requests.'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用层**：处理处理用户请求的业务逻辑。'
- en: '**Service Layer**: Contains helper services such as notification service, and
    so on.'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务层**：包含辅助服务，如通知服务等。'
- en: '**Data Access Layer**: Contains logic needed to fetch, store or update data.'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据访问层**：包含获取、存储或更新数据所需的逻辑。'
- en: '**Database Layer**: The layer which communicates with the database to fetch
    or store data.'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库层**：与数据库通信以获取或存储数据的层。'
- en: These layers should give an idea about the principle. This is an example and
    the layers can vary depending on the system being developed.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些层应该能让人了解其原理。这是一个示例，不同的系统可能会有不同的层。
- en: '**Code on Demand**'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按需代码**'
- en: This is an optional principle. This allows the client to extend the client functionality
    by providing the code in response. In this case, the client makes a request and
    server responses with a code which is usually a script which can be run at the
    client side. This principle allows flexibility and on-the-fly customization of
    the client application. However, we must be careful and should consider the security
    aspects.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个可选原则。它允许客户端通过提供代码来扩展客户端功能。在这种情况下，客户端发起请求，服务器响应一个通常可以在客户端运行的脚本。这个原则允许灵活性和即时定制客户端应用程序。然而，我们必须小心，并应考虑安全性方面。
- en: While it is true that REST principles enhance the scalability, performance,
    and maintainability of the APIs, not each principle is mandatory in all contexts.
    The last principle — Code on Demand is optional. However, to achieve the full
    benefits of the REST architecture, it is recommended that these principles should
    be followed as closely as possible.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然REST原则确实增强了API的可扩展性、性能和可维护性，但并非所有原则在所有情况下都是强制性的。最后一个原则——按需代码是可选的。然而，为了实现REST架构的全部好处，建议尽可能遵循这些原则。
- en: '[Building REST API](toc.xhtml#s85a)'
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[构建REST API](toc.xhtml#s85a)'
- en: Express.js is well-suited for building RESTful APIs, with support for HTTP.
    It allows developers to easily handle HTTP requests and responses. There are different
    types of HTTP methods such as `**GET**`, `**POST**`, `**PUT**`, `**DELETE**`,
    `**PATCH**`, `**HEAD**`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Express.js非常适合构建RESTful API，它支持HTTP。它允许开发者轻松处理HTTP请求和响应。HTTP有不同类型的请求方法，如`**GET**`、`**POST**`、`**PUT**`、`**DELETE**`、`**PATCH**`、`**HEAD**`。
- en: Let us build a rest api to get a list of users using the GET Method of HTTP.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个REST API，使用HTTP的GET方法获取用户列表。
- en: We have already created a basic-typescript-project in the previous chapter,
    so let us take that as a starting point and install `**express**` in that project.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在上一章中创建了一个基本的typescript项目，所以让我们以那个项目为起点，并在其中安装`**express**`。
- en: '`$ npm install express --save`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ npm install express --save`'
- en: 'In a REST API `**body-parser**` is a very useful npm package that is used as
    Node.js parsing middleware. It extracts the body portion of the incoming request
    and parses it based on the `**Content-Type**` request header. The parsed body
    data is then made available through the `**req.body**` property. Let us install
    it using the npm package manager:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在REST API中，`**body-parser**`是一个非常有用的npm包，用作Node.js解析中间件。它提取传入请求的正文部分，并根据`**Content-Type**`请求头进行解析。解析后的正文数据随后通过`**req.body**`属性提供。让我们使用npm包管理器安装它：
- en: '`$ npm install body-parser --save`'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ npm install body-parser --save`'
- en: 'Additionally, let us install the TypeScript definitions for Express and `**body-parser**`
    as dev dependencies:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，让我们安装Express和`**body-parser**`的类型定义作为开发依赖项：
- en: '`$ npm install -D @types/express @types/body-parser`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ npm install -D @types/express @types/body-parser`'
- en: 'Now, let us update the `**main.ts**` file in the root directory of the project
    with the following code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更新项目根目录下的 `**main.ts**` 文件，添加以下代码：
- en: '`import express from ''express'';`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`import express from ''express'';`'
- en: '`import * as bodyParser from ''body-parser'';`'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`import * as bodyParser from ''body-parser'';`'
- en: '`import { users } from "./users/user";`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { users } from "./users/user";`'
- en: '`import { Application } from ''express'';`'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { Application } from ''express'';`'
- en: '`const app: Application = express();`'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`const app: Application = express();`'
- en: '`app.use(bodyParser.json());`'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.use(bodyParser.json());`'
- en: '`app.get(''/api/users'', (req, res) => {`'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.get(''/api/users'', (req, res) => {`'
- en: '`res.json(users);`'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.json(users);`'
- en: '`});`'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`app.listen(3000, () => {`'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.listen(3000, () => {`'
- en: '`console.log(''Server listening on port 3000'');`'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log(''Server listening on port 3000'');`'
- en: '`});`'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: 'Next, create a `**user.ts**` file in the user directory inside the `**lib**`
    directory and put the following code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在`**lib**`目录下的`**user**`目录中创建一个`**user.ts**`文件，并放入以下代码：
- en: '`interface User {`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`interface User {`'
- en: '`id: number;`'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`id: number;`'
- en: '`name: string;`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`name: string;`'
- en: '`email: string;`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`email: string;`'
- en: '`}`'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`export const users: User[] = [`'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`export const users: User[] = [`'
- en: '`{ id: 1, name: ''John'', email: ''john@example.com'' },`'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`{ id: 1, name: ''John'', email: ''john@example.com'' },`'
- en: '`{ id: 2, name: ''Jane'', email: ''jane@example.com'' },`'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`{ id: 2, name: ''Jane'', email: ''jane@example.com'' },`'
- en: '`];`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`];`'
- en: 'To run the server, we need to compile the TypeScript code with `**tsc**` and
    start the server with node:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行服务器，我们需要使用 `**tsc**` 编译 TypeScript 代码，并使用 node 启动服务器：
- en: '`$ tsc`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ tsc`'
- en: '`$ node dist/main.js`'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ node dist/main.js`'
- en: 'Now we can test the API using a tool like Postman/curl or directly open the
    browser with url `http://localhost:3000/api/users`, it gives the following JSON
    output:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用 Postman/curl 等工具测试 API，或者直接通过 URL `http://localhost:3000/api/users`
    打开浏览器，它将返回以下 JSON 输出：
- en: '`[{"id":1,"name":"John","email":"john@example.com"},{"id":2,"name":"Jane","email":"jane@example.com"}]`'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`[{"id":1,"name":"John","email":"john@example.com"},{"id":2,"name":"Jane","email":"jane@example.com"}]`'
- en: '![](img/3.3.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3.3.jpg)'
- en: '**Figure 3.3:** Get API Users'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3.3**：获取 API 用户'
- en: In the preceding example, we created an API endpoint `/api/users` which returned
    us the users list. We also used `**body-parser**` middleware. We will learn about
    middlewares later in this chapter.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们创建了一个返回用户列表的 API 端点 `/api/users`。我们还使用了 `**body-parser**` 中间件。我们将在本章后面学习中间件。
- en: '[Routing](toc.xhtml#s86a)'
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[路由](toc.xhtml#s86a)'
- en: Express.js provides a simple and flexible routing system that allows developers
    to define URL routes for handling incoming HTTP requests. Routing in Express.js
    refers to the mechanism of defining and handling endpoints (URL paths) for web
    applications and APIs.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Express.js 提供了一个简单且灵活的路由系统，允许开发者为处理传入的 HTTP 请求定义 URL 路由。Express.js 中的路由是指定义和处理
    Web 应用程序和 API 的端点（URL 路径）的机制。
- en: It is a crucial aspect of any web framework, as it helps to determine how the
    application responds to client requests. In Express.js, routing is accomplished
    using the `**express.Router()**` class, which creates modular, mountable route
    handlers. The router consists of route method, route path, and callback handler.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这是任何 Web 框架的关键方面，因为它有助于确定应用程序如何响应用户请求。在 Express.js 中，路由是通过使用 `**express.Router()**`
    类来完成的，该类创建模块化、可挂载的路由处理程序。路由器由路由方法、路由路径和回调处理程序组成。
- en: '`app.METHOD(PATH, HANDLER)`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.METHOD(PATH, HANDLER)`'
- en: '`**app**` : It is an instance of express.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`**app**` : 它是 express 的一个实例。'
- en: '`**METHOD**` : It is an HTTP request method, in lowercase.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`**METHOD**` : 它是一个小写的 HTTP 请求方法。'
- en: '`**PATH**` : It is a path on the server.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`**PATH**` : 它是服务器上的一个路径。'
- en: '`**HANDLER**` : It is the function executed when the route is matched.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`**HANDLER**` : 它是在路由匹配时执行的功能。'
- en: '[Route Methods](toc.xhtml#s87a)'
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[路由方法](toc.xhtml#s87a)'
- en: 'There are most commonly used methods are as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的方法如下：
- en: '`**GET**` : It is used for retrieving data.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`**GET**` : 它用于检索数据。'
- en: '`**POST**` : It is used for creating or adding new data.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`**POST**` : 它用于创建或添加新数据。'
- en: '`**PUT**` : It is used to update an existing data.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`**PUT**` : 它用于更新现有数据。'
- en: '`**DELETE**` : It is used to delete data.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`**DELETE**` : 它用于删除数据。'
- en: '`**PATCH**` : It is used to partially update an existing data.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`**PATCH**` : 它用于部分更新现有数据。'
- en: '`**OPTIONS**` : It is used to retrieve information about available options
    for data.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`**OPTIONS**` : 它用于检索有关数据可用选项的信息。'
- en: '`**HEAD**` : It is similar to the `GET` method but only retrieves the response
    headers without the response body.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`**HEAD**` : 它与 `GET` 方法类似，但仅检索响应头，而不检索响应体。'
- en: You can also use `**app.all()**` to handle all HTTP methods.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `**app.all()**` 来处理所有 HTTP 方法。
- en: '`app.all(''/'', (req, res, next) => {`'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.all(''/'', (req, res, next) => {`'
- en: '`console.log(''all method…'')`'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log(''all method…'')`'
- en: '`next() // pass control to the next handler`'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`next() // 将控制权传递给下一个处理程序`'
- en: '`})`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`})`'
- en: '[Route Paths](toc.xhtml#s88a)'
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[路由路径](toc.xhtml#s88a)'
- en: A path can be string, string pattern, or a regular expression.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 路径可以是字符串、字符串模式或正则表达式。
- en: This route path will match requests to `**/users**` specific string.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由路径将匹配对 `**/users**` 特定字符串的请求。
- en: '`app.get(''/users, (req, res) => {`'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.get(''/users, (req, res) => {`'
- en: '`res.send(''users'')`'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.send(''users'')`'
- en: '`})`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`})`'
- en: This route path will be matched with string patterns such as `**abcd**`, `**abbcd**`,
    `**abbbcd**`, and so on.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由路径将与字符串模式（如 `**abcd**`、`**abbcd**`、`**abbbcd**` 等）匹配。
- en: '`app.get(''/ab+cd'', (req, res) => {`'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.get(''/ab+cd'', (req, res) => {`'
- en: '`res.send(''ab+cd'')`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.send(''ab+cd'')`'
- en: '`})`'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`})`'
- en: This route path will match blueberries and strawberries, raspberries, but not
    `**blueberriesfruit**`, `**strawberriesfruit**`, and so on.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此路由路径将匹配蓝莓和草莓、树莓等，但不匹配 `**blueberriesfruit**`、`**strawberriesfruit**` 等。
- en: '`app.get(/.*berries$/, (req, res) => {`'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.get(/.*berries$/, (req, res) => {`'
- en: '`res.send(''/.*berries$/'')`'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.send(''/.*berries$/'')`'
- en: '`})`'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`})`'
- en: These are different ways of defining route paths.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是定义路由路径的不同方式。
- en: '[Route Parameters](toc.xhtml#s89a)'
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[路由参数](toc.xhtml#s89a)'
- en: Express.js treats certain characters differently in string-based paths compared
    to their regular expression counterparts.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Express.js 在基于字符串的路径中对待某些字符的方式与它们的正则表达式对应物不同。
- en: For example, ?, +, *, and () are all subsets of their regular expression counterparts.
    On the other hand, the hyphen (-) and the dot (.) are interpreted literally when
    used in string-based paths.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，?、+、* 和 () 都是它们正则表达式对应物的子集。另一方面，当用于基于字符串的路径时，连字符 (-) 和点 (.) 被字面地解释。
- en: 'Consider the following example:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '`app.get(''/projects/:projectCode'', function(req, res) {`'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.get(''/projects/:projectCode'', function(req, res) {`'
- en: '`var projectCode = req.params.projectCode;`'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`var projectCode = req.params.projectCode;`'
- en: '`// Do something with the project code`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 对项目代码进行操作`'
- en: '`res.send(''project code: '' + projectCode);`'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.send(''项目代码: '' + projectCode);`'
- en: '`});`'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`app.get(''/users/:user-email'', function(req, res) {`'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.get(''/users/:user-email'', function(req, res) {`'
- en: '`var userEmail = req.params[''user-email''];`'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`var userEmail = req.params[''user-email''];`'
- en: '`// Do something with the user email`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 对用户邮箱进行操作`'
- en: '`res.send(''User email: '' + userEmail);`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.send(''用户邮箱: '' + userEmail);`'
- en: '`});`'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`app.get(''/files/:file_name.pdf'', function(req, res) {`'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.get(''/files/:file_name.pdf'', function(req, res) {`'
- en: '`var fileName = req.params[''file_name''];`'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`var fileName = req.params[''file_name''];`'
- en: '`// Do something with the file name`'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 对文件名进行操作`'
- en: '`res.send(''File name: '' + fileName);`'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.send(''文件名: '' + fileName);`'
- en: '`});`'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: In this example, there are three routes with hyphens and dots in their parameters.
    The first route `**/projects/:projectCode**` accepts a project code parameter,
    which can contain hyphens. The second route `**/users/:user-email**` accepts a
    user email parameter, which can contain hyphens. The third route `**/files/:file_name.pdf**`
    accepts a file name parameter, which can contain hyphens and ends with .pdf.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，有三个参数包含连字符和点的路由。第一个路由 `**/projects/:projectCode**` 接受一个项目代码参数，它可以包含连字符。第二个路由
    `**/users/:user-email**` 接受一个用户邮箱参数，它可以包含连字符。第三个路由 `**/files/:file_name.pdf**`
    接受一个文件名参数，它可以包含连字符并以 .pdf 结尾。
- en: '[Route Handlers](toc.xhtml#s90a)'
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[路由处理器](toc.xhtml#s90a)'
- en: When a route is matched in Express.js, it can have one or more handler functions
    associated with it, which are executed. Route handlers are responsible for processing
    requests, accessing data, and returning responses to the client.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 Express.js 中匹配路由时，它可以有一个或多个与之关联的处理函数，这些函数将被执行。路由处理器负责处理请求、访问数据并向客户端返回响应。
- en: 'Let us take the following example:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看以下示例：
- en: '`app.get(''/api/users'', (req, res) => {`'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.get(''/api/users'', (req, res) => {`'
- en: '`res.json(users);`'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.json(users);`'
- en: '`});`'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: In this example, the route handler function is `**(req, res) => {…}**`, which
    is executed when a `**GET**` request is received with a URL path that matches
    the pattern `**/api/users**`. The `**req**` parameter contains information about
    the incoming request, such as the request headers and parameters, while the `**res**`
    parameter is used to send a response back to the client.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，路由处理器函数是 `**(req, res) => {…}**`，它在接收到与模式 `**/api/users**` 匹配的 URL 路径的
    `**GET**` 请求时执行。`**req**` 参数包含有关传入请求的信息，例如请求头和参数，而 `**res**` 参数用于向客户端发送响应。
- en: '[Middleware](toc.xhtml#s91a)'
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[中间件](toc.xhtml#s91a)'
- en: Express.js supports middleware functions that can modify incoming requests or
    outgoing responses as per the required custom logic. Middleware in Express.js
    refers to a series of functions that are executed in a specific order when a client
    sends a request to a server. These functions have access to the request and response
    objects and can modify them as needed. Middleware functions can be used for a
    variety of purposes such as logging, authentication, error handling, and more.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Express.js 支持中间件函数，可以根据所需的自定义逻辑修改传入的请求或传出的响应。Express.js 中的中间件是指在客户端向服务器发送请求时按特定顺序执行的一系列函数。这些函数可以访问请求和响应对象，并根据需要修改它们。中间件函数可用于各种目的，如日志记录、身份验证、错误处理等。
- en: In Express.js, middleware functions can be added to the application or specific
    routes using the ``**use()**`` method.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Express.js 中，可以使用 `**use()**` 方法将中间件函数添加到应用程序或特定路由。
- en: Previously we already used body-parser as middleware while building rest api.
    This middleware is for each route as passed in `**app.use()**`, for example.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建 REST API 的过程中，我们之前已经使用了 body-parser 作为中间件。这个中间件是针对每个路由，通过 `**app.use()**`
    传入的，例如。
- en: '`app.use(bodyParser.json());`'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.use(bodyParser.json());`'
- en: There is another **example of middleware in which you do not wish to use it**
    for each route such as user validation on a specific route. They are executed
    in the order in which they are added and can be chained together using the `**next()**`
    function to pass control to the next middleware function in the stack.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个**中间件示例**，你不想在每个路由上使用它，例如在特定路由上的用户验证。它们按照添加的顺序执行，并且可以使用 `**next()**` 函数链接在一起，以将控制权传递给堆栈中的下一个中间件函数。
- en: '`// Validation middleware`'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 验证中间件`'
- en: '`const validate = (req, res, next) => {`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`const validate = (req, res, next) => {`'
- en: '`const { name } = req.body;`'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`const { name } = req.body;`'
- en: '`if (!name) {`'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`if (!name) {`'
- en: '`return res.status(400).send(''Name is required'');`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`return res.status(400).send(''Name is required'');`'
- en: '`}`'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`next();`'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`next();`'
- en: '`};`'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`};`'
- en: '`// Route`'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 路由`'
- en: '`app.post(''/users'', validate, (req, res) => {`'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.post(''/users'', validate, (req, res) => {`'
- en: '`const { name } = req.body;`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`const { name } = req.body;`'
- en: '``res.send(`Hello, ${name}!`);``'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '``res.send(`Hello, ${name}!`);``'
- en: '`});`'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: In this example, the validate middleware function is defined to check if the
    name parameter is present in the body string. If it is not present, the middleware
    sends a 400 Bad Request response with an error message. If the name parameter
    is present, the middleware calls the `**next()**` function to pass control to
    the next middleware or route handler.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，验证中间件函数被定义为检查名称参数是否存在于请求体字符串中。如果不存在，中间件会发送一个带有错误消息的 400 错误请求响应。如果名称参数存在，中间件会调用
    `**next()**` 函数将控制权传递给下一个中间件或路由处理程序。
- en: The validate middleware is then used in the ``**/user**`` route handler as the
    second argument to ensure that the name parameter is present before generating
    a user’s response.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 验证中间件随后在 ``**/user**`` 路由处理程序中作为第二个参数使用，以确保在生成用户响应之前名称参数存在。
- en: '![](img/3.4.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3.4.jpg)'
- en: '**Figure 3.4:** Post API User Bad Request'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3.4:** Post API 用户无效请求'
- en: '*[Figure 3.5](#fig3_5)* shows the result `"**Hello, Yamini!**"`:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '*[图 3.5](#fig3_5)* 显示了结果 `"**Hello, Yamini!**"`：'
- en: '![](img/3.5.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3.5.jpg)'
- en: '**Figure 3.5:** Post API User Valid Input Name'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3.5:** Post API 用户有效输入名称'
- en: '[Error Handling](toc.xhtml#s92a)'
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[错误处理](toc.xhtml#s92a)'
- en: 'Error handling is an important aspect of building robust applications. The
    framework provides a few ways to handle errors:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理是构建健壮应用程序的重要方面。该框架提供了一些处理错误的方法：
- en: '[Built-in Error Handling](toc.xhtml#s93a)'
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[内置错误处理](toc.xhtml#s93a)'
- en: Express.js provides a built-in error-handling middleware function that can be
    used to handle errors in the application. This middleware function can be used
    to catch any unhandled errors that occur during the execution of the application.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Express.js 提供了一个内置的错误处理中间件函数，可用于处理应用程序中的错误。此中间件函数可用于捕获在应用程序执行期间发生的任何未处理的错误。
- en: 'In Express.js, another way to handle errors is by utilizing middleware functions
    with error-first callbacks or functions. Here is an example demonstrating how
    it can be implemented:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Express.js 中，另一种处理错误的方法是利用具有错误优先回调或函数的中间件函数。以下是一个演示如何实现的示例：
- en: '`import express, { Request, Response, NextFunction } from ''express'';`'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`import express, { Request, Response, NextFunction } from ''express'';`'
- en: '`const app = express();`'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`const app = express();`'
- en: '`app.get(''/'', (req: Request, res: Response) => {`'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.get(''/'', (req: Request, res: Response) => {`'
- en: '`throw new Error(''Oops! Something went wrong.'');`'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`throw new Error(''Oops! Something went wrong.'');`'
- en: '`});`'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`app.use((err: Error, req: Request, res: Response, next: NextFunction) => {`'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.use((err: Error, req: Request, res: Response, next: NextFunction) => {`'
- en: '`res.status(500).send(''Something went wrong!'');`'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.status(500).send(''Something went wrong!'');`'
- en: '`});`'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`app.listen(3000, () => {`'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.listen(3000, () => {`'
- en: '`console.log(''Server listening on port 3000!'');`'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log(''Server listening on port 3000!'');`'
- en: '`});`'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: In this example, we have defined an Express app with a single route that throws
    an error. We then use the built-in error handling middleware function `**app.use**`
    to catch the error and send a `**500**` status code with a message to the client.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们定义了一个具有单个路由的 Express 应用程序，该路由会抛出错误。然后我们使用内置的错误处理中间件函数 `**app.use**`
    来捕获错误并向客户端发送带有消息的 `**500**` 状态码。
- en: 'The error-handling middleware function takes four arguments: err, req, res,
    and next. The first argument (`**err**`) is the error that was thrown, the second
    argument (`**req**`) is the request object, the third argument (`**res**`) is
    the response object, and the fourth argument (`**next**`) is a function that is
    used to pass control to the next middleware function in the stack.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理中间件函数接受四个参数：err、req、res 和 next。第一个参数（`**err**`）是抛出的错误，第二个参数（`**req**`）是请求对象，第三个参数（`**res**`）是响应对象，第四个参数（`**next**`）是一个用于将控制权传递给堆栈中下一个中间件函数的函数。
- en: If an error is thrown within any middleware or route handler function, Express.js
    will automatically call the error handling middleware function with the thrown
    error object as the first argument.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在任何一个中间件或路由处理函数中抛出错误，Express.js 将自动调用错误处理中间件函数，并将抛出的错误对象作为第一个参数。
- en: '![](img/3.6.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3.6.jpg)'
- en: '**Figure 3.6:** Error Handling'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3.6：错误处理**'
- en: '[Custom Error Handling](toc.xhtml#s94a)'
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[自定义错误处理](toc.xhtml#s94a)'
- en: Developers can also create their own custom error-handling middleware to handle
    specific types of errors. This middleware function can be added to the middleware
    stack and used to catch errors that are specific to the application.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者也可以创建他们自己的自定义错误处理中间件来处理特定类型的错误。此中间件函数可以添加到中间件堆栈中，并用于捕获特定于应用程序的错误。
- en: 'Let us update the `**main.ts**` file with the following code:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新 `**main.ts**` 文件，添加以下代码：
- en: '`import express, { Application, Request, Response, NextFunction } from ''express'';`'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`import express, { Application, Request, Response, NextFunction } from ''express'';`'
- en: '`import { HttpException, NotFoundException } from ''./utils/errorHandler'';`'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { HttpException, NotFoundException } from ''./utils/errorHandler'';`'
- en: '`import * as bodyParser from ''body-parser'';`'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`import * as bodyParser from ''body-parser'';`'
- en: '`import { users, Users } from "./users/user";`'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`import { users, Users } from "./users/user";`'
- en: '`const app: Application = express();`'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`const app: Application = express();`'
- en: '`app.use(bodyParser.json());`'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.use(bodyParser.json());`'
- en: '`app.get(''/api/users'', (req, res) => {`'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.get(''/api/users'', (req, res) => {`'
- en: '`res.json(users);`'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.json(users);`'
- en: '`});`'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`app.get(''/users/:id'', (req, res, next) => {`'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.get(''/users/:id'', (req, res, next) => {`'
- en: '`const userId = req.params.id;`'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`const userId = req.params.id;`'
- en: '`const user = new Users();`'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`const user = new Users();`'
- en: '`const isUserExist = user.getUserById(userId);`'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`const isUserExist = user.getUserById(userId);`'
- en: '`if (!isUserExist) {`'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`if (!isUserExist) {`'
- en: '``return next(new NotFoundException(`User with ID ${userId} not found`));``'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '``return next(new NotFoundException(`User with ID ${userId} not found`));``'
- en: '`}`'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`res.status(200).json(user);`'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.status(200).json(user);`'
- en: '`});`'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`app.use((err: HttpException, req: Request, res: Response, next: NextFunction)
    => {`'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.use((err: HttpException, req: Request, res: Response, next: NextFunction)
    => {`'
- en: '`const status = err.status || 500;`'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`const status = err.status || 500;`'
- en: '`const message = err.message || ''Internal server error'';`'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`const message = err.message || ''Internal server error'';`'
- en: '`res.status(status).json({ error: message });`'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.status(status).json({ error: message });`'
- en: '`});`'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`app.listen(3000, () => {`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.listen(3000, () => {`'
- en: '`console.log(''Server listening on port 3000!'');`'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log(''Server listening on port 3000!'');`'
- en: '`});`'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: 'Create `utils` folder and create `**errorHandler.ts**` file into that directory
    the paste the following code:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `utils` 文件夹中创建 `**errorHandler.ts**` 文件，并将以下代码粘贴进去：
- en: '`export class HttpException extends Error {`'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`export class HttpException extends Error {`'
- en: '`status: number;`'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`status: number;`'
- en: '`message: string;`'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`message: string;`'
- en: '`constructor(status: number, message: string) {`'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`constructor(status: number, message: string) {`'
- en: '`super(message);`'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`super(message);`'
- en: '`this.status = status;`'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.status = status;`'
- en: '`this.message = message;`'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`this.message = message;`'
- en: '`}`'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`export class NotFoundException extends HttpException {`'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`export class NotFoundException extends HttpException {`'
- en: '`constructor(message: string = ''Not Found'') {`'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`constructor(message: string = ''Not Found'') {`'
- en: '`super(404, message);`'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`super(404, message);`'
- en: '`}`'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: 'Now update the `**user.ts**` file in users directory with the following code:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 现在更新 `**user.ts**` 文件，位于 `users` 目录中，添加以下代码：
- en: '`interface User {`'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`interface User {`'
- en: '`id: number;`'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`id: number;`'
- en: '`name: string;`'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`name: string;`'
- en: '`email: string;`'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`email: string;`'
- en: '`}`'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`export const users: User[] = [`'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`export const users: User[] = [`'
- en: '`{ id: 1, name: ''John'', email: ''john@example.com'' },`'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`{ id: 1, name: ''John'', email: ''john@example.com'' },`'
- en: '`{ id: 2, name: ''Jane'', email: ''jane@example.com'' },`'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`{ id: 2, name: ''Jane'', email: ''jane@example.com'' },`'
- en: '`];`'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`];`'
- en: '`export class Users {`'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`export class Users {`'
- en: '`public getUserById(userId) {`'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`public getUserById(userId) {`'
- en: '`if (users.find(i => i.id == userId)) {`'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`if (users.find(i => i.id == userId)) {`'
- en: '`return true;`'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`return true;`'
- en: '`} else {`'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`} else {`'
- en: '`return false;`'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`return false;`'
- en: '`}`'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: In this example, there is a custom `**HttpException**` class that extends the
    Error class and adds a status property. There is also a `**NotFoundException**`
    class that extends the `**HttpException**` class and sets the status to 404 by
    default.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，有一个自定义的 `**HttpException**` 类，它扩展了 Error 类并添加了一个状态属性。还有一个 `**NotFoundException**`
    类，它扩展了 `**HttpException**` 类并将状态设置为默认的 404。
- en: In the route handler for `**/users/:id**`, if the requested user is not found,
    a `**NotFoundException**` is thrown and passed to the next function, which triggers
    the custom error handling middleware.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `**/users/:id**` 路由处理程序中，如果请求的用户未找到，则会抛出一个 `**NotFoundException**` 并传递给下一个函数，这会触发自定义错误处理中间件。
- en: '![](img/3.7.jpg)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3.7.jpg)'
- en: '**Figure 3.7:** User Not Found Exception'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3.7:** 用户未找到异常'
- en: The custom error handling middleware checks if the error is an instance of `**HttpException**`
    and uses the status and message properties to send a JSON response with the appropriate
    HTTP status code. If the error is not an instance of `**HttpException**`, it sends
    a generic 500 error response.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义错误处理中间件检查错误是否是 `**HttpException**` 的实例，并使用状态和消息属性发送带有适当 HTTP 状态码的 JSON 响应。如果错误不是
    `**HttpException**` 的实例，它将发送一个通用的 500 错误响应。
- en: '![](img/3.8.jpg)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3.8.jpg)'
- en: '**Figure 3.8:** Sample code in VsCode Editor'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3.8:** VsCode 编辑器中的示例代码'
- en: '[Async Error Handling](toc.xhtml#s95a)'
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[异步错误处理](toc.xhtml#s95a)'
- en: In Express.js, asynchronous errors can be handled using try-catch blocks or
    by returning a rejected Promise.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Express.js 中，可以使用 try-catch 块或通过返回一个拒绝的 Promise 来处理异步错误。
- en: 'Add the following code in `**main.ts**` file:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `**main.ts**` 文件中添加以下代码：
- en: '`// Async function that throws an error`'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 异步函数抛出错误`'
- en: '`async function asyncFunction(): Promise<void> {`'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`async function asyncFunction(): Promise<void> {`'
- en: '`throw new Error(''Async error'');`'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`throw new Error(''Async error'');`'
- en: '`}`'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`// Async route handler that calls the async function`'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 调用异步函数的异步路由处理程序`'
- en: '`app.get(''/async-error'', async (req: Request, res: Response, next: NextFunction)
    => {`'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.get(''/async-error'', async (req: Request, res: Response, next: NextFunction)
    => {`'
- en: '`try {`'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`try {`'
- en: '`await asyncFunction();`'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`await asyncFunction();`'
- en: '`res.send(''Success'');`'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.send(''Success'');`'
- en: '`} catch (error) {`'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`} catch (error) {`'
- en: '`next(error);`'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`next(error);`'
- en: '`}`'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`});`'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`// Error handling middleware`'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 错误处理中间件`'
- en: '`app.use((err: Error, req: Request, res: Response, next: NextFunction) => {`'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.use((err: Error, req: Request, res: Response, next: NextFunction) => {`'
- en: '`console.error(err.message);`'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.error(err.message);`'
- en: '`res.status(500).send(''Something broke!'');`'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.status(500).send(''Something broke!'');`'
- en: '`});`'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: Now compile and run the code with `**$ tsc**` and then `**$ node dist/main.js**`.
    After that open browser with `**http://localhost:3000/async-error**`it displays
    as Something broke!
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用 `**$ tsc**` 编译并运行代码，然后使用 `**$ node dist/main.js**`。之后，用浏览器打开 `**http://localhost:3000/async-error**`，它会显示为
    Something broke!
- en: In this example, we have an async function called `**asyncFunction**` that throws
    an error. We have a route handler that calls this function and catches any errors
    that occur using a try-catch block. If an error occurs, the next function is called
    with the error parameter to pass the error to the error-handling middleware.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有一个名为 `**asyncFunction**` 的异步函数，它会抛出一个错误。我们有一个路由处理程序调用此函数，并使用 try-catch
    块捕获发生的任何错误。如果发生错误，则使用带有错误参数的下一个函数调用，将错误传递给错误处理中间件。
- en: 'The error-handling middleware function takes four parameters: `err`, `req`,
    `res`, and `next`. If an error occurs in any middleware or route handler before
    this function, it will be passed to this middleware function. The middleware function
    logs the error to the console and sends a `**500 Internal Server Error**` response
    to the client.'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理中间件函数接受四个参数：`err`、`req`、`res` 和 `next`。如果在调用此函数之前的任何中间件或路由处理程序中发生错误，它将被传递给此中间件函数。中间件函数将错误记录到控制台并向客户端发送一个
    `**500 内部服务器错误**` 响应。
- en: Note that the `**async**` keyword is used before the route handler function
    to indicate that it is an asynchronous function. Also, the `**await**` keyword
    is used before the call to the `**asyncFunction**` to wait for the function to
    complete before proceeding to the next line of code.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在路由处理程序函数之前使用 `**async**` 关键字来指示它是一个异步函数。此外，在调用 `**asyncFunction**` 之前使用
    `**await**` 关键字来等待函数完成，然后再继续执行下一行代码。
- en: '![](img/3.9.jpg)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3.9.jpg)'
- en: '**Figure 3.9:** Async Error API'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3.9:** 异步错误 API'
- en: '*[Figure 3.10](#fig3_10)* shows the terminal output:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '*[图 3.10](#fig3_10)* 展示了终端输出：'
- en: '![](img/3.10.jpg)'
  id: totrans-367
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3.10.jpg)'
- en: '**Figure 3.10:** Async Error Terminal Output'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3.10:** 异步错误终端输出'
- en: It is important to handle errors properly in an Express.js application to ensure
    that the application is robust and reliable.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在Express.js应用程序中正确处理错误非常重要，以确保应用程序健壮且可靠。
- en: '[Static File Serving](toc.xhtml#s96a)'
  id: totrans-370
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[静态文件服务](toc.xhtml#s96a)'
- en: In Express.js, we can serve static files, such as images, CSS, JavaScript files,
    and more, using the `**express.static()**` middleware function, for example.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 在Express.js中，我们可以使用`**express.static()**`中间件函数提供静态文件，例如图像、CSS、JavaScript文件等。
- en: '`app.use(express.static(''public''));`'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.use(express.static(''public''));`'
- en: In the preceding example, we are serving static files from the public directory.
    The `**express.static()**` middleware function takes one argument, which is the
    name of the directory that contains the static files.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们正在从公共目录提供静态文件。`**express.static()**`中间件函数接受一个参数，即包含静态文件的目录名称。
- en: Once the middleware is set up, you can access your static files by specifying
    their URL relative to the public directory. For example, if you have a file called
    `**profilePic.png**` in the `**public/images**` directory, you can access it at
    `**http://localhost:3000/images/profilePic.png**`
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置好中间件，你可以通过指定相对于公共目录的URL来访问你的静态文件。例如，如果你在`**public/images**`目录中有一个名为`**profilePic.png**`的文件，你可以在`**http://localhost:3000/images/profilePic.png**`访问它。
- en: '![](img/3.11.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3.11.jpg)'
- en: '**Figure 3.11:** Static Serving Image File'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3.11:** 静态服务图像文件'
- en: '[Templating Engines](toc.xhtml#s97a)'
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[模板引擎](toc.xhtml#s97a)'
- en: In Express.js, templating engines are used to generate HTML markup and dynamically
    render views. Templating engines allow you to create templates with placeholders
    for dynamic data that can be replaced with real data when the template is rendered.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在Express.js中，模板引擎用于生成HTML标记和动态渲染视图。模板引擎允许你创建带有占位符的模板，这些占位符可以在模板渲染时用实际数据替换。
- en: 'Some of the popular templating engines supported by Express.js include:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: Express.js支持的流行模板引擎包括：
- en: EJS (Embedded JavaScript)
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EJS（嵌入式JavaScript）
- en: Pug (formerly Jade)
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pug（以前称为Jade）
- en: Handlebars
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Handlebars
- en: Mustache
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mustache
- en: To use a templating engine in an Express.js application, you need to install
    the engine using npm and set it as the default view engine in the app configuration.
    Then you can create views using the syntax and features of the chosen templating
    engine.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Express.js应用程序中使用模板引擎，你需要使用npm安装该引擎，并将其设置为应用程序配置中的默认视图引擎。然后你可以使用所选模板引擎的语法和功能创建视图。
- en: 'Open the terminal and install dependency for `**ejs**` with the following command:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端，使用以下命令安装`**ejs**`的依赖项：
- en: '`$ npm install ejs --save`'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ npm install ejs --save`'
- en: 'Once `**ejs**` is installed, we can try the following example code:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了`**ejs**`，我们可以尝试以下示例代码：
- en: '`app.set(''view engine'', ''ejs'');`'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.set(''view engine'', ''ejs'');`'
- en: '`app.set(''views'', path.join(__dirname, ''views''));`'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.set(''views'', path.join(__dirname, ''views''));`'
- en: '`app.get(''/ejs'', (req, res) => {`'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.get(''/ejs'', (req, res) => {`'
- en: '`const data = {`'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '`const data = {`'
- en: '`title: ''My App'',`'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`title: ''My App'',`'
- en: '`message: ''Hello, I am from EJS !!''`'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`message: ''Hello, I am from EJS !!''`'
- en: '`};`'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`};`'
- en: '`res.render(''index'', data);`'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`res.render(''index'', data);`'
- en: '`});`'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`});`'
- en: Create `**index.ejs**` file and paste html code.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`**index.ejs**`文件并粘贴html代码。
- en: '`<!DOCTYPE html>`'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`<!DOCTYPE html>`'
- en: '`<html>`'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`<html>`'
- en: '`<head>`'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`<head>`'
- en: '`<title><%= title %></title>`'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`<title><%= title %></title>`'
- en: '`</head>`'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`</head>`'
- en: '`<body>`'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`<body>`'
- en: '`<h1><%= message %></h1>`'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`<h1><%= message %></h1>`'
- en: '`</body>`'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`</body>`'
- en: '`</html>`'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`</html>`'
- en: In this example, we use the `**<%= %>**` syntax to output the `"**title**"`
    and `"**message**"` variables that were passed to the view in the route handler.
    When the view is rendered, these variables will be replaced with their respective
    values.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用`**<%= %>**`语法输出在路由处理程序中传递给视图的`"**title**"`和`"**message**"`变量。当视图渲染时，这些变量将被它们相应的值替换。
- en: The TypeScript compiler handles the task of generating JavaScript files and
    transferring them to the `**dist**` folder. However, it does not handle the copying
    of other necessary project files like EJS view templates. To address this, you
    can create a build script responsible for copying all additional files to the
    `**dist**` folder.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript编译器处理生成JavaScript文件并将它们传输到`**dist**`文件夹的任务。然而，它不处理复制其他必要项目文件，如EJS视图模板。为了解决这个问题，你可以创建一个负责将所有附加文件复制到`**dist**`文件夹的构建脚本。
- en: To automatically copy files from the views folder to the `**dist**` folder after
    compiling your TypeScript code, you can use a build tool like `**copyfiles**`
    or copy.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译你的TypeScript代码后，要自动将文件从视图文件夹复制到`**dist**`文件夹，你可以使用像`**copyfiles**`或copy这样的构建工具。
- en: 'First, install the `**copyfiles**` package as a dev dependency with the following
    command executed in the terminal:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用以下命令在终端中安装`**copyfiles**`包作为开发依赖项：
- en: '`$npm install --save-dev copyfiles`'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '`$npm install --save-dev copyfiles`'
- en: 'Now update the scripts in `**package.json**` with the following code:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 现在更新`**package.json**`中的脚本如下：
- en: '`"scripts": {`'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '`"scripts": {`'
- en: '`"build": "tsc && npm run copy-views",`'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '`"build": "tsc && npm run copy-views",`'
- en: '`"copy-views": "cpy ''views/*'' dist/views/ --recursive"`'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '`"copy-views": "cpy ''views/*'' dist/views/ --recursive"`'
- en: '`}`'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: 'Then execute script from the terminal with the following code:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下代码在终端中执行脚本：
- en: '`$ npm run build`'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ npm run build`'
- en: '![](img/3.12.jpg)'
  id: totrans-419
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3.12.jpg)'
- en: '**Figure 3.12:** Build Application'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3.12**：构建应用程序'
- en: After running the application, you can open your web browser and navigate to
    `**http://localhost:3000/ejs**`. This will display the HTML output in the browser,
    as shown in the following image.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序后，您可以在网络浏览器中打开并导航到`**http://localhost:3000/ejs**`。这将显示浏览器中的HTML输出，如下面的图像所示。
- en: '![](img/3.13.jpg)'
  id: totrans-422
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3.13.jpg)'
- en: '**Figure 3.13:** Browser EJS Template'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '**图3.13**：浏览器EJS模板'
- en: '[Security and Performance Best Practices](toc.xhtml#s98a)'
  id: totrans-424
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[安全和性能最佳实践](toc.xhtml#s98a)'
- en: 'There are several security best practices to follow when developing applications
    with Express.js:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Express.js开发应用程序时，有一些安全最佳实践需要遵循：
- en: '**Use secure HTTP protocols**: Always use HTTPS instead of HTTP to ensure secure
    communication between client and server.'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用安全的HTTP协议**：始终使用HTTPS而不是HTTP，以确保客户端和服务器之间的安全通信。'
- en: '**Use the latest version**: Keep your Express.js version up to date, and apply
    security patches as soon as they become available.'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用最新版本**：保持Express.js版本更新，并在可用时立即应用安全补丁。'
- en: '**Avoid using deprecated or vulnerable packages**: Use only up-to-date, well-maintained
    packages and avoid deprecated or vulnerable ones.'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免使用已弃用或易受攻击的包**：仅使用最新、维护良好的包，并避免使用已弃用或易受攻击的包。'
- en: '**Validate user input**: Always validate user input to prevent injection attacks,
    cross-site scripting (XSS) attacks, and other malicious activities.'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证用户输入**：始终验证用户输入以防止注入攻击、跨站脚本（XSS）攻击和其他恶意活动。'
- en: '**Use a Content Security Policy (CSP)**: Implement a Content Security Policy
    (CSP) to protect against XSS attacks by limiting the resources that a page can
    load.'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用内容安全策略（CSP）**：通过限制页面可以加载的资源来实施内容安全策略（CSP），以防止跨站脚本（XSS）攻击。'
- en: '**Example:**'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**示例**：'
- en: '`app.use((req, res, next) => {`'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`app.use((req, res, next) => {`'
- en: '`res.setHeader(`'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`res.setHeader(`'
- en: '`''Content-Security-Policy'',`'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`''Content-Security-Policy'',`'
- en: '`"default-src ''self''; script-src ''self''` `''unsafe-inline''; img-src ''self''
    data:; font-src ''self'' data:;"`'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`"default-src ''self''; script-src ''self'' `''unsafe-inline''; img-src ''self''
    data:; font-src ''self'' data:"`'
- en: '`);`'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`);`'
- en: '`next();`'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`next();`'
- en: '`});`'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`});`'
- en: 'The CSP header is then set in a middleware function that is added to the Express
    app. The CSP policy in this example allows scripts to be loaded from the same
    domain (‘`` `**unsafe-inline**` ``**’). Images and fonts are allowed from the
    same domain as well as from the data: protocol.**'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后将CSP头设置在添加到Express应用的中间件函数中。在这个示例中，CSP策略允许从同一域名加载脚本（`'unsafe-inline'`）。图像和字体也允许从同一域名以及data:协议加载。
- en: '***   **Implement rate limiting**: Implement rate limiting to prevent brute
    force attacks and other types of attacks that involve repeated requests.'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '***   **实现速率限制**：实现速率限制以防止暴力攻击和其他涉及重复请求的攻击类型。'
- en: '**Example:**'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**示例**：'
- en: 'First, install the `**express-rate-limit**` package using npm:'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，使用npm安装`**express-rate-limit**`包：
- en: '`$ npm install express-rate-limit`'
  id: totrans-443
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`$ npm install express-rate-limit`'
- en: 'Then, require the package and create a new rate limiter object with the desired
    options:'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，引入该包并使用所需选项创建一个新的速率限制器对象：
- en: '`const rateLimit = require("express-rate-limit");`'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`const rateLimit = require("express-rate-limit");`'
- en: '`const limiter = rateLimit({`'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`const limiter = rateLimit({`'
- en: '`windowMs: 15 * 60 * 1000, // 15 minutes`'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`windowMs: 15 * 60 * 1000, // 15分钟`'
- en: '`max: 100 // limit each IP to 100 requests per windowMs`'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`max: 100 // 限制每个IP每windowMs 100次请求`'
- en: '`});`'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`});`'
- en: In this example, we are creating a rate limiter that limits each IP address
    to 100 requests every 15 minutes.
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了一个速率限制器，限制每个IP地址在15分钟内每100次请求。
- en: 'Finally, apply the rate limiter middleware to the desired routes:'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，将速率限制中间件应用到所需的路由：
- en: '`app.use(limiter);`'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`app.use(limiter);`'
- en: '`app.get("/", (req, res) => {`'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`app.get("/", (req, res) => {`'
- en: '`res.send("Hello World!");`'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`res.send("Hello World!");`'
- en: '`});`'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`});`'
- en: Now, each incoming request to the root route (`"`/`"`) will be checked against
    the rate limiter. If the IP address has exceeded the maximum number of requests
    within the specified time window, the middleware will return a 429 `"**Too Many
    Requests**"` error.
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，每个到达根路由（`"`/`"`) 的请求都将与速率限制器进行核对。如果 IP 地址在指定的时间窗口内超过了最大请求数量，中间件将返回一个 429
    `"**Too Many Requests**"` 错误。
- en: '**Use helmet**: Use the helmet middleware to add additional security headers
    to HTTP responses, such as the X-XSS-Protection, X-Content-Type-Options, and X-Frame-Options
    headers.'
  id: totrans-457
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 helmet**：使用 helmet 中间件向 HTTP 响应添加额外的安全头，例如 X-XSS-Protection、X-Content-Type-Options
    和 X-Frame-Options 头。'
- en: '**Example:**'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**示例**：'
- en: '`import helmet from "helmet";`'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`import helmet from "helmet";`'
- en: '`// Use Helmet middleware`'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`// 使用 Helmet 中间件`'
- en: '`app.use(helmet());`'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`app.use(helmet());`'
- en: '`// Add routes to the app`'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`// 向应用程序添加路由`'
- en: '`app.get("/", (req, res) => {`'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`app.get("/", (req, res) => {`'
- en: '`res.send("Hello, world!");`'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`res.send("Hello, world!");`'
- en: '`});`'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`});`'
- en: In this example, the helmet middleware is imported from the helmet package and
    used in the application using `**app.use(helmet())**`. This will automatically
    add security headers to HTTP responses, such as setting the X-Content-Type-Options
    header to `**nosniff**` to prevent browsers from interpreting response content
    as a different MIME type.
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个示例中，从 helmet 包中导入 helmet 中间件，并使用 `**app.use(helmet())**` 在应用程序中使用它。这将自动向
    HTTP 响应添加安全头，例如将 X-Content-Type-Options 头设置为 `**nosniff**` 以防止浏览器将响应内容解释为不同的 MIME
    类型。
- en: Note that this is just a basic example, and additional configuration may be
    necessary depending on the specific security needs of your application.
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，这只是一个基本示例，根据您应用程序的具体安全需求，可能还需要额外的配置。
- en: '**Use secure cookies**: When using cookies, set the secure and `**httpOnly**`
    flags to prevent cross-site scripting (XSS) and cross-site request forgery (CSRF)
    attacks.'
  id: totrans-468
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用安全 cookies**：当使用 cookies 时，设置 secure 和 `**httpOnly**` 标志以防止跨站脚本（XSS）和跨站请求伪造（CSRF）攻击。'
- en: '**Example:**'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**示例**：'
- en: '`import cookieParser from ''cookie-parser'';`'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`import cookieParser from ''cookie-parser'';`'
- en: '`app.use(cookieParser(''secret''));`'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`app.use(cookieParser(''secret''));`'
- en: '`app.get(''/set-cookie'', (req, res) => {`'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**使用代码检查器和安全扫描器**：使用代码检查器和安全扫描器来检测和修复代码中的潜在安全问题。最佳示例是 `**EsLint**`。**'
- en: '`res.cookie(''myCookie'', ''someValue'', {`'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`res.cookie(''myCookie'', ''someValue'', {`'
- en: '`httpOnly: true,`'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`httpOnly: true,`'
- en: '`sameSite: ''strict'',`'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`sameSite: ''strict'',`'
- en: '`secure: true`'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`secure: true`'
- en: '`});`'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`});`'
- en: '`res.send(''Cookie set successfully!'');`'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`res.send(''Cookie set successfully!'');`'
- en: '`});`'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`});`'
- en: In this example, the cookie-parser middleware is used to parse cookies in incoming
    requests. The secret argument is used to sign and encrypt the cookies.
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个示例中，cookie-parser 中间件用于解析传入请求中的 cookies。secret 参数用于签名和加密 cookies。
- en: The `**/set-cookie**` route sets a new cookie with the `**res.cookie()**` method.
    The httpOnly option prevents the cookie from being accessed by JavaScript code,
    making it more difficult for an attacker to steal the cookie using a cross-site
    scripting (XSS) attack. The sameSite option limits the scope of the cookie to
    the same site that set it, reducing the risk of cross-site request forgery (CSRF)
    attacks. The secure option ensures that the cookie is only sent over HTTPS, protecting
    it from interception by network attackers.
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`/set-cookie` 路由使用 `**res.cookie()**` 方法设置一个新的 cookie。httpOnly 选项防止 JavaScript
    代码访问 cookie，使得攻击者使用跨站脚本（XSS）攻击窃取 cookie 更加困难。sameSite 选项限制 cookie 的作用域为设置它的同一站点，降低跨站请求伪造（CSRF）攻击的风险。secure
    选项确保 cookie 只通过 HTTPS 发送，从而保护它免受网络攻击者的拦截。'
- en: By following these best practices for secure cookie handling, you can significantly
    improve the security of your Express.js application.
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过遵循安全 cookie 处理的最佳实践，您可以显著提高 Express.js 应用程序的安全性。
- en: '**Implement a secure deployment process**: Implement a secure deployment process
    that includes secure configurations, code review, and testing to prevent security
    vulnerabilities from being introduced into production.*   **Use a linter and security
    scanner**: Use a linter and security scanner to detect and fix potential security
    issues in your code. The best example is `**EsLint**`.**'
  id: totrans-483
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施安全的部署流程**：实施一个安全的部署流程，包括安全配置、代码审查和测试，以防止安全漏洞被引入生产环境。'
- en: '**By following these security best practices, you can help ensure that your
    Express.js applications are secure and protected against common security threats.'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '**遵循这些安全最佳实践，可以帮助确保您的 Express.js 应用程序安全，并防止常见的安全威胁**。'
- en: 'There are some performance best practices to follow when developing applications
    with Express.js:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Express.js 开发应用程序时，有一些性能最佳实践需要遵循：
- en: '**Avoid the use of synchronous functions**: It is recommended to use asynchronous
    code because synchronous code in production slows down the application, so try
    to avoid unnecessary synchronous functions and use `**async**`/`**await**` with
    promises.'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免使用同步函数**：建议使用异步代码，因为生产环境中的同步代码会减慢应用程序的运行速度，因此尽量避免不必要的同步函数，并使用 `**async**`/`**await**`
    与承诺一起使用。'
- en: '**Exception handling**: Use always try catch to handle the exception at the
    code level so it does not break the application on run time.'
  id: totrans-487
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异常处理**：始终使用 try catch 在代码级别处理异常，以防止在运行时破坏应用程序。'
- en: '**Reduce middleware usage**: Use only the required middleware and avoid excessive
    usage. Middleware can be resource-intensive and may slow down the application.'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少中间件使用**：仅使用所需的中间件，避免过度使用。中间件可能非常消耗资源，可能会减慢应用程序的运行速度。'
- en: '**Caching**: Implement caching for frequently requested data such as static
    files or API responses. By caching this data, you can reduce the number of requests
    that the server has to process and significantly improve the response times of
    your application.'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**：对频繁请求的数据（如静态文件或API响应）实现缓存。通过缓存这些数据，您可以减少服务器需要处理请求数量，从而显著提高应用程序的响应时间。'
- en: '**Use cluster**: Use Node.js Cluster mode to utilize all available CPU cores
    and distribute the load evenly across all cores which improves the performance
    of the application.'
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用集群**：使用Node.js集群模式来利用所有可用的CPU核心，并将负载均匀地分配到所有核心，从而提高应用程序的性能。'
- en: '**Auto restart application**: Make sure that if anytime application crashes
    then it automatically restarts so use a process manager or packages such as PM2
    or Forever for that.'
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动重启应用程序**：确保如果应用程序在任何时候崩溃，则自动重启，因此请使用进程管理器或PM2或Forever等包来实现。'
- en: By following these recommended practices, you can enhance the performance of
    your Express.js application, resulting in a faster and more efficient user experience.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些推荐的最佳实践，您可以提升您的 Express.js 应用程序的性能，从而实现更快速、更高效的用户体验。
- en: '[Conclusion](toc.xhtml#s99a)'
  id: totrans-493
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[结论](toc.xhtml#s99a)'
- en: In this chapter, we learned about Express.js, a popular and powerful web application
    framework for Node.js. We learned about its offerings, upsides, and limitations.
    While it has a few limitations, the benefits of Express.js, such as its active
    community, extensive documentation, and support for REST API development, make
    it an excellent choice for web development projects.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Express.js，这是一个流行的、强大的Node.js Web应用程序框架。我们了解了它的提供内容、优点和局限性。虽然它有一些局限性，但
    Express.js 的好处，如活跃的社区、广泛的文档和对REST API开发的支撑，使其成为Web开发项目的绝佳选择。
- en: In the next chapter, we will start building a project management system application.
    We will take this as a big exercise to learn the concepts of TypeScript and Express.Js.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始构建一个项目管理系统应用程序。我们将以此作为一个大练习来学习TypeScript和Express.Js的概念。
- en: '[Multiple Choice Questions](toc.xhtml#s100a)'
  id: totrans-496
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[多项选择题](toc.xhtml#s100a)'
- en: What is Express.js primarily used for?
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Express.js 主要用于什么？
- en: Database management
  id: totrans-498
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据库管理
- en: Front-end development
  id: totrans-499
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前端开发
- en: Building web applications and APIs
  id: totrans-500
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建Web应用程序和API
- en: Machine learning
  id: totrans-501
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 机器学习
- en: What advantages and drawbacks are associated with the Express.js framework?
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与 Express.js 框架相关联的优点和缺点是什么？
- en: Advantages encompass its lightweight and minimalist design, while drawbacks
    involve the absence of built-in features for complex applications.
  id: totrans-503
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 优点包括其轻量级和极简设计，而缺点涉及复杂应用程序缺少内置功能。
- en: Advantages comprise a wide range of built-in features for complex applications,
    while drawbacks pertain to suboptimal performance.
  id: totrans-504
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 优点包括为复杂应用程序提供广泛内置功能，而缺点涉及性能不佳。
- en: Advantages include automated scaling for high-traffic applications, while drawbacks
    involve a challenging learning curve.
  id: totrans-505
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 优点包括为高流量应用程序提供自动扩展，而缺点涉及学习曲线挑战。
- en: Advantages entail effortless integration with databases, while drawbacks concern
    the absence of routing support.
  id: totrans-506
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 优点包括与数据库的无缝集成，而缺点涉及缺少路由支持。
- en: What is the purpose of the Express.js Router object?
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Express.js 路由对象的作用是什么？
- en: To define routes for multiple applications
  id: totrans-508
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为多个应用程序定义路由
- en: To create middleware functions
  id: totrans-509
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建中间件函数
- en: To handle errors in the application
  id: totrans-510
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理应用程序中的错误
- en: To define routes for a specific part of the application
  id: totrans-511
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为应用程序的特定部分定义路由
- en: What role does middleware play in an Express.js application?
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 中间件在 Express.js 应用程序中扮演什么角色？
- en: To host static files
  id: totrans-513
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以托管静态文件
- en: To establish routes
  id: totrans-514
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 建立路由
- en: To manage incoming requests and responses
  id: totrans-515
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理传入的请求和响应
- en: To facilitate authentication
  id: totrans-516
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以便进行身份验证
- en: How can you handle routing parameters in Express.js?
  id: totrans-517
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何在 Express.js 中处理路由参数？
- en: Using the `req.routeParams` object
  id: totrans-518
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `req.routeParams` 对象
- en: By defining separate route handlers for each parameter
  id: totrans-519
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过为每个参数定义单独的路由处理程序
- en: Accessing them directly from the URL
  id: totrans-520
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 直接从 URL 访问它们
- en: Using the `req.params` object
  id: totrans-521
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `req.params` 对象
- en: What does the `next()` function do in Express.js middleware?
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Express.js 中间件中的 `next()` 函数做什么？
- en: Ends the request-response cycle
  id: totrans-523
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结束请求-响应周期
- en: Passes control to the next middleware function
  id: totrans-524
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将控制权传递给下一个中间件函数
- en: Sends a response to the client
  id: totrans-525
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向客户端发送响应
- en: Logs information to the console
  id: totrans-526
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将信息记录到控制台
- en: How can you handle errors in an Express.js application using middleware?
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用中间件在 Express.js 应用程序中处理错误？
- en: Use the `catchError` middleware function
  id: totrans-528
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `catchError` 中间件函数
- en: Wrap the code in `try-catch` blocks
  id: totrans-529
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码包裹在 `try-catch` 块中
- en: Use the error event on the app object
  id: totrans-530
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用应用对象的错误事件
- en: Define an error-handling middleware with four parameters
  id: totrans-531
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用四个参数定义错误处理中间件
- en: Which of the following Express.js middleware is commonly used for parsing JSON
    requests?
  id: totrans-532
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个 Express.js 中间件通常用于解析 JSON 请求？
- en: '`express-static`'
  id: totrans-533
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`express-static`'
- en: '`body-parser`'
  id: totrans-534
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`body-parser`'
- en: '`cookie-parser`'
  id: totrans-535
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cookie-parser`'
- en: '`express-session`'
  id: totrans-536
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`express-session`'
- en: What is the primary purpose of the `"cookie-parser"` middleware in an Express.js
    application?
  id: totrans-537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Express.js 应用程序中，“cookie-parser” 中间件的主要目的是什么？
- en: To generate random cookies for user sessions.
  id: totrans-538
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成用于用户会话的随机 cookie。
- en: To parse and handle incoming HTTP requests.
  id: totrans-539
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析和处理传入的 HTTP 请求。
- en: To parse cookies attached to incoming HTTP requests.
  id: totrans-540
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解析附加到传入 HTTP 请求的 cookie。
- en: To set secure HTTP headers for cookie handling.
  id: totrans-541
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置安全的 HTTP 头部以处理 cookie。
- en: Which middleware is used for handling Cross-Origin Resource Sharing (CORS) in
    Express.js applications?
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Express.js 应用程序中，用于处理跨源资源共享 (CORS) 的中间件是哪个？
- en: '`express-cors`'
  id: totrans-543
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`express-cors`'
- en: '`cors-express`'
  id: totrans-544
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cors-express`'
- en: '`cross-origin`'
  id: totrans-545
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cross-origin`'
- en: '`cors`'
  id: totrans-546
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`cors`'
- en: '[Answers](toc.xhtml#s101a)'
  id: totrans-547
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[答案](toc.xhtml#s101a)'
- en: c
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c
- en: a
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a
- en: d
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: d
- en: c
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c
- en: d
  id: totrans-552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: d
- en: b
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b
- en: d
  id: totrans-554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: d
- en: b
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b
- en: c
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c
- en: d
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: d
- en: '[Further Readings](toc.xhtml#s102a)'
  id: totrans-558
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[进一步阅读](toc.xhtml#s102a)'
- en: '[https://expressjs.com](https://expressjs.com)'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://expressjs.com](https://expressjs.com)'
- en: '[https://blog.dreamfactory.com/rest-apis-an-overview-of-basic-principles/](https://blog.dreamfactory.com/rest-apis-an-overview-of-basic-principles/)'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://blog.dreamfactory.com/rest-apis-an-overview-of-basic-principles/](https://blog.dreamfactory.com/rest-apis-an-overview-of-basic-principles/)'
- en: '[https://restfulapi.net/](https://restfulapi.net/)**'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://restfulapi.net/](https://restfulapi.net/)'
