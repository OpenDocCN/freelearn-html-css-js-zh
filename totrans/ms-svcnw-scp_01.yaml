- en: Getting Started
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门指南
- en: Welcome. In this book, I hope to teach you and enhance your ServiceNow scripting
    to ensure you can really be a scripting master. I will show when to configure
    and when to customize ServiceNow with scripts to achieve your goals. Building
    on the glide classes of ServiceNow, client- and server-side scripting will also
    be explored and explained.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎您。在这本书中，我希望教会您并提高您的 ServiceNow 脚本技能，以确保您真正成为一名脚本大师。我将展示何时使用脚本配置和定制 ServiceNow
    以实现您的目标。基于 ServiceNow 的 glide 类，还将探讨并解释客户端和服务器端脚本。
- en: Advancing through Jelly script and custom pages, this book also looks at debugging
    and best practices, rounding off with how to build your own custom applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Jelly 脚本和定制页面进行深入，本书还将探讨调试和最佳实践，最后介绍如何构建您自己的定制应用程序。
- en: Starting off in this first chapter, we look at when it is appropriate to script,
    and why scripting should be used, as well as configuring or customizing a ServiceNow
    instance. We will also explore the basic types of scripts in ServiceNow and when
    they are run. This chapter also covers the running order of ServiceNow scripts,
    a brief introduction to scripting, and the script editor used for scripting.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我们将探讨何时适合编写脚本，以及为什么应该使用脚本，以及如何配置或定制 ServiceNow 实例。我们还将探讨 ServiceNow 中的基本脚本类型及其运行时机。本章还将涵盖
    ServiceNow 脚本的运行顺序、脚本简介以及用于脚本的脚本编辑器。
- en: 'The topics we will cover in this chapter are:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的主题包括：
- en: Configuration versus customization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置与定制
- en: When to script in ServiceNow
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 ServiceNow 中何时编写脚本
- en: Script types
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本类型
- en: Order of execution of scripts in ServiceNow
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ServiceNow 中脚本的执行顺序
- en: Basics of scripting
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本基础知识
- en: Script editor
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本编辑器
- en: Configuration versus customization
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置与定制
- en: ServiceNow instances are complex. There are a great many ways in which they
    can be changed, and often, there are several ways to achieve the same goal using
    different techniques. These changes can be done through configuration and customization.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ServiceNow 实例很复杂。它们可以通过许多方式改变，而且通常，使用不同的技术实现相同目标的方法有很多。这些更改可以通过配置和定制来完成。
- en: Configuration uses the ServiceNow interface to set up rules, conditions, and
    other configurations, like global system properties and filters. This is often
    made by using a series of drop-down lists.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 配置使用 ServiceNow 界面来设置规则、条件和其他配置，如全局系统属性和过滤器。这通常是通过一系列下拉列表来完成的。
- en: 'We can see an example of this in a business rule as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在以下业务规则示例中看到这一点：
- en: '![](img/4e4cdc22-7123-4e45-bb7c-d9ec9cc1959e.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e4cdc22-7123-4e45-bb7c-d9ec9cc1959e.png)'
- en: 'Figure 1.1: Configuration example from a business rule'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：来自业务规则的配置示例
- en: In *Figure 1.1 *we can see filter conditions and and the values to set based
    on the filter. This configuration example uses no code and is preferable to customization.
    This type of filtering is seen across the ServiceNow platform.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 1.1* 中，我们可以看到筛选条件和基于筛选设置值的条件。此配置示例不使用代码，并且比定制更可取。这种筛选类型在 ServiceNow 平台上随处可见。
- en: Most system administrators will be able to administer their instance with configuration
    alone. A configured instance will suffice for a certain level of functionality
    on an instance, and, if you are trying to achieve a goal where configuration is
    available, it is usually the best option.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数系统管理员将能够仅通过配置来管理他们的实例。配置后的实例可以在实例上满足一定级别的功能，如果您试图实现配置可用的目标，这通常是最佳选择。
- en: Customization is when an administrator uses scripts to allow an instance to
    perform further tasks beyond what configuration can do alone. ServiceNow is extremely
    open-ended, and the ability to write scripts at multiple points when loading and
    submitting forms makes it very versatile.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 定制是指管理员使用脚本允许实例执行配置本身无法单独完成的进一步任务。ServiceNow 非常开放，在加载和提交表单时在多个点编写脚本的能力使其非常灵活。
- en: A customization might be to write a script to add a date validation on a field
    and show a message or clear the field if an incorrect value is entered. Custom
    scripts are to be managed by the creator, as ServiceNow is not responsible for
    the code. Therefore, if you start to move into the customization route, make sure
    you know what you are doing.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一种定制可能是编写一个脚本，在字段上添加日期验证，并在输入错误值时显示消息或清除字段。定制脚本应由创建者管理，因为 ServiceNow 不负责代码。因此，如果您开始进入定制路线，请确保您知道自己在做什么。
- en: As the creator will need to maintain the script created, they will also need
    to ensure that it will still function when an instance of ServiceNow is upgraded.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于创建者需要维护创建的脚本，他们还需要确保脚本在ServiceNow实例升级后仍然能够运行。
- en: If customizing an existing ServiceNow script, rather than customizing the script
    itself, copy it, rename the copied script, and deactivate the existing script.
    Then you can make as many changes to the new copied script as you like, while
    having the original backed up in case it is needed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要自定义现有的ServiceNow脚本，而不是直接自定义脚本本身，请复制它，重命名复制的脚本，并停用现有的脚本。然后你可以对新的复制脚本进行任何你喜欢的更改，同时保留原始脚本以防万一需要。
- en: To script or not to script?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要编写脚本还是不要编写脚本？
- en: For new administrators, it can be difficult to know when to script. For coders,
    it can be easy to look to script before you need to, with so many opportunities
    to write script in ServiceNow. However, it is much better to not write script
    wherever possible.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新管理员来说，知道何时编写脚本可能很困难。对于程序员来说，由于在ServiceNow中有许多编写脚本的机会，所以在需要之前就编写脚本可能很容易。然而，尽可能不编写脚本会更好。
- en: If you can configure instead of scripting, it should be your first thought.
    This allows the tool to be used in the way it was intended and will leave you
    much more prepared when upgrading your instance. Not only that; one of the main
    reasons for using configurations over customizing is for maintenance. Configurations
    are easily maintained by different admins, while customization's require some
    basic knowledge of scripts and the logic behind them, so they tend to be harder
    to maintain and troubleshoot. Remember, once you start to customize, maintaining
    that customiszation is your responsibility.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以通过配置而不是编写脚本来实现，那么这应该是你的首要考虑。这允许工具以预期的方式使用，并在升级实例时让你准备得更充分。不仅如此；使用配置而不是自定义的主要原因之一是为了维护。配置可以由不同的管理员轻松维护，而自定义则需要一些对脚本及其逻辑的基本了解，因此它们往往更难维护和调试。记住，一旦开始自定义，维护该自定义就是你的责任。
- en: If you find yourself unable to achieve your goals with configuration alone,
    then you should look to script. Even though configuration is your best option,
    scripting accounts for a lot of advanced functionality on most instances. Almost
    all mature instances will have some level of scripting done to them, but the instances
    that function better are the ones where scripting was performed when appropriate.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己仅用配置无法实现目标，那么你应该考虑编写脚本。尽管配置是你的最佳选择，但脚本在大多数实例上提供了许多高级功能。几乎所有的成熟实例都会进行一定程度的脚本编写，但那些表现更好的实例是在适当的时候进行了脚本编写的。
- en: For example, if you are looking to show, hide, or make mandatory or read-only
    a field, then this could be done as a client script or a UI policy. If you simply
    needed to perform one of the actions based on a value in a field, then in this
    instance, a UI policy is the better choice, as it can achieve the goal without
    using a script. However, if you needed to perform the action based on whether
    the logged-in user has a particular role, then you will need to use a script.
    Scripting can be done in a UI policy, but I usually opt for a client script in
    this scenario.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想要显示、隐藏、使字段必填或只读，这可以通过客户端脚本或UI策略来完成。如果你只需要根据字段中的值执行一项操作，那么在这种情况下，UI策略是更好的选择，因为它可以在不使用脚本的情况下实现目标。然而，如果你需要根据登录用户是否具有特定角色来执行操作，那么你需要使用脚本。脚本可以在UI策略中完成，但在此场景中，我通常选择客户端脚本。
- en: Try to avoid scripting wherever possible. Configuring an instance instead has
    many benefits and makes an instance easier to maintain.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能避免编写脚本。配置实例而不是编写脚本有许多好处，并使实例更容易维护。
- en: Types of script
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本类型
- en: There are a multitude of different scripts you can write in ServiceNow, and
    the times at which they run will often dictate which is best. However, all of
    these scripts will fall under two categories. These are client-side scripts and
    server-side scripts.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在ServiceNow中，你可以编写许多不同的脚本，它们运行的时间通常决定了哪种脚本最好。然而，所有这些脚本都将分为两大类。这些是客户端脚本和服务器端脚本。
- en: 'These two script types will be explored further in subsequent chapters, but
    we will look at the basic definitions here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种脚本类型将在后续章节中进一步探讨，但在这里我们将先看看基本定义：
- en: A client-side script will run in front of the user, based on the data that was
    delivered to the user on the web page, usually to a form or a list, in that no
    form submissions are required. These scripts can only use the data loaded as part
    of the web page to run their scripts with (if they only run on the client side),
    as that is the only data available. The most common client-side script is simply
    named a client script in ServiceNow. Some common uses for these scripts would
    be to draw attention to a field to change or validate a field's value.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端脚本将在用户面前运行，基于用户在网页上接收到的数据，通常是一个表单或列表，在这种情况下不需要表单提交。这些脚本只能使用作为网页一部分加载的数据来运行它们的脚本（如果它们仅在客户端运行），因为这是唯一可用的数据。在ServiceNow中，最常见的客户端脚本简单地被称为客户端脚本。这些脚本的一些常见用途包括吸引用户注意需要更改的字段或验证字段值。
- en: A server-side script will run behind the scenes once a form is submitted or
    a different trigger occurs. As this type of script is run on the server, it can
    use all the data held in the ServiceNow database, rather than just what was loaded
    on the web page. The business rule is the most commonly used server-side script.
    A business rule has many ways of functioning, but will usually run after a form
    submission, with common tasks to amend field values or update parent or child
    records.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端脚本将在表单提交或发生不同触发器后幕后运行。由于此类脚本在服务器上运行，它可以使用ServiceNow数据库中持有的所有数据，而不仅仅是加载在网页上的数据。业务规则是最常用的服务器端脚本。业务规则有多种运行方式，但通常会在表单提交后运行，常见的任务包括修改字段值或更新父或子记录。
- en: 'The following table shows the most common types of scripts and whether they
    run on the client or server side:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了最常见的脚本类型以及它们是否在客户端或服务器端运行：
- en: '| **Client side** | **Server side** |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| **客户端** | **服务器端** |'
- en: '| Client Scripts | Business Rules |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 客户端脚本 | 业务规则 |'
- en: '| UI Policies | Access Controls |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 用户界面策略 | 访问控制 |'
- en: '| UI Actions | Script Includes |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 用户界面操作 | 脚本包含 |'
- en: '|  | UI Actions |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '|  | 用户界面操作 |'
- en: '|  | Scheduled Jobs |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '|  | 定时作业 |'
- en: '|  | Background Scripts |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '|  | 背景脚本 |'
- en: '|  | Workflow Scripts |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '|  | 工作流脚本 |'
- en: '|  | Script Actions |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '|  | 脚本操作 |'
- en: You may notice from the preceding table that UI Actions appear in both the client
    and server side. This is because they can be run as either, and therefore, they
    fit into both categories. We'll discuss this and the other common script types
    more in later chapters.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到，从前面的表中可以看出，用户界面操作出现在客户端和服务器端。这是因为它们可以运行在任一侧，因此它们适合这两个类别。我们将在后面的章节中更详细地讨论这一点以及其他常见的脚本类型。
- en: All of the script types in the preceding table will be looked at in further
    detail later on, and each has an important role to play in making the most of
    your ServiceNow instance.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的表中的所有脚本类型都将在稍后进行更详细的研究，并且每个脚本类型都在充分利用ServiceNow实例中扮演着重要的角色。
- en: Server-side scripts are considered preferable where possible, as they can run
    in the background away from the user, whereas client-side scripts run in front
    of the user and often cause the most delay in loading pages.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，服务器端脚本被认为是首选的，因为它们可以在用户之外的后台运行，而客户端脚本则在用户面前运行，并且通常会导致页面加载延迟。
- en: It is possible for client-side scripts to call server-side scripts. This will
    usually result in a slight delay as the information is gathered from the database.
    This type of server call from a client script is best avoided where possible,
    but often, it is necessary. Later on, we'll discuss how to best call a server-side
    script from the client without creating long delays for the user.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端脚本可以调用服务器端脚本。这通常会导致轻微的延迟，因为信息是从数据库中收集的。在可能的情况下，最好避免从客户端脚本中进行此类服务器调用，但通常这是必要的。稍后，我们将讨论如何从客户端最佳地调用服务器端脚本，而不会为用户造成长时间的延迟。
- en: Client- and server-side scripts are a huge part of ServiceNow scripting, and
    the ways you can manipulate both to your advantage will determine your overall
    success in scripting in ServiceNow.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端和服务器端脚本是ServiceNow脚本的重要组成部分，您如何利用它们来获得优势将决定您在ServiceNow脚本中的整体成功。
- en: When writing a new script, ask yourself whether the result needs to be shown
    immediately in front of the user. If not, consider a server-side script rather
    than a client-side script.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当编写新脚本时，请考虑结果是否需要立即显示在用户面前。如果不是，考虑使用服务器端脚本而不是客户端脚本。
- en: Script execution
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本执行
- en: The order that a script executes in ServiceNow can be extremely important. Subsequent
    running scripts can undo or alter the changes a previous script has made.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在ServiceNow中脚本执行的顺序可能非常重要。后续运行的脚本可能会撤销或更改先前脚本所做的更改。
- en: Some scripts can be ordered by administrators, while others cannot. It is important
    to know how ordering your script will affect the outcome of the script. For a
    script that cannot be ordered it will need to run in any order compared with other
    baseline or custom scripts and still function correctly.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一些脚本可以由管理员指定顺序，而另一些则不能。了解如何对脚本进行排序将如何影响脚本的结果是很重要的。对于不能排序的脚本，它需要在与其他基线或自定义脚本相比的任何顺序中运行，并且仍然能够正确执行。
- en: When scripts can be ordered, they are run based on the order number assigned
    to them. Scripts are run in ascending order, so a script of order 50 would run
    before a script of order 100\. Each number is not unique, though, so you are able
    to have multiple scripts run at order 100, which is the default for a new script.
    In this scenario, with scripts with the same order number, you cannot be certain
    which order they will run in.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本可以排序时，它们将根据分配给它们的顺序号执行。脚本按顺序号升序执行，因此顺序号为50的脚本将先于顺序号为100的脚本执行。然而，每个数字并不是唯一的，因此您可以在顺序号为100的情况下运行多个脚本，这是新脚本的默认设置。在这种情况下，对于具有相同顺序号的脚本，您不能确定它们的执行顺序。
- en: Consider a scenario where script A is already in existence. Let's say that script
    A sets a user's active field to true. As an administrator, I write script B to
    set a user's active field to false. If script B has a lower order than script
    A, it will have no effect. This can easily be misinterpreted as script B not working
    correctly, but it is just being overwritten by script A. If script B is at a higher
    order than script A, then script B will look to be working correctly. However,
    script A is then redundant.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个场景，其中脚本A已经存在。假设脚本A将用户的活跃字段设置为true。作为管理员，我编写脚本B将用户的活跃字段设置为false。如果脚本B的顺序低于脚本A，它将没有效果。这很容易被误解为脚本B没有正确工作，但实际上它只是被脚本A覆盖了。如果脚本B的顺序高于脚本A，那么脚本B看起来会正常工作。然而，脚本A就变得冗余了。
- en: It isn't often that two scripts fly so obviously in the face of each other,
    but hidden among other code and multiple scripts, the above scenario is quite
    common in a more complicated guise. Ordering is therefore very important and quite
    a common reason for problems with scripts. To ensure you do not have issues with
    ordering in scripts, ensure you are aware of other scripts running on the field
    or fields you are working with before making changes with your own script.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 两个脚本如此明显地相互对立的情况并不常见，但在其他代码和多个脚本中隐藏的上述场景在更复杂的背景下相当常见。因此，排序非常重要，并且是脚本问题的一个常见原因。为了确保您在更改自己的脚本时不会遇到排序问题，确保在更改之前了解您正在处理的字段或字段上的其他脚本。
- en: As stated earlier, sometimes, you cannot order scripts. An example of this is
    for client scripts. These will essentially run in a random order, and therefore,
    when writing them, an administrator will need to take this into account. This
    means you cannot write a client script that relies on values or fields from another
    client script, otherwise it may break (if execution is not in the order you had
    hoped).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，有时您无法指定脚本的执行顺序。一个例子是客户端脚本。这些脚本将基本上以随机顺序执行，因此，在编写它们时，管理员需要考虑到这一点。这意味着您不能编写依赖于另一个客户端脚本中的值或字段的客户端脚本，否则它可能会出错（如果执行顺序不是您所期望的）。
- en: 'Most server-side code can be ordered, however. The order in which server-side
    scripts are run can be seen in the following diagram:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，大多数服务器端代码是可以排序的。服务器端脚本的执行顺序可以在以下图中看到：
- en: '![](img/328a30ca-a54e-44d5-991a-5a63c54ef379.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/328a30ca-a54e-44d5-991a-5a63c54ef379.png)'
- en: 'Figure 1.2: Execution order of scripts'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：脚本的执行顺序
- en: As you can see in the preceding figure, there are a number of different times
    at which scripts are run, and therefore, it is important for an administrator
    to determine the right order for their script.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的图中看到的，脚本在多个不同的时间点运行，因此，对于管理员来说，确定脚本的正确顺序是很重要的。
- en: There are two significant points to note from this ordering system. The first
    is that, barring email notifications, a script can be called before or after the
    database operation. Selecting the right script execution timing can help streamline
    an instance. Selecting the wrong execution time will usually not cause a problem,
    but can be rather inefficient. Generally, it is a best practice to call a script
    before the database operation if the script will change values about the current
    record; otherwise, the script can be run after the database operation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个排序系统中需要注意两个重要点。第一个是，除了电子邮件通知外，脚本可以在数据库操作之前或之后调用。选择正确的脚本执行时机可以帮助简化实例。选择错误的执行时间通常不会引起问题，但可能会相当低效。通常，如果脚本将更改当前记录的值，则最好在数据库操作之前调用脚本；否则，脚本可以在数据库操作之后运行。
- en: The second significant point is that order 1000 is an important number in ServiceNow.
    When I first started using ServiceNow, I wondered why so many scripts were ordered
    with such a high number. The reason is to run scripts in front of or behind engines.
    These engines include SLA, approval, and workflow engines. The main reason I have
    come across in my experience is to order scripts in relation to workflow scripts.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个重要点是，在ServiceNow中，1000这个顺序号是一个重要的数字。当我第一次开始使用ServiceNow时，我很好奇为什么有这么多脚本的顺序号如此之高。原因是运行脚本在引擎之前或之后。这些引擎包括SLA、审批和工作流引擎。我在经验中遇到的主要原因是根据工作流脚本来排序脚本。
- en: Script execution order bugs can be difficult to diagnose, as it can take a long
    time finding what other scripts are interfering with the current script you are
    working on. That is why it is important to label all code clearly and write meaningful
    comments within your scripts.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本执行顺序错误可能难以诊断，因为它可能需要花费很长时间来找出哪些其他脚本正在干扰你正在处理的当前脚本。这就是为什么在脚本中清晰地标记所有代码并添加有意义的注释很重要的原因。
- en: Introduction to scripting
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本简介
- en: ServiceNow uses JavaScript as a language for the majority of the scripts you
    can write or edit. If you already have a background in JavaScript, then you will
    certainly have a head start when it comes to writing your first scripts. The JavaScript
    engine used for writing scripts is updated as new versions of ServiceNow are released.
    The other language used is called Jelly. Not many people outside of the ServiceNow
    space are aware of Jelly, and it certainly wasn't a language I was familiar with
    before working with ServiceNow. Fortunately, Jelly is not used in the majority
    of scripts, and we'll cover how and where to use it in a later chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ServiceNow使用JavaScript作为编写或编辑的大多数脚本的编程语言。如果你已经具备JavaScript的背景，那么在编写第一个脚本时你肯定会有一个先发优势。用于编写脚本的JavaScript引擎会随着ServiceNow新版本的发布而更新。另一种使用的语言称为Jelly。在ServiceNow领域之外，很少有人知道Jelly，而且在我与ServiceNow合作之前，我当然不熟悉这种语言。幸运的是，Jelly在大多数脚本中并不常用，我们将在后面的章节中介绍如何以及在哪里使用它。
- en: Before you start writing your first script, it is important to check whether
    your goal can be achieved without using script. This should always be a consideration
    before you get started. By leveraging configurations in the form of UI policies,
    for example, it is possible to avoid customization all together.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写你的第一个脚本之前，检查是否可以在不使用脚本的情况下实现你的目标是很重要的。这应该在你开始之前始终是一个考虑因素。例如，通过利用UI策略形式的配置，可以完全避免定制。
- en: When scripting, it is important to think about what you want to achieve, and
    which records and what fields in the database you will need access to. The most
    common scripts will simply need information from the current record being displayed
    or updated, but more complex scripts may need to access data from several different
    tables. It is a good practice to ensure that the database and table structure
    will allow you to get all the data you need for your script from the current record
    before you start.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写脚本时，重要的是要考虑你想要实现什么，以及你需要访问数据库中的哪些记录和字段。最常见的脚本只需要从当前显示或更新的记录中获取信息，但更复杂的脚本可能需要访问来自几个不同表的数据。在开始之前确保数据库和表结构允许你从当前记录中获取脚本所需的所有数据是一个好习惯。
- en: One other point to note when scripting is to make sure your code is well documented,
    including good comments and descriptions of what goals are to be achieved. While
    you are writing code, it can seem that what it does will be obvious, but coming
    back to the same code after some time, that often will not be the case. Maintaining
    ServiceNow instances is a big part of an administrator's job, and trying to do
    this with no comments in scripts can be a laborious task. I have come across many
    instances with insufficient comments and descriptions, and a lot of time is initially
    wasted on discovering how it all hangs together. Documenting your code will not
    only help you over time, but will also help any other administrators who need
    to maintain your scripts and instances.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写脚本时，还有一个需要注意的要点是确保您的代码有良好的文档记录，包括良好的注释和对要实现的目标的描述。当您编写代码时，可能会觉得它所做的是显而易见的，但经过一段时间再次回到相同的代码时，情况往往并非如此。维护
    ServiceNow 实例是管理员工作的一部分重要内容，在没有注释的脚本中尝试这样做可能是一项繁重的工作。我遇到过许多注释和描述不足的实例，最初在发现它们是如何相互关联上浪费了很多时间。记录您的代码不仅会随着时间的推移帮助您，还会帮助任何需要维护您的脚本和实例的其他管理员。
- en: 'For example, it is important to explain what each function does:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，解释每个函数的功能是很重要的：
- en: '[PRE0]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Most scripts will use the glide classes provided by ServiceNow, which we will
    discuss in the next chapter.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数脚本将使用 ServiceNow 提供的 glide 类，我们将在下一章中讨论。
- en: Script editor
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本编辑器
- en: When you encounter a script field in ServiceNow, it will have some additional
    features that allow you to create your scripts with greater ease than you would
    in a simple text field. This type of field is named a script type and is found
    throughout ServiceNow.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在 ServiceNow 中遇到脚本字段时，它将具有一些额外的功能，这些功能允许您比在简单文本字段中更容易地创建脚本。这种类型的字段被称为脚本类型，并在
    ServiceNow 中随处可见。
- en: 'We will now look at this field type in detail so you can use this field to
    its best and understand the capabilities it has. First, let''s take a look at
    this field in *Figure 1.2*:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将详细查看此字段类型，以便您可以使用此字段发挥其最佳效果并了解其功能。首先，让我们看看 *图 1.2* 中的此字段：
- en: '![](img/c569cbd3-1028-48c6-af25-eafbf3648f10.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c569cbd3-1028-48c6-af25-eafbf3648f10.png)'
- en: 'Figure 1.3: Script type field'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：脚本类型字段
- en: 'There are a number of buttons above the field that you can use to your advantage.
    Let''s take a look at these buttons in order, as each can assist with the code
    we write:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 字段上方有许多按钮，您可以使用这些按钮来发挥优势。让我们依次查看这些按钮，因为每个按钮都可以帮助我们编写代码：
- en: '**Scroll**: The scroll allows us to switch the syntax highlighting and script
    formatting on and off. It is on by default, which most will find the better option.
    However, if you would rather disable this and prefer writing in a simple text
    field, toggle this button to off. If toggled off, all the other buttons disappear
    to leave only a button which allows you to go to a specific line of code. Left
    on, this allows the script in the script field to be color coded, formatted with
    spacing to make it easier to read, and with syntax errors shown. The syntax errors
    will appear in the margin on the left, and you can hover over them to see the
    issue.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滚动**: 滚动允许我们打开或关闭语法高亮和脚本格式化。默认情况下是开启的，大多数人会发现这是更好的选项。然而，如果您更愿意禁用此功能并偏好使用简单文本字段编写，请将此按钮切换到关闭。如果切换到关闭，所有其他按钮都会消失，只留下一个按钮，允许您转到特定的代码行。保持开启状态，这将允许脚本字段中的脚本进行颜色编码，通过间距格式化以使其更容易阅读，并显示语法错误。语法错误将出现在左侧的边框上，您可以将鼠标悬停在其上以查看问题。'
- en: '**Speech bubble**: The speech bubble toggles whether the current line of script
    you are on is commented or not. A lot of developers will simply edit the script
    field itself, but it can be useful for multiple lines.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**气泡**: 气泡切换当前脚本行是否被注释。许多开发者会直接编辑脚本字段本身，但这对多行来说可能很有用。'
- en: '**Aligned text**: This button formats the code in the script field. It will
    indent script in if statements and loops and makes the code a lot easier to read.
    This is a button I find very useful.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对齐文本**: 此按钮格式化脚本字段中的代码。它会在 if 语句和循环中缩进脚本，使代码更容易阅读。这是一个我发现非常有用的按钮。'
- en: '**Replaced letters**: This button allows you to replace words or phrases in
    the script with different text. This is done for each instance of the word or
    phrase that you find, so you can replace many or a few of the words or phrases.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**替换字母**: 此按钮允许您将脚本中的单词或短语替换为不同的文本。这是针对您找到的每个单词或短语实例进行的，因此您可以替换许多或少数单词或短语。'
- en: '**Replaced letters with text**: This icon is similar to the replace button,
    but it will replace all instances of a word or phrase without individually notifying
    you of each instance. For this reason, make sure you want to replace every specific
    word or phrase in the script field before using this icon.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**替换字母为文本**: 此图标类似于替换按钮，但它将替换脚本字段中所有实例的单词或短语，而不会单独通知您每个实例。因此，在使用此图标之前，请确保您想要替换脚本字段中的每个特定单词或短语。'
- en: '**Magnifying glass**: By clicking this button, we can search the text in the
    script field for a word or phrase.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**放大镜**: 通过点击此按钮，我们可以在脚本字段中搜索单词或短语。'
- en: '**Down arrow**: After performing a search, this allows the user to see the
    next instance of the searched for word or phrase.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向下箭头**: 在执行搜索后，这允许用户看到搜索到的单词或短语的下一个实例。'
- en: '**Up arrow**: Once a search has been performed, this shows the previous word
    or phrase searched for in the script field.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向上箭头**: 一旦在脚本字段中执行了搜索，这将显示之前在脚本字段中搜索过的单词或短语。'
- en: '**Boxed arrow**: This toggles the script field between full screen and being
    a smaller box on the screen. This can be helpful when working on bigger scripts,
    to save from doing excessive scrolling.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**框形箭头**: 这可以在全屏和屏幕上的较小框之间切换脚本字段。当处理更大的脚本时，这可以很有帮助，以避免过度滚动。'
- en: '**Question mark**: Clicking this button shows a pop-up summary of the script
    editor and the shortcuts you can use.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问号**: 点击此按钮会显示脚本编辑器和您可以使用的快捷键的弹出摘要。'
- en: '**Disk**: This saves the record, and the script, too.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**磁盘**: 这将保存记录和脚本。'
- en: '**Ticked scroll**: This toggles the syntax checking on and off. You will notice
    the left margin change size when this happens. Normally, the syntax checking is
    useful, but this does give the option to hide it if some of the syntax advice
    is not for you.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**勾选滚动条**: 这可以切换语法检查的开启和关闭。当发生这种情况时，您会注意到左侧边距大小的变化。通常，语法检查是有用的，但这确实提供了隐藏它的选项，如果某些语法建议不适合您。'
- en: '**Bug with scroll**: By selecting this icon, the script debugger will open
    in a new window.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滚动错误**: 通过选择此图标，脚本调试器将在新窗口中打开。'
- en: Some developers will have their own external scripting tools that they use to
    create the script and then paste it into script fields once complete. If doing
    this, ensure you have the latest version of the code in your external tool so
    that you do not overwrite updates from others by mistake.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发者将使用他们自己的外部脚本工具来创建脚本，并在完成后将其粘贴到脚本字段中。如果这样做，请确保您的外部工具中代码的版本是最新的，以免不小心覆盖他人的更新。
- en: This gives an overview of this type of field, and it makes scripting much easier.
    The syntax checking and code formatting are especially helpful tools.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了此类字段的总览，并使脚本编写变得更加容易。语法检查和代码格式化是特别有用的工具。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we looked at the configuration and customization of a ServiceNow
    instance, and when it is appropriate to use both. We also introduced the two script
    types: client- and server-side scripts. This chapter also explained the running
    order of scripts in ServiceNow, the importance of order 1000, and how this can
    affect script outcomes. We introduced preparing to script, with some considerations
    before starting; finally, we looked at the script editor.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了ServiceNow实例的配置和自定义，以及何时应该同时使用它们。我们还介绍了两种脚本类型：客户端和服务器端脚本。本章还解释了ServiceNow中脚本的运行顺序、顺序1000的重要性以及它如何影响脚本结果。我们介绍了准备编写脚本，包括在开始之前的一些考虑；最后，我们探讨了脚本编辑器。
- en: In the next chapter, we will look at the ServiceNow glide class. This will show
    you the script ServiceNow provides you, which can be used to complement your JavaScript.
    The glide class is a frequently used aspect of ServiceNow scripting, and understanding
    its use will allow you to write helpful basic scripts and serve as a great first
    step into writing more advanced code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨ServiceNow的glide类。这将向您展示ServiceNow提供的脚本，这些脚本可以用来补充您的JavaScript。glide类是ServiceNow脚本中常用的一个方面，了解其使用方法将使您能够编写有用的基本脚本，并作为编写更高级代码的绝佳第一步。
