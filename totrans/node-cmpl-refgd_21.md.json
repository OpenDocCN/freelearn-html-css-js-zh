["```js\nfwsp-hydra generator v0.3.1   yeoman-generator v2.0.2   yo v2.0.1\n? Name of the service (`-service` will be appended automatically) imagini\n? Your full name? Diogo Resende\n? Your email address? dresende@thinkdigital.pt\n? Your organization or username? (used to tag docker images) dresende\n? Host the service runs on?\n? Port the service runs on? 3000\n? What does this service do? Image thumbnail and manipulation\n? Does this service need auth? No\n? Is this a hydra-express service? Yes\n? Set up a view engine? No\n? Set up logging? No\n? Enable CORS on serverResponses? No\n? Run npm install? No\n   create imagini-service/specs/test.js\n   create imagini-service/specs/helpers/chai.js\n   create imagini-service/.editorconfig\n   create imagini-service/.eslintrc\n   create imagini-service/.gitattributes\n   create imagini-service/.nvmrc\n   create imagini-service/.gitignore\n   create imagini-service/package.json\n   create imagini-service/README.md\n   create imagini-service/imagini-service.js\n   create imagini-service/config/sample-config.json\n   create imagini-service/config/config.json\n   create imagini-service/scripts/docker.js\n   create imagini-service/routes/imagini-v1-routes.js\n\nDone!\n\n'cd imagini-service' then 'npm install' and 'npm start'\n```", "```js\n(…)\n\"dependencies\": {\n    \"sharp\"                : \"^0.19.0\",\n    \"body-parser\"          : \"^1.18.2\",\n    \"fwsp-config\"          : \"1.1.5\",\n    \"hydra-express\"        : \"1.5.5\",\n    \"fwsp-server-response\" : \"2.2.6\"\n},\n(…)\n```", "```js\n/**\n * @name          imagini-v1-api\n * @description   This module packages the Imagini API.\n */\n\"use strict\";\n\nconst fs             = require(\"fs\");\nconst path           = require(\"path\");\nconst sharp          = require(\"sharp\");\nconst bodyparser     = require(\"body-parser\");\nconst hydraExpress   = require(\"hydra-express\");\nconst ServerResponse = require(\"fwsp-server-response\");\nconst hydra          = hydraExpress.getHydra();\nconst express        = hydraExpress.getExpress();\n\nlet serverResponse = new ServerResponse();\n\nexpress.response.sendError = function (err) {\n    serverResponse.sendServerError(this, { result : { error : err }});\n};\n\nexpress.response.sendOk = function (result) {\n    serverResponse.sendOk(this, { result });\n};\n\nlet api = express.Router();\n\napi.param(\"image\", (req, res, next, image) => {\n    if (!image.match(/\\.(png|jpg)$/i)) {\n        return res.sendError(\"invalid image type/extension\");\n    }\n\n    req.image     = image;\n    req.localpath = path.join(__dirname, \"../uploads\", req.image);\n\n    return next();\n});\n\napi.post(\"/:image\", bodyparser.raw({\n    limit : \"10mb\",\n    type  : \"image/*\"\n}), (req, res) => {\n    let fd  = fs.createWriteStream(req.localpath, {\n        flags    : \"w+\",\n        encoding : \"binary\"\n    });\n\n    fd.end(req.body);\n\n    fd.on(\"close\", () => {\n        res.sendOk({ size: req.body.length });\n    });\n});\n\nmodule.exports = api;\n```", "```js\ncurl -X POST -H 'Content-Type: image/png' \\\n --data-binary @example.png \\\n http://localhost:3000/v1/imagini/example.png\n```", "```js\n{\n    \"statusCode\"        : 200,\n    \"statusMessage\"     : \"OK\",\n    \"statusDescription\" : \"Request succeeded without error\",\n    \"result\" : {\n        \"size\" : 55543\n    }\n}\n```", "```js\napi.head(\"/:image\", (req, res) => {\n    fs.access(req.localpath, fs.constants.R_OK , (err) => {\n        if (err) {\n            return res.sendError(\"image not found\");\n        }\n\n        return res.sendOk();\n    });\n});\n```", "```js\napi.get(\"/:image\", (req, res) => {\n    fs.access(req.localpath, fs.constants.R_OK , (err) => {\n        if (err) {\n            return res.sendError(\"image not found\");\n        }\n\n        let image     = sharp(req.localpath);\n        let width     = +req.query.width;\n        let height    = +req.query.height;\n        let blur      = +req.query.blur;\n        let sharpen   = +req.query.sharpen;\n        let greyscale = [ \"y\", \"yes\", \"true\", \"1\", \n        \"on\"].includes(req.query.greyscale);\n        let flip      = [ \"y\", \"yes\", \"true\", \"1\", \n        \"on\"].includes(req.query.flip);\n        let flop      = [ \"y\", \"yes\", \"true\", \"1\", \n        \"on\"].includes(req.query.flop);\n\n        if (width > 0 && height > 0) {\n            image.ignoreAspectRatio();\n        }\n\n        if (width > 0 || height > 0) {\n            image.resize(width || null, height || null);\n        }\n\n        if (flip)        image.flip();\n        if (flop)        image.flop();\n        if (blur > 0)    image.blur(blur);\n        if (sharpen > 0) image.sharpen(sharpen);\n        if (greyscale)   image.greyscale();\n\n        res.setHeader(\"Content-Type\", \"image/\" + \n        path.extname(req.image).substr(1));\n\n        image.pipe(res);\n    });\n});\n```", "```js\nnpm install seneca sharp --save\n```", "```js\nconst seneca  = require(\"seneca\");\nconst sharp   = require(\"sharp\");\nconst path    = require(\"path\");\nconst fs      = require(\"fs\");\nconst service = seneca();\n\nservice.add(\"role:upload,image:*,data:*\", function (msg, next) {\n    let filename = path.join(__dirname, \"uploads\", msg.image);\n    let data = Buffer.from(msg.data, \"base64\");\n\n    fs.writeFile(filename, data, (err) => {\n        if (err) return next(err);\n\n        return next(null, { size : data.length });\n    });\n});\n\nservice.listen(3000);\n```", "```js\ncurl -H \"Content-Type: application/json\" \\\n--data '{\"role\":\"upload\",\"image\":\"example.png\",\"data\":\"'\"$( base64 example.png)\"'\"}' \\\nhttp://localhost:3000/act\n```", "```js\n{\"size\":55543}\n```", "```js\nservice.add(\"role:check,image:*\", function (msg, next) {\n    let filename = path.join(__dirname, \"uploads\", msg.image);\n\n    fs.access(filename, fs.constants.R_OK , (err) => {\n        return next(null, { exists : !err });\n    });\n});\n```", "```js\ncurl -H \"Content-Type: application/json\" \\\n    --data '{\"role\":\"check\",\"image\":\"example.png\"}' \\\n    http://localhost:3000/act\n```", "```js\n{\"exists\":true}\n```", "```js\nservice.add(\"role:download,image:*\", function (msg, next) {\n    let filename = path.join(__dirname, \"uploads\", msg.image);\n\n    fs.access(filename, fs.constants.R_OK , (err) => {\n        if (err) return next(err);\n\n        let image     = sharp(filename);\n        let width     = +msg.width;\n        let height    = +msg.height;\n        let blur      = +msg.blur;\n        let sharpen   = +msg.sharpen;\n        let greyscale = !!msg.greyscale;\n        let flip      = !!msg.flip;\n        let flop      = !!msg.flop;\n\n        if (width > 0 && height > 0) {\n            image.ignoreAspectRatio();\n        }\n\n        if (width > 0 || height > 0) {\n            image.resize(width || null, height || null);\n        }\n\n        if (flip)        image.flip();\n        if (flop)        image.flop();\n        if (blur > 0)    image.blur(blur);\n        if (sharpen > 0) image.sharpen(sharpen);\n        if (greyscale)   image.greyscale();\n\n        image.toBuffer().then((data) => {\n            return next(null, { data: data.toString(\"base64\") });\n        });\n    });\n});\n```", "```js\nconst sharp   = require(\"sharp\");\nconst path    = require(\"path\");\nconst fs      = require(\"fs\");\n\nmodule.exports = function (settings = { path: \"uploads\" }) {\n    // plugin code goes here\n};\n```", "```js\nconst localpath = (image) => {\n    return path.join(settings.path, image);\n}\n```", "```js\nconst localpath = (image) => (path.join(settings.path, image));\n```", "```js\nconst access = (filename, next) => {\n    fs.access(filename, fs.constants.R_OK , (err) => {\n        return next(!err, filename);\n    });\n};\n```", "```js\nthis.add(\"role:check,image:*\", (msg, next) => {\n    access(localpath(msg.image), (exists) => {\n        return next(null, { exists : exists });\n    });\n});\n```", "```js\nthis.add(\"role:check,image:*\", (msg, next) => {\n    access(localpath(msg.image), (exists) => (next(null, { exists })));\n});\n```", "```js\nthis.add(\"role:upload,image:*,data:*\", (msg, next) => {\n    let data = Buffer.from(msg.data, \"base64\");\n\n    fs.writeFile(localpath(msg.image), data, (err) => {\n        return next(err, { size : data.length });\n    });\n});\n```", "```js\nthis.add(\"role:download,image:*\", (msg, next) => {\n    access(localpath(msg.image), (exists, filename) => {\n        if (!exists) return next(new Error(\"image not found\"));\n\n        let image     = sharp(filename);\n        let width     = +msg.width || null;\n        let height    = +msg.height || null;\n        let blur      = +msg.blur;\n        let sharpen   = +msg.sharpen;\n        let greyscale = !!msg.greyscale;\n        let flip      = !!msg.flip;\n        let flop      = !!msg.flop;\n\n        if (width && height) image.ignoreAspectRatio();\n        if (width || height) image.resize(width, height);\n        if (flip)            image.flip();\n        if (flop)            image.flop();\n        if (blur > 0)        image.blur(blur);\n        if (sharpen > 0)     image.sharpen(sharpen);\n        if (greyscale)       image.greyscale();\n\n        image.toBuffer().then((data) => {\n            return next(null, { data: data.toString(\"base64\") });\n        });\n    });\n});\n```", "```js\nthis.add(\"role:download,image:*\", (msg, next) => {\n    access(localpath(msg.image), (exists, filename) => {\n        if (!exists) return next(new Error(\"image not found\"));\n\n        let image     = sharp(filename);\n        let width     = +msg.width || null;\n        let height    = +msg.height || null;\n\n        if (width && height) image.ignoreAspectRatio();\n        if (width || height) image.resize(width, height);\n        if (msg.flip)        image.flip();\n        if (msg.flop)        image.flop();\n        if (msg.blur > 0)    image.blur(blur);\n        if (msg.sharpen > 0) image.sharpen(sharpen);\n        if (msg.greyscale)   image.greyscale();\n\n        image.toBuffer().then((data) => {\n            return next(null, { data: data.toString(\"base64\") });\n        });\n    });\n});\n```", "```js\nconst sharp   = require(\"sharp\");\nconst path    = require(\"path\");\nconst fs      = require(\"fs\");\n\nmodule.exports = function (settings = { path: \"uploads\" }) {\n    const localpath = (image) => (path.join(settings.path, image));\n    const access    = (filename, next) => {\n        fs.access(filename, fs.constants.R_OK , (err) => {\n            return next(!err, filename);\n        });\n    };\n\n    this.add(\"role:check,image:*\", (msg, next) => {\n        access(localpath(msg.image), (exists) => (next(null, { exists })));\n    });\n\n    this.add(\"role:upload,image:*,data:*\", (msg, next) => {\n        let data = Buffer.from(msg.data, \"base64\");\n\n        fs.writeFile(localpath(msg.image), data, (err) => {\n            return next(err, { size : data.length });\n        });\n    });\n\n    this.add(\"role:download,image:*\", (msg, next) => {\n        access(localpath(msg.image), (exists, filename) => {\n            if (!exists) return next(new Error(\"image not found\"));\n\n            let image     = sharp(filename);\n            let width     = +msg.width || null;\n            let height    = +msg.height || null;\n\n            if (width && height) image.ignoreAspectRatio();\n            if (width || height) image.resize(width, height);\n            if (msg.flip)        image.flip();\n            if (msg.flop)        image.flop();\n            if (msg.blur > 0)    image.blur(blur);\n            if (msg.sharpen > 0) image.sharpen(sharpen);\n            if (msg.greyscale)   image.greyscale();\n\n            image.toBuffer().then((data) => {\n                return next(null, { data: data.toString(\"base64\") });\n            });\n        });\n    });\n};\n```", "```js\nconst seneca  = require(\"seneca\");\nconst service = seneca();\n\nservice.use(\"./imagini.js\", { path: __dirname + \"/uploads\" });\n\nservice.listen(3000);\n```", "```js\nnode seneca\n```"]