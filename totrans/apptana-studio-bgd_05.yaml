- en: Chapter 5. Code Documentation and Content Assist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Documenting your code is very important. Everyone knows that when they get
    the task of extending or changing the script of another developer, before they
    can start with their work, they have to understand the process of the script and
    must understand the thinking of the developer. When the source code from other
    developers is well documented, it will be much easier to do this.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*But sometimes it also happens that you have to work on a script that you had
    developed yourself, but this was quite some time ago so you don''t remember the
    functionality in detail anymore.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Therefore, it is recommended that you always document your scripts (files,
    classes, properties, methods, and functions), ideally during the development stage.
    At this stage, you have the most knowledge about the functionality. For this reason,
    Aptana Studio understands ScriptDoc and uses it with the Content Assist feature.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will take a look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is ScriptDoc and which tags it provides
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating general documentation comments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Content mentation comment snippets and using it with the Content Assist
    feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ScriptDoc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ScriptDoc is a tool that extracts all documentation from JavaScript files and
    provides this information to Aptana Studio so that it can generate the content
    for the Content Assist feature. ScriptDoc automatically scans your projects for
    ScriptDoc documentation blocks and uses the Content Assist feature to display
    information tooltips. For example, as soon as you create a ScriptDoc comment for
    a function, the Content Assist feature knows your new function and displays the
    information to you if you're using the function somewhere within your project.
  prefs: []
  type: TYPE_NORMAL
- en: But what should such a comment really look like?
  prefs: []
  type: TYPE_NORMAL
- en: A ScriptDoc comment starts with `/**` and ends as a normal multiline comment,
    with `*/`. Between this start and end, you can insert some tags that describe
    your documentation comment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table gives you a small overview of the available tags that you
    can use in order to document your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Tag | Definition and examples | Applies to |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `@alias` | Defines an ID for a class or function.Example: `* @alias aliasName`
    | Any |'
  prefs: []
  type: TYPE_TB
- en: '| `@author` | Defines the description of a class.Example: `* @author Thomas
    Deuling tdeuling@domain.com` | Any |'
  prefs: []
  type: TYPE_TB
- en: '| `@classDescription` | Defines the description of a class.Example: `* @classDescription
    Description ...` | Function |'
  prefs: []
  type: TYPE_TB
- en: '| `@constructor` | Defines that a function is the constructor of a class.Example:
    `* @constructor` | Function |'
  prefs: []
  type: TYPE_TB
- en: '| `@deprecated` | Defines that a function or property is deprecated.Example:
    `* @deprecated` | Function and property |'
  prefs: []
  type: TYPE_TB
- en: '| `@example` | Defines an example.Example: `* @example Example code` | Any
    |'
  prefs: []
  type: TYPE_TB
- en: '| `@exception` | Defines an exception thrown by a function.Example: `* @exception
    {TestException} ThrowDescription` | Function |'
  prefs: []
  type: TYPE_TB
- en: '| `@id` | Allows you to link functions or properties documentation to an external
    ScriptDoc file.Example: `/** @id */` | Any |'
  prefs: []
  type: TYPE_TB
- en: '| `@inherits` | Defines that a function inherits from another function.Example:
    `* @inherits functionNameA, functionNameB` | Function |'
  prefs: []
  type: TYPE_TB
- en: '| `@internal` | Defines that a function or property should not be visible for
    the Content Assist feature.Example: `* @internal` | Function and property |'
  prefs: []
  type: TYPE_TB
- en: '| `@memberOf` | Defines that a function is a member of a class.Example: `*
    @memberOf classNa` `me` | Function and property |'
  prefs: []
  type: TYPE_TB
- en: '| `@method` | Defines that a function is a method of a class.Example: `* @method`
    | Function |'
  prefs: []
  type: TYPE_TB
- en: '| `@namespace` | Defines a namespace for a file.Example: `* @namespace coding.ms`
    | File |'
  prefs: []
  type: TYPE_TB
- en: '| `@param` | Defines a parameter of a function.Example: `* @param {String}
    paramName Description` | Function |'
  prefs: []
  type: TYPE_TB
- en: '| `@private` | Defines that a function or property is private.Example: `* @private`
    | Function and property |'
  prefs: []
  type: TYPE_TB
- en: '| `@projectDescription` | Defines a description for a file. It must be the
    first tag in the first documentation block.Example: `* @projectDescription Description-text
    ...` | File |'
  prefs: []
  type: TYPE_TB
- en: '| `@property` | Defines a property of a class.Example: `* @poperty {Array}
    Array for ...` | File |'
  prefs: []
  type: TYPE_TB
- en: '| `@return` | Defines the type and description of the return value.Example:
    `* @return {Object} Return description` | Function |'
  prefs: []
  type: TYPE_TB
- en: '| `@see` | Links to a related class or function.Example link to a function:
    `* @see #functionName`Example link to a class: `* @see className`Example link
    to a method: `* @see className#methodName` | Any |'
  prefs: []
  type: TYPE_TB
- en: '| `@since` | Defines in which version the subject was created.Example: `* @since
    1.0` | File, Function, and Property |'
  prefs: []
  type: TYPE_TB
- en: '| `@type` | Defines the data type of a property.Example: `* @type {Object}
    Object description` | Property |'
  prefs: []
  type: TYPE_TB
- en: '| `@version` | Defines the version of a file or class.Example: `* @version
    1.1` | Any |'
  prefs: []
  type: TYPE_TB
- en: These ScriptDoc tags give you a good base to document your code, in such a way
    that nearly all other developers will understand what your script is good for.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section we will take a look at what comments for files, functions,
    and properties look like.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript file comment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At first, we will take a look at the comment for a file. The comment for a file
    should contain the `@projectDescription` and `@author` tags, which describe what
    kind of source is in the file and who has written it. Further, there could be
    a `@namespace`, `@since`, and `@version` tag so that everybody knows in which
    namespace the code is reachable and since which version the file exists and what's
    the current version of the file.
  prefs: []
  type: TYPE_NORMAL
- en: The `@property` tags are also helpful, which should be added for each notable
    property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is a common file comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget, the file comment with the `@projectDescription` tag must be the
    first documentation block within the first line in your JavaScript file.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript property comment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next is the property comment, which describes a property of a class. So, if
    you're writing a class that contains some properties, you should document them
    with a description that describes the destination of it. If the property is a
    private property of the class, you should use the `@private` tag. But the `@since`
    and `@type` tags are also useful and help everyone know how long the class had
    this property and what type it has.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a common property comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: JavaScript function comment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, at last, the function comment.
  prefs: []
  type: TYPE_NORMAL
- en: It can be used for a function or a method. If the function is a method, the
    comment contains the `@method` tag. Additionally, there could be a `@constructor`
    tag, which defines that the method is the constructor of the class. But in every
    case the comment should contain the `@autho` `r` and `@since` tags so that it's
    clear who has written that function and for which version of your application.
    Further, you should create a `@param` tag for each function parameter. These `@param`
    tags contain the type of the parameter, the variable name, and a description of
    the use case. And finally the `@return` tag (if any are available) that describes
    what kind of data is returned by the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'And, at last, an example of a common function comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Time for action – displaying a function comment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's take a look at how to display these function comments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a JavaScript file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hover the mouse on the function call.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have just created a function with a ScriptDoc conform comment. By hovering
    over a function call of this function, as in line 16 of the following screenshot,
    Aptana Studio displays a tooltip with information about the ScriptDoc comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_05_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Where is the information tooltip?**'
  prefs: []
  type: TYPE_NORMAL
- en: If the information tooltip doesn't appear on hovering over the function call,
    just navigate to **Window** | **Preferences** and go to **Aptana Studio** | **Content
    Assist**. In this area, you have to select the **Show information on hover** option.
  prefs: []
  type: TYPE_NORMAL
- en: The Content Assist feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Content Assist feature provides you with information about properties, methods,
    and functions. The related information is displayed, as we have seen in the *Time
    for action – displaying a function comment* section, in the form of a tooltip.
    When the information within the tooltip is larger than the available tooltip space,
    just press *F2* while the cursor is on the function or object, and the tooltip
    will be sticky so you're able to scroll within.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – using the Content Assist feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Content Assist feature will automatically pop up and provide you a context
    menu, where you get an overview of objects, functions, and so on that are available
    in the current scope.
  prefs: []
  type: TYPE_NORMAL
- en: Open the JavaScript file following the steps mentioned in the *Time for action
    – displaying a function comment* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the cursor on any location within the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Begin to type a function or object name. For example, we want to use the **document**
    object and therefore we press the letter *D*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the Content Assist feature provides you a context menu, which lists all
    available objects and functions that are starting with the letter "d".
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Trigger the Content Assist feature manually**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In case you need the Content Assist feature and it doesn't appear automatically,
    you can trigger it manually by using the shortcut *Ctrl* + Space bar.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use the up and down arrow keys in order to select the required entry, or type
    more letters to get a more precise result list. We selected the **document** object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you selected the required entry or there's only one entry left to be selected,
    just insert the required code by pressing the *Tab* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the **document** object is inserted and you type the dot in order to call
    a method from the **document** object, the Content Assist feature reappears and
    this time it provides you with all the available methods of the object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have used the Content Assist feature to complete our required statement,
    even if we don't know in detail which properties are available on the related
    object. The following screenshot shows you the Content Assist feature related
    to the *Time for action – using the Content Assist* section.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_05_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Browser capabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: But the Content Assist feature can do much more. If you have to develop your
    code for different browser, which you know has very different functionalities,
    you need to know which feature is provided by which browser. If you do not, it
    initiates many developing mistakes just because you didn't know that a particular
    browser doesn't understand a feature.
  prefs: []
  type: TYPE_NORMAL
- en: For this problem, Aptana Studio provides an additional useful feature. If you
    start to write a statement of a browser-provided object, such as the **document**
    object, the Code Assist provides you a list of available features. But if you
    take a closer look, you will see a lot of browser icons on the right-hand side
    of each entry. Each icon indicates whether the related browser understands the
    feature or not. When the icon is full-colored, it indicates that the browser supports
    the feature; otherwise the icon is grayed-out and the browser doesn't support
    the feature. If there is no information available, the Content Assist feature
    assumes the property to be available.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – changing the user agents used by the Content Assist feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to **Window** | **Preferences**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Content Assist** entry under the **Aptana Studio** tab in the left-hand
    side tree.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select at the top-right the type of the project in which you will set the provided
    user agents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select, in our case, the **Web** entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check your required browser and accept the selection by clicking on **OK**.
    We select the Chrome, Firefox, and Internet Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We selected the browser that our project has to support. In order to test the
    current selection of browser, just open a JavaScript file and type `document`.
    Take a look at the Content Assist feature; now it should display only the icons
    of selected browsers in the list.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_05_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Another nice feature is that you can use the Content Assist feature with your
    own code. If you want to use the Content Assist feature with your own code, you
    have to document your objects, methods, and functions.
  prefs: []
  type: TYPE_NORMAL
- en: You can also optimize the process of documenting your code by creating snippets
    for each comment. These snippets are easy to insert by using the Content Assist
    feature.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – documenting a project that contains JavaScript code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, by yourself, select a small JavaScript project that is currently under
    construction, and add documentation for all objects, methods, functions, and properties.
    When you're done, check out how well the Content Assist feature delivers you information
    about your own code.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. How must a documentation comment block start so that the ScriptDoc parser
    is able to parse it?
  prefs: []
  type: TYPE_NORMAL
- en: '`/**`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/*`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`//`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Where must the file comment with the `@projectDescription` tag be located
    in a JavaScript file?
  prefs: []
  type: TYPE_NORMAL
- en: The file comment with the `@projectDescription` tag must be the last documentation
    block in your JavaScript file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The file comment with the `@projectDescription` tag must be the first documentation
    block in the first line of your JavaScript file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It does not matter where it is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. What action is necessary to display a function comment?
  prefs: []
  type: TYPE_NORMAL
- en: Hovering the mouse above a function call.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on a function call.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-clicking on a function call.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q4\. Which shortcut makes the information tooltip sticky so that you're able
    to read the complete information, in case it does not fit within the tooltip?
  prefs: []
  type: TYPE_NORMAL
- en: '*F2*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Ctrl* + *S*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*F1*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q5\. Which shortcut triggers the Content Assist feature?
  prefs: []
  type: TYPE_NORMAL
- en: '*Ctrl* + *Alt* + *Delete*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Ctrl* + *F2*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Ctrl* + Space bar'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be able to document your JavaScript code
    so that it's conformed to ScriptDoc. In addition, you should know in detail how
    to document your JavaScript code so that every developer is able to understand
    your scripts and their functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Now we go forward and take a look at how we can work with HTML and CSS, and
    inspect them.
  prefs: []
  type: TYPE_NORMAL
