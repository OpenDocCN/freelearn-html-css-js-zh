["```js\nconst a = 5 \nconst b = 10 \nconst c = [a, b].reduce((accumulator, value) => { \n    return accumulator + value \n}, 0) \n```", "```js\n(accumulator, value) => { \n    return accumulator + value \n} \n```", "```js\nconst reducer = (prevState, action) => newState \n```", "```js\nconst action = { \n    type: 'INCREMENT_COUNTER', \n} \n```", "```js\nconst action = { \n    type: 'INCREMENT_COUNTER', \n    incrementBy: 2, \n} \n```", "```js\nconst increment = (incrementBy) => ({ \n    type: 'INCREMENT_COUNTER', \n    incrementBy, \n}) \n```", "```js\n      const INCREMENT_COUNTER = 'INCREMENT_COUNTER' \n      const DECREMENT_COUNTER = 'DECREMENT_COUNTER' \n```", "```js\n      const increment = (by) => ({ \n          type: INCREMENT_COUNTER, \n          by, \n      }) \n      const decrement = (by) => ({ \n          type: DECREMENT_COUNTER, \n          by, \n      }) \n```", "```js\n      const reduced = [ \n          increment(10), \n          decrement(5), \n          increment(3), \n      ].reduce((accumulator, action) => { \n          switch (action.type) { \n              case INCREMENT_COUNTER: \n            return accumulator + action.by \n              case DECREMENT_COUNTER: \n                  return accumulator - action.by \n              default: \n                  return accumulator \n          } \n      }, 0) \n```", "```js\n      console.log(reduced) \n```", "```js\n       node counter.js\n\n```", "```js\nconst reducer = (prevState, action) => { \n    if (action.type === 'INC') { \n        return { counter: prevState.counter + 1 } \n    } \n    return prevState \n} \n```", "```js\nconst a = reducer( \n   { counter: 0 }, \n   { type: 'INC' }, \n) // Value is { counter: 1 }  \nconst b = reducer( \n   { counter: 0 }, \n   { type: 'INC' }, \n) // Value is { counter: 1 } \n```", "```js\nconst impureReducer = (prevState = {}, action) => { \n    if (action.type === 'SET_TIME') { \n        return { time: new Date().toString() } \n    } \n    return prevState \n} \n```", "```js\nconst a = impureReducer({}, { type: 'SET_TIME' }) \nsetTimeout(() => { \n    const b = impureReducer({}, { type: 'SET_TIME' }) \n    console.log( \n        a, // Output may be: {time: \"22:10:15 GMT+0000\"} \n        b, // Output may be: {time: \"22:10:17 GMT+0000\"} \n    ) \n}, 2000) \n```", "```js\nconst timeReducer = (prevState = {}, action) => { \n    if (action.type === 'SET_TIME') { \n        return { time: action.time } \n    } \n    return prevState \n} \n```", "```js\nconst currentTime = new Date().toTimeString() \nconst a = timeReducer( \n   { time: null }, \n   { type: 'SET_TIME', time: currentTime }, \n) \nconst b = timeReducer( \n   { time: null }, \n   { type: 'SET_TIME', time: currentTime }, \n) \nconsole.log(a.time === b.time) // true \n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Breakfast Time</title> \n          <script \n         src=\"img/babel.min.js\">  \n        </script> \n      </head> \n      <body> \n          <h1>What you need to do:</h1> \n          <p> \n              <b>Current time:</b> \n              <span id=\"display-time\"></span> \n          </p> \n                <p id=\"display-meal\"></p> \n                <button id=\"emulate-night\"> \n              Let's pretend is 00:00:00 \n          </button> \n          <button id=\"emulate-noon\"> \n              Let's pretend is 12:00:00 \n          </button> \n          <script type=\"text/babel\"> \n              // Add JavaScript code here \n          </script> \n      </body> \n      </html> \n```", "```js\n      let state = { \n          kindOfMeal: null, \n          time: null, \n      } \n```", "```js\n      const meal = document.getElementById('display-meal') \n      const time = document.getElementById('display-time') \n      const btnNight = document.getElementById('emulate-night') \n      const btnNoon = document.getElementById('emulate-noon') \n```", "```js\n      const SET_MEAL = 'SET_MEAL' \n      const SET_TIME = 'SET_TIME' \n```", "```js\n      const setMeal = (kindOfMeal) => ({ \n          type: SET_MEAL, \n          kindOfMeal, \n      }) \n```", "```js\n      const setTime = (time) => ({ \n          type: SET_TIME, \n          time, \n      }) \n```", "```js\n      const reducer = (prevState = state, action) => { \n          switch (action.type) { \n              case SET_MEAL: \n                  return Object.assign({}, prevState, { \n                      kindOfMeal: action.kindOfMeal, \n                  }) \n              case SET_TIME: \n                  return Object.assign({}, prevState, { \n                      time: action.time, \n                  }) \n              default: \n                  return prevState \n          } \n      } \n```", "```js\n      const onStateChange = (nextState) => { \n          const comparison = [ \n              { time: '23:00:00', info: 'Too late for dinner!' }, \n              { time: '18:00:00', info: 'Dinner time!' }, \n              { time: '16:00:00', info: 'Snacks time!' }, \n              { time: '12:00:00', info: 'Lunch time!' }, \n              { time: '10:00:00', info: 'Branch time!' }, \n              { time: '05:00:00', info: 'Breakfast time!' }, \n              { time: '00:00:00', info: 'Too early for breakfast!' }, \n          ] \n          time.textContent = nextState.time \n          meal.textContent = comparison.find((condition) => ( \n              nextState.time >= condition.time \n          )).info \n      } \n```", "```js\n      const dispatch = (action) => { \n          state = reducer(state, action) \n          onStateChange(state) \n      } \n```", "```js\n      btnNight.addEventListener('click', () => { \n          const time = new Date('1/1/1 00:00:00') \n          dispatch(setTime(time.toTimeString())) \n      }) \n```", "```js\n      btnNoon.addEventListener('click', () => { \n          const time = new Date('1/1/1 12:00:00') \n          dispatch(setTime(time.toTimeString())) \n      }) \n```", "```js\n      dispatch(setTime(new Date().toTimeString())) \n```", "```js\ncreateStore(reducer, preloadedState, enhancer) \n```", "```js\nconst TYPE = { \n    INC_COUNTER: 'INC_COUNTER', \n    DEC_COUNTER: 'DEC_COUNTER', \n} \nconst initialState = { \n    counter: 0, \n} \nconst reducer = (state = initialState, action) => { \n    switch (action.type) { \n        case TYPE.INC_COUNTER:  \n            return { counter: state.counter + 1 } \n        case TYPE.DEC_COUNTER:  \n            return { counter: state.counter - 1 } \n        default:  \n            return state \n    } \n} \nconst store = createStore(reducer) \n```", "```js\n{ \n    \"dependencies\": { \n        \"express\": \"4.16.3\", \n        \"redux\": \"4.0.0\" \n    } \n} \n```", "```js\nnpm install\n\n```", "```js\n      const express = require('express') \n      const path = require('path') \n      const app = express() \n```", "```js\n      app.use('/lib', express.static( \n          path.join(__dirname, 'node_modules', 'redux', 'dist') \n      )) \n```", "```js\n      app.get('/', (req, res) => { \n          res.sendFile(path.join( \n              __dirname, \n              'meal-time-client.html', \n          )) \n      }) \n```", "```js\n      app.listen( \n          1337, \n          () => console.log('Web Server running on port 1337'), \n      ) \n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Meal Time with Redux</title> \n          <script \n          src=\"img/babel.min.js\">\n         </script> \n          <script src=\"img/redux.js\"></script> \n      </head> \n      <body> \n          <h1>What you need to do:</h1> \n          <p> \n              <b>Current time:</b> \n              <span id=\"display-time\"></span> \n          </p> \n          <p id=\"display-meal\"></p> \n          <button id=\"emulate-night\"> \n              Let's pretend is 00:00:00 \n          </button> \n          <button id=\"emulate-noon\"> \n              Let's pretend is 12:00:00 \n          </button> \n          <script type=\"text/babel\"> \n              // Add JavaScript code here \n          </script> \n      </body> \n      </html> \n```", "```js\n      const { createStore } = Redux \n```", "```js\n      const initialState = { \n          kindOfMeal: null, \n          time: null, \n      } \n```", "```js\n      const meal = document.getElementById('display-meal') \n      const time = document.getElementById('display-time') \n      const btnNight = document.getElementById('emulate-night') \n      const btnNoon = document.getElementById('emulate-noon') \n```", "```js\n      const SET_MEAL = 'SET_MEAL' \n      const SET_TIME = 'SET_TIME' \n```", "```js\n      const setMeal = (kindOfMeal) => ({ \n          type: SET_MEAL, \n          kindOfMeal, \n      }) \n      const setTime = (time) => ({ \n          type: SET_TIME, \n          time, \n      }) \n```", "```js\n      const reducer = (prevState = initialState, action) => { \n          switch (action.type) { \n              case SET_MEAL: \n                  return {...prevState, \n                      kindOfMeal: action.kindOfMeal, \n                  } \n              case SET_TIME: \n                  return {...prevState, \n                      time: action.time, \n                  } \n              default: \n                  return prevState \n          } \n      } \n```", "```js\n      const store = createStore(reducer) \n```", "```js\n      store.subscribe(() => { \n          const nextState = store.getState() \n          const comparison = [ \n              { time: '23:00:00', info: 'Too late for dinner!' }, \n              { time: '18:00:00', info: 'Dinner time!' }, \n              { time: '16:00:00', info: 'Snacks time!' }, \n              { time: '12:00:00', info: 'Lunch time!' }, \n              { time: '10:00:00', info: 'Brunch time!' }, \n              { time: '05:00:00', info: 'Breakfast time!' }, \n              { time: '00:00:00', info: 'Too early for breakfast!' }, \n          ] \n          time.textContent = nextState.time \n          meal.textContent = comparison.find((condition) => ( \n              nextState.time >= condition.time \n          )).info \n      }) \n```", "```js\n      btnNight.addEventListener('click', () => { \n          const time = new Date('1/1/1 00:00:00') \n          store.dispatch(setTime(time.toTimeString())) \n      }) \n```", "```js\n      btnNoon.addEventListener('click', () => { \n          const time = new Date('1/1/1 12:00:00') \n          store.dispatch(setTime(time.toTimeString())) \n      }) \n```", "```js\n      store.dispatch(setTime(new Date().toTimeString())) \n```", "```js\n node meal-time-server.js\n```", "```js\n\n       http://localhost:1337/\n```", "```js\nconst reducer = (prevState = initialState, action) => { \n    switch (action.type) { \n        case SET_MEAL: \n            return Object.assign({}, prevState, { \n                kindOfMeal: action.kindOfMeal, \n            }) \n        case SET_TIME: \n            return Object.assign({}, prevState, { \n                time: action.time, \n            }) \n        default: \n            return prevState \n    } \n} \n```", "```js\nconst reducer = (prevState = initialState, action) => { \n    switch (action.type) { \n        case SET_MEAL: \n            return {...prevState, \n                kindOfMeal: action.kindOfMeal, \n            } \n        case SET_TIME: \n            return {...prevState, \n                time: action.time, \n            } \n        default: \n            return prevState \n    } \n} \n```", "```js\nconst TYPES = { \n    ADD_ITEM: 'ADD_ITEM', \n    REMOVE_ITEM: 'REMOVE_ITEM', \n} \nconst actions = { \n    addItem: (name, description) => ({ \n        type: TYPES.ADD_ITEM, \n        payload: { name, description }, \n    }), \n    removeItem: (id) => ({ \n        type: TYPES.REMOVE_ITEM, \n        payload: { id }, \n    }) \n} \nmodule.exports = actions \n```", "```js\ndispatch(actions.addItem('Little Box', 'Cats')) \ndispatch(actions.removeItem(123)) \n```", "```js\nconst actions = { \n    addItem: (name, description) => dispatch({ \n        type: TYPES.ADD_ITEM, \n        payload: { name, description }, \n    }), \n    removeItem: (id) => dispatch({ \n        type: TYPES.REMOVE_ITEM, \n        payload: { id }, \n    }) \n} \nmodule.exports = actions \n```", "```js\nbindActionCreators(actionCreators, dispatchMethod) \n```", "```js\nconst store = createStore(reducer) \nconst originalActions = require('./actions') \nconst actions = bindActionCreators( \n    originalActions, \n    store.dispatch, \n) \n```", "```js\nactions.addItem('Little Box', 'Cats') \nactions.removeItem(123) \n```", "```js\nconst { \n    addItem, \n    removeItem, \n} = bindActionCreators( \n    originalActions,  \n    store.dispatch, \n) \n```", "```js\naddItem('Little Box', 'Cats') \nremoveItem(123) \n```", "```js\n{ \n    \"dependencies\": { \n        \"express\": \"4.16.3\", \n        \"redux\": \"4.0.0\" \n    } \n} \n```", "```js\nnpm install\n```", "```js\n      const express = require('express') \n      const path = require('path') \n      const app = express() \n      app.use('/lib', express.static( \n          path.join(__dirname, 'node_modules', 'redux', 'dist') \n      )) \n      app.get('/', (req, res) => { \n          res.sendFile(path.join( \n              __dirname, \n              'bind-index.html', \n          )) \n      }) \n      app.listen( \n          1337, \n          () => console.log('Web Server running on port 1337'), \n      ) \n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Binding action creators</title> \n          <script \n           src=\"img/babel.min.js\">\n          </script> \n          <script src=\"img/redux.js\"></script> \n      </head> \n      <body> \n          <h1>List:</h1> \n          <form id=\"item-form\"> \n              <input id=\"item-input\" name=\"item\" /> \n          </form> \n          <ul id=\"list\"></ul> \n          <script type=\"text/babel\"> \n              // Add code here \n          </script> \n      </body> \n      </html> \n```", "```js\n      const form = document.querySelector('#item-form') \n      const input = document.querySelector('#item-input') \n      const list = document.querySelector('#list') \n```", "```js\n      const initialState = { \n          items: [], \n      } \n```", "```js\n      const TYPE = { \n          ADD_ITEM: 'ADD_ITEM', \n      } \n```", "```js\n      const actions = { \n          addItem: (text) => ({ \n              type: TYPE.ADD_ITEM, \n              text, \n          }) \n      } \n```", "```js\n      const reducer = (state = initialState, action) => { \n          switch (action.type) { \n              case TYPE.ADD_ITEM: return { \n                  items: [...state.items, action.text].splice(-5) \n              } \n              default: return state \n          } \n      } \n```", "```js\n      const { createStore, bindActionCreators } = Redux \n      const store = createStore(reducer) \n      const { addItem } = bindActionCreators( \n          actions,  \n          store.dispatch, \n      ) \n```", "```js\n      store.subscribe(() => { \n          const { items } = store.getState() \n          items.forEach((itemText, index) => { \n              const li = ( \n                  list.children.item(index) || \n                  document.createElement('li') \n              ) \n              li.textContent = itemText \n              list.insertBefore(li, list.children.item(0)) \n          }) \n      }) \n```", "```js\n      form.addEventListener('submit', (event) => { \n          event.preventDefault() \n          addItem(input.value) \n      }) \n```", "```js\n node bind-server.js\n```", "```js\n     http://localhost:1337/\n```", "```js\nconst initialState = { \n    todoList: [], \n    chatMsg: [], \n} \nconst reducer = (state = initialState, action) => { \n    switch (action.type) { \n        case 'ADD_TODO': return { \n            ...state, \n            todoList: [ \n                ...state.todoList, \n                { \n                    title: action.title, \n                    completed: action.completed, \n                }, \n            ], \n        } \n        case 'ADD_CHAT_MSG': return { \n            ...state, \n            chatMsg: [ \n                ...state.chatMsg, \n                { \n                    from: action.id, \n                    message: action.message, \n                }, \n            ], \n        } \n        default: \n            return state \n    } \n} \n```", "```js\nconst initialState = { \n    todoList: [], \n    chatMsg: [], \n} \nconst todoListReducer = (state = initialState.todoList, action) => { \n    switch (action.type) { \n        case 'ADD_TODO': return state.concat([ \n            { \n                title: action.title, \n                completed: action.completed, \n            }, \n        ]) \n        default: return state \n    } \n} \nconst chatMsgReducer = (state = initialState.chatMsg, action) => { \n    switch (action.type) { \n        case 'ADD_CHAT_MSG': return state.concat([ \n            { \n                from: action.id, \n                message: action.message, \n            }, \n        ]) \n        default: return state \n    } \n} \n```", "```js\nconst reducer = (state = initialState, action) => { \n    return { \n        todoList: todoListReducer(state.todoList, action), \n        chatMsg: chatMsgReducer(state.chatMsg, action), \n    } \n} \n```", "```js\nconst reducer = combineReducers({ \n    todoList: todoListReducer, \n    chatMsg: chatMsgReducer, \n}) \n```", "```js\nconsole.log(JSON.stringify( \n    reducer(initialState, { type: null }), \n    null, 2, \n)) \n```", "```js\n{ \n    \"todoList\": [], \n    \"chatMsg\": [], \n} \n```", "```js\nconsole.log(JSON.stringify( \n    reducer( \n        initialState, \n        { \n            type: 'ADD_TODO', \n            title: 'This is an example', \n            completed: false, \n        }, \n    ), \n    null, 2, \n)) \n```", "```js\n{ \n    \"todoList\": [ \n        { \n            \"title\": \"This is an example\", \n            \"completed\": false, \n        }, \n    ], \n    \"chatMsg\": [], \n} \n```", "```js\n{ \n    \"dependencies\": { \n        \"express\": \"4.16.3\", \n        \"redux\": \"4.0.0\" \n    } \n} \n```", "```js\nnpm install\n```", "```js\n      const express = require('express') \n      const path = require('path') \n      const app = express() \n      app.use('/lib', express.static( \n          path.join(__dirname, 'node_modules', 'redux', 'dist') \n      )) \n      app.get('/', (req, res) => { \n          res.sendFile(path.join( \n              __dirname, \n              'todo-time.html', \n          )) \n      }) \n      app.listen( \n          1337, \n          () => console.log('Web Server running on port 1337'), \n      ) \n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n         <meta charset=\"UTF-8\"> \n          <title>Lucky Todo</title> \n          <script \n           src=\"img/babel.min.js\">\n          </script> \n          <script src=\"img/redux.js\"></script> \n      </head> \n      <body> \n          <h1>List:</h1> \n          <form id=\"item-form\"> \n              <input id=\"item-input\" name=\"item\" /> \n          </form> \n          <ul id=\"list\"></ul> \n          <script type=\"text/babel\"> \n              // Add code here \n          </script> \n      </body> \n      </html> \n```", "```js\n      const timeElem = document.querySelector('#current-time') \n      const formElem = document.querySelector('#todo-form') \n      const listElem = document.querySelector('#todo-list') \n      const inputElem = document.querySelector('#todo-input') \n      const luckyElem = document.querySelector('#lucky-number') \n```", "```js\n      const { \n          createStore, \n          combineReducers, \n          bindActionCreators, \n      } = Redux \n```", "```js\n      const TYPE = { \n          SET_TIME: 'SET_TIME', \n          SET_LUCKY_NUMBER: 'SET_LUCKY_NUMBER', \n          ADD_TODO: 'ADD_TODO', \n          REMOVE_TODO: 'REMOVE_TODO', \n          TOGGLE_COMPLETED_TODO: 'TOGGLE_COMPLETED_TODO', \n      } \n```", "```js\n      const actions = { \n          setTime: (time) => ({ \n              type: TYPE.SET_TIME, \n              time, \n          }), \n          setLuckyNumber: (number) => ({ \n              type: TYPE.SET_LUCKY_NUMBER, \n              number, \n          }), \n          addTodo: (id, title) => ({ \n              type: TYPE.ADD_TODO, \n              title, \n              id, \n          }), \n          removeTodo: (id) => ({ \n              type: TYPE.REMOVE_TODO, \n              id, \n          }), \n          toggleTodo: (id) => ({ \n              type: TYPE.TOGGLE_COMPLETED_TODO, \n              id, \n          }), \n      } \n```", "```js\n      const currentTime = (state = null, action) => { \n          switch (action.type) { \n              case TYPE.SET_TIME: return action.time \n              default: return state \n          } \n      } \n```", "```js\n      const luckyNumber = (state = null, action) => { \n          switch (action.type) { \n              case TYPE.SET_LUCKY_NUMBER: return action.number \n              default: return state \n          } \n      } \n```", "```js\n      const todoList = (state = [], action) => { \n          switch (action.type) { \n              case TYPE.ADD_TODO: return state.concat([ \n                  { \n                      id: String(action.id), \n                      title: action.title, \n                      completed: false, \n                  } \n              ]) \n              case TYPE.REMOVE_TODO: return state.filter( \n                  todo => todo.id !== action.id \n              ) \n              case TYPE.TOGGLE_COMPLETED_TODO: return state.map( \n                  todo => ( \n                      todo.id === action.id \n                          ? { \n                              ...todo, \n                              completed: !todo.completed, \n                          } \n                          : todo \n                  ) \n              ) \n              default: return state \n          } \n      } \n```", "```js\n      const reducer = combineReducers({ \n          currentTime, \n          luckyNumber, \n          todoList, \n      }) \n```", "```js\n      const store = createStore(reducer) \n```", "```js\n      const { \n          setTime, \n          setLuckyNumber, \n          addTodo, \n          removeTodo, \n          toggleTodo, \n      } = bindActionCreators(actions, store.dispatch) \n```", "```js\n      store.subscribe(() => { \n          const { currentTime } = store.getState() \n          timeElem.textContent = currentTime \n      }) \n```", "```js\n      store.subscribe(() => { \n          const { luckyNumber } = store.getState() \n          luckyElem.textContent = `Your lucky number is: ${luckyNumber}` \n      }) \n```", "```js\n      store.subscribe(() => { \n          const { todoList } = store.getState() \n          listElem.innerHTML = '' \n          todoList.forEach(todo => { \n              const li = document.createElement('li') \n              li.textContent = todo.title \n              li.dataset.id = todo.id \n              li.setAttribute('draggable', true) \n              if (todo.completed) { \n                  li.style = 'text-decoration: line-through' \n              } \n              listElem.appendChild(li) \n          }) \n      }) \n```", "```js\n      listElem.addEventListener('click', (event) => { \n    toggleTodo(event.target.dataset.id) \n      }) \n```", "```js\n      listElem.addEventListener('drag', (event) => { \n          removeTodo(event.target.dataset.id) \n      }) \n```", "```js\n      let id = 0 \n      formElem.addEventListener('submit', (event) => { \n          event.preventDefault() \n          addTodo(++id, inputElem.value) \n          inputElem.value = '' \n      }) \n```", "```js\n      setLuckyNumber(Math.ceil(Math.random() * 1024)) \n      setInterval(() => { \n          setTime(new Date().toTimeString()) \n      }, 1000) \n```", "```js\n node todo-time.js\n```", "```js\n      http://localhost:1337/\n```", "```js\n      { \n          currentTime: String, \n          luckyNumber: Number, \n          todoList: Array.of({ \n              id: Number, \n              title: String, \n              completed: Boolean, \n          }), \n      } \n```", "```js\ncreateStore = (reducer, preloadedState, enhancer) => Store \n```", "```js\nenhancer = (...optionalArguments) => ( \ncreateStore => (reducer, preloadedState, enhancer) => Store \n) \n```", "```js\n{ \n    \"dependencies\": { \n        \"redux\": \"4.0.0\" \n    } \n} \n```", "```js\n npm install\n```", "```js\n      const { \n          createStore, \n          combineReducers, \n          bindActionCreators, \n      } = require('redux') \n```", "```js\n      const acceptMap = () => createStore => ( \n          (reducerMap, ...rest) => { \n              const reducerList = {} \n              for (const [key, val] of reducerMap) { \n                  reducerList[key] = val \n              } \n              return createStore( \n                  combineReducers(reducerList), \n                  ...rest, \n              ) \n          } \n      ) \n```", "```js\n      const TYPE = { \n          INC_COUNTER: 'INC_COUNTER', \n          DEC_COUNTER: 'DEC_COUNTER', \n          SET_TIME: 'SET_TIME', \n      } \n```", "```js\n      const actions = { \n          incrementCounter: (incBy) => ({ \n              type: TYPE.INC_COUNTER, \n              incBy, \n          }), \n          decrementCounter: (decBy) => ({ \n              type: TYPE.DEC_COUNTER, \n              decBy, \n          }), \n          setTime: (time) => ({ \n              type: TYPE.SET_TIME, \n              time, \n          }), \n      } \n```", "```js\n      const map = new Map() \n```", "```js\n      map.set('counter', (state = 0, action) => { \n          switch (action.type) { \n              case TYPE.INC_COUNTER: return state + action.incBy \n              case TYPE.DEC_COUNTER: return state - action.decBy \n              default: return state \n          } \n      }) \n```", "```js\n      map.set('time', (state = null, action) => { \n          switch (action.type) { \n              case TYPE.SET_TIME: return action.time \n              default: return state \n          } \n      }) \n```", "```js\n      const store = createStore(map, acceptMap()) \n```", "```js\n      const { \n          incrementCounter, \n          decrementCounter, \n          setTime, \n      } = bindActionCreators(actions, store.dispatch) \n```", "```js\n      setInterval(function() { \n          setTime(new Date().toTimeString()) \n          if (this.shouldIncrement) { \n              incrementCounter((Math.random() * 5) + 1 | 0) \n          } else { \n              decrementCounter((Math.random() * 5) + 1 | 0) \n          } \n          console.dir( \n              store.getState(), \n              { colors: true, compact: false }, \n          ) \n          this.shouldIncrement = !this.shouldIncrement \n      }.bind({ shouldIncrement: false }), 1000) \n```", "```js\n node map-store.js\n```", "```js\n      { \n          \"counter\": Number, \n          \"time\": String, \n      } \n```", "```js\nconst store = createStore(map, acceptMap()) \n```", "```js\nconst store = acceptMap()(createStore)(map) \n```", "```js\nconst c = (...args) => f(g(h(...args))) \n```", "```js\nconst _createStore = acceptMap()(createStore) \nconst store = _createStore(map) \n```", "```js\n{ \n    \"dependencies\": { \n        \"express\": \"4.16.3\", \n        \"redux\": \"4.0.0\" \n    } \n} \n```", "```js\nnpm install \n```", "```js\n      const express = require('express') \n      const path = require('path') \n      const app = express() \n      app.use('/lib', express.static( \n          path.join(__dirname, 'node_modules', 'redux', 'dist') \n      )) \n      app.get('/', (req, res) => { \n          res.sendFile(path.join( \n              __dirname, \n              'time-travel.html', \n          )) \n      }) \n      app.listen( \n          1337, \n          () => console.log('Web Server running on port 1337'), \n      ) \n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Time travel</title> \n          <script \n           src=\"img/babel.min.js\">\n          </script> \n          <script src=\"img/redux.js\"></script> \n      </head> \n      <body> \n          <h1>Counter: <span id=\"counter\"></span></h1> \n          <script type=\"text/babel\"> \n              // Add JavaScript Code here \n          </script> \n      </body> \n      </html> \n```", "```js\n      const counterElem = document.querySelector('#counter') \n```", "```js\n      const { \n          createStore, \n          bindActionCreators, \n      } = Redux \n```", "```js\n      const TYPE = { \n          INC_COUNTER: 'INC_COUNTER', \n          DEC_COUNTER: 'DEC_COUNTER', \n      } \n```", "```js\n      const actions = { \n          incCounter: (by) => ({ type: TYPE.INC_COUNTER, by }), \n          decCounter: (by) => ({ type: TYPE.DEC_COUNTER, by }), \n      } \n```", "```js\n      const reducer = (state = { value: 5 }, action) => { \n          switch (action.type) { \n              case TYPE.INC_COUNTER: \n                  return { value: state.value + action.by } \n              case TYPE.DEC_COUNTER: \n                  return { value: state.value - action.by } \n              default: \n                  return state \n          } \n      } \n```", "```js\n      const store = createStore( \n          reducer, \n          ( \n              window.__REDUX_DEVTOOLS_EXTENSION__ && \n              window.__REDUX_DEVTOOLS_EXTENSION__() \n          ), \n      ) \n```", "```js\n      const { \n          incCounter, \n          decCounter, \n      } = bindActionCreators(actions, store.dispatch) \n```", "```js\n      store.subscribe(() => { \n          const state = store.getState() \n          counterElem.textContent = state.value \n      }) \n```", "```js\n      for (let i = 0; i < 10; i++) { \n          const incORdec = (Math.random() * 10) > 5 \n          if (incORdec) incCounter(2) \n          else decCounter(1) \n      } \n```", "```js\n node todo-time.js\n```", "```js\n      http://localhost:1337/\n```", "```js\nmiddleware = API => next => action => next(action) \n```", "```js\nmiddleware = ({ \n    getState, \n    dispatch, \n}) => next => action => next(action)  \n```", "```js\n      applyMiddleware(middleware1, middleware2) \n```", "```js\n      middlewares.map((middleware) => middleware(API)) \n```", "```js\n      dispatch = (action) => ( \n          (action) => ( \n              (action) => store.dispatch(action) \n          )(action) \n      )(action) \n```", "```js\n{ \n    \"dependencies\": { \n        \"redux\": \"4.0.0\" \n    } \n} \n```", "```js\nnpm install\n```", "```js\n      const { \n          createStore, \n          applyMiddleware, \n      } = require('redux') \n```", "```js\n      const TYPE = { \n          INCREMENT: 'INCREMENT', \n          DECREMENT: 'DECREMENT', \n          SET_TIME: 'SET_TIME', \n      } \n```", "```js\n      const reducer = ( \n          state = null, \n          action, \n      ) => state \n```", "```js\n      const typeCheckMiddleware = api => next => action => { \n          if (Reflect.has(TYPE, action.type)) { \n              next(action) \n          } else { \n              const err = new Error( \n                  `Type \"${action.type}\" is not a valid` + \n                  `action type. ` + \n                  `did you mean to use one of the following` + \n                  `valid types? ` + \n                  `\"${Reflect.ownKeys(TYPE).join('\"|\"')}\"n`, \n              ) \n              throw err \n          } \n      } \n```", "```js\n      const store = createStore( \n          reducer, \n          applyMiddleware(typeCheckMiddleware), \n      ) \n```", "```js\n      store.dispatch({ type: 'INCREMENT' }) \n      store.dispatch({ type: 'MISTAKE' }) \n```", "```js\n    node type-check-redux.js \n```", "```js\n/type-check-redux.js:25 \n                throw err \n                ^ \nError: Type \"MISTAKE\" is not a valid action type. did you mean to use one of the following valid types? \"INCREMENT\"|\"DECREMENT\"|\"SET_TIME\" \n    at Object.action [as dispatch] (/type-check-redux.js:18:15) \n    at Object.<anonymous> (/type-check-redux.js:33:7) \n```", "```js\n{ \n    \"dependencies\": { \n        \"express\": \"4.16.3\", \n        \"node-fetch\": \"2.1.2\", \n        \"redux\": \"4.0.0\" \n    } \n} \n```", "```js\nnpm install  \n```", "```js\n      const express = require('express') \n      const app = express() \n```", "```js\n      app.get('/time', (req, res) => { \n          setTimeout(() => { \n              res.send(new Date().toTimeString()) \n          }, 2000) \n      }) \n```", "```js\n      app.get('/date', (req, res) => { \n          setTimeout(() => { \n              res.destroy(new Error('Internal Server Error')) \n          }, 2000) \n      }) \n```", "```js\n      app.listen( \n          1337, \n          () => console.log('API server running on port 1337'), \n      ) \n```", "```js\n      const fetch = require('node-fetch') \n      const { \n          createStore, \n          applyMiddleware, \n          combineReducers, \n          bindActionCreators, \n      } = require('redux') \n```", "```js\n      const STATUS = { \n          PENDING: 'PENDING', \n          RESOLVED: 'RESOLVED', \n          REJECTED: 'REJECTED', \n      } \n```", "```js\n      const TYPE = { \n          FETCH_TIME: 'FETCH_TIME', \n          FETCH_DATE: 'FETCH_DATE', \n      } \n```", "```js\n      const actions = { \n          fetchTime: () => ({ \n              type: TYPE.FETCH_TIME, \n              value: async () => { \n                  const time = await fetch( \n                      'http://localhost:1337/time' \n                  ).then((res) => res.text()) \n                  return time \n              } \n          }), \n          fetchDate: () => ({ \n              type: TYPE.FETCH_DATE, \n              value: async () => { \n                  const date = await fetch( \n                      'http://localhost:1337/date' \n                  ).then((res) => res.text()) \n                  return date \n              } \n          }), \n          setTime: (time) => ({ \n              type: TYPE.FETCH_TIME, \n              value: time, \n          }) \n      } \n```", "```js\n      const setValue = (prevState, action) => ({ \n          ...prevState, \n          value: action.value || null, \n          error: action.error || null, \n          status: action.status || STATUS.RESOLVED, \n      }) \n```", "```js\n      const iniState = { \n          time: { \n              value: null, \n              error: null, \n              status: STATUS.RESOLVED, \n          }, \n          date: { \n              value: null, \n              error: null, \n              status: STATUS.RESOLVED, \n          } \n      } \n```", "```js\n      const timeReducer = (state = iniState, action) => { \n          switch (action.type) { \n              case TYPE.FETCH_TIME: return { \n                  ...state, \n                  time: setValue(state.time, action) \n              } \n              case TYPE.FETCH_DATE: return { \n                  ...state, \n                  date: setValue(state.date, action) \n              } \n              default: return state \n          } \n      } \n```", "```js\n      const allowAsync = ({ dispatch }) => next => action => { \n          if (typeof action.value === 'function') { \n              dispatch({ \n                  type: action.type, \n                  status: STATUS.PENDING, \n              }) \n              const promise = Promise \n                  .resolve(action.value()) \n                  .then((value) => dispatch({ \n                      type: action.type, \n                      status: STATUS.RESOLVED, \n                      value, \n                  })) \n                        .catch((error) => dispatch({ \n                      type: action.type, \n                      status: STATUS.REJECTED, \n                      error: error.message, \n                  })) \n              return promise \n          } \n          return next(action) \n      } \n```", "```js\n      const store = createStore( \n          timeReducer, \n          applyMiddleware( \n              allowAsync, \n          ), \n      ) \n```", "```js\n      const { \n          setTime, \n          fetchTime, \n          fetchDate, \n      } = bindActionCreators(actions, store.dispatch) \n```", "```js\n      store.subscribe(() => { \n          console.log('x1b[1;34m%sx1b[0m', 'State has changed') \n          console.dir( \n              store.getState(), \n              { colors: true, compact: false }, \n          ) \n      }) \n```", "```js\n      setTime(new Date().toTimeString()) \n```", "```js\n      fetchTime() \n```", "```js\n      fetchDate() \n```", "```js\n node api-server.js\n```", "```js\n node async-redux.js\n```", "```js\n      time: { \n          value: \"01:02:03 GMT+0000\", \n          error: null, \n          status: \"RESOLVED\" \n      } \n```", "```js\n      time: { \n          value: null, \n          error: null, \n          status: \"PENDING\" \n      } \n      // Later, once the operation is fulfilled: \n      time: { \n          value: \"01:02:03 GMT+0000\", \n          error: null, \n          status: \"RESOLVED\" \n      } \n```", "```js\n      date: { \n          value: null, \n          error: null, \n          status: \"PENDING\" \n      } \n      // Later, once the operation is fulfilled: \n      date: { \n          value: null, \n          error: \"request to http://localhost:1337/date failed, reason:   \n             socket hang up\", \n          status: \"REJECTED\" \n      } \n```"]