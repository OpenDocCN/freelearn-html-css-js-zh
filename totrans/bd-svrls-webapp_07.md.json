["```js\n    const boolean = true; \n\n    // save 'true' in the database\n    const booleanStr = boolean.toString(); \n\n    // convert 'true' (string) to true (boolean)\n    const booleanAgain = Boolean(booleanStr); \n\n```", "```js\n    const AWS = require('aws-sdk');\n    const simpledb = new AWS.SimpleDB();\n\n    const params = { \n      DomainName: 'Products'\n    }; \n\n    simpledb.createDomain(params, (err, data) => { \n      if (err) console.log(err, err.stack); \n      else console.log(data);\n    });\n\n```", "```js\n    const AWS = require('aws-sdk'); \n    const simpledb = new AWS.SimpleDB();\n\n    const insertParams = { \n      DomainName: 'Products',\n      Items: [\n        {\n          Attributes: [\n            {\n              Name: 'Name',\n              Value: 'Lonely Bird'\n            },\n            {\n              Name: 'Price',\n              Value: '2999'\n            },\n            // more attributes\n          ],\n          // needs to be unique\n          Name: 'lonely-bird'\n        },\n        // more items\n      ]\n    }; \n\n simpledb.batchPutAttributes(insertParams, (err, data) => { \n      if (err) console.log(err, err.stack); \n      else console.log(data);\n    });\n\n```", "```js\n    const AWS = require('aws-sdk');\n    const simpledb = new AWS.SimpleDB(); \n\n    const selectParams = {\n      SelectExpression: 'select * from Products where Name = \"Lonely Bird\"'\n    };\n\n    simpledb.select(selectParams, (err, data) => { \n      if (err) console.log(err, err.stack); \n      else if (data.Items) {\n        data.Items.map(item => {\n          item.Attributes.map(attr => {\n            console.log(attr);\n          });\n        });\n      }\n      else console.log('No results');\n    });\n\n```", "```js\n    { Name: 'Name', Value: 'Lonely Bird' }\n    { Name: 'Price', Value: '2999' }\n\n```", "```js\n    const AWS = require('aws-sdk');\n    const simpledb = new AWS.SimpleDB(); \n\n    const params = {\n      Attributes: [\n        {\n          Name: 'Counter',\n          Value: '10', // new value\n          Replace: true\n        }\n      ],\n      DomainName: 'MyCounter',\n      ItemName: '123', // identifier\n      Expected: {\n        Exists: true,\n        Name: 'Counter',\n        Value: '9' // previous value\n      }\n    };\n\n    simpledb.putAttributes(params, (err, data) => {\n      if (err) console.log(err, err.stack);\n      else console.log(data);\n    });\n\n```", "```js\n    service: simpledb-example\n\n    provider:\n      name: aws\n      runtime: nodejs6.10\n iamRoleStatements:\n - Effect: \"Allow\"\n Action:\n - \"sdb:BatchPutAttributes\" \n - \"sdb:PutAttributes\"\n - \"sdb:Select\"\n Resource: [\n \"arn:aws:sdb:us-east-1:*:domain/Products\",\n \"arn:aws:sdb:us-east-1:*:domain/ShoppingCart\"\n ]\n\n    functions:\n      query:\n        handler: handler.query\n\n```", "```js\n    const AWS = require('aws-sdk');\n    const dynamodb = new AWS.DynamoDB();\n\n    let params = {\n      TableName: 'Products',\n      AttributeDefinitions: [\n        {\n          AttributeName: 'ID',\n          AttributeType: 'S' // string\n        }\n      ],\n      KeySchema: [\n        {\n          AttributeName: 'ID',\n          KeyType: 'HASH'\n        }   \n      ],\n      ProvisionedThroughput: {\n        ReadCapacityUnits: 5, // default value\n        WriteCapacityUnits: 5 // default value\n      } \n    };\n\n dynamodb.createTable(params, (err, data) => {\n      if (err) console.log(err, err.stack);\n      else console.log(data);\n    });\n\n```", "```js\n    const AWS = require('aws-sdk');\n    const dynamodb = new AWS.DynamoDB();    \n\n    const params = {\n      TableName: \"Products\",\n      Item: {\n        ID: { S: \"lonely-bird\" },\n        Name: { S: \"Lonely Bird\" },\n        Price: { N: \"29.99\" },\n        Image: { S: \"https://s3.amazonaws.com/...\" },\n        Comments: { \n          L: [\n            { \n              M: { \n                ID: { S: \"ABC\"}, \n                Username: { S: \"John Doe\"},\n                Date: { S: \"2016-12-24T17:15:10.000Z\" },\n                Text: { S: \"I liked it.\" }\n              }\n            },\n            {\n              M: { \n                ID: { S: \"XYZ\"}, \n                Username: { S: \"Jane Smith\"},\n                Date: { S: \"2016-12-24T18:15:10.000Z\" },\n                Text: { S: \"I liked it too.\" }\n              }\n            } \n          ] \n        }\n      }\n    };\n\n dynamodb.putItem(params, (err, data) => {\n      if (err) console.log(err, err.stack);\n      else console.log(data);\n    });\n\n```", "```js\n    const AWS = require('aws-sdk');\n const documentClient = new AWS.DynamoDB.DocumentClient();\n\n    const params = {\n      TableName: \"Products\",\n      Item: {\n        ID: \"lonely-bird\",\n        Name: \"Lonely Bird\",\n        Price: 29.99,\n        Image: \"https://s3.amazonaws.com/...\",\n        Comments: [\n          { \n            ID: \"ABC\", \n            Username: \"John Doe\",\n            Date: \"2016-12-24T17:15:10.000Z\",\n            Text: \"I liked it.\"\n          },\n          {\n            ID: \"XYZ\", \n            Username: \"Jane Smith\",\n            Date: \"2016-12-24T18:15:10.000Z\",\n            Text: \"I liked it too.\"\n          } \n        ] \n      }\n    };\n\n documentClient.put(params, (err, data) => {\n      if (err) console.log(err, err.stack);\n      else console.log(data);\n    });\n\n```", "```js\n    const AWS = require('aws-sdk');\n const documentClient = new AWS.DynamoDB.DocumentClient();\n\n    const params = {\n      TableName: 'Products'\n    };\n\n documentClient.scan(params, (err, data) => {\n      if (err) console.log(err, err.stack);\n      else console.log(data);\n    });\n\n```", "```js\n    const AWS = require('aws-sdk');\n const documentClient = new AWS.DynamoDB.DocumentClient();\n\n    const params = {\n      TableName: \"Products\",\n      KeyConditionExpression: \"ID = :id\",\n      ExpressionAttributeValues: { \":id\": \"lonely-bird\" }\n    };\n\n documentClient.query(params, (err, data) => {\n      if (err) console.log(err);\n      else console.log(data);\n    });\n\n```", "```js\n    const params = {\n      TableName: 'TableWithIndexes',\n      AttributeDefinitions: [\n        { AttributeName: 'ID', AttributeType: 'S' },\n        { AttributeName: 'MyOtherAttribute', AttributeType: 'S' },\n        { AttributeName: 'MyLocalAttribute', AttributeType: 'S' },\n        { AttributeName: 'MyGlobalAttribute', AttributeType: 'S' }\n      ],\n      KeySchema: [\n        { AttributeName: 'ID', KeyType: 'HASH' },\n        { AttributeName: 'MyOtherAttribute', KeyType: 'RANGE' }\n      ],\n      ProvisionedThroughput: \n        { ReadCapacityUnits: 5, WriteCapacityUnits: 5 },\n      LocalSecondaryIndexes: [\n        { \n          IndexName: 'MyLocalIndex',\n          KeySchema: [\n            { AttributeName: 'ID', KeyType: 'HASH' }, \n            { AttributeName: 'MyLocalAttribute', KeyType: 'RANGE' }\n          ],\n          Projection: { ProjectionType: 'ALL' }\n        }\n      ],\n      GlobalSecondaryIndexes: [\n        { \n          IndexName: 'MyGlobalIndex',\n          KeySchema: [\n            { AttributeName: 'MyGlobalAttribute', KeyType: 'HASH' }\n          ],\n          Projection: { ProjectionType: 'ALL' },\n          ProvisionedThroughput: \n            { ReadCapacityUnits: 5, WriteCapacityUnits: 5 }\n        }\n      ]\n    };\n\n```", "```js\n    service: dynamodb-example\n\n    provider:\n      name: aws\n      runtime: nodejs6.10\n iamRoleStatements:\n - Effect: \"Allow\"\n Action:\n - \"dynamodb:Scan\" \n            - \"dynamodb:Query\"\n            - \"dynamodb:PutItem\"\n - \"dynamodb:DeleteItem\"\n - \"dynamodb:BatchWriteItem\"\n Resource: [\n \"arn:aws:dynamodb:us-east-1:*:table/Products\",\n \"arn:aws:dynamodb:us-east-1:*:table/ShoppingCart\"\n ]\n\n    functions:\n       query:\n         handler: handler.query\n\n```", "```js\n    module.exports.retrieveAllProducts = (callback) => {\n\n      const params = {\n        TableName: 'Products'\n      };\n\n documentClient.scan(params, callback);\n    };\n\n```", "```js\n    module.exports.retrieveCart = (userId, callback) => {\n\n      const params = {\n        TableName: \"ShoppingCart\",\n        KeyConditionExpression: \"UserID = :userId\",\n        ExpressionAttributeValues: { \":userId\": userId }\n      };\n\n documentClient.query(params, callback);\n    });\n\n```", "```js\n    module.exports.saveCart = (userId, selectedProducts, callback) => {\n\n      const params = {\n        TableName: \"ShoppingCart\",\n        Item: {\n          UserID: userId,\n          LastUpdate: new Date().toISOString(),\n          SelectedProducts: selectedProducts\n        }\n      };\n\n documentClient.put(params, callback);\n    };\n\n```", "```js\n    module.exports.processCheckout = (callback) => {\n      // do nothing\n      callback(null);\n    };\n\n```", "```js\n    <img src={this.props.product.imageURL} alt=\"product\" />\n\n```", "```js\n        const AWS = require('aws-sdk');\n        const s3 = new AWS.S3();\n\n        const params = {\n          Bucket: 'bucket', \n          Key: 'key'\n        };\n\n        const operation = 'putObject'; // upload operation\n        // const operation = 'getObject'; // download operation\n\n        s3.getSignedUrl(operation, params, (err, url) => {\n          // return the url\n        });\n\n```", "```js\n        <a href=\"PRE-SIGNED-URL\" target=\"_blank\">Download</a>\n\n```", "```js\n        <input type=\"file\" />\n\n```", "```js\n        $.ajax({\n          url: preSignedUrl, // use the signed URL in the request\n          type: 'POST',\n          data: file,\n          // ...\n          success: () => { console.log('Uploaded') },\n          error: err => { console.log(err) }\n        });\n\n```", "```js\n    <CORSConfiguration>\n      <CORSRule>\n        <AllowedOrigin>*</AllowedOrigin>\n        <AllowedMethod>GET</AllowedMethod>\n <AllowedMethod>POST</AllowedMethod>\n        <MaxAgeSeconds>3000</MaxAgeSeconds>\n <AllowedHeader>*</AllowedHeader>\n      </CORSRule>\n    </CORSConfiguration>\n\n```", "```js\n aws s3 sync s3://original-bucket s3://backup-bucket\n\n```", "```js\n aws s3 sync s3://backup-bucket s3://bucket-to-be-restored --delete\n\n```"]