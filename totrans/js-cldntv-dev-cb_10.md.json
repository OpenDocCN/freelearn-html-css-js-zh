["```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch10/latency-based-routing --path cncb-latency-based-routing\n```", "```js\nservice: cncb-latency-based-routing\n\nplugins:\n  - serverless-multi-regional-plugin\n\nprovider:\n  ...\n  endpointType: REGIONAL\n\ncustom:\n  dns:\n    hostedZoneId: ZXXXXXXXXXXXXX\n    domainName: ${self:service}.example.com\n    regionalDomainName: ${opt:stage}-${self:custom.dns.domainName}\n    us-east-1:\n      acmCertificateArn: arn:aws:acm:us-east-1:xxxxxxxxxxxx:certificate/...\n    us-west-2:\n      acmCertificateArn: arn:aws:acm:us-west-2:xxxxxxxxxxxx:certificate/...\n  cdn:\n    region: us-east-1\n    aliases:\n      - ${self:custom.dns.domainName}\n    acmCertificateArn: ${self:custom.dns.us-east-1.acmCertificateArn}\n\nfunctions:\n  hello:\n    ...\n```", "```js\n$ curl -v https://$MY_STAGE-cncb-latency-based-routing.example.com/$MY_STAGE/hello\n\n{\"message\":\"Your function executed successfully in us-west-2!\"}\n```", "```js\n$ curl -v https://cncb-regional-failover-service.example.com/hello\n\n{\"message\":\"Your function executed successfully in us-east-1!\"}\n```", "```js\n$ npm run rm:lcl:e -- -s $MY_STAGE\n$ npm run rm:lcl:w -- -s $MY_STAG\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch10/regional-health-check --path cncb-regional-health-check\n```", "```js\nservice: cncb-regional-health-check\n\nprovider:\n  name: aws\n  runtime: nodejs8.10\n  endpointType: REGIONAL\n  iamRoleStatements:\n    ...\n\nfunctions:\n  check:\n    handler: handler.check\n    events:\n      - http:\n          path: check\n          method: get\n    environment:\n      UNHEALTHY: false\n      TABLE_NAME:\n        Ref: Table\n\nresources:\n  Resources:\n    Table:\n      Type: AWS::DynamoDB::Table\n      ...\n```", "```js\nmodule.exports.check = (request, context, callback) => {\n  Promise.all([readCheck, writeCheck])\n    .catch(handleError)\n    .then(response(callback));\n};\n\nconst db = new aws.DynamoDB.DocumentClient({\n  httpOptions: { timeout: 1000 },\n  logger: console,\n});\n\nconst readCheck = () => db.get({\n  TableName: process.env.TABLE_NAME,\n  Key: {\n    id: '1',\n  },\n}).promise();\n\nconst writeCheck = () => db.put({\n  TableName: process.env.TABLE_NAME,\n  Item: {\n    id: '1',\n  },\n}).promise();\n\nconst handleError = (err) => {\n  console.error(err);\n  return true; // unhealthy\n};\n\nconst response = callback => (unhealthy) => {\n  callback(null, {\n    statusCode: unhealthy || process.env.UNHEALTHY === 'true' ? 503 : 200,\n    body: JSON.stringify({\n      timestamp: Date.now(),\n      region: process.env.AWS_REGION,\n    }),\n    headers: {\n      'Cache-Control': 'no-cache, no-store, must-revalidate',\n    },\n  });\n};\n```", "```js\n$ npm run dp:lcl:e -- -s $MY_STAGE\n...\n  GET - https://0987654321.execute-api.us-east-1.amazonaws.com/john/check\n\n$ npm run dp:lcl:w -- -s $MY_STAGE\n...\n  GET - https://1234567890.execute-api.us-west-2.amazonaws.com/john/check\n```", "```js\n$ curl -v https://0987654321.execute-api.us-east-1.amazonaws.com/$MY_STAGE/check\n$ curl -v https://1234567890.execute-api.us-west-2.amazonaws.com/$MY_STAGE/check\n```", "```js\n$ npm run rm:lcl:e -- -s $MY_STAGE\n$ npm run rm:lcl:w -- -s $MY_STAGE\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch10/regional-failover/check --path cncb-regional-failover-check\n\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch10/regional-failover/service --path cncb-regional-failover-service\n```", "```js\nservice: cncb-regional-failover-check\n...\nfunctions:\n  check:\n    ...\n\nresources:\n  Resources:\n    Api5xxAlarm:\n      Type: AWS::CloudWatch::Alarm\n      Properties:\n        Namespace: AWS/ApiGateway\n        MetricName: 5XXError\n        Dimensions:\n          - Name: ApiName\n            Value: ${opt:stage}-${self:service}\n        Statistic: Minimum\n        ComparisonOperator: GreaterThanThreshold\n        Threshold: 0\n        Period: 60\n        EvaluationPeriods: 1\n\n    ApiHealthCheck:\n      DependsOn: Api5xxAlarm\n      Type: AWS::Route53::HealthCheck\n      Properties:\n        HealthCheckConfig:\n          Type: CLOUDWATCH_METRIC\n          AlarmIdentifier:\n            Name:\n              Ref: Api5xxAlarm\n            Region: ${opt:region}\n          InsufficientDataHealthStatus: LastKnownStatus\n\n  Outputs:\n    ApiHealthCheckId:\n      Value:\n        Ref: ApiHealthCheck\n```", "```js\n$ npm run dp:lcl:e -- -s $MY_STAGE\n...\n  GET - https://0987654321.execute-api.us-east-1.amazonaws.com/john/check\n\n$ npm run dp:lcl:w -- -s $MY_STAGE\n...\n  GET - https://1234567890.execute-api.us-west-2.amazonaws.com/john/check\n```", "```js\nservice: cncb-regional-failover-service\n\nplugins:\n  - serverless-multi-regional-plugin\n...\ncustom:\n  dns:\n    ...\n    us-east-1:\n      ...\n      healthCheckId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n    us-west-2:\n      ...\n      healthCheckId: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n...\n```", "```js\n$ npm run dp:lcl:w -- -s $MY_STAGE\n$ npm run dp:lcl:e -- -s $MY_STAGE\n```", "```js\n$ curl -v https://cncb-regional-failover-service.example.com/hello\n\n{\"message\":\"Your function executed successfully in us-east-1!\"}\n```", "```js\n$ curl -v https://0987654321.execute-api.us-east-1.amazonaws.com/$MY_STAGE/check\n```", "```js\n$ curl -v https://cncb-regional-failover-service.example.com/hello\n\n{\"message\":\"Your function executed successfully in us-west-2!\"\n```", "```js\n$ cd cncb-regional-failover-service\n$ npm run rm:lcl:e -- -s $MY_STAGE\n$ npm run rm:lcl:w -- -s $MY_STAGE\n$ cd ../cncb-regional-failover-check\n$ npm run rm:lcl:e -- -s $MY_STAGE\n$ npm run rm:lcl:w -- -s $MY_STAGE\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch10/dynamodb-global-table --path cncb-dynamodb-global-table\n```", "```js\nservice: cncb-dynamodb-global-table\n...\n\nplugins:\n  - serverless-dynamodb-autoscaling-plugin\n  - serverless-dynamodb-global-table-plugin\n\ncustom:\n  autoscaling:\n    - table: Table\n      global: true\n      read:\n        ...\n      write:\n        ...\n\nresources:\n  Resources:\n    Table:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${opt:stage}-${self:service}-things\n        ...\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n```", "```js\n...\nmodule.exports.trigger = (event, context, cb) => {\n  _(event.Records)\n    .filter(forOrigin)\n    .map(toEvent)\n    .flatMap(publish)\n    .collect()\n    .toCallback(cb);\n};\n\nconst forOrigin = e => e.dynamodb.NewImage['aws:rep:updateregion'] &&\n  e.dynamodb.NewImage['aws:rep:updateregion'].S === process.env.AWS_REGION;\n...\n```", "```js\n$ npm run dp:lcl:e -- -s $MY_STAGE\n...\nServerless: Created global table: john-cncb-dynamodb-global-table-things with region: us-east-1\n...\n\n$ npm run dp:lcl:w -- -s $MY_STAGE\n...\nServerless: Updated global table: john-cncb-dynamodb-global-table-things with region: us-west-2\n...\n```", "```js\n$ sls invoke -f command -r us-east-1 -s $MY_STAGE -d '{\"id\":\"77777777-4444-1111-1111-111111111111\",\"name\":\"thing one\"}'\n```", "```js\n$ sls invoke -f query -r us-west-2 -s $MY_STAGE -d 77777777-4444-1111-1111-111111111111\n{\n    \"Item\": {\n        \"aws:rep:deleting\": false,\n        \"aws:rep:updateregion\": \"us-east-1\",\n        \"aws:rep:updatetime\": 1534819304.087001,\n        \"id\": \"77777777-4444-1111-1111-111111111111\",\n        \"name\": \"thing one\",\n        \"latch\": \"open\"\n    }\n}\n```", "```js\n$ sls logs -f trigger -r us-east-1 -s $MY_STAGE\n$ sls logs -f listener -r us-east-1 -s $MY_STAGE\n$ sls logs -f trigger -r us-west-2 -s $MY_STAGE\n$ sls logs -f listener -r us-west-2 -s $MY_STAGE\n```", "```js\n$ npm run rm:lcl:e -- -s $MY_STAGE\n$ npm run rm:lcl:w -- -s $MY_STAGE\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch10/round-robin-replication --path cncb-round-robin-replication\n```", "```js\nservice: cncb-round-robin-replication\n...\nfunctions:\n  listener:\n    ...\n  trigger:\n    ...\n  search:\n    ...\n  replicator:\n    handler: replicator.trigger\n    events:\n      - sns:\n          arn: \n            Ref: BucketTopic\n          topicName: ${self:service}-${opt:stage}-trigger\n    environment:\n      REPLICATION_BUCKET_NAME: ${self:custom.regions.${opt:region}.replicationBucketName}\n\ncustom:\n  regions:\n    us-east-1:\n      replicationBucketName: cncb-round-robin-replication-${opt:stage}-bucket-WWWWWWWWWWWWW\n    us-west-2:\n      replicationBucketName: cncb-round-robin-replication-${opt:stage}-bucket-EEEEEEEEEEEEE\n...\n```", "```js\nmodule.exports.trigger = (event, context, cb) => {\n  _(event.Records)\n    .flatMap(messagesToTriggers)\n    .flatMap(get)\n    .filter(forOrigin)\n    .flatMap(replicate)\n    .collect()\n    .toCallback(cb);\n};\n\n...\nconst forOrigin = uow => uow.object.Metadata.origin !== process.env.REPLICATION_BUCKET_NAME;\n...\nconst replicate = uow => {\n  const { ContentType, CacheControl, Metadata, Body } = uow.object;\n\n  const params = {\n    Bucket: process.env.REPLICATION_BUCKET_NAME,\n    Key: uow.trigger.s3.object.key,\n    Metadata: {\n      'origin': uow.trigger.s3.bucket.name,\n      ...Metadata,\n    },\n    ACL: 'public-read',\n    ContentType,\n    CacheControl,\n    Body,\n  };\n\n  const s3 = new aws.S3(...);\n  return _(\n    s3.putObject(params).promise()\n    ...\n  );\n};\n```", "```js\n$ npm run dp:lcl:e -- -s $MY_STAGE\n$ npm run dp:lcl:w -- -s $MY_STAGE\n```", "```js\n$ cd <path-to-your-workspace>/cncb-event-stream\n$ sls invoke -f publish -r us-east-1 -s $MY_STAGE -d '{\"type\":\"thing-created\",\"thing\":{\"new\":{\"name\":\"thing two\",\"id\":\"77777777-5555-1111-1111-111111111111\"}}}'\n```", "```js\n$ curl https://<API-ID>.execute-api.us-west-2.amazonaws.com/$MY_STAGE/search?q=two | json_pp\n\n[\n   {\n      \"id\" : \"77777777-5555-1111-1111-111111111111\",\n      \"url\" : \"https://s3.amazonaws.com/cncb-round-robin-replication-john-bucket-1cqxst40pvog4/things/77777777-5555-1111-1111-111111111111\",\n \"name\" : \"thing two\"\n }\n]\n```", "```js\n$ sls logs -f replicator -r us-east-1 -s $MY_STAGE\n...\n2018-08-19 17:00:05 ... [AWS s3 200 0.04s 0 retries] getObject({ Bucket: 'cncb-round-robin-replication-john-bucket-1a3rh4v9tfedw',\n  Key: 'things/77777777-5555-1111-1111-111111111111' })\n2018-08-19 17:00:06 ... [AWS s3 200 0.33s 0 retries] putObject({ Bucket: 'cncb-round-robin-replication-john-bucket-1cqxst40pvog4',\n  Key: 'things/77777777-5555-1111-1111-111111111111',\n  Metadata:\n   { origin: 'cncb-round-robin-replication-john-bucket-1a3rh4v9tfedw' },\n  ACL: 'public-read',\n  ContentType: 'application/json',\n  CacheControl: 'max-age=300',\n  Body: <Buffer ... > })\n...\n\n$ sls logs -f replicator -r us-west-2 -s $MY_STAGE\n...\n2018-08-19 17:00:06 ... [AWS s3 200 0.055s 0 retries] getObject({ Bucket: 'cncb-round-robin-replication-john-bucket-1cqxst40pvog4',\n  Key: 'things/77777777-5555-1111-1111-111111111111' })\n2018-08-19 17:00:06 ... {... \"object\":{...\"Metadata\":{\"origin\":\"cncb-round-robin-replication-john-bucket-1a3rh4v9tfedw\"}, ...}}\n...\n```", "```js\n$ npm run rm:lcl:e -- -s $MY_STAGE\n$ npm run rm:lcl:w -- -s $MY_STAGE\n```"]