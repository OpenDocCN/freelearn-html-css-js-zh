- en: Chapter 4.  A Slack Quote Bot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you haven't been living isolated in a galaxy very far away, eons from Earth
    with no Internet connection during the last year or so, I am sure you have already
    heard about Slack ( [https://slack.com/](https://slack.com/) ), the famous real-time
    messaging app and collaboration suite for teams.
  prefs: []
  type: TYPE_NORMAL
- en: Slack has been built from the ground up to be easy and fun to use. It offers
    a broad set of APIs that allows developers to extend its capabilities to make
    it even more useful.
  prefs: []
  type: TYPE_NORMAL
- en: One of the features I most enjoy from Slack is the Slackbot. It is a friendly
    bot available in every Slack team to guide users to create their profiles and
    to explain to them how Slack works.
  prefs: []
  type: TYPE_NORMAL
- en: If you think Slackbot sounds cool, what you'll really love even more is the
    possibility to build your own custom bots, which can act as automated users that
    can respond to specific events and help your team do useful things.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, we'll explore how we can use the Slack Real Time Messaging
    API in order to create our own custom Slackbot. We'll walk through the whole process
    so you can get a really good idea of what is possible.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you should feel right at home with creating your
    own Slackbot and know a bit more about Slack and how it could help your team and
    you.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, the process should be a lot of fun and easy to follow, so let's not
    wait any longer and get started!
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to be building a bot that gives quotes as responses to the general
    channel. The idea is to have a bot that inspires your team during their daily
    activities, and quotes are definitely a great way to get inspired.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do is to set up our bot with Slack and register it
    in order to use the Slack API.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do this, we'll be using the Slack Real Time Messaging API ( [https://api.slack.com/rtm](https://api.slack.com/rtm)
    ), which is a WebSocket-based API that allows us to receive events in real time
    and send messages to channels, private groups, and users.
  prefs: []
  type: TYPE_NORMAL
- en: The API is really well constructed and the documentation is easy to follow.
    We won't be using WebSockets directly, but instead a Node.js module ( [https://www.npmjs.com/package/slackbots](https://www.npmjs.com/package/slackbots)
    ) that makes development much easier, using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: We need to configure our channel extensions and create the new bot. This way
    we will obtain the API token that is required to authenticate to Slack and get
    started. So, let's roll up our sleeves and get moving!
  prefs: []
  type: TYPE_NORMAL
- en: Registering a bot on Slack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to add the bot into your Slack organization, we''ll need to register
    it at the following URL: [https://yourorganization.slack.com/services/new/bot](https://yourorganization.slack.com/services/new/bot)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that you will need to change your organization with the name of your
    company or team, which you used when registering your Slack account. Once you
    open up the URL in your browser, you will be redirected to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering a bot on Slack](img/image00231.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We'll be calling our bot, `quotebot`. This is the value we will fill in our
    username. Notice how Slack requires that all bot names are all written in lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: Once the name has been entered in the **Username** field, click on the **Add
    bot integration** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering a bot on Slack](img/image00232.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once that has been done, you will be presented with a screen where the bot
    can be further customized and features can be added, such as a picture or emoji.
    This is what this screen looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering a bot on Slack](img/image00233.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There are further options that are available and can be customized, but they
    don't fit in a single screenshot, so you'll see them once you reach the end of
    this screen. Nothing too complicated.
  prefs: []
  type: TYPE_NORMAL
- en: This screen also contains the **API Token**, which we will need to reference
    in our code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering a bot on Slack](img/image00234.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you've done the necessary configuration adjustments and changes, click
    on the **Save Integration** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering a bot on Slack](img/image00235.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up our Node.js app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've registered our bot on Slack we are ready to set up our Node.js
    project in order to start coding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and create our `package.json` file. Open the Command Prompt
    and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After you have done this, follow the guided configuration procedure, which
    should look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up our Node.js app](img/image00236.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have finished with this configuration, it is time to install the dependencies
    we will need in order to write our bot.
  prefs: []
  type: TYPE_NORMAL
- en: But before we install any dependencies, let's quickly brainstorm what our bot
    should do. In short, our bot must be able to retrieve a quote and reply back to
    the general channel.
  prefs: []
  type: TYPE_NORMAL
- en: There's an awesome site called *They Said So* ( [https://theysaidso.com/](https://theysaidso.com/)
    ), which is a service that provides **Quotes-as-a-Service** (**QAAS**). Quotes
    from multiple authors can be obtained through an easy-to-use REST API.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up our Node.js app](img/image00237.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we'll need to access this service using REST, let's include a REST client
    library for Node.js in our app. Just like we did in the previous chapter, we'll
    be using this one.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to get this library installed, execute this instruction from the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that this has been done, the next step is to install a library called [`slackbots`](https://www.npmjs.com/package/slackbots)
    ( [https://www.npmjs.com/package/slackbots](https://www.npmjs.com/package/slackbots)
    ) that will act as an abstraction layer to deal with the Slack Real Time Messaging
    API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After doing this, our `package.json` file will be updated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up our Node.js app](img/image00238.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With our Node.js bot settings all wired up, we are now ready to start writing
    some code.
  prefs: []
  type: TYPE_NORMAL
- en: Slackbots library basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, in order to interact with the Slack Real Time Messaging
    API, we'll be using a Node.js library (npm package) called `slackbots` ( [https://www.npmjs.com/package/slackbots](https://www.npmjs.com/package/slackbots)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we write any code, let''s have a look at the main functions offered
    by this module by looking at the following short example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Before you run this code, please substitute the strings `channel-name`, `a-username`
    and `a-private-group` with your own values, taken from your Slack organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll also need to replace the `API TOKEN` string with the quotebot token
    you were given when the bot was created. The code should now look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have replaced those values, you can run the app from the command line
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to Slack and open your team''s page, you should be able to see
    this when you browse to the **#general** channel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Slackbots library basics](img/image00239.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Awesome, our quotebot just came to life with its first ever message! Now let''s
    break the code down into pieces in order to understand it a bit better:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the preceding code, the first thing we need to do is to
    require the Slackbot constructor. From there we can instantiate a new `Bot` object
    and add callbacks to specific events.
  prefs: []
  type: TYPE_NORMAL
- en: 'On this code, we use the `start` event that is triggered when the bot connects
    successfully to the Slack server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Then we can use the methods offered by the library to post a message in a channel
    using the `postMessageToChannel` method, to a user as a private message using
    `postMessageToUser`, or in a private group conversation by calling `postMessageToGroup`.
  prefs: []
  type: TYPE_NORMAL
- en: With these fundamentals covered, we can move on to explore the [They Said So](https://theysaidso.com/)
    API, which is necessary in order to for us to build our bot.
  prefs: []
  type: TYPE_NORMAL
- en: The They Said So API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The They Said So service has a huge collection of quotes in their database
    and the **Quotes** API is a great and convenient way to access this data. In order
    to consume the Quotes API, you''ll first need to sign up for the service via this
    URL: [https://theysaidso.com/register](https://theysaidso.com/register) .'
  prefs: []
  type: TYPE_NORMAL
- en: '![The They Said So API](img/image00240.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have entered your details and have registered, you will receive an
    automated verification e-mail, which will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The They Said So API](img/image00241.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When you receive this, simply click on the **Verify** button in order to validate
    your newly registered account and start enjoying the service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve done that, you will shortly receive this e-mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The They Said So API](img/image00242.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to subscribe to the Quotes API in order to start consuming
    it. This can be done by visiting the following URL: [https://theysaidso.com/api/#subscribe](https://theysaidso.com/api/#subscribe)
     or alternatively clicking on the **Create a great App using our API** link from
    the e-mail received.'
  prefs: []
  type: TYPE_NORMAL
- en: When you open this, scroll to the very bottom of the page and you will see the
    following API subscription plans on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, because we are building a demo application, we won't sign up for
    any specific paid plan, but instead we'll consume the API through **Mashape **(
    [https://market.mashape.com/orthosie/they-said-so-say-it-with-style/](https://market.mashape.com/orthosie/they-said-so-say-it-with-style/)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: Mashape is a service that helps developers deliver better APIs and microservices.
    Many third-party APIs are provided through Mashape or similar services.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you wish to get a paid plan, you may **Sign Up** for any of the
    paid API options that the service offers. The advantage of doing this is that
    you won't need to sign on to Mashape in order to consume the API.
  prefs: []
  type: TYPE_NORMAL
- en: So when we use the API through Mashape, we can click on the **Consume API**
    button at the bottom of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![The They Said So API](img/image00243.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When we click on that button, the next thing we'll see is the following screenshot.
    Once there, click on the **PRICING** tab.
  prefs: []
  type: TYPE_NORMAL
- en: '![The They Said So API](img/image00244.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: On the **PRICING** tab, under the **BASIC** plan, click on the **SUBSCRIBE**
    button.
  prefs: []
  type: TYPE_NORMAL
- en: '![The They Said So API](img/image00245.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the **SUBSCRIBE** button, you''ll see the following pop-up
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The They Said So API](img/image00246.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you have a GitHub or Mashape account, you can simply subscribe to the API
    by logging into the service with any of those accounts. Otherwise you will have
    to create an account on Mashape.
  prefs: []
  type: TYPE_NORMAL
- en: 'The process anyway is very easy and straightforward. Once that''s been done,
    we are ready to start exploring the API and consuming it. You''ll see this on
    your screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The They Said So API](img/image00247.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Simply click on the **Explore public APIs** button and then hit the back button
    on your browser or navigate to this URL: [https://market.mashape.com/orthosie/they-said-so-say-it-with-style/](https://market.mashape.com/orthosie/they-said-so-say-it-with-style/)
    to start exploring the API. So let''s do that.'
  prefs: []
  type: TYPE_NORMAL
- en: From the API, we are interested in the quotes section. We can look at this by
    clicking on the **GET Quote** link on the left side of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![The They Said So API](img/image00248.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will take us to the following page, where we can see how to construct
    an API call in order to get a quote:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The They Said So API](img/image00249.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There are also multiple examples in various programming languages, including
    Node.js, which uses the Unirest library ( [http://unirest.io/](http://unirest.io/)
    ) to make HTTP requests. In our application, we'll be using the Request library
    instead ( [https://www.npmjs.com/package/request](https://www.npmjs.com/package/request)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: Notice how on all the sample code, including the Node.js one mentioned on the
    **GET Quote** documentation page, the API Token key is passed on the header of
    the HTTP request as the value of the `X-Mashape-Key` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: So let's see how we would be able to write a small example on how to retrieve
    a quote using the Request library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new file called `TestRequest.js` so we don''t mix up this test
    code with the main quotebot code that we have started to write using `App.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Before you can run this, make sure you are subscribed to the **BASIC** plan,
    which includes five calls per day. You will still have to enter a credit card
    number, which will be billed if you go over five requests per day.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can always unsubscribe on this URL: [https://market.mashape.com/orthosie/they-said-so-say-it-with-style/pricing](https://market.mashape.com/orthosie/they-said-so-say-it-with-style/pricing)
    by clicking on the **Unsubscribe** link under the **BASIC** plan.'
  prefs: []
  type: TYPE_NORMAL
- en: '![The They Said So API](img/image00250.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you may run this script from the command line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The They Said So API](img/image00251.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we know how to interact both APIs, we can expand the basic code we
    initially wrote in order to create a full blown quotebot.
  prefs: []
  type: TYPE_NORMAL
- en: In our previous code snippet, we used the start event. Going forward, we'll
    also need the message event, which will be used to intercept an incoming message
    and based on that reply back.
  prefs: []
  type: TYPE_NORMAL
- en: We need to have a function that will intercept every real-time API message that
    is readable by our bot. This includes pretty much every chat message in any channel
    where the bot has been installed, and also private messages directed to the bot
    or other real-time notifications, such as a user typing in a channel, edited or
    deleted messages, users joining or leaving the channel, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Real-time API messages are not just chat messages, but any kind of event that
    occurs within our Slack organization. This is important to keep in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, we would like the bot to filter all these events to detect public messages
    in channels that mention getquote or the name of the bot, and then we want to
    react to this message by replying with a random quote, fetched from the API we
    have subscribed using Mashape.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, we want to divide all these checks in a list of operations; this is
    exactly what we need to do. These are:'
  prefs: []
  type: TYPE_NORMAL
- en: Verify if the event represents a chat message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify if the message comes from a user that is different from quotebot (to
    circular references and loops)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify if the message mentions getquote
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `onMessage` function receives an `msg` object as a parameter. The `msg`
    contains all the information that describes the real-time event received through
    the Slack Real Time API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s look at each helper function, one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This function verifies if a real-time event corresponds to an `msg` sent by
    a user. With our first helper function in place, let''s have a look at the second
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This helper function allows us to see if the `msg` comes from a user who is
    not the quotebot itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, our final helper function checks if messages contain the
    string `getquote`. Without this verification we could potentially end up with
    an infinite loop of quotes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'With all the helper verification functions done, our random quote reply back
    method would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we tie it all together by passing the `onMessage` callback to the
    listening event as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The full code looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to see this in action, simply message quotebot with the text `getquote`
    on Slack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The They Said So API](img/image00252.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you do that, you will receive the following feedback on the **#general**
    channel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The They Said So API](img/image00253.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That's awesome! Notice, however, that we have returned the full body response.
  prefs: []
  type: TYPE_NORMAL
- en: This could be further optimized and you could eventually parse the body response
    and just output the quote and the author, without any of the other details.
  prefs: []
  type: TYPE_NORMAL
- en: This is totally up to you and a nice exercise in order to improve this code.
    Further to this, you could also add additional code in order to process natural
    language, interpret more commands, and also to respond to different channels.
  prefs: []
  type: TYPE_NORMAL
- en: The possibilities are frankly endless and all that is needed is time, imagination,
    and dedication. We leave the challenge open for you to further expand and explore.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen briefly how Slack is a great collaboration platform and also how
    incredibly easy it is to interact with its real-time API.
  prefs: []
  type: TYPE_NORMAL
- en: In a matter of minutes, you can have a small demo bot up and running.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapters, we'll explore other interesting platforms that are
    also quite popular nowadays and this should also be a lot of fun to play around
    with.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you have enjoyed following these examples and the upcoming chapters will
    touch upon other fascinating topics. Keep having fun!
  prefs: []
  type: TYPE_NORMAL
