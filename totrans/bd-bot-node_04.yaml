- en: Chapter 4.  A Slack Quote Bot
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章：Slack 引用 Bot
- en: If you haven't been living isolated in a galaxy very far away, eons from Earth
    with no Internet connection during the last year or so, I am sure you have already
    heard about Slack ( [https://slack.com/](https://slack.com/) ), the famous real-time
    messaging app and collaboration suite for teams.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在过去一年左右的时间里，您没有生活在远离地球的遥远星系中，没有互联网连接，我确信您已经听说过 Slack（[https://slack.com/](https://slack.com/)），这是著名的团队实时消息应用和协作套件。
- en: Slack has been built from the ground up to be easy and fun to use. It offers
    a broad set of APIs that allows developers to extend its capabilities to make
    it even more useful.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Slack 是从头开始构建的，易于使用且有趣。它提供了一组广泛的 API，允许开发者扩展其功能，使其更加有用。
- en: One of the features I most enjoy from Slack is the Slackbot. It is a friendly
    bot available in every Slack team to guide users to create their profiles and
    to explain to them how Slack works.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我最喜欢的 Slack 功能之一是 Slackbot。它是一个友好的 bot，在每一个 Slack 团队中都有，用于指导用户创建他们的个人资料，并向他们解释
    Slack 的工作原理。
- en: If you think Slackbot sounds cool, what you'll really love even more is the
    possibility to build your own custom bots, which can act as automated users that
    can respond to specific events and help your team do useful things.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您认为 Slackbot 听起来很酷，那么您会更喜欢能够构建自己的自定义 bot 的可能性，这些 bot 可以作为自动化的用户，对特定事件做出响应，并帮助您的团队完成有用的事情。
- en: Throughout this chapter, we'll explore how we can use the Slack Real Time Messaging
    API in order to create our own custom Slackbot. We'll walk through the whole process
    so you can get a really good idea of what is possible.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何使用 Slack 实时消息 API 来创建我们自己的自定义 Slackbot。我们将全程讲解，以便您对可能实现的内容有一个很好的了解。
- en: By the end of this chapter, you should feel right at home with creating your
    own Slackbot and know a bit more about Slack and how it could help your team and
    you.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您应该能够轻松地创建自己的 Slackbot，并对 Slack 以及它如何帮助您的团队和您有更多的了解。
- en: Overall, the process should be a lot of fun and easy to follow, so let's not
    wait any longer and get started!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，这个过程应该非常有趣且易于遵循，所以让我们不再等待，开始吧！
- en: Getting started
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始
- en: We are going to be building a bot that gives quotes as responses to the general
    channel. The idea is to have a bot that inspires your team during their daily
    activities, and quotes are definitely a great way to get inspired.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个 bot，它会对通用频道提供引用作为回应。想法是拥有一个 bot，在团队日常活动中激励他们，而引用无疑是获得灵感的好方法。
- en: The first thing we need to do is to set up our bot with Slack and register it
    in order to use the Slack API.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是设置我们的 bot 并在 Slack 中注册，以便使用 Slack API。
- en: In order to do this, we'll be using the Slack Real Time Messaging API ( [https://api.slack.com/rtm](https://api.slack.com/rtm)
    ), which is a WebSocket-based API that allows us to receive events in real time
    and send messages to channels, private groups, and users.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们将使用 Slack 实时消息 API（[https://api.slack.com/rtm](https://api.slack.com/rtm)），这是一个基于
    WebSocket 的 API，允许我们实时接收事件并向频道、私人组和用户发送消息。
- en: The API is really well constructed and the documentation is easy to follow.
    We won't be using WebSockets directly, but instead a Node.js module ( [https://www.npmjs.com/package/slackbots](https://www.npmjs.com/package/slackbots)
    ) that makes development much easier, using JavaScript.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 该 API 构建得非常好，文档易于理解。我们不会直接使用 WebSocket，而是使用一个 Node.js 模块（[https://www.npmjs.com/package/slackbots](https://www.npmjs.com/package/slackbots)），这使得开发变得更加容易，使用
    JavaScript。
- en: We need to configure our channel extensions and create the new bot. This way
    we will obtain the API token that is required to authenticate to Slack and get
    started. So, let's roll up our sleeves and get moving!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要配置我们的频道扩展并创建新的 bot。这样我们就可以获得所需的 API 令牌，以验证 Slack 并开始使用。所以，让我们卷起袖子，开始行动吧！
- en: Registering a bot on Slack
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Slack 上注册 bot
- en: 'In order to add the bot into your Slack organization, we''ll need to register
    it at the following URL: [https://yourorganization.slack.com/services/new/bot](https://yourorganization.slack.com/services/new/bot)
    .'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 bot 添加到您的 Slack 组织中，我们需要在以下 URL 上注册它：[https://yourorganization.slack.com/services/new/bot](https://yourorganization.slack.com/services/new/bot)。
- en: 'Notice that you will need to change your organization with the name of your
    company or team, which you used when registering your Slack account. Once you
    open up the URL in your browser, you will be redirected to the following screen:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，您需要将组织名称更改为您在注册 Slack 账户时使用的公司或团队名称。一旦您在浏览器中打开 URL，您将被重定向到以下屏幕：
- en: '![Registering a bot on Slack](img/image00231.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![在Slack上注册机器人](img/image00231.jpeg)'
- en: We'll be calling our bot, `quotebot`. This is the value we will fill in our
    username. Notice how Slack requires that all bot names are all written in lowercase.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把我们的机器人命名为`quotebot`。这是我们将在用户名中填写的值。注意，Slack要求所有机器人的名称都应全部小写。
- en: Once the name has been entered in the **Username** field, click on the **Add
    bot integration** button.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在**用户名**字段中输入名称后，点击**添加机器人集成**按钮。
- en: '![Registering a bot on Slack](img/image00232.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![在Slack上注册机器人](img/image00232.jpeg)'
- en: 'Once that has been done, you will be presented with a screen where the bot
    can be further customized and features can be added, such as a picture or emoji.
    This is what this screen looks like:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成这些操作，你将看到一个屏幕，你可以在这里进一步自定义机器人，并添加一些功能，比如图片或表情符号。这个屏幕看起来是这样的：
- en: '![Registering a bot on Slack](img/image00233.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![在Slack上注册机器人](img/image00233.jpeg)'
- en: There are further options that are available and can be customized, but they
    don't fit in a single screenshot, so you'll see them once you reach the end of
    this screen. Nothing too complicated.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他一些可用的选项可以进行自定义，但它们不适合在一个截图里展示，所以你将在到达屏幕末尾时看到它们。没有什么太复杂的。
- en: This screen also contains the **API Token**, which we will need to reference
    in our code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个屏幕还包含**API令牌**，我们将在代码中引用它。
- en: '![Registering a bot on Slack](img/image00234.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![在Slack上注册机器人](img/image00234.jpeg)'
- en: Once you've done the necessary configuration adjustments and changes, click
    on the **Save Integration** button.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了必要的配置调整和更改，点击**保存集成**按钮。
- en: '![Registering a bot on Slack](img/image00235.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![在Slack上注册机器人](img/image00235.jpeg)'
- en: Setting up our Node.js app
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的Node.js应用程序
- en: Now that we've registered our bot on Slack we are ready to set up our Node.js
    project in order to start coding.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在Slack上注册了我们的机器人，我们就可以设置我们的Node.js项目，以便开始编码。
- en: 'Let''s go ahead and create our `package.json` file. Open the Command Prompt
    and type the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建我们的`package.json`文件。打开命令提示符并输入以下命令：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After you have done this, follow the guided configuration procedure, which
    should look similar to the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成此操作后，按照引导配置程序进行操作，它应该看起来类似于以下截图：
- en: '![Setting up our Node.js app](img/image00236.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![设置我们的Node.js应用程序](img/image00236.jpeg)'
- en: Once you have finished with this configuration, it is time to install the dependencies
    we will need in order to write our bot.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个配置后，就是安装我们编写机器人所需的依赖项的时候了。
- en: But before we install any dependencies, let's quickly brainstorm what our bot
    should do. In short, our bot must be able to retrieve a quote and reply back to
    the general channel.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们安装任何依赖项之前，让我们快速思考一下我们的机器人应该做什么。简而言之，我们的机器人必须能够检索一个引言并回复到通用频道。
- en: There's an awesome site called *They Said So* ( [https://theysaidso.com/](https://theysaidso.com/)
    ), which is a service that provides **Quotes-as-a-Service** (**QAAS**). Quotes
    from multiple authors can be obtained through an easy-to-use REST API.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个很棒的网站叫做*They Said So*（[https://theysaidso.com/](https://theysaidso.com/)），这是一个提供**引言即服务**（**QAAS**）的服务。可以通过易于使用的REST
    API获取多位作者的引言。
- en: '![Setting up our Node.js app](img/image00237.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![设置我们的Node.js应用程序](img/image00237.jpeg)'
- en: As we'll need to access this service using REST, let's include a REST client
    library for Node.js in our app. Just like we did in the previous chapter, we'll
    be using this one.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要使用REST来访问此服务，让我们在我们的应用程序中包含一个Node.js的REST客户端库。就像我们在上一章中做的那样，我们将使用这个库。
- en: 'In order to get this library installed, execute this instruction from the command
    line:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装这个库，从命令行执行以下指令：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that this has been done, the next step is to install a library called [`slackbots`](https://www.npmjs.com/package/slackbots)
    ( [https://www.npmjs.com/package/slackbots](https://www.npmjs.com/package/slackbots)
    ) that will act as an abstraction layer to deal with the Slack Real Time Messaging
    API:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经完成这些操作，下一步是安装一个名为[`slackbots`](https://www.npmjs.com/package/slackbots)（[https://www.npmjs.com/package/slackbots](https://www.npmjs.com/package/slackbots)）的库，它将作为一个抽象层来处理Slack实时消息API：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After doing this, our `package.json` file will be updated as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，我们的`package.json`文件将更新如下：
- en: '![Setting up our Node.js app](img/image00238.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![设置我们的Node.js应用程序](img/image00238.jpeg)'
- en: With our Node.js bot settings all wired up, we are now ready to start writing
    some code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Node.js机器人设置全部就绪后，我们现在可以开始编写一些代码了。
- en: Slackbots library basics
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Slackbots库基础
- en: As mentioned earlier, in order to interact with the Slack Real Time Messaging
    API, we'll be using a Node.js library (npm package) called `slackbots` ( [https://www.npmjs.com/package/slackbots](https://www.npmjs.com/package/slackbots)
    ).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，为了与 Slack 实时消息 API 交互，我们将使用一个名为 `slackbots` 的 Node.js 库（npm 包）。[https://www.npmjs.com/package/slackbots](https://www.npmjs.com/package/slackbots)。
- en: 'Before we write any code, let''s have a look at the main functions offered
    by this module by looking at the following short example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们编写任何代码之前，让我们通过以下简短的示例来看看这个模块提供的主要功能：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Before you run this code, please substitute the strings `channel-name`, `a-username`
    and `a-private-group` with your own values, taken from your Slack organization.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行此代码之前，请将字符串 `channel-name`、`a-username` 和 `a-private-group` 替换为你从 Slack 组织中获取的自己的值。
- en: 'You''ll also need to replace the `API TOKEN` string with the quotebot token
    you were given when the bot was created. The code should now look similar to this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要将 `API TOKEN` 字符串替换为创建机器人时给你的 quotebot 令牌。现在代码应该看起来像这样：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once you have replaced those values, you can run the app from the command line
    as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 替换这些值后，你可以从命令行运行应用程序，如下所示：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you log in to Slack and open your team''s page, you should be able to see
    this when you browse to the **#general** channel:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你登录 Slack 并打开你的团队页面，当你浏览到 **#general** 频道时应该能看到这个：
- en: '![Slackbots library basics](img/image00239.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Slackbots library basics](img/image00239.jpeg)'
- en: 'Awesome, our quotebot just came to life with its first ever message! Now let''s
    break the code down into pieces in order to understand it a bit better:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了，我们的 quotebot 就这样通过它的第一条消息复活了！现在让我们将代码分解成几个部分，以便更好地理解它：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see from the preceding code, the first thing we need to do is to
    require the Slackbot constructor. From there we can instantiate a new `Bot` object
    and add callbacks to specific events.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从前面的代码中看到的，我们首先需要做的是引入 Slackbot 构造函数。从那里我们可以实例化一个新的 `Bot` 对象并为特定事件添加回调。
- en: 'On this code, we use the `start` event that is triggered when the bot connects
    successfully to the Slack server:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，我们使用当机器人成功连接到 Slack 服务器时触发的 `start` 事件：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then we can use the methods offered by the library to post a message in a channel
    using the `postMessageToChannel` method, to a user as a private message using
    `postMessageToUser`, or in a private group conversation by calling `postMessageToGroup`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用库提供的函数，通过 `postMessageToChannel` 方法在频道中发布消息，通过 `postMessageToUser`
    方法向用户发送私信，或者通过调用 `postMessageToGroup` 在私密群组对话中发送消息。
- en: With these fundamentals covered, we can move on to explore the [They Said So](https://theysaidso.com/)
    API, which is necessary in order to for us to build our bot.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握了这些基础知识之后，我们可以继续探索 [They Said So](https://theysaidso.com/) API，这对于我们构建机器人是必要的。
- en: The They Said So API
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: The They Said So API
- en: 'The They Said So service has a huge collection of quotes in their database
    and the **Quotes** API is a great and convenient way to access this data. In order
    to consume the Quotes API, you''ll first need to sign up for the service via this
    URL: [https://theysaidso.com/register](https://theysaidso.com/register) .'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: The They Said So 服务在其数据库中拥有大量的引语，**Quotes** API 是访问这些数据的一个非常好且方便的方式。为了使用 Quotes
    API，你首先需要通过此 URL 注册服务：[https://theysaidso.com/register](https://theysaidso.com/register)。
- en: '![The They Said So API](img/image00240.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![The They Said So API](img/image00240.jpeg)'
- en: 'Once you have entered your details and have registered, you will receive an
    automated verification e-mail, which will look like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在你输入详细信息并注册后，你将收到一封自动验证电子邮件，其外观如下：
- en: '![The They Said So API](img/image00241.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![The They Said So API](img/image00241.jpeg)'
- en: When you receive this, simply click on the **Verify** button in order to validate
    your newly registered account and start enjoying the service.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当你收到这封邮件时，只需点击 **Verify** 按钮以验证你新注册的账户并开始享受服务。
- en: 'Once you''ve done that, you will shortly receive this e-mail:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成这些操作后，你将很快收到这封电子邮件：
- en: '![The They Said So API](img/image00242.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![The They Said So API](img/image00242.jpeg)'
- en: 'The next step is to subscribe to the Quotes API in order to start consuming
    it. This can be done by visiting the following URL: [https://theysaidso.com/api/#subscribe](https://theysaidso.com/api/#subscribe)
     or alternatively clicking on the **Create a great App using our API** link from
    the e-mail received.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是订阅 Quotes API 以开始使用它。这可以通过访问以下 URL 完成：[https://theysaidso.com/api/#subscribe](https://theysaidso.com/api/#subscribe)
    或者点击收到的电子邮件中的 **Create a great App using our API** 链接。
- en: When you open this, scroll to the very bottom of the page and you will see the
    following API subscription plans on the screen.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开它时，滚动到页面底部，你会在屏幕上看到以下API订阅计划。
- en: In our case, because we are building a demo application, we won't sign up for
    any specific paid plan, but instead we'll consume the API through **Mashape **(
    [https://market.mashape.com/orthosie/they-said-so-say-it-with-style/](https://market.mashape.com/orthosie/they-said-so-say-it-with-style/)
    ).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，因为我们正在构建一个演示应用程序，我们不会注册任何特定的付费计划，而是将通过**Mashape**（[https://market.mashape.com/orthosie/they-said-so-say-it-with-style/](https://market.mashape.com/orthosie/they-said-so-say-it-with-style/)）来使用API。
- en: Mashape is a service that helps developers deliver better APIs and microservices.
    Many third-party APIs are provided through Mashape or similar services.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Mashape是一个帮助开发者提供更好的API和微服务的服务。许多第三方API都是通过Mashape或类似的服务提供的。
- en: However, if you wish to get a paid plan, you may **Sign Up** for any of the
    paid API options that the service offers. The advantage of doing this is that
    you won't need to sign on to Mashape in order to consume the API.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你希望获取付费计划，你可以**注册**服务提供的任何付费API选项。这样做的好处是，你不需要在Mashape上登录就可以使用API。
- en: So when we use the API through Mashape, we can click on the **Consume API**
    button at the bottom of the screen.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们通过Mashape使用API时，我们可以在屏幕底部点击**使用API**按钮。
- en: '![The They Said So API](img/image00243.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![The They Said So API](img/image00243.jpeg)'
- en: When we click on that button, the next thing we'll see is the following screenshot.
    Once there, click on the **PRICING** tab.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击那个按钮时，接下来我们会看到以下截图。一旦到达那里，点击**价格**选项卡。
- en: '![The They Said So API](img/image00244.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![The They Said So API](img/image00244.jpeg)'
- en: On the **PRICING** tab, under the **BASIC** plan, click on the **SUBSCRIBE**
    button.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在**价格**选项卡下，在**基础**计划中，点击**订阅**按钮。
- en: '![The They Said So API](img/image00245.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![The They Said So API](img/image00245.jpeg)'
- en: 'When you click on the **SUBSCRIBE** button, you''ll see the following pop-up
    screen:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击**订阅**按钮时，你会看到一个以下弹出屏幕：
- en: '![The They Said So API](img/image00246.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![The They Said So API](img/image00246.jpeg)'
- en: If you have a GitHub or Mashape account, you can simply subscribe to the API
    by logging into the service with any of those accounts. Otherwise you will have
    to create an account on Mashape.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个GitHub或Mashape账户，你可以简单地通过使用这些账户中的任何一个登录到服务来订阅API。否则，你将不得不在Mashape上创建一个账户。
- en: 'The process anyway is very easy and straightforward. Once that''s been done,
    we are ready to start exploring the API and consuming it. You''ll see this on
    your screen:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程非常简单直接。一旦完成，我们就可以开始探索API并使用它了。你会在屏幕上看到以下内容：
- en: '![The They Said So API](img/image00247.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![The They Said So API](img/image00247.jpeg)'
- en: 'Simply click on the **Explore public APIs** button and then hit the back button
    on your browser or navigate to this URL: [https://market.mashape.com/orthosie/they-said-so-say-it-with-style/](https://market.mashape.com/orthosie/they-said-so-say-it-with-style/)
    to start exploring the API. So let''s do that.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地点击**探索公共API**按钮，然后点击浏览器上的后退按钮或导航到以下URL：[https://market.mashape.com/orthosie/they-said-so-say-it-with-style/](https://market.mashape.com/orthosie/they-said-so-say-it-with-style/)以开始探索API。那么，让我们这么做吧。
- en: From the API, we are interested in the quotes section. We can look at this by
    clicking on the **GET Quote** link on the left side of the screen.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从API中，我们对报价部分感兴趣。我们可以通过点击屏幕左侧的**GET Quote**链接来查看它。
- en: '![The They Said So API](img/image00248.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![The They Said So API](img/image00248.jpeg)'
- en: 'This will take us to the following page, where we can see how to construct
    an API call in order to get a quote:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带我们到以下页面，我们可以看到如何构建API调用以获取报价：
- en: '![The They Said So API](img/image00249.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![The They Said So API](img/image00249.jpeg)'
- en: There are also multiple examples in various programming languages, including
    Node.js, which uses the Unirest library ( [http://unirest.io/](http://unirest.io/)
    ) to make HTTP requests. In our application, we'll be using the Request library
    instead ( [https://www.npmjs.com/package/request](https://www.npmjs.com/package/request)
    ).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有多种编程语言的多个示例，包括使用Unirest库（[http://unirest.io/](http://unirest.io/)）进行HTTP请求的Node.js。在我们的应用程序中，我们将使用Request库（[https://www.npmjs.com/package/request](https://www.npmjs.com/package/request)）代替。
- en: Notice how on all the sample code, including the Node.js one mentioned on the
    **GET Quote** documentation page, the API Token key is passed on the header of
    the HTTP request as the value of the `X-Mashape-Key` parameter.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在所有示例代码中，包括在**GET Quote**文档页面提到的Node.js代码中，API令牌密钥作为`X-Mashape-Key`参数的值传递在HTTP请求的头部。
- en: So let's see how we would be able to write a small example on how to retrieve
    a quote using the Request library.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用Request库编写一个获取引言的小例子。
- en: 'Let''s create a new file called `TestRequest.js` so we don''t mix up this test
    code with the main quotebot code that we have started to write using `App.js`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`TestRequest.js`的新文件，这样我们就不至于将此测试代码与使用`App.js`开始编写的quotebot主代码混淆：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Before you can run this, make sure you are subscribed to the **BASIC** plan,
    which includes five calls per day. You will still have to enter a credit card
    number, which will be billed if you go over five requests per day.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行此程序之前，请确保您已订阅**基础**计划，该计划每天包含五个通话。即使您每天超过五个请求，您仍需输入信用卡号码。
- en: 'You can always unsubscribe on this URL: [https://market.mashape.com/orthosie/they-said-so-say-it-with-style/pricing](https://market.mashape.com/orthosie/they-said-so-say-it-with-style/pricing)
    by clicking on the **Unsubscribe** link under the **BASIC** plan.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以始终通过以下URL取消订阅：[https://market.mashape.com/orthosie/they-said-so-say-it-with-style/pricing](https://market.mashape.com/orthosie/they-said-so-say-it-with-style/pricing)，在**基础**计划下点击**取消订阅**链接。
- en: '![The They Said So API](img/image00250.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![The They Said So API](img/image00250.jpeg)'
- en: 'Now you may run this script from the command line as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从命令行按如下方式运行此脚本：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This produces the following result:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生以下结果：
- en: '![The They Said So API](img/image00251.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![The They Said So API](img/image00251.jpeg)'
- en: Now that we know how to interact both APIs, we can expand the basic code we
    initially wrote in order to create a full blown quotebot.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何交互这两个API，我们可以扩展我们最初编写的代码，以创建一个完整的quotebot。
- en: In our previous code snippet, we used the start event. Going forward, we'll
    also need the message event, which will be used to intercept an incoming message
    and based on that reply back.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的代码片段中，我们使用了开始事件。从现在开始，我们还需要消息事件，它将用于拦截传入的消息，并根据该消息进行回复。
- en: We need to have a function that will intercept every real-time API message that
    is readable by our bot. This includes pretty much every chat message in any channel
    where the bot has been installed, and also private messages directed to the bot
    or other real-time notifications, such as a user typing in a channel, edited or
    deleted messages, users joining or leaving the channel, and so on.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个函数来拦截我们的bot可读的每个实时API消息。这包括几乎在安装了bot的任何渠道中的所有聊天消息，以及指向bot或其它用户的私人消息，以及实时通知，如用户在渠道中输入、编辑或删除消息，用户加入或离开渠道等等。
- en: Real-time API messages are not just chat messages, but any kind of event that
    occurs within our Slack organization. This is important to keep in mind.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 实时API消息不仅仅是聊天消息，而是我们Slack组织内发生的任何类型的事件。这一点很重要。
- en: Ideally, we would like the bot to filter all these events to detect public messages
    in channels that mention getquote or the name of the bot, and then we want to
    react to this message by replying with a random quote, fetched from the API we
    have subscribed using Mashape.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们希望bot过滤所有这些事件，以检测提及getquote或bot名称的渠道中的公共消息，然后我们希望对此消息做出反应，通过回复从我们使用Mashape订阅的API中获取的随机引言。
- en: 'Ideally, we want to divide all these checks in a list of operations; this is
    exactly what we need to do. These are:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们希望将这些检查分成一系列操作；这正是我们需要做的。这些操作包括：
- en: Verify if the event represents a chat message
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证事件是否代表聊天消息
- en: Verify if the message comes from a user that is different from quotebot (to
    circular references and loops)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证消息是否来自不同于quotebot的用户（以避免循环引用和循环）
- en: Verify if the message mentions getquote
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证消息是否提及getquote
- en: 'The code would look as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE10]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `onMessage` function receives an `msg` object as a parameter. The `msg`
    contains all the information that describes the real-time event received through
    the Slack Real Time API.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`onMessage`函数接收一个`msg`对象作为参数。`msg`包含通过Slack实时API接收到的实时事件的所有信息。'
- en: 'Now let''s look at each helper function, one by one:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们逐个查看每个辅助函数：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This function verifies if a real-time event corresponds to an `msg` sent by
    a user. With our first helper function in place, let''s have a look at the second
    one:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数验证实时事件是否对应于用户发送的`msg`。有了我们放置的第一个辅助函数，让我们看看第二个：
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This helper function allows us to see if the `msg` comes from a user who is
    not the quotebot itself.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 此辅助函数使我们能够查看`msg`是否来自不是quotebot本身的用户。
- en: 'Last but not least, our final helper function checks if messages contain the
    string `getquote`. Without this verification we could potentially end up with
    an infinite loop of quotes:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们的最终辅助函数检查消息是否包含字符串`getquote`。如果没有这个验证，我们可能会陷入无限循环的引用：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With all the helper verification functions done, our random quote reply back
    method would look like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成所有辅助验证函数后，我们的随机引用回复方法将如下所示：
- en: '[PRE14]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, we tie it all together by passing the `onMessage` callback to the
    listening event as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将通过将`onMessage`回调传递给监听事件来整合所有内容：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The full code looks like this.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码看起来是这样的。
- en: '[PRE16]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In order to see this in action, simply message quotebot with the text `getquote`
    on Slack:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到这个动作，只需在Slack上向quotebot发送包含文本`getquote`的消息：
- en: '![The They Said So API](img/image00252.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![The They Said So API](img/image00252.jpeg)'
- en: 'Once you do that, you will receive the following feedback on the **#general**
    channel:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你这样做，你将在**#general**频道收到以下反馈：
- en: '![The They Said So API](img/image00253.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![The They Said So API](img/image00253.jpeg)'
- en: That's awesome! Notice, however, that we have returned the full body response.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！然而，请注意，我们已经返回了完整的正文响应。
- en: This could be further optimized and you could eventually parse the body response
    and just output the quote and the author, without any of the other details.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以进一步优化，你最终可以解析正文响应，只输出引用和作者，而不包含其他任何细节。
- en: This is totally up to you and a nice exercise in order to improve this code.
    Further to this, you could also add additional code in order to process natural
    language, interpret more commands, and also to respond to different channels.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这完全取决于你，这是一个很好的练习，可以用来改进这段代码。此外，你还可以添加额外的代码来处理自然语言，解释更多命令，并响应不同的频道。
- en: The possibilities are frankly endless and all that is needed is time, imagination,
    and dedication. We leave the challenge open for you to further expand and explore.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 可能性实际上是无限的，所需要的只是时间、想象力和奉献。我们将挑战留给你们，以便进一步扩展和探索。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We've seen briefly how Slack is a great collaboration platform and also how
    incredibly easy it is to interact with its real-time API.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要地看到了Slack是一个伟大的协作平台，以及与其实时API交互是多么的简单。
- en: In a matter of minutes, you can have a small demo bot up and running.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在几分钟内，你就可以拥有一个运行的小型演示机器人。
- en: In the following chapters, we'll explore other interesting platforms that are
    also quite popular nowadays and this should also be a lot of fun to play around
    with.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨其他一些现在也很受欢迎的有趣平台，这应该也会很有趣可以玩弄。
- en: I hope you have enjoyed following these examples and the upcoming chapters will
    touch upon other fascinating topics. Keep having fun!
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你喜欢跟随这些示例，接下来的章节将涉及其他令人着迷的主题。继续享受乐趣！
