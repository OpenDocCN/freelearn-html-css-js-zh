["```js\n(module\n(export \"sum\" (func $module/sum))\n (func $module/sum (param $0 i32) (param $1 i32)\n   (result i32)\n  local.get $0\n  local.get $1\n  i32.add\n )\n)\n```", "```js\nimport{ readFile } from 'fs/promises';\nconst content = await readFile('./sum.wasm');\nconst wasm = await WebAssembly.compile(content);\nconst instance = await WebAssembly.instantiate(wasm);\nconst { sum } = instance.exports;\nconsole.log(sum(2, 3)); // logs 5\n```", "```js\nimport { readFile } from \"fs/promises\";\nimport { WASI } from \"wasi\";\nimport { argv, env } from \"process\";\nconst wasi = new WASI({\n  args: argv,\n  env,\n});\nconst api = { wasi_snapshot_preview1: wasi.wasiImport };\nconst path = \"./echo.wasm\";\nconst content = await readFile(path);\nconst wasm = await WebAssembly.compile(content);\nconst instance = await WebAssembly.instantiate(wasm, api);\nwasi.start(instance);\n```", "```js\n$ node --experimental-wasi-unstable-preview1 app.mjs\n```", "```js\nexport function sum(a: i32, b: i32): i32 {\n  return a + b;\n}\n```", "```js\n$ npx asc module.ts --outFile sum.wasm --optimize\n```", "```js\n$ npx asinit .\n\nVersion: 0.21.6\n\n[...]\n\n  ./assembly\n\n  Directory holding the AssemblyScript sources being compiled to WebAssembly.\n\n  ./assembly/tsconfig.json\n\n  TypeScript configuration inheriting recommended AssemblyScript settings.\n\n  ./assembly/index.ts\n\n  Example entry file being compiled to WebAssembly to get you\n\n[...]\n\n  ./index.html\n\n  Starter HTML file that loads the module in a browser.\n\nThe command will try to update existing files to match the correct settings [...]\n\nDo you want to proceed? [Y/n] Y\n```", "```js\nimport { sum } from \"./build/release.js\";\ndocument.body.innerText = sum(1, 2);\n```", "```js\n$ npm run asbuild\n\n$ npm start\n```", "```js\n$ npm init -y\n\n$ npm install assemblyscript as-wasi --save-dev\n\n$ npx asinit . -y\n```", "```js\nimport \"wasi\";\nimport { Console, CommandLine } from \"as-wasi/assembly\";\nconst args = CommandLine.all;\nconst user = args[args.length - 1];\nConsole.log(`Hello ${user}!`);\n```", "```js\n$ npx asc assembly/index.ts -o echo.wasm --use abort=wasi_abort --debug\n```", "```js\n$ node --experimental-wasi-unstable-preview1 --no-warnings app.mjs Florian\n\nHello Florian!\n```"]