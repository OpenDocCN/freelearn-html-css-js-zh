- en: Chapter 7. Wijmo Mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Introduced in the 2013 release, adaptive widgets can be used in both desktop
    and mobile web applications. In this chapter, we take a quick tour of Wijmo mobile:
    the setup, simple widgets, and views. In particular, we focus on the AppView,
    Wijmo''s adaptive super widget that lets you use the same pages for mobile and
    desktop browsers.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Wijmo mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, I show you how to enable Wijmo's mobile widgets. We go through
    the steps of obtaining jQuery mobile and creating widgets. Wijmo mobile widgets
    are an extension of jQuery's mobile widgets. I also explain how a different approach
    to creating mobile widgets is taken by jQuery mobile.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Wijmo mobile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since Wijmo mobile is built on jQuery mobile, we will first obtain and install
    jQuery mobile.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining jQuery mobile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need to replace the jQuery UI library used in the setup previously
    with jQuery mobile, which is available from [http://jquerymobile.com/download/](http://jquerymobile.com/download/).
    jQuery mobile also has a Theme Roller like jQuery UI. The default theme is included
    in the jQuery mobile package. If you want to make a custom theme, you can do so
    at [http://jquerymobile.com/themeroller/](http://jquerymobile.com/themeroller/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing jQuery mobile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You need to copy over the following items from the jQuery mobile download into
    the `lib` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: The `jquery.mobile-1.3.1.min.js` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jquery.mobile-1.3.1.min.css` file for the CSS styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The images directory for jQuery mobile icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the files are in place, a mobile page can be created. In the following
    code snippet, I show the contents of an example page using jQuery mobile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Instead of the jQuery UI library, we used jQuery mobile here. In addition, we
    replaced the Wijmo Rocket theme with the jQuery UI theme.
  prefs: []
  type: TYPE_NORMAL
- en: Using a mobile browser emulator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this chapter, we use the Opera mobile emulator available at [http://www.opera.com/developer/mobile-emulator](http://www.opera.com/developer/mobile-emulator).
    Compared to the iPhone or Android emulators, it is easier to install and simulate
    different devices with different screen sizes. The Opera mobile browser is also
    widely used and supported on all popular platforms. The following screenshot shows
    you the previous example of a jQuery mobile page rendered in Opera mobile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using a mobile browser emulator](img/6067OT_7_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating an expander widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The expander is for collapsible content. Unlike the accordion, it only has
    a single section. To create an expander, wrap the collapsible block in a single-parent
    element and apply the `data-role="wijexpander" attribute` to the parent element.
    You can see how to do this in the following example, where only the contents of
    the `body` tag are shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The default for an expander shows the content within the block.
  prefs: []
  type: TYPE_NORMAL
- en: Passing options to the expander widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make the expander collapsed by default, we use the `data-options` attribute
    and set `expanded` to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Since Wijmo mobile is still new, many of the widgets do not have mobile counterparts
    and a few of the options supported for desktop browsers don''t work. Namely, the
    option `contentUrl` does not work in the 3.20131.2 version, and setting the expand
    direction to `right` makes the UI look confusing. Here, we see an example of changing
    the expand direction by setting `data-options=''{expandDirection: "right"}''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Passing options to the expander widget](img/6067OT_7_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a ListView widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The ListView acts as a list of links for navigation. jQuery mobile applies
    the necessary styles to make the list mobile-friendly. Once a list item is tapped
    on, the link content is loaded through AJAX and inserted into the page. This improves
    the user perception as they do not see a blank screen. A ListView is created by
    setting the `data-role` attribute of an HTML list to `listview` with each list
    item containing a link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'With `data-autodividers="true"` on the list parent, the list items are categorized
    by their first letter. The list items show up as navigation buttons with right
    arrows as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a ListView widget](img/6067OT_7_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating an AppView widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The WijmoAppView creates a responsive layout that adapts to the screen size.
    It works similar to ListView on phones. On desktops and tablets, the list is displayed
    on the left side with the content pane taking up the rest of the page. Note that
    when using AppView, your jQuery mobile and jQuery versions must be compatible
    with the release of Wijmo you're using. For this example, I am using jQuery 1.8.2,
    jQuery mobile 1.2.0, and Wijmo3.20131.4.
  prefs: []
  type: TYPE_NORMAL
- en: 'An AppView is composed of an AppView page and a ListView for navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Under the AppView page, the page title is set in an element using `data-role="header"`,
    which is always displayed at the top of the page. As you might guess, there is
    also a `data-role="footer"` attribute, which is displayed at the bottom of the
    page when data-position is set to `fixed`. The content area in the preceding code
    marked with `data-role="content"` only shows in tablets. You can see how the page
    would look like in a tablet in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an AppView widget](img/6067OT_7_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The navigation panel is a ListView widget wrapped around by a `data-role="menu"`
    element. On the phone, only the navigation panel is shown when the AppView is
    loaded as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an AppView widget](img/6067OT_7_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To make the menu items work, we need to serve the files set in the `href` attributes
    from a server since they are loaded through AJAX. The downloadable source code
    for this chapter includes a file server written in `Node.JS`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the AppView pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add the calendar page and initialize it with the calendar widget. Create
    a `calendar.html` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The contents under `data-role="content"` are displayed in the content area.
    In this area, the calendar is added by setting `data-role="wijcalendar"` on a
    `div`. On the top left is a **Back** button, which returns to the main menu. It
    is added whenever a menu item is selected. In the following screen, I selected
    the calendar menu entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the AppView pages](img/6067OT_7_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If the example doesn''t work for you, the first thing to try is replacing the
    header styles and scripts with the ones hosted on the CDN: [http://wijmo.com/downloads/#wijmo-cdn](http://wijmo.com/downloads/#wijmo-cdn).
    The next step is to upload your HTML files and post a question on the forum [http://wijmo.com/forums/](http://wijmo.com/forums/).
    In addition, check the AJAX requests and make sure your files are being served
    locally.'
  prefs: []
  type: TYPE_NORMAL
- en: Reusing non-mobile pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose we already have a `calendar.html`file. How can it be used with the
    new mobile app? You just need to add `data-role="appviewpage",data-role="content",`
    and insert `data-role="widgetname"` for all widgets on the page. For instance,
    we could replace `calendar.html` with the following, keeping the reference to
    jQuery UI and the Rocket theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We added two extra elements for the required data-roles. Your page may have
    a different structure and you may just need to add the `data-roles` attribute
    to existing elements. The JavaScript on the page is not executed, as Wijmo ignores
    everything except the title outside of `data-role="appviewpage"`. Since the title
    is set with `<title>Calendar</title>`, Wijmo uses it as the title for the page
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reusing non-mobile pages](img/6067OT_7_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On desktop browsers, the page still displays the calendar widget. Take a look
    at the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reusing non-mobile pages](img/6067OT_7_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is quite remarkable as jQuery mobile does not have a similar widget to
    allow reuse of non-mobile pages. Using the WijmoAppView, separate mobile development
    is no longer necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced Wijmo mobile widgets. Unlike jQuery mobile, Wijmo's
    adaptive widgets can be used on both desktops and phones. We started by setting
    up the development environment, then we looked at several widgets, starting from
    the simplest.
  prefs: []
  type: TYPE_NORMAL
