- en: Chapter 3. Form Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wijmo form decorator widgets for radio button, checkbox, dropdown, and textbox
    elements give forms a consistent visual style across all platforms. There are
    separate libraries for decorating the dropdown and other form elements, but Wijmo
    gives them a consistent theme. jQuery UI lacks form decorators, leaving the styling
    of form components to the designer. Using Wijmo form components saves time during
    development and presents a consistent interface across all browsers. To use these
    form components with custom styles, see [Chapter 8](ch08.html "Chapter 8. Extending
    Wijmo"), *Extending Wijmo*.
  prefs: []
  type: TYPE_NORMAL
- en: Checkbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The checkbox widget is an excellent example of the style enhancements that
    Wijmo provides over default form controls. The checkbox is used if multiple choices
    are allowed. The following screenshot shows the different checkbox states:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checkbox](img/6067OT_3_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Wijmo adds rounded corners, gradients, and hover highlighting to the checkbox.
    Also, the increased size makes it more usable. Wijmo checkboxes can be initialized
    to be checked. The code for this purpose is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this instance, `checkbox3` is set to **Checked** as it is initialized.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will not get the same result if one of the checkboxes is initialized twice.
    Here, we avoid that by selecting the checkboxes that are not checked after `checkbox3`
    is set to be **Checked**.
  prefs: []
  type: TYPE_NORMAL
- en: Radio buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Radio buttons, in contrast with checkboxes, allow only one of the several options
    to be selected. In addition, they are customized through the HTML markup rather
    than a JavaScript API. To illustrate, the checked option is set by the `checked`
    attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'jQuery UI offers a button widget for radio buttons, as shown in the following
    screenshot, which in my experience causes confusion as users think that they can
    select multiple options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Radio buttons](img/6067OT_3_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Wijmo radio buttons are closer in appearance to regular radio buttons so
    that users would expect the same behavior, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Radio buttons](img/6067OT_3_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Wijmo radio buttons are initialized by calling the `wijradiomethod` method
    on radio button elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `changed` option, which is also available for checkboxes,
    is set to a handler. The handler is passed a `jQuery.Event` object as the first
    argument. It is just a JavaScript event object normalized for consistency across
    browsers. The second argument exposes the state of the widget. For both checkboxes
    and radio buttons, it is an object with only the `checked` property.
  prefs: []
  type: TYPE_NORMAL
- en: Dropdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Styling a dropdown to be consistent across all browsers is notoriously difficult.
    Wijmo offers two options for styling the HTML `select` and `option` elements.
    When there are no option groups, the `ComboBox` is the better widget to use. This
    is covered in the next section. For a dropdown with nested options under option
    groups, only the `wijdropdown` widget will work. As an example, consider a country
    selector categorized by continent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `select` element''s width is set to 170 pixels so that when the dropdown
    is initialized, both the dropdown menu and items have a width of 170 pixels. This
    allows the **North America** option category to be displayed on a single line,
    as shown in the following screenshot. Although the dropdown widget lacks a `width`
    option, it takes the `select` element''s width when it is initialized. To initialize
    the dropdown, call the `wijdropdown` method on the `select` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The dropdown element uses the blind animation to show the items when the menu
    is toggled.
  prefs: []
  type: TYPE_NORMAL
- en: '![Dropdown](img/6067OT_3_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, it applies the same click animation as on buttons to the slider and menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dropdown](img/6067OT_3_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To reset the dropdown to a select box, I've added a reset button that calls
    the `destroy` method. If you have JavaScript code that dynamically changes the
    styling of the dropdown, the `refresh` method applies the Wijmo styles again.
  prefs: []
  type: TYPE_NORMAL
- en: ComboBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Wijmo ComboBox works on the `select` and `option` elements. The options
    can either be loaded through HTML markup or JavaScript Object Notation (JSON).
    For our example, we load the menu items by using markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `showingAnimation` method specifies the animation to use when the options
    become visible. All of the jQuery UI effects can be used, and you can try them
    on the jQuery UI effects demo page: [http://jqueryui.com/effect/](http://jqueryui.com/effect/).
    For the `hidingAnimation` method, I use the fade effect, which gradually decreases
    the opacity to 0\. We bind to the event type `wijcomboboxselectedindexchanged`
    that is triggered when the selected index of the ComboBox is changed to display
    a message involving the old item and the new item.'
  prefs: []
  type: TYPE_NORMAL
- en: InputDate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The InputDate widget provides a convenient visual mechanism for helping users
    to select dates. This widget supports a wide range of date formats, making it
    easier for the user to select a date and provide the information to you in a consistent
    way. The InputDate widget only works on an `input` element. To display a calendar
    without the `input` element, use the calendar widget, which looks as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![InputDate](img/6067OT_3_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To display an InputDate widget with a button to trigger the calendar, wrap
    the `input` element in a fixed width block, initialize the widget with the `showTrigger`
    option, and remove the `wijmo-wijinput-trigger` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, showing an InputDate with a spinner for incrementing or decrementing
    the day, month, and year fields needs extra configuration. While the `input` field
    still accepts keystrokes that are valid within the date format, the spinner gives
    another option. Clicking once on the spinner changes the value of the selected
    date segment by one. Holding the click gradually accelerates the rate at which
    the date segment changes. Try it for yourself to get a feel of the visual effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![InputDate](img/6067OT_3_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When working with a date input field, the most important part is sending the
    date to the server. Wijmo offers a variety of `dateFormat` options depending on
    your server setup and the date format that it accepts. In particular, if your
    server accepts the short date (mm/dd/yyyy) and short time (hh:mmtt) formats, then
    the general date format `g` will work for you. Simply initialize the InputDate
    widget with the `dateFormat` option set to `g`. With the previous example, it
    would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To get the date from the input, call the `getText` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: which returns the text displayed in the input box.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `wijinput` format string follows the same convention as Java''s `SimpleDateFormat`
    class, except for the AM/PM designator. The following table summarizes the formatting
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Letter | Date or Time Component | Example | Output |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `y` | Year | yyyy; yy | 1996; 96 |'
  prefs: []
  type: TYPE_TB
- en: '| `M` | Month in year | MMMM;MMM;MM | July;Jul;07 |'
  prefs: []
  type: TYPE_TB
- en: '| `d` | Day in month | dd | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| `H` | Hour in day (0-23) | H | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| `h` | Hour in am/pm (1-12) | hh | 12 |'
  prefs: []
  type: TYPE_TB
- en: '| `m` | Minute in hour | mm | 30 |'
  prefs: []
  type: TYPE_TB
- en: '| `s` | Second in minute | ss | 55 |'
  prefs: []
  type: TYPE_TB
- en: '| `t` | AM/PM | tt | AM |'
  prefs: []
  type: TYPE_TB
- en: To illustrate, if the `dateFormat` is set as `MMM-dd-yyyy`, you can expect to
    see a date of the form `Jul-14-2013` in the field.
  prefs: []
  type: TYPE_NORMAL
- en: InputMask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The InputMask widget shows the user the correct format for an input box. In
    addition, it prevents invalid input and gives visual cues about the data required.
    An example is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![InputMask](img/6067OT_3_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The input format is specified by a mask. A list of options are available on
    [http://wijmo.com/wiki/index.php/InputMask](http://wijmo.com/wiki/index.php/InputMask).
    For our example, we make an input mask for U.S. phone numbers where the area codes
    are optional. These optional characters can be left blank:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The masking element `9` indicates an optional digit, while `0` indicates a
    required digit. Literals such as the dash and parenthesis are displayed as they
    appear in the mask. By default, invalid inputs do not show up in the input element.
    To give the user feedback when the input is invalid, we add an error CSS class
    that is triggered on such inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When the text changes, we remove the `error` class. On invalid input, we add
    the class again. Another useful input mask is the day, month abbreviation, and
    year format as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![InputMask](img/6067OT_3_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This can be done with the input mask `00->L<LL-0000` where `>L` indicates an
    uppercase character from A to Z and `<LL` indicates two lowercase characters from
    a to z. To add a `clear` button for each of the fields, call the jQuery UI button
    function and register the click event on it. Since the clear button is placed
    next to the input, we call the `setText` method on its sibling input element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note that we also override the CSS for the button padding so that the buttons
    are the same size as the inputs. With the `reset` button beside each field, the
    user would not need to fill out the form again if they make a mistake on one of
    the fields.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we learned about Wijmo's form components. A checkbox is used
    when multiple items can be selected. Wijmo's checkbox widget has style enhancements
    over the default checkboxes. Radio buttons are used when only one item is to be
    selected. While jQuery UI only supports button sets on radio buttons, Wijmo's
    radio buttons are much more intuitive. Wijmo's dropdown widget should only be
    used when there are nested or categorized `<select>` options. The ComboBox comes
    with more features when the structure of the options is flat. InputDate is used
    to display a date selector calendar widget, while the InputMask is meant to give
    users a hint of what the correct input format is.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned the form components in Wijmo, try building a form
    on your own before moving onto the next chapter. Try making a nested form where
    selecting a choice in a radio group shows or hides fields.
  prefs: []
  type: TYPE_NORMAL
