["```js\n<script src=\"img/highcharts-regression.js\"> </script>\n```", "```js\n            series: [{\n                regression: true ,\n                regressionSettings: {\n                    type: 'linear',\n                    color:  'rgba(223, 83, 83, .9)'\n                },\n                name: 'Female',\n                color: 'rgba(223, 83, 83, .5)',\n                data: [ [161.2, 51.6], [167.5, 59.0],\n                        .... \n```", "```js\n<script src=\"img/draggable-points.js\"></script>\n```", "```js\nevents: {                    \n     drag: function(e) {\n         // Update new data value in 'drag' div box\n         $('#drag').html(\n             'Dragging <b>' + this.series.name + '</b>, <b>' +\n             this.category + '</b> to <b>' + \n             Highcharts.numberFormat(e.newY, 2) + '</b>'\n         );\n     },\n     drop: function() {\n         $('#drop').html(\n              'In <b>' + this.series.name + '</b>, <b>' +\n               this.category + '</b> was set to <b>' + \n               Highcharts.numberFormat(this.y, 2) + '</b>'\n         );\n     }\n }\n```", "```js\n    series: [{\n        data: [0, 71.5, 106.4, .... ],\n        draggableY: true,\n        dragMinY: 0,\n        type: 'column',\n        minPointLength: 2\n    }, {\n        data: [0, 71.5, 106.4, ....],\n        draggableY: true,\n        dragMinY: 0,\n        type: 'column',\n        minPointLength: 2\n    }, {\n```", "```js\n(function (H) {\n\n    H.wrap(H.Chart.prototype, 'init', function (proceed) {\n       ....\n       for (i = 0 ; i < series.length ; i++){\n            var s = series[i];\n            if ( s.regression && !s.rendered ) {\n                 // Create regression series option\n                 var extraSerie = {\n                     ....\n                 };\n                 // Compute regression based on the type\n                 if (regressionType == \"linear\") {\n                    regression = _linear(s.data) ;\n                    extraSerie.type = \"line\";\n                 }\n            }\n      }\n      // Append to series configuration array\n      ....\n   });\n\n   function _linear(data) {\n   ....\n   }\n\n   ....\n})(Highcharts);\n```", "```js\n(function (H) {    \n    H.wrap(H.Chart.prototype, 'init', function (proceed) {\n     ....\n    });\n\n    H.Chart.prototype.updateRegression = function(point) {\n          // Get the series from the dragged data point\n          var series = point.series;\n          var chart = series.chart;\n          // Get the regression series associated \n          // with this data series\n          var regressSeries = chart.series[series.regressIdx];\n\n          // Recompute based on the regression type and \n          // update the series\n          if (series.regressionType == \"linear\") {\n            regression = _linear(series.data) ;\n          }\n          regressSeries.update(regression, true);\n    };\n\n   function _linear(data) {\n   ....\n   }\n\n   ....\n})(Highcharts);\n```", "```js\nplotOptions: {\n  series: {\n    point: {\n      events: {\n          drag: function(e) {\n             // Pass the dragged data point to the     \n             // regression plugin and update the\n             // regression line\n             Highcharts.charts[0]\n                          .updateRegression(e.target);\n        }\n      }\n    }\n  }\n}    \n```", "```js\n    series: [{\n        regression: true ,\n        regressionSettings: {\n            type: 'linear',\n            color:  'rgba(223, 83, 83, .9)'\n        },\n        draggableX: true,\n        draggableY: true,\n        name: 'Female',\n        color: 'rgba(223, 83, 83, .5)',\n        data: [ [161.2, 51.6], [167.5, 59.0], [159.5, 49.2], \n                [157.0, 63.0], [155.8, 53.6], [170.0, 59.0],\n                [159.1, 47.6], [166.0, 69.8], [176.2, 66.8],\n                ....\n```", "```js\n(function (Highcharts) {\n        ....\n        // what happens in anonymous function, \n        // stays in anonymous function\n        function hangoverIn(place) { \n           if (place === 'home') {\n                return 'phew';\n            } else if (place === 'hospital') {\n                return 'ouch';\n            } else if (place === 'vegas') {\n                return 'aaahhhhh!!';\n            }\n        }\n})(Highcharts);\n```", "```js\n(function (H) {\n    H.wrap(H.Chart.prototype, 'init', \n        function (proceed) {\n            // Plugin specific code for processing \n            // chart configuration\n            .... \n            // Must include this instruction for wrap \n            // method to work\n            proceed.apply(this,\n                 Array.prototype.slice.call(arguments, 1));\n        }\n    );\n})(Highcharts);\n```", "```js\n(function (H) {\n     H.Chart.prototype.pluginMethod = function(x, y) {\n        ....            \n     };\n})(Highcharts);\n```", "```js\n(function (H) {\n    Highcharts.Chart.prototype.callbacks.push(function (chart) {\n        // A DOM element, e.g. chart, container, document,\n        var element = chart.container;\n        // DOM event type: mousedown, touchstart, etc\n        var eventName = 'mousedown';\n\n        // We can call fireEvent to fire a new event \n        // defined in this plugin\n        fireEvent(element, newEvent, evtArgs, \n                  function(args) {\n                  ....\n        });\n\n        // Plugin event\n        function handler(e) {\n                // Plugin code\n                ...\n        }\n        // Bind specific event to the defined handler\n        Highcharts.addEvent(element, eventName, handler);\n    });\n})(Highcharts);\n```"]