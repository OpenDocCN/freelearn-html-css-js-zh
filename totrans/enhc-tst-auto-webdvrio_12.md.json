["```js\n> Env=dev\n```", "```js\nprod=www.candymapper.com\ndev=www.candymapperr2.com\n```", "```js\n   // Json file\n   {\n     \"compilerOptions\": {\n       \"target\": \"es6\",\n       \"outDir\": \"./dist\",\n       \"esModuleInterop\": true\n     },\n     \"include\": [\"src\", \"shared-data\", \"tests\"]\n   }\n```", "```js\n   import * as fs from 'fs';\n   const jsonData: string = fs.readFileSync('./shared-data/data.json', 'utf-8');\n   const parsedData: MyDataInterface = JSON.parse(jsonData);\n```", "```js\n   import { expect } from 'expect-webdriverio';\n   import { someFunction } from '../src/someModule';\n   import testData from '../shared-data/data.json';\n   describe('someFunction', () => {\n     it('should return the correct value', () => {\n       const result = someFunction(testData.input);\n       expect(result).toEqual(testData.expectedOutput);\n     });\n   });\n```", "```js\n// content of .env\n# LambdaTest Credentials\n LT_USERNAME=LT_USERNAME\n LT_ACCESS_KEY=LT_ACCESS_KEY\n LT_HOST_URL=LT_HOST_URL\n```", "```js\n> yarn add dotenv\n```", "```js\nrequire('dotenv').config()\n// usage in wdio config\nmodule.exports = {\n   // ….\n   user: process.env.LT_USERNAME,\n   key: process.env.LT_ACCESS_KEY,\n   // ….\n};\n```", "```js\n> yarn add @wdio/allure-reporter\n> yarn add allure-commandline\n```", "```js\n    reporters: [\"spec\", [\"allure\",\n    {\n       outputDir: \"./reports/allure-results\",\n       disableWebdriverStepsReporting: false,\n       disableWebdriverScreenshotsReporting: false,\n     }]],\n```", "```js\n    > yarn add @wdio/allure-reporter\n    ```", "```js\n> yarn wdio\n```", "```js\n    > allure generate -–clean && allure open\n    ```", "```js\n    > allure generate –clean; allure open\n    ```", "```js\nallure-report\nallure-results\nScreenshots\n```", "```js\nAllureReporter.addOwner(\"Paul Grossman\");\n```", "```js\nallureReporter.addFeature(\"Automation Hello World\");\n```", "```js\nAllureReporter.addDescription(\"Verify the user can login\");\n```", "```js\nallureReporter.addStory(\"TA-001\");\n```", "```js\nallureReporter.addAttachment('Assertion Failure: ', `Invalid Assertion Type = ${assertionType}`, 'text/plain');\n```", "```js\nAllureReporter.addDescription(\"TA-001 : Verify the user can login\");\n```", "```js\nlet SEND_TO_ALURE = false\n```", "```js\nconst { addFeature, addDescription } = require('@wdio/allure-reporter').default;\ndescribe('My feature', () => {\n    it('should do some things', () => {\n        browser.url('https://webdriver.io');\n        // Add a step to the report\n        addFeature('Navigate to WebdriverIO website');\n        browser.url('https://webdriver.io');\n        // Add a description to the report\n        addDescription('This is a description of what the test should         do');\n    });\n});\n```", "```js\nconst ANSI_GREEN = `\\x1b[38;2;140;225;50m` // PASS\n```", "```js\nconst ANSI_RED= `\\x1b[38;2;145;250;45m`    // FAIL\nconst ANSI_YELLOW = `\\x1b[38;2;145;226;45m`  // WARNING\n```", "```js\nconst ANSI_PURPLE= `\\x1b[38;2;250;235;80m`  // Locator\n```", "```js\nconst ANSI_WHITE= `\\x1b[97m`  // TEXT entered into a field\n```", "```js\nconst ANSI_RESET= `\\x1b[0m` //Reset\n```", "```js\nif (message.includes(\"Warning: \")) {\n    message = ANSI_YELLOW + message + ANSI_RESET\n    SEND_TO_ALLURE = true\nelse if (message.includes(\"Error: \") || message.includes(Promise\"){\n    message = ANSI_RED + message + ANSI_RESET\n    SEND_TO_ALLURE = true\n} else {\n   message = ANSI_GREEN + message + ANSI_RESET\n}\n```", "```js\nmessage  = message .replace(/`([^`]+)`/g, `${ANSI_WHITE}$1${ANSI_RESET}`);\n```", "```js\nmessage = message.replace(/\\/{1,2}[\\w\\-\\.\\:]*\\[[^\\]]*\\]/g, `${ANSI_PURPLE}$1${ANSI_RESET}`);\n```", "```js\nmessage = message.replace(/[#.|]?[a-zA-Z]+\\s?)+[{] /g, `${ANSI_PURPLE}$1${ANSI_RESET}`);\n```", "```js\nglobal.log(`FAIL: Invalid Assertion Type = ${assertionType}`);\n```", "```js\nif (SEND_TO_ALURE){\naddStep(str);\n}\n```", "```js\n    /**\n     * Function to be executed after a test (in Mocha/Jasmine only)\n     * @param {object}  test             test object\n     * @param {object}  context          scope object the test was executed with\n     * @param {Error}   result.error     error object in case the test fails, otherwise `undefined`\n     * @param {*}       result.result    return object of test function\n     * @param {number}  result.duration  duration of test\n     * @param {boolean} result.passed    true if test has passed, otherwise false\n     * @param {object}  result.retries   information about spec related retries, e.g. `{ attempts: 0, limit: 0 }`\n     */\n    afterTest: async function (\n        test,\n        context,\n        {error, result, duration, passed, retries}\n    ) {\n      if (!passed) {\n        await browser.takeScreenshot();\n      }\n    },\n```"]