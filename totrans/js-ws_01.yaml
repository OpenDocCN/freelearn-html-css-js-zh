- en: 1\. Getting to Know JavaScript
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1. 了解 JavaScript
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: By the end of this chapter, you will be able to locate JavaScript elements along
    with other code elements in a web browser; identify different versions of JavaScript
    supported by various web browsers; construct simple JavaScript commands; discuss
    the range of modern approaches to JavaScript; describe JavaScript's capabilities
    and create an alert box popup in a web browser.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够在一个网络浏览器中定位 JavaScript 元素以及其他代码元素；识别各种网络浏览器支持的 JavaScript 的不同版本；构建简单的
    JavaScript 命令；讨论现代 JavaScript 的各种方法；描述 JavaScript 的功能，并在网络浏览器中创建一个警告框弹出窗口。
- en: This chapter describes the foundational background of JavaScript so that we
    can move forward and achieve competency with this widely used programming language.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了 JavaScript 的基础知识，以便我们能够继续前进，并掌握这种广泛使用的编程语言。
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: JavaScript is a language with had interesting beginnings. In its early days,
    it was not taken very seriously—the only widely accepted, functionally correct
    use for the language was to perform client-side validation of form data. Many
    developers only copied and pasted simple code snippets that performed a single
    action on a website they were building. All these code snippets did were very
    simple actions such as reveal an alert to the user or provide a date countdown—simple
    logic.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种有着有趣起源的语言。在其早期，它并没有受到太多的重视——该语言被广泛接受、功能正确的唯一用途是执行客户端表单数据的验证。许多开发者只是复制粘贴简单的代码片段，在构建的网站上执行单一的操作。所有这些代码片段所做的只是非常简单的动作，例如向用户显示一个警告或提供日期倒计时——简单的逻辑。
- en: Today, JavaScript is a whole different beast—and one with the power to literally
    build out entire HTML documents, revise CSS styling on the fly, and securely transport
    and interpret data from various remote sources. Whereas in times past, HTML was
    the primary technology on the web, in the present era, JavaScript is king.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，JavaScript 已经完全不同了——它具有 literally 构建整个 HTML 文档、实时修改 CSS 样式以及从各种远程来源安全传输和解释数据的能力。在过去，HTML
    是网络上的主要技术，而在当今时代，JavaScript 才是王者。
- en: Any introduction to JavaScript requires a foundational background of the history
    and origins of the language in order to move forward and achieve competency. This
    chapter introduces us to JavaScript, from its history to modern implementations.
    It also provides us with additional information on various uses of the language
    so that we can provide a proper context for what comes next.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 任何对 JavaScript 的介绍都需要对语言的历史和起源有一个基础的了解，以便继续前进并掌握该语言。本章从历史到现代实现介绍了 JavaScript，还提供了关于语言各种用途的额外信息，以便我们为接下来要讨论的内容提供一个适当的背景。
- en: What Is JavaScript and How Is It Used?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 JavaScript 以及它是如何被使用的？
- en: JavaScript is a weakly-typed, multi-paradigm, event-driven, object-oriented
    programming language. It includes the ability to work with strings, dates, arrays,
    objects, and more. It is generally used on the client-side within web browser
    environments but can also be used in other environments such as servers and desktop
    applications. The runtime environment is very important for JavaScript—especially
    since it, by itself, does not include any networking, file, graphics, or storage
    capabilities on its own.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 是一种弱类型、多范式、事件驱动、面向对象的编程语言。它包括处理字符串、日期、数组、对象等的能力。它通常用于浏览器环境中的客户端，但也可以用于其他环境，如服务器和桌面应用程序。运行时环境对
    JavaScript 非常重要——特别是因为它本身并不包括任何网络、文件、图形或存储能力。
- en: JavaScript versus Other Languages
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript 与其他语言的比较
- en: If you are approaching JavaScript with experience in other languages such as
    Java or Python, things might seem a bit odd. While many languages (such as Java)
    must be compiled to run, JavaScript is run exactly as-is and does not require
    this additional step.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以 Java 或 Python 等其他语言的经验来接近 JavaScript，可能会觉得有点奇怪。虽然许多语言（如 Java）必须编译才能运行，但
    JavaScript 是直接运行的，不需要额外的步骤。
- en: 'Though the language is used within many environments and for many purposes,
    JavaScript is fundamentally one of the three languages that are native to the
    web. The other two languages are the HTML semantic markup language and the CSS
    styling and layout language. All three are very different from one another in
    purpose and function, but they are all meant to work together in a single environment.
    Let''s go over them:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管JavaScript在许多环境和许多用途中被使用，但它在本质上仍然是三种原生于网络的编程语言之一。其他两种语言是HTML语义标记语言和CSS样式布局语言。这三种语言在目的和功能上彼此非常不同，但它们都旨在在单一环境中协同工作。让我们来了解一下：
- en: '**Hypertext Markup Language** (**HTML**): This is the most fundamental of these
    three languages as it defines the elements that compose an HTML page and defines
    the flow of basic information that''s presented to the user.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超文本标记语言** (**HTML**)：这是这三种语言中最基础的，因为它定义了组成HTML页面的元素，并定义了向用户呈现的基本信息流。'
- en: '**Cascading Style Sheets** (**CSS**): This is used to define a set of stylistic
    layout rules, which adds visual flourish and advanced layout to defined HTML elements.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**层叠样式表** (**CSS**)：这是用来定义一组样式布局规则，它为定义的HTML元素添加视觉装饰和高级布局。'
- en: '**JavaScript**(**JS**): This works to enable interactivity in web pages and
    is what will be the focus of this book.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaScript**(**JS**)：这是用来使网页具有交互性的，也是本书的重点内容。'
- en: With all three of these languages, there is a basic understanding of the separation
    of concerns, that is, HTML provides the content and structure, CSS provides the
    styling and layout, and JavaScript provides the interactivity. While this understanding
    still holds sway, many frameworks do not exactly abide by this separation and
    mix these various languages together in some shape or form. Some developers are
    okay with this, while others are not. It's definitely an issue to be aware of
    when getting into this field, but it is ultimately up to you which stance you
    take, based on your particular needs. In my opinion, there is no hard and fast
    answer to a question like this.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这三种语言，有一个基本的理解是关注点的分离，即HTML提供内容结构，CSS提供样式和布局，JavaScript提供交互性。虽然这种理解仍然占主导地位，但许多框架并不完全遵守这种分离，并以某种形式将这些各种语言混合在一起。一些开发者对此表示可以接受，而另一些则不行。当进入这个领域时，这确实是一个需要注意的问题，但最终取决于你根据自己的特定需求选择哪种立场。在我看来，对于这样的问题没有绝对的答案。
- en: 'Exercise 1.01: Languages Discovery'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.01：语言发现
- en: Let's go ahead and examine a website to see whether we can spot how HTML, JavaScript,
    and CSS are all represented. You can choose any website you like for this exercise.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续检查一个网站，看看我们是否可以发现HTML、JavaScript和CSS是如何表示的。你可以选择任何你喜欢的网站来做这个练习。
- en: Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All the examples and screenshots in this book will use Google Chrome as the
    web browser of choice. You can use the browser you prefer, though some of the
    steps that are shown may differ between various browsers.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有示例和截图都将使用Google Chrome作为首选的网页浏览器。你可以使用你喜欢的浏览器，尽管一些步骤在不同浏览器之间可能会有所不同。
- en: 'Let''s get started:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: Within your web browser, enter a URL in the address bar and press *Enter*/*Return*
    to load the chosen resource. For this example, let's use [https://angular.io/](https://angular.io/)—the
    Angular website. Of course, you can choose any website that you'd like to explore.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网页浏览器中，在地址栏输入一个URL，然后按*Enter*/*Return*键来加载所选资源。例如，让我们使用[https://angular.io/](https://angular.io/)——Angular网站。当然，你可以选择任何你想要探索的网站。
- en: Now, right-click anywhere within the browser viewport to summon a contextual
    menu. Select the option that allows you to view the source code of the page. In
    Chrome, this is labeled `View Page Source`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在浏览器视图中任何地方右键单击以召唤上下文菜单。选择允许你查看页面源代码的选项。在Chrome中，这个选项被标记为“查看页面源代码”。
- en: 'The source code for the page will then appear in a new tab. You can examine
    how the page is structured and pick out the various HTML, CSS, and JavaScript
    elements from the bare source code:![Figure 1.1: Much can be learned from examining
    the bare source code'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 页面的源代码将随后出现在一个新标签页中。你可以检查页面的结构，并从原始源代码中挑选出各种HTML、CSS和JavaScript元素：![图1.1：通过检查原始源代码可以学到很多东西
- en: '](img/C14377_01_01.jpg)'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/C14377_01_01.jpg](img/C14377_01_01.jpg)'
- en: 'Figure 1.1: Much can be learned from examining the bare source code'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.1：通过检查原始源代码可以学到很多东西
- en: With the source code exposed, scroll down and identify the various HTML elements
    within the page structure. You'll likely find a `<head>`tag and a `<body>`tag
    (which are mandatory), along with various `<p>` and `<h1>` to `<h6>` tags within
    the page.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源代码暴露后，向下滚动并识别页面结构中的各种HTML元素。你可能会找到一个`<head>`标签和一个`<body>`标签（这是必需的），以及页面中的各种`<p>`和`<h1>`到`<h6>`标签。
- en: 'Here is an example of some basic HTML content (not actually from the Angular
    website):'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一些基本HTML内容的示例（实际上并非来自Angular网站）：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, try and locate either embedded CSS rules within a `<style>` element, or
    even a linked CSS file. Here is an example of some embedded CSS:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，尝试定位嵌入到`<style>`元素中的CSS规则，或者甚至是一个链接的CSS文件。这里是一些嵌入的CSS示例：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And here is a linked CSS file:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里还有一个链接的CSS文件：
- en: '[PRE2]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we''ll locate some JavaScript. Much like CSS, JavaScript can be found
    embedded within a page using the `<script>` tag, or entire JavaScript files can
    be linked though a similar mechanism. Here, we are locating some embedded JavaScript:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将定位一些JavaScript。与CSS类似，JavaScript可以通过`<script>`标签嵌入到页面中，或者通过类似机制链接整个JavaScript文件。在这里，我们正在定位一些嵌入的JavaScript：
- en: '[PRE3]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is a linked JavaScript file:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是一个链接的JavaScript文件：
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Choosing to view the source code of public web pages like this was once a common
    way to learn about web technologies.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择查看像这样的公共网页的源代码曾经是了解网络技术的一种常见方式。
- en: Note
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: In various websites and examples, you may see a `type` attribute included with
    the `<script>` tag specifying `type="text/javascript"`. In HTML5, this is not
    necessary and is the default attribute. If you must target previous versions of
    HTML, you will need to specify it.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在各种网站和示例中，你可能会看到在`<script>`标签中包含一个`type`属性，指定`type="text/javascript"`。在HTML5中，这不再是必需的，而是默认属性。如果你必须针对HTML的早期版本，你需要指定它。
- en: So far, we have introduced the JavaScript programming language and examined
    its primary runtime environment (the web browser). We also had a brief look at
    JavaScript's relationship to HTML and CSS as one of the three native web technologies.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了JavaScript编程语言，并检查了它的主要运行环境（网络浏览器）。我们还简要地看了看JavaScript与HTML和CSS的关系，作为三种原生网络技术之一。
- en: In the next section, we'll take a look at the history of JavaScript and how
    it has evolved over the years.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨JavaScript的历史以及它是如何随着时间演变的。
- en: A Brief History of the JavaScript Language
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript语言简史
- en: We've seen how JavaScript is often integrated within a web environment, but
    how did this language come about? We need to go back to the early 1990s and understand
    what the web looked like in those days before we begin talking about JavaScript
    itself.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到JavaScript通常是如何在Web环境中集成的，但这个语言是如何产生的呢？我们需要回到20世纪90年代初，了解在那个时代网络是什么样子，然后我们才开始谈论JavaScript本身。
- en: The story really begins with Netscape and the web browser they created named
    **Netscape Navigator**. This new browser was based on the successful Mosaic web
    browser with the intent to commercialize it. During that time, and depending on
    who you speak to, Netscape Navigator was the web browser of choice to develop
    for. Around the middle of the decade, Microsoft released its **Internet Explorer**
    browser, which ignited the first browser wars.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个故事实际上始于Netscape和他们创建的名为**Netscape Navigator**的网络浏览器。这个新浏览器基于成功的Mosaic网络浏览器，目的是将其商业化。在那个时期，根据你与谁交谈，Netscape
    Navigator是开发人员选择的网络浏览器。在十年中期的某个时候，微软发布了其**Internet Explorer**浏览器，这引发了第一次浏览器大战。
- en: Netscape Mocha and LiveScript
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Netscape Mocha和LiveScript
- en: Around this same time, Netscape hired Brendan Eich to develop a programming
    language for Netscape's web browser. Eich took inspiration from Scheme (Lisp),
    Self, and most importantly, Java. The work on this language, then called **Mocha**,
    was initially (and infamously) completed in the time span of only 10 days. With
    the initial version completed, Netscape changed their name and began calling it
    **LiveScript**.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在同一时间，Netscape聘请Brendan Eich为Netscape的网络浏览器开发一种编程语言。Eich从Scheme（Lisp）、Self以及最重要的是Java中获得了灵感。这项语言的工作，当时称为**Mocha**，最初（并且臭名昭著地）在仅10天的时间内完成。随着初始版本的完成，Netscape更改了他们的名称，并开始将其称为**LiveScript**。
- en: It turned out that LiveScript, as a language name, was just as temporary as
    Mocha until Netscape partnered with a certain other large company to advance the
    idea of a two-pronged approach to web development.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，LiveScript作为一个语言名称，就像Mocha一样，只是一个临时的名称，直到Netscape与另一家大型公司合作，推进了网络开发双管齐下的理念。
- en: Sun Microsystems and Java
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sun Microsystems和Java
- en: The popular Java language came into play with a partnership between Netscape
    and Sun Microsystems. Sun was looking at the web as the next step for Java, and
    Netscape was looking for allies in the coming war against Microsoft, so an allegiance
    was formed. The language being developed by Eich was from then on named **JavaScript**
    as it was meant to work alongside Java in the web browser as a more approachable
    way to add interactivity to that environment.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的Java语言通过与Netscape和Sun Microsystems的合作而发挥作用。Sun将网络视为Java的下一步，而Netscape正在寻找在即将到来的与Microsoft的战争中寻求盟友，因此形成了联盟。Eich正在开发的语言从那时起被命名为**JavaScript**，因为它旨在在网页浏览器中与Java协同工作，作为一种更易于添加交互性的方法。
- en: This would mean that the Java language would be what *serious* developers used
    to write interactive content for the web, while JavaScript would provide similar
    interactive capabilities but was geared more toward *hobbyists* and those who
    wanted to tinker.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着Java语言将是*严肃*的开发者用来编写网页交互内容的选择，而JavaScript将提供类似的交互功能，但更多地面向*业余爱好者*和那些想要摆弄的人。
- en: Note
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: What happened, of course, was quite different. JavaScript was integrated into
    the browser well before Java was, and, once Java came on board, it was only through
    the use of applets. With Java applets falling out of popularity quite some time
    ago, we are left with JavaScript alone today and not the two languages that were
    initially envisioned, though the *JavaScript* name has stuck.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，实际情况与这截然不同。JavaScript在Java之前就被很好地整合到了浏览器中，而一旦Java加入，它只能通过applet来实现。随着Java
    applet在很久以前就失去了流行，我们现在只剩下JavaScript，而不是最初设想的两种语言，尽管*JavaScript*这个名字已经固定下来。
- en: Ecma International and ECMAScript
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ecma International和ECMAScript
- en: Ecma adopted and standardized the specification and renamed the language itself
    to ECMAScript, with JavaScript becoming the commercial implementation of that
    specification. Ecma International remains the organization that develops and publishes
    the ECMAScript specification and all the new versions of it, which eventually
    influence the JavaScript language.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Ecma组织采用了并标准化了该规范，并将该语言本身更名为ECMAScript，JavaScript成为了该规范的商业实现。Ecma International仍然是开发和发布ECMAScript规范及其所有新版本的机构，这些规范最终影响了JavaScript语言。
- en: In this section, we read about how JavaScript came to be and performed a quick
    exercise that showed how it can be examined live within the web browser itself.
    At this point, you should have a pretty good idea of exactly what JavaScript is,
    where it came from, and how it operates.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了JavaScript是如何产生的，并进行了快速练习，展示了如何在网页浏览器中实时检查它。此时，你应该对JavaScript的确切含义、来源以及它是如何工作的有一个相当好的了解。
- en: In the next section, we'll look at some more history behind this language by
    examining the version history of JavaScript beyond ECMA standardization.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过查看JavaScript在ECMA标准化之后的版本历史，来了解这个语言背后的更多历史。
- en: Versions of ECMAScript (and JavaScript)
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ECMAScript（和JavaScript）的版本
- en: With JavaScript now granted Ecma International standardization and the ECMAScript
    specification, it also needed to follow standard versioning practices. For the
    first few iterations of the language, this didn't mean much to developers. However,
    as you will see, as needs grew and the language evolved, major changes would be
    coming to ECMAScript. They would, in some cases, flow on to JavaScript, and in
    other cases die altogether.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在JavaScript获得了Ecma International的标准化和ECMAScript规范，它也需要遵循标准的版本化实践。对于语言的前几个迭代，这对开发者来说意义不大。然而，正如你将看到的，随着需求增长和语言的发展，ECMAScript将会有重大变化。在某些情况下，这些变化会影响到JavaScript，在其他情况下则完全消失。
- en: ECMAScript 1 (1997)
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMAScript 1 (1997)
- en: The first version to undergo standardization codified its features more or less
    from LiveScript. This version is sometimes referred to as **ECMAScript First Edition**.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个进行标准化的版本基本上是从LiveScript中编码其特性的。这个版本有时被称为**ECMAScript第一版**。
- en: It generally corresponds to JavaScript version 1.3.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 它通常对应于JavaScript版本1.3。
- en: ECMAScript 2 (1998)
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMAScript 2 (1998)
- en: This release saw few changes aside from edits to better conform with established
    standards. It should probably have been labeled version 1.1.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本除了对现有标准的编辑以更好地符合之外，几乎没有变化。它可能应该被标记为版本1.1。
- en: It also generally corresponds to JavaScript version 1.3.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 它也通常对应于JavaScript版本1.3。
- en: ECMAScript 3 (1999)
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMAScript 3 (1999)
- en: This version of ECMAScript added some fundamental, yet expected (necessary),
    language enhancements. One of the most important of these is the use of `try…catch`
    conditional structure was also introduced, providing an alternative to the more
    basic `if…else` statement, allowing more sophisticated error handling. The `in`
    operator was also introduced. This generally corresponds to JavaScript version
    1.5.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的 ECMAScript 添加了一些基本但预期的（必要的）语言增强。其中最重要的之一是引入了 `try…catch` 条件结构，它为更基本的 `if…else`
    语句提供了一个替代方案，允许更复杂的错误处理。还引入了 `in` 操作符。这通常对应于 JavaScript 版本 1.5。
- en: ECMAScript 4 (unreleased)
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMAScript 4（未发布）
- en: This release included real classes, modules, generators, static typing, and
    many language features that were added to the specification many years later.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本包括了真正的类、模块、生成器、静态类型以及许多后来添加到规范中的语言特性。
- en: Note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Eventually, due to committee and corporate infighting, ECMAScript 4 was completely
    abandoned. Instead, it was replaced with incremental improvements to ECMAScript
    3,also known as ECMAScript 3.1.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，由于委员会和公司内部的斗争，ECMAScript 4 完全被废弃。取而代之的是，它被 ECMAScript 3 的增量改进所取代，也称为 ECMAScript
    3.1。
- en: 'At this time, Adobe decided to base a complete revision of the ActionScript
    language (ActionScript 3.0 on this new ECMAScript version. It was an attempt to
    closely align the language behind the Flash Player and the browsers that commonly
    hosted it. Here is an example of a basic ActionScript 3.0 class—note that it''s
    quite different from previous versions of ECMAScript:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个时候，Adobe 决定基于新的 ECMAScript 版本（ActionScript 3.0）对 ActionScript 语言进行一次全面的修订。这是一个尝试将
    Flash Player 背后的语言与通常托管它的浏览器紧密对齐的尝试。以下是一个基本的 ActionScript 3.0 类的示例——请注意，它与之前的
    ECMAScript 版本相当不同：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ECMAScript 5 (2009)
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMAScript 5 (2009)
- en: This version is, in actuality, ECMAScript 3.1, with version 4 completely abandoned.
    This was more of a politically motived release than anything of substance, though
    certain bug fixes from ECMAScript 4 were included, along with strict mode, JSON
    support, and a number of additional methods for working with arrays.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个版本是 ECMAScript 3.1，版本 4 完全被废弃。这与其说是实质性的发布，不如说是更多政治动机的发布，尽管它包括了来自 ECMAScript
    4 的某些错误修复，以及严格模式、JSON 支持，以及用于处理数组的一些额外方法。
- en: This generally corresponds to JavaScript version 1.8.5 and is the version of
    JavaScript that conforms to most browsers today.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常对应于 JavaScript 版本 1.8.5，并且是今天大多数浏览器遵循的 JavaScript 版本。
- en: ECMAScript 6 (2015)
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMAScript 6（2015）
- en: 'Features including arrow functions, maps, typed-arrays, promises, and many
    more were introduced with this version of ECMAScript, and many of them form the
    basis for modern development with JavaScript today. This specification also allows
    for the writing of classes and modules—finally. The following table explains the
    browser support for ES6:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 包括箭头函数、映射、类型化数组、承诺等在内的许多功能都是随着这个版本的 ECMAScript 一起引入的，其中许多是现代 JavaScript 开发的基石。这个规范还允许编写类和模块——终于。以下表格解释了
    ES6 的浏览器支持情况：
- en: '![Figure 1.2: Browser support table for ECMAScript 2015 via w3schools.com'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2：通过 w3schools.com 的 ECMAScript 2015 浏览器支持表](img/C14377_01_02.jpg)'
- en: '](img/C14377_01_02.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2：通过 w3schools.com 的 ECMAScript 2015 浏览器支持表](img/C14377_01_02.jpg)'
- en: 'Figure 1.2: Browser support table for ECMAScript 2015 via w3schools.com'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：通过 w3schools.com 的 ECMAScript 2015 浏览器支持表
- en: This version of JavaScript is generally SVG supported by modern web browsers
    and is a major functional release.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的 JavaScript 通常由现代网络浏览器支持，并且是一个主要的功能性发布。
- en: ECMAScript 7 (2016), ECMAScript 8 (2017), and ECMAScript 9 (2018)
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMAScript 7（2016），ECMAScript 8（2017）和 ECMAScript 9（2018）
- en: 'All versions post2015 have been incremental, with yearly modifications to what
    was established in ECMAScript 6\. This has happened for a number of reasons:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 2015 年之后的所有版本都是增量式的，每年对 ECMAScript 6 中确立的内容进行修改。这发生的原因有很多：
- en: It establishes that this is a stable, mature language without the need for major
    disruption.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它确立了这个语言是稳定、成熟的，无需进行重大破坏。
- en: It allows developers and browser vendors to easily keep up with the changes
    and enhancements that are adopted.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许开发者和浏览器供应商轻松跟上所采用的变化和增强。
- en: 'It provides a stable release cycle for new versions of the specification:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为新规范版本提供了一个稳定的发布周期：
- en: '![Figure 1.3: Browser support table for ECMAScript 2016 via w3schools.com'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3：通过 w3schools.com 的 ECMAScript 2016 浏览器支持表](img/C14377_01_03.jpg)'
- en: '](img/C14377_01_03.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3：通过 w3schools.com 的 ECMAScript 2016 浏览器支持表](img/C14377_01_03.jpg)'
- en: 'Figure 1.3: Browser support table for ECMAScript 2016 via w3schools.com'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：通过 w3schools.com 的 ECMAScript 2016 浏览器支持表
- en: When writing in ECMAScript 2015 (or "ES6") and later, you will likely need to
    transpile your JavaScript down to a previous version so that it can be understood
    by the JavaScript engines within the current web browsers. While this is an additional
    step, the tooling to process tasks such as this has become more approachable in
    recent years.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 ECMAScript 2015（或“ES6”）及更高版本编写时，您可能需要将 JavaScript 转译为以前的版本，以便它可以在当前网络浏览器的
    JavaScript 引擎中被理解。虽然这是一个额外的步骤，但近年来处理此类任务的工具已经变得更加易于使用。
- en: 'Exercise 1.02: Can I Use This Feature?'
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.02：我能使用这个功能吗？
- en: 'There is no easy way to tell which versions of JavaScript are supported by
    which browsers—a more reliable approach is to test whether features you wish to
    use are supported by the engine currently running the code. Let''s take a look
    at the `Can I Use` table:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 没有一种简单的方法可以判断哪些版本的 JavaScript 被哪些浏览器支持——一个更可靠的方法是测试您希望使用的功能是否被当前运行代码的引擎支持。让我们看看“Can
    I Use”表格：
- en: '![Figure 1.4: “Can I Use” table for ECMAScript 2015 support across browsers'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.4: “Can I Use” 表格显示 ECMAScript 2015 在不同浏览器中的支持情况'
- en: '](img/C14377_01_04.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_01_04.jpg)'
- en: 'Figure 1.4: "Can I Use" table for ECMAScript 2015 support across browsers'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.4: "Can I Use" 表格显示 ECMAScript 2015 在不同浏览器中的支持情况'
- en: To help us do this, there are a number of resources and services on the web
    that keep track of JavaScript features and the level of support within each browser.
    Probably, the most popular of these is the `SVG`, HTML5, and more.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助我们做到这一点，互联网上有许多资源和服务跟踪 JavaScript 功能以及每个浏览器中的支持水平。其中最流行的大概是 `SVG`、HTML5
    等。
- en: 'Let''s go ahead and check out the support for `Promise.prototype.finally`,
    which was first implemented in ECMAScript 2018:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续检查 `Promise.prototype.finally` 的支持情况，该功能首次在 ECMAScript 2018 中实现：
- en: 'Open a web browser and instruct it to load [https://caniuse.com/](https://caniuse.com/).
    Notice that you have immediate access to the latest and most searched features
    directly from the home page, without even searching:![Figure 1.5: The Can I Use
    website'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '打开一个网络浏览器，并指示它加载 [https://caniuse.com/](https://caniuse.com/)。注意，您可以直接从主页访问最新的和最常搜索的功能，而无需搜索：![图
    1.5: Can I Use 网站'
- en: '](img/C14377_01_05.jpg)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14377_01_05.jpg)'
- en: 'Figure 1.5: The Can I Use website'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 1.5: Can I Use 网站'
- en: 'We are looking for something specific, though. Locate the search area toward
    the top, which reads `finally`, since we want to see which browsers support `Promise.prototype.finally`.
    The results for our search will be displayed automatically within a colored grid:![Figure
    1.6: The grid of browser support for Promise.prototype.finally'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '我们正在寻找特定的事物。在顶部找到搜索区域，它写着 `finally`，因为我们想查看哪些浏览器支持 `Promise.prototype.finally`。我们的搜索结果将自动显示在一个彩色网格中：![图
    1.6: Promise.prototype.finally 的浏览器支持网格'
- en: '](img/C14377_01_06.jpg)'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14377_01_06.jpg)'
- en: 'Figure 1.6: The grid of browser support for Promise.prototype.finally'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图 1.6: Promise.prototype.finally 的浏览器支持网格'
- en: Note that certain blocks are red, while others are green. A red color indicates
    that the feature is unsupported, and green indicates that the feature is supported.
    You may also see a yellow color, indicating partial support.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，某些块是红色的，而其他块是绿色的。红色表示该功能不受支持，绿色表示该功能受支持。您还可能看到黄色，表示部分支持。
- en: 'If you want to see the specifics pertaining to a certain browser version, hover
    your cursor over the indicated version or version range and a small overlay will
    appear with additional information such as the date of version release and even
    usage statistics for that version:![Figure 1.7: Specific support information for
    Chrome 73'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '如果您想查看与特定浏览器版本相关的具体信息，将光标悬停在指示的版本或版本范围内，将出现一个小覆盖层，其中包含额外的信息，例如版本发布日期甚至该版本的统计数据：![图
    1.7: Chrome 73 的具体支持信息'
- en: '](img/C14377_01_07.jpg)'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14377_01_07.jpg)'
- en: 'Figure 1.7: Specific support information for Chrome 73'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '图 1.7: Chrome 73 的具体支持信息'
- en: Go ahead and search for additional options within the interface—there is a lot
    to explore.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在界面中继续搜索其他选项——有很多可以探索。
- en: In this section, we reviewed the different versions of ECMAScript and looked
    at how the features of JavaScript, which originated from those particular specifications,
    are supported within web browsers today.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们回顾了 ECMAScript 的不同版本，并探讨了 JavaScript 的功能，这些功能源于那些特定的规范，以及这些功能如何在今天的网络浏览器中得到支持。
- en: In the next section, we'll look at how to access the web browser developer tools
    in order to get a better view of what JavaScript is doing—and even write JavaScript
    live in the browser.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何访问网页浏览器开发者工具，以便更好地了解 JavaScript 的执行情况——甚至可以在浏览器中实时编写 JavaScript。
- en: Accessing Web Browser Developer Tools
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问网页浏览器开发者工具
- en: Our understanding of JavaScript's relationship with the web browser is becoming
    clearer with each topic that we discuss. In the previous exercise, we saw how
    to dig in and discover the different levels of JavaScript feature support across
    different web browsers. That leads us directly to have a look at the various browsers
    themselves, as well as the tools that are available within each for inspecting
    and even writing JavaScript code.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们讨论的每个主题，我们对 JavaScript 与网页浏览器之间关系的理解变得越来越清晰。在前一个练习中，我们看到了如何深入挖掘并发现不同网页浏览器对
    JavaScript 功能支持的各个级别。这直接引导我们查看各种浏览器本身，以及每个浏览器内用于检查甚至编写 JavaScript 代码的工具。
- en: Browsers are built to abide by standards such as HTML and CSS. However, there
    are many differences in both the interpretation of these standards and in the
    tooling available with each major web browser. When writing JavaScript for the
    web browser, it is important to know how to access and use the browser developer
    tools—*especially* the JavaScript console tab.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器是按照 HTML 和 CSS 等标准构建的。然而，在解释这些标准以及每个主要网页浏览器提供的工具方面存在许多差异。当为网页浏览器编写 JavaScript
    时，了解如何访问和使用浏览器开发者工具——*尤其是* JavaScript 控制台选项卡——是很重要的。
- en: Google Chrome
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google Chrome
- en: Chrome is the most popular web browser at the time of this writing—this fact
    holds true for both general users and developers. Chrome was initially released
    in September 2008 and is now available on multiple desktops and mobile operating
    systems.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Chrome 是最受欢迎的网页浏览器——这一事实对普通用户和开发者都适用。Chrome 首次于 2008 年 9 月发布，现在可在多个桌面和移动操作系统上使用。
- en: Note
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can download Google Chrome from [https://www.google.com/chrome/browser/](https://www.google.com/chrome/browser/).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 [https://www.google.com/chrome/browser/](https://www.google.com/chrome/browser/)
    下载 Google Chrome。
- en: 'To access developer tools and the JavaScript console within Chrome, you can
    right-click anywhere in the viewport and choose `Inspect` from the menu that appears.
    Alternatively, press `F12`. Once the developer tools are open, click on the `Console`
    tab to inspect and write JavaScript code within Chrome itself:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Chrome 中访问开发者工具和 JavaScript 控制台，您可以在视口中任何位置右键单击，然后从出现的菜单中选择 `Inspect`。或者，按
    `F12`。一旦开发者工具打开，点击 `Console` 选项卡，就可以在 Chrome 本身内检查和编写 JavaScript 代码：
- en: '![Figure 1.8: Google Chrome Developer Tools'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.8：Google Chrome 开发者工具'
- en: '](img/C14377_01_08.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_01_08.jpg)'
- en: 'Figure 1.8: Google Chrome Developer Tools'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8：Google Chrome 开发者工具
- en: Using the Chrome developer tools, you can filter the sort of things that show
    errors, warnings, or even just information such as that returned by `console.log()`.
    You can even write JavaScript within the browser using the `Console` tab view,
    as you'll see shortly. There is also a `Sources` tab, which allows for modifying
    and debugging of code.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Chrome 开发者工具，您可以过滤显示错误、警告或甚至只是像 `console.log()` 返回的信息这类内容。您甚至可以在浏览器中使用 `Console`
    选项卡视图编写 JavaScript，正如您很快就会看到的。还有一个 `Sources` 选项卡，允许修改和调试代码。
- en: Microsoft Edge
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Microsoft Edge
- en: Having once reigned as the most used web browser in the world, Internet Explorer
    reached its final version with IE11\. This doesn't mean that Microsoft is finished
    with web browsers though, as, with the release of Windows 10, the newly created
    Edge browser was made available to users as a replacement in July 2015.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经作为世界上使用最广泛的网页浏览器而统治一时的 Internet Explorer，其最终版本为 IE11。但这并不意味着微软已经放弃网页浏览器，因为随着
    Windows 10 的发布，新创建的 Edge 浏览器于 2015 年 7 月作为替代品提供给用户。
- en: Note
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Microsoft Edge comes installed with Windows 10 ([https://www.microsoft.com/windows](https://www.microsoft.com/windows)).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Edge 随 Windows 10 系统一起安装（[https://www.microsoft.com/windows](https://www.microsoft.com/windows)）。
- en: 'To access the developer tools and the JavaScript console within Edge, you can
    right-click anywhere in the viewport and choose `Inspect Element` from the menu
    that appears. Alternatively, press `F12`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Edge 中访问开发者工具和 JavaScript 控制台，您可以在视口中任何位置右键单击，然后从出现的菜单中选择 `Inspect Element`。或者，按
    `F12`：
- en: '![Figure 1.9: Microsoft Edge Developer Tools'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.9：Microsoft Edge 开发者工具'
- en: '](img/C14377_01_09.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_01_09.jpg)'
- en: 'Figure 1.9: Microsoft Edge Developer Tools'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9：Microsoft Edge 开发者工具
- en: The developer tools in Microsoft Edge are pretty ugly, aren't they? Much like
    other browsers, Edge's developer tools include a `Console` and a JavaScript `Debugger`
    view. Similar to Chrome, you can also filter the types of output present in the
    `Console` itself as your code executes.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Edge的开发者工具相当丑陋，不是吗？与其他浏览器一样，Edge的开发者工具包括一个`控制台`和一个JavaScript`调试器`视图。类似于Chrome，你还可以在代码执行时过滤`控制台`中出现的输出类型。
- en: Note
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As of this writing, Microsoft Edge is being rewritten based on a Chromium base.
    This will mean that Chrome, Opera, Safari, and Edge will eventually make use of
    the exact same browser technologies under the hood.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Microsoft Edge正在基于Chromium基础进行重写。这意味着Chrome、Opera、Safari和Edge最终将使用底下的完全相同的浏览器技术。
- en: Apple Safari
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Apple Safari
- en: On Apple macOS and iOS operating systems, Safari is the default web browser
    and is tightly integrated into the user experience on those machines. Similar
    to Windows and Internet Explorer/Edge, many users will never deviate from the
    browser that is preinstalled on their machine.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在Apple macOS和iOS操作系统上，Safari是默认的网页浏览器，并且与这些机器的用户体验紧密集成。类似于Windows和Internet Explorer/Edge，许多用户永远不会偏离他们机器上预装的浏览器。
- en: Safari was once even available on Windows, but development ceased with the final
    Windows version in 2012.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Safari曾经甚至可在Windows上使用，但随着2012年Windows最终版本的发布，开发已停止。
- en: Note
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Apple Safari comes installed with Apple macOS ([https://www.apple.com/macos/](https://www.apple.com/macos/)).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Apple Safari随Apple macOS([https://www.apple.com/macos/](https://www.apple.com/macos/))安装。
- en: 'To access the developer tools and the JavaScript console within Safari, you
    must first tweak some of the preferences within the browser itself. Let''s get
    started:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问Safari中的开发者工具和JavaScript控制台，你必须首先调整浏览器本身的一些偏好设置。让我们开始吧：
- en: First, access the preferences dialog by choosing `Safari` | `Preferences` through
    the `Application` menu.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过选择`应用程序`菜单中的`Safari` | `偏好设置`来访问偏好设置对话框。
- en: Within the `Preferences` dialog, click on the tab called `Advanced`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`偏好设置`对话框中，点击名为`高级`的标签页。
- en: 'Once the contents of the `Advanced` tab has appeared, look to the bottom and
    enable the `Show Develop menu in menu bar option:`![Figure 1.10: Apple Safari
    Advanced Preferences'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦`高级`标签页的内容出现，查看底部并启用`在菜单栏中显示开发菜单`选项：![图1.10：Apple Safari高级偏好设置
- en: '](img/C14377_01_10.jpg)'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C14377_01_10.jpg)'
- en: 'Figure 1.10: Apple Safari Advanced Preferences'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1.10：Apple Safari高级偏好设置
- en: With that option enabled, close the `Preferences` dialog.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用该选项后，关闭`偏好设置`对话框。
- en: Now, choose the newly enabled `Develop` option from the `Application` menu and select
    `Show JavaScript Console` to display the developer tools. You can also right-click
    and choose `Inspect Element` as well.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从`应用程序`菜单中选择新启用的`开发`选项，然后选择`显示JavaScript控制台`以显示开发者工具。你还可以右键单击并选择`检查元素`。
- en: 'The good news is that once the `Develop` menu is enabled, it will remain so
    between sessions. You''ll only need to open the developer tools to access these
    features:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，一旦启用`开发`菜单，它将在会话之间保持启用状态。你只需打开开发者工具即可访问这些功能：
- en: '![Figure 1.11: Apple Safari Developer Tools'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.11：Apple Safari开发者工具'
- en: '](img/C14377_01_11.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_01_11.jpg)'
- en: 'Figure 1.11: Apple Safari Developer Tools'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11：Apple Safari开发者工具
- en: Today, Safari does seem to lag behind most other browsers in adopting certain
    features, but you will find Apple's version of the `Console` and `Debugger` views
    in the developer tools all the same.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，Safari似乎在采用某些功能方面似乎落后于大多数其他浏览器，但你会发现Apple在开发者工具中的`控制台`和`调试器`视图版本是一样的。
- en: An Introduction to Variables
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量的介绍
- en: 'In almost any language, JavaScript included, the first step to programming
    is to understand the common variable. A variable can be thought of as an identifier
    for a certain piece of data. To declare a variable in JavaScript, we use the reserved
    word `var`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在几乎任何语言中，包括JavaScript，编程的第一步是理解常见的变量。变量可以被视为某个数据片段的标识符。要在JavaScript中声明变量，我们使用保留字`var`：
- en: '[PRE6]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding example, we declare a variable with the `name` identifier.
    Our variable does not have any data associated with it yet. For that, we must
    use an assignment operator:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们使用`name`标识符声明了一个变量。我们的变量还没有任何与之关联的数据。为此，我们必须使用赋值运算符：
- en: '[PRE7]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since the variable name has already been declared, we no longer need to use
    `var` to declare it in this second step. We simply address the variable by its
    `name` and then follow that with an assignment operator of `=` and then a value,
    in this case, `"Joseph"`. Of course, you will likely want to use your own name
    here.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 由于变量名已经声明，我们在此第二步中不再需要使用`var`来声明它。我们只需通过其`name`来引用变量，然后跟一个赋值运算符`=`，然后是一个值，在这个例子中是`"Joseph"`。当然，你在这里可能想使用你自己的名字。
- en: 'We terminate each line of code with a `;` for convention and readability. Note
    that we can also perform the variable declaration and assignment in a single line
    of code:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为了约定和可读性，在每个代码行末尾使用`;`。请注意，我们也可以在单行代码中执行变量声明和赋值：
- en: '[PRE8]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You now know the foundations of how to declare and assign data values to a variable.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经了解了如何声明和分配数据值给变量的基础知识。
- en: 'Exercise 1.03: Programming First Steps'
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.03：编程第一步
- en: Let's go ahead and step through a few bits of JavaScript code within the developer
    tools console before moving on. If you have your browser developer tools still
    open from the preceding section. If not, refer to the *Accessing Web Browser Developer
    Tools* section of this chapter to access the console.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在开发者工具控制台中逐步执行一些JavaScript代码，然后再继续。如果你在上一个部分中仍然打开了浏览器开发者工具。如果没有，请参阅本章的“访问网络浏览器开发者工具”部分以访问控制台。
- en: 'With the console now available within the web browser, we''ll step through
    a few basic JavaScript declarations:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 由于控制台现在可在网络浏览器中使用，我们将逐步执行一些基本的JavaScript声明：
- en: 'Within the console, type in the following code and hit *Enter*:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台中，输入以下代码并按*Enter*键：
- en: '[PRE9]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This declares a variable with the identifying name of `myCity`. This will allow
    you to invoke this variable later on.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这声明了一个具有标识性名称`myCity`的变量。这将允许你在以后调用此变量。
- en: 'Since this variable is now defined in memory, we can address it whenever we
    like. Type the following within the console and hit *Enter*:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这个变量现在已在内存中定义，我们可以随时访问它。在控制台中输入以下内容并按*Enter*键：
- en: '[PRE10]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: An alert will pop up over the browser viewport stating, `"Welcome to London!"`.
    To achieve the full greeting, we will also add additional string information to
    the variable using concatenation with the `+` operator. This allows us to mix
    variable values and plain text data together in our output.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个带有“Welcome to London!”信息的提示框将出现在浏览器视口中。为了实现完整的问候，我们还将使用`+`运算符将额外的字符串信息添加到变量中。这允许我们在输出中混合变量值和纯文本数据。
- en: Now, you know how to write values to a named variable and how to read those
    values out by using the variable name.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你知道了如何将值写入命名变量，以及如何通过变量名读取这些值。
- en: 'Activity 1.01: Creating an Alert Box Popup in the Web Browser'
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一.01：在网页浏览器中创建一个弹窗提示框
- en: In this activity, you will call JavaScript and witness its tight relationship
    to the web browser. You will learn how to execute an alert within the web browser
    environment using the browser developer tools.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本活动中，你将调用JavaScript并见证其与网络浏览器的紧密关系。你将学习如何在浏览器环境中使用浏览器开发者工具执行一个提示框。
- en: Note
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We'll be using Google Chrome for the following instructions and output images.
    Other browsers will differ slightly.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下说明和输出图像中，我们将使用Google Chrome。其他浏览器可能会有所不同。
- en: '**Steps**:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤**：'
- en: Press *F12* to open the developer tools. Alternatively, a right-click may expose
    a menu from which you can select `Inspect`.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*F12*键打开开发者工具。或者，右键单击可能显示一个菜单，你可以从中选择“检查”。
- en: Activate the `Console` tab. The developer tools may default to this view. If
    not, there is likely a `Console` tab you can click on to activate it.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活“控制台”标签页。开发者工具可能默认显示此视图。如果不显示，则可能有一个可以点击以激活的“控制台”标签页。
- en: Within the console, write the JavaScript command.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制台中，输入JavaScript命令。
- en: Hit *Return*/*Enter* to execute the code.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Return*/*Enter*键执行代码。
- en: '**Expected output**:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**预期输出**：'
- en: 'The output should be similar to this:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于以下内容：
- en: '![Figure 1.12: An alert appears with our message'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.12：出现带有我们信息的提示框'
- en: '](img/C14377_01_12.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_01_12.jpg)'
- en: 'Figure 1.12: An alert appears with our message'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.12：出现带有我们信息的提示框
- en: Note
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to this activity can be found on page 710\.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 本活动的解决方案可在第710页找到。
- en: In this section, we had a look at how to access the web browser developer tools
    across a variety of popular browsers and had a look at some of the different views
    that can be accessed within.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了如何访问各种流行浏览器中的网络浏览器开发者工具，并查看了一些可以访问的不同视图。
- en: In the next section, we'll get an overview of exactly what JavaScript is used
    for and take a general look at the capabilities of the language.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将概述 JavaScript 的具体用途，并大致了解该语言的能力。
- en: Overview of JavaScript Capabilities
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 功能概述
- en: Without JavaScript, the web would be a fairly bland and non-interactive experience.
    As one of the core technologies used to build the web alongside HTML and CSS,
    JavaScript is immensely important for anyone working with these technologies today.
    JavaScript allows us to perform complex interactions, ferry data into your application,
    and display restructured values within web views. It even has the ability to build,
    destroy, and otherwise modify an entire HTML document.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 没有JavaScript，网络将是一个相当平淡且非交互式的体验。作为与 HTML 和 CSS 一起构建网络的核心理技术之一，JavaScript 对于今天使用这些技术的任何人来说都至关重要。JavaScript
    允许我们执行复杂交互，将数据传输到您的应用程序中，并在网页视图中显示重构的值。它甚至有能力构建、销毁以及修改整个 HTML 文档。
- en: Client-Side Form Validation
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端表单验证
- en: 'Forms are everywhere on the web—and the HTML specification includes a wide
    variety of inputs, checkboxes, radio groups, text areas, and more. Often, even
    before this data hits the server, you''ll want to have some logic that looks for
    certain formatting peculiarities or other aberrations that are present that have
    been entered by the user. You can trigger initial client-side validation once
    the `Submit` button has been clicked, or even as each input loses focus:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 表单在网络上无处不在——HTML 规范包括各种输入、复选框、单选组、文本区域等等。通常，在数据到达服务器之前，你可能会想要一些逻辑来查找用户输入的某些格式特性或其他异常。你可以在点击“提交”按钮后触发初始客户端验证，或者甚至在每个输入失去焦点时：
- en: '![Figure 1.13: Form validation on a login'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.13：登录表单验证'
- en: '](img/C14377_01_13.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_01_13.jpg)'
- en: 'Figure 1.13: Form validation on a login'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13：登录表单验证
- en: 'This is likely one of the most common uses for JavaScript on the web: you can
    provide basic feedback letting the user know they''ve done something in error—in
    this case, invalid login credentials.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是网络中 JavaScript 最常见的用途之一：你可以提供基本的反馈，让用户知道他们犯了错误——在这种情况下，无效的登录凭证。
- en: JavaScript Widgets or Components
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript 小部件或组件
- en: Whether using JavaScript snippets supplied by a component library such as **Bootstrap**
    or **jQuery UI**, or code supplied by specific vendors and services, people have
    been using JavaScript to include functional widgets and components for over two
    decades now. It truly is one of the most common uses for JavaScript on the web.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 不论是使用由组件库如 **Bootstrap** 或 **jQuery UI** 提供的 JavaScript 片段，还是由特定供应商和服务提供的代码，人们已经使用
    JavaScript 包括功能小部件和组件超过二十年了。这确实是网络中 JavaScript 最常见的用途之一。
- en: 'Normally, you are supplied a bit of code that often consists of both HTML and
    JavaScript. When it is run on the page, there is often either an embedded JavaScript
    library from which it can call functions, or a remote one, which then transforms
    the blank slate snippet into a fully functional piece of content for a specific
    purpose:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会得到一些代码，这些代码通常由 HTML 和 JavaScript 组成。当它在页面上运行时，通常有一个嵌入的 JavaScript 库，它可以调用函数，或者是一个远程库，它将空白片段转换成特定目的的完整功能内容：
- en: '![Figure 1.14: Embeddable Twitter widget'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.14：可嵌入的 Twitter 小部件'
- en: '](img/C14377_01_14.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_01_14.jpg)'
- en: 'Figure 1.14: Embeddable Twitter widget'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14：可嵌入的 Twitter 小部件
- en: One of the best examples of a JavaScript-based component, or widget, is that
    of the Twitter timeline embed. You'll find similar embed types for Instagram and
    other social networks. Nearly all of them use JavaScript to insert dynamic content
    into a document.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 基于组件或小部件的最佳例子之一是 Twitter 时间线嵌入。你还会发现类似的可嵌入类型用于 Instagram 和其他社交网络。几乎所有这些都使用
    JavaScript 将动态内容插入文档中。
- en: Note
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This is different from an `<iframe>` embed, in that with an `<iframe>` element,
    you are simply pulling in content from a remote resource and not building it on
    the fly.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这与 `<iframe>` 嵌入不同，因为使用 `<iframe>` 元素时，你只是在从远程资源中拉入内容，而不是动态构建它。
- en: XML HTTP Requests (XHR)
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XML HTTP 请求 (XHR)
- en: This technology was born from the concept of **Rich Internet Applications**
    (**RIA**), which has been dominated by technologies such as Adobe Flash Player
    and Microsoft Silverlight around the turn of the century. What made RIAs great
    is that you no longer had to refresh the browser view in its entirety in order
    to see changes in data presented in the browser DOM. Using something such as Flash
    Player as a visual interactive layer, ActionScript could be used within the application
    to perform all the tasks related to retrieving data in the background, with the
    user interface then changes based on the data retrieved. In this way, the user
    was presented with a much better experience as the entire document wouldn't have
    to load and reload with every server interaction.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术源于 **富互联网应用**（**RIA**）的概念，这种概念在世纪初由 Adobe Flash Player 和 Microsoft Silverlight
    等技术主导。RIA 的优点在于，你不再需要刷新整个浏览器视图来查看浏览器 DOM 中呈现的数据的变化。使用像 Flash Player 这样的视觉交互层，可以在应用程序中使用
    ActionScript 执行所有与在后台检索数据相关的任务，用户界面随后根据检索到的数据进行更改。这样，用户得到了更好的体验，因为整个文档不需要在每次与服务器交互时都加载和重新加载。
- en: As developers began searching for ways to accomplish this same thing without
    the use of additional technologies, **XMLHttpRequest**(**XHR**) was introduced
    as part of Microsoft Internet Explorer in 1999 as **XMLHTTP**. Other browser makers,
    recognizing the obvious benefits of this implementation, went on to standardize
    it across their interpretations as **XMLHttpRequest**.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 随着开发者开始寻找不使用额外技术完成同样事情的方法，**XMLHttpRequest**（**XHR**）作为 Microsoft Internet Explorer
    1999 年的一部分被引入，称为 **XMLHTTP**。其他浏览器制造商认识到这种实现的明显好处，继续在其解释中将其标准化为 **XMLHttpRequest**。
- en: Note
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Previous to this more modern naming, XHR was commonly referred to as Asynchronous
    JavaScript and XML, abbreviated as AJAX. When people refer to AJAX, they are referring
    to the XHR API.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个更现代的命名之前，XHR 通常被称为异步 JavaScript 和 XML，简称 AJAX。当人们提到 AJAX 时，他们指的是 XHR API。
- en: 'Press *F12* and navigate to `Network` | `Preview` to view the XHR network preview
    in your browser:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 按 *F12* 并导航到 `网络` | `预览` 以在浏览器中查看 XHR 网络预览：
- en: '![Figure 1.15: XHR network preview in Chrome'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.15：Chrome 中的 XHR 网络预览'
- en: '](img/C14377_01_15.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_01_15.jpg)'
- en: 'Figure 1.15: XHR network preview in Chrome'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15：Chrome 中的 XHR 网络预览
- en: Browser developer tools all have a way of inspecting the files and data that
    are being transferred to and from the browser pertaining to the current website.
    For XHR, you can view raw header information, a formatted preview, and more.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器开发者工具都有一种检查与当前网站相关的文件和数据传输到浏览器的方法。对于 XHR，你可以查看原始头信息、格式化预览以及更多内容。
- en: Storing Local Data
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储本地数据
- en: Web browsers have been able to store local data for quite some time in the form
    of `data:value` pairs that allow some sort of session memory on the client-side
    of an application. Eventually, the need arose for much more complex ways of storing
    local data within the browser as applications grew in complexity.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 网络浏览器已经能够以 `data:value` 对的形式存储本地数据一段时间了，这允许在应用程序的客户端实现某种会话记忆。随着应用程序复杂性的增加，最终出现了在浏览器中存储更复杂本地数据的需求。
- en: We now have the `LocalStorage` as a better version of cookies all around, yet
    it still lacks the capabilities of a true database.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了 `LocalStorage`，它是比 cookie 更好的版本，但它仍然缺乏真正数据库的能力。
- en: If you do need access to a real, client-side database for your web application,
    you'll want to explore the **Indexed Database** (**IndexedDB**) API. IndexedDB
    is a true client-side database and allows for complex data structures, relationships,
    and everything you'd expect from a database.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确实需要访问用于你的网络应用程序的真正客户端数据库，你将想要探索 **Indexed Database**（**IndexedDB**）API。IndexedDB
    是一个真正的客户端数据库，允许复杂的数据结构、关系以及你从数据库中期望的一切。
- en: Note
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Some web browsers also have access to a Web SQL database as well—but this is
    no longer considered appropriate by web standards bodies and should generally
    be avoided.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 一些网络浏览器也有访问 Web SQL 数据库的能力——但这是不被网络标准机构认为合适的，通常应该避免。
- en: 'You can always check the local storage for any website you visit by digging
    into the developer tools. In Google Chrome, you will find local storage under
    the `Application` view:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过深入开发者工具来检查你访问的任何网站的本地存储。在 Google Chrome 中，你将在 `应用程序` 视图中找到本地存储：
- en: '![Figure 1.16: Local storage inspection in Chrome'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.16：Chrome 中的本地存储检查'
- en: '](img/C14377_01_16.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_01_16.jpg)'
- en: 'Figure 1.16: Local storage inspection in Chrome'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16：Chrome 中的本地存储检查
- en: DOM Manipulation
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DOM 操作
- en: JavaScript can modify, create, and destroy elements and attributes within the
    **Document Object Model** (**DOM**). This is a very powerful aspect of JavaScript
    and nearly all modern development frameworks leverage this capability in some
    way. Similar to XHR, the browser's page doesn't need to be refreshed for us to
    perform these client-side amendments using JavaScript.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 可以修改、创建和销毁 **文档对象模型**（**DOM**）内的元素和属性。这是 JavaScript 的一个非常强大的方面，几乎所有现代开发框架都以某种方式利用了这一功能。类似于
    XHR，使用 JavaScript 在客户端执行这些修改时，浏览器页面不需要刷新。
- en: We'll see a particular project based on this in the next chapter, where you'll
    get some first-hand experience with this very task.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中看到一个基于此的特定项目，你将有机会亲身体验这个任务。
- en: Animations and Effects
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画和效果
- en: Looking back at the web in its infancy, everything was a very static experience.
    Pages were served up in the browser and consisted of text and hyperlinks. Depending
    on the year, we usually saw black serif type against a white background with the
    occasional blue/purple hyperlink.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾网络在婴儿期，一切都是一个非常静态的体验。页面在浏览器中提供，由文本和超链接组成。根据年份，我们通常看到黑色衬线字体与白色背景，偶尔会有蓝色/紫色的超链接。
- en: Eventually, images and different visual stylistic attributes were available,
    but things really changed with the advent of various extensions such as **Macromedia
    Shockwave** and **Flash Player**. All of a sudden, rich experiences such as interactive
    video, animation, gaming, audio playback, special effects, and more were all available.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，图像和不同的视觉风格属性也变得可用，但真正改变的是各种扩展的出现，如 **Macromedia Shockwave** 和 **Flash Player**。突然之间，丰富的体验，如交互式视频、动画、游戏、音频播放、特殊效果等，都变得触手可及。
- en: 'The web standards bodies rightly recognized that all of these capabilities
    should not be locked behind different browser plugins, but rather be part of the
    native web experience using core web technologies. Of course, primary among these
    was JavaScript, though JavaScript often relied on a close relationship with HTML
    and CSS to make things work. The following screenshot shows an interactive animation
    created using the `CreateJS` library:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 网络标准机构正确地认识到，所有这些功能不应被锁定在不同的浏览器插件之后，而应该是使用核心网络技术作为原生网络体验的一部分。当然，其中最重要的是 JavaScript，尽管
    JavaScript 通常依赖于与 HTML 和 CSS 的紧密关系来实现功能。以下截图显示了使用 `CreateJS` 库创建的交互式动画：
- en: '![Figure 1.17: Interactive animation using the CreateJS JavaScript library'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.17：使用 CreateJS JavaScript 库的交互式动画'
- en: '](img/C14377_01_17.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C14377_01_17.jpg)'
- en: 'Figure 1.17: Interactive animation using the CreateJS JavaScript library'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17：使用 CreateJS JavaScript 库的交互式动画
- en: Today, we have rich implementations of the types of content creation that were
    previously only available with third-party plugins. Libraries such as `CreateJS`
    allow for a huge variety of effects, gaming applications, interactions, animations,
    and beyond and use native JavaScript.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了丰富的内容创建类型实现，这些类型之前仅通过第三方插件可用。例如 `CreateJS` 这样的库允许实现大量的效果、游戏应用、交互、动画等，并使用原生
    JavaScript。
- en: Note
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For a number of examples of what is possible in this area of development, have
    a look at the Google Doodles archive at [https://www.google.com/doodles](https://www.google.com/doodles).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个开发领域的可能性方面，有许多示例，你可以查看 Google Doodles 存档，网址为 [https://www.google.com/doodles](https://www.google.com/doodles)。
- en: In this section, we looked at some of the common capabilities of JavaScript
    that are used on the web today. In the chapters that follow, we'll be exploring
    some of these capabilities in much greater detail.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了 JavaScript 在当今网络中的一些常用功能。在接下来的章节中，我们将更深入地探讨这些功能。
- en: Summary
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took some time to build a foundation of knowledge that will
    frame the rest of this book. We began with a historical overview and then examined
    the relationship between ECMAScript and JavaScript. We then moved on and explored
    JavaScript by accessing the developer tools of various browsers. Following a hands-on
    activity and writing a bit of JavaScript with the browser developer tools, we
    ended this chapter with an overview of JavaScript capabilities. This included
    DOM manipulation, local data storage, form validation, and other examples to get
    us into the right mindset when it comes to thinking about the possibilities of
    working in JavaScript.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们花了一些时间来构建一个知识基础，这将构成本书其余部分的结构。我们从历史概述开始，然后考察了 ECMAScript 与 JavaScript
    之间的关系。接着，我们通过访问各种浏览器的开发者工具来探索 JavaScript。在完成了一次动手实践并使用浏览器开发者工具编写了一些 JavaScript
    代码之后，我们以对 JavaScript 功能的概述结束了本章。这包括 DOM 操作、本地数据存储、表单验证以及其他示例，以帮助我们正确思考在 JavaScript
    中工作的可能性。
- en: In the next chapter, we will explore how to work with JavaScript in much greater
    detail by using an **integrated development environment** (**IDE**) and how to
    examine the syntax rules of JavaScript. We'll look much more deeply into the web
    browser as one of a variety of JavaScript runtimes. We'll also explore the use
    of browser development tools in more detail and get hands on with manipulating
    both browser elements and additional attributes associated with them.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过使用**集成开发环境**（**IDE**）和检查 JavaScript 的语法规则来更详细地探讨如何使用 JavaScript。我们将更深入地研究网络浏览器，将其视为多种
    JavaScript 运行时之一。我们还将更详细地探讨浏览器开发者工具的使用，并亲自动手操作浏览器元素及其相关属性。
