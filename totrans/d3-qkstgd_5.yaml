- en: Creating a Bar Graph Using a Data File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**AJAX** stands for **Asynchronous JavaScript And XML**. Basically, what we
    can do is use JavaScript to load data into the page after it has loaded. This
    is a great way to generate a graph based on user interaction. In this chapter,
    we''ll use AJAX to build a bar graph. By the end of the chapter, you should be
    able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Use AJAX to make an asynchronous call to an external data file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a bar graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The complete code for this section can be found here: [https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter05](https://github.com/PacktPublishing/D3.js-Quick-Start-Guide/tree/master/Chapter05).'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create our standard setup in `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the following code to `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the following code to `app.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what we should have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7dc454cf-35e3-4cc9-bda7-9bc5192a728e.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating an external file to hold our data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a `data.json` file, which will hold fake data regarding how often
    job posts require certain skills. This should be the contents of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Making an AJAX request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we're going to use JavaScript to make a request for some data.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the basic code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'D3 has lots of different methods for making AJAX requests to files of different
    data types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Since our data is in JSON format, we''ll use the first kind of call. Add the
    following to the end of `app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Handling file access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you opened the `index.html` file in Chrome directly, instead of serving
    it on a web server, you''ll notice we''ve encountered an error. Check your developer
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97d9f57d-79f0-4466-a747-686d85c3dbbd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The issue here is that web browsers are not supposed to make AJAX requests
    to files on your computer. If they could, this would be a huge security flaw because
    any website could access files on your computer. Let''s create a basic file server.
    To do this, you''ll need to `installNode.js` ([https://nodejs.org/en/](https://nodejs.org/en/)).
    Once that''s done, open your computer''s Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Mac: command + *Space*, and then type `terminal` and hit Ent*er*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For Windows: click Start, type `cmd`,and hit *Enter*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, type the following into your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you get error messages, try this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This installs a basic `http-server` that was built using `Node.js`. To run
    it, use the Terminal to navigate to the directory where you saved your code (type
    `cd` to change folders in the Terminal) and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/313081e8-4b43-4e47-8f9c-728a3748404d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now go to `http://localhost:8080/` in your browser. You should now see that
    your AJAX call is succeeding (if you have issues, hold down shift and hit the
    refresh button to force the browser to reload all files that may have been cached):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84654d3a-5564-42b0-bf0e-ba156a9be601.png)'
  prefs: []
  type: TYPE_IMG
- en: Using AJAX data to create SVG elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that our AJAX calls are succeeding, let''s start building our app. From
    here on out, it''s all basic JavaScript and D3\. Note that everything we''ll write
    for the rest of this lesson is done within the success callback of our AJAX request.
    In production, we might want to move this code elsewhere, but for now this is
    easier for learning. Let''s create some rectangles for our bar graph. The bottom
    of `app.js` (the callback to the AJAX request) should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Our **Elements** tab in our dev tools should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d312da58-cc1a-4bd8-ad7a-562469936047.png)'
  prefs: []
  type: TYPE_IMG
- en: Adjusting the height and the width of the bars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a scale that maps the `count` property of each element in `data`
    to a visual height for the corresponding bar. We''ll use a linear scale. Remember
    to map `HEIGHT` of the graph to a very low data point and the top of the graph
    (`0` in the range) map to a very high data value. Add this code to the bottom
    of the AJAX callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We could use `d3.extent`, but we''re going to need the individual min values
    later on. Immediately after the previous code, let''s tell D3 to adjust the height
    of the rectangles using the `yScale`. Remember that the *y* axis is flipped. A
    low data value produces a high range value. But even though the range is high,
    the bar itself should be small. We''ll need to re-flip the values just for height
    so that a low data value produces a small bar and a high data value produces a
    large bar. To do this, let''s subtract whatever the range point is from `HEIGHT`
    of the graph. This way, if `yScale(datum.count)` produces, say, 500, the height
    of the bar will be 100\. We can use `yScale(datum.count)` normally when adjusting
    the position of the bars later. Add the following to the bottom of the AJAX callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our rectangles have height, but no width:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da5dc03c-ca41-4b9a-8a39-1ce0511855c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At the bottom of `app.css`, let''s give all our bars the same width:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what we should see in Chrome now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/481f4a84-0d7f-4699-b9a3-51ade773989b.png)'
  prefs: []
  type: TYPE_IMG
- en: Adjusting the horizontal and the vertical placement of the bars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our bars all overlap one another at the moment. Let''s space them out by mapping
    *x*''s position to index in the data array. Add the following to the bottom of
    the AJAX callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This maps indices in the array to horizontal range points. Chrome should look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36de3793-9513-4a33-bbdb-630de03aae7e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s move the bars so they grow from the bottom, as opposed to hanging
    from the top. Add the following to the end of the AJAX callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using our `yScale` function, a high data value produces a low range value, which
    doesn't push a large bar down much. A low data point produces a high range value,
    which pushes a small bar down a lot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our last few bars don''t have any height, because we''ve mapped the minimum
    count property of our data to a visual range value of 0 in `yScale`. Let''s adjust
    the last line of this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We will change it to this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the domain minimum is one less than what''s actually in our data set. Domains
    with the original minimum are treated as higher values than what''s expected for
    the minimum of the graph. We get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34cf9294-2787-496e-a9af-354d2f402d41.png)'
  prefs: []
  type: TYPE_IMG
- en: Making the width of the bars dynamic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, our bars have a fixed width. No matter how many elements we have,
    they have a 15 px width. If we had more data elements, the bars could overlap.
    Let''s change this. Since each `rect` will be the same width, no matter what the
    data is, we can just assign `width` a computed value. Add the following to the
    end of the AJAX callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s adjust our `rect` CSS so our bars are more visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fcf980d3-2e3e-486c-970f-3857c60f4bff.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing the color of the bar based on data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Right now, the bars are black. A linear scale will interpolate between colors,
    just like a regular number. Add the following to the end of the AJAX callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that we calculate they Domain using `d3.extent` so that the real minimum
    of the data set is used to map `#00cc00`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df8c385d-d6d3-4b4e-ac5c-f5967e8fbcf9.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding axes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The left axis is the same as shown in [Chapter 4](e503bfe5-4b90-47eb-bae0-d588a9b545d5.xhtml),
    *Making a Basic Scatter Plot Interactive*. Add this code to the bottom of the
    AJAX callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To create the bottom axis, we need to be able to map strings to points on a
    domain. We''ll use a band scale for this, which just divides up the range into
    equal parts and maps it to an array of discrete values (values that can''t be
    interpolated, for example, strings). Add this code to the bottom of the AJAX callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Notice we use `data.map()`. This is regular JavaScript that simply loops through
    an array and modifies each element based on the given function. It then returns
    the resulting array, leaving the original array in tact. In the previous example,
    `skillDomain` will be an array containing the various name properties of each
    of the data elements.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have an array of each of the skills, we use this as the domain and map
    each skill to a point within the range. Remember the point in the range is created
    by dividing up the full range equally based on the number of elements in the domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have a scale that maps each skill text to a point in the *x* range,
    we can create the bottom axis as before. Add this code to the bottom of the AJAX
    callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We still need to stop the `<svg>` element from clipping the axes. Change the
    CSS for `svg` in `app.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2108ac7d-1a29-4a59-9aa0-614fbd3f03b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The bottom axis text is all cluttered, though. Let''s add some CSS to bottom
    of `app.css` to fix this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39695da5-7beb-4dd5-b2bb-9e4abbf9c456.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It''s rotated, but it''s rotated around the center of the element. Let''s add
    a line to what we just wrote, so it rotates around the start of the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/335c2fa0-84ba-41bc-bce3-25f6f32c5d46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s move the graph to the right, so we can see the values for the left axis.
    Adjust our `svg` css code so it looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to use AJAX to make an asynchronous request
    that will populate a bar graph. In [Chapter 6](aacc693a-f51f-4d50-832c-db2cd3af3b7f.xhtml),
    *Animating SVG Elements to Create an Interactive Pie Chart*, we'll create a pie
    chart that animates when you remove sections from it.
  prefs: []
  type: TYPE_NORMAL
