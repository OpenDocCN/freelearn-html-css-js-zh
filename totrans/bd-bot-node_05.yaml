- en: Chapter 5. Telegram-Powered Bots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Telegram** ( [https://telegram.org/](https://telegram.org/) ) is a free,
    cloud-based mobile and desktop messaging app. Telegram takes us into a new era
    of messaging, which focuses primarily on security and the speed of the message
    delivery.'
  prefs: []
  type: TYPE_NORMAL
- en: Telegram has clients for platforms including Windows, OS X, Linux 64 bit, and
    Linux 32 bit. The Telegram messaging app is available for use as a web version
    too. When it comes to mobile devices, Telegram has native apps for Android, iOS,
    and Windows Phone.
  prefs: []
  type: TYPE_NORMAL
- en: With Telegram, you can send messages, photos, videos, and files of any type
    (doc, zip, mp3, and many more); and you can create groups for up to 5,000 people,
    or channels for broadcasting your messages and media.
  prefs: []
  type: TYPE_NORMAL
- en: One of the great things about Telegram is that Telegram messages are encrypted
    and can be set to self-destruct. While chatting or messaging, for those who want
    more privacy and secrecy, Telegram has secret chats. This means only you and the
    recipient can see these messages; nobody else can see them, including Telegram.
    Such messages from this secret chat cannot be forwarded and, more importantly,
    when you delete such messages from your side, Telegram secret chat also deletes
    the messages from the other side as well.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll explore how to use Telegram. Also, we'll look at how
    we can build a Telegram powered bot that will act like a virtual assistant for
    us. This virtual assistant will provide information about the sentiments of our
    Telegram messages.
  prefs: []
  type: TYPE_NORMAL
- en: Sounds great!! Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: How a Telegram bot works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Telegram bot is a special account that does not require an additional phone
    number to be set up. Users can interact with these bots in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Send messages and commands to bots by opening a chat with them, or by adding
    them to groups. This means of communication is used for typical chat bots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send requests directly from the input field by typing the bot's username and
    a query. These are called inline bots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Such bots can enhance Telegram chats with content from external sources, can
    alert or notify you about news and translations, and can provide relevant information
    to you. Bots can even connect like-minded people looking for conversation partners
    within Telegram.
  prefs: []
  type: TYPE_NORMAL
- en: Technically, Telegram bots are third-party applications running inside Telegram.
    When a user sends a message to a Telegram bot, Telegram's intermediary server
    takes care of the encryption and communication with the help of Telegram bot APIs.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will focus on chatting conversations (text interaction)
    by opening a chat with our bot and not calling it, with our Telegram bot.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Telegram account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we are just talking about Telegram and bots within it. In this section,
    we will actually start setting up our own Telegram account, followed by an account
    for our Telegram chat bot.
  prefs: []
  type: TYPE_NORMAL
- en: 'I am using the web version of Telegram to create my own account first. Open
    the browser window and enter the URL [https://web.telegram.org/#/login](https://web.telegram.org/#/login)
    . This will launch a **Sign in** screen, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Telegram account](img/image00254.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Provide your **Country**, **Code**, and **Phone number**. Click on the **Next
    >** link in the top-right corner to launch the next step, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Telegram account](img/image00255.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter the SMS code you have received, in the space provided, and you are set
    for your own account for Telegram. Once you enter your profile details, you can
    start messaging with the help of the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a Telegram account](img/image00256.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With this, we have now set up our own Telegram account. You can start messaging
    your colleagues, and search for them as well. In the next section, we will start
    building Telegram powered bots.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a bot account using a Telegram bot - @BotFather
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sounds confusing! But this is the easiest way to start with Telegram bots. As
    I mentioned, Telegram bots are special accounts and, to set up these accounts,
    we will be using another Telegram bot named *BotFather*.
  prefs: []
  type: TYPE_NORMAL
- en: This is the awesome technique that Telegram has specially provided for developers
    to create their own bots. Here, we can see the capability of one bot that helps
    us in creating other bots.
  prefs: []
  type: TYPE_NORMAL
- en: Let's search for `@Botfather` and add it for our conversations, or you can directly
    open the URL [https://telegram.me/botfather](https://telegram.me/botfather) to
    start conversations with BotFather. To start, BotFather will introduce itself
    and will display a **START** button at the bottom for the user.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a bot account using a Telegram bot - @BotFather](img/image00257.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on the **START** button, **BotFather** will provide you with
    all the commands that can be used for creating a new bot, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a bot account using a Telegram bot - @BotFather](img/image00258.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's click on link **/newbot** from our conversation with BotFather. With
    this command, BotFather will ask us to choose a name for our bot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let me choose the name `MadansNewTelegramBot`. BotFather internally validates
    whether the name is available. If it is available, BotFather asks for a username
    for the newly created bot. I have provided a username for my bot. Refer to the
    following conversations for the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a bot account using a Telegram bot - @BotFather](img/image00259.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With this, BotFather has created our bot and has also provided a token for our
    bot. This token will be used while wiring up our bot with Telegram bot APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can use this bot for conversations using the URL `telegram.me/MadansNewBot`
    or by searching for the name of the bot in the search field, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a bot account using a Telegram bot - @BotFather](img/image00260.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After searching once, you select the bot for further conversations.
  prefs: []
  type: TYPE_NORMAL
- en: To summarize the steps carried out so far, we've created our own account at
    Telegram and also created a basic Telegram bot using BotFather. Our first Telegram
    bot will be a no-brain bot as there is no intelligence built within it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will actually build some basic intelligence with the
    help of Node.js We will build a bot that will tell us the sentiments of our messages.
    But what is sentiment analysis? Let's spend some time in understanding sentiment
    analysis.
  prefs: []
  type: TYPE_NORMAL
- en: What is sentiment analysis?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In simple words, sentiment analysis is simply classifying a given term or a
    sentence as positive, negative, or neutral. This is also known as opinion mining
    or deriving the attitude of the person who is writing or speaking.
  prefs: []
  type: TYPE_NORMAL
- en: In relation to Telegram, sentiment analysis can be extremely useful for media
    monitoring and extracting opinions on some public topics.
  prefs: []
  type: TYPE_NORMAL
- en: Sentiment analysis can be achieved with approaches such as knowledge-based techniques,
    statistical methods, and a combination of both. Knowledge-based techniques classify
    text based on words' affinity to particular emotions, such as happy, sad, and
    so on. Statistical methods leverage elements of machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: When representing the sentiments of a term or a sentence, words having a negative,
    neutral or positive sentiment to them are given an associated number on a scale
    of -10 to +10, and the level of sentiment or the score is determined at term or
    at sentence level.
  prefs: []
  type: TYPE_NORMAL
- en: Considering the scope of this book, we are keeping the sentiment analysis topic
    quite short.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Telegram bot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's see how we can use Node.js and Telegram bot APIs in order to create
    our basic Telegram bot. In the previous chapter we've seen how to get Node.js
    installed. For our Telegram bot, we'll follow a very similar process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating a folder in our local drive from the command prompt
    in order to store our bot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming we have Node.js and npm installed (if not, please refer to the steps
    in Chapter 1, *The Rise of Bots – Getting the Message Across* ), let''s create
    and initialize our `package.json`, which will store our bot''s dependencies and
    definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have gone through the `npm init` options (which are very easy to follow),
    you''ll see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Telegram bot](img/image00261.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In your project folder, you'll see the result, which is your `package.json`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Telegram bot](img/image00262.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Just like we did in our previous example, we will use **Express** ( [http://expressjs.com](http://expressjs.com)
    ) as our **REST** Node.js framework. We''ll install it and save it to our `package.json`
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once Express has been installed, you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Telegram bot](img/image00263.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With Express setup, the next thing to do is to install the `node-telegram-bot-api`
    package. This can be located at [https://www.npmjs.com/package/telegram-bot-api](https://www.npmjs.com/package/telegram-bot-api)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to install it, run this npm command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should then see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Telegram bot](img/image00264.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Having done this, the next thing to do is to update your `package.json` in
    order to include the `"engines"` attribute. Open the `package.json` file with
    a text editor and update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `package.json` should then look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Telegram bot](img/image00265.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With our bot all wired up, we can then focus on creating the core logic for
    our conversations with the bot. Let's create our `app.js` file, which will be
    the entry point to our bot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `app.js` should like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now let's look at the code snippet line by line. The first thing we do is to
    reference the node package we previously installed using npm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have our reference set up, we are now connected to our bot. Remember,
    BotFather has provided a token to our bot for accessing Telegram bot APIs; we
    will be referring to the same token here, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have a handle to interact with our bot, through the token and bot APIs.
    Let''s see how we can start the conversation with our bot. To start a bot, Telegram
    bots use the command `/start`. On entering the start command, my bot should introduce
    itself and also ask us how he can help us. This is achieved using the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This basically tells our bot that if a user sends the command `/start`, our
    bot will send message in response to that with the help of `api.onText()`method.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's run our Node.js program to start our conversation with the bot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Telegram bot](img/image00266.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now let's launch the Telegram web version for your own account.
  prefs: []
  type: TYPE_NORMAL
- en: Conversations with our basic Telegram bot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Search our newly created and Node.js wired bot using its name, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Conversations with our basic Telegram bot](img/image00267.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **START** button, and the `/start` command will be sent to our
    bot to start the conversation. Once you''ve done that, you''ll see our bot has
    responded to the `/start` command. Refer to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Conversations with our basic Telegram bot](img/image00268.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So, whatever we have written for the `/start` command in our `app.js` has executed
    and, through the Telegram bot APIs, the response is shown to us.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's click on the **/help** command or type in `/help` for our bot. Our
    bot will respond to the `/help` command with following response, which we have
    wired into our Node.js program.
  prefs: []
  type: TYPE_NORMAL
- en: '![Conversations with our basic Telegram bot](img/image00269.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Since our Node.js program from `app.js` is running behind the scenes, our bot
    is responding to our commands based on what has been programmed in `app.js.`
  prefs: []
  type: TYPE_NORMAL
- en: Building a sentiment analysis bot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having built a very basic Telegram bot, let's build a sentiment analysis bot
    for Telegram. Within the context of Telegram, bots would be useful for content
    or media monitoring. Bots can actually classify terms or sentences that Telegram
    users are sharing with others. Knowing this, we will build a sentiment analysis
    bot using Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: For sentiment analysis, we will be using the sentiment package for Node.js.
    Sentiment is a Node.js module that uses the AFINN-111 wordlist to perform sentiment
    analysis on an input text. This package can be located at [https://www.npmjs.com/package/sentiment](https://www.npmjs.com/package/sentiment)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to install it, let''s determine our code location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And then run this npm command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should then see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a sentiment analysis bot](img/image00270.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'With this, we are ready to wire up our Node.js code to use the sentiment analysis
    package. Let''s open our Node.js code and include the following code line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As we know, our bot has many commands, such as `/start` and `/help`; on similar
    lines, we have an additional command for doing sentiment analysis. This command
    is `/sentiments`.
  prefs: []
  type: TYPE_NORMAL
- en: The idea here is that, once you send the command `/sentiments` to our bot, the
    bot will confirm your intentions and will ask you to send a term or a sentence.
    Upon receiving a term or a sentence, the bot will carry out sentiment analysis
    with the help of the sentiment package that is wired up in our Node.js program.
    Then bot will reply with the sentiment analysis score.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our updated `app.js` should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now let's look at the updated `app.js` code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we have added a reference to the sentiment package in our basic bot
    code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We also modified the `/start` command to include the new command `/sentiments`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we added the actual logic of what should happen when the `/sentiments`
    command is sent to the bot. Upon firing up this command, the bot will confirm
    the intention and will ask you to send some text, a term or a sentence using the
    following code line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we send some text to a bot, the bot will reply to our message with the
    sentiment analysis of the text that has been sent. This particular logic is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, once the bot receives a text, a call to the `sentiment()`function
    is made and text is passed as `message.text` to get the sentiment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sentiments are returned in an object called `sentival`. This `sentival` object
    has both score and comparative values for the sentiment of the text that has been
    passed. These values are returned to the user using the following code lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now let's run our Node.js program to start our conversation with the bot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a sentiment analysis bot](img/image00271.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now our updated code is running, let me also start my Telegram web version and
    start a conversation with my updated bot.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have already searched for and added my bot. The screen should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a sentiment analysis bot](img/image00272.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **START** button, and the `/start` command will be sent to our
    bot to start the conversation. Once you''ve done that, you''ll see our bot has
    responded to the `/start` command. The `/start` command''s response is also updated with
    a mention of the newly added command `/sentiments`. Refer to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a sentiment analysis bot](img/image00273.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the **/sentiments** link from the response from the `/start` command.
    This will send a `/sentiments` command to our bot and the bot will respond as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a sentiment analysis bot](img/image00274.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So, here, the bot is asking the user to send text as a message; in response
    to that, the bot will share the sentiment of the message sent by the user. Now
    let's write the message `Bots are awesome!` in **Write a message...**, and hit
    enter or click **SEND**. Do not close the message from the bot, which is shown
    as a small popup with a close button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a sentiment analysis bot](img/image00275.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Immediately, the bot will respond with the score and the comparative value
    for the sentiment of your text, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a sentiment analysis bot](img/image00276.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So, we entered the text `Bots are awesome!` and, in response to that, the bot
    sent us a sentiment **Score:4** and **Comparative:1.33**. For the text sent to
    the bot, with the score value coming in as positive, the bot is showing us a positive
    opinion.
  prefs: []
  type: TYPE_NORMAL
- en: Now to get the sentiment for a new term, again send a `/sentiments` command
    to our bot.
  prefs: []
  type: TYPE_NORMAL
- en: The bot will again confirm the intentions, and will ask us to share some text.
    Now let's send the text `The food was very bad.` and see what bot returns.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a sentiment analysis bot](img/image00277.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We entered the text `The food was very bad`. In response to that, the bot sent
    us a sentiment with **Score:-3** and **Comparative:-0.6**. This way, the bot is
    showing us a negative opinion here from the text.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have had an interesting journey learning how to build a Telegram bot and
    how we can have a great conversational experience with the intelligence built
    in to it.
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, we have seen how to create a Telegram account if you are new to
    Telegram. Further to that, we have also used an interesting way to create our
    own bot, using BotFather. BotFather is a Telegram bot that rules all the other
    Telegram bots.
  prefs: []
  type: TYPE_NORMAL
- en: After creating our bot, we wired it in to the Node.js program using the npm
    package and built some basic intelligence for our bot chat.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we wanted our bot to provide sentiment analysis, so we looked at the
    very basics of sentiment analysis. To carry out sentiment analysis, we used the
    npm package for sentiment analysis and enriched our basic bot to provide us with
    sentiment analysis. Our bot is mainly of the type that needs a chat session opening
    and then leverages the bot functionalities by sending it commands. There is also
    another Telegram bot type, which is the inline bot. Exploring Telegram inline
    bots further is left with the reader.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, this chapter has given you some insight on Telegram bots, and how
    we can enhance them using Node.js and Telegram bot APIs to provide an enhanced
    conversational experience within Telegram. In the next chapter, we will explore
    how to build a Slack bot. For those who do not know Slack, Slack is simply a real-time
    messaging app specifically for team collaboration. We will actually be building
    a bot for Slack, which will help us to locate documents in the document repository
    based on the user's request.
  prefs: []
  type: TYPE_NORMAL
- en: Keep exploring further.
  prefs: []
  type: TYPE_NORMAL
