- en: Chapter 5. Telegram-Powered Bots
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：由Telegram驱动的机器人
- en: '**Telegram** ( [https://telegram.org/](https://telegram.org/) ) is a free,
    cloud-based mobile and desktop messaging app. Telegram takes us into a new era
    of messaging, which focuses primarily on security and the speed of the message
    delivery.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Telegram** ([https://telegram.org/](https://telegram.org/)) 是一款免费、基于云的移动和桌面消息应用。Telegram引领我们进入一个以安全性和消息传递速度为重点的新时代。'
- en: Telegram has clients for platforms including Windows, OS X, Linux 64 bit, and
    Linux 32 bit. The Telegram messaging app is available for use as a web version
    too. When it comes to mobile devices, Telegram has native apps for Android, iOS,
    and Windows Phone.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Telegram为包括Windows、OS X、Linux 64位和Linux 32位在内的平台提供客户端。Telegram消息应用也提供网页版供使用。至于移动设备，Telegram为Android、iOS和Windows
    Phone提供原生应用。
- en: With Telegram, you can send messages, photos, videos, and files of any type
    (doc, zip, mp3, and many more); and you can create groups for up to 5,000 people,
    or channels for broadcasting your messages and media.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Telegram，您可以发送消息、照片、视频以及任何类型的文件（如doc、zip、mp3等）；您还可以创建最多容纳5,000人的群组，或者创建频道来广播您的消息和媒体。
- en: One of the great things about Telegram is that Telegram messages are encrypted
    and can be set to self-destruct. While chatting or messaging, for those who want
    more privacy and secrecy, Telegram has secret chats. This means only you and the
    recipient can see these messages; nobody else can see them, including Telegram.
    Such messages from this secret chat cannot be forwarded and, more importantly,
    when you delete such messages from your side, Telegram secret chat also deletes
    the messages from the other side as well.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Telegram的一大优点是，Telegram消息是加密的，并且可以设置为自我销毁。在聊天或发消息时，对于那些想要更多隐私和保密的人来说，Telegram有秘密聊天功能。这意味着只有您和收件人可以看到这些消息；其他人包括Telegram都无法看到。这些秘密聊天的消息不能转发，更重要的是，当您从自己这边删除这些消息时，Telegram的秘密聊天也会从对方那边删除这些消息。
- en: In this chapter, we'll explore how to use Telegram. Also, we'll look at how
    we can build a Telegram powered bot that will act like a virtual assistant for
    us. This virtual assistant will provide information about the sentiments of our
    Telegram messages.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何使用Telegram。此外，我们还将探讨如何构建一个由Telegram驱动的机器人，该机器人将充当我们的虚拟助手。这个虚拟助手将提供关于我们Telegram消息情感的信息。
- en: Sounds great!! Let's get started.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很棒！让我们开始吧。
- en: How a Telegram bot works
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Telegram机器人的工作原理
- en: 'A Telegram bot is a special account that does not require an additional phone
    number to be set up. Users can interact with these bots in two ways:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Telegram机器人是一个特殊的账户，设置时不需要额外的电话号码。用户可以通过两种方式与这些机器人互动：
- en: Send messages and commands to bots by opening a chat with them, or by adding
    them to groups. This means of communication is used for typical chat bots.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过与他们开启聊天或将它们添加到群组中来向机器人发送消息和命令。这种沟通方式通常用于典型的聊天机器人。
- en: Send requests directly from the input field by typing the bot's username and
    a query. These are called inline bots.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接从输入字段发送请求，通过输入机器人的用户名和查询。这些被称为内联机器人。
- en: Such bots can enhance Telegram chats with content from external sources, can
    alert or notify you about news and translations, and can provide relevant information
    to you. Bots can even connect like-minded people looking for conversation partners
    within Telegram.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些机器人可以通过从外部来源增强Telegram聊天内容、提醒或通知您新闻和翻译，以及向您提供相关信息。机器人甚至可以将志同道合的人连接起来，在Telegram内寻找对话伙伴。
- en: Technically, Telegram bots are third-party applications running inside Telegram.
    When a user sends a message to a Telegram bot, Telegram's intermediary server
    takes care of the encryption and communication with the help of Telegram bot APIs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，Telegram机器人是运行在Telegram内部的第三方应用程序。当用户向Telegram机器人发送消息时，Telegram的中继服务器会负责加密和通过Telegram机器人API进行通信。
- en: In this chapter, we will focus on chatting conversations (text interaction)
    by opening a chat with our bot and not calling it, with our Telegram bot.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过开启与我们的机器人的聊天而不是调用它，专注于使用我们的Telegram机器人进行聊天对话（文本交互）。
- en: Setting up a Telegram account
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Telegram账户
- en: So far, we are just talking about Telegram and bots within it. In this section,
    we will actually start setting up our own Telegram account, followed by an account
    for our Telegram chat bot.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是在谈论Telegram及其内部的机器人。在本节中，我们将实际开始设置我们自己的Telegram账户，然后是Telegram聊天机器人的账户。
- en: 'I am using the web version of Telegram to create my own account first. Open
    the browser window and enter the URL [https://web.telegram.org/#/login](https://web.telegram.org/#/login)
    . This will launch a **Sign in** screen, as shown in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用Telegram的网页版本来首先创建我的账户。打开浏览器窗口并输入URL [https://web.telegram.org/#/login](https://web.telegram.org/#/login)
    。这将启动一个 **登录** 屏幕，如图所示：
- en: '![Setting up a Telegram account](img/image00254.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![设置Telegram账户](img/image00254.jpeg)'
- en: 'Provide your **Country**, **Code**, and **Phone number**. Click on the **Next
    >** link in the top-right corner to launch the next step, as shown in the following
    screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 提供您的 **国家**、**代码** 和 **电话号码**。点击右上角的 **下一步 >** 链接以启动下一步，如图所示：
- en: '![Setting up a Telegram account](img/image00255.jpeg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![设置Telegram账户](img/image00255.jpeg)'
- en: 'Enter the SMS code you have received, in the space provided, and you are set
    for your own account for Telegram. Once you enter your profile details, you can
    start messaging with the help of the following screen:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供的空间中输入您收到的短信代码，您就可以设置自己的Telegram账户了。一旦您输入了个人资料详情，您就可以通过以下屏幕开始发消息：
- en: '![Setting up a Telegram account](img/image00256.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![设置Telegram账户](img/image00256.jpeg)'
- en: With this, we have now set up our own Telegram account. You can start messaging
    your colleagues, and search for them as well. In the next section, we will start
    building Telegram powered bots.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们现在已经设置了自己的Telegram账户。您可以从现在开始给同事发消息，也可以搜索他们。在下一节中，我们将开始构建由Telegram支持的机器人。
- en: Setting up a bot account using a Telegram bot - @BotFather
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Telegram机器人创建机器人账户 - @BotFather
- en: Sounds confusing! But this is the easiest way to start with Telegram bots. As
    I mentioned, Telegram bots are special accounts and, to set up these accounts,
    we will be using another Telegram bot named *BotFather*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很复杂！但这确实是开始使用Telegram机器人的最简单方法。正如我提到的，Telegram机器人是特殊的账户，为了设置这些账户，我们将使用另一个名为
    *BotFather* 的Telegram机器人。
- en: This is the awesome technique that Telegram has specially provided for developers
    to create their own bots. Here, we can see the capability of one bot that helps
    us in creating other bots.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Telegram为开发者特别提供的强大技术，用于创建他们自己的机器人。在这里，我们可以看到一个机器人的能力，它可以帮助我们创建其他机器人。
- en: Let's search for `@Botfather` and add it for our conversations, or you can directly
    open the URL [https://telegram.me/botfather](https://telegram.me/botfather) to
    start conversations with BotFather. To start, BotFather will introduce itself
    and will display a **START** button at the bottom for the user.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们搜索 `@Botfather` 并将其添加到我们的对话中，或者您可以直接打开URL [https://telegram.me/botfather](https://telegram.me/botfather)
    与BotFather开始对话。为了开始，BotFather会自我介绍并在底部显示一个 **开始** 按钮供用户使用。
- en: '![Setting up a bot account using a Telegram bot - @BotFather](img/image00257.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![使用Telegram机器人创建机器人账户 - @BotFather](img/image00257.jpeg)'
- en: 'Once you click on the **START** button, **BotFather** will provide you with
    all the commands that can be used for creating a new bot, as shown in the following
    screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击 **开始** 按钮，**BotFather** 将提供所有可用于创建新机器人的命令，如图所示：
- en: '![Setting up a bot account using a Telegram bot - @BotFather](img/image00258.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![使用Telegram机器人创建机器人账户 - @BotFather](img/image00258.jpeg)'
- en: Now, let's click on link **/newbot** from our conversation with BotFather. With
    this command, BotFather will ask us to choose a name for our bot.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们点击与BotFather对话中的链接 **/newbot**。使用这个命令，BotFather会要求我们为我们的机器人选择一个名字。
- en: 'Let me choose the name `MadansNewTelegramBot`. BotFather internally validates
    whether the name is available. If it is available, BotFather asks for a username
    for the newly created bot. I have provided a username for my bot. Refer to the
    following conversations for the same:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我选择名字 `MadansNewTelegramBot`。BotFather内部验证该名字是否可用。如果可用，BotFather会要求为新创建的机器人提供一个用户名。我已经为我的机器人提供了一个用户名。请参考以下对话：
- en: '![Setting up a bot account using a Telegram bot - @BotFather](img/image00259.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![使用Telegram机器人创建机器人账户 - @BotFather](img/image00259.jpeg)'
- en: With this, BotFather has created our bot and has also provided a token for our
    bot. This token will be used while wiring up our bot with Telegram bot APIs.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，BotFather已经创建好了我们的机器人，并且还为我们提供了机器人的令牌。这个令牌将在我们将机器人与Telegram机器人API连接时使用。
- en: 'Now we can use this bot for conversations using the URL `telegram.me/MadansNewBot`
    or by searching for the name of the bot in the search field, as shown in the following
    screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用这个机器人通过URL `telegram.me/MadansNewBot` 或在搜索字段中搜索机器人的名字来进行对话，如图所示：
- en: '![Setting up a bot account using a Telegram bot - @BotFather](img/image00260.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: After searching once, you select the bot for further conversations.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: To summarize the steps carried out so far, we've created our own account at
    Telegram and also created a basic Telegram bot using BotFather. Our first Telegram
    bot will be a no-brain bot as there is no intelligence built within it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will actually build some basic intelligence with the
    help of Node.js We will build a bot that will tell us the sentiments of our messages.
    But what is sentiment analysis? Let's spend some time in understanding sentiment
    analysis.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: What is sentiment analysis?
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In simple words, sentiment analysis is simply classifying a given term or a
    sentence as positive, negative, or neutral. This is also known as opinion mining
    or deriving the attitude of the person who is writing or speaking.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: In relation to Telegram, sentiment analysis can be extremely useful for media
    monitoring and extracting opinions on some public topics.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Sentiment analysis can be achieved with approaches such as knowledge-based techniques,
    statistical methods, and a combination of both. Knowledge-based techniques classify
    text based on words' affinity to particular emotions, such as happy, sad, and
    so on. Statistical methods leverage elements of machine learning.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: When representing the sentiments of a term or a sentence, words having a negative,
    neutral or positive sentiment to them are given an associated number on a scale
    of -10 to +10, and the level of sentiment or the score is determined at term or
    at sentence level.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Considering the scope of this book, we are keeping the sentiment analysis topic
    quite short.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Telegram bot
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's see how we can use Node.js and Telegram bot APIs in order to create
    our basic Telegram bot. In the previous chapter we've seen how to get Node.js
    installed. For our Telegram bot, we'll follow a very similar process.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating a folder in our local drive from the command prompt
    in order to store our bot:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Assuming we have Node.js and npm installed (if not, please refer to the steps
    in Chapter 1, *The Rise of Bots – Getting the Message Across* ), let''s create
    and initialize our `package.json`, which will store our bot''s dependencies and
    definitions:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once you have gone through the `npm init` options (which are very easy to follow),
    you''ll see something similar to this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Telegram bot](img/image00261.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: In your project folder, you'll see the result, which is your `package.json`
    file.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Telegram bot](img/image00262.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: 'Just like we did in our previous example, we will use **Express** ( [http://expressjs.com](http://expressjs.com)
    ) as our **REST** Node.js framework. We''ll install it and save it to our `package.json`
    file as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once Express has been installed, you should see something like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Telegram bot](img/image00263.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: With Express setup, the next thing to do is to install the `node-telegram-bot-api`
    package. This can be located at [https://www.npmjs.com/package/telegram-bot-api](https://www.npmjs.com/package/telegram-bot-api)
    .
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Express 设置后，接下来要做的就是在项目中安装 `node-telegram-bot-api` 包。这个包可以在 [https://www.npmjs.com/package/telegram-bot-api](https://www.npmjs.com/package/telegram-bot-api)
    找到。
- en: 'In order to install it, run this npm command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装它，运行以下 npm 命令：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should then see something similar to this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似以下的内容：
- en: '![Creating a Telegram bot](img/image00264.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Telegram 机器人](img/image00264.jpeg)'
- en: 'Having done this, the next thing to do is to update your `package.json` in
    order to include the `"engines"` attribute. Open the `package.json` file with
    a text editor and update it as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，接下来要做的事情是更新你的 `package.json` 以包括 `"engines"` 属性。使用文本编辑器打开 `package.json`
    文件，并按以下方式更新它：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Your `package.json` should then look like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 `package.json` 应该如下所示：
- en: '![Creating a Telegram bot](img/image00265.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Telegram 机器人](img/image00265.jpeg)'
- en: With our bot all wired up, we can then focus on creating the core logic for
    our conversations with the bot. Let's create our `app.js` file, which will be
    the entry point to our bot.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的机器人全部设置完毕后，我们可以专注于创建与机器人对话的核心逻辑。让我们创建 `app.js` 文件，这将是我们的机器人的入口点。
- en: 'Our `app.js` should like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `app.js` 应该如下所示：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now let's look at the code snippet line by line. The first thing we do is to
    reference the node package we previously installed using npm.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们逐行查看代码片段。我们首先做的事情是引用我们之前使用 npm 安装的节点包。
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once we have our reference set up, we are now connected to our bot. Remember,
    BotFather has provided a token to our bot for accessing Telegram bot APIs; we
    will be referring to the same token here, as shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置了引用，我们现在已经连接到我们的机器人。记住，BotFather 为我们的机器人提供了一个令牌，以便访问 Telegram 机器人 API；我们将在以下屏幕截图中引用相同的令牌：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we have a handle to interact with our bot, through the token and bot APIs.
    Let''s see how we can start the conversation with our bot. To start a bot, Telegram
    bots use the command `/start`. On entering the start command, my bot should introduce
    itself and also ask us how he can help us. This is achieved using the following
    code snippet:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了通过令牌和机器人 API 与我们的机器人交互的接口。让我们看看我们如何开始与机器人的对话。要启动机器人，Telegram 机器人使用命令 `/start`。输入启动命令后，我的机器人应该自我介绍，并询问我们他如何帮助我们。这是通过以下代码片段实现的：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This basically tells our bot that if a user sends the command `/start`, our
    bot will send message in response to that with the help of `api.onText()`method.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上告诉我们的机器人，如果用户发送命令 `/start`，我们的机器人将通过 `api.onText()` 方法发送消息作为响应。
- en: Now let's run our Node.js program to start our conversation with the bot.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们运行我们的 Node.js 程序以启动与机器人的对话。
- en: '![Creating a Telegram bot](img/image00266.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![创建 Telegram 机器人](img/image00266.jpeg)'
- en: Now let's launch the Telegram web version for your own account.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们启动你的 Telegram 网页版账号。
- en: Conversations with our basic Telegram bot
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与我们的基本 Telegram 机器人对话
- en: 'Search our newly created and Node.js wired bot using its name, as shown in
    the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用其名称搜索我们新创建的并连接 Node.js 的机器人，如图所示：
- en: '![Conversations with our basic Telegram bot](img/image00267.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![与我们的基本 Telegram 机器人对话](img/image00267.jpeg)'
- en: 'Click on the **START** button, and the `/start` command will be sent to our
    bot to start the conversation. Once you''ve done that, you''ll see our bot has
    responded to the `/start` command. Refer to the following screen:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **START** 按钮，并将 `/start` 命令发送到我们的机器人以开始对话。一旦你这样做，你就会看到我们的机器人已经对 `/start`
    命令做出了响应。请参考以下屏幕截图：
- en: '![Conversations with our basic Telegram bot](img/image00268.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![与我们的基本 Telegram 机器人对话](img/image00268.jpeg)'
- en: So, whatever we have written for the `/start` command in our `app.js` has executed
    and, through the Telegram bot APIs, the response is shown to us.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，无论我们在 `app.js` 中为 `/start` 命令编写了什么，它都已被执行，并且通过 Telegram 机器人 API，响应显示给了我们。
- en: Now let's click on the **/help** command or type in `/help` for our bot. Our
    bot will respond to the `/help` command with following response, which we have
    wired into our Node.js program.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们点击 **/help** 命令或输入 `/help` 以启动我们的机器人。我们的机器人将对 `/help` 命令做出以下响应，这是我们将其集成到我们的
    Node.js 程序中的。
- en: '![Conversations with our basic Telegram bot](img/image00269.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![与我们的基本 Telegram 机器人对话](img/image00269.jpeg)'
- en: Since our Node.js program from `app.js` is running behind the scenes, our bot
    is responding to our commands based on what has been programmed in `app.js.`
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的 Node.js 程序 `app.js` 在幕后运行，我们的机器人根据 `app.js` 中编写的程序来响应我们的命令。
- en: Building a sentiment analysis bot
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建情感分析机器人
- en: Having built a very basic Telegram bot, let's build a sentiment analysis bot
    for Telegram. Within the context of Telegram, bots would be useful for content
    or media monitoring. Bots can actually classify terms or sentences that Telegram
    users are sharing with others. Knowing this, we will build a sentiment analysis
    bot using Node.js.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建了一个非常基础的Telegram机器人之后，让我们为Telegram构建一个情感分析机器人。在Telegram的上下文中，机器人对于内容或媒体监控非常有用。机器人实际上可以分类Telegram用户与他人分享的术语或句子。了解这一点后，我们将使用Node.js构建一个情感分析机器人。
- en: For sentiment analysis, we will be using the sentiment package for Node.js.
    Sentiment is a Node.js module that uses the AFINN-111 wordlist to perform sentiment
    analysis on an input text. This package can be located at [https://www.npmjs.com/package/sentiment](https://www.npmjs.com/package/sentiment)
    .
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于情感分析，我们将使用Node.js的情感分析包。Sentiment是一个Node.js模块，它使用AFINN-111词表对输入文本进行情感分析。这个包可以在[https://www.npmjs.com/package/sentiment](https://www.npmjs.com/package/sentiment)找到。
- en: 'In order to install it, let''s determine our code location:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装它，让我们确定我们的代码位置：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And then run this npm command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行以下npm命令：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should then see something similar to this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似以下的内容：
- en: '![Building a sentiment analysis bot](img/image00270.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![构建情感分析机器人](img/image00270.jpeg)'
- en: 'With this, we are ready to wire up our Node.js code to use the sentiment analysis
    package. Let''s open our Node.js code and include the following code line:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就准备好将我们的Node.js代码连接起来，以使用情感分析包。让我们打开我们的Node.js代码，并包含以下代码行：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As we know, our bot has many commands, such as `/start` and `/help`; on similar
    lines, we have an additional command for doing sentiment analysis. This command
    is `/sentiments`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，我们的机器人有许多命令，例如`/start`和`/help`；在类似的基础上，我们还有一个用于情感分析的额外命令。这个命令是`/sentiments`。
- en: The idea here is that, once you send the command `/sentiments` to our bot, the
    bot will confirm your intentions and will ask you to send a term or a sentence.
    Upon receiving a term or a sentence, the bot will carry out sentiment analysis
    with the help of the sentiment package that is wired up in our Node.js program.
    Then bot will reply with the sentiment analysis score.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的想法是，一旦你向我们的机器人发送`/sentiments`命令，机器人将确认你的意图，并要求你发送一个术语或一个句子。在收到一个术语或一个句子后，机器人将使用我们Node.js程序中连接的情感包进行情感分析。然后机器人将回复情感分析得分。
- en: 'Our updated `app.js` should look like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更新的`app.js`应该看起来像这样：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now let's look at the updated `app.js` code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看更新的`app.js`代码。
- en: 'Firstly, we have added a reference to the sentiment package in our basic bot
    code as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在基本机器人代码中添加了对情感包的引用，如下所示：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We also modified the `/start` command to include the new command `/sentiments`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还修改了`/start`命令，以包括新的命令`/sentiments`。
- en: 'Then we added the actual logic of what should happen when the `/sentiments`
    command is sent to the bot. Upon firing up this command, the bot will confirm
    the intention and will ask you to send some text, a term or a sentence using the
    following code line:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们添加了当向机器人发送`/sentiments`命令时应执行的实际逻辑。在触发此命令时，机器人将确认意图，并要求你发送一些文本，一个术语或一个句子，如下所示：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once we send some text to a bot, the bot will reply to our message with the
    sentiment analysis of the text that has been sent. This particular logic is as
    follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们向机器人发送一些文本，机器人将回复我们的消息，包含已发送文本的情感分析。这个特定的逻辑如下：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding code, once the bot receives a text, a call to the `sentiment()`function
    is made and text is passed as `message.text` to get the sentiment.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，一旦机器人收到文本，就会调用`sentiment()`函数，并将文本作为`message.text`传递以获取情感。
- en: 'Sentiments are returned in an object called `sentival`. This `sentival` object
    has both score and comparative values for the sentiment of the text that has been
    passed. These values are returned to the user using the following code lines:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 情感分析结果以一个名为`sentival`的对象返回。这个`sentival`对象包含了已传递文本的情感得分和比较值。这些值通过以下代码行返回给用户：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now let's run our Node.js program to start our conversation with the bot.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们运行我们的Node.js程序，开始与机器人进行对话。
- en: '![Building a sentiment analysis bot](img/image00271.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![构建情感分析机器人](img/image00271.jpeg)'
- en: Now our updated code is running, let me also start my Telegram web version and
    start a conversation with my updated bot.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们更新的代码正在运行，让我也启动我的Telegram网页版，并开始与我的更新版机器人进行对话。
- en: 'I have already searched for and added my bot. The screen should look like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经搜索并添加了我的机器人。屏幕应该看起来像这样：
- en: '![Building a sentiment analysis bot](img/image00272.jpeg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![构建情感分析机器人](img/image00272.jpeg)'
- en: 'Click on the **START** button, and the `/start` command will be sent to our
    bot to start the conversation. Once you''ve done that, you''ll see our bot has
    responded to the `/start` command. The `/start` command''s response is also updated with
    a mention of the newly added command `/sentiments`. Refer to the following screen:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**开始**按钮，`/start`命令将被发送到我们的机器人以开始对话。一旦完成，你会看到我们的机器人已经对`/start`命令做出了回应。`/start`命令的回应中也提到了新添加的命令`/sentiments`。请参考以下屏幕截图：
- en: '![Building a sentiment analysis bot](img/image00273.jpeg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![构建情感分析机器人](img/image00273.jpeg)'
- en: 'Click on the **/sentiments** link from the response from the `/start` command.
    This will send a `/sentiments` command to our bot and the bot will respond as
    follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 点击`/start`命令的响应中的**/sentiments**链接。这将向我们的机器人发送一个`/sentiments`命令，机器人将如下回应：
- en: '![Building a sentiment analysis bot](img/image00274.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![构建情感分析机器人](img/image00274.jpeg)'
- en: So, here, the bot is asking the user to send text as a message; in response
    to that, the bot will share the sentiment of the message sent by the user. Now
    let's write the message `Bots are awesome!` in **Write a message...**, and hit
    enter or click **SEND**. Do not close the message from the bot, which is shown
    as a small popup with a close button.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这里，机器人要求用户发送文本作为消息；作为回应，机器人将分享用户发送的消息的情感。现在让我们在**写消息...**中写下消息`Bots are awesome!`，然后按回车键或点击**发送**。不要关闭机器人显示的小弹出窗口，其中包含一个关闭按钮。
- en: '![Building a sentiment analysis bot](img/image00275.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![构建情感分析机器人](img/image00275.jpeg)'
- en: 'Immediately, the bot will respond with the score and the comparative value
    for the sentiment of your text, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 立即，机器人将回应你文本情感的分析得分和比较值，如下所示：
- en: '![Building a sentiment analysis bot](img/image00276.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![构建情感分析机器人](img/image00276.jpeg)'
- en: So, we entered the text `Bots are awesome!` and, in response to that, the bot
    sent us a sentiment **Score:4** and **Comparative:1.33**. For the text sent to
    the bot, with the score value coming in as positive, the bot is showing us a positive
    opinion.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们输入了文本`Bots are awesome!`，作为回应，机器人给我们发送了一个带有**得分：4**和**比较：1.33**的情感分析结果。对于发送给机器人的文本，得分值为正值，机器人向我们展示了积极的观点。
- en: Now to get the sentiment for a new term, again send a `/sentiments` command
    to our bot.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在要获取新术语的情感，再次向我们的机器人发送`/sentiments`命令。
- en: The bot will again confirm the intentions, and will ask us to share some text.
    Now let's send the text `The food was very bad.` and see what bot returns.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人将再次确认意图，并要求我们分享一些文本。现在让我们发送文本`The food was very bad.`，看看机器人会返回什么。
- en: '![Building a sentiment analysis bot](img/image00277.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![构建情感分析机器人](img/image00277.jpeg)'
- en: We entered the text `The food was very bad`. In response to that, the bot sent
    us a sentiment with **Score:-3** and **Comparative:-0.6**. This way, the bot is
    showing us a negative opinion here from the text.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们输入了文本`The food was very bad`。作为回应，机器人给我们发送了一个带有**得分：-3**和**比较：-0.6**的情感分析结果。这样，机器人向我们展示了文本中的负面观点。
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have had an interesting journey learning how to build a Telegram bot and
    how we can have a great conversational experience with the intelligence built
    in to it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在学习如何构建Telegram机器人以及如何利用内置的智能实现良好的对话体验的过程中度过了一段有趣的旅程。
- en: To summarize, we have seen how to create a Telegram account if you are new to
    Telegram. Further to that, we have also used an interesting way to create our
    own bot, using BotFather. BotFather is a Telegram bot that rules all the other
    Telegram bots.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们看到了如何为Telegram新手创建账户。在此基础上，我们还使用了一种有趣的方法，通过BotFather创建我们自己的机器人。BotFather是一个管理所有其他Telegram机器人的Telegram机器人。
- en: After creating our bot, we wired it in to the Node.js program using the npm
    package and built some basic intelligence for our bot chat.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建我们的机器人后，我们使用npm包将其集成到Node.js程序中，并为我们的机器人聊天构建了一些基本智能。
- en: Finally, we wanted our bot to provide sentiment analysis, so we looked at the
    very basics of sentiment analysis. To carry out sentiment analysis, we used the
    npm package for sentiment analysis and enriched our basic bot to provide us with
    sentiment analysis. Our bot is mainly of the type that needs a chat session opening
    and then leverages the bot functionalities by sending it commands. There is also
    another Telegram bot type, which is the inline bot. Exploring Telegram inline
    bots further is left with the reader.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望我们的机器人能够提供情感分析功能，因此我们研究了情感分析的基础知识。为了进行情感分析，我们使用了npm的情感分析包，并丰富了我们基本的机器人，使其能够提供情感分析。我们的机器人主要是那种需要开启聊天会话然后通过发送命令来利用机器人功能的一种类型。还有一种Telegram机器人类型，即内联机器人。进一步探索Telegram内联机器人留给了读者。
- en: Hopefully, this chapter has given you some insight on Telegram bots, and how
    we can enhance them using Node.js and Telegram bot APIs to provide an enhanced
    conversational experience within Telegram. In the next chapter, we will explore
    how to build a Slack bot. For those who do not know Slack, Slack is simply a real-time
    messaging app specifically for team collaboration. We will actually be building
    a bot for Slack, which will help us to locate documents in the document repository
    based on the user's request.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这一章能让你对Telegram机器人有所了解，以及我们如何利用Node.js和Telegram机器人API来增强它们，从而在Telegram内提供更丰富的对话体验。在下一章中，我们将探讨如何构建一个Slack机器人。对于那些不了解Slack的人来说，Slack是一款专门为团队协作而设计的实时消息应用。我们实际上将构建一个Slack机器人，它将帮助我们根据用户请求在文档库中定位文档。
- en: Keep exploring further.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 继续探索吧。
