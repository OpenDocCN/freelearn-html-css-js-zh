- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Working with the Node.js Tools
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Node.js 工具
- en: 'In this chapter, I explain the simple process of getting started with **Node.js**,
    beginning with the simple steps that are required to prepare for development.
    I explain how to execute JavaScript code using Node.js and then I introduce the
    real power in Node.js development: the **Node Package Manager** (**npm**). `npm`
    is the tool that does most of the work during development, taking responsibility
    for everything from downloading and installing JavaScript packages, reporting
    on security vulnerabilities, and running development commands. *Table 2.1* summarizes
    the chapter.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我解释了开始使用 **Node.js** 的简单过程，从准备开发所需的基本步骤开始。我解释了如何使用 Node.js 执行 JavaScript
    代码，然后介绍了 Node.js 开发的真正力量：**Node 包管理器**（**npm**）。`npm` 是在开发过程中做大部分工作的工具，负责从下载和安装
    JavaScript 包、报告安全漏洞到运行开发命令的所有事情。*表 2.1* 总结了本章内容。
- en: 'Table 2.1: Chapter summary'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.1：章节总结
- en: '| Problem | Solution | Listing |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 问题 | 解决方案 | 列表 |'
- en: '| Execute a JavaScript file. | Use the `node` command. | *5* |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 执行 JavaScript 文件。 | 使用 `node` 命令。 | *5* |'
- en: '| Initialize a project for use with JavaScript packages. | Use the `npm init`
    command. | *6* |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 为使用 JavaScript 包的项目初始化。 | 使用 `npm init` 命令。 | *6* |'
- en: '| Add a JavaScript package to a project. | Use the `npm install` command. Use
    the `--save-dev` argument for development tool packages. | *7, 8* |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 向项目中添加 JavaScript 包。 | 使用 `npm install` 命令。使用 `--save-dev` 参数为开发工具包。 | *7,
    8* |'
- en: '| List the packages in a project. | Use the `npm list` command. | *9, 10* |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 列出项目中使用的包。 | 使用 `npm list` 命令。 | *9, 10* |'
- en: '| List the reported security vulnerabilities in the packages used by a project.
    | Use the `npm audit` command. | *N/A* |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 列出项目中使用的包报告的安全漏洞。 | 使用 `npm audit` 命令。 | *N/A* |'
- en: '| Execute the code in a package. | Add the `node_modules/.bin` folder to the
    path or use the `npx` command. | *11–17* |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 在包中执行代码。 | 将 `node_modules/.bin` 文件夹添加到路径或使用 `npx` 命令。 | *11–17* |'
- en: '| Start the development tools used by a project. | Define commands in the scripts
    section of the `package.json` file and use the `npm start` or `npm run` commands.
    | *18–22* |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 启动项目使用的开发工具。 | 在 `package.json` 文件的脚本部分定义命令，并使用 `npm start` 或 `npm run` 命令。
    | *18–22* |'
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The key step to prepare for Node.js development is, as you would expect, to
    install Node.js and its supporting tools. The version of Node.js I have used in
    this book is 20.9.0, which is the **Long-Term Support** (**LTS**) version at the
    time of writing. There may be later versions available by the time you read this,
    but you should stick to this release for the examples in this book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 准备 Node.js 开发的关键步骤，正如你所预期的，是安装 Node.js 及其支持工具。我在本书中使用的 Node.js 版本是 20.9.0，这是写作时的
    **长期支持**（**LTS**）版本。在你阅读本书时，可能会有更晚的版本可用，但你应该坚持使用这个版本中的示例。
- en: 'A complete set of installers for Node.js version 20.10.0 is available at [https://nodejs.org/download/release/v20.10.0](https://nodejs.org/download/release/v20.10.0).
    Download and run the installer for your platform and ensure the **npm package
    manager** and the **Add to PATH** options are checked, as shown in *Figure 2.1*:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 版本 20.10.0 的完整安装程序可在 [https://nodejs.org/download/release/v20.10.0](https://nodejs.org/download/release/v20.10.0)
    获取。下载并运行适用于您平台的安装程序，确保已选中 **npm 包管理器** 和 **添加到 PATH** 选项，如图 *图 2.1* 所示：
- en: '![A screenshot of a computer setup  Description automatically generated](img/B21959_02_01.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![计算机设置的截图 自动生成描述](img/B21959_02_01.png)'
- en: 'Figure 2.1: Installing Node.js'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1：安装 Node.js
- en: 'When the installation is complete, open a new command prompt and run the command
    shown in *Listing 2.1*:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，打开一个新的命令提示符并运行 *列表 2.1* 中显示的命令：
- en: 'Listing 2.1: Running Node.js'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.1：运行 Node.js
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If the installation has been successful, you will see the following version
    number displayed:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装成功，你将看到以下版本号显示：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The installer should have set up the package manager, which plays a key role
    in Node.js development. Run the command shown in *Listing 2.2* to ensure the package
    manager is working:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序应该已经设置了包管理器，这在 Node.js 开发中起着关键作用。运行 *列表 2.2* 中显示的命令以确保包管理器正在运行：
- en: 'Listing 2.2: Running the package manager'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.2：运行包管理器
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If the installation was successful, you will see the following version number:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装成功，你将看到以下版本号：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Installing Git
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Git
- en: Some packages depend on **Git**, which is a popular version control system.
    Download the installer for your platform from [https://git-scm.com/downloads](https://git-scm.com/downloads)
    and follow the installation instructions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一些包依赖于流行的版本控制系统 **Git**。从 [https://git-scm.com/downloads](https://git-scm.com/downloads)
    下载你平台的安装程序，并按照安装说明进行操作。
- en: 'Once you have completed the installation, use a command prompt to run the command
    shown in *Listing 2.3* to check that Git is working. You may have to manually
    configure the executable paths:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，使用命令提示符运行 *列表 2.3* 中所示的命令以检查 Git 是否正常工作。你可能需要手动配置可执行路径：
- en: 'Listing 2.3: Checking Git'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.3：检查 Git
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At the time of writing, the latest version of Git for Windows and Linux is 2.42.0.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Git for Windows 和 Linux 的最新版本是 2.42.0。
- en: Selecting a code editor
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择代码编辑器
- en: An editor is required to write the code that will be executed by Node.js, and
    any editor that supports JavaScript and TypeScript can be used to follow the examples
    in this book. If you don’t already have a preferred editor, then Visual Studio
    Code ([https://code.visualstudio.com](https://code.visualstudio.com)) has become
    the most popular editor because it is good (and free), and it is the editor that
    I used while writing this book.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一个编辑器来编写 Node.js 将要执行的代码，任何支持 JavaScript 和 TypeScript 的编辑器都可以用来跟随本书中的示例。如果你还没有首选的编辑器，那么
    Visual Studio Code ([https://code.visualstudio.com](https://code.visualstudio.com))
    已经成为最受欢迎的编辑器，因为它既好又免费，而且我在编写本书时使用的也是这个编辑器。
- en: If you are using Visual Studio Code, run the command code to start the editor
    or use the program icon created during installation, and you will see the welcome
    screen shown in *Figure 2.2*. (You may need to add Visual Studio Code to your
    command prompt path before using the command code.)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Visual Studio Code，运行命令 code 以启动编辑器或使用安装过程中创建的程序图标，你将看到 *图 2.2* 中所示的欢迎屏幕。（在使用命令
    code 之前，你可能需要将 Visual Studio Code 添加到你的命令提示符路径中。）
- en: '![](img/B21959_02_02.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B21959_02_02.png]'
- en: 'Figure 2.2: The Visual Studio Code Welcome screen'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2：Visual Studio Code 欢迎屏幕
- en: Using Node.js
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Node.js
- en: 'The entire purpose of Node.js is to execute JavaScript code. Open a command
    prompt, navigate to a convenient location, and create a folder named `tools`.
    Add a file named `hello.js` to the `tools` folder, with the content shown in *Listing
    2.4*:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 的整个目的就是执行 JavaScript 代码。打开命令提示符，导航到一个方便的位置，创建一个名为 `tools` 的文件夹。将一个名为
    `hello.js` 的文件添加到 `tools` 文件夹中，其内容如 *列表 2.4* 所示：
- en: 'Listing 2.4: The Contents of the hello.js File in the tools Folder'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.4：工具文件夹中 hello.js 文件的内容
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The Node.js API has some features that are also provided by modern JavaScript
    browsers, including the `console.log` method, which writes a message to the console.
    Run the command shown in *Listing 2.5* in the `tools` folder to execute the JavaScript
    code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js API 有一些功能也由现代 JavaScript 浏览器提供，包括 `console.log` 方法，该方法将消息写入控制台。在 `tools`
    文件夹中运行 *列表 2.5* 中所示的命令以执行 JavaScript 代码：
- en: 'Listing 2.5: Executing the JavaScript Code'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.5：执行 JavaScript 代码
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `node` command starts the Node.js runtime and executes the specified JavaScript
    file, producing the following output:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`node` 命令启动 Node.js 运行时并执行指定的 JavaScript 文件，产生以下输出：'
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That’s all there is to know about executing JavaScript code. The rest of the
    functionality that Node.js provides is delivered through an API, which is described
    in the rest of this book, starting with *Chapter 4*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 关于执行 JavaScript 代码，这就是所有需要了解的内容。Node.js 提供的其他功能都是通过 API 传递的，这些 API 在本书的其余部分进行了描述，从
    *第 4 章* 开始。
- en: Understanding the npm tool
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 npm 工具
- en: The `node` command isn’t often used directly, and most development activities
    rely on the `npm` tool, which is installed alongside Node.js. The headline `npm`
    feature is that it provides access to the `npm` repository ([npmjs.com](http://npmjs.com)),
    which contains an incredible collection of open-source JavaScript packages that
    can be added to projects. `npm` has grown from its original purpose to add related
    features and has become an integral part of working with Node.js, as I describe
    in the following sections. For quick reference, *Table 2.2* lists the most useful
    commands supported by `npm`, which is the package manager command.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`node` 命令通常不直接使用，大多数开发活动都依赖于与 Node.js 一起安装的 `npm` 工具。`npm` 的主要功能是提供对 `npm`
    仓库 ([npmjs.com](http://npmjs.com)) 的访问，该仓库包含了一个令人难以置信的开源 JavaScript 包集合，可以将它们添加到项目中。`npm`
    已经从其原始目的扩展到添加相关功能，并已成为使用 Node.js 不可或缺的一部分，正如我在以下章节中所描述的。为了快速参考，*表 2.2* 列出了 `npm`
    支持的最有用的命令，`npm` 是包管理器命令。'
- en: '| Name | Description |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '|'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '| This command creates a `package.json` file, which is used to keep track of
    a project’s packages. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 此命令创建一个 `package.json` 文件，用于跟踪项目的包。 |'
- en: '|'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '| This command adds a package to the project. The `--save-dev` argument is
    used to install packages that are used during development but are not part of
    the application. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 此命令将包添加到项目中。`--save-dev` 参数用于安装开发期间使用但不是应用程序一部分的包。 |'
- en: '|'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '| This command lists all of the packages that have been added to the project.
    The `--all` argument includes package dependencies in the output. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 此命令列出已添加到项目中的所有包。`--all` 参数将包依赖项包含在输出中。 |'
- en: '|'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '| This command reports on security vulnerabilities that have been reported
    in the packages used in the project. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 此命令报告项目中使用的包中报告的安全漏洞。 |'
- en: '|'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '| This command executes the `start` script defined in the `package.json` file.
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 此命令执行在 `package.json` 文件中定义的 `start` 脚本。 |'
- en: '|'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '| This command executes the `stop` script defined in the `package.json` file.
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 此命令执行在 `package.json` 文件中定义的 `stop` 脚本。 |'
- en: '|'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '| This command executes the `restart` script defined in the `package.json`
    file. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 此命令执行在 `package.json` 文件中定义的 `restart` 脚本。 |'
- en: '|'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE15]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '| This command executes the `test` script defined in the `package.json` file.
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 此命令执行在 `package.json` 文件中定义的 `test` 脚本。 |'
- en: '|'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '| This command executes custom commands defined in the `package.json` file.
    |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 此命令执行在 `package.json` 文件中定义的自定义命令。 |'
- en: '|'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '| This command executes a package. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 此命令执行一个包。 |'
- en: 'Table 2.2: Useful `npm` commands'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.2：有用的 `npm` 命令
- en: Initializing a project
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化项目
- en: '`npm` relies on a configuration file named `package.json`, which describes
    the development project, keeps track of the packages on which it depends, and
    stores configuration settings related to packages. Run the command shown in *Listing
    2.6* in the `tools` folder to create the `package.json` file for the example project:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm` 依赖于一个名为 `package.json` 的配置文件，该文件描述了开发项目，跟踪它所依赖的包，并存储与包相关的配置设置。在 `tools`
    文件夹中运行 *列表 2.6* 中显示的命令以创建示例项目的 `package.json` 文件：'
- en: 'Listing 2.6: Initializing the project'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.6：初始化项目
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `init` command prompts the user for the values to put in the `package.json`
    file, but the `-y` argument selects the default values, which are suitable for
    most projects, including the example for the chapter. The `init` command creates
    a `package.json` file with the following contents:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`init` 命令提示用户输入要放入 `package.json` 文件中的值，但 `-y` 参数选择默认值，这些默认值适用于大多数项目，包括本章的示例。`init`
    命令创建一个包含以下内容的 `package.json` 文件：'
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Most of the initial contents of the `package.json` file describe the project
    so that it can be published to a package registry, which is why there are settings
    for version numbers and licenses. Additional settings will be added to the file
    in later sections, and you can see the complete list of supported settings at
    [https://docs.npmjs.com/cli/v10/configuring-npm/package-json](https://docs.npmjs.com/cli/v10/configuring-npm/package-json).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 文件的大部分初始内容描述了项目，以便它可以发布到包注册表，这就是为什么会有版本号和许可证的设置。在后面的部分中，将向文件中添加更多设置，您可以在
    [https://docs.npmjs.com/cli/v10/configuring-npm/package-json](https://docs.npmjs.com/cli/v10/configuring-npm/package-json)
    查看支持的设置完整列表。'
- en: Managing packages
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理包
- en: The headline `npm` feature is the management of the packages used in a project.
    This may not seem like a big deal, but one compelling aspect of Node.js development
    is the immense library of open-source packages, which are available in a public
    registry ([npmjs.com](http://npmjs.com)). `npm` provides access to the registry,
    takes care of downloading and installing packages, and manages dependencies between
    packages to avoid conflicts.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm` 的主要功能是管理项目中使用的包。这可能看起来不是什么大事，但 Node.js 开发的一个令人信服的方面是庞大的开源包库，这些包在公共注册表中可用
    ([npmjs.com](http://npmjs.com))。`npm` 提供对注册表的访问，负责下载和安装包，并管理包之间的依赖关系以避免冲突。'
- en: 'Packages are added to the project with the `npm install` command. Run the command
    shown in *Listing 2.7* in the `tools` folder to add a package to the example project:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `npm install` 命令将包添加到项目中。在 `tools` 文件夹中运行 *列表 2.7* 中显示的命令以将包添加到示例项目：
- en: 'Listing 2.7: Adding a package'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.7：添加包
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `npm install` command adds a package to the project and the argument specifies
    the name of the package (`bootstrap`, in this case), followed by the `@` character,
    followed by a version number. You can omit the `@` character and the version number,
    in which case, the latest version will be installed, but it is good practice to
    be specific when installing a package.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm install` 命令将包添加到项目中，参数指定了包的名称（在本例中为 `bootstrap`），后面跟着一个 `@` 符号，然后是版本号。您可以省略
    `@` 符号和版本号，在这种情况下，将安装最新版本，但指定安装包时最好具体指定。'
- en: 'The command in *Listing 2.7* adds the excellent Bootstrap CSS/JavaScript package
    to the project. As part of this process, `npm` looks at the packages that Bootstrap
    depends on and installs them, too. Once the command has completed, you will see
    a new section in the `package.json` file:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2.7* 中的命令将优秀的 Bootstrap CSS/JavaScript 包添加到项目中。作为此过程的一部分，`npm` 会查看 Bootstrap
    依赖的包并将它们也安装上。一旦命令执行完成，您将在 `package.json` 文件中看到一个新部分：'
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `dependencies` section is used to keep track of the packages used in the
    project. The version number in the `packages.json` file is prefixed with a caret
    (the `^` character), which is part of the `npm` system for specifying ranges of
    version numbers, as described in *Table 2.3*:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`dependencies` 部分用于跟踪项目中使用的包。`package.json` 文件中的版本号前加上一个撇号（`^` 字符），这是 `npm`
    系统用于指定版本号范围的组成部分，如 *表 2.3* 中所述：'
- en: '| Name | Description |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '| `*` | Using an asterisk accepts any version of the package to be installed.
    |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `*` | 使用星号可以接受要安装的包的任何版本。|'
- en: '| `5.3.0` | Expressing a version number directly will accept only the package
    with the exact matching version number, e.g., `5.3.0`. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `5.3.0` | 直接表达版本号将只接受与精确匹配的版本号的包，例如，`5.3.0`。|'
- en: '| `>5.3.0` `>=3.3.0` | Prefixing a version number with `>` or `>=` accepts
    any version of the package that is greater than or equal to a given version. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `>5.3.0` `>=3.3.0` | 在版本号前加上 `>` 或 `>=` 可以接受任何大于或等于给定版本的包版本。|'
- en: '| `<5.3.0` `<=5.3.0` | Prefixing a version number with `<` or `<=` accepts
    any version of the package that is less than or equal to a given version. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `<5.3.0` `<=5.3.0` | 在版本号前加上 `<` 或 `<=` 可以接受任何小于或等于指定版本的包版本。|'
- en: '| `~5.3.0` | Prefixing a version number with a tilde (the `~` character) accepts
    versions to be installed even if the patch level number (the last of the three
    version numbers) doesn’t match. For example, specifying `~5.3.0` will accept version
    `5.3.1` or `5.3.2` (which would contain patches to version `5.3.0`) but not version
    `5.4.0` (which would be a new minor release). |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `~5.3.0` | 在版本号前加上波浪号（`~` 字符）可以接受安装的版本，即使补丁级别数字（三个版本号中的最后一个）不匹配。例如，指定 `~5.3.0`
    将接受版本 `5.3.1` 或 `5.3.2`（这将包含对版本 `5.3.0` 的补丁），但不接受版本 `5.4.0`（这将是一个新的次要版本）|'
- en: '| `^5.3.0` | Prefixing a version number with a caret (the `^` character) will
    accept versions even if the minor release number (the second of the three version
    numbers) or the patch number doesn’t match. For example, specifying `^5.3.0` will
    allow versions `5.4.0` and `5.5.0` but not version `6.0.0`. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `^5.3.0` | 在版本号前加上撇号（`^` 字符）将接受版本，即使次要版本号（三个版本号中的第二个）或补丁号不匹配。例如，指定 `^5.3.0`
    将允许版本 `5.4.0` 和 `5.5.0`，但不允许版本 `6.0.0`。|'
- en: 'Table 2.3: `npm` version numbers'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 表 2.3：`npm` 版本号
- en: '**Using exact version numbers**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用精确版本号**'
- en: When I specified `bootstrap@5.3.0` in *Listing 2.7*, `npm` gave itself some
    wiggle room by interpreting the version as `^5.3.0`. The process of resolving
    dependencies and conflicts between packages is a complex process, which is made
    easier by broadening the range of acceptable versions. This approach relies on
    the idea that version `5.4.0`, say, will be compatible with version `5.3.0` and
    won’t contain breaking changes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在 *清单 2.7* 中指定 `bootstrap@5.3.0` 时，`npm` 通过将版本解释为 `^5.3.0` 给自己留了一些余地。解决包之间依赖和冲突的过程是一个复杂的过程，通过扩大可接受版本的范围可以简化这个过程。这种方法依赖于这样的想法，即版本
    `5.4.0`（例如），将与版本 `5.3.0` 兼容，并且不会包含破坏性更改。
- en: 'If you can’t rely on packages to maintain compatibility, then you can configure
    `npm` to use exact version numbers by running this command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不能依赖包来维护兼容性，那么您可以配置 `npm` 使用精确版本号，通过运行此命令：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`npm` will only use the versions that you specify, but the trade-off is that
    resolving dependencies and version conflicts between packages may be more difficult.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm` 将仅使用您指定的版本，但代价是解决包之间的依赖和版本冲突可能更加困难。'
- en: Packages are stored in the `node_modules` folder, which is created automatically.
    `npm` creates a folder for each package that it downloads, and there can be a
    large number of folders as packages and their dependencies are resolved.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 包存储在 `node_modules` 文件夹中，该文件夹是自动创建的。`npm` 为它下载的每个包创建一个文件夹，随着包及其依赖项的解决，文件夹的数量可能会很多。
- en: To ensure that dependencies are resolved consistently, `npm` creates the `package-lock.json`
    file, which contains a complete list of the packages that have been installed,
    along with specific version numbers.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保依赖项得到一致解决，`npm` 创建了 `package-lock.json` 文件，其中包含已安装的包的完整列表以及具体的版本号。
- en: Installing development packages
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装开发包
- en: 'The `dependencies` section of the `package.json` file is for the packages that
    the application needs to run. The `npm` command can also be used to add packages
    that are only required during development, such as compilers and debuggers. Run
    the command shown in *Listing 2.8* in the `tools` folder to add development packages
    to the project:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 文件的 `dependencies` 部分用于存放应用程序运行所需的包。`npm` 命令还可以用来添加仅在开发期间需要的包，例如编译器和调试器。运行
    `tools` 文件夹中显示的 *清单 2.8* 命令，将开发包添加到项目中：'
- en: 'Listing 2.8: Adding a development package to the example project'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单 2.8*：将开发包添加到示例项目'
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `--save-dev` argument specifies a development package, and this command
    installs two packages that are required only during development. The `typescript`
    package includes the TypeScript compiler, which is used to compile TypeScript
    code into JavaScript that can be executed by Node.js. The `tsc-watch` package
    is a useful add-on that monitors TypeScript files for changes and automatically
    compiles and executes them.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`--save-dev` 参数指定了一个开发包，此命令安装了仅在开发期间需要的两个包。`typescript` 包包括 TypeScript 编译器，用于将
    TypeScript 代码编译成 Node.js 可以执行的 JavaScript。`tsc-watch` 包是一个有用的附加组件，它可以监视 TypeScript
    文件的变化，并自动编译和执行它们。'
- en: 'Examine the `package.json` file and you will see a new configuration section:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 `package.json` 文件，你会看到一个新的配置部分：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `devDependencies` section keeps track of the development packages, which
    don’t need to be included when the application is prepared for deployment. The
    new section contains entries for the packages specified by the command in *Listing
    2.8*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`devDependencies` 部分用于跟踪开发包，当应用程序准备部署时，这些包不需要被包含。新的部分包含了 *清单 2.8* 中命令指定的包。'
- en: '**Choosing packages and tools**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**选择包和工具**'
- en: JavaScript benefits from a broad and dynamic ecosystem of open-source packages
    that solve just about any problem you might encounter. There is so much choice
    that it can be difficult to decide which packages to use, especially since there
    is a constant flow of online articles claiming that a particular new package is
    a hot way to build applications.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 从一个广泛且动态的开源包生态系统中受益，这些包可以解决你可能会遇到的几乎所有问题。选择如此之多，以至于很难决定使用哪些包，尤其是由于不断有在线文章声称某个新的包是构建应用程序的热门方式。
- en: The sad fact is most projects die from a lack of support. Someone, somewhere,
    becomes frustrated with the way that a particular package works and decides to
    write their own replacement. They realize that other people may benefit and altruistically
    decide to publish their code for anyone to use. Most of the time, that’s the end
    of the story, either because not many other people encounter the same frustrations
    or because the new package solves the problem in a way that doesn’t suit other
    projects.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 令人遗憾的是，大多数项目因缺乏支持而失败。某个人，在某个地方，对某个包的工作方式感到沮丧，并决定编写自己的替代品。他们意识到其他人可能也会从中受益，并利他地决定将他们的代码发布给任何人使用。大多数情况下，这就是故事的结局，要么是因为没有多少人遇到相同的挫折，要么是因为新包以不适合其他项目的方式解决了问题。
- en: In many ways, that’s the best outcome – at least for the original developer
    – because as soon as a package starts to get users, the developer will start to
    get demands for fixes, features, and general support. The idea of open-source
    packages is that everyone pitches in, but that often doesn’t happen. The burdens
    on the package developer can be substantial, user demands can be endless and aggressive,
    and the amount of – unpaid – work can get out of hand. Many packages that start
    to become popular are abandoned at this point because the original developer can’t
    cope with the maintenance and no one pitches in to help.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，这是最好的结果——至少对于原始开发者来说是这样——因为一旦一个包开始获得用户，开发者就会开始收到修复、功能和一般支持的请求。开源包的想法是大家共同参与，但这种情况往往并不发生。包开发者的负担可能会很大，用户需求可能无限且具有侵略性，而且——未付费的——工作量可能会失控。许多开始变得流行的包在这个时候就会被放弃，因为原始开发者无法应对维护工作，而且没有人愿意伸出援手。
- en: A small number of packages make it past this point. The original developer successfully
    enlists help in fixing problems and writing new features and puts the package
    onto a project-like footing. The original developer may move on to other projects,
    but the package becomes important enough that someone else is willing to take
    on the task and the project continues. At this point, the package matures, can
    be widely used, and almost always becomes the unfashionable approach that attracts
    the ire of all those online articles.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 只有少数包能够超越这个阶段。原始开发者成功地招募到帮助解决问题和编写新功能，并将包置于类似项目的地位。原始开发者可能会转向其他项目，但这个包变得足够重要，以至于其他人愿意承担这项任务，项目得以继续。在这个阶段，包成熟了，可以广泛使用，并且几乎总是成为那些在线文章中引起所有人愤怒的不时尚的方法。
- en: My advice is to choose packages that suit the type of project you are working
    on. For mainstream commercial development, I recommend using packages that have
    made it past these hurdles and become well-established and well-maintained. These
    are the packages that have high weekly download numbers (which you can see on
    `npm.js`), which are updated regularly, and have an engaged team that responds
    to issues and queries. These are the packages that will continue to be supported
    throughout the life of *your* project, allowing you to deliver your features on
    a solid platform. It is this type of package that I have used throughout this
    book.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我的建议是选择适合你正在进行的项目的包。对于主流的商业开发，我推荐使用那些已经克服了这些障碍并成为稳定且维护良好的包。这些包每周的下载量很高（你可以在
    `npm.js` 上看到），定期更新，并且有一个积极参与并回应问题和查询的团队。这些包将在你的项目生命周期内持续得到支持，让你能够在稳固的平台之上交付你的特性。正是这类包，我在整本书中都在使用。
- en: For hobby and experimental projects, I recommend using the less well-established
    packages. These won’t be as well-supported and you will encounter more problems
    and do more work to get everything working, but you will learn more, and you may
    have more fun.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对于爱好和实验性项目，我建议使用不太成熟的包。这些包的支持可能不会那么好，你将遇到更多问题，需要做更多工作才能让一切正常运行，但你将学到更多，也许会更有趣。
- en: Regardless of how you choose packages, remember that you are benefiting from
    the altruism of others. If you can, then contribute to the packages you use. Just
    about every package has a list of bugs waiting to be fixed, which is a good way
    to get involved. If you don’t feel confident contributing code, then consider
    making a financial contribution. Many projects accept donations, and even the
    largest and most widely used packages are managed by foundations that welcome
    individual and corporate supporters.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你如何选择包，记住你正在受益于他人的无私奉献。如果你可以的话，那么就为使用的包做出贡献。几乎每个包都有一个等待修复的bug列表，这是一个参与的好方法。如果你不自信贡献代码，那么可以考虑进行财务捐助。许多项目接受捐赠，甚至最大的和最广泛使用的包也由接受个人和公司支持者的基金会管理。
- en: Listing packages
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列出包
- en: 'You may only rely on a small number of packages in a project but each of those
    packages has dependencies and it is easy to end up with hundreds of small packages
    in a project, each of which contributes a small amount of functionality. To see
    the set of packages that have been added to the project, run the command shown
    in *Listing 2.9* in the `tools` folder:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在一个项目中只依赖少数几个包，但每个包都有依赖项，很容易在项目中积累成百上千个小包，每个包都贡献了一小部分功能。要查看已添加到项目中的包集，请在
    `tools` 文件夹中运行 *列表 2.9* 中显示的命令：
- en: 'Listing 2.9: Listing the installed packages'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.9：列出已安装的包
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output corresponds to the `npm install` commands used in earlier sections
    of this chapter, although you may see slightly different version numbers:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 输出对应于本章早期部分使用的 `npm install` 命令，尽管你可能看到略有不同的版本号：
- en: '[PRE26]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Behind the scenes, `npm` has inspected these packages to discover their dependencies
    and installed those packages as well, which can be seen by running the command
    shown in *Listing 2.10* in the `tools` folder:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，`npm` 检查了这些包以发现它们的依赖项，并安装了这些包，这可以通过在 `tools` 文件夹中运行 *清单 2.10* 命令来查看：
- en: 'Listing 2.10: Listing packages and dependencies'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 清单 2.10：列出包和依赖项
- en: '[PRE27]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `--all` argument tells `npm` to list dependencies as well and produces
    output similar to the following, although you may see different details:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`--all` 参数告诉 `npm` 列出依赖项，并产生类似于以下内容的输出，尽管你可能看到不同的细节：'
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: You may see small differences when you run this command. Most projects rely
    on a deep tree of packages, and `npm` takes care of resolving the dependencies
    for each of them and automatically downloading all the packages that are required.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行此命令时，你可能会看到一些细微的差异。大多数项目依赖于一个深层的包树，`npm` 会负责解决每个包的依赖项，并自动下载所有必需的包。
- en: Checking for package security vulnerabilities
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查包安全漏洞
- en: The large number of JavaScript packages in a project makes it difficult to know
    exactly which packages you are using and whether those packages may have reported
    security vulnerabilities.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 项目中大量的 JavaScript 包使得难以确切知道你正在使用哪些包，以及这些包是否报告了安全漏洞。
- en: 'To address this issue, package repositories maintain a list of known problems.
    As `npm` resolves package dependencies, it checks all of the packages that it
    is installing against the vulnerabilities list and emits a warning if it finds
    any problems. As an example, here is a command that installs a package whose dependencies
    contain a vulnerability:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，包仓库维护了一个已知问题的列表。当 `npm` 解决包依赖项时，它会检查它正在安装的所有包与漏洞列表，如果发现任何问题，则发出警告。以下是一个安装包含漏洞的依赖项的包的命令示例：
- en: '[PRE29]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This command may not have the same effect by the time this book is published
    because of the dynamic nature of JavaScript package dependencies, but when I ran
    this command, I received the following response:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 JavaScript 包依赖项的动态性质，此命令在本书出版时可能不会产生相同的效果，但当我运行此命令时，我收到了以下响应：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`npm` has identified three security issues in the packages that have been installed.
    For more details, I ran this command:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm` 已经在已安装的包中识别出三个安全问题。有关更多详细信息，我运行了以下命令：'
- en: '[PRE31]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `npm audit` command reports on potential problems. In this case, there
    is an issue with versions 7.0.0 to 7.5.1 with a package named `semver`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm audit` 命令报告潜在问题。在这种情况下，存在一个名为 `semver` 的包，其版本号在 7.0.0 到 7.5.1 之间存在问题：'
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The output provides a URL where details can be found and the suggestion that
    installing a later version of the top-level package – the one added by the `npm
    install` command – would fix the problem, albeit by introducing a breaking change
    that may stop existing code from working.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 输出提供了一个可以找到详细信息的 URL，并建议安装顶级包的较新版本——由 `npm install` 命令添加的包——可以修复问题，尽管这可能会引入破坏性更改，可能导致现有代码无法工作。
- en: There is an `npm audit fix` command that attempts to move to fixed versions
    of packages but that can cause problems with deeply nested dependencies and should
    be used with caution.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一个 `npm audit fix` 命令，它试图将包移动到已修复的版本，但可能会与深度嵌套的依赖项发生问题，因此应谨慎使用。
- en: For the packages used in this book, you should use the versions I have specified,
    even if there are warnings about security vulnerabilities, to ensure the examples
    work as expected. For real projects, you should assess each reported vulnerability
    and figure out whether moving to a patched package is possible without breaking
    code. It won’t always be possible to move away from all vulnerable packages without
    making corresponding changes in the project, and only you can decide what is sensible
    for your projects.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书中使用的包，你应该使用我指定的版本，即使有关于安全漏洞的警告，也要确保示例按预期工作。对于真实项目，你应该评估每个报告的漏洞，并确定是否可以通过不破坏代码的方式移动到修补过的包。在项目中进行相应的更改后，可能并不总是能够完全移除所有有漏洞的包，只有你自己才能决定对你项目来说什么是合理的。
- en: To be clear, I am not advising you to ignore security warnings. I am saying
    that not all warnings are for problems that are likely to occur in all projects
    and there will be times when you might decide to stick with a vulnerable package
    because the risk to your project is low and the amount of work required to upgrade
    a package is substantial. You might also form the view that problems with developer
    packages are less of a risk because those packages are not included when the project
    is deployed.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清楚起见，我并不是建议你忽略安全警告。我是在说，并非所有警告都是针对所有项目中可能发生的问题，而且有时你可能会决定坚持使用有漏洞的包，因为对你的项目风险较低，并且升级包所需的工作量很大。你也可能会形成这样的观点，即开发者包的问题风险较小，因为这些包在项目部署时不会被包括在内。
- en: Executing packages
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行包
- en: Some packages include shell scripts that can be used to execute the package
    features, and these are installed in the `node_modules/.bin` folder. The package
    added in *Listing 2.10*, for example, includes a `tsc` script, which starts the
    TypeScript compiler. Add a file named `message.ts` to the `tools` folder, with
    the content shown in *Listing 2.11*. (The `ts` file extension denotes a TypeScript
    file.)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 一些包包括可以用来执行包功能的外壳脚本，这些脚本安装在 `node_modules/.bin` 文件夹中。例如，*列表 2.10* 中添加的包包含一个
    `tsc` 脚本，该脚本启动 TypeScript 编译器。将一个名为 `message.ts` 的文件添加到 `tools` 文件夹中，内容如 *列表 2.11*
    所示。（`ts` 文件扩展名表示 TypeScript 文件。）
- en: 'Listing 2.11: The contents of the message.ts file in the tools folder'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.11：工具文件夹中 message.ts 文件的内容
- en: '[PRE33]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: TypeScript code has to be compiled into pure JavaScript before it can be executed
    by Node.js. I describe this process in more detail in *Chapter 3*, but for this
    chapter, it is enough to know that I need to use the `tsc` command provided by
    the package added to the project in *Listing 2.8*.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 代码必须在 Node.js 执行之前编译成纯 JavaScript。我在 *第 3 章* 中更详细地描述了此过程，但本章中，只需知道我需要使用
    *列表 2.8* 中添加到项目中的包提供的 `tsc` 命令即可。
- en: 'The first step is to add the folder that contains the scripts to the path used
    to search for commands. Execute the command shown in *Listing 2.12* if you are
    using PowerShell, which is what I use for development on Windows machines:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将包含脚本的文件夹添加到用于搜索命令的路径中。如果你使用 PowerShell，即我在 Windows 机器上开发时使用的工具，请执行 *列表
    2.12* 中显示的命令：
- en: 'Listing 2.12: Setting the path in powershell'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.12：在 PowerShell 中设置路径
- en: '[PRE34]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '*Listing 2.13* shows the equivalent command for the Bourne shell, which is
    commonly encountered on Linux machines:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2.13* 展示了 Bourne shell 的等效命令，这在 Linux 机器上常见：'
- en: 'Listing 2.13: Setting the path in the bourne shell'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.13：在 Bourne shell 中设置路径
- en: '[PRE35]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Packages that provide shell scripts generally support a range of command shells.
    For its compiler, the `typescript` package adds three files to the `node_modules/.bin`
    folder: `tsc` (which supports the Bourne shell), `tsc.ps1` (which supports PowerShell),
    and `tsc.cmd` (which supports the older Windows Command Prompt).'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 提供外壳脚本的包通常支持一系列命令外壳。对于其编译器，`typescript` 包将三个文件添加到 `node_modules/.bin` 文件夹中：`tsc`（支持
    Bourne shell）、`tsc.ps1`（支持 PowerShell）和 `tsc.cmd`（支持较旧的 Windows 命令提示符）。
- en: These are not the only script files added to the `.bin` folder. The `typescript`
    package also adds scripts for the `tsserver` command, which is used to integrate
    TypeScript into development tools, such as editors, but which is not required
    for this book. Entries are added by other packages as `npm` installs packages
    and resolves dependencies.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这些并不是添加到 `.bin` 文件夹的唯一脚本文件。`typescript` 包还添加了用于 `tsserver` 命令的脚本，该命令用于将 TypeScript
    集成到开发工具中，如编辑器，但本书中不需要。其他包在 `npm` 安装包并解决依赖关系时添加条目。
- en: 'Run the command shown in *Listing 2.14* in the `tools` folder to run the compiler:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `tools` 文件夹中运行 *列表 2.14* 中显示的命令以运行编译器：
- en: 'Listing 2.14: Running a package command'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.14：运行包命令
- en: '[PRE36]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The command won’t produce any messages but it does create a file named `message.js`
    in the `tools` folder, with the following content:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 命令不会产生任何消息，但在 `tools` 文件夹中创建了一个名为 `message.js` 的文件，内容如下：
- en: '[PRE37]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Run the command shown in *Listing 2.15* in the `tools` folder to execute the
    compiled JavaScript code using Node.js:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `tools` 文件夹中运行 *列表 2.15* 中显示的命令以使用 Node.js 执行编译后的 JavaScript 代码：
- en: 'Listing 2.15: Executing JavaScript code'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.15：执行 JavaScript 代码
- en: '[PRE38]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The Node.js runtime executes the code in the file created by the TypeScript
    compiler, producing the following output:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 运行时执行 TypeScript 编译器创建的文件中的代码，生成以下输出：
- en: '[PRE39]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Using the npx command
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 npx 命令
- en: 'Not all packages install scripts, and another way to execute package features
    is to use the `npx` command. Each package added to the `node_modules` folder has
    its own `package.json` file. In addition to keeping track of the package’s dependencies,
    the `package.json` file defines a `bin` section that defines the commands that
    `npx` can execute. For the package added in *Listing 2.8*, the `package.json`
    file can be found in the `node_modules/typescript` folder and it contains this
    `bin` section:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有包都安装脚本，另一种执行包功能的方法是使用`npx`命令。添加到`node_modules`文件夹中的每个包都有自己的`package.json`文件。除了跟踪包的依赖关系外，`package.json`文件还定义了一个`bin`部分，该部分定义了`npx`可以执行的命令。对于*列表2.8*中添加的包，`package.json`文件位于`node_modules/typescript`文件夹中，并包含以下`bin`部分：
- en: '[PRE40]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The entries in the `bin` section define a command and a JavaScript file that
    will be executed by that command. The `typescript` package defines `bin` entries
    for `tsc` and `tsserver` commands, which correspond to the shell scripts used
    in the previous section. Run the command shown in *Listing 2.16* in the `tools`
    folder to execute the TypeScript compiler using `npx`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`bin`部分的条目定义了一个命令和一个将被该命令执行的JavaScript文件。`typescript`包为`tsc`和`tsserver`命令定义了`bin`条目，这些条目对应于上一节中使用的shell脚本。在`tools`文件夹中运行*列表2.16*中显示的命令以使用`npx`执行TypeScript编译器：'
- en: 'Listing 2.16: Executing the TypeScript compiler'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 列表2.16：执行TypeScript编译器
- en: '[PRE41]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This command has the same effect as the one in *Listing 2.14*. When multiple
    packages define commands with the same name, the `--package` argument can be used,
    as shown in *Listing 2.17*:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令与*列表2.14*中的命令具有相同的效果。当多个包定义了同名命令时，可以使用`--package`参数，如*列表2.17*所示：
- en: 'Listing 2.17: Specifying a package'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 列表2.17：指定包
- en: '[PRE42]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: If the package that contains the command isn’t installed, then the `npx` command
    will download the package into a cache folder and then execute the command.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果包含该命令的包未安装，则`npx`命令将下载该包到缓存文件夹中，然后执行该命令。
- en: Using script commands
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用脚本命令
- en: '`npm` supports a set of commands that are customized by adding entries to the
    `scripts` section of the `package.json` file. This can feel a little odd at first,
    but it is a powerful way to use the features provided by JavaScript packages concisely
    and consistently. `npm` supports the following basic commands:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm`支持一组通过在`package.json`文件的`scripts`部分添加条目来自定义的命令。一开始这可能感觉有点奇怪，但它是一种强大而简洁地使用JavaScript包提供功能的方式。`npm`支持以下基本命令：'
- en: '`start`'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start`'
- en: '`stop`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stop`'
- en: '`restart`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`restart`'
- en: '`test`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test`'
- en: Projects won’t always need every command, and there are no firm rules for how
    these commands can be used, but the convention is to use the `start` command to
    start the development tools and use the `test` command to run unit tests, which
    I describe in *Chapter 8*.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 项目不一定需要每个命令，使用这些命令也没有固定的规则，但惯例是使用`start`命令启动开发工具，并使用`test`命令运行单元测试，这些内容我在*第8章*中进行了描述。
- en: '*Listing 2.18* adds an entry to the `scripts` section:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表2.18*在`scripts`部分添加了一个条目：'
- en: 'Listing 2.18: Configuring a command in the package.Json file in the tools folder'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 列表2.18：在工具文件夹中的`package.json`文件中配置命令
- en: '[PRE43]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Each entry in the `scripts` section consists of a command name and an associated
    action. The action associated with the `start` command in *Listing 2.18* runs
    the `tsc-watch` command, which is a wrapper around the TypeScript compiler that
    watches TypeScript files for changes and can be configured to execute a command
    when compilation is successful. (The `test` command was added automatically when
    the `package.json` file was created and just prints out an error message.)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`scripts`部分的每个条目都由一个命令名称和相关动作组成。*列表2.18*中`start`命令关联的动作运行`tsc-watch`命令，这是一个围绕TypeScript编译器的包装器，它监视TypeScript文件的变化，并且可以配置在编译成功时执行命令。（`test`命令是在创建`package.json`文件时自动添加的，仅打印出错误消息。）'
- en: 'I could run the `tsc-watch` command directly from the command line, either
    using the shell scripts the package added to the `node_modules/.bin` folder or
    with the `npx` command, but as commands get more complex, it becomes more difficult
    to remember the syntax and enter them correctly. The new entry in the `package.json`
    file lets me define the command once and then always invoke it consistently. Run
    the command shown in *Listing 2.19* in the `tools` folder:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以直接从命令行运行`tsc-watch`命令，无论是使用包添加到`node_modules/.bin`文件夹中的shell脚本，还是使用`npx`命令，但随着命令的复杂化，记住语法并正确输入它们变得越来越困难。`package.json`文件中的新条目让我可以一次性定义命令，然后始终一致地调用它。在`tools`文件夹中运行*列表2.19*中显示的命令：
- en: 'Listing 2.19: Running a script command'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.19：运行脚本命令
- en: '[PRE44]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The `npm start` command tells `npm` to perform the `start` action defined in
    the `package.json` file, producing the following output:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm start` 命令告诉 `npm` 执行 `package.json` 文件中定义的 `start` 动作，产生以下输出：'
- en: '[PRE45]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '*Listing 2.20* makes a small change to the TypeScript file:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 2.20* 对 TypeScript 文件进行了一些小的修改：'
- en: 'Listing 2.20: Making a change in the message.ts file in the tools folder'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.20：在工具文件夹中的 message.ts 文件中进行修改
- en: '[PRE46]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'When you save the altered file, the change is detected, the TypeScript file
    is compiled, and Node.js is used to execute the JavaScript, producing the following
    output:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当你保存修改后的文件时，变更会被检测到，TypeScript 文件会被编译，然后使用 Node.js 来执行 JavaScript，产生以下输出：
- en: '[PRE47]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Most web application project development depends on tools that run continuously,
    monitoring files for changes, and this is a pattern that I will follow throughout
    this book. Use *Control+C* to stop the command once you have seen the output.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网络应用程序项目开发依赖于持续运行的工具，这些工具会监控文件变更，本书将遵循这种模式。使用 *Control+C* 停止命令，一旦你看到了输出。
- en: Defining custom commands
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义自定义命令
- en: 'In addition to the built-in commands, `npm` supports custom commands as well,
    as shown in *Listing 2.21*:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 除了内置命令外，`npm` 还支持自定义命令，如 *列表 2.21* 所示：
- en: 'Listing 2.21: Defining a custom script command in the package.json file in
    the tools folder'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.21：在工具文件夹中的 package.json 文件中定义自定义脚本命令
- en: '[PRE48]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The name of the new command is `go` and it compiles the `message.ts` TypeScript
    file and then uses Node.js to execute the compiled JavaScript.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 新命令的名称是 `go`，它编译 `message.ts` TypeScript 文件，然后使用 Node.js 来执行编译后的 JavaScript。
- en: '**Tip**'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Commands separated by `&&` are executed sequentially. Commands separated by
    a single `&` are executed in parallel.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 由 `&&` 分隔的命令会顺序执行。由单个 `&` 分隔的命令会并行执行。
- en: 'Custom commands are executed with `npm run`, as shown in *Listing 2.22*:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义命令使用 `npm run` 执行，如 *列表 2.22* 所示：
- en: 'Listing 2.22: Executing a custom script command'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 2.22：执行自定义脚本命令
- en: '[PRE49]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The name of the custom command follows `npm run`, so that `npm run go` executes
    the custom `go` command, producing the following output:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义命令的名称跟随 `npm run`，因此 `npm run go` 执行自定义的 `go` 命令，产生以下输出：
- en: '[PRE50]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, I explained the simple setup process to prepare for this book
    and introduced the core Node.js tools:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我解释了为本书做准备的基本设置过程，并介绍了核心 Node.js 工具：
- en: Node.js development requires the Node.js installer, the Git version control
    system, and a JavaScript/TypeScript code editor, such as Visual Studio Code.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 开发需要 Node.js 安装程序、Git 版本控制系统以及一个 JavaScript/TypeScript 代码编辑器，例如 Visual
    Studio Code。
- en: JavaScript files are executed with the `node` command.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `node` 命令执行 JavaScript 文件。
- en: Much of the functionality provided by Node.js is presented through the API it
    provides, which is the topic of this book.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 提供的大部分功能都是通过它提供的 API 展示的，这正是本书的主题。
- en: The **node package manager** (**npm**) is used to download JavaScript packages,
    execute commands, run development tools, and start unit tests.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**node 包管理器**（**npm**）用于下载 JavaScript 包、执行命令、运行开发工具和启动单元测试。'
- en: In the next chapter, I will provide a primer that describes the essential JavaScript
    and TypeScript features that are required to follow the examples in this book.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将提供一个基础，描述了遵循本书示例所需的必要 JavaScript 和 TypeScript 功能。
