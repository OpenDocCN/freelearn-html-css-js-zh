- en: Chapter 3. Create, Load, and Draw 3D Objects on the Screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, you learned that 3D objects, called meshes, are composed
    of a list of 3D points (vertex buffer) and indices (index buffer) that creates
    the triangles that are drawn on the screen. To create complex meshes such as characters
    or buildings, 3D artists use modeling software that is capable of handling the
    vertex buffers and index buffers for us, including a lot of powerful tools for
    an easy creation.
  prefs: []
  type: TYPE_NORMAL
- en: The Babylon.js solution comes with plugins for Blender ([https://www.blender.org/](https://www.blender.org/))
    and 3ds Max ([http://www.autodesk.fr/products/3ds-max/overview](http://www.autodesk.fr/products/3ds-max/overview)),
    two famous modelers known by artists. These plugins are intended for 3D artists
    and are used to export the scenes built in these modelers to a format that Babylon.js
    is capable of loading. The exported files are JSON files with the `.babylon` extension.
    More information about the format can be found at [http://doc.babylonjs.com/generals/File_Format_Map_(.babylon)](http://doc.babylonjs.com/generals/File_Format_Map_(.babylon)).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Blender to export scenes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using 3ds Max to export scenes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading scenes with Babylon.js programmatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Blender to export scenes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blender is a free and open source modeler to create 3D models using specialized
    tools. Blender is famous as it is cross-platform (works on Windows, Mac OS X,
    and Linux) and is known as a better 3D modeler in the world of open source (powerful
    tools for 3D rendering, animations, texturing, and so on). For more information
    about its features and demos, you can visit [https://www.blender.org](https://www.blender.org).
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, Blender allows developers to create plugins written with the Python
    language, a feature that allowed the Babylon.js team to develop the Blender's
    exporter. In fact, the Babylon.js exporter will allow you to build your scenes
    (including meshes, lights, cameras, and so on) directly in Blender and easily
    export your scenes to a Babylon.js format that you'll be able to load in your
    projects. Let's take a look at the following steps and see how you can (still
    easily) do this.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Babylon.js exporter for Blender
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the Babylon.js GitHub repository, you''ll find a folder containing the Blender
    plugin in `Exporters/Blender/`. The `io_scene_map` folder and the `io_export_babylon.py`
    file are to be copied to the `addons` folder of Blender (typically located at `C:\Program
    Files\Blender Foundation\2.75\scripts\addons\`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the Babylon.js exporter for Blender](img/image_03_001.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the files are copied, just activate the plugin so that it appears in the
    exporter''s menu. The result, after activation, will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the Babylon.js exporter for Blender](img/image_03_002.png)'
  prefs: []
  type: TYPE_IMG
- en: Activating the Babylon.js exporter in Blender
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To activate the plugin, follow this procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **User Preferences...**:![Activating the Babylon.js exporter in Blender](img/image_03_003.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add-ons** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `babylon` in the search bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the user settings:![Activating the Babylon.js exporter in Blender](img/image_03_004.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the plugin is activated, the plugin appears in the exporters' menu. You
    are now able to export scenes for Babylon.js.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting a scene
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start with the initial scene created by default: a cube, camera, and
    light. Right-click on the cube to select it. Now, let''s take a look at the properties
    on the right-hand side. (Refer to the following screenshots.) Thanks to the plugin,
    there is a specific zone for Babylon.js. These properties are specific to the
    Babylon.js framework during the export and will not interfere with the Blender
    renders (something interesting to tell to your 3D artists):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a scene](img/image_03_005.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Zoom on the properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a scene](img/image_03_006.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For meshes (such as the cube), the properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Use Flat Shading**: This is to use flat shading instead of smoothening the
    mesh'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Check Collisions**: This is to check whether the camera collides with the
    mesh or not'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cast Shadows**: This is to check whether the object projects its shadow on
    other meshes if a shadow light (another type of light) is present in the scene'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Receive Shadows**: This is to check whether the object receives shadows from
    other objects that cast shadows if a shadow light is present in the scene'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automatically launch animations**: If the mesh is animated, it automatically
    launches the mesh''s animations at the start'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, select the camera in Blender and let''s have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a scene](img/image_03_007.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Zoom on the properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a scene](img/image_03_008.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For cameras, the properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Camera Type**: This is the type of camera such as free camera (FPS), arc
    rotation camera, and others'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Check Collisions**: This is to check whether the camera should check collisions
    on objects that enable the Check Collisions property'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apply Gravity**: This is applied if the gravity should attract the camera'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ellipsoid**: This is the radius around the camera where you can check the
    collisions on the axes (*X*, *Y*, and *Z*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Anaglyph Eye Space**: This is the eye space for anaglyph cameras (anaglyph
    cameras can be chosen in the Camera Type property)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automatically launch animations**: If the camera is animated, it automatically
    launches the camera''s animations at the start'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select the light in Blender and let''s have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a scene](img/image_03_009.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Zoom on the properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a scene](img/image_03_010.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the lights, the properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shadow Map Type**: If the selection isn''t None, the light becomes a shadow
    light. The variance shadow maps are more expansive than standard shadow maps but
    they are more realistic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shadow Map Size**: This is equivalent to the shadow''s quality and must be
    a power of two. 1024 is a good quality for shadows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automatically launch animations**: If the light is animated, it automatically
    launches the light''s animations at the start.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s add a plane to create a ground and export the scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a scene](img/image_03_011.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you start the exporter, Blender shows you an interface with options on
    the left-hand side and a file browser (to save the scene file). The options are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Export only current layer**: Blender can handle multiple layers. Check this
    to export the current layer only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No vertex shading**: This is to disable or enable vertex shading. There will
    be more information about this in the coming chapters about special effects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Exporting a scene](img/image_03_012-1024x615.png)'
  prefs: []
  type: TYPE_IMG
- en: To export the scene, just click on the **Export Babylon.js** scene button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you export the scene, don''t hesitate to use the Sandbox tool ([http://www.babylonjs.com/sandbox/](http://www.babylonjs.com/sandbox/))
    to test your scene. Just take the `.babylon` file and drag and drop the files
    in the browser. Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a scene](img/image_03_013-1024x616.png)'
  prefs: []
  type: TYPE_IMG
- en: Using 3ds Max to export scenes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As for Blender, you'll find the 3ds Max plugin (written in C#) in the Babylon.js
    GitHub repository at `Exporters`/`3Ds Max`/`Max2Babylon*.zip`, where `*` is the
    exporter's version. In the archive, you'll find two folders: `2013` and `2015`,
    that are the currently supported versions of 3ds Max for the `Max2Babylon` exporter.
  prefs: []
  type: TYPE_NORMAL
- en: 3ds Max is another tool used by 3D artists to create 3D scenes, such as Blender.
    3ds Max is the most famous 3D modeler as it is used for many professional 3D video
    games and known by all 3D artists.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Babylon.js exporter for 3ds Max
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you identify the proper version to use (`2013` or `2015`), just copy/paste
    the binaries in the `bin/assemblies` folder and start 3ds Max (typically located
    at `C:\Program Files\Autodesk\3ds Max 201*\bin\assemblies\`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Babylon.js exporter for 3ds Max](img/image_03_014.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you start 3ds Max, a new menu named **Babylon** will appear in the top
    menu. This menu is used to export the scene to a `.babylon` file. As for Blender,
    you can modify the Babylon.js properties by right-clicking on the objects in 3ds
    Max:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Babylon.js exporter for 3ds Max](img/image_03_015-1024x615.png)'
  prefs: []
  type: TYPE_IMG
- en: Zoom on the toolbar:![Installing the Babylon.js exporter for 3ds Max](img/image_03_023.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zoom on the context menu:![Installing the Babylon.js exporter for 3ds Max](img/image_03_017.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Max2Babylon plugin adds two more menus due to the right-clicking: **Babylon
    Properties** and **Babylon Actions Builder**.'
  prefs: []
  type: TYPE_NORMAL
- en: Actions Builder is a tool that helps create actions on the objects. Let's wait
    for [Chapter 7](ch07.html "Chapter 7. Defining Actions on Objects"), *Defining
    Actions on Objects* to know more about how to create actions on the objects in
    the scene. For example, Actions Builder was used was used to create actions on
    objects in the Mansion scene, available at [http://babylonjs.com/demos/mansion/](http://babylonjs.com/demos/mansion/).
  prefs: []
  type: TYPE_NORMAL
- en: The properties can be modified on meshes, lights, cameras, and scenes (no object
    selected). You'll retrieve the same properties as you did for Blender. Just click
    on the **Babylon Properties** menu.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: some properties including Physics and Sound will be presented in [Chapter
    5](ch05.html "Chapter 5. Create Collisions on Objects"), *Create Collisions on
    Objects* and [Chapter 6](ch06.html "Chapter 6. Manage Audio in Babylon.js"), *Manage
    Audio in Babylon.js* respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying the properties](img/image_03_018.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For meshes, there are new properties as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Do not export**: This is used if the mesh should get exported to the scene
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show bounding box**: This is for the purpose of debugging and shows a wireframe
    box that represents the hull of the mesh.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show submeshes bounding boxes**: As for the **Show bounding box** option,
    this option will show the bounding boxes of the sub-meshes of the selected mes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pickable**: This is used if Babylon.js should be able to pick the mesh. Babylon.js
    allows you to launch rays in the scene and finds the intersection of the ray with
    the meshes in the scene. Check this to allow picking. For example, mesh picking
    can be used to select a mesh in a scene when the user clicks on it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto animate**: This is used if the object (light, mesh, or camera) is animated
    at the start.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**From** and **to**: This is the start frame and end frame of the animation
    at the start.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Loop**: This is used if the animation should be looped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select the light in 3ds Max and let''s have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying the properties](img/image_03_019.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For lights, the properties are equivalent to Blender:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Do not export**: This is used if the light should be exported to the scene
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bias**: This is used to remove the possible artifacts created by the shadow''s
    effect. The default value should be sufficient in most cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: as for Blender, tells if the light should compute shadows in the
    scene or not. The `variance` and `blurred variance` shadow maps are more expansive
    than standard shadow maps but they are more realistic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blur info**: This is used if the shadow map type is **Blurred Variance**. **Variance
    shadow maps** (**VSM**) are more realistic than hard shadows and can be blurred
    to suppress artefacts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select the camera in 3ds Max and let''s have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying the properties](img/image_03_020.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For cameras, the added properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Speed**: This is the camera''s speed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inertia**: All cameras in Babylon.js move with an inertia, which represents
    the inertia of the camera. This means that when you move the camera in Babylon.js,
    you give it a movement speed that will be slowed according to its inertia value.
    (`0` means slowed directly, no inertia, and more than `0` means that the camera
    will need more time to slow down.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting the scenes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create the same scene as we did for Blender: a plane, cube, camera,
    and light:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting the scenes](img/image_03_021.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To export this scene, just open the exporter''s window using the top menu,
    **Babylon**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting the scenes](img/image_03_022-1024x689.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Zoom on the top menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting the scenes](img/image_03_023.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The exporter window will appear and let''s have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting the scenes](img/image_03_024.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Copy textures to output**: Check this to export the textures (if any mesh
    has at least one texture) to the output directory of the scene file. In other
    words, all the textures of the 3ds Max scene (applied to meshes) will be copied
    into the same folder as the exported Babylon.js scene file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Generate .manifest**: The manifest files are used for the offline mode with
    Babylon.js. The exported scenes can be loaded through the Internet and web browser
    cache as well to save the connection. The manifest files tell the client whether
    the scene has changed or not. If changed, it just reloads the entire scene through
    the Internet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Export hidden objects**: In 3ds Max, objects can be hidden (not drawn). This
    option configures the exporter to keep or export the hidden objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto save 3ds Max file**: At each export, this saves the 3ds Max project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Export only selected**: This exports the selected objects only (meshes, cameras,
    lights, and so on) to the scene file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Generate binary version**: This exports the scene to a binary file (incremental
    loading).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select the file location as you did for Blender to save the Babylon.js scene
    and click on **Export**. The 3ds Max plugin also offers to export and run the
    scene by launching the default browser with a local server. The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting the scenes](img/image_03_025.png)'
  prefs: []
  type: TYPE_IMG
- en: Loading scenes with Babylon.js programmatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To load scenes using TypeScript, Babylon.js provides you with a class named
    `BABYLON.SceneLoader`. This class contains static methods that allow you to load
    scenes (create new ones), append scenes, and load meshes.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, as a developer, you'll load files using these methods. The `.Load`
    method creates a new scene for you and loads everything (meshes, lights, particle
    systems, camera, and so on), returning the new scene. The`.Append` method takes
    an existing scene as a parameter and appends a new scene to the existing one (useful
    to mix multiple scenes). Finally, the`.ImportMesh` method imports only meshes,
    skeletons (refer to [Chapter 9](ch09.html "Chapter 9. Create and Play Animations"), *Create
    and Play Animations* about animations), and particle systems to an existing scene.
    The following steps will show you how to use these methods and find the right
    way to manage your scenes.
  prefs: []
  type: TYPE_NORMAL
- en: The BABYLON.SceneLoader class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Loading a scene**: The way to load scenes is pretty easy. Just call the `BABYLON.SceneLoader.Load`
    method with its arguments and let Babylon.js do the rest.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first argument, `./`, is the scene file folder. The second argument, `awesome_scene.babylon`,
    is the name of the scene file to load. Finally, the last argument is the engine.
    Indeed, the loader needs an engine to create a new scene.
  prefs: []
  type: TYPE_NORMAL
- en: '**Appending a scene**: The way to append a scene to another scene is almost
    the same; just call the `BABYLON.SceneLoader.Append` method instead of`.Load`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The two first arguments are equivalent to the `.Load` method. The last scene
    parameter is the original scene. Indeed, the new scene created by the loader will
    be merged with the original one (append).
  prefs: []
  type: TYPE_NORMAL
- en: '**Importing meshes**: Here, the method is different but still located in the `SceneLoader`
    class with the `.ImportMesh` method. A scene file (`.babylon`) contains multiple
    meshes in the range [0,*n*]. By default, the `.Load` and `.Append` methods import
    all the meshes defined in the scene file. With `.ImportMesh`, you can specify
    which meshes are imported by the loader by giving their names.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The first argument, named `meshesNames`, is in the `any` type. Here, the empty
    string tells the loader to import all the meshes. To specify the meshes to be
    imported, just add their names in an array, for example, `["awesome_mesh1", "awesome_mesh2"]`.
    The second and third arguments are equivalent to the `.Load` and `.Append` methods.
    The last parameter is the scene to import the meshes to.
  prefs: []
  type: TYPE_NORMAL
- en: The callbacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The three methods, `.Load`, `.Append`, and `.ImportMesh`, provide callbacks
    on success, progress, and error that are null by default. They are used to take
    control of the loading process.
  prefs: []
  type: TYPE_NORMAL
- en: For `.Load` and `.Append`, the callbacks are the same.
  prefs: []
  type: TYPE_NORMAL
- en: Load and append
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The success and error callbacks provide the new scene created by the loader.
    Indeed, if you take a look at the Babylon.js sources, you can see that the .Load
    method is just a call to the `.Append` method by creating a new scene.
  prefs: []
  type: TYPE_NORMAL
- en: Importing a mesh
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the success callback, the meshes, `particleSystems`, and `skeletons` arguments
    are arrays of `BABYLON.Mesh`, `BABYLON.ParticleSystem`, and `BABYLON.Skeletons`,
    respectively and contain only the added objects:'
  prefs: []
  type: TYPE_NORMAL
- en: The meshes argument contains all the imported meshes from the scene file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `particleSystems` argument contains all the imported particle systems (smoke,
    rain, and others).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The skeletons argument contains all the imported skeletons. Skeletons are entities
    used to create animations and are linked to meshes. Let''s take a character as
    an example: the skeleton represents the character''s armature and is used to create
    movements of the legs, hands, head, and so on. Finally, a character can walk and
    run using the skeletons.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, all tools have been installed and are ready to use. Do not hesitate to
    take a look at the example files to experiment with the scene loader. There are
    some example (scene) files including a skull and the scene building with 3ds Max.
    Naturally, you'll find how to use the scene loader in your code and then get the
    proper architecture.
  prefs: []
  type: TYPE_NORMAL
- en: As the next step, it is a good occasion to introduce the notion of materials
    and how to customize the 3D object's appearance using these materials. Of course,
    Babylon.js already provides you with a default material that makes the work on
    materials easier than creating materials yourself.
  prefs: []
  type: TYPE_NORMAL
