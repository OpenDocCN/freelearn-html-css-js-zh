- en: Chapter 3. Create, Load, and Draw 3D Objects on the Screen
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, you learned that 3D objects, called meshes, are composed
    of a list of 3D points (vertex buffer) and indices (index buffer) that creates
    the triangles that are drawn on the screen. To create complex meshes such as characters
    or buildings, 3D artists use modeling software that is capable of handling the
    vertex buffers and index buffers for us, including a lot of powerful tools for
    an easy creation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: The Babylon.js solution comes with plugins for Blender ([https://www.blender.org/](https://www.blender.org/))
    and 3ds Max ([http://www.autodesk.fr/products/3ds-max/overview](http://www.autodesk.fr/products/3ds-max/overview)),
    two famous modelers known by artists. These plugins are intended for 3D artists
    and are used to export the scenes built in these modelers to a format that Babylon.js
    is capable of loading. The exported files are JSON files with the `.babylon` extension.
    More information about the format can be found at [http://doc.babylonjs.com/generals/File_Format_Map_(.babylon)](http://doc.babylonjs.com/generals/File_Format_Map_(.babylon)).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Using Blender to export scenes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using 3ds Max to export scenes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading scenes with Babylon.js programmatically
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Blender to export scenes
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blender is a free and open source modeler to create 3D models using specialized
    tools. Blender is famous as it is cross-platform (works on Windows, Mac OS X,
    and Linux) and is known as a better 3D modeler in the world of open source (powerful
    tools for 3D rendering, animations, texturing, and so on). For more information
    about its features and demos, you can visit [https://www.blender.org](https://www.blender.org).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, Blender allows developers to create plugins written with the Python
    language, a feature that allowed the Babylon.js team to develop the Blender's
    exporter. In fact, the Babylon.js exporter will allow you to build your scenes
    (including meshes, lights, cameras, and so on) directly in Blender and easily
    export your scenes to a Babylon.js format that you'll be able to load in your
    projects. Let's take a look at the following steps and see how you can (still
    easily) do this.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Babylon.js exporter for Blender
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the Babylon.js GitHub repository, you''ll find a folder containing the Blender
    plugin in `Exporters/Blender/`. The `io_scene_map` folder and the `io_export_babylon.py`
    file are to be copied to the `addons` folder of Blender (typically located at `C:\Program
    Files\Blender Foundation\2.75\scripts\addons\`):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the Babylon.js exporter for Blender](img/image_03_001.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: 'Once the files are copied, just activate the plugin so that it appears in the
    exporter''s menu. The result, after activation, will look as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the Babylon.js exporter for Blender](img/image_03_002.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: Activating the Babylon.js exporter in Blender
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To activate the plugin, follow this procedure:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Go to **User Preferences...**:![Activating the Babylon.js exporter in Blender](img/image_03_003.png)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**用户首选项...**：![在Blender中激活Babylon.js导出器](img/image_03_003.png)
- en: Click on the **Add-ons** tab.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**插件**标签。
- en: Search for `babylon` in the search bar.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索栏中搜索`babylon`。
- en: Activate the plugin.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活插件。
- en: Save the user settings:![Activating the Babylon.js exporter in Blender](img/image_03_004.png)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存用户设置：![在Blender中激活Babylon.js导出器](img/image_03_004.png)
- en: Once the plugin is activated, the plugin appears in the exporters' menu. You
    are now able to export scenes for Babylon.js.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件被激活，插件就会出现在导出器菜单中。你现在可以导出Babylon.js的场景。
- en: Exporting a scene
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出场景
- en: 'Let''s start with the initial scene created by default: a cube, camera, and
    light. Right-click on the cube to select it. Now, let''s take a look at the properties
    on the right-hand side. (Refer to the following screenshots.) Thanks to the plugin,
    there is a specific zone for Babylon.js. These properties are specific to the
    Babylon.js framework during the export and will not interfere with the Blender
    renders (something interesting to tell to your 3D artists):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从默认创建的初始场景开始：一个立方体、相机和灯光。右键单击立方体以选择它。现在，让我们看看右侧的属性。（参考以下截图。）多亏了插件，有一个专门用于Babylon.js的区域。这些属性在导出时是针对Babylon.js框架的，并且不会干扰Blender的渲染（这是要告诉你的3D艺术家的一些有趣的事情）：
- en: '![Exporting a scene](img/image_03_005.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![导出场景](img/image_03_005.png)'
- en: 'Zoom on the properties:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 放大属性：
- en: '![Exporting a scene](img/image_03_006.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![导出场景](img/image_03_006.png)'
- en: 'For meshes (such as the cube), the properties are as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于网格（如立方体），属性如下：
- en: '**Use Flat Shading**: This is to use flat shading instead of smoothening the
    mesh'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用平面着色**：这是使用平面着色而不是平滑网格'
- en: '**Check Collisions**: This is to check whether the camera collides with the
    mesh or not'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查碰撞**：这是检查相机是否与网格碰撞'
- en: '**Cast Shadows**: This is to check whether the object projects its shadow on
    other meshes if a shadow light (another type of light) is present in the scene'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投射阴影**：这是为了检查如果场景中存在阴影光（另一种类型的光），对象是否会在其他网格上投射阴影'
- en: '**Receive Shadows**: This is to check whether the object receives shadows from
    other objects that cast shadows if a shadow light is present in the scene'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接收阴影**：这是检查如果场景中存在阴影光，对象是否接收来自投射阴影的其他对象的阴影'
- en: '**Automatically launch animations**: If the mesh is animated, it automatically
    launches the mesh''s animations at the start'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动启动动画**：如果网格是动画的，它会在开始时自动启动网格的动画'
- en: 'Now, select the camera in Blender and let''s have a look at the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在Blender中选择相机并查看以下截图：
- en: '![Exporting a scene](img/image_03_007.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![导出场景](img/image_03_007.png)'
- en: 'Zoom on the properties:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 放大属性：
- en: '![Exporting a scene](img/image_03_008.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![导出场景](img/image_03_008.png)'
- en: 'For cameras, the properties are as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于相机，属性如下：
- en: '**Camera Type**: This is the type of camera such as free camera (FPS), arc
    rotation camera, and others'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相机类型**：这是相机的类型，例如自由相机（FPS）、弧形旋转相机等'
- en: '**Check Collisions**: This is to check whether the camera should check collisions
    on objects that enable the Check Collisions property'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查碰撞**：这是检查相机是否应该检查启用了检查碰撞属性的对象的碰撞'
- en: '**Apply Gravity**: This is applied if the gravity should attract the camera'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用重力**：如果重力应该吸引相机，则应用此选项'
- en: '**Ellipsoid**: This is the radius around the camera where you can check the
    collisions on the axes (*X*, *Y*, and *Z*)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**椭球体**：这是围绕相机的半径，你可以在这里检查轴（*X*、*Y*和*Z*）上的碰撞'
- en: '**Anaglyph Eye Space**: This is the eye space for anaglyph cameras (anaglyph
    cameras can be chosen in the Camera Type property)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**立体眼镜空间**：这是立体相机（可以在相机类型属性中选择立体相机）'
- en: '**Automatically launch animations**: If the camera is animated, it automatically
    launches the camera''s animations at the start'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动启动动画**：如果相机是动画的，它会在开始时自动启动相机的动画'
- en: 'Select the light in Blender and let''s have a look at the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在Blender中选择灯光并查看以下截图：
- en: '![Exporting a scene](img/image_03_009.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![导出场景](img/image_03_009.png)'
- en: 'Zoom on the properties:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 放大属性：
- en: '![Exporting a scene](img/image_03_010.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![导出场景](img/image_03_010.png)'
- en: 'For the lights, the properties are as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于灯光，属性如下：
- en: '**Shadow Map Type**: If the selection isn''t None, the light becomes a shadow
    light. The variance shadow maps are more expansive than standard shadow maps but
    they are more realistic.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shadow Map Size**: This is equivalent to the shadow''s quality and must be
    a power of two. 1024 is a good quality for shadows.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automatically launch animations**: If the light is animated, it automatically
    launches the light''s animations at the start.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s add a plane to create a ground and export the scene:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a scene](img/image_03_011.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: 'Once you start the exporter, Blender shows you an interface with options on
    the left-hand side and a file browser (to save the scene file). The options are
    as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '**Export only current layer**: Blender can handle multiple layers. Check this
    to export the current layer only.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No vertex shading**: This is to disable or enable vertex shading. There will
    be more information about this in the coming chapters about special effects.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Exporting a scene](img/image_03_012-1024x615.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: To export the scene, just click on the **Export Babylon.js** scene button.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you export the scene, don''t hesitate to use the Sandbox tool ([http://www.babylonjs.com/sandbox/](http://www.babylonjs.com/sandbox/))
    to test your scene. Just take the `.babylon` file and drag and drop the files
    in the browser. Here is the result:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a scene](img/image_03_013-1024x616.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: Using 3ds Max to export scenes
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As for Blender, you'll find the 3ds Max plugin (written in C#) in the Babylon.js
    GitHub repository at `Exporters`/`3Ds Max`/`Max2Babylon*.zip`, where `*` is the
    exporter's version. In the archive, you'll find two folders: `2013` and `2015`,
    that are the currently supported versions of 3ds Max for the `Max2Babylon` exporter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 3ds Max is another tool used by 3D artists to create 3D scenes, such as Blender.
    3ds Max is the most famous 3D modeler as it is used for many professional 3D video
    games and known by all 3D artists.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Babylon.js exporter for 3ds Max
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you identify the proper version to use (`2013` or `2015`), just copy/paste
    the binaries in the `bin/assemblies` folder and start 3ds Max (typically located
    at `C:\Program Files\Autodesk\3ds Max 201*\bin\assemblies\`):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Babylon.js exporter for 3ds Max](img/image_03_014.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: 'Once you start 3ds Max, a new menu named **Babylon** will appear in the top
    menu. This menu is used to export the scene to a `.babylon` file. As for Blender,
    you can modify the Babylon.js properties by right-clicking on the objects in 3ds
    Max:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the Babylon.js exporter for 3ds Max](img/image_03_015-1024x615.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: Zoom on the toolbar:![Installing the Babylon.js exporter for 3ds Max](img/image_03_023.png)
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zoom on the context menu:![Installing the Babylon.js exporter for 3ds Max](img/image_03_017.png)
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the properties
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Max2Babylon plugin adds two more menus due to the right-clicking: **Babylon
    Properties** and **Babylon Actions Builder**.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Actions Builder is a tool that helps create actions on the objects. Let's wait
    for [Chapter 7](ch07.html "Chapter 7. Defining Actions on Objects"), *Defining
    Actions on Objects* to know more about how to create actions on the objects in
    the scene. For example, Actions Builder was used was used to create actions on
    objects in the Mansion scene, available at [http://babylonjs.com/demos/mansion/](http://babylonjs.com/demos/mansion/).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: The properties can be modified on meshes, lights, cameras, and scenes (no object
    selected). You'll retrieve the same properties as you did for Blender. Just click
    on the **Babylon Properties** menu.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: some properties including Physics and Sound will be presented in [Chapter
    5](ch05.html "Chapter 5. Create Collisions on Objects"), *Create Collisions on
    Objects* and [Chapter 6](ch06.html "Chapter 6. Manage Audio in Babylon.js"), *Manage
    Audio in Babylon.js* respectively.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying the properties](img/image_03_018.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: 'For meshes, there are new properties as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '**Do not export**: This is used if the mesh should get exported to the scene
    file.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show bounding box**: This is for the purpose of debugging and shows a wireframe
    box that represents the hull of the mesh.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show submeshes bounding boxes**: As for the **Show bounding box** option,
    this option will show the bounding boxes of the sub-meshes of the selected mes.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pickable**: This is used if Babylon.js should be able to pick the mesh. Babylon.js
    allows you to launch rays in the scene and finds the intersection of the ray with
    the meshes in the scene. Check this to allow picking. For example, mesh picking
    can be used to select a mesh in a scene when the user clicks on it.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto animate**: This is used if the object (light, mesh, or camera) is animated
    at the start.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**From** and **to**: This is the start frame and end frame of the animation
    at the start.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Loop**: This is used if the animation should be looped.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select the light in 3ds Max and let''s have a look at the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying the properties](img/image_03_019.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: 'For lights, the properties are equivalent to Blender:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '**Do not export**: This is used if the light should be exported to the scene
    file.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bias**: This is used to remove the possible artifacts created by the shadow''s
    effect. The default value should be sufficient in most cases.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: as for Blender, tells if the light should compute shadows in the
    scene or not. The `variance` and `blurred variance` shadow maps are more expansive
    than standard shadow maps but they are more realistic.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blur info**: This is used if the shadow map type is **Blurred Variance**. **Variance
    shadow maps** (**VSM**) are more realistic than hard shadows and can be blurred
    to suppress artefacts.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select the camera in 3ds Max and let''s have a look at the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying the properties](img/image_03_020.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: 'For cameras, the added properties are as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '**Speed**: This is the camera''s speed.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inertia**: All cameras in Babylon.js move with an inertia, which represents
    the inertia of the camera. This means that when you move the camera in Babylon.js,
    you give it a movement speed that will be slowed according to its inertia value.
    (`0` means slowed directly, no inertia, and more than `0` means that the camera
    will need more time to slow down.)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**惯性**：Babylon.js中的所有相机都带有惯性，这代表相机的惯性。这意味着当你移动Babylon.js中的相机时，你给它一个运动速度，这个速度会根据其惯性值减慢。（`0`表示直接减慢，没有惯性，而大于`0`表示相机需要更多时间才能减慢。）'
- en: Exporting the scenes
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出场景
- en: 'Let''s create the same scene as we did for Blender: a plane, cube, camera,
    and light:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建与Blender相同的场景：一个平面、一个立方体、一个相机和一个灯光：
- en: '![Exporting the scenes](img/image_03_021.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![导出场景](img/image_03_021.png)'
- en: 'To export this scene, just open the exporter''s window using the top menu,
    **Babylon**:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要导出此场景，只需使用顶部菜单打开导出窗口，**Babylon**：
- en: '![Exporting the scenes](img/image_03_022-1024x689.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![导出场景](img/image_03_022-1024x689.png)'
- en: 'Zoom on the top menu:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 放大顶部菜单：
- en: '![Exporting the scenes](img/image_03_023.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![导出场景](img/image_03_023.png)'
- en: 'The exporter window will appear and let''s have a look at the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将会弹出导出窗口，让我们看一下以下截图：
- en: '![Exporting the scenes](img/image_03_024.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![导出场景](img/image_03_024.png)'
- en: 'The options are as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 选项如下：
- en: '**Copy textures to output**: Check this to export the textures (if any mesh
    has at least one texture) to the output directory of the scene file. In other
    words, all the textures of the 3ds Max scene (applied to meshes) will be copied
    into the same folder as the exported Babylon.js scene file.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将纹理复制到输出目录**：勾选此选项以导出纹理（如果有任何网格至少有一个纹理）到场景文件的输出目录。换句话说，3ds Max场景的所有纹理（应用于网格）都将复制到与导出的Babylon.js场景文件相同的文件夹中。'
- en: '**Generate .manifest**: The manifest files are used for the offline mode with
    Babylon.js. The exported scenes can be loaded through the Internet and web browser
    cache as well to save the connection. The manifest files tell the client whether
    the scene has changed or not. If changed, it just reloads the entire scene through
    the Internet.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成.manifest文件**：manifest文件用于Babylon.js的离线模式。导出的场景可以通过互联网和浏览器缓存加载，以节省连接。manifest文件告诉客户端场景是否已更改。如果已更改，它将通过互联网重新加载整个场景。'
- en: '**Export hidden objects**: In 3ds Max, objects can be hidden (not drawn). This
    option configures the exporter to keep or export the hidden objects.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导出隐藏对象**：在3ds Max中，对象可以被隐藏（不绘制）。此选项配置导出器以保留或导出隐藏对象。'
- en: '**Auto save 3ds Max file**: At each export, this saves the 3ds Max project.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动保存3ds Max文件**：每次导出时，都会保存3ds Max项目。'
- en: '**Export only selected**: This exports the selected objects only (meshes, cameras,
    lights, and so on) to the scene file.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅导出所选内容**：这仅将所选对象（网格、相机、灯光等）导出到场景文件中。'
- en: '**Generate binary version**: This exports the scene to a binary file (incremental
    loading).'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成二进制版本**：这会将场景导出到一个二进制文件（增量加载）。'
- en: 'Select the file location as you did for Blender to save the Babylon.js scene
    and click on **Export**. The 3ds Max plugin also offers to export and run the
    scene by launching the default browser with a local server. The result is as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 选择文件位置，就像为Blender保存Babylon.js场景时一样，然后点击**导出**。3ds Max插件还提供通过启动默认浏览器并使用本地服务器来导出和运行场景的功能。结果如下：
- en: '![Exporting the scenes](img/image_03_025.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![导出场景](img/image_03_025.png)'
- en: Loading scenes with Babylon.js programmatically
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Babylon.js编程加载场景
- en: To load scenes using TypeScript, Babylon.js provides you with a class named
    `BABYLON.SceneLoader`. This class contains static methods that allow you to load
    scenes (create new ones), append scenes, and load meshes.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用TypeScript加载场景，Babylon.js为你提供了一个名为`BABYLON.SceneLoader`的类。这个类包含静态方法，允许你加载场景（创建新的）、附加场景和加载网格。
- en: Basically, as a developer, you'll load files using these methods. The `.Load`
    method creates a new scene for you and loads everything (meshes, lights, particle
    systems, camera, and so on), returning the new scene. The`.Append` method takes
    an existing scene as a parameter and appends a new scene to the existing one (useful
    to mix multiple scenes). Finally, the`.ImportMesh` method imports only meshes,
    skeletons (refer to [Chapter 9](ch09.html "Chapter 9. Create and Play Animations"), *Create
    and Play Animations* about animations), and particle systems to an existing scene.
    The following steps will show you how to use these methods and find the right
    way to manage your scenes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，作为一个开发者，你会使用这些方法来加载文件。`.Load` 方法为你创建一个新场景并加载一切（网格、光源、粒子系统、相机等），并返回新场景。`.Append`
    方法接受一个现有场景作为参数，并将其附加到现有场景上（用于混合多个场景）。最后，`.ImportMesh` 方法仅导入网格、骨骼（参考第 9 章[创建和播放动画](ch09.html
    "第 9 章。创建和播放动画"，*创建和播放动画*关于动画）和粒子系统到现有场景。以下步骤将向您展示如何使用这些方法并找到正确管理场景的方法。
- en: The BABYLON.SceneLoader class
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Babylon.SceneLoader 类
- en: '**Loading a scene**: The way to load scenes is pretty easy. Just call the `BABYLON.SceneLoader.Load`
    method with its arguments and let Babylon.js do the rest.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**加载场景**：加载场景的方式相当简单。只需使用其参数调用 `BABYLON.SceneLoader.Load` 方法，然后让 Babylon.js
    做剩下的工作。'
- en: 'The following is an example:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例：
- en: '[PRE0]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first argument, `./`, is the scene file folder. The second argument, `awesome_scene.babylon`,
    is the name of the scene file to load. Finally, the last argument is the engine.
    Indeed, the loader needs an engine to create a new scene.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数，`./`，是场景文件文件夹。第二个参数，`awesome_scene.babylon`，是要加载的场景文件名。最后，最后一个参数是引擎。实际上，加载器需要一个引擎来创建一个新场景。
- en: '**Appending a scene**: The way to append a scene to another scene is almost
    the same; just call the `BABYLON.SceneLoader.Append` method instead of`.Load`.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加场景**：将场景附加到另一个场景的方式几乎相同；只需调用 `BABYLON.SceneLoader.Append` 方法而不是 `.Load`。'
- en: 'The following is an example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例：
- en: '[PRE1]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The two first arguments are equivalent to the `.Load` method. The last scene
    parameter is the original scene. Indeed, the new scene created by the loader will
    be merged with the original one (append).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个参数与 `.Load` 方法等效。最后一个场景参数是原始场景。实际上，由加载器创建的新场景将与原始场景合并（附加）。
- en: '**Importing meshes**: Here, the method is different but still located in the `SceneLoader`
    class with the `.ImportMesh` method. A scene file (`.babylon`) contains multiple
    meshes in the range [0,*n*]. By default, the `.Load` and `.Append` methods import
    all the meshes defined in the scene file. With `.ImportMesh`, you can specify
    which meshes are imported by the loader by giving their names.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**导入网格**：在这里，方法不同，但仍然位于 `SceneLoader` 类中的 `.ImportMesh` 方法。一个场景文件（`.babylon`）包含范围
    [0, *n*] 内的多个网格。默认情况下，`.Load` 和 `.Append` 方法导入场景文件中定义的所有网格。使用 `.ImportMesh`，你可以通过给出它们的名称来指定加载器导入的网格。'
- en: 'The following is an example:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例：
- en: '[PRE2]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first argument, named `meshesNames`, is in the `any` type. Here, the empty
    string tells the loader to import all the meshes. To specify the meshes to be
    imported, just add their names in an array, for example, `["awesome_mesh1", "awesome_mesh2"]`.
    The second and third arguments are equivalent to the `.Load` and `.Append` methods.
    The last parameter is the scene to import the meshes to.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数，名为 `meshesNames`，是 `any` 类型。在这里，空字符串告诉加载器导入所有网格。要指定要导入的网格，只需将它们的名称添加到一个数组中，例如，`["awesome_mesh1",
    "awesome_mesh2"]`。第二个和第三个参数与 `.Load` 和 `.Append` 方法等效。最后一个参数是要导入网格的场景。
- en: The callbacks
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回调
- en: The three methods, `.Load`, `.Append`, and `.ImportMesh`, provide callbacks
    on success, progress, and error that are null by default. They are used to take
    control of the loading process.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个方法，`.Load`、`.Append` 和 `.ImportMesh`，在成功、进度和错误上提供回调，默认为 null。它们用于控制加载过程。
- en: For `.Load` and `.Append`, the callbacks are the same.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `.Load` 和 `.Append`，回调是相同的。
- en: Load and append
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载和附加
- en: 'Let''s look at the following example:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下示例：
- en: '[PRE3]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The success and error callbacks provide the new scene created by the loader.
    Indeed, if you take a look at the Babylon.js sources, you can see that the .Load
    method is just a call to the `.Append` method by creating a new scene.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 成功和错误回调提供了由加载器创建的新场景。实际上，如果你查看 Babylon.js 的源代码，你会看到 .Load 方法只是通过创建一个新场景来调用 `.Append`
    方法。
- en: Importing a mesh
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入网格
- en: 'Let''s look at the following example:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下示例：
- en: '[PRE4]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the success callback, the meshes, `particleSystems`, and `skeletons` arguments
    are arrays of `BABYLON.Mesh`, `BABYLON.ParticleSystem`, and `BABYLON.Skeletons`,
    respectively and contain only the added objects:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: The meshes argument contains all the imported meshes from the scene file.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `particleSystems` argument contains all the imported particle systems (smoke,
    rain, and others).
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The skeletons argument contains all the imported skeletons. Skeletons are entities
    used to create animations and are linked to meshes. Let''s take a character as
    an example: the skeleton represents the character''s armature and is used to create
    movements of the legs, hands, head, and so on. Finally, a character can walk and
    run using the skeletons.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, all tools have been installed and are ready to use. Do not hesitate to
    take a look at the example files to experiment with the scene loader. There are
    some example (scene) files including a skull and the scene building with 3ds Max.
    Naturally, you'll find how to use the scene loader in your code and then get the
    proper architecture.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: As the next step, it is a good occasion to introduce the notion of materials
    and how to customize the 3D object's appearance using these materials. Of course,
    Babylon.js already provides you with a default material that makes the work on
    materials easier than creating materials yourself.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
