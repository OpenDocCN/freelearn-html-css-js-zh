["```js\nself.addEventListener('install', event => {\n   self.skipWaiting();\n   event.waitUntil(\n     // caching etc\n   );\n }); \n```", "```js\nif ('serviceWorker' in navigator) {\n } \n```", "```js\nif ('serviceWorker' in navigator) {\n navigator.serviceWorker.register('/sw.js')\n .then(function(registration) {\n // Registration was successful\n });\n }\n```", "```js\nnavigator.serviceWorker.register('/hr/sw.js', {scope: '/hr/'})\n .then(function (registration) {\n // Registration was successful\n console.log('ServiceWorker registration successful with scope: ', registration.scope);\n });\n```", "```js\nnavigator.serviceWorker.register('/sw-hr.js', {scope: '/hr/'})\n .then(function (registration) {\n // Registration was successful\n console.log('ServiceWorker registration successful with scope: ', registration.scope);\n });\n```", "```js\nnavigator.serviceWorker.getRegistrations()\n .then(function(registrations){\n    registrations.forEach(function(registration) {\n             console.log(\"registration: \", registration.scope);\n          }, this);\n }); \n```", "```js\nnavigator.serviceWorker.getRegistration().then(function (registration) {\n     if (registration) {\n         console.log(\"registration: \", registration.scope);\n     }\n }); \n```", "```js\nreg.addEventListener('updatefound', () => {   // A wild service worker \n//   has appeared in reg.installing!\nconst newWorker = reg.installing;\nconsole.log(\"newWorker.state: \", newWorker.state);\n// \"installing\" - the install event has fired, but not yet complete\n// \"installed\"  - install complete\n// \"activating\" - the activate event has fired, but not yet complete\n// \"activated\"  - fully active\n// \"redundant\"  - discarded. Either failed install, or it's been\n//   replaced by a newer version\n\nnewWorker.addEventListener('statechange', () => {\n// newWorker.state has changed\nconsole.log(\"service worker state change\");\n});\n\n}); \n```"]