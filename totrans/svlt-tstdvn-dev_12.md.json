["```js\n    <script>\n      export let name;\n      export let dob;\n    </script>\n    <div>\n      {name}\n      {dob}\n    </div>\n    ```", "```js\n    import {\n      describe,\n      it,\n      expect,\n      vi\n    } from 'vitest';\n    import {\n      render,\n      screen\n    } from '@testing-library/svelte';\n    import { click } from '@testing-library/user-event';\n    import {\n      createBirthday\n    } from 'src/factories/birthday.js';\n    import Page from './+page.svelte';\n    ```", "```js\n    vi.mock('./Birthday.svelte');\n    ```", "```js\n    describe('/birthdays', () => {\n      const birthdays = [\n        createBirthday('Hercules', '1994-02-02', {\n          id: '123'\n        }),\n        createBirthday('Athena', '1989-01-01', {\n          id: '234'\n        })\n      ];\n    });\n    ```", "```js\n    it('displays a Birthday component for each birthday', () => {\n      render(Page, { data: { birthdays } });\n      expect(\n        screen.queryByText(/Hercules/)\n      ).toBeVisible();\n      expect(\n        screen.queryByText(/1994-02-02/)\n      ).toBeVisible();\n      expect(\n        screen.queryByText(/Athena/)\n      ).toBeVisible();\n      expect(\n        screen.queryByText(/1989-01-01/)\n      ).toBeVisible();\n    });\n    ```", "```js\n    <!--Birthday\n      name={birthday.name}\n      dob={birthday.dob}\n    /-->\n    ```", "```js\n    <script>\n      export let name;\n      export let dob;\n    </script>\n    <div data-testid=\"Birthday\">\n      {name}\n      {dob}\n    </div>\n    ```", "```js\n    it('displays the Birthdays in the same order as the props passed in', () => {\n      render(Page, { data: { birthdays } });\n      const birthdayEls =\n        screen.queryAllByTestId('Birthday');\n      expect(birthdayEls[0]).toHaveTextContent(\n        /Hercules/\n      );\n      expect(birthdayEls[1]).toHaveTextContent(\n        /Athena/\n      );\n    });\n    ```", "```js\n    <script>\n      export let form;\n    </script>\n    <div>\n      Editing {JSON.stringify(form)}\n    </div>\n    ```", "```js\n    vi.mock('./BirthdayForm.svelte');\n    ```", "```js\n    const firstEditButton = () =>\n      screen.queryAllByRole('button', {\n        name: 'Edit'\n      })[0];\n    ```", "```js\n    it('passes the currently edited birthday to the BirthdayForm component', async () => {\n      render(Page, { data: { birthdays } });\n      await click(firstEditButton());\n      expect(\n        screen.queryByText(\n          `Editing ${JSON.stringify(birthdays[0])}`\n        )\n      ).toBeInTheDocument();\n    });\n    ```", "```js\n    <script>\n      import { createEventDispatcher } from 'svelte';\n      const dispatcher = createEventDispatcher();\n      export let form;\n    </script>\n    <div data-testid=\"BirthdayForm\">\n      Editing {JSON.stringify(form)}\n      <button on:click={() => dispatcher('cancel')} />\n    </div>\n    ```", "```js\n    it('cancels editing', async () => {\n      render(Page, { data: { birthdays } });\n      await click(firstEditButton());\n      const button = screen\n        .getByTestId('BirthdayForm')\n        .querySelector('button');\n      await click(button);\n      expect(\n        screen.queryByText(\n          `Editing ${JSON.stringify(birthdays[0])}`\n        )\n      ).not.toBeInTheDocument();\n    });\n    ```", "```js\n    <BirthdayForm\n      form={editing}\n      on:cancel={() => (editing = null)}\n    />\n    ```", "```js\n    npm install --save-dev svelte-component-double\n    ```", "```js\n    import { expect } from 'vitest';\n    import\n      as matchers\n    from 'svelte-component-double/vitest';\n    expect.extend(matchers);\n    import {\n      componentDouble\n    } from 'svelte-component-double';\n    globalThis.componentDouble = componentDouble;\n    ```", "```js\n    setupFiles: [\n      ...,\n      './src/vitest/registerSvelteComponentDouble.js'\n    ],\n    ```", "```js\n    vi.mock('./Birthday.svelte', async () => ({\n      default: componentDouble('Birthday')\n    }));\n    vi.mock('./BirthdayForm.svelte', async () => ({\n      default: componentDouble('BirthdayForm')\n    }));\n    ```", "```js\n    import Birthday from './Birthday.svelte';\n    import BirthdayForm from './BirthdayForm.svelte';\n    ```", "```js\n    describe('/birthdays', () => {\n      beforeEach(Birthday.reset);\n      beforeEach(BirthdayForm.reset);\n      ...\n    });\n    ```", "```js\n    import {\n      ...,\n      beforeEach\n    } from 'vitest';\n    ```", "```js\n    it('displays a Birthday component for each birthday, () => {\n      render(Page, { data: { birthdays } });\n      expect(Birthday).toBeRendered();\n    });\n    ```", "```js\n    Error: Expected \"Birthday\" component double to be rendered but it was not\n    ```", "```js\n    it('displays a Birthday component for each birthday', () => {\n      render(Page, { data: { birthdays } });\n      expect(Birthday).toBeRenderedWithProps({\n        name: 'Hercules',\n      dob: '1994-02-02'\n      });\n      expect(Birthday).toBeRenderedWithProps({\n        name: 'Athena',\n        dob: '1989-01-01'\n      });\n    });\n    ```", "```js\n    Error: Expected \"Birthday\" component double to have been rendered once with props but it was not\n    Expected: Object {\n      \"dob\": \"1994-02-02\",\n      \"name\": \"Hercules\",\n    }\n    Received:\n    ```", "```js\n    it('displays the Birthdays in the same order as the props passed in', () => {\n      render(Page, { data: { birthdays } });\n      expect(Birthday.propsOfAllInstances()).toEqual([\n        expect.objectContaining({ name: 'Hercules' }),\n        expect.objectContaining({ name: 'Athena' })\n      ]);\n    });\n    ```", "```js\n    it('passes the currently edited birthday to the BirthdayForm component', async () => {\n      render(Page, { data: { birthdays } });\n      await click(firstEditButton());\n      expect(BirthdayForm).toBeRenderedWithProps({\n        form: birthdays[0]\n      });\n    });\n    ```", "```js\n    it('cancels editing', async () => {\n      render(Page, { data: { birthdays } });\n      await click(firstEditButton());\n      await BirthdayForm.dispatch('cancel');\n      expect(BirthdayForm).not.toBeRenderedWithProps({\n        form: birthdays[0]\n      });\n    });\n    ```"]