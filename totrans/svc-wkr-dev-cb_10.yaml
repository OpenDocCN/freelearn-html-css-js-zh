- en: Chapter 10. Improving Performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Performing network requests from a cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing network requests from a network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing `waitUntil`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing background sync
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending forward requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding model fetching and render times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this last chapter, we will explore improving performance with the help of
    the service worker. Now, we are going to look into the areas around improving
    network requests from a cache and network, implementing background sync, sending
    forward requests, and avoiding model fetching and render times.
  prefs: []
  type: TYPE_NORMAL
- en: Performing network requests from a cache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a regular visitor to a certain website, chances are that you may
    be loading most of the resources such as CSS and JavaScript files from your cache
    rather than the server itself. This saves us necessary bandwidth for the server
    as well as requests over the network. Having control over which content we deliver
    from the cache and server is a great advantage. The server worker provides us
    this powerful feature by giving us programmatic control over the content. In this
    recipe, we are going to look at the methods that enable us to do so by creating
    a performance art event viewer web app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the *Setting up service workers* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow these instructions to set up your file structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/01/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/01/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First we will request data from the network with the cache enabled. Click on
    the **FETCH** button.![How to do it...](img/B05381_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we are going to select the **Disabled** checkbox under the **SOURCE** label
    and click on the **FETCH** button again in order to fetch data only from the cache.
    An error will be shown on the page. Since the cache is disabled, data cannot be
    fetched.![How to do it...](img/B05381_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `index.js` file, we will set a page-specific name for the cache as the
    caches are per origin-based and no other page should use the same cache name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you inspect the **Resources** tab of the development tools, you can find
    the cache inside **Cache Storage**.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B05381_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will store the elapsed time for the cache in variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The source URL, for example, points to a file location in GitHub via RawGit.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you want to set up your own source URL, you can easily do so by creating
    a gist or a repository in GitHub and creating a file with your data in the JSON
    format (you don't need the `.json` extension). Once you've done that, copy the
    URL of the file and head over to [https://rawgit.com](https://rawgit.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste the link there to obtain another link with a content type header as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B05381_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Between the time we click on the fetch button and all the data being received,
    we have to make sure that the user doesn't either change the criteria for searching
    or click on the fetch button again. To handle this situation, we will disable
    the controls.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The returned data will be rendered to the screen in rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Each item of the `events` array will be printed to the screen as rows.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B05381_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `handleFetchComplete` function is the callback for the cache.
  prefs: []
  type: TYPE_NORMAL
- en: Because request bodies can only be read once, we have to clone the response.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We will place the cloned response in the cache using `cache.put` as a key value
    pair. This helps subsequent cache fetches to find this updated data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now we will read the response in the JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When the user clicks on the fetch button, we will make nearly simultaneous requests
    from the cache for data. This would happen on a page load in a real-world application
    instead of as a result of a user action.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To simulate cache delays, we wait before calling the cache fetch callback. In
    case the callback errors out, we will make sure that we reject `Promise` we got
    from the original call to match.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `formatDate` function is a helper function for us to convert the date format
    we receive in the response into a much more readable format on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you prefer a different date format, you can shuffle the position of the array
    in the return statement to your preferred format.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Showing cached content first* recipe in [Chapter 3](ch03.html "Chapter 3. Accessing
    Offline Content"), *Accessing Offline Content*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing network requests from a network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we looked at how we can fetch requests from the cache.
    In this recipe, we are going to demonstrate how we can fetch requests from the
    server/network using the service worker. To demonstrate network fetch, we are
    going to build an interface similar to the previous recipe, but catered to show
    network interactions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*, *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/02/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/02/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, we will request data from the network with the cache enabled. Click on
    the **FETCH** button.![How to do it...](img/B05381_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we are going to select the **Disabled** checkbox under the **SOURCE** label
    and click on the **FETCH** button again in order to fetch data only from the cache.
    An error will be shown on the page. Since the cache is disabled, data cannot be
    fetched.![How to do it...](img/B05381_10_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `index.js` file, we will set a page-specific name for the cache as the
    caches are per origin-based and no other page should use the same cache name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If you inspect the **Resources** tab of the development tools, you can find
    the cache inside **Cache Storage**.
  prefs: []
  type: TYPE_NORMAL
- en: We will store the elapsed time for both networks in variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The source URL, for example, points to a file location in GitHub via RawGit.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to set up your own source URL, you can easily do so by creating
    a gist or a repository in GitHub and creating a file with your data in the JSON
    format (you don''t need the `.json` extension). Once you''ve done that, copy the
    URL of the file and head over to [https://rawgit.com](https://rawgit.com). Paste
    the link there to obtain a another link with a content type header as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B05381_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Between the time we click on the fetch button and all the data being received,
    we have to make sure that the user doesn't either change the criteria for searching
    or click on the fetch button again. To handle this situation, we will disable
    the controls.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The returned data will be rendered to the screen in rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Each item of the `events` array will be printed to the screen as rows.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B05381_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `handleFetchComplete` function is the callback for both the cache and network.
  prefs: []
  type: TYPE_NORMAL
- en: If the **Disabled** checkbox is checked we will simulate a network error by
    throwing an error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Because request bodies can only be read once, we have to clone the response.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now we will read the response in the JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: When the user clicks on the fetch button, we will make nearly simultaneous requests
    from the network and the cache for data. This would happen on a page load in a
    real-world application instead of as the result of a user action.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We will start with disabling any user input while the network fetch requests
    are initiated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We will request data with the fetch API with a cache-busting URL as well as
    a no-cache option in order to support Firefox, which hasn't implemented the caching
    options yet.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In order to simulate network delays, we wait before calling the network fetch
    callback. In situations where the callback errors out, we have to make sure that
    we reject `Promise` we received from the original fetch.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `formatDate` function is a helper function for us to convert the date format
    we receive in the response into a much more readable format on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If you prefer a different date format, you can shuffle the position of the array
    in the return statement to your preferred format.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Showing cached content first* recipe in [Chapter 3](ch03.html "Chapter 3. Accessing
    Offline Content"), *Accessing Offline Content*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing waitUntil
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to use the service worker to test the `waitUntil`
    method, which will delay the install method of the service worker life cycle until
    the process of opening caches and saving a page to the cache.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the *Setting up service workers* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/03/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/03/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open a browser and go to `index.html`. You will see the **Registration status:
    successful** message.![How to do it...](img/B05381_10_12.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open DevTools (*Cmd* + *Alt* + *I* or *F12*), go to the **Network** tab,
    click on the dropdown displaying **No Throttling**, and select **Offline**.![How
    to do it...](img/B05381_10_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now refresh your bowser, and you will see the offline message and the image.![How
    to do it...](img/B05381_10_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `waitUntil` event extends the lifetime of the install event until all the
    caches are populated. In other words, it delays treating the installing worker
    as installed until all the resources we specify are cached and the passed promise
    resolves successfully.
  prefs: []
  type: TYPE_NORMAL
- en: We saw an HTML and an image file getting cached and then retrieved when our
    website was offline. We can cache other resources as well, including CSS and JavaScript
    files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: When the registration is successful, we will instruct the service worker to
    intercept a request and provide resources from the cached content using the fetch
    event.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `index.html` file, when the registration is successful, we will inspect
    the state of the registration and print it to the browser. Otherwise, we will
    print the error message returned by the service worker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The service worker script file will intercept network requests, check for connectivity,
    and provide the content for the user.
  prefs: []
  type: TYPE_NORMAL
- en: We will add an event listener to the install event, and inside the callback
    we will fire a request to get this offline page with its resources, which gets
    added to the cache when the result is successful.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now we can retrieve this page whenever we need to, because the offline page
    is stored in the cache. We need to add the logic to return the offline page if
    we don't have connectivity in the same service worker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We are listening out for the fetch event in the preceding source code, and we
    simply return the offline page from the cache if we detect that the user is trying
    to navigate to another page, resulting in an error. Now we have our offline page
    working.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing background sync
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The background synchronization feature of the service worker is responsible
    for managing background synchronization processes. This feature, as of writing
    this book, is still nonstandard and you should avoid using it in the production.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the *Setting up service workers* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the *Setting up GitHub pages for
    SSL* recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service Worker Basics"),
    *Learning Service Worker Basics*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/04/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/04/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_10_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Register Background Sync** button. A message will appear at the
    bottom displaying **Sync registered**.![How to do it...](img/B05381_10_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A notification message will also appear on the screen.![How to do it...](img/B05381_10_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our `index.html` file, we will add a section for the button and the message.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We will handle the button click in the `index.js` file. Notifications need permissions,
    so we will handle that here as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Our `service-worker.js` file is fairly simple. We show the notification when
    the sync event handler is called.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Sending forward requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to implement a service worker that sends forward
    requests. Request forwarding is helpful when you want to temporarily forward a
    request to a different resource.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service
    Worker Basics"), *Learning Service Worker Basics*, *Setting up service workers*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the following recipes of [Chapter
    1](ch01.html "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker
    Basics*: *Setting up GitHub pages for SSL*, *Setting up SSL for Windows*, and
    *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download all the files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/05/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/05/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_10_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open DevTools (*Cmd* + *Alt* + *I* or *F12*) to see the log messages on
    the **Console** tab. A forward message will appear in a second.![How to do it...](img/B05381_10_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will add a `div` element to the `index.html` file where we are planning to
    log a message.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We will handle the `active` and `fetch` events inside the `service-worker.js`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The helper function for logging messages to the screen is in the `index.js`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Avoiding model fetching and render times
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to avoid model fetching and render times upon successive requests,
    a cache containing the interpolated templates in order is saved, which we call
    as a render **store**.
  prefs: []
  type: TYPE_NORMAL
- en: According to Mozilla, the render store is intended to save/restore a serialized
    version of a particular view, mostly for the purpose of performance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the *Setting up service workers* recipe of [Chapter 1](ch01.html
    "Chapter 1. Learning Service Worker Basics"), *Learning Service Worker Basics*.
    Service workers only run across HTTPS. To find out how to set up a development
    environment to support this feature, refer to the *Setting up GitHub pages for
    SSL* recipe of [Chapter 1](ch01.html "Chapter 1. Learning Service Worker Basics"),
    *Learning Service Worker Basics*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download files from the following location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/06/](https://github.com/szaranger/szaranger.github.io/blob/master/service-workers/10/06/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open a browser and go to `index.html`.![How to do it...](img/B05381_10_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on any link in the list to go to the store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the beginning of the `index.js` file, we specify the Pokemon API endpoint
    as well as a secure origin.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Next, fetch the Pokemon list from `pokedex` and create a list of links.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Subsequently, populate the list and create the links for the Pokemon list. These
    links will be intercepted by the service worker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's look at the `service-worker.js` file. It tries to recover a cached
    copy of the document. If not found, it responds from the network.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `cacheResponseInRenderStore` function gets the interpolated HTML contents
    of a `PUT` request from `pokemon.js` and creates an HTML response for the interpolated
    result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: In the `pokemon.js` file, we initialize timers to start with.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We are going to create a template for a Pokemon, which is responsible for rendering
    by obtaining data requested from the URL's query string. This template will fetch
    the given Pokemon and fill the template. Once the template has been filled, we
    will mark the document as cached and then we will send it to the render store
    by sending the contents to the service worker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Next, we mark the documents as cached, get all the HTML content, and send it
    to the service worker using a `PUT` request into the `./render-store/` URL.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
