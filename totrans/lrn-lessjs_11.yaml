- en: Chapter 11. Abstracting CSS Frameworks with Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Back in late 2011, the popular social networking site, Twitter, released Bootstrap—the
    framework caused such an impression, it quickly became the most followed project
    on GitHub!
  prefs: []
  type: TYPE_NORMAL
- en: Anybody who has spent time developing must have at least heard of Bootstrap,
    even if they haven't yet had a chance to use it. In the previous chapter, we took
    a brief look at how it uses Less to compile rules into valid CSS and how you can
    experiment with using one of the many mixins available to create your own styles.
  prefs: []
  type: TYPE_NORMAL
- en: The trouble is that Bootstrap as a framework is not without its own faults—it
    encourages us to overload HTML with dozens of classes! This goes against the trend
    that has developed over the last decade, where content should be separate from
    presentation. In this chapter, we'll see why this is bad practice and how we can
    fix the problem by being clever about how we use Bootstrap's mixins.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering what's wrong with using frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping your HTML clean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplifying complex styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keen to learn more? Let's get started…!
  prefs: []
  type: TYPE_NORMAL
- en: Discovering what's wrong with using frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Think back to the previous chapter, where we introduced Bootstrap and covered
    how Less is used to create the styles that are compiled into clean, semantic HTML…Bootstrap
    looks good, is easy to use, and provides a nice, consistent theme to our site,
    right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Wrong—it suffers from one particularly nasty problem: Bootstrap embeds CSS
    classes directly within HTML. We could argue that there is nothing wrong with
    that, except for the fact that the style names used are not always semantic!'
  prefs: []
  type: TYPE_NORMAL
- en: This whole concept of providing semantic code has been at the forefront of developers'
    minds for years. Some frameworks such as Scaffold (for PHP) or Compass (for Ruby)
    recognized the problem back as far as 2009, yet Bootstrap still forces us to use
    nonsemantic CSS styling in our HTML code. To see what this all means, let's delve
    in deeper, take a look at an example, and understand how we can correct this using
    Less.
  prefs: []
  type: TYPE_NORMAL
- en: Diagnosing the problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To see the problem in the flesh, so to speak, we need to view the source code
    for a Bootstrap-enabled site; ironically, the main Bootstrap website has several
    examples, which clearly show the issue!
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by navigating to [http://getbootstrap.com/examples/blog/](http://getbootstrap.com/examples/blog/),
    which is the demo site for Bootstrap''s Blog Theme. Right-click anywhere on the
    page to select the source code as seen in the browser. If you scroll down to on
    or around line 42, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagnosing the problem](img/00111.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the screenshot, lines 50 and 52 have been highlighted, which are perfect
    examples of nonsemantic code; the three styles that have been added all belong
    to Bootstrap. "Why should we not use them when they are clearly a part of Bootstrap?",
    I hear you ask.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a useful introduction to the benefits of separating markup, then look no
    further than the book, *Designing with Web Standards*, by Jeffery Zeldman (and
    Ethan Marcotte, from Version 3 onwards).
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is simple—the HTML markup should describe the meaning of the content
    and nothing else. The problems we have with this code extract are two-fold:'
  prefs: []
  type: TYPE_NORMAL
- en: It makes it difficult to update any code style—if a style needs to be changed,
    then this must be done in every single page of the website, where it appears.
    This can be tedious at best for a small site, but a nightmare if the site is huge!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardcoding Bootstrap's style names into your HTML code means that you are now
    dependent on Bootstrap. If Twitter changes Bootstrap's classes (which has happened),
    then you've just landed yourself a whole heap of unnecessary work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's always a good idea to keep an eye on versions being used in your code and
    not simply use the latest version. Following the latter practice leaves you open
    to trouble!
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, the answer to our dilemma lies in Bootstrap itself and its array
    of mixins. Instead of using the Bootstrap class names within our code, we can
    abstract in a layer by creating more semantic names and applying the Bootstrap
    classes to these names instead. To see how this would work, let's work through
    a few simple examples, using Bootstrap's Jumbotron theme demo as a basis for our
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping HTML code clean
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we view the source for Bootstrap's Jumbotron example, we can clearly see
    some nonsemantic examples, similar to those used in the Blog demo; we'll use them
    as a basis to work through the solution that we can use to fix the issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three examples of interest to us; the first is on line 67:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The next example follows suit immediately on line 68:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The third and final examples we will look at, appear several times, on lines
    71, 76, and 81:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'It goes without saying that there are more examples present; you can see where
    each of our three selected examples are being used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Keeping HTML code clean](img/00112.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: All three examples use names that are too specific to what they do and not to
    the content they apply to. We can easily change the style names used to something
    more semantic, using a technique that can be reused elsewhere in your code without
    difficulty.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how the technique works; it's based around directly referencing
    the Less mixins included as part of the Bootstrap library.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get into editing any code, we first need to download a copy of the
    code that accompanies this book. Here, we will find an (unadulterated) copy of
    the Jumbotron theme, which we can use for the purpose of this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fixing the code](img/00113.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For the purposes of this exercise, I will assume you have extracted a copy of
    the code that accompanies this chapter and stored it in a folder called `jumbotron`,
    ready for editing. We also need a copy of the Bootstrap library, which we can
    get from the main site at [http://getbootstrap.com/getting-started/#download](http://getbootstrap.com/getting-started/#download)
    and then by clicking on **Download source** against the **Source code** option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming we have everything in place, let''s make a start:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the zip archive file we downloaded from the Bootstrap site, then extract
    the `less` folder, and copy it to our `jumbotron` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a separate file, add the following code, saving it as `semantic.less` in
    the `css` subfolder within the `jumbotron` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to alter our HTML, so open `jumbotron.html` and add the highlighted
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we''re going to rename each of the three columns; move down and look
    for the first `<div class="col-md-4">` tag, which is on or around line 60\. This
    can be removed and replaced as shown in the following code; you will need to repeat
    it for two more instances further down the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our third change concerns the heading row container; `row` isn''t sufficiently
    semantic, so we''re going to change it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our last change concerns the `<div>` tag that is used to wrap the three columns.
    The container isn''t particularly semantic, so we''re going to change this to
    use the wrapper as its replacement. Go ahead and remove the container `DIV` line
    and then replace it as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we preview the results in a browser, we should not expect to see any change
    visually, but be safe in knowing that we have started to use more semantic class
    names within our code.
  prefs: []
  type: TYPE_NORMAL
- en: There is one very valid point here—it would be a perfectly valid question to
    ask why we use `wrapper`, in place of `container` here? We could equally use either,
    nothing wrong with that. My preference though is to use the wrapper here, purely
    because it encompasses all of the code (give or take!).
  prefs: []
  type: TYPE_NORMAL
- en: Exploring our solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, now that we have semantic code in our example, what does this mean and
    how does it work? It''s based on two key elements: one of substitution and the
    other of knowing the available Bootstrap mixins that we can use.'
  prefs: []
  type: TYPE_NORMAL
- en: In this instance, we've taken advantage of the group of Less mixins that form
    the basis for creating columns and rows within Bootstrap. We first import four
    Less files, which contain the mixins that we need to use, then create four new
    styles (in the form of `left-content`, `middle-content`, `right-content`, and
    `heading-row`), and assign the `make-md-column`, `make-row`, or `clearfix` mixins
    as appropriate. To ensure that our HTML reflects the changes, we then replace
    the original styles with the new, more semantic style names.
  prefs: []
  type: TYPE_NORMAL
- en: Simplifying complex styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can go further in our code to abstract and simplify the presentational classes
    being used; as an example, we''ll edit the code to replace the CSS style names
    used on the two button types present in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by opening up the `jumbotron.html` file again. Here, we need to
    remove the line starting with `<p><a class="btn btn-default"`… and replace it
    as indicated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to change the current classes assigned to the **Learn more** button,
    so go ahead and modify it as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that our new style names have been assigned, let''s rework the Less styling
    rules listed in `semantic.less` to reflect the changes in our HTML, by assigning
    the relevant mixins to our style classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save the files. If all is well, our code will look something like this screenshot
    extract:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Simplifying complex styles](img/00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we preview the results of our work in a browser, we should not expect to
    see any difference visually, but know that our code is now more semantic. This
    doesn''t mean to say that these changes are the only ones we can do; there is
    definitely scope to do more, at least in this example! This is something I will
    leave for you as my readers to work out, but I will give you a hint: check out
    the navigation…'
  prefs: []
  type: TYPE_NORMAL
- en: In the meantime, let's take a moment to explore what we've achieved here—we've
    used the same solution as outlined in the *Exploring our solution* section we
    saw earlier in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this instance, we''ve taken advantage of the group of Less mixins that make
    up button support within Bootstrap. All we''ve done is created a new style rule
    in our Less code, called `.learn-more`, then assigned to it the three Less mixins
    that were previously used: `.btn`, `.btn-primary`, and `.btn-lg`, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's important to note that this process will not work for grouped buttons due
    to what Bootstrap expects to see in terms of CSS classes; have a look at [http://stackoverflow.com/questions/24113419/](http://stackoverflow.com/questions/24113419/)
    and [http://stackoverflow.com/a/24240819](http://stackoverflow.com/a/24240819),
    for some useful discussions on why this doesn't work for grouped buttons and how
    to work around it.
  prefs: []
  type: TYPE_NORMAL
- en: The key is to get them in the right order so that we maintain the same appearance
    as before. As long as we do this, there should be no change to the appearance
    of the page. We've then repeated the same process with the `.view-details` button,
    but this time, assigned the `.btn` and `.btn-default` styles to it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a complete version of `jumbotron.html` along with the changes. You
    can find it in the code download as `jumbotron_updated.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this modern day of web development, designers are often using frameworks
    to help get a website off the ground quickly. Bootstrap is often considered to
    be one of the most popular frameworks in use today.
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off this chapter by examining a key flaw of frameworks such as Bootstrap,
    where presentational CSS must be included in HTML directly.
  prefs: []
  type: TYPE_NORMAL
- en: We took a look at the problem with using Bootstrap's CSS styles inline in more
    detail and discussed how to use a method to get around the issues. We then went
    on further to apply the same technique to help simplify our HTML so that we can
    still use Bootstrap's styling framework, while removing any dependency on it,
    which can affect how we develop the site in the future.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to change tack and take a look at a topic where
    we can really use the power of Less, in the form of processing colors within your
    website or online application.
  prefs: []
  type: TYPE_NORMAL
