- en: Chapter 11. Abstracting CSS Frameworks with Less
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。使用Less抽象CSS框架
- en: Back in late 2011, the popular social networking site, Twitter, released Bootstrap—the
    framework caused such an impression, it quickly became the most followed project
    on GitHub!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 回到2011年底，流行的社交网站Twitter发布了Bootstrap——这个框架留下了如此深刻的印象，它很快成为了GitHub上最受欢迎的项目！
- en: Anybody who has spent time developing must have at least heard of Bootstrap,
    even if they haven't yet had a chance to use it. In the previous chapter, we took
    a brief look at how it uses Less to compile rules into valid CSS and how you can
    experiment with using one of the many mixins available to create your own styles.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 任何花时间开发过的人至少都听说过Bootstrap，即使他们还没有机会使用它。在前一章中，我们简要地介绍了Bootstrap，并说明了它是如何使用Less将规则编译成有效的CSS，以及你可以如何实验性地使用可用的许多混入来创建自己的样式。
- en: The trouble is that Bootstrap as a framework is not without its own faults—it
    encourages us to overload HTML with dozens of classes! This goes against the trend
    that has developed over the last decade, where content should be separate from
    presentation. In this chapter, we'll see why this is bad practice and how we can
    fix the problem by being clever about how we use Bootstrap's mixins.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，作为一个框架，Bootstrap并非没有自己的缺陷——它鼓励我们用几十个类来超载HTML！这与过去十年中发展起来的趋势相悖，即内容应该与表现分离。在本章中，我们将看到为什么这是不好的做法，以及我们如何通过巧妙地使用Bootstrap的混入来解决这一问题。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Discovering what's wrong with using frameworks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现使用框架的问题
- en: Keeping your HTML clean
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持你的HTML清洁
- en: Simplifying complex styles
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化复杂样式
- en: Keen to learn more? Let's get started…!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多？让我们开始吧…！
- en: Discovering what's wrong with using frameworks
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现使用框架的问题
- en: Think back to the previous chapter, where we introduced Bootstrap and covered
    how Less is used to create the styles that are compiled into clean, semantic HTML…Bootstrap
    looks good, is easy to use, and provides a nice, consistent theme to our site,
    right?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下前一章，我们介绍了Bootstrap，并说明了Less是如何用来创建编译成干净、语义化HTML的样式的…Bootstrap看起来不错，易于使用，并为我们的网站提供了一个美好、一致的主题，对吧？
- en: 'Wrong—it suffers from one particularly nasty problem: Bootstrap embeds CSS
    classes directly within HTML. We could argue that there is nothing wrong with
    that, except for the fact that the style names used are not always semantic!'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 错误——它有一个特别棘手的问题：Bootstrap直接在HTML中嵌入CSS类。我们可以争论这并没有什么问题，除了使用的样式名称并不总是语义化的！
- en: This whole concept of providing semantic code has been at the forefront of developers'
    minds for years. Some frameworks such as Scaffold (for PHP) or Compass (for Ruby)
    recognized the problem back as far as 2009, yet Bootstrap still forces us to use
    nonsemantic CSS styling in our HTML code. To see what this all means, let's delve
    in deeper, take a look at an example, and understand how we can correct this using
    Less.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 提供语义代码的整个概念已经多年来一直处于开发者的思维前沿。一些框架，如Scaffold（用于PHP）或Compass（用于Ruby），早在2009年就认识到了这个问题，然而Bootstrap仍然强迫我们在HTML代码中使用非语义的CSS样式。为了了解这一切的含义，让我们深入探讨，看看一个示例，并了解我们如何使用Less来纠正这个问题。
- en: Diagnosing the problem
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 诊断问题
- en: To see the problem in the flesh, so to speak, we need to view the source code
    for a Bootstrap-enabled site; ironically, the main Bootstrap website has several
    examples, which clearly show the issue!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更直观地看到问题，我们需要查看一个启用Bootstrap的网站的源代码；具有讽刺意味的是，主要的Bootstrap网站有几个示例，清楚地显示了这个问题！
- en: 'Begin by navigating to [http://getbootstrap.com/examples/blog/](http://getbootstrap.com/examples/blog/),
    which is the demo site for Bootstrap''s Blog Theme. Right-click anywhere on the
    page to select the source code as seen in the browser. If you scroll down to on
    or around line 42, you will see the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导航到[http://getbootstrap.com/examples/blog/](http://getbootstrap.com/examples/blog/)，这是Bootstrap博客主题的演示网站。在页面上任何地方右键单击以选择浏览器中看到的源代码。如果你滚动到第42行或附近，你会看到以下内容：
- en: '![Diagnosing the problem](img/00111.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![诊断问题](img/00111.jpeg)'
- en: In the screenshot, lines 50 and 52 have been highlighted, which are perfect
    examples of nonsemantic code; the three styles that have been added all belong
    to Bootstrap. "Why should we not use them when they are clearly a part of Bootstrap?",
    I hear you ask.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在截图上，第50行和第52行已被突出显示，这是非语义代码的完美示例；添加的这三种样式都属于Bootstrap。你可能会问：“为什么我们不能使用它们，它们显然是Bootstrap的一部分？”
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a useful introduction to the benefits of separating markup, then look no
    further than the book, *Designing with Web Standards*, by Jeffery Zeldman (and
    Ethan Marcotte, from Version 3 onwards).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解分离标记的好处，那么不妨看看杰弗里·泽尔达曼（Jeffery Zeldman）所著的《使用 Web 标准》（Designing with Web
    Standards）这本书（从第3版开始，伊森·马科特也参与了编写）。
- en: 'The answer is simple—the HTML markup should describe the meaning of the content
    and nothing else. The problems we have with this code extract are two-fold:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 答案很简单——HTML 标记应该描述内容的含义，而不是其他任何内容。我们在这个代码片段中遇到的问题有两个：
- en: It makes it difficult to update any code style—if a style needs to be changed,
    then this must be done in every single page of the website, where it appears.
    This can be tedious at best for a small site, but a nightmare if the site is huge!
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这使得更新任何代码样式变得困难——如果需要更改样式，那么必须在网站上的每个出现位置进行更改。对于一个小型网站来说，这最多是繁琐的，但如果网站很大，那就成了噩梦！
- en: Hardcoding Bootstrap's style names into your HTML code means that you are now
    dependent on Bootstrap. If Twitter changes Bootstrap's classes (which has happened),
    then you've just landed yourself a whole heap of unnecessary work.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Bootstrap 的样式名称硬编码到你的 HTML 代码中意味着你现在依赖于 Bootstrap。如果 Twitter 更改了 Bootstrap
    的类（这已经发生了），那么你刚刚给自己带来了一大堆不必要的麻烦。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's always a good idea to keep an eye on versions being used in your code and
    not simply use the latest version. Following the latter practice leaves you open
    to trouble!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 总是关注代码中使用的版本是一个好主意，而不仅仅是使用最新版本。遵循后一种做法会让你容易遇到麻烦！
- en: Fortunately, the answer to our dilemma lies in Bootstrap itself and its array
    of mixins. Instead of using the Bootstrap class names within our code, we can
    abstract in a layer by creating more semantic names and applying the Bootstrap
    classes to these names instead. To see how this would work, let's work through
    a few simple examples, using Bootstrap's Jumbotron theme demo as a basis for our
    changes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们困境的答案就藏在 Bootstrap 本身及其一系列混入（mixins）中。我们可以在代码中不直接使用 Bootstrap 的类名，而是通过创建更多语义化的名称，并将
    Bootstrap 类应用到这些名称上，从而在代码中抽象出一个层。为了了解这将如何工作，让我们通过几个简单的示例来探讨，以 Bootstrap 的 Jumbotron
    主题演示作为我们更改的基础。
- en: Keeping HTML code clean
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持 HTML 代码整洁
- en: If we view the source for Bootstrap's Jumbotron example, we can clearly see
    some nonsemantic examples, similar to those used in the Blog demo; we'll use them
    as a basis to work through the solution that we can use to fix the issue.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看 Bootstrap 的 Jumbotron 示例的源代码，我们可以清楚地看到一些非语义示例，类似于在 Blog 示例中使用的那些；我们将以此为基础，探讨我们可以用来修复问题的解决方案。
- en: 'There are three examples of interest to us; the first is on line 67:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个对我们来说有趣的示例；第一个在67行：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The next example follows suit immediately on line 68:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例紧接着在68行：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The third and final examples we will look at, appear several times, on lines
    71, 76, and 81:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的第三个也是最后一个示例，出现在71、76和81行：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It goes without saying that there are more examples present; you can see where
    each of our three selected examples are being used:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不言而喻，还有更多的示例存在；你可以看到我们的三个选定的示例分别在哪里被使用：
- en: '![Keeping HTML code clean](img/00112.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![保持 HTML 代码整洁](img/00112.jpeg)'
- en: All three examples use names that are too specific to what they do and not to
    the content they apply to. We can easily change the style names used to something
    more semantic, using a technique that can be reused elsewhere in your code without
    difficulty.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这三个示例都使用了过于具体的名称，这些名称描述的是它们的功能，而不是它们应用到的内容。我们可以轻松地将使用的样式名称更改为更具语义性的名称，使用一种可以在代码的其他地方轻松重用的技术。
- en: Let's take a look at how the technique works; it's based around directly referencing
    the Less mixins included as part of the Bootstrap library.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这项技术是如何工作的；它基于直接引用作为 Bootstrap 库一部分包含的 Less 混入。
- en: Fixing the code
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复代码
- en: 'Before we get into editing any code, we first need to download a copy of the
    code that accompanies this book. Here, we will find an (unadulterated) copy of
    the Jumbotron theme, which we can use for the purpose of this exercise:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编辑任何代码之前，我们首先需要下载这本书附带代码的副本。在这里，我们将找到一个（未经过滤的）Jumbotron 主题副本，我们可以用它来完成这个练习：
- en: '![Fixing the code](img/00113.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![修复代码](img/00113.jpeg)'
- en: For the purposes of this exercise, I will assume you have extracted a copy of
    the code that accompanies this chapter and stored it in a folder called `jumbotron`,
    ready for editing. We also need a copy of the Bootstrap library, which we can
    get from the main site at [http://getbootstrap.com/getting-started/#download](http://getbootstrap.com/getting-started/#download)
    and then by clicking on **Download source** against the **Source code** option.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这个练习的目的，我将假设你已经提取了本章所附带的代码副本，并将其存储在一个名为`jumbotron`的文件夹中，以便进行编辑。我们还需要一份Bootstrap库的副本，我们可以从主网站[http://getbootstrap.com/getting-started/#download](http://getbootstrap.com/getting-started/#download)下载，然后点击**源代码**选项下的**下载源代码**。
- en: 'Assuming we have everything in place, let''s make a start:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们已经一切准备就绪，让我们开始吧：
- en: Open the zip archive file we downloaded from the Bootstrap site, then extract
    the `less` folder, and copy it to our `jumbotron` folder.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们从Bootstrap网站下载的zip存档文件，然后提取`less`文件夹，并将其复制到我们的`jumbotron`文件夹中。
- en: 'In a separate file, add the following code, saving it as `semantic.less` in
    the `css` subfolder within the `jumbotron` folder:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个单独的文件中，添加以下代码，将其保存为`semantic.less`，位于`jumbotron`文件夹内的`css`子文件夹中：
- en: '[PRE3]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we need to alter our HTML, so open `jumbotron.html` and add the highlighted
    line:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要更改我们的HTML，所以打开`jumbotron.html`并添加以下高亮行：
- en: '[PRE4]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we''re going to rename each of the three columns; move down and look
    for the first `<div class="col-md-4">` tag, which is on or around line 60\. This
    can be removed and replaced as shown in the following code; you will need to repeat
    it for two more instances further down the code:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将重命名三个列中的每一个；向下移动并查找第一个`<div class="col-md-4">`标签，它位于第60行左右。这可以删除并按照以下代码进行替换；你还需要在代码的下方重复两次：
- en: '[PRE5]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Our third change concerns the heading row container; `row` isn''t sufficiently
    semantic, so we''re going to change it:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的第三个更改涉及到标题行容器；`row`并不足够具有语义性，因此我们将对其进行更改：
- en: '[PRE6]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Our last change concerns the `<div>` tag that is used to wrap the three columns.
    The container isn''t particularly semantic, so we''re going to change this to
    use the wrapper as its replacement. Go ahead and remove the container `DIV` line
    and then replace it as shown:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们最后的更改涉及到用于包裹三个列的`<div>`标签。容器并不特别具有语义性，因此我们将将其更改为使用`wrapper`作为替代。请先删除容器`DIV`行，然后按照以下所示进行替换：
- en: '[PRE7]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If we preview the results in a browser, we should not expect to see any change
    visually, but be safe in knowing that we have started to use more semantic class
    names within our code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中预览结果，我们不应该期望在视觉上看到任何变化，但可以放心地知道我们已经开始在代码中使用更具语义的类名。
- en: There is one very valid point here—it would be a perfectly valid question to
    ask why we use `wrapper`, in place of `container` here? We could equally use either,
    nothing wrong with that. My preference though is to use the wrapper here, purely
    because it encompasses all of the code (give or take!).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个非常合理的观点——问为什么我们在这里使用`wrapper`而不是`container`是一个完全合理的问题。我们同样可以使用任何一个，这都没有问题。不过，我的偏好是使用`wrapper`，纯粹是因为它包含了所有的代码（或多或少！）。
- en: Exploring our solution
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索我们的解决方案
- en: 'So, now that we have semantic code in our example, what does this mean and
    how does it work? It''s based on two key elements: one of substitution and the
    other of knowing the available Bootstrap mixins that we can use.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们已经在我们的示例中有了语义代码，这意味着什么以及它是如何工作的？这基于两个关键元素：一个是替换，另一个是了解我们可以使用的可用的Bootstrap混入（mixins）。
- en: In this instance, we've taken advantage of the group of Less mixins that form
    the basis for creating columns and rows within Bootstrap. We first import four
    Less files, which contain the mixins that we need to use, then create four new
    styles (in the form of `left-content`, `middle-content`, `right-content`, and
    `heading-row`), and assign the `make-md-column`, `make-row`, or `clearfix` mixins
    as appropriate. To ensure that our HTML reflects the changes, we then replace
    the original styles with the new, more semantic style names.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们利用了构成Bootstrap中创建列和行的基础的Less混入组。我们首先导入四个Less文件，这些文件包含我们需要使用的混入，然后创建四个新的样式（形式为`left-content`、`middle-content`、`right-content`和`heading-row`），并将`make-md-column`、`make-row`或`clearfix`混入适当地分配。为了确保我们的HTML反映了这些更改，我们随后用新的、更具语义的样式名称替换了原始样式。
- en: Simplifying complex styles
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化复杂样式
- en: 'We can go further in our code to abstract and simplify the presentational classes
    being used; as an example, we''ll edit the code to replace the CSS style names
    used on the two button types present in the code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在我们的代码中进一步抽象和简化正在使用的表示类；例如，我们将编辑代码以替换代码中两种按钮类型所使用的 CSS 样式名称：
- en: 'Let''s start by opening up the `jumbotron.html` file again. Here, we need to
    remove the line starting with `<p><a class="btn btn-default"`… and replace it
    as indicated:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先再次打开 `jumbotron.html` 文件。在这里，我们需要删除以 `<p><a class="btn btn-default"` 开头的行，并按指示进行替换：
- en: '[PRE8]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We also need to change the current classes assigned to the **Learn more** button,
    so go ahead and modify it as shown:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要更改分配给 **了解更多** 按钮的当前类，所以请按照所示进行修改：
- en: '[PRE9]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now that our new style names have been assigned, let''s rework the Less styling
    rules listed in `semantic.less` to reflect the changes in our HTML, by assigning
    the relevant mixins to our style classes:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经分配了新的样式名称，让我们重新工作 `semantic.less` 中列出的 Less 样式规则，以反映我们 HTML 中的更改，通过将相关的混合分配给我们的样式类：
- en: '[PRE10]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Save the files. If all is well, our code will look something like this screenshot
    extract:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件。如果一切顺利，我们的代码将看起来像这个截图提取：
- en: '![Simplifying complex styles](img/00114.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![简化复杂样式](img/00114.jpeg)'
- en: 'If we preview the results of our work in a browser, we should not expect to
    see any difference visually, but know that our code is now more semantic. This
    doesn''t mean to say that these changes are the only ones we can do; there is
    definitely scope to do more, at least in this example! This is something I will
    leave for you as my readers to work out, but I will give you a hint: check out
    the navigation…'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在浏览器中预览我们的工作结果，我们不应该期望在视觉上看到任何差异，但要知道我们的代码现在更加语义化。这并不意味着我们只能做这些更改；在这个例子中，肯定还有更多的空间去做；这是我将留给我的读者们去解决的问题，但我会给你一个提示：查看导航…
- en: In the meantime, let's take a moment to explore what we've achieved here—we've
    used the same solution as outlined in the *Exploring our solution* section we
    saw earlier in the chapter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，让我们花点时间来探索我们在这里所取得的成果——我们使用了本章前面在 *探索我们的解决方案* 部分中概述的相同解决方案。
- en: 'In this instance, we''ve taken advantage of the group of Less mixins that make
    up button support within Bootstrap. All we''ve done is created a new style rule
    in our Less code, called `.learn-more`, then assigned to it the three Less mixins
    that were previously used: `.btn`, `.btn-primary`, and `.btn-lg`, respectively.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们利用了构成 Bootstrap 中按钮支持的 Less 混合组。我们所做的就是在我们 Less 代码中创建了一个新的样式规则，称为 `.learn-more`，然后分别将其分配给之前使用的三个
    Less 混合：`.btn`、`.btn-primary` 和 `.btn-lg`。
- en: Note
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It's important to note that this process will not work for grouped buttons due
    to what Bootstrap expects to see in terms of CSS classes; have a look at [http://stackoverflow.com/questions/24113419/](http://stackoverflow.com/questions/24113419/)
    and [http://stackoverflow.com/a/24240819](http://stackoverflow.com/a/24240819),
    for some useful discussions on why this doesn't work for grouped buttons and how
    to work around it.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，由于 Bootstrap 对 CSS 类的期望，这个过程不适用于分组按钮；查看 [http://stackoverflow.com/questions/24113419/](http://stackoverflow.com/questions/24113419/)
    和 [http://stackoverflow.com/a/24240819](http://stackoverflow.com/a/24240819)，了解一些关于为什么这不适合分组按钮以及如何绕过它的有用讨论。
- en: The key is to get them in the right order so that we maintain the same appearance
    as before. As long as we do this, there should be no change to the appearance
    of the page. We've then repeated the same process with the `.view-details` button,
    but this time, assigned the `.btn` and `.btn-default` styles to it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是要将它们按正确的顺序排列，以便我们保持与之前相同的外观。只要我们这样做，页面的外观就不应该有任何变化。然后，我们用 `.view-details`
    按钮重复了同样的过程，但这次，我们给它分配了 `.btn` 和 `.btn-default` 样式。
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is a complete version of `jumbotron.html` along with the changes. You
    can find it in the code download as `jumbotron_updated.html`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`jumbotron.html` 的完整版本以及所做的更改。您可以在代码下载中找到它，名为 `jumbotron_updated.html`。'
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this modern day of web development, designers are often using frameworks
    to help get a website off the ground quickly. Bootstrap is often considered to
    be one of the most popular frameworks in use today.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个网络开发的现代时代，设计师们经常使用框架来帮助快速搭建网站。Bootstrap 通常被认为是当今使用最广泛的框架之一。
- en: We kicked off this chapter by examining a key flaw of frameworks such as Bootstrap,
    where presentational CSS must be included in HTML directly.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过检查像 Bootstrap 这样的框架的关键缺陷开始了这一章，即表示 CSS 必须直接包含在 HTML 中。
- en: We took a look at the problem with using Bootstrap's CSS styles inline in more
    detail and discussed how to use a method to get around the issues. We then went
    on further to apply the same technique to help simplify our HTML so that we can
    still use Bootstrap's styling framework, while removing any dependency on it,
    which can affect how we develop the site in the future.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更详细地审视了在行内使用 Bootstrap 的 CSS 样式的问题，并讨论了如何使用一种方法来规避这些问题。然后我们继续应用同样的技术来简化我们的
    HTML，这样我们仍然可以使用 Bootstrap 的样式框架，同时去除对其的任何依赖，这可能会影响我们未来开发网站的方式。
- en: In the next chapter, we're going to change tack and take a look at a topic where
    we can really use the power of Less, in the form of processing colors within your
    website or online application.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将转变方向，探讨一个我们可以真正利用 Less 的强大功能的话题，即处理网站或在线应用程序中的颜色。
