["```js\nvar scene = new THREE.Scene();\nvar camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\nscene.add(camera);\n...\nvar planeGeometry = new THREE.PlaneGeometry(60,40,1,1);\nvar planeMaterial = new THREE.MeshLambertMaterial({color: 0xffffff});\nvar plane = new THREE.Mesh(planeGeometry,planeMaterial);\n...\nscene.add(plane);\nvar ambientLight = new THREE.AmbientLight(0x0c0c0c);\nscene.add(ambientLight);\n...\nvar spotLight = new THREE.SpotLight( 0xffffff );\n...\nscene.add( spotLight );\n\n```", "```js\nthis.addCube = function() {\n\n  var cubeSize = Math.ceil((Math.random() * 3));\n  var cubeGeometry = new THREE.BoxGeometry(cubeSize,cubeSize,cubeSize);\n  var cubeMaterial = new THREE.MeshLambertMaterial({color: Math.random() * 0xffffff });\n  var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\n  cube.castShadow = true;\n cube.name = \"cube-\" + scene.children.length;\n  cube.position.x=-30 + Math.round(Math.random() * planeGeometry.width));\n  cube.position.y= Math.round((Math.random() * 5));\n  cube.position.z=-20 + Math.round((Math.random() * planeGeometry.height));\n\n  scene.add(cube);\n this.numberOfObjects = scene.children.length;\n};\n```", "```js\n  this.removeCube = function() {\n    var allChildren = scene.children;\n    var lastObject = allChildren[allChildren.length-1];\n    if (lastObject instanceof THREE.Mesh) {\n      scene.remove(lastObject);\n      this.numberOfObjects = scene.children.length;\n    }\n  }\n```", "```js\n  this.outputObjects = function() {\n    console.log(scene.children);\n  }\n```", "```js\n__webglActive: true\n__webglInit: true\n_listeners: Object\n_modelViewMatrix: THREE.Matrix4\n_normalMatrix: THREE.Matrix3\ncastShadow: true\nchildren: Array[0]\neulerOrder: (...)\nfrustumCulled: true\ngeometry: THREE.BoxGeometryid: 8\nmaterial: THREE.MeshLambertMaterial\nmatrix: THREE.Matrix4\nmatrixAutoUpdate: true\nmatrixWorld: THREE.Matrix4\nmatrixWorld\nNeedsUpdate: false\nname: \"cube-17\"\nparent: THREE.Scene\nposition: THREE.Vector3\nquaternion: THREE.Quaternion\nreceiveShadow: false\nrenderDepth: null\nrotation: THREE.Euler\nrotationAutoUpdate: true\nscale: THREE.Vector3\ntype: \"Mesh\"\nup: THREE.Vector3\nuseQuaternion: (...)\nuserData: Object\nuuid: \"DCDC0FD2-6968-44FD-8009-20E9747B8A73\"\nvisible: true\n```", "```js\nfunction render() {\n  stats.update();\n  scene.traverse(function(obj) {\n    if (obj instanceof THREE.Mesh && obj != plane ) {\n      obj.rotation.x+=controls.rotationSpeed;\n      obj.rotation.y+=controls.rotationSpeed;\n      obj.rotation.z+=controls.rotationSpeed;\n   }\n  });\n\n  requestAnimationFrame(render);\n  renderer.render(scene, camera);\n}\n```", "```js\nscene.fog=new THREE.Fog( 0xffffff, 0.015, 100 );\n```", "```js\nscene.fog=new THREE.FogExp2( 0xffffff, 0.01 );\n```", "```js\nscene.overrideMaterial = new THREE.MeshLambertMaterial({color: 0xffffff});\n```", "```js\nvar sphereGeometry = new THREE.SphereGeometry(4,20,20);\nvar sphereMaterial = new THREE.MeshBasicMaterial({color: 0x7777ff);\nvar sphere = new THREE.Mesh(sphereGeometry,sphereMaterial);\n```", "```js\nvar vertices = [\n  new THREE.Vector3(1,3,1),\n  new THREE.Vector3(1,3,-1),\n  new THREE.Vector3(1,-1,1),\n  new THREE.Vector3(1,-1,-1),\n  new THREE.Vector3(-1,3,-1),\n  new THREE.Vector3(-1,3,1),\n  new THREE.Vector3(-1,-1,-1),\n  new THREE.Vector3(-1,-1,1)\n];\n\nvar faces = [\n  new THREE.Face3(0,2,1),\n  new THREE.Face3(2,3,1),\n  new THREE.Face3(4,6,5),\n  new THREE.Face3(6,7,5),\n  new THREE.Face3(4,5,1),\n  new THREE.Face3(5,0,1),\n  new THREE.Face3(7,6,2),\n  new THREE.Face3(6,3,2),\n  new THREE.Face3(5,7,0),\n  new THREE.Face3(7,2,0),\n  new THREE.Face3(1,3,4),\n  new THREE.Face3(3,6,4),\n];\n\nvar geom = new THREE.Geometry();\ngeom.vertices = vertices;\ngeom.faces = faces;\ngeom.computeFaceNormals();\n```", "```js\nmesh.children.forEach(function(e) {\n  e.geometry.vertices=vertices;\n  e.geometry.verticesNeedUpdate=true;\n  e.geometry.computeFaceNormals();\n});\n```", "```js\nvar materials = [\n  new THREE.MeshLambertMaterial( { opacity:0.6, color: 0x44ff44, transparent:true } ),\n  new THREE.MeshBasicMaterial( { color: 0x000000, wireframe: true } )\n];\n```", "```js\nvar mesh = THREE.SceneUtils.createMultiMaterialObject( geom, materials);\n```", "```js\nmesh.children.forEach(function(e) {e.castShadow=true});\n```", "```js\nthis.clone = function() {\n\n  var clonedGeom = mesh.children[0].geometry.clone();\n  var materials = [\n    new THREE.MeshLambertMaterial( { opacity:0.6, color: 0xff44ff, transparent:true } ),\n    new THREE.MeshBasicMaterial({ color: 0x000000, wireframe: true } )\n  ];\n\n  var mesh2 = THREE.SceneUtils.createMultiMaterialObject(clonedGeom, materials);\n  mesh2.children.forEach(function(e) {e.castShadow=true});\n  mesh2.translateX(5);\n  mesh2.translateZ(5);\n  mesh2.name=\"clone\";\n  scene.remove(scene.getObjectByName(\"clone\"));\n  scene.add(mesh2);\n}\n```", "```js\nvar helper = new THREE.WireframeHelper(mesh, 0x000000);\n\n```", "```js\ncube.position.x=10;\ncube.position.y=3;\ncube.position.z=1;\n```", "```js\ncube.position.set(10,3,1);\n```", "```js\ncube.postion=new THREE.Vector3(10,3,1)\n```", "```js\ncube.rotation.x = 0.5*Math.PI;\ncube.rotation.set(0.5*Math.PI, 0, 0);\ncube.rotation = new THREE.Vector3(0.5*Math.PI,0,0);\n```", "```js\nVar degrees = 45;\nVar inRadians = degrees * (Math.PI / 180);\n```", "```js\nthis.switchCamera = function() {\n  if (camera instanceof THREE.PerspectiveCamera) {\n    camera = new THREE.OrthographicCamera( window.innerWidth / - 16, window.innerWidth / 16, window.innerHeight / 16, window.innerHeight / - 16, -200, 500 );\n    camera.position.x = 120;\n    camera.position.y = 60;\n    camera.position.z = 180;\n    camera.lookAt(scene.position);\n    this.perspective = \"Orthographic\";\n  } else {\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\n\n    camera.position.x = 120;\n    camera.position.y = 60;\n    camera.position.z = 180;\n\n    camera.lookAt(scene.position);\n    this.perspective = \"Perspective\";\n  }\n};\n```", "```js\ncamera.lookAt(new THREE.Vector3(x,y,z));\n```"]