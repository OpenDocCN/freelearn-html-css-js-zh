["```js\nnpm install passport --save\n\n```", "```js\nnpm install passport-github --save\n\n```", "```js\nnpm install -g cucumber\n\n```", "```js\nnpm install zombie --save-dev\n\n```", "```js\nnpm install grunt-cucumber --save-dev\n\n```", "```js\n    cucumberjs: {\n      files: 'features',\n      options: {\n        steps: \"features/step_definitions\",format: \"pretty\"\n      }\n    },\n```", "```js\nAs a vision user\nI want to be able to authenticate via Github\nSo that I can view project activity\n```", "```js\nFeature: Authentication\nAs a vision user\nI want to be able to authenticate via Github\nSo that I can view project activity \n\n  Scenario: User logs in successfully\n    Given I have a GitHub Account\n    When I click the GitHub authentication button\n    Then I should be logged in\n    And I should see my name and a logout link\n\n  Scenario: User logs out successfully\n    Given I am logged in to Vision\n    When I click the logout button\n    Then I should see the GitHub login button\n```", "```js\ngrunt cucumberjs\n\n```", "```js\n2 scenarios (2 undefined)\n7 steps (7 undefined)\nYou can implement step definitions for undefined steps with these snippets:\nthis.Given(/^I have a GitHub Account$/, function(callback) {\n  callback.pending();\n});\n\nthis.When(/^I click the GitHub authentication button$/, function(callback) {\n  callback.pending();\n});\n\nthis.Then(/^I should be logged in$/, function(callback) {\n  callback.pending();\n});\n\nthis.Then(/^I should see my name and a logout link$/, function(callback) {\n  callback.pending();\n});\n\nthis.Given(/^I am logged in to Vision$/, function(callback) {\n  callback.pending();\n});\n\nthis.When(/^I click the logout button$/, function(callback) {\n  callback.pending();\n});\n\nthis.Then(/^I should see the GitHub login button$/, function(callback) {\n  callback.pending();\n});\n```", "```js\nvar steps = function() {\n  var Given = When = Then = this.defineStep;\n  ..add generated steps here\n};\n\nmodule.exports = steps;\n```", "```js\ngrunt cucumberjs\n\n```", "```js\n2 scenarios (2 pending)\n7 steps (2 pending, 5 skipped)\n\n```", "```js\n\"auth\": {\n    \"homepage\": \"http://127.0.0.1:3000\"\n  , \"callback\": \"http://127.0.0.1:3000/auth/github/callback\"\n  , \"clientId\": \"5bb691b4ebb5417f4ab9\"\n  , \"clientSecret\": \"15310740929666983d52808dda32417d733791d0\"\n}\n```", "```js\n, login = require('../../test/login');\n```", "```js\nvar async = require('async')\n, GitHubRepo = require('../github')\n, config = require('../configuration');\n\nfunction GitHubAuth() {\n  this.passport = require('passport')\n  var GitHubStrategy = require('passport-github').Strategy;\n\n  this.passport.use(new GitHubStrategy({\n      clientID     : config.get('auth:clientId'),\n      clientSecret : config.get('auth:clientSecret'),\n      callbackURL  : config.get('auth:callback')\n  },\n  function(accessToken, refreshToken, profile, done) {\n\n    var user = {\n      id : profile.username,\n      displayName : profile.displayName,\n      token : accessToken\n    };\n\n    var git = new GitHubRepo(user.token, user.id);\n\n    git.updateTokens(function(){\n      process.nextTick(function () {\n        return done(null, user);\n      });\n    });\n  };\n  ));\n\n  this.passport.serializeUser(function(user, done) {\n    done(null, user);\n  });\n\n  this.passport.deserializeUser(function(user, done) {\n    done(null, user);\n  });\n};\n\nmodule.exports = new GitHubAuth();\n```", "```js\nGitHubRepo.prototype.updateTokens = function(done) {\n  var query = { \"user\" :  this.user };\n\n  Project.find(query, function(error, projects) {\n    if (error) return done();\n    if (projects == null) done();\n\n    async.each(projects, function(project, callback) {\n      project.token = this.token;\n\n      project.save(function(error, p) {\n        callback();\n      });\n    }\n    , function(error) {\n      done();\n    });\n  });\n};\n```", "```js\n  \"session\": {\n    \"secret\": \"th1$1$a$ecret\"\n    , \"maxAge\": null\n    , \"secure\": true\n    , \"httpOnly\": true\n  }\n```", "```js\nvar gitHubAuth = require('../github/authentication')\n```", "```js\n  var cookieParser = express.\n    cookieParser(config.get('session:secret'));\n  app.use(cookieParser);\n```", "```js\napp.use(express.bodyParser());\nvar sessionStore = new express.session.MemoryStore();\napp.use(express.session({ store: sessionStore,\n  secret: config.get('session:secret'),\n  cookie: { secure: config.get('session:secure'),\n  httpOnly: config.get('session:httpOnly'),\n  maxAge: config.get('session:maxAge') }}));\n```", "```js\napp.use(gitHubAuth.passport.initialize());\napp.use(gitHubAuth.passport.session());\n```", "```js\napp.get('/auth/github',gitHubAuth.passport.authenticate('github'),routes.auth.login);\n\napp.get('/auth/github/callback',gitHubAuth.passport.authenticate('github',{ failureRedirect: '/' }), routes.auth.callback);\n```", "```js\nexports.callback = function(req, res) {\n  logger.info('Request.' + req.url);\n  res.redirect('/');\n};\n\nexports.login = function(req, res){\n  logger.info('Request.' + req.url);\n};\n```", "```js\n   , middleware = require('../middleware')\n\napp.all('*', middleware.projectForm.addToken);\n.. all routes below\n```", "```js\nexports.addToken = function(req, res, next){\n  if (req.isAuthenticated()) {\n    req.body.user = req.session.passport.user.id;\n    req.body.token = req.session.passport.user.token;\n    req.user = req.session.passport.user;\n  };\n\n  next();\n}\n```", "```js\nexports.index = function(req, res){\n  var model = {\n    title: 'vision.',\n    description: 'a project based dashboard for github',\n    author: 'airasoul',\n user: req.isAuthenticated() ? req.user.displayName : ''\n  };\n\n  res.render('index', model);\n};\n```", "```js\nvar Browser = require('zombie')\n, assert = require('assert')\nS = require('string')\nconfig = require('../../../lib/configuration');\n\nvar steps = function() {\n  var silent = false;\n  var debug = false;\n  var Given = When = Then = this.defineStep;\n  var browser = null;\n  var me = this;\n\n   this.Before(function(callback) {\n     browser = new Browser();\n     browser.setMaxListeners(20);\n     setTimeout(callback(), 5000);\n   });\n};\n\nmodule.exports = steps;\n```", "```js\nthis.Given(/^I have a GitHub Account$/, function(callback) {browser.visit('https://github.com/login',{silent: silent, debug: debug});\n\n    browser.wait(function(){\n      browser\n        .fill('login', '#LOGIN#')\n        .fill('password', '#PASSWORD#')\n        .pressButton('Sign in', function() {\n          callback();\n    });\n  });\n});\n```", "```js\nthis.When(/^I click the GitHub authentication button$/, function(callback) {\n    browser.visit(config.get('auth:homepage'),\n    {silent: silent, debug: debug});\n\n    browser.wait(function(){\n      browser\n        .clickLink('#login', function() {\n          callback();\n        });\n      });\n});\n```", "```js\nthis.Then(/^I should be logged in$/, function(callback) {\n  assert.ok(browser.success);\n  callback();\n});\n```", "```js\nthis.Then(/^I should see my name and a logout link$/, function(callback) {\n  assert.equal(browser.text('#welcome'),'welcome Andrew Keig, click here to sign out');\n      callback();\n});\n```", "```js\n  Given I am logged in to Vision\n  When I click the logout button\n  Then I should see the GitHub login button\n```", "```js\napp.get('/logout', routes.auth.logout);\n```", "```js\nexports.logout = function(req, res){\n  logger.info('Request.' + req.url);\n  req.logout();\n  res.redirect('/');\n};\n```", "```js\nthis.Given(/^I am logged in to Vision$/, function(callback) {\n  browser.visit(config.get('auth:homepage'),{silent: silent, debug: debug});\n\n  browser.wait(function(){\n    browser\n    .clickLink('#login', function() {\n      callback();\n    });\n  });\n});\n```", "```js\nthis.When(/^I click the logout button$/, function(callback) {\n  browser.visit(config.get('auth:homepage'),{silent: silent, debug: debug});\n\n  browser.wait(function(){\n    browser\n    .clickLink('#logout', function(err) {\n      callback();\n    });\n  });\n});\n```", "```js\nthis.Then(/^I should see the GitHub login button$/, function(callback) {\n  assert.ok(browser.success);\n  var containsLogin = S(browser.html('#login')).contains('vision/github.png')\n    assert.equal(true, containsLogin);\n    callback();\n  });\n```", "```js\ncd ../vision/lib/secure\nopenssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem\n\n```", "```js\nvar fs = require('fs')\n, https = require('https');\n\nfunction Server(app){\n  var httpsOptions = {\n    key: fs.readFileSync('./lib/secure/key.pem'),cert: fs.readFileSync('./lib/secure/cert.pem')\n  };\n\n  return https.createServer(httpsOptions,app).listen(app.get('port'));\n}\n\nmodule.exports = Server;\n```", "```js\nvar httpServer = http.createServer(app).listen(app.get('port'));\n```", "```js\nvar server = require('./server')(app);\n```", "```js\n\"auth\": {\n    \"homepage\": \"https://127.0.0.1:8443\"\n  , \"callback\": \"https://127.0.0.1:8443/auth/github/callback\"\n  , \"clientId\": \"5bb691b4ebb5417f4ab9\"\n  , \"clientSecret\": \"15310740929666983d52808dda32417d733791d0\"\n  },\n```", "```js\nVision.Application = function(){        \n  this.start = function(){\n var socketio = io.connect('/', {secure: true, port: '8443'});\n    var router = new Vision.Router(socketio);\n    Backbone.history.start();\n    router.navigate('index', true);\n  }\n};\n```", "```js\nnpm install session.socket.io --save\n\n```", "```js\nvar socketHandler = new SocketHandler(httpServer, sessionStore, cookieParser);\n```", "```js\nfunction SocketHandler(httpServer, sessionStore, cookieParser) {\n  var socketIo = new Socket(httpServer)\n  var sessionSockets = new SessionSockets(socketIo, sessionStore, cookieParser);\n\n  sessionSockets.on('connection', function(err, socket, session) {\n    subscriber.subscribe(\"issues\");\n    subscriber.subscribe(\"commits\");\n\n    subscriber.client.on(\"message\", function (channel, message) {\n      socket.broadcast.to(message.projectId)\n      .emit(channel, JSON.parse(message));\n    });\n\n    socket.on('subscribe', function (data) {\n      var user = session ? session.passport.user : null;\n      if (!user) return;\n      socket.join(data.channel);\n      session.touch();\n    });\n  });\n\n  sessionSockets.on('error', function() {\n    logger.error(arguments);\n  });\n};\n\nmodule.exports = SocketHandler;\n```", "```js\nvar express = require('express');\n\nfunction Security(app) {\n  if (process.env['NODE_ENV'] === \"TEST\"  ||process.env['NODE_ENV'] === \"COVERAGE\") return;\n\n  app.use(express.csrf());\n};\n\nmodule.exports = Security;\n```", "```js\nrequire('../security')(app);\n```", "```js\nBackbone.sync = (function(original) {\n  return function(method, model, options) {\n    options.beforeSend = function(xhr) {\n      var token = $(\"meta[name='csrf-token']\").attr('content');\n      xhr.setRequestHeader('X-CSRF-Token', token);\n    };\n    original(method, model, options);\n  };\n})(Backbone.sync);\n```", "```js\nexports.index = function(req, res){\n  var model = {\n    title: 'vision.',\n    description: 'a project based dashboard for github',\n    author: 'airasoul',\n    user: req.isAuthenticated() ? req.user.displayName : '',\n csrftoken: req.session._csrf\n  };\n\n  res.render('index', model);\n};\n```", "```js\n<meta name=\"csrf-token\" content=\"{{csrftoken}}\">\n```", "```js\nvar express = require('express')\n, helmet = require('helmet');\n\nfunction Security(app) {\n  if (process.env['NODE_ENV'] === \"TEST\"  ||\n    process.env['NODE_ENV'] === \"COVERAGE\") return;\n\n app.use(helmet.xframe());\n app.use(helmet.hsts());\n app.use(helmet.iexss());\n app.use(helmet.contentTypeOptions());\n app.use(helmet.cacheControl());\n  app.use(express.csrf());\n};\n\nmodule.exports = Security;\n```"]