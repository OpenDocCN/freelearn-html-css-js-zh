["```js\nfunction createImage (name) {\n  return new Image(name)\n}\nconst image = createImage('photo.jpeg') \n```", "```js\nconst image = new Image(name) \n```", "```js\nfunction createImage (name) {\n  if (name.match(/\\.jpe?g$/)) {\n    return new ImageJpeg(name)\n  } else if (name.match(/\\.gif$/)) {\n    return new ImageGif(name)\n  } else if (name.match(/\\.png$/)) {\n    return new ImagePng(name)\n  } else {\n    throw new Error('Unsupported format')\n  }\n} \n```", "```js\nfunction createPerson (name) {\n  const privateProperties = {}\n  const person = {\n    setName (name) {\n      if (!name) {\n        throw new Error('A person must have a name')\n      }\n      privateProperties.name = name\n    },\n    getName () {\n      return privateProperties.name\n    }\n  }\n  person.setName(name)\n  return person\n} \n```", "```js\nclass Profiler {\n  constructor (label) {\n    this.label = label\n    this.lastTime = null\n  }\n  start () {\n    this.lastTime = process.hrtime()\n  }\n  end () {\n    const diff = process.hrtime(this.lastTime)\n    console.log(`Timer \"${this.label}\" took ${diff[0]} seconds ` +\n      `and ${diff[1]} nanoseconds.`)\n  }\n} \n```", "```js\nconst noopProfiler = {\n  start () {},\n  end () {}\n}\nexport function createProfiler (label) {\n  if (process.env.NODE_ENV === 'production') {\n    return noopProfiler\n  }\n  return new Profiler(label)\n} \n```", "```js\n// index.js\nimport { createProfiler } from './profiler.js'\nfunction getAllFactors (intNumber) {\n  const profiler = createProfiler(\n    `Finding all factors of ${intNumber}`)\n  profiler.start()\n  const factors = []\n  for (let factor = 2; factor <= intNumber; factor++) {\n    while ((intNumber % factor) === 0) {\n      factors.push(factor)\n      intNumber = intNumber / factor\n    }\n  }\n  profiler.end()\n  return factors\n}\nconst myNumber = process.argv[2]\nconst myFactors = getAllFactors(myNumber)\nconsole.log(`Factors of ${myNumber} are: `, myFactors) \n```", "```js\nNODE_ENV=production node index.js 2201307499 \n```", "```js\nnode index.js 2201307499 \n```", "```js\nclass Boat {\n  constructor (hasMotor, motorCount, motorBrand, motorModel,\n               hasSails, sailsCount, sailsMaterial, sailsColor,\n               hullColor, hasCabin) {\n    // ...\n  }\n} \n```", "```js\nconst myBoat = new Boat(true, 2, 'Best Motor Co. ', 'OM123', true, 1,\n                        'fabric', 'white', 'blue', false) \n```", "```js\nclass Boat {\n  constructor (allParameters) {\n    // ...\n  }\n}\nconst myBoat = new Boat({\n  hasMotor: true,\n  motorCount: 2,\n  motorBrand: 'Best Motor Co. ',\n  motorModel: 'OM123',\n  hasSails: true,\n  sailsCount: 1,\n  sailsMaterial: 'fabric',\n  sailsColor: 'white',\n  hullColor: 'blue',\n  hasCabin: false\n}) \n```", "```js\nclass BoatBuilder {\n  withMotors (count, brand, model) {\n    this.hasMotor = true\n    this.motorCount = count\n    this.motorBrand = brand\n    this.motorModel = model\n    return this\n  }\n  withSails (count, material, color) {\n    this.hasSails = true\n    this.sailsCount = count\n    this.sailsMaterial = material\n    this.sailsColor = color\n    return this\n  }\n  hullColor (color) {\n    this.hullColor = color\n    return this\n  }\n  withCabin () {\n    this.hasCabin = true\n    return this\n  }\n  build() {\n    return new Boat({\n      hasMotor: this.hasMotor,\n      motorCount: this.motorCount,\n      motorBrand: this.motorBrand,\n      motorModel: this.motorModel,\n      hasSails: this.hasSails,\n      sailsCount: this.sailsCount,\n      sailsMaterial: this.sailsMaterial,\n      sailsColor: this.sailsColor,\n      hullColor: this.hullColor,\n      hasCabin: this.hasCabin\n    })\n  }\n} \n```", "```js\nconst myBoat = new BoatBuilder()\n  .withMotors(2, 'Best Motor Co. ', 'OM123')\n  .withSails(1, 'fabric', 'white')\n  .withCabin()\n  .hullColor('blue')\n  .build() \n```", "```js\nexport class Url {\n  constructor (protocol, username, password, hostname,\n    port, pathname, search, hash) {\n    this.protocol = protocol\n    this.username = username\n    this.password = password\n    this.hostname = hostname\n    this.port = port\n    this.pathname = pathname\n    this.search = search\n    this.hash = hash\n    this.validate()\n  }\n  validate () {\n    if (!this.protocol || !this.hostname) {\n      throw new Error('Must specify at least a ' +\n        'protocol and a hostname')\n    }\n  }\n  toString () {\n    let url = ''\n    url += `${this.protocol}://`\n    if (this.username && this.password) {\n      url += `${this.username}:${this.password}@`\n    }\n    url += this.hostname\n    if (this.port) {\n      url += this.port\n    }\n    if (this.pathname) {\n      url += this.pathname\n    }\n    if (this.search) {\n      url += `?${this.search}`\n    }\n    if (this.hash) {\n      url += `#${this.hash}`\n    }\n    return url\n  }\n} \n```", "```js\nreturn new Url('https', null, null, 'example.com', null, null, null,\n  null) \n```", "```js\nexport class UrlBuilder {\n  setProtocol (protocol) {\n    this.protocol = protocol\n    return this\n  }\n  setAuthentication (username, password) {\n    this.username = username\n    this.password = password\n    return this\n  }\n  setHostname (hostname) {\n    this.hostname = hostname\n    return this\n  }\n  setPort (port) {\n    this.port = port\n    return this\n  }\n  setPathname (pathname) {\n    this.pathname = pathname\n    return this\n  }\n  setSearch (search) {\n    this.search = search\n    return this\n  }\n  setHash (hash) {\n    this.hash = hash\n    return this\n  }\n  build () {\n    return new Url(this.protocol, this.username, this.password,\n      this.hostname, this.port, this.pathname, this.search,\n      this.hash)\n  }\n} \n```", "```js\nimport { UrlBuilder } from './urlBuilder.js'\nconst url = new UrlBuilder()\n  .setProtocol('https')\n  .setAuthentication('user', 'pass')\n  .setHostname('example.com')\n  .build()\nconsole.log(url.toString()) \n```", "```js\nsuperagent\n  .post('https://example.com/api/person')\n  .send({ name: 'John Doe', role: 'user' })\n  .set('accept', 'json')\n  .then((response) => {\n    // deal with the response\n  }) \n```", "```js\n//                    (1)               (2)          (3)\nconst object = new SomeClass(function executor(revealedMembers) {\n  // manipulation code ...\n}) \n```", "```js\nconst MODIFIER_NAMES = ['swap', 'write', 'fill']\nexport class ImmutableBuffer {\n  constructor (size, executor) {\n    const buffer = Buffer.alloc(size)                         // (1)\n    const modifiers = {}                                      // (2)\n    for (const prop in buffer) {                              // (3)\n      if (typeof buffer[prop] !== 'function') {\n        continue\n      }\n      if (MODIFIER_NAMES.some(m => prop.startsWith(m))) {     // (4)\n        modifiers[prop] = buffer[prop].bind(buffer)\n      } else {\n        this[prop] = buffer[prop].bind(buffer)                // (5)\n      }\n    }\n    executor(modifiers)                                       // (6)\n  }\n} \n```", "```js\nimport { ImmutableBuffer } from './immutableBuffer.js'\nconst hello = 'Hello!'\nconst immutable = new ImmutableBuffer(hello.length,\n  ({ write }) => {                                         // (1)\n    write(hello)\n  })\nconsole.log(String.fromCharCode(immutable.readInt8(0)))    // (2)\n// the following line will throw\n// \"TypeError: immutable.write is not a function\"\n// immutable.write('Hello?')                               // (3) \n```", "```js\nreturn new Promise((resolve, reject) => {\n  // ...\n}) \n```", "```js\n// 'Database.js'\nexport class Database {\n  constructor (dbName, connectionDetails) {\n    // ...\n  }\n  // ...\n} \n```", "```js\n// file 'dbInstance.js'\nimport { Database } from './Database.js'\n**export****const** **dbInstance** = new Database('my-app-db', {\n    url: 'localhost:5432',\n    username: 'user',\n    password: 'password'\n}) \n```", "```js\nimport { dbInstance } from './dbInstance.js' \n```", "```js\n{\n  \"name\": \"mydb\",\n  \"version\": \"2.0.0\",\n  \"type\": \"module\",\n  \"main\": \"dbInstance.js\"\n} \n```", "```js\nimport { dbInstance } from 'mydb'\nexport function getDbInstance () {\n  return dbInstance\n} \n```", "```js\napp/\n`-- node_modules\n    |-- package-a\n    |  `-- node_modules\n    |      `-- mydb\n    `-- package-b\n        `-- node_modules\n            `-- mydb \n```", "```js\nimport { getDbInstance as getDbFromA } from 'package-a'\nimport { getDbInstance as getDbFromB } from 'package-b'\nconst isSame = getDbFromA() === getDbFromB()\nconsole.log('Is the db instance in package-a the same ' +\n  `as package-b? ${isSame ? 'YES' : 'NO'}`) \n```", "```js\nglobal.dbInstance = new Database('my-app-db', {/*...*/}) \n```", "```js\nimport { dirname, join } from 'path'\nimport { fileURLToPath } from 'url'\nimport sqlite3 from 'sqlite3'\nconst __dirname = dirname(fileURLToPath(import.meta.url))\nexport const db = new sqlite3.Database(\n  join(__dirname, 'data.sqlite')) \n```", "```js\nimport { promisify } from 'util'\nimport { db } from './db.js'\nconst dbRun = promisify(db.run.bind(db))\nconst dbAll = promisify(db.all.bind(db))\nexport class Blog {\n  initialize () {\n    const initQuery = `CREATE TABLE IF NOT EXISTS posts (\n      id TEXT PRIMARY KEY,\n      title TEXT NOT NULL,\n      content TEXT,\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    );`\n    return dbRun(initQuery)\n  }\n  createPost (id, title, content, createdAt) {\n    return dbRun('INSERT INTO posts VALUES (?, ?, ?, ?)',\n      id, title, content, createdAt)\n  }\n  getAllPosts () {\n    return dbAll('SELECT * FROM posts ORDER BY created_at DESC')\n  }\n} \n```", "```js\nimport { Blog } from './blog.js'\nasync function main () {\n  const blog = new Blog()\n  await blog.initialize()\n  const posts = await blog.getAllPosts()\n  if (posts.length === 0) {\n    console.log('No post available. Run `node import-posts.js`' +\n      ' to load some sample posts')\n  }\n  for (const post of posts) {\n    console.log(post.title)\n    console.log('-'.repeat(post.title.length))\n    console.log(`Published on ${new Date(post.created_at)\n      .toISOString()}`)\n    console.log(post.content)\n  }\n}\nmain().catch(console.error) \n```", "```js\nimport { promisify } from 'util'\nexport class Blog {\n  **constructor** **(db) {**\n    **this****.db = db**\n    **this****.dbRun = promisify(db.run.bind(db))**\n    **this****.dbAll = promisify(db.all.bind(db))**\n  **}**\n  initialize () {\n    const initQuery = `CREATE TABLE IF NOT EXISTS posts (\n      id TEXT PRIMARY KEY,\n      title TEXT NOT NULL,\n      content TEXT,\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    );`\n    return this.dbRun(initQuery)\n  }\n  createPost (id, title, content, createdAt) {\n    return this.dbRun('INSERT INTO posts VALUES (?, ?, ?, ?)',\n      id, title, content, createdAt)\n  }\n  getAllPosts () {\n    return this.dbAll(\n      'SELECT * FROM posts ORDER BY created_at DESC')\n  }\n} \n```", "```js\nimport sqlite3 from 'sqlite3'\nexport function createDb (dbFile) {\n  return new sqlite3.Database(dbFile)\n} \n```", "```js\nimport { dirname, join } from 'path'\nimport { fileURLToPath } from 'url'\nimport { Blog } from './blog.js'\nimport { createDb } from './db.js'\nconst __dirname = dirname(fileURLToPath(import.meta.url))\nasync function main () {\n  **const** **db = createDb(join(__dirname,** **'data.sqlite'****))**\n  **const** **blog =** **new** **Blog(db)**\n  await blog.initialize()\n  const posts = await blog.getAllPosts()\n  if (posts.length === 0) {\n    console.log('No post available. Run `node import-posts.js`' +\n      ' to load some sample posts')\n  }\n  for (const post of posts) {\n    console.log(post.title)\n    console.log('-'.repeat(post.title.length))\n    console.log(`Published on ${new Date(post.created_at)\n      .toISOString()}`)\n    console.log(post.content)\n  }\n}\nmain().catch(console.error) \n```"]