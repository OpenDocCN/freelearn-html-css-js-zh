["```js\n    function sum(a, b) { \n      var c = a + b; \n      return c; \n    } \n\n```", "```js\n    > var result = sum(1, 2); \n    > result; \n    3 \n\n```", "```js\n    > sum(1); \n    NaN \n\n```", "```js\n    > function sum(a, b) { \n        return a + b; \n      } \n    > sum(1, 2); \n\n```", "```js\n    > sum(1, 2, 3, 4, 5); \n    3 \n\n```", "```js\n    > function args() { \n        return arguments; \n      } \n    > args(); \n    [] \n    > args( 1, 2, 3, 4, true, 'ninja'); \n    [1, 2, 3, 4, true, \"ninja\"] \n\n```", "```js\n    function sumOnSteroids() { \n      var i, \n          res = 0, \n          number_of_params = arguments.length; \n      for (i = 0; i < number_of_params; i++) { \n        res += arguments[i]; \n      } \n      return res; \n    } \n\n```", "```js\n    > sumOnSteroids(1, 1, 1); \n    3 \n    > sumOnSteroids(1, 2, 3, 4); \n    10 \n    > sumOnSteroids(1, 2, 3, 4, 4, 3, 2, 1); \n    20 \n    > sumOnSteroids(5); \n    5 \n    > sumOnSteroids(); \n    0 \n\n```", "```js\n    function render(fog_level=0, spark_level=100){ \n      console.log(`Fog Level: ${fog_level} and spark_level:\n       ${spark_level}`) \n    } \n    render(10); //Fog Level: 10 and spark_level: 100 \n\n```", "```js\n    render(undefined,10); //Fog Level: 0 and spark_level: 10 \n\n```", "```js\n    function t(fog_level=1, spark_level=fog_level){\n      console.log(`Fog Level: ${fog_level} and spark_level: \n       ${spark_level}`) \n      //Fog Level: 10 and spark_level: 10 \n    } \n    function s(fog_level=10, spark_level = fog_level*10){ \n      console.log(`Fog Level: ${fog_level} and spark_level:\n       ${spark_level}`) \n      //Fog Level: 10 and spark_level: 100 \n    } \n    t(10); \n    s(10); \n\n```", "```js\n    var scope=\"outer_scope\"; \n    function scoper(val=scope){ \n      var scope=\"inner_scope\"; \n      console.log(val); //outer_scope \n    } \n    scoper(); \n\n```", "```js\n    function sayThings(tone, ...quotes){ \n      console.log(Array.isArray(quotes)); //true \n      console.log(`In ${tone} voice, I say ${quotes}`) \n    } \n    sayThings(\"Morgan Freeman\",\"Something serious\",\" \n     Imploding Universe\",\" Amen\"); \n    //In Morgan Freeman voice, I say Something serious,\n     Imploding Universe,Amen \n\n```", "```js\n    function sumAll(a,b,c){ \n      return a+b+c \n    } \n    var numbers = [6,7,8] \n    //ES5 way of passing array as an argument of a function \n    console.log(sumAll.apply(null,numbers)); //21 \n    //ES6 Spread operator \n    console.log(sumAll(...numbers))//21 \n\n```", "```js\n    var midweek = ['Wed', 'Thu']; \n    var weekend = ['Sat', 'Sun']; \n    var week = ['Mon','Tue', ...midweek, 'Fri', ...weekend]; \n     //[\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\"] \n    console.log(week); \n\n```", "```js\n    > parseInt('123'); \n    123 \n    > parseInt('abc123'); \n    NaN \n    > parseInt('1abc23'); \n    1 \n    > parseInt('123abc'); \n    123 \n\n```", "```js\n    > parseInt('FF', 10); \n    NaN \n    > parseInt('FF', 16); \n    255 \n\n```", "```js\n    > parseInt('0377', 10); \n    377 \n    > parseInt('0377', 8); \n    255 \n\n```", "```js\n            > parseInt('377'); \n            377 \n            > console.log(0o377); \n            255 \n            > parseInt('0x377'); \n            887 \n\n    ```", "```js\n    > parseFloat('123'); \n    123 \n    > parseFloat('1.23'); \n    1.23 \n    > parseFloat('1.23abc.00'); \n    1.23 \n    > parseFloat('a.bc1.23'); \n    NaN \n\n```", "```js\n    > parseFloat('a123.34'); \n    NaN \n    > parseFloat('12a3.34'); \n    12 \n\n```", "```js\n    > parseFloat('123e-2'); \n    1.23 \n    > parseFloat('1e10'); \n    10000000000 \n    > parseInt('1e10'); \n    1 \n\n```", "```js\n    > isNaN(NaN); \n    true \n    > isNaN(123); \n    false \n    > isNaN(1.23); \n    false \n    > isNaN(parseInt('abc123')); \n    true \n\n```", "```js\n    > isNaN('1.23'); \n    false \n    > isNaN('a1.23'); \n    true \n\n```", "```js\n    > isFinite(Infinity); \n    false \n    > isFinite(-Infinity); \n    false \n    > isFinite(12); \n    true \n    > isFinite(1e308); \n    true \n    > isFinite(1e309); \n    false \n\n```", "```js\n    > var url = 'http://www.packtpub.com/script.php?q=this and that'; \n    > encodeURI(url); \n    \"http://www.packtpub.com/script.php?q=this%20and%20that\" \n    > encodeURIComponent(url); \n    \"http%3A%2F%2Fwww.packtpub.com%2Fscript.php%3Fq%3Dthis%20and%20that\" \n\n```", "```js\n    > eval('var ii = 2;'); \n    > ii; \n    2 \n\n```", "```js\n            var global = 1; \n            function f() { \n              var local = 2; \n              global++; \n              return global; \n            } \n\n    ```", "```js\n    > f(); \n    2 \n    > f(); \n    3 \n    > local; \n    ReferenceError: local is not defined \n\n```", "```js\n    var a = 123; \n\n    function f() { \n      alert(a); \n      var a = 1; \n      alert(a); \n    } \n\n    f(); \n\n```", "```js\n    var a = 123; \n\n    function f() { \n      var a; // same as: var a = undefined; \n      alert(a); // undefined \n      a = 1; \n      alert(a); // 1 \n    } \n\n```", "```js\n    var a = 1; \n    { \n        let a = 2; \n        console.log( a );   // 2 \n    } \n    console.log( a );       // 1 \n\n```", "```js\n    function swap(a,b){ // <--function scope starts here \n      if(a>0 && b>0){   // <--block scope starts here \n        let tmp=a; \n        a=b; \n        b=tmp; \n      }                // <--block scope ends here \n      console.log(a,b); \n      console.log(tmp); // tmp is not defined as it is available\n       only in the block scope \n      return [a,b]; \n    } \n    swap(1,2); \n\n```", "```js\n    function blocker(x){ \n      if(x){ \n        let f; \n        let f; //duplicate declaration \"f\" \n      } \n    } \n\n```", "```js\n    const car = {} \n    car.tyres = 4 \n\n```", "```js\n            Use let \n\n    ```", "```js\n    var f = function () { \n      return 1; \n    }; \n\n```", "```js\n    var f = function myFunc() { \n      return 1; \n    }; \n\n```", "```js\n    > function define() { \n        return 1;  \n      } \n\n    > var express = function () {  \n        return 1;  \n      }; \n\n    > typeof define; \n    \"function\" \n\n    > typeof express; \n    \"function\" \n\n```", "```js\n    > var sum = function (a, b) { \n        return a + b; \n      }; \n\n    > var add = sum; \n    > typeof add; \n    function \n    > add(1, 2); \n    3 \n\n```", "```js\n    var f = function (a) { \n      return a; \n    }; \n\n```", "```js\n    function invokeAdd(a, b) { \n      return a() + b(); \n    } \n\n```", "```js\n    function one() { \n      return 1; \n    } \n\n    function two() { \n      return 2; \n    } \n\n```", "```js\n    > invokeAdd(one, two); \n    3 \n\n```", "```js\n    > invokeAdd(function () {return 1; }, function () {return 2; }); \n    3 \n\n```", "```js\n    > invokeAdd( \n        function () { return 1; },  \n        function () { return 2; } \n      ); \n    3 \n\n```", "```js\n    > invokeAdd( \n        function () { \n          return 1; \n        },  \n        function () { \n          return 2; \n        } \n      ); \n    3 \n\n```", "```js\n    function multiplyByTwo(a, b, c) { \n      var i, ar = []; \n      for (i = 0; i < 3; i++) { \n        ar[i] = arguments[i] * 2; \n      } \n      return ar; \n    } \n\n    function addOne(a) { \n      return a + 1; \n    } \n\n```", "```js\n    > multiplyByTwo(1, 2, 3); \n    [2, 4, 6] \n    > addOne(100); \n    101 \n\n```", "```js\n    > var myarr = []; \n    > myarr = multiplyByTwo(10, 20, 30); \n    [20, 40, 60] \n\n```", "```js\n    > for (var i = 0; i < 3; i++) { \n        myarr[i] = addOne(myarr[i]); \n      } \n    > myarr; \n    [21, 41, 61] \n\n```", "```js\n    function multiplyByTwo(a, b, c, callback) { \n      var i, ar = []; \n      for (i = 0; i < 3; i++) { \n        ar[i] = callback(arguments[i] * 2); \n      } \n      return ar; \n    } \n\n```", "```js\n    > myarr = multiplyByTwo(1, 2, 3, addOne); \n    [3, 5, 7] \n\n```", "```js\n    > multiplyByTwo(1, 2, 3, function (a) { \n        return a + 1; \n      }); \n    [3, 5, 7] \n\n```", "```js\n    > multiplyByTwo(1, 2, 3, function (a) { \n        return a + 2; \n      }); \n    [4, 6, 8] \n\n```", "```js\n    ( \n      function () { \n        alert('boo'); \n      } \n    )(); \n\n```", "```js\n    ( \n      function (name) { \n        alert('Hello ' + name + '!'); \n      } \n    )('dude'); \n\n```", "```js\n    (function () { \n      // ... \n    }()); \n\n    // vs.  \n\n    (function () { \n      // ... \n    })(); \n\n```", "```js\n    var result = (function () { \n      // something complex with \n      // temporary local variables... \n      // ... \n\n      // return something; \n    }()); \n\n```", "```js\n    var result = function () { \n      // something complex with \n      // temporary local variables \n      // return something; \n    }(); \n\n```", "```js\n    function outer(param) { \n      function inner(theinput) { \n        return theinput * 2; \n      } \n      return 'The result is ' + inner(param); \n    } \n\n```", "```js\n    var outer = function (param) { \n      var inner = function (theinput) { \n        return theinput * 2; \n      }; \n      return 'The result is ' + inner(param); \n    }; \n\n```", "```js\n    > outer(2); \n    \"The result is 4\" \n    > outer(8); \n    \"The result is 16\" \n    > inner(2); \n    ReferenceError: inner is not defined \n\n```", "```js\n    function a() { \n      alert('A!'); \n      return function () { \n        alert('B!'); \n      }; \n    } \n\n```", "```js\n    > var newFunc = a(); \n    > newFunc(); \n\n```", "```js\n    > a()(); \n\n```", "```js\n    > a = a(); \n\n```", "```js\n    function a() { \n      alert('A!'); \n      a = function () { \n        alert('B!'); \n      }; \n    } \n\n```", "```js\n    var a = (function () { \n\n      function someSetup() { \n        var setup = 'done'; \n      } \n\n      function actualWork() { \n        alert('Worky-worky'); \n      } \n\n      someSetup(); \n      return actualWork; \n\n    }()); \n\n```", "```js\n    > var a = 1;  \n    > function f() { \n        var b = 1;  \n        return a; \n      } \n    > f(); \n    1 \n    > b; \n    ReferenceError: b is not defined \n\n```", "```js\n    var global = 1; \n    function outer() { \n      var outer_local = 2; \n      function inner() { \n        var inner_local = 3; \n        return inner_local + outer_local + global; \n      } \n      return inner(); \n    } \n\n```", "```js\n    > outer(); \n    6 \n\n```", "```js\n    var a = \"global variable\"; \n    var F = function () { \n      var b = \"local variable\"; \n      var N = function () { \n        var c = \"inner local\"; \n      }; \n    }; \n\n```", "```js\n    var a = \"global variable\"; \n    var F = function () { \n      var b = \"local variable\"; \n      var N = function () { \n        var c = \"inner local\"; \n        return b; \n      }; \n      return N; \n    }; \n\n```", "```js\n    > b; \n    ReferenceError: b is not defined \n\n```", "```js\n    > var inner = F(); \n    > inner(); \n    \"local variable\" \n\n```", "```js\n    var inner; // placeholder \n    var F = function () { \n      var b = \"local variable\"; \n      var N = function () { \n        return b; \n      }; \n      inner = N; \n    }; \n\n```", "```js\n    > F(); \n\n```", "```js\n    > inner(); \n    \"local variable\". \n\n```", "```js\n    function F(param) { \n      var N = function () { \n        return param; \n      }; \n      param++; \n      return N; \n    } \n\n```", "```js\n    > var inner = F(123); \n    > inner(); \n    124 \n\n```", "```js\n    function F() { \n      var arr = [], i; \n      for (i = 0; i < 3; i++) { \n        arr[i] = function () { \n          return i; \n        }; \n      } \n      return arr; \n    } \n\n```", "```js\n    > var arr = F(); \n\n```", "```js\n    > arr[0](); \n    3 \n    > arr[1](); \n    3 \n    > arr[2](); \n    3 \n\n```", "```js\n    function F() { \n      var arr = [], i; \n      for (i = 0; i < 3; i++) { \n        arr[i] = (function (x) { \n          return function () { \n            return x; \n          }; \n        }(i)); \n      } \n      return arr; \n    } \n\n```", "```js\n    > var arr = F(); \n    > arr[0](); \n    0 \n    > arr[1](); \n    1 \n    > arr[2](); \n    2 \n\n```", "```js\n    function F() { \n\n      function binder(x) { \n        return function () { \n          return x; \n        }; \n      } \n\n      var arr = [], i; \n      for (i = 0; i < 3; i++) { \n        arr[i] = binder(i); \n      } \n      return arr; \n    } \n\n```", "```js\n    var getValue, setValue; \n\n    (function () { \n\n      var secret = 0; \n\n      getValue = function () { \n        return secret; \n      }; \n\n      setValue = function (v) { \n        if (typeof v === \"number\") { \n          secret = v; \n        } \n      }; \n\n    }()); \n\n```", "```js\n    > getValue(); \n    0 \n    > setValue(123); \n    > getValue(); \n    123 \n    > setValue(false); \n    > getValue(); \n    123 \n\n```", "```js\n    function setup(x) { \n      var i = 0; \n      return function () { \n        return x[i++]; \n      }; \n    } \n\n```", "```js\n    > var next = setup(['a', 'b', 'c']); \n\n```", "```js\n    > next(); \n    \"a\" \n    > next(); \n    \"b\" \n    > next(); \n    \"c\" \n\n```", "```js\n    (function () { \n      var block_scoped=0; \n    }()); \n    console.log(block_scoped); //reference error \n\n```", "```js\n    $(\"#submit-btn\").click(function (event) { \n      validateForm(); \n      submitMessage(); \n    }); \n\n```", "```js\n    const num = [1,2,3] \n    const squares = num.map(function(n){ \n      return n*n; \n    }); \n    console.log(squares); //[1,4,9] \n\n```", "```js\n    const squares_6 =num.map( n=> n*n) \n\n```", "```js\n    n => { return n+n}  //statement block \n    n =>n+n            //expression \n\n```", "```js\n            > var a = getRGB(\"#00FF00\"); \n            > a; \n            \"rgb(0, 255, 0)\" \n\n    ```", "```js\n            > parseInt(1e1); \n            > parseInt('1e1'); \n            > parseFloat('1e1'); \n            > isFinite(0/10); \n            > isFinite(20/0); \n            > isNaN(parseInt(NaN)); \n\n    ```", "```js\n            var a = 1; \n\n            function f() { \n             function n() { \n                alert(a); \n              } \n              var a = 2; \n              n(); \n            } \n\n            f(); \n\n    ```", "```js\n                var f = alert; \n                eval('f(\"Boo!\")'); \n\n        ```", "```js\n                var e; \n                var f = alert; \n                eval('e=f')('Boo!'); \n\n        ```", "```js\n                (function(){ \n                  return alert;} \n                )()('Boo!'); \n\n        ```"]