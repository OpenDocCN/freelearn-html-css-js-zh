- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is included to assist the students to perform the activities present
    in the book. It includes detailed steps that are to be performed by the students
    to complete and achieve the objectives of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 1: Getting to Know JavaScript'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1.01: Creating an Alert Box Popup in the Web Browser'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Press *F12* to open the developer tools that are integrated within it. If this
    doesn''t work, a right-click may expose a prompt so that you can do this as well:![Figure
    1.18: Choosing Inspect in Google Chrome'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_01_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.18: Choosing Inspect in Google Chrome'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The developer tools may default to the console. If not, there is likely to
    be a `Console` tab you can click on to activate it. The console allows you to
    write JavaScript code directly within the web browser itself:![Figure 1.19: The
    Developer Tools Console tab in Google Chrome'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_01_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.19: The Developer Tools Console tab in Google Chrome'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Within the console, write the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Hit *Return*/*Enter* to execute the code. The code will execute within the browser
    environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see an alert appear in the browser viewport displaying your message,
    as shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.20: An alert appears with our message'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_01_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.20: An alert appears with our message'
  prefs: []
  type: TYPE_NORMAL
- en: What does that code do? It declares a variable, using the `var` keyword, with
    the `greeting` identifier on the first line. As part of this same line of code,
    we then use the `=` assignment operator to assign a `'Hello from JavaScript!'`
    text string value to our variable.
  prefs: []
  type: TYPE_NORMAL
- en: On the second line, we use the `alert()` function and pass in our `greeting`
    identifier as an argument. The result is that the web browser displays an alert
    overlay with the text value applied to the identifier we passed in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 2: Working with JavaScript'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 2.01: Adding and Modifying an Item to/in the To-Do List'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create the HTML file yourself and paste in the HTML code to get started:![Figure
    2.28: The initial to-do list''s appearance'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_28.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.28: The initial to-do list''s appearance'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The first thing we need to do is assign an ID to our list in order to identify
    it via code. To do this, add an `id` attribute to the `ol` element and give it
    a value of `todo-list`. With that complete, we can then address this element directly
    with JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using a bit of JavaScript code, we can now create a new variable named `parentContainer`.
    This will refer to the ordered list container element that holds all of our list
    items. We''ll use the ID we assigned in the previous step to address this element
    directly via the use of the `getElementById()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new HTML `<li>` list item element via JavaScript. Right now, the element
    only exists in memory since we have to add it to a visual container. It also has
    no text content associated with it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s populate the list item with a data value. Set the `innerText` of
    our `newItem` node to a string. The value of that string can be whatever you like,
    but it should fit within the concept of a to-do list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that the new HTML element has been created and populated with text, we
    can add it to the visual document by appending it to a chosen parent container
    that already exists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then need to add an extra line of JavaScript below all the others that currently
    exist within our `<script>` tag to modify the element''s appearance. We will reference
    the last child element within our ordered list and change the `style` attribute
    to add a CSS color rule. You can set the actual color of the text to whatever
    you likeâ€”I''m going to use `crimson`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, to verify the execution order through code, add the following line of
    JavaScript directly underneath the initial declaration of `parentContainer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the following line right before the closing `<script>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With that completed, refresh your browser view and a seventh item should appear
    on your list. Do keep an eye on the developer tools console to verify the execution
    order of our code! Not only will the new item be added to the existing ordered
    list, but it will also display with crimson text instead of the usual white:![Figure
    2.29: A list item has been added to our to-do list and styled in crimson'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_02_29.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.29: A list item has been added to our to-do list and styled in crimson'
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is just a simple example of how JavaScript can have a direct influence
    over other aspects of the environment it is run with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 3: Programming Fundamentals'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 3.01: The To-Do List Shuffle Program'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All the coding is done in the `activity.js` file. Add the code after the comment
    shown in each step. Create the array of `todo` items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Examine the `ol` element in the HTML document file called `activity.html` and
    notice that it has an `id` attribute with the value of `todo-list`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can create an object variable, referencing the `ol` element using the `document.getElementById`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, write a function that accepts a list element object and an array of values.
    The function removes the `li` elements from the list element and then loops through
    the array, creating new `li` elements for each value in the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first line uses the `innerHTML` property to remove all the contents of the
    list element object. The `for` loop iterates through the array. The first line
    in the `for` loop creates an `li` element object named `liEle`. The next line
    uses the `liEle` object's `addChild` method to append a text node to the `liEle`
    object. The `document.createTextNode` method provides the item in the array as
    a proper node object. The last line appends the `liEle` object to the `listEle`
    object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The final step is to call the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This function will execute when the `activity.js` file is loaded.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Save the `activity.js` file and reload the `activity.html` file in the web
    browser. It should appear as follows:![Figure 3.24: activity.js and activity.html
    file output'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_03_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.24: `activity.js` and `activity.html` file output'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Examine the `button` element in the HTML document file called `activity.html`
    and notice that it has an `id` attribute with the value of `shuffle-button`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can create an object variable referencing the `button` element by using
    the `document.getElementById` method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, you need to listen for click events and call a function that will handle
    the event. The `shuffleButtonEle` object''s `addEventListener` method can do that
    for you. The first argument is the name of the event, and the second argument
    is the name of the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to write the `shuffleButtonClicked` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The only line of code is used to call the `replaceListElements` function. The
    first argument is the `todoEle` object for the `ol` element. The second argument
    is the `getNewShuffledArray` function, which is using the `todoList` array as
    an argument. The `getNewShuffledArray` function returns an array that's been shuffled.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the `activity.js` file and reload the `activity.html` file in the web browser.
    Then, click the Shuffle button to see the list change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a moment to examine the comments in the `getNewShuffledArray` function
    to see how it works. It shuffles the array elements, and appears as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, make a copy of `sourceArray` and set the index to make a swap, starting
    with the last:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an index to make a swap with `swapIndex` and swap the value of `swapIndex`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `while` loop called `swapIndex` that''s not equal to `0` and pick
    an index to swap with the current index from `0` to the current `swapIndex`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, reduce `swapIndex` by `1` and make a copy of the `swapIndex` value. Then,
    replace the `swapIndex` value with the `swapWithIndex` value, and replace the
    `swapWithIndex` value with the `temporaryValue` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The shuffled To-Do list will look similar to something as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.25: Shuffled list 1](img/C14377_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.25: Shuffled list 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example of a shuffled To-Do list is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.26: Shuffled list 2](img/C14377_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.26: Shuffled list 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 4: JavaScript Libraries and Frameworks'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 4.01: Adding an Animation to the Todo List Application'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Go to [cdnjs.com](http://cdnjs.com) and get the jQuery CDN URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the library into the head tag of your existing Todo-List-HTML using a
    script tag. This will allow you to use jQuery within your code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside `activity.js`, you need to change the `todoEle` variable. Change it
    to a jQuery element:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Inside the `replaceListElements` function, you can now use functions on the
    `todoEle` element that jQuery provides you with.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Hide and clear what''s inside the element using the necessary jQuery functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the for loop, create the `liEle` list item element, set the text contest,
    and append it to the `listEle` list element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, slowly fade in the new sorted todo list, that is, `listEle`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open the HTML in your browser and click the Shuffle button. The todo list
    should fade out, shuffle, and fade in again:![Figure 4.17: Output Image'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_04_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `replaceListElements` function, you can now use Velocity to hide
    (by setting opacity to 0) the list element, `listEle`, and then empty the elements
    inside of it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To fade the list element back in, animate `listEle` using Velocity and set
    the opacity to `1`. Set the code after the for loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, open the HTML in your browser and click the *Shuffle* button. The `todo`
    list should fade out, shuffle, and fade in again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, using the Anime method, go to [cdnjs.com](http://cdnjs.com) and get
    the `Anime.js` CDN URL. It will appear the same as the previous output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Load the library into the head tag of your existing Todo-List-HTML using a
    script tag. This will allow you to use `Anime.js` within your code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `replaceListElements` function, you can now use `Anime.js` to move
    (by using translateX = -1000) the list element, `listEle`, out of view and then
    empty the elements inside of it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To show the newly shuffled todo list, use `Anime.js` to animate the `listEle`
    list element back into view (by using translateX = 0). Do so inside a timeout
    to ensure that the shuffling has been done already:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, open the HTML in your browser and click the *Shuffle* button. The `todo`
    list should fade out, shuffle, and fade in again. It will appear the same as the
    previous output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 5: Beyond the Fundamentals'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 5.01: Simple Number Comparison'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create the function signature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the function arguments to a variable. This should be a new Array instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Sum all the values of the arguments and store them in a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember to convert the grade values into a Number instance so that they can
    be correctly added together.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Get the average of the sum and store it in a variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the average, calculate the student''s grade and return it. This can simply
    be a list of conditionals:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be visible as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.26: Activity 5.01 output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_05_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.26: Activity 5.01 output'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The final condition will always be true if the others have failed, so the condition
    itself can be skipped. Each condition will not be evaluated if the previous condition
    has been returned from the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 5.02: Creating a TODO Model'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first step is to declare the state. It must be declared outside of any
    function so that it exists between function calls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the helper function that will be used to find a TODO by `id` from
    the `state` array. To do this, simply look through the array and return the index
    once it''s been found. If it isn''t found and the end of the array is reached,
    then return `-1` to denote that no TODO with the specific `id` exists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create the function as described in the description of this activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The function will need to act differently, depending on the value of `action`.
    When modifying the data successfully, it should return the new state. First, handle
    adding a new TODO to the state for the `CREATE` action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember that the data needs to be written to the console with `console.log`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, handle the `REMOVE` functionality. This will utilize the `modelFindIndex`
    function to locate the `TODO` to remove:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, handle the `MODIFY` functionality. This step is a little more complex
    as the original data needs to be changed without changing the object reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Chapter 6: Understanding Core Concepts'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 6.01: Making Changes to the Model'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The page the form is in has an area to display messages. The form itself contains
    the title `textfield` and a description for the `textarea` field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The page loads in the model code from the previous chapter, but also a new script,
    which will be created shortly. The `body` tag has an in-page event handler assigned
    to its `onload` event, which will be included in the `create_todos.js` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In order to use the model''s module with events, you will need to extend it
    by providing an event handler for each action type. Add the following code to
    the bottom of the `model.js` file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `create_todos.js` file, add the `loadHandler` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This function will initialize the model and set up any necessary event handlers.
    As you can see, it assigns the `CHANGED` event to the `changedHandler` function.
    Let's create that next.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`changedHandler` is a simple affair. It simply waits for the `CHANGED` event
    to be raised and then updates the notifications area when it does:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`changedHandler` clears the notifications area after three seconds to keep
    things clean.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, you need to add the `createHandler` function, which handles the form''s
    submission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The majority of this code simply ensures that values are supplied to the form
    before submission and will alert the user if this is not the case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, give the application a spin. If all goes well, notifications should momentarily
    show when submitting the form, with different messages depending on whether the
    fields were populated. As an example, open the browser console and simply enter
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should see the submitted `TODO` objects presented there, like so:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.28: TODO submission form'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_06_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.28: TODO submission form'
  prefs: []
  type: TYPE_NORMAL
- en: Working with events provides a powerful means to keep your applications simple.
    What's more, it also empowers abstraction, allowing scripts to send data without
    them needing to know which other areas of your application are interested in those
    events. This promotes clean design and easier maintenance of your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 7: Popping the Hood'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 7.01: Finding out the Number of Stack Frames'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The function that establishes the call stack''s limit is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: var frameCount = 0;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The solution starts out with the `frameCount` variable being initialized with
    the value `0`. The `stackOverflow()` function is declared, which will add 1 to
    the `frameCount` variable and then call itself, thus causing a stack overflow.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, `setTimout()` function is initiated, which will log the value of `frameCount`
    to the console after a minimum of 500 milliseconds. Now, call the `stackOverflow()`
    function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This takes the `console.log` function out of the main execution thread, allowing
    it to be called after the stack overflow error is thrown:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.22: Showing the solution and number of stack frames being pushed
    before a stack overflow is triggered'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14377_07_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.22: Showing the solution and number of stack frames being pushed before
    a stack overflow is triggered'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 8: Browser APIs'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 8.01: Creating a Simple Fractal'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We initialize the canvas and context as we did previously, but this time we
    add a point variable that we initialize with the coordinates of the center of
    the canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we begin a new path and move the point to the coordinates that were assigned
    to the point variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We declare `i`, which we will use as a multiplier to tell the function how
    long a line should be. We also declare two constants to hold the values for a
    margin between the fractal that we''re drawing and the edge of the canvas, as
    well as a multiplier, which is used to increase the line length that is drawn.
    Then, we start a while loop, which will keep going while the point remains inside
    the canvas'' bounds (plus the margin on each side):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the while loop, the values inside the point array are increased or decreased,
    depending on which direction the line is being drawn and depending on the value
    of `i`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, the lineTo function is called with the values in the point variable.
    Every other time a line is drawn, `i` is incremented. This means that the line''s
    length doubles after each second drawing of a line. You could also increase `i`
    each time a line is drawn, and the result would be greater spacing between the
    lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, when the while loop''s termination condition is met (when the point
    reaches within 5 pixels of one of the edges of the canvas), the stroke() method
    of the context is called to add a stroke to the lines we''ve described:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There are many more methods available in the Canvas API, and many possibilities
    for their use. You can draw complicated patterns, pictures, and graphs, and animate
    anything you draw. You should explore the Canvas API in more depth to find out
    what it can do.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Activity 8.02: Playing Sound and Controlling Frequency Using Two Oscillators'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Initialize an audio context and a volume node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a gain node and connect it to the context''s destination:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize two oscillators (one for each coordinate of the cursor):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the oscillator types (feel free to use any types you like), connect them
    to the volume node, and call their start() methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an event listener that listens for the `mousemove` event on the `document`
    and set the oscillators'' frequencies based on the cursor''s position:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The callback function that''s passed to the event listener assigns the cursor''s
    x and y values to the two oscillator nodes'' frequency values every time the ''mousemove''
    event is fired. This is a simple solution: it inherently limits the upper-frequency
    values for each oscillator depending on the width and height of the browser window.
    This is fine as a demonstration, but a better implementation would assign the
    same arbitrary upper-frequency value at the right-most and bottom-most parts of
    the document, no matter its dimensions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 8.03: Audio Visualization'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a simple HTML file with a link to a JavaScript file called scripts.js
    (or anything you want to call it), with a <canvas> element in the body and with
    an ID of canvas in the DevTools console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the scripts.js file, we will add an event listener on the document listening
    for a click event. As we saw in the *Audio API* section of this chapter, in many
    modern browsers, audio is disabled until the user has interacted with the page,
    so waiting for the click event is an easy way to make sure we don''t get any errors
    in this regard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then get hold of the canvas element, create a canvas context, set the canvas''
    width and height, and get its center x/y coordinates. We also instantiate a variable
    that will hold the Y value of the mouse''s position:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we will create an audio context, a gain node, an oscillator node, and
    an analyzer node. We connect the oscillator to the volume node and the analyzer
    node, and then connect the volume node to the audio context''s destination:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we listen for mousemove events, and in the callback function for the
    event, we assign the cursor''s X position to the oscillator''s frequency value
    and the cursor''s Y position to the mouseY variable. This means that the cursor''s
    X position will control the frequency of the oscillation. We''ll see what the
    mouseY variable is used for shortly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we come to the meat of the application. We call the draw() function. This
    function tells the browser that we want to draw a frame of an animation, and by
    proving the draw() function as the callback, it repeats this function once for
    each time the page is rendered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we get the waveform data from the analyzer, which is copied to the waveform
    array. Then, we clear the canvas from any previous stroke() methods and begin
    a new path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we come to looping through the waveform array. For each item in the array
    (which represents points of the waveform), we will plot a small section of a circle.
    The circle will be divided into as many sections as there are items in the array.
    Each section has a radius of half the width of the canvas, minus the mouse''s
    Y position, plus the current chunk of the waveform''s amplitude (multiplied by
    an arbitrary number, that is, 15). The result of this could be a negative number
    if the mouse is more than halfway across the screen, so we wrap the whole thing
    in Math.abs(), which returns the absolute value (no negatives!) of a number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to set the start angle and end angle of the arc in radians. A
    whole circle is 2*Ï€ radians, but we''re dividing the circle into as many arcs
    as there are items in the waveform array. Therefore, we can calculate the starting
    angle as ((2 / waveform.length) * i) *Ï€, where waveforms.length is how many items
    there are and i is the current chunk of the waveform/our circle we''re on. We
    just add 1 to i for the end angle as each chunk''s end angle is the same as the
    next one''s starting angle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: let endAngle = ((2 / waveform.length) * i) * Math.PI;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After all that is done, and we call the arc() method of the canvas context,
    we can call the stroke() method to add a stroke to all the arcs we just plotted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Put that all together, run it, and click on the page: we should get a very
    nice oscillating circle, whose diameter increases with the cursor''s y-position,
    and the oscillation of which matches the sound of the sine wave coming from the
    speakers. This, incidentally, can be controlled with the cursor''s x-position.
    Big fun:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Chapter 9: Working with Node.js'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 9.01: Create a Web Application to Upload, Store, and Save Image Details'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s first go through the directory structure and define the folders to upload
    the images:![Figure 9.22: Directory structure for this activity'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_09_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.22: Directory structure for this activity'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see, in this project you will try to upload images in the `public/images`
    directory. This directory must be present at the root of the project and the current
    user should have read and write access to this directory. By default, you will
    get both the permissions to this directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The source code will only contain two files (`app.js` and `package.json`). All
    the other files shown in the `images` directory in the preceding figure will not
    be present there. Once you start uploading files, you will see all the uploaded
    images there.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Before proceeding further, be sure to create a `public/images` directory in
    the root of this project that relates to `app.js` and `package.json`. The currently
    logged-in user of your machine must have the permissions to add files in this
    directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The first step is to import all the dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then let''s configure `morgan` to log each of our request details in the console.
    You can use `morgan` as a middleware:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let''s configure the database. In this project, you will use a `MySQL`
    database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure you pass the credentials of the user you created earlier while going
    through the *Setting Up Databases* section.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When your application has established a database connection, it''s time to
    install `multer` by executing the following command through the terminal in the
    root of the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s configure `multer` by adding the code from the `app.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code will set the destination where all files will be uploaded, which is
    `public/images`, and you are also changing the `filename` after upload to avoid
    issues with duplicate filenames.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now let''s configure some routes in your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last step is to start the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That''s it. The server is now up and running. The final thing is to send a
    request to upload the image on the server. For this, we will use Postman (the
    Chrome extension) as our client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.23: API response in Postman'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_09_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.23: API response in Postman'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 10: Accessing External Resources'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 10.01: Implement REST Service Calls Using Various Techniques'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use `$.ajax()` with `method: ''post''` and `dataType: ''json''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enclose your data fields in an object, `{}`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `success` function to output the expected values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The boilerplate HTML is omitted and left as an exercise for you. The preceding
    code would result in something like the following in the JavaScript Console in
    Google Chrome. (All the solutions presented have similar output):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.17: JavaScript Console output'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14377_10_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.17: JavaScript Console output'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s get the same output using the `$.post()` method and using the file
    `solution_using_jquery_post.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enclose your data fields in an object, `{}`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `success` function to output the expected values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As the last parameter to `$.post()`, use the `''json''` value to indicate the
    expected JSON return type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output will be the same as is shown in *Figure 10.17*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, create a new `XMLHttpRequest` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call `open(''POST'')`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the `Content-type` and `Accept` request headers to the appropriate values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function for `onreadystatechange` that checks for a status code of
    `201 (Created)` and parses the JSON data with `JSON.parse()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call `JSON.stringify()` on the input data to convert it to JSON format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send the JSON data when calling `send()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output will be the same as is shown in *Figure 10.17*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Chapter 11: Creating Clean and Maintainable Code'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 11.01: Expanding Phone Number Matching Patterns to Accept Multiple
    Formats'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Observe that only the characters at the beginning of each pattern differ, but
    the last characters, `XXX-XXXX`, are the same in both patterns.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the differing characters, for our regex to match either format correctly,
    you can specify the regex snippets that correspond to each format as alternate
    expressions of an alternation. Recall that alternations take the form of (`expression1|expression2)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Combine it with the rest of the original regex to get the complete regex:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Remember that the original regex, `\d{3}-\d{4}`, matches `XXX-XXXX,` which is
    the same for both patterns. We only needed the alternation for the beginning parts
    of each pattern that differed. The `^` and `$` characters also enforce that there
    are no other characters before or after the acceptable ones.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, when you replace this correct regex into our tool, only the first two test
    strings match ( as expected)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.23: After using the correct regex, only the first two test strings
    match (as expected)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_11_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.23: After using the correct regex, only the first two test strings
    match (as expected)'
  prefs: []
  type: TYPE_NORMAL
- en: In *Exercise 11.01, The Effect of the g Flag*, and this activity, we created
    regex expressions to accept US number formats. We will now modify the regex to
    accept non-US number formats.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 11.02: Expanding Phone Number Matching Patterns to Accept a Particular
    Format'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Construct the regex for the `+XXX` pattern (where between 1-3 digits are acceptable):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need two things here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The first `+` needs to be escaped due to it being a special character.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Notice the parenthesis with `?` after it. This specifies that whole expression
    within the parenthesis can occur 0 or 1 times. In other words, the characters
    in the expression are optional. The `\d{1,3}` expression is a range quantifier
    requiring between 1 and 3 digits.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'By prepending this to the regex from the previous activity, the whole regex
    is now as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See the previous activity for a full description of the latter parts of the
    regex.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To kick it up one more notch, here are some of the changes we can make to the
    regex that allows us to use space or dot characters as digit separators rather
    than only dashes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Activity 11.03: Refactoring to Clean Code'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways the code could be refactored. The following solution represents
    one way, along with explanatory comments.
  prefs: []
  type: TYPE_NORMAL
- en: Use the `activity_solution.html` file. The HTML code remains the same as the
    original code. Only the contents of the `<script>` section are replaced.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We start refactoring the code by creating a function called `processForm()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The original code had one very long method that did all the form field processing,
    validations, and calculations. The new code creates new methods for different
    concerns. These methods are short and mostly focused on just one task.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The code reads like a narrative story with paragraphs and sentences in mostly
    plain English. It is easy to see the logic and flow just by reading it, and there''s
    not much clutter: reset the errors and results, get the form fields, validate
    the fields and show errors (if any), do the calculation, and display the results.
    The gory details of each of these are contained within other methods.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will also create a function called `resetErrorsAndResults()`. By the name
    and implementation, it is easy to tell what the purpose of this function is, and
    the function is limited to just that specific purpose:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the next refactoring, we have decided to create a class that holds form
    field values and performs validations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Validation methods are simple and only return a string with an error message
    if the regex test fails. Displaying error messages is a separate concern (unlike
    the original code, which combined the concerns). It contains a constructor where
    the form field values are passed in rather than us having to get the values directly
    from the form, thus allowing the class and validations to be tested independently
    of the form itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we create a function called `getFormFields()`. This function is limited
    to getting the values from the form and creating an instance of the `FormFields`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These methods have no side effects as they facilitate testing. This is because
    the return values are always predicable for a given set of input parameters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `displayError()` and `displayResult()` functions are straightforward and
    do just one thing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `switch` statement in the original code was just screaming out "refactor
    me" to separate functions for each case! We will refactor this so that it uses
    an associative array called `calculateFunctions`. The key of each entry in the
    array is `workerType` and the user that's selected from the radio buttons, along
    with a reference to the function that contains the corresponding calculation logic
    for the value. These are minimal comments since the method, object, and variable
    names are self-documenting.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Also, the `calculateStandardWorkerPay()`, `calculateNoOvertimeWorkerPay()`,
    and `calculateDoubleOvertimeWorkerPay()` functions take the same two parameters
    and have the same return value definition, so they could be called abstractly
    in `doCalculation()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: In a real application, you may consider using one of the many available validation
    frameworks rather than rolling your own. For calculation purposes, this implementation
    chose to use functions in an associative array. One alternative to consider is
    creating a class hierarchy where subclasses implement or override a calculation
    method in a base class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 12: Using Next-Generation JavaScript'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 12.01: Creating a Project to Recognize and Compile TypeScript Files'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first step is to create a new project directory, then `cd` into it, and
    initialize it for npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, install Parcel as a global library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you will need to install TypeScript, which you can also save as a global
    library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To generate the configuration for TypeScript, you simply need to call the TypeScript
    CLI tool, `tsc`, and pass it the `--init` flag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If all went well, you should be presented with a message such as the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should also find a new `tsconfig.json` file in the root of your project
    folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create a directory called `src` and place an `index.ts` file within it.
    Add the following code as the file''s content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With everything in place, update the `package.json` file to include the following
    script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run the script by invoking the `npm` executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You should see a successful `Built` message output onscreen, as well as the
    expected `dist` folder containing transpiled `js` files in the project root.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Chapter 13: JavaScript Programming Paradigms'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 13.01: Creating a Calculator App'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create an empty file and call it `procedural.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Initialize an array that will maintain the history of function calls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create simple addition, subtraction, multiplication, division, and power
    functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `history` function, which will maintain the history of function calls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, print the `history`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of this code will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.15: Output with the procedural approach'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14377_14_151.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 13.15: Output with the procedural approach'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, create a class and call it `calculator`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, initialize a `historyList` array, which will maintain the history of
    all function calls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create simple `add`, `subtract`, `multiply`, `divide`, and `pow` methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add one more method, which will show the history of the operations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, create an instance of this class and call its method with simple numbers
    to perform mathematical operations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To check its history, call the `history` method of the `calculator` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of this code will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 13.16: Output with the object-oriented approach'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_14_161.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.16: Output with the object-oriented approach'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 14: Understanding Functional Programming'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 14.01: Blackjack Card Functions'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Solution:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the `blackjack/start.html` file, find the opening script tag and add some
    functions for defining the elements of a deck and creating an ordered deck:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Below this code, define how to create a deck by adding the core functional
    programming methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the functions for shuffling a deck, as we did in *Exercise 14.09:
    Using the pipe Method to Create a Card Shuffling Function*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we will add functions for drawing a card, getting the sum of a player''s
    cards, checking whether a hand is over 21 points, and checking whether the game
    is over:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to add a way to update the visual display and the cards shown
    to the user. One way this can be done is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next part of the visual display is the status display, which tells the
    user the sum of their hand and whether the game is over. The implementation that
    will be used in this solution consists of the two functions shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we''re going to add functions for each action a user can take, such as
    `play`, `stay`, and `hit`. We will call these handlers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You may have noticed that, in the solution steps, there are some variables
    that haven''t been defined. We''ve saved these for a section at the end that includes
    all non-purely functional code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now have almost a completely working game. All we need to do is set the
    state and call that to tell the game to start:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With these steps done, you should now be able to open the HTML file in a browser
    and have a running version of the game, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.17: Screenshot of the Blackjack game'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_15_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.17: Screenshot of the Blackjack game'
  prefs: []
  type: TYPE_NORMAL
- en: If you're unsure about whether you followed the solution steps correctly, feel
    free to take a look at the `blackjack/solution.html` file and compare it with
    your own implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 15: Asynchronous Tasks'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 15.01: Refactoring Promise Code to await/async Syntax'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here''s one implementation of equivalent code that uses `async/await`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the promise variables as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It would not have been correct to place the `await` keyword in the initial
    block when calling each function like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is because each of the use cases has a different timeout defined. If you
    used `await` when calling `use1()`, it would have caused a delay of 3 seconds
    until it completed before `use2()` was even initiated, which is not what you want.
    Rather, our desire is for all three use cases to trigger one right after the other
    with no delay, so they execute concurrently.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You then have the three `await` keywords:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It made sense to refactor each case into its own asynchronous functions: `use1()`,
    `use2()`, and `use3()`. The `async` keyword indicates that these functions are
    asynchronous ones (you could have used inline `async` functions, but this would
    have made for rather confusing and awkward syntax):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: In this activity, the order in which you wait for promises does not matter.
    Even though `await use1` will end up waiting 3 seconds, by the time `await use2`
    and `await use3` are called, both of those promises would have already been completed
    a second or two before, so they would just move on right away.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 15.02: Further Simplifying Promise Code to Remove Function Parameters'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here''s one possible implementation. The two functions are very similar and
    have been refactored using two different styles for demonstration purposes. However,
    it is perfectly acceptable to solve the challenge using one or the other technique
    for both of the functions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In technique #1, refactor `getTeamsInLeague` so that it now only takes one
    parameter, `(leagueName)`, rather than two parameters that are actually needed
    to determine the full result `(leagueData, leagueName)`. The other parameter is
    deferred until later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In technique #1, instead of returning the promise from `myFetch` directly,
    you return another curried function that takes `leagueData` as its parameter (the
    parameter you deferred in the last step). It is only a partially applied function
    at this point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Technique #2 is really the same idea, but uses a function variable and multiple
    levels of arrow functions rather than a regular function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, when `getTeamsInLeague(LEAGUE_NAME)` is invoked in the `then()` clause,
    the function returned above would be fully applied, with the resolved value from
    the previous promise passed in as the implied `leagueData` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To perhaps make this plainer, let''s consider this as if it were written with
    `async/await` syntax. Refer to the following code. On the second line, the process
    when calling `getTeamsInLeague(LEAGUE_NAME)` is incomplete at that point and returns
    another function to complete it. Only when calling this partially applied function
    on the third line would you finally have the desired result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
