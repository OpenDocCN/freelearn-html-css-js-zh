["```js\n     $.myApp.topChart = new Highcharts.Chart({\n         chart: {\n             zoomType: 'x',\n             spacingRight: 15,\n             renderTo: 'top-container',\n             events: {\n                 // Load the default stock symbol of \n                 // the portfolio\n                 load: function() {  ....  },\n\n                 // The top level time series have\n                 // been redrawn, enable the portfolio\n                 // select box\n                 redraw: function() { .... },\n\n                 // Selection - get all the data points from\n                 // the selection and populate into the \n                 // detail chart\n                 selection: function(evt) {  ....  },\n             }\n         },\n         title: { text: null },\n         yAxis: {\n             title: { text: null },\n             gridLineWidth: 0,\n             labels: { enabled: false }\n         },\n         tooltip: { enabled: false },\n         xAxis: {\n             title: { text: null },\n             type: 'datetime'\n         },\n         series: [ ... ],\n         legend: { enabled: false },\n         credits: { enabled: false }\n     });\n```", "```js\n        series: [{\n             // Past closed price series  \n             type: 'areaspline',\n             marker: { enabled: false },\n             enableMouseTracking: false\n        }, {                   \n             // This is the open price series and never shown\n             // in the bottom chart. We use it to copy this\n             // to the detail chart\n             visible: false\n        }, {\n             // Series for date and price when shares \n             // are bought\n             type: 'scatter',\n             allowPointSelect: true,\n             color: $.myApp.boughtColor,\n             dataLabels: {\n                 enabled: true,\n                 formatter: function() { return 'B'; }\n             },\n             point: {\n                 events: { .... }\n             }\n        }, {\n             // Series for date and price when shares are sold\n             type: 'scatter',\n             allowPointSelect: true,\n             color: $.myApp.soldColor,\n             dataLabels: {\n                 enabled: true,\n                 formatter: function() { return 'S'; }\n             },\n             point: {\n                 events: { .... }\n             }\n        }, {\n             // This is the tracker series to show a single \n             // data point of where the mouse is hovered on \n             // the detail chart \n             type: 'scatter',\n             color: '#AA4643'\n         }]\n```", "```js\n     chart: {\n         events: { \n             load: function() {\n                 // Load the default stock symbol of \n                 // the portfolio\n                 var symbol = $('#symbol').val();\n                 $('#symbol').attr('disabled', true);\n                 loadPortfolio(symbol);\n             },\n```", "```js\n       redraw: function() {\n           $('#symbol').attr('disabled', false);  \n       },\n```", "```js\n        point: {\n            events: {\n                select: function() {\n                    updatePortfolio(this.x);\n                },\n                unselect: function() {\n                    // Only default back to current time\n                    // portfolio detail when unselecting\n                    // itself\n                    var selectPt =          \n                        $.myApp.topChart.getSelectedPoints();\n                    if (selectPt[0].x == this.x) {\n                        updatePortfolio(new Date().getTime());\n                    }\n                }\n            }\n        }\n```", "```js\n           selection: function(evt) {\n               // Get the xAxis selection\n               var selectStart = Math.round(evt.xAxis[0].min);\n               var selectEnd   = Math.round(evt.xAxis[0].max);\n\n               // We use plotBand to paint the selected area\n               // to simulate a selected area\n               this.xAxis[0].removePlotBand('selected');\n               this.xAxis[0].addPlotBand({\n                   color: 'rgba(69, 114, 167, 0.25)',\n                   id: 'selected',\n                   from: selectStart,\n                   to: selectEnd\n               });\n               for (var i = 0; \n                    i < this.series[0].data.length; i++) {\n                  var pt = this.series[0].data[i];\n                  if (pt.x >= selectStart && \n                      pt.x <= selectEnd) {\n                      selectedData.push([pt.x, pt.y]);\n                  }\n\n                  if (pt.x > selectEnd) {\n                      break;\n                  }\n               }\n\n               // Update the detail serie \n               var dSeries = $.myApp.detailChart.series[0];               \n               dSeries.setData(selectedData, false);\n               ....\n\n               // Update the detail chart title & subtitle\n               $.myApp.detailChart.setTitle({\n                   text: $.myApp.stockName + \" (\" +\n                         $.myApp.stockSymbol + \")\",\n                   style: { fontFamily: 'palatino, serif',\n                            fontWeight: 'bold' }\n                   }, {\n                   text: Highcharts.dateFormat('%e %b %y', \n                         selectStart) + ' -- ' +\n                         Highcharts.dateFormat('%e %b %y',\n                         selectEnd),\n                   style: { fontFamily: 'palatino, serif' }\n               });\n\n               $.myApp.detailChart.redraw();\n               return false;\n          }\n```", "```js\n       $.myApp.detailChart = new Highcharts.Chart({\n            chart: {\n                showAxes: true,\n                renderTo: 'detail-container',\n                events: {\n                    click: function(evt) {\n                        // Only allow to prompt stop order\n                        // dialog if the chart contains future\n                        // time\n                        ....\n                    }\n                },\n             },\n             title: {\n                margin: 10,\n                text: null\n             },\n             credits: { enabled: false },\n             legend: {\n                enabled: true,\n                floating: true,\n                verticalAlign: 'top',\n                align: 'right'\n             },\n             series: [ ... ],\n             // Fixed location tooltip in the top left\n             tooltip: {\n                shared: true,\n                positioner: function() {\n                    return { x: 10, y: 10 }\n                },\n                // Include 52 week high and low\n                formatter: function() {  .... }\n             },\n             yAxis: {\n                title: { text: 'Price' }\n             },\n             xAxis: { type: 'datetime' }\n        });\n```", "```js\n           series: [{\n               marker: {\n                   enabled: false,\n                   states: {\n                       hover: { enabled: true }\n                   }\n               },\n               cursor: 'crosshair',\n               point: {\n                   events: {\n                       mouseOver: function() { ... },\n                       mouseOut: function() { ... }\n                   }\n               },\n               stickyTracking: false,\n               showInLegend: false\n           }, {\n               name: 'Open Price',\n               marker: { enabled: false },\n               visible: false\n           }],\n```", "```js\n        point: {\n            events: {\n                mouseOver: function() {\n                    var series = $.myApp.topChart.series[4];\n                    series.setData([]);\n                    series.addPoint([this.x, this.y]);\n                },\n                mouseOut: function() {\n                     var series = $.myApp.topChart.series[4];              \n                     series.setData([]);\n                }\n            }\n        },\n```", "```js\n  <div id='dialog'>\n     <form>\n        <fieldset>\n           <label for=\"expire\">Expire at</label>\n           <input type=text name=\"expire\" id=\"expire\" size=9 ><br/><br/>\n           <select name='stopOrder' id='stopOrder'>\n              <option value='buy' selected>Buy</option>\n              <option value='sell'>Sell</option>\n           </select>\n           <label for=\"shares\">no. of shares</label>\n           <input type=\"text\" name=\"shares\" id=\"shares\" value=\"\" size=7 class=\"text ui-widget-content ui-corner-all\" />,\n           <label for=\"price\">when market price reaches (in pences)</label>\n           <input type=\"text\" name=\"price\" id=\"price\" value=\"\" size=7 class=\"text ui-widget-content ui-corner-all\" />\n        </fieldset>\n     </form>\n  </div>\n```", "```js\n           click: function(evt) {\n\n               // Only allow to prompt stop order dialog\n               // if the chart contains future time\n               if (!$.myApp.detailChart.futureDate) {\n                   return;\n               }\n\n               // Based on what we click on the time, set\n               // input field inside the dialog\n               $('#expire').val(\n                   Highcharts.dateFormat(\"%m/%d/%y\",\n                   evt.xAxis[0].value));\n               $('#price').val(\n                   Highcharts.numberFormat(\n                   evt.yAxis[0].value, 2));\n\n               // Display the form to setup stop order\n               $('#dialog').dialog(\"open\");\n           }\n```", "```js\n           // Initiate stop order dialog\n           $( \"#dialog\" ).dialog({\n              // Dialog startup configuration â€“ \n              // dimension, modal, title, etc\n              .... ,\n              buttons: [{\n                 text: \"Save Order\",\n                 click: function() {\n                     // Check whether this dialog is called\n                     // with a stop order id. If not, then \n                     // assign a new stop order id\n                     // Assign the dialog fields into an\n                     // object - 'order' \n                     .... \n                     // Store the stop order \n                     $.myApp.stopOrders[id] = order; \n                     // Remove plotlines if already exist.\n                     // This can happen if we modify a stop\n                     // order point\n                     var xAxis = $.myApp.detailChart.xAxis[0];\n                     xAxis.removePlotLine(id);\n                     var yAxis = $.myApp.detailChart.yAxis[0];\n                     yAxis.removePlotLine(id);\n\n                     // Setup events handling for both \n                     // x & y axis plotlines\n                     var events = {\n                         // Change the mouse cursor to pointer\n                         // when the mouse is hovered above \n                         // the plotlines\n                         mouseover: function() { ... },\n\n                         // Launch modify dialog when \n                         // click on a plotline\n                         click: function(evt) { ... }\n                     };\n\n                     // Create the plot lines for the stop\n                     // order\n                     xAxis.addPlotLine({\n                         value: order.expire,\n                         width: 2,\n                         events: events,\n                         color: (order.stopOrder == 'buy') ? $.myApp.boughtColor : $.myApp.soldColor,\n                         id: id,\n                         // Over both line series and \n                         // plot line\n                        zIndex: 3\n                     });\n\n                     yAxis.addPlotLine({\n                         value: order.price,\n                         width: 2,\n                         color: (order.stopOrder == 'buy') ? $.myApp.boughtColor : $.myApp.soldColor,\n                         id: id,                                 \n                         zIndex: 3,\n                         events: events,\n                         label: {\n                             text: ((order.stopOrder == 'buy') ? 'SO-B by (' : 'SO-S by (')  + Highcharts.dateFormat(\"%e %b %Y\", parseInt(order.expire)) + ') @ ' + order.price,\n                             align: 'right'\n                         } \n                      });\n\n                      $('#dialog').dialog(\"close\");\n                 }\n              }, {\n                 text: \"Cancel\",\n                 click: function() {   \n                      $('#dialog').dialog(\"close\"); \n                 } \n              }]                           \n           });\n```", "```js\n         mouseover: function() {\n             $.each(this.axis.plotLinesAndBands, \n                 function(idx, plot) {\n                    if (plot.id == id) {\n                        plot.svgElem.element.style.cursor =\n                           'pointer';\n                        return false;\n                    }\n                 }\n             );\n         },\n```", "```js\n           // Click on the prompt line\n           click: function(evt) {\n               // Retrieves the stop order object stored in\n               // $.myApp.stopOrders                                      \n               $('#dialog').dialog(\"option\", \n                                   \"stopOrderId\", id);\n               var stopOrder = $.myApp.stopOrders[id];\n\n               // Put the settings into the stop order form\n               $('#dialog').dialog(\"option\", \"title\", \n                                   \"Modify Stop Order\");\n               $('#price').val(\n                   Highcharts.numberFormat(\n                            stopOrder.price, 2));\n\n               $('#stopOrder').val(stopOrder.stopOrder);\n               $('#shares').val(stopOrder.shares);\n               $('#expire').val(\n                   Highcharts.dateFormat(\"%m/%d/%y\", \n                            stopOrder.expire));\n\n               // Add a remove button inside the dialog\n               var buttons = \n                   $('#dialog').dialog(\"option\", \"buttons\");\n               buttons.push({\n                   text: 'Remove Order',\n                   click: function() {\n                       // Remove plot line and stop order\n                       // settings\n                       delete $.myApp.stopOrders[id];\n                       var xAxis =  \n                           $.myApp.detailChart.xAxis[0];\n                       xAxis.removePlotLine(id);\n                       var yAxis =  \n                           $.myApp.detailChart.yAxis[0];\n                       yAxis.removePlotLine(id);\n\n                       // Set the dialog to original state\n                       resetDialog();                \n                       $('#dialog').dialog(\"close\");                \n                   }\n               });\n\n               $('#dialog').dialog(\"option\", \n                                   \"buttons\", buttons);\n\n               $('#dialog').dialog(\"open\");                \n           }\n```", "```js\n          $.myChart = new Highcharts.Chart({\n               chart: {\n                   renderTo: 'container',\n                   showAxes: true,\n                   events: {\n                       addSeries: function() { ... }       \n                   }\n               },\n               series: [{\n                   visible: false,\n                   name: 'Portfolio',\n                   color: $.colorRange.shift(),\n                   marker: { enabled: false },\n                   events: {\n                       legendItemClick: function(evt) { ... }\n                   }\n               }, {\n                   name: 'Average',\n                   events: {\n                       legendItemClick: function(evt) { ... }\n                   },\n                   color: $.colorRange.shift(),\n                   visible: false,\n                   marker: { enabled: false }\n               }, {\n                   visible: false,\n                   type: 'pie',\n                   point: {\n                       events: {\n                           click: function(evt) { ... }, \n                               update: function(evt) { ... },\n                               remove: function(evt) { ... }\n                       }\n                   },\n                   center: [ '13%', '5%' ],\n                   size: '30%',\n                   dataLabels: { enabled: false }\n               }],\n               title: { text: 'Stocks Growth' },\n               credits: { enabled: false },\n               legend: {\n                   enabled: true,\n                   align: 'right',\n                   layout: 'vertical',\n                   verticalAlign: 'top'\n               },\n               yAxis: {\n                   title: { text: 'Growth (%)' }\n               },\n               xAxis: { type: 'datetime' }\n           });\n```", "```js\n            chart: {\n                .... ,\n                events: {\n                    addSeries: function() { \n                        this.hideLoading();\n                    }       \n                },\n                .... , \n```", "```js\n   $('#add').button().on('click', \n       function() {\n           var symbol = $('#symbol').val().toLowerCase();\n           $.myChart.showLoading();\n           $.getJSON('./stockGrowth.php?symbol=' + symbol + \n                     '&years=' + $.numOfYears, \n               function(stockData) {\n                   // Build up the series data array\n                   var seriesData = [];\n\n                   if (!stockData.rows.length) {\n                       return;\n                   }\n\n                   $.symbols.push({ \n                       symbol: symbol, \n                       name: stockData.name \n                   });\n\n                   $.each(stockData.rows, \n                       function(idx, data) {\n                           seriesData.push([ \n                               data.date * 1000, \n                               data.growth ]);\n                   });\n\n                   $.myChart.addSeries({\n                       events: {\n                           // Remove the stock series\n                           click: { ... },\n                           // Include the stock into portfolio\n                           checkboxClick: { ... }\n                       },\n                       data: seriesData,\n                       name: stockData.name,\n                       marker: { enabled: false },\n                       stickyTracking: false,\n                       showCheckbox: true,\n\n                       // Because we can add/remove series, \n                       // we need to make sure the chosen\n                       // color used in the visible series\n                       color: $.colorRange.shift()\n                   }, false);\n\n                   updateAvg(false);\n                   $.myChart.redraw();\n               }  // function (stockData)    \n            );  //getJSON\n        });\n```", "```js\n               series: [{ \n                    ... \n                   }, {\n                   name: 'Average',\n                   events: {\n                       legendItemClick: function(evt) {\n                           if (!this.visible) {\n                               updateAvg();\n                           }\n                       }\n                   },\n                   .....\n```", "```js\n       $.myChart.addSeries({\n            events: {\n                // Launch a confirm dialog box to delete \n                // the series\n                click: function() {\n                    // Save the clicked series into the dialog\n                    $(\"#dialog-confirm\").dialog(\"option\",\n                       \"seriesIdx\", this.index);\n                    $(\"#dialog-confirm\").dialog(\"option\",\n                       \"seriesName\", this.name);\n                    $(\"#removeName\").text(this.name);\n\n                    $(\"#dialog-confirm\").dialog(\"open\");\n                },\n                // Include the stock into portfolio\n                checkboxClick: function(evt) { ... }\n            },\n            ....\n       });\n```", "```js\n          checkboxClick: function(evt) {\n              updatePie(this, evt.checked);\n          }\n```", "```js\n          var updatePie = function(seriesObj, checked) {\n\n             var index = seriesObj.index;\n\n             // Loop through the stock series. If checkbox\n             // checked, then compute the equal distribution \n             // percentage for the pie series data\n             for (i = $.pfloIdx + 1; \n                  i < $.myChart.series.length; i++) {\n                 var insert = (i == index) ? checked : $.myChart.series[i].selected;\n                 if (insert) {\n                     data.push({ \n                         name: $.myChart.series[i].name, \n                         y: parseFloat((100 / count).toFixed(2)), \n                         color: $.myChart.series[i].color\n                     });\n                 }\n             }\n\n             // Update the pie chart series\n             $.myChart.series[$.pfloIdx].setData(data, false);\n             $.myChart.series[$.pfloIdx].show();\n         };\n```", "```js\n      series: [ { \n          ....\n          },\n          visible: false,\n          type: 'pie',\n          point: {\n              events: {\n                  // Bring up the modify dialog box\n                  click: function(evt) {\n                      // Store the clicked pie slice \n                      // detail into the dialog box                                    \n                      $('#updateName').text(evt.point.name);               \n                      $('#percentage').val(evt.point.y);\n                      $('#dialog-form').dialog(\"option\", \n                          \"pieSlice\", evt.point);\n\n                      $('#dialog-form').dialog(\"open\");\n                  }, \n                  // Once the Update button is clicked, \n                  // the pie slice portion is updated\n                  // Hence, this event is triggered and the\n                  // portfolio series is updated\n                  update: function(evt) {\n                      updatePortfolio();\n                  },\n                  // Pie slice is removed, unselect the series\n                  // in the legend checkbox and update the\n                  // portfolio series\n                  remove: function(evt) {\n                      var series = nameToSeries(this.name);\n                      series && series.select(false);\n                      updatePortfolio();\n                  }\n              }\n         }\n```"]