["```js\n$ meteor create reactiverecipes\n$ cd reactiverecipes\n$ meteor add reactive-var\n$ meteor\n\n```", "```js\n    <button id='btnReact'>Click Me</button>\n    ```", "```js\n     if (Meteor.isClient) {\n     btnText = new ReactiveVar('Click Me');\n     Tracker.autorun(function () {\n     $('#btnReact').text(btnText.get());\n     });\n\n    ```", "```js\n    Session.set(\"counter\"...);\n    btnText.set('Again!');\n\n    ```", "```js\n    > btnText.set('Pretty please...')\n\n    ```", "```js\nfunction ReactiveVar(value) {\n // create the dependency object (a helper class)\n    var _dependency = new Tracker.Dependency;\n //set the default internal value\n    var _internalVal = value;\n\n    var getValue = function () {\n // call depend(), which adds the computation\n        _dependency.depend();\n // return the internal value\n        return _internalVal;\n    };\n\n    var setValue = function (newValue) {\n // update the internal value\n        _internalVal = newValue;\n // loop through computations and call invalidate()\n        _dependency.changed();\n    };\n\n    return this;\n}\n\nfunction autorun(func) {\n // creates computation and assigns it to\n // Tracker.currentComputation\n    var computation = new Tracker.Computation(func, Tracker.currentComputation);\n\n    // Calls the onInvalidate method the first time,\n    // so that func function will run\n    Tracker.onInvalidate({...});\n\n    return computation;\n}\n```", "```js\n    btnText.get(); // ReactiveVar\n    txtFields.get('btnText'); // ReactiveDict\n    ...\n    btnText.set('Click Me'); // ReactiveVar\n    txtFields.set('btnText','Click Me') // ReactiveDict\n```", "```js\n$ meteor add reactive-dict\n\n```", "```js\n$ meteor create ajaxreactive\n$ cd ajaxreactive\n$ meteor add reactive-var\n$ meteor add http\n$ meteor add twbs:bootstrap\n$ meteor\n\n```", "```js\n    {{> hello}}\n    {{> weather}}\n\n    ```", "```js\n    <template name=\"hello\">\n        <button>Click Me</button>\n        <p>You are starting at {{counter}} longitude.</p>\n    </template>\n    ```", "```js\n    <template name=\"weather\">\n        {{#if reports}}\n        <table class=\"table\">\n            <thead>\n                <th>name</th>\n                <th>weather</th>\n                <th>temp</th>\n                <th>humidity</th>\n            </thead>\n            <tbody>\n        {{#each reports}}\n                <tr class={{severity}}>\n                    <td>{{name}}</td>\n                    <td>{{description}}</td>\n                    <td>{{temp}}</td>\n                    <td>{{humidity}}</td>\n                </tr>\n        {{/each}}\n            </tbody>\n        </table>\n        {{/if}}\n    </template>\n    ```", "```js\n    Session.setDefault(\"counter\", 0);\n    weatherlist = new ReactiveVar;\n\n    ```", "```js\n    // increment the counter when button is clicked\n    if (Session.get(\"counter\") <= 60)\n        Session.set(\"counter\", Session.get(\"counter\") + 4);\n    else\n     Session.set(\"counter\", 0)\n\n    getWeather();\n\n    ```", "```js\n    Template.weather.helpers({\n        reports: function () {\n            if (!weatherlist) return false;\n            return weatherlist.get();\n        },\n        severity: function () {\n            if (this.weather && this.weather[0].main == \"Clear\")\n                return \"success\";\n            else\n                return \"warning\";\n        },\n        description: function () {\n            if (this.weather && this.weather[0])\n                return this.weather[0].description;\n            else\n                return \"\";\n        },\n        temp: function () {\n            if (this.main)\n                return this.main.temp;\n            else\n                return \"\";\n        },\n        humidity: function () {\n            if (this.main)\n                return this.main.humidity;\n            else\n                return \"\";\n        }\n    });\n    ```", "```js\n    function getWeather() {\n        var long1 = +Session.get(\"counter\"),\n            long2 = long1+5;\n        HTTP.get(\"http://api.openweathermap.org/data/2.5/\n      box/city?bbox=12,\"+long1+\",15,\"+long2+\",10&cluster=yes\", \n      harvestWeather);\n    }\n    function harvestWeather(error, data) {\n        if (data && data.content) {\n            var weather = EJSON.parse(data.content);\n            weatherlist.set(weather.list);\n        }\n    }\n    ```", "```js\n<template name=\"weather\">\n  {{#if reports}}\n  ...\n  {{/if}}\n</template>\n```", "```js\nweatherlist = new ReactiveVar;\n```", "```js\nreports: function () {\n  ...\n  return weatherlist.get();\n}\n```", "```js\nfunction getWeather() {\n  var long1 = ...\n  HTTP.get(\"...\", harvestWeather);\n}\n```", "```js\nfunction harvestWeather(error, data) {\n  ...\n    weatherlist.set(weather.list);\n}\n```", "```js\n$ meteor create customreactive\n$ cd customreactive\n$ meteor add twbs:bootstrap\n$ meteor add rzymek:randomcolor\n$ meteor\n\n```", "```js\n    colorsaurus = {\n        color: function(){\n            return randomColor();\n        },\n        rainbowRoar: function (){\n            console.log('rawr');\n        }\n    };\n    ```", "```js\n    Template.hello.helpers({\n     numcolor: function(){\n     return colorsaurus.color();\n     },\n      counter: ...\n    });\n    ```", "```js\n    > \n    colorsaurus.color()\n    > colorsaurus.rainbowRoar()\n\n    ```", "```js\n    <button id='btnColor'>Click Me</button>\n    <p style=\"color:{{numcolor}}\">You've pressed the button {{counter}} times.</p>\n    ```", "```js\n    Template.hello.events({\n        'click button': function () {\n          // increment the counter when button is clicked\n          Session.set(\"counter\", Session.get(\"counter\") + 1);\n     colorsaurus.rainbowRoar();\n        }\n      });\n    ```", "```js\n    var colorDep = new Tracker.Dependency;\n\n    colorsaurus = {\n        color: function(){\n     colorDep.depend();\n            return randomColor();\n        },\n        rainbowRoar: function (){\n            console.log('rawr');\n     colorDep.changed();\n        }\n    };\n    ```", "```js\n    Tracker.autorun(function(){\n        $('#btnColor').css('background-color' , colorsaurus.color());\n        $('body').css('background-color', colorsaurus.color());\n     });\n    ```", "```js\n> Tracker.autorun(function(){console.log(colorsaurus.color());});\n\n```", "```js\n$ meteor create mongoless\n$ cd mongoless\n$ meteor add twbs:bootstrap\n$ meteor add reactive-var\n$ meteor\n\n```", "```js\n    {{#each buttonPresses}}\n     <div class=\"btn btn-info pressed\">#{{btnRank}}</div>\n    {{/each}}\n    </template>\n    ```", "```js\n    if (Meteor.isClient) {\n     presses = new ReactiveVar;\n      // counter starts at 0\n      Session.setDefault(\"counter\", 0);\n\n      Template.hello.helpers({\n        counter: function () {\n          return Session.get(\"counter\");\n        },\n     buttonPresses: function(){\n     return presses.get();\n     },\n     btnRank: function(){\n     return this.rank;\n     }\n      });\n    ```", "```js\n    Session.set(\"counter\", Session.get(\"counter\") + 1);\n    var _presses = presses.get() || [];\n    _presses.push({rank:Session.get(\"counter\")});\n    presses.set(_presses);\n\n    ```", "```js\npresses = new ReactiveVar;\n```", "```js\n> meteor add rzymek:randomcolor\n\n```", "```js\n    <template name=\"hello\">\n      <button id=\"addBtn\">Click Me</button>\n     <button id=\"chgColor\">Or Me!</button>\n      <p>You've pressed the button {{counter}} times.</p>\n      {{#each buttonPresses}}\n        <div class=\"btn btn-info pressed\"\n     style=\"background-color:{{btnColor}}\">\n        #{{btnRank}}</div>\n      {{/each}}\n    </template>\n    ```", "```js\n    if (Meteor.isClient) {\n      presses = new ReactiveVar;\n     counter = new ReactiveVar(0);\n\n      Template.hello.helpers({\n        counter: function () {\n     return counter.get();\n        },\n        buttonPresses: function () {\n          return presses.get();\n        },\n        btnRank: function () {\n          return this.rank;\n        },\n     btnColor: function () {\n     return this.color;\n        }\n      });\n      ...\n    ```", "```js\n    Template.hello.events({\n        'click #addBtn': function () {\n          // increment the counter when button is clicked\n          counter.set(counter.get() + 1);\n          var _presses = presses.get() || [];\n     var newBtn = {\n     color: randomColor(),\n     rank: counter.get()\n     };\n     _presses.push(newBtn);\n          presses.set(_presses);\n        },\n     'click #chgColor': function () {\n     var rndBtn = ~~(Math.random() * counter.get());\n     $('.pressed')[rndBtn].style.backgroundColor = '';\n\n     },\n     'click .pressed': function (e, n) {\n     e.currentTarget.style.backgroundColor = this.color;\n     }\n      });\n    ```", "```js\n'click .pressed': function (e, n) {\n  e.currentTarget.style.backgroundColor = this.color;\n}\n```", "```js\n<template name=\"hello\">\n  <button id=\"addBtn\">Click Me</button>\n  <button id=\"chgColor\">Or Me!</button>\n  <p>You've pressed the button {{counter}} times.</p>\n  {{#each buttonPresses}}\n {{> helloBtn}}\n  {{/each}}\n</template>\n<template name=\"helloBtn\">\n <div class=\"btn btn-info pressed\"\n style=\"background-color:{{btnColor}}\">\n #{{btnRank}}</div>\n</template>\n\n```", "```js\nTemplate.helloBtn.rendered = function () {\n    this.$('.pressed').click(function (e) {\n      e.currentTarget.style.backgroundColor = Blaze.getData(this).color;\n    });\n  };\n```", "```js\nTemplate.helloBtn.helpers({\n  btnRank: function () {\n    return this.rank;\n  },\n  btnColor: function () {\n    return this.color;\n  }\n});\n```", "```js\n> meteor add rzymek:randomcolor\n\n```", "```js\n> meteor add html5cat:bootstrap-material-design\n\n```", "```js\n    Swatches = new Mongo.Collection('swatches');\n    ```", "```js\n    <head>\n      <title>Swatches</title>\n    </head>\n\n    <body>\n      {{> colors}}\n    </body>\n\n    <template name=\"colors\">\n      <h1>Yay Colors!</h1>\n      <div id=\"cList\">\n          {{#each swatches}}\n              <div class=\"swatch\"\n     style=\"background-color:{{color}}\">\n    {{color}}</div>{{color}}</div>\n          {{/each}}\n      </div>\n      <input id=\"btnNew\" type=\"button\" class=\"btn btn-primary\" value=\"New Color\" />\n    </template>\n    ```", "```js\n    .swatch {\n        min-height: 100px;\n        min-width: 100px;\n        display:inline-block;\n        color:white;\n        text-align: center;\n    }\n    #cList {\n        width: 520px;\n    }\n    ```", "```js\n    Template.colors.helpers({\n        swatches: function(){\n            return Swatches.find({},{ sort: { rank:1}});\n        }\n    })\n\n    Rankings = {\n        beforeFirst: function(first) { return first - 1;},\n        middle: function(before,after){ return (before+after)/2;},\n        afterLast: function(last){ return last + 1; }\n    };\n    ```", "```js\n    Template.colors.rendered = function(){\n        this.$('#cList').sortable({\n            stop: function (e,ui){\n                var el = ui.item.get(0);\n                var before = ui.item.prev().get(0);\n                var after = ui.item.next().get(0);\n                var newRank = null;\n                if (!before){\n                    newRank = Rankings.beforeFirst(Blaze.getData(after).rank);\n                } else if (!after) {\n                    newRank = Rankings.afterLast(Blaze.getData(before).rank);\n                } else {\n                    newRank = Rankings.middle(Blaze.getData(before).rank,Blaze.getData(after).rank);\n                }\n                Swatches.update(Blaze.getData(el)._id,\n                                {$set: {rank:newRank}});\n            }\n        });\n\n        this.$('#btnNew').click(function(e){\n            var newColor = randomColor({luminosity:'random',\n    hue:'random'});\n           Swatches.insert({color:newColor, rank: Swatches.find().count()+1});\n        });\n    };\n    ```", "```js\nthis.$('#btnNew').click(function(e){\n  ...\n  Swatches.insert({..., rank: Swatches.find().count()+1});\n});\n```", "```js\nswatches: function(){\n  return Swatches.find({},{ sort: { rank:1 }});\n}\n```"]