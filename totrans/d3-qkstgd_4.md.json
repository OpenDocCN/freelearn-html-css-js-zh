["```js\nd3.select('svg').on('click', function(){\n    //gets the x position of the mouse relative to the svg element\n    var x = d3.event.offsetX;\n    //gets the y position of the mouse relative to the svg element\n    var y = d3.event.offsetY; \n    //get a date value from the visual point that we clicked on\n    var date = xScale.invert(x);\n    //get a numeric distance value from\n    //the visual point that we clicked on\n    var distance = yScale.invert(y); \n\n    //create a new \"run\" object\n    var newRun = { \n        //generate a new id by adding 1 to the last run's id\n        id: runs[runs.length-1].id+1, \n        //format the date object created above to a string\n        date: formatTime(date),\n        distance: distance //add the distance\n    }\n    runs.push(newRun); //push the new run onto the runs array\n    createTable(); //render the table\n});\n```", "```js\nvar createTable = function(){\n    //clear out all rows from the table\n    d3.select('tbody').html(''); \n    for (var i = 0; i < runs.length; i++) {\n        var row = d3.select('tbody').append('tr');\n        row.append('td').html(runs[i].id);\n        row.append('td').html(runs[i].date);\n        row.append('td').html(runs[i].distance);\n    }\n}\n```", "```js\nvar render = function(){\n\n    var yScale = d3.scaleLinear();\n    yScale.range([HEIGHT, 0]);\n    yDomain = d3.extent(runs, function(datum, index){\n        return datum.distance;\n    })\n    yScale.domain(yDomain);\n\n    d3.select('svg').selectAll('circle')\n        .data(runs)\n        .enter()\n        .append('circle');\n\n    d3.selectAll('circle')\n        .attr('cy', function(datum, index){\n            return yScale(datum.distance);\n        });\n\n    var parseTime = d3.timeParse(\"%B%e, %Y at %-I:%M%p\");\n    var formatTime = d3.timeFormat(\"%B%e, %Y at %-I:%M%p\");\n    var xScale = d3.scaleTime();\n    xScale.range([0,WIDTH]);\n    xDomain = d3.extent(runs, function(datum, index){\n        return parseTime(datum.date);\n    });\n    xScale.domain(xDomain);\n    d3.selectAll('circle')\n        .attr('cx', function(datum, index){\n            return xScale(parseTime(datum.date));\n        });\n\n}\nrender();\n```", "```js\nvar parseTime = d3.timeParse(\"%B%e, %Y at %-I:%M%p\");\nvar formatTime = d3.timeFormat(\"%B%e, %Y at %-I:%M%p\");\nvar xScale = d3.scaleTime();\nxScale.range([0,WIDTH]);\nxDomain = d3.extent(runs, function(datum, index){\n    return parseTime(datum.date);\n});\nxScale.domain(xDomain);\n\nvar yScale = d3.scaleLinear();\nyScale.range([HEIGHT, 0]);\nyDomain = d3.extent(runs, function(datum, index){\n    return datum.distance;\n})\nyScale.domain(yDomain);\nvar render = function(){\n\n    //since no circles exist,\n    //we need to select('svg') so that \n    //d3 knows where to append the new circles\n    d3.select('svg').selectAll('circle') \n        //attach the data as before\n        .data(runs) \n        //find the data objects that have not yet\n        //been attached to visual elements\n        .enter()\n        //for each data object that hasn't been attached, \n        //append a <circle> to the <svg>\n        .append('circle');\n    d3.selectAll('circle')\n        .attr('cy', function(datum, index){\n            return yScale(datum.distance);\n        });\n\n    d3.selectAll('circle')\n        .attr('cx', function(datum, index){\n            //use parseTime to convert \n            //the date string property on the datum object \n            //to a Date object, \n            //which xScale then converts to a visual value\n            return xScale(parseTime(datum.date)); \n        });\n\n}\nrender();\n```", "```js\nvar newRun = {\n    id: runs[runs.length-1].id+1,\n    date: formatTime(date),\n    distance: distance\n}\nruns.push(newRun);\ncreateTable();\nrender(); //add this line\n```", "```js\n//put this at the bottom of the render function, \n//so that click handlers are attached when the circle is created\nd3.selectAll('circle').on('click', function(datum, index){\n    //stop click event from propagating to \n    //the SVG element and creating a run\n    d3.event.stopPropagation(); \n    //create a new array that has removed the run \n    //with the correct id. Set it to the runs var\n    runs = runs.filter(function(run, index){ \n        return run.id != datum.id;\n    });\n    render(); //re-render dots\n    createTable(); //re-render table\n});\n```", "```js\nruns = runs.filter(function(run, index){\n return run.id != datum.id;\n});\n```", "```js\n<svg>\n    <g id=\"points\"></g>\n</svg>\n```", "```js\n//adjust the code at the top of your render function\n //clear out all circles when rendering d3.select('#points').html('');\n //add circles to #points group, not svg d3.select('#points').selectAll('circle') .data(runs) .enter() .append('circle');\n```", "```js\nvar newRun = { //create a new \"run\" object\n    //generate a new id by adding 1 to the last run's id\n    id: runs[runs.length-1].id+1, \n    //format the date object created above to a string\n    date: formatTime(date), \n    distance: distance //add the distance\n}\n```", "```js\n//inside svg click handler\nvar newRun = {\n    //add this line\n    id: ( runs.length > 0 ) ? runs[runs.length-1].id+1 : 1, \n    date: formatTime(date),\n    distance: distance\n}\n```", "```js\ncircle {\n    r: 5;\n    fill: black;\n    /* add this transition to original code */\n    transition: r 0.5s linear, fill 0.5s linear; \n}\n```", "```js\n/* add this css for the hover state */\ncircle:hover {\n    r:10;\n    fill: blue;\n}\n```", "```js\n//put this code at the end of the render function\nvar drag = function(datum){\n    var x = d3.event.x;\n    var y = d3.event.y;\n    d3.select(this).attr('cx', x);\n    d3.select(this).attr('cy', y);\n}\nvar dragBehavior = d3.drag()    \n    .on('drag', drag);\nd3.selectAll('circle').call(dragBehavior);\n```", "```js\nvar drag = function(datum){\n var x = d3.event.x;\n var y = d3.event.y;\n d3.select(this).attr('cx', x);\n d3.select(this).attr('cy', y);\n}\n```", "```js\nvar dragBehavior = d3.drag()\n .on('drag', drag);\n```", "```js\nd3.selectAll('circle').call(dragBehavior);\n```", "```js\nvar dragEnd = function(datum){\n    var x = d3.event.x;\n    var y = d3.event.y;\n\n    var date = xScale.invert(x);\n    var distance = yScale.invert(y);\n\n    datum.date = formatTime(date);\n    datum.distance = distance;\n    createTable();\n}\n```", "```js\nvar dragBehavior = d3.drag()\n    .on('drag', drag);\n```", "```js\nvar dragBehavior = d3.drag()\n    .on('drag', drag)\n    .on('end', dragEnd);\n```", "```js\ncircle:active {\n    fill: red;\n}\n```", "```js\nvar zoomCallback = function(){\n    d3.select('#points').attr(\"transform\", d3.event.transform);\n}\n```", "```js\nvar zoom = d3.zoom()\n    .on('zoom', zoomCallback);\nd3.select('svg').call(zoom);\n```", "```js\nvar bottomAxis = d3.axisBottom(xScale);\nd3.select('svg')\n    .append('g')\n    .call(bottomAxis)\n    .attr('transform', 'translate(0,'+HEIGHT+')');\nvar leftAxis = d3.axisLeft(yScale);\nd3.select('svg')\n    .append('g')\n    .call(leftAxis);\n```", "```js\nd3.select('svg')\n    .append('g')\n    .attr('id', 'x-axis') //add an id\n    .call(bottomAxis)\n    .attr('transform', 'translate(0,'+HEIGHT+')');\nvar leftAxis = d3.axisLeft(yScale);\nd3.select('svg')\n    .append('g')\n    .attr('id', 'y-axis') //add an id\n    .call(leftAxis);\n```", "```js\nvar zoomCallback = function(){\n    d3.select('#points').attr(\"transform\", d3.event.transform);\n}\n```", "```js\nd3.select('#x-axis')\n    .call(bottomAxis.scale(d3.event.transform.rescaleX(xScale)));\nd3.select('#y-axis')\n    .call(leftAxis.scale(d3.event.transform.rescaleY(yScale)));\n```", "```js\nvar zoomCallback = function(){\n    d3.select('#points').attr(\"transform\", d3.event.transform);\n    d3.select('#x-axis')\n      .call(bottomAxis.scale(d3.event.transform.rescaleX(xScale)));\n    d3.select('#y-axis')\n      .call(leftAxis.scale(d3.event.transform.rescaleY(yScale)));\n}\n```", "```js\nvar lastTransform = null; //add this\nvar zoomCallback = function(){\n    lastTransform = d3.event.transform; //add this\n    d3.select('#points').attr(\"transform\", d3.event.transform);\n    d3.select('#x-axis')\n      .call(bottomAxis.scale(d3.event.transform.rescaleX(xScale)));\n    d3.select('#y-axis')\n      .call(leftAxis.scale(d3.event.transform.rescaleY(yScale)));\n}\n```", "```js\nvar x = d3.event.offsetX;\nvar y = d3.event.offsetY;\n```", "```js\nvar x = lastTransform.invertX(d3.event.offsetX);\nvar y = lastTransform.invertY(d3.event.offsetY);\n```", "```js\nd3.select('svg').on('click', function(){\n    var x = lastTransform.invertX(d3.event.offsetX); //adjust this\n    var y = lastTransform.invertY(d3.event.offsetY); //adjust this\n\n    var date = xScale.invert(x)\n    var distance = yScale.invert(y);\n\n    var newRun = {\n        id: ( runs.length > 0 ) ? runs[runs.length-1].id+1 : 1,\n        date: formatTime(date),\n        distance: distance\n    }\n    runs.push(newRun);\n    createTable();\n    render();\n});\n```", "```js\nvar x = lastTransform.invertX(d3.event.offsetX);\nvar y = lastTransform.invertY(d3.event.offsetY);\n```", "```js\nvar x = d3.event.offsetX;\nvar y = d3.event.offsetY;\n\nif(lastTransform !== null){\n    x = lastTransform.invertX(d3.event.offsetX);\n    y = lastTransform.invertY(d3.event.offsetY);\n}\n```", "```js\nd3.select('#points').html('');\nd3.select('#points').selectAll('circle')\n .data(runs)\n .enter()\n .append('circle');\n```", "```js\nd3.select('#points').html('');\nvar circles = d3.select('#points')\n .selectAll('circle')\n .data(runs);\ncircles.enter().append('circle');\n```", "```js\ncircles.exit().remove();\n```", "```js\nvar circles = d3.select('#points')\n .selectAll('circle')\n .data(runs);\n```", "```js\nvar circles = d3.select('#points')\n .selectAll('circle')\n .data(runs, function(datum){\n return datum.id\n});\n```", "```js\n<svg id=\"container\">\n    <svg>\n        <g id=\"points\"></g>\n    </svg>\n</svg>\n```", "```js\nd3.select('#container')\n    .style('width', WIDTH)\n    .style('height', HEIGHT);\n\n//\n// lots of code omitted here, including render() declaration...\n//\n\nvar bottomAxis = d3.axisBottom(xScale);\nd3.select('#container')\n    .append('g')\n    .attr('id', 'x-axis')\n    .call(bottomAxis)\n    .attr('transform', 'translate(0,'+HEIGHT+')');\n\nvar leftAxis = d3.axisLeft(yScale);\nd3.select('#container')\n    .append('g')\n    .attr('id', 'y-axis')\n    .call(leftAxis);\n\n//\n// code for create table omitted here...\n//\n\nd3.select('#container').on('click', function(){\n    //\n    // click handler functionality omitted\n    //\n});\n\n//\n// zoomCallback code omitted here\n//\n\nvar zoom = d3.zoom()\n    .on('zoom', zoomCallback);\nd3.select('#container').call(zoom); \n```", "```js\n#container {\n    overflow: visible;\n    margin-bottom: 50px;\n}\n```"]