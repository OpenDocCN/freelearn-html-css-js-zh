- en: Chapter 1. Automation Life Cycle and Automation Goals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The test automation tool creates a set of scripts that emulates the user action
    to be performed on the **Application Under Test** (**AUT**) and replays them over
    and over with minimal or no human intervention. **Test automation** is a complete
    process, which goes through distinct phases to automate test cases for applications
    under the test. The AUT can belong to any technology or domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Test automation should start very early in the life cycle of the project and
    its success depends upon the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge of the automation life cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processes in test automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selection of the right tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test automation planning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appropriate technical know-how about automation and test automation tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The key driving and guiding forces for successful test automation are the automation
    goals, best practices, selection criteria, and attributes for tool selection and
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: Good knowledge in these areas helps implement the test automation in an effective
    way.
  prefs: []
  type: TYPE_NORMAL
- en: The test automation life cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test automation life cycle is the process in which test automation progresses
    through a series of different stages. The focus of this chapter is to learn the
    key activities and tasks that are performed during each phase of the life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Feasibility study
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A feasibility study is an evaluation and analysis of the potential tool, which
    can provide the desired solution for the test automation needs of the project(s).
    The aim is to uncover the strengths and weaknesses of the tool(s) objectively
    and rationally. Generally, it precedes test automation implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The feasibility study between the manual and automation effort required should
    be applied based on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: ROI (Return On Investment)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Future enhancements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider the test cases, automation tools, automation environment, development
    and maintenance of automated tests, skill sets, organizational capabilities, design,
    and approach of the automation for test automation planning.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest way to define the ROI is *ROI = Benefits/Cost*.
  prefs: []
  type: TYPE_NORMAL
- en: The go/no go decision can be taken after the calculation of the ROI. The future
    changes in the application/service might possess many threats as well as opportunities
    for test automation. Leads and managers need to have a clear vision to evaluate
    the ROI for future enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: The test manager or lead should focus on maximizing the ROI for test automation.
    He/she should focus on reducing the maintenance cost and achieving faster scalability
    of the test suite. Computation of the ROI is an important activity, which allows
    us to foresee many tradeoffs and governs the implementation of test automation.
    Since computing the ROI is out of scope for this book, this is how far we can
    go.
  prefs: []
  type: TYPE_NORMAL
- en: Tool induction for automated testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This phase is designed for successful induction of tool(s) and building the
    basic infrastructure needed or identifying the needs for test induction.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key steps in test induction are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Identifying the technical/non-technical requirements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The technical requirements are, for example, support for technology, tools,
    and scripting languages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-technical requirements are, for example, the goals for test automation
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluating the tools based on selected attributes along with their respective
    weightage. Tool evaluation is one of the most technically-challenging tasks when
    performed with limited knowledge about the tool(s).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attributes such as user friendliness, license cost, and training cost define
    tool features
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign higher weightage (a high number) to the most relevant attributes during
    tool selection
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Compute the overall score by calculating the sum of the product of weight and
    value, that is, *Total score = ∑ Attribute weight * Attribute value*. The range
    of the value may vary, for example from zero to five.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The final selection is based on the final score calculated for the tool(s)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pilot run is when we create the sample scripts to verify that the selected tool
    is working as expected on the selected test cases. If the pilot run is successful,
    you can purchase the license or acquire the tool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defining a test automation strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Test automation strategy is a plan of action designed to achieve the overall
    aim for test automation. It provides broad guidelines so that the stakeholder
    knows the approach for design and implementation of the test automation. Few organizations
    combine the test strategy and test plan in a single document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Test strategy defines the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Scope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Framework and design approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Script creation approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The amount of testing required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Risk and mitigation plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deliverables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a automation test plan
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Planning is the process of thinking and looking ahead for activities and tasks
    required for test automation. The test plan defines the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tool installation plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test schedule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roles and responsibilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resource requirements (hardware, software, and skilled resources)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Training requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing the plans for scripts and design documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limitations and assumptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The test plan document tells us what is to be done for test automation, and
    when. This document is used by all the stakeholders and it serves as the contractual
    agreement among the key stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: Script design and development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the key phase where actual things get implemented. This phase requires
    technical skills for designing the framework and coordination skills to interact
    with the SMEs (Subject Matter Experts), BAs(Business Analysts), manual testers,
    and developers to accomplish the various tasks for test automation. The leads
    have to ensure that the reviews have been done and coding standards followed;
    the test repository structure is then created and all the resources are kept at
    appropriate locations. We will create the documents for understanding, using,
    and enhancing the test automation later.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key steps in the design and development phase are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Analysis and script planning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Script creation (scripts can be created by recording or manually)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creation of common and framework-specific libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Script enhancement (adding exception handlers, checkpoints, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Association or integration of libraries and functions with scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviews (ensure consistency, coding standards, and version controls are followed
    as already defined in the plan or strategy document)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dry run and analyzing the results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging the scripts and fixing the defects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment, release, and maintenance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous phase we have performed the dry run; now it is time to deploy
    the scripts to the appropriate location with a well-defined structure and data.
    The actual execution may not be carried out by the people who developed the test
    scripts, as it may be executed by business users, SMEs, or other automation engineers;
    hence, before releasing the test scripts it should be ensured that all the required
    documents and automation resources are in place and reviewed by the lead or team
    members.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key steps in the deployment, release, and maintenance phase are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Deployment**: After the test automation scripts are deployed, they can be
    used by automation engineers, SMEs, or even business users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Release**: The following artifacts are delivered in this phase (the list
    may vary based on the project''s need)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Framework components / scripts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Libraries, functions, and data pools
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Release notes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping document (traceability matrix)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Design/architecture document
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintenance**: In this phase, we will perform the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here we analyze the failures due to scripts or application issues, logs, and
    fix them
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We enhance the scripts as per the requirement for each cycle/release
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The scripts for each cycle are executed
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Over a period of time, objects in the GUI and the flow in AUT changes; thus,
    it is required to change test objects in the **Object Repository** (**OR**) and
    scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Tool selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now need to identify the key requirements, which should cover the depth and
    breadth of the technology required both at the organizational and project level.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing automation requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The requirements for the test automation are gathered from the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Organizational level requirements for test automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What technology is used in the organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How tools support the automation of these technologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project level or project-specific requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key technical areas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a POC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The key steps to conducting a **Proof Of Concept** (**POC**) are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify the minimal test set for POC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify the technical feasibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify the implementation feasibility if we implement the tools with ease
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find out if there is any known limitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submit the POC Summary Report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluating the tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The key steps to evaluating the tools are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Identify the key attributes that are most suitable for your project: for example,
    technology support, technology version, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Give appropriate weight and value to the attributes; the total score is the
    sum of the product of weight and value as shown:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Total score = ∑ Attribute weight * Attribute value*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The final selection of the tool is based on the total score
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tool selection criteria
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a comprehensive-but-not-complete list of attributes that we
    should look into while considering tool selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reliability**: This is the ability of a tool to perform and maintain its
    functions in routine circumstances, as well as hostile or unexpected circumstances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Capacity**: This refers to the possible output of a system, that is, to create
    and execute scripts in an efficient and effective way.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Learnability**: This tool is quick and easy to learn.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operability**: This is the ability to work under various configurations and
    environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: The accomplishment of a given task is measured against the
    presently-known standards of accuracy, completeness, throughput, and speed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compatibility**: This checks whether the tools support various versions of
    the technology, browsers, or operating systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-intrusiveness**: The key non-intrusiveness features we should look into
    for tool selection are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform-/OS-independent
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Data-driven capability
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizable reporting
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: E-mail notifications
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy debugging and logging
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for version control
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Extensible and customizable (open APIs should be able to integrate with other
    tools)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Common driver for logging
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Support-distributed execution environment
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributed application support
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: License and support (cost)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From a broader perspective, test automation is driven by the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The processes defined within an organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design and architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation goals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices for test automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these complement each other for the success of test automation.
  prefs: []
  type: TYPE_NORMAL
- en: Processes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A process can be described as a structured approach to perform various tasks
    and activities that take place during the automation life cycle. Well-defined
    processes that are laid out by competent organizations provide the guidance to
    approach automation, from conception to culmination.
  prefs: []
  type: TYPE_NORMAL
- en: In the absence of well-laid processes and historical data it is difficult to
    estimate, plan, and implement the test automation. In case an organization is
    implementing test automation for the first time, it becomes the learning curve
    for future test automations and provides historical data for future projects.
  prefs: []
  type: TYPE_NORMAL
- en: Design, architecture, and documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Well-defined architecture/design helps reduce the overheads and conflicts; it
    also helps the team to collaborate better and achieve better implementation. The
    key aspect for designing the solution is to provide abstraction from complexities,
    encapsulation, and technical challenges. We need to develop support libraries
    for reusability and expandability of the automation solution.
  prefs: []
  type: TYPE_NORMAL
- en: We have to document the design and architecture. The comments in scripts, script
    headers, and function headers improve the readability and understandability. Documentation
    helps in enhancing and maintaining the scripts quickly and easily.
  prefs: []
  type: TYPE_NORMAL
- en: Automation goals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A goal is the desired result that a person envisions. It is the plan and commitment
    to achieve the desired end point in some sort of assumed development. A goal is
    the key driving and guiding force for the success of test automation. The design
    requires breaking the framework solution into components and layers. The automation
    goals should be met at each level or layer for the overall success of test automation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The objective of defining goals is to get clarity on the outcome. The goals
    are defined at each layer and have some cascading effect on each other. They also
    drive and contribute to each other's success.
  prefs: []
  type: TYPE_NORMAL
- en: Goals for test automation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The overall automation design goals are derived by organizational goals, domains,
    businesses, and so on. The list may vary from organization to organization. A
    few of them are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Increase reusability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhance test coverage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speed up testing for multiple and frequent releases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure consistency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve the reliability of testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Goals for framework design
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following is the list of goals for framework design based on the organization,
    domain, and so on. This list may vary.
  prefs: []
  type: TYPE_NORMAL
- en: Maintainability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Readability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extensibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reusability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application independent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should have short driver script/master script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Goals for design
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following is a list of goal design components of the test automation solution
    or framework based on the organization, domain, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: The design should be easy to expand and maintain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should provide abstraction from complexities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identification of the common functions used across scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decouple complex business functions with utility functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decouple test data and test scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creation of robust functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appropriate functional decomposition with portability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the scripts are executed without human intervention, even in erroneous
    conditions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Goals for script design
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following list of goals for the scripts/code of the test automation is based
    on the organization, domain, and so on. This list may vary.
  prefs: []
  type: TYPE_NORMAL
- en: The test should always have a common start point and end point
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should clean up the resources to be reused, for example, deleting old log
    files, result files, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The test should reveal maximum information in case an error occurs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the values rather than hardcoding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appropriate comments and script headers should be present
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code should be readable and appropriate documentation should be present
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script should be maintainable and easy to modify
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error handling and snapshot for errors should be present
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging utilities should be available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting quantifiable goals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is essential to set clear, measurable goals for the test automation project.
    These goals should clearly be brought out. A few examples are:'
  prefs: []
  type: TYPE_NORMAL
- en: The number or percentage of test cases to be automated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing the test coverage by percentage or numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducing the time to release the build by percentage or numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduction of the test cycle time of new releases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is difficult to get the desired outcome or even the ROI without setting measurable
    goals; this will lead to a high maintenance cost and the changes to the scripts
    will cause side effects.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Test automation is an integral part of any software development and sustenance
    project. Some of the best practices that follow will make the test automation
    project successful.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the most suitable tool for automation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A misfit tool for test automation increases the effort in designing, creating
    scripts, and maintaining them, thus increasing the cost of test automation or
    even failing to achieve the automation goals. Selecting the right tool is winning
    half the battle. An appropriate tool helps in speeding up script creation, modification,
    identifying the issues in scripts, and resolving them quickly; in a nutshell,
    it makes life much easier for the test automation team.
  prefs: []
  type: TYPE_NORMAL
- en: Treating test automation as a development activity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Treat test automation with the same discipline and objectivity as a development
    project. A successful testing automation project takes a framework-driven approach.
    Decompose the scripts based on the AUT functionality and divide them into reusable
    functions. Create a well-defined structure that allows uniform sharing of resources.
    Prepare appropriate documentation: one that enhances the readability and maintainability.
    Ensure that the scripting/coding standards have been followed. Finally, you need
    to test and debug the scripts or code and make sure that the scripts are free
    from bugs. It is also good to check whether the scripts and resources use version
    control tools or mechanisms.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting the right architecture
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is difficult to extend and maintain the test automation if the framework-driven
    approach is not used. The overall design becomes chaotic or cumbersome to modify
    or enhance. The test automation framework allows us to define the scripting methodology
    to automate tests, create support libraries and common resources to execute the
    tests, and report the results. Framework allows adding the test cases with minimal
    effort. It also allows the establishing of a common standard and consistent way
    to achieve goals for the automation team.
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring relevant and up-to-date test data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If data is outdated and irrelevant, the test automation suite might not be able
    to catch bugs. The near-production data (the data which is most similar to production
    data) ensures that the test data is mapped to the correct fields in the GUI. It
    should not contain leading and trailing spaces. Use test data with the correct
    spelling, since it may be relevant for selecting values from the drop-down menu,
    for example choosing data wisely for reuse across multiple tests. Test data is
    helpful in enhancing the code coverage. After a certain period the test data might
    become irrelevant; thus, it should be replaced by relevant and up-to-date test
    data to find bugs quickly and easily.
  prefs: []
  type: TYPE_NORMAL
- en: Investing in team building and training
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apart from the right tools and a well-laid process, a testing automation project
    requires a dedicated and skilled team to understand the complexity of the project
    and translate it into scripts. The gaps in the skillset imbalances the work and
    delivery, leading to patchwork and low morale of the team members. The leads or
    managers should see that the team gets adequate training to bridge the gaps (if
    any) in the skillset.
  prefs: []
  type: TYPE_NORMAL
- en: Conducting reviews and tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Without formal reviews, it is likely that defects are not discovered and standards
    are not followed, leading to potential issues in the integration of framework
    components. This results in additional cost and effort. A review helps to proactively
    find issues and potential risks early and mitigate them quickly. Reviews also
    ensure consistency in the projects and keep the issues in check.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The automation life cycle is a structured approach to design, execute, and maintain
    test automation. This structured approach is necessary to help steer the test
    team away from common test program/automation mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter covered all the aspects of test automation in a broader perspective.
    Having knowledge of the automation life cycle and key activities in each phase
    helps in streamlining tasks and goals. Well-defined processes and historical data
    are helpful in test estimation, and tool evaluation and selection. The architecture
    or design is based on implementing the test automation and achieving goals. In
    the next chapter, we will discuss the various features of QTP and concepts that
    are essential to create reusable scripts.
  prefs: []
  type: TYPE_NORMAL
