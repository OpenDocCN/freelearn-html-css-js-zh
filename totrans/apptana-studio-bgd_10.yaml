- en: Chapter 10. PHP Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '***PHP** is a scripting language for developing websites and web applications.
    PHP (which stands for **Personal Home Page**) is used to compile the source code
    on the server side the moment the script is called from the client and send the
    result to the browser.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*PHP is used for small to large websites and web applications. Large frameworks,
    content management systems, and Webshops (ZendFramework, Symphony, XT-Commerce,
    WordPress, and many more) are all developed using PHP. Although PHP is also very
    useful for JavaScript AJAX web applications that need to send, receive, and persist
    data through a web server.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*In this chapter, you will take a closer look at PHP and how you can develop
    PHP easily with Aptana Studio 3.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter you will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and configuring PHP projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring existing projects as PHP projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with external PHP libraries and including them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using PHPDoc to document projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using and configuring the PHP code formatter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and configuring PHP projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Editing single PHP files is very easy. If you have to edit one or more PHP files,
    you can just drag-and-drop the files into Aptana Studio 3 Editor. Aptana Studio
    opens the file automatically in the PHP Editor; this provides syntax highlight,
    code completion, and much more, allowing you to begin editing them straight away.
    However, you will only know the full power of Aptana Studio PHP Editor when you
    edit your PHP files as a PHP-natured, Aptana Studio 3 project.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – creating a PHP project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A PHP project can be quickly created by following the next few steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the menu entry from **File** | **New** (or just press the shortcut key
    *Alt* + *Shift* + *N*) and then select PHP Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the opening window, which can be seen in the following screenshot, enter
    the Project name and select the location where the project source code should
    be stored:![Time for action – creating a PHP project](img/8246_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, you have to choose the compatibility of your PHP project. This means
    you'll choose the PHP version that will finally be used for your web application.
    When Aptana Studio knows the related PHP version of your project, it is able to
    adjust the syntax highlighting, code assist, and error detection (as a result
    of parsing the PHP files). For example, if you select PHP 4 as the version and
    have PHP 5 code, you will see error markers in your code for the PHP 5 content.
    The Content Assist feature will not work for namespaces and such, and also, you
    will not get the suggested Content Assist feature for classes, functions, and
    constants as they are only defined in the PHP 5 API. So identify the requirements
    for your web applications and select the PHP version you need.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you have to click the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatively, if you want to work with an existing source code base, you can
    navigate to the **Project Explorer** view and search for the source code directory
    within the **Local Filesystem** node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have located the source code directory, right-click on this directory
    and select the entry **Promote to Project...**, as shown in the following screenshot:![Time
    for action – creating a PHP project](img/8246_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have to select the project type with this alternative method, therefore
    select the **Project Type** entry as **PHP-Primary**. As the secondary **Project
    Type** you can choose **Web,** as an example, but make sure that the PHP entry
    is marked as primary, as shown in the following screenshot:![Time for action –
    creating a PHP project](img/8246_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Project nature**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you'll take a look at the projects within Project Explorer, you may see
    on some project icons in the top-right corner, a small symbol that will show you
    the primary nature (or named type) of these projects. A blue **P** shows you that
    this is a PHP-natured project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using both these methods, you should finally receive a PHP project which you'll
    use as a base for the rest of this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have just created a PHP-natured project. This project provides you with
    the specific functions for developing PHP web applications. This means that you
    also have the ability to select the used version of PHP and therefore adjust some
    functionalities, such as the syntax highlighting, code assist, and error detection
    (as a result of parsing the PHP files).
  prefs: []
  type: TYPE_NORMAL
- en: You have also seen that you're able to combine the nature of your PHP project
    with a web project, this will allow you to specialize the Aptana Studio project
    to meet the requirements of your project.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a PHP project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: But what do you have to do when you have an existing project that you want to
    configure for PHP development? No problem, you can configure each project as you
    need. The next *Time for action* section will show you how you can adjust your
    PHP project.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – configuring a PHP project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this section, you''ll start with a project that doesn''t already have a
    nature assigned to it. Now we will configure this project as a PHP project by
    using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **Project Explorer** view, right-click on the project that you
    want to configure and select the **Properties** entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **Properties** window which will appear, you can configure some PHP-relevant
    properties that you wish to look at. To the left of the window, you will find
    a list of property pages. You will find the content of each property page in the
    larger right-hand side of the window area, as shown in the following screenshot:![Time
    for action – configuring a PHP project](img/8246_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can start scrolling down from the top page-by-page, starting from the **Builders**
    page. You will find the Builders for your project on this page. If you'll add
    the web project nature here, the **Studio Unified Builder** option will appear
    in the list. For a selected PHP project nature, the PHP builder is added to this
    list, so you don't have to select these entries by hand. This happens automatically
    if you select or deselect a project nature. The **Builders** page is shown in
    the following screenshot:![Time for action – configuring a PHP project](img/8246_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next relevant section is the **Formatter** page. Here you will take a look
    at how you can select a custom formatter. Also, later in this chapter, we will
    look at how you can create your own formatter. In the first step to selecting
    your own formatter, you have to set the **Enable project specific settings** checkbox.
    After this happens, the fields shown in the **Formatter** page in the following
    screenshot lose their read-only state, and you will then be able to select a formatter
    profile:![Time for action – configuring a PHP project](img/8246_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **PHP Buildpath** page allows you to include libraries from another project
    in your workspace or even from an external directory. Examples of how you can
    use this feature will be seen later in this chapter. The **PHP Buildpath** page
    is covered in the following screenshot:![Time for action – configuring a PHP project](img/8246_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **PHP Development** section allows you to change the compatibility of your
    project. Just choose the required PHP version. This means that, as you learned
    in the previous *Time for action* section, you need to choose the PHP version
    that will finally be used for your web application. When Aptana Studio knows the
    related PHP version of your project, it is able to adjust the syntax highlighting,
    code assist, and error detection (as a result of parsing the PHP files). The **PHP
    Development** section can be seen in the following screenshot:![Time for action
    – configuring a PHP project](img/8246_10_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next and last relevant section is the **Project Natures** section. This
    section allows you to change the nature of a project. Just check the checkbox
    of the natures that your project should support. By selecting a nature and pressing
    the **Make Primary** button, you can switch the primary nature of your project.
    As you wish to develop a web application, you'll need to choose **PHP** as the
    primary and **Web** as the additional nature. The **Project Natures** section
    can be seen in the following screenshot:![Time for action – configuring a PHP
    project](img/8246_10_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have chosen an existing project that didn't have a project nature assigned,
    with the aim of configuring it for PHP Development. In this *Time for action*
    section, you have seen where the Project Builders are selected, where you can
    select a project-specific code formatter, and how you can include additional libraries
    or even an external directory, from your workspace. In addition to this, you also
    learned how to change the project nature or the required PHP version.
  prefs: []
  type: TYPE_NORMAL
- en: Using PHPDoc within PHP Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PHPDoc is the short name for the phpDocumentor which is a tool for the automatic
    generation of project documentations. You can get information on the phpDocumentor
    and much more on it's website, [http://www.phpdoc.org/](http://www.phpdoc.org/).
  prefs: []
  type: TYPE_NORMAL
- en: PHPDoc provides you with a convention of structure and fixed attributes, with
    which you can create source code comments for files, classes, functions, and attributes.
    These specified attributes from the comments help define the information (such
    as types and descriptions)in the source code files, in a standardized way and
    are optimized for a further processing.
  prefs: []
  type: TYPE_NORMAL
- en: But why is the usage of PHPDoc so important?
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, every developer should know that to document the source code itself
    is very important. If you have to extend a code from another developer, it's sometimes
    not so easy to understand why the developer has coded certain parts in his code.
    But it may also happen that you have to extend your own code, which you had coded
    in the past, and you don't remember why you have done some things the way you
    did. At least at this moment you know it, and it is thus considered good practice
    to document the code.
  prefs: []
  type: TYPE_NORMAL
- en: But that's not all. If you always use a well-formed and valid PHPDoc style,
    you can get much more out of your code. For example, you're able to automatically
    create a complete HTML documentation page with the phpDocumentor. However, the
    important point for us at this moment is that Aptana Studio reads out our PHPDoc
    comments and feeds the information into Content Assist.
  prefs: []
  type: TYPE_NORMAL
- en: With this ability, you can to create an auto completion for all your classes,
    constants, and functions while you are writing it.
  prefs: []
  type: TYPE_NORMAL
- en: Using the predefined PHPDoc Comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aptana Studio 3 comes with a few predefined PHPDoc Comments, which can be included
    from the PHP Bundle snippets. These can be used in the same way as we mentioned
    earlier in this chapter, with the help of the Content Assist feature. The short
    *Time for action* section that follows will cover this in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – using PHPDoc Comments from the PHP Bundle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a PHP file from a PHP-natured project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the cursor on an empty line from where you want to code a function or
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the chars `doc` and trigger the Content Assist feature by pressing *Ctrl*
    + Space bar. You should get results similar to the ones shown in the following
    screenshot:![Time for action – using PHPDoc Comments from the PHP Bundle](img/8246_10_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Content Assist feature then suggests all snippets with the trigger that
    begins with `doc`, and you're able to select the required snippet from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can select the **Function** entry and insert it by pressing *Enter*.![Time
    for action – using PHPDoc Comments from the PHP Bundle](img/8246_10_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see in the previous screenshot, the Content Assist feature inserts
    a complete function body introduced by the PHPDoc Function Comment. After the
    snippet is inserted, the function name is displayed within a border (as you can
    see in the preceding screenshot). This shows you that this name can be edited
    directly, simply begin to enter the name of your new function. If you're ready,
    you can use the *Tab* key to jump to the next position where the snippet allows
    you to adjust it. So if this is the case, you can jump to each parameter, namely
    the function description in the comment, the return value, the author name, and
    finally into the function body step-by- step, where you can immediately begin
    to code the function itself. Your final code should now look similar to the following
    screenshot:![Time for action – using PHPDoc Comments from the PHP Bundle](img/8246_10_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have saved your file, place your cursor a few lines below the new
    function and begin to type the function name. As you can see, the Content Assist
    feature has already indexed the function and now provides you with the ability
    to insert it easily.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can read a lot of information from the suggested rows of the Content Assist
    feature. First, there is an icon that shows you the type of suggestion. Types
    could be functions, classes, snippets, and so on. Also, the location where the
    suggestion is located is in squared brackets. In our case, the suggestion is local;
    this means it is in the same file. In other cases, the filename would be displayed
    where the suggestion is contained. If the suggestion is a PHP-API entry, it also
    displays which PHP version it is available with. The last column is reserved for
    the snippet entries where the trigger name is displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have inserted a PHPDoc conform Function Comment that was provided by the
    PHP Bundle snippets. The snippets quickly allow us to fill in the required information
    in the prestructured comment.
  prefs: []
  type: TYPE_NORMAL
- en: Aptana Studio's PHP Bundle PHPDoc Comment snippets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Aptana Studio's standard PHP Bundle provides us with some snippets for the most
    commonly used PHPDoc Comments. However, as we have already mentioned, you're also
    able to extend the snippets and create some new PHPDoc Comments that are much
    more specialized to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a complete list of predefined PHPDoc Comments and their trigger keywords:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Trigger | Title |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| doc_c | Class |'
  prefs: []
  type: TYPE_TB
- en: '| doc_v | Class Variable |'
  prefs: []
  type: TYPE_TB
- en: '| doc_d | Constant Definition |'
  prefs: []
  type: TYPE_TB
- en: '| doc_f | Function |'
  prefs: []
  type: TYPE_TB
- en: '| doc_s | Function Signature |'
  prefs: []
  type: TYPE_TB
- en: '| doc_h | Header |'
  prefs: []
  type: TYPE_TB
- en: '| doc_i | Interface |'
  prefs: []
  type: TYPE_TB
- en: 'However, it must be said that in very dynamic PHP code, the Content Assist
    feature doesn''t always have an easy job. In some cases, it may not be possible
    to determine the type of variable and so the Content Assist feature isn''t able
    to provide correct suggestions for it. In this instance you will need to support
    the Content Assist feature and declare the type with a small PHPDoc Comment. In
    the following screenshot, you will see a brief example of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Aptana Studio''s PHP Bundle PHPDoc Comment snippets](img/8246_10_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now you can go ahead and take a look at how to include and use external libraries
    within PHP projects.
  prefs: []
  type: TYPE_NORMAL
- en: Using PHP libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most large PHP projects come with active additional external libraries. Often
    these libraries are not located within the PHP project itself. For example, you
    could place ZendFramework directly within your project, but you could also place
    it within the PHP-API directory or somewhere else.
  prefs: []
  type: TYPE_NORMAL
- en: But, you may wonder, what's the difference between these two processes?
  prefs: []
  type: TYPE_NORMAL
- en: If you have your ZendFramework located within your project, the Content Assist
    feature of this project automatically knows all PHPDoc-tagged elements. If this
    is the case, the build process of the project might slow down and the project
    size is increased drastically. The first time after the inclusion of the ZendFramework
    libraries, Aptana Studio will index all ZendFramework files and evaluate the contained
    PHPDocs. Then, every time Aptana Studio triggers the build process of this project,
    it will also check the timestamps of all ZendFramework files for possible changes.
  prefs: []
  type: TYPE_NORMAL
- en: If you locate the ZendFramework outside your project, you must integrate it
    as a library into your project. Otherwise, Aptana Studio will not be able to provide
    you with the Content Assist feature of the ZendFramework information. In this
    instance, Aptana Studio will only index all the files of ZendFramework while creating
    the Aptana Studio library. After that, only when Aptana Studio starts up will
    it check the timestamps of each file in order to identify the changed files that
    have to be reindexed. If you want to integrate a library that you use in most
    of your projects, you have the additional advantage of only having to include
    the library once. After inclusion, Aptana Studio provides the library with every
    PHP-natured project.
  prefs: []
  type: TYPE_NORMAL
- en: In both cases, the Content Assist feature learns all the available classes,
    constants, and functions that are contained within your library and uses them
    for inspection.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You have to remember that all libraries that you want to include as part of
    the goal that the Content Assist feature needs to work with, must be equipped
    with PHPDoc Comments.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of Aptana Studio's Content Assist feature, the PHPDoc Comments were
    determined and used to provide the developer with more information and code suggestions
    of the available environment at the time of developing.
  prefs: []
  type: TYPE_NORMAL
- en: PHP-API files are supported by default with the Content Assist feature. While
    you have chosen a PHP compatibility version (by creating or configuring your project),
    you have adjusted the Content Assist feature so that it only suggests the classes,
    functions, and documentation entries that are equal with the PHP version.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you used a PHP-API function, such as `substr`, and didn't remember
    what parameter number has what functionality. No problem, simply hover the mouse
    cursor above the function call within the PHP editor and it appears as a tool
    tip that contains the PHP Documentation of this function, as seen in the following
    screenshot:.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using PHP libraries](img/8246_10_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here you will get all the information that you need such as, what parameter
    requires what kind of variable type, what parameters are optional, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Too much information!**'
  prefs: []
  type: TYPE_NORMAL
- en: If the PHP Documentation is too large and it does not fit in the tool tip, just
    press the *F2* key in order to make the tool tip sticky. Now you're able to scroll
    within the tool tip and read it in a relaxed manner.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – using external libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now you will take a look at how you can add external libraries to your PHP project
    so that your Content Assist feature knows all the available classes, constants,
    and functions from these additional libraries.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, you have to add a new user library. So you will need to open **Preferences**
    under **Window** | **Preferences** and navigate within the tree to **Aptana Studio**
    | **Editors** | **PHP** | **Libraries**. The **Libraries** dialog box is shown
    in the following screenshot:![Time for action – using external libraries](img/8246_10_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, click on the **New user library** button in order to open the creation
    window seen in the following screenshot:![Time for action – using external libraries](img/8246_10_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here you have to enter a name for your user library. You will use ZendFramework,
    so you will need to enter the name of this library, which is extended by the version
    number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then you will need to select at least one or more directories where your libraries
    are located. When you've selected all the required libraries, click on **OK**
    to complete this step, as seen in the following screenshot:![Time for action –
    using external libraries](img/8246_10_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, your new library should be listed within the libraries list. Be sure that
    all the libraries that you want to use within the PHP projects have the related
    checkbox enabled by default, as seen in the following screenshot:![Time for action
    – using external libraries](img/8246_10_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**What happens internally when you add a new PHP library**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you add a new library, Aptana Studio will index all the included files.
    While indexing, it remembers the timestamp for each file, so it can check if a
    file has been changed with every startup. If changed files were detected during
    start up, Aptana Studio will reindex these files. So you can be sure that you
    are always getting the newest information from the Content Assist feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, click on **Apply** and then on **OK** to complete the library creation
    and wait for it to complete the indexing of the library. The progress is shown
    in a dialog box, as seen in the following screenshot:![Time for action – using
    external libraries](img/8246_10_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have integrated a PHP library such as ZendFramework into Aptana Studio.
    After you have added the library within the preferences, the library will be used
    in all PHP-natured projects by default.
  prefs: []
  type: TYPE_NORMAL
- en: Now when you are developing in a PHP project, the Content Assist feature will
    provide you with the available classes, constants, and functions from this library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform a quick test of the Content Assist feature. Open a PHP file
    within a PHP-natured project and begin to enter the chars `Zend`, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_10_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, Aptana Studio identifies that you want to create an instance
    of a class and therefore provides you with only those classes that begin with
    `Zend`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, if you can''t remember what kind of parameters are available
    in a function of your library, just hover the mouse cursor above a function call,
    and a tool tip appears with the PHPDoc Comment within it. If the PHPDoc Comment
    is of good quality, all your questions will be answered quickly. The following
    screenshot shows such an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_10_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring project-specific libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you know how you can provide libraries to all PHP projects, the following
    question still remains; what should you do if you don't need or want a library
    within a PHP project? It may so happen that you have a PHP project that isn't
    using ZendFramework. In that case, the information provided by the Content Assist
    feature about the ZendFramework could disturb you while you are searching for
    the Content Assist information that you really need.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, this project could be a Flow3 project, but this is the only Flow3
    project that you are developing and therefore you don't want the Content Assist
    information of Flow3 in each PHP project. This is not a problem as you can overwrite
    the libraries in each project.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – configuring project-specific libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a look at how easy it is to configure project-specific libraries
    using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the the PHP project in the **Project Explorer** view that you want
    to adjust the used libraries in. Right-click on it and select the **Properties**
    entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the opening window, select the **PHP Buildpath** section. In this section,
    you will find three tabs that will allow you to adjust the used libraries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Workspace** tab allows you to add libraries to your project that are already
    contained in another project in your workspace. Just click on the **Add...** button
    and select a PHP project within the popup. This tab is shown in the following
    screenshot:![Time for action – configuring project-specific libraries](img/8246_10_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Default selection within the Workspace tab**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By default, you will find the PHP project within the list on the **Workspace**
    tab itself. This is the reason for the project Content Assist feature already
    knowing its own classes, constants, and functions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **External Directories** tab allows you to add libraries that are located
    in external directories somewhere on your disk. Just click on the **Add...** button
    and select a directory from the popup. This tab is shown in the following screenshot:![Time
    for action – configuring project-specific libraries](img/8246_10_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Libraries** tab allows you to overwrite the settings from the global preferences
    of Aptana Studio. First of all, you have to select the **Use project specific
    settings** checkbox. After that, you can deselect the entries that you've configured
    within the global preferences so the Content Assist feature doesn't provide information
    about these libraries anymore. The **Libraries** tab is shown in the following
    screenshot:![Time for action – configuring project-specific libraries](img/8246_10_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, when you have finished customizing the project libraries, just click
    on **Apply** and thereafter click on **OK**, in order to assume the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have changed the default libraries for the PHP project so that the Content
    Assist feature only provides information that you really need in this project.
  prefs: []
  type: TYPE_NORMAL
- en: Using and configuring the code formatter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every developer knows the problem, for example, suppose you want to work with
    a source code file from another developer, and the developer has formatted the
    code in a different, unreadable style. How nice it would be if the code was formatted
    in the same style as you preferred it.
  prefs: []
  type: TYPE_NORMAL
- en: This is not a problem if this is the case, as Aptana Studio 3 provides a source
    code formatter that is easy to use.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – using and configuring the PHP code formatter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps show you how you can use the code formatter:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, open the PHP file that you want to format within the Aptana Studio
    3 Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Formatting the file is the easiest part of this *Time for action* section. Just
    right-click somewhere within the editor and select **Source** | **Format**. Alternatively,
    you can use the shortcut *Ctrl* + *Shift* + *F*. This selection is shown in the
    following screenshot:![Time for action – using and configuring the PHP code formatter](img/8246_10_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have performed this action, the Aptana Studio code formatter converts
    the formatting of your PHP file to adhere to how the code formatter is configured.
    It is possible however that this might not be the formatting that you prefer.
    If this is the case, you can go forward and look at how you can configure the
    code formatter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To do this, navigate to **Window** | **Preferences** and select **Aptana Studio**
    | **Formatter** within the tree. The **Formatter** dialog is as shown in the following
    screenshot:![Time for action – using and configuring the PHP code formatter](img/8246_10_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top-right corner, you can create a new profile for the formatter. If
    you don't have a profile already, click on the green plus (**+**) button in order
    to create your own profile. This is recommended, because you can then switch back
    to the default one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for your new profile and select the profile from which your new
    profile should be initialized. You will need to choose the **Default Profile**
    option, as shown in the following screenshot, because its the only one you have:![Time
    for action – using and configuring the PHP code formatter](img/8246_10_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Using code formatter profiles**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you're working for different developer teams or maybe different clients,
    it might happen that these developer teams or clients have different formatting
    conventions. The profiles allow you to create for each of them a dedicated formatter
    configuration. Information on how you can combine the different projects with
    the required formatter profiles has already been covered in this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **OK** button in order to create the new profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will begin to customize your new profile where your old one was saved. Select
    your new profile from the top of the window, then select the PHP entry within
    the list, and start the editing function by clicking on the pencil button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Formatter** edit window is grouped in different tabs, where you are able
    to adjust many settings on the left and immediately see the preview on the right.
    The first tab contains the options for **New Lines**. Here you can set a position
    where the formatter should insert a new line. This tab is shown in the following
    screenshot:![Time for action – using and configuring the PHP code formatter](img/8246_10_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the second tab, **Indentation**, you can adjust the kind of indentation for
    your source code. Here you have the option to inherit the tab policy from the
    general settings or to overwrite them. This tab is shown in the following screenshot:![Time
    for action – using and configuring the PHP code formatter](img/8246_10_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The third tab, **Blank Lines**, allows you to adjust the behavior of blank lines
    within classes and functions. This tab is shown in the following screenshot:![Time
    for action – using and configuring the PHP code formatter](img/8246_10_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The fourth tab, **Braces**, contains the behavior of braces. Here you can select
    the different lines in which different braces should appear. This tab is shown
    in the following screenshot:![Time for action – using and configuring the PHP
    code formatter](img/8246_10_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Spaces** tab provides you with more than 20 options to customize the behavior
    of spaces. These space settings are grouped in the **Parentheses**, **Punctuation
    Elements**, and **Operators** areas. With each of these settings, you're able
    to select the amount of spaces before and after occurrences. This tab is shown
    in the following screenshot:![Time for action – using and configuring the PHP
    code formatter](img/8246_10_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The sixth tab, **Comments**, provides settings for comment behavior. Here you're
    able format the comments within your source code. This tab is shown in the following
    screenshot:![Time for action – using and configuring the PHP code formatter](img/8246_10_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last tab, **Off/On Tags**, customizes the behavior of the off/on tags. The
    `@formatter:off` and `@formatter:on` tags can be used as PHPDoc functions. So,
    with these tags you're able to mark a section where the formatter shouldn't format
    your source code. If you want to use these tags, just enable the functionality
    and use the entered tags to enable and disable the formatter from your source
    code. This tab is shown in the following screenshot:![Time for action – using
    and configuring the PHP code formatter](img/8246_10_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you just have to confirm the changes by clicking on the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Importing and exporting formatter settings**'
  prefs: []
  type: TYPE_NORMAL
- en: If you have finished configuring the code formatter, you may want to save these
    settings in order to restore them sometime, or you might want to distribute these
    conventions within your developing team so that every developer formats his code
    in the same style. For this purpose, you can use the import and export function
    within the formatter configuration section.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have created your own formatter profile and adjusted the formatter to adhere
    to your requirements. You also had a look at the rich possibilities which are
    available to customize them, to ensure that you receive the style of source code
    that you require in order to make them easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can format each file that you have to work with, your own as well as
    other developers. But that's not all. As you may have gathered, you can apply
    this action to other programming languages. Aptana Studio currently allows you
    to format CSS, HTML, JavaScript, JSON, PHP, Ruby/ERB, and XML files.
  prefs: []
  type: TYPE_NORMAL
- en: That's easy and very useful, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – configuring your own PHP project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now your task is to select your own PHP-based project that is currently located
    somewhere on your disk. Search for it over the Project Explorer and promote it
    to a project. Go ahead and configure this new project for optimal development
    with PHP.
  prefs: []
  type: TYPE_NORMAL
- en: You should adjust the PHP version, include required libraries, and equip your
    source code with valid PHPDoc Comments.
  prefs: []
  type: TYPE_NORMAL
- en: Further more, you should create your own code formatter profile, which helps
    you to format your source code. Save it in your profile, do not overwrite the
    existing one. When you've created it, format a PHP file that has a different format
    and see the result.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Why are project natures so important to a PHP project?
  prefs: []
  type: TYPE_NORMAL
- en: The project nature adds additional features to the projects that have a specialization
    for them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The nature isn't important for projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The nature is a reminder of the kind of editor that should be used for each
    file that is located within the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. With what languages can the code formatter work?
  prefs: []
  type: TYPE_NORMAL
- en: The code formatter works only with PHP files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The code formatter works with all XML-based files, such as HTML and XML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The code formatter works currently with CSS, HTML, JavaScript, JSON, PHP, Ruby/ERB,
    and XML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. What do you do when you have a source code section that should not be formatted
    by the code formatter?
  prefs: []
  type: TYPE_NORMAL
- en: Cut that section before formatting, and paste it back after formatting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have to wrap the section within a PHP Comment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have to use both the `@formatter:on` and `@formatter:off` keywords.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q4\. What criteria must be met so that user libraries can be used by the Content
    Assist feature?
  prefs: []
  type: TYPE_NORMAL
- en: The classes, constants, and functions must be equipped with JavaDoc Comments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The classes, constants, and functions must be equipped with PHPDoc Comments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The classes, constants, and functions need to be named clearly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q5\. Why does the Content Assist feature provide all project-own classes, constants,
    and functions by default?
  prefs: []
  type: TYPE_NORMAL
- en: Within the project properties, the project in the PHP Buildpath section is included
    by default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The project doesn't know its project-own classes, constants, and functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The project only knows the project-own classes, constants, and functions that
    have no PHPDoc Comment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be able to create and manage your own
    PHP projects within Aptana Studio. In addition to this, you should also know how
    to use all the PHP-specific features to get the full power out of your PHP-natured
    project.
  prefs: []
  type: TYPE_NORMAL
- en: You have also seen how you can select your used PHP version and how you can
    extend your code with PHPDoc Comments so that it is readable for the Content Assist
    feature and you were able to create some PHP Documentation from it. You have also
    seen how to configure the code formatter and use it. In addition, you have seen,
    how you can include external libraries, such as ZendFramework, so that the Content
    Assist feature can provide you with information about the libraries.
  prefs: []
  type: TYPE_NORMAL
