["```js\nnpm start \n```", "```js\nimport { ServerResponse } from \"http\";\nconst setheaderName = \"Set-Cookie\";\nexport const setCookie = (resp: ServerResponse, name: string, \n        val: string) => {\n    let cookieVal: any[] = [`${name}=${val}; Max-Age=300; SameSite=Strict }`];   \n    if (resp.hasHeader(setheaderName)) {\n        cookieVal.push(resp.getHeader(setheaderName));\n    }\n    resp.setHeader(\"Set-Cookie\", cookieVal);   \n}\nexport const setJsonCookie = (resp: ServerResponse, name: string,\n        val: any) => {\n    setCookie(resp, name, JSON.stringify(val));\n} \n```", "```js\n...\nSet-Cookie: user=Alice; Max-Age=300; SameSite=Strict\n... \n```", "```js\n`Domain=value` \n```", "```js\n`Expires=date` \n```", "```js\n`HttpOnly` \n```", "```js\n`Max-Age=second` \n```", "```js\n`Path=path` \n```", "```js\n`SameSite=policy` \n```", "```js\n`Secure` \n```", "```js\n...\nSet-Cookie: user=Alice; **Max-Age=300; SameSite=Strict**\n... \n```", "```js\n...\nCookie: user=Alice; otherCookie=othervalue\n... \n```", "```js\n**import { IncomingMessage, ServerResponse } from \"http\";**\nconst setheaderName = \"Set-Cookie\";\nexport const setCookie = (resp: ServerResponse, name: string, \n        val: string) => {\n    let cookieVal: any[] = [`${name}=${val}; Max-Age=300; SameSite=Strict }`];   \n    if (resp.hasHeader(setheaderName)) {\n        cookieVal.push(resp.getHeader(setheaderName));\n    }\n    resp.setHeader(\"Set-Cookie\", cookieVal);   \n}\nexport const setJsonCookie = (resp: ServerResponse, name: string,\n        val: any) => {\n    setCookie(resp, name, JSON.stringify(val));\n}\n**export const getCookie = (req: IncomingMessage,**\n **key: string): string | undefined** **=> {**\n **let result: string | undefined = undefined;**\n **req.headersDistinct[\"cookie\"]?.forEach(header => {**\n **header.split****(\";\").forEach(cookie => {**\n **const { name, val }**\n **= /^(?<name>.*)=(?<val>.*)$/.exec(cookie)?.groups as any;**\n **if (name.****trim() === key) {**\n **result = val;**\n **}**\n **})**\n **});**\n **return result;**\n**}**\n**export const getJsonCookie = (req: IncomingMessage, key: string) : any => {**\n **const cookie = getCookie****(req, key);**\n **return cookie ? JSON.parse(cookie) : undefined;**\n**}** \n```", "```js\nimport express, { Express } from \"express\";\nimport repository  from \"./data\";\n**import { getJsonCookie, setJsonCookie } from \"./cookies\";**\nconst rowLimit = 10;\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}))\n}\nexport const registerFormRoutes = (app: Express) => {\n    app.get(\"/form\", async (req, resp) => {\n        resp.render(\"age\", {\n            history: await repository.getAllResults(rowLimit),\n           ** personalHistory: getJsonCookie(req, \"personalHistory\")**\n        });\n    });\n    app.post(\"/form\", async (req, resp) => {\n        const nextage = Number.parseInt(req.body.age)\n            + Number.parseInt(req.body.years);\n        await repository.saveResult({...req.body, nextage });\n        **let pHistory = [{**\n **name: req.body.name, age: req.body.age,**\n **years: req.body.****years, nextage},**\n **...(getJsonCookie(req, \"personalHistory\") || [])].splice(0, 5);**\n\n **setJsonCookie(resp, \"personalHistory\", pHistory);**\n\n **const context = {**\n **...req.body, nextage,**\n**history: await repository.getAllResults(rowLimit),**\n **personalHistory: pHistory**\n        };\n        resp.render(\"age\", context);  \n    });\n} \n```", "```js\n**{{#if personalHistory }}**\n **<h4>Your History</h4>**\n **<table class=\"table table-sm table-striped my-2\">**\n **{{#each personalHistory }}**\n **<tr>**\n **<td>{{ this.name }} </td>**\n **<td>{{ this.age }} </td>**\n **<td****>{{ this.years }} </td>**\n **<td>{{ this.nextage }} </td>**\n **</tr>**\n **{{/each }}**\n **</table>**\n**{{/if }}**\n<h4>Recent Queries</h4>\n<table class=\"table table-sm table-striped my-2\">\n    <thead>\n        <tr>\n            <th>Name</th><th>Age</th><th>Years</th><th>Result</th>\n        </tr>\n    </thead>\n    <tbody>\n        {{#unless history }}\n            <tr><td colspan=\"4\">No data available</td></tr>\n        {{/unless }}\n        {{#each history }}\n            <tr>\n                <td>{{ this.name }} </td>\n                <td>{{ this.age }} </td>\n                <td>{{ this.years }} </td>\n                <td>{{ this.nextage }} </td>\n            </tr>\n        {{/each }}\n    </tbody>\n</table> \n```", "```js\nimport { createHmac, timingSafeEqual } from \"crypto\";\nexport const signCookie = (value: string, secret: string) => {\n    return value + \".\" + createHmac(\"sha512\", secret)\n        .update(value).digest(\"base64url\");\n}\nexport const validateCookie = (value: string, secret: string) => {\n    const cookieValue = value.split(\".\")[0];\n    const compareBuf = Buffer.from(signCookie(cookieValue, secret));\n    const candidateBuf = Buffer.from(value);\n    if (compareBuf.length == candidateBuf.length &&\n        timingSafeEqual(compareBuf, candidateBuf)) {\n            return cookieValue;\n    }\n    return undefined;\n} \n```", "```js\n...\n**createHmac(\"****sha512\", secret)**.update(value).digest(\"base64url\");\n... \n```", "```js\n...\nmyCookieData.hn5jneGWS_oBL7ww5IHZm9KuzfUwWnnDz01vhNc5xNMwb-kQnxb357Tp\n... \n```", "```js\nimport { IncomingMessage, ServerResponse } from \"http\";\n**import { signCookie, validateCookie } from \"./cookies_signed\";**\nconst setheaderName = \"Set-Cookie\";\n**const cookieSecret = \"mysecret\";**\nexport const setCookie = (resp: ServerResponse, name: string, \n        val: string) => {\n    **const signedCookieVal = signCookie(val, cookieSecret);**\n **let** **cookieVal: any[] =**\n **[`${name}=${signedCookieVal}; Max-Age=300; SameSite=Strict`];**         \n    if (resp.hasHeader(setheaderName)) {\n        cookieVal.push(resp.getHeader(setheaderName));\n    }\n    resp.setHeader(\"Set-Cookie\", cookieVal);   \n}\nexport const setJsonCookie = (resp: ServerResponse, name: string,\n        val: any) => {\n    setCookie(resp, name, JSON.stringify(val));\n}\nexport const getCookie = (req: IncomingMessage,\n        key: string): string | undefined => {\n    let result: string | undefined = undefined;\n    req.headersDistinct[\"cookie\"]?.forEach(header => {\n        header.split(\";\").forEach(cookie => {\n            const { name, val }\n                = /^(?<name>.*)=(?<val>.*)$/.exec(cookie)?.groups as any;\n            if (name.trim() === key) {\n                **result = validateCookie(val, cookieSecret);**\n            }\n        })\n    });\n    return result;\n}\nexport const getJsonCookie = (req: IncomingMessage, key: string) : any => {\n    const cookie = getCookie(req, key);\n    return cookie ? JSON.parse(cookie) : undefined;\n} \n```", "```js\nnpm install cookie-parser@1.4.6\nnpm install --save-dev @types/cookie-parser@1.4.6 \n```", "```js\nimport express, { Express } from \"express\";\nimport repository  from \"./data\";\nimport { getJsonCookie, setJsonCookie } from \"./cookies\";\n**import cookieMiddleware from \"cookie-parser\"****;**\nconst rowLimit = 10;\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}));\n    **app.use(cookieMiddleware(\"mysecret\"));**\n}\nexport const registerFormRoutes = (app: Express) => {\n    // ...statements omitted for brevity...\n} \n```", "```js\n**//import { IncomingMessage, ServerResponse } from \"http\";**\n**//import { signCookie, validateCookie } from \"./cookies_signed\";**\n**import { CookieOptions****, Request, Response } from \"express\";**\n**// const setheaderName = \"Set-Cookie\";**\n**// const cookieSecret = \"mysecret\";**\n**export const setCookie = (resp: Response, name: string,  val: string,**\n **opts?: CookieOptions) => {**\n **resp.****cookie(name, val, {**\n **maxAge: 300 * 1000,**\n **sameSite: \"strict\",**\n **signed: true,**\n **...opts**\n **});**\n**}**\nexport const setJsonCookie = (resp: Response, name: string, val: any) => {;\n    **setCookie(resp, name, JSON.stringify(val));**\n}\nexport const getCookie = (req: Request, key: string): string | undefined => {\n    **return req.signedCookies[key];**\n}\nexport const getJsonCookie = (req: Request, key: string) : any => {\n    **const cookie = getCookie(req, key);**\n **return cookie ? JSON.parse(cookie) : undefined;**\n} \n```", "```js\nexport type Session = {\n    id: string,\n    data: { [key: string]: any }\n}\nexport interface SessionRepository {\n    createSession() : Promise<Session>;\n    getSession(id: string): Promise<Session | undefined>;\n    saveSession(session: Session, expires: Date): Promise<void>;\n    touchSession(session: Session, expires: Date) : Promise<void>\n} \n```", "```js\nimport { Session, SessionRepository } from \"./repository\";\nimport { randomUUID } from \"crypto\";\ntype SessionWrapper = {\n    session: Session,\n    expires: Date\n}\nexport class MemoryRepository implements SessionRepository {\n    store = new Map<string, SessionWrapper>();\n\n    async createSession(): Promise<Session> {\n        return { id: randomUUID(), data: {} };\n    }\n    async getSession(id: string): Promise<Session | undefined> {\n        const wrapper = this.store.get(id);\n        if (wrapper && wrapper.expires > new Date(Date.now())) {\n            return structuredClone(wrapper.session)\n        }\n    }\n    async saveSession(session: Session, expires: Date): Promise<void> {\n        this.store.set(session.id, { session, expires });\n    }\n    async touchSession(session: Session, expires: Date): Promise<void> {\n        const wrapper = this.store.get(session.id);\n        if (wrapper) {\n            wrapper.expires = expires;\n        }\n    }\n} \n```", "```js\n...\nif (wrapper && wrapper.expires > new Date(Date.now())) {\n    return **structuredClone**(wrapper.session)\n}\n... \n```", "```js\nimport { Request, Response, NextFunction } from \"express\";\nimport { SessionRepository, Session } from \"./repository\";\nimport { MemoryRepository } from \"./memory_repository\";\nimport { setCookie, getCookie } from \"../cookies\";\nconst session_cookie_name = \"custom_session\";\nconst expiry_seconds = 300;\nconst getExpiryDate = () => new Date(Date.now() + (expiry_seconds * 1_000));\nexport const customSessionMiddleware = () => {\n    const repo: SessionRepository = new MemoryRepository();\n    return async (req: Request, resp: Response, next: NextFunction) => {\n\n        const id = getCookie(req, session_cookie_name);\n\n        const session = (id ? await repo.getSession(id) : undefined)\n                            ?? await repo.createSession();\n\n        (req as any).session = session;\n        setCookie(resp, session_cookie_name, session.id, {\n            maxAge: expiry_seconds * 1000\n        })\n        resp.once(\"finish\", async () => {\n            if ( Object.keys(session.data).length > 0) {\n                if (req.method == \"POST\") {\n                    await repo.saveSession(session, getExpiryDate());\n                } else {\n                    await repo.touchSession(session, getExpiryDate());\n                }\n            }\n        })\n\n        next();\n    }\n} \n```", "```js\nimport { Request } from \"express\";\nimport { Session } from \"./repository\";\nexport const getSession = (req: Request): Session => (req as any).session;\ndeclare global {\n    module Express {\n        interface Request {\n            session: Session\n        }\n    }\n} \n```", "```js\nimport express, { Express } from \"express\";\nimport repository  from \"./data\";\nimport { getJsonCookie, setJsonCookie } from \"./cookies\";\nimport cookieMiddleware from \"cookie-parser\";\n**import { customSessionMiddleware } from \"./sessions/middleware\";**\n**import { getSession } from \"./sessions/session_helpers\";**\nconst rowLimit = 10;\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}))\n    app.use(cookieMiddleware(\"mysecret\"));\n    **app.use(customSessionMiddleware());**\n}\nexport const registerFormRoutes = (app: Express) => {\n    app.get(\"/form\", async (req, resp) => {\n        resp.render(\"age\", {\n            history: await repository.getAllResults(rowLimit),\n            **personalHistory: getSession(req).data.****personalHistory**\n        });\n    });\n    app.post(\"/form\", async (req, resp) => {\n        const nextage = Number.parseInt(req.body.age)\n            + Number.parseInt(req.body.years);\n        await repository.saveResult({...req.body, nextage });\n        **req.session.data.personalHistory = [{**\n **name: req.****body.name, age: req.body.age,**\n **years: req.body.years, nextage},**\n **...(req.session.data.****personalHistory || [])].splice(0, 5);**\n\n        const context = {\n            ...req.body, nextage,\n            history: await repository.getAllResults(rowLimit),\n           ** personalHistory: req.****session.data.personalHistory**\n        };\n        resp.render(\"age\", context);  \n    });\n} \n```", "```js\nimport { DataTypes, InferAttributes, InferCreationAttributes, Model,\n    Sequelize } from \"sequelize\";\nexport class SessionModel extends Model<InferAttributes<SessionModel>,\n        InferCreationAttributes<SessionModel>> {\n    declare id: string\n    declare data: any;\n    declare expires: Date\n}\nexport const initializeModel = (sequelize: Sequelize) => {\n    SessionModel.init({\n        id: { type: DataTypes.STRING, primaryKey: true },\n        data: { type: DataTypes.JSON },\n        expires: { type: DataTypes.DATE }\n    }, { sequelize });\n} \n```", "```js\nimport { Op, Sequelize } from \"sequelize\";\nimport { Session, SessionRepository } from \"./repository\";\nimport { SessionModel, initializeModel } from \"./orm_models\";\nimport { randomUUID } from \"crypto\";\nexport class OrmRepository implements SessionRepository {\n    sequelize: Sequelize;\n    constructor() {\n        this.sequelize = new Sequelize({\n            dialect: \"sqlite\",\n            storage: \"orm_sessions.db\",\n            logging: console.log,\n            logQueryParameters: true\n        });\n        this.initModelAndDatabase();\n    }\n\n    async initModelAndDatabase() : Promise<void> {\n        initializeModel(this.sequelize);\n        await this.sequelize.drop();       \n        await this.sequelize.sync();\n    }\n    async createSession(): Promise<Session> {\n        return { id: randomUUID(), data: {} };\n    }\n    async getSession(id: string): Promise<Session | undefined> {\n        const dbsession = await SessionModel.findOne({\n            where: { id, expires: { [Op.gt] : new Date(Date.now()) }}\n        });\n        if (dbsession) {\n            return { id, data: dbsession.data };\n        }\n    }\n    async saveSession(session: Session, expires: Date): Promise<void> {\n        await SessionModel.upsert({\n            id: session.id,\n            data: session.data,\n            expires\n        });\n    }\n    async touchSession(session: Session, expires: Date): Promise<void> {\n        await SessionModel.update({ expires }, { where: { id: session.id } });\n    }\n} \n```", "```js\n...\nconst dbsession = await SessionModel.findOne({\n    **where: { id, expires: { [Op.gt] : new** **Date(Date.now()) }}**\n});\n... \n```", "```js\nimport { Request, Response, NextFunction } from \"express\";\nimport { SessionRepository, Session } from \"./repository\";\n**//import { MemoryRepository } from \"./memory_repository\";**\nimport { setCookie, getCookie } from \"../cookies\";\ni**mport { OrmRepository } from \"****./orm_repository\";**\nconst session_cookie_name = \"custom_session\";\nconst expiry_seconds = 300;\nconst getExpiryDate = () => new Date(Date.now() + (expiry_seconds * 1_000));\nexport const customSessionMiddleware = () => {\n    **//const repo: SessionRepository = new MemoryRepository();**\n **const repo: SessionRepository =** **new OrmRepository();**\n    return async (req: Request, resp: Response, next: NextFunction) => {\n\n        // ...statements omitted for brevity...\n    }\n} \n```", "```js\n...\nExecuting (default): CREATE TABLE IF NOT EXISTS `SessionModels` (`id` VARCHAR(255)\n    PRIMARY KEY, `data` JSON, `expires` DATETIME, `createdAt` DATETIME NOT NULL,\n    `updatedAt` DATETIME NOT NULL);\n... \n```", "```js\nnpm install express-session@1.17.3\nnpm install connect-session-sequelize@7.1.7\nnpm install --save-dev @types/express-session@1.17.10 \n```", "```js\nimport { Request } from \"express\";\n**//import { Session } from \"./repository\";**\n**import session, { SessionData } from \"express-session\";**\n**import sessionStore from \"****connect-session-sequelize\";**\n**import { Sequelize } from \"sequelize\";**\n**import { Result } from \"../data/repository\";**\n**export** **const getSession = (req: Request): SessionData => (req as any).session;**\n**// declare global {**\n**//     module Express {**\n**//         interface Request {**\n**//             session: Session**\n**//         }**\n**//     }**\n**// }**\n**declare module \"express-session\" {**\n **interface** **SessionData {**\n **personalHistory: Result[];**\n **}**\n**}**\n**export const sessionMiddleware = () => {**\n **const sequelize = new Sequelize({**\n **dialect: \"****sqlite\",**\n **storage: \"pkg_sessions.db\"**\n **});**\n **const store = new (sessionStore(session.Store))({**\n **db: sequelize**\n **});**\n **store.sync();**\n **return** **session({**\n **secret: \"mysecret\",**\n **store: store,**\n **cookie: { maxAge: 300 * 1000, sameSite: \"strict\" },**\n**resave: false, saveUninitialized: false**\n **})**\n**}** \n```", "```js\nimport express, { Express } from \"express\";\nimport repository  from \"./data\";\nimport { getJsonCookie, setJsonCookie } from \"./cookies\";\nimport cookieMiddleware from \"cookie-parser\";\nimport { customSessionMiddleware } from \"./sessions/middleware\";\n**import { getSession, sessionMiddleware } from \"./sessions/session_helpers\";**\nconst rowLimit = 10;\nexport const registerFormMiddleware = (app: Express) => {\n    app.use(express.urlencoded({extended: true}))\n    app.use(cookieMiddleware(\"mysecret\"));\n    **//app.use(customSessionMiddleware());**\n **app.use(sessionMiddleware());**\n}\nexport const registerFormRoutes = (app: Express) => {\n    app.get(\"/form\", async (req, resp) => {\n        resp.render(\"age\", {\n            history: await repository.getAllResults(rowLimit),\n            **personalHistory: getSession(req).personalHistory**\n        });\n    });\n    app.post(\"/form\", async (req, resp) => {\n        const nextage = Number.parseInt(req.body.age)\n            + Number.parseInt(req.body.years);\n        await repository.saveResult({...req.body, nextage });\n        **req.session.personalHistory = [{**\n            id: 0, name: req.body.name, age: req.body.age,\n            years: req.body.years, nextage},\n            ..**.(req.session.personalHistory || [])].splice(0, 5);**\n\n        const context = {\n            ...req.body, nextage,\n            history: await repository.getAllResults(rowLimit),\n            **personalHistory: req.session.personalHistory**\n        };\n        resp.render(\"age\", context);  \n    });\n} \n```"]