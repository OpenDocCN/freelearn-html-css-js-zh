- en: Chapter 6. Transition with Style
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。以风格进行过渡
- en: 'The preceding code produces the following visual output where a box appears
    with In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码产生了以下视觉输出，其中出现了一个框，在本章中，我们将涵盖：
- en: Animating a single element
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画单个元素
- en: Animating multiple elements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动画多个元素
- en: Using ease
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用缓动
- en: Using tweening
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用缓动
- en: Using transition chaining
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用过渡链
- en: Using transition filter
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用过渡过滤器
- en: Listening to transitional events
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听过渡事件
- en: Working with timer
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与计时器一起工作
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: '*"A picture is worth a thousand words."*'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*"一张图片胜过千言万语。"*'
- en: 'This age-old wisdom is arguably one of the most important cornerstones of data
    visualization. Animation, on the other hand, is generated using a series of still
    images in quick succession. Human eye-and-brain complex, through positive afterimage,
    phi phenomenon, and beta movement, is able to create an illusion of continuous
    imagery. As Rick Parent put it perfectly in his brilliant work *Computer Animation
    Algorithms and Techniques*:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '这句古老的智慧可以说是数据可视化最重要的基石之一。另一方面，动画是通过一系列快速连续的静态图像生成的。人类的眼睛和大脑通过正后像、Phi现象和Beta运动，能够创造出连续图像的错觉。正如Rick
    Parent在他的杰出作品《计算机动画算法和技术》中完美地表达的那样： '
- en: '*Images can quickly convey a large amount of information because the human
    visual system is a sophisticated information processor. It follows, then, that
    moving images have the potential to convey even more information in a short time.
    Indeed, the human visual system has evolved to provide for survival in an ever-changing
    world; it is designed to notice and interpret movement.*'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*图像可以迅速传达大量信息，因为人类的视觉系统是一个复杂的信息处理器。因此，移动图像有可能在短时间内传达更多信息。事实上，人类的视觉系统已经进化，以适应不断变化的世界；它被设计用来注意和解释运动。*'
- en: '*-Parent R. 2012*'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*-Parent R. 2012*'
- en: This is in fact the main goal of animation used in data visualization projects.
    In this chapter, we will focus on the mechanics of *D3 transition*, covering topics
    from the basics to more advanced ones, such as custom interpolation and timer-based
    transition. Mastering transition is not only going to add many bells and whistles
    to your visualization but will also provide a powerful toolset to your visualization
    and otherwise hard-to-visualize attributes, such as trending and differences.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是在数据可视化项目中使用的动画的主要目标。在本章中，我们将重点关注*D3过渡*的机制，从基础知识到更高级的主题，例如自定义插值和基于计时器的过渡。掌握过渡不仅将为你的可视化添加许多装饰，还将为你提供一套强大的工具集，用于可视化那些难以可视化的属性，如趋势和差异。
- en: What is Transition?
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是过渡？
- en: D3 transition offers the ability to create computer animation with HTML and
    SVG elements on a web page. D3 transition implements an animation called *Interpolation-based
    Animation*. Computers are especially well equipped for value interpolation, and
    therefore, most of the computer animations are interpolation based. As its name
    suggests, the foundation for such animation capability is value interpolation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: D3过渡提供了在网页上使用HTML和SVG元素创建计算机动画的能力。D3过渡实现了一种称为*基于插值的动画*的动画。计算机特别擅长值插值，因此，大多数计算机动画都是基于插值的。正如其名称所暗示的，这种动画能力的基础是值插值。
- en: If you recall, we have already covered D3 interpolators and interpolation functions
    in detail in [Chapter 4](ch04.html "Chapter 4. Tipping the Scales"), *Tipping
    the Scales*. Transition is built on top of interpolation and scales to provide
    the ability to change values over time, which powers animation. Each transition
    can be defined using a start and end value (also called *key frames* in animation),
    while different algorithms and interpolators will fill in the intermediate values
    frame by frame (also called "in-betweening" or simply "tweening"). At the first
    glance, if you are not already familiar with animation algorithms and techniques,
    this seems to be a somewhat less controlled way of creating an animation. However,
    it is quite the opposite in reality; interpolation-based transitions can provide
    direct and specific expectations about the motion produced down to each and every
    frame, thus offering tremendous control to the animator with simplicity. In fact,
    D3 transition API is so well designed that, in most cases, only a couple of lines
    of code are enough to implement the animations you need in a data visualization
    project. Now, let's get our hands dirty and try out some transitions to further
    improve our understanding on this topic.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得，我们在第 4 章 [Tipping the Scales](ch04.html "第 4 章. 权衡轻重") 中已经详细介绍了 D3 插值器和插值函数。过渡建立在插值和缩放之上，提供在时间上改变值的能力，这是动画的动力。每个过渡都可以使用起始值和结束值（在动画中也称为
    *关键帧*）来定义，而不同的算法和插值器将逐帧填充中间值（也称为 "中间插值" 或简称为 "tweening"）。乍一看，如果你不熟悉动画算法和技术，这似乎是一种控制较少的创建动画的方式。然而，在现实中恰恰相反；基于插值的过渡可以提供对运动产生的每一帧的直接和具体期望，从而以简单的方式为动画师提供极大的控制。事实上，D3
    过渡 API 设计得非常好，在大多数情况下，只需要几行代码就足以在数据可视化项目中实现所需的动画。现在，让我们动手尝试一些过渡，以进一步加深我们对这个主题的理解。
- en: Animating a single element
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画单个元素
- en: In this recipe, we will first take a look at the simplest case of transition-interpolating
    attributes on a single element over time to produce a simple animation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将首先查看过渡插值单个元素属性的最简单情况，以产生一个简单的动画。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/single-element-transition.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/single-element-transition.html)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/single-element-transition.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/single-element-transition.html)'
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The code necessary to perform this simple transition is extremely short; good
    news for any animator:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这个简单过渡所需的代码非常简短；这对于任何动画师来说都是好消息：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code produces a moving, shrinking, and color-changing square,
    as shown in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码产生了一个移动、缩小和颜色变化的正方形，如下面的截图所示：
- en: '![How to do it...](img/image_06_001.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_06_001.jpg)'
- en: Single element transition
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 单个元素过渡
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'You might be surprised to see that the extra code we added to enable this animation
    is only on lines `C` and `D`, as shown in the following code snippet:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会惊讶地发现，我们添加以启用此动画的额外代码仅在行 `C` 和 `D` 上，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: First, on line `C`, we call the `d3.selection.transition` function to define
    a transition. Then, the `transition` function returns a transition-bound selection
    that still represents the same element(s) in the current selection. However, now,
    it is equipped with additional functions and allows further customization of the
    transitional behavior.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在行 `C` 上，我们调用 `d3.selection.transition` 函数来定义一个过渡。然后，`transition` 函数返回一个过渡绑定的选择，它仍然代表当前选择中的相同元素（s）。然而，现在它配备了额外的功能，并允许进一步自定义过渡行为。
- en: 'On line `D`, we set the duration of the transition to `5000` milliseconds using
    the `duration()` function. This function also returns the current transition-bound
    selection, thus allowing function chaining. As we mentioned at the start of this
    chapter, interpolation-based animations usually only require you to specify the
    start and end values while it lets interpolators and algorithms fill the intermediate
    values over time. D3 transition treats all values that are set before calling
    the `transition` function as start values, with values set after the `transition`
    function call as end values. Hence, in our example, we have the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在行 `D`，我们使用 `duration()` 函数将过渡的持续时间设置为 `5000` 毫秒。此函数还返回当前过渡绑定的选择，从而允许函数链式调用。正如我们在本章开头提到的，基于插值的动画通常只需要您指定起始和结束值，而让插值器和算法在一段时间内填充中间值。D3
    过渡将调用 `transition` 函数之前设置的任何值都视为起始值，将调用 `transition` 函数之后设置的值视为结束值。因此，在我们的例子中，我们有以下内容：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `background-color` style defined on line `B` is treated as the start value
    for transition. All styles set in the following lines are treated as end values:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在行 `B` 上定义的 `background-color` 样式被视为过渡的起始值。以下行中设置的任何样式都被视为结束值：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'At this point, you might be asking, *why these start and end values are not
    symmetric?* D3 transition does not require every interpolated value to have explicit
    start and end values. If the start value is missing, then it will try to use the
    computed style, and if the end value is missing, then the value will be treated
    as a constant. Once the transition starts, D3 will automatically pick the most
    suitable built-in interpolator for each value. In our example, an RGB color interpolator
    will be used in line `E`, while a string interpolator-which internally uses number
    interpolators to interpolate embedded numbers-will be used for the rest of the
    style values. Here, we will list the interpolated style values with their start
    and end values:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你可能会有疑问，*为什么这些起始值和结束值不对称？* D3 过渡不需要每个插值值都有明确的起始和结束值。如果缺少起始值，它将尝试使用计算出的样式，如果缺少结束值，则该值将被视为常数。一旦过渡开始，D3
    将自动为每个值选择最合适的内置插值器。在我们的例子中，将在行 `E` 中使用 RGB 颜色插值器，而对于其他样式值，将使用字符串插值器——它内部使用数字插值器来插值嵌入的数字。在这里，我们将列出带有起始和结束值的插值样式值：
- en: '`background-color`: The start value-`#e9967a`-is greater than the end value-`#add8e6`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`background-color`：起始值 `#e9967a` 大于结束值 `#add8e6`'
- en: '`margin-left`: The start value is a computed style and greater than the end
    value `600px`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`margin-left`：起始值是计算出的样式，大于结束值 `600px`'
- en: '`width`: The start value is a computed style and greater than the end value
    `100px`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width`：起始值是计算出的样式，大于结束值 `100px`'
- en: '`height`: The start value is a computed style and greater than the end value
    `100px`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`height`：起始值是计算出的样式，大于结束值 `100px`'
- en: Animating multiple elements
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多元素动画
- en: More elaborate data visualization requires animating multiple elements instead
    of a single element, as demonstrated in the previous recipe. More importantly,
    these transitions often need to be driven by data and coordinated with other elements
    within the same visualization. In this recipe, we will see how a data-driven multi-element
    transition can be created to generate a moving bar chart. New bars are added over
    time, while the chart shifts from right to left with a smooth transition.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 更精细的数据可视化需要动画多个元素而不是单个元素，如前一个示例所示。更重要的是，这些过渡通常需要由数据驱动，并与同一可视化中的其他元素协调。在这个菜谱中，我们将看到如何创建一个数据驱动的多元素过渡来生成移动条形图。新条形图随着时间的推移被添加，图表从右向左平滑过渡。
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网页浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/multi-element-transition.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/multi-element-transition.html)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/multi-element-transition.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/multi-element-transition.html)'
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'As expected, this recipe is slightly larger than the previous one, however,
    not by that much. Let''s take a look at the following code:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，这个菜谱比上一个稍微大一些，但并不是很大。让我们看看以下代码：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding code generates a sliding bar chart in your web browser, as shown
    in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将在您的网页浏览器中生成一个滑动条形图，如下面的截图所示：
- en: '![How to do it...](img/image_06_002.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现...](img/image_06_002.jpg)'
- en: Sliding bar chart
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 滑动条形图
- en: How it works...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: On the surface, this example seems to be quite complex with complicated effects.
    Every second a new bar needs to be created and animated while the rest of the
    bars need to slide over precisely. The beauty of D3 set-oriented functional API
    is that it works exactly the same way no matter how many elements you manipulate;
    therefore, once you understand the mechanics, you will realize this recipe is
    not so much different than the previous one.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 表面上，这个例子似乎相当复杂，效果复杂。每秒钟都需要创建一个新的条形并动画化，而其余的条形需要精确滑动。D3 集合导向功能API的美丽之处在于，无论你操作多少元素，它的工作方式都是完全相同的；因此，一旦你理解了机制，你就会意识到这个配方与之前的配方并没有太大的不同。
- en: 'As the first step, we created a data-bound selection for a number of vertical
    bars (on line `A`), which can then be used in a classic enter-update-exit D3 pattern:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一步，我们在第 `A` 行创建了一系列垂直条形的数据绑定选择，然后可以在经典的 enter-update-exit D3 模式中使用：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'One thing we have not touched so far is the second parameter in the `d3.selection.data`
    function. This function is called an *object-identity function*. The purpose of
    using this function is to provide object constancy. What it means in simple terms
    is that we want the binding between data and visual element to be stable. In order
    to achieve object constancy, each data needs to have a unique identifier. Once
    the ID is provided, D3 will ensure that a `div` element is bound to `{id: 3, value:
    45}`; the next time the update selection is computed, the same `div` element will
    be used for the data with the same index `id`, although this time, the value may
    be changed, for example, to `{id: 3, value: 12}`. Object constancy is crucial
    in this recipe; without object constancy, the sliding effect will not work.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '我们之前尚未触及的是 `d3.selection.data` 函数中的第二个参数。这个函数被称为 *对象身份函数*。使用这个函数的目的是提供对象恒定性。简单来说，这意味着我们希望数据与视觉元素之间的绑定是稳定的。为了实现对象恒定性，每个数据都需要有一个唯一的标识符。一旦提供了ID，D3将确保一个
    `div` 元素绑定到 `{id: 3, value: 45}`；在下次更新选择时，将使用相同的 `div` 元素为具有相同索引 `id` 的数据，尽管这次值可能已更改，例如，变为
    `{id: 3, value: 12}`。对象恒定性在这个过程中至关重要；没有对象恒定性，滑动效果将无法实现。'
- en: Note
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you are interested to know more about object constancy, please check out
    this excellent writing by Mike Bostock, the creator of D3, at the following link:
    [https://bost.ocks.org/mike/constancy/](https://bost.ocks.org/mike/constancy/)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于对象恒定性的信息，请查看D3的创造者Mike Bostock的这篇优秀的文章：[https://bost.ocks.org/mike/constancy/](https://bost.ocks.org/mike/constancy/)
- en: 'The second step is to create these vertical bars with the `d3.selection.enter`
    function and compute the `left` position for each bar based on the index number
    (refer to line `B`):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是使用 `d3.selection.enter` 函数创建这些垂直条形，并根据索引号计算每个条形的 `left` 位置（参考第 `B` 行）：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Another point worth mentioning here is that in the `enter` section, we have
    not called the transition yet, which means any value we specify here will be used
    as the start value in a transition. If you notice on line `C`, bar `height` is
    set to `0px`. This enables the animation of bars to increase from zero height
    to the target `height`. At the same time, the same logic is applied to the `left`
    position of the bar (refer to line `B`) and was set to `barLeft(i+1)`, thus enabling
    the sliding transition we desired:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在 `enter` 部分中，我们尚未调用过渡，这意味着我们在这里指定的任何值都将用作过渡的起始值。如果你注意到第 `C` 行，条形 `高度`
    被设置为 `0px`。这使条形从零高度增加到目标 `高度` 的动画成为可能。同时，相同的逻辑也应用于条形的 `left` 位置（参考第 `B` 行），并将其设置为
    `barLeft(i+1)`，从而实现我们想要的滑动过渡：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After completing the `enter` section, we can now take care of the `update`
    section, where the transition is defined. First of all, we want to introduce transition
    for all updates, and therefore, we invoke the `transition` function before any
    style change is applied (refer to line `D`). Once the transition-bound selection
    is created, we applied the following style transitions:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 完成进入部分后，我们现在可以处理 `update` 部分，其中定义了过渡。首先，我们希望为所有更新引入过渡，因此，在应用任何样式更改之前，我们调用 `transition`
    函数（参考第 `D` 行）。一旦创建了过渡绑定的选择，我们应用了以下样式过渡：
- en: '`top`: `chartHeight + "px" >chartHeight - barHeight(d)+"px"`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`top`: `chartHeight + "px" >chartHeight - barHeight(d)+"px"`'
- en: '`left`: `barLeft(i+1) + "px" >barLeft(i) + "px"`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`left`: `barLeft(i+1) + "px" >barLeft(i) + "px"`'
- en: '`height`: `"0px" >barHeight(d) + "px"`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`height`: `"0px" >barHeight(d) + "px"`'
- en: 'The aforementioned three style transitions are all you need to do to handle
    new bars and every existing bars and their sliding effect. Finally, the last case
    we will need to handle here is the `exit` case, when a bar is no longer needed.
    So, we want to keep the number of bars constant on the page. This is handled in
    the `exit` section:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上述三种样式转换就是处理新条形和每个现有条形及其滑动效果所需的所有操作。最后，我们在这里需要处理的最后一个情况是`exit`情况，当一个条形不再需要时。因此，我们希望保持页面上条形数量的恒定。这在`exit`部分处理：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So far in this book, prior to this chapter, we have always called the `remove()`
    function immediately after the `d3.selection.exit` function. This immediately
    removes the elements that are no longer needed. In fact, the `exit()` function
    also returns a selection, and therefore, can be animated before calling the `remove()`
    function. This is exactly what we did here: we started a transition on line `E`
    using the `exit` selection, and then, we animated the left value with the following
    transition change:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书的这一章之前，我们总是在调用`d3.selection.exit`函数后立即调用`remove()`函数。这立即移除了不再需要的元素。实际上，`exit()`函数也返回一个选择集，因此可以在调用`remove()`函数之前进行动画处理。这正是我们在这里所做的事情：我们使用`exit`选择集在行`E`上启动了一个转换，然后，我们使用以下转换更改来动画化左值：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Since we always remove the left-most bar, this transition moves the bar left
    and out of the SVG canvas, and then removes it.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们总是移除最左边的条形，这个转换将条形向左移动并移出SVG画布，然后将其移除。
- en: Note
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `exit` transition is not necessarily limited to simple transitions, such
    as the one we have shown in this recipe. In some visualization, it could be as
    elaborate as the `update` transition.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`exit`转换不一定局限于简单的转换，如我们在本食谱中展示的转换。在某些可视化中，它可能像`update`转换一样复杂。'
- en: Once the `render` function is in place with the defined transition, all that
    is left is to simply update the data and rerender our bar chart every second using
    the `setInterval` function. Now this completes our example.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`render`函数就位并定义了转换，剩下的只是简单地更新数据，并使用`setInterval`函数每秒重新渲染我们的条形图。现在，我们的示例就完成了。
- en: Using ease
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用缓动
- en: Transition can be thought of as a function of time. It is a function that maps
    time progression into numeric value progression, which then results in object
    motion (if the numeric value is used for positioning) or morphing (if the value
    is used to describe other visual attributes). Time always travels at a constant
    pace; in other words, time progression is uniform (unless you are doing visualization
    near a black hole, of course); however, the resulting value progression does not
    need to be uniform. *Easing* is a standard technique to provide flexibility and
    control to this kind of mapping. When a transition generates a uniform value progression,
    it is called *linear easing*. D3 provides support for different types of easing
    capabilities, and in this recipe, we will explore different built-in D3 easing
    functions, as well as how to implement custom easing functions with D3 transition.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 转换可以被视为时间的函数。它是一个将时间进程映射到数值进程的函数，然后导致对象运动（如果数值用于定位）或变形（如果数值用于描述其他视觉属性）。时间总是以恒定的速度前进；换句话说，时间进程是均匀的（当然，除非你在黑洞附近进行可视化）；然而，结果数值进程不需要均匀。*缓动*是提供这种映射灵活性和控制的标准技术。当一个转换生成均匀的数值进程时，它被称为*线性缓动*。D3提供了对不同类型缓动功能的支持，在本食谱中，我们将探索不同的内置D3缓动函数，以及如何使用D3转换实现自定义缓动函数。
- en: Getting Ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/easing.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/easing.html)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/easing.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/easing.html)'
- en: How to do it...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In the following code example, we will demonstrate how transition easing can
    be customized on an element-by-element basis:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码示例中，我们将演示如何按元素逐个自定义转换缓动：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding code produces a set of moving boxes with different easing effects.
    The following screenshot is captured at the time the easing effect takes place:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成了一组具有不同缓动效果的移动框。以下截图是在缓动效果发生时捕获的：
- en: '![How to do it...](img/image_06_003.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_06_003.jpg)'
- en: Different easing effects
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的缓动效果
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this recipe, we have shown a number of different built-in D3 ease functions
    and their effects on transition. Let''s take a look at how it is done; first,
    we created an array to store different ease modes we want to demonstrate:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'While all the built-in ease functions are defined simply using their name,
    the last element of this array is a custom easing function (*quadric easing*).
    Then, afterward, a set of `div` elements created using this data array and a transition
    with different easing functions were created for each of the `div` element, respectively,
    moving them from `("left", "500px")` to `("left", "10px")`, as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: At this point, you might be asking, Why did we not just specify easing using
    a function as we normally would have done for any other D3 attributes?
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The reason is that it does not work on the `ease()` function. What we showed
    on line `D` is a workaround of this limitation; though in real-world projects,
    it is fairly rare that you will need to customize easing behavior on a per-element
    basis.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another way to get around this limitation is using custom tweening, which we
    will cover in the next recipe.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen on line `D`, specifying different ease function for D3 transition is
    very straightforward; all you need to do is call the `ease()` function on a transition-bound
    selection. D3 also provides ease mode modifiers that you can combine with any
    ease function to achieve additional effects, for example, sin-out or quad-out-in.
    The following are the available ease mode modifiers:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '**In**: default'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Out**: reversed'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**InOut**: reflected'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OutIn**: reversed and reflected'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The default ease effect used by D3 is `easeCubic()`. For the list of supported
    D3 ease functions, please refer to the following link: [https://github.com/d3/d3-ease](https://github.com/d3/d3-ease)
    For anyone who wants to explore different kind of built-in ease modes visually,
    you can check out this visual ease explorer built by D3''s creator: [http://bl.ocks.org/mbostock/248bac3b8e354a9103c4](http://bl.ocks.org/mbostock/248bac3b8e354a9103c4)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: When a custom ease function is used, the function is expected to take the current
    parametric time value as its parameter in the range of [0, 1] as shown in the
    following function.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In our example, we implemented a simple quadric easing function, which is actually
    available as a built-in D3 ease function and is named quad.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information on easing and Penner''s equations (most of the modern
    JavaScript framework implementations including D3 and jQuery), check out the following
    link: [http://www.robertpenner.com/easing/](http://www.robertpenner.com/easing/)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Using tweening
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tween comes from the word *inbetween*, which is a common practice performed
    in the traditional animation where after key frames were created by the master
    animator, less experienced animators were used to generate frames in between the
    key frames. This phrase is borrowed in modern computer-generated animation and
    refers to the technique or algorithm that controls how the *inbetween* frames
    are generated. In this recipe, we will examine how the D3 transition supports
    tweening.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 缓动一词来自“inbetween”，这是在传统动画中的一种常见做法，在关键帧由主动画师创建后，经验较少的动画师用于在关键帧之间生成帧。这个短语被借用到现代计算机生成的动画中，指的是控制如何生成*inbetween*帧的技术或算法。在这个菜谱中，我们将检查D3过渡如何支持缓动。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/tweening.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/tweening.html)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/tweening.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/tweening.html)'
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In the following code example, we will create a custom tweening function to
    animate a button label through nine discrete integral numbers:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码示例中，我们将创建一个自定义缓动函数来通过九个离散整数来动画化按钮标签：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding code generates two buttons morphing at a very different rate,
    and the following screenshot was taken while this process was going on:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成两个以非常不同的速率变形的按钮，以下截图是在此过程进行时拍摄的：
- en: '![How to do it...](img/image_06_004.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_06_004.jpg)'
- en: Tweening
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 缓动
- en: How it works...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this recipe, the first button was created using simple transition with linear
    easing:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，第一个按钮是通过简单的过渡和线性缓动创建的：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The transition changes the button''s width from `150px` to `400px`, while changing
    its value from `0` to `9`. As expected, this transition simply relies on continuous
    linear interpolation of these values using the D3 string interpolator. In comparison,
    the second button has the effect of changing these values in chunks, moving from
    1 to 2, then to 3, and so on up to 9\. This is achieved using D3 tweening support
    with the `attrTween` and `styleTween` functions. Let''s first take a look at how
    the button value tweening works:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡将按钮的宽度从`150px`变为`400px`，同时将其值从`0`变为`9`。正如预期的那样，这个过渡简单地依赖于使用D3字符串插值器对这些值的连续线性插值。相比之下，第二个按钮的效果是分块改变这些值，从1变为2，然后到3，依此类推，直到9。这是通过使用D3缓动支持中的`attrTween`和`styleTween`函数实现的。让我们首先看看按钮值缓动是如何工作的：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the preceding code snippet, we can see that instead of setting the end value
    for the value attribute as we did in the case of the first button, we used the
    `attrTween` function and offered a pair of tweening functions `widthTween` and
    `valueTween`, which are implemented as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们可以看到，与我们在第一个按钮的情况下设置值属性的结束值不同，我们使用了`attrTween`函数并提供了一对缓动函数`widthTween`和`valueTween`，它们如下实现：
- en: '[PRE18]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In D3, a tween function is expected to be a factory function, which constructs
    the actual function that will be used to perform the tweening. In this case, we
    defined a `quantize` scale that maps the domain `[0, 1]` to a discrete integral
    range of `[1, 9]`, on line `C`. The actual tweening function defined on line `D`
    simply interpolates the parametric time value using the quantize scale, which
    generates the jumping integer effect.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在D3中，一个缓动函数预期是一个工厂函数，它构建将被用于执行缓动的实际函数。在这种情况下，我们在行`C`上定义了一个将域`[0, 1]`映射到离散整数范围`[1,
    9]`的`quantize`刻度。在行`D`上定义的实际缓动函数简单地使用量化刻度插值参数时间值，从而产生跳跃整数效果。
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Quantize scales are a variant of linear scale with a discrete range rather
    than a continuous one. For more information on quantize scales, please visit the
    following link: [https://github.com/d3/d3/blob/master/API.md#quantize-scales](https://github.com/d3/d3/blob/master/API.md#quantize-scales)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 量化刻度是线性刻度的变体，它具有离散的范围而不是连续的范围。有关量化刻度的更多信息，请访问以下链接：[https://github.com/d3/d3/blob/master/API.md#quantize-scales](https://github.com/d3/d3/blob/master/API.md#quantize-scales)
- en: There's more...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'At this point, we have touched upon all three concepts related to transition:
    ease, tween, and interpolation. Typically, D3 transition is defined and driven
    through all the three levels shown in the following sequence diagram:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经触及了与过渡相关的三个概念：缓动、缓动和插值。通常，D3过渡通过以下序列图中的三个级别定义和驱动：
- en: '![There''s more...](img/5530_06_05.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/5530_06_05.jpg)'
- en: '`'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`'
- en: Drivers of transition
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡的驱动程序
- en: As we have shown through multiple recipes, D3 transition supports customization
    in all three levels. This gives us tremendous flexibility to customize the transition
    behavior exactly the way we want.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们通过多个示例所示，D3 过渡支持在三个级别上进行自定义。这为我们提供了极大的灵活性，可以精确地按照我们的意愿自定义过渡行为。
- en: Note
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Though custom tween is usually implemented using interpolation, there is no
    limit to what you can do in your own tween function. It is entirely possible to
    generate custom tween without using D3 interpolator at all.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然自定义缓动通常使用插值实现，但你在自己的缓动函数中可以做到的事情没有限制。完全有可能在不使用D3插值器的情况下生成自定义缓动。
- en: We used linear easing in this recipe to highlight the effect of tweening; however,
    D3 fully supports *eased tweening*, which means that you can combine any of the
    ease functions that are demonstrated in the previous recipe with your custom tween
    to generate even more complex transition effects.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用了线性缓动来突出缓动效果；然而，D3 完全支持*缓动缓动*，这意味着你可以将之前示例中展示的任何缓动函数与你的自定义缓动函数结合，以生成更复杂的过渡效果。
- en: Using transition chaining
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用过渡链式调用
- en: The first four recipes in this chapter are focused on single transition controls
    in D3, including custom easing and tweening functions. However, sometimes, regardless
    of how much easing or tweening you do, a single transition is just not enough;
    for instance, you would want to simulate teleporting a `div` element by first
    squeezing the `div` element into a beam, then passing the beam to a different
    position on the web page, and finally restoring the `div` to its original size.
    In this recipe, we will see exactly how this type of transition can be achieved
    using *transition chaining*.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的前四个示例专注于D3中的单个过渡控制，包括自定义缓动和缓动函数。然而，有时，无论你进行多少缓动或缓动，单个过渡都远远不够；例如，你可能想要通过首先将
    `div` 元素挤压成一条光束，然后将光束传递到网页上的不同位置，最后将 `div` 恢复到原始大小来模拟传送 `div` 元素。在这个示例中，我们将看到如何使用*过渡链式调用*实现这种类型的过渡。
- en: Getting ready
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://raw.githubusercontent.com/NickQiZhu/d3-cookbook-v2/master/src/chapter6/chaining.html](https://raw.githubusercontent.com/NickQiZhu/d3-cookbook-v2/master/src/chapter6/chaining.html)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://raw.githubusercontent.com/NickQiZhu/d3-cookbook-v2/master/src/chapter6/chaining.html](https://raw.githubusercontent.com/NickQiZhu/d3-cookbook-v2/master/src/chapter6/chaining.html)'
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Our simple teleportation transition code is surprisingly short:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简单的传送过渡代码出奇地短：
- en: '[PRE19]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The preceding code performs a `div` teleportation:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码执行了一个 `div` 传送：
- en: '![How to do it...](img/image_06_006.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现...](img/image_06_006.jpg)'
- en: DIV teleportation using transition chaining
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 使用过渡链式调用的 `div` 传送
- en: How it works...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'This simple teleportation effect was achieved by chaining a few transitions
    together. In D3, when transitions are chained, they are guaranteed to be executed
    only after the previous transition reaches its completion state. Now, let''s take
    a look at how this is done in the following code:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 通过链式调用几个过渡，实现了这个简单的传送效果。在 D3 中，当过渡被链式调用时，它们只有在之前的过渡达到完成状态后才会被执行。现在，让我们看看以下代码中是如何实现的：
- en: '[PRE20]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The first transition was defined and initiated on line `A` (compression); then,
    on line `B`, a second transition (beaming) was created; and finally, the third
    transition is chained on line `C` (restoration). Transition chaining is a powerful
    yet simple technique to orchestrate a complex transition effect by stitching simple
    transitions together. Finally, in this recipe, we have also shown a basic example
    on reusable composite transition effect by wrapping the teleportation transition
    in a function and then applying it on a selection using the `d3.selection.call`
    function (refer to line `D`). Reusable transition effect is essential to following
    the DRY principle, especially when the animation in your visualization becomes
    more elaborate.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个过渡在行 `A`（压缩）上定义并启动；然后，在行 `B` 上创建第二个过渡（发光）；最后，第三个过渡在行 `C`（恢复）上链式调用。通过将简单的过渡拼接在一起，过渡链式调用是一种强大而简单的技术，可以编排复杂的过渡效果。最后，在这个示例中，我们还通过将传送过渡包装在函数中，然后使用
    `d3.selection.call` 函数在选择上应用它，展示了如何实现一个基本的可重用组合过渡效果（参见图 `D`）。可重用过渡效果对于遵循DRY原则至关重要，尤其是在你的可视化动画变得更加复杂时。
- en: Using transition filter
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用过渡过滤器
- en: Under some circumstances, you might find it necessary to selectively apply transition
    to a subset of a certain selection. In this recipe, we will explore this effect
    using data-driven transition filtering techniques.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能需要选择性地将过渡应用到某个选择集的子集。在这个菜谱中，我们将使用数据驱动的过渡过滤技术来探索这种效果。
- en: Getting ready
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/filtering.html](https://raw.githubusercontent.com/NickQiZhu/d3-cookbook-v2/master/src/chapter6/chaining.html)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/filtering.html](https://raw.githubusercontent.com/NickQiZhu/d3-cookbook-v2/master/src/chapter6/chaining.html)'
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In this recipe, we will move a set of `div` elements (or boxes) across the
    web page from right to left. After moving all the boxes to the left, we will selectively
    move only the boxes that are marked as **Cat** back, so they won''t fight each
    other. Let''s take a look at the following code:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将把一组`div`元素（或盒子）从网页的右侧移动到左侧。在将所有盒子移动到左侧后，我们将选择性地将标记为**Cat**的盒子移回，这样它们就不会相互冲突。让我们看看下面的代码：
- en: '[PRE21]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Here is what the page looks like after the transition:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡后页面看起来是这样的：
- en: '![How to do it...](img/image_06_007.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/image_06_007.jpg)'
- en: Transition filtering
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡过滤
- en: How it works...
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The initial setup of this recipe is quite simple since we want to keep the
    plumbing as minimal as possible in order to help you focus on the core of the
    technique. We have a data array containing interlaced strings of `Cat` and `Dog`.
    Then, a set of `div` boxes was created for the data and a transition was created
    (refer to line `A`) to move all the boxes across the web page to the left-hand
    side. So far, it is a simple example of a multi-element transition with no surprises
    yet:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 菜谱的初始设置非常简单，因为我们希望尽可能减少管道的复杂性，以便帮助你专注于技术的核心。我们有一个包含交错字符串`Cat`和`Dog`的数据数组。然后，为数据创建了一组`div`盒子，并创建了一个过渡（参见图A）将所有盒子移动到网页的左侧。到目前为止，这是一个没有惊喜的多元素过渡的简单例子：
- en: '[PRE22]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Then, on line `B`, the `d3.selection.filter` function was used to generate a
    subselection that contains only the *cat* boxes. Remember, D3 transition is still
    a selection (transition-bound selection); therefore, the `d3.selection.filter`
    function works exactly the same way as on a regular selection. Once the subselection
    is generated by the `filter` function, we can apply a secondary transition (refer
    to line `C`) to this subselection alone. The `filter` function returns a transition-bound
    selection; therefore, the second transition created on line `C` is actually generating
    a transition chain. It will only be triggered after the first transition reaches
    its completion. Using combinations of transition chaining and filtering, we can
    generate some really interesting data-driven animations; it is a useful tool to
    have in any data visualizer's toolset.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在行B中，使用了`d3.selection.filter`函数来生成一个只包含*cat*盒子的子选择集。记住，D3过渡仍然是一个选择集（过渡绑定选择集）；因此，`d3.selection.filter`函数在常规选择集上工作方式完全相同。一旦通过`filter`函数生成了子选择集，我们就可以单独对这个子选择集应用一个二级过渡（参见图C）。`filter`函数返回一个过渡绑定选择集；因此，在行C上创建的第二个过渡实际上是在生成一个过渡链。它将在第一个过渡完成之后才会被触发。通过组合过渡链和过滤，我们可以生成一些真正有趣的数据驱动动画；这是任何数据可视化工具集中的一个有用工具。
- en: See also
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For recipes on D3 data-driven selection filtering, please see the *Filtering
    with data* recipe [Chapter 3](ch03.html "Chapter 3. Dealing with Data"), *Dealing
    with Data*
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于D3数据驱动的选择过滤的菜谱，请参阅*使用数据过滤*菜谱[第3章](ch03.html "第3章. 处理数据")，*处理数据*
- en: Read about API doc for the `selection.filter` function at [https://github.com/d3/d3-selection/blob/master/README.md#selection_filter](https://github.com/d3/d3-selection/blob/master/README.md#selection_filter)
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关`selection.filter`函数的API文档，请参阅[https://github.com/d3/d3-selection/blob/master/README.md#selection_filter](https://github.com/d3/d3-selection/blob/master/README.md#selection_filter)
- en: Listening to transitional events
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听过渡事件
- en: Transition chaining gives you the ability to trigger secondary transitions after
    the initial transition reach its completion state; however, sometimes you might
    need to trigger certain action other than a transition, or maybe do something
    else during the transition. This is what transition event listeners are designed
    for, they are the topic of this recipe.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡链允许你在初始过渡达到完成状态后触发二级过渡；然而，有时你可能需要触发除过渡之外的其他动作，或者可能在过渡期间做其他事情。这就是过渡事件监听器的设计目的，它们是本菜谱的主题。
- en: Getting ready
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/events.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/events.html)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/events.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/events.html)'
- en: How to do it...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will demonstrate how to display different captions on an
    animated `div` element based on its transition state. Obviously, this example
    can easily be extended to perform more meaningful tasks using the same technique:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将展示如何根据动画 `div` 元素的过渡状态显示不同的字幕。显然，这个例子可以很容易地扩展到使用相同的技术执行更有意义的任务：
- en: '[PRE23]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding code produces the following visual output where a box appears
    with **waiting** label; it moves to the right with the label changed to **transitioning**
    and when it''s done, it stops moving and changes its label to **done**:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码产生了以下视觉输出，其中出现了一个带有**等待**标签的框；它向右移动，标签变为**过渡中**，当完成时，它停止移动并将标签改为**完成**：
- en: '![How to do it...](img/image_06_008.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_06_008.jpg)'
- en: Transition event handling
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 过渡事件处理
- en: How it works...
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this recipe, we constructed a single `div` element with a simple horizontal-movement
    transition, which, when initiated, also changes the label based on what transition
    state it is in. Let''s first take a look at how we manage to display the **waiting**
    label:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们构建了一个具有简单水平移动过渡的单个 `div` 元素，当它被启动时，也会根据其处于的过渡状态更改标签。让我们首先看看我们是如何显示 **等待**
    标签的：
- en: '[PRE24]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The **waiting** label is set on line `A` before the transition is defined on
    line `B`, however, we also specified a delay for the transition thus showing the
    **waiting** label before the transition is initiated. Next, let''s find out how
    we were able to display the **transitioning** label during the transition:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**等待** 标签在定义过渡的行 `B` 之前设置在行 `A` 上，然而，我们也为过渡指定了延迟，因此在过渡开始之前显示了 **等待** 标签。接下来，让我们找出我们是如何在过渡期间显示
    **过渡中** 标签的：'
- en: '[PRE25]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This is achieved by calling the `on()` function and selecting its first parameter
    set as `"start"` event name with an event listener function passed in as the second
    parameter. The `this` reference of the event listener function points to the current
    selected element, hence, can be wrapped by D3 and further manipulated. The transition
    `"end"` event is handled in an identical manner:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过调用 `on()` 函数并选择将其第一个参数设置为 `"start"` 事件名称，并将事件监听器函数作为第二个参数传递来实现的。事件监听器函数的
    `this` 引用指向当前选定的元素，因此可以被 D3 包装并进行进一步操作。过渡 `"end"` 事件以相同的方式处理：
- en: '[PRE26]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The only difference here is that the event name is passed into the `on()` function.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的唯一区别是事件名称被传递到 `on()` 函数中。
- en: Working with timer
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用计时器
- en: So far in this chapter we have discussed various topics on D3 transition. At
    this point you might be asking the question, *What is powering D3 transition that
    is generating the animated frames?*
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中我们已经讨论了关于 D3 过渡的各种主题。此时，你可能会有这样的疑问，*是什么在驱动 D3 过渡，从而生成动画帧？*
- en: In this recipe, we will explore a low-level D3 timer function that you can leverage
    to create your own custom animation from scratch.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将探索一个低级别的 D3 计时器函数，你可以利用它从头开始创建自己的自定义动画。
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中打开以下文件的本地副本：
- en: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/timer.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/timer.html)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/timer.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter6/timer.html)'
- en: How to do it...
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will create a custom animation that does not rely on D3
    transition or interpolation at all; essentially a custom animation created from
    scratch. Let''s look at the following code:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个完全不受 D3 过渡或插值影响的自定义动画；本质上是从零开始创建的自定义动画。让我们看看下面的代码：
- en: '[PRE27]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The preceding code generates a box where a timer is set to **0**, and when
    you click on **Start**, the time increases until it reaches **100** and stops,
    as shown in the following:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码生成一个计时器设置为 **0** 的框，当你点击 **开始** 时，时间会增加，直到达到 **100** 并停止，如下所示：
- en: '![How to do it...](img/image_06_009.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/image_06_009.jpg)'
- en: Custom timer-based animation
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 基于计时器的自定义动画
- en: How it works...
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this example, we constructed a custom animation that moves integer from
    0 to 100\. For such a simple animation, of course, we could have accomplished
    it using D3 transition and tweening. However, a simple example like this avoids
    any distraction from the technique itself. Additionally, even in this simple example,
    the timer-based solution is arguably simpler and more flexible than a typical
    transition-based solution. The power of this animation lies in the `countUp` function
    (refer to line `A`):'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们构建了一个从 0 到 100 移动整数的自定义动画。对于这样简单的动画，当然，我们可以使用 D3 过渡和缓动函数来完成它。然而，这样的简单例子避免了任何对技术本身的干扰。此外，即使在这样一个简单的例子中，基于计时器的解决方案在可论证的程度上比典型的基于过渡的解决方案更简单、更灵活。这种动画的力量在于
    `countUp` 函数（参见图 `A`）：
- en: '[PRE28]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As we have shown in this example, the key to understanding this recipe lies
    in the `d3.timer` function. This `d3.timer(function, [delay], [mark])` starts
    a custom timer function and invokes the given function repeatedly, until the function
    returns `true` or when the timer is stopped. Before D3 v4, there was no way to
    stop the timer once it is started, so the programmer must make sure that the function
    eventually returns `true`; with the latest D3 release, timer object now offers
    an explicit `stop()` function. However, it is still recommended that the function
    returns `true` from a timer function once it has completed its task, as seen on
    line `C`. Optionally, you can also specify a *delay* or a *mark*. The delay starts
    from the mark and when the mark is not specified, `Date.now` will be used as the
    mark. The following illustration shows the temporal relationship we discussed
    here:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本例中所示，理解这个菜谱的关键在于 `d3.timer` 函数。这个 `d3.timer(function, [delay], [mark])`
    开始一个自定义计时器函数，并重复调用给定的函数，直到函数返回 `true` 或计时器停止。在 D3 v4 之前，一旦计时器开始，就没有办法停止它，因此程序员必须确保函数最终返回
    `true`；在最新的 D3 版本中，计时器对象现在提供了一个显式的 `stop()` 函数。然而，仍然建议一旦计时器完成了它的任务，从计时器函数中返回 `true`，就像在图
    `C` 中看到的那样。可选地，你也可以指定一个 *延迟* 或一个 *标记*。延迟从标记开始，如果没有指定标记，则使用 `Date.now` 作为标记。以下插图显示了我们所讨论的时间关系：
- en: In our implementation, the custom `timer` function increases button caption
    by one every time it is called (refer to line `D`) and stops when the value reaches
    `100` (refer to line `C`).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的实现中，自定义的 `timer` 函数每次被调用时都会将按钮标题增加一（参见图 `D`），并在值达到 `100` 时停止（参见图 `C`）。
- en: Internally, D3 transition uses the same timer function to generate its animation.
    At this point, you might be asking what is the difference between using `d3.timer`
    versus Using the animation frame directly. The answer is that the `d3.timer` function
    actually uses animation frame if the browser supports it; otherwise, it is smart
    enough to fallback to use the `setTimeout` function, thus freeing you from worrying
    about your browser's support.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 内部，D3 过渡使用相同的计时器函数来生成其动画。在这个时候，你可能会问使用 `d3.timer` 与直接使用动画帧有什么区别。答案是，如果浏览器支持，`d3.timer`
    函数实际上使用动画帧；否则，它足够智能，会回退到使用 `setTimeout` 函数，从而让你不必担心浏览器的支持。
- en: See also
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考信息
- en: For more information on d3.timer, please visit its API at the following link: [https://github.com/d3/d3-timer/blob/master/README.md#timer](https://github.com/d3/d3-timer/blob/master/README.md#timer)
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于 d3.timer 的信息，请访问以下链接的 API：[https://github.com/d3/d3-timer/blob/master/README.md#timer](https://github.com/d3/d3-timer/blob/master/README.md#timer)
