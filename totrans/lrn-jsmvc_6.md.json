["```js\n    $ git init\n    $ git submodule add git://github.com/jupiterjs/steal.git\n    $ git submodule add git://github.com/jupiterjs/documentjs.git\n    $ git submodule add git://github.com/jupiterjs/funcunit.git\n    $ git submodule add git://github.com/jupiterjs/jquerymx.git jquery\n\n    ```", "```js\n    $ git submodule init\n    $ git submodule update\n\n    ```", "```js\n    $ cd funcunit\n    $ git submodule init\n    $ git submodule update\n\n    ```", "```js\n    $ ./steal/js steal/make.js\n\n    ```", "```js\n    $ git checkout v3.2.2\n\n    ```", "```js\n    $ mkdir tti\n    $ git add .\n    $ git commit -m \"initial commit\"\n\n    ```", "```js\nTTI/\n   |\n   |tti/\n   |   |controllers/\n   |   |\n   |   |docs/\n   |   |\n   |   |models/\n   |   |\n   |   |tests/\n   |   |     |unit/\n   |   |     |    |models/\n   |   |     | \n   |   |     |functional/\n   |   |\n   |   |views/\n   |         |styles/\n   |         |      |css/\n   |         |      |\n   |         |      |sass/\n   |         |\n   |         |templates/\n   |                   |tasks\n   |                   |\n   |                   |clients\n   |\n   |vendors/\n           |jquery_ui/\n           |\n           |pouchdb/\n```", "```js\nsteal(\n    'jquery/model',\n    'vendors/pouchdb.js',\n\n    function ($) {\n        'use strict'\n\n        // local variable to keep reference to time-tracker database\n        var db;\n\n        /**\n         * @class TTI.Models.Task\n         * @parent index\n         * @constructor\n         * @author Wojciech Bednarski\n         */\n        $.Model('TTI.Models.Task', {\n\n                /**\n                 * @function init\n                 * @hide\n                 * Creates database time-tracker or get it if exists\n                 */\n                init: function () {\n                    Pouch('idb://time-tracker', function (err, timeTracker) {\n                        db = timeTracker;\n\n                        console.log('TTI.Models.Task.init() | idb://time-tracker | err:', err, 'db:', db);\n                    })\n                },\n```", "```js\n                /**\n                 * @function findAll\n                 * Get all tasks\n                 * @return {Object} an object contains objects with all tasks\n                 *\n                 * ### Example:\n                 * @codestart\n                 * TTI.Models.Task.findAll(function (tasks) {\n                 *      // do something with tasks\n                 * },\n                 * function (error) {\n                 *      // handle error here\n                 * });\n                 * task.save(function (task) {\n                 *     console.log(task);\n                 * });\n                 * @codeend\n                 */\n                findAll: function (success, error) {\n                    return db.allDocs(\n                        {\n                            include_docs: true // this is needed to return not only task ID but task it self\n                        },\n                        function (err, response) {\n                            console.log('TTI.Models.Task.findAll() | GET | err:', err, 'client:', response);\n\n                            if (response) {\n                                success(response);\n                            }\n                            else if (err) {\n                                error(err);\n                            }\n                        }\n                    );\n                },\n```", "```js\n                /**\n                 * @function findOne\n                 * Find task by given ID\n                 * @param {String} task ID\n                 * Task object\n                 * @codestart\n                 * String (UUID)\n                 * @codeend\n                 *\n                 * @return {Object} an object contains requested task\n                 * @codestart\n                 * {\n                 *     id: String (UUID),\n                 *     hours: Number,\n                 *     cost: {\n                 *          rate: Number,\n                 *          total: Number\n                 *     },\n                 *     taskID: String,\n                 *     description: String,\n                 *     note: String\n                 * }\n                 * @codeend\n                 *\n                 * ### Example:\n                 * @codestart\n                 * TTI.Models.Task.findOne('UUID', function (success, error) {\n                 *      // code goes here\n                 * });\n                 * @codeend\n                 */\n                findOne: function (id, success, error) {\n                    return db.get(id, function (err, doc) {\n\n                        if (doc) {\n                            success(doc);\n                        }\n                        else if (err) {\n                            error(err);\n                        }\n\n                    });\n                },\n```", "```js\n                /**\n                 * @function create\n                 * Create new task\n                 * @param {Object} task\n                 * Task object\n                 * @codestart\n                 * {\n                 *     hours: Number,\n                 *     cost: {\n                 *          rate: Number,\n                 *          total: Number\n                 *     },\n                 *     taskID: String,\n                 *     description: String,\n                 *     note: String\n                 * }\n                 *\n                 * {\n                 *      hours: 7,\n                 *      cost: {\n                 *          rate: 100,\n                 *          total: 700\n                 *      },\n                 *      taskID: 'JIRA-2789',\n                 *      description: 'Implement new awesome feature!',\n                 *      note: ''\n                 *  }\n                 * @codeend\n                 *\n                 * @return {Object} an object contains newly created task UUID\n                 * @codestart\n                 * {\n                 *      id: \"8D812FF6-4B96-4D73-8D18-01FACEF33531\"\n                 *      ok: true\n                 *      rev: \"1-c5a4055b6c3edac099083cc0b485d4e3\"\n                 * }\n                 * @codeend\n                 *\n                 * ### Example:\n                 * @codestart\n                 * var task = new TTI.Models.Task({ task object goes here });\n                 * task.save(function (task) {\n                 *     console.log(task);\n                 * });\n                 * @codeend\n                 */\n                create: function (task, success, error) {\n                    return db.post(task, function (err, response) {\n                        console.log('TTI.Models.Task.create() | POST | err:', err, 'client:', response);\n\n                        if (response) {\n                            success(response);\n                        }\n                        else if (err) {\n                            error(err);\n                        }\n                    });\n                },\n```", "```js\n                /**\n                 * @function update\n                 * Update task by given ID\n                 * @param {Object} task\n                 * Task object\n                 * @codestart\n                 * {\n                 *      _id: String (UUID),\n                 *      hours: Number,\n                 *      cost: {\n                 *          rate: Number,\n                 *          total: Number\n                 *      },\n                 *      taskID: String,\n                 *      description: String,\n                 *      note: String\n                 * }\n                 * @codeend\n                 *\n                 * @return {Object} an object contains updated task UUID\n                 * @codestart\n                 * {\n                 *      id: \"8D812FF6-4B96-4D73-8D18-01FACEF33531\"\n                 *      ok: true\n                 *      rev: \"1-c5a4055b6c3edac099083cc0b485d4e3\"\n                 * }\n                 * @codeend\n                 *\n                 * ### Example:\n                 * @codestart\n                 * TTI.Models.Task.update({ task object goes here });\n                 * @codeend\n                 */\n                update: function (task, success, error) {\n                    return db.put(task, function (err, response) {\n                        console.log('TTI.Models.Task.update() | POST | err:', err, 'client:', response);\n\n                        if (response) {\n                            success(response);\n                        }\n                        else if (err) {\n                            error(err);\n                        }\n                    });\n                },\n```", "```js\n                /**\n                 * @function destroy\n                 * Destroy task by given ID\n                 * @param {Object} task\n                 * Task object\n                 * @codestart\n                 * String (UUID)\n                 * @codeend\n                 *\n                 * @return {Object} an object contains destroyed task UUID\n                 * @codestart\n                 * {\n                 *      id: \"8D812FF6-4B96-4D73-8D18-01FACEF33531\"\n                 *      ok: true\n                 *      rev: \"1-c5a4055b6c3edac099083cc0b485d4e3\"\n                 * }\n                 * @codeend\n                 *\n                 * ### Example:\n                 * @codestart\n                 * TTI.Models.Task.destroy('UUID', function (success, getError, removeError) {\n                 *      // handle errors here\n                 * });\n                 * @codeend\n                 */\n                destroy: function (id, success, getError, removeError) {\n                    return db.get(id, function (getErr, doc) {\n\n                        if (getErr) {\n                            getError(getErr);\n                        }\n\n                        db.remove(doc, function (removeErr, response) {\n\n                            if (response) {\n                                success(response);\n                            }\n                            else if (removeErr) {\n                                removeError(removeErr);\n                            }\n\n                        });\n                    });\n                }\n            },\n            {\n\n            }\n        );\n\n    }\n);\n```", "```js\nsteal(\n    'jquery/model',\n\n    function ($) {\n        'use strict';\n\n        $.Model('TTI.Models.Client', {\n                init: function () {\n                    // create database clients or get it if exists.\n\n                    console.log('TTI.Models.Client.init() | idb://clients | err:');\n\n                },\n\n                findAll: function () {\n\n                },\n\n                findOne: function () {\n\n                },\n\n                create: function () {\n\n                },\n\n                update: function () {\n\n                },\n\n                destroy: function () {\n\n                }\n            },\n            {\n\n            }\n        );\n    }\n);\n```", "```js\nsteal(\n    'jquery/view/ejs',\n    'jquery/controller',\n    'tti/models/task.js'\n).then(\n    function ($) {\n        'use strict';\n\n        console.log('TTI.Controllers.Tasks');\n\n        /**\n         * @class TTI.Controllers.Tasks\n         * Creates a new Tasks controller\n         * @parent index\n         * @constructor\n         * @param {String} DOMElement DOM element\n         * @return {Object}\n         */\n        $.Controller('TTI.Controllers.Tasks', {\n            'init': function (element, options) {\n                var self = this;\n\n                $('title').text('Time Tracker | TTI');\n\n                TTI.Models.Task.findAll(function (data) {\n                    if (!data.rows.length) {\n                        data.rows = [\n                            {\n                                doc: {\n                                    hours: '',\n                                    cost: {\n                                        total: ''\n                                    },\n                                    taskID: '',\n                                    description: 'No tasks so far!',\n                                    note: ''\n\n                                }\n                            }\n                        ];\n                    }\n\n                    self.element.html('tti/views/templates/tasks/tasks.ejs', data.rows);\n\n                });\n\n            },\n\n            '{TTI.Models.Task} created': function (Task, e, task) {\n                console.log('task', task);\n                console.log('this.element', this.element);\n                $('tbody tr:last', this.element).after('tti/views/templates/tasks/task.ejs', task);\n                $('tbody tr:last', this.element).effect('highlight', {}, 3000);\n            },\n\n            '{TTI.Models.Task} destroyed': function (Task, e, task) {\n                task.elements(this.element).remove();\n            },\n\n            '.add-task click': function () {\n                this.element.append('tti/views/templates/tasks/add_task.ejs', {}).find('.create-new-task-dialog-form').dialog({\n                    autoOpen: false,\n                    modal:    true,\n                    buttons:  {\n                        'Create New Task': function () {\n                            var self = this;\n\n                            window.task = new TTI.Models.Task({\n                                hours: $('input[name=\"hours\"]', this).val(),\n                                taskID: $('input[name=\"task-id\"]', this).val(),\n                                cost: {\n                                    rate: 0,\n                                    total: 0\n                                },\n                                description: $('input[name=\"description\"]', this).val(),\n                                note: $('input[name=\"note\"]', this).val()\n                            });\n\n                            window.task.save(function () {\n                                $(self).dialog('destroy').remove();\n                            });\n\n                        },\n                        Cancel: function () {\n                            $(this).dialog('destroy').remove();\n                        }\n                    },\n                    close: function () {\n                        $(this).dialog('destroy').remove();\n                    }\n                }).dialog('open');\n\n            }\n\n        });\n\n    }\n);\n```", "```js\nsteal(\n    'jquery/view/ejs',\n    'jquery/controller'\n).then(\n    function ($) {\n        'use strict';\n\n        console.log('TTI.Controllers.Client');\n\n        /**\n         * @class TTI.Controllers.Client\n         * Creates a new Tasks controller\n         * @parent index\n         * @constructor\n         * @param {String} DOMElement DOM element\n         * @return {Object}\n         */\n        $.Controller('TTI.Controllers.Client', {\n            'init': function () {\n\n                $('title').text('Clients | TTI');\n\n                var testData = [\n                    {\n                        name: 'The First Awesome Client!'\n                    },\n                    {\n                        name: 'The Second Awesome Client!'\n                    }\n                ];\n\n                this.element.html('tti/views/templates/clients.ejs', testData);\n\n            }\n\n        });\n\n    }\n);\n```", "```js\nsteal(\n    'tti/controllers/navigation.js',\n    'tti/controllers/client.js',\n    'tti/controllers/tasks.js',\n    'jquery/controller',\n    'jquery/controller/route'\n).then(\n    function ($) {\n        'use strict';\n\n        /**\n        * @class TTI.Controllers.Router\n        * Creates application router\n        * @parent index\n        * @constructor\n        * @param {String} DOMElement DOM element\n        * @return {Object}\n        */\n        $.Controller('TTI.Controllers.Router', {\n            init: function () {\n                console.log('r init');\n            },\n\n            // the index page\n            'route': function (e) {\n                console.log('default route', e);\n            },\n\n            ':page route': function (data) {\n                $('#content').empty().append('<div>');\n\n                if (data.page === 'time-tracker') {\n                    new TTI.Controllers.Tasks('#content div');\n                }\n                else if (data.page === 'clients') {\n                    new TTI.Controllers.Client('#content div');\n                }\n            }\n\n        });\n\n        // create new Router controller instance\n        $('body').bind('TTI/db-ready', function () {\n            new TTI.Controllers.Router(document.body);\n        });\n    }\n);\n```", "```js\nsteal(\n    'jquery/view/ejs',\n    'jquery/controller',\n    'jquery/dom/route'\n).then(\n    function ($) {\n        'use strict';\n\n        /**\n         * @class TTI.Controllers.Navigation\n         * Creates application main navigation controller\n         * @parent index\n         * @constructor\n         * @param {String} DOMElement DOM element\n         * @return {Object}\n         */\n        $.Controller('TTI.Controllers.Navigation', {\n            init: function () {\n                var navItems = [\n                    {\n                        name: 'Time Tracker',\n                        className: 'time-tracker'\n                    },\n                    {\n                        name: 'Invoice',\n                        className: 'invoice'\n                    },\n                    {\n                        name:      'Clients',\n                        className: 'clients'\n                    },\n                    {\n                        name: 'Reports',\n                        className: 'reports'\n                    },\n                    {\n                        name: 'Statistics',\n                        className: 'statistics'\n                    }\n                    ];\n\n                this.element.html('tti/views/templates/navigation.ejs', navItems);\n            },\n\n            '.time-tracker click': function (e) {\n                $.route.attr('page', 'time-tracker');\n            },\n\n            '.clients click': function (e) {\n                $.route.attr('page', 'clients');\n            }\n\n        });\n\n    }\n);\n```", "```js\n<h2>Clients List</h2>\n\n<ol>\n    <% $.each(this, function(i, client) { %>\n\n        <li <%= ($el) -> $el.model(client) %>>\n            <strong><%= client.name %></strong>\n        </li>\n\n    <% }) %>\n</ol>\n```", "```js\n<% $.each(this, function(i, item) { %>\n\n    <li class=\"<%= item.className %>\">\n        <%= item.name %>\n    </li>\n\n<% }) %>\n```", "```js\n<table summary=\"Time Tracker list of tasks.\">\n    <thead>\n        <tr>\n            <th scope=\"col\">Hours</th>\n            <th scope=\"col\">Cost</th>\n            <th scope=\"col\">Task ID</th>\n            <th scope=\"col\">Description</th>\n            <th scope=\"col\">Note</th>\n        </tr>\n    </thead>\n    <tbody>\n        <% $.each(this, function(i, task) { %>\n            <tr <%= ($el) -> $el.model(task) %>>\n                <td>\n                    <%= task.doc.hours %>\n                </td>\n                <td>\n                    <%= task.doc.cost.total %>\n                </td>\n                <td>\n                    <%= task.doc.taskID %>\n                </td>\n                <td>\n                    <%= task.doc.description %>\n                </td>\n                <td>\n                    <%= task.doc.note %>\n                </td>\n            </tr>\n        <% }) %>\n    </tbody>\n</table>\n\n<span class=\"add-task\">Add Task</span>\n```", "```js\n<tr <%= ($el) -> $el.model(task) %>>\n    <td>\n        <%= task.hours %>\n    </td>\n    <td>\n        <%= task.cost.total %>\n    </td>\n    <td>\n        <%= task.taskID %>\n    </td>\n    <td>\n        <%= task.description %>\n    </td>\n    <td>\n        <%= task.note %>\n    </td>\n</tr>\n```", "```js\n<div class=\"create-new-task-dialog-form\" title=\"Create New Task\">\n    <form>\n        <fieldset>\n            <label><span>Hours</span> <input type=\"text\" name=\"hours\" /></label>\n            <label><span>Task ID</span> <input type=\"text\" name=\"task-id\" /></label>\n            <label><span>Description</span> <input type=\"text\" name=\"description\" /></label>\n            <label><span>Note</span> <input type=\"text\" name=\"note\" /></label>\n        </fieldset>\n    </form>\n</div>\n```", "```js\n@import 'reset';\n@import 'static';\n@import 'mixins';\n@import 'skelton';\n```", "```js\n$blue: #5C94BF;\n$black: #3E4246;\n$white: #F6F6F7;\n$vlGreen: #B7D190;\n$lGreen: #9CBA6E;\n$dGreen: #424A38;\n$mGrey: #5B5B5B;\n$yellow: #F8AE03;\n$lBlue: #167BBE;\n$dBlue: #0E69B3;\n$gBlue: #7489A1;\n```", "```js\n@mixin link {\n    color: $lGreen;\n    cursor: pointer;\n    text-decoration: none;\n\n    &:hover {\n        text-decoration: underline;\n    }\n}\n\n@mixin borderRadius($topLeft, $topRight, $bottomRight, $bottomLeft) {\n    -moz-border-radius-topleft: $topLeft;\n    -moz-border-radius-topright: $topRight;\n    -moz-border-radius-bottomright: $bottomRight;\n    -moz-border-radius-bottomleft: $bottomLeft;\n    -webkit-border-radius: $topLeft $topRight $bottomRight $bottomLeft;\n    border-radius: $topLeft $topRight $bottomRight $bottomLeft;\n}\n\n@mixin button {\n    @include borderRadius(5px, 5px, 5px, 5px);\n    display: inline-block;\n    padding: 0 7px;\n    line-height: 20px;\n    height: 20px;\n    cursor: pointer;\n}\n```", "```js\n//   http://meyerweb.com/eric/tools/css/reset/\n//   v2.0 | 20110126\n//   License: none (public domain)\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n}\n// HTML5 display-role reset for older browsers\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n    display: block;\n}\n\nbody {\n    line-height: 1;\n}\n\nol, ul {\n    list-style: none;\n}\n\nblockquote, q {\n    quotes: none;\n}\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n    content: '';\n    content: none;\n}\n\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n}\n\ntextarea {\n    min-height: 100px;\n}\n```", "```js\nhtml,\nbody {\n    color: $black;\n    background: $white;\n    font: 11px/18px \"Helvetica Neue\", Helvetica, Verdana, sans-serif;\n}\n\ninput,\nselect,\ntextarea {\n    font: 12px/18px \"Helvetica Neue\", Helvetica, Verdana, sans-serif;\n}\n\ntable {\n    width: 100%;\n    border: 1px solid $gBlue;\n\n    thead {\n        color: $white;\n        background: $blue;\n\n        tr {\n\n            &:last-child {\n                @include borderRadius(5px, 5px, 5px, 5px);\n            }\n\n            th {\n                padding: 7px 0;\n            }\n        }\n    }\n\n    tbody {\n\n        tr {\n\n            td {\n                padding: 3px 0;\n                border-bottom: 1px solid $gBlue;\n                text-align: center;\n            }\n        }\n    }\n\n}\n\n#container {\n    width: 1100px;\n    margin: 0 auto;\n\n    #header {\n        padding: 10px;\n        height: 50px;\n\n        #main-navigation {\n\n            li {\n                @include link;\n                margin-right: 7px;\n                display: inline-block;\n            }\n        }\n    }\n\n    h2 {\n        font-size: 14px;\n    }\n\n    ol {\n        margin: 7px;\n        list-style-type: decimal;\n        list-style-position: inside;\n    }\n\n    .add-task {\n        @include button;\n        margin-top: 20px;\n        color: $white;\n        background: $lGreen;\n\n        &:hover {\n            background: $yellow;\n        }\n    }\n}\n```", "```js\n<!doctype html>\n\n<html>\n    <head>\n        <title>TTI</title>\n        <meta charset=\"UTF-8\" />\n    </head>\n    <body>\n        <div id=\"container\">\n            <header id=\"header\">\n                <nav id=\"main-navigation\">\n                    <ul></ul>\n                </nav>\n                <div id=\"breadcrumb\"></div>\n                <nav id=\"secondary-navigation\"></nav>\n            </header>\n\n            <div id=\"content\">\n                <div><p>Loading...</p></div>\n            </div>\n\n            <footer id=\"footer\">\n\n            </footer>\n\n        </div>\n\n        <script src=\"img/steal.js?tti\"></script>\n\n    </body>\n</html>\n```", "```js\nsteal(\n    function ($) {\n        console.log('tti.js');\n    },\n    'vendors/jquery_ui/css/smoothness/jquery.ui.core.css',\n    'vendors/jquery_ui/css/smoothness/jquery.ui.dialog.css',\n    'vendors/jquery_ui/css/smoothness/jquery.ui.theme.css',\n    'tti/views/styles/css/tti.css',\n    'tti/models/task.js',\n    'tti/models/client.js',\n    'tti/controllers/tasks.js',\n    'tti/controllers/router.js',\n    'tti/controllers/navigation.js'\n).then(\n    'vendors/jquery_ui/jquery.ui.core.js'\n).then(\n    'vendors/jquery_ui/jquery.effects.core.js'\n).then(\n    'vendors/jquery_ui/jquery.effects.highlight.js'\n).then(\n    'vendors/jquery_ui/jquery.ui.widget.js'\n).then(\n    'vendors/jquery_ui/jquery.ui.position.js',\n    'vendors/jquery_ui/jquery.ui.dialog.js'\n).then(\n    function ($) {\n        new TTI.Controllers.Navigation('#main-navigation ul');\n    }\n);\n```", "```js\n$ sass --watch sass:css\n```"]