- en: Chapter 8. Creating a Unique Look and Feel with SASS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ext JS has come a long way since its beginning in terms of its design and the
    ease with which a new design can be applied to the framework.
  prefs: []
  type: TYPE_NORMAL
- en: Its original blue theme was something that made it very appealing to developers
    but has since become dated and overused. Ext JS 5 now includes six themes and
    a host of options to customize them and to create your own.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Apply different themes to your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create your own custom theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customize basic application visuals with SASS variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create custom component UIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying themes to your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you generate a new Ext JS application with Sencha Cmd, it will automatically
    use the Neptune theme. This is one of the newest themes and looks very clean and
    modern:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying themes to your application](img/3717_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As mentioned, there are a total of six themes packaged with Ext JS, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Neptune
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Neptune Touch (touch-friendly version of Neptune)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crisp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crisp Touch (touch-friendly version of Crisp)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gray
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Have a look at these themes in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying themes to your application](img/3717_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you navigate to the `ext` directory in your project and have a peek into
    the `packages` folder, you will see all of the theme packages that are available.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a new theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can change the theme your application uses easily, with only one configuration
    change. In your application's folder, open the `app.json` file. This file is used
    to configure different aspects of your application and how it is loaded and built.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see an item named `theme` near the top of the file. We will edit
    the value of this property and change it to `ext-theme-crisp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For this change to take effect, we must rebuild the application using the following
    command from the `BizDash` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This regenerates the CSS file for the application and includes the new theme's
    styles in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refreshing the application in the browser should now show it with the Crisp
    theme applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring a new theme](img/3717_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a custom theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to switch our application's theme, we will move on to creating
    our own custom theme.
  prefs: []
  type: TYPE_NORMAL
- en: Theme architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you may have noticed from our foray into Ext JS' packages folder, themes
    are architected as packages in the same way that Sencha Core and Sencha Charts
    are. This means they are portable between applications and sit in isolation from
    our app's code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Theme packages are also built with an inheritance hierarchy where they build
    upon common theme packages. The following diagram shows how each package relates
    to the others and how the basic styling is shared among each one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Theme architecture](img/3717_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Generating a theme package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we must generate a blank theme package using Sencha Cmd. To do this,
    we open the terminal and navigate to our `BizDash` project folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we run the following command to generate a basic new theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We use the `generate` command, which you may remember from earlier in the book,
    but this time we tell it to generate a theme called bizdash-theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once executed, we should see a new folder in our workspace''s packages folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating a theme package](img/3717_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Anatomy of a theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Within our new theme package, there should be all of the files and folders
    you expect in a regular code package. The main ones we are interested in dealing
    with are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`package.json`: This is where all the package''s details and configurations
    are defined'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sass/var`: This will be where we put all of our SASS variable overrides'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sass/src`: This is where we define styling for individual components'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sass/etc`: This is where any miscellaneous SASS files, which don''t tie directly
    to a component file, can be placed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-browser styling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the great benefits of Ext JS is its legacy browser support. So, how do
    our shiny new themes cope with these older browsers? Ext JS is very clever when
    rendering in different browsers and uses different styling for browsers that don't
    support CSS3 properties (such as gradients and rounded corners). These older browsers
    are given image sprites to display these design features, so the exact same design
    is replicated across all browsers.
  prefs: []
  type: TYPE_NORMAL
- en: During the Sencha Cmd build process, a sample page, which contains all of the
    framework's components, is rendered in a headless browser and a snapshot of it
    is taken. This snapshot is then sliced up into the required sprites and used as
    needed.
  prefs: []
  type: TYPE_NORMAL
- en: Theme inheritance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we mentioned before, themes extend other themes and build upon the styling
    each level defines. By default, our new theme will extend the ext-theme-classic
    theme and will look identical to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can change our new theme''s base theme by opening the package''s `package.json`
    file in our IDE. In this file, we can update the `extend` property with the name
    of the theme we want to extend. We can change it to extend the Crisp theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Applying the new theme
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have a basic theme in place, we can apply it to our application
    in the same way that we applied one of the built-in themes. We modify our application''s
    `app.json` file and change the included theme name to bizdash-theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After rebuilding the application and refreshing the browser, we will see our
    application displaying our new theme (although at the moment it will look just
    like the Crisp theme).
  prefs: []
  type: TYPE_NORMAL
- en: Basic theme customizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a custom theme in place, we want to start making it our own
    and moving away from the defaults inherited from the base theme.
  prefs: []
  type: TYPE_NORMAL
- en: Theme variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ext JS themes are created with SASS and they place a lot of design control in
    the hands of SASS variables. By modifying these variables, we can make fundamental
    alterations to our theme very easily.
  prefs: []
  type: TYPE_NORMAL
- en: SASS is a CSS preprocessor that introduces a more terse and functional way of
    writing CSS. It introduces concepts such as variables, nested rules, selector
    inheritance, and mixin, which are extremely useful when writing CSS for large
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Each component in the framework has its own set of variables that will modify
    the look of that particular component. We can find a list of variables in the
    documentation alongside the methods, configs, and events that that component defines.
  prefs: []
  type: TYPE_NORMAL
- en: '![Theme variables](img/3717_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To define one of these variables in our theme, we must create a new SCSS file
    in the `sass/var` folder of our theme package. These SCSS files should match the
    structure of our JavaScript files. For example, defining variables for the `Ext.button.Button`
    class should be placed in a file named `sass/var/button/Button.scss`. This pattern
    should be followed when creating new styles in the `sass/src` folder.
  prefs: []
  type: TYPE_NORMAL
- en: We will now demonstrate how we can customize some areas of the UI with SASS
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the main color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common scenario is that we want to change the main color of our theme to match
    our corporate colors. This can be done easily with the `$base-color` variable,
    which can be assigned any valid HTML color code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This variable forms part of the `Ext.Component` class, so it must be defined
    in the file named `sass/var/Component.scss`. To change the base color to red,
    we include the following code in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `!default` suffix will allow the variable to be overridden in themes that
    extend this one.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we rebuild our application and refresh the browser, we will see the effect
    this has on our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the main color](img/3717_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the font size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also quickly change the font size used throughout the application by
    including the `$font-size` variable with a new size value. We increase the font
    size to 16 px with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Changing a button's color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen that changing the `$base-color` variable resulted in our buttons
    rendering with that new color. We can select a different color for the buttons
    by overriding the `$button-default-background-color` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a new SCSS file named `sass/var/button/Button.scss` and add the following
    code to change the color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Changing a button''s color](img/3717_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Custom component UIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ext JS components can be individually customized by providing a different `ui`
    configuration when they are created. This alters the CSS classes that are added
    to the components giving them a different look, in isolation from other components
    of that type. For example, you might want an action button to be green and a cancel
    button to be gray, but all the other buttons to be the default color.
  prefs: []
  type: TYPE_NORMAL
- en: Defining UIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We define a UI by including a SASS mixin and configuring it with our required
    colors and settings. A SASS mixin is a set of style rules that are grouped together,
    so they can be reused in multiple places and customized by passing parameter values
    to them.
  prefs: []
  type: TYPE_NORMAL
- en: We will create the two UIs we mentioned earlier in this chapter for the `save`
    and `cancel` buttons of our `ProductForm`.
  prefs: []
  type: TYPE_NORMAL
- en: We start by creating a `Button.scss` file in a `sass/src/button` folder within
    our `bizdash-theme` package folder. This folder structure mirrors the `Ext.button.Button`
    component class and so will be picked up and compiled during a `sencha app build`
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this file, we include the `extjs-button-small-ui` mixin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We then define the name of the UI, which will be used to apply the styling
    to a button. We use the `$ui` parameter name and give it the name `action`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define the button''s background color, its text color, and its border
    color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can repeat this for the `cancel` button and add a similar mixin to the `Button.scss`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now that these are in place, we rebuild the application using the `sencha app
    build` command within the `BizDash` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Applying UIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We now have two UI styles ready to apply to buttons within our application.
    To apply these, we use the `ui` configuration option. When added, this option
    adds a new CSS class, which was generated by our mixins in the previous step,
    to the components:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `ProductForm` class our `button` configs become:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon refreshing the application in our browser, we can see the new button styling
    in place. Inspecting the DOM shows the new CSS classes added to each of the buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying UIs](img/3717_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the new CSS classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying UIs](img/3717_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Other UIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most components within the framework have mixins that allow us to define a different
    component style. We will now demonstrate how to create an alternative UI for an
    `Ext.Panel` component.
  prefs: []
  type: TYPE_NORMAL
- en: If you find the `Ext.Panel` in the Ext JS documentation, you will see one item
    under the **CSS Mixins** dropdown. We will use this to define our own UI, we first
    'create' a `Panel.scss` file in a folder `sass/src/panel/Panel`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Other UIs](img/3717_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We include this in our `Panel.scss` file and start to configure the styling
    we want. You can see all of the available options in the documentation, but we
    will customize the header background color, border color, and border radius, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This UI option can be added to the `ProductForm` in exactly the same way as
    we did with the buttons, using the `ui` config:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Other UIs](img/3717_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have looked at how we can customize the look and feel of
    our Ext JS applications through the use of custom themes. We have looked at how
    themes are constructed and how they inherit from each other.
  prefs: []
  type: TYPE_NORMAL
- en: We have also demonstrated how to create and customize a new theme through the
    use of global SASS variables and component mixins.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will focus on visualizing data within our applications through
    the use of charts.
  prefs: []
  type: TYPE_NORMAL
