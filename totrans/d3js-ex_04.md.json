["```js\nvar data = [55, 44, 30, 23, 17, 14, 16, 25, 41, 61, 85,\n            101, 95, 105, 114, 150, 180, 210, 125, 100, 71,\n            75, 72, 67];\n```", "```js\nvar barWidth = 15, barPadding = 3;\n```", "```js\nvar maxValue = d3.max(data);\n```", "```js\nvar graphGroup = d3.select('body')\n    .append('svg')\n    .attr({ width: 1000, height: 250 })\n    .append('g');\n```", "```js\nfunction xloc(d, i) { return i * (barWidth + barPadding); }\n```", "```js\nfunction yloc(d) { return maxValue - d; }\n```", "```js\nfunction translator(d, i) {\n    return \"translate(\" + xloc(d, i) + \",\" + yloc(d) + \")\";\n   }\n```", "```js\nbarGroup.selectAll(\"rect\")\n    .data(data)\n    .enter()\n    .append('rect')\n    .attr({\n        fill: 'steelblue',\n        transform: translator,\n        width: barWidth,\n        height: function (d) { return d; }\n    });\n```", "```js\nvar barGroups = g.selectAll('g')\n    .data(data)\n    .enter()\n    .append('g')\n    .attr('transform', translator);\n```", "```js\nbarGroups.append('rect')\n    .attr({\n        fill: 'steelblue',\n        width: barWidth,\n        height: function(d) { return d; }\n    });\n```", "```js\nvar textTranslator = \"translate(\" + barWidth / 2 + \",0)\";\n```", "```js\nbarGroups.append('text')\n    .text(function(d) { return d; })\n    .attr({\n        fill: 'white',\n        'alignment-baseline': 'before-edge',\n        'text-anchor': 'middle',\n        transform: textTranslator\n    })\n    .style('font', '10px sans-serif');\n```", "```js\nvar graphWidth = data.length * (barWidth + barPadding)\n                 - barPadding;\n```", "```js\nvar margin = { top: 10, right: 10, bottom: 10, left: 50 };\n```", "```js\nvar totalWidth = graphWidth + margin.left + margin.right;\nvar totalHeight = maxValue + margin.top + margin.bottom;\n```", "```js\n    var svg = d3.select('body')\n        .append('svg')\n        .attr({ width: totalWidth, height: totalHeight });\n```", "```js\nsvg.append('rect').attr({\n    width: totalWidth,\n    height: totalHeight,\n    fill: 'white',\n    stroke: 'black',\n    'stroke-width': 1\n});\n```", "```js\nvar graphGroup = svg\n    .append('g')\n    .attr('transform', 'translate(' + margin.left + ',' +\n                                      margin.top + \")\");\n```", "```js\ngraphGroup.append('rect').attr({\n    fill: 'rgba(0,0,0,0.1)', \n    width: totalWidth â€“ (margin.left + margin.right),\n    height: totalHeight - (margin.bottom + margin.top)\n});\n```", "```js\nvar scale = d3.scale\n    .linear()\n    .domain([0, maxValue])\n    .range([0, width]);\n\nvar axis = d3.svg.axis().scale(scale);\nsvg.call(axis);\n```", "```js\nvar axisGroup = svg.append('g');\nvar axis = d3.svg.axis().scale(scale);\n\nvar axis = d3.svg.axis().scale(scale);\nvar axisNodes = axisGroup.call(axis);\nvar domain = axisNodes.selectAll('.domain');\ndomain.attr({\n    fill: 'none',\n    'stroke-width': 1,\n    stroke: 'black'\n});\nvar ticks = axisNodes.selectAll('.tick line');\nticks.attr({\n    fill: 'none',\n    'stroke-width': 1,\n    stroke: 'black'\n});\n```", "```js\nvar axis = d3.svg.axis()\n    .orient('top')\n    .scale(scale);\n```", "```js\naxisGroup.attr('transform', 'translate(0,50)');\n```", "```js\nvar scale = d3.scale\n    .linear()\n    .domain([maxValue, 0])\n    .range([0, maxValue]);\n```", "```js\nvar leftAxisGroup = svg.append('g');\nvar axisPadding = 3;\nleftAxisGroup.attr({ \n    transform: 'translate(' + (margin.left - axisPadding) + ',' \n                            + margin.top + ')' });\n```"]