["```js\nimport { inject } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class ExampleClass {\n    constructor(EventAggregator) {\n        this.ea = EventAggregator;\n    }\n}\n```", "```js\nthis.ea.publish('dataRetrievingEvent', {message: 'Loading...don't close the window!' \n```", "```js\nlet subscription = this.ea.subscribe('dataRetrievingEvent', response => {\n    console.log(response);\n    // This should yield: Object {message: \"Loading...don't close the window!\"}\n});\n```", "```js\nimport { inject } from 'aurelia-framework';\nimport { EventAggregator } from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class ExampleClass {\n    constructor(EventAggregator) {\n        this.ea = EventAggregator;\n    }\n\n    attached() {\n        this.subscriber = this.ea.subscribe('dataRetrievingEvent', response => {\n            console.log(response.message);\n        });\n    }\n\n    detached() {\n        this.subscriber.dispose();\n    }\n}\n```", "```js\nattached() {\n     this.subscriber = this.ea.subscribeOnce('dataRetrievingEvent', response => {\n         console.log(response.message);\n     });\n}\n```", "```js\n npm install aurelia-i18n --save\n```", "```js\nnpm install i18next i18next-xhr-backend --save\n```", "```js\nconst coreBundles = {\n    bootstrap: [/* many options here */],\n    aurelia: [\n      /* many options here too*/\n      'aurelia-i18n' // add aurelia-i18n to the array\n    ]\n  }\n```", "```js\n jspm install aurelia-i18n\n```", "```js\njspm install npm:i18next-xhr-backend\n```", "```js\nnpm install aurelia-i18n --save\nnpm install i18next i18next-xhr-backend --save\n```", "```js\n{\n    \"name\": \"i18next\",\n    \"path\": \"../node_modules/i18next/dist/umd\",\n    \"main\": \"i18next\"\n  },\n  {\n    \"name\": \"aurelia-i18n\",\n    \"path\": \"../node_modules/aurelia-i18n/dist/amd\",\n    \"main\": \"aurelia-i18n\"\n  },\n  {\n    \"name\": \"i18next-xhr-backend\",\n    \"path\": \"../node_modules/i18next-xhr-backend/dist/umd\",\n    \"main\": \"i18nextXHRBackend\"\n  }\n```", "```js\n <body aurelia-app=\"main\">\n      /* Some content */\n </body>\n```", "```js\n {\n    \"welcome\": \"Welcome to FIFA WC 18!\",\n    \"user_male\": \"Mr.\",\n    \"user_female\": \"Mss.\",\n    \"time_remaining\": \"Time Remaining : {{time}}\"\n  }\n```", "```js\n {\n    \"welcome\": \"Bienvenido a FIFA WC 18!\",\n    \"user_male\": \"Sr.\",\n    \"user_female\": \"Sra.\",\n    \"time_remaining\": \"Tiempo pendiente : {{time}}\"\n  }\n```", "```js\nimport {I18N, TCustomAttribute} from 'aurelia-i18n';\nimport Backend from 'i18next-xhr-backend'; \n```", "```js\naurelia.use\n  .standardConfiguration()\n  .plugin('aurelia-materialize-bridge', b => b.useAll())\n  .plugin()/* <<<<  You must create a new plugin pipe*/\n  .feature('resources');\n```", "```js\n.plugin('aurelia-i18n', (instance) => {\n            let aliases = ['t', 'i18n'];\n            TCustomAttribute.configureAliases(aliases);\n            instance.i18next.use(Backend);\n\n            return instance.setup({\n              backend: {                                  \n                loadPath: './locales/{{lng}}/{{ns}}.json',\n              },\n              attributes: aliases,\n              lng : 'es',\n              fallbackLng : 'en',\n              debug : false\n            });\n});\n```", "```js\nlet aliases = ['t', 'i18n'];\nTCustomAttribute.configureAliases(aliases);\n```", "```js\ninstance.i18next.use(Backend);\n```", "```js\nbackend: {  // <-- configure backend\n   loadPath: './locales/{{lng}}/{{ns}}.json', // <-- Our location files path\n},\n```", "```js\nattributes: aliases, <<-- Predefined aliases\nlng : 'es', // <<-- Default language to use (overrides language detection).\nfallbackLng : 'en',// <<-- Language to use is current location language is not available\ndebug : false // <<-- Log info level in console output\n```", "```js\nimport {I18N} from 'aurelia-i18n';\nimport { inject } from 'aurelia-dependency-injection';\n\n@inject(I18n) export class WelcomePageComponent { constructor(i18n) { this.i18n = i18n; this.i18n\n .setLocale('es-ES')\n .then( () => {}); } ... }\n```", "```js\nimport {I18N} from 'aurelia-i18n';\n\n@inject(I18n)\nexport class WelcomePageComponent {\n     constructor(i18n) {\n       this.i18n = i18n;\n     }\n      ...\n}\n```", "```js\nconsole.log(this.i18n.getLocale());\n```", "```js\n<h2 t=\"welcome\">Welcome to FIFA WX 18</h2>\n```", "```js\n<h2 i18n=\"welcome\">Welcome to FIFA WX 18</h2>\n```", "```js\n\"time_remaining\": \"Time remaining : <b>{{time}}</b>\"\n```", "```js\n<label t=\"time_remaining\">Time remaining : {{time}}</label>\n```", "```js\n<label t=\"[html]time_remaining\">Time remaining : {{time}}</label>\n```", "```js\nexport class CustomLogAppender {\n\n  constructor(){}\n  debug(logger, message, ...rest){\n    console.debug(`DEBUG [${logger.id}] ${message}`, ...rest);\n  }\n  info(logger, message, ...rest){\n    console.info(`INFO [${logger.id}] ${message}`, ...rest);\n  }\n  warn(logger, message, ...rest){\n    console.warn(`WARN [${logger.id}] ${message}`, ...rest); \n  }\n  error(logger, message, ...rest){\n    console.error(`ERROR [${logger.id}] ${message}`, ...rest);\n  }\n}\n```", "```js\nimport {LogManager} from 'aurelia-framework';\n```", "```js\nimport {CustomLogAppender} from './resources/custom-log-appender';\n```", "```js\nLogManager.addAppender(new CustomLogAppender());\nLogManager.setLevel(LogManager.logLevel.debug);\n```", "```js\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .developmentLogging() // <-- Logging activated for development env!\n    .plugin('aurelia-animator-css');\n```", "```js\n//environment.js\nexport default {\n  debug: true,\n  testing: false\n};\n```", "```js\nimport environment from './environment';\n\nexport function configure(aurelia) {\n aurelia.use\n     .standardConfiguration()\n     .plugin('aurelia-anumator-css');\n\nif (environment.debug) { \n     aurelia.use.developmentLogging();\n}\n    .\n    .\n    .\n}\n```", "```js\nimport {LogManager} from 'aurelia-framework';\nlet logger = LogManager.getLogger('homePage');\nlogger.debug('me');\n\nexport class HomePage() {\n    activate(){\n       logger.debug(“Enter to home page!!!”);\n    }\n}\n```", "```js\njspm install aurelia-dialog\n```", "```js\n npm install aurelia-dialog --save\n```", "```js\n{\n    dependencies: [\n    // Some content here\n      {\n        \"name\": \"aurelia-dialog\",\n        \"path\": \"../node_modules/aurelia-dialog/dist/amd\",\n        \"main\": \"aurelia-dialog\"\n      }\n    // Some content here too\n    ]\n  }\n```", "```js\n<body aurelia-app=\"main\">\n</body>\n```", "```js\nexport function configure(aurelia) {\n    aurelia.use\n      .standardConfiguration()\n      .developmentLogging()\n      .plugin('aurelia-dialog'); // <<-- Add this plugin!\n```", "```js\n.plugin(PLATFORM.moduleName('aurelia-dialog'), config => { // <<-- PLATFORM.moduleName is mandatory if you are using webpack\n        config.useDefaults();\n        config.settings.lock = true;\n        config.settings.centerHorizontalOnly = false;\n        config.settings.startingZIndex = 5;\n        config.settings.keyboard = true;\n});\n```", "```js\nimport { inject } from 'aurelia-framework'\nimport { DialogController } from 'aurelia-dialog'\n\n@inject(DialogController)\nexport class UserForm {\n  user = { firstName: '',    \n           lastName: '',\n           age: 0\n };\n\n  activate(user){\n    user = user;\n  }\n}\n```", "```js\nimport {DialogService} from 'aurelia-dialog';\n```", "```js\nimport {UserForm} from './user-form';\n```", "```js\nexport class HomeComponent {\n  static inject = [DialogService]; // <<-- Same as use the @inject annotation\n\n  user = { firstName: 'Diego', lastName: 'Arguelles', age: 26 }\n\n  constructor(dialogService) {\n    this.dialogService = dialogService; <<-- We need to inject the service into our component\n  }\n\n  openModal(){\n    this.dialogService.open({ viewModel: UserForm, model: this.user}).whenClosed(response => {\n      if (!response.wasCancelled) {\n        console.log('good - ', response.output);\n      } else {\n        console.log('bad');\n      }\n    });\n  }\n}\n```", "```js\n<template>\n   <button click.trigger = \"openModal()\">New user</button>\n<template>\n```", "```js\nthis.dialogService.open({ viewModel: UserForm, model: this.user}).then();\n```", "```js\nresponse => {\n    //We will get the response value returned by the modal\n    if (!response.wasCancelled) { \n        console.log('All OK - ', response.output); //Should output the recently created user info\n    } else { \n        console.log('Something get wrong!'); \n    } console.log(response.output);\n}\n```", "```js\n<template>\n   <ux-dialog>\n      <ai-dialog-body>\n         <h2>User registration</h2>\n         <input placeholder=\"User name\" model.bind=\"user.firstName\" />\n         <input placeholder=\"User last name\" model.bind=\"user.lastName\" />\n         <input placeholder=\"User age\" model.bind=\"user.age\" /> \n      </ai-dialog-body> \n      <ai-dialog-footer> \n         <button click.trigger = \"controller.cancel()\">Cancel</button> \n         <button click.trigger = \"controller.ok(message)\">Ok</button> \n      </ai-dialog-footer> \n   </ux-dialog> \n</template>\n```", "```js\nai-dialog-overlay.active {\n      background-color: black;\n      opacity: .5;\n}\n```", "```js\nexport class Example {\n      constructor() {\n        this.changeDate();\n        setInterval(() => this.changeDate(), 3000); //<<-- This method will be executed each 3 seconds\n      }\n\n      changeDate() {\n        this.currentDate = new Date(); //<<-- Get the current date\n      }\n}\n```", "```js\n<template>\n      ${currentDate}\n</template>\n```", "```js\nSun Feb 25 2018 14:06:37 GMT-0300 (-03) \n```", "```js\nnpm install moment --save \n```", "```js\nimport moment from 'moment';\n\nexport class DateFormatValueConverter {\n     toView(value) {\n       return moment(value).format('M/D/YYYY h:mm:ss a');\n     }\n}\n```", "```js\n<template>\n      <require from=\"./date-format\"></require> <<-- Path to your value converter\n```", "```js\n<template>\n      <require from=\"./date-format\"></require>\n      ${currentDate | dateFormat} <br/> <<-- Name mapped for our value converter\n</template>\n```", "```js\n2/25/2018 2:25:36 pm\n```", "```js\ntoView(value, format) {\n        return moment(value).format(format);\n}\n```", "```js\n\n${currentDate | dateFormat:'h:mm:ss a'} <br/>\n${currentDate | dateFormat:'M/D/YYYY h:mm:ss a'} <br/>\n${currentDate | dateFormat:'MMMM Mo YYYY'} <br/>\n```", "```js\n2:33:11 pm \n2/25/2018 2:33:11 pm \nFebruary 2nd 2018 \n```", "```js\nexport class ArraySortingValueConverter {\n      toView(array, config) {\n        let sorter = (config.direction || 'ascending') === 'ascending' ? 1 : -1;\n        return array.sort((a, b) => {\n          return (a[config.propertyName] - b[config.propertyName]) * sorter;\n        });\n      }\n}\n```", "```js\nimport {HttpClient} from 'aurelia-http-client';\n\nexport class Example {\n      users = [];\n      activate() {\n        return new HttpClient()\n          .get('https://api.ourorganization.com/users')\n          .then(response => this.users = response.content);\n      }\n}\n```", "```js\n<template>\n      <require from=\"./array-sort\"></require> <<-- Import your value converter\n\n      <div class=\"row\">\n        <div class=\"col-sm-3\" repeat.for=\"user of users | arraySorting: { propertyName: 'code', direction: 'descending' }\">\n            ${user.firstName}\n          </a>\n        </div>\n      </div>\n</template>\n```", "```js\n    <input type=\"text\" value.bind=\"query & throttle:850\">\n```", "```js\n<input type=\"text\" value.bind=\"query & customBehavior:arg1:arg2:arg3\">\n```", "```js\n${value | upperCase & throttle:800 & anotherBehavior:arg1:arg2}\n```", "```js\n<input type=\"text\" value.bind=\"teamCountry & debounce:1000\">\n```", "```js\n <span>${score & oneTime}</span>\n```", "```js\nexport class DynamicExpressionBindingBehavior {  \n\n  bind(binding, source, rawExpression) {\n    console.log('Binding : '+rawExpression)\n  }\n\n  unbind(binding, source) {\n    console.log('Unbinding ')\n  }\n}\n```", "```js\nUser 1 : value for a)33; b)23; c)32\n```", "```js\nUser 2: value for a)49 b)34j c)12\n```", "```js\n49 + \"34j\" + 12 = \"4934j12\"\n```", "```js\nnpm install aurelia-validation --save\n```", "```js\njspm install aurelia-validation\n```", "```js\nexport function configure(aurelia) {\n    aurelia.use\n      .standardConfiguration()\n      .developmentLogging()\n      .plugin('aurelia-validation'); // <<-- Add this plugin!\n```", "```js\n    {\n      \"name\": \"aurelia-validation\",\n      \"path\": \"../node_modules/aurelia-validation/dist/amd\",\n      \"main\": \"aurelia-validation\"\n    }\n```", "```js\n ValidationRules.ensure('myValidatedProperty')\n```", "```js\n ValidationRules.ensure(u => u.firstName)\n```", "```js\n ValidationRules.ensure(u => u.firstName).displayName('User name')\nError message: The user name is required.\n```", "```js\n    ValidationRules.ensure('u => u.firstName').displayName('First name')\n        .required().withMessage(`\\${$firstName} cannot be blank.`);\n```", "```js\n   // User.js class inside our models folder\n    export class User {\n      firstName = '';\n      lastName = '';\n    }\n\n   export const UserRules = ValidationRules\n      .ensure('firstName').required()\n      .ensure('lastName').required()\n      .on(User);\n```", "```js\nimport { inject, NewInstance } from 'aurelia-dependency-injection';\nimport { ValidationController } from 'aurelia-validation';\nimport { User, UserRules } from '../models/User'\n\n@inject(NewInstance.of(ValidationController))\nexport class UserRegisterForm {\n    constructor(userValidationController) {\n      this.user = new User(); // 1\n      this.formValidator = userValidationController; //2\n      this.formValidator.addObject(this.user, UserRules); //3\n    }\n}\n```", "```js\nformValidator.validate({ object: user, propertyName: 'firstName', rules: myRules });\n```", "```js\nformValidator.validate()\n      .then(result => {\n        if (result.valid) {\n        // validation succeeded\n      } else {\n```", "```js\n        // validation failed\n      }\n});\n```", "```js\n    <input type=\"text\" value.bind=\"user.firstName & validate\">\n\n    <input type=\"text\" value.bind=\"user.lastName & validate\">\n```", "```js\n<form>\n      <ul if.bind=\"formValidator.errors\">\n        <li repeat.for=\"error of formValidator.errors\">\n          ${error.message}\n        </li>\n      </ul>\n</form>\n```", "```js\n<div validation-errors.bind=\"firstNameErrors\"> \n    <label for=\"firstName\">First Name</label>\n    <input type=\"text\" class=\"form-control\" id=\"firstName\"\n               placeholder=\"First Name\"\n               value.bind=\"user.firstName & validate\">\n    <span class=\"help-block\" repeat.for=\"errorInfo of firstNameErrors\">\n       ${errorInfo.error.message}\n    </span>\n</div>\n```", "```js\n<label datetime=”format:YYYY-MM-DD HH:mm”>${match.date}</label>\n```", "```js\nimport {customAttribute, bindable, inject} from 'aurelia-framework';\nimport moment from 'moment';\n\n@inject(Element, moment); <<-- We already know how moment js works\n@customAttribute('datetime'); <<-- The attribute name to refer it\n@bindable('format'); <<-- The property we pass as parameter\nexport class Datetime {\n\n    constructor(element, moment) {\n        this.element = element;\n        this.moment = moment;\n    }\n\n    bind() {\n        this.element.innerHTML = moment(this.element.innerHTML).format(this.format);\n    }\n}\n```", "```js\nimport {bindable, inject} from 'aurelia-framework';\nimport moment from 'moment';\n\n@inject(Element, moment);\nexport class DatetimeCustomAttribute {\n\n    @bindable format; // <<-- The value property can also be placed inside the class declaration\n\n    constructor(element, moment) {\n        this.element = element;\n        this.moment = moment;\n    }\n\n    bind() {\n        this.element.innerHTML = moment(this.element.innerHTML).format(this.format);\n    }\n}\n```", "```js\n<require from=\"./datetime\"></require>\n<label datetime=\"format:YYYY-MM-DD HH:mm\">${match.date}</label>\n```", "```js\nexport function configure(aurelia) {\n    aurelia.globalResources(\n        \"./datetime\"\n    )\n}\n```", "```js\n// \"firstName\" and \"lastName\" will be observed.\nget completeName() {\n  return `${this.firstName} ${this.lastName}`;\n}\n```", "```js\nimport {computedFrom} from 'aurelia-framework';\n\n    export class User {\n      firstName = 'Diego';\n      lastName = 'Arguelles';\n\n      @computedFrom('firstName', 'lastName')\n      get completeName() {\n        return `${this.firstName} ${this.lastName}`;\n      }\n    }\n```", "```js\n// \"isLoggedIn\", \"user\" and \"user.userName\" will be observed.\n@computedFrom('userName')\nget userName() {\n  return this.isLoggedIn ? this.userName : '(Visitor)';\n}\n```"]