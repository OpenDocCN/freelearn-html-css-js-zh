["```js\n    function square(x) {\n      return x * x;\n    }\n    ```", "```js\n    describe('Square method', function() {\n      it('returns 4 for 2', function () {\n        expect(square(2)).toBe(4);\n      });\n      it('returns 9 for 3', function () {\n        expect(square(3)).toBe(9);\n      });\n      it('returns 16 for 4', function () {\n        expect(square(4)).toBe(16);\n      });\n    });\n    ```", "```js\n    jasmine: {\n      src: 'main.js',\n      options: {\n        specs: 'tests.js'\n      }\n    }\n    ```", "```js\n    Running \"jasmine:src\" (jasmine) task\n    Testing jasmine specs via PhantomJS\n\n     Square method\n     ✓ returns 4 for 2\n     ✓ returns 9 for 3\n     ✓ returns 16 for 4\n\n    3 specs in 0.015s.\n    >> 0 failures\n\n    ```", "```js\njasmine: {\n  src: 'main.js',\n  options: {\n    specs: 'tests.js',\n    helpers: 'helpers.js'\n  }\n}\n```", "```js\njasmine: {\n  src: 'main.js',\n  options: {\n    specs: 'tests.js',\n    vendor: ['lodash.min.js']\n  }\n}\n```", "```js\njasmine: {\n  src: 'main.js',\n  options: {\n    specs: 'tests.js',\n    styles: 'styles.css'\n  }\n}\n```", "```js\n    <!doctype html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <title>Jasmine Spec Runner</title>\n      <link rel=\"shortcut icon\" type=\"image/png\" href=\"<%= temp %>/jasmine_favicon.png\">\n      <% css.forEach(function(style){ %>\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"<%= style %>\">\n      <% }) %>\n    </head>\n    <body>\n      <% with (scripts) { %>\n        <% [].concat(polyfills, jasmine, boot, vendor, helpers, src, specs,reporters).forEach(function(script){ %>\n        <script src=\"img/<%= script %>\"></script>\n        <% }) %>\n      <% }; %>\n      <div id=\"test\">Test</div>\n    </body>\n    </html>\n    ```", "```js\n    jasmine: {\n      src: 'main.js',\n      options: {\n        specs: 'tests.js',\n        template: 'runner.tmpl'\n      }\n    }\n    ```", "```js\n    describe('Test element', function() {\n      it('has test text', function () {\n        expect(window.test.innerHTML).toBe(\"Test\");\n      });\n    });\n    ```", "```js\n    function square(x) {\n      return x * x;\n    }\n    ```", "```js\n    QUnit.test(\"Square method functionality\", function(assert) {\n      assert.equal(square(2), 4);\n      assert.equal(square(3), 9);\n      assert.equal(square(4), 16);\n    });\n    ```", "```js\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>QUnit basic example</title>\n        <link rel=\"stylesheet\" href=\"qunit-1.15.0.css\">\n        <script src=\"img/qunit-1.15.0.js\"></script>\n        <script src=\"img/main.js\"></script>\n        <script src=\"img/tests.js\"></script>\n      </head>\n      <body>\n        <div id=\"qunit\"></div>\n        <div id=\"qunit-fixture\"></div>\n      </body>\n    </html>\n    ```", "```js\n    qunit: {\n      main: {\n        src: 'test.html'\n      }\n    }\n    ```", "```js\n    Running \"qunit:main\" (qunit) task\n    Testing test.html .OK\n    >> 3 assertions passed (18ms)\n\n    ```", "```js\n    connect: {\n      server: {\n        options: {\n          base: 'www'\n        }\n      }\n    }\n    ```", "```js\n    qunit: {\n      main: {\n        options: {\n          urls: ['http://localhost:8000/test.html']\n        }\n      }\n    }\n    ```", "```js\n    Running \"connect:server\" (connect) task\n    Started connect web server on http://0.0.0.0:8000\n\n    Running \"qunit:main\" (qunit) task\n    Testing http://localhost:8000/test.html .OK\n    >> 3 assertions passed (19ms)\n\n    ```", "```js\nqunit: {\n  main: {\n    src: 'test.html',\n    options: {\n      force: true\n    }\n  }\n}\n```", "```js\nqunit: {\n  main: {\n    src: 'test.html',\n    options: {\n      console: false\n    }\n  }\n}\n```", "```js\nqunit: {\n  main: {\n    src: 'test.html',\n    options: {\n      '--load-images': false\n    }\n  }\n}\n```", "```js\n    module.exports.square = function (x) {\n      return x * x;\n    }\n    ```", "```js\n    var square = require('./main').square;\n\n    module.exports.testSquare = {\n      'Square method returns 4 for 2': function (test) {\n        test.equal(square(2), 4);\n        test.done();\n      },\n      'Square method returns 9 for 3': function (test) {\n        test.equal(square(2), 4);\n        test.done();\n      },\n      'Square method returns 16 for 4': function (test) {\n        test.equal(square(2), 4);\n        test.done();\n      }\n    }\n    ```", "```js\n    nodeunit: {\n      main: {\n        src: 'tests.js'\n      }\n    }\n    ```", "```js\n    Running \"nodeunit:main\" (nodeunit) task\n    Testing tests.js...OK\n    >> 3 assertions passed (10ms)\n\n    ```", "```js\nnodeunit: {\n  main: {\n    src: 'tests.js',\n    options: {\n      reporter: 'html'\n    }\n  }\n}\n```", "```js\nnodeunit: {\n  main: {\n    src: 'tests.js',\n    options: {\n      reporterOutput: 'result.txt'\n    }\n  }\n}\n```", "```js\n    function square(x) {\n      return x * x;\n    }\n    ```", "```js\n    describe('Square method', function() {\n      it('returns 4 for 2', function () {\n        expect(square(2)).to.be(4);\n      });\n      it('returns 9 for 3', function () {\n        expect(square(3)).to.be(9);\n      });\n      it('returns 16 for 4', function () {\n        expect(square(4)).to.be(16);\n      });\n    });\n    ```", "```js\n    <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Mocha Tests</title>\n        <link rel=\"stylesheet\" href=\"mocha.css\" />\n      </head>\n      <body>\n        <div id=\"mocha\"></div>\n        <script src=\"img/main.js\"></script>\n        <script src=\"img/expect.js\"></script>\n        <script src=\"img/mocha.js\"></script>\n        <script>\n          mocha.setup('bdd');\n        </script>\n        <script src=\"img/tests.js\"></script>\n      </body>\n    </html>\n    ```", "```js\n    mocha: {\n      main: {\n        src: 'test.html',\n        options: {\n          run: true\n        }  \n      }\n    }\n    ```", "```js\n    Running \"mocha:main\" (mocha) task\n    Testing: test.html\n\n     3 passing (105ms)\n    >> 3 passed! (0.10s)\n\n    ```", "```js\n    connect: {\n      server: {\n        options: {\n          base: 'www'\n        }\n      }\n    }\n    ```", "```js\n    mocha: {\n      main: {\n        options: {\n          run: true,\n          urls: ['http://localhost:8000/test.html']\n        }  \n      }\n    }\n    ```", "```js\n    Running \"connect:server\" (connect) task\n    Started connect web server on http://0.0.0.0:8000\n\n    Running \"mocha:main\" (mocha) task\n    Testing: http://localhost:8000/test.html\n\n     3 passing (110ms)\n    >> 3 passed! (0.11s)\n\n    ```", "```js\nmocha: {\n  main: {\n    src: 'test.html',\n    dest: 'result.txt',\n    options: {\n      run: true\n    }\n  }\n}\n```", "```js\nmocha: {\n  main: {\n    src: 'test.html',\n    options: {\n      run: true,\n      log: true\n    }  \n  }\n}\n```", "```js\nmocha: {\n  main: {\n    src: 'test.html',\n    options: {\n      run: true,\n      logErrors: true\n    }  \n  }\n}\n```", "```js\nmocha: {\n  main: {\n    src: 'test.html',\n    options: {\n      run: true,\n      mocha: {\n grep: '2'\n }\n    }  \n  }\n}\n```", "```js\nmocha: {\n  main: {\n    src: 'test.html',\n    options: {\n      run: true,\n      reporter: 'JSON'\n    }  \n  }\n}\n```", "```js\n    module.exports.square = function (x) {\n      return x * x;\n    }\n    ```", "```js\n    var assert = require('assert');\n    var square = require('./main').square;\n\n    describe('Square method', function() {\n      it('returns 4 for 2', function () {\n        assert.equal(square(2), 4);\n      });\n      it('returns 9 for 3', function () {\n        assert.equal(square(3), 9);\n      });\n      it('returns 16 for 4', function () {\n        assert.equal(square(4), 16);\n      });\n    });\n    ```", "```js\n    mochaTest: {\n      main: {\n        src: 'tests.js'\n      }\n    }\n    ```", "```js\n    Running \"mochaTest:main\" (mochaTest) task\n\n     3 passing (6ms)\n\n    ```", "```js\nmochaTest: {\n  main: {\n    src: 'tests.js',\n    options: {\n      reporter: 'json'\n    }\n  }\n}\n```", "```js\nmochaTest: {\n  main: {\n    src: 'tests.js',\n    options: {\n      grep: '2'\n    }\n  }\n}\n```", "```js\nmochaTest: {\n  main: {\n    src: 'tests.js',\n    options: {\n      ignoreLeaks: false,\n globals: ['allowedGlobal']\n    }\n  }\n}\n```", "```js\nmochaTest: {\n  main: {\n    src: 'tests.js',\n    options: {\n      captureFile: 'result.txt'\n    }\n  }\n}\n```", "```js\nmochaTest: {\n  main: {\n    src: 'tests.js',\n    options: {\n      require: ['should']\n    }\n  }\n}\n```", "```js\n    module.exports = {\n      square: function (x) {\n        return x * x;\n      },\n      cube: function (x) {\n        return x * x * x;\n      }\n    }\n    ```", "```js\n    var assert = require('assert');\n    var square = require('../src/main').square;\n\n    describe('Square method', function() {\n      it('returns 4 for 2', function () {\n        assert.equal(square(2), 4);\n      });\n      it('returns 9 for 3', function () {\n        assert.equal(square(3), 9);\n      });\n      it('returns 16 for 4', function () {\n        assert.equal(square(4), 16);\n      });\n    });\n    ```", "```js\n    blanket: {\n      main: {\n        src: 'src/',\n        dest: 'coverage/src/'\n      }\n    }\n    ```", "```js\n    copy: {\n     tests: {\n     src: 'tests/main.js',\n     dest: 'coverage/tests/main.js'\n     }\n    }\n\n    ```", "```js\n    mochaTest: {\n      main: {\n        options: {\n          quiet: true,\n          reporter: 'html-cov',\n          captureFile: 'result.html'\n        },\n        src: 'coverage/tests/main.js'\n      }\n    }\n    ```", "```js\n    mochaTest: {\n      main: {\n        options: {\n          quiet: true,\n          reporter: 'mocha-lcov-reporter',\n     captureFile: 'result.lcov'\n        },\n        src: 'coverage/tests/main.js'\n      }\n    }\n    ```", "```js\n    function square(x) {\n      return x * x;\n    }\n    function cube(x) {\n      return x * x * x;\n    }\n    ```", "```js\n    describe('Square method', function() {\n      it('returns 4 for 2', function () {\n        expect(square(2)).to.be(4);\n      });\n      it('returns 9 for 3', function () {\n        expect(square(3)).to.be(9);\n      });\n      it('returns 16 for 4', function () {\n        expect(square(4)).to.be(16);\n      });\n    });\n    ```", "```js\n    <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Mocha Tests</title>\n        <link rel=\"stylesheet\" href=\"mocha.css\" />\n      </head>\n      <body>\n        <div id=\"mocha\"></div>\n        <script src=\"img/expect.js\"></script>\n        <script src=\"img/mocha.js\"></script>\n        <script src=\"img/main.js\" data-cover></script>\n        <script src=\"img/blanket.js\"></script>\n        <script src=\"img/mocha-blanket.js\"></script>\n        <script>\n          mocha.setup('bdd');\n          if (window.PHANTOMJS) {\n            blanket.options('reporter', 'grunt-reporter.js');\n          }\n        </script>\n        <script src=\"img/tests.js\"></script>\n      </body>\n    </html>\n    ```", "```js\n    blanket_mocha: {\n      main: {\n        src: ['test.html'],\n        options: {\n          threshold: 70\n        }\n      }\n    }\n    ```", "```js\n    Running \"blanket_mocha:main\" (blanket_mocha) task\n    Testing: test.html\n\n     3 passing (3ms)\n\n    Per-File Coverage Results: (70% minimum)\n    PASS : 1 files passed coverage\n\n    Unit Test Results: 3 specs passed! (0.00s)\n    >> No issues found.\n\n    ```", "```js\nblanket_mocha: {\n  main: {\n    src: ['test.html'],\n    options: {\n      threshold: 70,\n      globalThreshold: 70\n    }\n  }\n}\n```", "```js\nblanket_mocha: {\n  main: {\n    src: ['test.html'],\n    options: {\n      threshold: 70,\n      customThreshold: {\n 'main.js': 70\n }\n    }\n  }\n}\n```", "```js\nblanket_mocha: {\n  main: {\n    src: ['test.html'],\n    options: {\n      threshold: 70,\n      modulePattern: './src/(.*?)/',\n moduleThreshold: 70,\n customModuleThreshold: {\n one: 60\n }\n    }\n  }\n}\n```", "```js\n    function square(x) {\n      return x * x;\n    }\n    function cube(x) {\n      return x * x * x;\n    }\n    ```", "```js\n    QUnit.test(\"Square method functionality\", function(assert) {\n      assert.equal(square(2), 4);\n      assert.equal(square(3), 9);\n      assert.equal(square(4), 16);\n    });\n    ```", "```js\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <title>QUnit basic example</title>\n        <link rel=\"stylesheet\" href=\"qunit-1.15.0.css\">\n        <script src=\"img/qunit-1.15.0.js\"></script>\n        <script src=\"img/main.js\"></script>\n        <script src=\"img/tests.js\"></script>\n      </head>\n      <body>\n        <div id=\"qunit\"></div>\n        <div id=\"qunit-fixture\"></div>\n      </body>\n    </html>\n    ```", "```js\n    qunit: {\n      main: {\n        options: {\n          coverage: {\n            src: 'main.js',\n            instrumentedFiles: 'temp/'\n          }\n        },\n        src: 'test.html'\n      }\n    }\n    ```", "```js\n    Running \"qunit:main\" (qunit) task\n    Testing test.html .OK\n    >> 3 assertions passed (20ms)\n    >> Coverage:\n    >> -  Lines: 75%\n    >> -  Statements: 75%\n    >> -  Functions: 50%\n    >> -  Branches: 100%\n\n    ```", "```js\nqunit: {\n  main: {\n    options: {\n      coverage: {\n        src: 'main.js',\n        instrumentedFiles: 'temp/',\n        htmlReport: 'html/',\n coberturaReport: 'corb/',\n lcovReport: 'lcov/',\n cloverReport: 'clover/'\n      }\n    },\n    src: 'test.html'\n  }\n}\n```", "```js\nqunit: {\n  main: {\n    options: {\n      coverage: {\n        src: 'main.js',\n        instrumentedFiles: 'temp/',\n        linesThresholdPct: 50,\n statementsThresholdPct: 60,\n functionsThresholdPct: 70,\n branchesThresholdPct: 80\n      }\n    },\n    src: 'test.html'\n  }\n}\n```"]