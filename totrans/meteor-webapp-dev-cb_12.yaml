- en: Chapter 12. Creating Useful Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating RESTful web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a complete app with Iron Router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying apps to mobile devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding social sharing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Somewhere along your journey towards learning Meteor, you'll reach a point where
    you will have mastered the fundamentals. At that point, you will want to start
    putting all the fundamentals together into the applications or packages that are
    actually useful. It's a big development world out there, with many opportunities.
    The Meteor landscape is still in its infancy, and if you've followed all (or most)
    of the recipes in this book, you're probably ready to start defining that landscape.
    This last chapter will walk you through four of the most useful recipes that apply
    to most projects. It will give you an even more solid foundation for going out
    on your own to define, discover, and build!
  prefs: []
  type: TYPE_NORMAL
- en: Creating RESTful web services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Alas, alas, the entire development world hasn't caught on to how amazing the
    DDP protocol is (yet!). Data-over-the-wire is an amazing concept, and we believe
    that it (or something like it) is the future of how applications will communicate.
    In the meantime, we have some very useful and well-established protocols that,
    if implemented in our applications, increase the reach and accessibility of our
    apps for other platforms.
  prefs: []
  type: TYPE_NORMAL
- en: The granddaddy of all of these protocols is REST. REST is mature, well-defined,
    and has been implemented in nearly every programming language imaginable. It wouldn't
    surprise us to discover that, if/when we contact an alien race, the first signal
    will be a `POST` request. Given its current status (and our most likely option
    for peaceful interstellar negotiations), we will want to add REST capabilities
    to some of our applications. This recipe will walk you through implementing a
    server-side REST implementation using Iron Router.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we're only dealing with the REST part of an app in this recipe, we don't
    need anything fancy. A simple, standard Meteor app will do, with just a couple
    of server-side files.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the baseline application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open a terminal window, navigate to where you would like your project root
    to be, and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Installing and configuring Postman
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need a way to manually call our REST service, and the Postman plugin/app
    for Chrome is as good as any. If you have your own way of manually calling REST
    services, feel free to use it. If not, here''s how to install Postman:'
  prefs: []
  type: TYPE_NORMAL
- en: In a browser, navigate to [http://getpostman.com](http://getpostman.com) and
    click on the **Get it now** link towards the bottom. A preview of the Postman
    app will pop up, and towards the top-right corner will be a button to install
    Postman. Click on that button, follow the directions, and open Postman.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the request window in Postman, under the **Normal** tab, enter the following
    URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, click on the **Headers** button, and enter the following under the **Header**
    | **Value** sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When complete, your screen should look like the following screenshot:![Installing
    and configuring Postman](img/image00424.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We're now ready to build our REST service and test it using Postman.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Proceed with the following steps to create RESTful web services:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will declare the `Quotes` collection. Create a file named `[project
    root]/server/model/quotes.js` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will add the `writeHeaders` function. Create a file named `[project
    root]/server/api/REST.js` and add the following function to the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will now write the code to handle `GET` requests. At the very top of the
    `REST.js` file, create the following `Router.route()` method call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save all of your changes, make sure your app is running, and click on the **Send**
    button in Postman. In the results section, click on the **Body** tab and the **Raw**
    button. You should see the following message:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00425.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Congratulations, you've just created your first REST service!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s move on to `post` calls. We are going to assume that a `POST` query
    is asking to see any quotes in our `Quotes` collection that are owned by a particular
    user. In `REST.js`, remove the last semicolon from the `.get()` function call
    (we are chaining commands, so it''s important that you do this) and add the following
    code where you removed the semicolon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It doesn''t make much sense to test a `POST` query until we have some data
    in our collection, does it? Let''s take care of that right now by adding support
    for `PUT`. Immediately after the code you just entered (as a continuation of the
    function chain), add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we have a semicolon at the end, which means we're done and can start
    using our fully functional service!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In Postman, change the service type from `GET` to `PUT`. In the input field,
    click on the button labeled **raw**, and enter the following JSON code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your screen should look like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/image00426.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Click on the **Send** button, and in just a few milliseconds, the response
    area will display the following message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Repeat the preceding steps as many times as you would like, varying the quote/author
    and owner as desired.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can now test the `POST` query. Change the service type from `PUT` to `POST`,
    and enter the following JSON in the input field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click on the **Send** button, and on the output window, click on the **Pretty**
    button. The output will be some well-formatted JSON with at least one entry, similar
    to that in the following screenshot:![How to do it...](img/image00427.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have just written a simple yet fully functional REST service in Meteor!
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The heavy lifting for this recipe is done by Iron Router. When we add the `iron:router`
    package, that package listens for all incoming requests on the server side. We
    configured Iron Router to listen on the `http://[yourapp.url]/api/` route for
    the `GET`, `POST`, and `PUT` requests. To get Iron Router to listen on that particular
    route, we used the `Router.route(''/api''...)` method call. Importantly, we declared
    that, that route is to be handled on the server side using the `{where: ''server''}`
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: Chaining each type of request to the `.route()` call, we used the `.get()`,
    `.post()`, and `.put()` method calls. In each of these, we can read the JSON data
    passed in with the request by referencing `this.request.body.[key]`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we are able to send a response by using Iron Router's `response` object,
    which we used to form the headers and to send messages back to the calling client.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As usual, we''ve tried to keep the functionality to a minimum, to reduce the
    signal-to-noise of what this recipe is about. There''s enough here, however, to
    give you a good taste of what is possible with REST services using Iron Router.
    If you would like more information and specifics on what the RESTful functions
    in Iron Router can do, please visit the Iron Router guide at: [https://github.com/iron-meteor/iron-router/blob/devel/Guide.md#server-routing](https://github.com/iron-meteor/iron-router/blob/devel/Guide.md#server-routing).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a multipage application with Iron Router* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a complete app with Iron Router* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a complete app with Iron Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From nearly the beginning of Meteor, the development emphasis has been on "smart"
    client-based applications. We left the server-dominated world behind a long time
    ago, and as a result, the single-page model is extremely well-supported inside
    the Meteor development stack.
  prefs: []
  type: TYPE_NORMAL
- en: Essential to this type of application is the `iron:router` package ([https://atmospherejs.com/iron/router](https://atmospherejs.com/iron/router)).
    Yes, you technically could build a multi-functional, mobile-first app without
    Iron Router, but it would be much more time consuming and complex by comparison.
    Think of Iron Router as the equivalent of using a microwave versus cooking outdoors
    on a campfire. With no utensils. In a rainstorm. With rabies-carrying raccoons
    all up in your business. Okay, okay, maybe it's not that bad, but you get the
    point—you should use Iron Router.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will walk you through the building of a fully functional, quote
    tracking service with a single-page app frontend built using Iron Router.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We would usually add a lot of preparation steps to a recipe, but in this one,
    we need to build everything in one go as part of the recipe. As such, we are only
    going to add the bare minimum here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal window, navigate to where you would like your application root
    to be, and enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We've got a lot of work to do, so let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The major sections of this recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the top `navbar`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding user authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the `Quotes` collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Iron Router routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating page transition animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying the `Quotes` collection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and editing `Quotes`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the App
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There will be a little crossover from section to section, but we should be able
    to keep things fairly clean, so if you would like to switch out some functionality
    or add some features, feel free to do so as we move along.
  prefs: []
  type: TYPE_NORMAL
- en: First up, we need to create the top `navbar`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will be using the standard Bootstrap `navbar` elements because we don't want
    to spend a large chunk of time with CSS styling. Once you're more comfortable
    with CSS, you can extend or replace the Bootstrap styling and make it your own.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First, since this is a mobile-oriented app, let''s set our headers, and use
    a Google font. Create a new file named `[project root]/client/header.html` and
    add the following declarations:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new file named `[project root]/client/layout.html` and add the following
    template, which will act as the foundation for our navigation toolbar:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will want to temporarily add a `body` element afterwards, just so we can
    check the display (we will remove it when we implement `iron:router`):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, we have some minor CSS to add, to make sure everything upcoming runs
    smoothly. Create a file named `[project root]/client/styles.css` and add the following
    CSS declarations:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we need to add user authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Because we''ve had experience with it in the past, we will enable authentication
    using Twitter. We will also use some stylized login buttons that fit in with our
    Bootstrap toolbar. Open a terminal window, navigate to your project root, and
    enter the following commands:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to add the `loginButtons` template to our toolbar. Open `[project
    root]/client/layout.html` and locate the comment that reads as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace this comment with the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and navigate to your app in a browser. The top-right corner
    will contain a **Configure Twitter** button. Click on this button and configure
    Twitter according to the instructions, just as we did in the *Implementing OAuth
    accounts packages* recipe in [Chapter 10](part0079.xhtml#aid-2BASE1 "Chapter 10. Working
    with Accounts"), *Working with Accounts*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After configuration, you may want test the login with your Twitter account.
    If everything is satisfactory, we can move on to the meat of our application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's add the `Quotes` collection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''re definitely ready to add our `Quotes` collection, but we want to have
    some control over what records will be sent to the client, based on whether the
    user is logged in or not. To accomplish this, we need to remove `autopublish`.
    In a terminal window, in our project root directory, enter the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a file named `[project root]/both/model.js` and add the following
    line to that file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ordinarily, we would add a `subscribe` command in a client-only file and a
    `publish` command in a server-only file, but the logic is so simple that we''ll
    just add them directly to the `model.js` file in this case. Add the following
    code to `model.js` and save your changes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Up next, we need to add our Iron Router routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you add Iron Router, the changes needed in the running Meteor instance
    are pretty major. Technically, you could add Iron Router without stopping your
    app, but we recommend stopping your Meteor app while installing and configuring
    Iron Router.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once you''ve stopped your app, enter the following command in the terminal
    window:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s now declare our default layout template. Create a file named `[project
    root]/both/router.js` and add the following line:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that our layout template is being called by Iron Router, we no longer need
    the body element we temporarily put in the `layout.html` file. Open `[project
    root]/client/layout.html` and remove the entire `<body>...</body>` segment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We also have a placeholder in `layout.html` for our application pages, which
    we need to fill in with the customary Iron Router yield directive. In `layout.html`,
    locate the following line:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace that line with the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have two routes to create, so let''s do that now. Open `[project root]/both/router.js`
    and add the following `Router.map` declaration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ve created our routes, and now we need to create placeholder templates
    for those routes. Create a file named `[project root]/client/main.html` and add
    the following template:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a file named `[project root]/client/detail.html` and add the following
    template:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can now start your app back up (enter the `meteor` command in your terminal)
    and test the routes. As you navigate to `http://localhost:3000` and to `http://localhost:3000/quote/1234`,
    you should see pages similar to those in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00428.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We will now create page transition animations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There''s an excellent Atmosphere package out there called `momentum`. With
    an Iron Router-specific package created by Percolate Studios, we can extend `momentum`
    to do Iron Router route transitions with very little fuss. In a terminal window,
    enter the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a file named `[project root]/client/transitions.js` and add the following
    transition declaration as a `Template` helper:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to surround our `{{> yield}}` inclusion with the `momentum` template
    helper. Open `layout.html` and add the following wrapper around the inclusion:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your changes and navigate again to `http://localhost:3000/page/1234`. Once
    the page loads, click on the book icon in the top-left corner of the page. The
    main page should slide into place. The reverse animation will occur if you click
    the back button in your browser.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We are now ready to display the `Quotes` collection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will display some light summary information for each quote in our main template
    and then expand that into a lot more detail for the detail template. Let's start
    with the main template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `[project root]/client/main.html`, remove the `<h1>` placeholder tag,
    and add the following code, which iterates over the `Quotes` collection and creates
    group items for each one:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add a couple of helpers to support the previously created template,
    so create a file named `[project root]/client/main.js` and add the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will also need a `click` event handler, which will get us to the `detail`
    page template whenever we click on a quote group item. Add the following code
    to the bottom of the `main.js` file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save your changes. Now let''s programmatically add a couple of entries to the
    `Quotes` collection. Navigate in a browser to `http://localhost:3000/`. Make sure
    that you are logged in with your Twitter account, open the browser console, and
    execute the following command two or so times:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After doing so, your screen should look similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00429.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'If you click on one of the items, the generic detail page should slide into
    view. Let''s now take care of the `detail` page template, so that it will display
    the details of our quotes. Open the `[project root]/client/detail.html` file and
    replace the template contents with the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save your changes and click on one of the placeholder quotes. You should see
    a screen come into view that looks similar to the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00430.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The tags aren''t showing up because we haven''t added the necessary helpers
    yet. Create a file named `[project root]/client/detail.js` and add the following
    helpers declaration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Look back in your browser; the tags should now appear on the detail page template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we've got our display taken care of, let's add the ability to edit
    and insert new `quote` objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, let''s adjust the `detail.html` file and add an editing toggle button.
    Open `detail.html` and add the following `div` element just before the last `</div>`
    tag:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let''s add the input fields for editing/inserting. In the same `detail.html`
    file, in the `{{#if editing}}` section, add the title input field. Do this using
    the Bootstrap `input-group` styling, like so:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next is the `input-group` element for the `quote` body. Add the following just
    after the `title` group in the preceding code snippet:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need an `input-group` element for the author. Add that just below the `quote`
    group, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Last but not least for the template are the tags. Just below the `author` group,
    add the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We have a couple of extra helpers to add. Open `detail.js` and add the following
    two helpers immediately after the `tagsFormatted` helper block, in the `Template.detail.helpers()`
    method (don''t forget the extra comma at the top!):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to add the event handler for toggling between editing and display.
    We also need to add a submit button. So, let''s kill two birds with one stone
    and give our toggle button the ability to turn into a submit button depending
    on the state. At the bottom of `detail.js`, add the following Template `events`
    declaration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save your changes, navigate to display a single quote, and click on the pencil
    icon at the bottom right. You can change the generic quote into a specific quote,
    as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00431.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Click on the checkmark and your changes should be saved, as shown in the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00432.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We''ve taken care of editing; now we need to allow the user to add new quotes.
    The logic we''re going to use will piggyback on our editing. When the "new qoute"
    button is clicked, we will instantly create a new `quote` object in the `Quotes`
    collection and then navigate to the editing screen. Open `[project root]/client/main.html`
    and add the following button group just after the last `{{/each}}` tag, but still
    inside the `list-group` `</div>` tag:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When this button is clicked, we want to insert a new object into the `Quotes`
    collection and then navigate to the editing screen. Open `main.js` and add the
    following event handler inside the `Template.main.events()` method call, just
    after the `.quote-title` event handler (again, don''t forget the comma!):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save all of your changes, navigate to `http://localhost:3000` in a browser,
    and you should see a big blue plus sign at the bottom of the quote group. Click
    on the button and you''ll be taken to a fresh, clean editing screen similar to
    the following sceenshot. Here, you can enter a new quote:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00433.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: With all functionality in place, we are ready to deploy our app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can deploy our app wherever we would like to (please refer to one of the
    many deployment recipes in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Optimizing
    Your Workflow"), *Optimizing Your Workflow* for details), but for this recipe
    we'll pick the easiest/quickest way to deploy, which is directly to the Meteor
    servers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Stop your application from running in the terminal using *Ctrl* + *C* and execute
    the following command, replacing `[your-test-url]` with whatever you would like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In our case, we used the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Wait for your app to build and then upload, and you should get a familiar message,
    similar to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate to your newly-deployed app, configure Twitter if needed (you will
    need a new Twitter app ID, one that points to your new deployment URL), log in,
    and add some quotes. When you''re finished, your app should look similar to the
    following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00434.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Congratulations! You've just created and deployed a complete application in
    eight steps. You should be proud of yourself. Go get a soda or a celebratory slice
    of pizza. You deserve it!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since each of the preceding steps involves recipes from other chapters, we won't
    focus too much on the code specifics. Instead, we'll have a general overview of
    what each step does and add detail where needed.
  prefs: []
  type: TYPE_NORMAL
- en: We first added our top menu/navbar. Using the `navbar` and `navbar-fixed-top`
    CSS classes built in to Bootstrap, we were able to position our `navbar` at the
    top of our screen with very little effort. We added a web font (thank you, Google!)
    and set the parameters for use on mobile devices in our header file.
  prefs: []
  type: TYPE_NORMAL
- en: For user authentication, we relied on the default Meteor packages for accounts
    (specifically the `accounts-twitter` package). For formatting, we used the excellently
    designed `Bootstrap` package created by Ian Martorell. He did the heavy lifting
    for us, so all we had to do was add the package and place our `{{> loginButtons}}`
    inclusion in the correct place.
  prefs: []
  type: TYPE_NORMAL
- en: We declared the `Quotes` collection in a file visible to the client and the
    server, as usual, and added a `publish` function that will only send those results
    to the client which were created by the logged in user.
  prefs: []
  type: TYPE_NORMAL
- en: We added the Iron Router package and took advantage of the `Router.map()` and
    the `layoutTemplate` helpers of that package to implement a baseline layout template,
    a main template, and a details template.
  prefs: []
  type: TYPE_NORMAL
- en: We next leveraged a bit of wizardry from Percolate Studios, called `momentum`.
    They've created a plugin for `momentum` that allows you to wrap the `{{>yield}}`
    directive and point it to a template helper, where we perform some quick logic
    to say, "If we're going to the main page, go left to right. If not, go right to
    left." It's a well-designed package and is very easy to implement!
  prefs: []
  type: TYPE_NORMAL
- en: Our next steps (displaying, editing, and creating quotes) could be considered
    the meat of the recipe, but because all the scaffolding was already in place,
    and because this type of functionality is so easy to implement in Meteor, we simply
    used an `{{#each…}}` directive, some reactive data bindings, and a few `click`
    event handlers to display and edit the records from the `Quotes` collection.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, the most complicated bit in the entire project was taking the `tags`
    property and parsing it into an array using `_.map()`. Think about that for a
    second. The most technically "challenging" part of our entire app was parsing
    a string. Meteor is pretty awesome, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Our last step was deployment, which is also pretty straightforward, since we
    have already done it a few times in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Optimizing
    Your Workflow"), *Optimizing Your Workflow*.
  prefs: []
  type: TYPE_NORMAL
- en: Taken as a whole, the building of an entire app from scratch seems daunting.
    Breaking it down into discreet steps made it not only straightforward, but actually
    pretty fun as well. We hope that you enjoyed it, and we hope that you will take
    this recipe, modify it and expand on it, and create some quick, useful apps of
    your own!
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you examined the finished product of this recipe closely, you probably noticed
    that there is some missing functionality and some refinement that still needs
    to happen. For example, there's currently no way to delete a quote, we can't sort
    by tags/subject/author, and we actually deployed without removing the insecure
    package.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, there are a lot of other recipes from previous chapters we could
    apply to improve the app. We will leave you to that, as you build and expand your
    own applications, and we can't wait to see what you come up with!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Deploying a test app to Meteor* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Optimizing Your Workflow"), *Optimizing Your Workflow*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding Meteor packages* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building a smooth interface with Bootstrap* recipe in [Chapter 3](part0036.xhtml#aid-12AK81
    "Chapter 3. Building Great User Interfaces"), *Building Great User Interfaces*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Implementing OAuth accounts packages* recipe in [Chapter 10](part0079.xhtml#aid-2BASE1
    "Chapter 10. Working with Accounts"), *Working with Accounts*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying apps to mobile devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What good is building single-page apps with all kinds of cool functionality
    if you're only going to make it available as a web page? This recipe will take
    you through all the steps necessary to test and deploy your app to an iOS device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need an app to complete this recipe. We will be using the app created in
    the *Creating a complete app with Iron Router* recipe found earlier in this chapter.
    If you don't have your own app you would like to deploy, please complete that
    recipe first and then come back to this one to learn how to deploy your app.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two parts to deploying your application. The first is testing it on
    a device while using the server-side code that has already been deployed to a
    production URL. The second is to prepare an app build for deployment to the App
    Store.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's set up our mobile app building environment. To deploy to an iOS
    device, you will need an Apple developer license, a machine running Mac OS X,
    and Xcode installed on that machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To obtain an Apple Developer license, visit [https://developer.apple.com/programs/](https://developer.apple.com/programs/)
    and follow the links/instructions to join the iOS Developer program.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you have joined the program, download and install Xcode from [https://developer.apple.com/xcode/downloads/](https://developer.apple.com/xcode/downloads/).
    You will need to properly configure Xcode, including adding certificates and mobile
    provisions as needed. There is a learning curve involved, and we strongly recommend
    that you take some time to learn the development, certification, and the App Store
    submission processes before proceeding.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open a terminal window, navigate to your app directory, and enter the following
    command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This can take a while, but make sure that the SDK is installed properly and
    fix any errors or outstanding installation items as directed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once completed, enter the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You're now properly configured, and can test/deploy your app on an iOS device.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's now test our app on an iOS device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect your iOS device to your machine via a USB cable. Enter the following
    command in the command line:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, `[you-app-url.com]` is replaced by the URL for your deployed server instance.
    In our case, we used the following command (all on one line, of course):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The application will be built and bundled, and then `Xcode` will open. Once
    the app has been compiled in `Xcode`, you will see the following message at the
    top-middle of the `Xcode` app:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00435.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Select your iOS device from the dropdown menu and click the play button, as
    displayed in this screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00436.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Make sure that your device is unlocked, and after some download and code push
    activity, an icon with the Meteor logo will appear on your device. The app will
    quickly open; then, after a short delay, your app will run just as if you pulled
    it up in a browser, but it is running as a full-fledged application on your device!
    Here''s a screenshot of the `Quotes` app running on an iPhone:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00437.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The next step is to build a standalone mobile app file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you''ve tested everything and it''s working as it should be, you will
    want to create an actual app file that you can submit to the Apple App Store.
    When you installed a test app on your mobile device, Meteor auto-created several
    assets for your app. You can view these assets by navigating to the `[project
    root]/.meteor/local/cordova-build/resources` folder, as shown in the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00438.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'You can use these resources or swap them out as needed. Once you''ve got your
    correct icons and splash screens in place, you will need to create a file named
    `[project root]/mobile-config.js` and add the following parameters, at a bare
    minimum:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can, of course, change anything you would like in this file, and there are
    several other parameters you can add to further tweak the installation. See the
    `[project root]/.meteor/local/cordova-build/config.xml` file for a good solid
    list of options.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once you''re satisfied with your configuration, navigate to the root app directory
    and enter the following command in the terminal (all on one line, of course):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For example, our command for the `Quotes` application would look like this
    (all on one line, of course):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once completed, you can open the project directory in `Xcode` (in our case,
    the project directory would be `~/builds/ios/project`) and configure to your heart's
    content. Once everything is correct and running how you would like it, you can
    sign the app and submit it to the Apple App Store.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Meteor leverages the `cordova` library, `Xcode`, and your Mac's operating system
    to bundle, compile, and package your application. The emphasis is to get it into
    `Xcode`, where you can then manipulate the app as you would any native app, testing
    or deploying or submitting to the App Store.
  prefs: []
  type: TYPE_NORMAL
- en: The specifics on what to do inside `Xcode` and while submitting to the Apple
    App Store are beyond the scope of this book. If you would like more Meteor-specific
    app building information, please visit [https://github.com/meteor/meteor/wiki/How-to-submit-your-iOS-app-to-App-Store](https://github.com/meteor/meteor/wiki/How-to-submit-your-iOS-app-to-App-Store).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Everything is brain surgery the first time. Building and deploying a mobile
    app is no exception. Here are some tips to help you troubleshoot, should things
    go wrong:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Do a "dial tone" test**: If your app is being built but is taking forever
    to "boot up" on the device, or if you just get a blank screen, first try making
    sure all of your network and Xcode configurations are correct. You can do this
    by building a brand new Meteor project using `meteor create my-test-app` and deploying
    that barebones app to your mobile device. If it comes up properly, you''ve successfully
    gotten a "dial tone" and you can start finding out which package or piece of code
    is the source of your slow-loading woes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Iron Router configuration must be on point**: If you are using Iron Router
    and you don''t have your Iron Router routes configured properly, the app will
    usually refuse to load. If you are running into problems, implement the bare minimum
    routes, with no fancy code, and see if you can get the routes to come up on the
    device. Again, start simple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use the simulator**: You don''t have to always push to the actual device.
    Using the `meteor run ios` or `meteor run android` commands will boot up a simulator
    in almost no time, where you can test and debug much more quickly than you could
    on an actual device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use Xcode''s logs**: If there''s a problem, check the logs, found in the
    bottom-right panel of Xcode. You can also set breakpoints using Xcode while the
    app is running on your device, which can help you isolate potential problems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Above all else, stick with it. We can assure you that deploying to mobile devices,
    once you're properly configured, is extremely straightforward, with very high
    rates of success. Don't give up! Have faith that very soon it will just "click"
    and you won't have any problems/anxiety about building a mobile application. It
    will, in fact, become fun and extremely rewarding as you see your app in the App
    Store or on people's devices. It's worth the learning curve!
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a complete app with Iron Router* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding social sharing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the ever-increasing demand to integrate social media into your apps, you'll
    want to gain a basic understanding of how to send/post/share directly from within
    your app. This recipe will show you how to add Twitter posting (tweets) to your
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the Quotes application, from the *Creating a complete app with
    Iron Router* recipe found earlier in this in this chapter. Please complete that
    recipe before proceeding.
  prefs: []
  type: TYPE_NORMAL
- en: We will also be using the `npm` `twit` module to complete this recipe. For a
    step-by-step recipe with a full explanation of each step, please see the first
    part of the *Handling asynchronous events* recipe in [Chapter 11](part0083.xhtml#aid-2F4UM1
    "Chapter 11. Leveraging Advanced Features"), *Leveraging Advanced Features*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quickly, here are the steps you''ll need to install and configure the `twit`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following terminal commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open `packages.json` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following terminal command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `[project root]/server/config-twit.js` and add the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With our Twitter keys, tokens, and secrets all in place, and with `twit` initialized,
    we are ready to start tweeting!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to create a server method, update our UI, and give an indication that
    a quote has been shared. Thanks to twit, the actual call to the Twitter API is
    fairly easy. Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's create the `twuote` server method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file named `[project root]/server/tweets.js` and add the following
    `Meteor.methods` declaration:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will first do our checking to make sure that a user is logged in and that
    we were passed the `id` argument of a valid `quote` variable. In the `twuote`
    function call, add the following lines:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to manipulate the `quote` and `author` strings, making sure it''s
    only `140` maximum in length. Just below the previously inserted lines, add the
    following string manipulation logic:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After combing the quote, we are ready to send the tweet! Just below the string
    manipulation logic, add the following `Twit.post()` function and wrapped callback
    function:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our method is complete. Let's modify our UI.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We'll start modifying our UI by adding the share button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `[project root]/client/detail.html` file and add the following button
    just below the `toggle-edit` button, inside the parent container element:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We want to give our button just a slight downward nudge, so add the following
    CSS directive at the bottom of the `[project root]/client/styles.css` file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add a couple of additional helpers for our button, as well. Open
    `[project root]/client/detail.js`, and add the following two helper functions
    to the bottom of the `Template.detail.helpers` code block (don''t forget the comma
    on the line before, as usual!):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All that''s left is hooking up the click event. Open the `[project root]/client/detail.js`
    file, locate the `Template.detail.events` declaration, and add the following click
    `event` handler just inside the closing bracket (don''t forget the comma on the
    line just before the handler!):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save all of your changes, navigate to your app in a browser (usually `http://localhost:3000`),
    click on a quote to pull up the details page, and click on the button labeled
    **share...** shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00439.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Give your server a moment or two to send the tweet. The **share...** button
    will turn green and the text will change to **shared**. Your tweet will be live
    on Twitter, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00440.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The important code is all found in the `[project root]/server/tweets.js` file,
    in the `Meteor.methods({})` declaration.
  prefs: []
  type: TYPE_NORMAL
- en: We are calling `Twit.post()`, which takes a callback for its last argument.
    That callback is asynchronous because `twit` is a Node module. Because it is asynchronous,
    we need a way of preserving the current state of the environment while the call
    is out and we need a way of putting the process back into the `event` loop when
    the callback is executed (see the *Handling asynchronous events* recipe in [Chapter
    11](part0083.xhtml#aid-2F4UM1 "Chapter 11. Leveraging Advanced Features"), *Leveraging
    Advanced Features*, for a full explanation).
  prefs: []
  type: TYPE_NORMAL
- en: 'We accomplish both of these items by wrapping the callback with `Meteor.bindEnvironment()`.
    When the callback does fire, we update the `Quotes` collection, adding a `{tweeted
    : true}` property to the corresponding quote.'
  prefs: []
  type: TYPE_NORMAL
- en: This property, in turn, causes our UI to update with the green button and disallows
    additional tweets (checked in the `click event` handler, in `[project root]/client/detail.js`).
  prefs: []
  type: TYPE_NORMAL
- en: So, just like that, we've added social sharing. From here, you can take and
    expand this recipe to other social platforms to be even more seamlessly integrated
    in to your applications.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is very, very important that we caution against using the preceding code
    in production! We stripped out all the security and error handling. There is no
    validation, and the example is hard-wired for a single server-side user. If you
    use this code as it is in a production app, something not so pleasant will happen,
    and it won't be our fault (no blamezies allowed!).
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we recommend that you flesh these elements out, particularly around
    allowing the use of the logged-in user's access token rather than that of a hard-wired
    user.
  prefs: []
  type: TYPE_NORMAL
- en: With just a little bit of spit and polish, you can easily use this code to complement
    your Meteor apps and extend the functionality to Facebook, Instagram, LinkedIn,
    Pinterest, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a full write-up on what you can do with the `twit` module, please visit
    [https://github.com/ttezel/twit](https://github.com/ttezel/twit).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding Meteor packages* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Handling asynchronous events* recipe in [Chapter 11](part0083.xhtml#aid-2F4UM1
    "Chapter 11. Leveraging Advanced Features"), *Leveraging Advanced Features*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a complete app with Iron Router* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
