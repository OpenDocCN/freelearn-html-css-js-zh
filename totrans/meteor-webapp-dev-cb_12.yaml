- en: Chapter 12. Creating Useful Projects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章 创建有用的项目
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating RESTful web services
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建RESTful Web服务
- en: Creating a complete app with Iron Router
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Iron Router创建完整的应用
- en: Deploying apps to mobile devices
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用部署到移动设备
- en: Adding social sharing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加社交分享
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Somewhere along your journey towards learning Meteor, you'll reach a point where
    you will have mastered the fundamentals. At that point, you will want to start
    putting all the fundamentals together into the applications or packages that are
    actually useful. It's a big development world out there, with many opportunities.
    The Meteor landscape is still in its infancy, and if you've followed all (or most)
    of the recipes in this book, you're probably ready to start defining that landscape.
    This last chapter will walk you through four of the most useful recipes that apply
    to most projects. It will give you an even more solid foundation for going out
    on your own to define, discover, and build!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在您学习Meteor的旅途中，您将达到一个掌握基础知识的阶段。在那个阶段，您将希望开始将所有基础知识整合到实际有用的应用或包中。外面的开发世界很大，有很多机会。Meteor的领域仍然处于起步阶段，如果您已经遵循了本书中的所有（或大多数）食谱，您可能已经准备好开始定义这个领域。最后一章将指导您了解适用于大多数项目的四个最有用的食谱。这将为您独立定义、发现和构建提供更坚实的基础！
- en: Creating RESTful web services
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建RESTful Web服务
- en: Alas, alas, the entire development world hasn't caught on to how amazing the
    DDP protocol is (yet!). Data-over-the-wire is an amazing concept, and we believe
    that it (or something like it) is the future of how applications will communicate.
    In the meantime, we have some very useful and well-established protocols that,
    if implemented in our applications, increase the reach and accessibility of our
    apps for other platforms.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 唉，唉，整个开发世界还没有意识到DDP协议有多么神奇（还没有呢！）。数据通过线传输是一个惊人的概念，我们相信它（或类似的东西）将是应用程序通信的未来。与此同时，我们有一些非常有用且已建立的协议，如果在我们应用中实现，将增加我们应用在其他平台上的覆盖范围和可访问性。
- en: The granddaddy of all of these protocols is REST. REST is mature, well-defined,
    and has been implemented in nearly every programming language imaginable. It wouldn't
    surprise us to discover that, if/when we contact an alien race, the first signal
    will be a `POST` request. Given its current status (and our most likely option
    for peaceful interstellar negotiations), we will want to add REST capabilities
    to some of our applications. This recipe will walk you through implementing a
    server-side REST implementation using Iron Router.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些协议中，REST是始祖。REST已经成熟、定义明确，几乎在所有可想象的编程语言中都有实现。如果我们/当我们与外星种族接触时，第一个信号很可能是`POST`请求。鉴于其当前状态（以及我们最可能的选择，即和平的星际谈判），我们希望将REST功能添加到我们的某些应用中。本食谱将指导您使用Iron
    Router实现服务器端REST实现。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Since we're only dealing with the REST part of an app in this recipe, we don't
    need anything fancy. A simple, standard Meteor app will do, with just a couple
    of server-side files.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在本食谱中我们只处理应用的REST部分，所以我们不需要任何花哨的东西。一个简单的、标准的Meteor应用就足够了，只需要几个服务器端文件。
- en: Creating the baseline application
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建基线应用
- en: 'Open a terminal window, navigate to where you would like your project root
    to be, and enter the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端窗口，导航到您希望项目根目录所在的位置，并输入以下命令：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Installing and configuring Postman
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装和配置Postman
- en: 'We need a way to manually call our REST service, and the Postman plugin/app
    for Chrome is as good as any. If you have your own way of manually calling REST
    services, feel free to use it. If not, here''s how to install Postman:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一种手动调用我们的REST服务的方法，Postman插件/应用对于Chrome来说是个不错的选择。如果您有自己的手动调用REST服务的方法，请随意使用。如果没有，以下是安装Postman的方法：
- en: In a browser, navigate to [http://getpostman.com](http://getpostman.com) and
    click on the **Get it now** link towards the bottom. A preview of the Postman
    app will pop up, and towards the top-right corner will be a button to install
    Postman. Click on that button, follow the directions, and open Postman.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，导航到[http://getpostman.com](http://getpostman.com)，然后点击页面底部的**立即获取**链接。Postman应用的预览将弹出，在右上角将有一个安装Postman的按钮。点击该按钮，按照指示操作，并打开Postman。
- en: 'In the request window in Postman, under the **Normal** tab, enter the following
    URL:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Postman的请求窗口中，在**常规**选项卡下，输入以下URL：
- en: '[PRE1]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, click on the **Headers** button, and enter the following under the **Header**
    | **Value** sections:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击**头部**按钮，在**头部** | **值**部分下输入以下内容：
- en: '[PRE2]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When complete, your screen should look like the following screenshot:![Installing
    and configuring Postman](img/image00424.jpeg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，您的屏幕应该看起来像以下截图：![安装和配置Postman](img/image00424.jpeg)
- en: We're now ready to build our REST service and test it using Postman.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好构建我们的REST服务，并使用Postman进行测试。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Proceed with the following steps to create RESTful web services:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建RESTful Web服务：
- en: 'First, we will declare the `Quotes` collection. Create a file named `[project
    root]/server/model/quotes.js` and add the following code:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将声明`Quotes`集合。创建一个名为`[项目根目录]/server/model/quotes.js`的文件，并添加以下代码：
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we will add the `writeHeaders` function. Create a file named `[project
    root]/server/api/REST.js` and add the following function to the bottom:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将添加`writeHeaders`函数。创建一个名为`[项目根目录]/server/api/REST.js`的文件，并将以下函数添加到文件底部：
- en: '[PRE4]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will now write the code to handle `GET` requests. At the very top of the
    `REST.js` file, create the following `Router.route()` method call:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将编写处理`GET`请求的代码。在`REST.js`文件的顶部，创建以下`Router.route()`方法调用：
- en: '[PRE5]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Save all of your changes, make sure your app is running, and click on the **Send**
    button in Postman. In the results section, click on the **Body** tab and the **Raw**
    button. You should see the following message:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存所有更改，确保您的应用程序正在运行，然后在Postman中点击**发送**按钮。在结果部分，点击**正文**选项卡和**原始**按钮。您应该看到以下信息：
- en: '![How to do it...](img/image00425.jpeg)'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00425.jpeg)'
- en: Congratulations, you've just created your first REST service!
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 恭喜你，你刚刚创建了你第一个REST服务！
- en: 'Now, let''s move on to `post` calls. We are going to assume that a `POST` query
    is asking to see any quotes in our `Quotes` collection that are owned by a particular
    user. In `REST.js`, remove the last semicolon from the `.get()` function call
    (we are chaining commands, so it''s important that you do this) and add the following
    code where you removed the semicolon:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们继续到`post`调用。我们将假设一个`POST`查询是请求查看我们`Quotes`集合中属于特定用户的任何引用。在`REST.js`中，从`.get()`函数调用中删除最后一个分号（我们正在链式调用命令，所以你这样做很重要），并在你删除分号的地方添加以下代码：
- en: '[PRE6]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It doesn''t make much sense to test a `POST` query until we have some data
    in our collection, does it? Let''s take care of that right now by adding support
    for `PUT`. Immediately after the code you just entered (as a continuation of the
    function chain), add the following code:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的集合中有数据之前，测试`POST`查询并没有太多意义，对吧？让我们立即通过添加对`PUT`的支持来解决这个问题。在你刚刚输入的代码之后（作为函数链的延续），添加以下代码：
- en: '[PRE7]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we have a semicolon at the end, which means we're done and can start
    using our fully functional service!
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我们在末尾有一个分号，这意味着我们已经完成，可以开始使用我们的完整功能服务了！
- en: 'In Postman, change the service type from `GET` to `PUT`. In the input field,
    click on the button labeled **raw**, and enter the following JSON code:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Postman中，将服务类型从`GET`更改为`PUT`。在输入字段中，点击标有**原始**的按钮，并输入以下JSON代码：
- en: '[PRE8]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Your screen should look like the following screenshot:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您的屏幕应该看起来像以下截图：
- en: '![How to do it...](img/image00426.jpeg)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image00426.jpeg)'
- en: 'Click on the **Send** button, and in just a few milliseconds, the response
    area will display the following message:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**发送**按钮，只需几毫秒，响应区域将显示以下信息：
- en: '[PRE9]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Repeat the preceding steps as many times as you would like, varying the quote/author
    and owner as desired.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复前面的步骤，根据需要更改引用/作者和所有者。
- en: 'We can now test the `POST` query. Change the service type from `PUT` to `POST`,
    and enter the following JSON in the input field:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以测试`POST`查询。将服务类型从`PUT`更改为`POST`，并在输入字段中输入以下JSON：
- en: '[PRE10]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Click on the **Send** button, and on the output window, click on the **Pretty**
    button. The output will be some well-formatted JSON with at least one entry, similar
    to that in the following screenshot:![How to do it...](img/image00427.jpeg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**发送**按钮，然后在输出窗口中点击**美化**按钮。输出将是一些格式良好的JSON，至少包含一个条目，类似于以下截图所示：![如何操作...](img/image00427.jpeg)
- en: You have just written a simple yet fully functional REST service in Meteor!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚在Meteor中编写了一个简单但功能齐全的REST服务。
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The heavy lifting for this recipe is done by Iron Router. When we add the `iron:router`
    package, that package listens for all incoming requests on the server side. We
    configured Iron Router to listen on the `http://[yourapp.url]/api/` route for
    the `GET`, `POST`, and `PUT` requests. To get Iron Router to listen on that particular
    route, we used the `Router.route(''/api''...)` method call. Importantly, we declared
    that, that route is to be handled on the server side using the `{where: ''server''}`
    parameter.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '这个食谱的繁重工作由Iron Router完成。当我们添加`iron:router`包时，该包会在服务器端监听所有传入的请求。我们配置Iron Router监听`http://[yourapp.url]/api/`路由的`GET`、`POST`和`PUT`请求。为了使Iron
    Router监听那个特定的路由，我们使用了`Router.route(''/api''...)`方法调用。重要的是，我们声明该路由将在服务器端使用`{where:
    ''server''}`参数进行处理。'
- en: Chaining each type of request to the `.route()` call, we used the `.get()`,
    `.post()`, and `.put()` method calls. In each of these, we can read the JSON data
    passed in with the request by referencing `this.request.body.[key]`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 将每种类型的请求链接到`.route()`调用，我们使用了`.get()`、`.post()`和`.put()`方法调用。在这些调用中，我们可以通过引用`this.request.body.[key]`来读取请求中传递的JSON数据。
- en: Finally, we are able to send a response by using Iron Router's `response` object,
    which we used to form the headers and to send messages back to the calling client.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们能够通过使用Iron Router的`response`对象来发送响应，我们使用它来设置头信息并发送消息回调用客户端。
- en: There's more…
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'As usual, we''ve tried to keep the functionality to a minimum, to reduce the
    signal-to-noise of what this recipe is about. There''s enough here, however, to
    give you a good taste of what is possible with REST services using Iron Router.
    If you would like more information and specifics on what the RESTful functions
    in Iron Router can do, please visit the Iron Router guide at: [https://github.com/iron-meteor/iron-router/blob/devel/Guide.md#server-routing](https://github.com/iron-meteor/iron-router/blob/devel/Guide.md#server-routing).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，我们尽量将功能保持到最小，以减少这个食谱的信号与噪声。然而，这里已经足够让你对使用Iron Router的REST服务能做什么有一个很好的了解。如果你想要更多关于Iron
    Router中RESTful函数的信息和具体细节，请访问Iron Router指南：[https://github.com/iron-meteor/iron-router/blob/devel/Guide.md#server-routing](https://github.com/iron-meteor/iron-router/blob/devel/Guide.md#server-routing)。
- en: See also
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a multipage application with Iron Router* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](part0028.xhtml#aid-QMFO1 "第2章。使用包进行自定义")的*使用Iron Router创建多页应用程序*食谱中，*使用包进行自定义*
- en: The *Creating a complete app with Iron Router* recipe in this chapter
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的*使用Iron Router创建完整的应用程序*食谱
- en: Creating a complete app with Iron Router
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Iron Router创建完整的应用程序
- en: From nearly the beginning of Meteor, the development emphasis has been on "smart"
    client-based applications. We left the server-dominated world behind a long time
    ago, and as a result, the single-page model is extremely well-supported inside
    the Meteor development stack.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从Meteor的几乎一开始，开发重点就放在了“智能”客户端应用程序上。我们很久以前就离开了以服务器为主的世界，因此，单页模型在Meteor开发堆栈中得到了极好的支持。
- en: Essential to this type of application is the `iron:router` package ([https://atmospherejs.com/iron/router](https://atmospherejs.com/iron/router)).
    Yes, you technically could build a multi-functional, mobile-first app without
    Iron Router, but it would be much more time consuming and complex by comparison.
    Think of Iron Router as the equivalent of using a microwave versus cooking outdoors
    on a campfire. With no utensils. In a rainstorm. With rabies-carrying raccoons
    all up in your business. Okay, okay, maybe it's not that bad, but you get the
    point—you should use Iron Router.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这类应用程序来说，`iron:router`包（[https://atmospherejs.com/iron/router](https://atmospherejs.com/iron/router)）是必不可少的。是的，从技术上讲，你可以不使用Iron
    Router构建一个多功能的、以移动端优先的应用程序，但与使用Iron Router相比，这将耗费更多的时间和更复杂的操作。想象一下Iron Router就像使用微波炉而不是在篝火旁户外烹饪。没有任何工具。在雨中。还有携带狂犬病的浣熊在你周围捣乱。好吧，好吧，可能没有这么糟糕，但你的意思很清楚——你应该使用Iron
    Router。
- en: This recipe will walk you through the building of a fully functional, quote
    tracking service with a single-page app frontend built using Iron Router.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将指导你构建一个功能齐全的报价跟踪服务，前端使用Iron Router构建的单页应用程序。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We would usually add a lot of preparation steps to a recipe, but in this one,
    we need to build everything in one go as part of the recipe. As such, we are only
    going to add the bare minimum here.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常会为食谱添加很多准备工作步骤，但在这个食谱中，我们需要一次性构建所有内容作为食谱的一部分。因此，我们在这里只添加最基本的内容。
- en: 'Open a terminal window, navigate to where you would like your application root
    to be, and enter the following commands:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，导航到你希望应用程序根目录所在的位置，并输入以下命令：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We've got a lot of work to do, so let's get started!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有很多工作要做，所以让我们开始吧！
- en: How to do it…
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The major sections of this recipe are as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱的主要部分如下：
- en: Creating the top `navbar`
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建顶部的`navbar`
- en: Adding user authentication
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加用户认证
- en: Adding the `Quotes` collection
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加`Quotes`集合
- en: Adding Iron Router routes
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加Iron Router路由
- en: Creating page transition animations
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建页面过渡动画
- en: Displaying the `Quotes` collection
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示`Quotes`集合
- en: Adding and editing `Quotes`
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加和编辑`Quotes`
- en: Deploying the App
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署应用程序
- en: There will be a little crossover from section to section, but we should be able
    to keep things fairly clean, so if you would like to switch out some functionality
    or add some features, feel free to do so as we move along.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 各个部分之间会有一些交叉，但我们应该能够保持事情相当整洁，所以如果你想在移动过程中切换一些功能或添加一些功能，请随时这样做。
- en: First up, we need to create the top `navbar`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建顶部的`navbar`。
- en: We will be using the standard Bootstrap `navbar` elements because we don't want
    to spend a large chunk of time with CSS styling. Once you're more comfortable
    with CSS, you can extend or replace the Bootstrap styling and make it your own.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将使用标准的Bootstrap `navbar`元素，因为我们不想在CSS样式上花费大量时间。一旦你对CSS更加熟悉，你可以扩展或替换Bootstrap样式，使其成为你自己的。
- en: 'First, since this is a mobile-oriented app, let''s set our headers, and use
    a Google font. Create a new file named `[project root]/client/header.html` and
    add the following declarations:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，由于这是一个面向移动端的app，让我们设置我们的标题，并使用Google字体。创建一个名为`[project root]/client/header.html`的新文件，并添加以下声明：
- en: '[PRE12]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a new file named `[project root]/client/layout.html` and add the following
    template, which will act as the foundation for our navigation toolbar:'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个名为`[project root]/client/layout.html`的新文件，并添加以下模板，它将作为我们导航工具栏的基础：
- en: '[PRE13]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We will want to temporarily add a `body` element afterwards, just so we can
    check the display (we will remove it when we implement `iron:router`):'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在之后临时添加一个`body`元素，以便我们可以检查显示（当我们实现`iron:router`时我们将移除它）：
- en: '[PRE14]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Lastly, we have some minor CSS to add, to make sure everything upcoming runs
    smoothly. Create a file named `[project root]/client/styles.css` and add the following
    CSS declarations:'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，我们需要添加一些微小的CSS，以确保即将到来的所有内容都能顺利运行。创建一个名为`[project root]/client/styles.css`的文件，并添加以下CSS声明：
- en: '[PRE15]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Next, we need to add user authentication.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加用户认证。
- en: 'Because we''ve had experience with it in the past, we will enable authentication
    using Twitter. We will also use some stylized login buttons that fit in with our
    Bootstrap toolbar. Open a terminal window, navigate to your project root, and
    enter the following commands:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们过去有经验，我们将启用Twitter认证。我们还将使用一些与我们的Bootstrap工具栏相匹配的样式化登录按钮。打开一个终端窗口，导航到你的项目根目录，并输入以下命令：
- en: '[PRE16]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We now need to add the `loginButtons` template to our toolbar. Open `[project
    root]/client/layout.html` and locate the comment that reads as follows:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在需要将`loginButtons`模板添加到我们的工具栏中。打开`[project root]/client/layout.html`并定位到以下注释：
- en: '[PRE17]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Replace this comment with the following code:'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用以下代码替换这个注释：
- en: '[PRE18]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Save your changes and navigate to your app in a browser. The top-right corner
    will contain a **Configure Twitter** button. Click on this button and configure
    Twitter according to the instructions, just as we did in the *Implementing OAuth
    accounts packages* recipe in [Chapter 10](part0079.xhtml#aid-2BASE1 "Chapter 10. Working
    with Accounts"), *Working with Accounts*.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存你的更改并导航到你的app在浏览器中。右上角将包含一个**配置Twitter**按钮。点击此按钮并根据说明配置Twitter，就像我们在第10章的*实现OAuth账户包*菜谱中做的那样，*与账户一起工作*。
- en: After configuration, you may want test the login with your Twitter account.
    If everything is satisfactory, we can move on to the meat of our application.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 配置完成后，你可能想使用你的Twitter账户测试登录。如果一切顺利，我们可以继续到我们应用程序的核心部分。
- en: Let's add the `Quotes` collection.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加`Quotes`集合。
- en: 'We''re definitely ready to add our `Quotes` collection, but we want to have
    some control over what records will be sent to the client, based on whether the
    user is logged in or not. To accomplish this, we need to remove `autopublish`.
    In a terminal window, in our project root directory, enter the following command:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们肯定准备好添加我们的 `Quotes` 集合，但我们希望根据用户是否登录来控制发送到客户端的记录。为了实现这一点，我们需要移除 `autopublish`。在终端窗口中，在我们的项目根目录下，输入以下命令：
- en: '[PRE19]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, create a file named `[project root]/both/model.js` and add the following
    line to that file:'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为 `[project root]/both/model.js` 的文件，并将以下行添加到该文件中：
- en: '[PRE20]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Ordinarily, we would add a `subscribe` command in a client-only file and a
    `publish` command in a server-only file, but the logic is so simple that we''ll
    just add them directly to the `model.js` file in this case. Add the following
    code to `model.js` and save your changes:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，我们会在客户端文件中添加一个 `subscribe` 命令，在服务器端文件中添加一个 `publish` 命令，但逻辑如此简单，所以我们只需直接将它们添加到本例中的
    `model.js` 文件中。将以下代码添加到 `model.js` 并保存你的更改：
- en: '[PRE21]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Up next, we need to add our Iron Router routes.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加我们的 Iron Router 路由。
- en: When you add Iron Router, the changes needed in the running Meteor instance
    are pretty major. Technically, you could add Iron Router without stopping your
    app, but we recommend stopping your Meteor app while installing and configuring
    Iron Router.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你添加 Iron Router 时，在运行的 Meteor 实例中需要的更改相当重大。技术上，你可以在不停止应用的情况下添加 Iron Router，但我们建议在安装和配置
    Iron Router 时停止你的 Meteor 应用。
- en: 'Once you''ve stopped your app, enter the following command in the terminal
    window:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦你停止了你的应用，在终端窗口中输入以下命令：
- en: '[PRE22]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s now declare our default layout template. Create a file named `[project
    root]/both/router.js` and add the following line:'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们声明默认布局模板。创建一个名为 `[project root]/both/router.js` 的文件，并添加以下行：
- en: '[PRE23]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now that our layout template is being called by Iron Router, we no longer need
    the body element we temporarily put in the `layout.html` file. Open `[project
    root]/client/layout.html` and remove the entire `<body>...</body>` segment.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们的布局模板已被 Iron Router 调用，我们不再需要之前在 `layout.html` 文件中临时放置的 body 元素。打开 `[project
    root]/client/layout.html` 并删除整个 `<body>...</body>` 段落。
- en: 'We also have a placeholder in `layout.html` for our application pages, which
    we need to fill in with the customary Iron Router yield directive. In `layout.html`,
    locate the following line:'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们在 `layout.html` 中为我们的应用页面预留了一个占位符，我们需要用传统的 Iron Router yield 指令来填充。在 `layout.html`
    中找到以下行：
- en: '[PRE24]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Replace that line with the following code:'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将该行替换为以下代码：
- en: '[PRE25]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We have two routes to create, so let''s do that now. Open `[project root]/both/router.js`
    and add the following `Router.map` declaration:'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要创建两个路由，现在就来做这件事。打开 `[project root]/both/router.js` 并添加以下 `Router.map` 声明：
- en: '[PRE26]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We''ve created our routes, and now we need to create placeholder templates
    for those routes. Create a file named `[project root]/client/main.html` and add
    the following template:'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已经创建了路由，现在我们需要为这些路由创建占位符模板。创建一个名为 `[project root]/client/main.html` 的文件，并添加以下模板：
- en: '[PRE27]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a file named `[project root]/client/detail.html` and add the following
    template:'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个名为 `[project root]/client/detail.html` 的文件，并添加以下模板：
- en: '[PRE28]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can now start your app back up (enter the `meteor` command in your terminal)
    and test the routes. As you navigate to `http://localhost:3000` and to `http://localhost:3000/quote/1234`,
    you should see pages similar to those in the following screenshot:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，你可以重新启动你的应用（在你的终端中输入 `meteor` 命令）并测试路由。当你导航到 `http://localhost:3000` 和 `http://localhost:3000/quote/1234`
    时，你应该能看到以下截图中的类似页面：
- en: '![How to do it…](img/image00428.jpeg)'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/image00428.jpeg)'
- en: We will now create page transition animations.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将创建页面转换动画。
- en: 'There''s an excellent Atmosphere package out there called `momentum`. With
    an Iron Router-specific package created by Percolate Studios, we can extend `momentum`
    to do Iron Router route transitions with very little fuss. In a terminal window,
    enter the following command:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在那里有一个名为 `momentum` 的优秀 Atmosphere 包。通过 Percolate Studios 创建的 Iron Router 特定包，我们可以轻松地将
    `momentum` 扩展到 Iron Router 路由转换。在终端窗口中，输入以下命令：
- en: '[PRE29]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a file named `[project root]/client/transitions.js` and add the following
    transition declaration as a `Template` helper:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个名为 `[project root]/client/transitions.js` 的文件，并将以下转换声明作为一个 `Template` 辅助函数添加：
- en: '[PRE30]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We also need to surround our `{{> yield}}` inclusion with the `momentum` template
    helper. Open `layout.html` and add the following wrapper around the inclusion:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还需要用 `momentum` 模板辅助函数包围我们的 `{{> yield}}` 包含。打开 `layout.html` 并添加以下包装器：
- en: '[PRE31]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Save your changes and navigate again to `http://localhost:3000/page/1234`. Once
    the page loads, click on the book icon in the top-left corner of the page. The
    main page should slide into place. The reverse animation will occur if you click
    the back button in your browser.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存您的更改，并再次导航到`http://localhost:3000/page/1234`。一旦页面加载，点击页面左上角的书籍图标。主页面应该滑动到合适的位置。如果您在浏览器中点击后退按钮，将发生反向动画。
- en: We are now ready to display the `Quotes` collection.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在准备显示`Quotes`集合。
- en: We will display some light summary information for each quote in our main template
    and then expand that into a lot more detail for the detail template. Let's start
    with the main template.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在主模板中为每个引用显示一些简要信息，然后将其扩展到详细模板中的更多细节。让我们从主模板开始。
- en: 'Open `[project root]/client/main.html`, remove the `<h1>` placeholder tag,
    and add the following code, which iterates over the `Quotes` collection and creates
    group items for each one:'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开`[project root]/client/main.html`，删除`<h1>`占位符标签，并添加以下代码，该代码遍历`Quotes`集合并为每个创建分组项：
- en: '[PRE32]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We need to add a couple of helpers to support the previously created template,
    so create a file named `[project root]/client/main.js` and add the following code:'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要添加几个辅助器来支持之前创建的模板，因此创建一个名为`[project root]/client/main.js`的文件，并添加以下代码：
- en: '[PRE33]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We will also need a `click` event handler, which will get us to the `detail`
    page template whenever we click on a quote group item. Add the following code
    to the bottom of the `main.js` file:'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还需要一个`click`事件处理程序，它将在我们点击引用分组项时将我们带到`detail`页面模板。将以下代码添加到`main.js`文件的底部：
- en: '[PRE34]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Save your changes. Now let''s programmatically add a couple of entries to the
    `Quotes` collection. Navigate in a browser to `http://localhost:3000/`. Make sure
    that you are logged in with your Twitter account, open the browser console, and
    execute the following command two or so times:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存您的更改。现在让我们以编程方式向`Quotes`集合添加几个条目。在浏览器中导航到`http://localhost:3000/`。确保您已使用Twitter账户登录，打开浏览器控制台，并执行以下命令两三次：
- en: '[PRE35]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'After doing so, your screen should look similar to the following screenshot:'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这样做之后，您的屏幕应该看起来类似于以下截图：
- en: '![How to do it…](img/image00429.jpeg)'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/image00429.jpeg)'
- en: 'If you click on one of the items, the generic detail page should slide into
    view. Let''s now take care of the `detail` page template, so that it will display
    the details of our quotes. Open the `[project root]/client/detail.html` file and
    replace the template contents with the following:'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您点击其中一个项目，通用的详细页面应该滑动到视图中。现在让我们处理`detail`页面模板，以便它能够显示引用的详细信息。打开`[project root]/client/detail.html`文件，并用以下内容替换模板内容：
- en: '[PRE36]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Save your changes and click on one of the placeholder quotes. You should see
    a screen come into view that looks similar to the following screenshot:'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存您的更改，并点击其中一个占位符引用。您应该看到一个屏幕出现，看起来类似于以下截图：
- en: '![How to do it…](img/image00430.jpeg)'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/image00430.jpeg)'
- en: 'The tags aren''t showing up because we haven''t added the necessary helpers
    yet. Create a file named `[project root]/client/detail.js` and add the following
    helpers declaration:'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 标签没有显示出来，因为我们还没有添加必要的辅助器。创建一个名为`[project root]/client/detail.js`的文件，并添加以下辅助器声明：
- en: '[PRE37]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Look back in your browser; the tags should now appear on the detail page template.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在浏览器中回顾一下；标签现在应该出现在详细页面模板上。
- en: Now that we've got our display taken care of, let's add the ability to edit
    and insert new `quote` objects.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经处理好了显示，让我们添加编辑和插入新`quote`对象的能力。
- en: 'First, let''s adjust the `detail.html` file and add an editing toggle button.
    Open `detail.html` and add the following `div` element just before the last `</div>`
    tag:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，让我们调整`detail.html`文件并添加一个编辑切换按钮。打开`detail.html`，在最后一个`</div>`标签之前添加以下`div`元素：
- en: '[PRE38]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, let''s add the input fields for editing/inserting. In the same `detail.html`
    file, in the `{{#if editing}}` section, add the title input field. Do this using
    the Bootstrap `input-group` styling, like so:'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来，让我们添加用于编辑/插入的输入字段。在相同的`detail.html`文件中，在`{{#if editing}}`部分添加标题输入字段。使用Bootstrap
    `input-group`样式，如下所示：
- en: '[PRE39]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Next is the `input-group` element for the `quote` body. Add the following just
    after the `title` group in the preceding code snippet:'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 接下来是`quote`正文的`input-group`元素。在上述代码片段中`title`分组之后添加以下内容：
- en: '[PRE40]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We need an `input-group` element for the author. Add that just below the `quote`
    group, as follows:'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要一个`input-group`元素用于作者。将其添加到`quote`分组下方，如下所示：
- en: '[PRE41]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Last but not least for the template are the tags. Just below the `author` group,
    add the following code:'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，对于模板来说，标签也很重要。在`author`组下方，添加以下代码：
- en: '[PRE42]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We have a couple of extra helpers to add. Open `detail.js` and add the following
    two helpers immediately after the `tagsFormatted` helper block, in the `Template.detail.helpers()`
    method (don''t forget the extra comma at the top!):'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要添加一些额外的助手。打开`detail.js`文件，在`tagsFormatted`助手块之后立即添加以下两个助手，在`Template.detail.helpers()`方法中（别忘了在顶部添加额外的逗号！）：
- en: '[PRE43]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We now need to add the event handler for toggling between editing and display.
    We also need to add a submit button. So, let''s kill two birds with one stone
    and give our toggle button the ability to turn into a submit button depending
    on the state. At the bottom of `detail.js`, add the following Template `events`
    declaration:'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在我们需要添加在编辑和显示之间切换的事件处理器。我们还需要添加一个提交按钮。所以，让我们一石二鸟，给我们的切换按钮添加在状态变化时变成提交按钮的能力。在`detail.js`文件的底部，添加以下Template
    `events`声明：
- en: '[PRE44]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Save your changes, navigate to display a single quote, and click on the pencil
    icon at the bottom right. You can change the generic quote into a specific quote,
    as shown in the following screenshot:'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存你的更改，导航到显示单个引言，然后点击右下角的铅笔图标。你可以将通用引言更改为特定引言，如下面的截图所示：
- en: '![How to do it…](img/image00431.jpeg)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00431.jpeg)'
- en: 'Click on the checkmark and your changes should be saved, as shown in the following
    screenshot:'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击勾选标记，你的更改应该会保存，如下面的截图所示：
- en: '![How to do it…](img/image00432.jpeg)'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00432.jpeg)'
- en: 'We''ve taken care of editing; now we need to allow the user to add new quotes.
    The logic we''re going to use will piggyback on our editing. When the "new qoute"
    button is clicked, we will instantly create a new `quote` object in the `Quotes`
    collection and then navigate to the editing screen. Open `[project root]/client/main.html`
    and add the following button group just after the last `{{/each}}` tag, but still
    inside the `list-group` `</div>` tag:'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已经处理了编辑；现在我们需要允许用户添加新的引言。我们将使用的逻辑将依赖于我们的编辑。当点击“新引言”按钮时，我们将在`Quotes`集合中立即创建一个新的`quote`对象，然后导航到编辑屏幕。打开`[项目根目录]/client/main.html`文件，在最后一个`{{/each}}`标签之后立即添加以下按钮组，但仍然在`list-group`
    `</div>`标签内：
- en: '[PRE45]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'When this button is clicked, we want to insert a new object into the `Quotes`
    collection and then navigate to the editing screen. Open `main.js` and add the
    following event handler inside the `Template.main.events()` method call, just
    after the `.quote-title` event handler (again, don''t forget the comma!):'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当点击此按钮时，我们希望在`Quotes`集合中插入一个新的对象，然后导航到编辑屏幕。打开`main.js`文件，在`Template.main.events()`方法调用中添加以下事件处理器，紧接在`.quote-title`事件处理器之后（再次，别忘了逗号！）：
- en: '[PRE46]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Save all of your changes, navigate to `http://localhost:3000` in a browser,
    and you should see a big blue plus sign at the bottom of the quote group. Click
    on the button and you''ll be taken to a fresh, clean editing screen similar to
    the following sceenshot. Here, you can enter a new quote:'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存所有更改，在浏览器中导航到`http://localhost:3000`，你应该会在引言组底部看到一个大的蓝色加号。点击按钮，你将被带到类似于以下截图的新鲜、干净的编辑屏幕。在这里，你可以输入一个新的引言：
- en: '![How to do it…](img/image00433.jpeg)'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00433.jpeg)'
- en: With all functionality in place, we are ready to deploy our app.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有功能就绪后，我们就可以部署我们的应用了。
- en: We can deploy our app wherever we would like to (please refer to one of the
    many deployment recipes in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Optimizing
    Your Workflow"), *Optimizing Your Workflow* for details), but for this recipe
    we'll pick the easiest/quickest way to deploy, which is directly to the Meteor
    servers.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以在任何我们想要的地方部署我们的应用（请参阅[第1章](part0015.xhtml#aid-E9OE1 "第1章。优化你的工作流程")中的许多部署配方，*优化你的工作流程*以获取详细信息），但在这个配方中，我们将选择最简单/最快的方式来部署，即直接部署到Meteor服务器。
- en: 'Stop your application from running in the terminal using *Ctrl* + *C* and execute
    the following command, replacing `[your-test-url]` with whatever you would like:'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *C*在终端停止你的应用运行，并执行以下命令，将`[your-test-url]`替换为你想要的任何内容：
- en: '[PRE47]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In our case, we used the following command:'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们使用了以下命令：
- en: '[PRE48]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Wait for your app to build and then upload, and you should get a familiar message,
    similar to the following:'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 等待你的应用构建并上传，你应该会得到一个熟悉的消息，类似于以下内容：
- en: '[PRE49]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Navigate to your newly-deployed app, configure Twitter if needed (you will
    need a new Twitter app ID, one that points to your new deployment URL), log in,
    and add some quotes. When you''re finished, your app should look similar to the
    following screenshot:'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 导航到您新部署的应用程序，如果需要的话配置Twitter（您需要一个指向新部署URL的新Twitter应用ID），登录，并添加一些引语。完成之后，您的应用程序应该看起来类似于以下截图：
- en: '![How to do it…](img/image00434.jpeg)'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/image00434.jpeg)'
- en: Congratulations! You've just created and deployed a complete application in
    eight steps. You should be proud of yourself. Go get a soda or a celebratory slice
    of pizza. You deserve it!
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经通过八个步骤创建并部署了一个完整的应用程序。您应该为自己感到骄傲。去拿一杯汽水或一块庆祝的披萨吧。您应得的！
- en: How it works…
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Since each of the preceding steps involves recipes from other chapters, we won't
    focus too much on the code specifics. Instead, we'll have a general overview of
    what each step does and add detail where needed.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 由于前面的每个步骤都涉及其他章节的食谱，我们不会过多关注代码的细节。相反，我们将概述每个步骤的作用，并在需要的地方添加细节。
- en: We first added our top menu/navbar. Using the `navbar` and `navbar-fixed-top`
    CSS classes built in to Bootstrap, we were able to position our `navbar` at the
    top of our screen with very little effort. We added a web font (thank you, Google!)
    and set the parameters for use on mobile devices in our header file.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先添加了我们的顶部菜单/导航栏。使用Bootstrap内置的`navbar`和`navbar-fixed-top`CSS类，我们几乎不费吹灰之力就将`navbar`定位在屏幕顶部。我们在头部文件中添加了一个网络字体（感谢，谷歌！）并设置了在移动设备上使用的参数。
- en: For user authentication, we relied on the default Meteor packages for accounts
    (specifically the `accounts-twitter` package). For formatting, we used the excellently
    designed `Bootstrap` package created by Ian Martorell. He did the heavy lifting
    for us, so all we had to do was add the package and place our `{{> loginButtons}}`
    inclusion in the correct place.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户身份验证，我们依赖于默认的Meteor账户包（特别是`accounts-twitter`包）。对于格式化，我们使用了由Ian Martorell创建的优秀设计的`Bootstrap`包。他为我们的重活儿做了很多工作，所以我们只需要添加这个包，并将我们的`{{>
    loginButtons}}`包含放置在正确的位置。
- en: We declared the `Quotes` collection in a file visible to the client and the
    server, as usual, and added a `publish` function that will only send those results
    to the client which were created by the logged in user.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在客户端和服务器都能看到的文件中声明了`Quotes`集合，就像往常一样，并添加了一个`publish`函数，该函数只会将创建者登录用户创建的结果发送到客户端。
- en: We added the Iron Router package and took advantage of the `Router.map()` and
    the `layoutTemplate` helpers of that package to implement a baseline layout template,
    a main template, and a details template.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了Iron Router包，并利用该包的`Router.map()`和`layoutTemplate`助手来实现基线布局模板、主模板和详情模板。
- en: We next leveraged a bit of wizardry from Percolate Studios, called `momentum`.
    They've created a plugin for `momentum` that allows you to wrap the `{{>yield}}`
    directive and point it to a template helper, where we perform some quick logic
    to say, "If we're going to the main page, go left to right. If not, go right to
    left." It's a well-designed package and is very easy to implement!
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来利用了Percolate Studios的一点点魔法，称为`momentum`。他们为`momentum`创建了一个插件，允许您将`{{>yield}}`指令包装起来，并将其指向一个模板助手，在那里我们执行一些快速逻辑，比如，“如果我们要去主页，从左到右走。如果不是，从右到左走。”这是一个设计精良的包，并且非常容易实现！
- en: Our next steps (displaying, editing, and creating quotes) could be considered
    the meat of the recipe, but because all the scaffolding was already in place,
    and because this type of functionality is so easy to implement in Meteor, we simply
    used an `{{#each…}}` directive, some reactive data bindings, and a few `click`
    event handlers to display and edit the records from the `Quotes` collection.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的步骤（显示、编辑和创建引语）可以被认为是食谱的核心，但由于所有脚手架已经就位，并且因为这种类型的功能在Meteor中实现起来非常容易，我们只是简单地使用了`{{#each…}}`指令、一些响应式数据绑定和几个`click`事件处理器来显示和编辑`Quotes`集合中的记录。
- en: In fact, the most complicated bit in the entire project was taking the `tags`
    property and parsing it into an array using `_.map()`. Think about that for a
    second. The most technically "challenging" part of our entire app was parsing
    a string. Meteor is pretty awesome, isn't it?
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，整个项目中最复杂的部分是将`tags`属性解析成数组使用`_.map()`。想想看。我们整个应用中最技术性“挑战”的部分是解析一个字符串。Meteor真的很棒，不是吗？
- en: Our last step was deployment, which is also pretty straightforward, since we
    have already done it a few times in [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Optimizing
    Your Workflow"), *Optimizing Your Workflow*.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后的步骤是部署，这也很简单，因为我们已经在[第1章](part0015.xhtml#aid-E9OE1 "第1章。优化你的工作流程")中做过几次了。
- en: Taken as a whole, the building of an entire app from scratch seems daunting.
    Breaking it down into discreet steps made it not only straightforward, but actually
    pretty fun as well. We hope that you enjoyed it, and we hope that you will take
    this recipe, modify it and expand on it, and create some quick, useful apps of
    your own!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来看，从头开始构建整个应用似乎很令人畏惧。将其分解为离散的步骤不仅使其变得简单，而且实际上还很有趣。我们希望你喜欢这个过程，我们希望你会修改这个食谱，扩展它，并创建一些快速、有用的应用！
- en: There's more…
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you examined the finished product of this recipe closely, you probably noticed
    that there is some missing functionality and some refinement that still needs
    to happen. For example, there's currently no way to delete a quote, we can't sort
    by tags/subject/author, and we actually deployed without removing the insecure
    package.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细检查了这个食谱的最终产品，你可能已经注意到一些功能缺失和一些需要进一步改进的地方。例如，目前还没有删除引言的方法，我们无法按标签/主题/作者排序，而且我们实际上在部署时没有移除不安全的包。
- en: In other words, there are a lot of other recipes from previous chapters we could
    apply to improve the app. We will leave you to that, as you build and expand your
    own applications, and we can't wait to see what you come up with!
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们可以从前面章节中应用很多其他的食谱来改进这个应用。我们将把这个任务留给你，当你构建和扩展你自己的应用时，我们迫不及待地想看看你能想出什么！
- en: See also
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Deploying a test app to Meteor* recipe in [Chapter 1](part0015.xhtml#aid-E9OE1
    "Chapter 1. Optimizing Your Workflow"), *Optimizing Your Workflow*
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](part0015.xhtml#aid-E9OE1 "第1章。优化你的工作流程")中，*优化你的工作流程*的*将测试应用部署到Meteor*食谱
- en: The *Adding Meteor packages* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](part0028.xhtml#aid-QMFO1 "第2章。使用包进行自定义")中，*使用包进行自定义*的*添加Meteor包*食谱
- en: The *Building a smooth interface with Bootstrap* recipe in [Chapter 3](part0036.xhtml#aid-12AK81
    "Chapter 3. Building Great User Interfaces"), *Building Great User Interfaces*
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](part0036.xhtml#aid-12AK81 "第3章。构建出色的用户界面")中，*构建出色的用户界面*的*使用Bootstrap构建平滑界面*食谱
- en: The *Implementing OAuth accounts packages* recipe in [Chapter 10](part0079.xhtml#aid-2BASE1
    "Chapter 10. Working with Accounts"), *Working with Accounts*
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第10章](part0079.xhtml#aid-2BASE1 "第10章。使用账户")中，*使用账户*的*实现OAuth账户包*食谱
- en: Deploying apps to mobile devices
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用部署到移动设备
- en: What good is building single-page apps with all kinds of cool functionality
    if you're only going to make it available as a web page? This recipe will take
    you through all the steps necessary to test and deploy your app to an iOS device.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是将单页应用以网页的形式提供，那么构建具有各种酷炫功能的单页应用有什么好处呢？这个食谱将带你完成所有必要的步骤，以测试和部署你的应用到iOS设备。
- en: Getting ready
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need an app to complete this recipe. We will be using the app created in
    the *Creating a complete app with Iron Router* recipe found earlier in this chapter.
    If you don't have your own app you would like to deploy, please complete that
    recipe first and then come back to this one to learn how to deploy your app.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一个应用来完成这个食谱。我们将使用本章前面找到的*使用Iron Router创建完整应用*食谱中创建的应用。如果你没有你想部署的应用，请先完成那个食谱，然后回到这个食谱来学习如何部署你的应用。
- en: How to do it…
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: There are two parts to deploying your application. The first is testing it on
    a device while using the server-side code that has already been deployed to a
    production URL. The second is to prepare an app build for deployment to the App
    Store.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 部署你的应用有两个部分。第一部分是在使用已经部署到生产URL的服务端代码的同时在设备上测试它。第二部分是为部署到App Store准备应用构建。
- en: First, let's set up our mobile app building environment. To deploy to an iOS
    device, you will need an Apple developer license, a machine running Mac OS X,
    and Xcode installed on that machine.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们设置我们的移动应用构建环境。要将应用部署到iOS设备，你需要一个Apple开发者许可证，一台运行Mac OS X的机器，以及在该机器上安装的Xcode。
- en: To obtain an Apple Developer license, visit [https://developer.apple.com/programs/](https://developer.apple.com/programs/)
    and follow the links/instructions to join the iOS Developer program.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要获取Apple开发者许可证，请访问[https://developer.apple.com/programs/](https://developer.apple.com/programs/)并按照链接/说明加入iOS开发者计划。
- en: Once you have joined the program, download and install Xcode from [https://developer.apple.com/xcode/downloads/](https://developer.apple.com/xcode/downloads/).
    You will need to properly configure Xcode, including adding certificates and mobile
    provisions as needed. There is a learning curve involved, and we strongly recommend
    that you take some time to learn the development, certification, and the App Store
    submission processes before proceeding.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦您加入了该计划，请从[https://developer.apple.com/xcode/downloads/](https://developer.apple.com/xcode/downloads/)下载并安装Xcode。您需要正确配置Xcode，包括根据需要添加证书和移动配置文件。这涉及一个学习曲线，我们强烈建议您在继续之前花些时间学习开发、认证和App
    Store提交流程。
- en: 'Open a terminal window, navigate to your app directory, and enter the following
    command:'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，导航到您的应用目录，并输入以下命令：
- en: '[PRE50]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This can take a while, but make sure that the SDK is installed properly and
    fix any errors or outstanding installation items as directed.
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这可能需要一段时间，但请确保SDK已正确安装，并根据指示修复任何错误或未完成的安装项。
- en: 'Once completed, enter the following command:'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完成后，输入以下命令：
- en: '[PRE51]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: You're now properly configured, and can test/deploy your app on an iOS device.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您现在已正确配置，可以在iOS设备上测试/部署您的应用。
- en: Let's now test our app on an iOS device.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们来测试我们的应用在iOS设备上的运行情况。
- en: 'Connect your iOS device to your machine via a USB cable. Enter the following
    command in the command line:'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过USB线将您的iOS设备连接到您的计算机。在命令行中输入以下命令：
- en: '[PRE52]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Here, `[you-app-url.com]` is replaced by the URL for your deployed server instance.
    In our case, we used the following command (all on one line, of course):'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里，`[you-app-url.com]`被替换为您部署的服务器实例的URL。在我们的例子中，我们使用了以下命令（当然，所有内容都在一行中）：
- en: '[PRE53]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The application will be built and bundled, and then `Xcode` will open. Once
    the app has been compiled in `Xcode`, you will see the following message at the
    top-middle of the `Xcode` app:'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用将被构建和打包，然后`Xcode`将打开。一旦应用在`Xcode`中编译完成，您将在`Xcode`应用程序的顶部中间看到以下消息：
- en: '![How to do it…](img/image00435.jpeg)'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00435.jpeg)'
- en: 'Select your iOS device from the dropdown menu and click the play button, as
    displayed in this screenshot:'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择您的iOS设备，然后点击显示在此截图中的播放按钮。
- en: '![How to do it…](img/image00436.jpeg)'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00436.jpeg)'
- en: 'Make sure that your device is unlocked, and after some download and code push
    activity, an icon with the Meteor logo will appear on your device. The app will
    quickly open; then, after a short delay, your app will run just as if you pulled
    it up in a browser, but it is running as a full-fledged application on your device!
    Here''s a screenshot of the `Quotes` app running on an iPhone:'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 确保您的设备已解锁，并在进行一些下载和代码推送活动后，您的设备上会出现带有Meteor标志的图标。应用将快速打开；然后，经过短暂的延迟，您的应用将像在浏览器中拉起一样运行，但它是在您的设备上作为一个完整的应用程序运行的！以下是`Quotes`应用在iPhone上运行的截图：
- en: '![How to do it…](img/image00437.jpeg)'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00437.jpeg)'
- en: The next step is to build a standalone mobile app file.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是构建一个独立的移动应用文件。
- en: 'Once you''ve tested everything and it''s working as it should be, you will
    want to create an actual app file that you can submit to the Apple App Store.
    When you installed a test app on your mobile device, Meteor auto-created several
    assets for your app. You can view these assets by navigating to the `[project
    root]/.meteor/local/cordova-build/resources` folder, as shown in the following
    screenshot:'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦您测试了一切并且一切按预期工作，您将想要创建一个实际的应用文件，您可以将其提交到Apple App Store。当您在移动设备上安装测试应用时，Meteor会自动为您的应用创建几个资产。您可以通过导航到`[项目根目录]/.meteor/local/cordova-build/resources`文件夹来查看这些资产，如下面的截图所示：
- en: '![How to do it…](img/image00438.jpeg)'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00438.jpeg)'
- en: 'You can use these resources or swap them out as needed. Once you''ve got your
    correct icons and splash screens in place, you will need to create a file named
    `[project root]/mobile-config.js` and add the following parameters, at a bare
    minimum:'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使用这些资源或根据需要替换它们。一旦您放置了正确的图标和启动画面，您将需要创建一个名为`[项目根目录]/mobile-config.js`的文件，并添加以下参数，至少包括以下内容：
- en: '[PRE54]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: You can, of course, change anything you would like in this file, and there are
    several other parameters you can add to further tweak the installation. See the
    `[project root]/.meteor/local/cordova-build/config.xml` file for a good solid
    list of options.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您当然可以更改此文件中的任何内容，并且您还可以添加其他几个参数来进一步调整安装。请参阅`[项目根目录]/.meteor/local/cordova-build/config.xml`文件以获取一个很好的选项列表。
- en: 'Once you''re satisfied with your configuration, navigate to the root app directory
    and enter the following command in the terminal (all on one line, of course):'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦你对配置满意，导航到根应用目录，并在终端中输入以下命令（当然，所有内容都在一行中）：
- en: '[PRE55]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'For example, our command for the `Quotes` application would look like this
    (all on one line, of course):'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，我们的`Quotes`应用的命令看起来会是这样（当然，所有内容都在一行中）：
- en: '[PRE56]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Once completed, you can open the project directory in `Xcode` (in our case,
    the project directory would be `~/builds/ios/project`) and configure to your heart's
    content. Once everything is correct and running how you would like it, you can
    sign the app and submit it to the Apple App Store.
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦完成，你可以在`Xcode`中打开项目目录（在我们的例子中，项目目录会是`~/builds/ios/project`），并随心所欲地进行配置。一旦一切正确并且按照你的期望运行，你可以签名应用并将其提交到苹果应用商店。
- en: How it works…
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: Meteor leverages the `cordova` library, `Xcode`, and your Mac's operating system
    to bundle, compile, and package your application. The emphasis is to get it into
    `Xcode`, where you can then manipulate the app as you would any native app, testing
    or deploying or submitting to the App Store.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Meteor利用`cordova`库、`Xcode`和你的Mac操作系统来打包、编译和打包你的应用程序。重点是将其放入`Xcode`，在那里你可以像操作任何原生应用一样操作应用，进行测试、部署或提交到应用商店。
- en: The specifics on what to do inside `Xcode` and while submitting to the Apple
    App Store are beyond the scope of this book. If you would like more Meteor-specific
    app building information, please visit [https://github.com/meteor/meteor/wiki/How-to-submit-your-iOS-app-to-App-Store](https://github.com/meteor/meteor/wiki/How-to-submit-your-iOS-app-to-App-Store).
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 关于在`Xcode`中做什么以及在提交到苹果应用商店时的具体操作超出了本书的范围。如果你想了解更多关于Meteor特定应用构建的信息，请访问[https://github.com/meteor/meteor/wiki/How-to-submit-your-iOS-app-to-App-Store](https://github.com/meteor/meteor/wiki/How-to-submit-your-iOS-app-to-App-Store)。
- en: There's more…
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'Everything is brain surgery the first time. Building and deploying a mobile
    app is no exception. Here are some tips to help you troubleshoot, should things
    go wrong:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次做任何事情都是脑力劳动。构建和部署移动应用也不例外。以下是一些帮助你在出现问题时进行故障排除的技巧：
- en: '**Do a "dial tone" test**: If your app is being built but is taking forever
    to "boot up" on the device, or if you just get a blank screen, first try making
    sure all of your network and Xcode configurations are correct. You can do this
    by building a brand new Meteor project using `meteor create my-test-app` and deploying
    that barebones app to your mobile device. If it comes up properly, you''ve successfully
    gotten a "dial tone" and you can start finding out which package or piece of code
    is the source of your slow-loading woes.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进行“拨号音”测试**：如果你的应用正在构建，但在设备上“启动”需要花费很长时间，或者你只看到一个空白屏幕，首先尝试确保你的所有网络和Xcode配置都是正确的。你可以通过使用`meteor
    create my-test-app`创建一个新的Meteor项目，并将这个裸机应用部署到你的移动设备上来做这个测试。如果它能正常启动，那么你已经成功得到了“拨号音”，可以开始找出导致你加载缓慢的包或代码片段。'
- en: '**The Iron Router configuration must be on point**: If you are using Iron Router
    and you don''t have your Iron Router routes configured properly, the app will
    usually refuse to load. If you are running into problems, implement the bare minimum
    routes, with no fancy code, and see if you can get the routes to come up on the
    device. Again, start simple.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**铁路路由配置必须准确**：如果你使用Iron Router并且你的Iron Router路由配置不正确，应用通常会拒绝加载。如果你遇到问题，实现最基本的路由，没有花哨的代码，并看看你是否能在设备上启动路由。再次强调，从简单开始。'
- en: '**Use the simulator**: You don''t have to always push to the actual device.
    Using the `meteor run ios` or `meteor run android` commands will boot up a simulator
    in almost no time, where you can test and debug much more quickly than you could
    on an actual device.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用模拟器**：你不必总是将应用推送到实际设备。使用`meteor run ios`或`meteor run android`命令几乎可以在瞬间启动一个模拟器，在那里你可以比在实际设备上更快地测试和调试。'
- en: '**Use Xcode''s logs**: If there''s a problem, check the logs, found in the
    bottom-right panel of Xcode. You can also set breakpoints using Xcode while the
    app is running on your device, which can help you isolate potential problems.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用Xcode的日志**：如果有问题，请检查日志，日志位于Xcode的右下角面板中。你还可以在应用在你的设备上运行时使用Xcode设置断点，这可以帮助你隔离潜在的问题。'
- en: Above all else, stick with it. We can assure you that deploying to mobile devices,
    once you're properly configured, is extremely straightforward, with very high
    rates of success. Don't give up! Have faith that very soon it will just "click"
    and you won't have any problems/anxiety about building a mobile application. It
    will, in fact, become fun and extremely rewarding as you see your app in the App
    Store or on people's devices. It's worth the learning curve!
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，坚持下去。我们可以向你保证，一旦你正确配置，将内容部署到移动设备上将非常简单，成功率极高。不要放弃！相信很快就会“点击”成功，你将不会在构建移动应用程序时遇到任何问题/焦虑。实际上，当你看到你的应用程序在App
    Store或人们的设备上时，这会变得很有趣，并且极具成就感。值得学习曲线！
- en: See also
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a complete app with Iron Router* recipe in this chapter
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *使用Iron Router创建完整应用程序* 菜谱
- en: Adding social sharing
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加社交分享
- en: With the ever-increasing demand to integrate social media into your apps, you'll
    want to gain a basic understanding of how to send/post/share directly from within
    your app. This recipe will show you how to add Twitter posting (tweets) to your
    application.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 随着将社交媒体集成到你的应用程序中的需求不断增长，你需要了解如何直接从你的应用程序中发送/发布/分享。这个菜谱将向你展示如何将Twitter发布（推文）添加到你的应用程序中。
- en: Getting ready
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using the Quotes application, from the *Creating a complete app with
    Iron Router* recipe found earlier in this in this chapter. Please complete that
    recipe before proceeding.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前在本章中找到的 *使用Iron Router创建完整应用程序* 菜单中的 Quotes 应用程序。请在继续之前完成该菜谱。
- en: We will also be using the `npm` `twit` module to complete this recipe. For a
    step-by-step recipe with a full explanation of each step, please see the first
    part of the *Handling asynchronous events* recipe in [Chapter 11](part0083.xhtml#aid-2F4UM1
    "Chapter 11. Leveraging Advanced Features"), *Leveraging Advanced Features*.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用 `npm` 的 `twit` 模块来完成这个菜谱。有关每个步骤的详细步骤和解释，请参阅第11章 *利用高级功能* 中 *处理异步事件* 菜谱的第一部分，*利用高级功能*。
- en: 'Quickly, here are the steps you''ll need to install and configure the `twit`
    module:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 快速查看以下步骤，你需要安装和配置 `twit` 模块：
- en: 'Execute the following terminal commands:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下终端命令：
- en: '[PRE57]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Open `packages.json` and add the following code:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `packages.json` 文件并添加以下代码：
- en: '[PRE58]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Run the following terminal command:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下终端命令：
- en: '[PRE59]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Create `[project root]/server/config-twit.js` and add the following configuration:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `[项目根目录]/server/config-twit.js` 文件并添加以下配置：
- en: '[PRE60]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: With our Twitter keys, tokens, and secrets all in place, and with `twit` initialized,
    we are ready to start tweeting!
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Twitter密钥、令牌和秘密都到位，并且 `twit` 已经初始化后，我们准备开始发推文！
- en: How to do it…
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: We need to create a server method, update our UI, and give an indication that
    a quote has been shared. Thanks to twit, the actual call to the Twitter API is
    fairly easy. Let's get started.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个服务器方法，更新我们的用户界面，并给出一个引用已被分享的提示。多亏了twit，对Twitter API的实际调用相当简单。让我们开始吧。
- en: First, let's create the `twuote` server method.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们创建 `twuote` 服务器方法。
- en: 'Create a file named `[project root]/server/tweets.js` and add the following
    `Meteor.methods` declaration:'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建一个名为 `[项目根目录]/server/tweets.js` 的文件，并添加以下 `Meteor.methods` 声明：
- en: '[PRE61]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We will first do our checking to make sure that a user is logged in and that
    we were passed the `id` argument of a valid `quote` variable. In the `twuote`
    function call, add the following lines:'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们首先检查用户是否已登录，以及是否传递了有效的 `quote` 变量的 `id` 参数。在 `twuote` 函数调用中，添加以下行：
- en: '[PRE62]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We now need to manipulate the `quote` and `author` strings, making sure it''s
    only `140` maximum in length. Just below the previously inserted lines, add the
    following string manipulation logic:'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们需要操作 `quote` 和 `author` 字符串，确保其长度不超过 `140` 个字符。在之前插入的行下方，添加以下字符串操作逻辑：
- en: '[PRE63]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'After combing the quote, we are ready to send the tweet! Just below the string
    manipulation logic, add the following `Twit.post()` function and wrapped callback
    function:'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在整理完引言后，我们准备发送推文！在字符串操作逻辑下方，添加以下 `Twit.post()` 函数和包装回调函数：
- en: '[PRE64]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Our method is complete. Let's modify our UI.
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们的方法已经完成。让我们修改我们的用户界面。
- en: We'll start modifying our UI by adding the share button.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过添加分享按钮来开始修改我们的用户界面。
- en: 'Open the `[project root]/client/detail.html` file and add the following button
    just below the `toggle-edit` button, inside the parent container element:'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 打开 `[项目根目录]/client/detail.html` 文件，并在 `toggle-edit` 按钮下方，在父容器元素内添加以下按钮：
- en: '[PRE65]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'We want to give our button just a slight downward nudge, so add the following
    CSS directive at the bottom of the `[project root]/client/styles.css` file:'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们希望给我们的按钮一个轻微的下推，所以请在 `[项目根目录]/client/styles.css` 文件底部添加以下 CSS 指令：
- en: '[PRE66]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'We need to add a couple of additional helpers for our button, as well. Open
    `[project root]/client/detail.js`, and add the following two helper functions
    to the bottom of the `Template.detail.helpers` code block (don''t forget the comma
    on the line before, as usual!):'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还需要为我们的按钮添加几个额外的辅助函数。打开 `[项目根目录]/client/detail.js`，并将以下两个辅助函数添加到 `Template.detail.helpers`
    代码块的底部（就像往常一样，别忘了在行前加上逗号）：
- en: '[PRE67]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'All that''s left is hooking up the click event. Open the `[project root]/client/detail.js`
    file, locate the `Template.detail.events` declaration, and add the following click
    `event` handler just inside the closing bracket (don''t forget the comma on the
    line just before the handler!):'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 剩下的只是连接点击事件。打开 `[项目根目录]/client/detail.js` 文件，找到 `Template.detail.events` 声明，并在括号内添加以下点击
    `事件` 处理器（别忘了在处理器前的那一行加上逗号）：
- en: '[PRE68]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Save all of your changes, navigate to your app in a browser (usually `http://localhost:3000`),
    click on a quote to pull up the details page, and click on the button labeled
    **share...** shown in the following screenshot:'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存所有更改，在浏览器中导航到你的应用（通常是 `http://localhost:3000`），点击一个引语以打开详情页面，然后点击以下截图所示的 **分享...**
    按钮：
- en: '![How to do it…](img/image00439.jpeg)'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00439.jpeg)'
- en: 'Give your server a moment or two to send the tweet. The **share...** button
    will turn green and the text will change to **shared**. Your tweet will be live
    on Twitter, as shown in the following screenshot:'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 给你的服务器一点时间来发送推文。**分享...** 按钮将变为绿色，文本将更改为 **已分享**。你的推文将在 Twitter 上实时显示，如下面的截图所示：
- en: '![How to do it…](img/image00440.jpeg)'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/image00440.jpeg)'
- en: How it works…
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The important code is all found in the `[project root]/server/tweets.js` file,
    in the `Meteor.methods({})` declaration.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的代码都位于 `[项目根目录]/server/tweets.js` 文件中的 `Meteor.methods({})` 声明中。
- en: We are calling `Twit.post()`, which takes a callback for its last argument.
    That callback is asynchronous because `twit` is a Node module. Because it is asynchronous,
    we need a way of preserving the current state of the environment while the call
    is out and we need a way of putting the process back into the `event` loop when
    the callback is executed (see the *Handling asynchronous events* recipe in [Chapter
    11](part0083.xhtml#aid-2F4UM1 "Chapter 11. Leveraging Advanced Features"), *Leveraging
    Advanced Features*, for a full explanation).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们调用 `Twit.post()`，它接受一个回调作为最后一个参数。由于 `twit` 是一个 Node 模块，这个回调是异步的。因为它异步，我们需要在调用期间保留环境当前状态的方法，以及当回调执行时将进程放回
    `事件循环` 的方法（有关完整解释，请参阅第 11 章 *处理异步事件* 的 *Handling asynchronous events* 菜谱，*Leveraging
    Advanced Features*）。
- en: 'We accomplish both of these items by wrapping the callback with `Meteor.bindEnvironment()`.
    When the callback does fire, we update the `Quotes` collection, adding a `{tweeted
    : true}` property to the corresponding quote.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '我们通过将回调包裹在 `Meteor.bindEnvironment()` 中来完成这两项任务。当回调触发时，我们更新 `Quotes` 集合，为相应的引语添加
    `{tweeted : true}` 属性。'
- en: This property, in turn, causes our UI to update with the green button and disallows
    additional tweets (checked in the `click event` handler, in `[project root]/client/detail.js`).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性反过来导致我们的 UI 使用绿色按钮更新，并禁止额外的推文（在 `[项目根目录]/client/detail.js` 的 `click 事件`
    处理器中检查）。
- en: So, just like that, we've added social sharing. From here, you can take and
    expand this recipe to other social platforms to be even more seamlessly integrated
    in to your applications.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，我们添加了社交分享功能。从这里，你可以将这个菜谱应用到其他社交平台，使其更无缝地集成到你的应用中。
- en: There's more…
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: It is very, very important that we caution against using the preceding code
    in production! We stripped out all the security and error handling. There is no
    validation, and the example is hard-wired for a single server-side user. If you
    use this code as it is in a production app, something not so pleasant will happen,
    and it won't be our fault (no blamezies allowed!).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须小心，不要在生产环境中使用前面的代码！我们移除了所有的安全和错误处理。没有验证，示例是为单个服务器端用户硬编码的。如果你在生产应用中以这种方式使用此代码，会发生一些不太愉快的事情，而且这不是我们的责任（不允许责备！）。
- en: Instead, we recommend that you flesh these elements out, particularly around
    allowing the use of the logged-in user's access token rather than that of a hard-wired
    user.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们建议您详细阐述这些元素，特别是允许使用已登录用户的访问令牌而不是硬编码的用户令牌。
- en: With just a little bit of spit and polish, you can easily use this code to complement
    your Meteor apps and extend the functionality to Facebook, Instagram, LinkedIn,
    Pinterest, and so on.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 只需稍加润色，您就可以轻松使用此代码来补充您的 Meteor 应用程序，并扩展其功能以支持 Facebook、Instagram、LinkedIn、Pinterest
    等等。
- en: Tip
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For a full write-up on what you can do with the `twit` module, please visit
    [https://github.com/ttezel/twit](https://github.com/ttezel/twit).
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用 `twit` 模块可以做什么的完整说明，请访问 [https://github.com/ttezel/twit](https://github.com/ttezel/twit)。
- en: See also
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding Meteor packages* recipe in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Customizing with Packages"), *Customizing with Packages*
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二章“使用包进行自定义”中的*添加 Meteor 包*配方
- en: The *Handling asynchronous events* recipe in [Chapter 11](part0083.xhtml#aid-2F4UM1
    "Chapter 11. Leveraging Advanced Features"), *Leveraging Advanced Features*
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第十一章“利用高级功能”中的*处理异步事件*配方
- en: The *Creating a complete app with Iron Router* recipe in this chapter
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*使用 Iron Router 创建完整应用*配方
