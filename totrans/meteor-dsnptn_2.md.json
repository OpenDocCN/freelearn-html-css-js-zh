["```js\n# /globals/lib/collections/products/products.coffee\n@Products = new Mongo.Collection \"products\"\n\n# fields:\n#  name\n#  description\n#  sku\n```", "```js\n# /globals\n# ./lib/collections/products/server/products_permissions.coffee\nMeteor.startup ->\n  Products.allow\n    insert: -> true\n    update: -> true\n    remove: -> true\n```", "```js\n//- /products/client/products.jade\ntemplate(name=\"products\")\n  h3.text-center products\n```", "```js\n# /products/server/products_pub.coffee\nMeteor.publish \"products_pub\", ->\n  Products.find {},\n    limit:10\n```", "```js\n# /products/client/products.coffee\nTemplate.products.onCreated ->\n  @autorun =>\n    @subscribe \"products_pub\"\n```", "```js\nonCreated hooks. This means that if we were to define a second onCreated function, the first function will not run. We change this behavior using the xorax:multiple-callbacks package. This package, basically, concatenates onCreated, onRendered, and onDestroyed functions so that they cannot be overwritten. Let's take a look:\n```", "```js\n# /products/client/products.coffee\nTemplate.created \"products\", ->\n  @autorun =>\n    @subscribe \"products_pub\"\n```", "```js\n# /lib/collections/product_images/product_images_collection.coffee\n@ProductImages = new Mongo.Collection \"product_images\"\n\n# fields:\n#  product\n#  master_image\n#  side_image\n#  front_image\n#  top_image\n#  cart_image\n\n# /lib/collections/\n# ./product_images/server/product_images_permissions.coffee\nMeteor.startup ->\n  ProductImages.allow\n    insert: -> true\n    update: -> true\n    remove: -> true\n```", "```js\n# COFFEESCRIPT\nTemplate.landing.helpers\n  \"images\": ->\n    ProductImages.findOne product:@_id\n```", "```js\n# /lib/collections/\n# ./orders/orders_collection.coffee\n@Orders = new Mongo.Collection \"orders\"\n\n# fields\n  # status (\"new\",\"pending\",\"complete\")\n  # total_products\n  # subtotal\n  # tax\n  #   rate\n  #   amount\n  # discounts\n  #   discount\n  #   amount\n  # total\n  # date_created\n```", "```js\n# /lib/collections/\n# ./orders/server/orders_permissions.coffee\nMeteor.startup ->\n  Orders.allow\n    insert: -> true\n    update: -> true\n    remove: -> true\n```", "```js\n# /lib/collections/\n# ./order_details/order_details_collection.coffee\n@OrderDetails = new Mongo.Collection \"order_details\"\n\n# fields\n  # order\n  # product\n  # price\n  # quantity\n  # subtotal\n  # tax\n  #   rate\n  #   amount\n  # total\n  # discounts\n  #   discount\n  #   amount\n\n# /lib/collections/\n# ./order_details/server/order_details_permissions.coffee\nMeteor.startup ->\n  OrderDetails.allow\n    insert: -> true\n    update: -> true\n    remove: -> true\n```", "```js\n# /lib/collections/\n# ./tags/tags_collection.coffee\n@Tags = new Mongo.Collection \"tags\"\n\n# fields\n#  name\n\n# /lib/collections/\n# ./tags/server/tags_permissions.coffee\nMeteor.startup ->\n  Tags.allow\n    insert: -> true\n    update: -> true\n    remove: -> true\n```", "```js\n# /lib/collections/\n# ./products_tags/products_tags_collection.coffee\n@ProductsTags = new Mongo.Collection \"products_tags\"\n\n# fields\n#  product\n#  tag\n\n# /lib/collections/\n# ./tags/server/products_tags_permissions.coffee\nMeteor.startup ->\n  ProductsTags.allow\n    insert: -> true\n    update: -> true\n    remove: -> true\n```", "```js\n# /products/products_route.coffee\nFlowRouter.route \"/\",\n  name:\"products\"\n  action: ->\n    FlowLayout.render \"layout\",\n      content:\"products\"\n```", "```js\n# /products/server/products_pub.coffee\nMeteor.publish \"products\", ->\n  @relations\n    collection:Products\n    options:\n      limit:10\n    mappings:[\n      {\n        key:\"product\"\n        collection:ProductImages\n      }\n    ]\n\n  @ready()\n```", "```js\n# DO NOT CODE THIS INTO YOUR PROJECT\nproducts_cursor = Products.find {},limit:10\n\n# Make products an array with all the _ids\nproducts = products_cursor.map (product) ->\n  product._id\n\n# Find their images\nimages_cursor = ProductImages.find\n  product:\n    $in:products\n\n# Return the cursors in an array\n[products_cursor,images_cursor]\n```", "```js\n# /orders/cart/client/cart.jade\ntemplate(name=\"cart\")\n  h3.text-center cart\n\n# /orders/cart/client/cart.coffee\nTemplate.created \"cart\", ->\n  @autorun =>\n    order = Session.get \"cart.order\"\n    @subscribe \"cart\",\n      order:order\n```", "```js\n# /orders/cart/cart_route.coffee\nFlowRouter.route \"/cart\",\n  name:\"cart\"\n  action: ->\n    FlowLayout.render \"layout\",\n      content:\"cart\"\n```", "```js\n# /orders/cart/server/cart_pub.coffee\nMeteor.publish \"cart\", (ops={}) ->\n  if ops.order and not _.isEmpty ops.order\n    @relations\n      collection:Orders\n      filter:\n        _id:ops.order\n        status:\"new\"\n      mappings:[\n        {\n          key:\"order\"\n          collection:OrderDetails\n          options:\n            limit:25\n          mappings:[\n            {\n              foreign_key:\"product\"\n              collection:Products\n            }\n          ]\n        }\n      ]\n\n  @ready()\n```", "```js\n# /products/client/products.coffee\nTemplate.created \"products\", ->\n  @autorun =>\n    # tags is an array of tag _ids\n    tags = Session.get \"products.tags\"\n    filter = {}\n\n    if tags and not _.isEmpty tags\n      _.extend filter,\n        tags:tags\n\n    @subscribe \"products\", filter\n```", "```js\n# /products/server/products_pub.coffee\nMeteor.publish \"products\", (ops = {}) ->\n  limit = 10\n\n  if ops.tags and not _.isEmpty ops.tags\n    @relations\n      collection:Tags\n      filter:\n        _id:\n          $in:ops.tags\n      mappings:[\n        {\n          collection:ProductsTags\n          key:\"tag\"\n          mappings:[\n            {\n              collection:Products\n              foreign_key:\"product\"\n              options:\n                limit:limit\n              mappings:[\n                {\n                  collection:ProductImages\n                  key:\"product\"\n                }\n              ]\n            }\n          ]\n        }\n      ]\n\n  else\n    @relations\n      collection:Products\n      options:\n        limit:limit\n      mappings:[\n        {\n          key:\"product\"\n          collection:ProductImages\n        }\n      ]\n\n  @ready()\n```", "```js\n# /dashboard/client/dashboard.jade\ntemplate(name=\"dashboard\")\n  h3.text-center dashboard\n\n# /dashboard/client/dashboard.coffee\nTemplate.created \"dashboard\", ->\n  @autorun =>\n    @subscribe \"dashboard\"\n\n# /dashboard/dashboard_route.coffee\nFlowRouter.route \"/dashboard\",\n  name:\"dashboard\"\n  action: ->\n    FlowLayout.render \"layout\",\n      content:\"dashboard\"\n```", "```js\n# /dashboard/client/dashboard.coffee\n@_dashboard = new Mongo.Collection \"_dashboard\"\n\nTemplate.created \"dashboard\", ->\n  @autorun =>\n    @subscribe \"dashboard\"\n```", "```js\n    # /dashboard/server/dashboard_pub.coffee\n    Meteor.publish \"dashboard\", ->\n      totals = Orders.aggregate [\n          {\n            $match:\n              status:\"pending\"\n          }\n          {\n            $group:\n              _id:null\n              total:\n                $sum:\"$total\"\n              subtotal:\n                $sum:\"$subtotal\"\n              discount:\n                $sum:\"$discount.amount\"\n          }\n        ]\n\n      console.log totals\n    ```", "```js\n# /dashboard/server/dashboard_pub.coffee\nMeteor.publish \"dashboard\", ->\n  totals = Orders.aggregate [\n      {\n        $match:\n          status:\"pending\"\n      }\n      {\n        $group:\n          _id:null\n          total:\n            $sum:\"$total\"\n          subtotal:\n            $sum:\"$subtotal\"\n          discount:\n            $sum:\"$discount.amount\"\n      }\n    ]\n\n  if totals and totals.length > 0 and totals[0]\n    @added \"_dashboard\",\"totals\",totals[0]\n```", "```js\n# /dashboard/client/dashboard.coffee\nTemplate.created \"dashboard\", ->\n  @autorun =>\n    @subscribe \"dashboard\"\n\n# /globals/lib/collections/aggregate/client/aggregate.coffee\n@Aggregate = new Mongo.Collection \"aggregate\"\n```", "```js\n# /dashboard/server/dashboard_pub.coffee\nMeteor.publish \"dashboard\", ->\n  totals = Orders.aggregate [\n      {\n        $match:\n          status:\"pending\"\n      }\n      {\n        $group:\n          _id:null\n          total:\n            $sum:\"$total\"\n          subtotal:\n            $sum:\"$subtotal\"\n          discount:\n            $sum:\"$discount.amount\"\n      }\n    ]\n\n  if totals and totals.length > 0 and totals[0]\n    @added \"aggregate\",\"dashboard.totals\",totals[0]\n```", "```js\nAggregate.findOne \"dashboard.totals\"\n```", "```js\n# /dashboard/server/dashboard_pub.coffee\nMeteor.publish \"dashboard\", ->\n  ...\n\nMeteor.publish \"latest_sales\", ->\n  @unblock()\n\n  HTTP.get \"https://api.stripe.com/v1/charges?limit=3\",\n    headers:\n      \"Authorization\":\"Bearer <TEST SECRET KEY>\"\n    (error,result) =>\n      if not error\n        _.each result.data.data, (payment) =>\n          @added \"aggregate\", \"dashboard.sales.#{Meteor.uuid()}\",payment\n      else\n        console.log error\n```", "```js\n# /dashboard/client/dashboard.coffee\nTemplate.created \"dashboard\", ->\n  @autorun =>\n    @subscribe \"dashboard\"\n    @subscribe \"latest_sales\"\n```"]