- en: 'Chapter 9. The App: Getting the Word Out via Twitter'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers our second example of usage of third-party APIs—using the
    Twitter API as an example—and HTML5 form validation capabilities. Twitter is a
    social network that allows users to publish and view messages of up to 140 characters.
    This social network provides a public API that allows developers to do a variety
    of things. As an exercise, we are going to add Twitter OAuth authentication and
    message posting to MovieNow, introducing HTML5 form validation.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this chapter, some basic skill on backend technologies is required. You
    can review the basics of PHP at the following location: [http://php.net/manual/en/tutorial.php](http://php.net/manual/en/tutorial.php).'
  prefs: []
  type: TYPE_NORMAL
- en: Although we use PHP, it is possible to select another solution and its respective
    Twitter library ([https://dev.twitter.com/docs/twitter-libraries](https://dev.twitter.com/docs/twitter-libraries)).
    There are libraries for Java, .NET, Ruby, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Through this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Registering our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to tweet in MovieNow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting tweets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New input field types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use the Twitter API, we need a Twitter account to register our application.
    If you do not have a Twitter account, you can register one for free at [http://www.twitter.com](http://www.twitter.co).
  prefs: []
  type: TYPE_NORMAL
- en: After registering and logging in, you can go to the Twitter developer page at
    [https://dev.twitter.com/](https://dev.twitter.com/).
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our application](img/5689_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click on the **Create an app** link and enter the **Name**, **Description**,
    and **Website** value of your application. **Callback URL** is the address to
    which your app will be redirected after users grant permissions to use their accounts.
    In this case, you can redirect to your index page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our application](img/5689_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After this you only need to accept the terms and conditions, enter the CAPTCHA,
    and click on **Create your Twitter application**.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have your Twitter application created, you can see its details
    in the following page. The most important parameters are **Consume key** and **Consume
    secret**, they are used to authenticate your pp.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You shouldn't expose **Consume key** and **Consume secret** to the client. All
    sensitive data should be encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our application](img/5689_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default, Twitter has the **Access** level as **Read only**. We can go to
    the **Settings** tab, and set **Read and Write** in the **Application Type** section
    and upload an avatar for our application in the **Application Icon** section.
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering our application](img/5689_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are ready to start using the Twitter API.
  prefs: []
  type: TYPE_NORMAL
- en: How to tweet in MovieNow?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To tweet using MovieNow, we need two pieces of functionality: Twitter OAuth
    authentication and status update (tweet).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow of our example is simple: the user authenticates using a **Sign
    In** button in the upper-right corner of MovieNow, then we show the username and
    avatar, and when the user drags a movie to select it (or clicks on iPhone and
    other drag-disabled devices), we show a tweet form with movie details, that can
    be posted by clicking on the **Tweet** button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To simplify our example we are going to use a Twitter-async PHP library that
    wraps the Twitter API and provides asynchronous calls: [https://github.com/jmathai/twitter-async](https://github.com/jmathai/twitter-async).'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jaisen Mathai's Twitter-async documentation can be found at [http://www.jaisenmathai.com/articles/twitter-async-documentation.html](http://www.jaisenmathai.com/articles/twitter-async-documentation.html).
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Download the Twitter-async library and put it in a `lib` folder that we will
    create in the root of the application directory. We should have:'
  prefs: []
  type: TYPE_NORMAL
- en: '`EpiCurl.php` – abstracts the parallel processing using PHP `multi_curl` functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EpiOauth.php` – contains basic methods for OAuth authentication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EpiTwitter.php` – extends `EpiOauth` and abstracts the Twitter API authentication
    and requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, we can create a PHP file called `secret.php` to store our `consume
    key` and `consume secret` (you can find them in your Twitter application account
    page).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We need to change our `index.html` page extension to `index.php` to add PHP
    code. After that we call the PHP `session_start` method to start a new session
    (or resume a previous one if one exists). Then, we import our libraries. Finally,
    we can instantiate the `EpiTwitter` class with our consumer key (`$consumer_key`)
    and consumer secret `($consume` `_secret`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`$twitterObj` has the information needed to start a new Twitter OAuth session
    or get user information using the existing one. To show Twitter login or logged
    information we are going to have two possible cases in our `header`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If user is not logged in and/or application is not authorized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If user is logged in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that we added the class logo to differentiate `divs` with the MovieNow
    logo inside our `header`.
  prefs: []
  type: TYPE_NORMAL
- en: User not logged and/or application not authorized
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When our users are not logged in, we want to show a link to the Twitter login
    page and/or authentication page in MovieNow in the upper-right corner.
  prefs: []
  type: TYPE_NORMAL
- en: '![User not logged and/or application not authorized](img/5689_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To do that, we obtain the authorization URL from `$twitterObj` and create a
    link with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If users access this link and they are already logged into Twitter, they will
    go directly to the MovieNow authorization screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![User not logged and/or application not authorized](img/5689_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If users are not logged into Twitter, they will see the login screen first.
  prefs: []
  type: TYPE_NORMAL
- en: '![User not logged and/or application not authorized](img/5689_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After logging in, they will see the Twitter MovieNow authorization screen. When
    the login/authorization process ends, browsers are redirected to your **Callback
    URL**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember that you can change your **Callback URL** anytime by going to [https://dev.twitter.com/](https://dev.twitter.com/)
    and changing it in the **Settings** tab.
  prefs: []
  type: TYPE_NORMAL
- en: The callback URL will receive `oauth_verifier` and `oauth_token` as parameters.
    We need to use `oauth_token` to set the user session information. In session we
    are going to store `$_SESSION['oauth_token']` and `$_SESSION['oauth_token_secret']`.
    If they are set, then the user is already logged in. If not, we need to use `$_GET['oauth_token']`
    to set our session information.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we verify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to set our session, we use `$twitterObj` passing `$_GET[''oauth_token'']`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We then access the token information to set our session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we set our token using `oauth_token` and `oauth_token_secret` obtained
    from the `getAccessToken` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: User logged in
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If users are logged in, they would like to see something that informs them that
    they are logged in. For that reason, we are going to show their Twitter avatar
    and username in the upper-right corner of our header.
  prefs: []
  type: TYPE_NORMAL
- en: '![User logged in](img/5689_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is a good practice to show login and user logged information in the same
    space in any enterprise application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we only need to get user information, so we can use `get_accountVerify_credentials`
    to get the username and avatar location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Build a link to the Twitter user account and display the avatar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Wrapping it all together, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Adding some styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that our login interaction is done, we can add styles in `styles.css`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we change the `div` style of `header` to `logo` to have another `div`
    tag with different styles inside `header`. Remember to change this in the Retina
    Display case too (`@media only screen and (-webkit-min-device-pixel-ratio:2),only
    screen and (min-device-pixel-ratio: 2)`).'
  prefs: []
  type: TYPE_NORMAL
- en: The `twitter-info` class is our container for Twitter information whether the
    user is logged in or not. We set `position` to `absolute` to hide the username
    and show only the user avatar when devices with smaller screens are used.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can remove the outline from links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can remove all outlines from links using `a{outline:none;}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add login image and dimensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Position the user avatar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the text style information for the username:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `@media only screen and (max-width: 737px)` media query we need
    to hide the username and show only the Twitter avatar if the user is not logged
    in.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hide part of `twitter-info` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Move the avatar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Hide the username:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our Twitter login process on devices with smaller screens should look like
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding some styles](img/5689_09_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After you click on the Twitter button at the top, you will be redirected to
    the Twitter authentication page (if you are not logged into Twitter, it will redirect
    you to the login page first).
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding some styles](img/5689_09_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you authorize the application, then the next screen will show your Twitter
    avatar in the top section of the page.
  prefs: []
  type: TYPE_NORMAL
- en: Posting tweets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our user is now authenticated. The next step is to allow for tweeting about
    movies. In this case, let us use AJAX to call a service that receives a message
    to tweet as a `tweet` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us create a file called `tweet.php` and store it in the root of our application.
    Import the Twitter-async libraries and `secret.php` configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We are going to return a JSON object indicating whether the tweet was successfully
    posted or not. Let us define a variable `$result` and set default status to `ok`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We can instantiate `EpiTwitter` with our application info and verify the session.
    If no session exists, set the status to `error`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If the session exists, set the `$twitterObj` token and verify credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If we have the `tweet` parameter, we unescape our message and invoke the `post_statusesUpdate`
    API passing our tweet inside `status`, an indexed array. We can then save the
    response in a `$temp` variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we validate if `$temp` contains an error and return `$result` as JSON:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Wrapping it all together, we should have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Applying HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to display our tweet form as a modal window with a curtain to
    obscure the rest of the application. We will start by adding the code for the
    tweet form at the end of the body in `index.php`. Next, we will set up the curtain
    to cover our page (we will style this as black with transparency):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'For our modal area, we will create a section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For `modal-background-color` we do not use `section` because it doesn't have
    any semantic information.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will define the tweet window as a `div`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then add a bar with title and a close button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, we have our tweet form itself. Notice that we set the `maxlength` attribute
    of the `textarea` to 140 since tweets can be no more than 140 characters.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `maxlength` attribute in the `textatarea` element is not supported by Internet
    Explorer 9 or previous versions. This is because it was not standard for `textarea`
    in the HTML 4.01 specification, but it was added later in HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Putting it all together, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we are using the `required` attribute to indicate that this field
    can not be blank. The `required` attribute is an HTML5 attribute used for form
    validation. We are using `maxlength` as well to limit the number of characters
    allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Adding more styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have the HTML structure of our tweet window, but we haven''t added styles
    yet. Our final design should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding more styles](img/5689_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To achieve this we are going to add some styles in `styles.css`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We set `modal-background-color` to cover our page using `fixed` positioning
    and `z-index: 5000`. This background should be black with an opacity of 80 percent.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Although `-ms-filter` is being used to give support for older versions of Internet
    Explorer, it is a proprietary solution of Microsoft that does not follow the standard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We want `modal-background` to be on top of `modal-background-color`, so we
    use `z-index: 5100`. Both areas should be hidden by default with `display:none`
    as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our `tweet` area is white with rounded corners and centered using `margin:110px
    auto`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We then float the tweet title left and add some padding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For our text area `#tweet`, we remove the outline, add some padding and margin,
    and set rounded corners border style and font style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'By default, our submit button `#tweet-submit` is gray:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an `active` class to set the style when it is active, coloring our button
    with a blue gradient, blue border, and white font:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On hover, make it a little darker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Float the character counter and submit button to the right and remove the outline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the character counter font style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `close.png` sprite image to `#close-tweet` button and set its styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Move the image on hover:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a different style to the bar that contains the title and close button.
    Notice that we round off upper-left and right corners:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, set `height` for the area that contains the tweet submit button and
    character counter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For mobile devices, add a different `width` for the text area and tweet window
    using the `@media only screen and (max-width: 737px)` media query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our tweet windows should look like the following screenshot on devices with
    smaller screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding more styles](img/5689_09_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding JavaScript interactions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we need to add the respective JavaScript to connect the dots. Let us create
    a new file `movienow.tweet.js` in the `js` folder. We import that file before
    `movienow.draganddrop.js` inside `index.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you noticed we are using a bunch of JavaScript libraries, it is good practice
    to implement minification techniques for our JavaScript and CSS to reduce the
    size of our files and the number of requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the main code structure and add a variable `twitterReady` to verify
    if the tweet window is initialized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Hide and show functionality will be handled by `showTweetArea` and `hideTweetArea`
    functions. For `showTweetArea`, we verify if `twitterReady` is `true`; if not
    we call `initTweet` function to set Twitter window events and assign `true` to
    `twitterReady`.
  prefs: []
  type: TYPE_NORMAL
- en: We can assign `message` (with default text) to the text area and show the tweet
    window. If the user is not logged in, we show an alert.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A more elegant way to show notifications and errors in our enterprise application
    is to define custom modal windows using HTML and style them with CSS. Moreover,
    it is possible to use template engines (like Mustache, found at [http://mustache.github.com](http://mustache.github.com))
    to implement this solution.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we set `$("html,body").css("overflow","auto")` to hide the browser
    scroll bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `hideTweetArea` method hides the tweet window and restores the browser
    scroll bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: To update the character counter, we add an `updateCount` method. We extract
    the `#tweet` text area message and validate its length against 140 characters.
    We add the `active` class to our submit button only when it is possible to tweet.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: A native alternative to implement this is the use of the attribute `disabled`
    in our input field instead of adding and removing the `active` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our initialization method, `initTweet`, adds the necessary events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we create a method to call our PHP service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The `checkValidity` method is an HTML5 JavaScript function that allows us to
    verify whether the fields are valid. In our case, since the text area is required,
    the validation is that it is not empty.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are using AJAX, we add return `false` at the end to avoid a page refresh
    on submit.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Typically, we would need to extract all inputs from the form and construct a
    data parameter for our AJAX call. There is a useful function in jQuery called
    `serialize` that constructs this for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Put it all together and we should have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`checkValidity` is not available in all browsers. It is recommended to give
    support across browsers writing your own `checkValidity` function when it is not
    available. You can check out one approach to this solution on the [http://perplexed.co.uk/5201_making_html5_form_backwards_compatible.htm](http://perplexed.co.uk/5201_making_html5_form_backwards_compatible.htm)
    page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'What remains is to add a call in `movienow.dragnaddrop.js`. Inside our listener
    for the drop event, we add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we now have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'For mobile and non-drag-and-drop-enabled devices, we add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Our tweet system is ready. If we select a movie (dragging or clicking depending
    on the device), we can tweet by clicking on the **tweet** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding JavaScript interactions](img/5689_09_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Form validation support across browsers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As in other HTML5 features, form validation is not consistent across browsers.
    In our case, if we select a movie, delete the text area content in the tweet window,
    and try to submit, the behavior will be different in each browser.
  prefs: []
  type: TYPE_NORMAL
- en: In Firefox, the form validation we see is a red border and a message.
  prefs: []
  type: TYPE_NORMAL
- en: '![Form validation support across browsers](img/5689_09_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In Chrome, form validation uses title to show **Tweet Required!** message but
    does not show the red border.
  prefs: []
  type: TYPE_NORMAL
- en: '![Form validation support across browsers](img/5689_09_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Safari only blocks the submit action.
  prefs: []
  type: TYPE_NORMAL
- en: Even if form validation becomes consistent, the user interface elements of every
    browser are totally different (you will notice a black tooltip in Firefox and
    a white one with an icon in Chrome). For now, validation can be done with JavaScript
    from scratch or with jQuery plugins ([http://docs.jquery.com/Plugins/Validation](http://docs.jquery.com/Plugins/Validation)).
  prefs: []
  type: TYPE_NORMAL
- en: To disable HTML5 form validation, add the `novalidate` attribute to the form.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even if data is validated on the client side, it must also be validated on the
    server side. Remember that for some users it is pretty easy to change JavaScript
    code.
  prefs: []
  type: TYPE_NORMAL
- en: New input fields types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'HTML5 introduces new input types for forms. These allow better control and
    validation, but sadly are not fully supported in all modern browsers. They are
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`color` is used to select colors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date` allows for date selection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datetime` allows for date and time selection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datetime-local` allows for date and time selection with no time zone'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`email` is used for input fields that should contain email address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`month` allows for month and year selection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`number` is used for inputs with numeric values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`range` renders as a slider that allows for selection of a value within a range
    of numbers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`search` is used for search fields'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tel` is used for entering telephone numbers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time` allows for time selection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url` is used for inputs that should contain valid URLs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`week` allows for week and year selection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With a wide range of social networks and services offering their data via APIs,
    we can enrich our enterprise applications by complementing them with more data
    and functionality. Moreover, you can use OAuth authentication to provide alternative
    authentication methods to your users. Lastly, HTML5 form validation and the new
    input types appear to not be sufficiently mature to apply them as solutions for
    enterprise applications; instead fallback JavaScript solutions should be implemented
    to provide the same experience across browsers. We hope browser developers adopt
    this part of the HTML5 specification soon because it will translate to shorter
    development cycles, more reliable form data, and better experiences for the user.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover Web Workers and the power they give enterprise
    applications by adding the ability to run background processes and multi-thread
    our applications.
  prefs: []
  type: TYPE_NORMAL
