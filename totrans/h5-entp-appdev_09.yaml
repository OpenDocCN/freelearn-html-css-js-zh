- en: 'Chapter 9. The App: Getting the Word Out via Twitter'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章：应用：通过Twitter传播信息
- en: This chapter covers our second example of usage of third-party APIs—using the
    Twitter API as an example—and HTML5 form validation capabilities. Twitter is a
    social network that allows users to publish and view messages of up to 140 characters.
    This social network provides a public API that allows developers to do a variety
    of things. As an exercise, we are going to add Twitter OAuth authentication and
    message posting to MovieNow, introducing HTML5 form validation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了我们的第二个第三方API使用示例——以Twitter API为例，并介绍HTML5表单验证功能。Twitter是一个允许用户发布和查看最多140个字符的消息的社会网络。这个社交网络提供了一个公共API，允许开发者执行各种操作。作为练习，我们将向MovieNow添加Twitter
    OAuth身份验证和消息发布功能，并介绍HTML5表单验证。
- en: 'For this chapter, some basic skill on backend technologies is required. You
    can review the basics of PHP at the following location: [http://php.net/manual/en/tutorial.php](http://php.net/manual/en/tutorial.php).'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，需要一些后端技术的基本技能。您可以在以下位置查看PHP的基础知识：[http://php.net/manual/en/tutorial.php](http://php.net/manual/en/tutorial.php)。
- en: Although we use PHP, it is possible to select another solution and its respective
    Twitter library ([https://dev.twitter.com/docs/twitter-libraries](https://dev.twitter.com/docs/twitter-libraries)).
    There are libraries for Java, .NET, Ruby, and so on.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们使用PHP，但可以选择其他解决方案及其相应的Twitter库（[https://dev.twitter.com/docs/twitter-libraries](https://dev.twitter.com/docs/twitter-libraries)）。有Java、.NET、Ruby等库。
- en: 'Through this chapter we will cover:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们将涵盖以下内容：
- en: Registering our application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册我们的应用程序
- en: How to tweet in MovieNow
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在MovieNow上发推文
- en: Authenticating
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证
- en: Posting tweets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布推文
- en: New input field types
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新输入字段类型
- en: Registering our application
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册我们的应用程序
- en: To use the Twitter API, we need a Twitter account to register our application.
    If you do not have a Twitter account, you can register one for free at [http://www.twitter.com](http://www.twitter.co).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Twitter API，我们需要一个Twitter账户来注册我们的应用程序。如果您没有Twitter账户，您可以在[http://www.twitter.com](http://www.twitter.com)免费注册一个。
- en: After registering and logging in, you can go to the Twitter developer page at
    [https://dev.twitter.com/](https://dev.twitter.com/).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注册并登录后，您可以访问Twitter开发者页面[https://dev.twitter.com/](https://dev.twitter.com/)。
- en: '![Registering our application](img/5689_09_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的应用程序](img/5689_09_01.jpg)'
- en: Click on the **Create an app** link and enter the **Name**, **Description**,
    and **Website** value of your application. **Callback URL** is the address to
    which your app will be redirected after users grant permissions to use their accounts.
    In this case, you can redirect to your index page.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建应用**链接，并输入您的应用的**名称**、**描述**和**网站**值。**回调URL**是用户授权使用其账户后应用将被重定向到的地址。在这种情况下，您可以重定向到您的首页。
- en: '![Registering our application](img/5689_09_02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的应用程序](img/5689_09_02.jpg)'
- en: After this you only need to accept the terms and conditions, enter the CAPTCHA,
    and click on **Create your Twitter application**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，您只需接受条款和条件，输入验证码，然后点击**创建您的Twitter应用程序**。
- en: Now that you have your Twitter application created, you can see its details
    in the following page. The most important parameters are **Consume key** and **Consume
    secret**, they are used to authenticate your pp.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经创建了Twitter应用程序，您可以在以下页面查看其详细信息。最重要的参数是**消费密钥**和**消费密钥**，它们用于验证您的应用。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You shouldn't expose **Consume key** and **Consume secret** to the client. All
    sensitive data should be encrypted.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您不应该向客户端暴露**消费密钥**和**消费密钥**。所有敏感数据都应该加密。
- en: '![Registering our application](img/5689_09_04.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的应用程序](img/5689_09_04.jpg)'
- en: By default, Twitter has the **Access** level as **Read only**. We can go to
    the **Settings** tab, and set **Read and Write** in the **Application Type** section
    and upload an avatar for our application in the **Application Icon** section.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Twitter的**访问级别**为**只读**。我们可以转到**设置**选项卡，在**应用类型**部分中将**读取和写入**设置为**读和写**，并在**应用图标**部分上传我们的应用图标。
- en: '![Registering our application](img/5689_09_05.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![注册我们的应用程序](img/5689_09_05.jpg)'
- en: We are ready to start using the Twitter API.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已准备好开始使用Twitter API。
- en: How to tweet in MovieNow?
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在MovieNow上发推文？
- en: 'To tweet using MovieNow, we need two pieces of functionality: Twitter OAuth
    authentication and status update (tweet).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用MovieNow发推文，我们需要两个功能：Twitter OAuth身份验证和状态更新（推文）。
- en: 'The workflow of our example is simple: the user authenticates using a **Sign
    In** button in the upper-right corner of MovieNow, then we show the username and
    avatar, and when the user drags a movie to select it (or clicks on iPhone and
    other drag-disabled devices), we show a tweet form with movie details, that can
    be posted by clicking on the **Tweet** button.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'To simplify our example we are going to use a Twitter-async PHP library that
    wraps the Twitter API and provides asynchronous calls: [https://github.com/jmathai/twitter-async](https://github.com/jmathai/twitter-async).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jaisen Mathai's Twitter-async documentation can be found at [http://www.jaisenmathai.com/articles/twitter-async-documentation.html](http://www.jaisenmathai.com/articles/twitter-async-documentation.html).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Download the Twitter-async library and put it in a `lib` folder that we will
    create in the root of the application directory. We should have:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '`EpiCurl.php` – abstracts the parallel processing using PHP `multi_curl` functions'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EpiOauth.php` – contains basic methods for OAuth authentication'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EpiTwitter.php` – extends `EpiOauth` and abstracts the Twitter API authentication
    and requests'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, we can create a PHP file called `secret.php` to store our `consume
    key` and `consume secret` (you can find them in your Twitter application account
    page).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We need to change our `index.html` page extension to `index.php` to add PHP
    code. After that we call the PHP `session_start` method to start a new session
    (or resume a previous one if one exists). Then, we import our libraries. Finally,
    we can instantiate the `EpiTwitter` class with our consumer key (`$consumer_key`)
    and consumer secret `($consume` `_secret`).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`$twitterObj` has the information needed to start a new Twitter OAuth session
    or get user information using the existing one. To show Twitter login or logged
    information we are going to have two possible cases in our `header`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'If user is not logged in and/or application is not authorized:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If user is logged in:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that we added the class logo to differentiate `divs` with the MovieNow
    logo inside our `header`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: User not logged and/or application not authorized
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When our users are not logged in, we want to show a link to the Twitter login
    page and/or authentication page in MovieNow in the upper-right corner.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![User not logged and/or application not authorized](img/5689_09_06.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: 'To do that, we obtain the authorization URL from `$twitterObj` and create a
    link with it:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If users access this link and they are already logged into Twitter, they will
    go directly to the MovieNow authorization screen:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![User not logged and/or application not authorized](img/5689_09_07.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: If users are not logged into Twitter, they will see the login screen first.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![User not logged and/or application not authorized](img/5689_09_08.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: After logging in, they will see the Twitter MovieNow authorization screen. When
    the login/authorization process ends, browsers are redirected to your **Callback
    URL**.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，他们将看到 Twitter MovieNow 授权屏幕。当登录/授权过程结束时，浏览器将重定向到您的 **回调 URL**。
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remember that you can change your **Callback URL** anytime by going to [https://dev.twitter.com/](https://dev.twitter.com/)
    and changing it in the **Settings** tab.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您可以通过访问 [https://dev.twitter.com/](https://dev.twitter.com/) 并在 **设置** 选项卡中更改它来随时更改您的
    **回调 URL**。
- en: The callback URL will receive `oauth_verifier` and `oauth_token` as parameters.
    We need to use `oauth_token` to set the user session information. In session we
    are going to store `$_SESSION['oauth_token']` and `$_SESSION['oauth_token_secret']`.
    If they are set, then the user is already logged in. If not, we need to use `$_GET['oauth_token']`
    to set our session information.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 回调 URL 将接收 `oauth_verifier` 和 `oauth_token` 作为参数。我们需要使用 `oauth_token` 来设置用户会话信息。在会话中，我们将存储
    `$_SESSION['oauth_token']` 和 `$_SESSION['oauth_token_secret']`。如果它们已设置，则表示用户已经登录。如果没有，我们需要使用
    `$_GET['oauth_token']` 来设置我们的会话信息。
- en: 'First, we verify:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们验证：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, to set our session, we use `$twitterObj` passing `$_GET[''oauth_token'']`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了设置我们的会话，我们使用 `$twitterObj` 传递 `$_GET['oauth_token']`：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We then access the token information to set our session:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们访问令牌信息以设置我们的会话：
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, we set our token using `oauth_token` and `oauth_token_secret` obtained
    from the `getAccessToken` method:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用从 `getAccessToken` 方法获得的 `oauth_token` 和 `oauth_token_secret` 来设置我们的令牌：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: User logged in
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户已登录
- en: If users are logged in, they would like to see something that informs them that
    they are logged in. For that reason, we are going to show their Twitter avatar
    and username in the upper-right corner of our header.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户已登录，他们希望看到一些信息来告知他们已登录。因此，我们将在页眉的右上角显示他们的 Twitter 头像和用户名。
- en: '![User logged in](img/5689_09_09.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![用户已登录](img/5689_09_09.jpg)'
- en: Tip
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is a good practice to show login and user logged information in the same
    space in any enterprise application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何企业应用程序中，在相同的空间中显示登录和用户已登录信息是一种良好的做法。
- en: 'Now we only need to get user information, so we can use `get_accountVerify_credentials`
    to get the username and avatar location:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需要获取用户信息，因此我们可以使用 `get_accountVerify_credentials` 来获取用户名和头像位置：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Build a link to the Twitter user account and display the avatar:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 建立指向 Twitter 用户账户的链接并显示头像：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Wrapping it all together, we have:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些整合在一起，我们有：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Adding some styles
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一些样式
- en: Now that our login interaction is done, we can add styles in `styles.css`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了登录交互，我们可以在 `styles.css` 中添加样式。
- en: 'First, we change the `div` style of `header` to `logo` to have another `div`
    tag with different styles inside `header`. Remember to change this in the Retina
    Display case too (`@media only screen and (-webkit-min-device-pixel-ratio:2),only
    screen and (min-device-pixel-ratio: 2)`).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，我们更改 `header` 的 `div` 样式为 `logo`，以便在 `header` 内部有一个具有不同样式的 `div` 标签。请记住，在
    Retina 显示情况下也要更改此设置（`@media only screen and (-webkit-min-device-pixel-ratio:2),only
    screen and (min-device-pixel-ratio: 2)`）。'
- en: The `twitter-info` class is our container for Twitter information whether the
    user is logged in or not. We set `position` to `absolute` to hide the username
    and show only the user avatar when devices with smaller screens are used.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`twitter-info` 类是我们用于存储 Twitter 信息的容器，无论用户是否已登录。我们设置 `position` 为 `absolute`
    以在屏幕较小的设备上隐藏用户名并仅显示用户头像。'
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can remove the outline from links:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以删除链接的轮廓：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can remove all outlines from links using `a{outline:none;}`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `a{outline:none;}` 删除链接的所有轮廓。
- en: 'Add login image and dimensions:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 添加登录图像和尺寸：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Position the user avatar:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 定位用户头像：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Set the text style information for the username:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 设置用户名的文本样式信息：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Inside the `@media only screen and (max-width: 737px)` media query we need
    to hide the username and show only the Twitter avatar if the user is not logged
    in.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '在 `@media only screen and (max-width: 737px)` 媒体查询内部，我们需要隐藏用户名并显示 Twitter 头像，如果用户未登录。'
- en: 'Hide part of `twitter-info` block:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏 `twitter-info` 块的一部分：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Move the avatar:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 移动头像：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Hide the username:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏用户名：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now our Twitter login process on devices with smaller screens should look like
    the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 Twitter 登录过程在屏幕较小的设备上应该看起来像以下截图：
- en: '![Adding some styles](img/5689_09_10.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![添加一些样式](img/5689_09_10.jpg)'
- en: After you click on the Twitter button at the top, you will be redirected to
    the Twitter authentication page (if you are not logged into Twitter, it will redirect
    you to the login page first).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在您点击顶部的 Twitter 按钮后，您将被重定向到 Twitter 认证页面（如果您未登录到 Twitter，它将首先重定向您到登录页面）。
- en: '![Adding some styles](img/5689_09_11.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![添加一些样式](img/5689_09_11.jpg)'
- en: If you authorize the application, then the next screen will show your Twitter
    avatar in the top section of the page.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你授权应用程序，则下一个屏幕将显示你的 Twitter 头像在页面的顶部部分。
- en: Posting tweets
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布推文
- en: Our user is now authenticated. The next step is to allow for tweeting about
    movies. In this case, let us use AJAX to call a service that receives a message
    to tweet as a `tweet` parameter.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的用户现在已认证。下一步是允许发布关于电影的推文。在这种情况下，让我们使用 AJAX 调用一个接收要推文的消息作为 `tweet` 参数的服务。
- en: Service
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务
- en: 'Let us create a file called `tweet.php` and store it in the root of our application.
    Import the Twitter-async libraries and `secret.php` configuration file:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个名为 `tweet.php` 的文件，并将其存储在我们的应用程序的根目录中。导入 Twitter-async 库和 `secret.php`
    配置文件：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We are going to return a JSON object indicating whether the tweet was successfully
    posted or not. Let us define a variable `$result` and set default status to `ok`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将返回一个 JSON 对象，指示推文是否成功发布。让我们定义一个变量 `$result` 并将其默认状态设置为 `ok`。
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can instantiate `EpiTwitter` with our application info and verify the session.
    If no session exists, set the status to `error`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用我们的应用程序信息和验证会话来实例化 `EpiTwitter`。如果不存在会话，将状态设置为 `error`：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'If the session exists, set the `$twitterObj` token and verify credentials:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果会话存在，设置 `$twitterObj` 令牌并验证凭证：
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If we have the `tweet` parameter, we unescape our message and invoke the `post_statusesUpdate`
    API passing our tweet inside `status`, an indexed array. We can then save the
    response in a `$temp` variable.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有 `tweet` 参数，我们将转义我们的消息并调用 `post_statusesUpdate` API，将推文放在 `status`，一个索引数组中。然后我们可以将响应保存到
    `$temp` 变量中。
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, we validate if `$temp` contains an error and return `$result` as JSON:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们验证 `$temp` 是否包含错误，并将 `$result` 作为 JSON 返回：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Wrapping it all together, we should have:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些整合在一起，我们应该有：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Applying HTML
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用 HTML
- en: 'We are going to display our tweet form as a modal window with a curtain to
    obscure the rest of the application. We will start by adding the code for the
    tweet form at the end of the body in `index.php`. Next, we will set up the curtain
    to cover our page (we will style this as black with transparency):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将显示我们的推文表单作为一个带有幕布的模态窗口，以遮挡应用的其他部分。我们将首先在 `index.php` 的末尾添加推文表单的代码。接下来，我们将设置幕布以覆盖我们的页面（我们将将其样式设置为黑色并带有透明度）：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'For our modal area, we will create a section:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的模态区域，我们将创建一个部分：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Tip
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For `modal-background-color` we do not use `section` because it doesn't have
    any semantic information.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `modal-background-color`，我们不使用 `section`，因为它没有任何语义信息。
- en: 'We will define the tweet window as a `div`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将定义推文窗口为一个 `div`：
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We can then add a bar with title and a close button:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以添加一个带有标题和关闭按钮的栏：
- en: '[PRE30]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Lastly, we have our tweet form itself. Notice that we set the `maxlength` attribute
    of the `textarea` to 140 since tweets can be no more than 140 characters.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有我们的推文表单本身。注意，我们将 `textarea` 的 `maxlength` 属性设置为 140，因为推文不能超过 140 个字符。
- en: Tip
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `maxlength` attribute in the `textatarea` element is not supported by Internet
    Explorer 9 or previous versions. This is because it was not standard for `textarea`
    in the HTML 4.01 specification, but it was added later in HTML5.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`textarea` 元素中的 `maxlength` 属性在 Internet Explorer 9 或更早版本中不受支持。这是因为它不是 HTML
    4.01 规范中 `textarea` 的标准，但它后来被添加到 HTML5 中。'
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Putting it all together, we have:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些整合在一起，我们有：
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Notice that we are using the `required` attribute to indicate that this field
    can not be blank. The `required` attribute is an HTML5 attribute used for form
    validation. We are using `maxlength` as well to limit the number of characters
    allowed.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用 `required` 属性来表示此字段不能为空。`required` 属性是一个用于表单验证的 HTML5 属性。我们还使用 `maxlength`
    来限制允许的字符数。
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Adding more styles
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加更多样式
- en: 'We have the HTML structure of our tweet window, but we haven''t added styles
    yet. Our final design should look like the following screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了我们的推文窗口的 HTML 结构，但我们还没有添加样式。我们的最终设计应该看起来像以下截图：
- en: '![Adding more styles](img/5689_09_13.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![添加更多样式](img/5689_09_13.jpg)'
- en: To achieve this we are going to add some styles in `styles.css`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将在 `styles.css` 中添加一些样式。
- en: 'We set `modal-background-color` to cover our page using `fixed` positioning
    and `z-index: 5000`. This background should be black with an opacity of 80 percent.'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '我们将 `modal-background-color` 设置为使用 `fixed` 定位和 `z-index: 5000` 来覆盖我们的页面。这个背景应该是黑色，透明度为
    80%。'
- en: '[PRE34]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Tip
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Although `-ms-filter` is being used to give support for older versions of Internet
    Explorer, it is a proprietary solution of Microsoft that does not follow the standard.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然正在使用`-ms-filter`来支持较老版本的Internet Explorer，但这是一种微软的专有解决方案，并不遵循标准。
- en: 'We want `modal-background` to be on top of `modal-background-color`, so we
    use `z-index: 5100`. Both areas should be hidden by default with `display:none`
    as shown in the following code snippet:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '我们希望`modal-background`位于`modal-background-color`之上，因此我们使用`z-index: 5100`。默认情况下，这两个区域都应通过`display:none`隐藏，如下面的代码片段所示：'
- en: '[PRE35]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Our `tweet` area is white with rounded corners and centered using `margin:110px
    auto`:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的`tweet`区域为白色，带有圆角，并使用`margin:110px auto`进行居中：
- en: '[PRE36]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We then float the tweet title left and add some padding:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将tweet标题向左浮动并添加一些填充：
- en: '[PRE37]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'For our text area `#tweet`, we remove the outline, add some padding and margin,
    and set rounded corners border style and font style:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于我们的文本区域`#tweet`，我们移除轮廓，添加一些填充和边距，并设置圆角边框样式和字体样式：
- en: '[PRE38]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'By default, our submit button `#tweet-submit` is gray:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，我们的提交按钮`#tweet-submit`是灰色：
- en: '[PRE39]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add an `active` class to set the style when it is active, coloring our button
    with a blue gradient, blue border, and white font:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`active`类来设置活动时的样式，用蓝色渐变、蓝色边框和白色字体来着色我们的按钮：
- en: '[PRE40]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'On hover, make it a little darker:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在鼠标悬停时，使其稍微暗一些：
- en: '[PRE41]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Float the character counter and submit button to the right and remove the outline:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将字符计数器和提交按钮向右浮动并移除轮廓：
- en: '[PRE42]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Set the character counter font style:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置字符计数器的字体样式：
- en: '[PRE43]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Add the `close.png` sprite image to `#close-tweet` button and set its styles:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`close.png`精灵图像添加到`#close-tweet`按钮，并设置其样式：
- en: '[PRE44]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Move the image on hover:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在鼠标悬停时移动图片：
- en: '[PRE45]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Add a different style to the bar that contains the title and close button.
    Notice that we round off upper-left and right corners:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为包含标题和关闭按钮的栏添加不同的样式。注意我们收圆了左上角和右下角：
- en: '[PRE46]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Finally, set `height` for the area that contains the tweet submit button and
    character counter:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为包含tweet提交按钮和字符计数器的区域设置`height`：
- en: '[PRE47]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'For mobile devices, add a different `width` for the text area and tweet window
    using the `@media only screen and (max-width: 737px)` media query:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '对于移动设备，使用`@media only screen and (max-width: 737px)`媒体查询为文本区域和tweet窗口添加不同的`width`：'
- en: '[PRE48]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Our tweet windows should look like the following screenshot on devices with
    smaller screens:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕较小的设备上，我们的tweet窗口应类似于以下截图：
- en: '![Adding more styles](img/5689_09_14.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![添加更多样式](img/5689_09_14.jpg)'
- en: Adding JavaScript interactions
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加JavaScript交互
- en: 'Now we need to add the respective JavaScript to connect the dots. Let us create
    a new file `movienow.tweet.js` in the `js` folder. We import that file before
    `movienow.draganddrop.js` inside `index.php`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要添加相应的JavaScript来连接这些点。让我们在`js`文件夹中创建一个新的文件`movienow.tweet.js`。在`index.php`中，我们在`movienow.draganddrop.js`之前导入该文件：
- en: '[PRE49]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Tip
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: As you noticed we are using a bunch of JavaScript libraries, it is good practice
    to implement minification techniques for our JavaScript and CSS to reduce the
    size of our files and the number of requests.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所注意到的，我们使用了一堆JavaScript库，实现最小化技术以减少我们的JavaScript和CSS文件的大小和请求数量是一个好习惯。
- en: 'Define the main code structure and add a variable `twitterReady` to verify
    if the tweet window is initialized:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 定义主要代码结构并添加一个变量`twitterReady`来验证tweet窗口是否已初始化：
- en: '[PRE50]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Hide and show functionality will be handled by `showTweetArea` and `hideTweetArea`
    functions. For `showTweetArea`, we verify if `twitterReady` is `true`; if not
    we call `initTweet` function to set Twitter window events and assign `true` to
    `twitterReady`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏和显示功能将由`showTweetArea`和`hideTweetArea`函数处理。对于`showTweetArea`，我们验证`twitterReady`是否为`true`；如果不是，我们调用`initTweet`函数来设置Twitter窗口事件并将`true`赋给`twitterReady`。
- en: We can assign `message` (with default text) to the text area and show the tweet
    window. If the user is not logged in, we show an alert.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将`message`（带有默认文本）分配给文本区域并显示tweet窗口。如果用户未登录，我们显示一个警告。
- en: '[PRE51]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Tip
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: A more elegant way to show notifications and errors in our enterprise application
    is to define custom modal windows using HTML and style them with CSS. Moreover,
    it is possible to use template engines (like Mustache, found at [http://mustache.github.com](http://mustache.github.com))
    to implement this solution.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的企业应用中显示通知和错误的一个更优雅的方法是使用HTML定义自定义模态窗口，并用CSS进行样式化。此外，使用模板引擎（如位于[http://mustache.github.com](http://mustache.github.com)的Mustache）来实现此解决方案也是可能的。
- en: Notice that we set `$("html,body").css("overflow","auto")` to hide the browser
    scroll bar.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们设置了`$("html,body").css("overflow","auto")`来隐藏浏览器滚动条。
- en: 'The `hideTweetArea` method hides the tweet window and restores the browser
    scroll bar:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`hideTweetArea`方法隐藏推文窗口并恢复浏览器滚动条：'
- en: '[PRE52]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: To update the character counter, we add an `updateCount` method. We extract
    the `#tweet` text area message and validate its length against 140 characters.
    We add the `active` class to our submit button only when it is possible to tweet.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新字符计数器，我们添加一个`updateCount`方法。我们提取`#tweet`文本区域消息并验证其长度是否为140个字符。只有当可以推文时，我们才将`active`类添加到我们的提交按钮上。
- en: '[PRE53]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: A native alternative to implement this is the use of the attribute `disabled`
    in our input field instead of adding and removing the `active` class.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 实现此功能的本地替代方法是使用输入字段中的`disabled`属性，而不是添加和删除`active`类。
- en: 'Our initialization method, `initTweet`, adds the necessary events:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的初始化方法`initTweet`添加了必要的事件：
- en: '[PRE54]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Finally, we create a method to call our PHP service:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建了一个方法来调用我们的PHP服务：
- en: '[PRE55]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The `checkValidity` method is an HTML5 JavaScript function that allows us to
    verify whether the fields are valid. In our case, since the text area is required,
    the validation is that it is not empty.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`checkValidity`方法是一个HTML5 JavaScript函数，它允许我们验证字段是否有效。在我们的例子中，由于文本区域是必填的，验证就是它不能为空。'
- en: Since we are using AJAX, we add return `false` at the end to avoid a page refresh
    on submit.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用AJAX，我们在最后添加`return false`以避免提交时页面刷新。
- en: Tip
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Typically, we would need to extract all inputs from the form and construct a
    data parameter for our AJAX call. There is a useful function in jQuery called
    `serialize` that constructs this for us.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们需要从表单中提取所有输入并构造一个数据参数用于我们的AJAX调用。jQuery中有一个有用的函数叫做`serialize`，它可以为我们构造这个参数。
- en: 'Put it all together and we should have:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 把所有这些都放在一起，我们应该有：
- en: '[PRE56]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Tip
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '`checkValidity` is not available in all browsers. It is recommended to give
    support across browsers writing your own `checkValidity` function when it is not
    available. You can check out one approach to this solution on the [http://perplexed.co.uk/5201_making_html5_form_backwards_compatible.htm](http://perplexed.co.uk/5201_making_html5_form_backwards_compatible.htm)
    page.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`checkValidity`在所有浏览器中都不是可用的。当它不可用时，建议编写自己的`checkValidity`函数以支持跨浏览器。你可以在[http://perplexed.co.uk/5201_making_html5_form_backwards_compatible.htm](http://perplexed.co.uk/5201_making_html5_form_backwards_compatible.htm)页面上查看这种解决方案的一种方法。'
- en: 'What remains is to add a call in `movienow.dragnaddrop.js`. Inside our listener
    for the drop event, we add:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的就是在`movienow.dragnaddrop.js`中添加一个调用。在我们的拖放事件监听器内部，我们添加：
- en: '[PRE57]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'So, we now have:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们现在有：
- en: '[PRE58]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'For mobile and non-drag-and-drop-enabled devices, we add:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 对于移动和非拖放启用设备，我们添加：
- en: '[PRE59]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Our tweet system is ready. If we select a movie (dragging or clicking depending
    on the device), we can tweet by clicking on the **tweet** button.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的推文系统已经准备好了。如果我们选择一部电影（根据设备是拖动还是点击），我们可以通过点击**推文**按钮来推文。
- en: '![Adding JavaScript interactions](img/5689_09_15.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![添加JavaScript交互](img/5689_09_15.jpg)'
- en: Form validation support across browsers
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨浏览器表单验证支持
- en: As in other HTML5 features, form validation is not consistent across browsers.
    In our case, if we select a movie, delete the text area content in the tweet window,
    and try to submit, the behavior will be different in each browser.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 就像其他HTML5特性一样，表单验证在各个浏览器之间并不一致。在我们的例子中，如果我们选择一部电影，删除推文窗口中的文本区域内容，然后尝试提交，每个浏览器的行为都会不同。
- en: In Firefox, the form validation we see is a red border and a message.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在Firefox中，我们看到的表单验证是一个红色边框和一条消息。
- en: '![Form validation support across browsers](img/5689_09_16.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![跨浏览器表单验证支持](img/5689_09_16.jpg)'
- en: In Chrome, form validation uses title to show **Tweet Required!** message but
    does not show the red border.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在Chrome中，表单验证使用标题来显示**推文必填！**消息，但不显示红色边框。
- en: '![Form validation support across browsers](img/5689_09_17.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![跨浏览器表单验证支持](img/5689_09_17.jpg)'
- en: Safari only blocks the submit action.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 只有Safari阻止提交操作。
- en: Even if form validation becomes consistent, the user interface elements of every
    browser are totally different (you will notice a black tooltip in Firefox and
    a white one with an icon in Chrome). For now, validation can be done with JavaScript
    from scratch or with jQuery plugins ([http://docs.jquery.com/Plugins/Validation](http://docs.jquery.com/Plugins/Validation)).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 即使表单验证变得一致，每个浏览器的用户界面元素也完全不同（你会在Firefox中注意到一个黑色工具提示，在Chrome中则是一个带有图标的白色工具提示）。目前，可以通过从头开始使用JavaScript或使用jQuery插件（[http://docs.jquery.com/Plugins/Validation](http://docs.jquery.com/Plugins/Validation)）来进行验证。
- en: To disable HTML5 form validation, add the `novalidate` attribute to the form.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用HTML5表单验证，请将`novalidate`属性添加到表单中。
- en: Tip
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Even if data is validated on the client side, it must also be validated on the
    server side. Remember that for some users it is pretty easy to change JavaScript
    code.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '即使数据在客户端进行了验证，也必须在服务器端进行验证。请记住，对于某些用户来说，更改JavaScript代码相当容易。 '
- en: New input fields types
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的输入字段类型
- en: 'HTML5 introduces new input types for forms. These allow better control and
    validation, but sadly are not fully supported in all modern browsers. They are
    shown as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: HTML5为表单引入了新的输入类型。这些类型允许更好的控制和验证，但遗憾的是，它们并不在所有现代浏览器中得到完全支持。它们如下所示：
- en: '`color` is used to select colors'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color` 用于选择颜色'
- en: '`date` allows for date selection'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date` 允许选择日期'
- en: '`datetime` allows for date and time selection'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`datetime` 允许选择日期和时间'
- en: '`datetime-local` allows for date and time selection with no time zone'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`datetime-local` 允许选择日期和时间，但不包括时区'
- en: '`email` is used for input fields that should contain email address'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email` 用于应包含电子邮件地址的输入字段'
- en: '`month` allows for month and year selection'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`month` 允许选择月和年'
- en: '`number` is used for inputs with numeric values'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`number` 用于具有数值的输入'
- en: '`range` renders as a slider that allows for selection of a value within a range
    of numbers'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`range` 以滑块的形式呈现，允许在数字范围内选择值'
- en: '`search` is used for search fields'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`search` 用于搜索字段'
- en: '`tel` is used for entering telephone numbers'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tel` 用于输入电话号码'
- en: '`time` allows for time selection'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time` 允许选择时间'
- en: '`url` is used for inputs that should contain valid URLs'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url` 用于应包含有效URL的输入'
- en: '`week` allows for week and year selection'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`week` 允许选择周和年'
- en: Summary
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: With a wide range of social networks and services offering their data via APIs,
    we can enrich our enterprise applications by complementing them with more data
    and functionality. Moreover, you can use OAuth authentication to provide alternative
    authentication methods to your users. Lastly, HTML5 form validation and the new
    input types appear to not be sufficiently mature to apply them as solutions for
    enterprise applications; instead fallback JavaScript solutions should be implemented
    to provide the same experience across browsers. We hope browser developers adopt
    this part of the HTML5 specification soon because it will translate to shorter
    development cycles, more reliable form data, and better experiences for the user.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 随着众多社交网络和服务通过API提供数据，我们可以通过补充更多数据和功能来丰富我们的企业管理应用。此外，您可以使用OAuth身份验证为用户提供替代身份验证方法。最后，HTML5表单验证和新的输入类型似乎还不够成熟，不能作为企业管理应用的解决方案；相反，应该实施回退JavaScript解决方案，以在浏览器之间提供相同的体验。我们希望浏览器开发者尽快采用HTML5规范的这一部分，因为它将缩短开发周期，提高表单数据的可靠性，并为用户提供更好的体验。
- en: In the next chapter, we will cover Web Workers and the power they give enterprise
    applications by adding the ability to run background processes and multi-thread
    our applications.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍Web Workers以及它们通过添加运行后台进程和多线程应用的能力，为企业管理应用带来的强大功能。
