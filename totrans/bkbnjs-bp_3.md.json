["```js\n<script src=\"img/models.js\"></script>\n<script src=\"img/views.js\"></script>\n<script src=\"img/router.js\"></script>\n```", "```js\nnpm install grunt --save-dev\nnpm install grunt-contrib-jst --save-dev\n\n```", "```js\nmodule.exports = function (grunt) {\n  grunt.initConfig({});\n\n  grunt.loadNpmTasks('grunt-contrib-jst');\n  grunt.registerTask('default', ['jst']);\n};\n```", "```js\ngrunt.initConfig({\n  jst: {\n    templates: {\n      options:  {\n        templateSettings: {\n          interpolate : /\\{\\{(.+?)\\}\\}/g\n        },\n        processName: function (filename) {\n          return filename.split('/')[1].split('.')[0];\n        }\n      },\n      files: {\n        \"public/templates.js\": [\"templates/*.html\"]\n      }\n    }\n  }\n});\n```", "```js\nvar Event = Backbone.Model.extend({});\nvar Events = Backbone.Collection.extend({\n  model: Event,\n  url: '/events'\n});\n```", "```js\nvar db  = new Bourne(\"db/events.json\");\n```", "```js\napp.get(\"/events\", function (req, res) {\n  db.find(function (err, events) {\n    res.json(events);\n  });\n});\n```", "```js\napp.post(\"/events\", function (req, res) {\n  var attrs = {\n    title: req.body.title,\n    details: req.body.details,\n    date: req.body.date,\n    createdOn: new Date()\n  };\n\n  db.insert(attrs, function (err, event) {\n    res.json(event);\n  });\n});\n```", "```js\napp.get('/*', function (req, res) {\n  db.find(function (err, events) {\n    res.render(\"index.ejs\", { \n      events: JSON.stringify(events) \n    });\n  });\n});\n```", "```js\n<li><a href=\"/create\"> Create Event </a></li>\n```", "```js\nthis[\"JST\"] = this[\"JST\"] || {};\n\nthis[\"JST\"][\"controls\"] = function(obj) {\nobj || (obj = {});\nvar __t, __p = '', __e = _.escape;\nwith (obj) {\n__p += '<li><a href=\"/create\"> Create Event </a></li>';\n\n}\nreturn __p\n};\n```", "```js\n<script src=\"img/templates.js\"></script>\n```", "```js\nvar ControlsView = Backbone.View.extend({\n  tagName: \"ul\",\n  className: \"nav nav-pills\",\n  template: JST.controls,\n  initialize: function (options) {\n    this.nav = options.nav;\n  },\n  events: {\n    'click a[href=\"/create\"]': 'create'\n  },\n  render: function () {\n    this.el.innerHTML = this.template();\n    return this;\n  },\n  create: function (evt) {\n    evt.preventDefault();\n    this.nav(\"create\", { trigger: true });\n  }\n});\n```", "```js\n<link rel=\"stylesheet\"  href=\"/css/bootstrap.min.css\" />\n```", "```js\n<script src=\"img/bootstrap.min.js\"></script>\n```", "```js\nvar AppRouter = Backbone.Router.extend({\n  initialize: function (options) {\n    this.main = options.main;\n    this.events = options.events;\n    this.nav = this.navigate.bind(this);\n  },\n  routes: {\n    '': 'index'\n  },\n  index: function () {\n    var cv = new ControlsView({\n      nav: this.nav\n    });\n    this.main.html(cv.render().el);\n  }\n});\n```", "```js\nvar r = new AppRouter({\n  main: $(\"#main\"),\n  events: new Events(<%- events %>)\n});\nBackbone.history.start({ pushState: true });\n```", "```js\n'create': 'create'\n```", "```js\ncreate: function () {\n  var cv = new CreateEventView({\n    collection: this.events,\n    nav: this.nav\n  });\n  this.main.prepend(cv.render().el);\n}\n```", "```js\n<div class=\"modal-dialog\">\n<div class=\"modal-content\">\n  <div class=\"modal-header\">\n    <button class=\"close\">&times;</button>\n    <h4 class=\"modal-title\"> Create New Event </h4>\n  </div>\n  <div class=\"modal-body\">\n    <form>\n      <label>Title</label>\n      <input type=\"text\" class=\"form-control\" id=\"title\" />\n      <label>Details</label>\n      <textarea id=\"details\"  class=\"form-control\"></textarea>\n      <label>Date</label>\n      <input type=\"datetime-local\" class=\"form-control\" id=\"date\" />    \n    </form>\n  </div>\n  <div class=\"modal-footer\">\n    <a href=\"#\" class=\"create btn btn-primary\"> Create Event </a>\n  </div>\n</div>\n</div>\n```", "```js\nvar CreateEventView = Backbone.View.extend({\n  className: \"modal fade\",\n  template: JST.createEvent,\n  initialize: function (options) {\n    this.nav = options.nav;\n  },\n  render: function (model) {\n    this.el.innerHTML = this.template();\n    return this;\n  }\n});\n```", "```js\nthis.$el.modal(\"show\"); \n```", "```js\nevents: {\n  \"click .close\": \"close\",\n  \"click .create\": \"create\"\n},\n```", "```js\nclose: function (evt) {\n  evt.preventDefault();\n  this.$el.modal(\"hide\");\n},\n```", "```js\ncreate: function (evt) {\n  evt.preventDefault();\n  var e = {\n    title: this.$(\"#title\").val(),\n    details: this.$(\"#details\").val(),\n    date: this.$(\"#date\").val()\n  };\n  this.$el.modal(\"hide\");\n  this.collection.create(e, { wait: true });\n  return false;\n}\n```", "```js\nthis.$el.on(\"hidden.bs.modal\", this.hide.bind(this));\n```", "```js\nhide: function () {\n  this.remove();\n  this.nav('/');\n},\n```", "```js\nif ($(\"ul.nav\").length === 0) {\n  this.index();\n}\n```", "```js\n<thead>\n  <tr>\n    <th data-field=\"id\">ID</th>\n    <th data-field=\"title\">Title</th>\n    <th data-field=\"details\">Details</th>\n    <th data-field=\"date\">Date</th>\n    <th data-field=\"createdOn\">Created On</th>\n    <th> Actions </th>\n  </tr>\n</thead>\n<tbody></tbody>\n```", "```js\nvar EventsView = Backbone.View.extend({\n  tagName: \"table\",\n  className: \"table\",\n  template: JST.events,\n  initialize: function (options) {\n    this.nav = options.nav;\n  },\n  render: function () {\n    this.el.innerHTML = this.template();\n    this.renderRows();\n    return this;\n  },\n  renderRows: function () {\n    this.collection.forEach(this.addRow, this);\n  },\n  addRow: function (event) {\n    this.$(\"tbody\").append(new EventView({\n      model: event,\n      nav: this.nav\n    }).render().el);\n  }\n});\n```", "```js\n<td>{{id}}</td>\n<td>{{title}}</td>\n<td>{{details}}</td>\n<td>{{date}}</td>\n<td>{{createdOn}}</td>\n<td>\n  <button class=\"edit btn btn-inverse\">\n    <span class=\"glyphicon glyphicon-edit glyphicon-white\"></span>\n  </button>\n  <button class=\"delete btn btn-danger\">\n    <span class=\"glyphicon glyphicon-trash\"></span>\n  </button>\n</td>\n```", "```js\nvar EventView = Backbone.View.extend({\n  tagName: \"tr\",\n  template: JST.event,\n  initialize: function (options) {\n    this.nav = options.nav;\n  }\n});\n```", "```js\n<script src=\"img/moment.min.js\"></script>\n```", "```js\nrender: function () {\n  var attrs = this.model.toJSON(),\n      date = moment(attrs.date),\n      diff = date.unix() - moment().unix();\n\n  attrs.date = date.calendar();\n  attrs.createdOn = moment(attrs.createdOn).fromNow();\n  this.el.innerHTML = this.template(attrs);\n\n  if (diff < 0) {\n    this.el.className = \"error\";\n  } else if (diff < 172800) { // next 2 days\n    this.el.className = \"warning\";\n  } else if (diff < 604800) { // next 7 days\n    this.el.className = \"info\";\n  }\n\n  return this;\n},\n```", "```js\nindex: function () {\n  var cv = new ControlsView({\n    nav: this.nav\n  }),\n  av = new EventsView({\n    collection: this.events,\n    nav: this.nav\n  });\n  this.main.html(cv.render().el);\n  this.main.append(av.render().el);\n},\n```", "```js\nevents: {\n  \"click .delete\" : \"destroy\"\n},\n```", "```js\ndestroy: function (evt) {\n  evt.preventDefault();\n  this.model.destroy();\n  this.remove();\n},\nremove: function () {\n  this.$el.fadeOut(Backbone.View.prototype.remove.bind(this));\n  return false;\n}\n```", "```js\napp.delete(\"/events/:id\", function (req, res) {\n  db.delete({ id: parseInt(req.params.id, 10) }, function () {\n    res.json({});\n  });\n});\n```", "```js\n\"click .edit\": \"edit\"\n```", "```js\nedit: function (evt) {\n  evt.preventDefault();\n  this.nav(\"/edit/\" + this.model.get(\"id\"), { trigger: true });\n}\n```", "```js\n'edit/:id': 'edit'\n```", "```js\nedit: function (id) {\n  var ev = new EditEventView({\n    model: this.events.get(parseInt(id, 10)),\n    nav: this.nav\n  });\n\n  if ($(\"ul.nav\").length === 0) {\n    this.index();\n  }\n\n  this.main.prepend(ev.render().el);\n}\n```", "```js\ncreate: function () {\n  var cv = new CreateEventView({\n    collection: this.events,\n    nav: this.nav\n  });\n  this.modal(cv);\n},\nedit: function (id) {\n  var ev = new EditEventView({\n    model: this.events.get(parseInt(id, 10)),\n    nav: this.nav\n  });\n  this.modal(ev);\n},\nmodal: function (view) {\n  if ($(\"ul.nav\").length === 0) {\n    this.index();\n  }\n  this.main.prepend(view.render().el);\n}\n```", "```js\n<div class=\"modal-dialog\">\n<div class=\"modal-content\">\n  <div class=\"modal-header\">\n    <button class=\"close\">&times;</button>\n    <h4 class=\"modal-title\"> {{ heading }} </h4>\n  </div>\n  <div class=\"modal-body\">\n    <form>\n      <label>Title</label>\n      <input type=\"text\" class=\"form-control\" id=\"title\" value=\"{{title}}\" />\n      <label>Details</label>\n      <textarea id=\"details\"  class=\"form-control\">{{details}}</textarea>\n      <label>Date</label>\n      <input type=\"datetime-local\" class=\"form-control\" id=\"date\" value=\"{{date}}\" />    \n    </form>\n  </div>\n  <div class=\"modal-footer\">\n    <a href=\"#\" class=\"modify btn btn-primary\"> {{btnText}} </a>\n  </div>\n</div>\n</div>\n```", "```js\nvar ModifyEventView = Backbone.View.extend({\n  className: \"modal fade\",\n  template: JST.modifyEvent,\n  events: {\n    \"click .close\": \"close\",\n    \"click .modify\": \"modify\"\n  },\n  initialize: function (options) {\n    this.nav = options.nav;\n    this.$el.on(\"hidden.bs.modal\", this.hide.bind(this));\n  },\n  hide: function () {\n    this.remove();\n    this.nav('/');\n  },\n  close: function (evt) {\n    evt.preventDefault();\n    this.$el.modal(\"hide\");\n  },\n  render: function (model) {\n    var data = this.model.toJSON();\n    data.heading = this.heading;\n    data.btnText = this.btnText;\n    this.el.innerHTML = this.template(data);\n    this.$el.modal(\"show\");  \n    return this;\n  },\n  modify: function (evt) {\n    evt.preventDefault();\n    var a = {\n      title: this.$(\"#title\").val(),\n      details: this.$(\"#details\").val(),\n      date: this.$(\"#date\").val()\n    };\n    this.$el.modal(\"hide\");\n    this.save(a);\n    return false;\n  }\n});\n```", "```js\nvar EditEventView = ModifyEventView.extend({\n  heading: \"Edit Event\",\n  btnText: \"Update\",\n  save: function (e) {\n    this.model.save(e);\n  }\n});\n```", "```js\nvar CreateEventView = ModifyEventView.extend({\n  heading: \"Create New Event\",\n  btnText: \"Create\",\n  initialize: function (options) {\n    ModifyEventView.prototype.initialize.call(this, options);\n    this.model = new Event();\n  },\n  save: function (e) {\n    this.collection.create(e, { wait: true });\n  }\n});\n```", "```js\nvar Event = Backbone.Model.extend({\n  defaults: {\n    title: \"\",\n    details: \"\",\n    date: \"\"\n  }\n});\n```", "```js\napp.put(\"/events/:id\", function (req, res) {\n  var e = {\n    title: req.body.title,\n    details: req.body.details,\n    date: req.body.date\n  };\n\n  db.update({ id: parseInt(req.params.id, 10) }, e, \n    function (err, e) {\n      res.json(e);\n    });\n});\n```", "```js\ninitialize: function (models, options) {\n  this.wait = (options && options.wait) || 10000; \n},\nrefresh: function () {\n  this.fetch();\n  setTimeout(this.refresh.bind(this), this.wait);\n}\n```", "```js\nthis.collection.refresh();\n```", "```js\ninitialize: function (options) {\n  this.nav = options.nav;\n  this.listenTo(this.collection, 'add', this.addRow);\n  this.collection.refresh();\n},\n```", "```js\ninitialize: function (options) {\n  this.nav = options.nav;\n  this.listenTo(this.model, \"remove\", this.remove);\n  this.listenTo(this.model, \"change\", this.render);\n},\n```", "```js\ncomparator: 'date',\n```", "```js\nthis.listenTo(this, 'change', this.sort);\n```", "```js\nreverse: function (options) {\n  this.sort({ silent: true });\n  this.models = this.models.reverse();\n  this.trigger('sort', this, options);\n}\n```", "```js\nevents: {\n  'click th[data-field]': 'sort'\n},\n```", "```js\nsort: function (evt) {\n  var target = evt.currentTarget,\n      c = this.collection;\n\n  c.comparator = target.getAttribute(\"data-field\");\n\n  if (target.getAttribute(\"data-direction\") === \"asc\") {\n    c.reverse();\n    this.fixSortIcons(target, \"desc\");\n  } else {\n    c.sort();\n    this.fixSortIcons(target, \"asc\");\n  }\n}\n```", "```js\nfixSortIcons: function (target, dir) {\n  var icon = 'glyphicon glyphicon-arrow-' + (dir === 'asc' ? 'down' : 'up');\n  this.$(\"th i\").remove();\n  target.setAttribute(\"data-direction\", dir);\n  $(\"<i>\").addClass(icon).appendTo(target);\n},\n```", "```js\nthis.listenTo(this.collection, 'sort', this.renderRows);\n```", "```js\nthis.children = {};\n```", "```js\naddRow: function (event) {\n  if (!this.children[event.id]) {\n    this.children[event.id] = new EventView({\n      model: event,\n      nav: this.nav\n    }).render();\n  }\n\n  this.$(\"tbody\").append(this.children[event.id].el);\n},\n```"]