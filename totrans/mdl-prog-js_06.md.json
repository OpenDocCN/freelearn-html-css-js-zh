["```js\nfunction testConstructor (){\n\n    this.someValue = \"Value in the constructor function\";\n\n}\n\ntestConstructor.prototype.testFunc = function(){\n\n    console.log(this.someValue);\n};\n```", "```js\nvar firstInstance = new testConstructor();\nvar secondInstance = new testConstructor();\n```", "```js\n// displays \"Value in the constructor function\"\nconsole.log(firstInstance.someValue);\n// displays \"Value in the constructor function\"\nconsole.log(secondInstance.someValue);\n```", "```js\nfirstInstance.someValue = \"value for the firstInstance\";\nsecondInstance.someValue = \"value for the secondInstance\";\n```", "```js\n// displays \"Value for the firstInstance\"\nfirstInstance.testFunc();\n\n// displays \"Value for the secondInstance\"\nsecondInstance.testFunc();\n```", "```js\ntestConstructor.newProperty = \"this is a new property but not shared\";\n\n// displays undefined\nconsole.log(firstInstance.newProperty);\n\n// displays undefined\nconsole.log(secondInstance.newProperty);\n```", "```js\nfunction testConstructor (){\n    this.someValue = \"Value in the constructor function\";\n    var privateValue = \"no instances will have a copy of me\";\n}\n```", "```js\nvar firstInstance = new testConstructor();\n// displays undefined.\nconsole.log(firstInstance.privateValue);\n```", "```js\nvar testVar1 = \"This is to be copied\";\nvar testVar2 = testVar1;\n```", "```js\nvar testObj1 = { testValue : 5};\nvar testObj2 = testObj1;\n\ntestObj1.newValue  = \"this is a new value\";\n\n// displays \"this is a new value\"\nconsole.log(testObj2.newValue);\n```", "```js\njQuery.extend( target [, object1 ] [, objectN ] );\n```", "```js\nvar deep = _.cloneDeep(objects);\n```", "```js\nvar cloneObj = (JSON.parse(JSON.stringify(originalObj)));\n```", "```js\nfunction clone(deep) {\n    var newClonedObj = new this.constructor();\n    for (var property in this){\n        if (!deep){\n            newClonedObj[property] = this[property];\n        }else if (typeof this[property] == 'object'){\n            newClonedObj[property] = this[property].clone(deep);\n        }else{\n            newClonedObj[property] = this[property];\n        }\n    }\n    return newClonedObj;\n}\n```", "```js\nelse if (typeof this[property] == 'object'){\n      newClonedObj[property] = this[property].clone(deep);\n}\n```", "```js\nvar ImagesInc_Utilitizes = (function(){\n\n    var clone = function clone(deep) {\n\n        // create an instance of the object\n        var newClonedObj = new this.constructor();\n\n        //copy all properties from the original object\n        for (var property in this){\n            // if deep flag is not set, just do a shallow copy of properties\n            if (!deep){ \n                if(this.hasOwnProperty(property)){\n                    newClonedObj[property] = this[property];\n                }\n            // to make a deep copy, call the function recursively\n            }else if (typeof this[property] == 'object' && this.hasOwnProperty(property)){\n                newClonedObj[property] = this[property].clone(deep);\n            }else if(this.hasOwnProperty(property)){\n                //Just copy properties for non objects\n                newClonedObj[property] = this[property];\n            }\n        }\n\n        return newClonedObj;\n    };\n\n    // attach the clone function to Object prototype\n    var initialize  = (function(){\n        Object.prototype.clone = clone;\n    })();\n\n})();\n```", "```js\nvar TestModule = (function(){\n\n    var privateTestValue = \"Test for cloning, this property is hidden\";\n\n    return {\n        publicTestValue: privateTestValue + \" but now showing it publicly\",\n\n        testFunc : function(){\n\n            var anotherTest= \"This property will be cloned\";\n            return anotherTest;\n        },\n\n        getPrivteValue : function(){\n\n            return privateTestValue;\n        },\n\n        changePrivateVar : function(){\n            privateTestValue = \"the private value has been changed\";\n\n            return privateTestValue;\n\n        },\n\n        testArray : [1,2,3]\n    };\n\n})();\n```", "```js\n// creating a clone object\nCloneModule = TestModule.clone(true);\n```", "```js\n// displays \"This property will be cloned\"\nconsole.log(CloneModule.testFunc());\n```", "```js\n// displays \"the private value has been changed\"\nconsole.log(TestModule.changePrivateVar());\n```", "```js\n// displays \"the private value has been changed\"\nconsole.log(CloneModule.getPrivteValue());\n```", "```js\nvar Polygon_Module = (function() {\n\n    var sides = 6;\n    var name = \"Polygon\";\n    var type = \"2D\";\n\n    function getSides() {\n\n        return sides;\n    };\n\n    function getName() {\n\n        return name;    \n    };\n\n    function getType(){\n\n        return type;\n    };\n\n    return {\n        getSides: getSides,\n        getName: getName,\n        getType: getType\n    };\n})();\n\nvar Rectangle_Module = (function() {\n    var Rectangle = {};\n    var sides = 4;\n    var name = \"Rectangle\";\n    var color = \"blue\";\n\n    Rectangle.__proto__ = Polygon_Module;\n\n    Rectangle.getName = function(){\n      return name;\n    };\n\n    Rectangle.getSides = function(){\n      return sides;\n    };\n\n    Rectangle.getColor = function(){\n        return color;\n    };\n\n  return {\n      getName: Rectangle.getName,\n      getSides: Rectangle.getSides,\n      getType: Rectangle.getType\n  };\n\n})();\n```", "```js\nRectangle.__proto__ = Polygon_Module;\n```", "```js\nconsole.log(Polygon_Module.getName()); //displays \"Polygon\"\nconsole.log(Polygon_Module.getSides()); // displays 6\nconsole.log(Rectangle_Module.getName()); // displays \"Rectangle\"\nconsole.log(Rectangle_Module.getSides()); // displays 4\nconsole.log(Rectangle_Module.getType()); // displays \"2D\"\n```", "```js\nvar Polygon_Module2 = (function() {\n\n    var sides = 6;\n    var name = \"Polygon\";\n    var type = \"2D\";\n\n    function Polygon(){\n\n        this.sides = sides;\n        this.name = name;\n        this.type = type;\n    }\n\n    Polygon.prototype.getSides = function(){\n\n        return this.sides;\n    };\n\n    Polygon.prototype.getName = function(){\n\n        return this.name;\n    };\n\n    Polygon.prototype.getType = function(){\n\n        return this.type;\n    };\n\n    return {\n        Polygon: Polygon,\n    };\n})();\n\nvar Rectangle_Module2 = (function(){\n    var sides = 4;\n    var name = \"Rectangle\";\n\n    function Rectangle(){\n\n        Polygon_Module2.Polygon.apply(this);\n        this.sides = sides;\n        this.name = name;\n    }\n\n    Rectangle.prototype = Polygon_Module2.Polygon.prototype;\n    Rectangle.prototype.constructor = Rectangle;\n\n    var RectangleInstance = new Rectangle();\n\n    return {\n\n        Rectangle: RectangleInstance\n    };\n\n})();\n```", "```js\nPolygon_Module2.Polygon.apply(this);\n```", "```js\nRectangle.prototype = Polygon_Module2.Polygon.prototype;\nRectangle.prototype.constructor = Rectangle;\n```", "```js\nconsole.log(Rectangle_Module2.Rectangle.getName()); // displays \"Rectangle\"\nconsole.log(Rectangle_Module2.Rectangle.getSides()); // displays 4\nconsole.log(Rectangle_Module2.Rectangle.getType()); // displays \"2D\"\n```", "```js\nvar Shape = (function(){\n\n        var type = \"Any 2D and 3D shape\";\n\n        function getType(){\n            return type;  \n        }\n\n        return {\n\n            getType: getType \n        };\n\n})();\n\nShape.Polygon = (function() {\n\n    var sides = 6;\n    var name = \"Polygon\";\n    var type = \"2D\";\n\n    function getSides() {\n\n        return sides;\n    }\n\n    function getName() {\n\n        return name;    \n    }\n\n    function getType(){\n\n        return type;\n    }\n\n    return {\n        getSides: getSides,\n        getName: getName,\n        getType: getType\n    };\n})();\n```", "```js\nconsole.log(Shape.getType()); // displays \"Any 2D and 3D shape\"\nconsole.log(Shape.Polygon.getName()); // displays \"Polygon\"\n```", "```js\nvar Polygon_Module;\n\nvar Shape = (function(mainModule, subModule){\n\n    var Polygon = mainModule.Polygon = mainModule.Polygon || subModule;\n\n    Polygon.description = function(){\n\n        return \"submodule has been added to shape module\";\n    };\n\n   return mainModule;\n\n})(Shape || {}, Polygon_Module ||{});\n\nconsole.log(Shape.Polygon.description());\n```", "```js\nconsole.log(Shape.Polygon.description()); // displays \"submodule has been added to shape module\"\n```", "```js\nvar Shape = (function(module){\n\n        var type = \"Any 2D and 3D shape\";\n\n        module.getType= function(){\n            return type;  \n        };\n\n        return module;\n\n})(Shape || {});\n```", "```js\nconsole.log(Shape.getType()); // displays \"any 2D and 3D shape\"\n\nconsole.log(Shape.Polygon.description()); // displays \"submodule has been added to shape module\"\n```"]