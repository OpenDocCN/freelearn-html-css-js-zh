- en: Chapter 2. Creating a Backbone.js Application Test Plan
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 创建Backbone.js应用程序测试计划
- en: 'Now that we have a basic test infrastructure, we''ll turn our attention toward
    integrating a Backbone.js application and mapping out a test development strategy.
    In this chapter, we will create a test plan by working through the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了一个基本的测试基础设施，我们将把注意力转向集成Backbone.js应用程序并制定测试开发策略。在本章中，我们将通过以下主题创建测试计划：
- en: Reviewing some fundamental concepts of Backbone.js development
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾Backbone.js开发的一些基本概念
- en: Selecting a Backbone.js application to test
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择要测试的Backbone.js应用程序
- en: Examining relevant testing concepts and approaches to guide test plan creation
    and execution
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查相关的测试概念和方法，以指导测试计划的创建和执行
- en: Evaluating parts of the Backbone.js application to test in complete or partial
    isolation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估在完整或部分隔离状态下要测试的Backbone.js应用程序部分
- en: Identifying tests that exercise multiple interacting parts of the Backbone.js
    application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别测试多个相互作用的Backbone.js应用程序部分
- en: Integrating the Backbone.js application into our test infrastructure, and authoring
    and running a few introductory application tests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Backbone.js应用程序集成到我们的测试基础设施中，并编写和运行一些入门级应用程序测试
- en: A Backbone.js refresher
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Backbone.js复习
- en: Although this book assumes a comfortable level of familiarity with Backbone.js,
    Underscore.js, and jQuery, we will briefly touch upon the basics of Backbone.js
    application development.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本书假设读者对Backbone.js、Underscore.js和jQuery有相当熟悉的程度，但我们仍将简要介绍Backbone.js应用程序开发的基础知识。
- en: 'Backbone.js provides abstractions and useful functionality for architecting
    and developing JavaScript web applications. Backbone.js brings order to the chaotic
    interactions between program and display logic, DOM events, and backend communication.
    This is achieved via what could loosely be considered a **Model-View-Controller**
    (**MVC**) paradigm that separates application code into the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone.js提供了构建和开发JavaScript网络应用程序的抽象和有用功能。Backbone.js通过一种可以粗略认为是**模型-视图-控制器**（**MVC**）的范式，将应用程序代码分为以下主题：
- en: Data modeling and retrieval
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据建模和检索
- en: Display rendering and user interactivity
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示渲染和用户交互
- en: Brokering data and display logic to appropriately bind and manipulate data models
    and user interfaces
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据和处理逻辑代理到适当绑定和操作数据模型和用户界面的方式
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Backbone.js does not completely follow a traditional MVC approach, causing some
    observers to call it an **MV*** framework. An MV* application has a model and
    a view but has something other than a controller connecting the model and the
    view. For a much more detailed discussion on MVC and the various MV* approaches,
    see *Developing Backbone.js Applications* by *Addy Osmani*, and the article, *Journey
    Through The JavaScript MVC Jungle* ([http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/](http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/)).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone.js并不完全遵循传统的MVC方法，导致一些观察者称其为**MV**框架。一个MV*应用程序有一个模型和一个视图，但连接模型和视图的不是控制器。有关MVC和不同MV*方法的更详细讨论，请参阅Addy
    Osmani的《Developing Backbone.js Applications》以及文章《Journey Through The JavaScript
    MVC Jungle》（[http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/](http://coding.smashingmagazine.com/2012/07/27/journey-through-the-javascript-mvc-jungle/))。
- en: 'To this end, Backbone.js provides a set of core library components:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，Backbone.js提供了一套核心库组件：
- en: '**Events**: The `Backbone.Events` module gives JavaScript objects the ability
    to emit and respond to events, including built-in Backbone.js class events as
    well as custom application events.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件**：`Backbone.Events`模块使JavaScript对象能够发出和响应事件，包括内置的Backbone.js类事件以及自定义应用程序事件。'
- en: '**Models**: The `Backbone.Model` class provides a data wrapper that can synchronize
    with a backend, validate data changes, and emit events to other parts of a Backbone.js
    application. A model is the fundamental unit of data in a Backbone.js application.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：`Backbone.Model`类提供了一个可以与后端同步、验证数据更改并向Backbone.js应用程序的其他部分发出事件的包装器。模型是Backbone.js应用程序中的基本数据单元。'
- en: '**Collections**: The `Backbone.Collection` class wraps a set of models in an
    ordered list. Collections provide events, backend synchronization, and many helper
    methods for manipulating and mutating the set of underlying models.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集合**：`Backbone.Collection`类将一组模型封装在一个有序列表中。集合提供事件、后端同步以及许多辅助方法，用于操作和修改底层模型集合。'
- en: '**Templates**: Backbone.js leaves the choice of the template library up to
    the developer (we will use Underscore.js templates for this book). Other popular
    template alternatives include Handlebars ([http://handlebarsjs.com/](http://handlebarsjs.com/)),
    Mustache ([https://github.com/janl/mustache.js/](https://github.com/janl/mustache.js/)),
    and EJS ([http://embeddedjs.com/](http://embeddedjs.com/)).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板**：Backbone.js 将模板库的选择权留给开发者（本书我们将使用 Underscore.js 模板）。其他流行的模板替代方案包括 Handlebars
    ([http://handlebarsjs.com/](http://handlebarsjs.com/))、Mustache ([https://github.com/janl/mustache.js/](https://github.com/janl/mustache.js/))
    和 EJS ([http://embeddedjs.com/](http://embeddedjs.com/))。'
- en: '**Views**: A `Backbone.View` object is the glue that binds models, collections,
    and templates together with the browser environment and DOM. Backbone.js is deliberately
    agnostic as to what a view must do, but a typical view references a collection
    or a model, couples data to the user interface via a template, and mediates user
    interaction and backend server events. To clarify potentially confusing terminologies,
    `Backbone.View` is much more analogous to a traditional MVC controller, and a
    Backbone.js template acts like an MVC view.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：`Backbone.View` 对象是绑定模型、集合、模板与浏览器环境和 DOM 之间的粘合剂。Backbone.js 故意保持对视图必须做什么的不可知性，但一个典型的视图会引用一个集合或模型，通过模板将数据与用户界面耦合，并调解用户交互和后端服务器事件。为了阐明可能令人困惑的术语，`Backbone.View`
    更类似于传统的 MVC 控制器，而 Backbone.js 模板则像 MVC 视图。'
- en: '**Routers**: Backbone.js programs are commonly developed as single-page applications
    in which the entire HTML page source and JavaScript libraries are downloaded in
    a single page load. `Backbone.Router` maintains the internal state of the application
    and manages the browser history. Routers provide client-side routing via URL hash
    fragments (`#app-page`) to allow different views to be linked to, bookmarked,
    and navigated like traditional web pages.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由器**：Backbone.js 程序通常作为单页应用程序开发，其中整个 HTML 页面源和 JavaScript 库在单个页面加载中下载。`Backbone.Router`
    维护应用程序的内部状态并管理浏览器历史记录。路由器通过 URL 哈希片段（`#app-page`）提供客户端路由，允许将不同的视图链接到、书签和导航，就像传统的网页一样。'
- en: 'In the chapters that follow, we will test these components separately and together,
    so it is important to ensure a solid grasp of the fundamentals. The core documentation
    at [http://backbonejs.org](http://backbonejs.org) is a good starting point for
    the concepts, API, and pointers and tips on application development. For a deeper
    dive into Backbone.js topics, there are many great online and print resources,
    including:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将分别和一起测试这些组件，因此确保对基础知识有扎实的掌握非常重要。核心文档位于 [http://backbonejs.org](http://backbonejs.org)，它是了解概念、API
    以及应用程序开发提示和技巧的良好起点。对于更深入地了解 Backbone.js 主题，有许多优秀的在线和印刷资源，包括：
- en: '*Developing Backbone.js Applications* by *Addy Osmani*, which is a Creative-Commons-licensed
    book developed with the help of the open source community on GitHub. This book
    discusses the theory, architecture, and fundamentals of creating Backbone.js applications
    ([https://github.com/addyosmani/backbone-fundamentals](https://github.com/addyosmani/backbone-fundamentals)).'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 *Addy Osmani* 编写的 *Developing Backbone.js Applications*，这是一本 Creative-Commons-licensed
    的书籍，在 GitHub 上的开源社区的帮助下开发。本书讨论了创建 Backbone.js 应用程序的理论、架构和基础知识（[https://github.com/addyosmani/backbone-fundamentals](https://github.com/addyosmani/backbone-fundamentals)）。
- en: '*Derick Bailey''s Blog*, which is a blog that is frequently updated with many
    Backbone.js posts and has been written by the creator of `Backbone.Marionette`
    ([http://lostechies.com/derickbailey/category/backbone/](http://lostechies.com/derickbailey/category/backbone/)).'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Derick Bailey 的博客*，这是一个经常更新并包含许多 Backbone.js 文章的博客，由 `Backbone.Marionette`
    的创造者撰写（[http://lostechies.com/derickbailey/category/backbone/](http://lostechies.com/derickbailey/category/backbone/))。'
- en: The official Backbone.js wiki page that aggregates blog posts, tutorials, and
    working examples ([https://github.com/documentcloud/backbone/wiki/Tutorials%2C-blog-posts-and-example-sites](https://github.com/documentcloud/backbone/wiki/Tutorials%2C-blog-posts-and-example-sites)).
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 官方的 Backbone.js 维基页面，该页面汇集了博客文章、教程和工作示例（[https://github.com/documentcloud/backbone/wiki/Tutorials%2C-blog-posts-and-example-sites](https://github.com/documentcloud/backbone/wiki/Tutorials%2C-blog-posts-and-example-sites)）。
- en: Selecting a Backbone.js application to test
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择一个 Backbone.js 应用程序进行测试
- en: Devising and implementing a test plan is fundamentally a practical exercise,
    and we can better achieve our goal of overall application reliability by applying
    test lessons and techniques to a real application—whether it is one that has just
    been started or an existing application in need of better test coverage.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 设计和实施测试计划本质上是一项实践练习，通过将测试经验和技巧应用于实际应用——无论是刚刚开始的项目还是需要更好测试覆盖的现有应用——我们可以更好地实现整体应用可靠性的目标。
- en: If you already have a Backbone.js application in development, you can most likely
    skip to the next section of this chapter. One potential issue we want to identify
    is the complexity of the existing application, especially one with minimal or
    no existing tests. Complicated dependencies, non-modular design, and highly coupled
    application components may require extensive mocking and stubbing to even permit
    a base level of test framework integration. Ultimately, the test infrastructure
    written around a legacy application will likely be quite different from the one
    written around a modular, decoupled application such as Notes. Accordingly, you
    may wish to use our reference application as a learning tool instead.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在开发 Backbone.js 应用程序，您可能可以跳到本章的下一节。我们想要识别的一个潜在问题是现有应用程序的复杂性，特别是那些具有最少或没有现有测试的应用程序。复杂的依赖关系、非模块化设计和高度耦合的应用程序组件可能需要大量的模拟和存根来允许基本的测试框架集成。最终，围绕遗留应用程序编写的测试基础设施可能与围绕模块化、解耦应用程序（如
    Notes）编写的测试基础设施大不相同。因此，您可能希望将我们的参考应用程序作为学习工具使用。
- en: We provide a small reference Backbone.js application to use along with this
    book, simply named Notes. Notes is an online note manager that allows a user to
    create, view, and edit notes using the Markdown ([http://daringfireball.net/projects/markdown/](http://daringfireball.net/projects/markdown/))
    language. You can try out an online demo of the application at [http://backbone-testing.com/notes/app/](http://backbone-testing.com/notes/app/).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了一个小型参考 Backbone.js 应用程序，用于与本书一起使用，简单命名为 Notes。Notes 是一个在线笔记管理器，允许用户使用 Markdown
    语言（[http://daringfireball.net/projects/markdown/](http://daringfireball.net/projects/markdown/））创建、查看和编辑笔记。您可以在
    [http://backbone-testing.com/notes/app/](http://backbone-testing.com/notes/app/)
    尝试该应用程序的在线演示。
- en: 'The full source code of Notes is available as part of the examples repository
    (see the *Preface* for the download instructions). We actually provide two versions
    of the Notes application that share most of the same underlying code. They are
    as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Notes 的完整源代码作为示例仓库的一部分提供（有关下载说明，请参阅*前言*）。我们实际上提供了 Notes 应用程序的两种版本，它们共享大部分底层代码。具体如下：
- en: '**Local Application**: The `notes/` directory in the examples repository contains
    an application backed by HTML5 localStorage ([https://developer.mozilla.org/en-US/docs/DOM/Storage#localStorage](https://developer.mozilla.org/en-US/docs/DOM/Storage#localStorage))
    for persistent, client-side storage in a web browser. The application can be run
    without a network connection from a URL based on `file://`, and will be used for
    most of the examples in this book.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地应用程序**：示例仓库中的 `notes/` 目录包含一个由 HTML5 localStorage（[https://developer.mozilla.org/en-US/docs/DOM/Storage#localStorage](https://developer.mozilla.org/en-US/docs/DOM/Storage#localStorage)）支持的应用程序，用于在浏览器中进行持久、客户端存储。该应用程序可以从基于
    `file://` 的 URL 运行，而无需网络连接，并将用于本书中的大多数示例。'
- en: '**Server Application**: The `notes-rest/` directory in the examples repository
    contains an application backed by a MongoDB database and served by a Node.js web
    server (available at `notes-rest/server.js`). The examples repository contains
    further instructions on installing and running the backend server.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器应用程序**：示例仓库中的 `notes-rest/` 目录包含一个由 MongoDB 数据库支持并由 Node.js 网络服务器（位于 `notes-rest/server.js`）提供服务的应用程序。示例仓库包含有关安装和运行后端服务器的进一步说明。'
- en: Getting acquainted with the Notes application
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 熟悉 Notes 应用程序
- en: The Notes application initially presents a user with a list of existing note
    titles with buttons for editing/deleting individual notes. The page also provides
    a **Write a new note** input form for creating notes and a simple search box for
    a user to filter displayed notes by title.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Notes 应用程序最初向用户展示现有笔记标题列表，并提供编辑/删除单个笔记的按钮。页面还提供了一个**写新笔记**输入表单用于创建笔记，以及一个简单的搜索框，用户可以通过标题过滤显示的笔记。
- en: '![Getting acquainted with the Notes application](img/5248OS_02_01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![熟悉 Notes 应用程序](img/5248OS_02_01.jpg)'
- en: Notes list
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项列表
- en: 'Clicking on a note title, such as **Things to do in Washington, DC.**, activates
    the single note view and displays the note with rendered HTML (headings, bulleted
    lists, and so on):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 点击笔记标题，例如 **华盛顿特区要做的事情**，将激活单个笔记视图并显示带有渲染HTML（标题、项目符号列表等）的笔记：
- en: '![Getting acquainted with the Notes application](img/5248OS_02_02.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![熟悉笔记应用](img/5248OS_02_02.jpg)'
- en: Single note view
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 单个笔记视图
- en: 'The single note editor provides form inputs for title and Markdown text data.
    Any changes to the title or text are immediately saved to the backing datastore
    and made available for viewing:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 单个笔记编辑器提供标题和Markdown文本数据的表单输入。对标题或文本的任何更改都将立即保存到后端数据存储中，并可供查看：
- en: '![Getting acquainted with the Notes application](img/5248OS_02_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![熟悉笔记应用](img/5248OS_02_03.jpg)'
- en: A single-note-editing form
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 单个笔记编辑表单
- en: The anatomy of the Notes application
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 笔记应用程序的结构
- en: 'The JavaScript `script` tags in the `notes/app/index.html` web page illustrate
    the program files and the overall structure of the application:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`notes/app/index.html` 网页中的 JavaScript `script` 标签说明了程序文件和应用程序的整体结构：'
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Don't worry if the long list of JavaScript libraries and application files looks
    foreboding. We will introduce each application piece as we test it. The examples
    in this book stand on their own without the need to look at the full source code
    of the Notes application. At the same time, downloading, running, and testing
    the Notes application is a useful exercise, particularly as you advance to the
    later chapters of this book and want to see the entire test collection put together
    in a single package.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果长长的JavaScript库和应用文件列表看起来令人畏惧，请不要担心。随着我们对每个应用组件的测试，我们将逐一介绍它们。本书中的示例可以独立存在，无需查看笔记应用程序的完整源代码。同时，下载、运行和测试笔记应用程序是一项有用的练习，尤其是在你进入本书的后续章节并希望看到整个测试集合作为一个单一包组合在一起时。
- en: 'Working our way through the JavaScript libraries, we start with the familiar
    core of Backbone.js (v1.0.0), Underscore.js (v1.4.4), and jQuery (v2.0.2). The
    additional vendor libraries in `notes/app/js/lib/` include:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript库中，我们从熟悉的Backbone.js（v1.0.0）、Underscore.js（v1.4.4）和jQuery（v2.0.2）的核心开始。`notes/app/js/lib/`
    中的附加供应商库包括：
- en: '**Backbone.localStorage**: This allows us to save model data into the `localStorage`
    database for the `notes/app/` example application—[https://github.com/jeromegn/Backbone.localStorage](https://github.com/jeromegn/Backbone.localStorage)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Backbone.localStorage**：这允许我们将模型数据保存到 `notes/app/` 示例应用程序的 `localStorage`
    数据库中——[https://github.com/jeromegn/Backbone.localStorage](https://github.com/jeromegn/Backbone.localStorage)'
- en: '**Bootstrap**: This is a popular user interface layout and components library—[http://twitter.github.io/bootstrap/](http://twitter.github.io/bootstrap/)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bootstrap**：这是一个流行的用户界面布局和组件库——[http://twitter.github.io/bootstrap/](http://twitter.github.io/bootstrap/)'
- en: '**Showdown**: This converts Markdown text (for example, `## Heading`) to formatted
    HTML (for example, `<h2>Heading</h2>`)—[https://github.com/coreyti/showdown](https://github.com/coreyti/showdown)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Showdown**：这可以将Markdown文本（例如，`## 标题`）转换为格式化的HTML（例如，`<h2>标题</h2>`）——[https://github.com/coreyti/showdown](https://github.com/coreyti/showdown)'
- en: 'In terms of application structure and event flow, the key components of Notes
    can loosely be presented in a hierarchical fashion as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用结构和事件流方面，笔记的关键组件可以大致按层次结构如下呈现：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The application `app` bootstraps various application parts and starts up the
    router `App.Routers.Router`. The router routes hash fragments to either the list
    view `App.Views.Notes` or the single note view `App.Views.Note`. Both of these
    views use Underscore.js template strings from `App.Templates`. The list view `App.Views.Notes`
    contains two additional view objects for filtering and displaying list items,
    and a collection of notes. The `App.Views.Note` single note view contains two
    views objects for menu bar navigation actions and rendering Markup, and a note
    model.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序 `app` 引导各种应用部分并启动路由器 `App.Routers.Router`。路由器将哈希片段路由到列表视图 `App.Views.Notes`
    或单个笔记视图 `App.Views.Note`。这两个视图都使用来自 `App.Templates` 的 Underscore.js 模板字符串。列表视图
    `App.Views.Notes` 包含两个额外的视图对象用于过滤和显示列表项，以及笔记集合。单个笔记视图 `App.Views.Note` 包含两个视图对象用于菜单栏导航操作和渲染标记，以及一个笔记模型。
- en: 'Diving into the application files, the `notes/app/js/app/` directory decomposes
    into module groups, starting with some helper utilities:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 深入应用文件，`notes/app/js/app/` 目录分解为模块组，从一些辅助工具开始：
- en: '`namespace.js`: This sets up a global namespace for our application classes
    (`App`) and instance (`app`)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`namespace.js`: 这为我们的应用程序类（`App`）和实例（`app`）设置了一个全局命名空间。'
- en: '`config.js`: This sets up configuration variables for the application instance,
    which we will be overriding in some of our tests'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.js`: 这为应用程序实例设置配置变量，我们将在一些测试中覆盖这些变量。'
- en: 'The application has a single model and collection that abstract the note data:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序有一个单一的模式和集合来抽象笔记数据：
- en: '`App.Models.Note` (`models/note.js`): This is a model class that represents
    a note'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.Models.Note` (`models/note.js`): 这是一个表示笔记的模型类。'
- en: '`App.Collections.Notes` (`collections/notes.js`): This is a collection that
    wraps `App.Models.Note` model instances, representing a list of notes'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.Collections.Notes` (`collections/notes.js`): 这是一个封装`App.Models.Note`模型实例的集合，表示笔记列表。'
- en: 'All view templates are maintained in one file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所有视图模板都维护在一个文件中：
- en: '`App.Templates` (`templates/templates.js`): This is an object literal that
    contains the Underscore.js template strings for rendering HTML sections for various
    views'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.Templates` (`templates/templates.js`): 这是一个对象字面量，包含用于渲染各种视图的HTML部分的Underscore.js模板字符串。'
- en: The single note page has three view objects—a parent view (`App.Views.Note`)
    containing a child view (`App.Views.NoteView`) that renders a note, and a helper
    view (`App.Views.NoteNav`) for interacting with the navigation bar.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 单个笔记页面有三个视图对象——一个包含子视图（`App.Views.NoteView`）的父视图（`App.Views.Note`），用于渲染笔记，以及一个用于与导航栏交互的辅助视图（`App.Views.NoteNav`）。
- en: '`App.Views.NoteNav` (`views/note-nav.js`): This is a helper view that controls
    the note navigation bar options **View**, **Edit**, and **Delete** and listens
    for / triggers events for interaction with other views.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.Views.NoteNav` (`views/note-nav.js`): 这是一个辅助视图，用于控制笔记导航栏选项**查看**、**编辑**和**删除**，并监听/触发与其他视图交互的事件。'
- en: '`App.Views.NoteView` (`views/note-view.js`): This is a child view that renders
    note Markdown data as HTML.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.Views.NoteView` (`views/note-view.js`): 这是一个子视图，用于将笔记Markdown数据渲染为HTML。'
- en: '`App.Views.Note` (`views/note.js`): This is a parent view that represents a
    single `App.Models.Note` model for viewing, editing, and deleting. It contains
    the `App.Views.NoteView` child view and the `App.Views.NoteNav` helper view.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.Views.Note` (`views/note.js`): 这是一个表示单个`App.Models.Note`模型用于查看、编辑和删除的父视图。它包含子视图`App.Views.NoteView`和辅助视图`App.Views.NoteNav`。'
- en: The list of notes on the home page has a similar assortment of views.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 主页上的笔记列表具有类似的视图组合。
- en: '`App.Views.NotesFilter` (`views/notes-filter.js`): This is a helper view for
    managing the filter form input and for hiding/showing notes based on the filter
    query'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.Views.NotesFilter` (`views/notes-filter.js`): 这是一个用于管理筛选表单输入和根据筛选查询隐藏/显示笔记的辅助视图。'
- en: '`App.Views.NotesItem` (`views/notes-item.js`): This is a child view that renders
    a single note list entry on the home page'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.Views.NotesItem` (`views/notes-item.js`): 这是一个子视图，用于在主页上渲染单个笔记列表条目。'
- en: '`App.Views.Notes` (`views/notes.js`): This is a parent view containing an `App.Collections.Notes`
    collection, an `App.Views.NotesFilter` view, and multiple `App.Views.NotesItem`
    view instances, allowing a user to peruse available notes by title and click on
    action buttons to invoke specific note actions (for example, edit or delete)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.Views.Notes` (`views/notes.js`): 这是一个包含`App.Collections.Notes`集合、`App.Views.NotesFilter`视图和多个`App.Views.NotesItem`视图实例的父视图，允许用户通过标题浏览可用的笔记，并通过点击操作按钮调用特定的笔记操作（例如编辑或删除）。'
- en: 'Finally, we have the router and the application instance:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有路由器和应用程序实例：
- en: '`App.Routers.Router` (`routers/router.js`): This is the application router,
    which mediates routes for the home and single note pages.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.Routers.Router` (`routers/router.js`): 这是应用程序路由器，它处理主页和单个笔记页面的路由。'
- en: '`app.js`: This is the Backbone.js application instance, which instantiates
    the `App.Views.Notes` and `App.Routers.Router` instances and starts routing history.
    The application instance is functionally similar to the `main` function entry
    point in languages such as C and Java.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.js`: 这是Backbone.js应用程序实例，它实例化了`App.Views.Notes`和`App.Routers.Router`实例并启动路由历史。应用程序实例在功能上类似于C和Java等语言中的`main`函数入口点。'
- en: These components serve as the basis for the test examples throughout this book.
    At the same time, the specific code, classes, and objects of the Notes application
    are not special or unique as a testing target—any Backbone.js application with
    a standard assortment of models, views, templates, and routers should suffice.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件构成了本书中测试示例的基础。同时，Notes 应用程序的具体代码、类和对象作为测试目标并不特殊或独特——任何具有标准模型、视图、模板和路由器的
    Backbone.js 应用程序都应足够。
- en: Tip
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Numerous other sample Backbone.js applications are available as learning tools
    for testing and development practices, many of which are documented on the Backbone.js
    example sites wiki page. One particularly well-liked project is TodoMVC ([http://todomvc.com/](http://todomvc.com/))
    that provides a simple task manager using Backbone.js. TodoMVC further provides
    examples of the same application using other JavaScript frameworks, including
    AngularJS, Knockout.js, Meteor, and Derby, making it a great way to try out popular
    frontend frameworks outside the world of Backbone.js.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他 Backbone.js 应用程序作为测试和开发实践的学习工具可用，其中许多已在 Backbone.js 示例网站维基页面上进行了记录。一个特别受欢迎的项目是
    TodoMVC ([http://todomvc.com/](http://todomvc.com/))，它使用 Backbone.js 提供了一个简单的任务管理器。TodoMVC
    还提供了使用其他 JavaScript 框架（包括 AngularJS、Knockout.js、Meteor 和 Derby）的相同应用程序的示例，这使得在
    Backbone.js 世界之外尝试流行的前端框架成为可能。
- en: Test paradigms and methods
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试范式和方法
- en: There are numerous competing and complementary theories regarding software testing
    and development methodologies. Reading up on the world of test methods provides
    an excellent background for any developer looking to improve the ways in which
    they construct, implement, and manage tests. For brevity's sake, we will only
    introduce two paradigms in this book that are particularly useful for Backbone.js
    testing—Test-Driven Development (TDD) and Behavior-Driven Development (BDD).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 关于软件测试和开发方法，存在众多相互竞争和补充的理论。了解测试方法的世界为任何希望改进构建、实施和管理测试方式的开发者提供了一个极好的背景。为了简洁起见，本书中我们将仅介绍两种特别适用于
    Backbone.js 测试的范式——测试驱动开发（TDD）和行为驱动开发（BDD）。
- en: 'Test-Driven Development is a process wherein tests are written first and *then*
    the actual code is written. The benefits of this approach include:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 测试驱动开发是一个先编写测试然后才编写实际代码的过程。这种方法的优点包括：
- en: Making tests a first-class priority in the development process
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将测试作为开发过程中的首要任务
- en: Encouraging code to be written in small modular units
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励将代码编写成小型模块单元
- en: Preventing the knowledge of code implementation details from unduly influencing
    the tests
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止对代码实现细节的了解过度影响测试
- en: TDD and general software testing principles are covered in many resources; a
    recommended reference on the subject is *Growing Object-Oriented Software, Guided
    by Tests* by *Steve Freeman and Nat Pryce* ([http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627](http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627)).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 测试驱动开发（TDD）和一般的软件测试原则在许多资源中都有涉及；关于这个主题的一个推荐参考是 Steve Freeman 和 Nat Pryce 所著的
    *Growing Object-Oriented Software, Guided by Tests* ([http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627](http://www.amazon.com/Growing-Object-Oriented-Software-Guided-Tests/dp/0321503627))。
- en: Note
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the purpose of readability, we usually present the code first and the tests
    second. However, this is not necessarily the order in which the code and tests
    would be developed. Notwithstanding our examples, we strongly encourage that you
    incorporate TDD practices into your software development process.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高可读性，我们通常先展示代码然后是测试。然而，这并不一定是代码和测试的开发顺序。尽管我们的示例如此，但我们强烈建议您将 TDD 实践融入您的软件开发过程中。
- en: Behavior-Driven Development is a refinement to TDD. It was developed by *Dan
    North* ([http://dannorth.net/introducing-bdd/](http://dannorth.net/introducing-bdd/)),
    and centers around specifying and describing tests in terms of the desired *behavior*
    of the application. In other words, BDD tests focus on what the *application*
    should be doing and not what the *test code* is testing, causing developers to
    ideally think less about internal test details and more about the application
    as a whole. To learn more about the principles and applications of BDD, a great
    starting point is the [http://behaviour-driven.org/](http://behaviour-driven.org/)
    website.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 行为驱动开发（Behavior-Driven Development，简称BDD）是对测试驱动开发（Test-Driven Development，简称TDD）的一种改进。它是由*Dan
    North*([http://dannorth.net/introducing-bdd/](http://dannorth.net/introducing-bdd/))开发的，其核心是使用应用期望的*行为*来指定和描述测试。换句话说，BDD测试关注的是*应用*应该做什么，而不是测试代码在测试什么，这导致开发者理想上更多地思考整个应用，而不是内部测试细节。要了解更多关于BDD的原则和应用，[http://behaviour-driven.org/](http://behaviour-driven.org/)网站是一个很好的起点。
- en: Tip
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**BDD and TDD as library configuration options**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**BDD和TDD作为库配置选项**'
- en: The BDD and TDD paradigms are so prevalent in the testing vernacular that many
    test libraries have adopted the terms BDD or TDD to designate APIs and configurations.
    For example, in [Chapter 3](ch03.html "Chapter 3. Test Assertions, Specs, and
    Suites"), *Test Assertions, Specs, and Suites*, we'll explore the Mocha `bdd`
    and `tdd` API interfaces. To avoid any confusion, it is best to view test library
    modes as just configuration options that may or may not have a strict relationship
    to the paradigms we have just discussed.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: BDD和TDD范式在测试术语中非常普遍，以至于许多测试库都采用了BDD或TDD术语来指定API和配置。例如，在[第3章](ch03.html "第3章。测试断言、规范和套件")*测试断言、规范和套件*中，我们将探讨Mocha的`bdd`和`tdd`API接口。为了避免任何混淆，最好将测试库模式视为只是配置选项，这些选项可能与我们已经讨论过的范式有或没有严格的关系。
- en: Testing concepts, approaches, and planning
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试概念、方法和规划
- en: Before jumping into the testing waters, it makes sense to have a plan of *what*
    we should test and *why*. The term **test plan** is heavily overloaded with many
    potential interpretations as processes, literature, and practices have been prevalent
    and continuously evolving for decades. It is not surprising that modern test plans
    can range from casual, mostly ad-hoc practices to formal, 100-page documents requiring
    executive sign offs at various stages.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在跳入测试的深水区之前，有一个关于我们应该测试什么以及为什么的测试计划是有意义的。术语**测试计划**被大量使用，有众多可能的解释，因为过程、文献和实践已经普遍存在并且持续演变了几十年。现代测试计划的范围从随意的、主要是非正式的实践到正式的、100页的文档，需要在不同阶段获得管理层批准，这并不令人惊讶。
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a more detailed discussion on the test plan practices applied to modern
    JavaScript applications, see the *JavaScript Testing Beginner's Guide* by *Yuxian
    Eugene Liang* ([http://www.packtpub.com/javascript-testing-beginners-guide/book](http://www.packtpub.com/javascript-testing-beginners-guide/book)).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 关于应用于现代JavaScript应用程序的测试计划实践的更详细讨论，请参阅由*Yuxian Eugene Liang*编写的*《JavaScript测试入门指南》*([http://www.packtpub.com/javascript-testing-beginners-guide/book](http://www.packtpub.com/javascript-testing-beginners-guide/book))。
- en: As Backbone.js applications are typically created in iterative development cycles,
    often without a lot of extra formality, we will take a fairly practical approach
    and create a test plan that simply identifies testing categories and applies them
    to the application under test. While an actual planning document or wiki is a
    best practice, it is not absolutely necessary. The overriding point is being able
    to identify what tests are appropriate for a given piece of code or feature during
    development.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Backbone.js应用程序通常是在迭代开发周期中创建的，通常没有太多的额外正式性，我们将采取相当实际的方法，创建一个测试计划，该计划仅识别测试类别并将它们应用于正在测试的应用程序。虽然实际的规划文档或维基是最佳实践，但并非绝对必要。主要观点是能够在开发过程中识别适合给定代码或功能的测试。
- en: 'We will focus on a few of the many overlapping concepts within the auspices
    of a test plan:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于测试计划范围内的几个许多重叠的概念：
- en: '**Unit tests**: Unit tests isolate parts of the application (individual functions,
    classes, and modules) to exercise. Some interpretations of a frontend unit test
    further require that the test executes quickly and without any I/O (network, disk,
    and so on).'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：单元测试将应用程序的某些部分（单个函数、类和模块）隔离出来进行测试。一些前端单元测试的解释还进一步要求测试执行快速且没有任何I/O（网络、磁盘等）。'
- en: '**Partial integration tests**: Integration tests typically involve testing
    the *entire* application stack—frontend, web server, backend datastore, and everything
    in between. We will not go that far in this book but will instead write frontend
    tests that combine multiple application parts (for example, collections and views)
    and verify that they are interacting correctly.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部分集成测试**：集成测试通常涉及测试整个应用程序堆栈——前端、Web服务器、后端数据存储以及其中的一切。在这本书中，我们不会走那么远，而是将编写结合多个应用程序部分（例如，集合和视图）的前端测试，并验证它们是否正确交互。'
- en: Unit tests take a narrow view and are often used by a developer to set forth
    a set of required behaviors for the small piece of code they are presently working
    on. Then, the code is developed to match up with the unit test assertions. Partial
    integration tests take a higher-level view, piecing together the application and
    checking that the individual components add up to a functional whole. In an exemplary
    Backbone.js application, a unit test might create a single model and test-only
    model methods. In contrast, a partial integration test might create a view with
    several subviews and a collection and verify that collection data changes modify
    the subview display.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试采取狭窄的视角，通常由开发人员用来为当前正在工作的代码片段定义一组所需的行为。然后，代码被开发以匹配单元测试断言。部分集成测试采取更高层次的视角，将应用程序拼凑在一起，并检查各个组件是否构成一个功能整体。在一个典型的Backbone.js应用程序中，单元测试可能会创建一个单独的模型并测试仅模型方法。相比之下，部分集成测试可能会创建一个包含多个子视图和集合的视图，并验证集合数据的变化是否修改了子视图的显示。
- en: 'Other concepts that we will not explicitly cover in this book, but that are
    worth becoming familiar with and integrating into the overall development and
    testing process, include:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 其他我们在这本书中不会明确介绍，但值得熟悉并整合到整体开发和测试过程中的概念包括：
- en: '**Full integration tests**: Full integration tests incorporate the entire application
    (often seeded with known test data), exercise behavior as a user would through
    the frontend, and verify that the application responses propagate all the way
    from the backend to the user interface. For a Backbone.js application, this would
    entail pointing a browser window to the application''s HTML page and running the
    application like a real user would.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完全集成测试**：完全集成测试包含整个应用程序（通常使用已知测试数据初始化），模拟用户通过前端的行为，并验证应用程序响应是否从后端传播到用户界面。对于一个Backbone.js应用程序，这包括将浏览器窗口指向应用程序的HTML页面，并像真实用户一样运行应用程序。'
- en: '**Regression tests**: Regression tests isolate and expose reported bugs in
    an application. The tests are written *first* to verify that the bug is reproduced,
    after which the source code is fixed. The tests continue to be run as part of
    the overall test suite to ensure that the bug does not reappear.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回归测试**：回归测试隔离并暴露应用程序中报告的缺陷。测试首先编写来验证缺陷是否重现，之后修复源代码。测试作为整体测试套件的一部分继续运行，以确保缺陷不会再次出现。'
- en: '**Usability tests**: Usability testing encompasses many different forms and
    focuses on getting feedback that exposes portions of the application that need
    user interface or user experience improvements.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性测试**：可用性测试包括许多不同的形式，重点是获取反馈，揭示需要用户界面或用户体验改进的应用程序部分。'
- en: '**Performance/load tests**: Performance tests verify that the application maintains
    minimum response times for given use cases. Load testing checks that the application
    can still meet performance goals when different parts of the program are stressed.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能/负载测试**：性能测试验证应用程序在给定用例中是否保持最小响应时间。负载测试检查当程序的不同部分受到压力时，应用程序是否仍然能够满足性能目标。'
- en: '**Acceptance tests**: Acceptance tests form the criteria by which a customer
    can verify that the application meets its requirements. A suite of acceptance
    tests can include any of the categories of tests mentioned previously.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验收测试**：验收测试构成了客户验证应用程序是否满足其要求的标准。一组验收测试可以包括之前提到的任何测试类别。'
- en: Now that we have had a brief introduction of these various testing concepts,
    we will develop an informal test plan for our Backbone.js application. We will
    examine the various parts of our Backbone.js application and identify what needs
    to be tested, what type of tests we should apply, and the behavior that we need
    to verify in the application. For the parts of an application that are still in
    development or in the early design phases, we'll go through the same exercises,
    just with a focus on the behaviors we expect the application to exhibit once it
    has been developed.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对这些各种测试概念有了简要的介绍，我们将为我们的 Backbone.js 应用程序制定一个非正式的测试计划。我们将检查我们 Backbone.js
    应用的各个部分，确定需要测试的内容，我们应该应用哪种类型的测试，以及我们需要在应用中验证的行为。对于仍处于开发阶段或早期设计阶段的程序部分，我们将进行相同的练习，但重点是我们期望应用程序在开发完成后表现出的行为。
- en: Testing individual Backbone.js components
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试单个 Backbone.js 组件
- en: Backbone.js applications are quite amenable to testing separation. Backbone.js
    provides a small number of core components that mostly avoid interdependencies.
    Our goal in this section is to identify the different parts of a Backbone.js application
    that can be unit tested in isolation and start thinking about the features of
    each one that we should test. Many components can simply be instantiated alone
    while others will need some extra mocking or patching help in our tests.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone.js 应用程序非常适合进行测试分离。Backbone.js 提供了一些核心组件，它们大多避免了相互依赖。本节的目标是确定可以单独进行单元测试的
    Backbone.js 应用程序的不同部分，并开始思考我们应该测试每个组件的哪些特性。许多组件可以单独实例化，而其他组件在测试中可能需要一些额外的模拟或修补帮助。
- en: Models
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型
- en: 'Backbone.js models most often are independent entities that can be instantiated
    with a simple `new MyModel({foo: 123})` invocation. Accordingly, we can create
    standalone model objects in our tests without references to any other objects.
    Our model tests should include the assertions that:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 'Backbone.js 模型通常是独立实体，可以通过简单的 `new MyModel({foo: 123})` 调用进行实例化。因此，我们可以在测试中创建独立的模型对象，而不需要引用任何其他对象。我们的模型测试应包括以下断言：'
- en: Objects can be instantiated with supplied and/or default values
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象可以使用提供的和/或默认值进行实例化
- en: Data can be synchronized with a backing datastore (for example, `localStorage`
    or a REST server)
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据可以与后端数据存储（例如，`localStorage` 或 REST 服务器）同步
- en: Custom and built-in events fire and/or are consumed on appropriate state changes
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义和内置事件在适当的状态变化时触发和/或被消费
- en: Validation logic accurately distinguishes the correctness of attribute data
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证逻辑能够准确区分属性数据的正确性
- en: Collections
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合
- en: 'Collections customarily have a single dependency on a model, declared like
    `model: MyModel` in the class definition. We can either directly instantiate collections
    in our tests or mock the `model` property for further test isolation. A typical
    set of collection specs should verify that:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '集合通常对模型有一个单一依赖，在类定义中声明为 `model: MyModel`。我们可以在测试中直接实例化集合，或者模拟 `model` 属性以实现进一步的测试隔离。典型的集合规范应验证以下内容：'
- en: Collection objects can be created with or without an array of model objects
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用或不需要模型对象数组来创建集合对象
- en: Model objects can be added and removed from a collection
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型对象可以被添加和移除出集合
- en: Events are triggered on container and model changes
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器和模型变化时触发事件
- en: Data is appropriately synchronized with the backend
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据与后端适当同步
- en: Templates
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板
- en: Although templates are not an actual Backbone.js component, there are several
    conventional template development techniques for Backbone.js integration that
    we'll observe. Templates generally do not have any dependencies and can readily
    be used alone in test code.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然模板不是实际的 Backbone.js 组件，但有一些传统的模板开发技术用于 Backbone.js 集成，我们将观察这些技术。模板通常没有依赖关系，可以在测试代码中单独使用。
- en: 'The specifics of template tests largely depend on the engine used (for example,
    Underscore.js or Handlebars). A reasonable test starting point would confirm that:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 模板测试的具体内容很大程度上取决于所使用的引擎（例如，Underscore.js 或 Handlebars）。一个合理的测试起点将确认以下内容：
- en: Template objects render the appropriate HTML output with the provided data
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板对象使用提供的数据渲染适当的 HTML 输出
- en: Complex data structures such as arrays and objects are correctly interpolated
    in the template output
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂数据结构，如数组和对象，在模板输出中被正确插值
- en: Views
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图
- en: Views frequently have the most dependencies of any Backbone.js component. Views
    can contain combinations of model, collection, template, router, and child/helper
    view references. Accordingly, we will have to mock or patch dependencies to isolate
    views and/or provide partial dependencies in our tests.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 视图通常是Backbone.js组件中依赖性最多的。视图可以包含模型、集合、模板、路由和子/辅助视图引用的组合。因此，我们将在测试中模拟或修补依赖项以隔离视图和/或提供部分依赖项。
- en: 'For all application views, we will want to verify that:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有应用程序视图，我们希望验证：
- en: Views can render the target HTML, binding model data to a template string
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图可以渲染目标HTML，将模型数据绑定到模板字符串
- en: View objects provided with an `el` property get added to the DOM on creation
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有`el`属性的视图对象在创建时被添加到DOM中
- en: View methods correctly bind to DOM and Backbone.js events, and respond appropriately
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图方法正确绑定到DOM和Backbone.js事件，并做出适当的响应
- en: Objects contained by a view (for example, subviews and models) are properly
    disposed on the view removal
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图包含的对象（例如，子视图和模型）在视图移除时被正确处理
- en: Routers
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由器
- en: 'Routers commonly contain several top-level views and may have collection or
    model references. For unit-testing purposes, we will usually mock out dependencies
    to easily test the routing behavior without regard to the rest of the application.
    Our router tests will need to assert that:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器通常包含几个顶级视图，并且可能有集合或模型引用。为了单元测试的目的，我们通常会模拟依赖项以轻松测试路由行为，而无需考虑应用程序的其他部分。我们的路由器测试需要断言：
- en: URL routes are accurately matched to appropriate views or other actions
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL路由与适当的视图或其他操作准确匹配
- en: A router maintains the browser history correctly after navigation events
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由器在导航事件后正确维护浏览器历史记录
- en: Utilities
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具
- en: Utilities include any helper code that is not actually a core Backbone.js class
    or object. As utilities are ad-hoc creations and have no real constraints, they
    can usually be unit tested easily, provided they are developed along with, and
    in consideration with, their supporting tests.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 工具包括任何实际上不是核心Backbone.js类或对象的辅助代码。由于工具是临时创建的，并且没有实际约束，因此它们通常可以很容易地进行单元测试，前提是它们与支持测试一起开发，并考虑到支持测试。
- en: Testing application interactions and events
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试应用程序交互和事件
- en: A Backbone.js application is used as a cohesive whole by end users, and wherever
    possible, we should have the test infrastructure verify overall application functionality
    and behaviors that cut across single Backbone.js components.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Backbone.js应用程序被最终用户作为一个统一的整体使用，并且尽可能的，我们应该有测试基础设施验证整体应用程序的功能和行为，这些功能和行为跨越单个Backbone.js组件。
- en: Partial integrations
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部分集成
- en: While unit tests are a staple of modern software development, we must metaphorically
    move from unit-testing trees to the forest of partial integration tests to ensure
    that at least some pieces of the application work together harmoniously and reliably.
    In practice, this just means varying the degree to which we mock or remove component
    dependencies in the tests we discussed previously.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然单元测试是现代软件开发的基础，但我们必须从单元测试树隐喻地转移到部分集成测试的森林，以确保至少某些应用程序的部分能够和谐且可靠地协同工作。在实践中，这仅仅意味着我们在之前讨论的测试中改变模拟或移除组件依赖的程度。
- en: 'Integration tests can interact with application parts in many ways, including:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试可以通过许多方式与应用程序部分交互，包括：
- en: By creating a parent view with a collection and subviews, invoking DOM events,
    and checking appropriate changes are made to both the collection data and subview
    displays
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过创建一个包含集合和子视图的父视图，调用DOM事件，并检查集合数据和子视图显示的适当更改
- en: By filling in and submitting the form input in a Backbone.js view
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在Backbone.js视图中填写和提交表单输入
- en: By directly adding models to a collection and triggering events in listening
    views
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过直接将模型添加到集合中并在监听视图中触发事件
- en: Events
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件
- en: All Backbone.js classes extend the `Backbone.Events` base class and typically
    emit and consume events as a first-order means of communication. We will want
    to test that our application components trigger correctly and react to various
    expected events during the application's execution. We will often leverage tools,
    such as spies, stubs, and mocks, to exercise the event logic we want to test while
    not actually affecting other application states.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Backbone.js类都扩展了`Backbone.Events`基类，并且通常将事件作为第一级通信手段发出和消费。我们希望测试我们的应用程序组件在应用程序执行期间正确触发并对各种预期事件做出反应。我们通常会利用工具，如间谍、存根和模拟，来测试我们想要测试的事件逻辑，同时不影响其他应用程序状态。
- en: We will also need to carefully craft our test code to properly set up and tear
    down the test environment so that we can make reasonable assumptions about the
    starting event listener state in each test. For example, if multiple tests add
    custom listeners to a shared object without cleaning up, other tests could spuriously
    fail due to listener callback interaction.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要仔细编写测试代码，以正确设置和拆除测试环境，以便我们可以在每个测试中对起始事件监听器状态做出合理的假设。例如，如果多个测试在未清理的情况下向共享对象添加自定义监听器，其他测试可能会由于监听器回调交互而意外失败。
- en: 'The event behaviors that we will want to test across all our Backbone.js components
    include whether:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在所有 Backbone.js 组件中测试的事件行为包括是否：
- en: Objects respond to custom/built-in events
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象响应自定义/内置事件
- en: Objects emit events correctly
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象正确地发出事件
- en: Event listeners are properly cleaned up on disposal events, such as object or
    view removal
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在销毁事件（如对象或视图移除）中，事件监听器被正确清理
- en: Dipping our toes in the application testing waters
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试应用程序的初步尝试
- en: Now that we can identify the aspects of the Backbone.js components that we want
    to test, let's begin planning and writing tests for the namespace utility and
    the Backbone.js model. For each component, we will examine application use cases
    and expected behaviors and then write tests to verify our expectations.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经可以识别出我们想要测试的 Backbone.js 组件的各个方面，让我们开始规划并编写测试命名空间实用工具和 Backbone.js 模型的测试。对于每个组件，我们将检查应用程序用例和预期行为，然后编写测试以验证我们的期望。
- en: Namespace
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名空间
- en: 'The starting point for the Notes application is a namespace utility that provides
    two global variables to organize our application classes (`App`) and instance
    (`app`). In the `notes/app/js/app/namespace.js` example application file, we''ll
    create the two namespace object literals with class/application properties:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Notes 应用程序的起点是一个命名空间实用工具，它提供了两个全局变量来组织我们的应用程序类（`App`）和实例（`app`）。在 `notes/app/js/app/namespace.js`
    示例应用程序文件中，我们将创建两个命名空间对象字面量，并带有类/应用程序属性：
- en: '[PRE2]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The behavior that we want to test of these helper objects is if they contain
    the correct properties that other application components will rely upon. Accordingly,
    the `chapters/02/test/js/spec/namespace.spec.js` test file just needs a few specs
    to cover these objects. The first spec `provides the ''App'' object` asserts that
    `App` is a JavaScript object with properties for all of the different grouping
    names (`Models`, `Views`, and so on) that we have attached:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要测试这些辅助对象的预期行为是它们包含其他应用程序组件所依赖的正确属性。因此，`chapters/02/test/js/spec/namespace.spec.js`
    测试文件只需要几个规范来覆盖这些对象。第一个规范 `提供 'App' 对象` 断言 `App` 是一个具有所有不同分组名称（`Models`、`Views`
    等）属性的 JavaScript 对象：
- en: '[PRE3]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The second spec `provides the ''app'' object` just checks that the global `app`
    variable exists as an object:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个规范 `提供 'app' 对象` 仅检查全局 `app` 变量是否存在为一个对象：
- en: '[PRE4]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note model
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 笔记模型
- en: 'Moving on to the actual Backbone.js classes, we will start with the model `notes/app/js/app/models/note.js`
    file that provides the data backing a single note in the Notes application:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将实际进入 Backbone.js 类，从提供单个笔记数据的 `notes/app/js/app/models/note.js` 文件开始，该文件位于
    Notes 应用程序中：
- en: '[PRE5]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The model has three fields: `title`, `text`, and `createdAt`. As our example
    Notes application uses `localStorage` configured in the collection class, we do
    not have to provide backend synchronization declarations (for example, a `urlRoot`
    property or a `url` function) to persist model data. Because our model essentially
    comprises a single `defaults` declaration, the behavior that we need to test is
    simply that the default and modified attributes work as expected.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型有三个字段：`title`、`text` 和 `createdAt`。由于我们的示例 Notes 应用程序使用在集合类中配置的 `localStorage`，我们不需要提供后端同步声明（例如，`urlRoot`
    属性或 `url` 函数）以持久化模型数据。因为我们的模型本质上只包含一个 `defaults` 声明，所以我们需要测试的行为仅仅是默认和修改后的属性按预期工作。
- en: 'Our test file for the model, `chapters/02/test/js/spec/models/note.spec.js`,
    has two specs. The first spec creates an `App.Models.Note` object with default
    values and uses `get()`to verify each attribute:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为模型编写的测试文件 `chapters/02/test/js/spec/models/note.spec.js` 包含两个规范。第一个规范使用默认值创建一个
    `App.Models.Note` 对象，并使用 `get()` 验证每个属性：
- en: '[PRE6]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The second spec `sets passed attributes` tests a model created with the supplied
    values for `title` and `text`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个规范 `sets passed attributes` 测试了一个使用提供的 `title` 和 `text` 值创建的模型：
- en: '[PRE7]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Running the application tests
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序测试
- en: With our Backbone.js application files and the preliminary application tests
    ready, we need to integrate everything into the test driver we created in [Chapter
    1](ch01.html "Chapter 1. Setting Up a Test Infrastructure"), *Setting Up a Test
    Infrastructure*. We will continue with the existing application directory structure
    by adding specs to `chapters/02/test/js/spec` and copying the application libraries
    from `notes/app/js/app` to `chapters/02/app/js/app`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在有了Backbone.js应用程序文件和初步的应用程序测试后，我们需要将所有内容集成到我们在[第1章](ch01.html "第1章。设置测试基础设施")中创建的测试驱动程序中，*设置测试基础设施*。我们将通过向`chapters/02/test/js/spec`添加规范并将应用程序库从`notes/app/js/app`复制到`chapters/02/app/js/app`来继续使用现有的应用程序目录结构。
- en: Note
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Notes application resides in the `notes/app` directory, which is the base
    location we will use to discuss the application components. At the same time,
    the chapter code examples are aimed to be independent. Therefore, we maintain
    our layout rules that the application code goes in `chapters/NUMBER/app` and the
    tests go in `chapters/NUMBER/test`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Notes应用程序位于`notes/app`目录中，这是我们讨论应用程序组件的基础位置。同时，章节代码示例旨在保持独立。因此，我们保持我们的布局规则，即应用程序代码放在`chapters/NUMBER/app`中，测试放在`chapters/NUMBER/test`中。
- en: Accordingly, the downloadable examples link files such as `chapters/02/app/js/app/namespace.js`
    to `notes/app/js/app/namespace.js`. Thus, throughout this book, we will talk about
    a file such as `namespace.js` interchangeably using either of the full paths as
    a prefix.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可下载的示例链接文件，如`chapters/02/app/js/app/namespace.js`到`notes/app/js/app/namespace.js`。因此，在本书中，我们将交替使用任一完整路径作为前缀来讨论文件，如`namespace.js`。
- en: 'In the `chapters/02/test/test.html` test driver page, we''ll add `script` tags
    referencing our libraries, application files, and tests:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在`chapters/02/test/test.html`测试驱动程序页面中，我们将添加引用我们的库、应用程序文件和测试的`script`标签：
- en: '[PRE8]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The highlighted tag lines in the previous file illustrate that we have now
    added the core vendor libraries (Underscore.js, Backbone.js, and so on), the application
    libraries, and our two spec files. Opening `chapters/02/test/test.html` gives
    us our test report:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一文件中突出显示的标签行说明我们现在已经添加了核心供应商库（Underscore.js、Backbone.js等）、应用程序库以及我们的两个规范文件。打开`chapters/02/test/test.html`将给我们测试报告：
- en: '![Running the application tests](img/5248OS_02_04.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![运行应用程序测试](img/5248OS_02_04.jpg)'
- en: Test report
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 测试报告
- en: With our finished test report, we have now exercised and tested specific Backbone.js
    components and hooked everything into the overall test infrastructure.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的测试报告完成后，我们现在已经锻炼和测试了特定的Backbone.js组件，并将所有内容连接到整体测试基础设施中。
- en: Summary
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we reviewed the basics of Backbone.js applications and introduced
    the Notes application as a helpful, if optional, companion to the test examples
    in this book. We then reviewed some relevant high-level testing concepts and dived
    into the specifics of what we will want to test in a Backbone.js application—in
    separated application pieces and as integrated parts of a whole. Finally, we wrote
    our first application unit tests and extended the test infrastructure from [Chapter
    1](ch01.html "Chapter 1. Setting Up a Test Infrastructure"), *Setting Up a Test
    Infrastructure*, to execute our test reporter.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了Backbone.js应用程序的基础知识，并介绍了Notes应用程序作为本书测试示例的有用但可选的伴侣。然后，我们回顾了一些相关的高级测试概念，并深入探讨了在Backbone.js应用程序中我们想要测试的具体内容——作为独立的应用程序部分以及作为整体的一部分。最后，我们编写了我们的第一个应用程序单元测试，并将测试基础设施从[第1章](ch01.html
    "第1章。设置测试基础设施")，*设置测试基础设施*扩展到执行我们的测试报告器。
- en: You should now be able to take an existing or in-development Backbone.js application,
    analyze its components, and create an abstract test infrastructure outline that
    will later be filled in with actual tests and suites.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该能够对现有的或正在开发中的Backbone.js应用程序进行分析，分析其组件，并创建一个抽象的测试基础设施轮廓，稍后用实际的测试和套件填充。
- en: In the next chapter, we will learn about Chai assertions, basic Mocha test constructs
    (specs and suites), test setup/teardown/configuration, and how to deterministically
    verify behavior in an asynchronous application environment. We will also broadly
    increase our test coverage as we write many more tests for our Backbone.js application
    in the course of learning testing technologies.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习Chai断言、基本的Mocha测试结构（规范和套件）、测试设置/清理/配置，以及如何在异步应用程序环境中确定性地验证行为。我们还将通过在学习测试技术的过程中为我们的Backbone.js应用程序编写更多的测试来广泛增加我们的测试覆盖率。
