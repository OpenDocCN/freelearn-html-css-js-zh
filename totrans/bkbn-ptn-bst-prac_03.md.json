["```js\nvar User = Backbone.Model.extend({});\n```", "```js\nvar newUser  =  new User({\n  name : 'Jayanti De',     \n  age : 40\n});\n\nvar name = newUser.get('name');  // Jayanti De\nnewUser.set('age', 42);\n\nconsole.log(newUser.toJSON()); \n// Output => {\"name\": \"Jayanti De\", \"age\": 42}\n```", "```js\nnewUser.on('change' , function(model, options){\n  console.log(model.changed);  // Output => {\"age\" : 42}\n});\n```", "```js\nnewUser.on('age:change' , function(model, newAge){\n  console.log(newAge);  // Output => 42\n});\n```", "```js\nvar User = Backbone.Model.extend({\n  defaults: {\n    name: 'John Doe',\n    age: 20\n  }\n});\n\nconsole.log(new User().get('name')); \n// Output => John Doe\n```", "```js\nvar User = Backbone.Model.extend({\n    defaults : {\n        hobbies : []\n    }\n});\n\nvar user1 = new User(),\nuser2 = new User();\n\nuser1.get('hobbies').push('photography');\nuser2.get('hobbies').push('biking');\n\nconsole.log(user1.get('hobbies'));\n// Output => [\"photography\", \"biking\"]\n```", "```js\ndefaults: function() {\n  return {\n    hobbies: []\n  }\n}\n```", "```js\nconsole.log(user1.get('hobbies'));\n// Output => [\"photography\"]\n```", "```js\nvar User = Backbone.Model.extend({\n  url: '/users'\n});\n```", "```js\nvar user = new User({\n  name : 'Ashim De',\n  age : 55\n});\n\nuser.save({\n  success : function(){},\n  error : function(){}\n});  \n```", "```js\nvar user = new User({\n  id: 23,\n  name: 'Shankha De',\n  age: 14\n});\n\n// Send PUT request to the server\nuser.save();\n```", "```js\nvar user = new User({\n  id: 23\n});\n\n// Sends GET request to /users/23\nuser.fetch();\n```", "```js\nvar user = new User({\n  id: 23\n});\n\nuser.destroy({\n  success: function () {}\n});\n```", "```js\nvar User = Backbone.Model.extend({\n  validation: {    emailRegEx: /^\\s*[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\@[\\w\\-\\+_]+\\.[\\w\\-\\+_]+(\\.[\\w\\-\\+_]+)*\\s*$/\n},\n\n  defaults: {\n    name: '',\n    email: ''\n  },\n\n  validate: function (attr) {\n    if (attr.name.length === 0) {\n      return 'Name is required';\n    }\n\n    if (attr.email.length === 0) {\n      return 'Email is required';\n    }\n\n    if (!this.validation.emailRegEx.test(attr.email)) {\n      return 'Please provide a valid email';\n    }\n  }\n});\n\n// Define the user view\nvar UserView = Backbone.View.extend({\n  initialize: function () {\n    this.model.on('invalid', this.handleError, this);\n  },\n\n  handleError: function (model, error, options) {\n    alert(error);\n  }\n});\n\nvar user = new User();\n\nvar userView = new UserView({\n  model: user\n});\n\n// Set new attributes \nuser.set({\n  name: '',\n  email: 'johndoe#www.com'\n}, {\n  validate: true\n});\n```", "```js\nvalidate: function (attr) {\n  var errors = {};\n\n  if (attr.name.length === 0) {\n    errors['name'] = 'Name is required';\n  }\n\n  if (attr.email.length === 0) {\n    errors['email'] = 'Email is required';\n  }\n\n  if (!this.validation.emailRegEx.test(attr.email)) {\n    // If already there is an error for email, \n    // then skip other errors for email\n    errors['email'] = errors['email'] || 'Please provide a valid email';\n  }\n\n  return errors;\n}\n\n// Set both empty values\nuser.set({\n  name: '',\n  email: 'johndoe#www.com'\n}, { validate: true });\n```", "```js\nvar User = Backbone.Model.extend({\n  validation: {\n    name: {\n      required: true\n    },\n\n    email: {\n      required: true,\n      pattern: 'email'\n    }\n  },\n\n  defaults: {\n    name: '',\n    email: ''\n  }\n});\n```", "```js\nvar User = Backbone.Model.extend({\n  validation: {\n    // Do not return anything if validation is passed\n    name: function (value, attr, computedState) {\n      if (!value) {\n        return 'Name is required';\n      }\n    },\n\n    // the method will be called on model's scope\n    email: 'validateEmail'\n  },\n\n  validateEmail: function (value, attr, computedState) {\n    if (!value) {\n      return 'Email is required';\n    }\n  }\n});\n```", "```js\n{\n  name: {\n    required: true,\n    msg: 'Name is required'\n  },\n\n  email: [{\n    required: true,\n    msg: 'Email is required'\n  }, {\n    pattern: 'email',\n    msg: 'Please provide a valid email'\n  }]\n}\n```", "```js\nvar errorMessage = model.preValidate('attributeName', 'Value');\n```", "```js\n{\n  \"name\": \"John Doe\",\n  \"email\": \"johndoe@example.com\"\n}\n```", "```js\n{\n  \"user\": {\n    \"name\": \"John Doe\",\n    \"email\": \"johndoe@example.com\"\n  }\n}\n```", "```js\nparse: function (resp, options) {\n  return resp;\n}\n```", "```js\n var User = Backbone.Model.extend({\n  url: 'server.json',\n  defaults: {\n    name: '',\n    email: ''\n  },\n\n  // Returns the attribute hash \n  parse: function (response) {\n    return response.user;\n  }\n});\n\nvar user = new User();\nuser.fetch({\n  success: function () {\n    console.log(user.get('name')); // John Doe\n  }\n});\n```", "```js\n{ \n      name : 'Swarnendu De',\n      email: 'swarnendu@email.com'\n}\n```", "```js\n// Add this method to model\ntoJSON: function () {\n  return {\n    user: _.clone(this.attributes)\n  }\n}\n\n// Let's set new data and send that to the server\nuser.set({\n  name: 'Swarnendu',\n  email: 'swarnendu@email.com'\n});\n\nuser.save();\n```", "```js\n{\n  \"user\": {\n    \"name\": \"Swarnendu\",\n    \"email\": \"swarnendu@email.com\"\n  }\n}\n```", "```js\nvar jsonData = _.clone(this.attributes);\n```", "```js\nvar Company = Backbone.RelationalModel.extend({\n  defaults: {\n    name: ''\n  },\n  relations: [{\n    // 'type' can be HasOne or HasMany \n    // or a direct reference to a relation\n    type: Backbone.HasMany,\n\n    // 'key' refer to an attribute name of the related model\n    key: 'employees',\n    relatedModel: 'Employee',\n\n    // a collection of the related models\n    collectionType: 'Employees',\n\n    // defines the reverse relation with this model\n    reverseRelation: {\n      key: 'worksIn',\n      includeInJSON: 'id'\n      // 'relatedModel' is automatically set to 'Company'; \n      // the 'relationType' to 'HasOne'.\n    }\n  }]\n});\n\nvar Employee = Backbone.RelationalModel.extend({\n  defaults: {\n    name: '',\n    worksIn: null\n  }\n});\n\nvar Employees = Backbone.Collection.extend({\n  model: Employee\n});\n```", "```js\nvar innofied = new Company({\n  name: 'Innofied'\n});\n\nvar john = new Employee({\n  name: 'John Doe',\n  worksIn: innofied\n});\n\nvar swarnendu = new Employee({\n  name: 'Swarnendu De',\n  worksIn: innofied\n});\n\n// 'employees' in 'innofied' now contains \n// 'John Doe and Swarnendu De'\nalert(innofied.get('employees').pluck('name'));\n```"]