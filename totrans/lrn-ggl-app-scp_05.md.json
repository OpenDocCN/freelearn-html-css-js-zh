["```js\nfunction createCalendarEventFromDescription(){\n  CalendarApp.getDefaultCalendar()\n    .createEventFromDescription('Team Meeting, Monday from 3 PM to 4 PM');\n}\n```", "```js\nfunction createCalendarEvents() {\n    var title = \"Title of the event\";\n    var startTime = new Date(\"October 21, 2015 21:00:00\");\n    var endTime = new Date(\"October 21, 2015 21:30:00\");\n\n    CalendarApp.getDefaultCalendar()\n      .createEvent(title, startTime, endTime);\n}\n```", "```js\nfunction createCalendarEventsWithOptions() {\n  var options = {\n    description : 'Description of the event',\n    location : 'Event Location',\n    //sendInvites : true,\n    //guests : 'Comma-separated list of guest email IDs.'\n  };\n\n  var title = \"Title of the event\";\n  var startTime = new Date(\"October 21, 2015 21:00:00\");\n  var endTime = new Date(\"October 21, 2015 21:30:00\");\n\n  CalendarApp.getDefaultCalendar()\n    .createEvent(title, startTime, endTime, options);\n}\n```", "```js\nfunction createCalendarEventsFromSheetData() {\n  /*\n   * 'Events' sheet column numbers,\n   * use 0 for column 'A',\n   * 1 for column 'B' and so on.\n   * This makes life easy to use in '0' indexed JS arrays.\n   *\n   */\n  const TITLE = 0;\n  const START_TIME = 1;\n  const END_TIME = 2;\n  const DESCRIPTION = 3;\n  const LOCATION = 4;\n  const SEND_INVITES = 5;\n  const GUESTS = 6;\n\n  var sheet = SpreadsheetApp.getActiveSpreadsheet()\n              .getSheetByName(\"Events\");\n\n  var data = sheet.getDataRange().getValues();\n\n  // Remove header\n  var header = data.shift();\n\n  var options = {\n    description : '',\n    location : '',\n    sendInvites : false,\n    guests : ''\n  };\n\n  for(var i in data){\n    /*\n     * 'data' is a 2-dim array.\n     * First index for row numbers and\n     * second index for column numbers.\n     *\n     */\n    options.description = data[i][DESCRIPTION];\n    options.location = data[i][LOCATION];\n    options.sendInvites = data[i][SEND_INVITES];\n    options.guests = data[i][GUESTS];\n\n    var title = data[i][TITLE];\n    var startTime = data[i][START_TIME];\n    var endTime = data[i][END_TIME];\n\n    CalendarApp.getDefaultCalendar()\n      .createEvent(title, startTime, endTime, options);\n  }  \n}\n```", "```js\nfunction createEventsFromCsvData(){\n  // CSV columns, 0 based.\n  const TITLE = 0;\n  const START_TIME = 1;\n  const END_TIME = 2;\n  const DESCRIPTION = 3;\n  const LOCATION = 4;\n  const SEND_INVITES = 5;\n  const GUESTS = 6;\n\n  // Put the key/ID of the CSV file placed in Drive.\n  var blob = DriveApp.getFileById(\"[[ CSV file id ]]\").getBlob();\n  var str = blob.getDataAsString();\n\n  var data = Utilities.parseCsv(str);\n  // Now the data is a two-dimensional array\n\n  // Remove header\n  data.shift();\n\n  var options = {\n    description : '',\n    location : '',\n    sendInvites : false,\n    guests : ''\n  };\n\n  for(var i in data){\n\n    // Skip if no title\n    if(!data[i][0]) continue;\n\n    // Populate the options object\n    options.description = data[i][DESCRIPTION];\n    options.location = data[i][LOCATION];\n    options.sendInvites = data[i][SEND_INVITES];\n    options.guests = data[i][GUESTS];\n\n    var title = data[i][TITLE];\n    var startTime = data[i][START_TIME];\n    var endTime = data[i][END_TIME];\n\n    CalendarApp.getDefaultCalendar()\n      .createEvent(title, startTime, endTime, options);\n\n  }\n}\n```", "```js\n/**\n *  Logs all of your calendars with IDs.\n *\n */\nfunction listCalendars() {\n  var calendars, pageToken = null;\n\n  do {\n    calendars = Calendar.CalendarList.list({\n      maxResults: 100,\n      pageToken: pageToken\n    });\n\n    if (calendars.items && calendars.items.length > 0) {\n      for (var i = 0; i < calendars.items.length; i++) {\n        var calendar = calendars.items[i];\n        Logger.log('%s (ID: %s)', calendar.summary, calendar.id);\n      }\n    } else {\n      Logger.log('No calendars found.');\n    };\n\n    // If more than one page, then return a token, else null.\n    pageToken = calendars.nextPageToken;\n\n  } while (pageToken);\n}\n```", "```js\nfunction listEventsFromOneCalendar() {\n  var sheet = SpreadsheetApp.getActiveSpreadsheet()\n        .getSheetByName(\"ExistingEvents\");\n\n  var source = \"Replace with source calendar email id\";\n  var srcCalId = Calendar.Calendars.get(source).id;\n\n  var syncdays = 30;\n  var now = new Date();\n  var min = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  var max = new Date(now.getFullYear(), now.getMonth(), now.getDate() + syncdays);\n\n  var srcEvents = Calendar.Events.list(srcCalId, {\n    timeMin: min.toISOString(),\n    timeMax: max.toISOString(),\n    singleEvents: true,\n    orderBy: 'startTime',\n  }).items;\n\n  /*\n   * To store events data in a spreadsheet we need\n   * to construct a 2-dim array\n   *\n   */\n  var output = [];\n\n  /*\n   * 'srcEvents' is an array of event objects.\n   *\n   * Every event object is passed as 'e' to the anonymous\n   * function.\n   *\n   */\n  srcEvents.forEach(function(e){\n    // Construct an event array (1-dim)\n    var event = [];\n\n    /*\n     * Returns \"\" if object value is 'null' or 'undefined'\n     *   otherwise returns the object value.\n     *\n     */\n    event.push(e.summary || \"\");\n    event.push(e.start.dateTime || \"\");\n    event.push(e.end.dateTime || \"\");\n    event.push(e.description || \"\");\n    event.push(e.location || \"\");\n\n    // Push each event array to output (2-dim array).\n    output.push(event);\n  });\n\n  var header = [\n                 \"Title/Subject\",\n                 \"Start Time\",\n                 \"End Time\",\n                 \"Description\",\n                 \"Location\"\n               ];\n\n  // Insert header at the top of the output.\n  output.unshift(header);\n\n  sheet.clearContents();\n\n  sheet.getRange(1, 1, output.length, header.length)\n  .setValues(output);\n};\n```", "```js\n/**\n *  Replace Source and Destination with your own Calendars name.\n *\n *  You should have write access in the destination Calendar,\n *  in other words it should have been created by you.\n *\n */\nfunction syncEvents() {\n  const RATE_LIMIT = 10; // Milliseconds\n\n  var source = \"[[ Source ]]\"; // Source calendar email id.\n  var destination = \"Destination\"; // Destination calendar name.\n\n  var srcCalId = Calendar.Calendars.get(source).id;\n\n  // Returns calendars (matching with the name) as an array\n  var dstCal = CalendarApp\n                 .getCalendarsByName(destination)[0];\n\n  var dstCalId = dstCal.getId();\n\n  var syncdays = 30;\n  var now = new Date();\n\n  var min = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  var max = new Date(now.getFullYear(), now.getMonth(), now.getDate() + syncdays);\n\n  // Get all source events as an array of objects.\n  var srcEvents = Calendar.Events.list(srcCalId, {\n    timeMin: min.toISOString(),\n    timeMax: max.toISOString(),\n    singleEvents: true,\n    orderBy: 'startTime',\n  }).items;\n\n  // Get all destination events as an array of objects.\n  var allDstEvents = Calendar.Events.list(dstCalId, {\n    timeMin: min.toISOString(),\n    timeMax: max.toISOString(),\n    singleEvents: true,\n    orderBy: 'startTime',\n  }).items;\n\n  /*\n   * Get all destination events already synced from source\n   * identified with the help of prefix '[sync:'\n   *\n   */\n  var dstEvents = allDstEvents.filter(function(event){\n      return /\\[sync:\\w+/.test(event.summary)?true:false;\n  });\n\n  // UPDATE all dstEvents with the corresponding srcEvents.\n  for(var d in dstEvents){\n    for(var s in srcEvents){\n\n      if(dstEvents[d] && srcEvents[s] && dstEvents[d].id == srcEvents[s].id){\n        /*\n         * Update srcEvents with 'sync:' marking in the * destination calendar.\n         *\n         */\n        srcEvents[s].summary = srcEvents[s].summary||'' + \" [sync:\"+source+\"]\";\n\n        updateEvent_(srcEvents[s],dstCalId);\n\n        // Delete updated dstEvents and srcEvents.\n        srcEvents.splice(s,1);\n        dstEvents.splice(d,1);\n        Utilities.sleep(RATE_LIMIT);\n      }\n\n    }\n  };\n\n  /*\n   * DELETE remaining dstEvents (those that do not exist in\n   * srcEvents).\n   *\n   */\n  for(var d in dstEvents){\n    deleteEvent_(dstEvents[d],dstCalId);\n    Utilities.sleep(RATE_LIMIT);\n  };\n\n  // INSERT remaining srcEvents (those do not exist in dstEvents).\n  for(var s in srcEvents){\n    srcEvents[s].summary = srcEvents[s].summary||'' \n+ \" [sync:\"+source+\"]\";\n    insertEvent_(srcEvents[s],dstCalId);\n    Utilities.sleep(RATE_LIMIT);\n  }\n};\n```", "```js\nfunction updateEvent_(evt,calId){\n  Calendar.Events.update( evt, calId, evt.id );\n};\n\nfunction deleteEvent_(evt,calId){\n  Calendar.Events.remove(calId, evt.id);\n};\n\nfunction insertEvent_(evt,calId){\n  try{\n    Calendar.Events.insert(evt, calId);\n  } catch(e) {\n    var err = e.message;\n    var newEvt = {\n      summary:evt.summary,\n      start:evt.start,\n      end:evt.end,\n      attachments:evt.attachments,\n      attendees:evt.attendees,\n      reminders:evt.reminders\n    };\n\n    if(err.search(/identifier already exists/gi) >= 0){\n      updateEvent_(evt,calId);\n    } else if(err.search(/Not Found/gi) >= 0){\n      insertEvent_(newEvt,calId);\n    } else if(err.search(/Invalid resource/gi) >= 0){\n      insertEvent_(newEvt,calId);\n    } else {\n      Logger.log(\"%s [%s]\\n\",evt,err);\n    };\n  }\n};\n```", "```js\nfunction createPdfs(){\n\n  // 0 based column numbers\n  const NAME = 0;\n  const TITLE = 1;\n  const COMPANY = 2;\n  const ADDRESS = 3;\n  const CITY = 4;\n  const ZIP_PIN = 5;\n\n  /* Get data from the sheet */\n  var sheet = SpreadsheetApp.getActiveSheet();\n  var data = sheet.getDataRange().getValues();\n  /*\n   * Alternatively you can get data * from an external CSV file or anything else.\n   * \n   * Example:\n   * var blob = DriveApp.getFileById(id).getBlob();\n   * var text = blob.getDataAsString();\n   * var data = JSON.parse(text);\n   *\n   */\n\n  // Remove headers\n  data.shift();\n\n  var folderName = \"Letters\";\n  var folder, folders = DriveApp.getFoldersByName(folderName);\n\n  // 'folders' is an iterator\n  if (folders.hasNext()){\n    // Get first folder if more than 1 with same name.\n    folder = folders.next();\n  } else {\n    // Create folder if it does not exist.\n    folder = DriveApp.createFolder(folderName);\n  }\n\n  for(var i in data){\n    /*\n     * Set as global variables so that we will be able to access\n     * in the Template.html code.\n     *\n     */\n    name = data[i][NAME];\n    title = data[i][TITLE];\n    company = data[i][COMPANY];\n    address = data[i][ADDRESS];\n    city = data[i][CITY];\n    zip_pin = data[i][ZIP_PIN];\n\n    var html = HtmlService.createTemplateFromFile (\"Template.html\").evaluate();\n\n    // Convert HTML to PDF\n    var pdf = html.getAs(\"application/pdf\") \n.setName(name + \".pdf\");\n\n    // Save in the 'My Drive | Letter' folder.\n    folder.createFile(pdf);\n  }\n\n}\n```", "```js\n<!DOCTYPE html>\n<html>\n  <body>\n    <p>To</p>\n    <p>\n      <?= name ?><br />\n      <?= title ?><br />\n      <?= company ?><br />\n      <?= address ?><br />\n      <?= city ?><br />\n      <?= zip_pin ?><br />\n    </p>\n    <p>&nbsp;</p>\n    <p>Dear <?= name ?>,</p>\n    <p>Your message goes here...</p>\n\n    <p>Regards,<br />[Your name]</p>\n  </body>\n</html>\n```", "```js\nfunction moveDriveFiles(){\n  var SheetSettings = SpreadsheetApp.getActiveSpreadsheet()\n        .getSheetByName(\"Settings\");\n\n  // Open the root folder.\n  var rootFolderName = \"Replace with root folder name.\";\n  var rootFolder, destFolder, folders = DriveApp\n        .getFoldersByName(rootFolderName);\n\n  // 'folders' is an iterator\n  if (folders.hasNext()) rootFolder = folders.next();\n  else {\n    // Show warning \"Folder does not exist.\"\n    Browser.msgBox(\n      \"The root folder \" + rootFolderName + \" not exist.\"\n    );\n\n    return;\n  }\n\n  var data = SheetSettings.getDataRange().getValues();\n  data.shift();// Remove header row\n\n  for(var i in data){\n    var fileName = data[i][0];\n    var folderName = data[i][1];\n\n    // Open or create the destination folder\n    folders = rootFolder.getFoldersByName(folderName);\n\n    if (folders.hasNext()) destFolder = folders.next();\n    else destFolder = rootFolder.createFolder(folderName);\n\n    /*\n     * Move matching files to the destination folder\n     * The filename should be enclosed in quotes.\n     *\n     */\n    var dest, file, files = rootFolder\n          .searchFiles('title contains \"' + fileName + '\"');\n    /*\n     * In the above line, the searchFiles method's argument should\n     * be a string (SQL-like query), so take care to escape special\n     * characters.\n     * Here is an alternative way to write the method:\n     * searchFiles(\"title contains \\\"\" + fileName + \"\\\"\")\n     *\n     */\n\n    /*\n     * We cannot move files directly,\n     * so copy file to the destination and remove in source.\n     *\n     */\n    while (files.hasNext()){\n      dest = destFolder;\n      file = files.next();\n\n      file.makeCopy(file, dest);\n      rootFolder.removeFile(file);\n    }\n  }\n}\n```", "```js\nfunction onOpen(){\n  SpreadsheetApp.getUi().createAddonMenu()\n  .addItem(\"File Search\", \"showSidebar\")\n  .addToUi();\n  showSidebar();\n}\n\n/**\n * Opens sidebar containing the user interface.\n *\n */\nfunction showSidebar() {\n  SpreadsheetApp.getUi().showSidebar(\n    HtmlService.createHtmlOutputFromFile('Sidebar')\n      .setTitle('Search Files in Drive')\n  );\n}\n```", "```js\n/**\n *  Lists files matching with arg 'txt', in the Settings sheet.\n *  \n */\nfunction listDriveFiles(txt){\n  // 'Files' sheet column heading.\n  var header = [\"File\", \"URL\"];\n\n  var output = [header];\n\n  var file, files = DriveApp.searchFiles ('title contains \"' + txt + '\"');\n\n  // 'files' is an iterator.\n  while (files.hasNext()){\n    file = files.next();\n    var name = file.getName();\n    var link = file.getUrl();\n\n    output.push([name,link]);\n  };\n\n  var sheet = SpreadsheetApp.getActiveSpreadsheet()\n        .getSheetByName(\"Files\");\n\n  sheet.clearContents();\n\n  /*\n   * output.length for number of rows and\n   * header.length for number of columns\n   *\n   */\n  sheet.getRange(1, 1, output.length, header.length)\n    .setValues(output);\n}\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <base target=\"_top\">\n    <link rel=\"stylesheet\" href=\"https://ssl.gstatic.com/docs/script /css/add-ons1.css\" />\n    <script src=\"img/jquery.min.js\">\n    </script>\n\n  </head>\n\n  <body>\n    <input type=\"text\" id=\"txt\" />\n    <button class=\"green\" id=\"btn\">Search</button>\n  </body>\n\n  <script>\n    // On document load, assign click handler to the search\n    // button.\n    $(function() {\n      $('#btn').click(listFiles);\n    });\n\n    function listFiles() {\n      this.disabled = true;\n      $('#error,#success').remove();\n      google.script.run\n        .withSuccessHandler(function(msg,elm){\n           elm.disabled = false;\n         })\n        .withFailureHandler(function(err,elm){\n           elm.disabled = false;\n           showError(err,elm);\n         })\n        .withUserObject(this)\n        .listDriveFiles($('#txt').val());\n    }\n\n    /**\n     * Inserts a div that contains success message after a given \n     * element.\n     *\n     * @param {string} msg - The message to display.\n     * @param {object} element - The element after which to \n     * display the message.\n     *\n     */\n    function showSuccess(msg,element) {\n      var div = $('<div id=\"success\"><font color=\"green\">' + msg + '</font></div>');\n      $(element).after(div);\n    }\n\n    /**\n     * Inserts a div that contains error message after a given \n     * element.\n     *\n     * @param {string} msg - The error message to display.\n     * @param {object} element - The element after which to \n     *  display the error.\n     *\n     */\n    function showError(msg, element) {\n      var div = $('<div id=\"error\" class=\"error\">' + msg + '</div>');\n      $(element).after(div);\n    }\n\n  </script>\n</html>\n```"]