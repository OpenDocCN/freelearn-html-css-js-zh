["```js\nconst { Selector, ClientFunction, Role } = require('testcafe');// ...const regularUser = Role('http://demo.redmine.org/', async (t) => {    await t.click('.login')        .typeText('#username', `test_user_testcafe_ poc${randomDigits1}@sharklasers.com`)        .typeText('#password', 'test_user_testcafe_poc')        .click('[name=\"login\"]');});\n```", "```js\ntest('Log out', async (t) => {    await t.useRole(regularUser)        .click('.logout')        .expect(Selector('#loggedas').exists).notOk()        .expect(Selector('.login').exists).ok();});\n```", "```js\n// ...fixture('Redmine entities creation tests')    .page('http://demo.redmine.org/')    .beforeEach(async (t) => {        await t.useRole(regularUser);    });// ...fixture('Redmine entities editing tests')    .page('http://demo.redmine.org/')    .beforeEach(async (t) => {        await t.useRole(regularUser);    });// ...fixture('Redmine entities deletion tests')    .page('http://demo.redmine.org/')    .beforeEach(async (t) => {        await t.useRole(regularUser);    });// ...\n```", "```js\n$ touch tests/redmine-page.js\n```", "```js\nlet redminePage = {    linkProjects: '#top-menu .projects'};module.exports = redminePage;\n```", "```js\nconst { Selector, ClientFunction, Role } = require('testcafe');const { stamp } = require('js-automation-tools');const redminePage = require('./redmine-page.js');// ...\n```", "```js\ntest('Create a new project', async (t) => {    await t.click(redminePage.linkProjects)        .click('.icon-add')        .typeText('#project_name', `test_project${randomDigits1}`)        .click('[value=\"Create\"]')        .expect(Selector('#flash_notice').innerText).eql('Successful creation.')        .expect(getPageUrl()).contains(`/projects/test_project${randomDigits1}/settings`);});\n```", "```js\nconst { stamp } = require('js-automation-tools');const randomDigits1 = stamp.getTimestamp();const randomDigits2 = stamp.resetTimestamp();const randomDigits3 = stamp.resetTimestamp();const randomDigits4 = stamp.resetTimestamp();const randomDigits5 = stamp.resetTimestamp();const randomDigits6 = stamp.resetTimestamp();const randomDigits7 = stamp.resetTimestamp();const randomDigits8 = stamp.resetTimestamp();const randomDigits9 = stamp.resetTimestamp();\n```", "```js\nlet redminePage = {    urlRedmine: 'http://demo.redmine.org/',    emailRegularUser: `test_user_testcafe_poc${randomDigits1}@sharklasers.com`,    passwordRegularUser: 'test_user_testcafe_poc',\n```", "```js\n    linkLogin: '.login',    inputUsername: '#username',    inputPassword: '#password',    buttonLogin: '[name=\"login\"]',    linkRegister: '.register',    inputUserLogin: '#user_login',    inputUserPassword: '#user_password',    inputUserPasswordConfirmation: '#user_password_confirmation',    inputUserFirstName: '#user_firstname',    inputUserLastName: '#user_lastname',    inputUserMail: '#user_mail',    buttonSubmit: '[value=\"Submit\"]',    blockNotification: '#flash_notice',    blockLoggedAs: '#loggedas',    linkLogout: '.logout',    linkProjects: '#top-menu .projects',    iconAdd: '.icon-add',    inputProjectName: '#project_name',    buttonCreate: '[value=\"Create\"]',    urlProjectSettings: `/projects/test_project${randomDigits1}/settings`,    link2TestProject: `[href*=\"/projects/test_project${randomDigits2}\"]`,// ...\n```", "```js\n    textFirstNameRegularUser: 'test_user',    textLastNameRegularUser: 'testcafe_poc',    textAccountActivated: 'Your account has been activated. You can now log in.',    text1ProjectName: `test_project${randomDigits1}`,    text2ProjectName: `test_project${randomDigits2}`,// ...};module.exports = redminePage;\n```", "```js\nconst { Selector, ClientFunction, Role } = require('testcafe');const redminePage = require('./redmine-page.js');const getPageUrl = ClientFunction(() => {    return window.location.href;});const regularUser = Role(redminePage.urlRedmine, async (t) => {    await t.click(redminePage.linkLogin)        .typeText(redminePage.inputUsername, redminePage.emailRegularUser)        .typeText(redminePage.inputPassword, redminePage.passwordRegularUser)        .click(redminePage.buttonLogin);});fixture('Redmine log in tests').page(redminePage.urlRedmine);\n```", "```js\ntest('Create a new user', async (t) => {    await t.click(redminePage.linkRegister)        .typeText(redminePage.inputUserLogin, redminePage.emailRegularUser)        .typeText(redminePage.inputUserPassword, redminePage.passwordRegularUser)        .typeText(redminePage.inputUserPasswordConfirmation, redminePage.passwordRegularUser)        .typeText(redminePage.inputUserFirstName, redminePage.textFirstNameRegularUser)        .typeText(redminePage.inputUserLastName, redminePage.textLastNameRegularUser)        .typeText(redminePage.inputUserMail, redminePage.emailRegularUser)        .click(redminePage.buttonSubmit)        .expect(Selector(redminePage.blockNotification).innerText).eql(redminePage.textAccountActivated);});\n```", "```js\ntest('Log in', async (t) => {    await t.click(redminePage.linkLogin)        .typeText(redminePage.inputUsername, redminePage.emailRegularUser)        .typeText(redminePage.inputPassword, redminePage.passwordRegularUser)        .click(redminePage.buttonLogin)        .expect(Selector(redminePage.blockLoggedAs).exists).ok();});test('Log out', async (t) => {    await t.useRole(regularUser)        .click(redminePage.linkLogout)        .expect(Selector(redminePage.blockLoggedAs).exists).notOk()        .expect(Selector(redminePage.linkLogin).exists).ok();});\n```", "```js\nfixture('Redmine entities creation tests')    .page(redminePage.urlRedmine)    .beforeEach(async (t) => {        await t.useRole(regularUser);    });\n```", "```js\ntest('Create a new project', async (t) => {    await t.click(redminePage.linkProjects)        .click(redminePage.iconAdd)        .typeText(redminePage.inputProjectName, redminePage.text1ProjectName)        .click(redminePage.buttonCreate)        .expect(Selector(redminePage.blockNotification).innerText).eql(redminePage.textSuccessfulCreation)        .expect(getPageUrl()).contains(redminePage.         urlProjectSettings);});test('Create a new issue', async (t) => {    await t.click(redminePage.linkProjects)        .click(redminePage.iconAdd)        .typeText(redminePage.inputProjectName, redminePage.text2ProjectName)        .click(redminePage.buttonCreate)        .click(redminePage.linkProjects)        .click(redminePage.link2TestProject)        .click(redminePage.linkNewIssue)        .typeText(redminePage.inputIssueSubject, redminePage.text2IssueName)        .typeText(redminePage.inputIssueDescription, redminePage.text2IssueDescription)        .click(redminePage.dropdownIssuePriority)        .click(Selector(redminePage.optionIssuePriority).withText(redminePage.textHigh))        .click(redminePage.buttonCreate)        .expect(Selector(redminePage.blockNotification).innerText).contains(redminePage.textCreated);});\n```", "```js\n// ...const createButtonSelector = (text) => {    return `[value=\"${text}\"]`;};const createLinkTestProjectSelector = (randomDigits) => {    return `[href*=\"/projects/test_project${randomDigits}\"]`;};const createProjectNameText = (randomDigits) => {    return `test_project${randomDigits}`;};const createIssueNameText = (randomDigits) => {    return `Test issue ${randomDigits}`;};const createIssueDescriptionText = (randomDigits) => {    return `Test issue description ${randomDigits}`;};const createIssueNameUpdatedText = (randomDigits) => {    return `Issue ${randomDigits} updated`;};redminePage.buttonLogin = createButtonSelector('Login »');redminePage.buttonSubmit = createButtonSelector('Submit');redminePage.buttonCreate = createButtonSelector('Create');redminePage.buttonAdd = createButtonSelector('Add');\n```", "```js\nredminePage.link2TestProject = createLinkTestProjectSelector(randomDigits2);redminePage.link3TestProject = createLinkTestProjectSelector(randomDigits3);redminePage.link4TestProject = createLinkTestProjectSelector(randomDigits8);redminePage.link5TestProject = createLinkTestProjectSelector(randomDigits4);redminePage.link6TestProject = createLinkTestProjectSelector(randomDigits5);redminePage.link7TestProject = createLinkTestProjectSelector(randomDigits6);redminePage.link8TestProject = createLinkTestProjectSelector(randomDigits7);redminePage.link9TestProject = createLinkTestProjectSelector(randomDigits9);\n```", "```js\nredminePage.text1ProjectName = createProjectNameText(randomDigits1);redminePage.text2ProjectName = createProjectNameText(randomDigits2);redminePage.text3ProjectName = createProjectNameText(randomDigits3);redminePage.text4ProjectName = createProjectNameText(randomDigits8);redminePage.text5ProjectName = createProjectNameText(randomDigits4);redminePage.text6ProjectName = createProjectNameText(randomDigits5);redminePage.text7ProjectName = createProjectNameText(randomDigits6);redminePage.text8ProjectName = createProjectNameText(randomDigits7);redminePage.text9ProjectName = createProjectNameText(randomDigits9);\n```", "```js\nredminePage.text2IssueName = createIssueNameText(randomDigits2);redminePage.text3IssueName = createIssueNameText(randomDigits3);redminePage.text5IssueName = createIssueNameText(randomDigits4);redminePage.text6IssueName = createIssueNameText(randomDigits5);redminePage.text7IssueName = createIssueNameText(randomDigits6);redminePage.text8IssueName = createIssueNameText(randomDigits7);redminePage.text2IssueDescription = createIssueDescriptionText(randomDigits2);redminePage.text3IssueDescription = createIssueDescriptionText(randomDigits3);redminePage.text5IssueDescription = createIssueDescriptionText(randomDigits4);redminePage.text6IssueDescription = createIssueDescriptionText(randomDigits5);redminePage.text7IssueDescription = createIssueDescriptionText(randomDigits6);redminePage.text8IssueDescription = createIssueDescriptionText(randomDigits7);redminePage.text5IssueNameUpdated = createIssueNameUpdatedText(randomDigits4);redminePage.text6IssueNameUpdated = createIssueNameUpdatedText(randomDigits5);module.exports = redminePage;\n```"]