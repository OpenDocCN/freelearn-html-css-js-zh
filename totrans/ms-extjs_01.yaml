- en: Chapter 1. Sencha Ext JS Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, there are many flavors for frontend frameworks and libraries in the
    market. There are frameworks you can use if you only want to manipulate the **Document
    Object Model** (**DOM**), frameworks used only for styling, frameworks for user-friendly
    components, frameworks used to design your project, and so on. Also there is Ext
    JS, a framework used to create **Rich Internet Applications** (**RIA**), but it
    has many other features than just pretty components.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we are going to learn how to develop an application from the beginning
    to the end with Ext JS 5, also covering some pieces of the backend required to
    make our application work. We will learn how to use Ext JS with hands-on examples
    covering some components, how they work, and how to use them in each chapter.
  prefs: []
  type: TYPE_NORMAL
- en: But first, you are going to learn what Ext JS is capable of if this is the first
    time you have come into contact with the framework.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Sencha Ext JS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Can we use Ext JS to manipulate DOM? Can we use it if we want pretty and user-friendly
    components (forms, grids, trees, and so on)? Can we use it if we need some nice
    charts? Can we use the **Model View Controller** (**MVC**) architecture to organize
    the application with Ext JS? What if we want to use a two-way data-binding between
    the Model and the View? Can we do that using Ext JS? And what if we do not like
    the colors of Ext JS components' look and feel? Can we easily change it too? And
    now a difficult one; can we make a build to obfuscate and optimize the CSS and
    JavaScript files of our application using Ext JS? Is Ext JS responsive? Can we
    use it in mobile devices?
  prefs: []
  type: TYPE_NORMAL
- en: Amazingly, the answer is positive to all the preceding questions! As we can
    see, Ext JS is a complete frontend framework. The mastermind company behind Ext
    JS is Sencha Inc. ([http://sencha.com](http://sencha.com)).
  prefs: []
  type: TYPE_NORMAL
- en: Sencha Ext JS also has a cousin called **Sencha Touch**. It also has the amazing
    features we just mentioned, but focuses on the mobile cross-platform world. We
    will talk very briefly about Ext JS and Sencha Touch in later chapters of this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture of Ext JS applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we get started, let's make sure we understand a few of the core concepts.
    Ext JS is a frontend framework based on JavaScript and HTML5\. This means Ext
    JS does not connect to the database directly. For storage, we can use one of the
    types of HTML5 storage, such as Web SQL or local storage, but these types of storage
    allow us to store only 5 MB of data, which is very little for a common application.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, we want to use MySQL, Oracle, MS Server or any other database. To be
    able to store information in a database, we need to use a server-side language,
    such as PHP, Java, C#, Ruby, Python, Node.js, and so on. Ext JS will communicate
    with the server-side language (or web services), and the server will connect to
    the database or any other storage (documents repository, for example).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram exemplifies the architecture of an application developed
    with Ext JS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Architecture of Ext JS applications](img/0457OT_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Ext JS overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already mentioned some Ext JS capabilities. Let's take a brief look
    at each one of them. But first, if you want to take a look at the official Sencha
    Ext JS webpage, visit [http://www.sencha.com/products/extjs/](http://www.sencha.com/products/extjs/).
  prefs: []
  type: TYPE_NORMAL
- en: Basic tutorial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before diving into this book, it is recommended that you read the contents
    of the following links. They contain the basic information that any developer
    needs to learn before starting with Ext JS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic tutorial and Ext JS overview: [http://www.sencha.com/products/extjs/up-and-running](http://www.sencha.com/products/extjs/up-and-running)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ext JS guides: [http://docs.sencha.com/extjs/5.0/](http://docs.sencha.com/extjs/5.0/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ext JS documents: [http://docs.sencha.com/extjs/5.0/apidocs/](http://docs.sencha.com/extjs/5.0/apidocs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ext JS examples: [http://dev.sencha.com/ext/5.0.1/examples/index.html](http://dev.sencha.com/ext/5.0.1/examples/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Forum (become part of the community): [http://www.sencha.com/forum/](http://www.sencha.com/forum/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ext JS uses an **object-oriented** (**OO**) approach. We declare classes with
    attributes known in Ext JS as configurations and methods (functions in JavaScript).
  prefs: []
  type: TYPE_NORMAL
- en: Ext JS also follows a naming convention. If you are familiar with OO programming,
    you are probably familiar with the naming conventions of Ext JS as well. For example,
    class names are alphanumeric, starting with an uppercase character, and and then
    the rest of the letters are in CamelCase. For example, if we want to create a
    class to represent the client details, we could name it `ClientDetails`. Method
    and attribute names start with a lowercase character and then the rest of the
    letters are in CamelCase. For example, `retrieveClientDetails()` is a good name
    for a method and `clientName` is a good name for an attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Ext JS is organized in packages as well. Packages are a way of organizing the
    code that has the same purpose. For example, in Ext JS, there is a package called
    `data` that handles everything related to data in the framework. There is a packaged
    named `grid` that contains all the code related to GridPanels.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about the class system, please read [http://docs.sencha.com/extjs/5.0/core_concepts/classes.html](http://docs.sencha.com/extjs/5.0/core_concepts/classes.html).
  prefs: []
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main reason some people consider using Ext JS is probably because of its
    rich and user-friendly components. Ext JS contains some of the most used components
    in web applications, such as forms, grids, and trees. We can also use charts that
    are touch-friendly (meaning they work on touchscreens as well) and the drawing
    package that uses all the advantages of **Scalable Vector Graphics** (**SVG**)
    and HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: You can checkout the official Sencha Ext JS examples page at [http://dev.sencha.com/extjs/5.0.0/examples/index.html](http://dev.sencha.com/extjs/5.0.0/examples/index.html)
    to have an idea of what we can do with the examples.
  prefs: []
  type: TYPE_NORMAL
- en: The component hierarchy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will notice that throughout this book, we will mention terms such as component,
    container, and widget. The following diagram exemplifies the component hierarchy
    in Ext JS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The component hierarchy](img/0457OT_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The **Component** class is the parent class for all Ext JS widgets. Below the
    **Component** class, we have the **Container** class. The **Container** class
    might contain other components. For example, let''s take a look at the following
    GridPanel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The component hierarchy](img/0457OT_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `Grid Panel` class extends from the `Panel` class, a very popular component
    in Ext JS. The `Panel` class supports headers, docked items (toolbars), and it
    contains a body space. Subclasses of the `Panel` class, such as `DataView`, `Tree`,
    `Grid`, and `Form`, are panels, but instead of the body, they have a specialized
    `View` class that is responsible for rendering the specific information. For example,
    the `View` class of a `Grid` panel is specialized in rendering the Grid Column;
    the `View` class of a `Tree` Panel is specialized in rendering hierarchical information,
    and the `View` class of a `Form` panel (called BasicForm) is specialized in rendering
    form fields.
  prefs: []
  type: TYPE_NORMAL
- en: GridPanel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The grid component is one of the most used components in web applications. It
    is used to display tabular data.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a grid, the developer needs to declare at least two configurations:
    `columns` and `Store`. The `Store` class organizes a collection of data in Ext
    JS, and it is responsible for feeding the grid with the information to be displayed.
    We will explore it when we discuss the data package.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The grid component can be used as a plain and simple data grid, with only the
    information records being displayed. Or, if we have a large amount of data, we
    can use its paging capabilities, or we can also use a Big Data Grid if we really
    have a large amount of data. There are also other features such as grouped header
    grid (also known as Pivot Grid); we can also have a grid with locked columns or
    even with widgets, such as chats, as demonstrated by the previous screenshot.
    Among other features, we can also sort and filter the information inside the grid
    and use some of its plugins to accomplish tasks such as expanding the rows to
    display more information without popups, using checkboxes to select rows and automatic
    numbered rows as well. And there is more: the grid component also supports editing
    by opening a small pop-up row so that you can edit the information directly in
    the grid. The grid also supports cell editing, which is similar to what we can
    do in MS Excel—edit the information by double-clicking on a cell.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, please take a look at [http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.grid.Panel](http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.grid.Panel)
    and [http://docs.sencha.com/extjs/5.0/components/grids/grids.html](http://docs.sencha.com/extjs/5.0/components/grids/grids.html).
  prefs: []
  type: TYPE_NORMAL
- en: TreePanel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Trees display hierarchical data, such as a file directory. A tree's data comes
    from a TreeStore or is predefined in the `root` configuration. The tree also supports
    sorting and filtering, select a row using checkboxes, and we can also mix a tree
    with a grid and use the TreeGrid component.
  prefs: []
  type: TYPE_NORMAL
- en: It also supports plugins such as drag and drop between trees.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, please take a look at [http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.tree.Panel](http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.tree.Panel)
    and [http://docs.sencha.com/extjs/5.0/components/trees.html](http://docs.sencha.com/extjs/5.0/components/trees.html).
  prefs: []
  type: TYPE_NORMAL
- en: Forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we have the form component. We can implement powerful forms using text,
    area, and number fields. We can also use the date/month picker, checkboxes, radio
    buttons, comboboxes, and even file upload. All fields have the basic native validation
    support (with error messages to the user), such as mandatory fields and minimum
    and maximum value or length, but we can easily customize and create custom validation
    (IP address for example).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, please take a look at [http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.form.Panel](http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.form.Panel)
    and [http://docs.sencha.com/extjs/5.0/components/forms.html](http://docs.sencha.com/extjs/5.0/components/forms.html).
  prefs: []
  type: TYPE_NORMAL
- en: Other components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We also have the charts. We can build column, bar, line, area, scatter, pie,
    radial, gauge, and even financial charts. We can have basic, stacked, multi-axis,
    and 3D charts as well. The charts are also fed by a Store.
  prefs: []
  type: TYPE_NORMAL
- en: And of course, there are basic components that will help our application look
    even better, such as menus, tabs, panels, windows, alerts, toolbars, and so on.
    The components have **Web Accessibility Initiative – Accessible Rich Internet
    Applications** (**WAI-ARIA)** support and also support right-to-left languages.
  prefs: []
  type: TYPE_NORMAL
- en: Seems nice, right? We will cover most of the components and its capabilities
    throughout the examples of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ext JS supports different possibilities. It also has a great layout manager
    (only when we create an Ext JS application using its base component, the Viewport.
    For components that are used in a standalone form (rendered in a `<div>` tag,
    the layout manager does not work when you decrease the size of the browser window).
  prefs: []
  type: TYPE_NORMAL
- en: Some of the layouts supported are Absolute layout (where we need to use the
    absolute *x* and *y* positions of the component in the screen or within the component);
    Accordion layout, Border layout, Card layout, Center layout, Column layout, Fit
    layout, Hbox and VBox layouts, and Table layouts.
  prefs: []
  type: TYPE_NORMAL
- en: The layouts that are most used in applications are Border, Card, Fit, and HBox
    and VBox. We will cover different layouts through the examples of this book as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, please take a look at [http://dev.sencha.com/ext/5.0.1/examples/kitchensink/#layouts](http://dev.sencha.com/ext/5.0.1/examples/kitchensink/#layouts)
    and the `layout.container` package at [http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.layout.container.Absolute](http://docs.sencha.com/extjs/5.0/apidocs/#!/api/Ext.layout.container.Absolute).
  prefs: []
  type: TYPE_NORMAL
- en: Data package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `data` package is one of the most important packages from the Ext JS SDK.
    Ext JS components such as grid, Tree, and even the Form are data-driven.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side languages usually support data well. In Java, PHP, **C#**, and other
    languages, we can create entities known as **Plain Old Java Object** (**POJOs**),
    **Persistent Domain Objects** (**PDOs**), and **Value Objects** (**VOs**), and
    other names that we usually give to these entities. Ext JS supports data, so we
    represent entities in the frontend as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are basically three major pieces:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: This represents the entity. It can represent a class we have on
    the server side or a table from the database. Model supports fields, validations,
    associations (**OneToOne**, **OneToMany**, **ManyToMany**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Store**: This represents a collection of models. It also supports groups,
    filtering, and sorting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Proxy**: This represents the way we are going to connect to the server (or
    a local storage). It can be Ajax, REST, JSONP, Memory, or HTML5 LocalStorage.
    Inside the proxy, we can define `Reader` and `Writer`. The `Reader` attribute
    is responsible for decoding the data we receive from the server (we can define
    it if it is JSON or XML, and we can also define its format). The `Writer` attribute
    is responsible for encoding the data to be sent to the server; it can be JSON
    or XML, and we can also define its format. The Proxy can be placed inside a Model
    or a Store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information please read [http://docs.sencha.com/extjs/5.0/core_concepts/data_package.html](http://docs.sencha.com/extjs/5.0/core_concepts/data_package.html).
  prefs: []
  type: TYPE_NORMAL
- en: The MVC and MVVM architectures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While working with Ext JS, we can choose between two architectures for our
    frontend code: **Model** **View** **Controller** (**MVC**) and **Model** **View**
    **ViewModel** (**MVVM**). There is also a third option, which is a **hybrid**
    between **MVC** and **MVVM**.'
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, we are going to learn more about MVC, MVVM, and also the
    hybrid approach.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information please read [http://docs.sencha.com/extjs/5.0/application_architecture/application_architecture.html](http://docs.sencha.com/extjs/5.0/application_architecture/application_architecture.html).
  prefs: []
  type: TYPE_NORMAL
- en: Look and feel of Ext JS applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also customize the theme of Ext JS applications. The theming is based
    on Sass and Compass. We will dive into themes in the last chapter of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information please read [http://docs.sencha.com/extjs/5.0/core_concepts/theming.html](http://docs.sencha.com/extjs/5.0/core_concepts/theming.html).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ext JS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at how to install Ext JS locally. This step is required because
    we will need to have the Ext JS SDK in our computer prior to creating the application
    with **Sencha Cmd**.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites for Ext JS and Sencha Cmd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before downloading Ext JS and Sencha Cmd, we need to set up our computer to
    be ready. The following is a list of software needed so that we can create an
    Ext JS application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ruby 1.8 or 1.9**: The current version of Ruby is 2.x at the time of writing
    this. To be able to create an Ext JS application, we need to have Ruby 1.8 or
    1.9 installed. Ruby is required because the theming engine used by Ext JS is based
    on Sass and Compass, which are Ruby gems. To download and install Ruby, please
    follow the instructions at [https://www.ruby-lang.org/en/installation/](https://www.ruby-lang.org/en/installation/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Sass and Compass**: These are not CSS frameworks. Sass is a new way of writing
    CSS. It is possible to use variables and define functions and mixins. It is an
    alternative to **Less** (maybe you have worked with Less or heard about it—Sass
    is very similar). After downloading and installing Ruby, please install Sass as
    well. The instructions can be found at [http://sass-lang.com/install](http://sass-lang.com/install)
    (follow the command-line instructions). Compass is a Sass framework and is also
    required. Please install it as well from [http://compass-style.org/install/](http://compass-style.org/install/).
    Sass and Compass are the heart of the Ext JS theming engine. All custom CSS we
    are going to create for our application will be compiled by Sass/Compass as well.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Java JDK**: If you are a Java developer, you probably have the Java JDK installed
    already. If not, please download and execute the installer at [http://www.oracle.com/technetwork/articles/javase/index-jsp-138363.html](http://www.oracle.com/technetwork/articles/javase/index-jsp-138363.html).
    After installing the Java JDK, we also need to configure the `JAVA_HOME` environment
    variable. Instructions can be found at [http://goo.gl/JFtKHF](http://goo.gl/JFtKHF).
    The Java JDK is required because of ANT, our next step.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Apache ANT**: The Sencha Cmd engine to create the application and build it
    is based on ANT, a Java library. We need to download ANT from [http://ant.apache.org/bindownload.cgi](http://ant.apache.org/bindownload.cgi),
    unzip it to a directory of our choice, and set the `ANT_HOME` environment variable
    ([http://ant.apache.org/manual/install.html](http://ant.apache.org/manual/install.html)).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can check whether we have the correct environment by executing the following
    commands in a terminal application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Prerequisites for Ext JS and Sencha Cmd](img/0457OT_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that the Ruby version installed is 2.x, but as long as you have a 1.8 or
    1.9 compatible version in your classpath, you should be OK.
  prefs: []
  type: TYPE_NORMAL
- en: The last step is a web server. The simplest one that we can use to execute the
    examples of this book is Apache Xampp. Download and follow the installation instructions
    at [https://www.apachefriends.org](https://www.apachefriends.org).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the software required to set up the environment mentioned in this book is
    available for Linux, Windows, and Mac OS.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading Ext JS and Sencha Cmd
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have our environment configured, we can download Ext JS. Ext JS
    has some different license flavors: commercial and open source. For this book,
    we are going to use the open source one. You can download the open source version
    at [http://www.sencha.com/products/extjs/details](http://www.sencha.com/products/extjs/details).
    Scroll until the end of the page and select **OPEN SOURCE GPL LICENSING**, as
    demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading Ext JS and Sencha Cmd](img/0457OT_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The latest version of Ext JS at the time of writing this book is 5.1.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to download and install Sencha Cmd from [http://www.sencha.com/products/sencha-cmd/download](http://www.sencha.com/products/sencha-cmd/download).
    Sencha Cmd is responsible for creating the application and making, building, and
    compiling Sass and Compass to generate the application's CSS. After the installation
    of Sencha Cmd, the `sencha` command will be available from the terminal application
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'After downloading the Ext JS SDK, unzip it inside the Apache Xampp `htdocs`
    folder. Once we start the Apache server, we will be able to execute the Ext JS
    examples from our local environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading Ext JS and Sencha Cmd](img/0457OT_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Offline documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While developing with Ext JS, we will consult the documentation a lot. Whenever
    we mention the name of an Ext JS component in this book, it is recommended that
    you go to the documentation and take a look at it. The Ext JS documentation is
    available at [http://docs.sencha.com/extjs/5.0/](http://docs.sencha.com/extjs/5.0/).
    It contains guides (it is also highly recommended that you spend some time reading
    the guides before diving into this book since the guides provide basic knowledge
    about the framework), and links to blog posts and also to the documentation itself.
    As we will consult it a lot, we recommend installing the documentation locally
    as well. To do so, go to [http://docs.sencha.com/](http://docs.sencha.com/), open
    the **Sencha Guides** menu, and select the **offline docs** link as demonstrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Offline documentation](img/0457OT_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Unzip the docs inside the Xampp `htdocs` folder as well and access your `localhost`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Offline documentation](img/0457OT_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A video tutorial with step-by-step instructions to set up the environment for
    Ext JS is available at [http://youtu.be/B43bEnFBRRc](http://youtu.be/B43bEnFBRRc).
  prefs: []
  type: TYPE_NORMAL
- en: IDE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use any IDE or editor of your preference to develop with Ext JS. There
    are a few editors that are very popular: Sublime Text, Atom, Eclipse (if you are
    a Java developer), Netbeans, and Visual Studio (if you are a C# developer), Notepad++,
    and WebStorm, among others.'
  prefs: []
  type: TYPE_NORMAL
- en: If you are looking for the autocompleting feature, you can use the Sencha Eclipse
    Plugin that is part of Sencha Complete (paid) at [http://www.sencha.com/products/complete/](http://www.sencha.com/products/complete/))
    or you can use WebStorm (also paid) at [https://www.jetbrains.com/webstorm/](https://www.jetbrains.com/webstorm/)).
  prefs: []
  type: TYPE_NORMAL
- en: There is also Sencha Architect (which also has the autocompleting feature).
    It is a **what you see is what you get** (**WYSIWYG**) editor and is a great Sencha
    tool that can be used with the IDE of your preference (to develop the server-side
    code of the application).
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to use the editor or IDE you are most comfortable with to develop
    the source code of this book!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we quickly overviewed Ext JS and provided some references that
    are useful to read to gather the basic knowledge required to understand the terms
    and components we will be using in this book.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will present the application we are going to work with
    throughout this book, and we are also going to create it using Sencha Cmd.
  prefs: []
  type: TYPE_NORMAL
