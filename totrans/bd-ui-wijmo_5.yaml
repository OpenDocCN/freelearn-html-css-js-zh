- en: Chapter 5. Advanced Widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wijmo includes many advanced widgets commonly used in web development. These
    components of applications are often implemented with libraries or plugins. In
    this chapter, we cover the tooltip, upload, video, and editor widgets. The main
    advantage of using these Wijmo widgets over other libraries for the developer
    is its consistent API. For the user, the interface components look more consistent.
  prefs: []
  type: TYPE_NORMAL
- en: Using the tooltip widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Browsers, by default, display a textbox or balloon when hovering over image
    elements that have title attributes. To make these text balloons user friendly,
    Wijmo''s tooltip widget uses JavaScript and CSS to enhance them. By default, Wijmo
    shows the text in the `title` attribute of the tooltip elements. Consider a simple
    example with an input element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Calling `$("input[title]").wijtooltip()` generates a tooltip that shows when
    hovering over the element. In addition, the jQuery selector only applies the tooltip
    on those input elements that have titles. In this section, we explore how to position
    the tooltip, load AJAX content within it, and change its style.
  prefs: []
  type: TYPE_NORMAL
- en: Positioning the tooltip widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wijmo uses jQuery UI''s position method which takes four main parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Field | Values | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `my` | `left`/`right`/`center`/`top`/`bottom`/`center` | The position on
    the element being moved |'
  prefs: []
  type: TYPE_TB
- en: '| `at` | `left`/`right`/`center`/`top`/`bottom`/`center` | The position on
    the target element to be aligned against |'
  prefs: []
  type: TYPE_TB
- en: '| `of` | `selector` | The target element to be positioned against |'
  prefs: []
  type: TYPE_TB
- en: '| `offset` | `Integer` | The x y offset that specifies how much to move horizontally
    and vertically |'
  prefs: []
  type: TYPE_TB
- en: 'The syntax reads almost like a sentence. Suppose we wanted to position a box
    with ID `move-it` so that its top left is at the right bottom of the target; then
    we could use the `position` method in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot depicts the elements in the preceding example as boxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Positioning the tooltip widget](img/6067OT_5_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: jQuery UI has an example page where you can play around with the different position
    settings at [http://jqueryui.com/position/](http://jqueryui.com/position/).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the context of the tooltip, the `my` parameter specifies the position of
    the tooltip arrow. The following diagram shows each of the configurations for
    the `my` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Positioning the tooltip widget](img/6067OT_5_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `at` parameter for the tooltip works exactly the same way as with jQuery
    UI's position method.
  prefs: []
  type: TYPE_NORMAL
- en: Loading AJAX content in the tooltip widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A commonly used pattern for tooltips is loading external content. Wijmo tooltips
    have the `ajaxCallback` option for inserting content into the tooltip. Our example
    sends a request to the server and displays its response. We set the `data-id`
    attribute on the links to be the indexes of the content we want. For instance,
    this link refers to the first element in a table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Since you''re sending the request to the server, `data-id` would be the primary
    key of the row in the table or model you''re querying. The following code snippet
    demonstrates how to retrieve AJAX content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the `ajaxCallback` function, the ID associated with each link is retrieved
    with `$tooltip.attr("data-id")`, which returns the value of the `data-id` attribute.
    This ID is then used to retrieve the tooltip contents, which is set with `$tooltip.wijtooltip("option",
    "content", "text")`.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the tooltip widget
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, Wijmo styles tooltips using the theme you selected, but we want
    tooltips to stand out from the rest of the user interface. By applying a few CSS
    classes, we can quickly change a Rocket-themed tooltip to a customized tooltip
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the tooltip widget](img/6067OT_5_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When styling the tooltip, the idea is to set the border, background, and text
    colors without overriding the default theme classes such as `.ui-container`. We
    do this by setting the colors on the tooltip classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `.wijmo-wijtooltip-pointer-inner` class is applied to the tail in the speech
    bubble, so we set its background color to be the same as the `.wijmo-wijtooltip-container`
    class. The text color is also set within the `.wijmo-wijtooltip-container` class.
    Finally, we set the border colors on the tooltip and the pointer.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make it easier to adjust the colors, I set the tooltip to show automatically
    with the `closeBehavior` option set to `sticky`. Making the tooltip sticky makes
    it stay on the page after moving the mouse outside of the `target` element. In
    this case, it''s the label. The complete example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using the upload widget with the ProgressBar element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Wijmo `upload` widget can upload multiple files at once, and supports a
    progress bar. File uploads use `HttpHandler` to reduce the load on the server.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the upload widget with the ProgressBar element](img/6067OT_5_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When initialized, the upload widget only has the **Upload files** button as
    shown in the preceding screenshot. Once a file is selected, the upload file user
    interface has the **Upload files** button to open the file browser, a **Cancel
    All** button, and an **Upload All** button. Each file that is selected has an
    individual upload or cancel button next to it. While uploading, the upload progress
    is shown in a progress bar element.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at an example of replacing file inputs in web forms, where the
    file uploads are submitted with the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: With `supportXhr = $("#upload").wijupload("supportXhr")`, we check whether the
    upload widget can be hooked up with AJAX to display file upload progress. Although
    hidden, the progress bar is initialized when AJAX hooks are available.
  prefs: []
  type: TYPE_NORMAL
- en: The `upload` widget is initialized with three event handlers to enable the progress
    bar. First, `totalUpload` is the event that gets fired when the **Upload All**
    button is clicked. In this example, we show the progress bar. Since `<div id="progressbar"></div>`
    is an empty element, calling the jQuery `show` method does not render anything
    visible. Next, the `totalComplete` event is triggered when all the files have
    been uploaded. We fadeout the progress bar and set its value to zero for its next
    use. Finally, as the file is getting uploaded, the function defined for `totalProgress`
    receives the upload progress and the number of bytes uploaded to display in the
    progress bar. The `action` option for the upload widget is the URL where the form
    is submitted on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Applying Wijmo themes to HTML5 videos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Wijmo video widget works with the HTML5 video tag and adds controls using
    jQuery UI theming. The video player has the common play/stop, volume, and full-screen
    controls. To initialize the widget, just call the `wijvideo` method on a video
    element. To support all browsers, the video element needs to have the video encoded
    in at least two formats. The browser support for each format is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Browser | MP4 | WebM | Ogg |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Internet Explorer 9+ | YES | NO | NO |'
  prefs: []
  type: TYPE_TB
- en: '| Chrome 6+ | YES | YES | YES |'
  prefs: []
  type: TYPE_TB
- en: '| Firefox 3.6+ | NO | YES | YES |'
  prefs: []
  type: TYPE_TB
- en: '| Safari 5+ | YES | NO | NO |'
  prefs: []
  type: TYPE_TB
- en: '| Opera 10.6+ | NO | YES | YES |'
  prefs: []
  type: TYPE_TB
- en: 'For older browsers that don''t support HTML5 such as IE8, it is recommended
    to not use the video widget. However, you can insert text content to display a
    message in place of the video. The full markup looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you change the width or height, the video automatically resizes to fit the
    area. To initialize the video widget, we would call `$("video").wijvideo()`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the editor widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Wijmo editor allows non-technical users to manage and write HTML content.
    Unlike other HTML editing tools for the browser on the market, Wijmo sports a
    Microsoft Office 2007 style Ribbon UI, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the editor widget](img/6067OT_5_05.jpg)![Using the editor widget](img/6067OT_5_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Ribbon UI automatically resizes to fit within the textarea dimensions that
    create the widget, as shown in the preceding screenshot. It supports three views
    for editing HTML. For non-technical users, there is a **WYSIWYG** view that acts
    like Microsoft Word. The formatting and layout is exactly what you see in the
    editor. In addition, there is a source code view for those who know HTML. Furthermore,
    the **split** view is a combination of these two so that the HTML and its preview
    are both visible. To initialize an editor, just call the `wijeditor` method on
    a textarea; for example, `$("#wijeditor").wijeditor({ mode: "ribbon"})`.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the editor widget with BBCode for forums
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For forum and blog use, the editor supports BBCode, namely tags such as `[url=http://example.com]Example[/url]`.
    If BBCode is used, the source view is in the BBCode format. The editor must be
    initialized in the `bbcode` mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling `$("#wijeditor").wijeditor({ mode: "bbcode"})` generates an editor
    with BBCode controls.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the tooltip, upload, video, and editor widgets.
    These widgets are commonly used in web applications. We took a look at customizing
    the tooltip styling so that it stands out from the rest of the UI and loading
    AJAX content in it. We've seen how to upload multiple files with Wijmo while showing
    a progress bar, a video widget, and the Ribbon style editor. In the next chapter,
    you will learn how to combine Wijmo with Knockout to build interactive user interfaces.
  prefs: []
  type: TYPE_NORMAL
