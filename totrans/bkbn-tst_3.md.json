["```js\n    assert.isString(\"foo\");\n    assert.strictEqual(\"foo\", \"foo\");\n    ```", "```js\ndescribe(\"BDD example\", function () {\n  // Runs once before all tests start.\n  before(function () {\n    this.hello = function () {\n      return \"Hello world!\";\n    };\n  });\n\n  // Runs once when all tests finish.\n  after(function () {\n    this.hello = null;\n  });\n\n  it(\"should return expected string result\", function () {\n    expect(this.hello()).to\n      .be.a(\"string\").and\n      .equal(\"Hello world!\");\n  });\n});\n```", "```js\n<script>\n  var expect = chai.expect;\n  mocha.setup(\"bdd\");\n\n  window.onload = function () {\n    mocha.run();\n  };\n</script>\n\n<script src=\"img/bdd.spec.js\"></script>\n```", "```js\nsuite(\"TDD example\", function () {\n  // Runs once before all tests start.\n  suiteSetup(function () {\n    this.hello = function () {\n      return \"Hello world!\";\n    };\n  });\n\n  // Runs once when all tests finish.\n  suiteTeardown(function () {\n    this.hello = null;\n  });\n\n  test(\"expected string result\", function () {\n    assert.isString(this.hello());\n    assert.strictEqual(this.hello(), \"Hello world!\");\n  });\n});\n```", "```js\n<script>\n  var assert = chai.assert;\n  mocha.setup(\"tdd\");\n\n  window.onload = function () {\n    mocha.run();\n  };\n</script>\n\n<script src=\"img/tdd.js\"></script>\n```", "```js\nexpect(\"foo\").a(\"string\");\nexpect(\"foo\").to.be.a(\"string\");\nexpect(\"foo\").to.have.been.a(\"string\");\nexpect(\"foo\").that.is.a(\"string\");\n\n// Chains can be repeated (or be nonsensical).\nexpect(\"foo\").to.to.to.to.a(\"string\");\nexpect(\"foo\").and.with.at.of.a(\"string\");\n```", "```js\n    expect(\"foo\").to.not.equal(\"bar\");\n\n    // Let's get literary.\n    expect(\"Hamlet\").to.be.not.to.be.an(\"object\");\n    ```", "```js\nexpect(\"foo\")\n  .to.be.a(\"string\").and\n  .to.equal(\"foo\").and\n  .to.have.length(3).and\n  .to.match(/f[o]{2}/);\n```", "```js\n    expect(\"foo\").to.be.ok;\n    expect(true).to.be.ok;\n    expect(false).to.not.be.ok;\n    ```", "```js\n    expect(false).to.exist;\n    expect(null).to.not.exist;\n    expect(undefined).to.not.exist;\n    ```", "```js\n    expect(\"foo\").to.not.be.true;\n    expect(true).to.be.true;\n    ```", "```js\n    expect(\"\").to.not.be.false;\n    expect(false).to.be.false;\n    ```", "```js\n    expect(null).to.be.null;\n    ```", "```js\n    expect(undefined).to.be.undefined;\n    expect(null).to.not.be.undefined;\n    ```", "```js\n    expect(arguments).to.be.arguments;\n    expect([]).to.not.be.arguments;\n    ```", "```js\n    expect(\"foo\").to.equal(\"foo\");\n    expect({foo: \"bar\"}).to.not.equal({foo: \"bar\"});\n    ```", "```js\n    expect(\"foo\").to.eql(\"foo\");\n    expect({foo: \"bar\"}).to.eql({foo: \"bar\"});\n    ```", "```js\n    expect(1).to.not.be.above(1);\n    expect(5).to.be.above(2);\n    ```", "```js\n    expect(1).to.be.at.least(1);\n    expect(5).to.be.at.least(2);\n    ```", "```js\n    expect(1).to.not.be.below(1);\n    expect(1).to.be.below(2);\n    ```", "```js\n    expect(1).to.be.at.most(1);\n    expect(1).to.be.at.most(2);\n    ```", "```js\n    expect(1).to.be.within(0, 2);\n    ```", "```js\n    expect(1.2).to.be.closeTo(1, 0.2);\n    expect(1.2).to.not.be.closeTo(1, 0.0);\n    ```", "```js\n    expect(\"foo\").to.match(/^f[o]+/);\n    ```", "```js\n    expect(\"foo bar\").to.have.string(\"foo\");\n    ```", "```js\n    expect(42).to.satisfy(function (value) {\n      return value === 6 * 7;\n    });\n    ```", "```js\n    expect(\"foo\").is.a(\"string\");\n    expect(\"foo\").is.not.a(\"number\");\n    expect({foo: \"bar\"}).is.an(\"object\");\n    ```", "```js\n    var Foo = function () {},\n      Bar = function () {};\n\n    expect(new Foo()).is.an.instanceof(Foo);\n    expect(new Bar()).is.not.an.instanceof(Foo);\n    ```", "```js\n    expect({foo: \"bar\"}).to.have.property(\"foo\", \"bar\");\n\n    // Deep checking - object, and array.\n    expect({foo: {bar: \"baz\"}})\n      .to.have.deep.property(\"foo.bar\", \"baz\");\n    expect({foo: [\"bar\", \"baz\"]})\n      .to.have.deep.property(\"foo[1]\", \"baz\");\n    ```", "```js\n    expect({foo: \"bar\"}).to.have.ownProperty(\"foo\");\n    ```", "```js\n    expect([\"bar\", \"baz\"]).to.have.length(2);\n    expect(\"foo\").to.have.length(3);\n    ```", "```js\n    expect([\"bar\", \"baz\"]).to.contain(\"bar\");\n    expect(\"foo\").to.contain(\"f\");\n    ```", "```js\n    // Exact matching of all keys.\n    expect({foo: 1, bar: 2}).to.have.keys([\"foo\", \"bar\"]);\n\n    // Exclusion of any keys.\n    expect({foo: 1, bar: 2}).to.not.have.keys([\"baz\"]);\n\n    // Inclusion of some keys.\n    expect({foo: 1, bar: 2}).to.include.keys([\"foo\"]);\n    expect({foo: 1, bar: 2}).to.contain.keys([\"bar\"]);\n    ```", "```js\nvar bad = function () {\n  throw new Error(\"My error message\");\n};\n\nexpect(bad)\n  .to.throw(Error).and\n  .to.throw(/message/).and\n  .not.to.throw(\"no message match\");\n```", "```js\nmocha.setup(\"bdd\");\n\nwindow.onload = function () {\n  mocha.run();\n};\n```", "```js\nmocha.setup({\n  ui: \"bdd\",          // BDD UI.\n  reporter: \"html\",   // HTML reporter.\n  timeout: 4000,      // 4s test timeout.\n  slow: 1000          // A \"slow\" test is > 1s\n});\n```", "```js\nApp.Config = _.extend(App.Config, {\n  // Local Storage Name\n  storeName: \"notes\"\n});\n```", "```js\nApp.Collections.Notes = Backbone.Collection.extend({\n  model: App.Models.Note,\n\n  // Sets the localStorage key for data storage.\n  localStorage: new Backbone.LocalStorage(App.Config.storeName)\n});\n```", "```js\n<script src=\"img/namespace.js\"></script>\n<script src=\"img/config.js\"></script>\n<script>\n  // Test overrides (before any app components).\n  App.Config = _.extend(App.Config, {\n    storeName: \"notes-test\" // localStorage for tests.\n  });\n</script>\n<script src=\"img/note.js\"></script>\n<script src=\"img/notes.js\"></script>\n```", "```js\ndescribe(\"App.Collections.Notes\", function () {\n\n  describe(\"creation\", function () {\n    // Tests.\n  });\n\n  describe(\"modification\", function () {\n    // Tests.\n  });\n});\n```", "```js\ndescribe(\"App.Collections.Notes\", function () {\n\n  before(function () {\n    // Create a reference for all internal suites/specs.\n    this.notes = new App.Collections.Notes();\n\n    // Use internal method to clear out existing data.\n    this.notes.localStorage._clear();\n  });\n\n  after(function () {\n    // Remove the reference.\n    this.notes = null;\n  });\n\n  describe(\"creation\", function () {\n    // Tests.\n  });\n\n  describe(\"modification\", function () {\n\n    beforeEach(function () {\n      // Load a pre-existing note.\n      this.notes.create({\n        title: \"Test note #1\",\n        text: \"A pre-existing note from beforeEach.\"\n      });\n    });\n\n    afterEach(function () {\n      // Wipe internal data and reset collection.\n      this.notes.localStorage._clear();\n      this.notes.reset();\n    });\n\n    // Tests.\n\n  });\n});\n```", "```js\nit(description, callback);\n```", "```js\nit(\"has default values\", function () {\n  expect(this.notes).to.be.ok;\n  expect(this.notes).to.have.length(0);\n});\n```", "```js\nit(\"should be empty on fetch\", function (done) {\n  var notes = new App.Collections.Notes();\n\n  // \"reset\" event fires on successful fetch().\n  notes.once(\"reset\", function () {\n    expect(notes).to.have.length(0);\n\n    // Async code has completed. Signal test is done.\n    done();\n  });\n\n  notes.fetch({ reset: true });\n});\n```", "```js\ndescribe(\"App.Collections.Notes\", function () {\n\n  describe(\"creation\", function () {\n    it(\"has default values\");\n    it(\"should be empty on fetch\");\n  });\n\n  describe(\"modification\", function () {\n    it(\"has a single note\");\n    it(\"can delete a note\");\n    it(\"can create a second note\");\n  });\n});\n```", "```js\ndescribe(\"App.Collections.Notes\", function () {\n\n  before(function () {\n    // Create a reference for all internal suites/specs.\n    this.notes = new App.Collections.Notes();\n\n    // Use internal method to clear out existing data.\n    this.notes.localStorage._clear();\n  });\n\n  after(function () {\n    // Remove the reference.\n    this.notes = null;\n  });\n\n  describe(\"creation\", function () {\n\n    it(\"has default values\", function () {\n      expect(this.notes).to.be.ok;\n      expect(this.notes).to.have.length(0);\n    });\n\n    it(\"should be empty on fetch\", function (done) {\n      // ... implemented in previous example ...\n    });\n\n  });\n\n  describe(\"modification\", function () {\n\n    beforeEach(function () {\n      // Load a pre-existing note.\n      this.notes.create({\n        title: \"Test note #1\",\n        text: \"A pre-existing note from beforeEach.\"\n      });\n    });\n\n    afterEach(function () {\n      // Wipe internal data and reset collection.\n      this.notes.localStorage._clear();\n      this.notes.reset();\n    });\n\n    it(\"has a single note\", function (done) {\n      var notes = this.notes, note;\n\n      // After fetch.\n      notes.once(\"reset\", function () {\n        expect(notes).to.have.length(1);\n\n        // Check model attributes.\n        note = notes.at(0);\n        expect(note).to.be.ok;\n        expect(note.get(\"title\")).to.contain(\"#1\");\n        expect(note.get(\"text\")).to.contain(\"pre-existing\");\n\n        done();\n      });\n\n      notes.fetch({ reset: true });\n    });\n\n    it(\"can delete a note\", function (done) {\n      var notes = this.notes, note;\n\n      // After shift.\n      notes.once(\"remove\", function () {\n        expect(notes).to.have.length(0);\n        done();\n      });\n\n      // Remove and return first model.\n      note = notes.shift();\n      expect(note).to.be.ok;\n    });\n\n    it(\"can create a second note\", function (done) {\n      // ... omitted ...\n    });\n\n  });\n});\n```", "```js\n    My Title\n    ```", "```js\n    ## My Heading\n    * List item 1\n    * List item 2\n    ```", "```js\n<h2 id=\"myheading\">My Heading</h2>\n<ul>\n  <li>List item 1</li>\n  <li>List item 2</li>\n</ul>\n```", "```js\nApp.Views.NoteView = Backbone.View.extend({\n\n  template: _.template(App.Templates[\"template-note-view\"]),\n\n  converter: new Showdown.converter(),\n\n  initialize: function () {\n    this.listenTo(this.model, \"change\", this.render);\n    this.listenTo(this.model, \"destroy\", this.remove);\n    this.render();\n  },\n\n  // Convert note data into Markdown.\n  render: function () {\n    this.$el.html(this.template({\n      title: this.model.get(\"title\"),\n      text: this.converter.makeHtml(this.model.get(\"text\"))\n    }));\n    return this;\n  }\n});\n```", "```js\nApp.Templates[\"template-note-view\"] =\n  \"<div class=\\\"well well-small\\\">\" +\n  \"  <h2 id=\\\"pane-title\\\"><%= title %></h2>\" +\n  \"</div>\" +\n  \"<div id=\\\"pane-text\\\"><%= text %></div>\";\n```", "```js\n<div class=\"well well-small\">\n  <h2 id=\"pane-title\">My Title</h2>\n</div>\n<div id=\"pane-text\">\n  <h2 id=\"myheading\">My Heading</h2>\n  <ul>\n    <li>List item 1</li>\n    <li>List item 2</li>\n  </ul>\n</div>\n```", "```js\n<body>\n  <div id=\"mocha\"></div>\n\n  <!-- Test Fixtures. -->\n  <div id=\"fixtures\"style=\"display: none; visibility: hidden;\"></div>\n\n```", "```js\ndescribe(\"App.Views.NoteView\", function () {\n\n  before(function () {\n    // Create test fixture.\n    this.$fixture = $(\"<div id='note-view-fixture'></div>\");\n  });\n\n  beforeEach(function () {\n    // Empty out and rebind the fixture for each run.\n    this.$fixture.empty().appendTo($(\"#fixtures\"));\n\n    // New default model and view for each test.\n    //\n    // Creation calls `render()`, so in tests we have an\n    // *already rendered* view.\n    this.view = new App.Views.NoteView({\n      el: this.$fixture,\n      model: new App.Models.Note()\n    });\n  });\n\n  afterEach(function () {\n    // Destroying the model also destroys the view.\n    this.view.model.destroy();\n  });\n\n  after(function () {\n    // Remove all subfixtures after test suite finishes.\n    $(\"#fixtures\").empty();\n  });\n```", "```js\n  it(\"can render an empty note\", function () {\n    var $title = $(\"#pane-title\"),\n      $text = $(\"#pane-text\");\n\n    // Default to empty title in `h2` tag.\n    expect($title.text()).to.equal(\"\");\n    expect($title.prop(\"tagName\").toLowerCase()).to.equal(\"h2\");\n\n    // Have simple default message.\n    expect($text.text()).to.equal(\"Edit your note!\");\n    expect($text.html()).to.contain(\"<p><em>Edit your note!</em></p>\");\n  });\n```", "```js\n  it(\"can render more complicated markdown\", function (done) {\n    this.view.model.once(\"change\", function () {\n      var $title = $(\"#pane-title\"),\n        $text = $(\"#pane-text\");\n\n      // Our new (changed) title.\n      expect($title.text()).to.equal(\"My Title\");\n\n      // Rendered Markdown with headings, list.\n      expect($text.html())\n        .to.contain(\"My Heading</h2>\").and\n        .to.contain(\"<ul>\").and\n        .to.contain(\"<li>List item 2</li>\");\n\n      done();\n    });\n\n    // Make our note a little more complex.\n    this.view.model.set({\n      title: \"My Title\",\n      text: \"## My Heading\\n\" +\n            \"* List item 1\\n\" +\n            \"* List item 2\"\n    });\n  });\n});\n```", "```js\n<head>\n  <!-- ... snipped ... -->\n\n  <!-- Test libraries. -->\n  <script src=\"img/mocha.js\"></script>\n  <script src=\"img/chai.js\"></script>\n  <script src=\"img/sinon.js\"></script>\n\n  <!-- JavaScript Core Libraries -->\n  <script src=\"img/underscore.js\"></script>\n  <!-- ... snipped ... -->\n\n  <!-- JavaScript Application Libraries -->\n  <script src=\"img/namespace.js\"></script>\n  <script src=\"img/config.js\"></script>\n  <script>\n    // Test overrides (before any app components).\n    App.Config = _.extend(App.Config, {\n      storeName: \"notes-test\" // localStorage for tests.\n    });\n  </script>\n  <script src=\"img/note.js\"></script>\n  <script src=\"img/notes.js\"></script>\n  <script src=\"img/templates.js\"></script>\n  <script src=\"img/note-view.js\"></script>\n\n  <!-- Test Setup -->\n  <script>\n    var expect = chai.expect;\n    mocha.setup(\"bdd\");\n\n    window.onload = function () {\n      mocha.run();\n    };\n  </script>\n\n  <!-- Tests. -->\n  <script src=\"img/notes.spec.js\"></script>\n  <script src=\"img/note-view.spec.js\"></script>\n</head>\n<body>\n  <div id=\"mocha\"></div>\n\n  <!-- Test Fixtures. -->\n  <div id=\"fixtures\"\n       style=\"display: none; visibility: hidden;\"></div>\n</body>\n```", "```js\n    it(\"doesn't run this test\", function () {\n      expect(true).to.be.true;\n    });\n\n    it.only(\"runs this test\", function () {\n      expect(false).to.be.false;\n    });\n    ```", "```js\n    it.skip(\"doesn't run this test\", function () {\n      expect(true).to.be.true;\n    });\n\n    it(\"runs this test\", function () {\n      expect(false).to.be.false;\n    });\n    ```"]