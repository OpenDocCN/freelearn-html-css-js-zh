- en: Chapter 9. Creating Your Own Blockbuster Game – A Complete Match 3 Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the last chapter of this book, and I really hope you have enjoyed reading
    it as much as I enjoyed writing it. When I drafted the initial outline for this
    book, I planned to dedicate the last chapter to a Match 3 game such as Candy Crush
    Saga or Farm Heroes Saga.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: I then realized that there are tons of tutorials about these games available
    around the Web. Hence, I decided to show y'all something new, the engine of the
    Dungeon Raid game (available at [https://itunes.apple.com/us/app/dungeon-raid/id403090531](https://itunes.apple.com/us/app/dungeon-raid/id403090531)),
    which I adapted to create Globez (available at [http://www.mindjolt.com/globez.html](http://www.mindjolt.com/globez.html)),
    a game that has been played millions of times.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Your Own Blockbuster Game – A Complete Match 3 Game](img/0075OS_09_1.jpg)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
- en: During the making of this game, you will not only use most of the concepts described
    in this book in the creation of a real game engine, but you will also learn the
    bare bones of the Cocos2d-JS drawing API.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Follow the steps carefully; this is a complete game engine, and there's a lot
    to do.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the game
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since it''s a basic game with no physics, we don''t need to include external
    libraries; so, `project.json` returns to its original content:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Also, the content of `main.js` is basically the same as always:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Just have a look at the resolution: 300x300 is the main game area. For now,
    we''ll only focus on the main game area, and believe me, you''ll have enough to
    do!'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '`loadassets.js` is loading a sprite sheet created with **TexturePacker**:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`globes.png` is just one single file with all colored globes:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the game](img/0075OS_09_2.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: 'And `globes.plist` defines various images this way, with each color name assigned
    the `key` node. For example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now that we are done with the settings, we can start coding the game itself.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Creating the board
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing we''ll do is create the board in `gamescript.js` on which we''ll
    be playing the game. Trying to make the engine as customizable as we can, we''ll
    start with some global variables. Changing most of them will result in a quick
    gameplay change. It is shown as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`fieldSize`: This variable is the width and height of the field size, in tiles.
    This means we will play on a 6 x 6 tile field.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tileTypes`: This is an array with the keys of the sprites defined in the `globes.plist`
    file. I used only five different kinds of globez because I like the game to offer
    the opportunity to make big combos. You can choose how many colors you want; just
    keep in mind the more the colors in the game, the harder the gameplay.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tileSize`: This variable is the size of a tile, in pixels.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tileArray`: This is the array that will contain all globez objects.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`globezLayer`: This variable will be the layer where globez tiles will be placed.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `gameScene` definition does not change:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s have a look at the game definition, the core of the script:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: There's nothing new here; we load the sprite sheet, create and place a background
    layer, create and place the layer that will contain all globez, and call the `createLevel`
    function.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add globe creation to `createLevel`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here we are just building a two-dimensional array called `tileArray` according
    to the `fieldSize` number of entries. Given the *i* and *j* values, the `addTile`
    function causes the final creation of the tile, which accepts the row and the
    column of such a tile in the game field.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at `addTile` to know how to set up a game field:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'At this point of time, you can test the project and see what happens:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the board](img/0075OS_09_3.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: Did you notice? Every time you run the game, you get a different, random game
    field.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'Having a look at the `addTile` function will let you understand what happened:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: First, a random number between zero and the number of allowed tile types minus
    one is generated. In this case, it is from zero to five.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'From the sprite sheet, we will pick the sprite with the same key as `tileTypes[randomTile]`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, the sprite is created starting from its assigned frame:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'I added two custom attributes to our sprite:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '`val`: This variable represents the value of the tile as defined by the `randomTile`
    variable'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`picked`: This is a Boolean variable that says whether the tile has currently
    been picked by the players'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, the sprite is added to the `globezLayer` layer:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, we have to make something with all these globez.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Selecting and deselecting the first globe
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What''s the first thing we need to do when we want the player to interact with
    the game? Yes, add a listener. We will add it to the game''s `init` function:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'These are all concepts you have already met; I am just putting them together
    in order to create a game. So, you should know by now that we are going to declare
    `touchListener`; but first, let me add two more global variables to keep track
    of all the tiles I am going to select and the color I select:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`visitedTiles` is the array that will store the tiles once they have been picked
    up by the player, while `startColor` is the color of the first tile selected.
    We start with `null` as no color has been selected.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s move to the `touchListener` creation:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'It seems a lot of code but don''t worry; it''s really easy. Check the following
    line of code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This time, we will play with the mouse but, obviously, you can use touch if
    you want. Let''s say you should be able to use both ways to control the game.
    Using the mouse, we have to deal with two events, `onMouseDown` and `onMouseUp`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When the mouse is pressed, the `pickedRow` and `pickedCol` variables take the
    index of the row and column picked by the mouse according to click coordinates
    and `tileSize`. Once I know the row and column of the globe I picked, I can make
    it semitransparent by setting its opacity to 128—remember that opacity ranges
    from 0 to 255 in Cocos2d-JS with the `setOpacity` method. Also, I set the globe
    `picked` value to `true` because I actually picked it up, and since it's the first
    globe I am picking, I also need to set `startColor` to the globe color. From now
    on, we will only have to pick globez with the same color.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, we need to update the `visitedTiles` array with the newly
    picked globe—in this case, it's added as an object.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, `onMouseUp` is quite simple, although it will become the most
    complicated function in the whole game. It is as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: There isn't much to say; once the player releases the mouse, the `startColor`
    method needs to be reset to `null` and each globe in the `visitedTiles` array
    must be set to fully opaque, with the `picked` attribute set to `false`. With
    an empty `visitedTiles` array, we are ready to wait for the next player choice.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'Test the game and try to pick and release a globe:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![Selecting and deselecting the first globe](img/0075OS_09_4.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: As you can see, when you pick a globe, it turns semitransparent. When you release
    it, it returns fully opaque.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Let's make our first chain.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Making globez chains
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The gameplay is simple: you have to connect as many globez you can, horizontally,
    vertically, or diagonally. And you can also backtrack.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how to connect globez. First, though, let me introduce you to a
    variable that will be very important in all your draw-to-match games: `tolerance`.
    Check the following code snippet:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Have a look at the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![Making globez chains](img/0075OS_09_5.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: Let's say the player wants to connect the three green globez, from bottom to
    top. When you draw with your finger on a small surface, say, your mobile phone,
    maybe in a train, you aren't this precise. So, on the left side, we can see what
    will happen if we detect player movement in a tile-based environment. The not-that-precise
    drawing would touch five different globez, resulting in an illegal move, which
    is frustrating. On the right side, using a tolerance, we only detect a player
    movement when next to the center of the tile. See the difference? The player only
    touches three globez, performing a legal move as required.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: I called the square of the distance from the center—the radius of the inner
    white circles—`tolerance`, and in this case, I set it to *20 pixels * 20 pixels
    = 400*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'We can say we have a legal move when:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: We are inside a tolerance area
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current globe hasn't already been picked—the `picked` attribute is `false`
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current globe is adjacent to the last picked globe
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current globe has the same color as the first picked globe
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Translated into Cocos2d-JS, this means the `onMouseMove` function will contain:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It seems a lot of code but it''s just the representation of the four conditions
    mentioned earlier. I would like to point out the following line to you:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, I am applying the **Pythagorean Theorem** without using square roots,
    to save CPU time.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Test the script, and see what happens:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![Making globez chains](img/0075OS_09_6.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: You are now able to select globez even if your drawing is a bit imprecise. Now,
    what if you change your mind and want to backtrack to try another route?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Backtracking
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can backtrack your selection when you move your mouse back to the second
    last globe. In this case, the last globe is removed from the `visitedTiles` array
    and both the `picked` attribute and the opacity are turned back to their default
    values: `true` and `255`, respectively.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'To check for backtrack, you must check whether:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: We are inside a tolerance area
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current globe has already been picked—the `picked` attribute is `true`
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current globe is the second last entry in the `visitedTiles` array
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is just a minor change in the `onMouseMove` code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Test your game now, and try to backtrack. See the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![Backtracking](img/0075OS_09_7.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: Do you see this? Now, you can change your mind and take another route.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Take a short break because it's not over yet, although we managed to completely
    handle player movements.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Removing globez
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An ancient proverb says, *it's not a match game if you can't remove items*.
    And, it's right! Once you select the globez, you must be able to remove them once
    you release the mouse.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Removing globez is very easy: once you know the `visitedTiles` array has at
    least three items, just remove those items from the stage and from the `tileArray`
    array.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'Change `onMouseUp` this way:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Setting removed globez with `null` in the `tileArray` array after having physically
    removed them from the stage with `removeChild` will be useful when we want to
    replenish the board.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, try the game:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '![Removing globez](img/0075OS_09_8.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
- en: Did you see? We removed the globez. Now, the game is complete. Wait. No. Once
    you remove the globez, some globez have to fall down and more globez have to appear
    from the top of the screen to refill the stage. We will make them fall down gently
    using a tween.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Making the globez fall down
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you remove the globez, you will need to check whether there are globez
    with empty spaces below them, and make them fall down accordingly.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Remember, unlike most other languages, Cocos2d-JS sets the origin (0,0) coordinate
    at the bottom left of the stage, so the lowest row is row zero.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to heavily edit `onMouseUp`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Run the script and see what happens:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![Making the globez fall down](img/0075OS_09_9.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: Once green globez have been removed, the upper globez fall down.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s analyze the code a little:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Everything depends on whether we selected more than three globez. Otherwise,
    no globez will be removed, and there will be no need to check for empty spaces:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都取决于我们是否选择了超过三个 globez。否则，不会有 globez 被移除，也就没有必要检查空位：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We start looping through all rows starting from `1`—the next-to-bottomt row—to
    row `fieldsize`-1, which is the topmost row.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 `1` 开始循环所有行，即倒数第二行，到 `fieldsize`-1 行，这是最顶部的行。
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We do the same thing for the columns but, this time, we scan them.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于列我们也做同样的事情，但这次我们扫描它们。
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If in the given position we have a globe, it's time to count how many empty
    spaces we have below it.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在给定位置有一个 globe，那么是时候计算它下面的空位数量了。
- en: '[PRE30]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `holesBelow` variable will keep track of the empty spaces below a globe.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`holesBelow` 变量将跟踪地球下方的空位。'
- en: '[PRE31]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Starting from the current row and going down to the first, we have to count
    the empty spaces.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 从当前行向下到第一行，我们必须计算空位数量。
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We find an empty space when its `tileArray` value is null.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当其 `tileArray` 值为 null 时，我们找到空位。
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'And, in this case, we increment the `holesBelow` variable:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们增加 `holesBelow` 变量：
- en: '[PRE34]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Once the loop has finished, we check whether there were holes below:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦循环完成，我们检查是否有洞：
- en: '[PRE35]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Then, move the globe accordingly.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，相应地移动地球。
- en: '[PRE36]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Finally, we can update `tileArray` to register the new position of the globe.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以更新 `tileArray` 以注册地球的新位置。
- en: Now that we managed to make the globez fall down, there is just one more thing
    to do—create new globes to fill the stage again.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们成功地让 globez 下落，只剩下最后一件事要做——创建新的 globez 来再次填充舞台。
- en: Creating new globez
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新的 globez
- en: Creating new globez shares the same concept as making the globez fall. For each
    column, we count the number of empty places; this number is the number of globez
    we have to create.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的 globez 与创建 globez 下落有相同的概念。对于每一列，我们计算空位的数量；这个数量是我们必须创建的 globez 的数量。
- en: In order to create a smooth appearance, each globe will be created outside the
    top of the stage and an animation tween will place it in its right place.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建平滑的外观，每个 globe 都将在舞台顶部之外创建，并通过动画缓动将其放置在正确的位置。
- en: This is the last time we need to modify `onMouseUp`, promise!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们最后一次需要修改 `onMouseUp`，保证！
- en: '[PRE37]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This is the part needed to scan for empty spaces and call the `fallTile` method
    to create a new tile with the destination row, destination column, and falling
    height. We use the falling height to create a smooth tween to the globe's final
    position.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这是扫描空位并调用 `fallTile` 方法以创建新瓷砖的代码，该瓷砖具有目标行、目标列和下落高度。我们使用下落高度来创建一个平滑的缓动到地球最终位置。
- en: 'Here''s the definition for `fallTile`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 `fallTile` 的定义：
- en: '[PRE38]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'It''s really similar to the `addTile` method created several pages ago—it was
    a long journey, wasn''t it? And finally Globez is made:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 它真的很像几页前创建的 `addTile` 方法——这是一段漫长的旅程，不是吗？最终 Globez 成功了：
- en: '![Creating new globez](img/0075OS_09_10.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![创建新的 globez](img/0075OS_09_10.jpg)'
- en: Once you remove some globez, new ones will fall down from the top.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你移除了一些 globez，新的 globez 将从顶部落下。
- en: Bonus – using the drawing API for a visual feedback
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 奖励 - 使用绘图 API 进行视觉反馈
- en: As promised, we will use the drawing API to provide a visual feedback of the
    path we are drawing with the mouse.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 正如承诺的那样，我们将使用绘图 API 为我们用鼠标绘制的路径提供视觉反馈。
- en: 'First, let''s create a new global variable to store the layer where we will
    draw the player movement. It''s called `arrowsLayer`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个新的全局变量来存储我们将绘制玩家移动的层。它被称为 `arrowsLayer`：
- en: '[PRE39]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We will create and add `arrowLayer` after `globezLayer` in the `init` function:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `init` 函数中在 `globezLayer` 之后创建和添加 `arrowLayer`：
- en: '[PRE40]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The entity we can draw in is `DrawNode`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以绘制的实体是 `DrawNode`。
- en: 'No matter what happens, when we release the mouse, we will clear the draw area
    using the `clear` method:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 无论发生什么，当我们释放鼠标时，我们将使用 `clear` 方法清除绘图区域：
- en: '[PRE41]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, we know how to clear a draw node and we have to see how to draw lines
    in it. Add a new method call when the player performs a legal move, no matter
    whether you''re selecting a new globe or backtracking:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道如何清除一个绘图节点，并且我们必须看看如何在其中绘制线条。当玩家执行合法移动时，添加一个新的方法调用，无论你是选择一个新的地球还是回溯：
- en: '[PRE42]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'And now the only thing to do is the creation of `touchListener` listener''s
    `drawPath` method:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在唯一要做的就是创建 `touchListener` 监听器的 `drawPath` 方法：
- en: '[PRE43]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: As you can see, I loop through the `visitedTiles` array and use the `drawSegment`
    method to draw a segment from the first `cc.Point` argument to the second.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我遍历 `visitedTiles` 数组，并使用 `drawSegment` 方法从第一个 `cc.Point` 参数绘制到第二个。
- en: Finally, your game is completed. For real!!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你的游戏完成了。真的！！
- en: '![Bonus – using the drawing API for a visual feedback](img/0075OS_09_11.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![奖励 - 使用绘图API进行视觉反馈](img/0075OS_09_11.jpg)'
- en: Look how you can draw lines with the mouse, connecting the various globez you
    selected.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 看看你是如何用鼠标绘制线条，连接你选择的各个Globez。
- en: Where to go now
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在去哪里
- en: Normally, each chapter ends with a summary heading; anyway, this time I don't
    think you need a summary. I mean, you made several games, from a Concentration
    to Sokoban, from an endless runner to Globez.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，每个章节都以一个总结标题结束；无论如何，这次我认为你不需要总结。我的意思是，你已经制作了几个游戏，从注意力集中到推箱子，从无尽跑酷到Globez。
- en: First, I want to thank you for reading the entire book, and I hope you enjoyed
    reading it as much as I enjoyed writing it.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我想感谢你阅读整本书，我希望你阅读它的时候和我写作它的时候一样享受。
- en: Although you created several games, this is just the beginning of a long journey
    into cross-platform game development.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你创建了几个游戏，但这只是进入跨平台游戏开发漫长旅程的开始。
- en: First, you should complete the game by adding sounds, a scoring system, and
    some other features I am sure you know how to add, now that you are reading these
    final pages.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你应该通过添加声音、计分系统和一些其他功能来完善游戏，我相信你现在阅读这些最后几页时已经知道如何添加了。
- en: Then, I just want to point you to three sites you may find useful if you want
    to dive into cross-platform HTML5 development.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我只是想指出三个你可能觉得有用的网站，如果你想要深入研究跨平台HTML5开发。
- en: Protect your code
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护你的代码
- en: 'As your games were written in JavaScript, anyone can look at your code simply
    by directly looking at the HTML of your pages. There are several tools to obfuscate
    your code to make it unreadable—or at least to make life really hard for code
    lurkers. I selected two of them:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你的游戏是用JavaScript编写的，任何人都可以通过直接查看你页面的HTML来查看你的代码。有几个工具可以混淆你的代码，使其难以阅读——或者至少让代码偷窥者感到非常困难。我选择了其中两个：
- en: '**Javascript Obfuscator** ([http://javascriptobfuscator.com/](http://javascriptobfuscator.com/)):
    This is an online free tool to obfuscate your code; just copy-and-paste your code
    or upload small files and it does the hard work for you.'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**JavaScript混淆器** ([http://javascriptobfuscator.com/](http://javascriptobfuscator.com/))：这是一个在线免费工具，用于混淆你的代码；只需复制并粘贴你的代码或上传小文件，它就会为你完成艰苦的工作。'
- en: '**JScrambler** ([https://jscrambler.com](https://jscrambler.com)): This is
    the one I currently use and recommend. This allows you a lot of obfuscation levels,
    mobile gaming optimizations, site-locking, expiration dates, and many more. Just
    drag-and-drop your project and download the protected version.'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**JScrambler** ([https://jscrambler.com](https://jscrambler.com))：这是我目前使用并推荐的。它为你提供了很多混淆级别、移动游戏优化、网站锁定、到期日期等功能。只需拖放你的项目并下载受保护的版本。'
- en: Port your game on mobile devices as a native app
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将你的游戏作为原生应用移植到移动设备上
- en: 'Once your game is running on each browser, you may be tempted to convert it
    into a native mobile app to try to conquer new markets. There are three awesome
    tools that allow you to create mobile apps starting from HTML, CSS, and JavaScript:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的游戏在每个浏览器上运行，你可能会想将其转换为原生移动应用，以尝试征服新市场。有三个出色的工具允许你从HTML、CSS和JavaScript创建移动应用：
- en: 'Cocos2D proprietary JSB API ([http://www.cocos2d-x.org/wiki/Basic_usage_of_JSB_API](http://www.cocos2d-x.org/wiki/Basic_usage_of_JSB_API)):
    This is the official API to bind C++ to JavaScript. Starting from a Cocos2d-iphone
    or Cocos2d-x project, you can have all graphics, rendering, and physics code running
    natively with the game logic running JavaScript.'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cocos2D专有JSB API ([http://www.cocos2d-x.org/wiki/Basic_usage_of_JSB_API](http://www.cocos2d-x.org/wiki/Basic_usage_of_JSB_API))：这是将C++绑定到JavaScript的官方API。从Cocos2d-iphone或Cocos2d-x项目开始，你可以让所有图形、渲染和物理代码以原生方式运行，而游戏逻辑则以JavaScript运行。
- en: '**PhoneGap** ([http://phonegap.com/](http://phonegap.com/)): This application
    works both from your computer using native SDKs and from the cloud. PhoneGap compiles
    your HTML5 games, creating native apps ready to be published in markets such as
    Apple App Store. I used it to create the iOS version of BWBan ([https://itunes.apple.com/us/app/bwban/id783208885?mt=8](https://itunes.apple.com/us/app/bwban/id783208885?mt=8)),
    starting from an HTML5 game.'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**PhoneGap** ([http://phonegap.com/](http://phonegap.com/))：这个应用既可以从你的电脑使用原生SDK运行，也可以从云端运行。PhoneGap编译你的HTML5游戏，创建原生应用，准备在苹果应用商店等市场发布。我用它创建了BWBan的iOS版本
    ([https://itunes.apple.com/us/app/bwban/id783208885?mt=8](https://itunes.apple.com/us/app/bwban/id783208885?mt=8))，从一个HTML5游戏开始。'
- en: '**CocoonJS** ([https://www.ludei.com/cocoonjs/](https://www.ludei.com/cocoonjs/)):
    This platform provides you with a platform to test, accelerate, deploy, and monetize
    your HTML5 apps and games on all mobile devices with many interesting features
    to help you deliver great web products faster.'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publishing your game
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Making games is fun, but having people playing your games is even more fun.
    Here are the two top gaming portals where you should upload your games to receive
    plays, ratings, comments, and feedback:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '**Newgrounds** ([http://www.newgrounds.com/](http://www.newgrounds.com/)):
    This web gaming portal has a collection of the best indie audios, web movies,
    and games made by developers all around the world.'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Kongregate** ([http://www.kongregate.com/](http://www.kongregate.com/)):
    This is my favorite web gaming portal; it also offers an interesting revenue share.'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Licensing your game
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Game publishers are always looking for quality games and are willing to pay
    you to license them to use and customize your game. Unfortunately, it''s not that
    easy to get in touch with them and get enough attention. Luckily, there''s a service
    that does the hard job for you, showing your game to hundreds of potential buyers:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '**FGL** ([https://www.fgl.com/](https://www.fgl.com/)): This is the industry''s
    leading distribution and monetization services for HTML5, Android, iOS, Unity,
    and Flash. I got several sponsorships, thanks to FGL. I highly recommend working
    with them.'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Staying up-to-date
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The HTML5 gaming market is a new market changing almost daily. You will need
    to stay up-to-date to know news and trends. There''s one forum I highly recommend:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML5GameDevs** ([http://www.html5gamedevs.com/](http://www.html5gamedevs.com/)):
    This is the top HTML5 Game Dev forum with articles, game releases, frameworks,
    demos, videos, tutorials, blog posts, and more.'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And obviously, my blog, [http://www.emanueleferonato.com/](http://www.emanueleferonato.com/),
    is updated with almost daily news and tutorials.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can refer to the official Cocos2d-JS site, [http://www.cocos2d-x.org/wiki/Cocos2d-JS](http://www.cocos2d-x.org/wiki/Cocos2d-JS),
    where you can find all new releases and under-development features.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this last chapter, you created a complete prototype of a Match-3 game using
    most of the features you learned during the reading of this book. Now, you should
    be able to create your own games starting from scratch, porting your ideas from
    pencil and paper to modern web browsers and mobile devices.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
