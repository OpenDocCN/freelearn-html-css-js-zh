["```js\n    const material = new THREE.MeshBasicMaterial({\n    ```", "```js\n      color: 0xff0000,\n    ```", "```js\n      name: 'material-1',\n    ```", "```js\n      opacity: 0.5,\n    ```", "```js\n      transparency: true,\n    ```", "```js\n      ...\n    ```", "```js\n    })\n    ```", "```js\n    const material = new THREE.MeshBasicMaterial();\n    ```", "```js\n    material.color = new THREE.Color(0xff0000);\n    ```", "```js\n    material.name = 'material-1'; material.opacity = 0.5;\n    ```", "```js\n    material.transparency = true;\n    ```", "```js\nconst meshMaterial = new THREE.MeshBasicMaterial({color:\n  0x7777ff});\n```", "```js\nimport * as SceneUtils from 'three/examples/jsm/\n  utils/SceneUtils'\nconst material1 = new THREE.MeshDepthMaterial()\nconst material2 = new THREE.MeshBasicMaterial({ color:\n  0xffff00 })\nconst geometry = new THREE.BoxGeometry(0.5, 0.5, 0.5)\nconst cube = SceneUtils.createMultiMaterialObject(geometry,\n  [material2, material1])\n```", "```js\nImport { VertexNormalsHelper } from 'three/examples/jsm/\n  helpers/VertexNormalsHelper'\n...\nconst helper = new VertexNormalsHelper(mesh, 0.1, 0xff0000)\nhelper.name = 'VertexNormalHelper'\nscene.add(helper)\n```", "```js\nconst mat1 = new THREE.MeshBasicMaterial({ color: 0x777777\n  })\nconst mat2 = new THREE.MeshBasicMaterial({ color: 0xff0000\n  })\nconst mat3 = new THREE.MeshBasicMaterial({ color: 0x00ff00\n  })\nconst mat4 = new THREE.MeshBasicMaterial({ color: 0x0000ff\n  })\nconst mat5 = new THREE.MeshBasicMaterial({ color: 0x66aaff\n  })\nconst mat6 = new THREE.MeshBasicMaterial({ color: 0xffaa66\n  })\nconst matArray = [mat1, mat2, mat3, mat4, mat5, mat6]\nconst cubeGeom = new THREE.BoxGeometry(1, 1, 1, 10, 10, 10)\nconst cubeMesh = new THREE.Mesh(cubeGeom, material)\n```", "```js\n  const group = new THREE.Group()\n  for (let x = 0; x < 3; x++) {\n    for (let y = 0; y < 3; y++) {\n      for (let z = 0; z < 3; z++) {\n        const cubeMesh = sampleCube([mat1, mat2, mat3,\n          mat4, mat5, mat6], 0.95)\n        cubeMesh.position.set(x - 1.5, y - 1.5, z - 1.5)\n        group.add(cubeMesh)\n        debugger\n      }\n    }\n  }\n```", "```js\n[{ \"start\": 0,    \"count\": 600, \"materialIndex\": 0 },\n { \"start\": 600,  \"count\": 600, \"materialIndex\": 1 },\n { \"start\": 1200, \"count\": 600, \"materialIndex\": 2 },\n { \"start\": 1800, \"count\": 600, \"materialIndex\": 3 },\n { \"start\": 2400, \"count\": 600, \"materialIndex\": 4 },\n { \"start\": 3000, \"count\": 600, \"materialIndex\": 5 }]\n```", "```js\nconst group = new THREE.Group()\nconst mat1 = new THREE.MeshBasicMaterial({ color: 0x777777\n  })\nconst mat2 = new THREE.MeshBasicMaterial({ color: 0xff0000\n  })\nconst mat3 = new THREE.MeshBasicMaterial({ color: 0x00ff00\n  })\nconst mat4 = new THREE.MeshBasicMaterial({ color: 0x0000ff\n  })\nconst mat5 = new THREE.MeshBasicMaterial({ color: 0x66aaff\n  })\nconst mat6 = new THREE.MeshBasicMaterial({ color: 0xffaa66\n  })\nfor (let x = 0; x < 3; x++) {\n  for (let y = 0; y < 3; y++) {\n    for (let z = 0; z < 3; z++) {\n      const cubeMesh = sampleCube([mat1, mat2, mat3, mat4,\n        mat5, mat6], 0.95)\n      cubeMesh.position.set(x - 1.5, y - 1.5, z - 1.5)\n      group.add(cubeMesh)\n    }\n  }\n}\n```", "```js\nconst material = new THREE.MeshLambertMaterial({color:\n  0x7777ff});\n```", "```js\nconst meshMaterial = new THREE.MeshPhongMaterial({color:\n  0x7777ff});\n```", "```js\nuniform float time;\nvoid main(){\n  vec3 posChanged=position;\n  posChanged.x=posChanged.x*(abs(sin(time*2.)));\n  posChanged.y=posChanged.y*(abs(cos(time*1.)));\n  posChanged.z=posChanged.z*(abs(sin(time*.5)));\n  gl_Position=projectionMatrix*modelViewMatrix*vec4\n    (posChanged,1.);\n}\n```", "```js\n  posChanged.x=posChanged.x*(abs(sin(time*2.)));\n  posChanged.y=posChanged.y*(abs(cos(time*1.)));\n  posChanged.z=posChanged.z*(abs(sin(time*.5)));\n```", "```js\n  gl_Position=projectionMatrix*modelViewMatrix*vec4\n    (posChanged,1.);\n```", "```js\nuniform float time;\nvoid main(){\n  float c1=mod(time,.5);\n  float c2=mod(time,.7);\n  float c3=mod(time,.9);\n  gl_FragColor=vec4(c1,c2,c3,1.);\n}\n```", "```js\nconst geometry = new THREE.PlaneGeometry(10, 10, 100, 100)\nconst material = new THREE.ShaderMaterial({\n  uniforms: {\n    time: { value: 1.0 }\n  },\n  vertexShader: vs_simple,\n  fragmentShader: fs_simple\n})\nconst mesh = new THREE.Mesh(geometry, material)\n```", "```js\n// in the renderloop\nmaterial.uniforms.time.value += 0.005\n```", "```js\nconst material = new CustomShaderMaterial({\n  baseMaterial: THREE.MeshStandardMaterial,\n  vertexShader: ...,\n  fragmentShader: ...,\n  uniforms: {\n    time: { value: 0.2 },\n    resolution: { value: new THREE.Vector2() }\n  },\n  flatShading: true,\n  color: 0xffffff\n})\n```", "```js\nconst points = gosper(4, 50)\nconst lineGeometry = new THREE.BufferGeometry().\n  setFromPoints(points)\nconst colors = new Float32Array(points.length * 3)\npoints.forEach((e, i) => {\n  const color = new THREE.Color(0xffffff)\n  color.setHSL(e.x / 100 + 0.2, (e.y * 20) / 300, 0.8)\n  colors[i * 3] = color.r\n  colors[i * 3 + 1] = color.g\n  colors[i * 3 + 2] = color.b\n})\nlineGeometry.setAttribute('color', new THREE.\n  BufferAttribute(colors, 3, true))\nconst material = new THREE.LineBasicMaterial(0xff0000);\nconst mesh = new THREE.Line(lineGeometry, material)\nmesh.computeLineDistances()\n```"]