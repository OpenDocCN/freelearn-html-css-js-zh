["```js\nExt.define(\"Examples.plugin.GridSearch\", {\n\n  extend : 'Ext.util.Observable',\n  alias : 'plugin.gridsearch',\n\n  config : {\n\n    iconCls : 'icon-zoom',\n    checkIndexes : \"all\",\n    mode : 'local',\n    minChars : 1,\n    width : 100,\n    searchText : 'Search',\n    selectAllText : 'Select all',\n    position: 'bottom' ,\n    paramNames: {\n      fields:'fields'\n      ,query:'query'\n    }\n\n  },\n\n  init : function(cmp) {\n\n    this.grid = cmp.view.up('gridpanel');\n\n    if (this.grid.rendered)\n      this.onRender();\n    else {\n      this.grid.on('render', this.onRender, this);\n    }\n\n  },\n…\n```", "```js\nonRender : function() {\n\n  var tb = this.getToolbar();\n  this.menu = new Ext.menu.Menu();\n\n  this.field = Ext.create(\"Ext.form.field.Trigger\", {\n    width : this.width,\n    selectOnFocus : undefined === this.selectOnFocus ? \n             true : this.selectOnFocus,\n       triggerCls : 'x-form-clear-trigger', \n        minLength : this.minLength\n  });\n\n  tb.add('->', {\n    text : this.searchText,\n    menu : this.menu,\n    iconCls : this.iconCls\n  }, this.field);\n\n}\n```", "```js\ngetToolbar: function(){\n\n  var me = this,\n  dockedItems = this.grid.getDockedItems(),\n  toolbar = null,\n  hasToolbar = false;\n\n  if(dockedItems.length>0){\n    Ext.each(dockedItems, function(item){\n      if(item.xtype ==='toolbar' && item.dock == me.position){\n        hasToolbar = true;\n        toolbar = item;\n        return false;\n      }\n    });\n  }\n\n  if(!hasToolbar){\n    toolbar = this.grid.addDocked({\n      xtype: 'toolbar',\n      dock: this.position\n    })[0];\n  }\n\n  return toolbar;\n\n}\n```", "```js\nthis.field = Ext.create(\"Ext.form.field.Trigger\", {\n  width : this.width,\n  selectOnFocus : undefined === this.selectOnFocus ?\n           true : this.selectOnFocus,\n     triggerCls : 'x-form-clear-trigger',\n onTriggerClick : Ext.bind(this.onTriggerClear, this),\n      minLength : this.minLength\n});\n```", "```js\nthis.field.on('render', function() {\n\n  if (this.minChars) {\n    this.field.el.on({\n      scope : this,\n      buffer : 300,\n      keyup : this.onKeyUp\n    });\n  }\n\n  var map = new Ext.KeyMap(this.field.el, [{\n    key : Ext.EventObject.ENTER,\n    scope : this,\n    fn : this.onTriggerSearch\n  }, {\n    key : Ext.EventObject.ESC,\n    scope : this,\n    fn : this.onTriggerClear\n  }]);\n  map.stopEvent = true;\n}, this, {\n  single : true\n});\n```", "```js\nonKeyUp : function(e) {\n\n  if (e.isNavKeyPress()) {\n    return;\n  }\n\n  var length = this.field.getValue().toString().length;\n  if (0 === length || this.minChars <= length) {\n    this.onTriggerSearch();\n  }\n\n}\n```", "```js\ninitMenu : function() {\n\n  var menu = this.menu;\n  menu.removeAll();\n\n  menu.add(new Ext.menu.CheckItem({\n    text : this.selectAllText,\n    checked : !(this.checkIndexes instanceof Array),\n    hideOnClick : false,\n    handler : function(item) {\n      var checked = item.checked;\n      menu.items.each(function(i) {\n        if (item !== i && i.setChecked && !i.disabled) {\n          i.setChecked(checked);\n        }\n      });\n    }\n  }), '-');\n\n  var cm = this.grid.headerCt.items.items;\n\n  var group = undefined;\n  Ext.each(cm, function(item) {\n    var config = item.initialConfig;\n    var disable = false;\n\n    if (config.header && config.dataIndex) {\n      Ext.each(this.disableIndexes, function(item) {\n        disable = disable ? disable : \n          item === config.dataIndex;\n      });\n      if (!disable) {\n        menu.add(new Ext.menu.CheckItem({\n          text : config.header,\n          hideOnClick : false,\n          group : group,\n          checked : 'all' === this.checkIndexes,\n          dataIndex : config.dataIndex\n        }));\n      }\n    }\n  }, this);\n\n  if (this.checkIndexes instanceof Array) {\n    Ext.each(this.checkIndexes, function(di) {\n      var item = menu.items.find(function(itm) {\n        return itm.dataIndex === di;\n      });\n      if (item) {\n        item.setChecked(true, true);\n      }\n    }, this);\n  }\n\n}\n```", "```js\nonTriggerClear : function() {\n\n  if (this.field.getValue()) {\n    this.field.reset();\n    this.field.focus();\n    this.onTriggerSearch();\n  }\n\n}\n```", "```js\nonTriggerSearch : function() {\n\n  if (!this.field.isValid()) {\n    return;\n  }\n  var val = this.field.getValue(),\n    store = this.grid.store,\n    proxy = store.getProxy();\n…\n```", "```js\nif ('local' === this.mode) {\n  store.clearFilter();\n  if (val) {\n    store.filterBy(function(r) {\n      var retval = false;\n      this.menu.items.each(function(item) {\n        if (!item.dataIndex || !item.checked || retval) {\n          return;\n        }\n\n        var rv = r.get(item.dataIndex), rv = rv instanceof Date ?\n        Ext.Date.format(rv, this.getDateFormat(item)) : rv;\n        var re = new RegExp(Ext.String.escape(val), 'gi');\n        retval = re.test(rv);\n      }, this);\n      if (retval) {\n        return true;\n      }\n      return retval;\n    }, this);\n  }\n}\n```", "```js\nelse if(proxy instanceof Ext.data.proxy.Server) {\n\n  if(store.lastOptions && store.lastOptions.params) {\n    store.lastOptions.params[store.paramNames.start] = 0;\n  } \n\n  var fields = [];\n  this.menu.items.each(function(item) {\n    if(item.checked && item.dataIndex) {\n      fields.push(item.dataIndex);\n    }\n  });\n\n  delete(proxy.extraParams[this.paramNames.fields]);\n  delete(proxy.extraParams[this.paramNames.query]);\n  if (store.lastOptions && store.lastOptions.params) {\n    delete(proxy.lastOptions.params[this.paramNames.fields]);\n    delete(proxy.lastOptions.params[this.paramNames.query]);\n  }\n  if(fields.length) {\n    proxy.extraParams[this.paramNames.fields] = Ext.encode(fields);\n    proxy.extraParams[this.paramNames.query] = val;\n  }\n\n  store.load();\n}\n```", "```js\ngetDateFormat : function(menuItem) {\n\n  var columnNames = Ext.Array.pluck(this.grid.columns, 'dataIndex'),\n  columnIndex = Ext.Array.indexOf(columnNames, menuItem.dataIndex),\n  format = this.grid.columns[columnIndex].format;\n\n  return this.dateFormat || format;\n}\n```"]