["```js\nvar sound = new BABYLON.Sound(\"sound_name\", \"sound_file\", scene); \n\n```", "```js\nvar sound = new BABYLON.Sound(\"sound_name\", \"sound_file\", scene, () => { \n   sound.play(); \n}); \n\n```", "```js\nvar sound = new BABYLON.Sound(\"sound_name\", \"sound_file\", scene, () => { \n}, { \n   loop: true, // [Boolean] plays sounds in loop mode \n   autoPlay: true, // [Boolean] plays the sound after loading \n   volume: 1.0, // Between [Number [0, 1]] volume of sound \n   playbackRate: 1.0 // [Number 1.0] playing speed \n   spatialSound: false, [Boolean] is a 3D sound \n   maxDistance: 100, [Boolean] maximum distance of 3D sound \n}); \n\n```", "```js\nvar options = { \n   loop: true, \n   autoPlay: true \n};  \nvar sound1 = new BABYLON.Sound(\"sound1\", \"sound1.mp3\", scene, null, options); \nvar sound2 = new BABYLON.Sound(\"sound2\", \"sound2.mp3\", scene, null, options); \n\n```", "```js\nsound.setVolume(0.5); \n\n```", "```js\nvar currentVolume = sound.getVolume(); \n\n```", "```js\n    sound.isPlaying; // true if the sound is playing\n    sound.isPaused // true if the sound was paused\n\n```", "```js\n    sound.play(); // Plays the sound\n    sound.pause(); // Pauses the sound\n    sound.stop(); // Stops the sound\n\n```", "```js\n    var sound = new BABYLON.Sound(\"sound\", \"sound_file\", scene, () => {\n       sound.play();\n    }, { spatialSound: true });\n\n```", "```js\n    sound.setPosition(new BABYLON.Vector3(0, 0, 50)); // For example\n\n```", "```js\n    sound.distanceModel = \"exponential\";\n\n```", "```js\nsound.updateOptions({\nmaxDistance: 10 // If the player's distance to the sound is >= 10 then the volume will be 0\n});\n```", "```js\nsound.updateOptions({\nrolloffFactor: 2\n});\n```", "```js\nsound.updateOptions({\nmaxDistance: 10,\nrolloffFactor: 2\n});\n```", "```js\nsound.attachToMesh(myMesh);\n```", "```js\nvar sound = new BABYLON.Sound(\"sound\", \"sound_file\", scene, () => {\n}, { loop: true, autoplay: true });\n```", "```js\nsound.setDirectionalCone(90, 180, 0.1); // Values are in degree\n```", "```js\nsound.setLocalDirectionToMesh(new BABYLON.Vector3(0, 0, 1)); // Always speak ahead (Z is the forward axis)\n```", "```js\nsound.attachToMesh(myMesh); // myMesh should be the speaker in the example\n```"]