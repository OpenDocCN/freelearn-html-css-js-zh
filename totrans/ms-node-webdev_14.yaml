- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Using Sessions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用会话
- en: In this chapter, I explain how Node.js applications can correlate HTTP requests
    to create *sessions*, which allow the results of one request to affect the outcome
    of future requests. *Table 13.1* puts this chapter in context.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我解释了Node.js应用程序如何关联HTTP请求以创建*会话*，这允许一个请求的结果影响后续请求的结果。*表13.1*将本章置于上下文中。
- en: 'Table 13.1: Putting sessions in context'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 表13.1：将会话置于上下文中
- en: '| Question | Answer |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 问题 | 答案 |'
- en: '| What are they? | Sessions correlate the requests made by a user, allowing
    requests to be associated with one another. |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| 它们是什么？ | 会话关联用户发出的请求，允许请求相互关联。 |'
- en: '| Why are they useful? | Sessions allow stateful application features to be
    implemented using stateless HTTP requests. |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| 为什么它们有用？ | 会话允许使用无状态的HTTP请求实现有状态的应用程序功能。 |'
- en: '| How are they used? | Cookies are used to transmit small amounts of data or
    a session ID that is associated with data stored by the server, which identifies
    related requests. |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| 如何使用它们？ | Cookie用于传输少量数据或与服务器存储的数据关联的会话ID，该ID标识相关请求。 |'
- en: '| Are there any pitfalls or limitations? | Browsers sometimes use cookies in
    ways that are unhelpful for managing sessions, but with care, sessions have few
    pitfalls. |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| 有没有陷阱或限制？ | 浏览器有时以不利于管理会话的方式使用Cookie，但只要小心，会话的陷阱很少。 |'
- en: '| Are there any alternatives? | Cookie-based sessions are the only reliable
    way to correlate HTTP requests, but not all applications require request correlation.
    |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 有没有替代方案？ | 基于Cookie的会话是关联HTTP请求的唯一可靠方式，但并非所有应用程序都需要请求关联。'
- en: '*Table 13.2* summarizes the chapter.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*表13.2* 总结了本章内容。'
- en: 'Table 13.2: Chapter summary'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 表13.2：章节摘要
- en: '| Problem | Solution | Listing |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 问题 | 解决方案 | 列表 |'
- en: '| Correlate related HTTP requests | Set and read cookies | *2-5, 8-10* |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 关联相关的HTTP请求 | 设置和读取Cookie | *2-5, 8-10* |'
- en: '| Prevent the data stored in cookies from being altered | Sign and verify cookies
    | *6, 7* |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 防止存储在Cookie中的数据被更改 | 签名并验证Cookie | *6, 7* |'
- en: '| Store larger amounts of data | Use sessions where the data is stored by the
    application and accessed using a key stored in a cookie | *11-15, 19-21* |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 存储大量数据 | 使用会话，其中数据由应用程序存储，并通过存储在Cookie中的键访问 | *11-15, 19-21* |'
- en: '| Persistently store session data | Use a database | *16-18* |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 持久存储会话数据 | 使用数据库 | *16-18* |'
- en: Preparing for this chapter
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备本章内容
- en: This chapter uses the `part2app` project from *Chapter 12*. No changes are required
    for this chapter. Run the command shown in *Listing 13.1* in the `part2app` folder
    to start the development tools.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用的是*第12章*中的`part2app`项目。本章不需要进行任何更改。在`part2app`文件夹中运行*清单13.1*中显示的命令以启动开发工具。
- en: 'Listing 13.1: Starting the development tools'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 列表13.1：启动开发工具
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Use a browser to request `http://localhost:5000,` fill out the form, and click
    the **Submit** button, as shown in *Figure 13.1*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用浏览器请求`http://localhost:5000`，填写表格，并点击*图13.1*中显示的**提交**按钮。
- en: '**Tip**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: You can download the example project for this chapter – and for all the other
    chapters in this book – from [https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development).
    See *Chapter 1* for how to get help if you have problems running the examples.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://github.com/PacktPublishing/Mastering-Node.js-Web-Development](https://github.com/PacktPublishing/Mastering-Node.js-Web-Development)下载本章的示例项目——以及本书中所有其他章节的示例项目。有关运行示例时遇到问题的帮助，请参阅*第1章*。
- en: '![](img/B21959_13_01.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_13_01.png)'
- en: 'Figure 13.1: Running the example application'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1：运行示例应用程序
- en: Correlating stateless HTTP requests
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关联无状态的HTTP请求
- en: HTTP requests are *stateless*, meaning that each request is self-contained and
    contains no information that associates it with any other request, even when made
    by the same browser. You can see the problem this creates by opening two browser
    windows and filling out the form with the same name but different ages and number
    of years, simulating two users with the same name.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP请求是无状态的，这意味着每个请求都是自包含的，并且不包含任何将其与任何其他请求关联的信息，即使是由同一浏览器发出的。您可以通过打开两个浏览器窗口并使用相同名称但不同年龄和年数填写表格来模拟具有相同名称的两个用户，从而看到这造成的问题。
- en: The only information the server has to work with is the data in the form and
    it has no way to figure out that these are requests from different users, so the
    users see each other’s data, and any other data created by users with the same
    name, as shown in *Figure 13.2*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器必须处理的信息仅限于表单中的数据，它无法确定这些是来自不同用户的请求，因此用户看到彼此的数据，以及具有相同名称的用户创建的任何其他数据，如 *图
    13.2* 所示。
- en: '![](img/B21959_13_02.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_13_02.png)'
- en: 'Figure 13.2: The effect of stateless requests'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2：无状态请求的影响
- en: Most applications are *stateful*, and that means the server has to be able to
    *correlate* requests so that the application can reflect past actions in future
    responses. In the case of the example, this would allow the application to show
    just the requests made by one user and not just all requests made by anyone who
    happens to have the same name.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序都是**有状态的**，这意味着服务器必须能够**关联**请求，以便应用程序可以在未来的响应中反映过去的行为。在示例中，这将允许应用程序仅显示一个用户的请求，而不仅仅是所有同名用户的请求。
- en: Using cookies to correlate requests
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用cookie关联请求
- en: The most common way to correlate requests is with a *cookie*. Cookies are small
    fragments of text that a server includes in an HTTP response header. The browser
    includes the cookies in subsequent requests, which means that if the server creates
    cookies with unique IDs, those requests can be identified as related. (There are
    other ways to correlate requests, such as including unique IDs in URLs, but cookies
    are the most robust and reliable approach.)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 关联请求最常见的方式是使用**cookie**。cookie 是服务器在 HTTP 响应头中包含的文本片段。浏览器将在后续请求中包含这些cookie，这意味着如果服务器使用唯一的ID创建cookie，则这些请求可以被识别为相关的。（还有其他关联请求的方法，例如在URL中包含唯一的ID，但cookie是最稳健和可靠的方法。）
- en: Cookies can be set just like any response header. Add a file named `cookies.ts`
    to the `src/server` folder, with the content shown in *Listing 13.2*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Cookie 可以像任何响应头一样设置。将名为 `cookies.ts` 的文件添加到 `src/server` 文件夹中，内容如 *列表 13.2*
    所示。
- en: 'Listing 13.2: The contents of the cookies.ts file in the src/server folder'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 13.2：src/server 文件夹中 cookies.ts 文件的内容
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Cookies are sent to the browser using the `Set-Cookie` header, and the header
    value is a cookie name, a value, and one or more attributes that tell the browser
    how to manage the cookie. A response can set multiple cookies by including multiple
    `Set-Cookie` headers. For this reason, the code in *Listing 13.2* checks to see
    whether there is an existing `Set-Cookie` header and adds its value to the array
    of values passed to the `setHeader` method. When the response is written, Node.js
    will add a `Set-Cookie` header for each element in the array.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `Set-Cookie` 头部将cookie发送到浏览器，该头部的值是一个cookie名称、一个值以及一个或多个属性，告诉浏览器如何管理cookie。一个响应可以通过包含多个
    `Set-Cookie` 头部来设置多个cookie。因此，*列表 13.2* 中的代码检查是否存在现有的 `Set-Cookie` 头部，并将其值添加到传递给
    `setHeader` 方法的值数组中。当响应被写入时，Node.js 将为数组中的每个元素添加一个 `Set-Cookie` 头部。
- en: '**User caution**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户注意事项**'
- en: Consent is required for cookies in some parts of the world, most notably within
    the EU with the **General Data Protection Regulation** (**GDPR**). I am not a
    lawyer, and I am in no way qualified to provide legal advice, but you should make
    sure you understand the laws in each region where your application has users and
    make sure you comply with the rules.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在世界的一些地区，例如欧盟的**通用数据保护条例**（**GDPR**）中，需要用户同意才能使用cookie。我不是律师，也没有资格提供法律建议，但您应该确保您理解您的应用程序用户所在的每个地区的法律，并确保您遵守这些规则。
- en: 'A header produced by the `setCookie` function in *Listing 13.2* will look like
    this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13.2* 中 `setCookie` 函数生成的头部将看起来像这样：'
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The cookie name is `user`, its value is `Alice`, and the cookie has been configured
    with the `Max-Age` and `SameSite` attributes, which tell the browser how long
    the cookie is valued for and when to send the cookie. The cookie attributes are
    described in *Table 13.3*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: cookie 名称是 `user`，其值是 `Alice`，cookie 已配置了 `Max-Age` 和 `SameSite` 属性，这些属性告诉浏览器cookie的有效期限以及何时发送cookie。cookie属性在
    *表 13.3* 中描述。
- en: 'Table 13.3: Cookie attributes'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 表 13.3：Cookie 属性
- en: '| Name | Description |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 描述 |'
- en: '|'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '| This attribute specifies the cookie’s domain, as described after this table.
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 此属性指定cookie的域名，如本表之后所述。 |'
- en: '|'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '| This attribute specifies the time and date when the cookie expires. The data
    format is described at [https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date).
    For most projects, the `Max-Age` attribute is easier to use. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 此属性指定cookie到期的时间和日期。数据格式在[https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Date)中描述。对于大多数项目，`Max-Age`属性更容易使用。
    |'
- en: '|'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '| This attribute tells the browser to prevent JavaScript code from reading
    the cookie. This is rarely set for web applications that have client-side JavaScript
    code. |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 此属性告诉浏览器防止JavaScript代码读取cookie。对于具有客户端JavaScript代码的Web应用程序，很少设置此属性。 |'
- en: '|'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '| This attribute specifies the number of seconds until the cookie expires.
    This attribute takes precedence over `Expires`. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 此属性指定cookie到期前的秒数。此属性优先于`Expires`。 |'
- en: '|'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '| This attribute specifies a path that must be in the URL for the browser to
    include the cookie. |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 此属性指定浏览器包含cookie必须包含在URL中的路径。 |'
- en: '|'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '| This attribute tells the browser whether the cookie should be included in
    cross-site requests, as described later. The policy options are `Strict`, `Lax`,
    and `None`. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 此属性告诉浏览器是否应将cookie包含在后续描述的跨站请求中。策略选项为`Strict`、`Lax`和`None`。 |'
- en: '|'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '| When this option is set, the browser will only include the cookie in HTTPS
    requests and not plain HTTP requests. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 当此选项设置时，浏览器将仅在HTTPS请求中包含cookie，而不是普通HTTP请求。 |'
- en: Two of the cookie attributes require additional explanation. The `Domain` attribute
    is used to widen the range of requests for which the browser will include a cookie.
    If a request is sent to [https://users.acme.com](https://users.acme.com), for
    example, any cookies that are returned won’t be included in requests to [https://products.acme.com](https://products.acme.com),
    which can be a problem for some projects. This can be resolved with the `Domain`
    attribute, which can be set to `acme.com`, and telling the browser to include
    the cookie more broadly.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 两个cookie属性需要额外解释。`Domain`属性用于扩大浏览器将包含cookie的请求范围。例如，如果请求发送到[https://users.acme.com](https://users.acme.com)，返回的任何cookie都不会包含在发送到[https://products.acme.com](https://products.acme.com)的请求中，这可能会成为某些项目的问题。这可以通过设置`Domain`属性为`acme.com`并告诉浏览器更广泛地包含cookie来解决。
- en: 'The `SameSite` attribute is used to control whether the cookie will be included
    in requests that originate from outside the site that created the cookie, known
    as the *first-party* or same-site *context.* The options for the `SameSite` attribute
    are: `Strict`, meaning that cookies are only included for requests made from the
    same website that created the cookie, `Lax`, which tells the browser to include
    the cookie when following a link but not for cross-site requests, such as the
    email, and `None`, which means that the cookie is always included.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`SameSite`属性用于控制cookie是否包含在来自创建cookie的网站外部的请求中，称为*第一方*或同一站点的*上下文*。`SameSite`属性的选项有：`Strict`，表示只有来自创建cookie的同一网站的请求才会包含cookie，`Lax`，告诉浏览器在跟随链接时包含cookie，但不包括跨站请求，如电子邮件，以及`None`，表示cookie始终包含。'
- en: Imagine that a user has previously visited [https://www.acme.com](https://www.acme.com)
    and has received a cookie, after which the user navigates to `www.example.com`.
    The response from `www.example.com` contains a link back to `www.acme.com`. If
    the cookie was created with the `Strict` option, the browser won’t send the cookie
    in the request, but it will be included with the `Lax` option. The `None` option
    will also cause the browser to include the cookie and will also allow it to be
    included in requests that are made within frames or that are for images.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 假设用户之前访问了[https://www.acme.com](https://www.acme.com)并接收了一个cookie，之后用户导航到`www.example.com`。`www.example.com`的响应包含一个返回到`www.acme.com`的链接。如果cookie是以`Strict`选项创建的，浏览器不会在请求中发送cookie，但如果是`Lax`选项，则会被包含。`None`选项也会导致浏览器包含cookie，并允许它在框架内或为图像的请求中包含。
- en: 'Revisiting the cookies created by the code in *Listing 13.2*, you can see that
    the `Max-Age` attribute has been used to give the cookie a 300-second (5-minute)
    life and that the `SameSite` policy is set to `Strict`, which means cookies will
    not be included in requests from outside the cookie’s domain:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾*列表13.2*中创建的cookie，可以看到已使用`Max-Age`属性为cookie设置300秒（5分钟）的生命周期，并且`SameSite`策略设置为`Strict`，这意味着cookie不会包含在来自cookie域外部的请求中：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `setJsonCookie` function produces cookies with the same configuration but
    accepts arbitrary objects that are serialized into the JSON format before being
    used as the cookie value.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`setJsonCookie` 函数生成具有相同配置的 cookie，但接受在用作 cookie 值之前序列化为 JSON 格式的任意对象。'
- en: '**Avoiding cookies without expires and Max-Age attributes**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**避免没有 expires 和 Max-Age 属性的 cookie**'
- en: A cookie that is created without either the `Expires` or `Max-Age` attributes
    is a *session cookie*, which is a confusing term because this type of cookie isn’t
    especially useful for creating user sessions, a process I demonstrate later in
    this chapter. The name “session cookies” means that a cookie is valid for a browsing
    session, which means they are invalidated when the user closes the browser window,
    for example.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 没有设置 `Expires` 或 `Max-Age` 属性创建的 cookie 是一个 *会话 cookie*，这是一个令人困惑的术语，因为这种类型的
    cookie 并不特别适用于创建用户会话，我将在本章后面演示这个过程。名称“会话 cookie”意味着 cookie 仅在浏览会话期间有效，这意味着当用户关闭浏览器窗口时，它们会被无效化，例如。
- en: Browsers have changed since this type of cookie was created, and session cookies
    should be avoided because leaving the browser to decide when to invalidate a cookie
    can produce unexpected results, and cookies can have long and unpredictable lives,
    especially now that browsers allow users to resurrect browser tabs long after
    they are closed. Cookies should always be given a fixed life with the `Expires`
    or `Max-Age` attributes.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 自从创建这种类型的 cookie 以来，浏览器已经发生了变化，应该避免使用会话 cookie，因为让浏览器决定何时使 cookie 无效可能会产生意外的结果，并且
    cookie 可以有很长且不可预测的生命周期，尤其是在浏览器允许用户在关闭后很久重新打开浏览器标签的情况下。cookie 应始终使用 `Expires` 或
    `Max-Age` 属性赋予一个固定的生命周期。
- en: Receiving cookies
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接收 cookie
- en: 'The browser includes cookies in requests using the `Cookie` header, which contains
    one or more `name=value` pairs, separated by semicolons (the `;` character). The
    attributes used with the `Set-Cookie` header are not included, so the header looks
    like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器使用 `Cookie` 头部包含 cookie，该头部包含一个或多个由分号（`;` 字符）分隔的 `name=value` 对。与 `Set-Cookie`
    头部一起使用的属性不包括在内，因此头部看起来像这样：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Listing 13.3* defines a function to parse the header and extract the individual
    cookies. There is also a method for parsing JSON cookie values.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13.3* 定义了一个解析头部并提取单个 cookie 的函数。还有一个解析 JSON cookie 值的方法。'
- en: 'Listing 13.3: Parsing cookies in the cookies.ts file in the src/server folder'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 13.3：在 src/server 文件夹中的 cookies.ts 文件中解析 cookie
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `getCookie` function uses JavaScript string processing and regular expression
    features to split up the cookie string and get the name and value to locate a
    specific cookie. This is not an efficient approach because the cookie header is
    processed each time a cookie is requested, but it does show how the header can
    be handled and will be improved upon later in this chapter.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`getCookie` 函数使用 JavaScript 字符串处理和正则表达式功能来拆分 cookie 字符串并获取名称和值以定位特定的 cookie。这不是一个高效的方法，因为每次请求
    cookie 时都会处理 cookie 头部，但它确实展示了如何处理头部，并且将在本章后面进行改进。'
- en: Setting and reading cookies
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置和读取 cookie
- en: '*Listing 13.4* updates the code that handles the `/form` requests to set a
    cookie that keeps track of the user’s requests. The cookie’s contents are updated
    each time a new request is received, and the cookie’s value is read from every
    request and added to the context data passed to the template used to generate
    a response.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13.4* 更新了处理 `/form` 请求的代码，以设置一个跟踪用户请求的 cookie。每次接收到新的请求时，cookie 的内容都会更新，并且从每个请求中读取
    cookie 的值并将其添加到传递给用于生成响应的模板的上下文数据中。'
- en: 'Listing 13.4: Using cookies in the forms.ts file in the src/server folder'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 13.4：在 src/server 文件夹中的 forms.ts 文件中使用 cookie
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A cookie is used to store the last five results created for the user. Each new
    `POST` request creates a new `Set-Cookie` header in the response, with a new five-minute
    expiry time. If the user keeps submitting requests, new cookies will be created,
    effectively extending the user’s session. If no request is made before the cookie
    expires, then the browser will discard the cookie and won’t include it in future
    requests.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: cookie 用于存储为用户创建的最后五个结果。每个新的 `POST` 请求都会在响应中创建一个新的 `Set-Cookie` 头部，具有新的五分钟过期时间。如果用户继续提交请求，将创建新的
    cookie，从而有效地延长用户的会话。如果在 cookie 过期之前没有提交请求，则浏览器将丢弃该 cookie，并且不会将其包含在未来的请求中。
- en: '*Listing 13.5* updates the partial view that displays recent queries to display
    the personal history when it is available.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13.5* 更新了显示最近查询的部分视图，以便在可用时显示个人历史记录。'
- en: 'Listing 13.5: Displaying data in the history.handlebars file in the templates/serve/partials
    folder'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 列表13.5：在templates/serve/partials文件夹中的history.handlebars文件中显示数据
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Browsers share cookies between tabs so the most reliable way to test the changes
    to the example is to open one regular browser tab and one private or incognito
    browsing tab. Navigate to `http://localhost:5000` with both tabs and fill out
    the form using the same name but different ages and years. Submit the forms and
    you will see that each browser tab has its own history, as shown in *Figure 13.3*.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器在标签页之间共享cookie，因此测试示例更改的最可靠方法是打开一个常规浏览器标签页和一个私密或隐身浏览标签页。使用两个标签页导航到`http://localhost:5000`，并使用相同的名称但不同的年龄和年份填写表单。提交表单后，您将看到每个浏览器标签页都有自己的历史记录，如图*13.3*所示。
- en: '![](img/B21959_13_03.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21959_13_03.png)'
- en: 'Figure 13.3: Using cookies to correlate requests'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3：使用cookie关联请求
- en: Signing cookies
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 签名cookie
- en: Users can change the contents of cookies, and browsers make it easy to add,
    delete, and alter cookies. The Chrome F12 developer tools, for example, allow
    cookies to be edited in the **Application/Cookies** pane.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以更改cookie的内容，浏览器使得添加、删除和修改cookie变得容易。例如，Chrome的F12开发者工具允许在**应用/cookie**面板中编辑cookie。
- en: This means that cookies cannot be trusted unless their contents can be verified
    to ensure they have not been tampered with. Add a file named `cookies_signed.ts`
    to the `src/server` folder with the content shown in *Listing 13.6*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着除非可以验证其内容以确保它们没有被篡改，否则不能信任cookie。将名为`cookies_signed.ts`的文件添加到`src/server`文件夹中，内容如*列表13.6*所示。
- en: 'Listing 13.6: The contents of the cookies_signed.ts file in the src/server
    folder'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 列表13.6：src/server文件夹中cookies_signed.ts文件的内容
- en: '[PRE15]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Node.js provides a comprehensive cryptography API in the `crypto` module, which
    includes support for **hash-based message authentication codes** (**HMACs**),
    which are hash codes created using a secret key that can be used to verify data.
    The `signCookie` function in *Listing 13.6* uses the Node.js API to create a hash
    code that can be used as a cookie value.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js在`crypto`模块中提供了一个全面的加密API，其中包括对基于哈希的消息认证码（**HMAC**）的支持，这些哈希码是使用密钥创建的，可以用来验证数据。*列表13.6*中的`signCookie`函数使用Node.js
    API创建一个可以用于cookie值的哈希码。
- en: 'The `createHmac` function is used to create the hash code generator, using
    the **SHA-512** algorithm and the secret key:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**SHA-512**算法和密钥创建哈希码生成器，`createHmac`函数如下：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `update` method is used to apply the hashing algorithm to the cookie value,
    and the `digest` method returns the hash code in the `Base64` URL encoding, which
    allows the hash code to be safely included in the cookie. The result is the data
    value, followed by a period, followed by the hash code, which will look like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`update` 方法用于将哈希算法应用于cookie值，而`digest`方法返回的哈希码以`Base64` URL编码形式呈现，这使得哈希码可以安全地包含在cookie中。结果是数据值，后面跟着一个点，然后是哈希码，其形式如下：'
- en: '[PRE17]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Real hash codes are longer, but what’s important is that the cookie value isn’t
    encrypted and can still be seen by the user. The user can still edit the cookie,
    but the hash code allows those changes to be detected.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的哈希码更长，但重要的是cookie值没有被加密，用户仍然可以看到它。用户仍然可以编辑cookie，但哈希码允许检测这些更改。
- en: When the cookie is submitted, the `validateCookie` method generates a new hash
    code for the cookie value and compares it to the one received in the cookie. Hash
    codes are *one way*, which means they are validated by generating a new hash code
    for the cookie value included in the HTTP request and comparing it with the previous
    hash code.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当cookie提交时，`validateCookie`方法为cookie值生成一个新的哈希码，并将其与cookie中接收到的哈希码进行比较。哈希码是单向的，这意味着通过为包含在HTTP请求中的cookie值生成新的哈希码并与之前的哈希码进行比较来验证。
- en: The Node.js `crypto` module provides the `timingSafeEqual` function, which performs
    a byte-by-byte comparison of two `Buffer` objects, which are created from the
    two hash codes to compare.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js的`crypto`模块提供了`timingSafeEqual`函数，该函数执行两个由两个哈希码创建的`Buffer`对象之间的字节对字节比较。
- en: The user may be able to alter the cookie value but doesn’t have the secret key
    required to generate a valid hash code for the altered value. If the hash code
    received from the request doesn’t match, the cookie data is discarded. *Listing
    13.7* updates the `setCookie` and `getCookie` functions so that all the cookies
    created by the application are signed.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可能能够修改 cookie 的值，但没有生成修改值的有效哈希码所需的密钥。如果从请求中接收到的哈希码不匹配，cookie 数据将被丢弃。*列表 13.7*
    更新了 `setCookie` 和 `getCookie` 函数，以便应用程序创建的所有 cookie 都被签名。
- en: '**Caution**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: Be careful not to commit secret keys to public source code repositories, such
    as GitHub. One approach is to define sensitive data in `.env` files, which can
    be excluded from code commits. See *Part 3* of this book for an example of using
    this type of configuration file.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意不要将密钥提交到公共源代码仓库，如 GitHub。一种方法是在 `.env` 文件中定义敏感数据，这些文件可以从代码提交中排除。参见本书的 *第
    3 部分* 以了解使用此类配置文件的示例。
- en: 'Listing 13.7: Signing cookies in the cookies.ts file in the src/server folder'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 13.7：在 src/server 文件夹中的 cookies.ts 文件中签名 cookie
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: There is no change in the behavior of the application, but if you use your browser’s
    developer tools to alter a cookie, you will find that it is ignored when the browser
    sends a request.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的行为没有变化，但如果你使用浏览器的开发者工具修改一个 cookie，你会发现当浏览器发送请求时，它会被忽略。
- en: Using a package to manage cookies
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用包来管理 cookie
- en: The previous examples not only demonstrated how the `Set-Cookie` and `Cookie`
    headers can be used but also showed that working directly with cookies can be
    awkward. Express includes support for parsing cookies, as well as generating JSON
    and signed cookies, without the need to manually format or parse headers.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例不仅演示了如何使用 `Set-Cookie` 和 `Cookie` 头部，还显示了直接与 cookie 一起工作可能会很尴尬。Express
    包括解析 cookie、生成 JSON 和签名 cookie 的支持，无需手动格式化或解析头部。
- en: Parsing `cookies``.cpp` is done using a middleware component, which isn’t included
    in the main Express package. Run the commands shown in *Listing 13.8* in the `part2app`
    folder to install the parsing package and the TypeScript description of its API.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用中间件组件解析 `cookies.cpp`，该组件不包括在主要的 Express 包中。在 `part2app` 文件夹中运行 *列表 13.8*
    中显示的命令以安装解析包及其 TypeScript API 描述。
- en: 'Listing 13.8: Installing the cookie middleware package'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 13.8：安装 cookie 中间件包
- en: '[PRE19]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Listing 13.9* enables the cookie parsing middleware and specifies the secret
    key that will be used for signed cookies.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 13.9* 启用了 cookie 解析中间件并指定了将用于签名 cookie 的密钥。'
- en: 'Listing 13.9: Applying middleware in the forms.ts file in the src/server folder'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 13.9：在 src/server 文件夹中的 forms.ts 文件中应用中间件
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The middleware populates the `Request` object’s `cookies` property for regular
    cookies and the `signedCookies` property for signed cookies. Cookies are set using
    a `cookie` property defined by the `Response` object. *Listing 13.10* uses these
    features to generate the cookies the application requires and adds a parameter
    to the `setCookie` method to allow the default cookie options to be overridden.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件为常规 cookie 填充 `Request` 对象的 `cookies` 属性，为签名 cookie 填充 `signedCookies` 属性。cookie
    是通过 `Response` 对象定义的 `cookie` 属性设置的。*列表 13.10* 使用这些功能生成应用程序所需的 cookie，并给 `setCookie`
    方法添加了一个参数，以允许覆盖默认的 cookie 选项。
- en: 'Listing 13.10: Using the Express cookie features in the cookies.ts file in
    the src/server folder'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 13.10：在 src/server 文件夹中的 cookies.ts 文件中使用 Express cookie 功能
- en: '[PRE21]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Express and.the cookie middleware take responsibility for creating the `Set-Cookie`
    header in responses and parsing `Cookie` headers in requests. The `Response.cookie`
    method is used to create cookies and it accepts a name, a value, and a configuration
    object. The configuration object has properties that correspond to the cookie
    attributes described in *Table 13.3*, although there are some oddities. For example,
    the `maxAge` configuration is specified in milliseconds, rather than the seconds
    used by the `Max-Age` attribute (which is why the value in *Listing 13.10* is
    multiplied by 1,000).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Express 和 cookie 中间件负责在响应中创建 `Set-Cookie` 头部以及在请求中解析 `Cookie` 头部。`Response.cookie`
    方法用于创建 cookie，它接受一个名称、一个值和一个配置对象。配置对象具有与 *表 13.3* 中描述的 cookie 属性相对应的属性，尽管有一些奇怪之处。例如，`maxAge`
    配置是以毫秒为单位指定的，而不是 `Max-Age` 属性所使用的秒（这就是为什么 *列表 13.10* 中的值乘以 1,000 的原因）。
- en: The configuration object accepted by the `cookie` method supports a `signed`
    property, which enables cookie signing. The key is obtained from the configuration
    used to set up the cookie middleware, which is another oddity but works, nonetheless.
    Cookies are signed using an HMAC, in a similar way to the custom code.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`cookie`方法接受的配置对象支持一个`signed`属性，该属性启用cookie签名。密钥是从设置cookie中间件时使用的配置中获得的，这又是一个奇怪之处，但仍然有效。与自定义代码类似，使用HMAC对cookie进行签名。'
- en: Cookies received in requests are available through the `Request.cookies` and
    `Request.signedCookies` properties, which return objects whose properties correspond
    to the names of the cookies in the request. Signed cookies are easily detected
    because the `Response.cookie` method creates signed cookie values with the prefix
    `s.`, and the values are automatically verified using the secret key with which
    the middleware was configured.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请求中接收到的cookie通过`Request.cookies`和`Request.signedCookies`属性可用，这些属性返回的对象的属性对应于请求中cookie的名称。签名cookie很容易检测，因为`Response.cookie`方法使用前缀`s.`创建签名cookie值，并且使用与中间件配置的密钥自动验证这些值。
- en: The changes in *Listing 13.10* don’t change the behavior of the application,
    but the cookies have a different format, and cookies created using the custom
    code won’t pass verification.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单13.10*中的更改不会改变应用程序的行为，但cookie的格式不同，使用自定义代码创建的cookie无法通过验证。'
- en: Using sessions
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用会话
- en: Cookies are suited to storing small amounts of data, but that data has to be
    sent to the application with every request, and any changes to that data have
    to be signed and sent in the response.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Cookies适合存储少量数据，但每次请求都必须将数据发送到应用程序，并且对数据的任何更改都必须签名并发送在响应中。
- en: An alternative is to have the application store the data and include just a
    reference to that data in the cookie. This allows larger amounts of data to be
    stored without that data being included in every request and response.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一种替代方案是让应用程序存储数据，并在cookie中仅包含对该数据的引用。这样可以在不将数据包含在每个请求和响应中的情况下存储更多数据。
- en: Session data can be stored as a set of key/value pairs, which makes it easy
    to use JavaScript objects to represent data. I am going to start by creating a
    memory-based session system and then introduce persistent storage with a database,
    using a repository layer to make the transition easier. Create the `src/server/sessions`
    folder and add to it a file named `repository.ts` with the content shown in *Listing
    13.11*.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 会话数据可以存储为键/值对集合，这使得使用JavaScript对象表示数据变得容易。我将首先创建一个基于内存的会话系统，然后介绍使用数据库的持久化存储，通过仓库层使转换更容易。创建`src/server/sessions`文件夹，并向其中添加一个名为`repository.ts`的文件，其内容如*清单13.11*所示。
- en: 'Listing 13.11: The contents of the repository.ts file in the src/server/sessions
    folder'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 清单13.11：src/server/sessions文件夹中repository.ts文件的内容
- en: '[PRE22]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `SessionRepository` interface defines methods for creating a session, retrieving
    a previously stored session, and saving or updating a session. The `Session` type
    defines the minimum requirements for a `Session`, which entails an ID and a `data`
    property that can be assigned arbitrary data indexed by string values.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`SessionRepository`接口定义了创建会话、检索先前存储的会话以及保存或更新会话的方法。`Session`类型定义了`Session`的最小要求，包括一个ID和一个可以分配任意数据（通过字符串值索引）的`data`属性。'
- en: To create a memory-based implementation of the interface, add a file named `memory_repository.ts`
    to the `src/server/sessions` folder with the content shown in *Listing 13.12*.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建基于内存的接口实现，请将一个名为`memory_repository.ts`的文件添加到`src/server/sessions`文件夹中，其内容如*清单13.12*所示。
- en: 'Listing 13.12: The contents of the memory_repository.ts file in the src/server/sessions
    folder'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 清单13.12：src/server/sessions文件夹中memory_repository.ts文件的内容
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The Node.js `crypto` package defines the `randomUUID` function, which generates
    unique IDs that are suitable for use as session IDs. The rest of the implementation
    uses a `Map` to store `Session` objects, which are checked for expiration when
    they are read.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js的`crypto`包定义了`randomUUID`函数，该函数生成适合用作会话ID的唯一ID。其余的实现使用`Map`来存储`Session`对象，当读取时检查它们的过期情况。
- en: 'One point of note is that the `getSession` method doesn’t return the `Session`
    from the store, but instead creates a new object, like this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，`getSession`方法不返回存储中的`Session`，而是创建一个新的对象，如下所示：
- en: '[PRE24]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `structuredClone` function is part of the standard JavaScript API and it
    creates a deep copy of an object. Session data should only be modified for `POST`
    requests because the other HTTP methods are idempotent and creating new objects
    makes it easy to discard changes that are accidentally made for other HTTP methods,
    which you will see in the next section. This is an issue only when storing states
    as JavaScript objects, where the `Session` object associated with the request
    is the same as the one in the store. It doesn’t arise when session data is stored
    in a database.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`structuredClone` 函数是标准 JavaScript API 的一部分，它创建一个对象的深拷贝。会话数据仅应在 `POST` 请求中修改，因为其他
    HTTP 方法是幂等的，创建新对象使得丢弃因意外为其他 HTTP 方法所做的更改变得容易，这将在下一节中看到。这仅在将状态作为 JavaScript 对象存储时是一个问题，其中与请求关联的
    `Session` 对象与存储中的对象相同。当会话数据存储在数据库中时不会出现这个问题。'
- en: Creating the session middleware
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建会话中间件
- en: Sessions need to be stored after the response has been generated so that any
    changes made to the session data are not lost, and that can most easily be done
    by creating an Express middleware component. Add a file `middleware.ts` to the
    `src/server/sessions` folder with the content shown in *Listing 13.13*.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成响应后需要存储会话，以便不会丢失对会话数据的任何更改，这可以通过创建一个 Express 中间件组件最简单地完成。将名为 `middleware.ts`
    的文件添加到 `src/server/sessions` 文件夹中，内容如 *列表 13.13* 所示。
- en: 'Listing 13.13: The contents of the middleware.ts file in the src/server/sessions
    folder'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 13.13：src/server/sessions 文件夹中 middleware.ts 文件的内容
- en: '[PRE25]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This middleware component reads a cookie that contains a session ID and uses
    it to get the session from the repository and associate it with the `Request`
    object by adding a property named `session`. If there is no cookie, or no session
    can be found with the ID, then a new session is started.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此中间件组件读取包含会话 ID 的 cookie，并使用它从存储库中获取会话，并通过添加名为 `session` 的属性将其与 `Request` 对象关联。如果没有
    cookie，或者无法找到具有该 ID 的会话，则启动一个新的会话。
- en: The session can only be safely stored once the response has been generated and
    when it is certain that no further changes will be made. The `finish` event is
    triggered once a response is complete, and the `once` method is used to handle
    the event and store the session.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在响应生成并且确定不会进行进一步更改后，会话才能安全地存储。一旦响应完成，就会触发 `finish` 事件，并使用 `once` 方法来处理事件并存储会话。
- en: Sessions are only stored for HTTP `POST` requests and when properties have been
    assigned to the `data` object. For other HTTP methods, the `touchSession` method
    is used to extend the session expiry time but the session data isn’t stored.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 会话仅存储在 HTTP `POST` 请求中，并且当属性已被分配给 `data` 对象时。对于其他 HTTP 方法，使用 `touchSession`
    方法来延长会话过期时间，但会话数据不会存储。
- en: Updating the session expiry after every request creates a *sliding expiry*,
    which means that the session can remain valid indefinitely. This is the most common
    approach because it means sessions are valid for as long as the user is active
    and will time out after a period of inactivity.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次请求后更新会话过期时间会创建一个 *滑动过期*，这意味着会话可以无限期地保持有效。这是最常见的方法，因为它意味着会话在用户活跃期间有效，并在一段时间的不活跃后超时。
- en: Using the session feature
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用会话功能
- en: 'The middleware component adds a `session` property to requests, but this isn’t
    a part of the standard Express `Request` type and isn’t known by the TypeScript
    compiler. There are two good ways to solve this problem: a helper function that
    reads the `session` property or a new type that extends the one provided by Express.
    Add a file named `session_helpers.ts` to the `src/server/sessions` folder with
    the content shown in *Listing 13.14*.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件组件向请求添加 `session` 属性，但这不是标准 Express `Request` 类型的一部分，并且 TypeScript 编译器也不知道。有两种很好的方法可以解决这个问题：一个读取
    `session` 属性的辅助函数或一个扩展 Express 提供的类型的新类型。将名为 `session_helpers.ts` 的文件添加到 `src/server/sessions`
    文件夹中，内容如 *列表 13.14* 所示。
- en: 'Listing 13.14: The contents of the session_helpers.ts file in the src/server/sessions
    folder'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 13.14：src/server/sessions 文件夹中 session_helpers.ts 文件的内容
- en: '[PRE26]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `getSession` function receives a `Request` object and returns the `session`
    property by using `as any` to work around the TypeScript type checks. The `declare`
    keyword is used to tell TypeScript that the `Request` interface has an additional
    property.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`getSession` 函数接收一个 `Request` 对象，并通过使用 `as any` 来绕过 TypeScript 类型检查，返回 `session`
    属性。使用 `declare` 关键字告诉 TypeScript，`Request` 接口有一个额外的属性。'
- en: Of the two approaches, my preference is the helper function, which isn’t as
    elegant, but which is more easily understood and makes it obvious how the `Session`
    object is being obtained. *Listing 13.15* applies both approaches to switch from
    storing session data in the cookie to using the session repository.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种方法中，我更倾向于辅助函数，它可能没有那么优雅，但更容易理解，并且清楚地说明了如何获取`Session`对象。*列表13.15*展示了如何将存储在cookie中的会话数据切换到使用会话仓库。
- en: 'Listing 13.15: Using the session repository in the forms.ts file in the src/server
    folder'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 列表13.15：`src/server`文件夹中`forms.ts`文件中使用会话仓库的内容
- en: '[PRE27]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The changes enable the session middleware and store the user’s history using
    the new session feature. Once again, there is no change in the way the application
    behaves, because the changes are invisible to the user. As the form is submitted,
    the cookie sent by the browser is used to load the session data from the repository,
    which is used in the response, as shown in *Figure 13.4*.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改使得会话中间件能够存储用户的历史记录，并使用新的会话功能。再次强调，应用程序的行为没有变化，因为用户看不到这些更改。当表单提交时，浏览器发送的cookie用于从仓库加载会话数据，这些数据用于响应，如*图13.4*所示。
- en: '![](img/B21959_13_04.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21959_13_04.png)'
- en: 'Figure 13.4: Using session data'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4：使用会话数据
- en: Storing session data in a database
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在数据库中存储会话数据
- en: Storing session data in memory is a good way to understand how the pieces fit
    together but isn’t ideal for real projects where more persistent storage is usually
    required. The conventional approach is to store session data in a database, which
    ensures that sessions are persistent, and allows for large numbers of sessions
    without exhausting system memory.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在内存中存储会话数据是理解各个部分如何组合的好方法，但并不适合需要更多持久存储的真实项目。传统方法是将会话数据存储在数据库中，这确保了会话的持久性，并且允许存储大量会话而不会耗尽系统内存。
- en: Add a file named `orm_models.ts` to the `src/server/sessions` folder, with the
    content shown in *Listing 13.16*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在`src/server/sessions`文件夹中添加一个名为`orm_models.ts`的文件，内容如*列表13.16*所示。
- en: 'Listing 13.16: The contents of the orm_models.ts file in the src/server/sessions
    folder'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 列表13.16：`src/server/sessions`文件夹中`orm_models.ts`文件的内容
- en: '[PRE28]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: A single model class can represent a session and the IDs generated by the `crypto.randomUUID`
    function can be used as primary keys. Sequelize has good support for working with
    JavaScript dates and will automatically serialize and deserialize objects when
    the type of a column is `DataTypes.JSON`. To create a session repository, add
    a file named `orm_repository.ts` in the `src/server/sessions` folder, with the
    content shown in *Listing 13.17*.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 单个模型类可以表示一个会话，由`crypto.randomUUID`函数生成的ID可以用作主键。Sequelize对处理JavaScript日期有很好的支持，并且当列的类型为`DataTypes.JSON`时，会自动序列化和反序列化对象。要创建会话仓库，在`src/server/sessions`文件夹中添加一个名为`orm_repository.ts`的文件，内容如*列表13.17*所示。
- en: '**Note**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: The `initModelAndDatabase` method in *Listing 13.17* calls the `drop` method,
    which will reset the database every time the application is started or restarted.
    This should not be done in a real project, but it is helpful for an example and
    ensures that any changes in the code files will be reflected in the database.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表13.17*中的`initModelAndDatabase`方法调用`drop`方法，每次应用程序启动或重启时都会重置数据库。在实际项目中不应这样做，但对于示例来说很有帮助，并确保代码文件中的任何更改都会反映在数据库中。'
- en: 'Listing 13.17: The contents of the orm_repository.ts file in the src/server/sessions
    folder'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 列表13.17：`src/server/sessions`文件夹中`orm_repository.ts`文件的内容
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The repository is similar to the one created for application data, but there
    are a couple of points that show how an ORM (Object Relational Mapping) like Sequelize
    can simplify dealing with a database, albeit with awkward JavaScript code. The
    `getSession` method queries the database to find a row with a given primary key
    and an expiry date in the future, which is done using the `findOne` method and
    a `where` expression, like this:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库与为应用程序数据创建的仓库类似，但有几个要点展示了像Sequelize这样的ORM（对象关系映射）如何简化数据库操作，尽管JavaScript代码可能有些笨拙。`getSession`方法通过`findOne`方法和`where`表达式查询数据库，以找到具有给定主键和未来到期日期的行，如下所示：
- en: '[PRE30]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `Op.gt` value represents a greater comparison and allows the search to match
    rows where the date stored in the `expires` column is greater than the current
    date. This isn’t the most natural way to express queries, but it works and allows
    queries to be expressed without needing to write SQL.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`Op.gt`值表示大于的比较，允许搜索匹配`expires`列中存储的日期大于当前日期的行。这不是表达查询最自然的方式，但它有效，并且允许在不编写SQL的情况下表达查询。'
- en: The Sequelize `upsert` method is used to update a data row if it exists and
    insert one if not, which makes it easy to implement the `saveSession` method.
    The `touchSession` method is implemented with the `update` method, which allows
    specific columns to be updated.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Sequelize的`upsert`方法用于在存在时更新数据行，不存在时插入一行，这使得实现`saveSession`方法变得容易。`touchSession`方法通过`update`方法实现，允许更新特定的列。
- en: '**Note**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: I have not added any support for deleting expired sessions in this chapter.
    As a rule, I avoid deleting any data automatically because it is easy for things
    to go wrong. Storage space is relatively affordable but if you need to actively
    manage the size of the session database, then backing up before a manual cleanup
    is a safer option.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本章中没有添加删除过期会话的支持。一般来说，我避免自动删除任何数据，因为出错的可能性很大。存储空间相对便宜，但如果需要积极管理会话数据库的大小，那么在手动清理之前进行备份是一个更安全的选项。
- en: The final step is to update the session middleware to use the new repository,
    as shown in *Listing 13.18*.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将会话中间件更新为使用新的存储库，如*清单13.18*所示。
- en: 'Listing 13.18: Changing repository in the middleware.ts file in the src/server/sessions
    folder'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 列表13.18：在src/server/sessions文件夹中的middleware.ts文件中更改存储库
- en: '[PRE31]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: No other change is required to use the database because the new repository implements
    the same interface as the old one.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据库不需要进行其他更改，因为新存储库实现了与旧存储库相同的接口。
- en: 'The key difference is that you will see the database queries being logged by
    the Node.js console as the application is running, starting with the statement
    that creates the database table:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 关键区别在于，你将看到在应用程序运行时，Node.js控制台会记录数据库查询，从创建数据库表的语句开始：
- en: '[PRE32]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: No SQL was required to prepare or query the database and the process of creating
    and parsing JSON is handled automatically.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 准备或查询数据库不需要SQL，创建和解析JSON的过程由系统自动处理。
- en: Using a package for sessions
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用会话包
- en: Now that you understand how sessions work, it is time to replace the custom
    code with an off-the-shelf sessions package, such as the one provided by Express.
    Run the commands shown in *Listing 13.19* in the `part2app` folder to install
    the sessions package, the type description package for its API, and a package
    that stores sessions in a database using Sequelize. (There is a wide range of
    database options for the express-sessions package, described at [https://github.com/expressjs/session](https://github.com/expressjs/session)).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了会话的工作原理，是时候用现成的会话包替换自定义代码了，例如Express提供的包。在`part2app`文件夹中运行*清单13.19*中显示的命令来安装会话包、其API的类型描述包以及使用Sequelize存储会话的包。（express-sessions包有广泛的数据库选项，描述在[https://github.com/expressjs/session](https://github.com/expressjs/session)）。
- en: 'Listing 13.19: Installing packages'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 列表13.19：安装包
- en: '[PRE33]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '*Listing 13.20* prepares the application to use the session package and the
    storage package.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '*清单13.20*为应用程序使用会话包和存储包做准备。'
- en: 'Listing 13.20: Using the session package in the session_helpers.ts file in
    the src/server/sessions folder'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 列表13.20：在src/server/sessions文件夹中的session_helpers.ts文件中使用会话包
- en: '[PRE34]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Adjustments are required to use the package, including *commenting out* the
    `declare` statement that adds the `Request.session` property because there is
    a similar statement defined by the `express-session` package.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该包需要调整，包括注释掉添加`Request.session`属性的`declare`语句，因为`express-session`包中已定义了类似的语句。
- en: A new `declare` statement is required to add custom properties to the `SessionData`
    object, which is the type used to represent session data by the package. There
    is a `Session` type, but it serves a purpose similar to the wrapper type employed
    by the custom code. In this case, a `personHistory` property has been added to
    minimize the changes required to use the package.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一个新的`declare`语句来向`SessionData`对象添加自定义属性，这是该包用来表示会话数据的类型。存在一个`Session`类型，但它与自定义代码使用的包装类型具有类似的作用。在这种情况下，已添加了一个`personHistory`属性，以最小化使用该包所需进行的更改。
- en: The `sessionMiddleware` function creates a `Sequelize` object that uses SQLite
    and uses it to create a store for session data using the `connect-session-sequelize`
    package. The `sync` method is called to initialize the database, and the default
    export from the `express-session` package is used to create a middleware component.
    The configuration options for the session store are described at [https://github.com/expressjs/session](https://github.com/expressjs/session),
    but the configuration in *Listing 13.20* specifies the secret key for signing
    cookies, the Sequelize store, and the cookie settings so that the package behaves
    in the same way as the custom code. Small changes are required to use the session
    package, as shown in *Listing 13.21*.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`sessionMiddleware`函数创建一个使用SQLite的`Sequelize`对象，并使用它通过`connect-session-sequelize`包创建会话数据的存储。调用`sync`方法来初始化数据库，并使用`express-session`包的默认导出创建一个中间件组件。会话存储的配置选项在[https://github.com/expressjs/session](https://github.com/expressjs/session)中描述，但*列表13.20*中的配置指定了签名Cookies的密钥、Sequelize存储和cookie设置，以便该包的行为与自定义代码相同。要使用会话包，需要进行一些小的更改，如*列表13.21*所示。'
- en: '**Note**'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: The `cookie-parser` package can be used in the same application as the `express-session`
    package, but you must ensure that both are configured with the same secret key.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在同一个应用程序中使用`cookie-parser`包和`express-session`包，但必须确保两者都配置了相同的密钥。
- en: 'Listing 13.21: Using the session package in the forms.ts file in the src/server
    folder'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 列表13.21：在src/server文件夹中的forms.ts文件中使用session包
- en: '[PRE35]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The changes replace the custom middleware and read the `personalHistory` property
    directly on the object returned by the `session` property. The schema of the database
    used to store sessions is different, which you can see in the SQL statements that
    are written out by the Node.js console, but otherwise, the behavior of the application
    is unchanged.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更改替换了自定义中间件，并直接在由`session`属性返回的对象上读取`personalHistory`属性。用于存储会话的数据库模式不同，您可以在Node.js控制台输出的SQL语句中看到这一点，但除此之外，应用程序的行为保持不变。
- en: Summary
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, I explained how an application can use cookies to correlate
    HTTP requests to create a stateful user experience over a stateless protocol:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我解释了应用程序如何使用Cookies将HTTP请求关联起来，在无状态的协议上创建有状态的用户体验：
- en: Cookies are created by adding the `Set-Cookie` header to responses.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在响应中添加`Set-Cookie`头创建Cookies。
- en: Browers include cookies in requests with the `Cookie` header.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器在请求中包含Cookies，使用`Cookie`头。
- en: Cookies are configured using cookie attributes, including setting an expiration
    time, after which the browser will no longer include the cookie in requests.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用cookie属性配置Cookies，包括设置一个过期时间，在此之后，浏览器将不再在请求中包含该cookie。
- en: Cookies can be signed, which reveals when they have been altered.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cookies可以被签名，这揭示了它们何时被更改。
- en: Cookies can be used to store small amounts of data, but this data must then
    be repeatedly transferred between the browser and the server.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cookies可以用来存储少量数据，但随后必须反复在浏览器和服务器之间传输这些数据。
- en: Cookies can also be used to store session IDs, which are used to load data stored
    by the server. This makes the server more complicated but means that only the
    ID is transferred between the browser and the server.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cookies也可以用来存储会话ID，这些ID用于加载服务器存储的数据。这使得服务器更加复杂，但意味着只有ID在浏览器和服务器之间传输。
- en: In the next chapter, I will describe how RESTful web services can be used to
    provide data to clients without including HTML.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我将描述如何使用RESTful Web服务提供数据给客户端，而不包括HTML。
