["```js\nExt.define('MyApp.SessionManager', {\n    login: function(username, password) {\n        User.login(username, password, {\n            success: Ext.bind(this.loginSuccess, this)\n        });\n    },\n    loginSuccess: function() {\n        this.isLoggedIn = true;\n    }\n});\n```", "```js\nloginSuccess: function(userDetails) {\n    this.setUser(userDetails);\n},\n\nisUserLoggedIn: function() {\n    return window.localStorage.getItem('user') === null;\n},\n\nsetUser: function(userDetails) {\n    window.localStorage.setItem('user', Ext.encode(userDetails));\n},\n\ngetUser: function() {\n    return Ext.decode(window.localStorage.getItem('user'));\n}\n```", "```js\n// model/Artist.js\nExt.define('MyApp.model.Artist.', {\n    extend: 'Ext.data.Model',\n\n    fields: [\n         { name: 'name', type: 'string' }\n    ]\n});\n\n// model/Album.js\nExt.define('MyApp.model.Album', {\n    extend: 'Ext.data.Model',\n\n    fields: [\n         { name: 'name', type: 'string' },\n         { name: 'artist', reference: 'Artist' }\n    ],\n    getRunningTime: function() {\n          return this.tracks().sum('lengthInMs');\n    }\n});\n\n// model/Track.js\nExt.define('MyApp.model.Track.', {\n    extend: 'Ext.data.Model',\n\n    fields: [\n         { name: 'title', type: 'string' },\n         { name: 'lengthInMs', type: 'integer' },\n         { name: 'album', reference: 'Album' }\n    ]\n});\n```", "```js\n// View a working version at https://fiddle.sencha.com/#fiddle/90s\n\n// Basic JSON sample data\nvar sampleData = { data: [\n    { \"firstName\": \"Jack\", \"surname\": \"Slocum\" },\n    { \"firstName\": \"Shea\", \"surname\": \"Frederick\" },\n    { \"firstName\": \"Colin\", \"surname\": \"Ramsay\" },\n    { \"firstName\": \"Steve\", \"middle\": \"Cutter\", \"surname\": \"Blades\" },\n    { \"firstName\": \"Nigel\", \"surname\": \"White\" },\n] };\n\n// Create a store to hold our JSON data\nvar userStore = new Ext.data.JsonStore({\n    data: sampleData,\n    root: 'data',\n    fields: ['firstName', 'middle', 'surname']\n});\n\n// Grid panel using the store, setting the columns to match the incoming data\nvar grid = new Ext.grid.GridPanel({\n    store: userStore,\n    colModel: new Ext.grid.ColumnModel({\n        defaults: {\n            width: 120,\n            sortable: true\n        },\n        columns: [\n            { header: 'First Name', dataIndex: 'firstName' },\n            { header: 'Middle', dataIndex: 'middle' },\n            { header: 'Surname', dataIndex: 'surname' }\n        ]\n    }),\n    viewConfig: {\n        forceFit: true\n    },\n    width: 600,\n    height: 300,\n    frame: true\n});\n\n// Event handler to do something when the user clicks a row\ngrid.on('rowclick', function(g, idx) {\n    Ext.Msg.alert('Alert', 'You clicked on the row at index ' + idx);\n});\n\n// Render the grid to the viewport\ngrid.render(document.body);\n```", "```js\n# sample gitignore for extjs5\n# The build directory can be recreated by developers using Sencha Cmd – it should be excluded from the repo\nbuild/\n# Changes every time a build is run\nbootstrap.js\nbootstrap.css\n\n# Temporary files created when compiling .scss files\n.sass-cache/\n\n# Some team members may use Sencha architect – exclude so they keep their custom settings\n.architect\n\n# It's possible to create reusable packages using Sencha Cmd but depending on your preference you might want to exclude this directory. Packages are discussed in chapter 3.\npackages/\n```", "```js\nExt.define('MyApp.controller.MyController', {\n    extend: 'Ext.app.Controller',\n\n    requires: [\n        'MyApp.store.Albums'\n    ],\n\n    getAlbumsStore: function() {\n        return this.getStore('Albums');\n    }\n});\n```", "```js\nExt.define('MyApp.controller.MyController', {\n    extend: 'Ext.app.Controller',\n\n    stores: ['Albums']\n});\n```"]