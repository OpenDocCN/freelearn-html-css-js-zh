["```js\nconsole.log('Hello, World!');\n```", "```js\nnode src/01-intro/01-hello-variables.js\n```", "```js\nvar num = 1;\nnum = 'one' ;\nlet myVar = 2;\nmyVar = 4;\nconst price = 1.5;\n```", "```js\nconst price = 1.5; // number\nconst publisher = 'Packt'; // string\nconst javaScriptBook = true; // boolean\nconst nullVar = null; // null\nlet und; // undefined\n```", "```js\nconsole.log('price: ' + price);\nconsole.log('publisher: ' + publisher);\nconsole.log('javaScriptBook: ' + javaScriptBook);\nconsole.log('nullVar: ' + nullVar);\nconsole.log('und: ' + und);\n```", "```js\nconsole.log('typeof price: ', typeof price); // number\nconsole.log('typeof publisher: ', typeof publisher); // string\nconsole.log('typeof javaScriptBook: ', typeof javaScriptBook); // boolean\nconsole.log('typeof nullVar: ', typeof nullVar); // object\nconsole.log('typeof und: ', typeof und); // undefined\n```", "```js\nconst book = {\n  title: 'Data Structures and Algorithms',\n}\n```", "```js\nconsole.log('book title: ', book.title);\n```", "```js\nbook.title = 'Data Structures and Algorithms in JavaScript';\n// book = {anotherTitle:'Data Structures'} this will not work\n```", "```js\nlet book2 = {\n  title: 'Data Structures and Algorithms',\n}\nbook2 = { title: 'Data Structures' };\n```", "```js\nconst title = Symbol('title');\nconst book3 = {\n  [title]: 'Data Structures and Algorithms'\n};\nconsole.log(book3[title]); // Data Structures and Algorithms\n```", "```js\nlet number = 0;\nif (number === 1) {\n  console.log('number is equal to 1');\n} else {\n  console.log('number is not equal to 1, the value of number is ' + number);\n}\n```", "```js\nif (number === 1) {\n  number--;\n} else {\n  number++;\n}\n```", "```js\nnumber === 1 ? number-- : number++;\n```", "```js\nnumber = number === 1 ? number - 1 : number + 1;\n```", "```js\nlet month = 5;\nif (month === 1) {\n  console.log('January');\n} else if (month === 2) {\n  console.log('February');\n} else if (month === 3) {\n  console.log('March');\n} else {\n  console.log('Month is not January, February or March');\n}\n```", "```js\nswitch (month) {\n  case 1:\n    console.log('January');\n    break;\n  case 2:\n    console.log('February');\n    break;\n  case 3:\n    console.log('March');\n    break;\n  default:\n    console.log('Month is not January, February or March');\n}\n```", "```js\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n}\n```", "```js\nlet i = 0;\nwhile (i < 10) {\n  console.log(i);\n  i++;\n}\n```", "```js\ni = 0;\ndo {\n  console.log(i);\n  i++;\n} while (i < 10);\n```", "```js\nconst obj = { a: 1, b: 2, c: 3 };\nfor (const key in obj) {\n  console.log(key, obj[key]);\n}\n// output: a 1 b 2 c 3\n```", "```js\nconst arr = [1, 2, 3];\nfor (const value of arr) {\n  console.log(value);\n}\n// output: 1 2 3\n```", "```js\nfunction sayHello(name) {\n  console.log('Hello! ', name);\n}\n```", "```js\nsayHello('Packt');\n```", "```js\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n```", "```js\nconst result = sum(1, 2);\nconsole.log(result); // outputs 3\n```", "```js\nfunction sumDefault(num1, num2 = 2) { // num2 has a default value\n    return num1 + num2;\n}\nconsole.log(sumDefault(1)); // outputs 3\nconsole.log(sumDefault(1, 3)); // outputs 4\n```", "```js\nlet movie = 'Lord of the Rings';\nfunction starWarsFan() {\n  const movie = 'Star Wars';\n  return movie;\n}\nfunction marvelFan() {\n  movie = 'The Avengers';\n  return movie;\n}\n```", "```js\nconsole.log(movie); // Lord of the Rings\nconsole.log(starWarsFan()); // Star Wars\nconsole.log(marvelFan()); // The Avengers\nconsole.log(movie); // The Avengers\n```", "```js\nfunction blizzardFan() {\n  const isFan = true;\n  let phrase = 'Warcraft';\n  console.log('Before if: ' + phrase);\n  if (isFan) {\n    let phrase = 'initial text';\n    phrase = 'For the Horde!';\n    console.log('Inside if: ' + phrase);\n  }\n  phrase = 'For the Alliance!';\n  console.log('After if: ' + phrase);\n}\n```", "```js\nBefore if: Warcraft\nInside if: For the Horde!\nAfter if: For the Alliance!\n```", "```js\nlet obj = new Object();\n```", "```js\nobj = {};\n```", "```js\nobj = {\n  name: {\n    first: 'Gandalf',\n    last: 'the Grey'\n  },\n  address: 'Middle Earth'\n};\n```", "```js\nclass Book {\n  #percentagePerSale = 0.12;\n  constructor(title, pages, isbn) {\n    this.title = title;\n    this.pages = pages;\n    this.isbn = isbn;\n  }\n  get price() {\n    return this.pages * this.#percentagePerSale;\n  }\n  static copiesSold = 0;\n  static sellCopy() {\n    this.copiesSold++;\n  }\n  printIsbn() {\n    console.log(this.isbn);\n  }\n}\n```", "```js\nlet myBook = new Book('title', 400, 'isbn');\n```", "```js\nconsole.log(myBook.title); // outputs the book title\nmyBook.title = 'new title'; // update the value of the book title\nconsole.log(myBook.title); // outputs the updated value: new title\n```", "```js\nconsole.log(myBook.price); // 48\n```", "```js\nconsole.log(Book.copiesSold); // 0\nBook.sellCopy();\nconsole.log(Book.copiesSold); // 1\nBook.sellCopy();\nconsole.log(Book.copiesSold); // 2\n```", "```js\nclass Ebook extends Book {\n  constructor(title, pages, isbn, format) {\n    super(title, pages, isbn);\n    this.format = format;\n  }\n  printIsbn() {\n    console.log('Ebook ISBN:',this.isbn);\n  }\n}\nEbook.sellCopy();\nconsole.log(Ebook.copiesSold); // 3\n```", "```js\nconst myBook = new Book('title', 400, 'isbn');\nmyBook.printIsbn(); // isbn\nconst myEbook = new Ebook('DS Ebook', 401, 'isbn 123', 'pdf');\nmyEbook.printIsbn(); // Ebook ISBN: isbn 123\n```", "```js\nconst circleAreaFn = function(radius) { \n  const PI = 3.14; \n  const area = PI * radius * radius; \n  return area; \n};\nconsole.log(circleAreaFn(2)); // 12.56\n```", "```js\nconst circleArea = (radius) => {\n  const PI = 3.14; \n  return PI * radius * radius; \n};\n```", "```js\nconst circleAreaSimp = radius => 3.14 * radius * radius;\nconsole.log(circleAreaSimp(2)); // 12.56\n```", "```js\nconst hello = () => console.log('hello!');\nhello(); // hello!\n```", "```js\nconst sum = (x, y, z) => x + y + z;\n```", "```js\nconst numbers = [1, 2, 3];\nconsole.log(sum(...numbers)); // 6\n```", "```js\nconsole.log(sum.apply(null, numbers));\n```", "```js\nconst restParamaterFunction = (x, y, ...a) => (x + y) * a.length;\nconsole.log(restParamaterFunction(1, 2, 'hello', true, 7)); // 9\n```", "```js\nfunction restParamaterFunction(x, y) {\n  const a = Array.prototype.slice.call(arguments, 2);\n  return (x + y) * a.length;\n}\nconsole.log(restParamaterFunction(1, 2, 'hello', true, 7));\n```", "```js\nlet area = 3.14 * radius * radius; \n```", "```js\narea = 3.14 * Math.pow(radius, 2); \n```", "```js\narea = 3.14 * (radius ** 2); \n```", "```js\nnpm init\n```", "```js\n{\n  \"name\": \"javascript-datastructures-algorithms\",\n  \"version\": \"4.0.0\",\n  \"description\": \"Learning JavaScript Data Structures and Algorithms\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"Loiane Groner\"\n}\n```", "```js\nnpm install --save-dev typescript\n```", "```js\nnpm install\n```", "```js\nlet myName = 'Packt';\nmyName = 10;\n```", "```js\nnpx tsc src/01-intro/08-typescript.ts\n```", "```js\nsrc/01-intro/08-typescript.ts:4:1 - error TS2322: Type 'number' is not assignable to type 'string'.\n4 myName = 10;\n  ~~~~~~\nFound 1 error in src/01-intro/08-typescript.ts:4\n```", "```js\nvar myName = 'Packt';\nmyName = 10;\n```", "```js\nlet age: number = 20;\nlet existsFlag: boolean = true;\nlet language: string = 'JavaScript';\n```", "```js\nlet age = 20; // number\nlet existsFlag = true; // boolean\nlet language = 'JavaScript'; // string\n```", "```js\nlet favoriteLanguage: string;\nlet langs = ['JavaScript', 'Ruby', 'Python'];\nfavoriteLanguage = langs[0];\n```", "```js\ninterface Person {\n  name: string;\n  age: number;\n}\nfunction printName(person: Person) {\n  console.log(person.name);\n}\n```", "```js\nconst john = { name: 'John', age: 21 };\nconst mary = { name: 'Mary', age: 21, phone: '123-45678' };\nprintName(john);\nprintName(mary);\n```", "```js\nfunction printName(person) {\n    console.log(person.name);\n}\nvar john = { name: 'John', age: 21 };\nvar mary = { name: 'Mary', age: 21, phone: '123-45678' };\n```", "```js\ninterface Comparable {\n  compareTo(b): number;\n}\nclass MyObject implements Comparable {\n  age: number;\n\n  constructor(age: number) {\n    this.age = age;\n  }\n  compareTo(b): number {\n    if (this.age === b.age) {\n      return 0;\n    }\n    return this.age > b.age ? 1 : -1;\n  }\n}\n```", "```js\nfunction compareTwoObjects(a: Comparable, b: Comparable) {\n  console.log(a.compareTo(b));\n  console.log(b.compareTo(a));\n}\n```", "```js\ninterface Comparable<T> {\n  compareTo(b: T): number;\n}\n```", "```js\nclass MyObject implements Comparable<MyObject> {\n  age: number;\n\n  constructor(age: number) {\n    this.age = age;\n  }\n  compareTo(b: MyObject): number {\n    if (this.age === b.age) {\n      return 0;\n    }\n    return this.age > b.age ? 1 : -1;\n  }\n}\n```", "```js\nenum Compare {\n  LESS_THAN = -1,\n  BIGGER_THAN = 1,\n  EQUALS = 0\n}\nfunction compareTo(a: MyObject, b: MyObject): number {\n  if (a.age === b.age) {\n    return Compare.EQUALS;\n  }\n  return a.age > b.age ? Compare.BIGGER_THAN : Compare.LESS_THAN;\n}\n```", "```js\ntype UserID = string;\ntype User = {\n  id: UserID;\n  name: string;\n}\n```", "```js\n/**\n * Arrow function example, calculates the area of a circle\n * @param {number} radius\n * @returns\n */\n```"]