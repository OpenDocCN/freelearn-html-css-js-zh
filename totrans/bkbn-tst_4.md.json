["```js\nit(\"calls anonymous spy on event\", function () {\n  var eventer = _.extend({}, Backbone.Events),\n    spy = sinon.spy();\n\n  // Set up the spy.\n  eventer.on(\"foo\", spy);\n  expect(spy.called).to.be.false;\n\n  // Fire event.\n  eventer.trigger(\"foo\", 42);\n\n  // Check number of calls.\n  expect(spy.calledOnce).to.be.true;\n  expect(spy.callCount).to.equal(1);\n\n  // Check calling arguments.\n  expect(spy.firstCall.args[0]).to.equal(42);\n  expect(spy.calledWith(42)).to.be.true;\n});\n```", "```js\nit(\"verifies anonymous spy on event\", function () {\n  var eventer = _.extend({}, Backbone.Events),\n    spy = sinon.spy();\n\n  eventer.on(\"foo\", spy);\n  sinon.assert.notCalled(spy);\n\n  eventer.trigger(\"foo\", 42);\n  sinon.assert.callCount(spy, 1);\n  sinon.assert.calledWith(spy, 42);\n});\n```", "```js\nit(\"calls spy wrapper on function\", function () {\n  var divide = function (a, b) { return a / b; },\n    divAndSpy = sinon.spy(divide);\n\n  // Call wrapped function and verify result.\n  expect(divAndSpy(4, 2)).to.equal(2);\n\n  // Now, verify spy properties.\n  sinon.assert.calledOnce(divAndSpy);\n  sinon.assert.calledWith(divAndSpy, 4, 2);\n\n  // Sinon.JS doesn't have assert for returned.\n  expect(divAndSpy.returned(2)).to.be.true;\n});\n```", "```js\nvar obj = {\n  multiply: function (a, b) { return a * b; },\n  error: function (msg) { throw new Error(msg); }\n};\n```", "```js\nit(\"calls spy on wrapped object\", function () {\n  // Wrap members with `sinon` directly.\n  sinon.spy(obj, \"multiply\");\n  sinon.spy(obj, \"error\");\n\n  expect(obj.multiply(5, 2)).to.equal(10);â€©  sinon.assert.calledWith(obj.multiply, 5, 2);\n  expect(obj.multiply.returned(10)).to.be.true;\n\n  try {\n    obj.error(\"Foo\");\n  } catch (e) {}\n  sinon.assert.threw(obj.error, \"Error\");\n\n  // Have to restore after tests finish.\n  obj.multiply.restore();\n  obj.error.restore();\n});\n```", "```js\nit(\"calls spy with test helper\", sinon.test(function () {\n  // Wrap members using context (`this`) helper.\n  this.spy(obj, \"multiply\");\n  this.spy(obj, \"error\");\n\n  expect(obj.multiply(5, 2)).to.equal(10);\n  sinon.assert.calledWith(obj.multiply, 5, 2);\n  expect(obj.multiply.returned(10)).to.be.true;\n\n  try {\n    obj.error(\"Foo\");\n  } catch (e) {}\n  sinon.assert.threw(obj.error, \"Error\");\n\n  // No restore is necessary.\n}));\n```", "```js\nexpect(obj.multiply.calledWith(5, 2)).to.be.true;\n```", "```js\nsinon.assert.calledWith(obj.multiply, 5, 2);\n```", "```js\nexpect(obj.multiply).to.be.calledWith(5, 2);\n```", "```js\n<!-- JavaScript Test Libraries. -->\n<script src=\"img/mocha.js\"></script>\n<script src=\"img/chai.js\"></script>\n<script src=\"img/sinon-chai.js\"></script>\n<script src=\"img/sinon.js\"></script>\n```", "```js\n    expect(spy).to.always.have.been.calledWith(arg1, arg2, ...);\n    expect(spy).to.have.always.returned(returnVal);\n    expect(spy).to.have.always.thrown();\n    ```", "```js\nit(\"calls spy with chai plugin\", sinon.test(function () {\n  this.spy(obj, \"multiply\");\n  this.spy(obj, \"error\");\n\n  expect(obj.multiply(5, 2)).to.equal(10);\n  expect(obj.multiply).to.have.been.calledWith(5, 2);\n  expect(obj.multiply).to.have.returned(10);\n\n  try { obj.error(\"Foo\"); } catch (e) {}\n  expect(obj.error).to.have.thrown(\"Error\");\n}));\n```", "```js\n<ul id=\"note-nav\"\n  class=\"nav region region-note\"\n  style=\"display: none;\">\n  <li class=\"note-view active\">View</li>\n  <li class=\"note-edit\">Edit</li>\n  <li class=\"note-delete\">Delete</li>\n</ul>\n```", "```js\nApp.Views.NoteNav = Backbone.View.extend({\n\n  el: \"#note-nav\",\n```", "```js\n  events: {\n    \"click .note-view\":   \"clickView\",\n    \"click .note-edit\":   \"clickEdit\",\n    \"click .note-delete\": \"clickDelete\",\n  },\n\n  initialize: function () {\n    // Defaults for nav.\n    this.$(\"li\").removeClass(\"active\");\n\n    // Update the navbar UI for view/edit (not delete).\n    this.on({\n      \"nav:update:view\": this.updateView,\n      \"nav:update:edit\": this.updateEdit\n    });\n  },\n```", "```js\n  updateView: function () {\n    this.$(\"li\").not(\".note-view\").removeClass(\"active\");\n    this.$(\".note-view\").addClass(\"active\");\n  },\n  updateEdit: function () {\n    this.$(\"li\").not(\".note-edit\").removeClass(\"active\");\n    this.$(\".note-edit\").addClass(\"active\");\n  },\n```", "```js\n  clickView: function () {\n    this.trigger(\"nav:update:view nav:view\");\n    return false;\n  },\n  clickEdit: function () {\n    this.trigger(\"nav:update:edit nav:edit\");\n    return false;\n  },\n  clickDelete: function () {\n    this.trigger(\"nav:update:delete nav:delete\");\n    return false;\n  }\n});\n```", "```js\ndescribe(\"App.Views.NoteNav\", function () {\n  before(function () {\n    this.$fixture = $(\n      \"<ul id='note-nav'>\" +\n        \"<li class='note-view'></li>\" +\n        \"<li class='note-edit'></li>\" +\n        \"<li class='note-delete'></li>\" +\n      \"</ul>\"\n    );\n  });\n\n  beforeEach(function () {\n    this.$fixture.appendTo($(\"#fixtures\"));\n    this.view = new App.Views.NoteNav({\n      el: this.$fixture\n    });\n  });\n\n  afterEach(function () {\n    this.view.remove();\n  });\n\n  after(function () {\n    $(\"#fixtures\").empty();\n  });\n```", "```js\n  describe(\"events\", function () {\n    it(\"fires events on 'view' click\", function () {\n      var navSpy = sinon.spy(),\n        updateSpy = sinon.spy(),\n        otherSpy = sinon.spy();\n\n      this.view.on({\n        \"nav:view\": navSpy,\n        \"nav:update:view\": updateSpy,\n        \"nav:edit nav:update:edit\": otherSpy,\n        \"nav:delete nav:update:delete\": otherSpy\n      });\n\n      this.$fixture.find(\".note-view\").click();\n\n      expect(navSpy).to.have.been.calledOnce;\n      expect(updateSpy).to.have.been.calledOnce;\n      expect(otherSpy).to.not.have.been.called;\n    });\n  });\n```", "```js\n  describe(\"menu bar display\", function () {\n    it(\"has no active navs by default\", function () {\n      // Check no list items are active.\n      expect(this.view.$(\"li.active\")).to.have.length(0);\n\n      // Another way - manually check each list nav.\n      expect($(\".note-view\")\n        .attr(\"class\")).to.not.include(\"active\");\n      expect($(\".note-edit\")\n        .attr(\"class\")).to.not.include(\"active\");\n      expect($(\".note-delete\")\n        .attr(\"class\")).to.not.include(\"active\");\n    });\n```", "```js\n    it(\"updates nav on 'edit' click\", function () {\n      $(\".note-edit\").click();\n      expect($(\".note-edit\").attr(\"class\")).to.include(\"active\");\n    });\n\n    it(\"updates nav on 'edit' event\", function () {\n      this.view.trigger(\"nav:update:edit\");\n      expect($(\".note-edit\").attr(\"class\")).to.include(\"active\");\n    });\n  });\n});\n```", "```js\nApp.Templates[\"template-note\"] =\n  \"<div id=\\\"note-pane-view\\\" class=\\\"pane\\\">\" +\n  \"  <div id=\\\"note-pane-view-content\\\"></div>\" +\n  \"</div>\" +\n  \"<div id=\\\"note-pane-edit\\\" class=\\\"pane\\\">\" +\n  \"  <form id=\\\"note-form-edit\\\">\" +\n  \"    <input id=\\\"input-title\\\" class=\\\"input-block-level\\\"\" +\n  \"           type=\\\"text\\\" placeholder=\\\"title\\\"\" +\n  \"           value=\\\"<%= title %>\\\">\" +\n  \"    <textarea id=\\\"input-text\\\" class=\\\"input-block-level\\\"\" +\n  \"              rows=\\\"15\\\"><%= text %></textarea>\" +\n  \"  </form>\" +\n  \"</div>\";\n```", "```js\nApp.Views.Note = Backbone.View.extend({\n\n  id: \"note-panes\",\n\n  template: _.template(App.Templates[\"template-note\"]),\n\n  events: {\n    \"blur   #note-form-edit\": \"saveNote\",\n    \"submit #note-form-edit\": function () { return false; }\n  },\n```", "```js\ninitialize: function (attrs, opts) {\n    opts || (opts = {});\n    this.nav = opts.nav;\n    this.router = opts.router || app.router;\n\n    // Add our custom listeners.\n    this._addListeners();\n\n    // Render HTML, update to action, and show note.\n    this.$el.html(this.template(this.model.toJSON()));\n    this.update(opts.action || \"view\");\n    this.render();\n\n    // Add in viewer child view (which auto-renders).\n    this.noteView = new App.Views.NoteView({\n      el: this.$(\"#note-pane-view-content\"),\n      model: this.model\n    });\n  },\n```", "```js\n  _addListeners: function () {\n    // Model controls view rendering and existence.\n    this.listenTo(this.model, {\n      \"destroy\": function () { this.remove(); },\n      \"change\":  function () { this.render().model.save(); }\n    });\n\n    // Navbar controls/responds to panes.\n    this.listenTo(this.nav, {\n      \"nav:view\":   function () { this.viewNote(); },\n      \"nav:edit\":   function () { this.editNote(); },\n      \"nav:delete\": function () { this.deleteNote(); }\n    });\n\n    // Respond to update events from router.\n    this.on({\n      \"update:view\": function () { this.render().viewNote(); },\n      \"update:edit\": function () { this.render().editNote(); }\n    });\n  },\n```", "```js\n  // Rendering the note is simply showing the active pane.\n  // All HTML should already be rendered during initialize.\n  render: function () {\n    $(\".region\").not(\".region-note\").hide();\n    $(\".region-note\").show();\n    return this;\n  },\n```", "```js\n  remove: function () {\n    // Remove child, then self.\n    this.noteView.remove();\n    Backbone.View.prototype.remove.call(this);\n  },\n```", "```js\n  update: function (action) {\n    action = action || this.action || \"view\";\n    var paneEl = \"#note-pane-\" + action,\n      loc = \"note/\" + this.model.id + \"/\" + action;\n\n    // Ensure menu bar is updated.\n    this.nav.trigger(\"nav:update:\" + action);\n\n    // Show active pane.\n    this.$(\".pane\").not(paneEl).hide();\n    this.$(paneEl).show();\n\n    // Store new action and navigate.\n    if (this.action !== action) {\n      this.action = action;\n      this.router.navigate(loc, { replace: true });\n    }\n  },\n```", "```js\n  viewNote: function () {\n    this.update(\"view\");\n  },\n  editNote: function () {\n    this.update(\"edit\");\n  },\n  deleteNote: function () {\n    if (confirm(\"Delete note?\")) {\n      this.model.destroy();\n      this.router.navigate(\"\", { trigger: true, replace: true });\n    }\n  },\n```", "```js\n  saveNote: function () {\n    this.model.set({\n      title: this.$(\"#input-title\").val().trim(),\n      text: this.$(\"#input-text\").val().trim()\n    });\n  }\n});\n```", "```js\ndescribe(\"App.Views.Note\", function () {\n\n  before(function () {\n    // Regions for different views.\n    $(\"#fixtures\").append($(\n      \"<div class='region-note' style='display: none;'></div>\" +\n      \"<div class='region-notes' style='display: none;'></div>\"\n    ));\n\n    // App.Views.Note fixture.\n    this.$fixture = $(\n      \"<div id='note-fixture region-note'>\" +\n        \"<div id='#note-pane-view-content'></div>\" +\n      \"</div>\"\n    );\n\n    // Any model changes will trigger a `model.save()`, which\n    // won't work in the tests, so we have to fake the method.\n    sinon.stub(App.Models.Note.prototype, \"save\");\n  });\n```", "```js\n    beforeEach(function () {\n        this.routerSpy = sinon.spy();\n        this.$fixture.appendTo($(\"#fixtures\"));\n\n        this.view = new App.Views.Note({\n          el: this.$fixture,\n          model: new App.Models.Note()\n        }, {\n          nav: new Backbone.View(),\n          router: {\n            navigate: this.routerSpy\n          }\n        });\n      });\n    ```", "```js\n  afterEach(function () {\n    this.$fixture.empty();\n    if (this.view) { this.view.model.destroy(); }\n  });\n\n  after(function () {\n    $(\"#fixtures\").empty();\n    App.Models.Note.prototype.save.restore();\n  });\n```", "```js\n  describe(\"view modes and actions\", function () {\n```", "```js\n    it(\"navigates / displays 'view' by default\", function () {\n      expect(this.routerSpy).to.be.calledWithMatch(/view$/);\n\n      // Check CSS visibility directly. Not necessarily a best\n      // practice as it uses internal knowledge of the DOM, but\n      // gets us a quick check on what should be the visible\n      // view pane.\n      expect($(\"#note-pane-view\")\n        .css(\"display\")).to.not.equal(\"none\");\n      expect($(\"#note-pane-edit\")\n        .css(\"display\")).to.equal(\"none\");\n    });\n```", "```js\n    it(\"navigates / displays 'edit' on event\", function () {\n      this.view.trigger(\"update:edit\");\n      expect(this.routerSpy).to.be.calledWithMatch(/edit$/);\n\n      expect($(\"#note-pane-edit\")\n        .css(\"display\")).to.not.equal(\"none\");\n      expect($(\"#note-pane-view\")\n        .css(\"display\")).to.equal(\"none\");\n    });\n```", "```js\n    it(\"confirms note on delete\", sinon.test(function () {\n      this.stub(window, \"confirm\").returns(false);\n      this.view.deleteNote();\n      expect(window.confirm)\n        .to.have.been.calledOnce.and\n        .to.have.been.calledWith(\"Delete note?\");\n    }));\n  });\n```", "```js\n  describe(\"model interaction\", function () {\n    afterEach(function () {\n      // Wipe out to prevent any further use.\n      this.view = null;\n    });\n\n    it(\"is removed on destroyed model\", sinon.test(function () {\n      this.spy(this.view, \"remove\"),\n      this.spy(this.view.noteView, \"remove\");\n\n      this.view.model.trigger(\"destroy\");\n\n      expect(this.view.remove).to.be.calledOnce;\n      expect(this.view.noteView.remove).to.be.calledOnce;\n    });\n  });\n```", "```js\n  describe(\"note rendering\", function () {\n\n    it(\"can render a note\", function () {\n      // Don't explicitly call `render()` because\n      // `initialize()` already called it.\n      expect($(\".region-note\")\n        .css(\"display\")).to.not.equal(\"none\");\n      expect($(\".region-notes\")\n        .css(\"display\")).to.equal(\"none\");\n    });\n```", "```js\n    it(\"calls render on model events\", sinon.test(function () {\n      // Spy on `render` and check call/return value.\n      this.spy(this.view, \"render\");\n\n      this.view.model.trigger(\"change\");\n\n      expect(this.view.render)\n        .to.be.calledOnce.and\n        .to.have.returned(this.view);\n    }));\n```", "```js\n    it(\"calls render on changed data\", sinon.test(function () {\n      this.spy(this.view, \"render\");\n\n      // Replace form value and blur to force changes.\n      $(\"#input-text\").val(\"# A Heading!\");\n      $(\"#note-form-edit\").blur();\n\n      // `Note` view should have rendered.\n      expect(this.view.render)\n        .to.be.calledOnce.and\n        .to.have.returned(this.view);\n\n      // Check the `NoteView` view rendered the new markdown.\n      expect($(\"#pane-text\").html())\n        .to.match(/<h1 id=\".*?\">A Heading!<\\/h1>/);\n    }));\n  });\n});\n```", "```js\n<head>\n  <!-- ... snipped ... -->\n\n  <!-- JavaScript Test Libraries. -->\n  <script src=\"img/mocha.js\"></script>\n  <script src=\"img/chai.js\"></script>\n  <script src=\"img/sinon-chai.js\"></script>\n  <script src=\"img/sinon.js\"></script>\n\n  <!-- JavaScript Core Libraries -->\n  <!-- ... snipped ... -->\n\n  <!-- JavaScript Application Libraries -->\n  <script src=\"img/namespace.js\"></script>\n  <script src=\"img/config.js\"></script>\n  <script>\n    // Test overrides (before any app components).\n    App.Config = _.extend(App.Config, {\n      storeName: \"notes-test\" // localStorage for tests.\n    });\n  </script>\n  <script src=\"img/note.js\"></script>\n  <script src=\"img/notes.js\"></script>\n  <script src=\"img/templates.js\"></script>\n  <script src=\"img/note-nav.js\"></script>\n  <script src=\"img/note-view.js\"></script>\n  <script src=\"img/note.js\"></script>\n\n  <!-- ... snipped ... -->\n\n  <!-- Tests. -->\n  <script src=\"img/note-nav.spec.js\"></script>\n  <script src=\"img/note.spec.js\"></script>\n</head>\n```"]