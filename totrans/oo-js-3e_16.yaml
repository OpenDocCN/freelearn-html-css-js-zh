- en: Appendix C. Built-in Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录C. 内置对象
- en: This appendix lists the built-in constructor functions outlined in the **ECMAScript**
    (**ES**) standard, together with the properties and methods of the objects created
    by these constructors. ES5-specific APIs are listed separately.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录列出了**ECMAScript**（**ES**）标准中概述的内置构造函数，以及由这些构造函数创建的对象的属性和方法。ES5特定的API单独列出。
- en: Object
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Object
- en: '`Object()` is a constructor that creates objects, for example:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object()`是一个创建对象的构造函数，例如：'
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the same as using the object literal:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这与使用对象字面量相同：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can pass anything to the constructor and it will try to guess what it is
    and use a more appropriate constructor. For example, passing a string to `new
    Object()` will be the same as using the `new String()` constructor. This is not
    a recommended practice (it''s better to be explicit than let guesses creep in),
    but still possible:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以向构造函数传递任何内容，它将尝试猜测它是什么，并使用更合适的构造函数。例如，将一个字符串传递给`new Object()`与使用`new String()`构造函数相同。这不是一个推荐的做法（最好是明确，而不是让猜测悄悄进入），但仍然可能：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: All other objects, built-in or custom, inherit from `Object`. So the properties
    and methods listed in the following sections apply to all types of objects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他对象，无论是内置的还是自定义的，都继承自`Object`。因此，以下各节中列出的属性和方法适用于所有类型的对象。
- en: Members of the Object constructor
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Object构造函数的成员
- en: 'Following are the members of the `Object` constructor:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为`Object`构造函数的成员：
- en: '| **Property/method** | **Description** |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `Object.prototype` | The prototype of all objects (also an object itself).
    Anything you add to this prototype will be inherited by all other objects, so
    be careful:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Object.prototype` | 所有对象的原型（本身也是一个对象）。你添加到这个原型的任何内容都将被所有其他对象继承，所以请小心：'
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '|'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The Object.prototype members
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Object.prototype成员
- en: 'Instead of saying "members of the Objects created by the Object constructor",
    let''s say headings "`Object.prototype` members". It is the same for `Array.prototype`
    and so on further in this appendix:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不说“由Object构造函数创建的对象的成员”，而是说“`Object.prototype`成员”。在附录的后续部分，例如`Array.prototype`，也是同样的道理：
- en: '| **Property/method** | **Description** |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `constructor` | Points back to the constructor function used to create the
    object, in this case, `Object`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '| `constructor` | 指向用于创建对象的构造函数，在本例中为`Object`：'
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '|'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `toString(radix)` | Returns a string representation of the object. If the
    object happens to be a `Number` object, the radix parameter defines the base of
    the returned number. The default radix is `10`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '| `toString(radix)` | 返回对象的字符串表示。如果对象恰好是`Number`对象，则基数参数定义了返回数字的基数。默认基数是`10`：'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `toLocaleString()` | Same as `toString()`, but matching the current locale.
    Meant to be customized by objects, such as `Date()`, `Number()`, and `Array()`
    and provide locale-specific values, such as different date formatting. In the
    case of `Object()` instances as with most other cases, it just calls `toString()`.In
    browsers, you can figure out the language using the property `language` (or `userLanguage`
    in IE) of the navigator BOM object:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '| `toLocaleString()` | 与`toString()`相同，但匹配当前区域。旨在由对象（如`Date()`、`Number()`和`Array()`）自定义，并提供特定于区域的语言值，例如不同的日期格式。在`Object()`实例的情况下，就像在大多数其他情况下一样，它只是调用`toString()`。在浏览器中，你可以使用导航器BOM对象的`language`属性（或在IE中的`userLanguage`）来确定语言：'
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `valueOf()` | Returns a primitive representation of `this`, if applicable.
    For example, `Number` objects return a primitive number and `Date` objects return
    a timestamp. If no suitable primitive makes sense, it simply returns `this`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '| `valueOf()` | 如果适用，返回`this`的原生表示。例如，`Number`对象返回一个原始数字，而`Date`对象返回一个时间戳。如果没有合适的原始值有意义，它将简单地返回`this`：'
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `hasOwnProperty(prop)` | Returns `true` if a property is an own property
    of the object, or `false` if it was inherited from the prototype chain. Also returns
    `false` if the property doesn''t exist:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '| `hasOwnProperty(prop)` | 如果属性是对象的自身属性，则返回`true`；如果它是从原型链继承的，则返回`false`。如果属性不存在，也返回`false`：'
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '|'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `isPrototypeOf(obj)` | Returns `true` if an object is used as a prototype
    of another object. Any object from the prototype chain can be tested, not only
    the direct creator:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '| `isPrototypeOf(obj)` | 如果一个对象被用作另一个对象的原型，则返回`true`。可以测试原型链上的任何对象，而不仅仅是直接创建者：'
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `propertyIsEnumerable(prop)` | Returns `true` if a property shows up in a
    `for...in` loop:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '| `propertyIsEnumerable(prop)` | 如果属性在`for...in`循环中出现，则返回`true`：'
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: ECMAScript 5 additions to objects
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMAScript 5对对象的扩展
- en: In ECMAScript 3 all object properties can be changed, added, or deleted at any
    time, except for a few built-in properties (for example, `Math.PI`). In ES5 you
    have the ability to define properties that cannot be changed or deleted, a privilege
    previously reserved for built-ins. ES5 introduces the concept of **property descriptors**
    that give you tighter control over the properties you define.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ECMAScript 3 中，所有对象属性都可以在任何时候更改、添加或删除，除了少数内置属性（例如，`Math.PI`）。在 ES5 中，你可以定义不能更改或删除的属性，这是以前只为内置属性保留的特权。ES5
    引入了**属性描述符**的概念，它为你提供了更紧密的控制权，以定义你定义的属性。
- en: 'Think of a property descriptor as an object that specifies the features of
    a property. The syntax to describe these features is a regular object literal,
    so property descriptors have properties and methods of their own, but let''s call
    them **attributes** to avoid confusion. The attributes are:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将属性描述符想象成一个指定属性特征的对象。描述这些特征的语法是一个常规对象字面量，因此属性描述符有自己的属性和方法，但为了避免混淆，让我们称它们为**属性**。属性包括：
- en: '`value` - what you get when you access the property'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value` - 当你访问属性时得到的值'
- en: '`writable` - can you change this property'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`writable` - 你能否更改这个属性'
- en: '`enumerable` - should it appear in `for...in` loops'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enumerable` - 它是否应该出现在 `for...in` 循环中'
- en: '`configurable` - can you delete it'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configurable` - 你能否删除它'
- en: '`set()` - a function called any time you update the value'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set()` - 任何更新值时都会调用的函数'
- en: '`get()` - called when you access the value of the property'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get()` - 当你访问属性的值时调用'
- en: Further there's a distinction between **data descriptors** (you define the properties
    `enumerable`, `configurable`, `value`, and `writable`) and **accessor descriptors**
    (you define `enumerable`, `configurable`, `set()`, and `get()`). If you define
    `set()` or `get()`, the descriptor is considered an accessor and attempting to
    define value or writable will raise an error.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有**数据描述符**（你定义属性 `enumerable`、`configurable`、`value` 和 `writable`）和**访问器描述符**（你定义
    `enumerable`、`configurable`、`set()` 和 `get()`）之间的区别。如果你定义了 `set()` 或 `get()`，则描述符被视为访问器，尝试定义值或可写性将引发错误。
- en: 'Defining a regular old school ES3-style property:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个传统的 ES3 风格属性：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Same using an ES5 data descriptor:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 同样使用 ES5 数据描述符：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The value of `value` if set to `undefined` by default, all others are `false`.
    So you need to set them to `true` explicitly if you want to be able to change
    this property later.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `value` 设置为默认值 `undefined`，则所有其他值都是 `false`。因此，如果你想以后能够更改此属性，则需要显式地将它们设置为
    `true`。
- en: 'Or the same property using an ES5 accessor descriptor:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用 ES5 访问器描述符的相同属性：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see property descriptors are a lot more code, so you only use them
    if you really want to prevent someone from mangling your property, and also you
    forget about backwards compatibility with ES3 browsers because, unlike additions
    to `Array.prototype` for example, you cannot "shim" this feature in old browsers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，属性描述符的代码更多，所以你只有在真正想要防止某人破坏你的属性时才使用它们，并且你忘记了与 ES3 浏览器的向后兼容性，因为，与例如 `Array.prototype`
    的扩展不同，你无法在旧浏览器中“模拟”此功能。
- en: 'And the power of the descriptors in action (defining a nonmalleable property):'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 描述符在行动中的力量（定义不可变属性）：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is a list of all ES5 additions to `Object`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个包含所有 ES5 对 `Object` 的扩展列表：
- en: '| **Property/method** | **Description** |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `Object.getPrototypeOf(obj)` | While in ES3 you have to guess what is the
    prototype of a given object is using the method `Object.prototype.isPrototypeOf()`,
    in ES5 you can directly ask "Who is your prototype?"'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Object.getPrototypeOf(obj)` | 在 ES3 中，你必须使用方法 `Object.prototype.isPrototypeOf()`
    来猜测给定对象的原型是什么，而在 ES5 中，你可以直接询问“你的原型是谁？”'
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Object.create(obj, descr`) | Discussed in [Chapter 7](ch07.html "Chapter 7. Inheritance"),
    *Inheritance*. Creates a new object, sets its prototype and defines properties
    of that object using property descriptors (discussed earlier):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Object.create(obj, descr)` | 在 [第 7 章](ch07.html "第 7 章。继承") 中讨论，*继承*。创建一个新的对象，设置其原型，并使用属性描述符（前面已讨论）定义该对象属性：'
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'It even lets you create a completely blank object, something you cannot do
    in ES3:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 它甚至允许你创建一个完全空的对象，这是在 ES3 中无法做到的：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '|'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Object.getOwnPropertyDescriptor(obj, property)` | Allows you to inspect
    how a property was defined. You can even peek into the built-ins and see all these
    previously hidden attributes:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Object.getOwnPropertyDescriptor(obj, property)` | 允许你检查属性是如何定义的。你甚至可以窥视内置对象，并看到所有这些之前隐藏的属性：'
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Object.getOwnPropertyNames(obj)` | Returns an array of all own property
    names (as strings), enumerable or not. Use `Object.keys()` to get only enumerable
    ones:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Object.getOwnPropertyNames(obj)` | 返回一个包含所有自有属性名（作为字符串）的数组，无论是否可枚举。使用 `Object.keys()`
    获取仅可枚举的属性：'
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '|'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Object.defineProperty(obj, descriptor)` | Defines a property of an object
    using a property descriptor. See the discussion preceding this table. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `Object.defineProperty(obj, descriptor)` | 使用属性描述符定义对象的属性。请参阅此表之前的讨论。|'
- en: '| `Object.defineProperties(obj, descriptors)` | Same as `defineProperty()`,
    but lets you define multiple properties at once:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Object.defineProperties(obj, descriptors)` | 与 `defineProperty()` 相同，但允许你一次性定义多个属性：'
- en: '[PRE20]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '|'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Object.preventExtensions(obj)``Object.isExtensible(obj)` | `preventExtensions()`
    disallows adding further properties to an object and `isExtensible()` checks whether
    you can add properties:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Object.preventExtensions(obj)``Object.isExtensible(obj)` | `preventExtensions()`
    禁止向对象添加更多属性，而 `isExtensible()` 检查你是否可以添加属性：'
- en: '[PRE21]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Attempting to add properties to a non-extensible object is not an error, but
    simply doesn''t work:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试向不可扩展的对象添加属性不会产生错误，但只是不起作用：
- en: '[PRE22]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '|'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Object.seal(obj)``Object.isSealed(obj)` | `seal()` does the same as `preventExtensions()`
    and additionally makes all existing properties non-configurable.This means you
    can change the value of an existing property, but you cannot delete it or reconfigure
    it (using `defineProperty()` won''t work). So you cannot, for example, make an
    enumerable property non-enumerable. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `Object.seal(obj)``Object.isSealed(obj)` | `seal()` 与 `preventExtensions()`
    做同样的事情，并且使所有现有属性不可配置。这意味着你可以更改现有属性的值，但不能删除它或重新配置它（使用 `defineProperty()` 不会起作用）。因此，你不能，例如，将可枚举属性变为不可枚举。|'
- en: '| `Object.freeze(obj)``Object.isFrozen(obj)` | Everything that `seal()` does
    plus prevents changing the values of properties:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Object.freeze(obj)``Object.isFrozen(obj)` | `seal()` 所做的所有事情，以及防止更改属性的值：'
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '|'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Object.keys(obj)` | An alternative to a `for...in` loop. Returns only own
    properties (unlike `for...in`). The properties need to be enumerable in order
    to show up (unlike `Object.getOwnPropertyNames()`). The return value is an array
    of strings.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Object.keys(obj)` | `for...in` 循环的替代方案。仅返回自有属性（与 `for...in` 不同）。属性必须是可枚举的才能显示出来（与
    `Object.getOwnPropertyNames()` 不同）。返回值是一个字符串数组。'
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '|'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: ES6 addition to objects
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ES6 对象的扩展
- en: ES6 has a few interesting object definition and property syntax. This new syntax
    is to make working with objects easier and concise.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: ES6 有一些有趣的对象定义和属性语法。这种新语法旨在使对象操作更加简单和简洁。
- en: Property shorthand
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性简写
- en: ES6 provides a shorter syntax for common object definition.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ES6 为常见的对象定义提供了一种更短的语法。
- en: 'ES5: `obj = { x: x, y: y };`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'ES5: `obj = { x: x, y: y };`'
- en: 'ES6: `obj = {x,y};`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 'ES6: `obj = {x, y};`'
- en: Computed property names
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算属性名
- en: 'It is possible to compute property names in the new ES6 object definition syntax:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的 ES6 对象定义语法中，可以计算属性名：
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here the property name is computed where `"baz"` is concatenated with the result
    of the function call.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这里属性名是计算出来的，其中 `"baz"` 与函数调用的结果连接在一起。
- en: Object.assign
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Object.assign
- en: 'The `Object.assign()` method is used to copy the values of all enumerable own
    properties from one or more source objects to a target object:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`Object.assign()` 方法用于将一个或多个源对象的所有可枚举自有属性的值复制到目标对象：'
- en: '[PRE26]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Array
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Array
- en: 'The `Array` constructor creates array objects:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`Array` 构造函数创建数组对象：'
- en: '[PRE27]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This is the same as the array literal:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这与数组字面量相同：
- en: '[PRE28]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When you pass only one numeric value to the `Array` constructor, it''s assumed
    to be the array length:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当你只向 `Array` 构造函数传递一个数值时，它被认为是数组的长度：
- en: '[PRE29]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You get an array with the desired length and if you ask for the value of each
    of the array elements, you get `undefined`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你会得到一个具有所需长度的数组，如果你询问数组每个元素的值，你会得到 `undefined`：
- en: '[PRE30]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'There is a subtle difference between an array full of elements and array with
    no elements, but just length:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一个充满元素的数组和没有元素但只有长度的数组之间有一个细微的差别：
- en: '[PRE31]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This difference in the `Array()` constructor''s behavior when you specify one
    versus more parameters can lead to unexpected behavior. For example, the following
    use of the array literal is valid:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当你指定一个或多个参数时，`Array()` 构造函数的行为差异可能导致意外行为。例如，以下数组字面量的使用是有效的：
- en: '[PRE32]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'However, passing the floating-point number to the `Array` constructor is an
    error:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，将浮点数传递给 `Array` 构造函数是一个错误：
- en: '[PRE33]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The Array.prototype members
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Array.prototype 成员
- en: 'The following are the list of all the elements of an `Array`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `Array` 的所有元素的列表：
- en: '| **Property/method** | **Description** |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `length` | The number of elements in the array:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '| `length` | 数组中的元素数量：'
- en: '[PRE34]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '|'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `concat(i1, i2, i3,...)` | Merges arrays together:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '| `concat(i1, i2, i3,...)` | 合并数组：'
- en: '[PRE35]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '|'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `join(separator)` | Turns an array into a string. The separator parameter
    is a string with comma as the default value:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '| `join(separator)` | 将数组转换为字符串。分隔符参数是一个字符串，默认值为逗号：'
- en: '[PRE36]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '|'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `pop()` | Removes the last element of the array and returns it:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '| `pop()` | 移除数组的最后一个元素并返回它：'
- en: '[PRE37]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '|'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `push(i1, i2, i3,...)` | Appends elements to the end of the array and returns
    the length of the modified array:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '| `push(i1, i2, i3,...)` | 将元素追加到数组的末尾并返回修改后的数组的长度：'
- en: '[PRE38]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '|'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `reverse()` | Reverses the elements of the array and returns the modified
    array:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '| `reverse()` | 反转数组的元素并返回修改后的数组：'
- en: '[PRE39]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '|'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `shift()` | Like `pop()` but removes the first element, not the last:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '| `shift()` | 与 `pop()` 类似，但移除第一个元素而不是最后一个：'
- en: '[PRE40]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '|'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `slice(start_index, end_index)` | Extracts a piece of the array and returns
    it as a new array, without modifying the source array:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '| `slice(start_index, end_index)` | 提取数组的一部分并返回它作为新的数组，而不修改源数组：'
- en: '[PRE41]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '|'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `sort(callback)` | Sorts an array. Optionally accepts a callback function
    for custom sorting. The callback function receives two array elements as arguments
    and should return `0` if they are equal, a positive number if the first is greater,
    and a negative number if the second is greater.An example of a custom sorting
    function that does a proper numeric sort (since the default is character sorting):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '| `sort(callback)` | 对数组进行排序。可选地接受一个回调函数进行自定义排序。回调函数接收两个数组元素作为参数，如果它们相等则返回
    `0`，如果第一个元素大于第二个元素则返回一个正数，如果第二个元素大于第一个元素则返回一个负数。一个自定义排序函数的示例，它执行正确的数字排序（因为默认是字符排序）：'
- en: '[PRE42]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '|'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `splice(start, delete_count, i1, i2, i3,...)` | Removes and adds elements
    at the same time. The first parameter is where to start removing, the second is
    how many items to remove and the rest of the parameters are new elements to be
    inserted in the place of the removed ones:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '| `splice(start, delete_count, i1, i2, i3,...)` | 同时移除和添加元素。第一个参数是开始移除的位置，第二个参数是要移除的项目数量，其余参数是要插入到被移除元素位置的新的元素：'
- en: '[PRE43]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '|'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `unshift(i1, i2, i3,...)` | Like `push()` but adds the elements at the beginning
    of the array as opposed to the end. Returns the length of the modified array:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '| `unshift(i1, i2, i3,...)` | 与 `push()` 类似，但将元素添加到数组的开头而不是末尾。返回修改后的数组的长度：'
- en: '[PRE44]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '|'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: ECMAScript 5 additions to Array
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMAScript 5 对 Array 的扩展
- en: 'Following are the ECMAScript 5 additions to `Array`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 ECMAScript 5 对 `Array` 的扩展：
- en: '| **Property/method** | **Description** |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `Array.isArray(obj)` | Tells if an object is an array because `typeof` is
    not good enough:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.isArray(obj)` | 判断一个对象是否为数组，因为 `typeof` 不够好：'
- en: '[PRE45]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Neither is duck-typing (if it walks like a duck and quacks like a duck, it
    must be a duck):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都不是鸭子类型（如果它像鸭子走路，像鸭子叫，那么它一定是鸭子）：
- en: '[PRE46]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'In ES3 you need the verbose:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ES3 中你需要使用详细模式：
- en: '[PRE47]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In ES5 you get the shorter:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ES5 中你得到较短的：
- en: '[PRE48]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '|'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Array.prototype.indexOf(needle, idx)` | Searches the array and returns the
    index of the first match. Returns `-1` if there''s no match. Optionally can search
    starting from a specified index:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.prototype.indexOf(needle, idx)` | 在数组中搜索并返回第一个匹配项的索引。如果没有匹配项则返回 `-1`。可选地可以从指定的索引开始搜索：'
- en: '[PRE49]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '|'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Array.prototype.lastIndexOf(needle, idx)` | Like `indexOf()` only searches
    from the end:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.prototype.lastIndexOf(needle, idx)` | 与 `indexOf()` 类似，但只从末尾搜索：'
- en: '[PRE50]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '|'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Array.prototype.forEach(callback, this_obj)` | An alternative to a `for`
    loop. You specify a callback function that will be called for each element of
    the array. The callback function gets the arguments: the element, its index and
    the whole array:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.prototype.forEach(callback, this_obj)` | `for` 循环的替代方案。你指定一个回调函数，该函数将为数组的每个元素调用。回调函数获得以下参数：元素、其索引和整个数组：'
- en: '[PRE51]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Optionally, you can specify a second parameter: the object to be bound to this
    inside the callback function. So this works too:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，你可以指定第二个参数：在回调函数内部绑定到 `this` 的对象。所以这也行：
- en: '[PRE52]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '|'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Array.prototype.every(callback, this_obj)` | You provide a callback function
    that tests each element of the array. Your callback is given the same arguments
    as `forEach()` and it must return `true` or `false` depending on whether the given
    element satisfies your test.If all elements satisfy your test, `every()` returns
    `true`. If at least one doesn''t, `every()` returns `false`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.prototype.every(callback, this_obj)` | 你提供一个回调函数来测试数组的每个元素。你的回调函数将获得与
    `forEach()` 相同的参数，并且必须根据给定的元素是否满足你的测试返回 `true` 或 `false`。如果所有元素都满足你的测试，`every()`
    返回 `true`。如果至少有一个不满足，`every()` 返回 `false`：'
- en: '[PRE53]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'If at some point during the loop it becomes clear that the result will be `false`,
    the loop stops and returns `false`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在循环的某个时刻，很明显结果将是 `false`，则循环停止并返回 `false`：
- en: '[PRE54]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '|'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Array.prototype.some(callback, this_obj)` | Like `every()`, only it returns
    `true` if at least one element satisfies your test:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.prototype.some(callback, this_obj)` | 与 `every()` 类似，但它仅在至少一个元素满足你的测试条件时返回
    `true`：'
- en: '[PRE55]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '|'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Array.prototype.filter(callback, this_obj)` | Similar to `some()` and `every()`
    but it returns a new array of all elements that satisfy your test:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.prototype.filter(callback, this_obj)` | 与 `some()` 和 `every()` 类似，但它返回一个新数组，其中包含所有满足你的测试条件的元素：'
- en: '[PRE56]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '|'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Array.prototype.map(callback, this_obj)` | Similar to `forEach()` because
    it executes a callback for each element, but additionally it constructs a new
    array with the returned values of your callback and returns it. Let''s capitalize
    all strings in an array:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.prototype.map(callback, this_obj)` | 与 `forEach()` 类似，因为它为每个元素执行一个回调，但它还构造一个包含回调返回值的新数组并返回它。让我们将数组中的所有字符串转换为大写：'
- en: '[PRE57]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '|'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Array.prototype.reduce(callback, start)` | Executes your callback for each
    element of the array. Your callback returns a value. This value is passed back
    to your callback with the next iteration. The whole array is eventually reduced
    to a single value:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.prototype.reduce(callback, start)` | 对数组中的每个元素执行你的回调。你的回调返回一个值。这个值在下一个迭代中传递回你的回调。整个数组最终被缩减为一个值：'
- en: '[PRE58]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Optionally you can pass a start value which will be used by the first callback
    call:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，你可以传递一个起始值，该值将在第一次回调调用中使用：
- en: '[PRE59]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '|'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Array.prototype.reduceRight(callback, start)` | Like `reduce()` but loops
    from the end of the array:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.prototype.reduceRight(callback, start)` | 与 `reduce()` 类似，但从数组的末尾开始循环：'
- en: '[PRE60]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '|'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: ES6 addition to arrays
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ES6 对数组的扩展
- en: 'Following are the addition to arrays:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是数组的扩展：
- en: '| `Array.from(arrayLike, mapFunc?, thisArg?)` | The `Array.from()` method''s
    basic functionality is to convert two kinds of values to arrays-`arrayLike` values
    and `Iterable` values:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.from(arrayLike, mapFunc?, thisArg?)` | `Array.from()` 方法的基本功能是将两种类型的值转换为数组
    - `arrayLike` 值和 `Iterable` 值：'
- en: '[PRE61]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '|'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Array.of(...items)` | Creates an array out of the items passed to the method'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.of(...items)` | 使用传递给该方法的项目创建一个数组'
- en: '[PRE62]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '|'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Array.prototype.entries()``Array.prototype.keys()``Array.prototype.values()`
    | The result of these methods is a sequence of values. These methods returns an
    iterator of keys, values and entries respectively.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.prototype.entries()``Array.prototype.keys()``Array.prototype.values()`
    | 这些方法的返回结果是值的序列。这些方法分别返回键、值和条目的迭代器。'
- en: '[PRE63]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '|'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Array.prototype.find(predicate, thisArg?)` | Returns the first array element
    for which the callback function returns `true.` If there is no such element, it
    returns `undefined`:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.prototype.find(predicate, thisArg?)` | 返回第一个回调函数返回 `true` 的数组元素。如果没有这样的元素，则返回
    `undefined`：'
- en: '[PRE64]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '|'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Array.prototype.findIndex(predicate, thisArg?)` | Returns the index of the
    first element for which the callback function returns true. If there is no such
    element, it returns `-1`:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.prototype.findIndex(predicate, thisArg?)` | 返回第一个回调函数返回 `true` 的元素的索引。如果没有这样的元素，则返回
    `-1`：'
- en: '[PRE65]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '|'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Array.prototype.fill(value : any, start=0, end=this.length) : This` | It
    fills an array with the given value:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Array.prototype.fill(value : any, start=0, end=this.length) : This` | 它使用给定的值填充数组：'
- en: '[PRE66]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '|'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Function
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: 'JavaScript functions are objects. They can be defined using the `Function`
    constructor, like so:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 函数是对象。它们可以使用 `Function` 构造函数定义，如下所示：
- en: '[PRE67]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'This is a (generally not recommended) alternative to the function literal (also
    known as function expression):'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种（通常不推荐）的函数字面量（也称为函数表达式）的替代方法：
- en: '[PRE68]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Or, the more common function definition:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，更常见的函数定义方式：
- en: '[PRE69]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The Function.prototype members
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Function.prototype 成员
- en: 'Following are the list of members of the `Function` constructor:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `Function` 构造函数的成员列表：
- en: '| **Property/Method** | **Description** |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `apply(this_obj, params_array)` | Allows you to call another function while
    overwriting the other function''s `this` value. The first parameter that `apply()`
    accepts is the object to be bound to this inside the function and the second is
    an array of arguments to be sent to the function being called:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '| `apply(this_obj, params_array)` | 允许你在覆盖其他函数的 `this` 值的同时调用另一个函数。`apply()`
    接受的第一个参数是要绑定到函数内部的对象，第二个参数是要传递给被调用函数的参数数组：'
- en: '[PRE70]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '|'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `call(this_obj, p1, p2, p3, ...)` | Same as `apply()` but accepts arguments
    one by one, as opposed to as one array. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| `call(this_obj, p1, p2, p3, ...)` | 与 `apply()` 相同，但逐个接受参数，而不是作为一个数组接受。|'
- en: '| `length` | The number of parameters the function expects:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '| `length` | 函数期望的参数数量：'
- en: '[PRE71]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'If you forget the difference between `call()` and `apply()`:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你忘记了 `call()` 和 `apply()` 之间的区别：
- en: '[PRE72]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The `call()` property's length is `1` because all arguments except the first
    one are optional. |
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`call()` 属性的长度是 `1`，因为除了第一个参数之外的所有参数都是可选的。 |'
- en: ECMAScript 5 additions to a Function
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMAScript 5 对 `Function` 的扩展
- en: 'Following are the ECMAScript 5 addition to a `Function` constructor:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 `Function` 构造函数中 ECMAScript 5 的新增内容：
- en: '| **Property/method** | **Description** |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `Function.prototype.bind()` | When you want to call a function that uses
    this internally and you want to define what this is. The methods `call()` and
    `apply()` invoke the function while `bind()` returns a new function. Useful when
    you provide a method as a callback to a method of another object and and you want
    this to be an object of your choice:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Function.prototype.bind()` | 当你想调用一个内部使用 this 的函数，并且你想定义 this 是什么时。`call()`
    和 `apply()` 方法调用函数，而 `bind()` 返回一个新的函数。当您将方法作为回调提供给另一个对象的方法，并且希望 this 是您选择的对象时很有用：'
- en: '[PRE73]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '|'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: ECMAScript 6 additions to a Function
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMAScript 6 对 `Function` 的扩展
- en: 'Following are the ECMAScript 6 addition to a `Function` constructor:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 `Function` 构造函数中 ECMAScript 6 的新增内容：
- en: '| **Arrow Functions**An arrow function expression has a shorter syntax compared
    to function expressions and does not bind its own this, arguments, super, or `new.target`.
    Arrow functions are always anonymous. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| **箭头函数**与函数表达式相比，箭头函数表达式有更短的语法，并且不会绑定自己的 this、arguments、super 或 `new.target`。箭头函数始终是匿名的。|'
- en: '[PRE74]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '|'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Statement Bodies are more expressive and concise closure syntax |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| 语句体更加表达性和简洁的闭包语法 |'
- en: '[PRE75]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '|'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Boolean
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布尔值
- en: The `Boolean` constructor creates Boolean objects (not to be confused with Boolean
    primitives). The Boolean objects are not that useful and are listed here for the
    sake of completeness.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`Boolean` 构造函数创建布尔对象（不要与布尔原始值混淆）。布尔对象并不那么有用，这里列出是为了完整性。'
- en: '[PRE76]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'A Boolean object is not the same as a Boolean primitive value. As you know,
    all objects are truthy:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔对象与布尔原始值不同。正如你所知，所有对象都是真值：
- en: '[PRE77]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Boolean objects don't have any properties other than the ones inherited from
    `Object`.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔对象除了从 `Object` 继承的属性外，没有其他属性。
- en: Number
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字
- en: 'This creates number objects:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建数字对象：
- en: '[PRE78]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: The `Number` objects are not primitive objects, but if you use any `Number.prototype`
    method on a primitive number, the primitive will be converted to a `Number` object
    behind the scenes and the code will work.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`Number` 对象不是原始对象，但如果你在原始数字上使用任何 `Number.prototype` 方法，原始数字会在幕后被转换为 `Number`
    对象，代码将正常工作。'
- en: '[PRE79]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Used without `new`, the `Number` constructor returns a primitive number.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 不使用 `new`，`Number` 构造函数返回一个原始数字。
- en: '[PRE80]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Members of the Number constructor
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Number` 构造函数的成员'
- en: 'Consider the following members of the `Number` constructor:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 `Number` 构造函数的成员：
- en: '| **Property/method** | **Description** |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `Number.MAX_VALUE` | A constant property (cannot be changed) that contains
    the maximum allowed number:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Number.MAX_VALUE` | 一个常量属性（不能更改），包含允许的最大数字：'
- en: '[PRE81]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '|'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Number.MIN_VALUE` | The smallest number you can work with in JavaScript:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Number.MIN_VALUE` | 你可以在 JavaScript 中使用的最小数字：'
- en: '[PRE82]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '|'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Number.NaN` | Contains the Not A Number number. Same as the global NaN:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Number.NaN` | 包含“非数字”数字。与全局 `NaN` 相同：'
- en: '[PRE83]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'NaN is not equal to anything including itself:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`NaN` 不等于任何东西，包括它自己：'
- en: '[PRE84]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '|'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Number.POSITIVE_INFINITY` | Same as the global `Infinity` number. |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| `Number.POSITIVE_INFINITY` | 与全局 `Infinity` 数字相同。 |'
- en: '| `Number.NEGATIVE_INFINITY` | Same as `-Infinity`. |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| `Number.NEGATIVE_INFINITY` | 与 `-Infinity` 相同。 |'
- en: The Number.prototype members
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Number.prototype` 的成员'
- en: 'Following are the members of the `Number` constructor:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 `Number` 构造函数的成员：
- en: '| **Property/method** | **Description** |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `toFixed(fractionDigits)` | Returns a string with the fixed-point representation
    of the number. Rounds the returned value:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '| `toFixed(fractionDigits)` | 返回一个带有定点表示法的字符串，表示数字。返回值四舍五入：'
- en: '[PRE85]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '|'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `toExponential(fractionDigits)` | Returns a string with exponential notation
    representation of the number object. Rounds the returned value:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '| `toExponential(fractionDigits)` | 返回一个带有指数表示法的字符串，表示数字对象。返回值四舍五入：'
- en: '[PRE86]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '|'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `toPrecision(precision)` | String representation of a number object, either
    exponential or fixed-point, depending on the number object:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '| `toPrecision(precision)` | 数字对象的字符串表示，可以是指数或定点，取决于数字对象：'
- en: '[PRE87]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '|'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: String
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串
- en: The `String()` constructor creates string objects. Primitive strings are turned
    into objects behind the scenes if you call a method on them as if they were objects.
    Omitting `new` gives you primitive strings.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`String()` 构造函数创建字符串对象。如果对它们作为对象调用方法，则原始字符串会在幕后转换为对象。省略 `new` 给你原始字符串。'
- en: 'Creating a string object and a string primitive:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 创建字符串对象和字符串原始值：
- en: '[PRE88]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The object and the primitive are not equal when compared by type with `===`,
    but they are when compared with `==` which does type coercion:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `===` 进行类型比较时，对象和原始值不相等，但使用 `==` 进行比较时，它们相等，因为 `==` 会进行类型转换：
- en: '[PRE89]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '`length` is a property of the string objects:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`length` 是字符串对象的属性：'
- en: '[PRE90]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'If you access `length` on a primitive string, the primitive is converted to
    an object behind the scenes and the operation is successful:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对一个原始字符串访问 `length`，则原始字符串会在幕后转换为对象，并且操作成功：
- en: '[PRE91]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'String literals work fine too:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串字面量也工作得很好：
- en: '[PRE92]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: Members of the String constructor
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: String构造函数的成员
- en: 'Following are the members of the `String` constructor:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`String`构造函数的成员：
- en: '| **Property/method** | **Description** |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `String.fromCharCode (code1, code2, code3, ...)` | Returns a string created
    using the Unicode values of the input:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '| `String.fromCharCode (code1, code2, code3, ...)` | 使用输入的Unicode值返回一个字符串：'
- en: '[PRE93]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '|'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The String.prototype members
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: String.prototype成员
- en: 'Consider the following `String.prototype` members:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 `String.prototype` 成员：
- en: '| **Property/method** | **Description** |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `length` | The number of characters in the string:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '| `length` | 字符串中的字符数：'
- en: '[PRE94]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '|'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `charAt(position)` | Returns the character at the specified position. Positions
    start at `0`:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '| `charAt(position)` | 返回指定位置的字符。位置从 `0` 开始：'
- en: '[PRE95]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Since ES5, it''s also possible to use array notation for the same purpose.
    (This feature has been long supported in many browsers before ES5, but not IE):'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 自从ES5以来，也可以使用数组表示法达到相同的目的。（在ES5之前，许多浏览器已经长期支持这一功能，但不是IE）：
- en: '[PRE96]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '|'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `charCodeAt(position)` | Returns the numeric code (Unicode) of the character
    at the specified position:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '| `charCodeAt(position)` | 返回指定位置的字符的数字代码（Unicode）：'
- en: '[PRE97]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '|'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `concat(str1, str2, ....)` | Returns a new string glued from the input pieces:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '| `concat(str1, str2, ....)` | 返回由输入片段粘合而成的新字符串：'
- en: '[PRE98]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '|'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `indexOf(needle, start)` | If the needle matches a part of the string, the
    position of the match is returned. The optional second parameter defines where
    the search should start from. Returns `-1` if no match is found:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '| `indexOf(needle, start)` | 如果针匹配字符串的一部分，则返回匹配的位置。可选的第二个参数定义了搜索应该从哪里开始。如果没有找到匹配项，则返回
    `-1`：'
- en: '[PRE99]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '|'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `lastIndexOf(needle, start)` | Same as `indexOf()` but starts the search
    from the end of the string. The last occurrence of `a`:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '| `lastIndexOf(needle, start)` | 与 `indexOf()` 相同，但搜索从字符串的末尾开始。最后出现 `a`：'
- en: '[PRE100]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '|'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `localeCompare(needle)` | Compares two strings in the current locale. Returns
    `0` if the two strings are equal, `1` if the needle gets sorted before the string
    object, `-1` otherwise:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '| `localeCompare(needle)` | 在当前区域设置中比较两个字符串。如果两个字符串相等，则返回 `0`，如果针（needle）在字符串对象之前排序，则返回
    `1`，否则返回 `-1`：'
- en: '[PRE101]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '|'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `match(regexp)` | Accepts a regular expression object and returns an array
    of matches:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '| `match(regexp)` | 接受一个正则表达式对象并返回一个匹配数组：'
- en: '[PRE102]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '|'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `replace(needle, replacement)` | Allows you to replace the matching results
    of a regexp pattern. The replacement can also be a callback function. Capturing
    groups are available as `$1, $2,...$9`:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '| `replace(needle, replacement)` | 允许您替换正则表达式模式的匹配结果。替换也可以是一个回调函数。捕获组可用作 `$1,
    $2,...$9`：'
- en: '[PRE103]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '|'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `search(regexp)` | Returns the position of the first regular expression match:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '| `search(regexp)` | 返回第一个正则表达式匹配的位置：'
- en: '[PRE104]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '|'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `slice(start, end)` | Returns the part of a string identified by the start
    and end positions. If `start` is negative, the start position is `length` + `start`,
    similarly if the `end` parameter is negative, the end position is length + end:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '| `slice(start, end)` | 返回由起始和结束位置标识的字符串的一部分。如果 `start` 是负数，则起始位置是 `length`
    + `start`，同样地，如果 `end` 参数是负数，则结束位置是 `length` + `end`：'
- en: '[PRE105]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '|'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `split(separator, limit)` | Turns a string into an array. The second parameter,
    limit, is optional. As with `replace()`, `search()`, and `match()`, the separator
    is a regular expression but can also be a string:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '| `split(separator, limit)` | 将字符串转换为数组。第二个参数 `limit` 是可选的。与 `replace()`、`search()`
    和 `match()` 类似，分隔符是一个正则表达式，但也可以是字符串：'
- en: '[PRE106]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '|'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `substring(start, end)` | Similar to `slice()`. When start or end are negative
    or invalid, they are considered 0\. If they are greater than the string length,
    they are considered to be the length. If `end` is greater than `start`, their
    values are swapped.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '| `substring(start, end)` | 与`slice()`类似。当start或end为负数或无效时，它们被视为0。如果它们大于字符串长度，则被视为长度。如果`end`大于`start`，它们的值将互换。'
- en: '[PRE107]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '|'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `toLowerCase()``toLocaleLowerCase()` | Transforms the string to lowercase:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '| `toLowerCase()``toLocaleLowerCase()` | 将字符串转换为小写：'
- en: '[PRE108]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '|'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `toUpperCase()``toLocaleUpperCase()` | Transforms the string to uppercase:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '| `toUpperCase()``toLocaleUpperCase()` | 将字符串转换为大写：'
- en: '[PRE109]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '|'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: ECMAScript 5 additions to String
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMAScript 5对String的扩展
- en: 'Following are the ECMAScript 5 additions to String:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为ECMAScript 5对String的扩展：
- en: '| **Property/method** | **Description** |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `String.prototype.trim()` | Instead of using a regular expression to remove
    whitespace before and after a string (as in ES3), you have a `trim()` method in
    ES5.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '| `String.prototype.trim()` | 与ES3中用正则表达式去除字符串前后空白不同，ES5中有一个`trim()`方法。'
- en: '[PRE110]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '|'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: ECMAScript 6 additions to String
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMAScript 6对String的扩展
- en: 'Following are the list of all the ECMAScript 6 additions to String:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为所有ECMAScript 6对String的扩展：
- en: '| Template Literals are used to interpolate single or multi-line strings.Template
    literals are enclosed by the back-tick (`` ` ` ``) (grave accent) character instead
    of double or single quotes. Template literals can contain place holders. These
    are indicated by the Dollar sign and curly braces (`${expression}`). The expressions
    in the place holders and the text between them get passed to a function. The default
    function just concatenates the parts into a single string. |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| 模板字面量用于插入单行或多行字符串。模板字面量由反引号（`` ` ` ``）字符包围，而不是双引号或单引号。模板字面量可以包含占位符。这些占位符由美元符号和大括号（`${expression}`）表示。占位符中的表达式和它们之间的文本将被传递给一个函数。默认函数只是将部分连接成一个字符串。
    |'
- en: '[PRE111]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '|'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `String.prototype.repeat` - this method allows you to repeat a string n number
    of times |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| `String.prototype.repeat` - 此方法允许你重复字符串n次 |'
- en: '[PRE112]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '|'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `String.prototype.startsWith``String.prototype.endsWith``String.prototype.includes`These
    are new string searching methods |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| `String.prototype.startsWith``String.prototype.endsWith``String.prototype.includes`
    | 这些是新的字符串搜索方法 |'
- en: '[PRE113]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '|'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Date
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Date
- en: 'The `Date` constructor can be used with several types of input:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`Date`构造函数可以使用多种类型的输入：'
- en: 'You can pass values for year, month, date of the month, hour, minute, second,
    and millisecond, like so:'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以传递年、月、日、小时、分钟、秒和毫秒的值，如下所示：
- en: '[PRE114]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: You can skip any of the input parameters, in which case they are assumed to
    be 0\. Note that month values are from 0 (January) to 11 (December), hours are
    from 0 to 23, minutes and seconds 0 to 59, and milliseconds 0 to 999.
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以省略任何输入参数，在这种情况下，它们将被假定为0。请注意，月份值从0（一月）到11（十二月），小时从0到23，分钟和秒从0到59，毫秒从0到999。
- en: 'You can pass a timestamp:'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以传递一个时间戳：
- en: '[PRE115]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'If you don''t pass anything, the current date/time is assumed:'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你没有传递任何内容，则假定当前日期/时间：
- en: '[PRE116]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'If you pass a string, it''s parsed in an attempt to extract a possible date
    value:'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你传递一个字符串，它将尝试解析以提取可能的日期值：
- en: '[PRE117]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'Omitting `new` gives you a string version of the current date:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 省略`new`将给出当前日期的字符串版本：
- en: '[PRE118]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: Members of the Date constructor
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Date`构造函数的成员'
- en: 'Following are the members of the Date constructor:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为`Date`构造函数的成员：
- en: '| **Property/method** | **Description** |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `Date.parse(string)` | Similar to passing a string to new `Date()` constructor,
    this method parses the input string in attempt to extract a valid date value.
    Returns a timestamp on success, `NaN` on failure:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Date.parse(string)` | 与将字符串传递给新的`Date()`构造函数类似，此方法尝试解析输入字符串以提取有效的日期值。成功时返回时间戳，失败时返回`NaN`：'
- en: '[PRE119]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '|'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Date.UTC(year, month, date, hours, minutes, seconds, ms)` | Returns a timestamp
    but in UTC (Coordinated Universal Time), not in local time.'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Date.UTC(year, month, date, hours, minutes, seconds, ms)` | 返回一个时间戳，但以协调世界时（UTC）而非本地时间为基准。'
- en: '[PRE120]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '|'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: The Date.prototype members
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Date.prototype`成员'
- en: 'Following are the list of `Date.prototype` members:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为`Date.prototype`成员列表：
- en: '| **Property/method** | **Description/example** |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述/示例** |'
- en: '| `toUTCString()` | Same as `toString()` but in universal time. Here''s how
    Pacific Standard (PST) local time differs from UTC:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '| `toUTCString()` | 与`toString()`相同，但使用通用时间。以下是太平洋标准时间（PST）与UTC的差异：'
- en: '[PRE121]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '|'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `toDateString()` | Returns only the date portion of `toString()`:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '| `toDateString()` | 返回`toString()`的仅日期部分：'
- en: '[PRE122]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '|'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `toTimeString()` | Returns only the time portion of `toString()`:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '| `toTimeString()` | 仅返回`toString()`的时间部分：'
- en: '[PRE123]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '|'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `toLocaleString()``toLocaleDateString()``toLocaleTimeString()` | Equivalent
    to `toString()`, `toDateString()`, and `toTimeString()` respectively, but in a
    friendlier format, according to the current user''s locale:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '| `toLocaleString()` `toLocaleDateString()` `toLocaleTimeString()` | 分别等同于`toString()`、`toDateString()`和`toTimeString()`，但以更友好的格式呈现，根据当前用户的区域设置：'
- en: '[PRE124]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '|'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `getTime()``setTime(time)` | Get or set the time (using a timestamp) of a
    date object. The following example creates a date and moves it one day forward:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '| `getTime()` `setTime(time)` | 获取或设置日期对象的日期（使用时间戳）。以下示例创建一个日期并将其向前移动一天：'
- en: '[PRE125]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '|'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `getFullYear()``getUTCFullYear()``setFullYear(year, month, date)``setUTCFullYear(year,
    month, date)` | Get or set a full year using local or UTC time. There is also
    `getYear()` but it is not Y2K compliant, so use `getFullYear()` instead:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '| `getFullYear()` `getUTCFullYear()` `setFullYear(year, month, date)` `setUTCFullYear(year,
    month, date)` | 使用本地或UTC时间获取或设置完整的年份。还有一个`getYear()`，但它不符合Y2K标准，因此请使用`getFullYear()`：'
- en: '[PRE126]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '|'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `getMonth()``getUTCMonth()``setMonth(month, date)``setUTCMonth(month, date)`
    | Get or set month, starting from 0 (January):'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '| `getMonth()` `getUTCMonth()` `setMonth(month, date)` `setUTCMonth(month,
    date)` | 获取或设置月份，从0（一月）开始：'
- en: '[PRE127]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '|'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `getDate()``getUTCDate()``setDate(date)``setUTCDate(date)` | Get or set date
    of the month.'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '| `getDate()` `getUTCDate()` `setDate(date)` `setUTCDate(date)` | 获取或设置月份的日期。'
- en: '[PRE128]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '|'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `getHours()``getUTCHours()``setHours(hour, min, sec, ms)``setUTCHours(hour,
    min, sec, ms)``getMinutes()``getUTCMinutes()``setMinutes(min, sec, ms)``setUTCMinutes(min,
    sec, ms)``getSeconds()``getUTCSeconds()``setSeconds(sec, ms)``setUTCSeconds(sec,
    ms)``getMilliseconds()``getUTCMilliseconds()``setMilliseconds(ms)``setUTCMilliseconds(ms)`
    | Get/Set hour, minutes, seconds, milliseconds, all starting from `0`:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '| `getHours()` `getUTCHours()` `setHours(hour, min, sec, ms)` `setUTCHours(hour,
    min, sec, ms)` `getMinutes()` `getUTCMinutes()` `setMinutes(min, sec, ms)` `setUTCMinutes(min,
    sec, ms)` `getSeconds()` `getUTCSeconds()` `setSeconds(sec, ms)` `setUTCSeconds(sec,
    ms)` `getMilliseconds()` `getUTCMilliseconds()` `setMilliseconds(ms)` `setUTCMilliseconds(ms)`
    | 获取/设置小时、分钟、秒、毫秒，所有都是从`0`开始：'
- en: '[PRE129]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '|'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `getTimezoneOffset()` | Returns the difference between local and universal
    (UTC) time, measured in minutes. For example the difference between PST (Pacific
    Standard Time) and UTC:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '| `getTimezoneOffset()` | 返回本地时间和通用时间（UTC）之间的差异，以分钟为单位。例如，PST（太平洋标准时间）和UTC之间的差异：'
- en: '[PRE130]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '|'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `getDay()``getUTCDay()` | Returns the day of the week, starting from 0 (Sunday):'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '| `getDay()` `getUTCDay()` | 返回星期几，从0（星期日）开始：'
- en: '[PRE131]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '|'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: ECMAScript 5 additions to Date
  id: totrans-438
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ECMAScript 5对Date的扩展
- en: 'Following are the additions to the `Date` constructor:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`Date`构造函数的扩展：
- en: '| **Property/method** | **Description** |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `Date.now()` | A convenient way to get the current timestamp:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Date.now()` | 获取当前时间戳的便捷方式：'
- en: '[PRE132]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '|'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Date.prototype.toISOString()` | Yet another `toString()`:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Date.prototype.toISOString()` | 另一个`toString()`：'
- en: '[PRE133]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '|'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Date.prototype.toJSON()` | Used by `JSON.stringify()` (refer to the end
    of this appendix) and returns the same as `toISOString()`:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Date.prototype.toJSON()` | 由`JSON.stringify()`（请参阅附录末尾）使用，并返回与`toISOString()`相同的结果：'
- en: '[PRE134]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '|'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Math
  id: totrans-450
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Math
- en: '`Math` is a different from the other built-in objects because it cannot be
    used as a constructor to create objects. It''s just a collection of static functions
    and constants. Some examples to illustrate the difference are as follows:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '`Math`与其他内置对象不同，因为它不能用作构造函数来创建对象。它只是一个静态函数和常数的集合。以下是一些示例来说明这种差异：'
- en: '[PRE135]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: Members of the Math object
  id: totrans-453
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Math对象的成员
- en: 'Following are the members of the `Math` object:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`Math`对象的成员：
- en: '| **Property/method** | **Description** |'
  id: totrans-455
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `Math.E``Math.LN10``Math.LN2``Math.LOG2E``Math.LOG10E``Math.PI``Math.SQRT1_2``Math.SQRT2`
    | These are some useful math constants, all read-only. Here are their values:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Math.E` `Math.LN10` `Math.LN2` `Math.LOG2E` `Math.LOG10E` `Math.PI` `Math.SQRT1_2`
    `Math.SQRT2` | 这些是一些有用的数学常数，都是只读的。以下是它们的值：'
- en: '[PRE136]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '|'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Math.acos(x)``Math.asin(x)``Math.atan(x)``Math.atan2(y, x)``Math.cos(x)``Math.sin(x)``Math.tan(x)`
    | Trigonometric functions |'
  id: totrans-459
  prefs: []
  type: TYPE_TB
  zh: '| `Math.acos(x)` `Math.asin(x)` `Math.atan(x)` `Math.atan2(y, x)` `Math.cos(x)`
    `Math.sin(x)` `Math.tan(x)` | 三角函数 |'
- en: '| `Math.round(x)``Math.floor(x)``Math.ceil(x)` | `round()` gives you the nearest
    integer, `ceil()` rounds up, and `floor()` rounds down:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Math.round(x)` `Math.floor(x)` `Math.ceil(x)` | `round()`返回最近的整数，`ceil()`向上取整，`floor()`向下取整：'
- en: '[PRE137]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '|'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Math.max(num1, num2, num3, ...)``Math.min(num1, num2, num3, ...)` | `max()`
    returns the largest and `min()` returns the smallest of the numbers passed to
    them as arguments. If at least one of the input parameters is `NaN`, the result
    is also `NaN`:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Math.max(num1, num2, num3, ...)` `Math.min(num1, num2, num3, ...)` | `max()`
    返回传入参数中的最大值，而 `min()` 返回最小值。如果至少有一个输入参数是 `NaN`，则结果也是 `NaN`：'
- en: '[PRE138]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '|'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Math.abs(x)` | Absolute value:'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Math.abs(x)` | 绝对值：'
- en: '[PRE139]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '|'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Math.exp(x)` | Exponential function: `Math.E` to the power of `x`:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Math.exp(x)` | 指数函数：`Math.E` 的 `x` 次幂：'
- en: '[PRE140]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '|'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Math.log(x)` | Natural logarithm of `x`:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Math.log(x)` | `x` 的自然对数：'
- en: '[PRE141]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '|'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Math.sqrt(x)` | Square root of `x`:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Math.sqrt(x)` | `x` 的平方根：'
- en: '[PRE142]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '|'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Math.pow(x, y)` | `x` to the power of `y`:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Math.pow(x, y)` | `x` 的 `y` 次幂：'
- en: '[PRE143]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '|'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Math.random()` | Random number between 0 and 1 (including 0).'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '| `Math.random()` | 介于 0 和 1 之间的随机数（包括 0）。'
- en: '[PRE144]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '|'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: RegExp
  id: totrans-484
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RegExp
- en: 'You can create a regular expression object using the `RegExp()` constructor.
    You pass the expression pattern as the first parameter and the pattern modifiers
    as the second:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `RegExp()` 构造函数创建正则表达式对象。您将表达式模式作为第一个参数传递，将模式修饰符作为第二个参数：
- en: '[PRE145]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: 'This matches "noodle", "doodle", "doooodle", and so on. It''s equivalent to
    using the regular expression literal:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 这与使用正则表达式文字 `noodle`, "doodle", "doooodle"，等等相匹配。它相当于使用正则表达式文字：
- en: '[PRE146]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[Chapter 4](ch04.html "Chapter 4. Objects"), *Objects* and [Appendix D](apd.html
    "Appendix D. Regular Expressions"), *Regular Expressions* contain more information
    on regular expressions and patterns.'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 4 章](ch04.html "第 4 章。对象"), *对象* 和 [附录 D](apd.html "附录 D。正则表达式"), *正则表达式*
    包含有关正则表达式和模式的信息。'
- en: The RegExp.prototype members
  id: totrans-490
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RegExp.prototype 成员
- en: 'Following are the `RegExp.prototype` members:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 `RegExp.prototype` 成员：
- en: '| **Property/method** | **Description** |'
  id: totrans-492
  prefs: []
  type: TYPE_TB
  zh: '| **属性/方法** | **描述** |'
- en: '| `global` | Read-only `true` if the `g` modifier was set when creating the
    `regexp` object. |'
  id: totrans-493
  prefs: []
  type: TYPE_TB
  zh: '| `global` | 只读 `true`，如果创建 `regexp` 对象时设置了 `g` 修饰符。|'
- en: '| `ignoreCase` | Read-only. `true` if the `i` modifier was set when creating
    the `regexp` object. |'
  id: totrans-494
  prefs: []
  type: TYPE_TB
  zh: '| `ignoreCase` | 只读。当创建 `regexp` 对象时，如果设置了 `i` 修饰符，则为 `true`。|'
- en: '| `multiline` | Read-only. `true` if the `m` modifier was set when creating
    the `regexp` object |'
  id: totrans-495
  prefs: []
  type: TYPE_TB
  zh: '| `multiline` | 只读。如果创建 `regexp` 对象时设置了 `m` 修饰符，则为 `true` |'
- en: '| `lastIndex` | Contains the position in the string where the next match should
    start. `test()` and `exec()`set this position after a successful match. Only relevant
    when the `g` (global) modifier was used:'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '| `lastIndex` | 包含字符串中下一个匹配应开始的位罝。`test()` 和 `exec()` 在成功匹配后设置此位置。仅在使用了 `g`（全局）修饰符时相关：'
- en: '[PRE147]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '|'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `source` | Read-only. Returns the regular expression pattern (without the
    modifiers):'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '| `source` | 只读。返回正则表达式模式（不带修饰符）：'
- en: '[PRE148]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '|'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `exec(string)` | Matches the input string with the regular expression. On
    a successful match returns an array containing the match and any capturing groups.
    With the `g` modifier, it matches the first occurrence and sets the `lastIndex`
    property. Returns `null` when there''s no match:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '| `exec(string)` | 将输入字符串与正则表达式匹配。在成功匹配时返回包含匹配项和任何捕获组的数组。使用 `g` 修饰符时，它匹配第一个出现并设置
    `lastIndex` 属性。如果没有匹配，则返回 `null`：'
- en: '[PRE149]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: 'The arrays returned by `exec()` have two additional properties: index (of the
    match) and input (the input string being searched). |'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '`exec()` 返回的数组有两个额外的属性：索引（匹配的位置）和输入（正在搜索的输入字符串）。|'
- en: '| `test(string)` | Same as `exec()` but only returns `true` or `false`:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '| `test(string)` | 与 `exec()` 相同，但只返回 `true` 或 `false`：'
- en: '[PRE150]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '|'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Error objects
  id: totrans-508
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Error 对象
- en: 'Error objects are created either by the environment (the browser) or by your
    code:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: Error 对象是由环境（浏览器）或您的代码创建的：
- en: '[PRE151]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'Other than the `Error` constructor, six additional ones exist and they all
    inherit `Error`:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `Error` 构造函数外，还存在六个额外的构造函数，它们都继承自 `Error`：
- en: EvalError
  id: totrans-512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EvalError
- en: RangeError
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RangeError
- en: ReferenceError
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ReferenceError
- en: SyntaxError
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SyntaxError
- en: TypeError
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TypeError
- en: URIError
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URIError
- en: The Error.prototype members
  id: totrans-518
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Error.prototype 成员
- en: 'Following are the `Error.prototype` members:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为 `Error.prototype` 成员：
- en: '| **Property** | **Description** |'
  id: totrans-520
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **描述** |'
- en: '| `name` | The name of the error constructor used to create the object:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '| `name` | 创建对象时使用的错误构造函数的名称：'
- en: '[PRE152]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '|'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `message` | Additional error information:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '| `message` | 其他错误信息：'
- en: '[PRE153]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '|'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: JSON
  id: totrans-527
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON
- en: 'The JSON object is new to ES5\. It''s not a constructor (similarly to `Math`)
    and has only two methods: `parse()` and `stringify()`. For ES3 browsers that don''t
    support JSON natively, you can use the "shim" from [http://json.org](http://json.org).'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 对象是 ES5 中的新特性。它不是一个构造函数（类似于 `Math`），并且只有两个方法：`parse()` 和 `stringify()`。对于不支持
    JSON 的 ES3 浏览器，您可以使用来自 [http://json.org](http://json.org) 的 "shim"。
- en: '**JSON** stands for **JavaScript Object Notation**. It''s a lightweight data
    interchange format. It''s a subset of JavaScript that only supports primitives,
    object literals, and array literals.'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '**JSON**代表**JavaScript对象表示法**。它是一种轻量级的数据交换格式。它是JavaScript的一个子集，只支持基本数据类型、对象字面量和数组字面量。'
- en: Members of the JSON object
  id: totrans-530
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSON对象成员
- en: 'Following are the members of the `JSON` object:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`JSON`对象成员：
- en: '| **Method** | **Description** |'
  id: totrans-532
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** |'
- en: '| `parse(text, callback)` | Takes a JSON-encoded string and returns an object:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '| `parse(text, callback)` | 接受一个JSON编码的字符串并返回一个对象：'
- en: '[PRE154]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: The optional callback lets you provide your own function that can inspect and
    modify the result. The callback takes `key` and `value` arguments and can modify
    the `value` or delete it (by returning `undefined`).
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的回调允许你提供一个自己的函数来检查和修改结果。该回调接受`key`和`value`参数，可以修改`value`或删除它（通过返回`undefined`）。
- en: '[PRE155]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '|'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `stringify(value, callback, white)` | Takes any value (most commonly an object
    or an array) and encodes it to a JSON string.'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '| `stringify(value, callback, white)` | 接受任何值（最常见的是对象或数组）并将其编码为JSON字符串。'
- en: '[PRE156]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: 'The second parameter lets you provide a callback (or a whitelist array) to
    customize the return value. The whitelist contains the keys you''re interested
    in:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数允许你提供一个回调（或一个白名单数组）来定制返回值。白名单包含你感兴趣的键：
- en: '[PRE157]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: 'The last parameter helps you get a human-readable version. You specify the
    number of spaces as a string or a number:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个参数帮助你获取一个可读性强的版本。你可以将空格的数量指定为一个字符串或一个数字：
- en: '[PRE158]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '|'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
