- en: Appendix C. Built-in Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This appendix lists the built-in constructor functions outlined in the **ECMAScript**
    (**ES**) standard, together with the properties and methods of the objects created
    by these constructors. ES5-specific APIs are listed separately.
  prefs: []
  type: TYPE_NORMAL
- en: Object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Object()` is a constructor that creates objects, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the same as using the object literal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can pass anything to the constructor and it will try to guess what it is
    and use a more appropriate constructor. For example, passing a string to `new
    Object()` will be the same as using the `new String()` constructor. This is not
    a recommended practice (it''s better to be explicit than let guesses creep in),
    but still possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: All other objects, built-in or custom, inherit from `Object`. So the properties
    and methods listed in the following sections apply to all types of objects.
  prefs: []
  type: TYPE_NORMAL
- en: Members of the Object constructor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the members of the `Object` constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Object.prototype` | The prototype of all objects (also an object itself).
    Anything you add to this prototype will be inherited by all other objects, so
    be careful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: The Object.prototype members
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of saying "members of the Objects created by the Object constructor",
    let''s say headings "`Object.prototype` members". It is the same for `Array.prototype`
    and so on further in this appendix:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `constructor` | Points back to the constructor function used to create the
    object, in this case, `Object`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `toString(radix)` | Returns a string representation of the object. If the
    object happens to be a `Number` object, the radix parameter defines the base of
    the returned number. The default radix is `10`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `toLocaleString()` | Same as `toString()`, but matching the current locale.
    Meant to be customized by objects, such as `Date()`, `Number()`, and `Array()`
    and provide locale-specific values, such as different date formatting. In the
    case of `Object()` instances as with most other cases, it just calls `toString()`.In
    browsers, you can figure out the language using the property `language` (or `userLanguage`
    in IE) of the navigator BOM object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `valueOf()` | Returns a primitive representation of `this`, if applicable.
    For example, `Number` objects return a primitive number and `Date` objects return
    a timestamp. If no suitable primitive makes sense, it simply returns `this`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `hasOwnProperty(prop)` | Returns `true` if a property is an own property
    of the object, or `false` if it was inherited from the prototype chain. Also returns
    `false` if the property doesn''t exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `isPrototypeOf(obj)` | Returns `true` if an object is used as a prototype
    of another object. Any object from the prototype chain can be tested, not only
    the direct creator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `propertyIsEnumerable(prop)` | Returns `true` if a property shows up in a
    `for...in` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 5 additions to objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In ECMAScript 3 all object properties can be changed, added, or deleted at any
    time, except for a few built-in properties (for example, `Math.PI`). In ES5 you
    have the ability to define properties that cannot be changed or deleted, a privilege
    previously reserved for built-ins. ES5 introduces the concept of **property descriptors**
    that give you tighter control over the properties you define.
  prefs: []
  type: TYPE_NORMAL
- en: 'Think of a property descriptor as an object that specifies the features of
    a property. The syntax to describe these features is a regular object literal,
    so property descriptors have properties and methods of their own, but let''s call
    them **attributes** to avoid confusion. The attributes are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value` - what you get when you access the property'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`writable` - can you change this property'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enumerable` - should it appear in `for...in` loops'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`configurable` - can you delete it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set()` - a function called any time you update the value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get()` - called when you access the value of the property'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further there's a distinction between **data descriptors** (you define the properties
    `enumerable`, `configurable`, `value`, and `writable`) and **accessor descriptors**
    (you define `enumerable`, `configurable`, `set()`, and `get()`). If you define
    `set()` or `get()`, the descriptor is considered an accessor and attempting to
    define value or writable will raise an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Defining a regular old school ES3-style property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Same using an ES5 data descriptor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The value of `value` if set to `undefined` by default, all others are `false`.
    So you need to set them to `true` explicitly if you want to be able to change
    this property later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Or the same property using an ES5 accessor descriptor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As you can see property descriptors are a lot more code, so you only use them
    if you really want to prevent someone from mangling your property, and also you
    forget about backwards compatibility with ES3 browsers because, unlike additions
    to `Array.prototype` for example, you cannot "shim" this feature in old browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'And the power of the descriptors in action (defining a nonmalleable property):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a list of all ES5 additions to `Object`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Object.getPrototypeOf(obj)` | While in ES3 you have to guess what is the
    prototype of a given object is using the method `Object.prototype.isPrototypeOf()`,
    in ES5 you can directly ask "Who is your prototype?"'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Object.create(obj, descr`) | Discussed in [Chapter 7](ch07.html "Chapter 7. Inheritance"),
    *Inheritance*. Creates a new object, sets its prototype and defines properties
    of that object using property descriptors (discussed earlier):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'It even lets you create a completely blank object, something you cannot do
    in ES3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Object.getOwnPropertyDescriptor(obj, property)` | Allows you to inspect
    how a property was defined. You can even peek into the built-ins and see all these
    previously hidden attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Object.getOwnPropertyNames(obj)` | Returns an array of all own property
    names (as strings), enumerable or not. Use `Object.keys()` to get only enumerable
    ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Object.defineProperty(obj, descriptor)` | Defines a property of an object
    using a property descriptor. See the discussion preceding this table. |'
  prefs: []
  type: TYPE_TB
- en: '| `Object.defineProperties(obj, descriptors)` | Same as `defineProperty()`,
    but lets you define multiple properties at once:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Object.preventExtensions(obj)``Object.isExtensible(obj)` | `preventExtensions()`
    disallows adding further properties to an object and `isExtensible()` checks whether
    you can add properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Attempting to add properties to a non-extensible object is not an error, but
    simply doesn''t work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Object.seal(obj)``Object.isSealed(obj)` | `seal()` does the same as `preventExtensions()`
    and additionally makes all existing properties non-configurable.This means you
    can change the value of an existing property, but you cannot delete it or reconfigure
    it (using `defineProperty()` won''t work). So you cannot, for example, make an
    enumerable property non-enumerable. |'
  prefs: []
  type: TYPE_TB
- en: '| `Object.freeze(obj)``Object.isFrozen(obj)` | Everything that `seal()` does
    plus prevents changing the values of properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Object.keys(obj)` | An alternative to a `for...in` loop. Returns only own
    properties (unlike `for...in`). The properties need to be enumerable in order
    to show up (unlike `Object.getOwnPropertyNames()`). The return value is an array
    of strings.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: ES6 addition to objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ES6 has a few interesting object definition and property syntax. This new syntax
    is to make working with objects easier and concise.
  prefs: []
  type: TYPE_NORMAL
- en: Property shorthand
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ES6 provides a shorter syntax for common object definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'ES5: `obj = { x: x, y: y };`'
  prefs: []
  type: TYPE_NORMAL
- en: 'ES6: `obj = {x,y};`'
  prefs: []
  type: TYPE_NORMAL
- en: Computed property names
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is possible to compute property names in the new ES6 object definition syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Here the property name is computed where `"baz"` is concatenated with the result
    of the function call.
  prefs: []
  type: TYPE_NORMAL
- en: Object.assign
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Object.assign()` method is used to copy the values of all enumerable own
    properties from one or more source objects to a target object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Array` constructor creates array objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the same as the array literal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'When you pass only one numeric value to the `Array` constructor, it''s assumed
    to be the array length:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You get an array with the desired length and if you ask for the value of each
    of the array elements, you get `undefined`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a subtle difference between an array full of elements and array with
    no elements, but just length:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This difference in the `Array()` constructor''s behavior when you specify one
    versus more parameters can lead to unexpected behavior. For example, the following
    use of the array literal is valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'However, passing the floating-point number to the `Array` constructor is an
    error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The Array.prototype members
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the list of all the elements of an `Array`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `length` | The number of elements in the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `concat(i1, i2, i3,...)` | Merges arrays together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `join(separator)` | Turns an array into a string. The separator parameter
    is a string with comma as the default value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `pop()` | Removes the last element of the array and returns it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `push(i1, i2, i3,...)` | Appends elements to the end of the array and returns
    the length of the modified array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `reverse()` | Reverses the elements of the array and returns the modified
    array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `shift()` | Like `pop()` but removes the first element, not the last:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `slice(start_index, end_index)` | Extracts a piece of the array and returns
    it as a new array, without modifying the source array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `sort(callback)` | Sorts an array. Optionally accepts a callback function
    for custom sorting. The callback function receives two array elements as arguments
    and should return `0` if they are equal, a positive number if the first is greater,
    and a negative number if the second is greater.An example of a custom sorting
    function that does a proper numeric sort (since the default is character sorting):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `splice(start, delete_count, i1, i2, i3,...)` | Removes and adds elements
    at the same time. The first parameter is where to start removing, the second is
    how many items to remove and the rest of the parameters are new elements to be
    inserted in the place of the removed ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `unshift(i1, i2, i3,...)` | Like `push()` but adds the elements at the beginning
    of the array as opposed to the end. Returns the length of the modified array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 5 additions to Array
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the ECMAScript 5 additions to `Array`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Array.isArray(obj)` | Tells if an object is an array because `typeof` is
    not good enough:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Neither is duck-typing (if it walks like a duck and quacks like a duck, it
    must be a duck):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'In ES3 you need the verbose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'In ES5 you get the shorter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Array.prototype.indexOf(needle, idx)` | Searches the array and returns the
    index of the first match. Returns `-1` if there''s no match. Optionally can search
    starting from a specified index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Array.prototype.lastIndexOf(needle, idx)` | Like `indexOf()` only searches
    from the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Array.prototype.forEach(callback, this_obj)` | An alternative to a `for`
    loop. You specify a callback function that will be called for each element of
    the array. The callback function gets the arguments: the element, its index and
    the whole array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally, you can specify a second parameter: the object to be bound to this
    inside the callback function. So this works too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Array.prototype.every(callback, this_obj)` | You provide a callback function
    that tests each element of the array. Your callback is given the same arguments
    as `forEach()` and it must return `true` or `false` depending on whether the given
    element satisfies your test.If all elements satisfy your test, `every()` returns
    `true`. If at least one doesn''t, `every()` returns `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'If at some point during the loop it becomes clear that the result will be `false`,
    the loop stops and returns `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Array.prototype.some(callback, this_obj)` | Like `every()`, only it returns
    `true` if at least one element satisfies your test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Array.prototype.filter(callback, this_obj)` | Similar to `some()` and `every()`
    but it returns a new array of all elements that satisfy your test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Array.prototype.map(callback, this_obj)` | Similar to `forEach()` because
    it executes a callback for each element, but additionally it constructs a new
    array with the returned values of your callback and returns it. Let''s capitalize
    all strings in an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Array.prototype.reduce(callback, start)` | Executes your callback for each
    element of the array. Your callback returns a value. This value is passed back
    to your callback with the next iteration. The whole array is eventually reduced
    to a single value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally you can pass a start value which will be used by the first callback
    call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Array.prototype.reduceRight(callback, start)` | Like `reduce()` but loops
    from the end of the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: ES6 addition to arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the addition to arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Array.from(arrayLike, mapFunc?, thisArg?)` | The `Array.from()` method''s
    basic functionality is to convert two kinds of values to arrays-`arrayLike` values
    and `Iterable` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Array.of(...items)` | Creates an array out of the items passed to the method'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Array.prototype.entries()``Array.prototype.keys()``Array.prototype.values()`
    | The result of these methods is a sequence of values. These methods returns an
    iterator of keys, values and entries respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Array.prototype.find(predicate, thisArg?)` | Returns the first array element
    for which the callback function returns `true.` If there is no such element, it
    returns `undefined`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Array.prototype.findIndex(predicate, thisArg?)` | Returns the index of the
    first element for which the callback function returns true. If there is no such
    element, it returns `-1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Array.prototype.fill(value : any, start=0, end=this.length) : This` | It
    fills an array with the given value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JavaScript functions are objects. They can be defined using the `Function`
    constructor, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a (generally not recommended) alternative to the function literal (also
    known as function expression):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, the more common function definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: The Function.prototype members
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the list of members of the `Function` constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/Method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `apply(this_obj, params_array)` | Allows you to call another function while
    overwriting the other function''s `this` value. The first parameter that `apply()`
    accepts is the object to be bound to this inside the function and the second is
    an array of arguments to be sent to the function being called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `call(this_obj, p1, p2, p3, ...)` | Same as `apply()` but accepts arguments
    one by one, as opposed to as one array. |'
  prefs: []
  type: TYPE_TB
- en: '| `length` | The number of parameters the function expects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'If you forget the difference between `call()` and `apply()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The `call()` property's length is `1` because all arguments except the first
    one are optional. |
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 5 additions to a Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the ECMAScript 5 addition to a `Function` constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Function.prototype.bind()` | When you want to call a function that uses
    this internally and you want to define what this is. The methods `call()` and
    `apply()` invoke the function while `bind()` returns a new function. Useful when
    you provide a method as a callback to a method of another object and and you want
    this to be an object of your choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 6 additions to a Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the ECMAScript 6 addition to a `Function` constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Arrow Functions**An arrow function expression has a shorter syntax compared
    to function expressions and does not bind its own this, arguments, super, or `new.target`.
    Arrow functions are always anonymous. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Statement Bodies are more expressive and concise closure syntax |'
  prefs: []
  type: TYPE_TB
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Boolean
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Boolean` constructor creates Boolean objects (not to be confused with Boolean
    primitives). The Boolean objects are not that useful and are listed here for the
    sake of completeness.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'A Boolean object is not the same as a Boolean primitive value. As you know,
    all objects are truthy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Boolean objects don't have any properties other than the ones inherited from
    `Object`.
  prefs: []
  type: TYPE_NORMAL
- en: Number
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This creates number objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: The `Number` objects are not primitive objects, but if you use any `Number.prototype`
    method on a primitive number, the primitive will be converted to a `Number` object
    behind the scenes and the code will work.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Used without `new`, the `Number` constructor returns a primitive number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Members of the Number constructor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider the following members of the `Number` constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Number.MAX_VALUE` | A constant property (cannot be changed) that contains
    the maximum allowed number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Number.MIN_VALUE` | The smallest number you can work with in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Number.NaN` | Contains the Not A Number number. Same as the global NaN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'NaN is not equal to anything including itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Number.POSITIVE_INFINITY` | Same as the global `Infinity` number. |'
  prefs: []
  type: TYPE_TB
- en: '| `Number.NEGATIVE_INFINITY` | Same as `-Infinity`. |'
  prefs: []
  type: TYPE_TB
- en: The Number.prototype members
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the members of the `Number` constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `toFixed(fractionDigits)` | Returns a string with the fixed-point representation
    of the number. Rounds the returned value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `toExponential(fractionDigits)` | Returns a string with exponential notation
    representation of the number object. Rounds the returned value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `toPrecision(precision)` | String representation of a number object, either
    exponential or fixed-point, depending on the number object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `String()` constructor creates string objects. Primitive strings are turned
    into objects behind the scenes if you call a method on them as if they were objects.
    Omitting `new` gives you primitive strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a string object and a string primitive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'The object and the primitive are not equal when compared by type with `===`,
    but they are when compared with `==` which does type coercion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '`length` is a property of the string objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'If you access `length` on a primitive string, the primitive is converted to
    an object behind the scenes and the operation is successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'String literals work fine too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Members of the String constructor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the members of the `String` constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `String.fromCharCode (code1, code2, code3, ...)` | Returns a string created
    using the Unicode values of the input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: The String.prototype members
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider the following `String.prototype` members:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `length` | The number of characters in the string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `charAt(position)` | Returns the character at the specified position. Positions
    start at `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Since ES5, it''s also possible to use array notation for the same purpose.
    (This feature has been long supported in many browsers before ES5, but not IE):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `charCodeAt(position)` | Returns the numeric code (Unicode) of the character
    at the specified position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `concat(str1, str2, ....)` | Returns a new string glued from the input pieces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `indexOf(needle, start)` | If the needle matches a part of the string, the
    position of the match is returned. The optional second parameter defines where
    the search should start from. Returns `-1` if no match is found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `lastIndexOf(needle, start)` | Same as `indexOf()` but starts the search
    from the end of the string. The last occurrence of `a`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `localeCompare(needle)` | Compares two strings in the current locale. Returns
    `0` if the two strings are equal, `1` if the needle gets sorted before the string
    object, `-1` otherwise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `match(regexp)` | Accepts a regular expression object and returns an array
    of matches:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `replace(needle, replacement)` | Allows you to replace the matching results
    of a regexp pattern. The replacement can also be a callback function. Capturing
    groups are available as `$1, $2,...$9`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `search(regexp)` | Returns the position of the first regular expression match:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `slice(start, end)` | Returns the part of a string identified by the start
    and end positions. If `start` is negative, the start position is `length` + `start`,
    similarly if the `end` parameter is negative, the end position is length + end:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `split(separator, limit)` | Turns a string into an array. The second parameter,
    limit, is optional. As with `replace()`, `search()`, and `match()`, the separator
    is a regular expression but can also be a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `substring(start, end)` | Similar to `slice()`. When start or end are negative
    or invalid, they are considered 0\. If they are greater than the string length,
    they are considered to be the length. If `end` is greater than `start`, their
    values are swapped.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `toLowerCase()``toLocaleLowerCase()` | Transforms the string to lowercase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `toUpperCase()``toLocaleUpperCase()` | Transforms the string to uppercase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 5 additions to String
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the ECMAScript 5 additions to String:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `String.prototype.trim()` | Instead of using a regular expression to remove
    whitespace before and after a string (as in ES3), you have a `trim()` method in
    ES5.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 6 additions to String
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the list of all the ECMAScript 6 additions to String:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Template Literals are used to interpolate single or multi-line strings.Template
    literals are enclosed by the back-tick (`` ` ` ``) (grave accent) character instead
    of double or single quotes. Template literals can contain place holders. These
    are indicated by the Dollar sign and curly braces (`${expression}`). The expressions
    in the place holders and the text between them get passed to a function. The default
    function just concatenates the parts into a single string. |'
  prefs: []
  type: TYPE_TB
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `String.prototype.repeat` - this method allows you to repeat a string n number
    of times |'
  prefs: []
  type: TYPE_TB
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `String.prototype.startsWith``String.prototype.endsWith``String.prototype.includes`These
    are new string searching methods |'
  prefs: []
  type: TYPE_TB
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Date
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Date` constructor can be used with several types of input:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can pass values for year, month, date of the month, hour, minute, second,
    and millisecond, like so:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can skip any of the input parameters, in which case they are assumed to
    be 0\. Note that month values are from 0 (January) to 11 (December), hours are
    from 0 to 23, minutes and seconds 0 to 59, and milliseconds 0 to 999.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can pass a timestamp:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you don''t pass anything, the current date/time is assumed:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you pass a string, it''s parsed in an attempt to extract a possible date
    value:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Omitting `new` gives you a string version of the current date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Members of the Date constructor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the members of the Date constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Date.parse(string)` | Similar to passing a string to new `Date()` constructor,
    this method parses the input string in attempt to extract a valid date value.
    Returns a timestamp on success, `NaN` on failure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Date.UTC(year, month, date, hours, minutes, seconds, ms)` | Returns a timestamp
    but in UTC (Coordinated Universal Time), not in local time.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: The Date.prototype members
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the list of `Date.prototype` members:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description/example** |'
  prefs: []
  type: TYPE_TB
- en: '| `toUTCString()` | Same as `toString()` but in universal time. Here''s how
    Pacific Standard (PST) local time differs from UTC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `toDateString()` | Returns only the date portion of `toString()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `toTimeString()` | Returns only the time portion of `toString()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `toLocaleString()``toLocaleDateString()``toLocaleTimeString()` | Equivalent
    to `toString()`, `toDateString()`, and `toTimeString()` respectively, but in a
    friendlier format, according to the current user''s locale:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `getTime()``setTime(time)` | Get or set the time (using a timestamp) of a
    date object. The following example creates a date and moves it one day forward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `getFullYear()``getUTCFullYear()``setFullYear(year, month, date)``setUTCFullYear(year,
    month, date)` | Get or set a full year using local or UTC time. There is also
    `getYear()` but it is not Y2K compliant, so use `getFullYear()` instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `getMonth()``getUTCMonth()``setMonth(month, date)``setUTCMonth(month, date)`
    | Get or set month, starting from 0 (January):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `getDate()``getUTCDate()``setDate(date)``setUTCDate(date)` | Get or set date
    of the month.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `getHours()``getUTCHours()``setHours(hour, min, sec, ms)``setUTCHours(hour,
    min, sec, ms)``getMinutes()``getUTCMinutes()``setMinutes(min, sec, ms)``setUTCMinutes(min,
    sec, ms)``getSeconds()``getUTCSeconds()``setSeconds(sec, ms)``setUTCSeconds(sec,
    ms)``getMilliseconds()``getUTCMilliseconds()``setMilliseconds(ms)``setUTCMilliseconds(ms)`
    | Get/Set hour, minutes, seconds, milliseconds, all starting from `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `getTimezoneOffset()` | Returns the difference between local and universal
    (UTC) time, measured in minutes. For example the difference between PST (Pacific
    Standard Time) and UTC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `getDay()``getUTCDay()` | Returns the day of the week, starting from 0 (Sunday):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 5 additions to Date
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the additions to the `Date` constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Date.now()` | A convenient way to get the current timestamp:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Date.prototype.toISOString()` | Yet another `toString()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Date.prototype.toJSON()` | Used by `JSON.stringify()` (refer to the end
    of this appendix) and returns the same as `toISOString()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Math
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Math` is a different from the other built-in objects because it cannot be
    used as a constructor to create objects. It''s just a collection of static functions
    and constants. Some examples to illustrate the difference are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: Members of the Math object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the members of the `Math` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Math.E``Math.LN10``Math.LN2``Math.LOG2E``Math.LOG10E``Math.PI``Math.SQRT1_2``Math.SQRT2`
    | These are some useful math constants, all read-only. Here are their values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Math.acos(x)``Math.asin(x)``Math.atan(x)``Math.atan2(y, x)``Math.cos(x)``Math.sin(x)``Math.tan(x)`
    | Trigonometric functions |'
  prefs: []
  type: TYPE_TB
- en: '| `Math.round(x)``Math.floor(x)``Math.ceil(x)` | `round()` gives you the nearest
    integer, `ceil()` rounds up, and `floor()` rounds down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Math.max(num1, num2, num3, ...)``Math.min(num1, num2, num3, ...)` | `max()`
    returns the largest and `min()` returns the smallest of the numbers passed to
    them as arguments. If at least one of the input parameters is `NaN`, the result
    is also `NaN`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Math.abs(x)` | Absolute value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Math.exp(x)` | Exponential function: `Math.E` to the power of `x`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Math.log(x)` | Natural logarithm of `x`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Math.sqrt(x)` | Square root of `x`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Math.pow(x, y)` | `x` to the power of `y`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Math.random()` | Random number between 0 and 1 (including 0).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: RegExp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can create a regular expression object using the `RegExp()` constructor.
    You pass the expression pattern as the first parameter and the pattern modifiers
    as the second:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'This matches "noodle", "doodle", "doooodle", and so on. It''s equivalent to
    using the regular expression literal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[Chapter 4](ch04.html "Chapter 4. Objects"), *Objects* and [Appendix D](apd.html
    "Appendix D. Regular Expressions"), *Regular Expressions* contain more information
    on regular expressions and patterns.'
  prefs: []
  type: TYPE_NORMAL
- en: The RegExp.prototype members
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the `RegExp.prototype` members:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property/method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `global` | Read-only `true` if the `g` modifier was set when creating the
    `regexp` object. |'
  prefs: []
  type: TYPE_TB
- en: '| `ignoreCase` | Read-only. `true` if the `i` modifier was set when creating
    the `regexp` object. |'
  prefs: []
  type: TYPE_TB
- en: '| `multiline` | Read-only. `true` if the `m` modifier was set when creating
    the `regexp` object |'
  prefs: []
  type: TYPE_TB
- en: '| `lastIndex` | Contains the position in the string where the next match should
    start. `test()` and `exec()`set this position after a successful match. Only relevant
    when the `g` (global) modifier was used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `source` | Read-only. Returns the regular expression pattern (without the
    modifiers):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `exec(string)` | Matches the input string with the regular expression. On
    a successful match returns an array containing the match and any capturing groups.
    With the `g` modifier, it matches the first occurrence and sets the `lastIndex`
    property. Returns `null` when there''s no match:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'The arrays returned by `exec()` have two additional properties: index (of the
    match) and input (the input string being searched). |'
  prefs: []
  type: TYPE_NORMAL
- en: '| `test(string)` | Same as `exec()` but only returns `true` or `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Error objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Error objects are created either by the environment (the browser) or by your
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'Other than the `Error` constructor, six additional ones exist and they all
    inherit `Error`:'
  prefs: []
  type: TYPE_NORMAL
- en: EvalError
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RangeError
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReferenceError
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SyntaxError
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeError
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URIError
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Error.prototype members
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the `Error.prototype` members:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `name` | The name of the error constructor used to create the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `message` | Additional error information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The JSON object is new to ES5\. It''s not a constructor (similarly to `Math`)
    and has only two methods: `parse()` and `stringify()`. For ES3 browsers that don''t
    support JSON natively, you can use the "shim" from [http://json.org](http://json.org).'
  prefs: []
  type: TYPE_NORMAL
- en: '**JSON** stands for **JavaScript Object Notation**. It''s a lightweight data
    interchange format. It''s a subset of JavaScript that only supports primitives,
    object literals, and array literals.'
  prefs: []
  type: TYPE_NORMAL
- en: Members of the JSON object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the members of the `JSON` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `parse(text, callback)` | Takes a JSON-encoded string and returns an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: The optional callback lets you provide your own function that can inspect and
    modify the result. The callback takes `key` and `value` arguments and can modify
    the `value` or delete it (by returning `undefined`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `stringify(value, callback, white)` | Takes any value (most commonly an object
    or an array) and encodes it to a JSON string.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'The second parameter lets you provide a callback (or a whitelist array) to
    customize the return value. The whitelist contains the keys you''re interested
    in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'The last parameter helps you get a human-readable version. You specify the
    number of spaces as a string or a number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
