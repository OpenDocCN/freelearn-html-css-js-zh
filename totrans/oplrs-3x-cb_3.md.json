["```js\n    <!-- Map DOM element --> \n    <div id=\"ch3_gml\" style=\"width: 100%; \n        height: 100%;\"></div> \n\n    ```", "```js\n    <!-- The magic comes here --> \n    <script type=\"text/javascript\"> \n        // Create the map using the specified DOM element \n        var map = new OpenLayers.Map(\"ch3_gml\");    \n\n        var layer = new \n            OpenLayers.Layer.OSM(\"OpenStreetMap\"); \n        map.addLayer(layer); \n\n        map.addControl(new \n            OpenLayers.Control.LayerSwitcher()); \n        map.setCenter(new OpenLayers.LonLat(0,0), 2); \n\n    ```", "```js\n        map.addLayer(new OpenLayers.Layer.Vector(\"Europe (GML)\", { \n            protocol: new OpenLayers.Protocol.HTTP({ \n                url: \"http://localhost:8080/\n                    openlayers-cookbook/recipes/\n                    data/europe.gml\", \n                format: new OpenLayers.Format.GML() \n            }), \n            strategies: [new OpenLayers.Strategy.Fixed()] \n        })); \n    </script>\n\n    ```", "```js\nnew OpenLayers.Layer.Vector(\"Europe (GML)\", { \n        protocol: new OpenLayers.Protocol.HTTP({ \n            url: \"http://localhost:8080/openlayers-cookbook/recipes/data/europe.gml\", \n            format: new OpenLayers.Format.GML() \n        }), \n        strategies: [new OpenLayers.Strategy.Fixed()] \n    })\n\n```", "```js\n    <!-- Map DOM element -->\n    <div id=\"ch3_kml\" style=\"width: 100%; height: 100%;\"></div>\n\n    ```", "```js\n    <!-- The magic comes here --> \n    <script type=\"text/javascript\"> \n\n        // Create the map using the specified DOM element \n        var map = new OpenLayers.Map(\"ch3_kml\");    \n\n        var layer = new OpenLayers.Layer.OSM(\"OpenStreetMap\"); \n        layer.wrapDateLine = false;\n        map.addLayer(layer); \n\n        map.addControl(new OpenLayers.Control.LayerSwitcher()); \n        map.setCenter(new OpenLayers.LonLat(0,0), 2); \n\n    ```", "```js\n        // Global Undersea Fiber Cables\n        map.addLayer(new OpenLayers.Layer.Vector(\"Global \n            Undersea Fiber Cables\", {\n            protocol: new OpenLayers.Protocol.HTTP({\n                url: \"http://localhost:8080/\n                openlayers-cookbook/recipes/\n                data/global_undersea.kml\",\n                format: new OpenLayers.Format.KML({\n                    extractStyles: true,\n                    extractAttributes: true\n                })\n            }),\n            strategies: [new OpenLayers.Strategy.Fixed()]\n        }));\n    </script> \n\n    ```", "```js\n    <!-- Map DOM element -->\n    <div id=\"ch3_features_programmatically\" \n        style=\"width: 100%; height: 100%;\"></div>\n\n    ```", "```js\n    <!-- The magic comes here -->\n    <script type=\"text/javascript\">\n\n        // Create the map using the specified DOM element\n        var map = new \n            OpenLayers.Map(\"ch3_features_programmatically\");    \n\n        // Add a WMS layer\n        var wms = new OpenLayers.Layer.WMS(\"Basic\", \n            \"http://vmap0.tiles.osgeo.org/wms/vmap0\",\n        {\n            layers: 'basic'\n        });\n        map.addLayer(wms);\n\n        map.addControl(new \n            OpenLayers.Control.LayerSwitcher());\n        map.setCenter(new OpenLayers.LonLat(0,0), 2);\n\n    ```", "```js\n        // Create some empty vector layers\n        var pointLayer = new \n            OpenLayers.Layer.Vector(\"Points\");\n        var lineLayer = new OpenLayers.Layer.Vector(\"Lines\");\n        var polygonLayer = new \n            OpenLayers.Layer.Vector(\"Polygon\");\n\n        // Add layers to the map\n        map.addLayers([polygonLayer, lineLayer, pointLayer]);\n\n    ```", "```js\n        // Fill layers\n        initializePointLayer();\n        initializeLineLayer();\n        initializePolygonLayer();\n\n        // Create some random points.\n        function initializePointLayer() {\n            var pointFeatures = [];\n            for(var i=0; i< 50; i++) {\n                var px = Math.random()*360-180;\n                var py = Math.random()*180-90;\n\n                var pointGeometry = new \n                    OpenLayers.Geometry.Point(px, py);\n                var pointFeature = new \n                    OpenLayers.Feature.Vector(pointGeometry);\n                pointFeatures.push(pointFeature);\n            }\n            pointLayer.addFeatures(pointFeatures);\n        }\n\n        // Create some random lines\n        function initializeLineLayer() {\n            for(var j=0; j< 2; j++) {\n                var pointGeometries = [];\n                for(var i=0; i< 10; i++) {\n                    var px = Math.random()*240-120;\n                    var py = Math.random()*100-50;\n\n                    var pointGeometry = new \n                        OpenLayers.Geometry.Point(px, py);\n                    pointGeometries.push(pointGeometry);\n                }\n                var lineGeometry = new OpenLayers.Geometry.\n                    LineString(pointGeometries);\n                var lineFeature = new \n                    OpenLayers.Feature.Vector(lineGeometry);\n                lineLayer.addFeatures(lineFeature);\n            }\n        }\n\n        // Create some random polygons\n        function initializePolygonLayer() {\n            for(var j=0; j< 2; j++) {\n                var pointGeometries = [];\n                for(var i=0; i< 5; i++) {\n                    var px = Math.random()*240-180;\n                    var py = Math.random()*100-90;\n\n                    var pointGeometry = new \n                        OpenLayers.Geometry.Point(px, py);\n                    pointGeometries.push(pointGeometry);\n                }\n                var linearGeometry = new OpenLayers.Geometry.\n                    LinearRing(pointGeometries);\n                var polygonGeometry = new OpenLayers.\n                    Geometry.Polygon([linearGeometry]);\n                var polygonFeature = new OpenLayers.\n                    Feature.Vector(polygonGeometry);\n                polygonLayer.addFeatures(polygonFeature);\n            }\n        }\n    </script>\n\n    ```", "```js\n        var pointFeatures = [];\n        for(var i=0; i< 50; i++) {\n            var px = Math.random()*360-180;\n            var py = Math.random()*180-90;\n\n            var pointGeometry = new \n                OpenLayers.Geometry.Point(px, py);\n            var pointFeature = new \n                OpenLayers.Feature.Vector(pointGeometry);\n            pointFeatures.push(pointFeature);\n        }\n        pointLayer.addFeatures(pointFeatures);\n\n```", "```js\n            var pointGeometries = [];\n            for(var i=0; i< 10; i++) {\n                var px = Math.random()*240-120;\n                var py = Math.random()*100-50;\n\n                var pointGeometry = new OpenLayers.Geometry.Point(px, py);\n                pointGeometries.push(pointGeometry);\n            }\n            var lineGeometry = new OpenLayers.Geometry.LineString(pointGeometries);\n            var lineFeature = new OpenLayers.Feature.Vector(lineGeometry);\n            lineLayer.addFeatures(lineFeature);\n\n```", "```js\n            var pointGeometries = [];\n            for(var i=0; i< 5; i++) {\n                var px = Math.random()*240-180;\n                var py = Math.random()*100-90;\n\n                var pointGeometry = new \n                    OpenLayers.Geometry.Point(px, py);\n                pointGeometries.push(pointGeometry);\n            }\n            var linearGeometry = new \n                OpenLayers.Geometry.LinearRing(pointGeometries);\n            var polygonGeometry = new \n                OpenLayers.Geometry.Polygon([linearGeometry]);\n            var polygonFeature = new \n                OpenLayers.Feature.Vector(polygonGeometry);\n            polygonLayer.addFeatures(polygonFeature);\n\n```", "```js\n    <!-- Map DOM element -->\n    <table style=\"width: 100%; height: 95%;\">\n        <tr>\n            <td>\n                <div id=\"ch3_reading_wkt\" style=\"width: 100%; \n                    height: 100%;\"></div>\n            </td>\n            <td style=\"width: 30%; vertical-align: top;\">\n                <p>Write the WKT describing features:</p>\n                <textarea id=\"wktText\" \n                    dojoType=\"dijit.form.SimpleTextarea\" \n                    rows=\"10\" style=\"width: 100%;\">\n                    MULTIPOLYGON \n                    (((40 40, 20 45, 45 30, 40 40)),\n                    ((20 35, 45 20, 30 5, 10 10, 10 30, 20 35),\n                    (30 20, 20 25, 20 15, 30 20)))</textarea>\n                <button dojoType=\"dijit.form.Button\" \n                    onClick=\"addFeature\">Add Feature</button>\n                <button dojoType=\"dijit.form.Button\" \n                    onClick=\"clearLayer\">Clear Layer</button>\n            </td>\n        </tr>\n    </table>\n\n    ```", "```js\n    <!-- The magic comes here -->\n    <script type=\"text/javascript\">\n        // Create the map using the specified DOM element\n        var map = new OpenLayers.Map(\"ch3_reading_wkt\");    \n\n        // Add a WMS layer\n        var wms = new OpenLayers.Layer.WMS(\"Basic\", \n            \"http://vmap0.tiles.osgeo.org/wms/vmap0\",\n        {\n            layers: 'basic'\n        });\n        map.addLayer(wms);\n\n        map.addControl(new \n            OpenLayers.Control.LayerSwitcher());\n        map.setCenter(new OpenLayers.LonLat(0,0), 2);\n\n    ```", "```js\n        // Create some empty vector layers\n        var wktLayer = new \n            OpenLayers.Layer.Vector(\"wktLayer\");\n        // Add layers to the map\n        map.addLayer(wktLayer);\n\n    ```", "```js\n        function clearLayer() {\n            wktLayer.removeAllFeatures();\n        }\n\n    ```", "```js\n        function addFeature() {\n            // Read features and add to the vector layer\n            var text = dijit.byId('wktText').get('value');\n            var wkt = new OpenLayers.Format.WKT();\n            var features = wkt.read(text);\n            wktLayer.addFeatures(features);\n\n            // Dump the vector layer features to WKt format\n            var currentWkt = wkt.write(wktLayer.features);\n            dijit.byId('wktFeatures').set('value', currentWkt);\n        }\n    </script>\n\n    ```", "```js\n        var wkt = new OpenLayers.Format.WKT();\n        var features = wkt.read(text);\n        wktLayer.addFeatures(features);\n\n```", "```js\n        // Dump the vector layer features to WKt format\n        var currentWkt = wkt.write(wktLayer.features);\n        dijit.byId('wktFeatures').set('value', currentWkt);\n\n```", "```js\n    <!-- Map DOM element -->\n    <div id=\"ch3_markers\" style=\"width: 100%; height: 100%;\"></div>\n\n    Create the map instance, add a base layer and a layer switcher control:\n    <!-- The magic comes here -->\n    <script type=\"text/javascript\">\n\n        // Create the map using the specified DOM element\n        var map = new OpenLayers.Map(\"ch3_markers\");    \n\n        layer = new OpenLayers.Layer.OSM(\"OpenStreetMap\");\n        map.addLayer(layer);\n\n        map.addControl(new \n            OpenLayers.Control.LayerSwitcher());\n        map.setCenter(new OpenLayers.LonLat(0,0), 3);\n\n    ```", "```js\n        var markers = new \n            OpenLayers.Layer.Markers(\"Markers\");\n        map.addLayer(markers);\n\n    ```", "```js\n        // Create some random markers with random icons\n        var icons = [\n             // Here goes an array of image file names\n        ];\n\n        for(var i=0; i< 150; i++) {\n            // Compute a random icon and lon/lat position.\n            var icon = Math.floor(Math.random() * \n                icons.length);\n            var px = Math.random() * 360 - 180;\n            var py = Math.random() * 170 - 85;\n\n            // Create size, pixel and icon instances\n            var size = new OpenLayers.Size(32, 37);\n            var offset = new OpenLayers.Pixel(-(size.w/2), \n                -size.h);\n            var icon = new OpenLayers.Icon('./recipes/data/\n                icons/'+icons[icon], size, offset);\n            icon.setOpacity(0.7);\n\n            // Create a lonlat instance and transform it to \n            // the map projection.\n            var lonlat = new OpenLayers.LonLat(px, py);\n            lonlat.transform(new \n                OpenLayers.Projection(\"EPSG:4326\"), new \n                OpenLayers.Projection(\"EPSG:900913\"));\n\n            // Add the marker\n            var marker = new OpenLayers.Marker(lonlat, icon);\n\n            // Event to handler when the mouse is over\n            // Inflate the icon and change its opacity\n            marker.events.register(\"mouseover\", marker, \n                function() {\n                console.log(\"Over the marker \"+this.id+\" \n                    at place \"+this.lonlat);\n                this.inflate(1.2);\n                this.setOpacity(1);\n            });\n            // Event to handler when the mouse is out\n            // Inflate the icon and change its opacity\n            marker.events.register(\"mouseout\", marker, \n                function() {\n                console.log(\"Out the marker \"+this.id+\" at \n                    place \"+this.lonlat);\n                this.inflate(1/1.2);\n                this.setOpacity(0.7);\n            });\n\n            markers.addMarker(marker);\n        }\n    </script>\n\n    ```", "```js\n        marker.events.register(\"mouseover\", marker, function() {\n            console.log(\"Over the marker \"+this.id+\" at place \"+this.lonlat);\n            this.inflate(1.2);\n            this.setOpacity(1);\n        });\n\n```", "```js\n    <div id=\"ch3_feature_markers\" style=\"width: 100%; \n    height: 100%;\"></div>\n\n    ```", "```js\n        // Create the map using the specified DOM element\n        var map = new OpenLayers.Map(\"ch3_feature_markers\");    \n\n        var layer = new \n            OpenLayers.Layer.OSM(\"OpenStreetMap\");\n        map.addLayer(layer);\n\n        map.addControl(new \n            OpenLayers.Control.LayerSwitcher());\n        map.setCenter(new OpenLayers.LonLat(0,0), 2);\n\n    ```", "```js\n        var pointLayer = new \n            OpenLayers.Layer.Vector(\"Features\", {\n            projection: \"EPSG:933913\"\n        });\n        map.addLayer(pointLayer);\n\n    ```", "```js\n        // Create some random feature points\n        var pointFeatures = [];\n        for(var i=0; i< 150; i++) {\n            var px = Math.random() * 360 - 180;\n            var py = Math.random() * 170 - 85;\n\n            // Create a lonlat instance and transform it \n            // to the map projection.\n            var lonlat = new OpenLayers.LonLat(px, py);\n            lonlat.transform(new \n                OpenLayers.Projection(\"EPSG:4326\"), \n                new OpenLayers.Projection(\"EPSG:900913\"));\n\n            var pointGeometry = new \n                OpenLayers.Geometry.Point\n                (lonlat.lon, lonlat.lat);\n            var pointFeature = new \n                OpenLayers.Feature.Vector(pointGeometry);\n\n            pointFeatures.push(pointFeature);\n        }\n        // Add features to the layer\n        pointLayer.addFeatures(pointFeatures); \n\n    ```", "```js\n        // Event handler for feature selected\n        pointLayer.events.register(\"featureselected\", null, \n            function(event){\n            var layer = event.feature.layer;\n            event.feature.style = {\n                fillColor: '#ff9900',\n                fillOpacity: 0.7,\n                strokeColor: '#aaa',\n                pointRadius: 12\n            };\n            layer.drawFeature(event.feature);\n        });\n        // Event handler for feature unselected\n        pointLayer.events.register(\"featureunselected\", null, \n            function(event){\n            var layer = event.feature.layer;\n            event.feature.style = null;\n            event.feature.renderIntent = null;\n            layer.drawFeature(event.feature);\n        });\n\n    ```", "```js\n        // Add select feature control required to trigger events on the vector layer.\n        var selectControl = new OpenLayers.Control.SelectFeature(pointLayer);\n        map.addControl(selectControl);\n        selectControl.activate();\n\n    ```", "```js\n    pointLayer.events.register(\"featureselected\", null, \n        function(event){\n        // Code here\n    });\n\n```", "```js\n        var layer = event.feature.layer;\n        event.feature.style = {\n            fillColor: '#ff9900',\n            fillOpacity: 0.7,\n            strokeColor: '#aaa',\n            pointRadius: 12\n        };\n\n```", "```js\n        layer.drawFeature(event.feature);\n\n```", "```js\n    var selectControl = new OpenLayers.Control.SelectFeature(pointLayer);\n    map.addControl(selectControl);\n    selectControl.activate();\n\n```", "```js\n    <div id=\"ch3_popups\" style=\"width: 100%; height: 100%;\">\n    </div>\n\n    ```", "```js\n        var map = new OpenLayers.Map(\"ch3_popups\");    \n        var layer = new \n            OpenLayers.Layer.OSM(\"OpenStreetMap\");\n        map.addLayer(layer);\n        map.addControl(new \n            OpenLayers.Control.LayerSwitcher());\n        map.setCenter(new OpenLayers.LonLat(0,0), 2);\n\n    ```", "```js\n        var pointLayer = new \n            OpenLayers.Layer.Vector(\"Features\", {\n            projection: \"EPSG:900913\"\n        });\n        map.addLayer(pointLayer);\n\n    ```", "```js\n        var pointFeatures = [];\n        for(var i=0; i< 150; i++) {\n            var icon = Math.floor(Math.random() * \n                icons.length);\n            var px = Math.random() * 360 - 180;\n            var py = Math.random() * 170 - 85;\n\n            // Create a lonlat instance and transform it to \n            // the map projection.\n            var lonlat = new OpenLayers.LonLat(px, py);\n            lonlat.transform(new \n                OpenLayers.Projection(\"EPSG:4326\"), new \n                OpenLayers.Projection(\"EPSG:900913\"));\n\n            var pointGeometry = new \n                OpenLayers.Geometry.Point(lonlat.lon, \n                lonlat.lat);\n            var pointFeature = new \n                OpenLayers.Feature.Vector(pointGeometry, \n                null, {\n                pointRadius: 16,\n                fillOpacity: 0.7,\n                externalGraphic: \n                    'http://localhost:8080/\n                    openlayers-cookbook/recipes/data/\n                    icons/'+icons[icon]\n            });\n\n            pointFeatures.push(pointFeature);\n        }\n        // Add features to the layer\n        pointLayer.addFeatures(pointFeatures); \n\n    ```", "```js\n    // Add select feature control required to trigger events on the vector layer.    \n        var selectControl = new \n            OpenLayers.Control.SelectFeature(pointLayer, {\n            hover: true,\n            onSelect: function(feature) {\n                var layer = feature.layer;\n                feature.style.fillOpacity = 1;\n                feature.style.pointRadius = 20;\n                layer.drawFeature(feature);\n\n                var content = \"<div><strong>Feature:</strong> \n                    <br/>\" + feature.id +\n                    \"<br/><br/><strong>Location:</strong> \n                    <br/>\" + feature.geometry +\"</div>\";\n\n                var popup = new OpenLayers.Popup.FramedCloud(\n                feature.id+\"_popup\", \n                feature.geometry.getBounds().\n                getCenterLonLat(),\n                new OpenLayers.Size(250, 100),\n                content,\n                null, \n                false, \n                null);\n                feature.popup = popup;\n                map.addPopup(popup);\n            },\n            onUnselect: function(feature) {\n                var layer = feature.layer;\n                feature.style.fillOpacity = 0.7;\n                feature.style.pointRadius = 16;\n                feature.renderIntent = null;\n                layer.drawFeature(feature);\n\n                map.removePopup(feature.popup);\n            }\n        });\n        map.addControl(selectControl);\n        selectControl.activate(); \n\n    ```", "```js\n        var lonlat = new OpenLayers.LonLat(px, py);\n        lonlat.transform(new OpenLayers.Projection(\"EPSG:4326\"), \n            new OpenLayers.Projection(\"EPSG:900913\"));\n\n        var pointGeometry = new \n            OpenLayers.Geometry.Point(lonlat.lon, lonlat.lat);\n        var pointFeature = new \n            OpenLayers.Feature.Vector(pointGeometry, null, {\n            pointRadius: 16,\n            fillOpacity: 0.7,\n            externalGraphic: 'http://localhost:8080/\n                openlayers-cookbook/recipes/\n                data/icons/'+icons[icon]\n        });\n\n```", "```js\nvar selectControl = new \n    OpenLayers.Control.SelectFeature(pointLayer, {\n    hover: true,\n    onSelect: function(feature) { ... },\n    onUnselect: function(feature) { ... }\n});\n\n```", "```js\n            var popup = new OpenLayers.Popup.FramedCloud(\n            feature.id+\"_popup\", \n            feature.geometry.getBounds().getCenterLonLat(),\n            new OpenLayers.Size(250, 100),\n            content,\n            null, \n            false, \n            null);\n\n```", "```js\n            feature.popup = popup;\n            map.addPopup(popup);\n\n```", "```js\n            map.removePopup(feature.popup);\n\n```", "```js\n    <!-- Map DOM element --> \n    <div id=\"ch3_wfs\" style=\"width: 100%; \n        height: 100%;\"></div> \n\n    ```", "```js\n    <!-- The magic comes here --> \n    <script type=\"text/javascript\"> \n        OpenLayers.ProxyHost = \"./utils/proxy.php?url=\"; \n\n    ```", "```js\n        // Create the map using the specified DOM element \n        var map = new OpenLayers.Map(\"ch3_wfs\");    \n\n        var baseLayer = new \n            OpenLayers.Layer.OSM(\"OpenStreetMap\"); \n        map.addLayer(baseLayer); \n\n        map.addControl(new \n            OpenLayers.Control.LayerSwitcher()); \n        map.setCenter(new OpenLayers.LonLat(0,0), 2); \n\n    ```", "```js\n        var statesLayer = new \n            OpenLayers.Layer.Vector(\"States\", { \n            protocol: new OpenLayers.Protocol.WFS({ \n                url: \"http://demo.opengeo.org/geoserver/wfs\", \n                featureType: \"states\", \n                featureNS: \"http://www.openplans.org/topp\" \n            }), \n            strategies: [new OpenLayers.Strategy.BBOX()] \n        }); \n        map.addLayer(statesLayer); \n    </script>\n\n    ```", "```js\n    OpenLayers.ProxyHost = \"./utils/proxy.php?url=\"; \n\n```", "```js\n    var statesLayer = new OpenLayers.Layer.Vector(\"States\", { \n        protocol: new OpenLayers.Protocol.WFS({ \n            url: \"http://demo.opengeo.org/geoserver/wfs\", \n            featureType: \"states\", \n            featureNS: \"http://www.openplans.org/topp\" \n        }), \n        strategies: [new OpenLayers.Strategy.BBOX()] \n    }); \n\n```", "```js\n    <!-- Map DOM element -->\n    <div id=\"ch3_cluster\" style=\"width: 100%; \n        height: 100%;\"></div>\n\n    <!-- The magic comes here -->\n    <script type=\"text/javascript\">\n        // Create the map using the specified DOM element\n        var map = new OpenLayers.Map(\"ch3_cluster\");    \n\n        layer = new OpenLayers.Layer.OSM(\"OpenStreetMap\");\n        map.addLayer(layer);\n\n        map.addControl(new \n           OpenLayers.Control.LayerSwitcher());\n        map.setCenter(new OpenLayers.LonLat(0,0), 2);\n\n    ```", "```js\n        // World Cities\n        var citiesLayer = new OpenLayers.Layer.Vector(\"World \n            Cities (GeoJSON)\", {\n            protocol: new OpenLayers.Protocol.HTTP({\n                url: \"http://localhost:8080/\n                openlayers-cookbook/recipes/\n                data/world_cities.json\",\n                format: new OpenLayers.Format.GeoJSON()\n            }),\n            strategies: [\n                new OpenLayers.Strategy.Fixed(), \n                new OpenLayers.Strategy.Cluster({distance: \n                    15})\n            ]\n        });\n        map.addLayer(citiesLayer);\n    </script>\n\n    ```", "```js\n        strategies: [\n            new OpenLayers.Strategy.Fixed(), \n            new OpenLayers.Strategy.Cluster({distance: 15})\n        ]\n\n```", "```js\n    <!-- Map DOM element -->\n    <div id=\"ch3_filtering\" style=\"width: 100%; \n        height: 100%;\"></div>\n\n    <!-- The magic comes here -->\n    <script type=\"text/javascript\">\n\n    ```", "```js\n        OpenLayers.ProxyHost = \"./utils/proxy.php?url=\";\n\n        // Create the map using the specified DOM element\n        var map = new OpenLayers.Map(\"ch3_filtering\"); \n\n    ```", "```js\n        var baseLayer = new \n            OpenLayers.Layer.OSM(\"OpenStreetMap\");\n        map.addLayer(baseLayer);\n\n        map.addControl(new \n            OpenLayers.Control.LayerSwitcher());\n\n    ```", "```js\n        var center = new OpenLayers.LonLat(-100, 41);\n        center.transform(new \n            OpenLayers.Projection(\"EPSG:4326\"), \n            map.getProjectionObject());\n        map.setCenter(center, 4);\n\n    ```", "```js\n        // Filter features with the query.\n        var statesLayer = new \n            OpenLayers.Layer.Vector(\"States\", {\n            protocol: new OpenLayers.Protocol.WFS({\n                url: \"http://demo.opengeo.org/geoserver/wfs\",\n                featureType: \"states\",\n                featureNS: \"http://www.openplans.org/topp\"\n            }),\n            strategies: [new OpenLayers.Strategy.BBOX()],\n            filter: new OpenLayers.Filter.Logical({\n                type: OpenLayers.Filter.Logical.AND,\n                filters: [\n                    new OpenLayers.Filter.Comparison({\n                        type: OpenLayers.Filter.\n                            Comparison.GREATER_THAN,\n                        property: \"MALE\",\n                        value: \"700000\"\n                    }),\n                    new OpenLayers.Filter.Spatial({\n                        type: \n                            OpenLayers.Filter.Spatial.WITHIN,\n                        value: OpenLayers.Bounds.fromArray\n                            ([-120, 10,-90,50])\n                    })\n                ]\n            })\n        });\n\n        map.addLayer(statesLayer);    \n    </script>\n\n    ```", "```js\n    var statesLayer = new OpenLayers.Layer.Vector(\"States\", {\n        protocol: ...,\n        strategies: ...,\n        filter: ...\n    });\n\n```", "```js\nOpenLayers.Protocol.WFS instance to talk to it:\n        protocol: new OpenLayers.Protocol.WFS({\n            url: \"http://demo.opengeo.org/geoserver/wfs\",\n            featureType: \"states\",\n            featureNS: \"http://www.openplans.org/topp\"\n        })\n\n```", "```js\n        strategies: [new OpenLayers.Strategy.BBOX()],\n\n```", "```js\n        filter: new OpenLayers.Filter.Logical({\n            type: OpenLayers.Filter.Logical.AND,\n            filters: [\n                new OpenLayers.Filter.Comparison({\n                    type: OpenLayers.Filter.\n                        Comparison.GREATER_THAN,\n                    property: \"MALE\",\n                    value: \"700000\"\n                }),\n                new OpenLayers.Filter.Spatial({\n                    type: OpenLayers.Filter.Spatial.WITHIN,\n                    value: OpenLayers.Bounds.fromArray\n                        ([-120, 10,-90,50])\n                })\n            ]\n        })\n\n```", "```js\n    <!-- Map DOM element -->\n    <div id=\"ch3_protocol\" style=\"width: 100%; \n        height: 100%;\"></div>\n\n    ```", "```js\n    <script type=\"text/javascript\">\n        // Create the map using the specified DOM element\n        var map = new OpenLayers.Map(\"ch3_protocol\");    \n\n        var baseLayer = new \n            OpenLayers.Layer.OSM(\"OpenStreetMap\");\n        map.addLayer(baseLayer);\n\n        map.addControl(new \n            OpenLayers.Control.LayerSwitcher());\n        map.setCenter(new OpenLayers.LonLat(0,0), 2);\n\n    ```", "```js\n        var vectorLayer = new \n            OpenLayers.Layer.Vector(\"Vector Layer\");\n        map.addLayer(vectorLayer);\n\n    ```", "```js\n        // Create HTTP protocol to read GML file\n        var gmlReq = new OpenLayers.Protocol.HTTP({\n            url: \"http://localhost:8080/\n            openlayers-cookbook/recipes/data/\n            world_cities.json\",\n            format: new OpenLayers.Format.GeoJSON(),\n            callback: addFeaturesFromResponse\n        });\n        gmlReq.read();\n\n        // Create HTTP protocol to read KML file\n        var kmlReq = new OpenLayers.Protocol.HTTP({\n            url: \"http://localhost:8080/\n            openlayers-cookbook/recipes/data/\n            global_undersea.kml\",\n            format: new OpenLayers.Format.KML({\n                extractStyles: true,\n                extractAttributes: true\n            }),\n            callback: addFeaturesFromResponse\n        });\n        kmlReq.read();\n\n    ```", "```js\n        // Translate features from EPSG:4326 to OSM \n        // projection and add to the layer only \n        // the Point geometry features.\n        function addFeaturesFromResponse(response) {\n            for(var i=0; i<response.features.length; ++i) {        \n                if(response.features[i].\n                geometry.CLASS_NAME == \n                \"OpenLayers.Geometry.Point\") {\n                    response.features[i].geometry.transform\n                    (vectorLayer.projection, \n                    map.getProjectionObject());\n                    vectorLayer.addFeatures\n                        ([response.features[i]]);\n                }\n            }\n        }\n    </script>\n\n    ```", "```js\n    var vectorLayer = new OpenLayers.Layer.Vector(\"Vector Layer\");\n\n```", "```js\n    var gmlReq = new OpenLayers.Protocol.HTTP({\n        url: \"http://localhost:8080/\n            openlayers-cookbook/recipes/data/world_cities.json\",\n        format: new OpenLayers.Format.GeoJSON(),\n        callback: addFeaturesFromResponse\n    });\n\n```", "```js\ngmlReq.read();\n\n```", "```js\n    function addFeaturesFromResponse(response) {\n        for(var i=0; i<response.features.length; ++i) {        \n            if(response.features[i].geometry.CLASS_NAME == \"OpenLayers.Geometry.Point\") {\n                response.features[i].geometry.transform(vectorLayer.projection, map.getProjectionObject());\n                vectorLayer.addFeatures([response.features[i]]);\n            }\n        }\n    }\n\n```"]