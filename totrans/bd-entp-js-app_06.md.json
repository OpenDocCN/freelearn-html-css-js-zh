["```js\n$ sudo apt update\n$ sudo apt install default-jdk\n```", "```js\n$ sudo update-alternatives --config java\nThere is only one alternative in link group java (providing /usr/bin/java): /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java\nNothing to configure.\n```", "```js\n$ sudo update-alternatives --config java\nThere are 2 choices for the alternative java (providing /usr/bin/java).\n\n Selection Path Priority Status\n------------------------------------------------------------\n* 0 /usr/lib/jvm/java-11-openjdk-amd64/bin/java 1101 auto mode\n 1 /usr/lib/jvm/java-11-openjdk-amd64/bin/java 1101 manual mode\n 2 /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java 1081 manual mode\n\nPress <enter> to keep the current choice[*], or type selection number: \n```", "```js\nJAVA_HOME=\"/usr/lib/jvm/java-8-openjdk-amd64\"\n```", "```js\n$ . /etc/environment\n$ echo $JAVA_HOME\n/usr/lib/jvm/java-8-openjdk-amd64\n```", "```js\n$ sudo dpkg -i elasticsearch-6.3.2.deb\n```", "```js\n# Elasticsearch Java path\nJAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\n```", "```js\nsudo systemctl start elasticsearch.service\nsudo systemctl stop elasticsearch.service\n```", "```js\nsudo systemctl daemon-reload\nsudo systemctl enable elasticsearch.service\n```", "```js\n$ sudo systemctl start elasticsearch.service\n$ sudo systemctl status elasticsearch.service\n● elasticsearch.service - Elasticsearch\n Loaded: loaded (/usr/lib/systemd/system/elasticsearch.service; enabled; vendo\n Active: active (running) since Wed 2017-12-27 17:52:06 GMT; 4s ago\n Docs: http://www.elastic.co\n Main PID: 20699 (java)\n Tasks: 42 (limit: 4915)\n Memory: 1.1G\n CPU: 12.431s\n CGroup: /system.slice/elasticsearch.service\n └─20699 /usr/lib/jvm/java-8-openjdk-amd64/bin/java -Xms1g -Xmx1g -XX:\n\nDec 27 17:52:06 nucleolus systemd[1]: Started Elasticsearch.\n```", "```js\n$ curl 'http://localhost:9200/?pretty'\n{\n \"name\" : \"6pAE96Q\",\n \"cluster_name\" : \"elasticsearch\",\n \"cluster_uuid\" : \"n6vLxwydTmeN4H6rX0tqlA\",\n \"version\" : {\n \"number\" : \"6.3.2\",\n \"build_date\" : \"2018-07-20T05:20:23.451332Z\",\n \"lucene_version\" : \"7.3.1\"\n },\n \"tagline\" : \"You Know, for Search\"\n\n}\n```", "```js\n{\n  \"profile\": {\n    \"firstName\": \"\",\n    \"lastName\": \"\",\n    \"avatar\": \"\",\n    \"cover\": \"\",\n    \"color\": \"#fedcab\"\n  },\n  \"active\": true,\n  \"notifications\": {\n    \"email\": {\n      \"disable\": false,\n      \"like\": true,\n      \"comment\": true,\n      \"follow\": true\n    },\n    \"app\": {\n      \"disable\": false,\n      \"like\": true,\n      \"comment\": true,\n      \"follow\": true }\n    }};\n```", "```js\n$ yarn add elasticsearch\n```", "```js\nconst client = new elasticsearch.Client({\n  host: `${process.env.ELASTICSEARCH_PROTOCOL}://${process.env.ELASTICSEARCH_HOSTNAME}:${process.env.ELASTICSEARCH_PORT}`,\n});\n```", "```js\nELASTICSEARCH_PROTOCOL=http\nELASTICSEARCH_HOSTNAME=localhost\nELASTICSEARCH_PORT=9200\n```", "```js\n{ _index: <index>,\n  _type: <type>,\n  _id: <id>,\n  _version: <version>,\n  found: true,\n  _source: <document> }\n```", "```js\nThen(/^the payload object should be added to the database, grouped under the \"([a-zA-Z]+)\" type$/, function (type, callback) {\n  client.get({\n    index: 'hobnob',\n    type,\n    id: this.responsePayload,\n  }).then((result) => {\n    assert.deepEqual(result._source, this.requestPayload);\n    callback();\n  }).catch(callback);\n});\n```", "```js\nimport elasticsearch from 'elasticsearch';\nconst client = new elasticsearch.Client({\n  host: `${process.env.ELASTICSEARCH_PROTOCOL}://${process.env.ELASTICSEARCH_HOSTNAME}:${process.env.ELASTICSEARCH_PORT}`,\n});\n...\n\napp.post('/users', (req, res, next) => {\n  ...\n  client.index({\n    index: 'hobnob',\n    type: 'user',\n    body: req.body\n  })\n}\n```", "```js\n{ _index: 'hobnob',\n  _type: 'users',\n  _id: 'AV7HyAlRmIBlG9P7rgWY',\n  _version: 1,\n  result: 'created',\n  _shards: { total: 2, successful: 1, failed: 0 },\n  created: true }\n```", "```js\nclient.index({\n  index: 'hobnob',\n  type: 'user',\n  body: req.body,\n}).then((result) => {\n  res.status(201);\n  res.set('Content-Type', 'text/plain');\n  res.send(result._id);\n}).catch(() => {\n  res.status(500);\n  res.set('Content-Type', 'application/json');\n  res.json({ message: 'Internal Server Error' });\n});\n```", "```js\n...\nAnd the payload of the response should be a string\nAnd the payload object should be added to the database, grouped under the \"user\" type\nAnd the newly-created user should be deleted\n```", "```js\nThen(/^the payload object should be added to the database, grouped under the \"([a-zA-Z]+)\" type$/, function (type, callback) {\n  this.type = type;\n  client.get({\n    index: 'hobnob'\n    type: type,\n    id: this.responsePayload\n  })\n  ...\n});\n```", "```js\nThen('the newly-created user should be deleted', function () {\n  client.delete({\n    index: 'hobnob',\n    type: this.type,\n    id: this.responsePayload,\n  });\n});\n```", "```js\n{ _index: 'hobnob',\n  _type: 'user',\n  _id: 'N2hWu2ABiAD9b15yOZTt',\n  _version: 2,\n  result: 'deleted',\n  _shards: { total: 2, successful: 1, failed: 0 },\n  _seq_no: 4,\n  _primary_term: 2 }\n```", "```js\nThen('the newly-created user should be deleted', function (callback) {\n  client.delete({\n    index: 'hobnob',\n    type: this.type,\n    id: this.responsePayload,\n  }).then(function (res) {\n    assert.equal(res.result, 'deleted');\n    callback();\n  }).catch(callback);\n});\n```", "```js\n$ git add -A && git commit -m \"Implement Create User success scenario\"\n```", "```js\nELASTICSEARCH_INDEX=hobnob\n```", "```js\nELASTICSEARCH_INDEX=test\n```", "```js\n\"test:e2e\": \"dotenv -e test.env -e .env cucumber-js -- spec/cucumber/features --require-module @babel/register --require spec/cucumber/steps\",\n```", "```js\n$ npx dotenv -e test.env yarn run watch\n```", "```js\n$ mkdir envs && mv -t envs .env .env.example test.env test.env.example\n$ sed -i 's/^.env$/*.env/g' .gitignore\n```", "```js\n\"serve\": \"yarn run build && dotenv -e envs/.env node dist/index.js\",\n\"test:e2e\": \"dotenv -e envs/test.env -e envs/.env cucumber-js -- spec/cucumber/features --require-module @babel/register --require spec/cucumber/steps\",\n```", "```js\n$ git add -A && git commit -m \"Use test index for E2E tests\"\n```", "```js\nSERVER_PORT=8888\n```", "```js\n$ git add -A && git commit -m \"Run test API server on different port\"\n```", "```js\n$ mkdir scripts && touch scripts/e2e.test.sh && chmod +x scripts/e2e.test.sh\n```", "```js\n\"test:e2e\": \"dotenv -e envs/test.env -e envs/.env ./scripts/e2e.test.sh\",\n```", "```js\n#!/usr/bin/env bash\n```", "```js\nRETRY_INTERVAL=${RETRY_INTERVAL:-0.2}\nif ! systemctl --quiet is-active elasticsearch.service; then\n  sudo systemctl start elasticsearch.service\n  # Wait until Elasticsearch is ready to respond\n  until curl --silent $ELASTICSEARCH_HOSTNAME:$ELASTICSEARCH_PORT -w \"\" -o /dev/null; do\n    sleep $RETRY_INTERVAL\n  done\nfi\n```", "```js\n# Run our API server as a background process\nyarn run serve & \n```", "```js\n# This won't work!\nyarn run serve &\nyarn run test:e2e\n```", "```js\n$ netstat -lnt\n$ ss -lnt\n```", "```js\n$ netstat -lnt\nProto Recv-Q Send-Q Local Address     Foreign Address   State\ntcp        0      0 127.0.0.1:5939    0.0.0.0:*         LISTEN\ntcp        0      0 127.0.0.1:53      0.0.0.0:*         LISTEN\ntcp6       0      0 ::1:631           :::*              LISTEN\ntcp6       0      0 :::8888           :::*              LISTEN\ntcp6       0      0 :::3128           :::*              LISTEN\n```", "```js\nRETRY_INTERVAL=0.2\nuntil ss -lnt | grep -q :$SERVER_PORT; do\n  sleep $RETRY_INTERVAL\ndone\n```", "```js\n# Terminate all processes within the same process group by sending a SIGTERM signal\nkill -15 0\n```", "```js\n# Make sure the port is not already bound\nif ss -lnt | grep -q :$SERVER_PORT; then\n  echo \"Another process is already listening to port $SERVER_PORT\"\n  exit 1;\nfi\n```", "```js\nnpx cucumber-js spec/cucumber/features --require-module @babel/register --require spec/cucumber/steps\n```", "```js\n#!/usr/bin/env bash\nif ss -lnt | grep -q :$SERVER_PORT; then\n  echo \"Another process is already listening to port $SERVER_PORT\"\n  exit 1;\nfi\nRETRY_INTERVAL=${RETRY_INTERVAL:-0.2}\nif ! systemctl is-active --quiet elasticsearch.service; then\n  sudo systemctl start elasticsearch.service\n  until curl --silent $ELASTICSEARCH_HOSTNAME:$ELASTICSEARCH_PORT -w \"\" -o /dev/null; do\n    sleep $RETRY_INTERVAL\n  done\nfi\nyarn run serve &\nuntil ss -lnt | grep -q :$SERVER_PORT; do\n  sleep $RETRY_INTERVAL\ndone\nnpx cucumber-js spec/cucumber/features --require-module @babel/register --require spec/cucumber/steps\nkill -15 0\n```", "```js\n$ git add -A && git commit -m \"Make standalone E2E test script\"\n```"]