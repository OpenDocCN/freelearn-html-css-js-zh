["```js\nlet height = 10;\nheight = 20;\n```", "```js\nimport { tweened } from 'svelte/motion';\nconst height = tweened(10, {\n  duration: 1000 /* 1 second */\n});\n```", "```js\n$height = 20;\n```", "```js\nimport { spring } from 'svelte/motion';\nconst height = spring(10, {\n  stiffness: 0.1,\n  damping: 0.25\n});\n```", "```js\nimport { tweened } from 'svelte/motion';\nimport { cubicOut } from 'svelte/easing';\nconst progress = tweened(0, {\n  duration: 1000,\n  easing: cubicOut,\n  delay: 500,\n});\n```", "```js\nimport { tweened } from 'svelte/motion';\nconst value = tweened(initialValue, options);\n```", "```js\nimport { spring } from 'svelte/motion';\nconst position = spring(0, {\n  stiffness: 0.2,\n  damping: 0.5,\n  precision: 0.001,\n});\n```", "```js\nimport { spring } from 'svelte/motion';\nconst value = spring(initialValue, options);\n```", "```js\nimport { tweened } from 'svelte/motion';\nconst coordinates = tweened([0, 0], { duration: 1000 });\n// Updating the coordinates\n$coordinates = [100, 200];\n```", "```js\nimport { tweened } from 'svelte/motion';\nconst position = tweened({ x: 0, y: 0 }, { duration: 1000 });\n// Updating the position\n$position = { x: 100, y: 200 };\n```", "```js\n<script>\n  import { tweened } from 'svelte/motion';\n  const position = tweened({ x: 0, y: 0 }, { duration: 1000 });\n</script>\n<div style=\"transform: translate({$position.x}px, {$position.y}px)\"></div>\n```", "```js\n<script>\n  let data = generateData(10);\n  function generateData(length) {\n    const result = new Array(length);\n    for (let i = 0; i < length; i ++) {\n      result[i] = Math.random() * 300;\n    }\n    return result;\n  }\n</script>\n<style>\n  .bar {\n    background-color: steelblue;\n    height: 50px;\n  }\n</style>\n<div>\n  {#each data as value}\n    <div class=\"bar\" style=\"width: {value}px\"></div>\n  {/each}\n</div>\n```", "```js\nimport { onMount } from 'svelte';\nonMount(() => {\n  const intervalId = setInterval(() => {\n    data = generateData(10);\n  }, 1000);\n  return () => clearInterval(intervalId);\n});\n```", "```js\n    import { tweened } from 'svelte/motion';\n    const data = tweened(generateData(10));\n    ```", "```js\n    data in the {#each} block, we need to use the $data variable as well:\n\n    ```", "```js\n\n    ```", "```js\nconst pathGenerator = line().x((d, i) => i).y((d) => d);\nconst path = pathGenerator(data);\n```", "```js\nfunction interpolate(a, b) {\n  return function (t) {\n    // calculate the intermediate value between 'a' and 'b' based on 't'\n  };\n}\n```", "```js\nfunction interpolate(a, b) {\n  return function (t) {\n    return a + t * (b – a);\n  };\n}\n```", "```js\nimport { interpolateRgb } from 'd3-interpolate';\nfunction interpolate(a, b) {\n  const interpolateColor = interpolateRgb(a, b);\n  return function (t) {\n    return interpolateColor(t);\n  };\n}\n```", "```js\ntweened(color, { interpolate: interpolate });\n```", "```js\n<script>\n  const images = [\n    \"path/to/image1.jpg\",\n    \"path/to/image2.jpg\",\n    // ...more image paths\n  ];\n  const imgElements = [];\n</script>\n<div class=\"image-container\">\n  {#each images as image, index}\n    <div>\n      <img src={image} bind:this={imgElements[index]} />\n    </div>\n  {/each}\n</div>\n```", "```js\n<script>\n  let selectedImageIndex = -1;\n  function openPreview(index) {\n    selectedImageIndex = index;\n  }\n  function closePreview() {\n    selectedImageIndex = -1;\n  }\n</script>\n...\n      <img\n        src={image}\n        bind:this={imgElements[index]}\n        on:click={() => openPreview(index)}\n      />\n```", "```js\n<div\n  class:backdrop={selectedImageIndex !== -1}\n  on:click={closePreview}\n/>\n```", "```js\n<script>\n  let selectedImageIndex = -1;\n  let width, height, left, top;\n  function openPreview(index) {\n    selectedImageIndex = index;\n    width = Math.min(window.innerWidth, window.innerHeight) * 0.8;\n    height = width; // same as width, assuming 1:1 ratio\n    left = (window.innerWidth - width) / 2;\n    top = (window.innerHeight - height) / 2;\n  }\n</script>\n...\n      <img\n        src={image}\n        bind:this={imgElements[index]}\n        on:click={() => openPreview(index)}\n        style={selectedImageIndex === index ? `\n          position: fixed;\n          left: ${left}px;\n          top: ${top}px;\n          width: ${width}px;\n          height: ${height}px;\n        ` : ''}\n      />\n```", "```js\nconst transform = spring(\n  { translate: { x: 0, y: 0 }, scale: { x: 1, y: 1 } },\n  { stiffness: 0.1, damping: 0.25 }\n);\n```", "```js\nfunction openPreview(index) {\n  // ...\n  const rect = imgElements[index].getBoundingClientRect();\n  left = rect.left;\n  top = rect.top;\n  width = rect.width;\n  height = rect.height;\n}\n```", "```js\n  const targetWidth = Math.min(window.innerWidth, window.innerHeight) * 0.8;\n  const targetHeight = targetWidth;\n  const targetLeft = (window.innerWidth - targetWidth) / 2;\n  const targetTop = (window.innerHeight - targetHeight) / 2;\n  $transform = {\n    translate: {\n      x: targetLeft - left,\n      y: targetTop - top\n    },\n    scale: {\n      x: targetWidth / width,\n      y: targetHeight / height\n    },\n  };\n```", "```js\n<img\n  style={selectedImageIndex === index ? `\n  ...\n  transform: translate(${$transform.translate.x}px, ${$transform.translate.y}px) scale(${$transform.scale.x}, ${$transform.scale.y});\n  ` : ''}\n```"]