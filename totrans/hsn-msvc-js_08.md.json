["```js\n\"dependencies\": {\n    \"dotenv\": \"^16.4.5\",\n    \"express\": \"^4.19.2\",\n    \"joi\": \"^17.13.1\",\n    \"node-rdkafka\": \"^3.0.1\"\n  }\n```", "```js\nnpm install node-rdkafka\n```", "```js\nservices:\n  zookeeper:\n    image: bitnami/zookeeper:3.8\n    ports:\n      - \"2181:2181\"\n    volumes:\n      - zookeeper_data:/bitnami\n    environment:\n      ALLOW_ANONYMOUS_LOGIN: \"yes\"\n  kafka1:\n    image: bitnami/kafka:3.6\n    volumes:\n      - kafka_data1:/bitnami\n    environment:\n      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181\n      KAFKA_CFG_LISTENERS: INTERNAL://:9092,EXTERNAL://0.0.0.0:29092\n      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:29092\n      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT\n      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL\n      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'\n      ALLOW_PLAINTEXT_LISTENER: 'yes'\n    ports:\n      - \"9092:9092\"\n      - \"29092:29092\"\n    depends_on:\n      - zookeeper\n\n  kafka-ui:\n    image: provectuslabs/kafka-ui:latest\n    ports:\n      - 9100:8080\n    environment:\n      KAFKA_CLUSTERS_0_NAME: local\n      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092\n      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181\n    depends_on:\n      - kafka1\nvolumes:\n  zookeeper_data:\n    driver: local\n  kafka_data1:\n    driver: local\n```", "```js\nPORT=3001\n#KAFKA Configuration\nKAFKA_CLIENT_ID=earthquake-service\nKAFKA_BROKERS=localhost:29092\nKAFKA_TOPIC=earthquake-service-topic\n```", "```js\nconst dotenv = require('dotenv');\nconst Joi = require('joi');\nconst envVarsSchema = Joi.object()\n    .keys({\n        PORT: Joi.number().default(3000),\n        KAFKA_CLIENT_ID: Joi.string().required(),\n        KAFKA_BROKERS: Joi.string().required(),\n        KAFKA_TOPIC: Joi.string().required()\n    })\n    .unknown();\nfunction createConfig(configPath) {\n    dotenv.config({ path: configPath });\n    const { value: envVars, error } = envVarsSchema\n        .prefs({ errors: { label: 'key' } })\n        .validate(process.env);\n    if (error) {\n        throw new Error(`Config validation error:\n          ${error.message}`);\n    }\n    return {\n        port: envVars.PORT,\n        kafka: {\n            clientID: envVars.KAFKA_CLIENT_ID,\n            brokers: envVars.KAFKA_BROKERS,\n            topic: envVars.KAFKA_TOPIC\n        }\n    };\n}\nmodule.exports = {\n    createConfig,\n};\n```", "```js\nconst Kafka = require('node-rdkafka');\nconst { createConfig } = require('../config/config');\nconst path = require('path');\nclass EarthquakeEventProducer {\nconstructor() {\n        this.intervalId = null;\n    }\n    #generateEarthquakeEvent() {\n        return {\n            id: Math.random().toString(36).substring(2,\n              15),\n            magnitude: Math.random() * 9, // Random magnitude between 0 and 9\n            location: {\n                latitude: Math.random() * 180 - 90, // Random latitude between -90 and 90\n                longitude: Math.random() * 360 - 180, // Random longitude between -180 and 180\n            },\n            timestamp: Date.now(),\n        };\n    }\n……..\n```", "```js\n    async runEarthquake() {\n        const configPath = path.join(__dirname,\n          '../../configs/.env');\n        const appConfig = createConfig(configPath);\n        // Returns a new writable stream\n        const stream = Kafka.Producer.createWriteStream({\n            'metadata.broker.list':\n              appConfig.kafka.brokers,\n            'client.id': appConfig.kafka.clientID\n        }, {}, {\n            topic: appConfig.kafka.topic\n        });\n        // To make our stream durable we listen to this event\n        stream.on('error', (err) => {\n            console.error('Error in our kafka stream');\n            console.error(err);\n        });\n       this.intervalId  = setInterval(async () => {\n            const event =\n              await this.#generateEarthquakeEvent();\n            // Writes a message to the stream\n            const queuedSuccess = stream.write(Buffer.from(\n              JSON.stringify(event)));\n            if (queuedSuccess) {\n                console.log('The message has been queued!');\n            } else {\n                // If the stream's queue is full\n                console.log('Too many messages in queue already');\n            }\n        }, 100);\n    }\n```", "```js\nstopEarthquake() {\n        if (this.intervalId) {\n            clearInterval(this.intervalId);\n            this.intervalId = null;\n            console.log('Earthquake event stream stopped.');\n        } else {\n            console.log('No running earthquake event stream to stop.');\n        }\n    }\nmodule.exports = EarthquakeEventProducer;\n```", "```js\nconst express = require('express');\nconst EarthquakeEventProducer = require('./services/earthquake');\nconst app = express();\nconst earthquakeProducer = new EarthquakeEventProducer();\n// Function to run streaming\napp.post('/earthquake-events/start', async (req, res) => {\n    earthquakeProducer.runEarthquake();\n    res.status(200).send('Earthquake event stream started');\n});\n// Stop the earthquake event stream\napp.post('/earthquake-events/stop', (req, res) => {\n    earthquakeProducer.stopEarthquake();\n    res.status(200).send('Earthquake event stream stopped');\n});\nmodule.exports = app;\n```", "```js\nconst path = require('path');\nconst app = require('./app');\nconst { createConfig } = require('./config/config');\nasync function execute() {\n    const configPath = path.join(__dirname, '../configs/.env');\n    const appConfig = createConfig(configPath);\n    const server = app.listen(appConfig.port, () => {\n        console.log('earthquake service started',\n          { port: appConfig.port });\n    });\n    const closeServer = () => {\n        if (server) {\n            server.close(() => {\n                console.log('server closed');\n                process.exit(1);\n            });\n        } else {\n            process.exit(1);\n        }\n    };\n    const unexpectedError = (error) => {\n        console.log('unhandled error', { error });\n        closeServer();\n    };\n    process.on('uncaughtException', unexpectedError);\n    process.on('unhandledRejection', unexpectedError);\n}\nexecute();\n```", "```js\n    PS C:\\packtGit\\Hands-on-Microservices-with-JavaScript\\Ch08\\earthquakeService\\src> node index.js\n    Debugger listening on ws://127.0.0.1:61042/876d7d9e-3292-482a-b011-e6c2d66e7615\n    For help, see: https://nodejs.org/en/docs/inspector\n    Debugger attached.\n    http://localhost:3001/earthquake-events/start.\n    ```", "```js\nPORT=3002\n#KAFKA Configuration\nKAFKA_CLIENT_ID=earthquake-consumer-service\nKAFKA_BROKERS=localhost:29092\nKAFKA_TOPIC=earthquake-service-topic\nKAFKA_GROUP_ID=earthquake-consumer-group\n```", "```js\nconst Kafka = require('node-rdkafka');\nconst { createConfig } = require('../config/config');\nconst path = require('path');\nclass EarthquakeEventConsumer {\n    constructor() {\n        const configPath = path.join(__dirname,\n          '../../configs/.env');\n        this.appConfig = createConfig(configPath);\n        // Create the Kafka consumer stream here (once)\n        this.stream =\n          Kafka.KafkaConsumer.createReadStream({\n            'metadata.broker.list':\n              this.appConfig.kafka.brokers,\n            'group.id': this.appConfig.kafka.groupID,\n            'socket.keepalive.enable': true,\n            'enable.auto.commit': false\n        }, {}, {\n            topics: this.appConfig.kafka.topic,\n            waitInterval: 0,\n            objectMode: false\n        });\n    }\n    async consumeData() {\n        // Now use the pre-created stream for data consumption\n        this.stream.on('data', (message) => {\n            console.log('Got message');\n            console.log(JSON.parse(message));\n        });\n    }\n}\nmodule.exports = EarthquakeEventConsumer;\n```", "```js\n    npm start\n    ```", "```js\n    PS C:\\packtGit\\Hands-on-Microservices-with-JavaScript\\Ch08\\earthquakeConsumer> npm start\n    Debugger listening on ws://127.0.0.1:62120/3f477ceb-6d5a-4d84-a98a-8f6185f8f11d\n    For help, see: https://nodejs.org/en/docs/inspector\n    Debugger attached.\n    > earthquakeconsumer@1.0.0 start\n    > node src/index.js\n    Debugger listening on ws://127.0.0.1:62125/d84e3d2b-6be1-4a3f-8ba3-2bca4d1fe710\n    For help, see: https://nodejs.org/en/docs/inspector\n    Debugger attached.\n    earthquakeService streaming API to start the streaming process.\n    ```", "```js\n    Got message\n    {\n      id: 's0iwb737f2',\n      magnitude: 6.473388041641288,\n      location: { latitude: -26.569165455403734, longitude: -167.263244317978 },\n      timestamp: 1725611270994\n    }\n    Got message\n    {\n      id: 'agmk58tick6',\n      magnitude: 1.9469044303512526,\n      location: { latitude: -19.102647524780792, longitude: 58.15282259841075 },\n      timestamp: 1725611271106\n    }\n    ```"]