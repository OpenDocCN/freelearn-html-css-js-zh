["```js\nExample 01.ts\n1 function add (x, y) {\n2    return x + y;\n3 }\nLink to the example on GitHub: https://packt.link/P9k6d\n```", "```js\ntsc add.ts\n```", "```js\nExample 01.js\n1 function add(x, y) {\n2     return x + y;\n3 }\nLink to the example on GitHub: https://packt.link/mTfWp\n```", "```js\ntsc --all\n```", "```js\ntsc --init\n```", "```js\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  }\n}\n```", "```js\n    tsc --init\n    ```", "```js\n    function squares(array: number[]) {\n    ```", "```js\n        const result = array.map(x => x * x);\n    ```", "```js\n        return result;\n    }\n    ```", "```js\n    tsc squares.ts\n    ```", "```js\n    function squares(array) {\n        var result = array.map(function (x) { return x * x; });\n        return result;\n    }\n    ```", "```js\n    tsc --target es6 squares.ts\n    ```", "```js\n    function squares(array) {\n        const result = array.map(x => x * x);\n        return result;\n    }\n    ```", "```js\nlet count = 3;\n```", "```js\ncount = \"string\";\ncount = new Date();\ncount = false;\ncount = [1, 2, 3];\ncount = { key: \"value\" };\n```", "```js\nlet variable;\nif (Math.random()>0.5) {\n    variable = 3;\n} else {\n    variable = \"String\";\n}\nconsole.log(variable.toLowerCase());\n```", "```js\nlet variable: number;\n```", "```js\nlet variable = 3;\n```", "```js\nfunction add (x, y) {\n    return x + y;\n}\n```", "```js\nadd(1, 2); // two arguments\nadd(1, 2, 3); // three arguments\nadd(1); // one argument\nadd(); // no arguments\n```", "```js\nadd(1, 2); // no changes, as the number of arguments match the number of parameters.\nadd(1, 2); // the third argument is ignored\nadd(1, undefined); // the second parameter is given a value of undefined\nadd(undefined, undefined); // both parameters are given a value of undefined\n```", "```js\nfunction add (x: number, y: number) {\n    return x + y;\n}\n```", "```js\nconst first = { property: 'value'};\nconst second = false;\nconst result = add(first, second);\n```", "```js\nfunction add (x: number, y: number): number {\n    return x + y;\n}\n```", "```js\n    function snippet (text: string, length: number) : string {\n    ```", "```js\n        if (text.length < length) {\n            return text;\n        }\n    ```", "```js\n        const ellipsis = \"...\";\n        let result = text.slice(0, length - ellipsis.length);\n    ```", "```js\n        const lastSpace = result.lastIndexOf(\" \");\n        result = `${result.slice(0, lastSpace)}${ellipsis}`;\n    ```", "```js\n        return result;\n    }\n    ```", "```js\n    // correct call and usage\n    const resultOne = snippet(\"TypeScript is a programming language that is a strict syntactical superset of JavaScript and adds optional static typing to the language.\", 40);\n    console.log(resultOne);\n    // missing second parameter\n    const resultTwo = snippet(\"Lorem ipsum dolor sit amet\");\n    console.log(resultTwo);\n    // The first parameter is of incorrect type\n    const resultThree = snippet(false, 40);\n    console.log(resultThree);\n    // The second parameter is of incorrect type\n    const resultFour = snippet(\"Lorem ipsum dolor sit amet\", false);\n    console.log(resultFour);\n    // The result is assigned to a variable of incorrect type\n    var resultFive: number = snippet(\"Lorem ipsum dolor sit amet\", 20);\n    console.log(resultFive);\n    ```", "```js\n    tsc snippet.ts\n    ```", "```js\n    Found 3 errors.\n    ```", "```js\n    // correct call and usage\n    var resultOne = snippet(\"TypeScript is a programming language that is a strict syntactical superset of JavaScript and adds optional static typing to the language.\", 40);\n    console.log(resultOne);\n    ```", "```js\n    tsc snippet.ts\n    ```", "```js\n    node snippet.js\n    ```", "```js\n    TypeScript is a programming language...\n    ```", "```js\nconst person = {\n    firstName: \"Ada\",\n    lastName: \"Lovelace\"\n}\n```", "```js\nperson.age = 36;\n```", "```js\nconsole.log(\"Hi, \" + person.fristName);\n```", "```js\nconst person = {\n    firstName: \"Ada\",\n    lastName: \"Lovelace\"\n}\nconsole.log(`Hi, ${person.fristName}`);\n```", "```js\nperson.lastName = \"Byron\";\n```", "```js\ninterface Person {\n    firstName: string;\n    lastName: string;\n    age? : number;\n}\n```", "```js\nconst person: Person = {\n    firstName: \"Ada\",\n    lastName: \"Lovelace\"\n}\nperson.age = 36;\n```", "```js\nfunction showFullName (person: Person) {\n    console.log(`${person.firstName} ${person.lastName}`)\n}\n```", "```js\nfunction makePerson (name: string, surname: string): Person {\n    const result = {\n        firstName: name,\n        lastName: surname\n    }\n    return result;\n}\nconst babbage = makePerson(\"Charles\", \"Babbage\");\nshowFullName(babbage);\n```", "```js\n    interface Book {\n        author: string;\n        title: string;\n        pages?: number;\n        isRead?: boolean;\n    }\n    ```", "```js\n    function showBook(book: Book) {\n        console.log(`${book.author} wrote ${book.title}`);\n        if (book.isRead !== undefined) {\n            console.log(`  I have ${book.isRead ? \"read\" : \"not read\"} this book`);\n        }\n    }\n    ```", "```js\n    function setPages (book: Book, pages: number) {\n        book.pages = pages;\n    }\n    ```", "```js\n    function readBook(book: Book) {\n        book.isRead = true;\n    }\n    ```", "```js\n    const warAndPeace = {\n        author: \"Leo Tolstoy\",\n        title: \"War and Peace\",\n        isRead: false\n    }\n    const mobyDick: Book = {\n        author: \"Herman Melville\",\n        title: \"Moby Dick\"\n    }\n    ```", "```js\n    setPages(warAndPeace, 1225);\n    showBook(warAndPeace);\n    showBook(mobyDick);\n    readBook(mobyDick);\n    showBook(mobyDick);\n    ```", "```js\n    tsc book.ts\n    ```", "```js\n    node book.js\n    ```", "```js\n    Leo Tolstoy wrote War and Peace\n      I have not read this book\n    Herman Melville wrote Moby Dick\n    Herman Melville wrote Moby Dick\n      I have read this book\n    ```", "```js\nconst value = 1234;\nconsole.log(typeof value); \n```", "```js\nconst value = \"textual value\";\nconsole.log(typeof value); \n```", "```js\nconst value = false;\nconsole.log(typeof value); \n```", "```js\nconst days = {\n    \"Monday\": 1,\n    \"Tuesday\": 2,\n    \"Wednesday\": 3,\n    \"Thursday\": 4,\n    \"Friday\": 5,\n    \"Saturday\": 6,\n    \"Sunday\": 7,\n}\n```", "```js\nfunction add (x, y) {\n    return x + y;\n}\nconsole.log(typeof add);\n```", "```js\n    const daysInWeek = 7;\n    const name = \"Ada Lovelace\";\n    const isRaining = false;\n    const today = new Date();\n    const months = [\"January\", \"February\", \"March\"];\n    const notDefined = undefined;\n    const nothing = null;\n    const add = (x:number, y: number) => x + y;\n    const calculator = {\n        add\n    }\n    ```", "```js\n    const everything = [daysInWeek, name, isRaining, today, months, notDefined, nothing, add, calculator];\n    ```", "```js\n    for (const something of everything) {\n        const type = typeof something;\n        console.log(something, type);\n    }\n    ```", "```js\n    tsc type-test.ts\n    ```", "```js\n    node type-test.js\n    ```", "```js\n    7 number\n    Ada Lovelace string\n    false boolean\n    2021-04-05T09:14:56.259Z object\n    [ 'January', 'February', 'March' ] object\n    undefined undefined\n    null object\n    [Function: add] function\n    { add: [Function: add] } object\n    ```", "```js\nconst html = \"<div class=\\\"greeting\\\">\\nHello, \" + firstName + \" \" + lastName + \"\\n</div>\";\n```", "```js\nconst html = `<div class=\"greeting\">\n    Hello, ${firstName} ${lastName}\n</div>\";\n```", "```js\nlet isRead = false;\n```", "```js\nconst numbers = [1, 2, 3, 4, 5];\n```", "```js\nconsole.log(numbers[3]) // writes out 4, as arrays in JavaScript are //…0-based\nnumbers[1] = 200; // the second element becomes 200\n```", "```js\nfor (let index = 0; index < numbers.length; index += 1) {\n    const element = numbers[index];\n    console.log(`The element at index ${index} has a value of ${element}`);\n}\n```", "```js\nlet sum = 0;\nfor (const element of numbers) {\n    sum += element;\n}\n```", "```js\nnumbers[1] = false;\nnumbers[2] = new Date();\nnumbers[3] = \"three\";\nnumbers[4] = function () { \n    console.log(\"I'm really not a number\");\n};\n```", "```js\nlet numbers: number[];\n```", "```js\nlet numbers: Array<number>;\n```", "```js\nconst person = [\"Ada\", \"Lovelace\", 36];\nconsole.log(`First Name is: ${person[0]}`);\nconsole.log(`Last Name is: ${person[1]}`);\nconsole.log(`Age is: ${person[2]}`);\n```", "```js\nconst person: [string, string, number] = [\"Ada\", \"Lovelace\", 36];\n```", "```js\nconsole.log(person[0].toLowerCase());\nconsole.log(person[2] * 10);\n```", "```js\ninterface Person {\n    firstName: string;\n    lastName: string;\n}\n```", "```js\nfunction getFullName (person: Person) {\n    return `${person.firstName} ${person.lastName}`;\n}\n```", "```js\npersons.sort((first, second) => {\n    const firstFullName = getFullName(first);\n    const secondFullName = getFullName(second);\n    return firstFullName.localeCompare(secondFullName);\n})\n```", "```js\n    interface Person {\n        firstName: string;\n        lastName: string;\n    }\n    ```", "```js\n    let count = 0;\n    function getFullName (person: Person) {\n        count += 1;\n        return `${person.firstName} ${person.lastName}`;\n    }\n    ```", "```js\n    const programmers: Person[] = [\n        { firstName: 'Donald', lastName: 'Knuth'},\n        { firstName: 'Barbara', lastName: 'Liskow'},\n        { firstName: 'Lars', lastName: 'Bak'},\n        { firstName: 'Guido', lastName: 'Van Rossum'},\n        { firstName: 'Anders', lastName: 'Hejslberg'},\n        { firstName: 'Edsger', lastName: 'Dijkstra'},\n        { firstName: 'Brandon', lastName: 'Eich'},\n        // feel free to add as many as you want\n    ];\n    ```", "```js\n    // a naive and straightforward sorting function\n    function naiveSortPersons (persons: Person[]): Person[] {\n        return persons.slice().sort((first, second) => {\n            const firstFullName = getFullName(first);\n            const secondFullName = getFullName(second);\n            return firstFullName.localeCompare(secondFullName);\n        })\n    }\n    ```", "```js\n    function schwartzSortPersons (persons: Person[]): Person[] {\n    ```", "```js\n        const tuples: [Person, string][] = persons.map(person => [person, getFullName(person)]);\n    ```", "```js\n        tuples.sort((first, second) => first[1].localeCompare(second[1]));\n    ```", "```js\n        const result = tuples.map(tuple => tuple[0]);\n    ```", "```js\n        return result;\n    }\n    ```", "```js\n    count = 0;\n    const sortedNaive = naiveSortPersons(programmers);\n    ```", "```js\n    console.log(sortedNaive);\n    console.log(`When called using the naive approach, the function was called ${count} times`);\n    ```", "```js\n    count = 0;\n    const sortedSchwartz = schwartzSortPersons(programmers); \n    ```", "```js\n    console.log(sortedSchwartz);\n    console.log(`When called using the Schwartzian transform approach, the function was called ${count} times`); \n    ```", "```js\n    tsc person-sort.ts\n    ```", "```js\n    node person-sort.js\n    ```", "```js\n    [\n      { firstName: 'Anders', lastName: 'Hejslberg' },\n      { firstName: 'Barbara', lastName: 'Liskow' },\n      { firstName: 'Brandon', lastName: 'Eich' },\n      { firstName: 'Donald', lastName: 'Knuth' },\n      { firstName: 'Edsger', lastName: 'Dijkstra' },\n      { firstName: 'Guido', lastName: 'Van Rossum' },\n      { firstName: 'Lars', lastName: 'Bak' }\n    ]\n    When called using the naive approach, the function was called 28 times\n    [\n      { firstName: 'Anders', lastName: 'Hejslberg' },\n      { firstName: 'Barbara', lastName: 'Liskow' },\n      { firstName: 'Brandon', lastName: 'Eich' },\n      { firstName: 'Donald', lastName: 'Knuth' },\n      { firstName: 'Edsger', lastName: 'Dijkstra' },\n      { firstName: 'Guido', lastName: 'Van Rossum' },\n      { firstName: 'Lars', lastName: 'Bak' }\n    ]\n    When called using the Schwartzian transform approach, the function was called 7 times \n    ```", "```js\nprogrammers.sort((first, second) => {\n    const firstFullName = getFullName(first);\n    const secondFullName = getFullName(second);\n    return firstFullName.localeCompare(secondFullName);\n});\nconsole.log(count);\n```", "```js\nenum Suit {\n    Hearts,\n    Diamonds,\n    Clubs,\n    Spades\n}\n```", "```js\nlet trumpSuit = Suit.Hears;\n```", "```js\n{\n  '0': 'Hearts',\n  '1': 'Diamonds',\n  '2': 'Clubs',\n  '3': 'Spades',\n  Hearts: 0,\n  Diamonds: 1,\n  Clubs: 2,\n  Spades: 3\n}\n```", "```js\nenum Suit {\n    Hearts = 10,\n    Diamonds = 20,\n    Clubs = 30,\n    Spades = 40\n}\n```", "```js\nenum Suit {\n    Hearts = \"hearts\",\n    Diamonds = \"diamonds\",\n    Clubs = \"clubs\",\n    Spades = \"spades\"\n}\n```", "```js\n{\n  Hearts: 'hearts',\n  Diamonds: 'diamonds',\n  Clubs: 'clubs',\n  Spades: 'spades'\n}\n```", "```js\nlet variable = 3;\nif (Math.random()>0.5) {\n    variable = \"not-a-number\";\n}\n```", "```js\nlet variable: any = 3;\nif (Math.random()>0.5) {\n    variable = \"not-a-number\";\n}\n```", "```js\nconst everything: any[] = [ 1, false, \"string\"];\n```", "```js\nconst variable: any = getSomeResult(); // a hypothetical function //with some return value we know nothing about\nconst str: string = variable;  // this works, as any might be a //string, and \"anything goes\";\nvariable.toLowerCase();        // we are allowed to call a method, //and we'll determine at runtime whether that's possible\n```", "```js\nconst variable: unknown = getSomeResult(); // a hypothetical function with some return value we know nothing about\nif (typeof variable === \"string\") {\n    const str: string = variable; // valid, because we tested if the value inside `variable` actually has a type of string\n    variable.toLowerCase();\n}\n```", "```js\nconst person = {\n    firstName: \"Ada\",\n    lastName: null\n}\n```", "```js\nconsole.log(person.lastName);\nconsole.log(person.age);\n```", "```js\nfunction notReturning(): never {\n    throw new Error(\"point of no return\");\n}\nconst value = notReturning();\n```", "```js\nconst x = true;\nif (x) {\n    console.log(`x is true: ${x.toString()}`);\n}\n```", "```js\nconst add = function (x: number, y: number) {\n    return x + y;\n}\n```", "```js\nclass Person {\n    constructor(public firstName: string, public lastName: string, public age?: number) {\n    }\n    getFullName() {\n        return `${this.firstName} ${this.lastName}`;\n    }\n}\n```", "```js\nconst person = new Person(\"Ada\", \"Lovelace\");\nconsole.log(person.getFullName());\n```", "```js\ninterface Person\n{\n    firstName: string;\n    lastName: string;\n    age?: string;\n}\n```", "```js\ntype integer = number;\n```", "```js\ntype Person = [string, string, number?];\n```", "```js\ntype Person = {\n    firstName: string;\n    lastName: string;\n    age?: number;\n}\ntype FilterFunction = (person: Person) => boolean;\n```", "```js\n    enum Operator {\n        Add = \"add\",\n        Subtract = \"subtract\",\n        Multiply = \"multiply\",\n        Divide = \"divide\",\n    }\n    ```", "```js\n    const calculator = function (first: number, second: number, op: Operator) {\n    }\n    ```", "```js\n    type Operation = (x: number, y: number) => number;\n    ```", "```js\n    const operations: [Operator, Operation][] = [];\n    ```", "```js\n    const add = function (first: number, second: number) {\n        return first + second;\n    };\n    ```", "```js\n    operations.push([Operator.Add, add]);\n    ```", "```js\n    const subtract = function (first: number, second: number) {\n        return first - second;\n    };\n    operations.push([Operator.Subtract, subtract]);\n    const multiply = function (first: number, second: number) {\n        return first * second;\n    };\n    operations.push([Operator.Multiply, multiply]);\n    const divide = function (first: number, second: number) {\n        return first / second;\n    };\n    operations.push([Operator.Divide, divide]);\n    ```", "```js\n    const calculator = function (first: number, second: number, op: Operator) {\n        const tuple = operations.find(tpl => tpl[0] === op);\n        const operation = tuple[1];\n        const result = operation(first, second);\n        return result;\n    }\n    ```", "```js\n    console.log(calculator(4, 6, Operator.Add));\n    console.log(calculator(13, 3, Operator.Subtract));\n    console.log(calculator(2, 5, Operator.Multiply));\n    console.log(calculator(70, 7, Operator.Divide));\n    ```", "```js\n    tsc calculator.ts\n    ```", "```js\n    node calculator.js\n    ```", "```js\n    10\n    10\n    10\n    10\n    ```", "```js\n    enum Operator {\n        Add = \"add\",\n        Subtract = \"subtract\",\n        Multiply = \"multiply\",\n        Divide = \"divide\",\n        Modulo = \"modulo\"\n    }\n    ```", "```js\n    const modulo = function (first: number, second: number) {\n        return first % second;\n    };\n    operations.push([Operator.Modulo, modulo]);\n    ```", "```js\n    console.log(calculator(14, 3, Operator.Modulo));\n    ```", "```js\n    node calculator.js\n    ```", "```js\n    10\n    10\n    10\n    10\n    2\n    ```", "```js\n    \"war AND peace\" => \"War And Peace\"\n    \"Catcher in the Rye\" => \"Catcher In The Rye\"\n    \"tO kILL A mOCKINGBIRD\" => \"To Kill A MockingBird\"\n    ```", "```js\n    \"War and Peace\" => 3 \n    \"catcher-in-the-rye\" => 4 \n    \"for_whom the-bell-tolls\" => 5\n    ```", "```js\n    \"War and Peace\" => [War, and, peace] \n    \"catcher-in-the-rye\" => [catcher, in, the, rye] \n    \"for_whom the-bell-tolls\"=> [for, whom, the, bell, tolls]\n    ```", "```js\n    \"War\", 3 => \"WarWarWar\" \n    \"rye\", 1 => \"rye\"\n    \"bell\", 0 => \"\"\n    ```", "```js\n    \"War and Peace\" => false \n    \"Atonement\" => true \n    \"1Q84\" => false\n    ```", "```js\n    \"War and Peace\" => false \n    \"         \" => true \n    \"\" => true\n    ```"]