["```js\n/**card-component.js**/\n\nexport class CardComponent {\n\n  cardTitle;\n\n  constructor(){\n    this.cardTitle = 'Card component example'\n  }\n\n}\n\n<!--card-component.html-->\n\n<template>\n  <div class=\"card\" >\n\n    <div class=\"card-header\">\n      <h2>${cardTitle}</h2>\n    </div>\n    <div class=\"card-body\">\n    </div>\n\n  </div>\n</template>\n```", "```js\n<!--main-template.html-->\n\n<template>\n <require from=\"./components/card-component\"></require> //Remember to add the close tag\n\n <div class=\"main-content\">\n     <card-component></card-component>\n </div>\n\n</template>\n```", "```js\nimport CustomerService from './services/customer-service'\n\n@inject(CustomerService)\nexport class CustomerComponent {\n\n  constructor(customerService){\n    this.customerService = customerService\n  }\n\n}\n```", "```js\nimport {CustomerService} from 'backend/customer-service';\nimport {CommonAlerts} from 'resources/dialogs/common-dialogs';\nimport {EventAggregator} from 'aurelia-event-aggregator';\n\nexport class CustomerProfileScreen {\n\n  static inject() { return [CustomerService, CommonAlerts, EventAggregator]; }\n\n  constructor(customerService, alerts, ea) {\n    this.customerService = customerService;\n    this.alerts = alerts;\n    this.ea = ea;\n  }\n\n}\n```", "```js\nexport class ComponentLifecycleExample {\n\n  retrievedData;\n\n  constructor(service) {\n    // Create and initialize your class object here...\n    this.service = service;\n  }\n\n  created(owningView, myView) {\n    // Invoked once the component is created...\n  }\n\n  bind(bindingContext, overrideContext) {\n    // Invoked once the databinding is activated...\n  }\n\n  attached(argument) {\n    // Invoked once the component is attached to the DOM...\n    this.retrievedData = this.service.getData();\n  }\n\n  detached(argument) {\n    // Invoked when component is detached from the dom\n    this.retrievedData = null;\n  }\n\n  unbind(argument) {\n    // Invoked when component is unbound...\n  }\n\n}\n```", "```js\nconstructor(){\n  this.customerName = 'Default name'\n  this.placeholderText = 'Insert customer name here'\n}\n```", "```js\nconstructor(){\n  this.date = this.getCurrentDate()\n}\n\ngetCurrentDate(){\n  //Method implementation\n}\n```", "```js\nexport class ComponentExample {\n\n  dataList\n\n  constructor(){\n    // Constructor's code\n  }\n\n  attached(){\n    this.showLoader(true);\n    this.service.retrieveAllData()\n                .then( data => {\n                   this.dataList = data.getBody()\n                   this.showLoader(false)\n                   this.showAlert('Data retrieved correctly!!!')\n                })\n                .catch( error => {\n                  console.log(error)\n                  this.showLoader(false)\n                  this.showAlert('Oops! We have some errors retrieving data!')\n                })\n\n  }\n\n}\n```", "```js\n<select change.delegate=\"myEventCallback($event)\" ></select>\n```", "```js\nexport class TriggerAndDelegateExample {\n\n  myEventCallback(event){\n    console.log(event)\n  }\n\n}\n```", "```js\n<div class=\"option-container\" focus.trigger=\"myEventCallback($event)\"></div>\n```", "```js\n<div class='my-plugin-container' click.delegate='onClickPluginContainer()'>\n      <plugin-element></plugin-element>\n</div>\n```", "```js\n<div class='my-plugin-container' click.capture='onClickPluginContainer()'>\n  <plugin-element></plugin-element>\n</div>\n```", "```js\nattribute.commamnd = \"expression\"\n```", "```js\n<input  value=\"someValue\" id=\"inputId\"  />\n```", "```js\n<input  value.from-view=\"userInputValue\" id.bind=\"editableId\"  />\n<input  value.one-time=\"defaultInputValue\" id.one-way=\"generatedId\"  />\n```", "```js\n<input  value.from-view=\"modelValue\" id.bind=\"formName + randomNumber\"  />\n```", "```js\n  <custom-element go.call=\"doSomething()\"></custom-element>\n\n```", "```js\n    <span textcontent.bind=\"'Hello' + name\"></span>\n\n    <span>Hello ${name}</span>\n```", "```js\n<template>\n  <button class=\"btn ${isActive ? 'btn-active' : 'blocked-btn'} submit\"></button>\n  <button class.bind=\"isActive ? 'btn-active' : 'blocked-btn'\"></button>\n  <button class.one-time=\"isActive ? 'btn-active' : 'blocked-btn'\"></button>\n</template>\n```", "```js\nexport class StyleExample {\n  constructor() {\n    this.styleAsString = 'color: red; background-color: blue';\n\n    this.styleAsObject = {\n      color: 'red',\n      'background-color': 'blue'\n    };\n  }\n}\n```", "```js\n<template>\n      <div style.bind=\"styleAsString\"></div>\n      <div style.bind=\"styleAsObject\"></div>\n</template>\n```", "```js\n<div style=\"width: ${width}px; height: ${height}px;\"></div>\n```", "```js\n<div css=\"width: ${width}px; height: ${height}px;\"></div>\n```", "```js\nexport class Developer {\n  firstName = 'Erikson';\n  lastName = 'Murrugarra';\n\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n```", "```js\nimport {computedFrom} from 'aurelia-framework';\n\nexport class Developer {\n  firstName = 'Erikson';\n  lastName = 'Murrugarra';\n\n  @computedFrom('firstName', 'lastName')\n  get fullName() {\n    return `${this.firstName} ${this.lastName}`;\n  }\n}\n```", "```js\nexport class Example {\n\n  constructor() {\n    this.showRawData();\n  }\n\n  showRawData() {\n    this.currentDate = new Date(); \n    this.someNumber = Math.random() * 1000000000;\n  }\n\n}\n```", "```js\n<template>\n      ${currentDate} <br/>\n      ${someNumber}\n</template>\n```", "```js\nSun Dec 31 2017 18:04:45 GMT-0500 (-05)\n936693540.3380567\n```", "```js\nimport moment from 'moment';\n\nexport class DateFormatValueConverter {\n\n  toView(value) {\n    return moment(value).format('M/D/YYYY h:mm:ss a');\n  }\n\n}\n```", "```js\nexport class Example {\n\n  constructor() {\n    this.showRawData();\n  }\n\n  showRawData() {\n    this.currentDate = new Date(); \n    this.someNumber = Math.random() * 1000000000;\n  }\n\n}\n```", "```js\n<template>\n    <require from=\"./date-format\"></require>\n    ${currentDate | dateFormat} <br/> \n    ${someNumber} \n</template>\n```", "```js\n12/31/2017 6:25:05 pm\n```", "```js\nimport moment from 'moment';\n\nexport class DateFormatValueConverter {\n\n  toView(value, format) {\n    return moment(value).format(format);\n  }\n\n}\n```", "```js\n<template>\n      <require from=\"./date-format\"></require>\n\n      ${currentDate | dateFormat:'M/D/YYYY h:mm:ss a'} <br/>\n      ${currentDate | dateFormat:'MMMM Mo YYYY'} <br/>\n      ${currentDate | dateFormat:'h:mm:ss a'} <br/>\n</template>\n```", "```js\nexport class App {\n  configureRouter(config, router) {\n    this.router = router;\n    config.title = 'Aurelia';\n    config.map([\n      { route: ['', 'home'],       name: 'home',       moduleId: 'home/index' },\n      { route: 'users',            name: 'users',      moduleId: 'users/index', nav: true,           title: 'Users' },\n      { route: 'users/:id/detail', name: 'userDetail', moduleId: 'users/detail' },\n      { route: 'files/*path',      name: 'files',      moduleId: 'files/index', nav: false,    title: 'Files', href:'#files' }\n    ]);\n  }\n}\n```", "```js\nconfig.map([\n          { route: ['', 'home'], name: 'home',  moduleId: 'home/index' },\n          { route: 'users',      name: 'users', moduleId: 'users/index', nav: true, title: 'Users', caseSensitive: true }\n]);\n```", "```js\nconfig.map([\n          { route: ['', 'home'], name: 'home',  moduleId: 'home/index' },\n          { route: 'users',      name: 'users', moduleId: 'users/index', nav: true, title: 'Users' }\n        ]);\n\nconfig.mapUnknownRoutes('not-found');\n```", "```js\nconst handleUnknownRoutes = (instruction) => {\n      return { route: 'not-found', moduleId: 'not-found' };\n}\n\nconfig.mapUnknownRoutes(handleUnknownRoutes);\n```", "```js\nconfig.map([\n      { route: '', redirect: 'home' },\n      { route: 'home', name: 'home', moduleId: 'home/index' }\n]);\n```", "```js\n<template>\n  <div class=\"header\">\n    <header-component></header-component>\n  </div>\n  <div class=\"menu\">\n    <menu-component></menu-component>\n  </div>\n  <div class=\"main-content\">\n    <router-view></router-view>\n  </div>\n</template>\n```", "```js\n<template>\n      <div>\n        <router-view layout-view=\"layout.html\"></router-view>\n      </div>\n</template>\n```", "```js\n<template>\n      <div class=\"left-content\">\n        <slot name=\"left-content\"></slot>\n      </div>\n      <div class=\"right-content\">\n        <slot name=\"right-content\"></slot>\n      </div>\n</template>\n```", "```js\n<template>\n      <div slot=\"left-content\">\n        <home-header></home-header> \n      </div> \n      <div slot=\"right-content\">\n         <home-menu></home-menu> \n      </div>\n</template>\n```", "```js\nconfig.map([\n          { route: '', name: 'home', moduleId: 'home' }\n]);\n```", "```js\nexport class App {\n      configureRouter(config, router) {\n        this.router = router;\n        config.title = 'Example';\n        config.map([\n          { route: ['', 'home'], name: 'home',  moduleId: 'home/index' },\n          { route: 'users',      name: 'users', moduleId: 'users/index', nav: true, title: 'Users' }\n        ]);\n\n        config.fallbackRoute('users');\n}\n```", "```js\n npm install aurelia-testing\n```", "```js\n<template>\n      <div class=\"custName\">${custName}</div>\n</template>\n```", "```js\nimport {bindable} from 'aurelia-framework';\n\n    export class CustomerComponent {\n      @bindable custName;\n}\n```", "```js\nimport {StageComponent} from 'aurelia-testing';\nimport {bootstrap} from 'aurelia-bootstrapper';\n\ndescribe('CustomerComponent', () => {\n  let component;\n\n  beforeEach(() => {\n    component = StageComponent\n      .withResources('customer-component')\n      .inView('<customer-component cust-name.bind=\"custName\"></customer-component>')\n      .boundTo({ custName: 'Diego' });\n  });\n\n  it('should render first name', done => {\n    component.create(bootstrap).then(() => {\n      const nameElement = document.querySelector('.custName');\n      expect(nameElement.innerHTML).toBe('Diego');\n      done();\n    }).catch(e => { console.log(e.toString()) });\n  });\n\n  afterEach(() => {\n    component.dispose();\n  });\n});\n```", "```js\nimport {StageComponent} from 'aurelia-testing';\n```", "```js\n    component = StageComponent\n      .withResources('src/customer-component')\n      .inView('<customer-component cust-name.bind=\"custName\"></customer-component>')\n      .boundTo({ custName: 'Diego' });\n```", "```js\ncomponent.create(bootstrap).then(() => {\n      const nameElement = document.querySelector('.custName');\n      expect(nameElement.innerHTML).toBe('Diego');\n      done();\n    }).catch(e => { console.log(e.toString()) });\n```", "```js\ncomponent.dispose();\n```", "```js\nimport {StageComponent} from 'aurelia-testing';\nimport {bootstrap} from 'aurelia-bootstrapper';\n\ndescribe('CustomerComponent', () => {\n  let component;\n\n  beforeEach(() => {\n    component = StageComponent\n      .withResources('src/customer-component')\n      .inView('<customer-component cust-name.bind=\"custName\"></customer-component>')\n      .boundTo({ custName: 'Diego' });\n  });\n\n  it('can manually handle life cycle', done => {\n    let nameElement;\n\n    component.manuallyHandleLifecycle().create()\n      .then(() => {\n        nameElement = document.querySelector('.custName');\n        expect(nameElement.innerHTML).toBe(' ');\n      })\n      .then(() => component.bind())\n      .then(() => {\n        expect(nameElement.innerHTML).toBe('Foo bind');\n      })\n      .then(() => component.attached())\n      .then(() => {\n        expect(nameElement.innerHTML).toBe('Foo attached');\n      })\n      .then(() => component.detached())\n      .then(() => component.unbind())\n      .then(() => {\n        expect(component.viewModel.custName).toBe(null);\n      })\n      .then(() => component.bind({ custName: 'Bar' }))\n      .then(() => {\n        expect(nameElement.innerHTML).toBe('Bar bind');\n      })\n      .then(() => component.attached())\n      .then(() => {\n        expect(nameElement.innerHTML).toBe('Bar attached');\n      })\n      .then(done)\n      .catch(done);\n  });\n\n  afterEach(() => {\n    component.dispose();\n  });\n\n});\n```", "```js\nexport class MockService {\n      firstName;\n\n      getFirstName() { return Promise.resolve(this.firstName);\n}\n```", "```js\ndescribe('MyComponent', () => {\n      let component;\n      let service = new MockService(); //Our created Mock\n\n      beforeEach(() => {\n        service.firstName = undefined; \n\n        component = StageComponent\n          .withResources('src/component')\n          .inView('<component></component>');\n\n        component.bootstrap(aurelia => {\n          aurelia.use.standardConfiguration();\n          aurelia.container.registerInstance(Service, service); //Register our mock service instance to the current container instance\n        });\n      });\n\n      it('should render first name', done => {\n        service.firstName = 'Diego';\n\n        component.create(bootstrap).then(() => {\n          const nameElement = document.querySelector('.first-name');\n          expect(nameElement.innerHTML).toBe('Diego');\n\n          done();\n        });\n      });\n\n      afterEach(() => {\n        component.dispose();\n      });\n});\n```", "```js\nimport {StageComponent} from 'aurelia-testing';\nimport {bootstrap} from 'aurelia-bootstrapper';\n\ndescribe('MyAttribute', () => {\n  let component;\n\n  beforeEach(() => {\n    //Literal HTML syntax\n    let view = `\n          <div class=\"row\">\n            <div class=\"col-xs-12\">\n              <div my-attribute.bind=\"color\">Diego</div>\n            </div>\n          </div>\n        `;\n    component = StageComponent\n      .withResources('src/my-attribute')\n      .inView(view)\n      .boundTo(viewModel);\n  });\n  //...\n});\n```", "```js\nau run --watch \n```", "```js\n<template>\n  <md-navbar>\n    <div class=\"margin-content\">\n\n      <ul class=\"hide-on-med-and-down right\">\n        <li md-waves><a href=\"#about\">About</a></li>\n        <li md-waves><a href=\"#map\">Login</a></li>\n      </ul>\n\n    </div>\n  </md-navbar>\n</template>\n```", "```js\n<require from=\"./layout/header/app-header\"></require>\n```", "```js\n<app-header></app-header>\n```", "```js\nDEBUG [templating] importing resources for app.html Array [ \"materialize-css/css/materialize.css\", \"layout/header/app-header\" ]\nvendor-bundle.js:14222:8 TypeError: target is undefined[Learn More]\n```", "```js\nexport class AppHeader {\n\n}\n```", "```js\n<template>\n\n  <md-sidenav view-model.ref=\"sideNav\" md-fixed=\"true\" md-edge=\"left\">\n    <ul>\n      <li md-waves><a>Option A</a></li>\n      <li md-waves><a>This is better</a></li>\n      <li md-waves><a>I want this</a></li>\n      <li md-waves><a>Oops!</a></li>\n    </ul>\n  </md-sidenav>\n\n</template>\n```", "```js\n<template>\n  <require from=\"materialize-css/css/materialize.css\"></require>\n  <require from=\"./layout/header/app-header\"></require>\n  <require from=\"./layout/menu/app-menu\"></require>\n\n  <app-header></app-header>\n\n  <main>\n\n    <div class=\"row\">\n\n      <div class=\"col s12 m12 l12\">\n        <h1>${message}</h1>\n      </div>\n\n    </div>\n\n    <app-menu></app-menu>\n\n  </main>\n\n</template>\n```", "```js\nexport default function processCSS() {\n  return gulp.src(project.cssProcessor.source)\n    .pipe(sourcemaps.init())\n    .pipe(sass().on('error', sass.logError))\n    .pipe(gulp.dest('./')) //THIS LINE\n    .pipe(build.bundle());\n}\n```", "```js\n\"cssProcessor\": {\n  \"id\": \"sass\",\n  \"displayName\": \"Sass\",\n  \"fileExtension\": \".scss\",\n  \"source\": \"src/**/*.scss\"\n},\n```", "```js\n\nheader, main, footer {\n  padding-left: 300px;\n}\n\nmd-navbar[md-fixed=\"true\"] nav {\n  padding-right: 300px;\n}\n\nmd-sidenav {\n  div {\n    collapsible-body {\n    }\n    padding: 0;\n  }\n}\n```", "```js\nconfigureRouter(config, router) {\n  this.router = router;\n  config.title = 'FIFA WC 2018';\n  config.map([\n    { route: ['', 'home'],       name: 'home',       moduleId: 'home/app-home' },\n  ]);\n}\n```", "```js\nexport class AppMenu {\n\n  menuOptions = [\n    'Option A',\n    'This is better',\n    'I want this',\n    'Oops!',\n  ]\n\n}\n```", "```js\n<template>\n\n  <md-sidenav view-model.ref=\"sideNav\" md-fixed=\"true\" md-edge=\"left\">\n    <ul>\n\n      <li repeat.for=\"option of menuOptions\" md-waves><a>${option}</a></li>\n\n    </ul>\n  </md-sidenav>\n\n</template>\n```"]