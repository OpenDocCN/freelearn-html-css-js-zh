["```js\n<script id=\"form-template\" type=\"text/template\">\n<form>\n<div class=\"form-group\">\n<label for=\"name\">Name</label>\n<input id=\"name\" class=\"form-control\" type=\"text\"\nvalue=\"<%= name %>\" />\n</div>\n<div class=\"form-group\">\n<label for=\"phone\">Name</label>\n<input id=\"phone\" class=\"form-control\" type=\"text\"\nvalue=\"<%= phone %>\" />\n</div>\n<div class=\"form-group\">\n<label for=\"email\">Name</label>\n<input id=\"email\" class=\"form-control\" type=\"text\"\nvalue=\"<%= email %>\" />\n</div>\n<button type=\"submit\"class=\"btn btn-default\">Save now</button>\n</form>\n</script>\n\n<script id=\"preview-template\" type=\"text/template\">\n<h3><%= name %></h3>\n<ul>\n<li><%= phone %></li>\n<li><%= email %></li>\n</ul>\n</script>\n```", "```js\n'use strict';\n\nvar contact = new Backbone.Model({\n  name: 'John Doe',\n  phone: '555555555',\n  email: 'john.doe@example.com'\n});\n\nclass FormView extends ModelView {\n  constructor(options) {\n    super(options);\n    this.template = '#form-template';\n    this.model = contact;\n  }\n}\n\nclass ContactPreview extends ModelView {\n  constructor(options) {\n    super(options);\n    this.template = '#preview-template';\n    this.model = contact;\n\n    // Re-render the view if something in the model\n    // changes\n    this.model.on('change', this.render, this);\n  }\n}\n\nvar form = new FormView({\n  el: '#contact-form'\n});\n\nvar preview = new ContactPreview({\n  el: '#contact-preview'\n});\n\nform.render();\npreview.render();\n```", "```js\nvar FormView = ModelView.extend({\n  // ...\n  events() {\n    return {\n      'click button[type=\"submit\"]': 'saveContact'\n    };\n  }\n\n  saveContact(event) {\n    event.preventDefault();\n    this.model.set('name', this.$('#name').val());\n    this.model.set('phone', this.$('#phone').val());\n    this.model.set('email', this.$('#email').val());\n  }\n});\n```", "```js\nclass FormView extends ModelView {\n  // ...\n\n  events() {\n    return {\n      'click button[type=\"submit\"]': 'saveContact',\n      'keyup input': 'inputChanged',\n      'change input': 'inputChanged'\n    };\n  }\n\n  inputChanged(event) {\n    var $target = $(event.target);\n    var value = $target.val();\n    var id = $target.attr('id');\n    this.model.set(id, value);\n  }\n\n// ...\n}\n```", "```js\nvar myModel = new Backbone.Model();\n\nmyModel.on('change:foo', event => {\n  console.log('foo changed to', event.changed.foo);\n});\nmyModel.on('change', event => {\n  var changedKeys = _.keys(event.changed);\n\n  changedKeys.forEach(key => {\n    console.log(key, 'changed to', event.changed[key]);\n  });\n});\n\nmyModel.set('foo', 'bar');\nmyModel.set('baz', 'xyz');\nmyModel.set({\n  foo: 'stuff',\n  baz: 'zxy'\n});\n```", "```js\nthis.model.on('change', this.render, this);\n```", "```js\n<script id=\"preview-template\" type=\"text/template\">\n<h3 id=\"name\"><%= name %></h3>\n<ul>\n<li id=\"phone\"><%= phone %></li>\n<li id=\"email\"><%= email %></li>\n</ul>\n</script>\n```", "```js\nclass ContactPreview extends ModelView {\n  constructor(options) {\n    //...\n\n    // Re-render the view if something in the model\n    // changes\n    this.model.on('change', this.handleChange, this);\n  }\n\n  handleChange(event) {\n    var changedKeys = _.keys(event.changed);\n\n    changedKeys.forEach(key => {\n      let $target = this.$('#' + key);\n      if ($target) {\n        $target.html(event.changed[key]);\n      }\n    });\n  }\n}\n```", "```js\nvar FormView = ModelView.extend({\ntemplate: '#form-template',\n  bindings: {\n    '#name': 'name',\n    '#phone': 'phone',\n    '#email': 'email'\n  },\n  onRender: function() {\n    this.stickit();\n  }\n});\n```", "```js\n{\n\"name\": \"John Doe\",\n\"address\": {\n\"street\": \"Seleme\",\n\"number\": \"1975 int 6\",\n\"city\": \"Culiac√°n\"\n  },\n\"phones\": [{\n\"label\": \"Home\",\n\"number\": \"55 555 123\"\n  }, {\n\"label\": \"Office\",\n\"number\": \"55 555 234\"\n  }],\n\"emails\": [{\n\"label\": \"Work\",\n\"email\": \"john.doe@example.com\"\n  }]\n}\n```", "```js\n<script id=\"contact-form-phone-item\" type=\"text/template\">\n<div class=\"col-sm-4 col-md-2\">\n<input type=\"text\" class=\"form-control description\" \nplaceholder=\"home, office, mobile\"\n value=\"<%= description %>\" />\n</div>\n<div class=\"col-sm-6 col-md-8\">\n<input type=\"text\" class=\"form-control phone\" \nplaceholder=\"(123) 456 7890\" value=\"<%= phone %>\" />\n</div>\n<div class=\"col-sm-2 col-md-2 action-links\">\n<a href=\"#\" class=\"pull-rigth delete\">delete</a>\n</div>\n</script>\n```", "```js\n// apps/contacts/contactEditor.js\nclass PhoneListItemView extends ModelView {\n  constructor(options) {\n    super(options);\n    this.template = '#contact-form-phone-item';\n  }\n\n  get className() {\n    return 'form-group';\n  }\n}\n\nclass PhoneListView extends CollectionView {\n  constructor(options) {\n    super(options);\n    this.modelView = PhoneListItemView;\n  }\n}\n```", "```js\n<div class=\"panel panel-simple\">\n<div class=\"panel-heading\">\n    Phones\n<button id=\"new-phone\"\nclass=\"btn btn-primary btn-sm pull-right\">New</button>\n</div>\n<div class=\"panel-body\">\n<form class=\"form-horizontal phone-list-container\"></form>\n</div>\n</div>\n\n<div class=\"panel panel-simple\">\n<div class=\"panel-heading\">\n    Emails\n<button id=\"new-email\"\n class=\"btn btn-primary btn-sm pull-right\">New</button>\n</div>\n<div class=\"panel-body\">\n<form class=\"form-horizontal email-list-container\"></form>\n</div>\n</div>\n```", "```js\n// apps/contacts/contactEditor.js\nclass ContactForm extends Layout {\n  constructor(options) {\n    super(options);\n    this.template = '#contact-form';\n    this.regions = {\n      phones: '.phone-list-container',\n      emails: '.email-list-container'\n    };\n  }\n\n  // ...\n}\n```", "```js\n// apps/contacts/models/phone.js\n'use strict';\n\nApp.Models = App.Models || {};\n\nclass Phone extends Backbone.Model {\n  get defaults() {\n    return {\n      description: '',\n      phone: ''\n    };\n  }\n}\n\nApp.Models.Phone = Phone;\n```", "```js\n// apps/contacts/collections/phoneCollection.js\n'use strict';\n\nApp.Collections = App.Collections || {};\n\nclass PhoneCollection extends Backbone.Collection {\n  constructor(options) {\n    super(options);\n  }\n\n  get model() {\n    return App.Models.Phone;\n  }\n}\n\nApp.Collections.PhoneCollection = PhoneCollection;\n```", "```js\n// apps/contacts/contactEditor.js\nclass ContactEditor {\n  // ...\n\n  showEditor(contact) {\n// Data\n    var phonesData = contact.get('phones') || [];\n    var emailsData = contact.get('emails') || [];\nthis.phones = new App.Collections.PhoneCollection(phonesData);\nthis.emails = new App.Collections.EmailCollection(emailsData);\n\n    // ...\n  }\n\n  // ...\n}\n```", "```js\n// apps/contacts/contactEditor.js\nclass ContactEditor {\n  // ...\n\n  showEditor(contact) {\n    // ...\n\n    // Create the views\n    var layout = new ContactFormLayout({model: contact});\n    var phonesView = new PhoneListView({collection: this.phones});\n    var emailsView = new EmailListView({collection: this.emails});\n    var contactForm = new ContactForm({model: contact});\n    var contactPreview = new ContactPreview({model: contact});\n\n    // ...\n  }\n\n  // ...\n}\n```", "```js\n// apps/contacts/contactEditor.js\nclass ContactEditor {\n  // ...\n\n  showEditor(contact) {\n    // ...\n\n    // Render the views\n    this.region.show(layout);\n    layout.getRegion('form').show(contactForm);\n    layout.getRegion('preview').show(contactPreview);\n    contactForm.getRegion('phones').show(phonesView);\n    contactForm.getRegion('emails').show(emailsView);\n\n    // ...\n  }\n\n  // ...\n}\n```", "```js\n// apps/contacts/contactEditor.js\nclass ContactForm extends Layout {\n  // ...\n\n  get events() {\n    return {\n      'click #new-phone': 'addPhone',\n      'click #new-email': 'addEmail',\n      'click #save': 'saveContact',\n      'click #cancel': 'cancel'\n    };\n  }\n\n  addPhone() {\n    this.trigger('phone:add');\n  }\n\n  addEmail() {\n    this.trigger('email:add');\n  }\n\n  // ...\n}\n```", "```js\n// apps/contacts/contactEditor.js\nclass ContactEditor {\n  // ...\n\n  showEditor(contact) {\n    // ...\n\n    this.listenTo(contactForm, 'phone:add', this.addPhone);\n    this.listenTo(contactForm, 'email:add', this.addEmail);\n\n    // ...\n  }\n\n  addPhone() {\n    this.phones.add({});\n  }\n\n  addEmail() {\n    this.emals.add({});\n  }\n\n  // ...\n}\n```", "```js\n// apps/contacts/contactEditor.js\nclass PhoneListItemView extends ModelView {\n  //...\n\n  get events() {\n    return {\n      'click a': 'deletePhone'\n    };\n  }\n\n  deletePhone(event) {\n    event.preventDefault();\n    this.trigger('phone:deleted', this.model);\n  }\n}\n```", "```js\n// apps/contacts/contactEditor.js\nclass ContactEditor {\n  // ...\n\n  showEditor(contact) {\n    // ...\n\n    this.listenTo(phonesView, 'item:phone:deleted',\n(view, phone) => {\nthis.deletePhone(phone);\n}\n);\n    this.listenTo(emailsView, 'item:email:deleted',\n (view, email) => {\nthis.deleteEmail(email);\n}\n);\n\n    // ...\n  }\n\n  deletePhone(phone) {\n    this.phones.remove(phone);\n  }\n\n  deleteEmail(email) {\n    this.emails.remove(email);\n  }\n\n  // ...\n}\n```", "```js\n// apps/contacts/contactEditor.js\nclass ContactEditor {\n  // ...\n\n  saveContact(contact) {\n    var phonesData = this.phones.toJSON();\n    var emailsData = this.emails.toJSON();\n\n    contact.set({\n      phones: phonesData,\n      emails: emailsData\n    });\n\n    contact.save(null, {\n      success() {\n        // Redirect user to contact list after save\n        App.notifySuccess('Contact saved');\n        App.router.navigate('contacts', true);\n      },\n      error() {\n        // Show error message if something goes wrong\n        App.notifyError('Something goes wrong');\n      }\n    });\n  }\n  // ...\n}\n```", "```js\n// apps/contacts/contactEditor.js\nclass PhoneListItemView extends ModelView {\n  // ...\n\n  get events() {\n    return {\n      'change .description': 'updateDescription',\n      'change .phone': 'updatePhone',\n      'click a': 'deletePhone'\n    };\n  }\n\n  updateDescription() {\n    var $el = this.$('.description');\n    this.model.set('description', $el.val());\n  }\n\n  updatePhone() {\n    var $el = this.$('.phone');\n    this.model.set('phone', $el.val());\n  }\n\n  // ...\n}\n```", "```js\nclass Chapter extends Backbone.Model{\n  validate(attrs, options) {\n    if (attrs.end < attrs.start) {\n      return \"can't end before it starts\";\n    }\n  }\n}\n```", "```js\nvar one = new Chapter({\n  title : \"Chapter One: The Beginning\",\n  start: 15,\n  end: 10\n});\n\nIf (!one.isValid()) {\n  alert(one.validationError);\n}\n```", "```js\none.on(\"invalid\", function(model, error) {\n  alert(model.get(\"title\") + \" \" + error);\n});\n\none.save({\n  start: 15,\n  end: 10\n});\n```", "```js\n// apps/contacts/models/contact.js\nvar Contact extends Backbone.Model {\n  validate(attrs) {\n    if(_.isEmpty(attrs.name)) {\n      return {\n        attr: 'name',\n        message: 'name is required'\n      };\n    }\n  }\n}\n\nvar contact = new Contact({\n// ...\n});\n```", "```js\n// apps/contacts/contactEditor.js\nclass ContactForm extends Layout {\n  constructor(options) {\n    super(options);\n    this.template = '#contact-form';\n    this.regions = {\n      phones: '.phone-list-container',\n      emails: '.email-list-container'\n    };\n\n    this.listenTo(this.model, 'invalid', this.showError);\n  }\n\n// ...\n\n  showError(model, error) {\n    this.clearErrors();\n\n    var selector = '#' + error.attr;\n    var $msg = $('<span>')\n      .addClass('error')\n      .addClass('help-block')\n      .html(error.message);\n    this.$(selector)\n      .closest('.form-group')\n      .addClass('has-error');\n    this.$(selector)\n      .after($msg);\n  }\n\n  clearErrors() {\n    this.$('.has-error').removeClass('has-error');\n    this.$('span.error').remove();\n  }\n}\n```", "```js\n<script src=\"img/backbone.js\"></script>\n<script src=\"img/backbone-validation.js\"></script>\n```", "```js\nclass Contactextends Backbone.Model {\nget validation: {\n    name: {\n      required: true,\n      minLength: 3\n    }\n  }\n}\n```", "```js\nclass ContactForm extends Layout {\n// ...\n\n  onRender() {\n    Backbone.Validation.bind(this);\n  }\n\n  // ‚Ä¶\n});\n```", "```js\nformLayout.on('save:contact', function() {\n  if (!contact.isValid(true)) {\n    return;\n  }\n  contact.unset('phones', { silent: true });\n  contact.set('phones', phoneCollection.toJSON());\n});\n```", "```js\n// app.js\n_.extend(Backbone.Validation.callbacks, {\n  valid(view, attr) {\n    var $el = view.$('#' + attr);\n    if ($el.length === 0) {\n      $el = view.$('[name~=' + attr + ']');\n    }\n\n    // If input is inside an input group, $el is changed to\n    // remove error properly\n    if ($el.parent().hasClass('input-group')) {\n      $el = $el.parent();\n    }\n\n    var $group = $el.closest('.form-group');\n    $group.removeClass('has-error')\n      .addClass('has-success');\n\n    var $helpBlock = $el.next('.help-block');\n    if ($helpBlock.length === 0) {\n      $helpBlock = $el.children('.help-block');\n    }\n    $helpBlock.slideUp({\n      done: function() {\n        $helpBlock.remove();\n      }\n    });\n  },\n\n  invalid(view, attr, error) {\n    var $el = view.$('#' + attr);\n    if ($el.length === 0) {\n      $el = view.$('[name~=' + attr + ']');\n    }\n\n    $el.focus();\n\n    var $group = $el.closest('.form-group');\n    $group.removeClass('has-success')\n      .addClass('has-error');\n\n    // If input is inside an input group $el is changed to\n    // place error properly\n    if ($el.parent().hasClass('input-group')) {\n      $el = $el.parent();\n    }\n\n    // If error already exists and its message is different to new\n    // error's message then the previous one is replaced,\n    // otherwise new error is shown with a slide down animation\n    if ($el.next('.help-block').length !== 0) {\n      $el.next('.help-block')[0].innerText = error;\n    } else if ($el.children('.help-block').length !== 0) {\n      $el.children('.help-block')[0].innerText = error;\n    } else {\n      var $error = $('<div>')\n                 .addClass('help-block')\n                 .html(error)\n                 .hide();\n\n      // Placing error\n      if ($el.prop('tagName') === 'div' &&\n !$el.hasClass('input-group')) {\n        $el.append($error);\n      } else {\n        $el.after($error);\n      }\n\n      // Showing animation on error message\n      $error.slideDown();\n    }\n  }\n});\n```"]