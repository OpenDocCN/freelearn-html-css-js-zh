- en: Implementing a Full Fledged RESTful Service
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现一个完整的RESTful服务
- en: So far, we have created a second version of our RESTful service, and we had
    the two versions exposed by different URLs, ensuring backward compatibility. We
    implemented unit tests for its database layer and discussed how to use HTTP status
    codes appropriately. In this chapter, we will extend that implementation—by providing
    handling of non-document—binary data to the second version of the service and
    linking it accordingly to the documents it relates to.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了我们的RESTful服务的第二个版本，并且通过不同的URL公开了这两个版本，以确保向后兼容。我们为其数据库层实现了单元测试，并讨论了如何适当地使用HTTP状态码。在本章中，我们将扩展该实现——通过向服务的第二个版本提供非文档—二进制数据的处理，并将其相应地链接到相关的文档。
- en: We will look at a convenient way of presenting large result sets to consumers.
    For that purpose, we will introduce pagination as well as further filtering capabilities
    to our API.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨一种方便地向消费者展示大型结果集的方法。为此，我们将向我们的API引入分页以及进一步的过滤功能。
- en: There are cases when caching data responses should be considered as an option.
    We will look at its benefits and drawbacks and also decide to enable caching when
    necessary.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候应该考虑将缓存数据响应作为一个选项。我们将探讨其优点和缺点，并在必要时决定启用缓存。
- en: Finally, we will dive into the discovery and exploration of REST services.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将深入探讨REST服务的发现和探索。
- en: 'To sum up, here''s what should be further implemented to turn the catalog data
    service into a full-fledged RESTful service:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，以下是将目录数据服务转变为完整RESTful服务需要进一步实现的内容：
- en: Working with arbitrary data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理任意数据
- en: Working with Linked data in the real world
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在现实世界中处理链接数据
- en: Paging and filtering
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分页和过滤
- en: Caching
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存
- en: Discovery and exploration
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现和探索
- en: Working with arbitrary data
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理任意数据
- en: MongoDB utilizes BSON (Binary JSON) as the primary data format. It is a binary
    format that stores key/value pairs in a single entity called **document.** For
    example, a sample JSON, `{"hello":"world"}`, becomes `\x16\x00\x00\x00\x02hello\x00\x06\x00\x00\x00world\x00\x00`
    when encoded in BSON.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB使用BSON（二进制JSON）作为主要的数据格式。它是一种二进制格式，在单个称为**document**的实体中存储键/值对。例如，一个示例JSON，`{"hello":"world"}`，在BSON编码时变为`\x16\x00\x00\x00\x02hello\x00\x06\x00\x00\x00world\x00\x00`。
- en: BSON stores data rather than literals. For instance, if an image is to be part
    of the document, it will not have to be converted to a base64-encoded string;
    instead, it will be directly stored as binary data, unlike plain JSON, which will
    usually represent such data as base64-encoded bytes, but that is obviously not
    the most efficient way.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: BSON存储数据而不是字面量。例如，如果图像是文档的一部分，它不需要被转换为base64编码的字符串；相反，它将直接以二进制数据的形式存储，与普通的JSON不同，它通常将此类数据表示为base64编码的字节，但这显然不是最有效的方式。
- en: Mongoose schemas enable storing binary content in the BSON format via the schema
    type—**buffer**. It stores binary content (image, ZIP archive, and so on) up to
    16 MB. The reason behind the relatively small storage capacity is to prevent excessive
    usage of memory and bandwidth during transmission.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Mongoose模式允许通过模式类型—**buffer**—以BSON格式存储二进制内容。它可以存储高达16 MB的二进制内容（图像、ZIP存档等）。相对较小的存储容量背后的原因是防止在传输过程中过度使用内存和带宽。
- en: The **GridFS** specification addresses this limitation of BSON and enables you
    to work with data larger than 16 MB. GridFS divides data into chunks stored as
    separate document entries. Each chunk, by default, has a size of up to 255 KB.
    When data is requested from the data store, the GridFS driver retrieves all the
    required chunks and returns them in an assembled order, as if they had never been
    divided. Not only does this mechanism allow storage of data larger than 16 MB,
    it also enables consumers to retrieve data in portions so that it doesn't have
    to be loaded completely into the memory. Thus, the specification implicitly enables
    streaming support.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**GridFS**规范解决了BSON的限制，并允许您处理大于16 MB的数据。GridFS将数据分成存储为单独文档条目的块。默认情况下，每个块的大小高达255
    KB。当从数据存储请求数据时，GridFS驱动程序检索所有所需的块，并按组装顺序返回它们，就像它们从未被分割过一样。这种机制不仅允许存储大于16 MB的数据，还允许消费者以部分形式检索数据，这样就不必将其完全加载到内存中。因此，该规范隐式地启用了流式传输支持。'
- en: 'GridFS actually offers more—it supports storing metadata for the given binary
    data, for example, its format, a filename, size, and so on. The metadata is stored
    in a separate file and is available for more complex queries. There is a very
    usable Node.js module called `gridfs-stream`. It enables easy streaming of data
    in and out of MongoDB, as on all other modules it is installed as an `npm` package.
    So, let''s install it globally and see how it is used; we will also use the `-s`
    option to ensure that the dependencies in the project''s `package.json` are updated:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: GridFS 实际上提供了更多功能——它支持为给定的二进制数据存储元数据，例如其格式、文件名、大小等。元数据存储在单独的文件中，可用于更复杂的查询。有一个非常实用的
    Node.js 模块叫做 `gridfs-stream`。它使得在 MongoDB 中轻松进行数据流进出成为可能，就像在其他模块中一样，它作为一个 `npm`
    包安装。因此，让我们全局安装它并看看它是如何使用的；我们还将使用 `-s` 选项以确保项目 `package.json` 中的依赖项得到更新：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To create a `Grid` instance, you are required to have a connection opened to
    the database:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 `Grid` 实例，你需要确保数据库连接已经打开：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Reading and writing into the stream is done through the `createReadStream()`
    and `createWriteStream()` functions. Each piece of data streamed into the database
    must have an `ObjectId` attribute set. The `ObjectId` identifies binary data entry
    uniquely, just as it would have identified any other document in MongoDB; using
    this `ObjectId`, we can find or delete it from the MongoDB collection by this
    identifier.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `createReadStream()` 和 `createWriteStream()` 函数进行流式读写操作。每个流进数据库的数据都必须设置一个
    `ObjectId` 属性。`ObjectId` 唯一地标识二进制数据条目，就像它标识 MongoDB 中的任何其他文档一样；使用这个 `ObjectId`，我们可以通过这个标识符在
    MongoDB 集合中找到或删除它。
- en: 'Let''s extend the catalog service with functions for fetching, adding, and
    deleting an image assigned to an item. For simplicity, the service will support
    a single image per item, so there will be a single function responsible for adding
    an image. It will overwrite an existing image each time it is invoked, so an appropriate
    name for it is `saveImage`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过添加获取、添加和删除分配给项目的图像的功能来扩展目录服务。为了简单起见，该服务将支持每个项目一个图像，因此将有一个单独的函数负责添加图像。每次调用它时，它都会覆盖现有的图像，因此合适的名称是
    `saveImage`：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, all we need to do to flush the data in MongoDB is to create
    a GridFS write stream instance. It requires some options that provide the `ObjectId`
    of the MongoDB entry and some additional metadata, such as a title as well as
    the writing mode. Then, we simply call the pipe function of the request. Piping
    will result in flushing the data from the request to the write stream, and, in
    this way, it will be safely stored in MongoDB. Once stored, the `close`event associated
    with the `writeStream` will occur, and this is when our function reads back whatever
    it has stored in the database and returns that image in the HTTP response.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们只需要创建一个 GridFS 写入流实例来清除 MongoDB 中的数据。它需要一些选项，提供 MongoDB 条目的 `ObjectId`
    以及一些额外的元数据，例如标题以及写入模式。然后，我们简单地调用请求的 pipe 函数。管道操作将导致将请求中的数据流到写入流中，并以这种方式安全地存储在
    MongoDB 中。一旦存储，与 `writeStream` 关联的 `close` 事件就会发生，这时我们的函数会读取数据库中存储的任何内容，并在 HTTP
    响应中返回该图像。
- en: 'Retrieving an image is done the other way around—a `readStream` is created
    with options, and the value of the `_id` parameter should be the `ObjectId` of
    the arbitrary data, optional file name, and read mode:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 检索图像是相反的过程——创建一个带有选项的 `readStream`，`_id` 参数的值应该是任意数据的 `ObjectId`，可选的文件名和读取模式：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Before piping the read stream to the response, the appropriate `Content-Type`
    header has to be set so that the arbitrary data can be presented to the client 
    with an appropriate image media type, `image/jpeg`, in our case.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在将读取流管道到响应之前，必须设置适当的 `Content-Type` 标头，以便将任意数据以适当的图像媒体类型（在我们的例子中是 `image/jpeg`）呈现给客户端。
- en: 'Finally, we export from our module a function for fetching the image back from
    MongoDB. We will use that function to bind it to the express route that reads
    the image from the database:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们从我们的模块中导出一个函数，用于从 MongoDB 中检索图像。我们将使用该函数将其绑定到从数据库读取图像的 express 路由：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Deleting arbitrary data from MongoDB is also straightforward. You have to delete
    the entry from two internal MongoDB collections, the `fs.files`, where all the
    files are kept, and from the `fs.files.chunks`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从 MongoDB 删除任意数据也是直截了当的。你必须从两个内部 MongoDB 集合中删除条目，即 `fs.files`，其中保存了所有文件，以及 `fs.files.chunks`：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s bind the new functionality to the appropriate item route and test it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将新的功能绑定到适当的物品路由并测试它：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Since, at the time of writing, Version 2 is the latest version of our API,
    any new functionality exposed by it should be available at both locations: `/catalog`
    and `/v2/catalog`.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于撰写本文时，版本2是我们API的最新版本，因此它暴露的任何新功能都应在这两个位置可用：`/catalog`和`/v2/catalog`。
- en: 'Let''s start Postman and post an image to an existing item, assuming that we
    have an item with ID 14 `/catalog/v2/item/14/image`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动Postman并向现有项目发送一个图像，假设我们有一个ID为14的项目`/catalog/v2/item/14/image`：
- en: '![](img/2cc9c935-9db2-4a52-949b-f7c35b277648.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2cc9c935-9db2-4a52-949b-f7c35b277648.png)'
- en: Post request assigning an image to an item using Postman. This is a screenshot
    for Postman. The individual settings are not important here. The purpose of the
    image is just to show how the window looks.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Postman向项目分配图像的POST请求。这是一个Postman的截图。这里的个别设置并不重要。图像的目的只是展示窗口的外观。
- en: After the request is processed, the binary data is stored in the grid datastore
    and the image is returned in the response.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请求处理完毕后，二进制数据存储在网格数据存储中，图像在响应中返回。
- en: Linking
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接
- en: In the Linked data section of the previous chapter, we defined that if an item
    in the catalog has an image assigned to it, this will be indicated with an HTTP
    header named Image-URL.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章的链接数据部分，我们定义了如果目录中的项目分配了图像，这将通过名为Image-URL的HTTP头指示。
- en: 'Let''s modify the `findItemById` function in the V2 of the catalog. We will
    use the GridFS''s existing function to check whether there is an image bound to
    the selected item; in case there is an image assigned to the item, its URL will
    be available to the response with the Image-Url header:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改目录的V2版本的`findItemById`函数。我们将使用GridFS现有的函数来检查是否有图像绑定到所选项目；如果有项目分配了图像，其URL将通过Image-Url头在响应中可用：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'So far, we linked an item to its image; however, that leaves our data partially
    linked, as there is a link from an item to its image but not the other way around.
    Let''s change that and supply a header Item-Url to the image response by modifying
    the `readImage` function:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经将一个项目链接到其图像；然而，这使我们的数据部分链接，因为有一个从项目到其图像的链接，但没有相反的链接。让我们改变这一点，并通过修改`readImage`函数向图像响应提供`Item-Url`头：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now requesting the item at `http://localhost:3000/catalog/v2/item/3/` will
    return the item encoded in the JSON format:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在请求`http://localhost:3000/catalog/v2/item/3/`将返回以JSON格式编码的项目：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Looking into the response headers, we find the `Image-Url` header its value, `http://localhost:3000/catalog/v2/item/3/image`
    provides the URL of the image linked to the item.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 查看响应头，我们发现`Image-Url`头部的值，`http://localhost:3000/catalog/v2/item/3/image`提供了与项目链接的图像的URL。
- en: 'Requesting that image results in the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请求图像结果如下：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This time, the response provides the payload of the image linked to the item
    and a special header **Item-Url**. Its value—`http://localhost:3000/catalog/v2/item/3`—is
    the address where the item resource is available. Now if the item image appears,
    for instance, in image search results, the URL of the item linked with the image
    will also be part of the result. In this way, we linked the two data semantically
    without modifying or compromising their payload.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，响应提供了与项目链接的图像的有效负载和一个特殊头**Item-Url**。其值——`http://localhost:3000/catalog/v2/item/3`——是项目资源可用的地址。现在如果项目图像出现在图像搜索结果中，与图像链接的项目URL也将是结果的一部分。通过这种方式，我们在不修改或损害其有效负载的情况下，在语义上链接了这两个数据。
- en: Implementing paging and filtering
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现分页和过滤
- en: Once deployed to the web, each service becomes available to an enormous number
    of consumers. They will not only use it to get data but also to insert new data.
    At some point of time, this will inevitably lead to a large amount of data being
    available in the database. To keep the service user-friendly and maintain a reasonable
    response time, we need to take care of providing big data in reasonable portions,
    assuring that it does not need to return a few hundred thousand items when the
    `/catalog` URI is requested.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦部署到网络，每个服务都可供大量消费者使用。他们不仅会使用它来获取数据，还会插入新数据。在某个时刻，这不可避免地会导致数据库中存在大量数据。为了保持服务用户友好并保持合理的响应时间，我们需要注意提供合理部分的大数据，确保在请求`/catalog`
    URI时不需要返回几十万个项目。
- en: Web data consumers are used to having various pagination and filtering capabilities.
    Earlier in this chapter, we implemented the `findIfindItemsByAttribute()` function,
    which enabled filtering by any of the attributes of an item Now, it's time to
    introduce pagination capabilities to enable navigation within the `resultset`
    with the help of a URI parameter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Web数据消费者习惯于拥有各种分页和过滤功能。在本章的早期，我们实现了`findIfindItemsByAttribute()`函数，它允许通过项目的任何属性进行过滤。现在，是时候引入分页功能，以便通过URI参数在`resultset`中进行导航了：
- en: 'The `mongoose.js` models can make use of different plugin modules to provide
    additional functionality on top of them. Such a plugin module is `mongoose-paginate`.
    The Express framework also provides a piece of pagination middleware named `express-paginate`.
    It provides out-of-the-box linking and navigation with Mongoose''s result pages:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`mongoose.js`模型可以利用不同的插件模块在其之上提供额外的功能。这样一个插件模块是`mongoose-paginate`。Express框架还提供了一个名为`express-paginate`的分页中间件。它提供了与Mongoose结果页的即插即用链接和导航：'
- en: 'Before starting to develop the pagination mechanism, we should install these
    two useful modules:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始开发分页机制之前，我们应该安装这两个有用的模块：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The next step will to be to create instances of the  `express-paginate` middleware
    in our application:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是在我们的应用程序中创建`express-paginate`中间件的实例：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Initialize the pagination middleware in the application by calling its `middleware()`
    function. Its parameters specify a default limit and a maximum limit of results
    per page:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用其`middleware()`函数在应用程序中初始化分页中间件。其参数指定每页的默认限制和最大结果限制：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, provide the `mongoose-pagination` instance as a plugin to the `CatalogItem`
    schema before creating a model. Here''s how the `item.js` module will export that
    along with the model:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在创建模型之前，将`mongoose-pagination`实例作为插件提供给`CatalogItem`模式。以下是`item.js`模块如何导出该插件以及模型的方式：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, call the `paginate()` function of the model to fetch the requested
    entries in a paginated manner:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，调用模型的`paginate()`函数以分页方式获取请求的条目：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The first parameter is the filter that Mongoose should use for its query. The
    second parameter is an object specifying which page is requested and the entries
    per page. The third parameter is a callback-handler function, providing the result
    and any available error information via its parameters:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是Mongoose应用于其查询的过滤器。第二个参数是一个对象，指定请求的页码和每页的条目数。第三个参数是一个回调处理函数，通过其参数提供结果和任何可用的错误信息：
- en: '`error`: This specifies whether the query was executed successfully'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error`：这指定了查询是否成功执行'
- en: '`result`: This is the retrieved data from the database'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`result`：这是从数据库检索到的数据'
- en: The `express-paginate` middleware enables seamless integration of the `mongoose-paginate`
    module in the web environment by enriching the `request` and `response` objects
    of an Express handler function.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`express-paginate`中间件通过丰富Express处理函数的`request`和`response`对象，使得在Web环境中无缝集成`mongoose-paginate`模块。'
- en: 'The `request` objects get two new attributes: `query.limit`, which tells the
    middleware the number of entries on the page, and `query.page`, which specifies
    the requested page. Note that the middleware will ignore values of `query.limit`
    that are larger than the `maxLimit` value specified at the middleware''s initialization.
    This prevents the consumer from overriding the maximum limit and gives you total
    control over your application.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`request`对象获得两个新属性：`query.limit`，它告诉中间件页面上的条目数，以及`query.page`，它指定请求的页码。请注意，中间件将忽略初始化中间件时指定的`maxLimit`值更大的`query.limit`值。这防止了消费者覆盖最大限制，并让你完全控制你的应用程序。'
- en: 'Here''s the implementation of the `paginate` function in the second version
    of the catalog module:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这是目录模块第二版中`paginate`函数的实现：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following is the response from querying a dataset containing 11 items with
    a limit of five items per page:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从包含11个项目的数据集中查询，每页限制五个项目的响应：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `docs` attribute contains all the items that are part of the results. Its
    size is the same as the selected limit value. The `pages` attribute provides the
    total number of pages; in the example here, its value is 3, as 11 items are accommodated
    in three pages, each containing five items. The `Total` attribute gives us the
    total number of items.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`docs`属性包含所有作为结果的一部分的项目。其大小与所选的限制值相同。`pages`属性提供总页数；在此示例中，其值为3，因为11个项目分布在三个页面上，每个页面包含五个项目。`Total`属性给出了项目总数。'
- en: 'The final step to enable pagination is to modify the `/v2/` route to start
    making use of the newly created function:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 启用分页的最后一步是修改 `/v2/` 路由以开始使用新创建的功能：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We will use the HTTP `302 Found` status for the default route, `/catalog`.
    In this way, all incoming requests will be redirected to `/v2/`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为默认路由 `/catalog` 使用 HTTP `302 Found` 状态。这样，所有进入的请求都将被重定向到 `/v2/`：
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Using an appropriate status code for redirection here is vital to the life cycle
    of any RESTful web service. Returning `302 Found`, followed by a redirection,
    ensures that the consumer of the API will always have its latest version available
    at that location. Furthermore, it is also a good practice from the development
    point of view to use redirection instead of code duplication here.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里使用适当的重定向状态码对于任何 RESTful 网络服务的生命周期至关重要。返回 `302 Found`，然后进行重定向，确保 API 的消费者始终可以在该位置获得最新的版本。此外，从开发角度来看，使用重定向而不是代码重复也是一种良好的实践。
- en: When you are between two versions, you should always consider using the HTTP
    `301 Moved Permanently` status to show where the previous version has been moved
    and the HTTP `302 Found` status to show the actual URI of the current version.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在两个版本之间时，你应该始终考虑使用 HTTP `301 Moved Permanently` 状态来显示前一个版本已移动的位置，以及使用 HTTP
    `302 Found` 状态来显示当前版本的实际 URI。
- en: Now, getting back to pagination, as the requested page and the limit number
    are provided as `GET` parameters and we don't want to mix that up with the filtering
    capabilities, there is an explicit check for them. Pagination will be used only
    when either the page or the limit `GET` parameters, are available in the request.
    Otherwise, searching will be carried out.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到分页，由于请求的页码和限制数字作为 `GET` 参数提供，我们不希望将其与过滤功能混淆，因此有一个显式的检查。只有在请求中提供了页码或限制 `GET`
    参数时，才会使用分页。否则，将执行搜索。
- en: Initially, we set the maximum limit of 100 results and a default limit of 10,
    so, before trying the new pagination functionality, ensure that you insert more
    items than the default limit into the database. This will make the test results
    more obvious.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，我们设置了最大限制为 100 个结果和默认限制为 10，因此，在尝试新的分页功能之前，请确保将比默认限制更多的项目插入到数据库中。这将使测试结果更加明显。
- en: 'Now, let''s give it a try. Requesting `/catalog?limit=3` will result in returning
    a list containing only two items, as shown:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们试一试。请求 `/catalog?limit=3` 将返回一个只包含两个项目的列表，如下所示：
- en: '![](img/3a92193f-e58d-4bfa-9f7f-f8378b41de4e.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3a92193f-e58d-4bfa-9f7f-f8378b41de4e.png)'
- en: Pagination enabled results. This is a screenshot for Postman. The individual
    settings are not important here. The purpose of the image is just to show how
    the window looks.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 分页启用结果。这是 Postman 的截图。这里的个别设置并不重要。图片的目的只是展示窗口的外观。
- en: As you can see from the example, the total number of pages is four. The total
    number of items is stored in the database 11\. Since we didn't specify a page
    parameter in the request, the pagination implicitly returned the first page. To
    navigate to the next page, simply add `&page=2` to the URI.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如示例所示，总页数是四页。总项目数存储在数据库中为 11。由于我们没有在请求中指定页码参数，分页隐式地返回了第一页。要导航到下一页，只需将 `&page=2`
    添加到 URI 中。
- en: Also, try changing the `limit` attribute, requesting `/catalog/v2?limit=4`.
    This will return the first four items, and the response will show that the total
    number of pages is three.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以尝试更改 `limit` 属性，请求 `/catalog/v2?limit=4`。这将返回前四个项目，并且响应将显示总页数为三页。
- en: Caching
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存
- en: When we discussed the REST principles defined by Roy Fielding, we mentioned
    that caching was a rather sensitive topic. In the end, our consumers will expect
    up-to-date results when executing a query. However, from a statistical point of
    view, data exposed in the web is more likely to be read rather than updated or
    deleted.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论 Roy Fielding 定义的 REST 原则时，我们提到缓存是一个相当敏感的话题。最终，我们的消费者在执行查询时将期望获得最新的结果。然而，从统计学的角度来看，在网络上公开的数据更有可能被读取而不是更新或删除。
- en: So, it is reasonable that some resources exposed by a public URL become a subject
    of millions of requests, considering taking off part of the load from the server
    to a cache. The HTTP protocol allows us to cache some responses for a given period
    of time. For instance, when multiple requests are received in a short period of
    time, querying for all items in the catalog of a given group, such as `/catalog/v2`,
    our service can utilize special HTTP headers that would force the HTTP server
    to cache the response for a defined time period. This would prevent redundant
    requests to the underlying database server.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，考虑到从服务器卸载部分负载到缓存，一些由公共 URL 暴露的资源成为数百万请求的主题是合理的。HTTP 协议允许我们在给定时间段内缓存一些响应。例如，当在短时间内接收到多个请求时，查询给定组（如
    `/catalog/v2`）的目录中的所有项目，我们的服务可以利用特殊的 HTTP 头，这将强制 HTTP 服务器在定义的时间段内缓存响应。这将防止对底层数据库服务器的重复请求。
- en: Caching at the HTTP server level is achieved via special response headers. The
    HTTP server uses a `Cache-Control` header to specify how long a given response
    should be cached for. The period before the cache needs invalidation is set via
    its `max-age` attribute, and its value is provided in seconds. Of course, there
    is a nice Node.js module that provides a middleware function for caching, called
    `express-cache-control`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTTP 服务器级别上通过特殊的响应头来实现缓存。HTTP 服务器使用 `Cache-Control` 头来指定给定响应应该被缓存多长时间。缓存需要无效化之前的时间通过其
    `max-age` 属性设置，其值以秒为单位提供。当然，有一个很好的 Node.js 模块提供了用于缓存的中间件函数，称为 `express-cache-control`。
- en: Supplying the Cache-Control header in Express applications
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Express 应用程序中提供 `Cache-Control` 头
- en: 'Let''s install it with the NPM package manager; once again, we will install
    it globally and make use of the `-s` option, which will update the `package.json`
    file with the new `express-cache-control` dependency automatically:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 NPM 软件包管理器来安装它；再次，我们将全局安装它并使用 `-s` 选项，这将自动更新 `package.json` 文件以包含新的 `express-cache-control`
    依赖项：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Enabling caching with the `express-cache-control` middleware requires three
    straightforward steps:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `express-cache-control` 中间件启用缓存需要三个简单的步骤：
- en: 'Get the module:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取模块：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create an instance of the `CacheControl` middleware:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `CacheControl` 中间件的实例：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To bind the middleware instance to the routes you want to enable caching for:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将中间件实例绑定到你想启用缓存的路线：
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Usually, common URIs that provide many result entries should be the subject
    of caching, rather than URIs providing data for a concrete entry. In our application,
    only the `/catalog` URI will make use of caching. The `max-age` attribute must
    be selected according to the load of your application to minimize inaccurate responses.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，提供许多结果条目的常见 URI 应该是缓存的主题，而不是提供具体条目数据的 URI。在我们的应用程序中，只有 `/catalog` URI 会使用缓存。`max-age`
    属性必须根据你应用程序的负载来选择，以最小化不准确响应。
- en: 'Let''s test our changes by requesting `/catalog/v2` in Postman:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过在 Postman 中请求 `/catalog/v2` 来测试我们的更改：
- en: '![](img/9a4c8d45-2367-4283-9aa8-47a2644b1af9.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a4c8d45-2367-4283-9aa8-47a2644b1af9.png)'
- en: Cache-control header indicating that caching is enabled. This is a screenshot
    for Postman. The individual settings are not important here. The purpose of the
    image is just to show how the window looks.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存控制头指示已启用缓存。这是一张 Postman 的截图。这里的个别设置并不重要。图片的目的只是展示窗口的外观。
- en: As expected, the `express-cache-control` middleware has done its job—the `Cache-Control`
    header is now included in the response. The `must-revalidate` option ensures that
    the cache content is invalidated after the `max-age` interval expires. Now, if
    you make another request for a specific item, you will see that the response does
    not make use of the `express-cache-control` middleware, which is because it needs
    to be explicitly provided in each individual route. It will not be used in URIs
    deriving from one another.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期，`express-cache-control` 中间件已经完成了它的任务——`Cache-Control` 头现在包含在响应中。`must-revalidate`
    选项确保在 `max-age` 间隔过期后缓存内容被无效化。现在，如果你为特定项再次发起请求，你会看到响应没有使用 `express-cache-control`
    中间件，这是因为它需要在每个单独的路由中显式提供。它不会用于相互派生的 URI。
- en: 'Responses from `GET` requests against any route `/v1/` will not contain the
    `Cache-Control` header, as it is supported only in Version 2 of our API, and the
    `Cache-Control` middleware is used only in the main catalog routes: `/catalog/v2/`
    or `/catalog`.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对任何 `/v1/` 路由的 `GET` 请求的响应将不包含 `Cache-Control` 头，因为它是我们 API 的第 2 版支持的，而 `Cache-Control`
    中间件仅在主目录路由 `/catalog/v2/` 或 `/catalog` 中使用。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations! In this chapter, you succeeded in transforming a sample REST-enabled
    endpoint into a full-fledged RESTful web service that supports filtering for usability
    and paging for easy navigation. The service delivers both arbitrary and JSON data,
    and it is ready for high-load scenarios, as it enables caching in its critical
    parts. One thing that should draw your attention is the appropriate usage of the
    HTTP status codes when it comes to redirection between new and obsolete versions
    of any public API.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！在本章中，你成功地将一个支持REST的端点转换成了一个完整的RESTful网络服务，该服务支持过滤以提高可用性，并支持分页以方便导航。该服务提供任意和JSON数据，并且已准备好应对高负载场景，因为它在其关键部分实现了缓存。有一点应该引起你的注意，那就是在处理任何公共API的新旧版本之间的重定向时，适当使用HTTP状态码。
- en: Implementing appropriate HTTP status is really important for the REST application,
    so we made use of rather exotic statuses, such as `301 Moved Permanently` and
    `302 Found`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在REST应用程序中实现适当的HTTP状态非常重要，因此我们使用了相当罕见的状况，例如`301 永久移动`和`302 找到`。
