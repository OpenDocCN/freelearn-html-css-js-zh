["```js\nclass Person {\n    name:string;\n    constructor(name) {\n        this.name = name;\n    }\n    read() {\n        console.log(this.name+ \"likes to read.\");\n    }\n}\nconst obj = new Person(\"Mike\");\nobj.read();\n```", "```js\n    tsc scoreboard.ts\n    ```", "```js\n    class Team {\n    }\n    ```", "```js\n    class Team {\n        generateLineup() {\n            return \"Lineup will go here…\";\n        }\n    }\n    ```", "```js\n    const astros = new Team();\n    ```", "```js\n    console.log(astros.generateLineup());\n    ```", "```js\n    tsc scoreboard.ts\n    node scoreboard.js\n    ```", "```js\nconstructor(name){\n    this.name = name;\n}\n```", "```js\n    class Team {\n        name: string;\n        constructor(name) {\n          this.name = name;\n        }\n        generateLineup() {\n          return \"Lineup will go here …\";\n        }\n    }\n    ```", "```js\n    const astros = new Team();\n    console.log(astros.generatLineup());\n    const bluJays = new Team();\n    console.log(blueJays.generateLineup());\n    ```", "```js\n    const astros = new Team(\"Astros\");\n    console.log(astros.generateLineup());\n    const blueJays = new Team(\"Blue Jays\");\n    console.log(blueJays.generateLineup());\n    ```", "```js\n    const astros = new Team(\"Astros\");\n    //console.log(astros.generateLineup());\n    console.log(astros.name);\n    const blueJays = new Team(\"Blue Jays\");\n    //console.log(blueJays.generateLineup());\n    console.log(blueJays.name);\n    ```", "```js\n    tsc scoreboard.ts\n    node scoreboard.js\n    ```", "```js\n    Astros\n    Blue Jays\n    ```", "```js\n    players: string[]; \n    ```", "```js\n    constructor(name, players){\n        this.name = name;\n        this.players = players;\n    }\n    ```", "```js\n    generateLineup(){\n        return this.players.join(\", \");\n    }\n    ```", "```js\n    const astrosPlayers = [\"Altuve\", \"Bregman\", \"Correa\", \"Springer\"];\n    const astros = new Team(\"Astros\", astrosPlayers);\n    console.log(astros.generateLineup());\n    console.log(astros.name);\n    const blueJaysPlayers = [\"Vlad\", \"Smoak\", \"Tellez\", \"Sogard\"];\n    const blueJays = new Team(\"Blue Jays\", blueJaysPlayers);\n    console.log(blueJays.generateLineup());\n    console.log(blueJays.name);\n    ```", "```js\n    tsc scoreboard.ts\n    node scoreboard.js\n    ```", "```js\n    Altuve, Bregman, Correa, Springer\n    Astros\n    Vlad, Smoak, Tellez, Sogard\n    Blue Jays\n    ```", "```js\n    interface ITeam{\n        name: string;\n        players: string[];\n    }\n    ```", "```js\n    constructor(args: ITeam){\n        this.name = args.name;\n        this.players = args.players;\n    }\n    ```", "```js\n    const astros = new Team();\n    ```", "```js\n    const astros = new Team({\n        name\n    })\n    ```", "```js\n    const astrosPlayers = [\"Altuve\", \"Bregman\", \"Correa\", \"Springer\"];\n    const astros = new Team({\n        name: \"Astros\",\n        players: astrosPlayers\n    });\n    console.log(astros.generateLineup());\n    console.log(astros.name);\n    const blueJaysPlayers = [\"Vlad\", \"Smoak\", \"Tellez\", \"Sogard\"];\n    const blueJays = new Team({\n        name: \"Blue Jays\",\n        players: blueJaysPlayers\n    });\n    console.log(blueJays.generateLineup());\n    console.log(blueJays.name);\n    ```", "```js\n    tsc scoreboard.ts\n    node scoreboard.js\n    ```", "```js\n    Altuve, Bregman, Correa, Springer\n    Astros\n    Vlad, Smoak, Tellez, Sogard\n    Blue Jays\n    ```", "```js\n    players: string[];\n    constructor(players){\n        this.players = players;\n    }\n    ```", "```js\n    generateLineup(): string{\n        const playersWithOrderNumber = \n          this.players.map((player, idx) => {\n            return `<div>${idx + 1} - ${player}</div>`;\n        });\n        return playersWithOrderNumber.join(\"\");\n    }\n    ```", "```js\n    tsc scoreboard.ts\n    node scoreboard.js\n    ```", "```js\n    class Scoreboard{\n        homeTeam: Team;\n        awayTeam: Team;\n        date: string;\n    }\n    ```", "```js\n    interface IScoreboard{\n        homeTeam: Team;\n        awayTeam: Team;\n        date: string;\n    }\n    ```", "```js\n    tsc scoreboard.ts\n    ```", "```js\n    constructor(args: IScoreboard){\n        this.homeTeam = args.homeTeam;\n        this.awayTeam = args.awayTeam;\n        this.date = args.date;\n    }\n    ```", "```js\n    scoreboardHtml(): string{\n        return `\n        <h1>${this.date}</h1>\n        <h2>${this.homeTeam.name}</h2>\n        <div>${this.homeTeam.generateLineup()}</div>\n        <h2>${this.awayTeam.name}</h2>\n        <div>${this.awayTeam.generateLineup()}</div>\n        `;\n    }\n    ```", "```js\n    name: string;\n    players: string[];\n    constructor(name, players){\n        this.name = name;\n        this.players = players;\n    }\n    ```", "```js\n    const astrosPlayers = [\"Altuve\", \"Bregman\", \"Correa\", \"Springer\"];\n    const astros = new Team(\"Astros\", astrosPlayers);\n    //console.log(astros.generateLineup());\n    const blueJaysPlayers = [\"Vlad\", \"Smoak\", \"Tellez\", \"Sogard\"];\n    const blueJays = new Team(\"Blue Jays\", blueJaysPlayers);\n    //console.log(blueJays.generateLineup());\n    const todaysGame = new Scoreboard({\n        date: \"5/24/19\",\n        homeTeam: astros,\n        awayTeam: blueJays\n    });\n    console.log(todaysGame.scoreboardHtml());\n    ```", "```js\n    tsc scoreboard.ts\n    node scoreboard.js\n    ```", "```js\n    Validating user...User is authenticated: true\n    Validating user...User is authenticated: false\n    ```"]