["```js\n{\n  \"debugMode\" : 0,\n  \"showFPS\" : false,\n  \"frameRate\" : 60,\n  \"id\" : \"gameCanvas\",\n  \"renderMode\" : 0,\n  \"engineDir\":\"cocos2d-html5/\",\n\n  \"modules\" : [\"cocos2d\"],\n\n  \"jsList\" : [\n  \"src/loadassets.js\",\n  \"src/gamescript.js\"\n  ]\n}\n```", "```js\ncc.game.onStart = function(){\n  var screenSize = cc.view.getFrameSize();\n  cc.view.setDesignResolutionSize(300, 300, cc.ResolutionPolicy.SHOW_ALL);\n  cc.LoaderScene.preload(gameResources, function () {\n    cc.director.runScene(new gameScene());\n  }, this);\n};\ncc.game.run();\n```", "```js\nvar gameResources = [\n\"assets/globes.png\",\n\"assets/globes.plist\",\n];\n```", "```js\n<key>purple</key>\n<dict>\n  <key>frame</key>\n  <string>{{2,2},{46,46}}</string>\n  <key>offset</key>\n  <string>{0,0}</string>\n  <key>rotated</key>\n  <false/>\n  <key>sourceColorRect</key>\n  <string>{{2,2},{46,46}}</string>\n  <key>sourceSize</key>\n  <string>{50,50}</string>\n</dict>\n```", "```js\nvar fieldSize = 6;\nvar tileTypes = [\"red\", \"green\", \"blue\", \"grey\", \"yellow\"];\nvar tileSize = 50;\nvar tileArray = [];\nvar globezLayer;\n```", "```js\nvar gameScene = cc.Scene.extend({\n  onEnter:function () {\n    this._super();\n    gameLayer = new game();\n    gameLayer.init();\n    this.addChild(gameLayer);\n  }\n});\n```", "```js\nvar game = cc.Layer.extend({\n  init:function () {\n    this._super();\n    cc.spriteFrameCache.addSpriteFrames(\"assets/globes.plist\", \"assets/globes.png\");\n    var backgroundLayer = cc.LayerGradient.create(cc.color(0x00,0x22,0x22,255), cc.color(0x22,0x00,0x44,255));\n    this.addChild(backgroundLayer);\n    globezLayer = cc.Layer.create();\n    // new cc.layer() can also be used\n    this.addChild(globezLayer)\n    this.createLevel();\n  },\n  createLevel: function(){\n    // do something\n  }\n});\n```", "```js\ncreateLevel: function(){\n  for(var i = 0; i < fieldSize; i ++){\n    tileArray[i] = [];\n    for(var j = 0;j < fieldSize; j ++){\n      this.addTile(i, j);\n    }\n  }\n},\naddTile:function(row,col){\n  // do something\n}\n```", "```js\naddTile:function(row,col){\n  var randomTile = Math.floor(Math.random()*tileTypes.length);\n  var spriteFrame = cc.spriteFrameCache.getSpriteFrame(tileTypes[randomTile]);\n  var sprite = cc.Sprite.createWithSpriteFrame(spriteFrame);\n  // new cc.Sprite(spriteFrame) can also be used\n  sprite.val = randomTile;\n  sprite.picked = false;\n  globezLayer.addChild(sprite,0);\n  sprite.setPosition(col*tileSize+tileSize/2,row*tileSize+tileSize/2);\n  tileArray[row][col] = sprite;\n}\n```", "```js\nvar randomTile = Math.floor(Math.random()*tileTypes.length);\n```", "```js\nvar spriteFrame = cc.spriteFrameCache.getSpriteFrame(tileTypes[randomTile]);\n```", "```js\nvar sprite = cc.Sprite.createWithSpriteFrame(spriteFrame);\n```", "```js\nsprite.val = randomTile;\nsprite.picked = false;\n```", "```js\nglobezLayer.addChild(sprite,0);\n```", "```js\ninit:function () {\n  this._super();\n  cc.spriteFrameCache.addSpriteFrames(\"assets/globes.plist\", \"assets/globes.png\");\n  var backgroundLayer = cc.LayerGradient.create(cc.color(0x00,0x22,0x22,255), cc.color(0x22,0x00,0x44,255));\n  this.addChild(backgroundLayer);\n  globezLayer = cc.Layer.create();\n  this.addChild(globezLayer)\n  this.createLevel();\n  cc.eventManager.addListener(touchListener, this);\n}\n```", "```js\nvar fieldSize = 6;\nvar tileTypes = [\"red\",\"green\",\"blue\",\"grey\",\"yellow\"];\nvar tileSize = 50;\nvar tileArray = [];\nvar globezLayer;\nvar startColor = null;\nvar visitedTiles = [];\n\n```", "```js\nvar touchListener = cc.EventListener.create({\n  event: cc.EventListener.MOUSE,\n  onMouseDown: function (event) {\n    var pickedRow = Math.floor(event._y / tileSize);\n    var pickedCol = Math.floor(event._x / tileSize);\n    tileArray[pickedRow][pickedCol].setOpacity(128);\n    tileArray[pickedRow][pickedCol].picked = true;\n    startColor = tileArray[pickedRow][pickedCol].val;\n    visitedTiles.push({\n      row: pickedRow,\n      col: pickedCol\n    });\n  },\n  onMouseUp: function(event){\n    startColor=null;\n    for(i = 0; i < visitedTiles.length; i ++){\n      tileArray[visitedTiles[i].row][visitedTiles[i].col].setOpacity(255);\n      tileArray[visitedTiles[i].row][visitedTiles[i].col].picked=false;\n    }\n  }\n});\n```", "```js\nevent: cc.EventListener.MOUSE\n```", "```js\nonMouseDown: function (event) {\n  var pickedRow = Math.floor(event._y / tileSize);\n  var pickedCol = Math.floor(event._x / tileSize);\n  tileArray[pickedRow][pickedCol].setOpacity(128);\n  tileArray[pickedRow][pickedCol].picked = true;\n  startColor = tileArray[pickedRow][pickedCol].val;\n  visitedTiles.push({\n    row: pickedRow,\n    col: pickedCol\n  });\n}\n```", "```js\nonMouseUp: function(event){\n  startColor=null;\n  for(i = 0; i < visitedTiles.length; i ++){\n    tileArray[visitedTiles[i].row][visitedTiles[i].col].setOpacity(255);\n    tileArray[visitedTiles[i].row][visitedTiles[i].col].picked=false;\n  }\n  visitedTiles = [];\n}\n```", "```js\nvar fieldSize = 6;\nvar tileTypes = [\"red\",\"green\",\"blue\",\"grey\",\"yellow\"];\nvar tileSize = 50;\nvar tileArray = [];\nvar globezLayer;\nvar visitedTiles = [];\nvar startColor = null;\nvar tolerance = 400;\n\n```", "```js\nonMouseMove: function(event){\n  if(startColor!=null){\n    var currentRow = Math.floor(event._y / tileSize);\n    var currentCol = Math.floor(event._x / tileSize);\n    var centerX = currentCol * tileSize + tileSize / 2;\n    var centerY = currentRow * tileSize + tileSize / 2;\n    var distX = event._x - centerX;\n    var distY = event._y - centerY;\n    if(distX * distX + distY * distY < tolerance){\n      if(!tileArray[currentRow][currentCol].picked){\n        if(Math.abs(currentRow - visitedTiles[visitedTiles.length - 1].row) <= 1 && Math.abs(currentCol -visitedTiles[visitedTiles.length -1].col) <= 1){\n          if(tileArray[currentRow][currentCol].val==startColor){\n            tileArray[currentRow][currentCol].setOpacity(128);\n            tileArray[currentRow][currentCol].picked=true;\n            visitedTiles.push({\n              row:currentRow,\n              col:currentCol\n            });\n          }\n        }\n      }\n    }\n  }\n}\n```", "```js\nif(distX * distX + distY * distY < tolerance){ â€¦ }\n```", "```js\nonMouseMove: function(event){\n  if(startColor!=null){\n    // same as before\n    if(distX * distX + distY * distY < tolerance){\n      if(!tileArray[currentRow][currentCol].picked){\n        // same as before\n      }\n      else{\n        if(visitedTiles.length>=2 && currentRow == visitedTiles[visitedTiles.length - 2].row && currentCol == visitedTiles[visitedTiles.length - 2].col){\n          tileArray[visitedTiles[visitedTiles.length - 1].row][visitedTiles[visitedTiles.length - 1].col].setOpacity(255);\n          tileArray[visitedTiles[visitedTiles.length - 1].row][visitedTiles[visitedTiles.length - 1].col].picked=false;\n          visitedTiles.pop();\n        }\n      }\n    }\n  }\n}\n```", "```js\nonMouseUp: function(event){\n  startColor=null;\n  for(i = 0; i < visitedTiles.length; i ++){\n    if(visitedTiles.length<3){\n      tileArray[visitedTiles[i].row][visitedTiles[i].col].setOpacity(255);\n      tileArray[visitedTiles[i].row][visitedTiles[i].col].picked=false;\n    }\n    else{\n      globezLayer.removeChild        (tileArray[visitedTiles[i].row][visitedTiles[i].col]);\n      tileArray[visitedTiles[i].row][visitedTiles[i].col]=null;\n    }\n  }\n  visitedTiles = [];\n}\n```", "```js\nonMouseUp: function(event){\n  startColor=null;\n  for(i = 0; i < visitedTiles.length; i ++){\n    if(visitedTiles.length<3){\n      tileArray[visitedTiles[i].row][visitedTiles[i].col].setOpacity(255);\n      tileArray[visitedTiles[i].row][visitedTiles[i].col].picked=false;\n    }\n    else{\n      globezLayer.removeChild(tileArray[visitedTiles[i].row][visitedTiles[i].col]);\n      tileArray[visitedTiles[i].row][visitedTiles[i].col]=null;\n    }\n  }\n  if(visitedTiles.length>=3){\n    for(i = 1; i < fieldSize; i ++){\n      for(j = 0; j < fieldSize; j ++){\n        if(tileArray[i][j] != null){\n          var holesBelow = 0;\n          for(var k = i - 1; k >= 0; k --){\n            if(tileArray[k][j] == null){\n              holesBelow++;\n            }\n          }\n          if(holesBelow>0){\n            var moveAction = cc.MoveTo.create(0.5, new cc.Point(tileArray[i][j].x,tileArray[i][j].y-holesBelow*tileSize));\n            // cc,moveTo() can also be used\n            tileArray[i][j].runAction(moveAction);\n            tileArray[i - holesBelow][j] = tileArray[i][j];\n            tileArray[i][j] = null;\n          }\n        }\n      }\n    }\n  }\n  visitedTiles = [];\n}\n```", "```js\nif(visitedTiles.length>=3){   \n```", "```js\nfor(i = 1; i < fieldSize; i ++){\n```", "```js\nfor(j = 0; j < fieldSize; j ++){\n```", "```js\nif(tileArray[i][j] != null){\n```", "```js\nvar holesBelow = 0;\n```", "```js\nfor(var k = i - 1; k >= 0; k --){\n```", "```js\nif(tileArray[k][j] == null){\n```", "```js\nholesBelow++;\n```", "```js\nif(holesBelow>0){\n```", "```js\nvar moveAction = cc.MoveTo.create(0.5, new cc.Point(tileArray[i][j].x,tileArray[i][j].y-holesBelow*tileSize));\ntileArray[i][j].runAction(moveAction);\n```", "```js\ntileArray[i - holesBelow][j] = tileArray[i][j];\ntileArray[i][j] = null;\n```", "```js\nonMouseUp: function(event){\n  // same as before\n  if(visitedTiles.length>=3){\n    // same as before\n    for(i = 0; i < fieldSize; i ++){\n      for(j = fieldSize-1; j>=0; j --){\n        if(tileArray[j][i] != null){\n          break;\n        }\n      }\n      var missingGlobes = fieldSize-1-j;\n      if(missingGlobes>0){\n        for(j=0;j<missingGlobes;j++){\n          this.fallTile(fieldSize-j-1,i,missingGlobes-j)\n        }\n      }\n    }\n  }\n  visitedTiles = [];\n}\n```", "```js\nfallTile:function(row,col,height){\n  var randomTile = Math.floor(Math.random()*tileTypes.length);\n  var spriteFrame = cc.spriteFrameCache.getSpriteFrame(tileTypes[randomTile]);\n  var sprite = cc.Sprite.createWithSpriteFrame(spriteFrame);\n  sprite.val = randomTile;\n  sprite.picked = false;\n  globezLayer.addChild(sprite,0);\n  sprite.setPosition(col*tileSize+tileSize/2,(fieldSize+height)*tileSize);\n  var moveAction = cc.MoveTo.create(0.5, new cc.Point(col*tileSize+tileSize/2,row*tileSize+tileSize/2));\n  sprite.runAction(moveAction);\n  tileArray[row][col] = sprite;\n}\n```", "```js\nvar fieldSize = 6;\nvar tileTypes = [\"red\",\"green\",\"blue\",\"grey\",\"yellow\"];\nvar tileSize = 50;\nvar tileArray = [];\nvar globezLayer;\nvar arrowsLayer;\nvar visitedTiles = [];\nvar startColor = null;\nvar tolerance = 400;\n```", "```js\ninit:function () {\n  this._super();\n  cc.spriteFrameCache.addSpriteFrames(\"assets/globes.plist\", \"assets/globes.png\");\n  var backgroundLayer = cc.LayerGradient.create(cc.color(0x00,0x22,0x22,255), cc.color(0x22,0x00,0x44,255));\n  this.addChild(backgroundLayer);\n  globezLayer = cc.Layer.create();\n  this.addChild(globezLayer)\n  arrowsLayer = cc.DrawNode.create();\n  // new cc.DrawNode() can also be used\n  this.addChild(arrowsLayer);\n  this.createLevel();\n  cc.eventManager.addListener(touchListener, this);\n}\n```", "```js\nonMouseUp: function(event){\n  arrowsLayer.clear();\n  // same as before\n}\n```", "```js\nonMouseMove: function(event){\n  if(startColor!=null){\n    // same as before\n    if(distX * distX + distY * distY < tolerance){\n      // same as before\n      this.drawPath();\n    }\n  }\n}\n```", "```js\ndrawPath:function(){\n  arrowsLayer.clear();\n  if(visitedTiles.length>0){\n    for(var i=1;i<visitedTiles.length;i++){\n      arrowsLayer.drawSegment(new cc.Point(visitedTiles[i-1].col*tileSize+tileSize/2,visitedTiles[i-1].row*tileSize+tileSize/2),new cc.Point(visitedTiles[i].col*tileSize+tileSize/2,visitedTiles[i].row*tileSize+tileSize/2), 4,cc.color(255, 255, 255, 255));\n    }\n  }\n}\n```"]