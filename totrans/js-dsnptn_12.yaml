- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maximizing Performance – Lazy Loading and Code Splitting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to maximize the performance of a JavaScript application, reducing the
    amount of unused JavaScript being loaded and interpreted is key. The techniques
    that can be brought to bear on this problem are called **lazy loading** and **code
    splitting**. Lazy loading and code splitting allows parts of the JavaScript to
    be loaded on demand as required. This is in contrast to being downloaded on page
    load and can greatly reduce the amount of unused JavaScript being loaded and interpreted.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The dynamic import syntax and how Vite can automatically code-split based on
    the syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Route-based code splitting with Next.js and how to read the Bundle Analyzer
    reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use **next/dynamic** and **react-intersection-observer** to load JavaScript
    and React components on different user interactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll be able to identify and leverage lazy loading
    and code splitting in a variety of scenarios and applications.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/Javascript-Design-Patterns](https://github.com/PacktPublishing/Javascript-Design-Patterns)
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic imports and code splitting with Vite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dynamic imports in JavaScript refer to the usage of the `import()` syntax to
    import a module. Unlike the `import Something from './my-module.js'` declarative
    syntax, `import()` is more akin to a function that returns a promise. For example,
    we could rewrite the original import as `const Something =` `await import('./my-module.js')`.
  prefs: []
  type: TYPE_NORMAL
- en: The “dynamic” part of the import is that it doesn’t have to be done at module
    evaluation time; it’s done as part of the execution of the code. This is useful
    when paired with code splitting – which we’ll define now – since it means that
    we can avoid loading and evaluating some JavaScript code until it’s needed.
  prefs: []
  type: TYPE_NORMAL
- en: Code splitting is a technique whereby code is built into multiple files (also
    known as “chunks” or “bundles”) instead of a single file. Code splitting is useful
    to avoid loading all the code up front. Instead, when paired with dynamic imports,
    code is split into multiple files such that different parts of it are loaded only
    when necessary. This means that there’s a lower up-front cost to the JavaScript
    load, parse, and compile cycle.
  prefs: []
  type: TYPE_NORMAL
- en: The Vite build tool supports code splitting at dynamic import boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given a simple document as follows, which has an `id="app"` `div` and references
    a `main.js` file, Vite can run a build as long as `main.js` exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll have two modules now: `main.js`, which is the entry point that Vite will
    reference, and our code will import the `dynamic.js` module.'
  prefs: []
  type: TYPE_NORMAL
- en: '`main.js` will inject `''Hello from main.js''`into our `app` div. It will then
    proceed to dynamically load the `dynamic.js` module and set the contents of the
    `app` div to the output of the `hello` function as exported by `dynamic.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: export function hello() {
  prefs: []
  type: TYPE_NORMAL
- en: return 'Hello from dynamic.js';
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <!-- no change to app div -->
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <button data-track="button-click">With tracked click
  prefs: []
  type: TYPE_NORMAL
- en: </button>
  prefs: []
  type: TYPE_NORMAL
- en: <button data-track="alt-button-click">Other tracked click
  prefs: []
  type: TYPE_NORMAL
- en: </button>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: <!-- to change to script -->
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: export function trackInteraction(page, type = 'click') {
  prefs: []
  type: TYPE_NORMAL
- en: return fetch
  prefs: []
  type: TYPE_NORMAL
- en: ('https://jsonplaceholder.typicode.com/posts', {
  prefs: []
  type: TYPE_NORMAL
- en: 'method: ''POST'','
  prefs: []
  type: TYPE_NORMAL
- en: 'body: JSON.stringify({'
  prefs: []
  type: TYPE_NORMAL
- en: type,
  prefs: []
  type: TYPE_NORMAL
- en: page,
  prefs: []
  type: TYPE_NORMAL
- en: '}),'
  prefs: []
  type: TYPE_NORMAL
- en: 'headers: {'
  prefs: []
  type: TYPE_NORMAL
- en: '''Content-type'': ''application/json; charset=UTF-8'','
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '}).then((response) => response.json());'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: // no change to rest of main.js
  prefs: []
  type: TYPE_NORMAL
- en: document.querySelectorAll('[data-track]').forEach((el) => {
  prefs: []
  type: TYPE_NORMAL
- en: el.addEventListener('click', async (event) => {
  prefs: []
  type: TYPE_NORMAL
- en: const page = window.location.pathname;
  prefs: []
  type: TYPE_NORMAL
- en: const type = event.target.dataset?.track;
  prefs: []
  type: TYPE_NORMAL
- en: const { trackInteraction } = await import
  prefs: []
  type: TYPE_NORMAL
- en: ('./trackInteraction.js');
  prefs: []
  type: TYPE_NORMAL
- en: const interactionResponse = await trackInteraction
  prefs: []
  type: TYPE_NORMAL
- en: (page, type);
  prefs: []
  type: TYPE_NORMAL
- en: console.assert(
  prefs: []
  type: TYPE_NORMAL
- en: interactionResponse.type === type &&
  prefs: []
  type: TYPE_NORMAL
- en: interactionResponse.page === page,
  prefs: []
  type: TYPE_NORMAL
- en: '''interaction response does not match sent data'','
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: ├── components
  prefs: []
  type: TYPE_NORMAL
- en: ├── next.config.js
  prefs: []
  type: TYPE_NORMAL
- en: ├── package.json
  prefs: []
  type: TYPE_NORMAL
- en: ├── pages
  prefs: []
  type: TYPE_NORMAL
- en: │   └── index.js
  prefs: []
  type: TYPE_NORMAL
- en: └── public
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: + First Load JS shared by all              79.9 kB
  prefs: []
  type: TYPE_NORMAL
- en: ├ chunks/framework-cc1b0d6c55d15cb9.js   45.3 kB
  prefs: []
  type: TYPE_NORMAL
- en: ├ chunks/main-7c6ad51e94ec3ff5.js        32.8 kB
  prefs: []
  type: TYPE_NORMAL
- en: ├ chunks/pages/_app-db3a4be757903450.js  205 B
  prefs: []
  type: TYPE_NORMAL
- en: └ chunks/webpack-8850afd7843acaaa.js     1.55 kB
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: npm install --save @next/bundle-analyzer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: const nextConfig = {
  prefs: []
  type: TYPE_NORMAL
- en: // no changes to this config
  prefs: []
  type: TYPE_NORMAL
- en: '};'
  prefs: []
  type: TYPE_NORMAL
- en: const withBundleAnalyzer = require('@next/bundle-analyzer')({
  prefs: []
  type: TYPE_NORMAL
- en: 'enabled: process.env.ANALYZE === ''true'','
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: module.exports = withBundleAnalyzer(nextConfig);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"//": "// no change to other properties",'
  prefs: []
  type: TYPE_NORMAL
- en: '"scripts": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"//": "// no change to other scripts",'
  prefs: []
  type: TYPE_NORMAL
- en: '"analyze": "cross-env ANALYZE=true next build"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: npm run analyze
  prefs: []
  type: TYPE_NORMAL
- en: next-route-based-splitting@0.1.0 analyze
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: cross-env ANALYZE=true next build
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ✓ Linting and checking validity of types
  prefs: []
  type: TYPE_NORMAL
- en: Webpack Bundle Analyzer saved report to /next-route-based-splitting/.next/analyze/nodejs.html
  prefs: []
  type: TYPE_NORMAL
- en: No bundles were parsed. Analyzer will show only original module sizes from stats
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack Bundle Analyzer saved report to /next-route-based-splitting/.next/analyze/edge.html
  prefs: []
  type: TYPE_NORMAL
- en: Webpack Bundle Analyzer saved report to /next-route-based-splitting/.next/analyze/client.html
  prefs: []
  type: TYPE_NORMAL
- en: ✓ Creating an optimized production build
  prefs: []
  type: TYPE_NORMAL
- en: ✓ Compiled successfully
  prefs: []
  type: TYPE_NORMAL
- en: ✓ Collecting page data
  prefs: []
  type: TYPE_NORMAL
- en: ✓ Generating static pages (3/3)
  prefs: []
  type: TYPE_NORMAL
- en: ✓ Collecting build traces
  prefs: []
  type: TYPE_NORMAL
- en: ✓ Finalizing page optimization
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: import React from 'react';
  prefs: []
  type: TYPE_NORMAL
- en: export function Hello() {
  prefs: []
  type: TYPE_NORMAL
- en: return <>Hello</>;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: import React from 'react';
  prefs: []
  type: TYPE_NORMAL
- en: import dynamic from 'next/dynamic';
  prefs: []
  type: TYPE_NORMAL
- en: const DynamicClientSideHello = dynamic(
  prefs: []
  type: TYPE_NORMAL
- en: () => import('../components/Hello.jsx').then(({ Hello })
  prefs: []
  type: TYPE_NORMAL
- en: => Hello),
  prefs: []
  type: TYPE_NORMAL
- en: '{ ssr: false },'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: export default function Index() {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <>
  prefs: []
  type: TYPE_NORMAL
- en: <h1>Next.js route-based splitting and component lazy
  prefs: []
  type: TYPE_NORMAL
- en: loading</h1>
  prefs: []
  type: TYPE_NORMAL
- en: <DynamicClientSideHello />
  prefs: []
  type: TYPE_NORMAL
- en: </>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: import React from 'react';
  prefs: []
  type: TYPE_NORMAL
- en: export function TermsAndConditions() {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <>
  prefs: []
  type: TYPE_NORMAL
- en: <h3>Terms and Conditions Short</h3>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: </>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: import React from 'react';
  prefs: []
  type: TYPE_NORMAL
- en: export function TermsAndConditions() {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <>
  prefs: []
  type: TYPE_NORMAL
- en: <h3>Terms and Conditions Long</h3>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: </>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: import React, { useState } from 'react';
  prefs: []
  type: TYPE_NORMAL
- en: export default function Index() {
  prefs: []
  type: TYPE_NORMAL
- en: const [selectedTermsAndConditions,
  prefs: []
  type: TYPE_NORMAL
- en: setSelectedTermsAndConditions] =
  prefs: []
  type: TYPE_NORMAL
- en: useState('None');
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <>
  prefs: []
  type: TYPE_NORMAL
- en: '{/* no changes to rest of the returned JSX */}'
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: <label htmlFor="termsAndConditionsType">
  prefs: []
  type: TYPE_NORMAL
- en: 'Terms and Conditions selector:'
  prefs: []
  type: TYPE_NORMAL
- en: </label>
  prefs: []
  type: TYPE_NORMAL
- en: <select
  prefs: []
  type: TYPE_NORMAL
- en: id="termsAndConditionsType"
  prefs: []
  type: TYPE_NORMAL
- en: onChange={(e) => setSelectedTermsAndConditions
  prefs: []
  type: TYPE_NORMAL
- en: (e.target.value)}
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: <option value="None">None</option>
  prefs: []
  type: TYPE_NORMAL
- en: <option value="Short">Short</option>
  prefs: []
  type: TYPE_NORMAL
- en: <option value="Long">Long</option>
  prefs: []
  type: TYPE_NORMAL
- en: </select>
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: import React, { useState } from 'react';
  prefs: []
  type: TYPE_NORMAL
- en: const NoRender = () => null;
  prefs: []
  type: TYPE_NORMAL
- en: export default function Index() {
  prefs: []
  type: TYPE_NORMAL
- en: // no change to useState
  prefs: []
  type: TYPE_NORMAL
- en: const TermsAndConditions = ['Short', 'Long'].includes(
  prefs: []
  type: TYPE_NORMAL
- en: selectedTermsAndConditions,
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '? dynamic(() =>'
  prefs: []
  type: TYPE_NORMAL
- en: import(
  prefs: []
  type: TYPE_NORMAL
- en: '`../components/TermsAndConditions$'
  prefs: []
  type: TYPE_NORMAL
- en: '{selectedTermsAndConditions}.jsx`'
  prefs: []
  type: TYPE_NORMAL
- en: ).then(({ TermsAndConditions }) =>
  prefs: []
  type: TYPE_NORMAL
- en: TermsAndConditions),
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ': NoRender;'
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <>
  prefs: []
  type: TYPE_NORMAL
- en: '{/* no changes to rest of the returned JSX */}'
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: '{/* no change to label or select */}'
  prefs: []
  type: TYPE_NORMAL
- en: <hr />
  prefs: []
  type: TYPE_NORMAL
- en: <TermsAndConditions />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: import React from 'react';
  prefs: []
  type: TYPE_NORMAL
- en: export function TermsAndConditions() {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <>
  prefs: []
  type: TYPE_NORMAL
- en: <h3>Terms and Conditions Long Scroll</h3>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{/* Terms and Conditions Content */}</p>
  prefs: []
  type: TYPE_NORMAL
- en: </>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: import React, { useRef } from 'react';
  prefs: []
  type: TYPE_NORMAL
- en: export function TermsAndConditions() {
  prefs: []
  type: TYPE_NORMAL
- en: const scrollTargetRef = useRef();
  prefs: []
  type: TYPE_NORMAL
- en: async function handleScroll() {
  prefs: []
  type: TYPE_NORMAL
- en: if (!('scrollBehavior' in document.
  prefs: []
  type: TYPE_NORMAL
- en: documentElement.style)) {
  prefs: []
  type: TYPE_NORMAL
- en: await import('scroll-behavior-polyfill');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: if (scrollTargetRef.current) {
  prefs: []
  type: TYPE_NORMAL
- en: scrollTargetRef.current.scrollIntoView({
  prefs: []
  type: TYPE_NORMAL
- en: 'behavior: ''smooth'','
  prefs: []
  type: TYPE_NORMAL
- en: 'block: ''end'','
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <>
  prefs: []
  type: TYPE_NORMAL
- en: '{/* no change to heading */}'
  prefs: []
  type: TYPE_NORMAL
- en: <button onClick={handleScroll}>Scroll to button
  prefs: []
  type: TYPE_NORMAL
- en: </button>
  prefs: []
  type: TYPE_NORMAL
- en: '{/* no changes to paragraphs */}'
  prefs: []
  type: TYPE_NORMAL
- en: <hr />
  prefs: []
  type: TYPE_NORMAL
- en: <label htmlFor="accept">
  prefs: []
  type: TYPE_NORMAL
- en: <input
  prefs: []
  type: TYPE_NORMAL
- en: id="accept"
  prefs: []
  type: TYPE_NORMAL
- en: name="acceptTerms"
  prefs: []
  type: TYPE_NORMAL
- en: type="checkbox"
  prefs: []
  type: TYPE_NORMAL
- en: ref={scrollTargetRef}
  prefs: []
  type: TYPE_NORMAL
- en: />
  prefs: []
  type: TYPE_NORMAL
- en: Accept Terms and Conditions
  prefs: []
  type: TYPE_NORMAL
- en: </label>
  prefs: []
  type: TYPE_NORMAL
- en: </>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: // no changes to imports and definitions outside of Index
  prefs: []
  type: TYPE_NORMAL
- en: export default function Index() {
  prefs: []
  type: TYPE_NORMAL
- en: // no changes to useState to maintain select state
  prefs: []
  type: TYPE_NORMAL
- en: const TermsAndConditions = ['Short', 'Long',
  prefs: []
  type: TYPE_NORMAL
- en: '''LongScroll''].includes('
  prefs: []
  type: TYPE_NORMAL
- en: selectedTermsAndConditions,
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '? dynamic(() =>'
  prefs: []
  type: TYPE_NORMAL
- en: import(
  prefs: []
  type: TYPE_NORMAL
- en: '`../components/TermsAndConditions$'
  prefs: []
  type: TYPE_NORMAL
- en: '{selectedTermsAndConditions}.jsx`'
  prefs: []
  type: TYPE_NORMAL
- en: ).then(({ TermsAndConditions }) =>
  prefs: []
  type: TYPE_NORMAL
- en: TermsAndConditions),
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ': NoRender;'
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <>
  prefs: []
  type: TYPE_NORMAL
- en: '{/* no change to content outside of select */}'
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: '{/* no change to label */}'
  prefs: []
  type: TYPE_NORMAL
- en: <select
  prefs: []
  type: TYPE_NORMAL
- en: id="termsAndConditionsType"
  prefs: []
  type: TYPE_NORMAL
- en: onChange={(e) => setSelectedTermsAndConditions
  prefs: []
  type: TYPE_NORMAL
- en: (e.target.value)}
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '{/* no change to existing options */}'
  prefs: []
  type: TYPE_NORMAL
- en: <option value="LongScroll">LongScroll</option>
  prefs: []
  type: TYPE_NORMAL
- en: </select>
  prefs: []
  type: TYPE_NORMAL
- en: <hr />
  prefs: []
  type: TYPE_NORMAL
- en: <TermsAndConditions />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: import React from 'react';
  prefs: []
  type: TYPE_NORMAL
- en: export default function TermsForm() {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <form>
  prefs: []
  type: TYPE_NORMAL
- en: <label htmlFor="name">Type your name as signature
  prefs: []
  type: TYPE_NORMAL
- en: </label>
  prefs: []
  type: TYPE_NORMAL
- en: <input id="name" type="text" />
  prefs: []
  type: TYPE_NORMAL
- en: </form>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: import React from 'react';
  prefs: []
  type: TYPE_NORMAL
- en: import dynamic from 'next/dynamic';
  prefs: []
  type: TYPE_NORMAL
- en: import { InView } from 'react-intersection-observer';
  prefs: []
  type: TYPE_NORMAL
- en: const TermsForm = dynamic(() => import('./TermsForm.jsx'));
  prefs: []
  type: TYPE_NORMAL
- en: export function TermsAndConditions() {
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <>
  prefs: []
  type: TYPE_NORMAL
- en: <h3>Terms and Conditions Long Scroll Accept Form</h3>
  prefs: []
  type: TYPE_NORMAL
- en: '{/* 10 paragraphs of content */}'
  prefs: []
  type: TYPE_NORMAL
- en: <hr />
  prefs: []
  type: TYPE_NORMAL
- en: <InView>
  prefs: []
  type: TYPE_NORMAL
- en: '{({ inView, ref }) => <div ref={ref}>{inView &&'
  prefs: []
  type: TYPE_NORMAL
- en: <TermsForm />}</div>}
  prefs: []
  type: TYPE_NORMAL
- en: </InView>
  prefs: []
  type: TYPE_NORMAL
- en: <label htmlFor="accept">
  prefs: []
  type: TYPE_NORMAL
- en: <input id="accept" name="acceptTerms"
  prefs: []
  type: TYPE_NORMAL
- en: type="checkbox" />
  prefs: []
  type: TYPE_NORMAL
- en: Accept Terms and Conditions
  prefs: []
  type: TYPE_NORMAL
- en: </label>
  prefs: []
  type: TYPE_NORMAL
- en: </>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: // no changes to imports and definitions outside of Index
  prefs: []
  type: TYPE_NORMAL
- en: export default function Index() {
  prefs: []
  type: TYPE_NORMAL
- en: // no changes to useState to maintain select state
  prefs: []
  type: TYPE_NORMAL
- en: const TermsAndConditions = [
  prefs: []
  type: TYPE_NORMAL
- en: '''Short'','
  prefs: []
  type: TYPE_NORMAL
- en: '''Long'','
  prefs: []
  type: TYPE_NORMAL
- en: '''LongScroll'','
  prefs: []
  type: TYPE_NORMAL
- en: '''LongScrollAcceptForm'','
  prefs: []
  type: TYPE_NORMAL
- en: '].includes(selectedTermsAndConditions)'
  prefs: []
  type: TYPE_NORMAL
- en: '? dynamic(() =>'
  prefs: []
  type: TYPE_NORMAL
- en: import(
  prefs: []
  type: TYPE_NORMAL
- en: '`../components/TermsAndConditions$'
  prefs: []
  type: TYPE_NORMAL
- en: '{selectedTermsAndConditions}.jsx`'
  prefs: []
  type: TYPE_NORMAL
- en: ).then(({ TermsAndConditions }) =>
  prefs: []
  type: TYPE_NORMAL
- en: TermsAndConditions),
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: ': NoRender;'
  prefs: []
  type: TYPE_NORMAL
- en: return (
  prefs: []
  type: TYPE_NORMAL
- en: <>
  prefs: []
  type: TYPE_NORMAL
- en: '{/* no change to content outside of select */}'
  prefs: []
  type: TYPE_NORMAL
- en: <div>
  prefs: []
  type: TYPE_NORMAL
- en: '{/* no change to label */}'
  prefs: []
  type: TYPE_NORMAL
- en: <select
  prefs: []
  type: TYPE_NORMAL
- en: id="termsAndConditionsType"
  prefs: []
  type: TYPE_NORMAL
- en: onChange={(e) => setSelectedTermsAndConditions
  prefs: []
  type: TYPE_NORMAL
- en: (e.target.value)}
  prefs: []
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '{/* no change to existing options */}'
  prefs: []
  type: TYPE_NORMAL
- en: <option value="LongScrollAcceptForm">
  prefs: []
  type: TYPE_NORMAL
- en: LongScrollAcceptForm</option>
  prefs: []
  type: TYPE_NORMAL
- en: </select>
  prefs: []
  type: TYPE_NORMAL
- en: <hr />
  prefs: []
  type: TYPE_NORMAL
- en: <TermsAndConditions />
  prefs: []
  type: TYPE_NORMAL
- en: </div>
  prefs: []
  type: TYPE_NORMAL
- en: </>
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
