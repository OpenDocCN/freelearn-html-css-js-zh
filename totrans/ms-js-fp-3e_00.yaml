- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In computer programming, paradigms abound. Some examples include imperative
    programming, structured (goto-less) programming, **object-oriented programming**
    (**OOP**), aspect-oriented programming, and declarative programming. Lately, there
    has been renewed interest in a particular paradigm that can arguably be considered
    to be older than most (if not all) of the cited ones—**functional programming**
    (**FP**). FP emphasizes writing functions and connecting them in simple ways to
    produce more understandable and more easily tested code. Thus, given the increased
    complexity of today’s web applications, it’s logical that a safer, cleaner way
    of programming would be of interest.
  prefs: []
  type: TYPE_NORMAL
- en: This interest in FP comes hand in hand with the evolution of JavaScript. Despite
    its somewhat hasty creation (reportedly achieved in only 10 days, in 1995, by
    Brendan Eich at Netscape), today, JavaScript is a standardized and quickly growing
    language, with features more advanced than most other similarly popular languages.
    The ubiquity of the language, which can now be found in browsers, servers, mobile
    phones, and whatnot, has also impelled interest in better development strategies.
    Also, even if JavaScript wasn’t conceived as a functional language, the fact is
    that it provides all the features you’d require to work in that fashion, which
    is another plus.
  prefs: []
  type: TYPE_NORMAL
- en: That said, we must also comment on advances in the language and related tools.
    The benefits of data typing are generally acknowledged, and in recent years, TypeScript
    has gained wide adoption and has been used for both frontend and backend coding.
    It makes sense, then, to also include its usage in this book. This, we feel, will
    make the examples clearer, and also simplify the adoption of the presented code
    for “real-life” jobs.
  prefs: []
  type: TYPE_NORMAL
- en: It must also be said that FP hasn’t been generally applied in industry, possibly
    because it has a certain aura of difficulty, and it is thought to be theoretical
    rather than practical, even mathematical, and possibly uses vocabulary and concepts
    that are foreign to developers—for example, functors, monads, folding, and category
    theory. While learning all this theory will certainly be of help, it can also
    be argued that even with zero knowledge of the previous terms, you can understand
    the tenets of FP, and see how to apply it to your own programming.
  prefs: []
  type: TYPE_NORMAL
- en: FP is not something that you have to do on your own, without any help. There
    are many libraries and frameworks that incorporate, to greater or lesser degrees,
    the concepts of FP. Starting with jQuery (which does include some FP concepts),
    passing through Underscore and its close relative, Lodash, and other libraries
    such as Ramda, and getting to more complete web development tools such as React
    and Redux, Angular, and Elm (a 100% functional language, which compiles into JavaScript),
    the list of functional aids for your coding is ever growing.
  prefs: []
  type: TYPE_NORMAL
- en: Learning how to use FP can be a worthwhile investment, and even though you may
    not get to use all of its methods and techniques, just starting to apply some
    of them will pay dividends in better code. You need not try to apply all the concepts
    of FP from the start, and you need not try to abandon every non-functional feature
    in JavaScript either. JavaScript assuredly has some bad features, but it also
    has several very good and powerful ones. The idea is not to throw away everything
    you’ve learned and use and adopt a 100% functional way; rather, the guiding idea
    is evolution, not revolution. In that sense, it can be said that what we’ll be
    doing is not FP, but rather **Sorta Functional Programming** (**SFP**), aiming
    for a fusion of paradigms.
  prefs: []
  type: TYPE_NORMAL
- en: 'A final comment about the style of the code in this book—it is quite true that
    there are several very good libraries that provide you with FP tools: Underscore,
    Lodash, and Ramda are counted among them. However, I preferred to eschew their
    usage because I wanted to show how things really work. It’s easy to apply a given
    function from some package or the other, but by coding everything out (vanilla
    FP, if you wish), it’s my belief that you get to understand things more deeply.
    Also, as I will comment in some places, because of the power and clarity of arrow
    functions and other features, the pure JavaScript versions can be even simpler
    to understand!'
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is geared toward programmers with a good working knowledge of JavaScript
    (or, better yet, TypeScript) working either on the client side (browsers) or the
    server side (Node.js), who are interested in applying techniques to be able to
    write better, testable, understandable, and maintainable code. Some background
    in computer science (including, for example, data structures) and good programming
    practices will also come in handy. In this book, we’ll cover FP in a practical
    way, though, at times, we will mention some theoretical points.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B19301_01.xhtml#_idTextAnchor015), *Becoming Functional – Several
    Questions*, discusses FP, gives reasons for its usage, and lists the tools that
    you’ll need to take advantage of the rest of the book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B19301_02.xhtml#_idTextAnchor037), *Thinking Functionally – A
    First Example*, will provide the first example of FP by considering a common web-related
    problem and going over several solutions, to finally focus on a functional solution.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19301_03.xhtml#_idTextAnchor054), *Starting Out with Functions
    – A Core Concept*, will go over the central concept of FP, that is, functions,
    and the different options available in JavaScript.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19301_04.xhtml#_idTextAnchor069), *Behaving Properly – Pure
    Functions*, will consider the concept of purity and pure functions, and demonstrate
    how it leads to simpler coding and easier testing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19301_05.xhtml#_idTextAnchor084), *Programming Declaratively
    – A Better Style*, will use simple data structures to show how to produce results
    that work not in an imperative way, but in a declarative fashion.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19301_06.xhtml#_idTextAnchor107), *Producing Functions – Higher-Order
    Functions*, will deal with higher-order functions, which receive other functions
    as parameters and produce new functions as results.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19301_07.xhtml#_idTextAnchor128), *Transforming Functions –
    Currying and Partial Application*, will explore some methods for producing new
    and specialized functions from earlier ones.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19301_08.xhtml#_idTextAnchor148), *Connecting Functions – Pipelining,
    Composition, and More*, will show the key concepts regarding how to build new
    functions by joining previously defined ones.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19301_09.xhtml#_idTextAnchor172), *Designing Functions – Recursion*,
    will look at how a key concept in FP, recursion, can be applied to designing algorithms
    and functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B19301_10.xhtml#_idTextAnchor188), *Ensuring Purity – Immutability*,
    will present some tools that can help you to work in a pure fashion by providing
    immutable objects and data structures.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B19301_11.xhtml#_idTextAnchor204), *Implementing Design Patterns
    – The Functional Way*, will show how several popular OOP design patterns are implemented
    (or not needed!) when you program in FP ways.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B19301_12.xhtml#_idTextAnchor221), *Building Better Containers
    – Functional Data Types*, will explore some more high-level functional patterns,
    introducing types, containers, functors, monads, and several other more advanced
    FP concepts.'
  prefs: []
  type: TYPE_NORMAL
- en: I have tried to keep the examples in this book simple and down to earth because
    I want to focus on the functional aspects and not on the intricacies of this or
    that problem. Some programming texts are geared toward learning, say, a given
    framework, and then working on a given problem, showing how to fully work it out
    with the chosen tools.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, in the very early stages of planning for this book, I entertained the
    idea of developing an application that would use all the FP things I had in mind,
    but there was no way to fit all of that within a single project. Exaggerating
    a bit, I felt like an MD trying to find a patient on whom to apply all of his
    medical knowledge and treatments! So, I opted to show plenty of individual techniques,
    which can be used in multiple situations. Rather than building a house, I want
    to show you how to put bricks together, how to wire things up, and so on, so that
    you will be able to apply whatever you need as you see fit.
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand the concepts and code in this book, you don’t need much more than
    a JavaScript environment and a text editor. To be honest, I even developed some
    of the examples working fully online, with tools such as JSFiddle (at [jsfiddle.net](http://jsfiddle.net))
    and the like, and absolutely nothing else.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we’ll be using ES2022 and Node 19, and the code will run on any
    OS, such as Linux, macOS, or Windows.
  prefs: []
  type: TYPE_NORMAL
- en: You will need some experience with the latest version of JavaScript because
    it includes several features that can help you write more concise and compact
    code. We will frequently include pointers to online documentation, such as the
    documentation available on the **Mozilla Development Network** (**MDN**) at [developer.mozilla.org](http://developer.mozilla.org),
    to help you get more in-depth knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also be using the latest version of TypeScript, to add data typing to
    our JavaScript code. For more on the language, the must-read reference is [www.typescriptlang.org](http://www.typescriptlang.org),
    where you’ll find documentation, tutorials, and even an online playground to directly
    test code there.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [github.com/PacktPublishing/Mastering-JavaScript-Functional-Programming-3E](http://github.com/PacktPublishing/Mastering-JavaScript-Functional-Programming-3E).
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [github.com/PacktPublishing/](http://github.com/PacktPublishing/). Check them
    out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots and diagrams
    used in this book. You can download it here: [https://packt.link/UsFuE](https://packt.link/UsFuE).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “There are several possible results: a single value
    with the `reduce()` operation, a new array with `map()`, or just about any kind
    of result with `forEach()`.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *Mastering JavaScript Functional Programming - Third Edition*,
    we’d love to hear your thoughts! Please click here to go straight to the Amazon
    review page for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
    Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below![](img/B19301_QR_Free_PDF.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: https://packt.link/free-ebook/9781804610138
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
