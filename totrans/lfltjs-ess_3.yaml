- en: Chapter 3. Creating Heatmaps and Choropleth Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the first two chapters, you learned how to make a map and add points, lines,
    polygons, and even GeoJSON. Now, you will use these skills to create two types
    of thematic maps: heatmaps and choropleth maps. These maps show you concentrations
    of points or statistical variables using two different styles of representations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a heatmap?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do I create a heatmap?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a choropleth map?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do I create a choropleth map?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a heatmap?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A heatmap is a color-coded grid added to a map. The colors usually range from
    cool colors, such as blue, to hot colors, such as yellow, orange, and red. Heatmaps
    represent point data in one of two ways: density or intensity. In a density map,
    the grid is colored red when multiple points are in close proximity of each other
    and blue when dispersed. High concentrations of points create the heat. In an
    intensity map, points are assigned a value or an intensity score. The higher the
    score or intensity, the hotter the color in the grid at the location of the point;
    inversely, the lower the score, the cooler the grid color at the point location.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Heatmaps are created by placing a grid over the map and calculating the points
    within an area through a process called Multivariate Kernel Density Estimation.
    For a detailed explanation and the exact formulas used, you can visit [http://en.wikipedia.org/wiki/Multivariate_kernel_density_estimation](http://en.wikipedia.org/wiki/Multivariate_kernel_density_estimation).
  prefs: []
  type: TYPE_NORMAL
- en: Heatmaps with Leaflet.heat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first heatmap you will make will be a density heatmap, using the `Leaflet.heat`
    plugin. You can download the JavaScript plugin at [https://github.com/Leaflet/Leaflet.heat](https://github.com/Leaflet/Leaflet.heat).
    The following steps will walk you through creating your first heatmap:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `LeafletEssentials.html`, add a reference to `Leaflet.heat.js` with either
    a URL to a remote copy or the path to your local copy, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an array of points. Your points can contain additional information but
    must have the latitude and longitude as the first two elements. The following
    code shows you three points from the code. The full code contains many more, which
    will allow you to create the heatmap:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, create the heat layer and add it to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your map should look like what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Heatmaps with Leaflet.heat](img/4812OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot is the default heatmap; it's not very stylish.
  prefs: []
  type: TYPE_NORMAL
- en: Using options to style your map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Leaflet.heat` allows you to pass options to the constructor. The options are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MaxZoom`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Max`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Radius`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Blur`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Gradient`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most important options are `blur`, `maxZoom`, and `radius`.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the blur value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Blur merges the points the together, or not. A low blur value will create individual
    points, whereas a higher number will make the points merge with each other and
    look more fluid. Blur too much and you will wash out your points. The following
    screenshots show you different blur values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows you the blur value set to `1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the blur value](img/4812OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows you the blur value set to `40`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the blur value](img/4812OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows you the blur value set to `80`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the blur value](img/4812OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice how at `80`, the blur takes away any hotspots on the map; it is washed
    out. It will take some to adjust to finding the perfect value. Starting with the
    default value of `15` is a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the maxZoom value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `maxZoom` option sets the points to their maximum intensity at the specified
    zoom. If you set the `maxZoom` option of the map, you can ignore this setting.
    You should set this to the zoom level where the map looks best. If you set it
    to too far out, the points will lose their heat as you zoom in, and if you make
    it too tight of a zoom, the user might not be able to see all the points on the
    map at once.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the radius value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This option should be obvious. It adjusts the radius of the points. A small
    number makes a small point and a large number makes a large point. The amount
    of data points can affect the proper radius of your points. The more points you
    have, the smaller you could make each point and still have a readable map. Making
    the radius too large will create a large blob of values that will be hard to interpret.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the gradient option
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `gradient` option allows you to specify the color at different levels. The
    default is set to `{.4:"blue",.6:"cyan",.7:"lime",.8:"yellow",1:"red"}`. You can
    specify ranges from `0` to `1`. The outermost color is `0` and the center is `1`.
    The default setting tends to be a common color range for heatmaps that most people
    understand. Leaving the default is the best option, but if you need to change
    the colors for some reason, you can.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create a color combination that is visually pleasing, you can use a tool
    such as Color Brewer 2\. This is available at [http://colorbrewer2.org/](http://colorbrewer2.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Methods of Leaflet.heat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Along with the options to style your heatmap, `Leaflet.heat` has four methods
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setOptions(options)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addLatLng(latlng)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setLatLngs(latlngs)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`redraw()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can reset the style, add new data, load in all new data, and redraw the
    map. The method you will use most is the `addLatLng()` method. This method allows
    you to append data to your map. In the previous example, you can add the following
    code as the last line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code uses the `addLatLng()` method to add the point (`35,-106`)
    to the map. There is an excellent example of using an event with `addLatLng()`
    at [http://Leaflet.github.io/Leaflet.heat/demo/draw.html](http://Leaflet.github.io/Leaflet.heat/demo/draw.html).
    As you move the mouse, points are added to the map in real time.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `redraw()` method is called by `setOptions()`, `addLatLng()`, and `setLatLngs()`
    so that you do not need to call it after executing any of these methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to show multiple datasets on a single map, you can write a custom
    function to add another set. The following code adds a dataset. You will need
    to populate the `newPoints` variable with your other dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, a dataset named `newPoints` is added to the map and
    the old dataset points are removed. In your HTML, create a button to execute the
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is the HTML that calls the `addNewPoints()`function when
    it is clicked on.
  prefs: []
  type: TYPE_NORMAL
- en: Adding markers to the heatmap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You need a series of points to create the heatmap, so why not use them to attach
    a pop up to the heat layer. In the data, there was a latitude, longitude, and
    a third field that contained a URL to an image. The following code shows you how
    to turn that data into a marker with a pop up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is a standard for a loop that starts with `0` and executes
    until you have iterated through all the points—`points.length`. This creates a
    marker by passing each point''s latitude and longitude, `points[i][0]` and `points[i][1]`,
    and converts them to a float value. Next, the `opacity` option is set to `0`.
    This makes the points invisible. The points are on the map, and they can be clicked
    on, but you cannot see them. This gives the appearance of the hotspot layer that
    contains the pop up. Lastly, the `bindPopup()` method is passed the URL to the
    image, `bindPopup(points[i][2])`, and is added to the map. The following screenshot
    shows you the pop up with the invisible markers and heat layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding markers to the heatmap](img/4812OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating heatmaps with heatmap.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating a heatmap that uses intensity can be accomplished in Leaflet using
    `heatmap.js`. You can get `heatmap.js` at [http://www.patrick-wied.at/static/heatmapjs/index.html](http://www.patrick-wied.at/static/heatmapjs/index.html).
    This includes the plugins for `leaflet.js` and other mapping packages. The process
    to create the heatmap is similar to the previous example. The following steps
    will walk you through creating a heatmap:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `LeafletEssentials.html`, add a reference to `heatmap.js` and `heatmap-Leaflet`
    with either a URL to a remote copy or the path to your local copy, as shown in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a JavaScript object with the `max` value of the intensity and an array
    of data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the heat layer and set the options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the data to the map. Because the data is in an object, you use dot notation,
    referencing it as `objectname.data`; in this case, `myData.data`. You could also
    use `myData[''data'']`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, modify your `map` object to add the layers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that currently, you might need to reference an older version of
    Leaflet. This will be updated in a future version of the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your map should look like what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating heatmaps with heatmap.js](img/4812OS_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Modifying the heatmap options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The heatmap allows you to modify three settings: `radius`, `opacity`, and `gradient`.
    Like the previous example, `gradient` controls the size of each point in the map.
    The `opacity` option allows you to specify a value between `0` and `1`. `0` is
    completely transparent and the heatmap layer will not show up on the map. The
    value `1` will make the heatmap layer solid, and you will not be able to see what
    is underneath each point. Somewhere between `.70` and `.80` seems to be the perfect
    opacity to view the heat layer and the base layer underneath. Lastly, the gradient,
    while best left alone, can be modified by setting a value of `0` to `1` and assigning
    a color. Colors in the gradient can be RGB values, or you can use color names:
    red, yellow, blue, or lime.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding more data to the map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will eventually need to add more data to the map after it has been drawn.
    To do this requires you to append values to the object and then add the object
    again. First, to add data to the JavaScript object, you can use the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `myData` object has a key data that is an array. You reference it by using
    `myData.data[index]`. You might not know how many items are in the array, so using
    the length of the array as the index, you will always get the next available index.
    This works because the length is the number of items, but the index starts at
    `0`. So, for a three-item array, the length is three but the last index is two.
    Using the length gives you the next empty index. Then, just assign a value to
    the index, and it will be appended to the object. Lastly, add the data to the
    map again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you do not use an index, you will overwrite the data with the one item you
    were trying to add.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an interactive heatmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A heatmap is an alternative visualization to a point map. A point map often
    becomes cluttered with large markers that make it hard to find hotspots. In an
    intensity heatmap, a single point could be a hotspot. The color coding of values
    in a heatmap makes it easy to see patterns in the data. Heatmaps can also be used
    to visualize other spatial data, such as tracking where a mouse moves on a web
    page or where a person''s eyes travel when reading something on the screen. In
    this example, you will learn how to create a heatmap that responds to user mouse
    clicks on the map:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, include a reference to `Leaflet.heat.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, disable the `doubleClickZoom` option on the map. Since the user will
    be clicking on the map to make the heatmap, you need to do this so that when the
    user clicks too fast, which they will, the map does not zoom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a blank dataset that can be added to the map. This allows the user to
    draw on a fresh canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the data to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a function to handle the user clicks. This function will add points
    to the layer by catching the latitude and longitude of the mouse click. The `e`
    parameter is an event object that is automatically sent on the map click. The
    object contains information about the event and, in this example, you take the
    latitude and longitude, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Connect the function to an event, in this case, `click`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your map, after clicking several times, should look like what is shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an interactive heatmap](img/4812OS_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Animating a heatmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have created a heatmap that showed you the current density of points
    and intensities, but what if you wanted to show a heatmap that changed over time?
    In this last example, you will learn how to create a heatmap animation.
  prefs: []
  type: TYPE_NORMAL
- en: 'An animated heatmap is not as complicated as it might sound. Animation is nothing
    more than adding and removing data from the map, and you have covered these skills
    earlier in the chapter. The trick to this example is in the organization of your
    data and taking advantage of timing events in JavaScript. The following steps
    will walk you through making an animated heatmap:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference the heatmap plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, separate your data into an array per time period. Name your data with
    the same name, plus a number that increments the number based on the time period.
    The following code can be used for this purpose:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a starting dataset to the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a variable that will iterate through the datasets and a string
    that holds the name of the datasets. Note that the iterator starts at `2`. This
    is because you loaded `points1` before the loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an interval and pass a function and the time in milliseconds (1,000
    milliseconds are equal to one second):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the function that will perform the animation. The following code creates
    a `name` string, that is, the data name concatenated with the iteration number.
    The current layer is removed from the map and the next layer is added. You cannot
    call a variable using a string as its name, so we use `window[name]`. Lastly,
    the code increments the `x` iterator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you load the map, you should see the first dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating a heatmap](img/4812OS_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, the data will change every second. The following screenshot shows you
    what the map will look like after a few seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating a heatmap](img/4812OS_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a choropleth map with Leaflet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous examples, you used heatmaps to color code a map based on the
    density or intensity of points. A choropleth map also measures the intensity or
    density of a statistical variable but within polygons. A popular choropleth map
    is the population density by county. Choropleth maps do not require any plugins,
    as was the case with the heatmap examples. A choropleth map is usually created
    by styling GeoJSON based on a property.
  prefs: []
  type: TYPE_NORMAL
- en: The GeoJSON data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When adding a large amount of GeoJSON data to a map, it is easier to place
    the code in a separate JavaScript file. This clears your HTML file of hundreds
    of lines of code, which makes it hard to focus on building the map. When you place
    the GeoJSON code in a JavaScript file, you will declare it as a variable, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is for a single feature. The complete file contains 153
    features. This would add over fifty 8.5" x 11" pages to your HTML file. Notice
    that the file is not GeoJSON but JavaScript. It is a variable declaration. When
    you reference this file in your HTML, you can call the `ct` variable in your script.
    Once you have your data as a variable in a JavaScript file, link to it in `LeafletEssentials.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code shows how you have referenced any included JavaScript file.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the color with a function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next step in making a choropleth map is to give each feature a color based
    on the statistical variable you are mapping. Define a function to handle the ranges
    of values, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code takes a parameter and measures a value, returning the color.
    Darker colors are returned for higher values. It is always best to stick to a
    standard coloring progression. Using a single hue progression—a single color from
    light to dark—should serve you well. Using a tool such as Color Brewer will help
    ensure that you use a good color scheme. You can find it at [http://colorbrewer2.org/](http://colorbrewer2.org/).
    This will provide you with color values in RGB, CMYK, and HEX.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the GeoJSON data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, you need to create a function to style the GeoJSON data. Using a function
    allows you to style each individual feature based on a property. The following
    code will style the features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The function takes the feature as a parameter and styles it using a few options.
    The important option is the `fillColor` option. This is where you call the `color()`function
    and pass the value of `AWATER10` for each feature. Lastly, add the `GeoJSONLayer`
    variable to the map and use the style function as a parameter, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code adds the layer to the map using the style function. The
    result will look like what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the GeoJSON data](img/4812OS_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using a total value, such as the area of water in a census tract, can be improved
    upon by normalizing your data using the land area. This is important because without
    normalization, values can be skewed. For example, assume two locations with a
    land area of 100 acres and 50 acres, respectively. If they both have a lake that
    is 10 acres, and you color code with normalization, they will be of the same color.
    When you normalize, the values will be `.1` and `.2`. The second location is 20
    percent water and the first is only 10 percent. This fact is lost without normalization.
    In the next example, you will build a map that shows the difference between total
    and normalized values.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a normalized choropleth map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, you will create a choropleth map that displays both the total
    area and the total area divided by the total land area. The following steps will
    walk you through this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the code from the previous example, add another color function with values
    for the new ranges. They will be much smaller values than values for the total:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define another style function. The key difference in this function is
    that the value passed to the color function will be `water`/`land`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create two buttons on the bottom of the map to select which choropleth map
    is to be displayed. Connect the buttons to a function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, write the functions that display the layers. Remove the other layer
    after you display the correct layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Your completed map should be blank. You did not load a layer on the map. You
    can now select which layer you want to see by clicking on one of the buttons on
    the bottom of the map. Try clicking on the other button. Click on the button labeled
    **Water/Land**. Your map should look like what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a normalized choropleth map](img/4812OS_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that once you normalize the land area, the areas with the most water—darkest
    red—are the small tracts near the **Rio Grande** area. These large tracts of land
    have water, but this makes up a small percent of the total area.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have taken your map-making skills beyond points, lines,
    polygons, and GeoJSON to create map visualizations—heatmaps and choropleth maps.
    You have learned how to use two different plugins to make heatmaps and how to
    style them for maximum visual effect. You also learned how to make your heatmap
    interactive and create animations to show the time series data. Choropleth maps
    did not require plugins. You learned how to style GeoJSON data to make a choropleth
    map. Lastly, you learned the difference between totals and normalized data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to create your own markers. You will
    also learn about several plugins that animate and enhance the markers on your
    map.
  prefs: []
  type: TYPE_NORMAL
