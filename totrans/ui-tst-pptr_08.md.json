["```js\nUser-Agent: <product> / <product-version> <comment>\n```", "```js\n\"Mozilla/5.0 (Macintosh; Intel Mac OS X 11_0_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\"\n```", "```js\nMozilla/5.0 (iPad; CPU OS 11_0 like Mac OS X) AppleWebKit/604.1.34 (KHTML, like Gecko) Version/11.0 Mobile/15A5341f Safari/604.1\n```", "```js\nconst iPhone = puppeteer.devices['iPhone 6'];\nawait page.emulate(iPhone);\n```", "```js\nconsole.log(Object.keys(puppeteer.devices));\n```", "```js\nawait page.emulate({\n    userAgent:\n        'Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1',\n    viewport: {\n        width: 360,\n        height: 780,\n        deviceScaleFactor: 3,\n        isMobile: true,\n        hasTouch: true,\n        isLandscape: false,\n    },\n});\n```", "```js\n/* Extra small devices (phones, 600px and down) */\n@media only screen and (max-width: 600px) {...}\n/* Small devices (portrait tablets and large phones, 600px and up) */\n@media only screen and (min-width: 600px) {...}\n/* Medium devices (landscape tablets, 768px and up) */\n@media only screen and (min-width: 768px) {...}\n/* Large devices (laptops/desktops, 992px and up) */\n@media only screen and (min-width: 992px) {...}\n/* Extra large devices (large laptops and desktops, 1200px and up) */\n@media only screen and (min-width: 1200px) {...}\n```", "```js\nit('Should visually match', async() => {\n  for(const device of ['iPhone 6', 'iPad', 'iPad landscape', ''])\n  {\n    const target = differencify.init({ chain: false, testName: 'Home ' + device });\n    await target.launch();\n    const page = await target.newPage();\n    if(device) {\n      await page.emulate(puppeteer.devices[device]);\n    } else {\n      await page.setViewport({ width: 1600, height: 1200 });\n    }\n    await page.goto(config.baseURL);\n    const image = await page.screenshot();\n    const result = await target.toMatchSnapshot(image)\n    await page.close();\n    await target.close();\n    expect(result).to.be.true;\n  }\n});\n```", "```js\nbeforeEach(async () => {\n    page = await browser.newPage();\n    await page.emulate(puppeteer.devices['iPhone 6']);\n    page.setDefaultTimeout(config.timeout);\n    pageModel = new LoginPageModel(page, config);\n    await pageModel.go();\n})\n```", "```js\nconst puppeteer = require('puppeteer');\nconst slow3G = puppeteer.networkConditions['Slow 3G'];\n(async () => {\n  const browser = await puppeteer.launch();\n  const page = await browser.newPage();\n  await page.emulateNetworkConditions(slow3G);\n  // other actions...\n  await browser.close();\n})();\n```", "```js\nconst NETWORK_PRESETS = {\n    GPRS: {\n        download: 50 * 1024 / 8,\n        upload: 20 * 1024 / 8,\n        latency: 500,\n    },\n    Good3G: {\n        download: 1.5 * 1024 * 1024 / 8,\n        upload: 750 * 1024 / 8,\n        latency: 40,\n    },\n    Regular4G: {\n        download: 4 * 1024 * 1024 / 8,\n        upload: 3 * 1024 * 1024 / 8,\n        latency: 20,\n    }\n};\nexport default NETWORK_PRESETS;\n```", "```js\nit('Should login on 3G', async() => {\n  await page.emulateNetworkConditions(NetworkPresets.Good3G);\n  await pageModel.login(config.username, config.password);\n  await page.waitForSelector('.thumbnail.card');\n});\n```", "```js\nit('Should login on 3G with custom settings', async() => {\n    await page.emulateNetworkConditions(\n    {\n      download: 750 * 1024 / 8,\n      upload: 250 * 1024 / 8,\n      latency: 100,\n    });\n  await pageModel.login(config.username, config.password);\n  await page.waitForSelector('.thumbnail.card');\n});\n```", "```js\nconst browser = await puppeteer.launch({ headless: false, defaultViewport: null});\nconst page = await browser.newPage();\nconst context = browser.defaultBrowserContext();\nawait context.overridePermissions('https://www.google.com/', ['geolocation']);\nawait page.setGeolocation({latitude: 48.8578349, longitude: 2.3249841});\nawait page.goto('https://www.google.com/');\nawait page.type('[name=\"q\"]', 'where to eat');\nawait page.keyboard.press('Enter');\nawait browser.close();\n```", "```js\nconst browser = await puppeteer.launch({ headless: false, defaultViewport: null});\nconst page = await browser.newPage();\nawait page.emulateTimezone('Europe/London')\nawait page.goto('https://www.unixtimestamp.com/');\nawait browser.close();\n```", "```js\nconst browser = await puppeteer.launch({headless: false, defaultViewport: null});\nconst page = await browser.newPage();\nawait page.setExtraHTTPHeaders({\n    'Accept-Language': 'fr'\n});\nawait page.goto('https://www.google.com/');\nawait browser.close();\n```", "```js\nconst browser = await puppeteer.launch();\nconst page = await browser.newPage();\nawait page.goto('https://www.packtpub.com/');\nawait page.emulateVisionDeficiency('achromatopsia');\nawait page.screenshot({ path: 'achromatopsia.png' });\nawait page.emulateVisionDeficiency('blurredVision');\nawait page.screenshot({ path: 'blurred-vision.png' });\nawait browser.close();\n```", "```js\nconst browser = await puppeteer.launch();\nconst page = await browser.newPage();\nawait page.goto('https://duckduckgo.com/');\nawait page.emulateMediaFeatures([{ name: 'prefers-color-scheme', value: 'dark' }]);\nawait page.screenshot({ path: 'dark.png' });\nawait browser.close();\n```", "```js\nconst browser = await puppeteer.launch();\nconst page = await browser.newPage();\nawait page.goto('https://github.com/puppeteer/puppeteer');\nawait page.emulateMediaType('print');\nawait page.screenshot({ path: 'print.png' });\nawait browser.close();\n```"]