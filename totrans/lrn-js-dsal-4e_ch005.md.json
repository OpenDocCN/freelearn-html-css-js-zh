["```js\nclass Stack {\n  #items = []; // {1}\n  // other methods\n} \n```", "```js\npush(item) {\n  this.#items.push(item);\n}\n```", "```js\npop() {\n  return this.#items.pop();\n}\n```", "```js\npeek() {\n  return this.#items[this.#items.length - 1];\n}\n```", "```js\nisEmpty() {\n  return this.#items.length === 0;\n}\n```", "```js\nget size() {\n  return this.#items.length;\n}\n```", "```js\nclear() {\n  this.#items = [];\n}\n```", "```js\nclear2() {\n  while (!this.isEmpty()) {\n   this.pop();\n  }\n}\n```", "```js\n// stack.js\nclass Stack {\n  // our Stack class implementation\n}\nmodule.exports = Stack;\n```", "```js\n// 01-using-stack-class.js\nconst Stack = require('./stack');\nconst myStack = new Stack();\n```", "```js\nnode src/04-stack/01-using-stack-class.js\n```", "```js\n// stack.js\nexport default class Stack {\n  // our Stack class implementation\n}\n```", "```js\nimport Stack from './stack.js';\nconst myStack = new Stack();\n```", "```js\nexport class Stack {\n  // our Stack class implementation\n}\n```", "```js\nimport { Stack } from './stack'; \nconst myStack = new Stack();\n```", "```js\nconst Stack = require('./stack');\nconst stack = new Stack();\n```", "```js\n console.log(stack.isEmpty()); // true\n```", "```js\nstack.push({action: 'typing', text: 'S'});\nstack.push({action: 'typing', text: 't'});\n```", "```js\n console.log(stack.peek()); // { action: 'typing', text: 't' }\n```", "```js\n console.log(stack.size); // 2\n```", "```js\nstack.push({action: 'typing', text: 'a'});\nstack.push({action: 'typing', text: 'c'});\nstack.push({action: 'typing', text: 'k'});\n```", "```js\nconsole.log(stack.size); // 5\nconsole.log(stack.isEmpty()); // false\n```", "```js\n stack.pop();\n    stack.pop();\n```", "```js\nconsole.log(stack.size); // 3\nconsole.log(stack.peek()); // { action: 'typing', text: 'a' }\n```", "```js\nconsole.log(stack);\n```", "```js\n[object Object],[object Object],[object Object]\n```", "```js\ntoString() {\n  if (this.isEmpty()) {\n    return \"Empty Stack\";\n  } else {\n    return this.#items.map(item => { // {1}\n      if (typeof item === 'object' && item !== null) { // {2}\n        return JSON.stringify(item); // Handle objects\n      } else {\n        return item.toString(); // Handle other types {3}\n      }\n    }).join(', '); // {4}\n  }\n}\n```", "```js\nclass Stack {\n  #items = {}; // {1}\n  #count = 0; // {2}\n  // other methods\n}\n```", "```js\npush(item) {\n  this.#items[this.#count] = item;\n  this.#count++;\n}\n```", "```js\n// src/04-stack/02-using-stack-object-class.js\nconst Stack = require('./stack-object');\nconst stack = new Stack();\nstack.push({action: 'typing', text: 'S'});\nstack.push({action: 'typing', text: 't'});\n```", "```js\n#items = {\n  0: { action: 'typing', text: 'S' },\n  1: { action: 'typing', text: 't' }}\n};\n#count = 2; \n```", "```js\nget size() {\n  return this.#count;\n}\n```", "```js\nisEmpty() {\n  return this.#count === 0;\n}\n```", "```js\npop() {\n  if (this.isEmpty()) { // {1}\n    return undefined;\n  }\n  this.#count--; // {2}\n  const result = this.#items[this.#count]; // {3}\n  delete this.#items[this.#count]; // {4}\n  return result; // {5}\n}\n```", "```js\n#items = {\n  0: { action: 'typing', text: 'S' },\n  1: { action: 'typing', text: 't' }}\n};\n#count = 2; \n```", "```js\npeek() {\n  return this.#items[this.#count - 1];\n}\n```", "```js\nclear() {\n  this.#items = {};\n  this.#count = 0;\n}\n```", "```js\ntoString() {\n  if (this.isEmpty()) {\n    return 'Empty Stack';\n  }\n  let objString = this.#itemToString(this.#items[0]); // {1}\n  for (let i = 1; i < this.#count; i++) { // {2}\n    objString += `, ${this.#itemToString(this.#items[i])}`; // {3}\n  }\n  return objString;\n}\n#itemToString(item) { // {4}\n  if (typeof item === 'object' && item !== null) {\n    return JSON.stringify(item); // Handle objects\n  } else {\n    return item.toString(); // Handle other types\n  }\n}\n```", "```js\n// src/04-stack/stack.ts\nclass Stack<T> { // {1}\n  private items: T[] = []; // {2}\n  push(item: T): void { }\n  pop(): T | undefined { }\n  peek(): T | undefined { }\n  isEmpty(): boolean { }\n  get size(): number { }\n  clear(): void { }\n  toString(): string { }\n}\nexport default Stack; // {3}\n```", "```js\n// src/04-stack/01-using-stack-class.ts\nimport Stack from './stack';\nenum Action { // {4}\n  TYPE = 'typing'\n}\ninterface EditorAction { // {5}\n  action: Action;\n  text: string;\n}\nconst stack = new Stack<EditorAction>(); // {6}\nstack.push({action: Action.TYPE, text: 'S'});\nstack.push({action: Action.TYPE, text: 't'});\n```", "```js\nnpx ts-node src/04-stack/01-using-stack-class.ts\n```", "```js\n// src/04-stack/decimal-to-binary.js\nconst Stack = require('./stack');\nfunction decimalToBinary(decimalNumber) {\n  const remainderStack = new Stack();\n  let binaryString = '';\n  if (decimalNumber === 0) { '0'; }\n  while (decimalNumber > 0) { // {1}\n    const remainder = Math.floor(decimalNumber % 2); // {2}\n    remainderStack.push(remainder); // {3}\n    decimalNumber = Math.floor(decimalNumber / 2); // {4}\n  }\n  while (!remainderStack.isEmpty()) { // {5}\n    binaryString += remainderStack.pop().toString();\n  }\n  return binaryString;\n}\n```", "```js\n// src/04-stack/decimal-to-base.js\nconst Stack = require('./stack');\nfunction decimalToBase(decimalNumber, base) {\n  if (base < 2 || base > 36) {\n    throw new Error('Base must be between 2 and 36');\n  }\n  const digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'; // {6}\n  const remainderStack = new Stack();\n  let baseString = '';\n  while (decimalNumber > 0) {\n    const remainder = Math.floor(decimalNumber % base);\n    remainderStack.push(remainder);\n    decimalNumber = Math.floor(decimalNumber / base);\n  }\n  while (!remainderStack.isEmpty()) {\n    baseString += digits[remainderStack.pop()]; // {7}\n  }\n  return baseString;\n}\n```", "```js\nconsole.log(decimalToBase(100345, 2)); // 11000011111111001\nconsole.log(decimalToBase(100345, 8)); // 303771\nconsole.log(decimalToBase(100345, 16)); // 187F9\nconsole.log(decimalToBase(100345, 35)); // 2BW0\n```", "```js\nconst isValid = function(s) {\n  const stack = []; // {1}\n  const open = ['(', '[', '{']; // {2}\n  const close = [')', ']', '}']; // {3}\n  for (let i = 0; i < s.length; i++) { // {4}\n    if (open.includes(s[i])) { // {5}\n      stack.push(s[i]);\n    } else if (close.includes(s[i])) { // {6}\n      const last = stack.pop(); // {7}\n      if (open.indexOf(last) !== close.indexOf(s[i])) { // {8}\n        return false;\n      }\n    }\n  }\n  return stack.length === 0; // {9}\n}\n```", "```js\nconst isValid2 = function(s) {\n  const stack = [];\n  const map = { // {10}\n    '(': ')',\n    '[': ']',\n    '{': '}'\n  };\n  for (let i = 0; i < s.length; i++) {\n    if (map[s[i]]) { // {11}\n      stack.push(s[i]);\n    } else if (s[i] !== map[stack.pop()]) { // {12}\n      return false;\n    }\n  }\n  return stack.length === 0;\n}\n```", "```js\nconst isValid3 = function(s) {\n  // opt 1: if the length of the string is odd, return false\n  if (s.length % 2 === 1) return false;\n  // opt 2: if the first character is a closing bracket, return false\n  if (s[0] === ')' || s[0] === ']' || s[0] === '}') return false;\n  // opt 3: if the last character is an opening bracket, return false\n  if (s[s.length - 1] === '(' ||\ns[s.length - 1] === '[' || s[s.length - 1] === '{') return false;\n  // remaining algorithm is same\n}\n```", "```js\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top();    // return 0\nminStack.getMin(); // return -2\n```", "```js\nclass MinStack {\n  stack = [];\n  minStack = []; // {1}\n  push(x) {\n    this.stack.push(x);\n    if (this.minStack.length === 0 ||\nx <= this.minStack[this.minStack.length - 1]) {\n      this.minStack.push(x);\n    }\n  }\n  pop() {\n    const x = this.stack.pop();\n    if (x === this.minStack[this.minStack.length - 1]) {\n      this.minStack.pop();\n    }\n  }\n  top() {\n    return this.stack[this.stack.length - 1];\n  }\n  getMin() {\n    return this.minStack[this.minStack.length - 1];\n  }\n}\n```"]