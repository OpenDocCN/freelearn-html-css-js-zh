- en: Scales and Grid Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to configure the scales that control how
    your chart is displayed in a Cartesian or radial grid. Scales are used in all
    charts except pie and doughnut. Cartesian charts, such as line, bar, scatter,
    and bubble, use a pair of perpendicular axes, each one with a scale automatically
    calculated by Chart.js to position data points. Data in charts, such as polar
    area and radar, use a single scale, placing the data points at different positions
    that originate from the center. You can configure scales, altering the way the
    data points are presented, for example, by using a logarithmic scale instead of
    a default linear scale for numerical values. You may also choose a sequential
    time scale instead of a category scale. There are also many ways to configure
    styles and change the way axes, grid lines, ticks, and labels are shown in your
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring scales
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cartesian axes, ticks, and grid lines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Radial axes, ticks, and grid lines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced scales configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring scales
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A *scale* is a transformation that enlarges or shrinks a data domain so that
    it fits a specific range. Chart.js scales data automatically, adjusting domain
    data values so they fit within the space reserved for the chart. A scale is represented
    by an *axis*, which is a directed line that represents the extent of the domain.
    The discrete values that are placed on an axis line are called `ticks`. A coordinate
    system with perpendicular or radial axes and discrete ticks forms a `grid`. Scales,
    axes, ticks, and grids exist in all charts, even if you don’t see them. They control
    how the data points will be displayed in the chart.
  prefs: []
  type: TYPE_NORMAL
- en: Cartesian charts have two scales, each represented by perpendicular axes, *x*
    and *y*, and radial charts have one scale, represented by the radius and angle.
    Radial scales are always linear, but Cartesian scales can be linear, logarithmic,
    categorical, or temporal. Chart.js also allows you to create your own scales.
  prefs: []
  type: TYPE_NORMAL
- en: In most charts, the axes, grid lines, and tick labels are visible by default,
    but you may wish to remove unnecessary lines, lighten colors, dash lines, and
    hide unused legends to maximize the data-ink ratio of your chart. Font sizes and
    colors can be configured for all labels, and you can conditionally hide data using
    callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: Cartesian configuration options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cartesian grids are used in scatter, bubble, bar, and line charts, and contain
    two sets of scales, one for each perpendicular axis. They are configured in an
    object assigned to the `options.scales` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can have multiple axes of each type. They can be stacked, placed side by
    side, or positioned on opposite sides. Each axis may be linked to a specific dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Polar area and radar charts use radial scales and configure a single `options.scale`
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'All axis configuration objects in Cartesian charts and the `scale` property
    in radial charts contain a `display` property, which receives a Boolean value
    (`true` or `false`), making it visible or not. The following code fragments hide
    all axes, grids and labels from a Cartesian chart and a radial chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown here. You can use this effect to create sparklines (small
    minimalistic visualizations). See the full code in `Scales/scales-1-Cartesian-display.html`
    and `scales-2-radial-display.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/131d9497-a313-4542-ba67-af7c3fb11548.png)'
  prefs: []
  type: TYPE_IMG
- en: A Cartesian chart and a radial chart with hidden axes, gridlines, and tick labels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code: *Scales/scales-1-Cartesian-display.html* and *scales-2-radial-display.html*'
  prefs: []
  type: TYPE_NORMAL
- en: Axes also support more than a dozen callback functions that can be used to configure
    labels, ticks, and other data displayed by each axis.
  prefs: []
  type: TYPE_NORMAL
- en: Cartesian axes, ticks, and grid lines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are five chart types that use Cartesian grids: bar, horizontalBar, line,
    scatter, and bubble. Every chart has two scales, one for each perpendicular axis.
    Each scale can be of four types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type:''linear''`: A numeric scale that can be used to compare values of the
    same order of magnitude.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type:''logarithmic''`: A numeric scale to compare values that differ in order
    of magnitude.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type:''category''`: A list of unordered categories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type:''time''`: An ordered list of instants. This scale requires the `moment.js`
    library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In most charts, at least one of the scales is numeric (linear or logarithmic).
    In scatterplots and bubble charts, both scales are numeric. Time-series charts
    use a numeric scale and a time scale, but you can also use a category scale. You
    can also create correlation charts where both scales are categories.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists common configuration options for all Cartesian axes
    (the three last are objects, which contain specific configuration parameters that
    will be described in separate sections):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `type` | `''logarithmic''`, `''linear''` (default for both axes in scatter
    and bubble charts, and in the *y* axis for line and bar charts), `''category''`
    (default in the *x* axis for bar and line charts),  `''time''` (requires the `moment.js`
    library) | Selects axis type. Note that some configuration properties are specific
    to certain types of axes, and others may not be supported. |'
  prefs: []
  type: TYPE_TB
- en: '| `position` | `top` or `bottom` (default) for `xAxes`; left (default) or right
    for `yAxes` | The axis position. If there is more than one axis in the same position,
    it will be placed below or to the left of the existing axis. You can sort them
    using `weight`. See `Cartesian/Cartesian-1-position.html`. |'
  prefs: []
  type: TYPE_TB
- en: '| `weight` | `Number` | Order axes when more than one axis is in the same position.
    Larger numbers are position the axes farther from the chart. See `Cartesian/Cartesian-2-weight.html`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `offset` | `true` or `false` (default for all axes except `type:''category''`
    in bar charts) | If `true`, adds space to each side of the axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `id` | `String` | Labels an axis so it can be related to a dataset, when
    using multiple axes. |'
  prefs: []
  type: TYPE_TB
- en: '| `gridLines` | `Object` | Configures grid lines. |'
  prefs: []
  type: TYPE_TB
- en: '| `scaleLabel` | `Object` | Configures scale titles. |'
  prefs: []
  type: TYPE_TB
- en: '| `ticks` | `Object` | Configures ticks. |'
  prefs: []
  type: TYPE_TB
- en: Configuration properties and objects for Cartesian scales
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also 14 life cycle callback functions not listed here. These properties
    are always used inside objects of the `scales.xAxes` or `scales.yAxes` arrays.
    A typical configuration is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This multi-level nesting hierarchy may sometimes be confusing. A common error
    is to place a property in the wrong object; no error messages are shown but nothing
    happens. In this chapter, we will use *axis* to refer to any axis object inside
    `xAxes` or `yAxes` (such as `axis.ticks.minor`, `axis.scaleLabel`), or use its
    full path from the `scales` object (such as `scale.yAxes[0].ticks.minor`). The
    exception is when they are listed in tables, but in this case the parent object
    will be qualified.
  prefs: []
  type: TYPE_NORMAL
- en: Numeric Cartesian scales
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two types of numeric scales. In all charts that use numeric scales,
    `type:'linear'` is the default, but it's not always the best option. A linear
    chart is best to compare data points of the same magnitude, but when the samples
    contain some values that are hundreds of times larger than others, data correlations
    may be hard to find.
  prefs: []
  type: TYPE_NORMAL
- en: Linear scales
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A linear scale was used to for the following scatter chart, which plots the
    populations of several countries, comparing their population in 1980 (*y *axis)
    with their population in 2015 (*x *axis). The data is from the United Nations
    (see `Data/WPP2017_UNH.csv` in the GitHub repository for this chapter). The median
    line represents the points where the population is the same. Countries that appear
    in the shaded area above the middle line experienced a decrease in population:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a51fadf9-49c9-4900-a25a-dbb931b604d1.png)'
  prefs: []
  type: TYPE_IMG
- en: A chart showing population increase/decrease from 1980 to 2015\. Due to the
    different order of magnitude between China, India, and the rest of the world,
    the linear scale is not the best choice
  prefs: []
  type: TYPE_NORMAL
- en: 'Code: *Numeric/numeric-1-linear.html*'
  prefs: []
  type: TYPE_NORMAL
- en: The two dots on the right side of the chart are India and China. All the other
    countries are concentrated in the lower-left corner of the chart. This chart is
    very difficult to read because it mixes values of different orders of magnitude.
    Most countries have a small population (in the order of millions), and when compared
    to China and India (billions), they end up cluttered near the beginning of the
    scale. In these situations, we should use a logarithmic scale.
  prefs: []
  type: TYPE_NORMAL
- en: Tooltips reveal the name of each country represented in the chart. You can check
    the full code for this chart in `Numeric/numeric-1-linear.html`. It's a mixed
    chart, with datasets of different types (line and scatter). We will explore mixed
    charts in [Chapter 7](6a377615-9cab-4346-817a-cecda0a2d90c.xhtml)*, Advanced Chart.js*.
  prefs: []
  type: TYPE_NORMAL
- en: Logarithmic scales
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Declaring the *type* property of an axis object as logarithmic will render
    its data according to a logarithmic scale. Change one of the axes of the previous
    example to `type: ''logarithmic''` and the line will become a curve, as shown
    as follows. It seems that the distribution of data points has improved in this
    visualization. They are a bit closer and the chart reveals some data that was
    not visible before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84e8354a-7ddc-492f-9a1b-af36f32832f0.png)'
  prefs: []
  type: TYPE_IMG
- en: Making one of the scales logarithmic improves the scatter chart, revealing hidden
    data
  prefs: []
  type: TYPE_NORMAL
- en: 'Code: *Numeric/numeric-2-log.html*'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can improve it. Since both scales contain the same population data, we can
    declare the type of both axes as logarithmic, as shown as follows. Now the curve
    becomes a line again, the points are much closer and easier to compare, and even
    more hidden data is revealed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45807683-7298-40ac-9ed8-7ee6d2b6b53f.png)'
  prefs: []
  type: TYPE_IMG
- en: An even better scatterplot with two logarithmic axes
  prefs: []
  type: TYPE_NORMAL
- en: 'Code: *Numeric/numeric-3-log.html*'
  prefs: []
  type: TYPE_NORMAL
- en: The full code for these last two examples is in `Numeric/numeric-2-log.html`
    and `numeric-3-log.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring axis titles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can add a label or title for each axis in any Cartesian chart using the
    `axis.scaleLabel` property (for example, `options.scales.xAxes[0].scaleLabel`
    configures the title for the first *x *axis). The following table lists the configurable
    properties of a `scaleLabel` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `display` | `true` or `false` (default) | Displays or hides the axis title
    |'
  prefs: []
  type: TYPE_TB
- en: '| `labelString` | `String` (default is `''''`) | The title for the axis |'
  prefs: []
  type: TYPE_TB
- en: '| `lineHeight` | `Number` | Spacing above and below the text |'
  prefs: []
  type: TYPE_TB
- en: '| `fontColor, fontFamily, fontStyle` | `String` | CSS font attributes |'
  prefs: []
  type: TYPE_TB
- en: '| `fontSize` | `Number` | Font size in pixels |'
  prefs: []
  type: TYPE_TB
- en: '| `padding` | `Number` | Spacing before and after the text |'
  prefs: []
  type: TYPE_TB
- en: Scale label (scale title) configuration for Cartesian scales. These properties
    are used in any axis.scaleLabel object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code fragment adds titles for the *x* and *y* axes of a bar chart
    that we created in [Chapter 3](af85e307-a9bc-47c5-be74-52727cbb7c2e.xhtml), *Chart.js
    – Quick Start*. Note that it''s not enough to just add `axis.scaleLabel.labelString`,
    you also have to set `axis.scaleLabel.display: true`, since the titles are hidden
    by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'See the full code in `Cartesian/Cartesian-3-scaleLabel.html`. The result is
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b743783-f4a3-45f4-9b7a-f338688a4cf7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Axis titles added with the *scaleLabel* property. Code: *Cartesian/Cartesian-3-scaleLabel.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ticks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ticks are discrete points placed along an axis. Their position determines how
    the data points will be plotted in relation to the axis. In numeric scales, the
    `axis.ticks` property configures numerical parameters such as the maximum and
    minimum values that an axis will display and the amount of ticks to show. In any
    Cartesian scale, it can be used apply styles to tick labels and configure padding
    and other positioning parameters. Tick markers are configured separately in the
    `axis.gridLines` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists tick properties that can be configured for any Cartesian
    scale:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `display` | `true` (default) or `false` | Shows or hides tick labels. |'
  prefs: []
  type: TYPE_TB
- en: '| `fontSize` | `Number` | The font size in pixels. |'
  prefs: []
  type: TYPE_TB
- en: '| `fontColor`, `fontFamily`, `fontStyle` | `String` | CSS font attributes.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `reverse` | `true` or `false` (default) | Reverses the order of tick labels.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `callback` | Function. Default: `d=>d` | The function receives the value
    of the tick. It can be used to hide ticks or change the values displayed. |'
  prefs: []
  type: TYPE_TB
- en: '| `labelOffset` | `Number`. Default: `0` | Offsets the label from the center
    point of the tick. |'
  prefs: []
  type: TYPE_TB
- en: '| `mirror` | `true` or `false` (default) | Flips labels around the axis to
    the inside of the chart. |'
  prefs: []
  type: TYPE_TB
- en: '| `padding` | `Number`. Default: `10` | Space between tick label and the axis.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `autoSkip` | `true` (default) or `false` | If there is not enough space for
    horizontal labels, they are skipped. `autoSkip:true` always shows them. |'
  prefs: []
  type: TYPE_TB
- en: '| `maxRotation` | `Number`. Default: `90` | Maximum rotation of label in the
    `xAxis`. |'
  prefs: []
  type: TYPE_TB
- en: '| `minRotation` | `Number`. Default: `0` | Minimum rotation of label in the
    `xAxis`. |'
  prefs: []
  type: TYPE_TB
- en: Tick configuration for Cartesian scales. These properties are used in any *axis.ticks*
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists additional tick properties supported by numeric scales
    (linear or logarithmic):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `min` | `Number` | The lower limit of the axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `max` | `Number` | The upper limit of the axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `suggestedMin` | `Number` | Will set this as the minimum, if the data’s minimum
    is larger. |'
  prefs: []
  type: TYPE_TB
- en: '| `suggestedMax` | `Number` | Will set this as the maximum, if the data’s maximum
    is smaller. |'
  prefs: []
  type: TYPE_TB
- en: '| `beginAtZero` | `true` (default) or `false` | Forces the axis to use zero
    as the lower limit. |'
  prefs: []
  type: TYPE_TB
- en: '| `stepSize` | `Number` | Sets a minimum step size between ticks. Overrides
    precision. |'
  prefs: []
  type: TYPE_TB
- en: '| `maxTicksLimit` | `Number`. Default is `11`. | Explicitly sets a maximum
    number of ticks for the axis. |'
  prefs: []
  type: TYPE_TB
- en: Tick configuration for linear and logarithmic scales. These properties are used
    in any *axis.ticks* object of these scales
  prefs: []
  type: TYPE_NORMAL
- en: 'The following configuration was applied to one of the bar charts we created
    in [Chapter 3](af85e307-a9bc-47c5-be74-52727cbb7c2e.xhtml)*, Chart.js – Quick
    Start*. It uses the `axis.ticks.callback` property to add the word `ocean` as
    a suffix to the tick labels in the horizontal axis. The vertical axis was reversed,
    making the bars appear upside-down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown here. See the full code in `Cartesian/Cartesian-4-ticks-style.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d41ce9cb-6d64-42d8-8ce2-f3104d9bf289.png)'
  prefs: []
  type: TYPE_IMG
- en: Tick configuration in Cartesian charts, reversing the vertical axis and adding
    text to labels in the horizontal axis with *axis.ticks.callback*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code: *Cartesian/Cartesian-4-ticks-style.html*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chart.js automatically calculates the minimum range for each of the axes so
    that the data can be rendered in the most efficient way possible. But you can
    explicitly set minimum and maximum values using `axis.ticks.min` and `axis.ticks.max`
    properties. In this case, any parts of the chart that fall out of range will not
    be displayed. Alternatively, you can use `axis.ticks.suggestedMin` and `axis.ticks.suggestedMax`,
    which also limit the range, but only if no data values are left out. The following
    code applies these properties to a scatter chart, and adds more ticks (default
    maximum is `11`) by setting a smaller value for `axis.ticks.stepSize`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this configuration is shown as follows. The full code is in `Cartesian/Cartesian-5-ticks-minmax.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de9cd74b-0937-447d-9611-cd44ead0fb9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Tick configuration in numeric charts: step size and minimum value'
  prefs: []
  type: TYPE_NORMAL
- en: 'Code: *Cartesian/Cartesian-5-ticks-minmax.html*'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring grid lines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cartesian grids support several properties that change their appearance on the
    screen. You can change colors, line widths, line styles, tick size, spacing for
    the grid lines, and different styles for the zero line. You can also show and
    hide grid lines, ticks, and borders, reducing the amount of unnecessary chart
    junk and making your chart more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'These properties are configured in the `gridLines` object inside each object
    of the `xAxes` or `yAxes` arrays and are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `display` | `true` (default) or `false` | Shows or hides the grid lines for
    this axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `color` | A CSS color or array of colors; default is `‘rgba(0,0,0,.1)’` |
    The color of the grid lines. If an array is used, sets a color for each line.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `lineWidth` | `Number`; default is `1` | The width of the grid lines. |'
  prefs: []
  type: TYPE_TB
- en: '| `borderDash` | `Number[]` | A dash array for the grid lines. |'
  prefs: []
  type: TYPE_TB
- en: '| `borderDashOffset` | `Number` | The dash offset for the grid lines. |'
  prefs: []
  type: TYPE_TB
- en: '| `drawBorder` | `true` (default) or `false` | Draws/hides the axis line. |'
  prefs: []
  type: TYPE_TB
- en: '| `drawOnChartArea` | `true` (default) or `false` | Draws/hides grid lines
    inside the chart for the axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `drawTicks` | `true` (default) or `false` | Draws/hides the tick marks. |'
  prefs: []
  type: TYPE_TB
- en: '| `tickMarkLength` | `Number` | The size of the tick mark. |'
  prefs: []
  type: TYPE_TB
- en: '| `zeroLineWidth` | `Number` | The width of the zero line. |'
  prefs: []
  type: TYPE_TB
- en: '| `zeroLineColor` | CSS color | The color of the zero line. |'
  prefs: []
  type: TYPE_TB
- en: '| `zeroLineBorderDash` | `Number[]` | A dash array for the zero line. |'
  prefs: []
  type: TYPE_TB
- en: '| `zeroLineBorderDashOffset` | `Number` | The dash offset for the zero line.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `offsetGridLines` | `true` or `false` | Moves the grid lines between labels
    (default in bar charts). |'
  prefs: []
  type: TYPE_TB
- en: Configuration of gridlines in Cartesian scales. These properties are used in
    any *axis.gridLines* object
  prefs: []
  type: TYPE_NORMAL
- en: 'Some grid-line configuration examples are shown here. This code applies different
    colors to the vertical grid lines and a dash array for the horizontal lines. The
    axis lines are hidden because `axis.gridLines.drawBorder` is `false`. A different
    width and color was applied to the zero lines on both axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown in the following screenshot. The full code is in `Cartesian/Cartesian-6-grid-styles.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37f48ab5-885b-4a64-9481-7fd53b231be6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Vertical grid lines with different colors and horizontal lines with dash arrays.
    Both axis lines are hidden with *axis.gridLines drawBorder: false*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Code: Cartesian/Cartesian-6-grid-styles.html'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tick marks are lines that cross outside of the chart area. You can hide them
    with `axis.gridLines.drawTicks:false` or make them longer or shorter with `axis.gridLines.tickMarkLength`.
    You can hide `gridLines` inside the chart area with `axis.gridLines.drawOnChartArea:false`
    and the axis line with `axis.gridLines.drawBorder:false`. These properties were
    used to configure the following chart (`Cartesian/Cartesian-7-grid-styles.html`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/37f48ab5-885b-4a64-9481-7fd53b231be6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Vertical grid with an *axis.gridLines.tickMarkLength* of 15 pixels and *axis.gridLines
    drawOnChartArea: false*. Horizontal grid hides axis with *axis.gridLines drawBorder:
    false*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Code: *Cartesian/Cartesian-7-grid-styles.html*'
  prefs: []
  type: TYPE_NORMAL
- en: 'This configuration hides `ticks` and `gridLines` to produce a minimalistic
    chart with a single centered *y *axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The result applied to a line chart is shown here. See the full code in `Cartesian/Cartesian-8-grid-minimal.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53da0f54-57a3-41c9-b9e9-e9851b3a5613.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A chart with minimal grid markings Code: *Cartesian/Cartesian-8-grid-minimal.html*'
  prefs: []
  type: TYPE_NORMAL
- en: Category scales
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Typical bar and line charts use a category scale for the *x* axis, and a numeric
    scale for the *y *axis. Multiple datasets reuse the same category data. In these
    charts, the values used for the category axis are obtained from the `labels` property
    of the data object. If a dataset has a `labels` property, its *x *axis will automatically
    be defined as `type:category`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the axes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Category scales share the same axis configuration as numeric charts, but support
    some additional properties in the `axis` and `axis.ticks` objects. The `axis`
    object has one additional property that can be used to override the data object
    `labels` for an axis:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `labels` | Array of String | An array of labels to display. Overrides any
    other definition for labels, including data object properties: `labels`, `xLabels`,
    or `yLabels`. |'
  prefs: []
  type: TYPE_TB
- en: Additional axis configuration for category scales
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code fragment shows category labels defined in three different
    properties. Since the single *x *axis contains a `labels` property, it will override
    all previous definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can create charts that have category scales for both *x* and *y* axes in
    Chart.js with the `xLabels` and `yLabels` properties in the data object. The first
    axis of each type will use them. The `data` and `xLabels` array have the same
    size. Each element in the `xLabels` array is related to a corresponding item from
    the `data` array, which contains values from the `yLabels` array. This creates
    a one-to-many relationship between the categories. There is a single *y* value
    shared by many *x* values.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, properties were set for all axes using `Global.defaults.scale`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown as follows. See the full code in `Category/category-1-one-to-many.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b19ed0d1-eab6-4980-86ee-d008d56c99db.png)'
  prefs: []
  type: TYPE_IMG
- en: A correlation chart for one-to-many relationships created with two *type:’category’*
    axes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code: *Category/category-1-one-to-many.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also create many-to-many categorical relationships, but it won’t work
    with category scales. You have to set up a scatter chart with two numeric linear
    scales and then map the numbers back to categories using a callback. The following
    code shows how to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown as follows. See the full code in `Category/category-2-many-to-many.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce4a8cf0-7214-45c6-93f7-a632301764cb.png)'
  prefs: []
  type: TYPE_IMG
- en: A correlation chart for many-to-many relationships created with two *type:'linear'*
    axes and numerical values mapped to categories
  prefs: []
  type: TYPE_NORMAL
- en: 'Code: *Category/category-2-many-to-many.html*'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ticks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Category scales extend the `axis.ticks` configuration for Cartesian charts
    with three additional properties, listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `labels` | `String` | The tick `labels` array. This overrides any previous
    declarations of this array. |'
  prefs: []
  type: TYPE_TB
- en: '| `min` | `String` | A string in `axis.ticks.labels` that represents the lower
    limit for the categorical data. |'
  prefs: []
  type: TYPE_TB
- en: '| `max` | `String` | A string in `axis.ticks.labels` that represents the upper
    limit for the categorical data. |'
  prefs: []
  type: TYPE_TB
- en: Additional tick configuration properties for category scales
  prefs: []
  type: TYPE_NORMAL
- en: The `axis.ticks.min` and `axis.ticks.max` properties depend on the order that
    the strings appear in the `axis.ticks.labels` array. If the order is reversed,
    the result could be an empty chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the bar chart we created in [Chapter 3](af85e307-a9bc-47c5-be74-52727cbb7c2e.xhtml), *Chart.js –
    Quick Start*, with the category labels in reverse order and with five bars instead
    of seven. The missing bars were removed by the axis.ticks.min and axis.ticks.max
    properties for category scales, which accept strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown here. See the full code in `Category/category-3-minmax.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da147e9d-3a7b-4083-81f9-46528a094470.png)'
  prefs: []
  type: TYPE_IMG
- en: Using *axis.ticks*.*min* and *axis.ticks*.*max* to restrict the range of a category
    scale.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code: *Category/category-3-minmax.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring grid lines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Category scales share the same `axis.gridLines` configuration used by numeric
    scales.
  prefs: []
  type: TYPE_NORMAL
- en: Time scales
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use simple string categories to represent dates and temporal information,
    but by using an axis of the time type, you can parse, format, and generate temporal
    data. This allows greater flexibility and interactivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'The time scale requires the `moment.js` library ([momentjs.com](http://momentjs.com)).
    To use the time scale, you can either import the `moment.js` library or include
    the `Chart.bundle.js` library in your page. It''s best to import `moment.js` since
    you might want to use other date and time functions. You can do that including
    by it in your page via CDN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The data is usually configured using the point structure, where the *x* property
    is a Date and the *y* property is some quantitative value. You can also use the
    t property instead of *x*. Many standard date formats are parsed automatically.
    These are some valid data points for time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also include dates in a simple data object `labels` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a minimal example. This code uses the `moment.js` library to generate
    a list of dates using the `moment.js` library and creates a dataset of 10 dates.
    It uses the default values of all time-scale properties except `axis.time.unit`,
    which informs the unit that should be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Offsets move bars and `gridLines` so that they stay within the chart. This
    is the default in bar charts with category scales, but not time scales. The result
    is shown here (`Time/time-1.html`). Note that the bars are not equally spaced,
    but the time intervals are. This is the default configuration, but you can change
    it, as we will see next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf8df45b-5653-4e60-9132-52e5635d47c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A bar chart using a time scale with default configuration. Code: *Time/time-1-html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the time format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Properties that are specific for time scales are configured in the `axis.time`
    property. It receives an object. Some of these properties are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `unit` | `millisecond`, `second`, `minute`, `hour`, `day`, `week`, `month`,
    `quarter`, `year` | The unit of time to consider for the data. |'
  prefs: []
  type: TYPE_TB
- en: '| `stepSize` | `Number` | The minimum step between values in the scale (this
    may group several values in a single tick). |'
  prefs: []
  type: TYPE_TB
- en: '| `displayFormats` | Object, containing zero or more time units as String properties
    | This object is used to override the default string format used for each unit.
    See supported tokens below. |'
  prefs: []
  type: TYPE_TB
- en: '| `tooltipFormat` | A string with a date format, such as `MMMM`, `YYYY`, or
    `h:mm:ss` | A format string to display data/time information in tooltips. See
    supported tokens below. |'
  prefs: []
  type: TYPE_TB
- en: Selected properties of the *axis.time* object
  prefs: []
  type: TYPE_NORMAL
- en: 'Time scales use `moment.js` formats, which are based on standard date/time
    formatting tokens. The default formats for each unit and the output they produce
    are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Unit** | **Default format** | **Output example** |'
  prefs: []
  type: TYPE_TB
- en: '| `Millisecond` | `h:mm:ss.SSS A` | `2:07:36.976 PM` |'
  prefs: []
  type: TYPE_TB
- en: '| `Second` | `h:mm:ss A` | `2:07:36 PM` |'
  prefs: []
  type: TYPE_TB
- en: '| `Minute` | `h:mm A` | `2:07 PM` |'
  prefs: []
  type: TYPE_TB
- en: '| `Hour` | `hA` | `2 PM` |'
  prefs: []
  type: TYPE_TB
- en: '| `Day` | `MMM D` | `Feb 24` |'
  prefs: []
  type: TYPE_TB
- en: '| `Week` | `ll` | `Feb 24 2019` |'
  prefs: []
  type: TYPE_TB
- en: '| `Month` | `MMM YYYY` | `Feb 2019` |'
  prefs: []
  type: TYPE_TB
- en: '| `Quarter` | `[Q]Q - YYYY` | `Q1 – 2019` |'
  prefs: []
  type: TYPE_TB
- en: '| `Year` | `YYYY` | `2019` |'
  prefs: []
  type: TYPE_TB
- en: Default time unit formats used in time scales
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to format date/time in a specific way, you can use the `axis.time.displayFormats`
    property to override the default format for the time units you are using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You can combine the following tokens and create a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Tokens** | **Output** |'
  prefs: []
  type: TYPE_TB
- en: '| `Day of month` | `D, Do, DD` | `1 2 … 31, 1st 2nd … 31st, 01 02 … 31` |'
  prefs: []
  type: TYPE_TB
- en: '| `Day of week` | `d, ddd, dddd` | `0 1 … 6, Sun Mon … Sat, Sunday, Monday
    … Saturday` |'
  prefs: []
  type: TYPE_TB
- en: '| `Month` | `M, MM, MMM, MMMM` | `1 2 … 12, 01 02 … 12, Jan Feb … Dec, January
    February … December` |'
  prefs: []
  type: TYPE_TB
- en: '| `Quarter` | `Q, Qo` | `1 2 3 4, 1st 2nd 3rd 4th` |'
  prefs: []
  type: TYPE_TB
- en: '| `Year` | `YYYY, Y` | `1970 1971 … 2030, 1970 1971 … 9999` |'
  prefs: []
  type: TYPE_TB
- en: '| `AM/PM` | `A, a` | `AM PM, am pm` |'
  prefs: []
  type: TYPE_TB
- en: '| `AM/PM` | `A, a` | `AM PM, am pm` |'
  prefs: []
  type: TYPE_TB
- en: '| `Hour` | `H, HH, h, hh` | `0 1 … 23, 00 01 … 23, 1 2 … 12, 01 02 … 12` |'
  prefs: []
  type: TYPE_TB
- en: '| `Minute` | `m, mm` | `0 1 … 59, 00 01 … 59` |'
  prefs: []
  type: TYPE_TB
- en: '| `Second` | `s, ss` | `0 1 … 59, 00 01 … 59` |'
  prefs: []
  type: TYPE_TB
- en: '| `Millisecond` | `SSS` | `000 001 … 999` |'
  prefs: []
  type: TYPE_TB
- en: '| `Time zone` | `ZZ` | `-0700 -0600 … +0700` |'
  prefs: []
  type: TYPE_TB
- en: Most common tokens for creating date-string formats
  prefs: []
  type: TYPE_NORMAL
- en: There are also other localized formats. See additional options in the documentation
    for `moment.js` (`momentjs.com/docs/#/displaying/format`).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the axes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Time scales support all properties for Cartesian scales and add two additional
    properties, listed in the following table. These properties are configured in
    each axis (for example, `scales.xAxes[0].bounds)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `bounds` | data (default), ticks | Sets the scale boundary strategy. The
    default data will re-dimension the axes to fit the data. Using ticks, the chart
    will be truncated to fit the scales. |'
  prefs: []
  type: TYPE_TB
- en: '| `distribution` | linear (default) or series | How the data is distributed
    on the axis. If series, the data values will be equally spaced. If linear, the
    instants will be equally spaced. |'
  prefs: []
  type: TYPE_TB
- en: Additional axis configuration properties for time scales
  prefs: []
  type: TYPE_NORMAL
- en: 'In the last example, the bars were unevenly positioned because the default
    distribution preserved the time instants. In this example, the bars will be evenly
    spaced, but the periods between them will not be uniform. The data is bounded
    by the ticks, instead of the data points, and the date format for the days displays
    the abbreviated month, day, and year:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown as follows. See the full code in `Time/time-2.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75b29f22-a865-41c7-8b78-3e44dfe0719d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A bar chart with a time scale with equally-distributed bars, and tick bounds.
    Code: *Time/time-2.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ticks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Time scales extend the *axis.ticks* configuration for Cartesian charts with
    an additional property, listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `source` | `auto` (default), `data` (default, if data in point format), `labels`
    (default, if data in array format) | Selects where to obtain the entries for the
    time scale. |'
  prefs: []
  type: TYPE_TB
- en: Additional tick configuration properties for time scales
  prefs: []
  type: TYPE_NORMAL
- en: 'The `axis.ticks.source` property allows you to select the source of the data
    for the time scale. If your dataset is a simple array and the dates are in the
    labels array, the default configuration will automatically get the dates from
    there. You can also set this property explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown here. See the full code in `Time/time-3.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/686810fd-46e2-45da-bc51-a8607fa95b19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A bar chart with a time scale using the *labels* array as a source for the
    tick data. Code: *Time/time-3.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring grid lines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Time scales share the same `axis.gridLines` configuration used by numeric scales.
  prefs: []
  type: TYPE_NORMAL
- en: Radial scales
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Two Chart.js chart types use radial scales: `radar` and `polarArea`. Radial
    charts that have a single scale are configured with the properties listed here.
    Some properties are similar to the properties used in Cartesian scales, but they
    have fewer configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `pointLabels` | `Object` | Configure point labels |'
  prefs: []
  type: TYPE_TB
- en: '| `ticks` | `Object` | Configure chart ticks |'
  prefs: []
  type: TYPE_TB
- en: '| `angleLines` | `Object` | Configures radial grid lines |'
  prefs: []
  type: TYPE_TB
- en: '| `gridLines` | `Object` | Configure concentric grid lines |'
  prefs: []
  type: TYPE_TB
- en: Configuration objects for radial scales
  prefs: []
  type: TYPE_NORMAL
- en: 'These properties are used directly inside the `options.scale` object. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Configuring point labels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Point labels are the labels that are displayed around the radial chart, at
    each angle line. Tick labels are placed inside the chart over the first angle
    line and have a backdrop. Point labels are configured with the `scale.pointLabels`
    property, which is an object with the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `display` | `true` (default in radar) or `false` (default in polar area)
    | Displays or hides the axis labels |'
  prefs: []
  type: TYPE_TB
- en: '| `callback` | Function; default is `d=>d` | Returns the value label for each
    point |'
  prefs: []
  type: TYPE_TB
- en: '| `fontColor`, `fontFamily`, `fontStyle` | Strings containing CSS font attributes
    | Font attributes |'
  prefs: []
  type: TYPE_TB
- en: '| `fontSize` | Number | Font size in pixels |'
  prefs: []
  type: TYPE_TB
- en: Properties for point label configuration in radial axes
  prefs: []
  type: TYPE_NORMAL
- en: You can hide `pointLabels` using `display:false` in a radial chart (see the
    following diagram). If you are using a polar area chart, you can use `display:true`
    if you want to make them visible. See `Radial/radial-1-pointLabels-hide.html`
    and `radial-2-pointLabels-polar.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code uses some other `pointLabel` properties to change the color
    of the labels in a radar chart and uses a callback to append text to each label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'See the full code in `Radial/radial-3-pointLabels-callback.html`. The result
    is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6db3b15d-b4d5-4a8d-98c3-a4249eb7ca73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Radial scales point labels configuration. Left: Hiding labels with scale.pointLabels.display
    *= false*. Right: Changing color and appending text with a callback. Code: Radial/radial-1-pointLabels-hide.html
    and *radial-3-pointLabels-callback.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ticks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ticks in radial axes are concentric circles (which can be rendered as circles
    or multi-sided regular polygons, with vertices at each angle line). Tick labels
    are placed on the circles with a backdrop behind them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ticks are configured in the `scale.ticks` object with the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `display` | `true` (default) or `false` | Shows or hides tick labels. |'
  prefs: []
  type: TYPE_TB
- en: '| `fontSize` | `Number` | The font size in pixels. |'
  prefs: []
  type: TYPE_TB
- en: '| `fontColor`, `fontFamily`, `fontStyle` | `String` | CSS font attributes.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `reverse` | `true` or `false` (default) | Reverses the order of tick labels.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `callback` | Function; default: `d=>d` | The function receives the value
    of the tick. It can be used to hide ticks or change the values displayed. |'
  prefs: []
  type: TYPE_TB
- en: '| `min` | `Number` | The lower limit of the axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `max` | `Number` | The upper limit of the axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `suggestedMin` | `Number` | Will set this as the minimum, if the data''s
    minimum is larger. |'
  prefs: []
  type: TYPE_TB
- en: '| `suggestedMax` | `Number` | Will set this as the maximum, if the data''s
    maximum is smaller. |'
  prefs: []
  type: TYPE_TB
- en: '| `beginAtZero` | `true` (default) or `false` | Forces the axis to use zero
    as the lower limit. |'
  prefs: []
  type: TYPE_TB
- en: '| `stepSize` | `Number` | Sets a minimum step size between ticks. |'
  prefs: []
  type: TYPE_TB
- en: '| `maxTicksLimit` | `Number`; default is `11` | Explicitly sets a maximum number
    of ticks for the axis. |'
  prefs: []
  type: TYPE_TB
- en: '| `showLabelBackdrop` | `true` or `false`; default is true | Draws a background
    behind tick labels over the grid lines. |'
  prefs: []
  type: TYPE_TB
- en: '| `backdropPaddingX backdropPaddingY` | `Number`; default is `2` | Backdrop
    padding. |'
  prefs: []
  type: TYPE_TB
- en: '| `backdropColor` | `Color`; default is `rgba(255,255,255,.75)` | Color of
    the label backdrops. |'
  prefs: []
  type: TYPE_TB
- en: Tick properties for radial scales
  prefs: []
  type: TYPE_NORMAL
- en: 'Tick properties are similar to those used in Cartesian linear charts. The following
    code shows some tick configurations applied to a radar chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown here. See the full code in `Radial/radial-4-ticks.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27c3cb27-0156-4221-aeb4-2246a5751c17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Radar chart with some tick configurations. *Code: Radial/radial-4-ticks.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring grids and angle lines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following properties are used to configure the radial lines (`scale.angleLines`)
    and concentric circles or polygons (`scale.gridLines`) of a radial grid. All properties
    listed are supported for both objects except circular, which is supported only
    by `scale.gridLines`:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Property** | **Value** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `display` | `true` (default in radar) or `false` (default in polar area)
    | Shows or hides lines. |'
  prefs: []
  type: TYPE_TB
- en: '| `color` | `Color` | Color of the lines. |'
  prefs: []
  type: TYPE_TB
- en: '| `circular` | `true` (default in polar area) or `false` (default in radar)
    | In `gridLines` object only. If true, `gridLines` are circular. Otherwise, they
    are straight lines between points. |'
  prefs: []
  type: TYPE_TB
- en: '| `lineWidth` | `Number` | The width of the lines. |'
  prefs: []
  type: TYPE_TB
- en: Configuration for grid and angle lines in radial grids
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code configures several grid and angle line properties in a radial
    chart. It changes the grid lines to circular, and also changes the line width
    and colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The result applied to a radar chart is shown as follows. See the full code
    in `Radial/radial-5-grid-angle-lines.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2b9b570-ab50-4edf-b646-4a31bf2cd8cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Radar chart with grid and angle lines configurations. *Code: Radial/radial-5-grid-angle-lines.html*'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring advanced scales
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section contains a brief overview on some configurations that you will
    probably not use very often. For more details on these topics, refer to the official
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple Cartesian axes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You only need two axes to plot data in a two-dimensional Cartesian grid, but
    you can add more if you need to. You may wish to repeat axis titles or tick labels
    on both sides of a chart for clarity. You may also wish to show two datasets with
    different scales (although this is usually a bad practice in data visualization).
  prefs: []
  type: TYPE_NORMAL
- en: If you have multiple axes, you can control their positions with the `axis.weight`
    and `axis.position` properties. Unless you connect an axis to a specific dataset
    using the `id` property, the first axis in the `yAxis` array will be used for
    all datasets. A dataset is linked to an axis using the `yAxisID` or `xAxisID`
    properties that reference the ID of an axis. See `Advanced/adv-1-position-evil.html`
    for an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code fragment configures three axes for a chart, and places them
    on different sides of the chart. It doesn’t explicitly link any dataset, since
    they all use the same scales:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'See the full code in `Cartesian/Cartesian-1-position.html`.The result is shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/074dc75b-175f-4b11-8e44-a2ea665fb563.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A chart with three axes, in different positions. Code: *Cartesian/Cartesian-1-position.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also stack axes on the same side, as shown as follows. This is useful
    in categorical scales when you wish to add a context. In this example, an extra
    category scale was added for the oceans:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is shown as follows. See the full code in `Cartesian/Cartesian-2-weight.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8906d83-d538-458e-beb1-b11d77ade4ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A chart with two category axes on the same side. Code: *Cartesian/Cartesian-2-weight.html.*'
  prefs: []
  type: TYPE_NORMAL
- en: It might be a good idea to hide or configure the grid lines from the second
    category scale, so they won’t leak into the chart area.
  prefs: []
  type: TYPE_NORMAL
- en: Callbacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you need to filter or change individual tick labels, you can use life cycle
    callbacks. There are 14 of them and they are configured directly in each axis
    object. The following code a callback to filter ticks based on their value (increasing
    the step) and at a later stage, changes the value to be displayed (at this stage,
    the change no longer affects the chart):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See the full code in `Advanced/adv-2-callbacks.html` and `adv-3-radial-callbacks.html`.
  prefs: []
  type: TYPE_NORMAL
- en: The scale service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The scale service can be used to update scales during changes. You can use
    it to pass a partial configuration that will be merged with the current configuration.
    In the following code, it was used to set the minimum boundary for ticks in the
    linear scale, and append text to tick labels in the category scale:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: See the full code in `Advanced/adv-4-scaleService.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned how to configure the different kinds of scales
    supported by Chart.js: the linear scale used in radial charts, such as radar and
    polar area, and the Cartesian scales used in scatter, bubble, line, and bar charts.
    You can configure scales in ways that change how data is presented, or style the
    grid lines and labels to add context to a chart.'
  prefs: []
  type: TYPE_NORMAL
- en: We also compared different types of Cartesian charts, showing why sometimes
    it's better to use a logarithmic scale instead of a linear scale. We created category
    charts without any numeric scales and explored time scales.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore configuration in greater detail, efficiently
    using colors, fonts, and interactivity to control the appearance of charts using
    callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Books and websites**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chart.js official documentation and samples: [https://www.chartjs.org/docs/latest/](https://www.chartjs.org/docs/latest/)Zoom
    plugin: [https://github.com/chartjs/chartjs-plugin-zoom](https://github.com/chartjs/chartjs-plugin-zoom)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
