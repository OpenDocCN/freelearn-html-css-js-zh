["```js\n$ npm init\n\n```", "```js\n$ npm install --save express \n\n```", "```js\nvar express = require('express');\nvar app = express();\n\napp.get('/', function(req, res, next) {\n res.send('Hello, World!');\n});\n\napp.listen(3000);\nconsole.log('Express started on port 3000');\n```", "```js\n$ node server.js\n\n```", "```js\n$ npm install --save jade\n\n```", "```js\napp.set('view engine', 'jade');\napp.set('views', __dirname + '/views');\n\napp.get('/', function(req, res, next) {\nres.render('index');\n});\n```", "```js\napp.engine('jade', require('jade').__express);\napp.engine('html', require('ejs').__express);\napp.get('/html', function(req, res, next) {\nres.render('index.html');\n});\n\napp.get(/'jade, function(req, res, next) {\nres.render('index.jade');\n});\n```", "```js\n$ npm install --save passport-local\n\n```", "```js\n$ npm install --save mongoose bcrypt validator\n\n```", "```js\nVar mongoose = require('mongoose');\n\nvar userSchema = new mongoose.Schema({\n email: {\n   type: String,\n   required: true,\n   unique: true\n },\n password: {\n   type: String,\n   required: true\n },\n created_at: {\n   type: Date,\n   default: Date.now\n }\n});\n\nuserSchema.pre('save', function(next) {\n if (!this.isModified('password')) {\n   return next();\n }\n this.password = User.encryptPassword(this.password);\n next();\n});\n```", "```js\nVar validator = require('validator');\n\nUser.schema.path('email').validate(function(email) {\n return validator.isEmail(email);\n});\n\nUser.schema.path('password').validate(function(password) {\n return validator.isLength(password, 6);\n});\n\nvar User = mongoose.model('User', userSchema);\nmodule.exports = User;\n```", "```js\n// passport.js\nvar passport = require('passport');\nvar LocalStrategy = require('passport-local').Strategy;\nvar User = require('mongoose').model('User');\n\npassport.serializeUser(function(user, done) {\n done(null, user.id);\n});\n\npassport.deserializeUser(function(id, done) {\nUser.findById(id, done);\n});\n```", "```js\nfunction authFail(done) {\n done(null, false, { message: 'incorrect email/password combination' });\n}\n\npassport.use(new LocalStrategy(function(email, password, done) {\n  User.findOne({\n    email: email\n  }, function(err, user) {\n    if (err) return done(err);\n    if (!user) {\n      return authFail(done);\n    }\n    if (!user.validPassword(password)) {\n      return authFail(done);\n    }\n    return done(null, user);\n  });\n}));\n```", "```js\n// server.js\nvar mongoose = require('mongoose');\nvar User = require('./models/user');\nvar passport = require('./passport');\n\nmongoose.connect('mongodb://localhost/chapter01', function(err) {\n if (err) throw err;\n});\n…\napp.use(require('cookie-parser')('my secret string'));\napp.use(require('express-session')({ secret: \"my other secret string\" }));\napp.use(require('body-parser')());\napp.use(passport.initialize());\napp.use(passport.session());\n```", "```js\n// controllers/user.js\nvar User = require('mongoose').model('User');\n\nmodule.exports.showRegistrationForm = function(req, res, next) {\n  res.render('register');\n};\n\nmodule.exports.createUser = function(req, res, next) {\n  User.register(req.body.email, req.body.password, function(err, user) {\n    if (err) return next(err);\n    req.login(user, function(err) {\n      if (err) return next(err);\n      res.redirect('/');\n    });\n  });  \n};\n```", "```js\n// routes.js\napp.get('/users/register', userRoutes.showRegistrationForm);\napp.post('/users/register', userRoutes.createUser);\n```", "```js\n// controllers/user.js\nmodule.exports.showLoginForm = function(req, res, next) {\n  res.render('login');\n};\n\nmodule.exports.createSession = passport.authenticate('local', {\n  successRedirect: '/',\n  failureRedirect: '/login'\n});\n```", "```js\napp.get('/users/login', userRoutes.showLoginForm);\napp.post('/users/login', userRoutes.createSession);\n```", "```js\nvar userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n  },\n  created_at: {\n    type: Date,\n    default: Date.now\n  },\n  twitter: String,\n  google: String,\n  github: String,\n  profile: {\n    name: { type: String, default: '' },\n    gender: { type: String, default: '' },\n    location: { type: String, default: '' },\n    website: { type: String, default: '' },\n    picture: { type: String, default: '' }\n  },\n});\n```", "```js\n  // config.js\n  twitter: {\n    consumerKey: process.env.TWITTER_KEY || 'VRE4lt1y0W3yWTpChzJHcAaVf',\n    consumerSecret: process.env.TWITTER_SECRET  ||  'TOA4rNzv9Cn8IwrOi6MOmyV894hyaJks6393V6cyLdtmFfkWqe',\n    callbackURL: '/auth/twitter/callback'\n  },\n  google: {\n    clientID: process.env.GOOGLE_ID || '627474771522-uskkhdsevat3rn15kgrqt62bdft15cpu.apps.googleusercontent.com',\n    clientSecret: process.env.GOOGLE_SECRET || 'FwVkn76DKx_0BBaIAmRb6mjB',\n    callbackURL: '/auth/google/callback'\n  },\n  github: {\n    clientID: process.env.GITHUB_ID || '81b233b3394179bfe2bc',\n    clientSecret: process.env.GITHUB_SECRET || 'de0322c0aa32eafaa84440ca6877ac5be9db9ca6',\n    callbackURL: '/auth/github/callback'\n  }\n```", "```js\nnpm install --save passport-twitter passport-google-oAuth passport-github\n\n```", "```js\npassport.use(new TwitterStrategy(config.twitter, function(req, accessToken, tokenSecret, profile, done) {\n  User.findOne({ twitter: profile.id }, function(err, existingUser) {\n      if (existingUser) return done(null, existingUser);\n      var user = new User();\n      // Twitter will not provide an email address.  Period.\n      // But a person's twitter username is guaranteed to be unique\n      // so we can \"fake\" a twitter email address as follows:\n      // username@twitter.mydomain.com\nuser.email = profile.username + \"@twitter.\" + config.domain + \".com\";\n      user.twitter = profile.id;\n      user.tokens.push({ kind: 'twitter', accessToken: accessToken, tokenSecret: tokenSecret });\n      user.profile.name = profile.displayName;\n      user.profile.location = profile._json.location;\n      user.profile.picture = profile._json.profile_image_url;\n      user.save(function(err) {\n        done(err, user);\n      });\n    });\n}));\n```", "```js\napp.get('/users/:id', function(req, res, next) {\n  console.log(req.params.id);\n}\n```", "```js\napp.get('/users/:id', function(req, res, next) {\n  if (!req.user || (req.user.id != req.params.id)) {\n    return next('Not found');\n  }\n  res.render('users/profile', { user: req.user.toJSON() });\n});\n```", "```js\nhtml\n  body\n    h1\n      =user.email\n    h2\n      =user.created_at\n    - for (var prop in user.profile)\n      if user.profile[prop]\n        h4\n          =prop + \"=\" + user.profile[prop]\n```", "```js\n$ npm install --save-dev –g mocha\n\n```", "```js\n$ npm install --save-dev should\n\n```", "```js\nvar should = require('should');\n\ndescribe('The World', function() {\n  it('should say hello', function() {\n    'Hello, World'.should.equal('Hello, World');\n  });\n  it('should say hello asynchronously!', function(done) {\n    setTimeout(function() {\n      'Hello, World'.should.equal('Hello, World');\n      done();\n    }, 300);\n  });\n});\n```", "```js\n$ npm install --save-dev supertest\n\n```", "```js\nvar should = require('should'),\n    request = require('supertest'),\n    app = require('../server').app,\n    User = require('mongoose').model('User');\n\ndescribe('Users', function() {\n  before(function(done) {\n    User.remove({}, done);\n  });\n  describe('registration', function() {\n    it('should register valid user', function(done) {\n      request(app)\n        .post('/users/register')\n        .send({\n          email: \"test@example.com\",\n          password: \"hello world\"\n        })\n        .expect(302)\n        .end(function(err, res) {\n          res.text.should.containEql(\"Redirecting to /\");\n          done(err);\n        });\n    });\n  });\n});\n```", "```js\n$ npm install -g grunt-cli \n$ npm install --save grunt grunt-contrib-sass\n\n```", "```js\n// Gruntfile.js\nmodule.exports = function(grunt) {\n  grunt.loadNpmTasks('grunt-contrib-sass');\n  grunt.initConfig({\n    sass: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: \"public/styles\",\n          src: [\"**.scss\"],\n          dest: \"dist/styles\",\n          ext: \".css\"\n        }]\n      }\n    }\n  });\n\n}\n```", "```js\ngrunt.loadNpmTasks('grunt-mocha-test');\ngrunt.registerTask('test', 'mochaTest');\n...\n\n  mochaTest: {\n    test: {\n      src: [\"test/**.js\"]\n    }\n  }\n```", "```js\nlanguage: node_js\nnode_js:\n  - \"0.11\"\n- \"0.10\"\n- \"0.8\"\nservices:\n  - mongodb\n```", "```js\n    web: node server.js\n\n    ```", "```js\n    $ foreman start\n\n    ```", "```js\n    $ heroku create\n    $ git push heroku master\n\n    ```", "```js\n    $ heroku addons:add mongolab // don't worry, it's free\n\n    ```", "```js\n    $ heroku logs\n\n    ```", "```js\n    $ npm install --save forever\n\n    ```", "```js\n    // Procfile\n    web: node_modules/.bin/forever server.js\n\n    ```"]