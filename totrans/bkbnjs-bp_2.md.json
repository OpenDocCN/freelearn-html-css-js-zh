["```js\nnpm install passport --save\nnpm install passport-local --save\nnpm install bcrypt --save\n\n```", "```js\nvar bcrypt = require(\"bcrypt\");\nvar LocalStrategy = require(\"passport-local\").Strategy;\nvar salt = bcrypt.genSaltSync(10);\n```", "```js\nexports.strategy = function (db) {\n  return new LocalStrategy(function (username, password, done) {\n    db.findOne({ username: username }, function (err, user) {\n      if (!user) {\n        done(null, false, { message: \"Incorrect username.\" });\n      } else if(!bcrypt.compareSync(password,user.passwordHash)) {\n        done(null, false, { message: \"Incorrect password.\" });\n      } else {\n        done(null, user);\n      }\n    });\n  });\n};\n```", "```js\nexports.serialize = function (user, done) {\n  done(null, user.id);\n};\n\nexports.deserialize = function (db) {\n  return function (id, done) {\n    db.findOne({ id: id }, function (user) {\n      done(null, user);\n    });\n  };\n};\n```", "```js\nexports.hashPassword = function (password) {\n  return bcrypt.hashSync(password, salt);\n};\n```", "```js\nvar passport = require(\"passport\");\nvar signin   = require(\"./signin\");\n```", "```js\nvar users = new Bourne(\"users.json\");\nvar photos = new Bourne(\"photos.json\");\nvar comments = new Bourne(\"comments.json\");\n```", "```js\npassport.use(signin.strategy(users));\npassport.serializeUser(signin.serialize);\npassport.deserializeUser(signin.deserialize(users));\n```", "```js\napp.configure(function () {\n  app.use(express.urlencoded());\n  app.use(express.json());\n  app.use(express.multipart());\n  app.use(express.cookieParser());\n  app.use(express.session({ secret: 'photo-application' }));\n  app.use(passport.initialize());\n  app.use(passport.session());\n  app.use(express.static('public'));\n});\n```", "```js\napp.get(\"/login\", function (req, res) {\n  res.render(\"login.ejs\");\n});\n```", "```js\napp.post('/login', passport.authenticate('local', {\n  successRedirect: '/',\n  failureRedirect: '/login'\n}));\n```", "```js\napp.get(\"/logout\", function (req, res) {\n  req.logout();\n  res.redirect('/');\n});\n```", "```js\n<h1> Sign In </h1>\n<form method=\"post\" action=\"/login\">\n  <p>Username: <input name='username' type='text' /></p>\n  <p>Password: <input name='password' type='password' /></p>\n  <button> Login </button>\n</form>\n<h1> Create Account </h1>\n<form method=\"post\" action=\"/create\">\n  <p>Username: <input name='username' type='text' /></p>\n  <p>Password: <input name='password' type='password' /></p>\n  <button> Create </button>\n</form>\n```", "```js\napp.post('/create', function (req, res, next) {\n  var userAttrs = {\n    username: req.body.username,\n    passwordHash: signin.hashPassword(req.body.password),\n    following: []\n  };\n  users.findOne({ username: userAttrs.username }, function (existingUser) {\n    if (!existingUser) {\n      users.insert(userAttrs, function (user) {\n        req.login(user, function (err) {\n          res.redirect(\"/\");\n        });\n      });\n    } else {\n      res.redirect(\"/\");\n    }\n  });\n});\n```", "```js\napp.get('/*', function (req, res) {\n  if (!req.user) {\n    res.redirect(\"/login\");\n    return;\n  }\n  res.render(\"index.ejs\", {\n    user: JSON.stringify(safe(req.user))\n  });\n});\n```", "```js\nfunction safe(user){\n  var toHide = ['passwordHash'], clone = JSON.parse(JSON.stringify(user));\n\n  toHide.forEach(function (prop) {\n    delete clone[prop];\n  });\n  return clone;\n}\n```", "```js\n<script>var USER = <%- user %>;</script>\n```", "```js\nvar AppRouter = Backbone.Router.extend({\n  initialize: function (options) {\n    this.main = options.main;\n    this.navView = new NavView();\n  },\n  routes: {\n    '': 'index'\n  },\n  index: function () {\n    this.main.html(this.navView.render().el);\n  }\n});\n```", "```js\nvar NavView = Backbone.View.extend({\n  template: _.template($(\"#navView\").html()),\n  render: function () {\n    this.el.innerHTML = this.template(USER);\n    return this;\n  }\n});\n```", "```js\n<script type=\"text/template\" id=\"navView\">\n  <ul>\n    <li><a href=\"/\">Home</a></li>\n    <li><a href=\"/users\">All Users</a></li>\n    <li><a href=\"/users/{{id}}\">My Profile</a></li>\n    <li><a href=\"/upload\">Add Photo</a></li>\n    <li>Logged in as <strong>{{ username }}</strong></li>\n    <li><a href=\"/logout\">Log out</a></li>\n  </ul>\n  <hr />\n</script>\n```", "```js\nvar r = new AppRouter({ \n  main: $(\"#main\")\n});\nBackbone.history.start({ pushState: true });\n```", "```js\nvar requser = {\n  username: \"andrew\",\n  id: 1\n};\n```", "```js\nvar AddPhotoView = Backbone.View.extend({\n  tagName: \"form\",\n  initialize: function (options) {\n    this.photos = options.photos;\n  },\n  template: _.template($(\"#addPhotoView\").html()),\n  events: {\n    \"click button\": \"uploadFile\"\n  },\n  render: function () {\n    this.el.innerHTML = this.template();\n    return this;\n  },\n  uploadFile: function (evt) {\n    evt.preventDefault();\n    var photo = new Photo({\n      file: $(\"#imageUpload\")[0].files[0],\n      caption: $(\"#imageCaption\").val()\n    });\n    this.photos.create(photo, { wait: true });\n    this.el.reset();\n  }\n});\n```", "```js\n<script type=\"text/template\" id=\"addPhotoView\">\n  <p>Photo: <input type=\"file\" id=\"imageUpload\" /></p>\n  <p>Caption: <input type=\"text\" id=\"imageCaption\" /></p>\n  <button> Upload </button>\n</script>\n```", "```js\nvar Photo = Backbone.Model.extend({\n  urlRoot: \"/photos\",\n  sync: function (method, model, options) {\n    var opts = {\n      url: this.url(),\n      success: function (data) {\n        if (options.success) {\n          options.success(data);\n        }\n      }\n    };\n\n    switch (method) {\n      case \"create\":\n        opts.type = \"POST\";\n        opts.data = new FormData();\n        opts.data.append(\"file\", model.get('file'));\n        opts.data.append(\"caption\", model.get('caption'));\n        opts.processData = false;\n        opts.contentType = false;\n        break;\n      default:\n        opts.type = \"GET\";\n    }\n    return $.ajax(opts);\n  }\n});\n```", "```js\nvar Photos = Backbone.Collection.extend({\n  model: Photo\n});\n```", "```js\napp.post(\"/photos\", function (req, res) {\n  var oldPath = req.files.file.path,\n      publicPath = path.join(\"images\", requser.id + \"_\" + (photos.data.length + 1) + \".jpg\"),\n      newPath = path.join(__dirname, \"public\", publicPath);\n\n  fs.rename(oldPath, newPath, function (err) {\n    if (!err) {\n      photos.insert({\n        userId: requser.id,\n        path: \"/\" + publicPath,\n        caption: req.body.caption,\n        username: requser.username\n      }, function (photo) {\n        res.send(photo);\n      });\n    } else {\n      res.send(err);\n    }\n  });\n});\n```", "```js\nvar fs = require(\"fs\");\n```", "```js\n'upload': 'upload',\n```", "```js\nupload: function () {\n  var apv = new AddPhotoView({ photos: this.userPhotos }),\n    photosView = new PhotosView({ collection: this.userPhotos });\n  this.main.html(this.navView.render().el);\n  this.main.append(apv.render().el);\n  this.main.append(photosView.render().el);\n}\n```", "```js\nthis.userPhotos = options.userPhotos;\n```", "```js\nuserPhotos: new Photos()\n```", "```js\nvar PhotosView = Backbone.View.extend({\n  tagName: 'ul',\n  template: _.template($(\"#photosView\").html()),\n  initialize: function () {\n    this.collection.on(\"add\", this.addPhoto, this);\n  },\n  render: function () {\n    this.collection.forEach(this.addPhoto, this);\n      return this;\n  },\n  addPhoto: function (photo) {\n    this.$el.append(this.template(photo.toJSON()));\n  }\n});\n```", "```js\n<script type=\"text/template\" id=\"photosView\">\n  <a href=\"/photo/{{id}}\"><img src=\"img/{{path}}\" /></a>\n</script>\n```", "```js\napp.get(/\\/photos(\\/)?([\\w\\/]+)?/, function (req, res) {\n  var getting = req.params[1],\n      match;\n\n  if (getting) {\n    if (!isNaN(parseInt(getting, 10))) {\n      photos.findOne({ id: parseInt(getting, 10) },\n        function (photo) { res.json(photo); });\n    } else {\n      match = getting.match(/user\\/(\\d+)?/);\n      if (match) {\n        photos.find({ userId: parseInt(match[1], 10) }, \n          function (photos) { res.json(photos); });\n      } else if (getting === \"following\") {\n        var allPhotos = [];\n        req.user.following.forEach(function (f) {\n          photos.find({ userId: f }, function (photos) {\n            allPhotos = allPhotos.concat(photos);\n          });\n        });\n        res.json(allPhotos);\n      } else {\n        res.json({});\n      }\n    }\n  } else {\n    res.json({});\n  }\n});\n```", "```js\nvar User = Backbone.Model.extend({\n  url: function () {\n    return '/user-' + this.get('id') + '.json';\n  }\n});\n```", "```js\napp.get(\"/user-:id.json\", function (req, res) {\n  users.findOne({ id : parseInt(req.params.id, 10) }, \n    function (user) {\n      res.json(safe(user));\n    });\n});\n```", "```js\n'users/:id': 'showUser',\n```", "```js\nshowUser: function (id) {\n  var thiz = this,\n      user,\n      photos;\n\n  id = parseInt(id, 10);\n\n  function render() {\n    var userView = new UserView({ \n      model: user.toJSON(), \n      collection: photos \n    });\n    thiz.main.html(thiz.navView.render().el);\n    thiz.main.append(userView.render().el);\n  }\n\n  if (id === USER.id) {\n    user = new User(USER);\n    photos = this.userPhotos;\n    render();\n  } else {\n    user = new User({ id: id });\n    photos = new Photos({ url: \"/photos/user/\" + id });\n    user.fetch().then(function () {\n      photos.fetch().then(render);\n    });\n  }\n},\n```", "```js\ninitialize: function (options) {\n  if (options && options.url) {\n    this.url = options.url;\n  }\n}\n```", "```js\nvar UserView = Backbone.View.extend({\n  template: _.template($(\"#userView\").html()),\n  render: function () {\n    this.el.innerHTML = this.template(this.model.toJSON());\n    var ul = this.$(\"ul\");\n    this.collection.forEach(function (photo) {\n      ul.append(new PhotoView({ \n        model: photo \n      }).render().el);\n    });\n    return this;\n  }\n});\n```", "```js\n<script type=\"text/template\" id=\"userView\">\n  <h1>{{username}}</h1>\n  <ul></ul>\n</script>\n```", "```js\nphotos.find({ userId: req.user.id }, function (err, photos) {\n  res.render(\"index.ejs\", {\n    user: JSON.stringify(safe(req.user)),\n    userPhotos: JSON.stringify(photos)\n  });\n});\n```", "```js\nuserPhotos: new Photos(<%- userPhotos %>)\n```", "```js\n'photo/:id': 'showPhoto',\n```", "```js\nshowPhoto: function (id) {\n  var thiz = this,\n    photo = new Photo({ id : parseInt(id, 10) });\n\n  photo.fetch().then(function () {\n    var comments = new Comments({ photo: photo }),\n    var photoView = new PhotoPageView({ \n      model: photo, \n      collection: comments \n    });\n\n    comments.fetch().then(function () {\n      thiz.main.html(thiz.navView.render().el);\n      thiz.main.append(photoView.render().el);\n    });\n  });\n},\n```", "```js\nvar PhotoPageView = Backbone.View.extend({\n  template: _.template($(\"#photoPageView\").html()),\n  initialize: function () {\n    this.collection.on(\"add\", this.showComment, this);\n  },\n  events: {\n    'click button': 'addComment'\n  },\n  render: function () {\n    this.el.innerHTML = this.template(this.model.toJSON());\n    this.collection.forEach(this.showComment.bind(this));\n    return this;\n  }\n});\n```", "```js\n<script type=\"text/template\" id=\"photoPageView\">\n  <img src=\"img/{{path}}\" />\n  <p> {{caption}} <small> by {{username}}</small></p>\n  <div>\n    <textarea id=\"commentText\"></textarea><br />\n    <button> Comment </button>\n  </div>\n  <ul></ul>\n</script>\n```", "```js\naddComment: function () {\n  var textarea = this.$(\"#commentText\"),\n      text = textarea.val(),\n      comment = {\n        text: text,\n        photoId: this.model.get(\"id\"),\n        username: USER.username\n      };\n  textarea.val(\"\");\n  this.collection.create(comment);\n},\n```", "```js\nshowComment: function (comment) {\n  var commentView = new CommentView({ model: comment });\n  this.$(\"ul\").append(commentView.render().el);\n}\n```", "```js\nvar CommentView = Backbone.View.extend({\n  tagName: \"li\",\n  template: _.template($(\"#commentView\").html()),\n  render: function () {\n    this.el.innerHTML = this.template(this.model.toJSON());\n    return this;\n  }\n});\n```", "```js\n<script type=\"text/template\" id=\"commentView\">\n  <p><strong>{{username}}</strong> said</p>\n  <p>{{text}}</p>\n</script>\n```", "```js\nvar Comment = Backbone.Model.extend();\nvar Comments = Backbone.Collection.extend({\n  model: Comment,\n  initialize: function (options) {\n    this.photo = options.photo;\n  },\n  url: function () {\n    return this.photo.url() + '/comments';\n  }\n});\n```", "```js\napp.get('/photos/:id/comments', function (req, res) {\n  comments.find({ photoId: parseInt(req.params.id, 10) }, \n    function (comments) {\n      res.json(comments);\n    });\n});\n```", "```js\napp.post('/photos/:id/comments', function (req, res) {\n  var comment = {\n    text: req.body.text,\n    photoId: req.body.photoId,\n    username: req.body.username\n  };\n  comments.insert(comment, function (data) {\n    res.json(data);\n  });\n});\n```", "```js\n'users': 'showUsers',\n```", "```js\nshowUsers: function () {\n  var users = new Users(),\n      thiz  = this;\n  this.main.html(this.navView.render().el);\n  users.fetch().then(function () {\n    thiz.main.append(new UserListView({ \n      collection: users \n    }).render().el);\n  });\n},\n```", "```js\nvar Users = Backbone.Collection.extend({\n  model: User,\n  url: '/users.json'\n});\n```", "```js\napp.get(\"/users.json\", function (req, res) {\n  users.find(function (users) {\n    res.json(users.map(safe));\n  });\n});\n```", "```js\nvar UserListView = Backbone.View.extend({\n  tagName: \"ul\",\n  render: function () {\n    this.collection.forEach(function (model) {\n      this.$el.append((new UserListItemView({ \n        model: model \n      })).render().el);\n    }, this);\n    return this;\n  }\n});\n```", "```js\nvar UserListItemView = Backbone.View.extend({\n  tagName: \"li\",\n  template: _.template('<a href=\"/users/{{id}}\">{{username}}</a>'),\n  events: {\n    'click .follow': 'follow',\n    'click .unfollow': 'unfollow'\n  },\n  render: function () {\n    this.el.innerHTML = this.template(this.model.toJSON());\n    if (USER.username === this.model.get(\"username\")) {\n      this.$el.append(\" (me)\");\n    } else {\n      this.update();\n    }\n    return this;\n  }\n});\n```", "```js\nupdate: function () {\n  if (USER.following.indexOf(this.model.get(\"id\")) === -1) {\n    this.$(\"#unfollow\").remove();\n    this.$el.append(\"<button id='follow'> Follow </button>\");\n  } else {\n    this.$(\"#follow\").remove();\n    this.$el.append(\"<button id='unfollow'> Unfollow </button>\");\n  }\n}\n```", "```js\nfollow: function (evt) {\n  var thiz = this,\n    f = new Follow({ userId: thiz.model.id });\n  f.save().then(function (user) {\n    USER.following = user.following;\n    thiz.update();\n  });\n},\nunfollow: function (evt) {\n  var thiz = this,\n    f = new Follow({ id: thiz.model.id });\n  f.destroy().then(function (user) {\n    USER.following = user.following;\n    thiz.update();\n  });\n},\n```", "```js\nvar Follow = Backbone.Model.extend({\n  urlRoot: '/follow'\n});\n```", "```js\napp.post(\"/follow\", function (req, res) {\n  var id = parseInt(req.body.userId, 10);\n  if (req.user.following.indexOf(id) === -1) {\n    req.user.following.push(id);\n    users.update({ id: req.user.id }, req.user, function (err, users) {\n      res.json(safe(users[0]));\n    });\n  } else {\n    res.json(safe(req.user));\n  }\n});\n```", "```js\napp.delete(\"/follow/:id\", function (req, res) {\n  var id = parseInt(req.params.id, 10),\n    index = req.user.following.indexOf(id);\n  if (index !== -1) {\n    req.user.following.splice(index, 1);\n    users.update({ id: req.user.id }, req.user, function (err, users) {\n      res.json(safe(users[0]));\n    });\n  } else {\n    res.json(safe(req.user));\n  }\n});\n```", "```js\nfunction followingPhotos(user, callback) {\n  var allPhotos = [];\n  user.following.forEach(function (f) {\n    photos.find({ userId: f }, function (err, photos) {\n      allPhotos = allPhotos.concat(photos);\n    });\n  });\n  callback(allPhotos);\n}\n```", "```js\n} else if (getting === \"following\") {\n followingPhotos(req.user, function (allPhotos) {\n res.json(allPhotos);\n });\n} else {\n```", "```js\nfollowingPhotos(req.user, function (followingPhotos) {\n  photos.find({ userId: req.user.id }, function (photos) {\n    res.render(\"index.ejs\", {\n      user: JSON.stringify(safe(req.user)),\n      userPhotos: JSON.stringify(photos),\n followingPhotos: JSON.stringify(followingPhotos)\n    });\n  });\n});\n\n```", "```js\nfollowingPhotos: new Photos(<%- followingPhotos %>)\n```", "```js\nthis.followingPhotos = options.followingPhotos;\n```", "```js\nindex: function () {\n var photosView = new PhotosView({ \n collection: this.followingPhotos \n });\n  this.main.html(this.navView.render().el);\n this.main.append(photosView.render().el);\n},\n```"]