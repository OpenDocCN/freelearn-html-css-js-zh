["```js\nclass Person { \n    public name: string; \n    public surname: string; \n    public email: string; \n    public constructor( \n        name: string, surname: string, email: string \n    ) { \n        this.email = email; \n        this.name = name; \n        this.surname = surname; \n    } \n    public greet() { \n        console.log(\"Hi!\"); \n    } \n} \n```", "```js\nconst person = new Person( \n    \"Remo\", \n    \"Jansen\", \n    \"remo.jansen@wolksoftware.com\" \n); \n```", "```js\nclass Rectangle { \n\n    public width: number; \n    public height: number; // Error \n\n    public constructor(width: number) { \n        this.width = width; \n    } \n\n    public setHeight(height: number) { \n        this.height = height; \n    } \n\n} \n```", "```js\nclass Rectangle { \n\n    public width: number; \n    public height!: number; // OK \n\n    public constructor(width: number) { \n        this.width = width; \n    } \n\n    public setHeight(height: number) { \n        this.height = height; \n    } \n\n} \n```", "```js\nclass Rectangle { \n    public width: number; // Error \n    public height: number; // Error \n} \n```", "```js\nclass Rectangle { \n    public width!: number; // OK \n    public height!: number; // OK \n} \n```", "```js\nclass Rectangle6 { \n    public width: number = 0; // OK \n    public height: number = 0; // OK \n} \n```", "```js\nclass Teacher extends Person { \n    public teach() { \n        console.log(\"Welcome to class!\"); \n    } \n} \n```", "```js\nconst person = new Person( \n    \"Remo\", \n    \"Jansen\", \n    \"remo.jansen@wolksoftware.com\" \n); \n\nconst teacher = new Teacher( \n    \"Remo\", \n    \"Jansen\", \n    \"remo.jansen@wolksoftware.com\" \n); \n\nperson.greet(); // \"Hi!\" \nteacher.greet(); // \"Hi!\" \nperson.teach(); // Error \nteacher.teach(); // \"Welcome to class!\" \n```", "```js\nclass SchoolPrincipal extends Teacher { \n    public manageTeachers() { \n        return console.log( \n            `We need to help our students!` \n        ); \n    } \n} \n```", "```js\nconst principal = new SchoolPrincipal( \n    \"Remo\", \n    \"Jansen\", \n    \"remo.jansen@wolksoftware.com\" \n); \n\nprincipal.greet(); // \"Hi!\" \nprincipal.teach(); // \"Welcome to class!\" \nprincipal.manageTeachers(); // \"We need to help our students!\" \n```", "```js\nclass Person { \n    public name: string; \n    public surname: string; \n    public email: string; \n    public constructor( \n        name: string, surname: string, email: string \n    ) { \n        this.email = email; \n        this.name = name; \n        this.surname = surname; \n    } \n    public greet() { \n        console.log(\"Hi!\"); \n    } \n} \n\nclass Teacher extends Person { \n    public teach() { \n        console.log(\"Welcome to class!\"); \n    } \n} \n```", "```js\nconst person = new Person( \n    \"Remo\", \n    \"Jansen\", \n    \"remo.jansen@wolksoftware.com\" \n); \n\nconst teacher = new Teacher( \n    \"Remo\", \n    \"Jansen\", \n    \"remo.jansen@wolksoftware.com\" \n); \n\nconsole.log(person.email); // \"\"remo.jansen@wolksoftware.com\" \nconsole.log(teacher.email); // \"\"remo.jansen@wolksoftware.com\" \n```", "```js\nclass Person { \n    public name: string; \n    public surname: string; \n    private _email: string; \n    public constructor( \n        name: string, surname: string, email: string \n    ) { \n        this._email = email; \n        this.name = name; \n        this.surname = surname; \n    } \n    public greet() { \n        console.log(\"Hi!\"); \n    } \n    public getEmail() { \n        return this._email; \n    } \n} \n\nclass Teacher extends Person { \n    public teach() { \n        console.log(\"Welcome to class!\"); \n    } \npublic shareEmail() { \n        console.log(`My email is ${this._email}`); // Error \n    } \n} \n```", "```js\nconst person = new Person( \n    \"Remo\", \n    \"Jansen\", \n    \"remo.jansen@wolksoftware.com\" \n); \n\nconst teacher = new Teacher( \n    \"Remo\", \n    \"Jansen\", \n    \"remo.jansen@wolksoftware.com\" \n); \n\nconsole.log(person._email); // Error \nconsole.log(teacher._email); // Error \nteacher.getEmail();\n```", "```js\nclass Teacher extends Person { \n    public teach() { \n        console.log(\"Welcome to class!\"); \n    } \n    public shareEmail() { \n        console.log(`My email is ${this.getEmail()}`); // OK \n    } \n} \n```", "```js\nclass Person { \n    public name: string; \n    public surname: string; \n    protected _email: string; \n    public constructor( \n        name: string, surname: string, email: string \n    ) { \n        this._email = email; \n        this.name = name; \n        this.surname = surname; \n    } \n    public greet() { \n        console.log(\"Hi!\"); \n    } \n} \n\nclass Teacher extends Person { \n    public teach() { \n        console.log(\"Welcome to class!\"); \n    } \n    public shareEmail() { \n        console.log(`My email is ${this._email}`); \n    } \n} \n```", "```js\nconst person = new Person( \n    \"Remo\", \n    \"Jansen\", \n    \"remo.jansen@wolksoftware.com\" \n); \n\nconst teacher = new Teacher( \n    \"Remo\", \n    \"Jansen\", \n    \"remo.jansen@wolksoftware.com\" \n); \n\nconsole.log(person._email); // Error \nconsole.log(teacher._email); // Error \nteacher.shareEmail(); // \"My email is remo.jansen@wolksoftware.com\" \n```", "```js\nclass Vector { \n    private x: number; \n    private y: number; \n    public constructor(x: number, y: number) { \n        this.x = x; \n        this.y = y; \n    } \n} \n```", "```js\nclass Vector { \n    public constructor( \n        private x: number, \n        private y: number \n    ) {} \n} \n```", "```js\nconst Person = class { \n    public constructor( \n        public name: string, \n        public surname: string, \n        public email: string \n    ) {} \n    public greet() { \n        console.log(\"Hi!\"); \n    } \n}; \n```", "```js\nconst person = new Person( \n    \"Remo\", \n    \"Jansen\", \n    \"remo.jansen@wolksoftware.com\" \n); \n```", "```js\nclass TemperatureConverter { \n\n    public static CelsiusToFahrenheit( \n        celsiusTemperature: number \n    ) { \n        return (celsiusTemperature * 9 / 5) + 32; \n    } \n\n    public static FahrenheitToCelsius( \n        fahrenheitTemperature: number \n    ) { \n        return (fahrenheitTemperature - 32) * 5 / 9; \n    } \n\n} \n```", "```js\nlet fahrenheit = 100; \nlet celsius = TemperatureConverter.FahrenheitToCelsius(fahrenheit); \nfahrenheit = TemperatureConverter.CelsiusToFahrenheit(celsius); \n```", "```js\nclass Vector3 { \n\n    public static GetDefault() { \n        return new Vector3(0, 0, 0); \n    } \n\n    public constructor( \n        private _x: number, \n        private _y: number, \n        private _z: number \n    ) {} \n\n    public length() { \n        return Math.sqrt( \n            this._x * this._x + \n            this._y * this._y + \n            this._z * this._z \n        ); \n    } \n\n    public normalize() { \n        let len = 1 / this.length(); \n        this._x *= len; \n        this._y *= len; \n        this._z *= len; \n    } \n\n} \n```", "```js\nconst vector2 = new Vector3(1, 1, 1); \nvector2.normalize(); \n```", "```js\nconst vector1 = Vector3.GetDefault(); \nvector1.normalize(); \n```", "```js\nclass Vector { \n\n    public constructor( \n        public x: number, \n        public y: number, \n        public z?: number \n    ) {} \n\n    public is3D() { \n        return this.z !== undefined; \n    } \n\n    public is2D() { \n        return this.z === undefined; \n    } \n\n} \n```", "```js\nconst vector2D = new Vector(0, 0); \nvector2D.is2D(); // true \nvector2D.is3D(); // false \n\nconst lenght1 = Math.sqrt( \n    vector2D.x * vector2D.x + \n    vector2D.y * vector2D.y + \n    vector2D.z * vector2D.z // Error \n); \n```", "```js\nconst vector3D = new Vector(0, 0, 0); \nvector3D.is2D(); // false \nvector3D.is3D(); // true \n\nconst lenght2 = Math.sqrt( \n    vector3D.x * vector3D.x + \n    vector3D.y * vector3D.y + \n    ((vector3D.z !== undefined) ? (vector3D.z * vector3D.z) : 0) // OK \n); \n```", "```js\nclass Vector3 { \n\n    public constructor( \n        public readonly x: number, \n        public readonly y: number, \n        public readonly z: number \n    ) {} \n\n    public length() { \n        return Math.sqrt( \n            this.x * this.x + \n            this.y * this.y + \n            this.z * this.z \n        ); \n    } \n\n    public normalize() { \n        let len = 1 / this.length(); \n        this.x *= len; // Error \n        this.y *= len; // Error \n        this.z *= len; // Error \n    } \n\n} \n```", "```js\nclass Vector3 { \n\n    public constructor( \n        public readonly x: number, \n        public readonly y: number, \n        public readonly z: number \n    ) {} \n\n    public length() { \n        return Math.sqrt( \n            this.x * this.x + \n            this.y * this.y + \n            this.z * this.z \n        ); \n    } \n\n    public normalize() { \n        let len = 1 / this.length(); \n        return new Vector3( \n            this.x * len, // OK \n            this.y * len, // OK \n            this.z * len  // OK \n        ); \n    } \n\n} \n```", "```js\nclass Person { \n    public constructor( \n        public name: string, \n        public surname: string, \n        public email: string \n    ) {} \n    public greet() { \n        console.log(\"Hi!\"); \n    } \n} \n\nclass Teacher extends Person { \n    public constructor( \n        name: string, \n        surname: string, \n        email: string, \n        public subjects: string[] \n    ) { \n        super(name, surname, email); \n        this.subjects = subjects; \n    } \n    public greet() { \n        super.greet(); \n        console.log(\"I teach \" + this.subjects.join(\" & \")); \n    } \n    public teach() { \n        console.log(\"Welcome to class!\"); \n    } \n} \n```", "```js\nconst person = new Person( \n    \"Remo\", \n    \"Jansen\", \n    \"remo.jansen@wolksoftware.com\" \n); \n\nconst teacher = new Teacher( \n    \"Remo\", \n    \"Jansen\", \n    \"remo.jansen@wolksoftware.com\", \n    [\"math\", \"physics\"] \n); \n\nperson.greet(); // \"Hi!\" \nteacher.greet(); // \"Hi! I teach math & physics\" \nperson.teach(); // Error \nteacher.teach(); // \"Welcome to class!\" \n```", "```js\nclass User { \n    public name!: string; \n    public surname!: string; \n} \n```", "```js\nclass UserQueue { \n    private _items: User[] = []; \n    public push(item: User) { \n        this._items.push(item); \n    } \n    public pop() { \n        return this._items.shift(); \n    } \n    public size() { \n        return this._items.length; \n    } \n} \n```", "```js\nconst userQueue = new UserQueue(); \nuserQueue.push({ name: \"Remo\", surname: \"Jansen\" }); \nuserQueue.push({ name: \"John\", surname: \"Smith\" }); \nconst remo = userQueue.pop(); \nconst john = userQueue.pop(); \n```", "```js\nclass Car { \n    public manufacturer!: string; \n    public model!: string; \n} \n\nclass CarQueue { \n    private _items: Car[] = []; \n    public push(item: Car) { \n        this._items.push(item); \n    } \n    public pop() { \n        return this._items.shift(); \n    } \n    public size() { \n        return this._items.length; \n    } \n} \n\nconst carQueue = new CarQueue(); \ncarQueue.push({ manufacturer: \"BMW\", model: \"M3\" }); \ncarQueue.push({ manufacturer: \"Tesla\", model: \"S\" }); \nconst bmw = carQueue.pop(); \nconst tesla = carQueue.pop(); \n```", "```js\nclass Queue { \n    private _items: any[] = []; \n    public push(item: any) { \n        this._items.push(item); \n    } \n    public pop() { \n        return this._items.shift(); \n    } \n    public size() { \n        return this._items.length; \n    } \n} \n```", "```js\nclass Queue<T> { \n    private _items: T[] = []; \n    public push(item: T) { \n        this._items.push(item); \n    } \n    public pop() { \n        return this._items.shift(); \n    } \n    public size() { \n        return this._items.length; \n    } \n} \n```", "```js\nclass User { \n    public name!: string; \n    public surname!: string; \n} \n\nconst userQueue = new Queue<User>(); \nuserQueue.push({ name: \"Remo\", surname: \"Jansen\" }); \nuserQueue.push({ name: \"John\", surname: \"Smith\" }); \nconst remo = userQueue.pop(); \nconst john = userQueue.pop(); \n\nclass Car { \n    public manufacturer!: string; \n    public model!: string; \n} \n\nconst carQueue = new Queue<Car>(); \ncarQueue.push({ manufacturer: \"BMW\", model: \"M3\" }); \ncarQueue.push({ manufacturer: \"Tesla\", model: \"S\" }); \nconst bmw = carQueue.pop(); \nconst tesla = carQueue.pop(); \n```", "```js\nclass User { \n    public name!: string; \n    public surname!: string; \n} \n\nclass Car { \n    public manufacturer!: string; \n    public model!: string; \n} \n\nclass Queue<T> { \n    private _items: T[] = []; \n    public push(item: T) { \n        if (item instanceof User) { \n            if ( \n                item.name === \"\" || \n                item.surname === \"\" \n            ) { \n                throw new Error(\"Invalid user\"); \n            } \n        } \n        if (item instanceof Car) { \n            if ( \n                item.manufacturer === \"\" || \n                item.model === \"\" \n            ) { \n                throw new Error(\"Invalid car\"); \n            } \n        } \n        this._items.push(item); \n    } \n    public pop() { \n        return this._items.shift(); \n    } \n    public size() { \n        return this._items.length; \n    } \n} \n\nconst userQueue = new Queue<User>(); \nuserQueue.push({ name: \"\", surname: \"\" }); // Runtime Error \nuserQueue.push({ name: \"Remo\", surname: \"\" }); // Runtime Error \nuserQueue.push({ name: \"\", surname: \"Jansen\" }); // Runtime Error \n\nconst carQueue = new Queue<Car>(); \ncarQueue.push({ manufacturer: \"\", model: \"\" }); // Runtime Error \ncarQueue.push({ manufacturer: \"BMW\", model: \"\" }); // Runtime Error \ncarQueue.push({ manufacturer: \"\", model: \"M3\" }); // Runtime Error \n```", "```js\nclass Queue<T> { \n    private _items: T[] = []; \n    public push(item: T) { \n item.validate(); // Error \n        this._items.push(item); \n    } \n    public pop() { \n        return this._items.shift(); \n    } \n    public size() { \n        return this._items.length; \n    } \n} \n```", "```js\ninterface Validatable { \n    validate(): void; \n} \n```", "```js\nclass User implements Validatable { \n    public constructor( \n        public name: string, \n        public surname: string \n    ) {} \n    public validate() { \n        if ( \n            this.name === \"\" || \n            this.surname === \"\" \n        ) { \n            throw new Error(\"Invalid user\"); \n        } \n    } \n} \n\nclass Car implements Validatable { \n    public constructor( \n        public manufacturer: string, \n        public model: string \n    ) {} \n    public validate() { \n        if ( \n            this.manufacturer === \"\" || \n            this.model === \"\" \n        ) { \n            throw new Error(\"Invalid car\"); \n        } \n    } \n} \n```", "```js\nclass Queue<T extends Validatable> { \n    private _items: T[] = []; \n    public push(item: T) { \n        item.validate(); \n        this._items.push(item); \n    } \n    public pop() { \n        return this._items.shift(); \n    } \n    public size() { \n        return this._items.length; \n    } \n} \n```", "```js\nconst userQueue = new Queue<User>(); \nuserQueue.push(new User(\"\", \"\")); // Error \nuserQueue.push(new User(\"Remo\", \"\")); // Error \nuserQueue.push(new User(\"\", \"Jansen\")); // Error \n\nconst carQueue = new Queue<Car>(); \ncarQueue.push(new Car(\"\", \"\")); // Error \ncarQueue.push(new Car(\"BMW\", \"\")); // Error \ncarQueue.push(new Car(\"\", \"M3\")); // Error \n```", "```js\n    interface Foo { \n        doSomething(): void; \n    } \n\n    interface Bar { \n        doSomethingElse(): void; \n    } \n```", "```js\nclass Example1<T extends Foo, Bar> { \n    private prop!: T; \n    public doEverything() { \n        this.prop.doSomething(); \n        this.prop.doSomethingElse(); // error \n    } \n} \n```", "```js\ninterface FooBar extends Foo, Bar {} \n```", "```js\nclass Example2<T extends FooBar> { \n    private prop!: T; \n    public doEverything() { \n        this.prop.doSomething(); \n        this.prop.doSomethingElse(); \n    } \n} \n```", "```js\nfunction factory<T>(t: T) { \n    return new t(); // Error \n} \n```", "```js\nfunction factory<T>(t: { new(): T }) { \n    return new t(); \n} \n\nclass Foo { \n    public name!: \"foo\"; \n} \n\nclass Bar { \n    public name!: \"bar\"; \n} \n\nconst foo = factory<Foo>(Foo); \nconst bar = factory<Bar>(Bar); \n```", "```js\nclass Animal { \n  eat() { \n    // ... \n  } \n} \n```", "```js\nclass Mammal extends Animal { \n    public breath() { \n        // ... \n    } \n} \n\nclass WingedAnimal extends Animal { \n    public fly() { \n        // ... \n    } \n} \n```", "```js\n// Error: Classes can only extend a single class. \nclass Bat extends WingedAnimal, Mammal { \n    // ... \n} \n```", "```js\nvar bat = new Bat(); \nbat.fly(); // OK \nbat.eat();// OK \nbat.breath();// OK \n```", "```js\nclass Mammal { \n    public breath(): string { \n        return \"I'm alive!\"; \n    } \n} \n\nclass WingedAnimal { \n    public fly(): string { \n        return \"I can fly!\"; \n    } \n} \n```", "```js\nclass Bat implements Mammal, WingedAnimal { \n    public eat!: () => string; \n    public breath!: () => string; \n    public fly!: () => string; \n} \n```", "```js\nfunction applyMixins(derived: any, bases: any[]) { \n    bases.forEach(base => { \n        const props = Object.getOwnPropertyNames(base.prototype); \n        props.forEach(name => { \n            if (name !== \"constructor\") { \n                derived.prototype[name] = base.prototype[name]; \n            } \n        }); \n    }); \n} \n```", "```js\napplyMixins(Bat, [Mammal, WingedAnimal]); \n```", "```js\nconst bat = new Bat(); \nbat.breath(); // \"I'm alive!\" \nbat.fly(); // \"I can fly!\" \n```", "```js\nclass Animal { \n  public eat(): string { \n    return \"I need food!\"; \n  } \n} \n```", "```js\nclass Mammal extends Animal { \n    public breath() { \n        return \"I'm alive!\"; \n    } \n    public move() { \n        return \"I can move like a mammal!\"; \n    } \n} \n\nclass WingedAnimal extends Animal { \n    public fly() { \n        return \"I can fly!\"; \n    } \n    public move() { \n        return \"I can move like a bird!\"; \n    } \n} \n```", "```js\nclass Bat implements Mammal, WingedAnimal { \n    public eat!: () => string; \n    public breath!: () => string; \n    public fly!: () => string; \n    public move!: () => string; \n} \n```", "```js\napplyMixins(Bat, [Mammal, WingedAnimal]);  \n```", "```js\nconst bat = new Bat(); \nbat.eat(); // Error: bat.eat is not a function \n```", "```js\nbat.breath(); // I'm alive! \nbat.fly();     // I can fly!\" \n```", "```js\nbat.move(); // I can move like a bird \n```", "```js\napplyMixins(Bat2, [WingedAnimal, Mammal]);  \nconst bat = new Bat2(); \nbat.eat();     // Error: not a function \nbat.breathe(); // I'm alive! \nbat.fly();     // I can fly! \nbat.move()     // I can move like a mammal \n```", "```js\ninterface Iterator<T> { \n    next(value?: any): IteratorResult<T>; \n    return?(value?: any): IteratorResult<T>; \n    throw?(e?: any): IteratorResult<T>; \n} \n```", "```js\ninterface IteratorResult<T> { \n    done: boolean; \n    value: T; \n} \n```", "```js\nclass Fib implements IterableIterator<number> { \n\n  protected fn1 = 0; \n  protected fn2 = 1; \n\n  public constructor(protected maxValue?: number) {} \n\n  public next(): IteratorResult<number> { \n    let current = this.fn1; \n    this.fn1 = this.fn2; \n    this.fn2 = current + this.fn1; \n    if (this.maxValue && current <= this.maxValue) { \n      return { \n        done: false, \n        value: current \n      }; \n    } else { \n      return { \n        done: true, \n        value: 0 \n      }; \n    } \n  } \n\n  public [Symbol.iterator](): IterableIterator<number> { \n    return this; \n  } \n\n} \n```", "```js\nlet fib = new Fib(5); \n\nfib.next(); // { done: false, value: 0 } \nfib.next(); // { done: false, value: 1 } \nfib.next(); // { done: false, value: 1 } \nfib.next(); // { done: false, value: 2 } \nfib.next(); // { done: false, value: 3 } \nfib.next(); // { done: false, value: 5 } \n```", "```js\nlet fibMax21 = new Fib(21); \n\nfor (let num of fibMax21) { \n  console.log(num); // Prints fibonacci sequence 0 to 21 \n} \n```", "```js\nabstract class Department { \n\n    constructor(public name: string) { \n    } \n\n    public printName(): void { \n        console.log(\"Department name: \" + this.name); \n    } \n\n    public abstract printMeeting(): void; // must be implemented in derived classes \n} \n```", "```js\nclass AccountingDepartment extends Department { \n\n    public constructor() { \n        super(\"Accounting and Auditing\"); // constructors in derived classes must call super() \n    } \n\n    public printMeeting(): void { \n        console.log(\"The Accounting Department meets each Monday at 10 am.\"); \n    } \n\n    public generateReports(): void { \n        console.log(\"Generating accounting reports...\"); \n    } \n} \n```", "```js\n// OK: Create a reference to an abstract type \nlet department: Department;  \n\n// Error: cannot create an instance of an abstract class \ndepartment = new Department();  \n\n// OK: Create and assign a non-abstract subclass \ndepartment = new AccountingDepartment();  \ndepartment.printName(); \ndepartment.printMeeting(); \n\n// Error: Method doesn't exist on declared abstract type \ndepartment.generateReports(); \n```", "```js\ninterface Weapon { \n    tryHit(fromDistance: number): boolean; \n} \n```", "```js\nclass Katana implements Weapon { \n    public tryHit(fromDistance: number) { \n        return fromDistance <= 2; \n    } \n} \n\nclass Shuriken implements Weapon { \n    public tryHit(fromDistance: number) { \n        return fromDistance <= 15; \n    } \n} \n```", "```js\nclass Person { \n    public name: string; \n    public surname: string; \n    public email: string; \n    public constructor( \n        name: string, surname: string, email: string \n    ) { \n        this.surname = surname; \n        this.name = name; \n        if (this.validateEmail(email)) { \n            this.email = email; \n        } else { \n            throw new Error(\"Invalid email!\"); \n        } \n    } \n    public validateEmail(email: string) { \n        const re = /S+@S+.S+/; \n        return re.test(email); \n    } \n    public greet() { \n        console.log( \n            `Hi! I'm ${this.name}, \n            you can reach me at ${this.email}` \n        ); \n    } \n} \n```", "```js\nclass Email { \n    public static validateEmail(email: string) { \n        const re = /S+@S+.S+/; \n        return re.test(email); \n    } \n} \n```", "```js\nclass Person { \n    public name: string; \n    public surname: string; \n    public email: string; \n    public constructor( \n        name: string, surname: string, email: string \n    ) { \n        if (Email.validateEmail(email) === false) { \n            throw new Error(\"Invalid email!\"); \n        } \n        this.email = email; \n        this.name = name; \n        this.surname = surname; \n    } \n    public greet() { \n        console.log( \n            `Hi! I'm ${this.name}, \n            you can reach me at ${this.email.toString()}` \n        ); \n    } \n} \n```", "```js\nclass Email { \n    private _email: string; \n    public constructor(email: string) { \n        if (this._validateEmail(email)) { \n            this._email = email; \n        } else { \n            throw new Error(\"Invalid email!\"); \n        } \n    } \n    public toString(): string { \n        return this._email; \n    } \n    private _validateEmail(email: string) { \n        const re = /S+@S+.S+/; \n        return re.test(email); \n    } \n} \n\nclass Person { \n    public name: string; \n    public surname: string; \n    public email: Email; \n    public constructor( \n        name: string, surname: string, email: Email \n    ) { \n        this.email = email; \n        this.name = name; \n        this.surname = surname; \n    } \n    public greet() { \n        console.log( \n            `Hi! I'm ${this.name}, \n            you can reach me at ${this.email.toString()}` \n        ); \n    } \n} \n```", "```js\nlet person: Person = new Person( \n    \"Remo\", \n    \"Jansen\", \n    new Email(\"remo.jansen@wolksoftware.com\") \n); \n```", "```js\nclass Rectangle { \n    public width!: number; \n    public height!: number; \n} \n\nclass AreaCalculator { \n    public area(shapes: Rectangle[] ) { \n        return shapes.reduce( \n            (p, c) => { \n                return p + (c.height * c.width); \n            }, \n            0 \n        ); \n    } \n} \n```", "```js\nclass Circle { \n    public radius!: number; \n} \n\nclass AreaCalculator { \n    public area(shapes: Array<Rectangle|Circle>) { \n        return shapes.reduce( \n            (p, c) => { \n                if (c instanceof Rectangle) { \n                    return p + (c.width * c.height); \n                } else { \n                    return p + (c.radius * c.radius * Math.PI); \n                } \n            }, \n            0 \n        ); \n    } \n} \n```", "```js\nabstract class Shape { \n    public abstract area(): number; \n} \n\nclass Rectangle extends Shape { \n    public width!: number; \n    public height!: number; \n    public area() { \n        return this.width * this.height; \n    } \n} \n\nclass Circle implements Shape { \n    public radius!: number; \n    public area() { \n        return (this.radius * this.radius * Math.PI); \n    } \n} \n\nclass AreaCalculator { \n    public area(shapes: Shape[]) { \n        return shapes.reduce( \n            (p, c) => p + c.area(), \n            0 \n        ); \n    } \n} \n```", "```js\nclass AreaCalculator { \n    public area(shapes: Shape[]) { \n        return shapes.reduce( \n            (p, c) => p + c.area(), \n            0 \n        ); \n    } \n} \n```", "```js\ninterface PersistanceServiceInterface { \n    save(value: string): string; \n} \n```", "```js\nfunction getUniqueId() { \n    return Math.random().toString(36).substr(2, 9); \n} \n\nclass CookiePersitanceService implements PersistanceServiceInterface { \n    public save(value: string): string { \n        let id = getUniqueId(); \n        document.cookie = `${id}=${value}`; \n        return id; \n    } \n} \n```", "```js\nclass FavouritesController { \n    private _persistanceService: PersistanceServiceInterface; \n    public constructor(persistanceService: PersistanceServiceInterface) { \n        this._persistanceService = persistanceService; \n    } \n    public saveAsFavourite(articleId: string) { \n        return this._persistanceService.save(articleId); \n    } \n} \n```", "```js\nconst favController1 = new FavouritesController( \n    new CookiePersitanceService() \n); \n```", "```js\nclass LocalStoragePersitanceService implements PersistanceServiceInterface { \n    public save(value: string): string { \n        const id = getUniqueId(); \n        localStorage.setItem(`${id}`, value); \n        return id; \n    } \n} \n```", "```js\nconst favController = new FavouritesController( \n    new LocalStoragePersitanceService() \n); \n```", "```js\ninterface VehicleInterface { \n    getSpeed(): number; \n    getVehicleType(): string; \n    isTaxPayed(): boolean; \n    isLightsOn(): boolean; \n    isLightsOff(): boolean; \n    startEngine(): void; \n    accelerate(): number; \n    stopEngine(): void; \n    startRadio(): void; \n    playCd(): void; \n    stopRadio(): void; \n} \n```", "```js\ninterface VehicleInterface { \n    getSpeed(): number; \n    getVehicleType(): string; \n    isTaxPayed(): boolean; \n    isLightsOn(): boolean; \n} \n\ninterface LightsInterface { \n    isLightsOn(): boolean; \n    isLightsOff(): boolean; \n} \n\ninterface RadioInterface { \n    startRadio(): void; \n    playCd(): void; \n    stopRadio(): void; \n} \n\ninterface EngineInterface { \n    startEngine(): void; \n    accelerate(): number; \n    stopEngine(): void; \n} \n```", "```js\nclass FavouritesController { \n    private _persistanceService: PersistanceServiceInterface; \n    public constructor(persistanceService: PersistanceServiceInterface) { \n        this._persistanceService = persistanceService; \n    } \n    public saveAsFavourite(articleId: string) { \n        return this._persistanceService.save(articleId); \n    } \n} \n```", "```js\nclass FavouritesController { \n    private _persistanceService: CookiePersitanceService; \n    public constructor(persistanceService: CookiePersitanceService) { \n        this._persistanceService = persistanceService; \n    } \n    public saveAsFavourite(articleId: string) { \n        return this._persistanceService.save(articleId); \n    } \n} \n```"]