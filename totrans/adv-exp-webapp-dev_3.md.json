["```js\nnpm install consolidate --save\n\n```", "```js\nnpm install handlebars --save\n\n```", "```js\napp.engine('html', cons.handlebars);\n```", "```js\napp.set('view engine', 'html');\n```", "```js\n./views/index.html\n```", "```js\napp.set('views', 'views');\napp.use(express.static('public'));\napp.use(express.static('public/components'));\n```", "```js\n./public\n./public/components\n./public/components/vision\n```", "```js\nAs a vision user\nI want the vision application served as a single page\nSo that I can spend less time waiting for page loads\n```", "```js\n   var app = require('../app')\n , request = require('supertest');\n\ndescribe('vision master page', function(){\n  describe('when requesting resource /', function(){\n    it('should respond with view', function(done){\n      request(app)\n        .get('/')\n        .expect('Content-Type', /html/)\n        .expect(200, done)\n    });\n  });\n});\n```", "```js\nexports.index = function(req, res){\n  var model = {\n    title: 'vision.',\n    description: 'a project based dashboard for github',\n    author: 'airasoul',\n     user: 'Andrew Keig'\n  };\n  res.render('index', model);\n};\n```", "```js\napp.get('/', routes.home.index);\n```", "```js\nnpm install -g bower\n\n```", "```js\n{\n  \"name\": \"vision\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n    \"json2\": \"*\",\n    \"jquery\": \"*\",\n    \"underscore\": \"*\",\n    \"backbone\": \"*\",\n    \"handlebars\": \"*\",\n    \"bootstrap\": \"2.3.2\"\n  }\n}\n```", "```js\n{\n    \"directory\": \"public/components\",\n    \"json\": \"bower.json\"\n}\n```", "```js\nbower install\n\n```", "```js\napp.use('/bootstrap', express.\n  static('public/components/bootstrap/docs/assets/css'));\n```", "```js\n./templates\n  projects.hbs\n  project-form.hbs\n  repositories.hbs\n  commits.hbs\n  issues.hbs\n```", "```js\nnpm install grunt-contrib-handlebars --save-dev\n\n```", "```js\ngrunt.loadNpmTasks('grunt-contrib-handlebars');\n\nhandlebars: {\n  compile: {\n    options: {\n      namespace: \"visiontemplates\"\n    },\n    files: {\n      \"public/components/vision/templates.js\": [\"templates/*.hbs\"]\n    }\n  }\n},\n```", "```js\n  {{#if user}}\n       <p class=\"navbar-text\">welcome {{user}},\n       <a href=\"/logout\" class=\"navbar-link\">\n         click here to sign out</a>\n       </p>\n  {{else}}\n        <a href=\"/auth/github\">\n        <img src=\"img/github.png\" id='login'>\n        </a>\n      {{/if}}\n\n      {{#if user}}\n      <div class=\"span3\">\n          <h2>Projects</h2>\n          <ul id=\"projects-list\"  class=\"nav nav-list\"></ul>\n          <br/><a id=\"showForm\" class=\"btn btn-large btn-block btn-primary\" href=\"#add\">Add project</a>\n      </div>\n      <div class=\"span3\">\n        <h2>Repositories</h2>\n        <ul id=\"repository-list\" class=\"nav inline nav-list\"></ul>\n      </div>\n      <div class=\"span3\">\n        <h2>Commits</h2>\n        <ul id=\"commits-list\" class=\"media-list\"></ul>\n      </div>\n      <div class=\"span3\">\n        <h2>Issues</h2>\n        <ul id=\"issues-list\" class=\"media-list\"></ul>\n      </div>\n      {{else}}   \n        <div class=\"span12\">\n          <div class=\"hero-unit\">\n            <h1>vision</h1>\n            <lead>a real-time multiple repository dashboard for GitHub issues and commits</lead>\n            <p><small>In order to use vision; please login to a valid GitHub Account</small></p>\n          </div>\n        </div>\n      {{/if}}\n```", "```js\n<a href=\"#{{_id}}\" data-id=\"{{_id}}\">{{name}}</a>\n<button class=\"delete btn btn-mini btn-primary list-btn\">del </ button>\n<button class=\"edit btn btn-mini btn-primary list-btn spacer \">edit e</button>\n```", "```js\nvar Vision = Vision || {};\n\nVision.Application = function(){\n    this.start = function(){\n        var router = new Vision.Router();\n        Backbone.history.start();\n        router.navigate('index', true);\n    }\n};\n\n$(function(){\n    var app = new Vision.Application();\n    app.start();\n});\n```", "```js\nVision.Router = Backbone.Router.extend({\n    projectListView : \"\",\n\n    routes: {\n        \"\" : \"index\",\n    },\n\n    initialize : function(){\n      this.project();\n    },\n\n    project : function(){\n      this.projectListView = new Vision.ProjectListView();\n    },  \n\n    index : function(){\n        this.projectListView.render();\n    }\n});\n```", "```js\nVision.Project = Backbone.Model.extend({\n    defaults: {\n          id : \"\"\n        , name: \"\"\n    },\n\n    idAttribute: \"_id\",\n    urlRoot: '/project'\n});\n```", "```js\nVision.ProjectList = Backbone.Collection.extend({\n    model: Vision.Project,\n\n    url: function () {\n        return \"/project/\";\n    },\n\n    initialize: function() {\n        this.fetch();\n    }\n});\n```", "```js\nBackbone.View.prototype.event_aggregator = _.extend({}, Backbone.Events);\n```", "```js\nVision.ProjectListView = Backbone.View.extend({\n    Projects: [],\n    el: $(\"ul#projects-list\"),\n\n    initialize: function () {\n      this.collection = new Vision.ProjectList(this.Projects);\n      this.collection.on('add', this.add, this);\n    },\n\n    add: function (project) {\n      var projectView = new Vision.ProjectView({\n        model: project\n      });\n\n      this.$el.append(projectView.render().el);\n      return projectView;\n    }\n});\n```", "```js\nVision.ProjectView = Backbone.View.extend({\n    tagName: \"li\",\n    viewTemplate: visiontemplates[\"templates/projects.hbs\"],\n\n    render: function () {\n        var project = this.viewTemplate(this.model.toJSON());\n        this.$el.html(project);\n        return this;\n    }\n});\n```", "```js\n{\n    \"_id\" : ObjectId(\"525c61bcb89855fc09000018\"),\n    \"created\" : ISODate(\"2013-10-17T22:58:37Z\"),\n    \"name\" : \"test name\",\n    \"token\" : \"#TOKEN#\",\n    \"user\" : \"#USER#\"\n}\n```", "```js\n<li>\n  <label class=\"checkbox inline\">\n  <input id=\"{{id}}\" type=\"checkbox\" {{enabled}} value=\"{{name}}\"><h4 class=\"media-heading repoItem\">{{name}}</h4>\n  <small>{{description}}</small>\n  </label>\n</li>\n```", "```js\nVision.Repository = Backbone.Model.extend({\n    defaults: {\n          id : \"\"\n        , name: \"\"\n        , description: \"\"\n        , enabled: \"\"\n    }\n});\n```", "```js\nVision.RepositoryList = Backbone.Collection.extend({\n    projectId: '',\n    model: Vision.Repository,\n\n    url : function() {\n      return '/project/' + this.projectId + '/repos';\n    },\n\n    initialize: function(items, item) {\n        this.projectId = item.projectId;\n    },\n\n    parse: function( response ) {\n        response.id = response._id;\n        return response;\n    }\n});\n```", "```js\nVision.RepositoryView = Backbone.View.extend({\n    tagName: \"li\",\n    viewTemplate: visiontemplates[\"templates/repositories.hbs\"],\n\n    render: function () {\n        this.$el.html(this.viewTemplate(this.model.toJSON()));\n        return this;\n    }\n});\n```", "```js\nVision.RepositoryListView = Backbone.View.extend({\n    Repositories: [],\n\n    initialize: function (args) {\n      if (!args.projectId) return;\n      var me = this;\n      this.$el.html('');\n      this.collection = new Vision.RepositoryList(this.Repositories, {\n          projectId : args.projectId\n        });\n        this.collection.fetch({success: function(){\n          me.render();\n        }});\n    },\n\n    render: function () {\n      _.each(this.collection.models, function (item) {\n        this.add(item);\n      }, this);\n    },\n\n    add: function (item) {\n      var repositoryView = new Vision.RepositoryView({\n        model: item\n      });\n\n      this.$el.append(repositoryView.render(this.editMode).el);\n      return repositoryView;\n    }\n});\n```", "```js\n    events: {\n      \"click a\" : \"repository\"\n    },\n\n    repository: function() {\n      var data = { projectId: this.model.toJSON()._id }\n      this.event_aggregator.trigger('repository:join', data);\n    },\n```", "```js\n    initialize: function () {\n      this.event_aggregator.on('repository:join', this.repository, this);\n        this.collection = new Vision.ProjectList(this.Projects);\n        this.render();\n    },\n\n    repository: function(args){\n      this.trigger('join', args);\n    },\n```", "```js\nrepositoryListView:'',\n\ninitialize : function(){\n  this.project();\n  this.listenTo(this.projectListView , 'join', this.join);\n},\n\njoin : function(args){\n  this.repository(args);\n},\n\nrepository : function(args){\n  this.repositoryListView =new Vision.RepositoryListView({ el: 'ul#repository-list', projectId: args.projectId });\n},\n```", "```js\n<form class=\"form-inline\">\n  <ul class=\"errors help\"></ul>\n  <label>name</label>\n  <input class=\"name\" placeholder=\"project name\" required=\"required\" value=\"{{name}}\" autofocus />\n  <br/><button class=\"cancel btn btn-mini btn-primary form-btn\">cancel</button>\n  <button class=\"save btn btn-mini btn-primary form-btn form-spacer\">save</button>\n</form>\n```", "```js\n    routes: {\n      \"\" : \"index\",\n      \"add\" : \"add\"\n    },\n    add : function(){\n      this.projectListView.showForm();\n    }\n```", "```js\ninitialize: function () {\n  this.event_aggregator.on('repository:join', this.repository, this);\n  this.collection = new Vision.ProjectList(this.Projects);\n  this.collection.on('reset', this.render, this);\n  this.collection.on('add', this.add, this);\n  this.collection.on('remove', this.remove, this);\n},\n\nshowForm: function () {\n  this.add(new Vision.Project()).add();\n}\n```", "```js\nvalidate: function(attrs) {\n  var errors = [];\n  if (attrs.name === '') errors.push(\"Please enter a name\");\n  if (errors.length > 0) return errors;\n}\n```", "```js\nformTemplate: visiontemplates[\"templates/project-form.hbs\"],\n\nevents: {\n    \"click a\" : \"repository\"\n    \"click button.save\": \"save\",\n    \"click button.cancel\": \"cancel\"\n},\n\nadd: function () {\n    this.$el.html(this.formTemplate(this.model.toJSON()));\n    this.repository();\n},\n\ncancel: function () {\n    var projectId = this.model.toJSON()._id;\n\n    if (this.model.isNew()) {\n      this.remove();\n    } else {\n      this.render();\n      this.repository();\n    }\n\n    Backbone.history.navigate('index', true);\n},\n\n  save: function (e) {\n    e.preventDefault();\n\n    var me = this\n    , formData = {}\n    , projectId = this.model.toJSON()._id;\n\n    $(e.target).closest(\"form\")\n    .find(\":input\").not(\"button\")\n    .each(function () {\n      formData[$(this).attr(\"class\")] = $(this).val();\n    });\n\n    if (!this.model.isValid()) {\n      me.formError(me.model, me.model.validationError, e);\n    } else {\n      formData.repositories = $('#repository-list')\n      .find(\"input:checkbox:checked\")\n      .map(function(){\n      return $(this).val();\n    }).get();\n  }\n\n  this.model.save(formData, {\n    error: function(model, response) {\n      me.formError(model, response, e);\n    },\n    success: function(model, response) {\n      me.render();\n      me.repository();\n      Backbone.history.navigate('index', true);\n    }\n  });\n},\n\nformError: function(model, errors, e) {\n  $(e.target).closest('form').find('.errors').html('');\n\n  _.each(errors, function (error) {\n    $(e.target).closest('form').find('.errors')\n    .append('<li>' + error + '</li>')\n  });\n}\n```", "```js\n    Events: {\n      ...\n        \"click button.edit\": \"edit\"\n    },\n\n    repository: function(args) {\n      var data = { projectId: this.model.toJSON()._id, editMode: args.editMode || false }\n      ...\n    },\n\n    edit: function () {\n      var model = this.model.toJSON();\n      this.$el.html(this.formTemplate(model));\n      this.repository({editMode:true});\n    },\n```", "```js\n    initialize: function (args) {\n      ...\n      this.collection.fetch({ success: function(){\n        me.render();\n        (args.editMode) ?  me.enableForm() : me.disableForm();\n      }});\n    },\n\n    enableForm: function(){\n      this.$el.find(\"input:checkbox\").remove('disabled');\n    },\n\n    disableForm: function(){\n      this.$el.find(\"input:checkbox\").attr('disabled', 'disabled');\n    }\n```", "```js\n    events: {\n      ...\n      \"click button.delete\": \"delete\",\n    },\n\n    delete: function () {\n      this.model.destroy();\n      this.remove();\n      this.repository({editMode:false});\n    },\n```", "```js\n    initialize: function () {\n      ...\n      this.collection.on(\"remove\", this.remove, this);\n    },\n\n    remove: function (removedModel) {\n      var removed = removedModel.attributes;\n\n      _.each(this.Projects, function (project) {\n        if (_.isEqual(project, removed)) {\n          this.Projects.splice(_.indexOf(projects, project), 1);\n        }\n      });\n    },\n```", "```js\n  <a class=\"pull-left\" href=\"#\">\n    <img class=\"media-object\" src=\"img/{{avatar_url}}\"   \n      style=\"width:64px; height:64px\">\n  </a>\n  <div class=\"media-body\">\n    <h4 class=\"media-heading\">{{message}}</h4>\n    <small>{{repository}}</small>\n    <small>{{ago}}</small>\n    <br/><small>{{login}}</small>\n  </div>\n```", "```js\nVision.Commit = Backbone.Model.extend({\n    defaults: {\n      date : '',\n      ago: '',\n      message : '',\n      login : '',\n      avatar_url : ''\n    }\n});\n```", "```js\nVision.CommitList = Backbone.Collection.extend({\n    projectId: '',\n    model: Vision.Commit,\n\n    url : function() {\n      return '/project/' + this.projectId + '/commits';\n    },\n\n    initialize: function(items, item) {\n      this.projectId = item.projectId;\n    },\n\n    parse: function( response ) {\n      response.id = response._id;\n      return response;\n    }\n});\n```", "```js\nVision.CommitListView = Backbone.View.extend({\n  Commits: [],\n\n  initialize: function (args) {\n    if (!args.projectId) return;\n    this.Commits = args.commits || [];\n    this.$el.html('');\n    this.create(args);\n    this.refresh();\n  },\n\n  refresh: function(){\n    var me = this;\n\n    if (!this.Commits.length) {\n      this.collection.fetch({ success: function(){\n        me.render();\n      }});\n    }\n  },\n\n  create: function(args) {\n    this.collection = new Vision.CommitList(this.Commits, { projectId : args.projectId });\n    this.render();\n  },\n\n  render: function () {\n    _.each(this.collection.models, function (item) {\n      this.add(item);\n    }, this);\n  },\n\n  add: function (item) {\n    var commitView = new Vision.CommitView({ model: item });\n\n    this.$el.append(commitView.render().el);\n    return commitView;\n  }\n});\n```", "```js\nVision.CommitView = Backbone.View.extend({\n    tagName: 'li',\n    className: 'media',\n    viewTemplate: visiontemplates['templates/commits.hbs'],\n\n    render: function () {\n      this.$el.html(this.viewTemplate(this.model.toJSON()));\n      return this;\n    }\n});\n```", "```js\nCommitListView:'',\n\njoin : function(args){\n  this.repository(args);\n  this.commits(args);\n},\n\ncommits : function(args){\n  this.commitListView = new Vision.CommitListView({ el: 'ul#commits-list', projectId: args.projectId, commits : args.commits});\n},\n```", "```js\n<a class=\"pull-left\" href=\"#\">\n  <img class=\"media-object\" src=\"img/{{avatar_url}}\"style=\"width:64px; height:64px\">\n</a>\n<div class=\"media-body\">\n  <h4 class=\"media-heading\">{{title}}</h4>\n  <small>{{repository}}</small>\n  <small>{{ago}}</small>\n  <br/><small>{{login}},<b>{{state}}</b></small>\n</div>\n```", "```js\nVision.Issue = Backbone.Model.extend({\n  defaults: {\n    title : '',\n    state : '',\n    date : '',\n    ago: '',\n    login : '',\n    avatar_url : ''\n  }\n});\n```", "```js\nVision.IssueList = Backbone.Collection.extend({\n  projectId: '',\n  model: Vision.Issue,\n\n  url : function() {\n    return '/project/' + this.projectId + '/issues';\n  },\n\n  initialize: function(items, item) {\n    this.projectId = item.projectId;\n  },\n\n  parse: function( response ) {\n    response.id = response._id;\n    return response;\n  }\n});\n```", "```js\nVision.IssueListView = Backbone.View.extend({\n  Issues: [],\n\n  initialize: function (args) {\n    if (!args.projectId) return;\n    this.Issues = args.issues || [];\n    this.$el.html('');\n    this.create(args);\n    this.refresh();\n  },\n\n  create: function(args) {\n    this.collection = new Vision.IssueList(this.Issues, { projectId : args.projectId });\n    this.render();\n  },\n\n  refresh: function(){\n    var me = this;\n\n    if (!this.Issues.length) {\n      this.collection.fetch({ success: function(){\n        me.render();\n      }});\n    }\n  },\n\n  render: function () {\n    _.each(this.collection.models, function (item) {\n      this.add(item);\n    }, this);\n  },\n\n  add: function (item) {\n    var issueView = new Vision.IssueView({ model: item });\n\n    this.$el.append(issueView.render().el);\n    return issueView;\n  }\n});\n```", "```js\nVision.IssueView = Backbone.View.extend({\n  tagName: 'li',\n  className: 'media',\n  viewTemplate: visiontemplates['templates/issues.hbs'],\n\n  render: function () {\n    this.$el.html(this.viewTemplate(this.model.toJSON()));\n    return this;\n  }\n});\n```", "```js\nissueListView:'',\n\njoin : function(args){\n    this.repository(args);\n    this.issues(args);\n    this.commits(args);\n},\n\nissues : function(args){\n    this.issueListView = new Vision.IssueListView({ el: 'ul#issues-list', projectId: args.projectId, issues: args.issues});\n},\n```"]