- en: '[CHAPTER 11](toc.xhtml#c11)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[The Journey Ahead](toc.xhtml#c11)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Introduction](toc.xhtml#s268a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: “*The only way to discover the limits of the possible is to go beyond them into
    the impossible*.” – Arthur C. Clarke
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the book, we learned many important concepts and methods of utilizing
    Node.Js and Express.Js for the API needed for a project management software. With
    the help of this single example, we designed the necessary APIs for users, projects,
    tasks, and more. If you followed the chapters and did your own version of APIs,
    you should have a functioning backend of a PMS.
  prefs: []
  type: TYPE_NORMAL
- en: There is a lot more which can be done, but it cannot be covered in a single
    book alone. This chapter will try to cover what can be done further, along with
    best practices which can be followed. In executing all that, you should have pretty
    decent software at hand.
  prefs: []
  type: TYPE_NORMAL
- en: The journey has just begun.
  prefs: []
  type: TYPE_NORMAL
- en: '[Structure](toc.xhtml#s269a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The Story so Far
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next Steps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Staying Ahead
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further Readings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping Up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Story So far](toc.xhtml#s270a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recalling the Node.js demonstration at JSConf 2009 by Ryan Dahl, we began learning
    about Node.js. Starting from the basics of Node.js and its beautiful way of working
    with Event Loop, we learned where it can be used and also discussed some pros
    and cons.
  prefs: []
  type: TYPE_NORMAL
- en: We learned the installation of Node.js on multiple platforms and created the
    basic HTTP and HTTPS servers with and without the module cluster. Cluster module
    helps to harness the capability of the machine and significantly improves performance.
  prefs: []
  type: TYPE_NORMAL
- en: People had been writing the code of Node.js applications in JavaScript the usual
    way, but then Microsoft released TypeScript in 2012\. Being open source, cross-platform,
    and supporting object oriented programming with its strong type checking made
    developers’ life easier by detecting bugs and mistakes . Therefore, developers
    started adapting to TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping this in mind, *[Chapter 2, “Introduction to TypeScript”](c02.xhtml)*
    focused on covering the basics of TypeScript. After the necessary packages installation,
    a basic application and some tiny examples helped us understand the key concepts
    of the language.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we learned about Express.js and how it could be used to create API endpoints
    easily. We installed necessary packages of Express.js, and gained familiarity
    with the core concepts, along with the pros and cons.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Node.js applications in Express.js through discrete examples is
    feasible, but developing a cohesive application provides deeper insight into application
    planning, design, and execution. Hence we started writing one application to understand
    it all. In *[Chapter 4, Planning the App](c04.xhtml)*, we started with the planning
    of the application — a project management system. We did a setup of the project,
    necessary dependencies, directory structure, and also created the needed database
    tables along with routes skeleton.
  prefs: []
  type: TYPE_NORMAL
- en: We laid the foundation so that we can begin building the API, a project management
    software would require.
  prefs: []
  type: TYPE_NORMAL
- en: For any enterprise application, whether it is only backend API or full stack,
    access management is a must have feature. That is what we did too — by creating
    APIs for user management, and further enhanced the chapter with a ‘*forgot password*’
    feature. We created a token based authentication system for which we used the
    `**jsonwebtoken**` package.
  prefs: []
  type: TYPE_NORMAL
- en: Once we had the users in the system, we began writing the project and task module
    in *[Chapter 6, “REST API for Project and Task Modules”](c06.xhtml)*. We covered
    the basic crud operations for projects and tasks entities, along with assigning
    to users.
  prefs: []
  type: TYPE_NORMAL
- en: '*[Chapter 7, “API Caching”](c07.xhtml)* focused on caching that is crucial
    for performance enhancement in high-traffic applications. We implemented Redis
    for data caching and developed a Cache Util to manage Redis interactions.'
  prefs: []
  type: TYPE_NORMAL
- en: In web applications where communication is the key, integrating a notification
    module is essential. We not only implemented this feature in *[Chapter 8, “Notification
    Module”](c08.xhtml)* but also utilized Redis Queues to enhance its efficiency.
    As an example of using the notification system, we modified the code to automatically
    send notifications to relevant project members whenever a new task was created.
  prefs: []
  type: TYPE_NORMAL
- en: Needless to say how important unit testing is, we learned the basics of unit
    testing in *[Chapter 9, “Testing API”](c09.xhtml)*. After necessary configuration,
    we used the Mocha framework along with Chai to write unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: For the final touch, we delved into a crucial aspect with *[Chapter 10, “Building
    and Deploying Application”](c10.xhtml)* while covering a notable concept of code
    obfuscation.
  prefs: []
  type: TYPE_NORMAL
- en: The journey so far has been an extensive exploration of building a robust application
    with Node.js and Express.js, covering everything from basics to more advanced
    topics like caching, unit testing and deployment strategies. This should equip
    you with the skills and knowledge to create, optimize and deploy efficient, scalable
    web applications.
  prefs: []
  type: TYPE_NORMAL
- en: '[Next Steps](toc.xhtml#s271a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is only a small part of “*what’s possible*” that could be covered in this
    book. Depending on the context, further development can be achieved. In this section,
    we will enlist some of the features which can be developed to enhance the application
    further.
  prefs: []
  type: TYPE_NORMAL
- en: The points being discussed can be thought of — things that can be added further,
    and the best practices on how it can be done. The following points not only cover
    what could enhance the application but also the ways to make it scalable and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: '[FrontEnd](toc.xhtml#s272a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A project management software is usually a web-application. The days of desktop
    applications are over. The time now is of collaboration, communication, and most
    importantly of availability. A web application can be available anywhere in the
    world. It can be accessed through a laptop, or a mobile phone, and that serves
    the purpose. Development of the front end was not in the scope of the book. However,
    let us discuss some aspects of how to get it done.
  prefs: []
  type: TYPE_NORMAL
- en: There are many popular frameworks at the time of writing this book — React,
    Angular, Vue.js. All of these are capable of making it a dynamic and responsive
    user interface. Additionally, Bootstrap can help with a uniform and responsive
    styling.
  prefs: []
  type: TYPE_NORMAL
- en: 'A project management application could have the following pages in user interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dashboard**: To show the project activities, summary of assigned tasks, quick
    actions such as creating a new task, new project, and more. The counts of all
    projects, assigned projects, tasks assigned could also be shown as big numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Projects**: All of the assigned projects can be listed as a table. Some buttons
    to perform some actions such as adding a new project, managing project memberships
    can also be shown for the project manager roles. For each project in the list,
    users should be able to open the list of all issues, list of outstanding issues,
    and more. The options can be customized to open the list of issues in testing
    for QA team members.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Users**: Admins can be facilitated with a page to manage users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A User profile Icon**: An icon on the top right which opens the user profile
    where a user can manage his/her own profile, for example, name, timezone settings,
    password, notification settings, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reports**: For project managers it could be a useful page to analyze the
    project status.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server Status**: A page for admin, where current CPU, memory and storage
    status can be shown.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There could be more, depending on the requirements and scale of the project.
  prefs: []
  type: TYPE_NORMAL
- en: '[Reporting](toc.xhtml#s273a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reporting is a crucial aspect of the project management application. It might
    look like a huge task, but it is not so difficult to implement.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to analyze what kind of reports we are seeking. A set of simple
    time-series showing the number of active and closed issues to show the progress
    of the project could be useful. In the case of Agile development, showing project
    progress as velocity could be important.
  prefs: []
  type: TYPE_NORMAL
- en: A pie chart of the number of issues in each phase— backlog, development, testing,
    and closed can also be shown. A report of the number of opened issues versus number
    of closed issues is also a good performance index for a project.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting would need key changes at front end and back end as well. It would
    be wise to create a dedicated module at the back end to generate reports. Some
    reports could be generated through a scheduler (for example, generating reports
    at midnight everyday) to persist in order to avoid doing repetitive processing
    for every request. Some reports would be on-request and real-time. Abstraction
    of the reporting module will provide clean implementation.
  prefs: []
  type: TYPE_NORMAL
- en: A data visualization library will be needed to generate reports with charts.
    Open-source libraries like `**D3.js**`, `**Chart.js**`, `**Plotly**`, `**Vis**`,
    and others can be a good option. If cost is not an issue, `**Highcharts**` and
    `**amCharts**` are among the top tools that can be tried.
  prefs: []
  type: TYPE_NORMAL
- en: '[Applying Machine Learning](toc.xhtml#s274a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many opportunities to apply machine learning in a web-application.
    If you track the user traffic, a surge detection in traffic could help to maintain
    high-availability by taking appropriate action at the right time.
  prefs: []
  type: TYPE_NORMAL
- en: By tracking user activities and applying machine learning to it, a tailored
    user-interface could be provided to users for a more engaging application.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking user activities can also help to analyze which actions are taken or
    which pages are visited more than others. Back end operations such as caching,
    database queries, and others could be optimized for top actions.
  prefs: []
  type: TYPE_NORMAL
- en: A prediction could be done for project completion date, or sprint performance
    in case of Agile development. There are numerous such applications which can be
    done.
  prefs: []
  type: TYPE_NORMAL
- en: '[Server Monitoring](toc.xhtml#s275a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the traffic grows, the resource usage grows and it is vital to keep track
    of the CPU, RAM, and storage of the servers along with database and network. There
    are ways in which the server can be monitored.
  prefs: []
  type: TYPE_NORMAL
- en: '**Using built-in operating system tools**: Most operating systems, specially
    servers where applications are usually deployed, offer tools for monitoring resources
    such as `**top**`, `**htop**`, `**vmstat**`, and so on, for Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A separate module inside the application**: The application could be modified
    to create a module which periodically tracks and stores the resource usage in
    the database. This data can be shown, visualized in the front end. A separate
    page could be created. Additionally, alerts can be implemented whenever a resource
    usage crosses the set threshold. For example, if available RAM is 16 GB, then
    a threshold can be set to 12 GB. Whenever RAM usage crosses 12 GB, a notification
    alert can be sent to Admin to take necessary actions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom scripts**: Python, Bash, or other languages can also be used to write
    scripts which can monitor the resource usage of machine and server externally
    and it can be integrated with an alerting system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other tools**: Prometheus, complemented with Grafana can be used to see real
    time statistics of the servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the deployment other tools can be of help. For cloud deployment,
    there are cloud provider specific tools, for example, AWS Cloudwatch, Azure Monitor,
    and Google Cloud operations suite.
  prefs: []
  type: TYPE_NORMAL
- en: '[Security Features](toc.xhtml#s276a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As of now, the application uses a token system to provide authentication and
    authorization for users. We created `**access_token**` and `**refresh_token**`
    using `**jsonwebtoken**`. Front end could use the `**access_token**` for every
    request and if `**access_token**` expires, and `**refresh_token**` is available,
    it could be used to generate a new `**access_token**`.
  prefs: []
  type: TYPE_NORMAL
- en: This could be improved with other grant types and features necessary for `**OAuth2**`
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '[SSL/TLS Encryption](toc.xhtml#s277a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Necessary support for SSL should be there. This means, if we need to host the
    application with a url such as HTTPS://, it should be possible, although there
    can be strategies to implement this. One is to make the application configurable
    to choose between HTTPS and HTTP. Another one is to use `**nginx**` in front and
    use SSL certificates with help of a Certification Authority (CA). Let us Encrypt
    is a free service and is widely recognized. It is easy to set up and provides
    a necessary level of encryption for secure communication.
  prefs: []
  type: TYPE_NORMAL
- en: '[Social Media Login](toc.xhtml#s278a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In case the application is going to be in public domain, it could be nice to
    implement login via social media platforms such as Google, Facebook, Twitter,
    and so on, to provide a seamless user registration and login.
  prefs: []
  type: TYPE_NORMAL
- en: '[Two-Factor Authentication](toc.xhtml#s279a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every now and then, we see the passwords and other details being hacked from
    websites with less secure infrastructure. It becomes indispensable to implement
    Two-Factor Authentication (2FA) to add an additional layer of security.
  prefs: []
  type: TYPE_NORMAL
- en: '[LDAP Integration](toc.xhtml#s280a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the application is deployed as a private to an organization, and if the organization
    has their own LDAP server in place, it could be great to make an application integrated
    with LDAP for user management. It can streamline the authentication and authorization
    process within the application.
  prefs: []
  type: TYPE_NORMAL
- en: '[Container-Based Deployments](toc.xhtml#s281a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, it is necessary to deploy the application as containers. Containerization
    with Docker and its orchestration with help of Kubernetes is the way to go. Together
    they provide a smooth and scalable deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable containerized deployment, you need to create:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dockerfile**: a Dockerfile is needed by Docker for specifying the base image
    (linux flavor and version needed for running the application), dependencies, variables,
    commands, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**docker-compose.yml**`: This is a YAML file that defines how the docker container
    should behave in production. This is used with Docker Compose, which is a tool
    for running the multi-container docker applications. With this file, we can also
    configure the application’s service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kubernetes configs**: We need to write Manifests for deployment, ConfigMaps,
    and other files to configure Kubernetes to orchestrate the Docker Containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usually when there is a need for this expertise, there are dedicated teams to
    do this job within the organization. In case you are willing to give it a try,
    installation of docker, writing a simple Dockerfile, and learning basic commands
    to run the container is the starting point.
  prefs: []
  type: TYPE_NORMAL
- en: '[Swagger UI](toc.xhtml#s282a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the application currently in place offers APIs, it is important to provide
    API testing and documentation. Swagger UI provides a web-based user interface
    where users can see the API endpoints, access the documentation associated with
    each endpoint, and make a call to it directly from the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Swagger UI is a tool provided by [https://swagger.io](https://swagger.io). It
    is popular due to its ease of use, one place to test endpoints and access documentation,
    security in place and being real-time and accurate.
  prefs: []
  type: TYPE_NORMAL
- en: It is not something to be shown to website users, for example, project managers
    and members since they do not need to know the underlying endpoints. However,
    for developers and QA team members it is an essential tool.
  prefs: []
  type: TYPE_NORMAL
- en: '[Staying Ahead](toc.xhtml#s283a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, there are many Large Language Models (LLMs) available,
    for example, OpenAI’s ChatGPT and Google’s Gemini. This is not traditional machine
    learning. This is an era of Generative Artificial Intelligence. AI is not just
    a tool to predict a value, for example, a house price, or to classify something
    into categories anymore. AI can also generate content for us. Given a context,
    AI can provide a paragraph, a page, a book in no time. AI can find errors in a
    code. Impressively, it can write code too. GitHub’s co-pilot is capable of providing
    in-place code snippets relevant to your application. AI can teach you a topic
    if you are willing to.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping in mind all of this, it is important to think and pen down how Generative
    AI can help. Considering our prime example, Project Management System, we could
    give a basic idea of what we are trying to manage and AI could help with creating
    the tasks for us. If we provide the complete Software Requirement Specification
    (SRS) to the AI, it can generate all of the details of tasks as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generative AI can be used in the following key areas (keeping it focused to
    the PMS):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Project planning** : If provided input goals such as what are we trying to
    achieve with the project, number of resources, timelines and constraints, GenAI
    can help with a comprehensive project plan, sprints, or milestone planning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Risk Assessment** : If the project status does not meet the milestone timelines,
    a risk assessment can be provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource Allocation**: If the resources are to be picked from a pool, given
    the history of resources work in other projects, a decision could be made for
    picking up the right resource for the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Preparing Reports**: Based on the current status of the project, automated
    reports can be generated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Task Prioritization**: Tasks can be given priority at the beginning of the
    project and the priority can be changed, if needed, based on the project status.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Predictive Analysis**: Based on the tasks complexity, status and in which
    phase it is, milestones status, a project end date of the next milestone date
    can be predicted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Preparing Lessons Learned**: At the end of the project, a list of lessons
    learned can be prepared to avoid making mistakes next time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Real-time Sentiment Analysis**: A task is usually commented on by the developers.
    A real-time sentiment analysis could be done.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There could be a lot more ways GenAI can help.
  prefs: []
  type: TYPE_NORMAL
- en: '[Further Reading](toc.xhtml#s284a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book covered Node.js, TypeScript, Express.js, Mocha, Chai, Redis, and some
    other tools. A book covering many aspects could only touch basic to medium levels
    of knowledge. For further learning, there are some suggestions for you to try.
  prefs: []
  type: TYPE_NORMAL
- en: '[Advanced Node.js Development](toc.xhtml#s285a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Topics such as streams, child processes, performance optimizations, and other
    such advanced topics can be learned further. Moreover, using decorators and design
    patterns will make your code neat, near zero defect, and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js can also be a great choice for applications needing heavy, real-time
    communication. Technologies such as Socket.io and websockets offer the necessary
    features.
  prefs: []
  type: TYPE_NORMAL
- en: One popular architecture is microservices. Resources focusing on microservices
    architectures can be considered for further learning.
  prefs: []
  type: TYPE_NORMAL
- en: '[Full Stack Development](toc.xhtml#s286a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A browser understands only three things— HTML, CSS, and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Since the underlying language, JavaScript, is the same for back end, for example,
    Node.js and front end, for example, React, Angular, Vue, and many more frameworks,
    getting into the shoes of a full-stack developer becomes rather easier.
  prefs: []
  type: TYPE_NORMAL
- en: After gaining a good understanding of Node.js/Typescript, getting familiar with
    React or Angular is a common trend as seen recently.
  prefs: []
  type: TYPE_NORMAL
- en: '[Test-Driven Development](toc.xhtml#s287a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many books that offer guidance on implementing projects using Test-Driven
    development. The TDD approach, if followed religiously, results in bug free projects.
    Not only does it allow you to catch the bugs at early stages, but it also lowers
    the cost of development and maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: In this approach, the test cases are written first and then the code is written
    in a way that the test would pass. Hence it is vital to write test cases which
    cover testing for all possible inputs.
  prefs: []
  type: TYPE_NORMAL
- en: There is usually a negative mindset when you talk about TDD. It is mostly about
    the time and learning needed to write the test cases upfront. However, when studies
    were performed, overall time and cost of the projects were much less as compared
    to projects executed without TDD.
  prefs: []
  type: TYPE_NORMAL
- en: '[Performance Tuning](toc.xhtml#s288a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There would be a point in life when you would have realized that the queries
    being used in the applications are taking more time than expected. You try to
    optimize the database using indexes, growing RAM size, and more. However, there
    is more to database management and optimization than just these tunings.
  prefs: []
  type: TYPE_NORMAL
- en: Application logic is another place where the optimization is done. Finding memory
    leaks and CPU-hungry logics is critical. The scary part is that developers often
    forget or do not take care of the optimization at the time of development. Sometimes,
    stress tests are also following the same path so they do not cover all parts of
    the code and thus some issues remain unidentified. These issues arise at the production
    instance, and at that time, it becomes challenging to fix.
  prefs: []
  type: TYPE_NORMAL
- en: '[Other Topics](toc.xhtml#s289a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from the aforementioned topics, the resources on serverless architecture,
    DevOps practices, and functional programming in Node.js can also be tried.
  prefs: []
  type: TYPE_NORMAL
- en: Integration of AI/ML, data analysis and visualization libraries is a key to
    get into a Data Science background.
  prefs: []
  type: TYPE_NORMAL
- en: Another important aspect is the security of your application. Although we have
    covered topics such as OAuth and JWT, more can be learned on how to secure Node.js
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: '[Final Thoughts](toc.xhtml#s290a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we reach the end of the book, it is important to reflect on the vast landscape
    that we have traversed. From the basics to building the API powered with authentication,
    caching and unit tests, we have covered significant ground.
  prefs: []
  type: TYPE_NORMAL
- en: As you progress further, you shall witness the power of JavaScript and will
    realize why it is becoming the most popular language of all time. The introduction
    to TypeScript made it more powerful by offering type safety and enhancing the
    code quality.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the landscape of web development is ever-changing. Technologies
    evolve. A decade ago everything was Java, Dot net, and Python. Today JavaScript
    is the one rocking and being bread and butter for a significant percentage of
    developers. The developers survey by Stackoverlfow.com in 2022 revealed that 67%
    developers use JavaScript for their work.
  prefs: []
  type: TYPE_NORMAL
- en: As you continue your journey, keep experimenting, keep innovating, keep learning.
    Most importantly, keep your passion for coding, for learning, for trying new things,
    alive. After all, the *journey has just begun*.
  prefs: []
  type: TYPE_NORMAL
