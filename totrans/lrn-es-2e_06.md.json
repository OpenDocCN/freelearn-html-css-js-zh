["```js\nfunction function_name(a, b, c) { \n  return this.value + a + b + c; \n} \nvar returned_value = Reflect.apply(function_name, {value: 100}, [10, 20, 30]); \nconsole.log(returned_value); //Output \"160\"\n```", "```js\nfunction constructor1(a, b) { \n  this.a = a; \n  this.b = b; \n  this.f = function(){ \n    return this.a + this.b + this.c; \n  } \n} \nfunction constructor2(){\n} \nconstructor2.prototype.c = 100; \nvar myObject = Reflect.construct(constructor1, [1,2], constructor2); \nconsole.log(myObject.f()); //Output \"103\" \n```", "```js\nvar obj = {}\nReflect.defineProperty(obj, \"name\", { \n  value: \"Eden\", \n  writable: true, \n  configurable: true, \n  enumerable: true \n}); \nconsole.log(obj.name); //Output \"Eden\"\n```", "```js\nvar obj = { __name__: \"Eden\" } \nReflect.defineProperty(obj, \"name\", { \n  get: function(){\n    return this.__name__; \n  }, \n  set: function(newName){ \n    this.__name__ = newName; \n  }, \n  configurable: true, \n  enumerable: true \n}); \nobj.name = \"John\"; \nconsole.log(obj.name); //Output \"John\"\n```", "```js\nvar obj = { name: \"Eden\" } \nconsole.log(obj.name); //Output \"Eden\" \nReflect.deleteProperty(obj, \"name\"); \nconsole.log(obj.name); //Output \"undefined\"\n```", "```js\nvar obj = { __name__: \"Eden\" };\nReflect.defineProperty(obj, \"name\", { \n  get: function(){ \n    return this.__name__; \n  } \n}); \nconsole.log(obj.name); //Output \"Eden\" \nvar name = Reflect.get(obj, \"name\", {__name__: \"John\"}); \nconsole.log(name); //Output \"John\"\n```", "```js\nvar obj1 = { __name__: \"Eden\" }; \nReflect.defineProperty(obj1, \"name\", { \n  set: function(newName){ \n    this.__name__ = newName; \n  }, \n  get: function(){ \n    return this.__name__; \n  }\n}); \nvar obj2 = { __name__: \"John\" };\nReflect.set(obj1, \"name\", \"Eden\", obj2); \nconsole.log(obj1.name); //Output \"Eden\" \nconsole.log(obj2.__name__); //Output \"Eden\"\n```", "```js\nvar obj = { name: \"Eden\" }; \nvar descriptor = Reflect.getOwnPropertyDescriptor(obj, \"name\"); \nconsole.log(descriptor.value); \nconsole.log(descriptor.writable); \nconsole.log(descriptor.enumerable); \nconsole.log(descriptor.configurable);\n```", "```js\nEden\ntrue\ntrue\ntrue\n```", "```js\nvar obj1 = { \n__proto__:  { name: \"Eden\" } \n}; \nvar obj2 = Reflect.getPrototypeOf(obj1); \nconsole.log(obj2.name); //Output \"Eden\"\n```", "```js\nvar obj = {}; \nReflect.setPrototypeOf(obj, { name: \"Eden\" }); \nconsole.log(obj.name); //Output \"Eden\"\n```", "```js\nvar obj = { \n  __proto__: { name: \"Eden\" }, \n  age: 12 \n}; \nconsole.log(Reflect.has(obj, \"name\")); //Output \"true\" \nconsole.log(Reflect.has(obj, \"age\")); //Output \"true\"\n```", "```js\nvar obj = { name: \"Eden\" }; \nconsole.log(Reflect.isExtensible(obj)); //Output \"true\" \nObject.preventExtensions(obj); \nconsole.log(Reflect.isExtensible(obj)); //Output \"false\"\n```", "```js\nvar obj = { name: \"Eden\" };\nconsole.log(Reflect.isExtensible(obj)); //Output \"true\" \nconsole.log(Reflect.preventExtensions(obj)); //Output \"true\" \nconsole.log(Reflect.isExtensible(obj)); //Output \"false\"\n```", "```js\nvar obj = { a: 1, b: 2, __proto__: { c: 3 } }; \nvar keys = Reflect.ownKeys(obj); \nconsole.log(keys.length); //Output \"2\" \nconsole.log(keys[0]); //Output \"a\" \nconsole.log(keys[1]); //Output \"b\"\n```"]