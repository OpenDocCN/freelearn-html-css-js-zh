- en: Chapter 1. Getting Started with D3.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：D3.js 入门
- en: '**D3.js** is an open source JavaScript library that provides the facility for
    manipulating HTML documents based upon data, using JavaScript as the language
    for implementing the mapping of data to the documents. Hence, the name **D3**
    (**D**ata **D**riven **D**ocuments). Many consider D3.js as a data visualization
    library. This may be correct, but D3.JS provides much more to its user than just
    visualization, such as:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**D3.js** 是一个开源的 JavaScript 库，它提供了基于数据操作 HTML 文档的功能，使用 JavaScript 作为实现数据到文档映射的语言。因此，名称
    **D3** （**D**ata **D**riven **D**ocuments）。许多人认为 D3.js 是一个数据可视化库。这可能正确，但 D3.js
    为用户提供的不仅仅是可视化，例如：'
- en: Efficient selection of items in the HTML DOM.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 HTML DOM 中高效选择项目。
- en: Binding of data to visual elements.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据与视觉元素绑定。
- en: Specifications on handling the addition and removal of data items.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理数据项添加和删除的规范。
- en: The ability to style DOM elements dynamically.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态样式化 DOM 元素的能力。
- en: Definition of an interaction model for the user with the data.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义用户与数据之间的交互模型。
- en: The ability to specify transitions between data visualizations based upon dynamic
    changes in data.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据数据动态变化指定数据可视化之间的过渡。
- en: D3.js helps you bring data to life using **HTML**, **SVG,** and **CSS**. It
    focuses on the data, the way it is presented to the user, the changes in visualization
    with changes in data, and the way the user interacts with data through the visualization.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3.js 帮助您使用 **HTML**、**SVG** 和 **CSS** 使数据生动起来。它关注数据，数据呈现给用户的方式，数据变化时可视化方式的改变，以及用户通过可视化与数据交互的方式。
- en: We are about to start on a fabulous journey of discovery with creating rich
    data visualizations with D3.js, and focusing on project-based learning of D3.js
    through practical examples. We will start out with the basic concepts, and then
    move through various examples of creating living data visualizations with D3.js.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将开始一段精彩的探索之旅，通过创建丰富的 D3.js 数据可视化，并专注于基于实际案例的项目式 D3.js 学习。我们将从基本概念开始，然后通过各种创建动态数据可视化的
    D3.js 示例进行学习。
- en: In this first chapter, we will start with a brief overview of several of the
    concepts in D3.js, create a minimal D3.js application, and examine several of
    the tools that you can use to build D3.js applications.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要介绍 D3.js 中的几个概念，创建一个最小的 D3.js 应用程序，并检查您可以使用来构建 D3.js 应用程序的一些工具。
- en: 'Specifically, in this chapter, we will cover the following topics:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中，我们将涵盖以下主题：
- en: A brief overview of D3.js
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3.js 简要概述
- en: The key design features of D3.js, including selection, data management, interaction,
    animation, and modules
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3.js 的关键设计特性，包括选择、数据管理、交互、动画和模块
- en: An introduction to development tools to get you going quickly with D3.js
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3.js 开发工具简介，助您快速上手
- en: A simple Hello World program using D3.js
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 D3.js 的简单 Hello World 程序
- en: Examining the DOM generated by D3.js with the Google Chrome Developer tools
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Google Chrome 开发者工具检查 D3.js 生成的 DOM
- en: A brief overview of D3.js
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: D3.js 简要概述
- en: D3.js is a JavaScript library for manipulating DOM objects based upon data.
    By using D3.js and modern browsers, specifically those which can display and manipulate
    SVG, you can create rich visualizations of data. These visualizations not only
    visualize the data, but can also include descriptions to change what is shown
    to the user based upon the changes in the data, and the way in which the user
    can interact with the visuals which represent the data.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 是一个基于数据的 JavaScript 库，用于操作 DOM 对象。通过使用 D3.js 和现代浏览器（特别是那些可以显示和操作 SVG 的浏览器），您可以创建丰富的数据可视化。这些可视化不仅可视化数据，还可以包括描述，根据数据的变化向用户显示不同的内容，以及用户如何与代表数据的视觉元素进行交互。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: You can get D3.js at [http://d3js.org](http://d3js.org).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [http://d3js.org](http://d3js.org) 获取 D3.js。
- en: '![A brief overview of D3.js](img/B04230_01_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![D3.js 简要概述](img/B04230_01_01.jpg)'
- en: D3.js differs from other data visualization frameworks such as **Processing**
    ([https://processing.org/](https://processing.org/)) in that it provides a domain-specific
    language for transforming the DOM based upon data, whereas tools like Processing
    provide a lower level direct rendering model. D3.js lets you describe the means
    of visualizing the data instead of coding all of the specific details to draw
    the pixels of the visualizations. This facilitates easy creation of visualizations
    by allowing D3.js to worry about the details on rendering the data, based on the
    standards of SVG and CSS.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 与其他数据可视化框架（如 **Processing** ([https://processing.org/](https://processing.org/))）不同，因为它提供了一个基于数据的特定领域语言来转换
    DOM，而像 Processing 这样的工具则提供了一个更底层的直接渲染模型。D3.js 允许你描述数据可视化的方式，而不是编写所有具体的细节来绘制视觉化的像素。这通过允许
    D3.js 根据 SVG 和 CSS 的标准来处理数据渲染的细节，简化了可视化创建的过程。
- en: A fundamental concept in D3.js is the ability to easily manipulate the DOM in
    a web document. This is often a complicated problem, and many frameworks (such
    as **jQuery**) have been created to perform this task. D3.js provides capabilities
    similar to jQuery, and for those familiar with jQuery, much of D3.js will feel
    familiar.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 的一个基本概念是能够轻松地在网页文档中操作 DOM。这通常是一个复杂的问题，许多框架（如 **jQuery**）被创建来执行这项任务。D3.js
    提供了与 jQuery 相似的功能，对于那些熟悉 jQuery 的人来说，D3.js 的许多内容都会感到熟悉。
- en: But D3.js takes what libraries like jQuery provide and extends them to provide
    a more declarative nature of modifying the DOM to create visuals based on the
    structure of the data instead of simply being a framework for low level DOM manipulation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但 D3.js 在提供类似 jQuery 等库的功能的基础上进行了扩展，以提供更声明式的 DOM 修改方式，用于根据数据结构创建视觉元素，而不是仅仅作为一个低级
    DOM 操作的框架。
- en: This is important, as data visualization requires more than an ability to simply
    modify the DOM; it should also describe how the DOM should be changed when data
    is modified, including the way it changes when the user interacts with the visual
    elements representing the data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要，因为数据可视化不仅需要简单地修改 DOM 的能力；它还应该描述当数据被修改时 DOM 应该如何改变，包括用户与代表数据的视觉元素交互时 DOM
    的变化方式。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will not cover jQuery in this book. Our focus will purely be on how we can
    manipulate the DOM using the facilities provided by D3.js. We will use D3.js constructs
    to apply styles instead of depending on CSS. All of this is to exemplify how to
    use the facilities of D3.js instead of hiding any of it with other tools.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这本书中不会涵盖 jQuery。我们的重点将纯粹是如何使用 D3.js 提供的设施来操作 DOM。我们将使用 D3.js 构造来应用样式，而不是依赖于
    CSS。所有这些都是为了展示如何使用 D3.js 的设施，而不是用其他工具隐藏任何部分。
- en: We will examine many concepts in D3.js in detail, but let's start with a few
    high-level ideas in D3.js that are worth mentioning first.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细探讨 D3.js 中的许多概念，但让我们首先提及 D3.js 中一些值得注意的高层次想法。
- en: Selections
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择
- en: The core operation in D3.js is **selection**, which is a filtered set of DOM
    elements queried from the document. As the data changes (that is, it is either
    loaded or modified), the result of the selection filter is changed by D3.js based
    on how the data was changed. Hence, the visual representation also changes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 中的核心操作是 **选择**，它是从文档中查询得到的 DOM 元素的一个过滤集合。当数据发生变化（即，它被加载或修改）时，D3.js 会根据数据变化的方式改变选择过滤器的结果。因此，视觉表示也会随之改变。
- en: D3.js uses the W3C selectors API ([http://www.w3.org/TR/selectors-api/](http://www.w3.org/TR/selectors-api/))
    for identifying the items in the DOM. This is a mini-language consisting of predicates
    that can filter the elements in the DOM by tag, class, id, attribute, containment,
    adjacency, and several other facets of the DOM. Predicates can also be intersected
    or unioned, resulting in a rich and concise selection of elements.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 使用 W3C 选择器 API ([http://www.w3.org/TR/selectors-api/](http://www.w3.org/TR/selectors-api/))
    来识别 DOM 中的项目。这是一个由谓词组成的迷你语言，可以按标签、类、ID、属性、包含、相邻等 DOM 的多个方面过滤 DOM 元素。谓词也可以进行交集或并集操作，从而得到丰富且简洁的元素选择。
- en: Selections are implemented by D3.js through the global namespace `d3`, which
    provides the `d3.select()` and `d3.selectAll()` functions. These functions utilize
    the mini-language and return, respectively, the first or all items matching the
    specification. Using the result of these selections, D3.js provides additional
    abilities for modifying those elements based upon your data using a process known
    as **data binding**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 选择是通过 D3.js 的全局命名空间 `d3` 实现的，它提供了 `d3.select()` 和 `d3.selectAll()` 函数。这些函数使用迷你语言，并分别返回与指定匹配的第一个或所有项目。使用这些选择的成果，D3.js
    提供了通过称为 **数据绑定** 的过程，根据您的数据修改这些元素的能力。
- en: Data and data binding
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据和数据绑定
- en: The data in D3.js is **bound** to the DOM elements. Through **binding**, D3.js
    tracks a collection of objects along with their properties, and based upon rules
    that you specify, it modifies the DOM of the document based upon that data. This
    binding is performed through various operators provided by D3.js, which can easily
    be used to describe the mapping of the visual representation of the data. At this
    point, we'll introduce the three stages of data binding, and dive into more details
    on the process in [Chapter 2](ch02.html "Chapter 2. Selections and Data Binding"),
    *Selections and Data Binding*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 中的数据是 **绑定** 到 DOM 元素上的。通过 **绑定**，D3.js 跟踪一组对象及其属性，并根据您指定的规则，根据该数据修改文档的
    DOM。这种绑定是通过 D3.js 提供的各种运算符来执行的，这些运算符可以轻松地用来描述数据的视觉表示映射。在此阶段，我们将介绍数据绑定的三个阶段，并在
    [第 2 章](ch02.html "第 2 章。选择和数据绑定") 中更详细地探讨这个过程，*选择和数据绑定*。
- en: 'The process of binding in D3.js consists of three stages: **Enter**, **Update**,
    and **Exit**. When performing a selection for the first time with D3.js, you can
    specify the data that is to be bound and needs to be entered. You can also specify
    the code to be executed for each of these stages.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 中的绑定过程包括三个阶段：**进入**、**更新**和**退出**。当第一次使用 D3.js 进行选择时，您可以指定要绑定并需要进入的数据。您还可以指定每个阶段要执行的代码。
- en: When data is first joined into a selection, new visuals will need to be created
    in the DOM for each data item. This is performed using the enter process which
    is started by calling the `.enter()` function. Code that you specify after the
    `.enter()` function will be used to specify each and every piece of data that
    is represented visually, and D3.js will use this code to automatically generate
    the DOM that is required instead of you needing to code it all in detail.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据首次加入选择时，需要在 DOM 中为每个数据项创建新的视觉元素。这是通过调用 `.enter()` 函数启动的进入过程来完成的。在 `.enter()`
    函数之后指定的代码将用于指定每个和每个视觉表示的数据，D3.js 将使用此代码自动生成所需的 DOM，而不是您需要详细编写所有代码。
- en: As the application modifies this bound data, we will execute the selection repeatedly.
    D3.js will make a note of the existing visuals and the data they are bound to,
    and allow us to make modifications to the visuals based upon the way the data
    changed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序修改这些绑定数据时，我们将重复执行选择。D3.js 将记录现有的视觉元素及其绑定数据，并允许我们根据数据的变化对视觉元素进行修改。
- en: If data items are removed, we can use the D3.js `.exit()` function in a selection
    to inform D3.js to remove the visuals from the display. Normally, this is done
    by telling D3.js to remove the associated DOM elements, but we can also execute
    animations to make the removal demonstrate to the user how the visual is changing
    instead of a jarring change of display.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果删除数据项，我们可以在选择中使用 D3.js 的 `.exit()` 函数来通知 D3.js 从显示中移除视觉元素。通常，这是通过告诉 D3.js
    移除相关的 DOM 元素来完成的，但我们也可以执行动画来向用户展示视觉元素是如何变化的，而不是突然改变显示。
- en: If we create a selection without an explicit reference to `.enter()` or `.exit()`,
    we are informing D3.js that we want to potentially make modifications to the visuals
    that are already bound to the data. This gives us the chance to examine the properties
    of each data item and instruct D3.js on changing the bound visuals appropriately.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们创建一个没有显式引用 `.enter()` 或 `.exit()` 的选择，我们是在通知 D3.js 我们想要对已经绑定到数据上的视觉元素进行可能的修改。这给了我们检查每个数据项属性并指导
    D3.js 适当更改绑定视觉元素的机会。
- en: This separation of enter, update, and exit processes allows for very precise
    control of the visual element lifecycle. These states allow you to update visuals
    as the data changes either internally or through user interaction. It also gives
    you the ability to provide well-defined transitions or animations for each of
    the three states, which are essential for dynamic data visualizations that demonstrate
    data not simply statically but also how it changes through motion.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种将进入、更新和退出过程分离的做法，使得对视觉元素生命周期的控制非常精确。这些状态允许你在数据内部变化或通过用户交互变化时更新视觉元素。它还赋予你为三个状态中的每一个提供良好定义的过渡或动画的能力，这对于动态数据可视化至关重要，它不仅展示了数据的静态状态，还展示了数据如何通过运动变化。
- en: Interaction and animation
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交互和动画
- en: D3.js provides facilities for animating the visual elements based upon the changes
    in data or upon events created by the user such as mouse events. These are performed
    by integrating with the events in the DOM using the `.on()` function as part of
    a selection.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js提供了基于数据变化或用户创建的事件（如鼠标事件）来动画化视觉元素的功能。这些操作通过将`.on()`函数作为选择的一部分与DOM事件集成来执行。
- en: D3.js event handlers are similar to those provided by jQuery. However, instead
    of just calling a function, they also expose the bound data item to the function,
    and if you want, the index of the data item in a collection. This saves us from
    having to write code that looks up the data item based upon things like mouse
    positions, and therefore, greatly simplifies our code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js的事件处理器与jQuery提供的事件处理器类似。然而，它们不仅调用一个函数，还向函数暴露绑定数据项，如果你愿意，还可以暴露数据项在集合中的索引。这使我们免于编写基于鼠标位置等查找数据项的代码，从而极大地简化了我们的代码。
- en: Additionally, through integration with the enter, update, and exit selection
    processes, we can declaratively code scene transitions in each of these scenarios.
    These transitions expose the `style` and `attr` operators of the selections. Any
    changes that we make to those properties are noticed by D3.js, which will then
    apply an **interpolator** to transition the property values from the previous
    to the new values over a given period of time.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，通过集成进入、更新和退出选择过程，我们可以在这些场景中声明式地编写场景过渡。这些过渡暴露了选择的`style`和`attr`运算符。我们对这些属性所做的任何更改都会被D3.js注意到，然后它将应用**插值器**，在给定的时间内将属性值从上一个值过渡到新值。
- en: By using interpolation, we can avoid coding the repeated changes in the values
    of the visual properties (such as location and color) at each step of the animation.
    D3.js does all this for us automatically!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用插值，我们可以避免在动画的每个步骤中重复编写视觉属性（如位置和颜色）值的更改代码。D3.js会为我们自动完成所有这些操作！
- en: Additionally, D3.js automatically manages the scheduling of animations and transitions.
    This removes the need for you to manage complicated concurrency issues and guarantees
    exclusive access to the resources for each element along with highly optimized
    animation through a shared timer managed by D3.js.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，D3.js自动管理动画和过渡的调度。这消除了你需要管理复杂的并发问题，并保证了每个元素对资源的独占访问，同时通过D3.js管理的共享计时器实现了高度优化的动画。
- en: Modules
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块
- en: D3.js provides a number of **modules** of prebuilt functionality for helping
    us code many of the things that we need to do for creating rich and interactive
    data visualizations. These modules in D3.js are grouped into a number of generated
    categories based upon the capabilities provided to the programmer.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js提供了一系列预构建的功能模块，帮助我们编写创建丰富和交互式数据可视化所需的大部分代码。这些模块在D3.js中根据提供给程序员的特性被分组到多个生成的类别中。
- en: '**Shapes**: The shapes module gives us numerous prebuilt visuals including,
    and not limited to, lines, arcs, areas, and scatterplot symbols. By using D3.js
    shapes, we can simply add the geometric renderings to the visualization, and not
    worry about drawing each in detail, pixel by pixel.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**形状**: 形状模块为我们提供了众多预构建的视觉元素，包括但不限于线条、弧线、区域和散点图符号。通过使用D3.js的形状，我们可以简单地添加几何渲染到可视化中，而无需担心逐个详细绘制，像素像素地绘制。'
- en: '**Scales**: This module gives us a means of converting data values into coordinates
    within the browser. These save us from coding repetitive, complex, and often error-prone
    translations by providing them out of the box. They also provide the basis for
    generating the visuals for axes, again saving us much effort in rendering visuals
    that would otherwise be complicated.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**比例尺**：本模块为我们提供了一种将数据值转换为浏览器内坐标的方法。它们通过提供现成的转换，使我们免于编写重复的、复杂的、常常是容易出错的代码。它们还提供了生成轴视觉的基础，再次节省了我们渲染复杂视觉的大量工作。'
- en: '**Layouts**: The layouts module gives us the tools to easily (if not automatically)
    calculate the visual relationships between the elements in our visualizations.
    This is often the most complicated part of data visualizations, and D3.js provides
    us with many prebuilt hierarchical and physical layouts that make our lives as
    programmers much simpler.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局**：布局模块为我们提供了轻松（如果不是自动）计算可视化中元素之间视觉关系的工具。这通常是数据可视化中最复杂的一部分，D3.js 为我们提供了许多预构建的层次结构和物理布局，使我们的编程生活变得更加简单。'
- en: '**Behaviors**: This module provides implementations of the common user interaction
    patterns. An example would be a selection behavior that implements listening to
    the mouse events on visual elements, and changes the presentation of the item
    to represent that the user has selected it.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行为**：本模块提供了常见用户交互模式的实现。一个例子是选择行为，它实现了监听视觉元素上的鼠标事件，并改变项目的展示方式以表示用户已选择它。'
- en: '**Data-processing modules**: D3.js also includes various data-processing utilities
    such as nest and cross operators, and parsers for data in formats, such as CSV,
    JSON, TSV, and for data, in date and number formats.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据处理模块**：D3.js 还包括各种数据处理实用工具，如 nest 和 cross 操作符，以及用于 CSV、JSON、TSV 等格式的数据解析器，以及用于日期和数字格式的数据。'
- en: We will discuss these modules in detail in their dedicated chapters.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在各自的章节中详细讨论这些模块。
- en: Tools for creating and sharing D3.js visualizations
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和共享 D3.js 可视化的工具
- en: D3.js applications can be built using many, if not any, web development tools.
    The choice of tool is often dependent upon the individual coder, as each platform
    (.Net, Node.JS, Ruby on Rails, and so on) provides their own (and many third-party)
    tools.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 应用程序可以使用许多，如果不是任何，网络开发工具来构建。工具的选择通常取决于个人开发者，因为每个平台（.Net、Node.JS、Ruby on
    Rails 等）都提供了自己的（以及许多第三方）工具。
- en: This book will not be prescriptive and specify editors. Instead, it will generally
    refer you to the online and functional examples of all the code, and leave it
    to the readers to reproduce them in their own development environment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将不会指定编辑器，而是通常会将您引导到所有代码的在线和功能示例，并留给读者在自己的开发环境中重现它们。
- en: The examples in this book will be delivered using a combination of **Js Bin**
    ([http://jsbin.com/](http://jsbin.com/)) and **bl.ocks.org** ([http://bl.ocks.org/](http://bl.ocks.org/)),
    and we will use the Google Chrome Developer tools for examining the DOM in our
    examples. A brief introduction to each is therefore worthwhile, as each example
    in this book will be linked to an example on bl.ocks.org, which itself will contain
    a link to the code in Js Bin for you to play with dynamically.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的示例将使用 **Js Bin** ([http://jsbin.com/](http://jsbin.com/)) 和 **bl.ocks.org**
    ([http://bl.ocks.org/](http://bl.ocks.org/)) 的组合来提供，我们将使用 Google Chrome 开发者工具来检查示例中的
    DOM。因此，对每个工具的简要介绍都是值得的，因为本书中的每个示例都将链接到 bl.ocks.org 上的一个示例，该示例本身将包含一个链接到 Js Bin
    中的代码，以便您可以动态地与之互动。
- en: Js Bin
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Js Bin
- en: Js Bin ([http://jsbin.com/](http://jsbin.com/)) is a website that functions
    as a development tool for facilitating the quick creation and sharing of simple
    JavaScript applications that run within the browser. It provides many features,
    including saving and sharing of HTML and JavaScript, real-time update of the UI
    while you are editing, and a very cool ability to push your code and data to GitHub.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Js Bin ([http://jsbin.com/](http://jsbin.com/)) 是一个网站，充当浏览器内简单 JavaScript 应用程序的快速创建和共享的开发工具。它提供了许多功能，包括保存和共享
    HTML 和 JavaScript、编辑时的实时 UI 更新，以及将您的代码和数据推送到 GitHub 的非常酷的能力。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: GitHub is a free code sharing and source code management tool. If you are not
    familiar with it, check it out at [http://www.github.com](http://www.github.com).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 是一个免费的代码共享和源代码管理工具。如果您不熟悉它，请访问 [http://www.github.com](http://www.github.com)。
- en: I think that Js Bin provides one of the least-friction means of getting up and
    coding with D3.js. You can simply go to the website, start editing in HTML, CSS,
    or JavaScript, and see the results as you type in the browser pane. No need for
    installing any development tools or web servers!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为Js Bin提供了使用D3.js快速开始编码的最少摩擦方式。你只需访问网站，开始编辑HTML、CSS或JavaScript，并在浏览器窗格中键入时查看结果。无需安装任何开发工具或Web服务器！
- en: As an example of Js Bin, the following link will take you to the first of our
    examples, the canonical Hello World application written purely in HTML. [http://jsbin.com/zimeqe/edit?html,output](http://jsbin.com/zimeqe/edit?html,output).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Js Bin的示例，以下链接将带你到我们的第一个示例，即完全用HTML编写的经典Hello World应用程序。[http://jsbin.com/zimeqe/edit?html,output](http://jsbin.com/zimeqe/edit?html,output)。
- en: '![Js Bin](img/B04230_01_02.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Js Bin](img/B04230_01_02.jpg)'
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Don't worry right now about the code embedded in HTML in this demonstration.
    We will again look at this example along with more complicated ones later in this
    chapter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不必担心这个演示中嵌入在HTML中的代码。我们将在本章后面更复杂的示例中再次查看这个示例。
- en: The preceding screenshot displays a single bin, a combination of HTML, CSS,
    and JavaScript that is stored within Js Bin's servers. The Js Bin user interface
    provides multiple tabs/panes for the HTML, CSS, JavaScript, Console, and HTML
    output from the code in the bin. With **Auto-run JS** selected, the output will
    be regenerated on every interactive change to any of the code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图显示了一个bin，它是HTML、CSS和JavaScript的组合，存储在Js Bin的服务器上。Js Bin用户界面为HTML、CSS、JavaScript、控制台和bin中代码的HTML输出提供了多个标签页/窗格。当选择**自动运行JS**时，任何代码的交互式更改都会重新生成输出。
- en: This makes Js Bin excellent for interactively demonstrating and creating D3.js
    visualizations.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得Js Bin非常适合交互式演示和创建D3.js可视化。
- en: bl.ocks.org
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: bl.ocks.org
- en: bl.ocks.org ([http://bl.ocks.org](http://bl.ocks.org)) is a service for D3.js
    code examples that you place on GitHub, a free source code and sharing repository,
    in an entity known as a gist. A gist is simply one or more reusable and sharable
    piece of code that are managed by GitHub. They are an excellent means of remembering
    and sharing small code examples.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: bl.ocks.org ([http://bl.ocks.org](http://bl.ocks.org)) 是一个用于放置在GitHub上的D3.js代码示例的服务，GitHub是一个免费的开源代码和分享仓库，以实体形式存在，称为gist。gist只是由GitHub管理的可重用和可共享的代码片段之一。它们是记住和分享小型代码示例的绝佳方式。
- en: bl.ocks.org was created by Mike Bostock, the original creator of D3.js. It is
    able to create great D3.js visualizations using gists, provided that the gist
    itself is a piece of D3.js code. Many, if not most, D3.js examples on the Web
    are presented as examples on bl.ocks.org, and this book will follow this model.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: bl.ocks.org是由D3.js的原始创建者Mike Bostock创建的。只要gist本身是D3.js代码，它就能使用gist创建出色的D3.js可视化。网络上的许多（如果不是大多数）D3.js示例都是以bl.ocks.org上的示例形式呈现的，本书将遵循这种模式。
- en: For a demonstration, open [http://bl.ocks.org/d3byex/ed79b9fee311091333d6](http://bl.ocks.org/d3byex/ed79b9fee311091333d6),
    which takes you to a bl.ock.org version of the **Hello World** example. Opening
    the link will present you with the following content.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，请打开[http://bl.ocks.org/d3byex/ed79b9fee311091333d6](http://bl.ocks.org/d3byex/ed79b9fee311091333d6)，这将带你到bl.ock.org版本的**Hello
    World**示例。打开链接将显示以下内容。
- en: '![bl.ocks.org](img/B04230_01_03.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![bl.ocks.org](img/B04230_01_03.jpg)'
- en: This bl.ock follows a pattern that will be used throughout the book. Each example
    will be in its own bl.ocks.org and consist of a title, the D3.js code in operation,
    a link to live code on Js Bin, and then the HTML and any data that is in use in
    the example.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个bl.ock遵循本书中将要使用的模式。每个示例都将位于自己的bl.ocks.org中，并包括标题、正在运行的D3.js代码、Js Bin上实时代码的链接，以及示例中使用的HTML和任何数据。
- en: At the very top of the page, there is a link that you can click which will also
    take you to the gist on GitHub.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面的最顶部，有一个你可以点击的链接，它也会带你到GitHub上的gist。
- en: '![bl.ocks.org](img/B04230_01_04.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![bl.ocks.org](img/B04230_01_04.jpg)'
- en: The link displayed in the preceding screenshot takes you to the following page
    at [https://gist.github.com/d3byex/ed79b9fee311091333d6](https://gist.github.com/d3byex/ed79b9fee311091333d6)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图中显示的链接将带你到[https://gist.github.com/d3byex/ed79b9fee311091333d6](https://gist.github.com/d3byex/ed79b9fee311091333d6)上的页面。
- en: '![bl.ocks.org](img/B04230_01_05.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![bl.ocks.org](img/B04230_01_05.jpg)'
- en: This code is not dynamic like the one on Js Bin, but you can click on the **Download
    Zip** button, and all the files in the gist get downloaded to your system as a
    ZIP file.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码与Js Bin上的代码不同，它不是动态的，但你可以点击**下载 Zip**按钮，并将gist中的所有文件作为一个ZIP文件下载到你的系统中。
- en: Google Chrome and Developer tools
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Chrome 和开发者工具
- en: D3.js applications can be developed in any number of tools. In this book, we
    will use Google Chrome as a browser, and use its embedded development tools. You
    can also use Firefox or Internet Explorer and their respective development plugins.
    Theoretically, all the examples will run identically in all three browsers, but
    have only been tested in Google Chrome.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 应用可以在任何数量的工具中开发。在这本书中，我们将使用 Google Chrome 作为浏览器，并使用其内置的开发工具。您也可以使用 Firefox
    或 Internet Explorer 以及它们各自的开发插件。从理论上讲，所有示例都将在这三个浏览器中运行得完全相同，但仅在 Google Chrome
    中进行了测试。
- en: You can access the developer tools from the Chrome settings button, or by using
    the key combination of *option* + *command* + *I* (on Mac) or *Ctrl* + *Shift*
    + *I* (on Windows). Pressing the *F12* button also takes you to the Chrome Developer
    tools on a Windows platform.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过 Chrome 设置按钮访问开发者工具，或者使用键组合 *option* + *command* + *I*（在 Mac 上）或 *Ctrl*
    + *Shift* + *I*（在 Windows 上）。在 Windows 平台上按下 *F12* 按钮也会带您进入 Chrome 开发者工具。
- en: The following screenshot demonstrates the Google Chrome Developer tools open
    on the **Epicyclic Gearing** bl.ock at [http://bl.ocks.org/mbostock/1353700](http://bl.ocks.org/mbostock/1353700)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了在 [http://bl.ocks.org/mbostock/1353700](http://bl.ocks.org/mbostock/1353700)
    的 **Epicyclic Gearing** bl.ock 上打开的 Google Chrome 开发者工具。
- en: '![Google Chrome and Developer tools](img/B04230_01_06.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![Google Chrome 和开发者工具](img/B04230_01_06.jpg)'
- en: On opening the developer tools, you will be presented with a panel that opens
    in the browser which displays the details of the content on the page.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开开发者工具时，您将看到一个在浏览器中打开的面板，该面板显示页面内容的详细信息。
- en: '![Google Chrome and Developer tools](img/B04230_01_07.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![Google Chrome 和开发者工具](img/B04230_01_07.jpg)'
- en: In this case the pane opens on the right (you can configure the location where
    it opens), and displays the HTML for the page with the main SVG element of the
    page highlighted. While selecting nodes in HTML, the tools will highlight that
    element in the web page, and display the selected details for the element, in
    this case, the styles. We will use these tools in [Chapter 2](ch02.html "Chapter 2. Selections
    and Data Binding"), *Selections and Data Binding*, to demonstrate how D3.js binds
    data to the DOM elements, and in later chapters to understand how.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，面板在右侧打开（您可以配置其打开的位置），并显示带有页面主要 SVG 元素的页面 HTML，并突出显示该元素。在 HTML 中选择节点时，工具将突出显示网页中的该元素，并显示该元素的选择详情，在这种情况下，是样式。我们将在
    [第 2 章](ch02.html "第 2 章。选择和数据绑定")，*选择和数据绑定* 中使用这些工具来演示 D3.js 如何将数据绑定到 DOM 元素，并在后面的章节中了解这一点。
- en: Hello World – D3.js style
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello World – D3.js 风格
- en: Now let's apply what we have learned in this chapter by stepping through an
    example, and see how we use D3.js to modify the DOM. The example will be the same
    as the one we just saw in the previous section; we'll walk through it to see how
    it functions.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过一个示例来应用本章学到的知识，看看我们如何使用 D3.js 修改 DOM。示例将与我们在上一节中看到的相同；我们将逐步分析它以了解其功能。
- en: 'The following is the entire entire HTML for the application:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该应用程序的完整 HTML 代码：
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (1.1): [http://goo.gl/7KkIuC](http://goo.gl/7KkIuC)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (1.1): [http://goo.gl/7KkIuC](http://goo.gl/7KkIuC)'
- en: 'The code appends a level one header using an `h1` tag to the body tag of the
    document. The `h1` tag then has its content set to the text `Hello World`. And
    as we saw earlier, the output in the browser looks like the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 代码使用 `h1` 标签向文档的 `body` 标签中添加一个一级标题。然后，`h1` 标签的内容被设置为文本 `Hello World`。正如我们之前看到的，浏览器中的输出看起来如下截图所示：
- en: '![Hello World – D3.js style](img/B04230_01_08.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![Hello World – D3.js 风格](img/B04230_01_08.jpg)'
- en: 'There are two primary parts to this application, both of which we will see
    in almost every example. The first part includes a reference to the D3.js script,
    which is performed with the following code placed just inside the `<body>` tag:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序有两个主要部分，我们几乎在每一个示例中都会看到这两个部分。第一部分包括对 D3.js 脚本的引用，该脚本通过以下代码放置在 `<body>`
    标签内执行：
- en: '[PRE1]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This references the minified D3.js file directly from the D3.js ([http://d3js.org/](http://d3js.org/))
    website. You can also copy this file and place it locally on your web server or
    in a Web project. Since all the examples in this book are online, we will always
    use this URL.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这直接从 D3.js ([http://d3js.org/](http://d3js.org/)) 网站引用了压缩的 D3.js 文件。您也可以复制此文件并将其放置在您的
    Web 服务器或 Web 项目中。由于本书中的所有示例都是在线的，我们将始终使用此 URL。
- en: Note that we also have to specify `charset="utf-8`". This is normally not required
    for most JavaScript libraries, but D3.js is UTF-8 encoded and not including this
    can cause issues. So, make sure you don't forget this attribute.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们还需要指定`charset="utf-8"`。对于大多数JavaScript库来说，这通常不是必需的，但D3.js是UTF-8编码的，如果不包含这个属性可能会引起问题。所以，请确保不要忘记这个属性。
- en: The actual D3.js code in this example consists of the following three functions
    placed within another `<script>` tag within the body of the document.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本例中的实际D3.js代码由以下三个函数组成，这些函数放置在文档主体内的另一个`<script>`标签中。
- en: '[PRE2]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let's examine how this puts the text in the web page.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这是如何将文本放入网页中的。
- en: '[PRE3]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: All D3.js statements will start with the use of the `d3` namespace. This is
    the root of where we start accessing all the D3.js functions. In this line, we
    call the `.select()` function, passing its `body`. This is telling D3.js to find
    the first body element in the document and return it to us for performing other
    operations upon it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 所有D3.js语句都将从使用`d3`命名空间开始。这是我们开始访问所有D3.js函数的根。在这行代码中，我们调用`.select()`函数，传递其`body`参数。这是告诉D3.js找到文档中的第一个`body`元素并将其返回给我们，以便对其进行其他操作。
- en: The `.select()` function returns a D3.js object representing the body DOM object.
    We can immediately call `.append('h1')` to add the header element inside the body
    of the document.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`.select()`函数返回一个代表body DOM对象的D3.js对象。我们可以立即调用`.append(''h1'')`在文档的body中添加标题元素。'
- en: 'The `.append()` function returns another D3.js object, but this one represents
    the new `h1` DOM element. So all we need to do is to make a **chained** call:
    `.text(''Hello World!'')`, and our code is complete.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`.append()`函数返回另一个D3.js对象，但这个对象代表新的`h1` DOM元素。所以我们只需要进行一个**链式**调用：`.text(''Hello
    World!'')`，我们的代码就完成了。'
- en: This process of calling functions in this manner is referred to in D3.js parlance
    as **chaining,** and in general, it is referred to as a **fluent** API in programming
    languages. This chaining is the aforementioned mini-language. Each chained D3.js
    function call further specifies the operation, allowing you to very easily describe
    how you want to modify the DOM through chained method calls.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式调用函数的过程在D3.js术语中被称为**链式操作**，在编程语言中通常被称为**流畅API**。这种链式操作就是前面提到的迷你语言。每个链式调用的D3.js函数进一步指定操作，使您能够非常容易地通过链式方法调用描述您想要如何修改DOM。
- en: This sometimes feels strange to those who have not had experience in using a
    fluent syntax, but once you get used to it, I guarantee that you will see the
    reason behind using this type of syntax. As we will see through the examples that
    we cover, this provides us with a very concise means of declaratively instructing
    D3.js on what we want in our visualization.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于没有使用流畅语法经验的那些人来说，这有时会感觉有些奇怪，但一旦习惯了，我保证你会看到使用这种语法的原因。正如我们将通过所涵盖的示例看到的那样，这为我们提供了一种非常简洁的方法，可以声明性地指导D3.js我们想要在可视化中实现的内容。
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For those familiar with jQuery, this syntax will look familiar. An equivalent
    piece of code could be written in JQuery as `$('body').append('h1').text('Hello
    World');`
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于熟悉jQuery的人来说，这种语法看起来很熟悉。等效的代码可以用JQuery写成`$('body').append('h1').text('Hello
    World');`
- en: But as we will see in more complex examples, the features provided by D3.js
    will give us much more power to create data visualizations than can be done with
    jQuery.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 但正如我们将在更复杂的示例中看到的那样，D3.js提供的功能将给我们提供比jQuery更多的能力来创建数据可视化。
- en: Examining the DOM generated by D3.js
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查D3.js生成的DOM
- en: Now let's take a quick look at the DOM that was created by this code using the
    Chrome Developer Tools. Open the developer tools using the instructions given
    earlier in the chapter. I prefer mine to be displayed to the right of the page,
    and the book will follow this convention.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速查看由这段代码创建的DOM结构，使用Chrome开发者工具。按照本章前面给出的说明打开开发者工具。我更喜欢将其显示在页面右侧，本书将遵循这一惯例。
- en: '![Examining the DOM generated by D3.js](img/B04230_01_09.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![检查D3.js生成的DOM](img/B04230_01_09.jpg)'
- en: 'Since this example (and all the examples in this book) is hosted within Js
    Bin, there is a bunch of HTML content generated automatically and injected into
    our page by the backend of Js Bin. To find the element corresponding to the text
    generated by our code, you can drill through the DOM in the explorer. Otherwise,
    you can right-click on the element in the output pane of the browser, and select
    **Inspect Element** as seen in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个示例（以及本书中的所有示例）都在 Js Bin 中托管，因此自动生成并注入到我们页面中的 HTML 内容有很多。要找到与我们的代码生成的文本对应的元素，你可以在浏览器中的资源管理器中钻取
    DOM。否则，你可以在浏览器输出面板中的元素上右键单击，并选择**检查元素**，如以下屏幕截图所示：
- en: '![Examining the DOM generated by D3.js](img/B04230_01_10.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![检查由 D3.js 生成的 DOM](img/B04230_01_10.jpg)'
- en: Then you can move directly to the element in the developer tools.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以直接跳转到开发者工具中的元素。
- en: '![Examining the DOM generated by D3.js](img/B04230_01_11.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![检查由 D3.js 生成的 DOM](img/B04230_01_11.jpg)'
- en: In the preceding screenshot, we can visually verify that the `<body>` tag had
    a new `<h1>` tag added with the text as we desired.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们可以直观地验证 `<body>` 标签中添加了一个新的 `<h1>` 标签，其文本正如我们所期望的那样。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we looked at several high level concepts in D3.js: selections,
    data, interactions and animation, and modules. Then we briefly covered several
    of the tools that can be used to build D3.js applications, and which will be used
    in examples that follow in the remainder the book: Js Bin, bl.ocks.org, Google
    Chrome, and Google Chrome Developer tools. We closed the chapter with a very simple
    example that demonstrates how to include D3.js in your application and performing
    a simple selection that inserts content into the web page.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 D3.js 中的几个高级概念：选择、数据、交互和动画，以及模块。然后我们简要介绍了可以用来构建 D3.js 应用程序的一些工具，这些工具将在本书后续的示例中使用：Js
    Bin、bl.ocks.org、Google Chrome 和 Google Chrome 开发者工具。我们以一个非常简单的示例结束本章，该示例演示了如何将
    D3.js 包含到你的应用程序中，并执行一个简单的选择操作，将内容插入到网页中。
- en: In the next chapter, we will expand upon the concept of selection and use it
    to bind data to visual elements in the DOM. We will expand our use of D3.js to
    create and modify DIV elements. Further on in [Chapter 3](ch03.html "Chapter 3. Creating
    Visuals with SVG"), *Creating Visuals with SVG*, we will get into the real power
    of D3.js by using it to manipulate SVG.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将扩展选择的概念，并使用它将数据绑定到 DOM 中的视觉元素。我们将扩展 D3.js 的使用，以创建和修改 DIV 元素。在[第 3 章](ch03.html
    "第 3 章。使用 SVG 创建视觉元素") *使用 SVG 创建视觉元素*中，我们将通过使用 D3.js 来操作 SVG 来深入了解 D3.js 的真正威力。
