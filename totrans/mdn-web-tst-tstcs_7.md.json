["```js\nconst { Selector, ClientFunction, Role, t } = require('testcafe');const { stamp } = require('js-automation-tools');// ...redminePage.getPageUrl = ClientFunction(() => {    return window.location.href;});redminePage.regularUser = Role(redminePage.urlRedmine, async (t) => {    await t.click(redminePage.linkLogin)        .typeText(redminePage.inputUsername, redminePage.emailRegularUser)        .typeText(redminePage.inputPassword, redminePage.         passwordRegularUser)        .click(redminePage.buttonLogin);});\n```", "```js\nredminePage.createNewProject = async (textProjectName) => {    await t.click(redminePage.linkProjects)        .click(redminePage.iconAdd)        .typeText(redminePage.inputProjectName, textProjectName)        .click(redminePage.buttonCreate);};\n```", "```js\nredminePage.createNewIssue = async (    linkTestProject, textIssueName, textIssueDescription     ) => {    await t.click(redminePage.linkProjects)        .click(linkTestProject)        .click(redminePage.linkNewIssue)        .typeText(redminePage.inputIssueSubject, textIssueName)        .typeText(redminePage.inputIssueDescription, textIssueDescription)        .click(redminePage.dropdownIssuePriority)        .click(Selector(redminePage.optionIssuePriority).withText(redminePage.textHigh))        .click(redminePage.buttonCreate);};\n```", "```js\nredminePage.uploadFile = async (linkTestProject) => {    await t.click(redminePage.linkProjects)        .click(linkTestProject)        .click(redminePage.linkFiles)        .click(redminePage.iconAdd)        .setFilesToUpload(redminePage.inputChooseFiles, redminePage.pathToFile)        .click(redminePage.buttonAdd);};module.exports = redminePage;\n```", "```js\nconst { Selector } = require('testcafe');const redminePage = require('./redmine-page.js');// ...fixture('Redmine entities creation tests')    .page(redminePage.urlRedmine)    .beforeEach(async (t) => {        await t.useRole(redminePage.regularUser);    });test('Create a new project', async (t) => {    await redminePage.createNewProject(redminePage.text1ProjectName);    await t.expect(Selector(redminePage.blockNotification).innerText).eql(redminePage.textSuccessfulCreation)        .expect(redminePage.getPageUrl()).contains(redminePage.urlProjectSettings);});\n```", "```js\ntest('Create a new issue', async (t) => {    await redminePage.createNewProject(redminePage.text2ProjectName);    await redminePage.createNewIssue(        redminePage.link2TestProject,        redminePage.text2IssueName,        redminePage.text2IssueDescription     );    await t.expect(Selector(redminePage.blockNotification).innerText).contains(redminePage.textCreated);});\n```", "```js\ntest('Verify that the issue is displayed on a project page', async (t) => {    await redminePage.createNewProject(redminePage.text3ProjectName);    await redminePage.createNewIssue(        redminePage.link3TestProject,        redminePage.text3IssueName,        redminePage.text3IssueDescription     );    await t.click(redminePage.linkProjects)        .click(redminePage.link3TestProject)        .click(redminePage.linkIssues)        .expect(Selector(redminePage.linkIssueName).innerText).contains(redminePage.text3IssueName);});\n```", "```js\ntest('Upload a file', async (t) => {    await redminePage.createNewProject(redminePage.text4ProjectName);    await redminePage.uploadFile(redminePage.link4TestProject);    await t.expect(Selector(redminePage.linkFileName).innerText).eql(redminePage.textFileName)        .expect(Selector(redminePage.blockDigest).innerText).eql(redminePage.textChecksum);});\n```", "```js\n// ...test('Edit the issue', async (t) => {    await redminePage.createNewProject(redminePage.text5ProjectName);    await redminePage.createNewIssue(        redminePage.link5TestProject,        redminePage.text5IssueName,        redminePage.text5IssueDescription     );    await t.click(redminePage.linkProjects)        .click(redminePage.link5TestProject)        .click(redminePage.linkIssues)        .click(Selector(redminePage.linkIssueName).withText(redminePage.text5IssueName))        .click(redminePage.iconEdit)        .selectText(redminePage.inputIssueSubject)        .pressKey(redminePage.keyDelete)        .typeText(redminePage.inputIssueSubject, redminePage.text5IssueNameUpdated)        .click(redminePage.dropdownIssuePriority)        .click(Selector(redminePage.optionIssuePriority).withText(redminePage.textNormal))        .click(redminePage.buttonSubmit)        .expect(Selector(redminePage.blockNotification).innerText).eql(redminePage.textSuccessfulUpdate);});\n```", "```js\ntest('Verify that the updated issue is displayed on a project page', async (t) => {    await redminePage.createNewProject(redminePage.text6ProjectName);    await redminePage.createNewIssue(        redminePage.link6TestProject,        redminePage.text6IssueName,        redminePage.text6IssueDescription     );    await t.click(redminePage.linkProjects)        .click(redminePage.link6TestProject)        .click(redminePage.linkIssues)        .click(Selector(redminePage.linkIssueName).  withText(redminePage.text6IssueName))        .click(redminePage.iconEdit)        .selectText(redminePage.inputIssueSubject)        .pressKey(redminePage.keyDelete)        .typeText(redminePage.inputIssueSubject, redminePage.text6IssueNameUpdated)        .click(redminePage.dropdownIssuePriority)        .click(Selector(redminePage.optionIssuePriority).withText(redminePage.textNormal))        .click(redminePage.buttonSubmit)        .click(redminePage.linkIssues)        .expect(Selector(redminePage.linkIssueName).innerText).eql(redminePage.text6IssueNameUpdated);});\n```", "```js\ntest('Search for the issue', async (t) => {    await redminePage.createNewProject(redminePage.text7ProjectName);    await redminePage.createNewIssue(        redminePage.link7TestProject,        redminePage.text7IssueName,        redminePage.text7IssueDescription     );    await t.navigateTo(redminePage.urlRedmineSearch)        .typeText(redminePage.inputSearch, redminePage.text7IssueName)        .click(redminePage.buttonSubmit)        .expect(Selector(redminePage.blockSearchResults).innerText).contains(redminePage.text7IssueName);});\n```", "```js\n// ...test('Delete the issue', async (t) => {    await redminePage.createNewProject(redminePage.text8ProjectName);    await redminePage.createNewIssue(        redminePage.link8TestProject,        redminePage.text8IssueName,        redminePage.text8IssueDescription     );    await t.click(redminePage.linkProjects)        .click(redminePage.link8TestProject)        .click(redminePage.linkIssues)        .click(Selector(redminePage.linkIssueName).withText(redminePage.text8IssueName))        .setNativeDialogHandler(() => true)        .click(redminePage.iconDelete)        .expect(Selector(redminePage.linkIssueName).withText(redminePage.text8IssueName).exists).notOk()        .expect(Selector(redminePage.blockNoData).innerText).eql(redminePage.textNoData);});test('Delete the file', async (t) => {    await redminePage.createNewProject(redminePage.text9ProjectName);    await redminePage.uploadFile(redminePage.link9TestProject);    await t.click(redminePage.linkProjects)        .click(redminePage.link9TestProject)        .click(redminePage.linkFiles)        .setNativeDialogHandler(() => true)        .click(Selector(redminePage.linkFileName).withText(redminePage.textFileName).parent(redminePage.blockFile).find(redminePage.buttonAction).withAttribute('data-method', redminePage.dataMethodDelete))        .expect(Selector(redminePage.linkFileName).withText(redminePage.textFileName).exists).notOk()        .expect(Selector(redminePage.blockDigest).withText(redminePage.textChecksum).exists).notOk();});\n```", "```js\n{  \"name\": \"test-project\",  \"version\": \"1.0.0\",  \"description\": \"\",  \"main\": \"index.js\",  \"scripts\": {    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"  },  \"keywords\": [],  \"author\": \"\",  \"license\": \"ISC\",  \"devDependencies\": {    \"js-automation-tools\": \"^1.0.5\",    \"testcafe\": \"^1.8.7\"  }}\n```", "```js\n$ npx testcafe chrome tests/basic-tests.js\n```", "```js\n$ npx testcafe chrome tests/basic-tests.js --debug-on-fail\n```", "```js\n$ npx testcafe chrome tests/basic-tests.js --debug-on-fail --speed 0.8\n```", "```js\n{  \"name\": \"test-project\",  \"version\": \"1.0.0\",  \"description\": \"\",  \"main\": \"index.js\",  \"scripts\": {    \"test-debug\": \"testcafe chrome tests/basic-tests.js --debug-on-fail --speed 0.8\"  },  \"keywords\": [],  \"author\": \"\",  \"license\": \"ISC\",  \"devDependencies\": {    \"js-automation-tools\": \"^1.0.5\",    \"testcafe\": \"^1.8.7\"  }}\n```", "```js\n$ npm run test-debug\n```", "```js\n{  \"name\": \"test-project\",  \"version\": \"1.0.0\",  \"description\": \"\",  \"main\": \"index.js\",  \"scripts\": {    \"test-ci\": \"testcafe chrome tests/basic-tests.js --quarantine-mode\",    \"test-debug\": \"testcafe chrome tests/basic-tests.js --debug-on-fail --speed 0.8\"  },  \"keywords\": [],  \"author\": \"\",  \"license\": \"ISC\",  \"devDependencies\": {    \"js-automation-tools\": \"^1.0.5\",    \"testcafe\": \"^1.8.7\"  }}\n```", "```js\n$ npm run test-ci\n```"]