["```js\n{ \n    \"itemId\": \"item-identifier-1\", \n    \"itemName\": \"Sports Watch\", \n    \"category\": \"Watches\", \n    \"categoryId\": 1,\n    \"price\": 150, \n    \"currency\": \"EUR\"\n} \n\n{\n    \"categoryName\" : \"Watches\",\n    \"categoryId\" : \"1\",\n    \"itemsCount\" : 100,\n    \"items\" : [{\n            \"itemId\" : \"item-identifier-1\",\n            \"itemName\":\"Sports Watch\",\n            \"price\": 150,\n            \"currency\" : \"EUR\"    \n     }]\n}\n```", "```js\n{\n  \"name\": \"chapter3\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"test\": \"test\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n \"dependencies\": {\n    \"body-parser\": \"~1.13.2\",\n    \"cookie-parser\": \"~1.3.5\",\n    \"debug\": \"~2.2.0\",\n    \"express\": \"~4.16.1\",\n    \"jade\": \"~1.11.0\",\n    \"morgan\": \"~1.6.1\",\n    \"serve-favicon\": \"~2.3.0\"\n\n  }\n}\n```", "```js\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\n\nvar routes = require('./routes/index');\nvar users = require('./routes/users');\n\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', routes);\napp.use('/users', users);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handlers\n\n// development error handler\n// will print stacktrace\nif (app.get('env') === 'development') {\n  app.use(function(err, req, res, next) {\n    res.status(err.status || 500);\n    res.render('error', {\n      message: err.message,\n      error: err\n    });\n  });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use(function(err, req, res, next) {\n  res.status(err.status || 500);\n  res.render('error', {\n    message: err.message,\n    error: {}\n  });\n});\n\nmodule.exports = app;\n```", "```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar app = require('../app');\nvar debug = require('debug')('chapter3:server');\nvar http = require('http');\n\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nvar server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n```", "```js\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\n\nvar routes = require('./routes/index');\nvar catalog = require('./routes/catalog')\nvar app = express();\n\n//uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\napp.use('/', routes);\napp.use('/catalog', catalog);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n//development error handler will print stacktrace\nif (app.get('env') === 'development') {\n  app.use(function(err, req, res, next) {\n    res.status(err.status || 500);\n    res.render('error', {\n      message: err.message,\n      error: err\n    });\n  });\n}\n\n// production error handler no stacktraces leaked to user\napp.use(function(err, req, res, next) {\n  res.status(err.status || 500);\n  res.render('error', {\n    message: err.message,\n    error: {}\n  });\n});\n\nmodule.exports = app;\n\n```", "```js\nvar fs = require('fs');\n\nfunction readCatalogSync() {\n   var file = './data/catalog.json';\n   if (fs.existsSync(file)) {\n     var content = fs.readFileSync(file);\n     var catalog = JSON.parse(content);\n     return catalog;\n   }\n   return undefined;\n }\n\nexports.findItems = function(categoryId) {\n  console.log('Returning all items for categoryId: ' + categoryId);\n  var catalog = readCatalogSync();\n  if (catalog) {\n    var items = [];\n    for (var index in catalog.catalog) {\n        if (catalog.catalog[index].categoryId === categoryId) {\n          var category = catalog.catalog[index];\n          for (var itemIndex in category.items) {\n            items.push(category.items[itemIndex]);\n          }\n        }\n    }\n    return items;\n  }\n  return undefined;\n}\n\nexports.findItem = function(categoryId, itemId) {\n  console.log('Looking for item with id' + itemId);\n  var catalog = readCatalogSync();\n  if (catalog) {\n    for (var index in catalog.catalog) {\n        if (catalog.catalog[index].categoryId === categoryId) {\n          var category = catalog.catalog[index];\n          for (var itemIndex in category.items) {\n            if (category.items[itemIndex].itemId === itemId) {\n              return category.items[itemIndex];\n            }\n          }\n        }\n    }\n  }\n  return undefined;\n}\n\nexports.findCategoryies = function() {\n  console.log('Returning all categories');\n  var catalog = readCatalogSync();\n  if (catalog) {\n    var categories = [];\n    for (var index in catalog.catalog) {\n        var category = {};\n        category[\"categoryId\"] = catalog.catalog[index].categoryId;\n        category[\"categoryName\"] = catalog.catalog[index].categoryName;\n\n        categories.push(category);\n    }\n    return categories;\n  }\n  return [];\n}\n```", "```js\nvar express = require('express'); \nvar app = express(); \n\napp.get('/hello', function(request, response){ \n  response.send('Hello route'); \n}); \n\napp.listen(3000); \n```", "```js\nvar express = require('express'); \nvar app = express(); \n\napp.get('/hello:name', function(request, response){ \n  response.send('Hello ' + request.params.name); \n}); \n\napp.listen(3000); \n```", "```js\nhello friend\n```", "```js\nvar express = require('express'); \nvar url = require('url'); \nvar app = express(); \n\napp.get('/hello', function(request, response){ \n   var getParams = url.parse(request.url, true).query; \n\n   if (Object.keys(getParams).length == 0) {       \n      response.end('Hello all');    \n   } else {\n      response.end('Hello ' + getParams.name); \n   }    \n}); \n\napp.listen(3000); \n```", "```js\nvar express = require('express');\nvar catalog = require('../modules/catalog.js')\n\nvar router = express.Router();\n\nrouter.get('/', function(request, response, next) {\n  var categories = catalog.findCategoryies();\n  response.json(categories);\n});\n\nrouter.get('/:categoryId', function(request, response, next) {\n  var categories = catalog.findItems(request.params.categoryId);\n  if (categories === undefined) {\n    response.writeHead(404, {'Content-Type' : 'text/plain'});\n    response.end('Not found');\n  } else {\n    response.json(categories);\n  }\n});\n\nrouter.get('/:categoryId/:itemId', function(request, response, next) {\n  var item = catalog.findItem(request.params.categoryId, request.params.itemId);\n  if (item === undefined) {\n    response.writeHead(404, {'Content-Type' : 'text/plain'});\n    response.end('Not found');\n  } else {\n  response.json(item);\n  }\n});\nmodule.exports = router;\n\n```", "```js\napp.get('/catalog', function(request, response) { \n    response.format( { \n      'text/xml' : function() { \n         response.send(catalog.findCategoiesXml()); \n      }, \n      'application/json' : function() { \n         response.json(catalog.findCategoriesJson()); \n      }, \n      'default' : function() {. \n         response.status(406).send('Not Acceptable'); \n      }    \n    }); \n}); \n```"]