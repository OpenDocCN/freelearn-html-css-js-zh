["```js\n// Insert a new contact JSON into the contacts array\ncreateContact(req, res) {\nvar contact = extractContactData(req);\n\n  // Asssign a random id\n  contact.id = makeId();\ncontacts.push(contact);\n\nres.status(201)\n.json(contact);\n}\n```", "```js\nhttp://example.com/api/contacts/10/avatar\n```", "```js\n{\n  \"success\": true,\n  \"avatar\": {\n    \"file\": \"something.jpg\",\n    \"url\": \"http://example.com/avatar/something.jpg\"\n  }\n}\n```", "```js\n{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n\"avatar\": {\n    \"file\": \"something.jpg\",\n    \"url\": \"http://example.com/avatar/something.jpg\"\n  }\n\n}\n```", "```js\n// routes.js\nvar controller = require('./controller');\n\n//...\nserver.post('/api/contacts/:contactId/avatar', \ncontroller.uploadAvatar);\n\n```", "```js\n// Avatar endpoints\nvar upload = multer();\nserver.post('/api/contacts/:contactId/avatar', upload.single('avatar'),\ncontroller.uploadAvatar\n);\nserver.use('/avatar', express.static(__dirname + '/avatar'));\n```", "```js\nuploadAvatar(req, res, next) {\nvarcontactId = req.params.contactId;\nvar filename, fullpath;\n\n  // Ensure that user has sent the file\n  if (!_.has(req, 'file')) {\n    return res.status(400).json({\n      error: 'Please upload a file in the avatar field'\n    });\n  }\n\n  // File should be in a valid format\nvar metadata = req.file;\n  if (!isValidImage(metadata.mimetype)) {\nres.status(400).json({\n      error: 'Invalid format, please use jpg, png or gif files'\n    });\n    return next();\n  }\n\n  // Get target contact from database\nvar contact = _.find(contacts, 'id', contactId);\n  if (!contact) {\nres.status(404).json({\n      error: 'contact not found'\n    });\n    return next();\n  }\n\n  // Ensure that avatar path exists\n  if (!fs.existsSync(AVATAR_PATH)) {\nfs.mkdirSync(AVATAR_PATH);\n  }\n\n  // Ensure unique filename to prevent name colisions\nvar extension = getExtension(metadata.originalname);\n  do {\n    filename = generateFilename(25, extension);\nfullpath = generateFullPath(filename);\n  } while(fs.existsSync(fullpath));\n\n  // Remove previous avatar if any\nremoveAvatar(contact);\n\n  // Save the file in disk\nvarwstream = fs.createWriteStream(fullpath);\nwstream.write(metadata.buffer);\nwstream.end();\n\n  // Update contact by assingn the url of the uploaded file\ncontact.avatar = {\n    file: filename,\nurl: generateURLForAvatar(filename)\n  };\n\nres.json({\n    success: true,\n    avatar: contact.avatar\n  });\n}\n```", "```js\n<% if (avatar && avatar.url) { %>\n<imgsrc=\"img/<%= avatar.url %>\" alt=\"Contact photo\" />\n<% } else { %>\n<imgsrc=\"img/250x250\" alt=\"Contact photo\" />\n<% } %>\n```", "```js\n// apps/contacts/models/contact.js\n'use strict';\n\nvar Backbone = require('backbone');\n\nclass Contact extends Backbone.Model {\n// ...\n\n  get defaults() {\n    return {\n      name: '',\n      phone: '',\n      email: '',\n      address1: '',\n      address2: '',\nfacebook: '',\n      twitter: '',\n      google: '',\ngithub: '',\n      avatar: null\n    };\n  }\n\n// ...\n}\n\nmodule.exports = Contact;\n```", "```js\n<div class=\"box thumbnail\">\n<div class=\"photo\">\n<% if (avatar && avatar.url) { %>\n<imgsrc=\"img/<%= avatar.url %>\" alt=\"Contact photo\" />\n<% } else { %>\n<imgsrc=\"img/250x250\" alt=\"Contact photo\" />\n<% } %>\n<input id=\"avatar\" name=\"avatar\" type=\"file\" \nstyle=\"display: none\" />\n</div>\n<!-- ... -->\n</div>\n```", "```js\n// apps/contacts/views/contactPreview.js\nclass ContactPreview extends ModelView {\n// ...\n\n  get events() {\n    return {\n      'click img': 'showSelectFileDialog'\n    };\n  }\n\nshowSelectFileDialog() {\n    $('#avatar').trigger('click');\n  }\n\n  // ...\n}\n```", "```js\n// apps/contacts/views/contactPreview.js\nclass ContactPreview extends ModelView {\n// ...\n\n  get events() {\n    return {\n      'click img': 'showSelectFileDialog',\n'change #avatar': 'fileSelected'\n    };\n  }\n\n  // ...\n}\n```", "```js\n// apps/contacts/views/contactPreview.js\nclass ContactPreview extends ModelView {\n  // ...\n\nfileSelected(event) {\nevent.preventDefault();\n\nvar $img = this.$('img');\n\n    // Get a blob instance of the file selected\nvar $fileInput = this.$('#avatar')[0];\nvarfileBlob = $fileInput.files[0];\n\n    // Render the image selected in the img tag\nvarfileReader = new FileReader();\nfileReader.onload = event => {\n      $img.attr('src', event.target.result);\n\n      // Set the avatar attribute only if the\n      // model is new\n      if (this.model.isNew()) {\nthis.model.set({\n          avatar: {\nurl: event.target.result\n          }\n        });\n      }\n    };\nfileReader.readAsDataURL(fileBlob);\n\nthis.trigger('avatar:selected', fileBlob);\n  }\n}\n```", "```js\n// apps/contacts/contactEditor.js\nclass ContactEditor {\n// ...\n\nshowEditor(contact) {\n    // ...\n\nthis.listenTo(contactPreview, 'avatar:selected', blob => {\nthis.uploadAvatar(contact, blob);\n    });\n  }\n}\n```", "```js\n// apps/contacts/contactEditor.js\nclass ContactEditor {\n// ...\n\nuploadAvatar(contact, blob) {\n    // Tell to others that upload will start\nthis.trigger('avatar:uploading:start');\n\ncontact.uploadAvatar(blob, {\n      progress: (length, uploaded, percent) => {\n        // Tell to others that upload is in progress\nthis.trigger('avatar:uploading:progress',\n                     length, uploaded, percent);\n      },\n      success: () => {\n        // Tell to others that upload was done successfully\nthis.trigger('avatar:uploading:done');\n      },\n      error: err => {\n        // Tell to others that upload was error\nthis.trigger('avatar:uploading:error', err);\n      }\n    });\n  }\n}\n```", "```js\n// apps/contacts/views/contactPreview.js\nclass ContactPreview extends ModelView {\n  constructor(options) {\n    super(options);\nthis.template = template;\n\nthis.model.on('change', this.render, this);\n\n    if (options.controller) {\nthis.listenTo(\noptions.controller, 'avatar:uploading:start',\nthis.uploadingAvatarStart, this\n      );\nthis.listenTo(\noptions.controller, 'avatar:uploading:done',\nthis.uploadingAvatarDone, this\n      );\nthis.listenTo(\noptions.controller, 'avatar:uploading:error',\nthis.uploadingAvatarError, this\n      );\n    }\n  }\n\nuploadingAvatarStart() {\nthis.originalAvatarMessage = this.$('span.info').html();\nthis.$('span.notice').html('Uploading avatar...');\n  }\n\nuploadingAvatarDone() {\nthis.$('span.notice').html(this.originalAvatarMessage || '');\n  }\n\nuploadingAvatarError() {\nthis.$('span.notice').html(\n'Can\\'t upload image, try again later'\n);\n  }\n}\n```", "```js\nclass ContactEditor {\n// ...\n\nshowEditor(contact) {\n    // ...\nvarcontactPreview = new ContactPreview({\n      controller: this,\n      model: contact\n    });\n  }\n}\n```", "```js\n// apps/contacts/models/contact.js\nclass Contact extends Backbone.Model {\n  // ...\n\nuploadAvatar(imageBlob, options) {\n    // Create a form object to emulate a multipart/form-data\nvarformData = new FormData();\nformData.append('avatar', imageBlob);\n\nvarajaxOptions = {\nurl: '/api/contacts/' + this.get('id') + '/avatar',\n      type: 'POST',\n      data: formData,\n      cache: false,\ncontentType: false,\nprocessData: false\n    };\n\n    options = options || {};\n\n    // Copy options to ajaxOptions\n_.extend(ajaxOptions, _.pick(options, 'success', 'error'));\n\n    // Attach a progress handler only if is defined\n    if (options.progress) {\najaxOptions.xhr = function() {\nvarxhr = $.ajaxSettings.xhr();\n\n        if (xhr.upload) {\n          // For handling the progress of the upload\nxhr.upload.addEventListener('progress', event => {\n            let length = event.total;\n            let uploaded = event.loaded;\n            let percent = uploaded / length;\n\noptions.progress(length, uploaded, percent);\n          }, false);\n        }\n\n        return xhr;\n      };\n    }\n\n$.ajax(ajaxOptions);\n  }\n\n  // ...\n}\n```", "```js\nclass ContactEditor {\n// ...\n\nshowEditor(contact) {\n    // ...\n\n    // When avatar is selected, we can save it inmediatly if the\n    // contact already exists on the server, otherwise just\n    // remember the file selected\nthis.listenTo(contactPreview, 'avatar:selected', blob => {\nthis.avatarSelected = blob;\n\n      if (!contact.isNew()) {\nthis.uploadAvatar(contact);\n      }\n    });\n  }\n}\n```", "```js\n// apps/contacts/contactEditor.js\nclass ContactEditor {\nsaveContact(contact) {\nvarphonesData = this.phones.toJSON();\nvaremailsData = this.emails.toJSON();\n\ncontact.set({\n      phones: phonesData,\n      emails: emailsData\n    });\n\n    if (!contact.isValid(true)) {\n      return;\n    }\n\nvarwasNew = contact.isNew();\n\n    // The avatar attribute is read-only\n    if (contact.has('avatar')) {\ncontact.unset('avatar');\n    }\n\n    function notifyAndRedirect() {\n      // Redirect user to contact list after save\nApp.notifySuccess('Contact saved');\nApp.router.navigate('contacts', true);\n    }\n\ncontact.save(null, {\n      success: () =>{\n        // If we are not creating an user it's done\n        if (!wasNew) {\nnotifyAndRedirect();\n          return;\n        }\n\n        // On user creation send the avatar to the server too\nthis.uploadAvatar(contact, {\n          success: notifyAndRedirect\n        });\n      },\nerror() {\n        // Show error message if something goes wrong\nApp.notifyError('Something goes wrong');\n      }\n    });\n  }\n  // ...\n}\n```", "```js\n// apps/contacts/contactEditor.js\nuploadAvatar(contact, options) {\n  // Tell to others that upload will start\nthis.trigger('avatar:uploading:start');\n\ncontact.uploadAvatar(this.avatarSelected, {\n    progress: (length, uploaded, percent) => {\n      // Tell to others that upload is in progress\nthis.trigger('avatar:uploading:progress',\n                   length, uploaded, percent);\n      if (options &&_.isFunction(options.success)) {\noptions.success();\n      }\n    },\n    success: () => {\n      // Tell to others that upload was done successfully\nthis.trigger('avatar:uploading:done');\n    },\n    error: err => {\n      // Tell to others that upload was error\nthis.trigger('avatar:uploading:error', err);\n    }\n  });\n}\n```", "```js\nclass ContactEditor {\n  // ...\n\nshowEditor(contact) {\n      // ...\nthis.listenTo(contactPreview, 'avatar:selected', blob => {\nthis.setAvatar(contact, blob);\n    });\n  }\n\nsetAvatar(contact, blob) {\nvarfileReader = new FileReader();\n\nfileReader.onload = event => {\n      let parts = event.target.result.split(',');\ncontact.set('avatarImage', parts[1]);\n    };\n\nfileReader.readAsDataURL(blob);\n  }\n}\n```"]