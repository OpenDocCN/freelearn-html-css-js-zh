- en: Chapter 4. Labeled Spinner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we are going to develop an Ext JS extension called **Labeled
    spinner**. To develop this extension, we will extend the `Ext.form.field.Spinner`
    class, which will add a functionality that will show a configurable label besides
    the value within the spinner field, and some more advanced features.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Functional requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planning and coding the labeled spinner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to develop a field for numeric values which will provide the facility
    of having up/down spinner buttons to increase or decrease the numeric values.
    Also, a user can edit the value within the field. There will also be a configuration
    option to show a user-defined label as a unit name just beside the numeric value
    within the field. There will also be options to get the value from this field,
    which will be just the numeric value and also the numeric value including the
    unit name exactly as it shows within the field.
  prefs: []
  type: TYPE_NORMAL
- en: Planning and coding the labeled spinner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To meet the functional requirements, we will create an extension class by extending
    the Ext JS''s `Ext.form.field.Spinner` class from which we will get most of the
    facilities that we need to provide. We need to implement the `onSpinUp` and `onSpinDown`
    functions of the `Ext.form.field.Spinner` class to handle the spinner button click
    event to provide our logic to increase or decrease the values. By default, pressing
    the up and down arrow keys will also trigger the `onSpinUp` and `onSpinDown` methods.
    Now, let us start coding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we have a working extension that can increase or decrease its value.
    Here is the screenshot where we used this extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Planning and coding the labeled spinner](img/3725OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that we now have a field with up/down spinner buttons with which
    we can increase or decrease the value by 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will add a functionality that this field can show the unit label text
    just beside the numeric value. We will define the `setValue` function from which
    we can set the value including the label unit. We will also add some `config`
    properties to this class so that we can set the values as we needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, we can see the label just beside the numeric value
    within the field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Planning and coding the labeled spinner](img/3725OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Within the code, you can find that we have provided some `config` options, added
    the `setValue` function, and modified a little of the `onSpinUp` and `onSpinDown`
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will define the `getValue` function so that we can get the numeric
    value from this field and define the `getLabeledValue` function that will return
    the numeric value, including the unit label, exactly as it shows on the field.
    We will also define the `onBlur` handler to check and fix it with a minimum value,
    if there is any wrong input and will do some changes on the existing code. Here
    is the complete code for our extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And following is the screenshot of our working **LabeledSpinner** extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Planning and coding the labeled spinner](img/3725OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can find the **Get value** button within the
    window. When this button is clicked, we print the values on the window by calling
    both the `getValue` and `getLabeledValue` functions.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've developed a new component by extending Ext JS's existing
    class and we've learned how we can easily create Ext JS extensions and inject
    our required functionality. In the next chapter, we will develop an Ext JS plugin
    called the Chart download, which generates a button on the container's toolbar
    and can download the container's chart item as an image when this button is clicked.
  prefs: []
  type: TYPE_NORMAL
