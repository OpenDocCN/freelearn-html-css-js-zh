- en: Chapter 6. Inspecting Code with Firebug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*This chapter shows you how to inspect your code. Aptana Studio itself does
    not provide features for inspecting code but nearly every browser provides one
    or more good tools for doing this. In this chapter, we will look at how you can
    do this with the Firefox extension, Firebug.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will take a look in detail at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Firebug
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspecting the source of a website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspecting and editing HTML code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspecting and editing CSS code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Firebug console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profiling code performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Firebug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebug is one of the most popular extensions for Firefox and helps you to inspect
    and debug websites. It was downloaded more than 3 million times and is rated with
    5 stars on the [addons.mozilla.org](http://addons.mozilla.org) website. The [addons.mozilla.org](http://addons.mozilla.org)
    website has a great collection of extensions, and here you can get almost any
    Firefox extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firebug is constantly being developed and contains many useful features such
    as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A **Console** module where Firebug lists errors, warnings, and traces from JavaScript,
    CSS, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **HTML** module where you can inspect and edit the HTML code of the currently
    displayed website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **CSS** module where you can inspect and edit the CSS code of the currently
    displayed website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Script** module where you can inspect and debug the JavaScript code of the
    currently displayed website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **DOM** module where you can inspect and change the **Document Object** **Model**,
    abbreviated as **DOM**, from the currently displayed website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Network** module where you can monitor all network activities and inspect
    their requests and responses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can download Firebug at [http://getfirebug.com/](http://getfirebug.com/),
    where you will always find the actual version and much useful stuff such as documentation
    or community support.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – installing Firebug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can start, we need to install Firebug.
  prefs: []
  type: TYPE_NORMAL
- en: Start Firefox and navigate to [http://getfirebug.com](http://getfirebug.com),
    and then click on **Install** and after that on **Download**; or navigate directly
    to [https://addons.mozilla.org/en-US/firefox/addon/firebug/](https://addons.mozilla.org/en-US/firefox/addon/firebug/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **+Add to Firefox**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm the installation by clicking on **Install**.![Time for action – installing
    Firebug](img/8246_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, restart Firefox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just installed the Firebug extension into our Firefox. After a successful
    installation you will find the Firebug menu at the top-right of your Firefox window.
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/8246_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we can start to explore our websites and web applications.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the previous image, the Firefox icon is currently grayed out.
    This means that Firebug is currently disabled. You can click on this icon in order
    to open and activate Firebug. As an alternative and faster way to do this, you
    can just press *F12*.
  prefs: []
  type: TYPE_NORMAL
- en: In case Firebug is active, the icon is displayed as colored.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – enabling and configuring Firebug
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, let's start working with Firebug and see how to enable and disable the main
    modules of Firebug.
  prefs: []
  type: TYPE_NORMAL
- en: Open Firefox and surf to any website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F12* to open Firebug.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Firebug opens by default at the bottom of Firefox and provides you with a main
    menu in the form of the Firebug symbol on the left-hand side. In the top-center
    of Firebug, you will find a tab bar that allows you to switch between Firebug's
    main modules.![Time for action – enabling and configuring Firebug](img/8246_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each module tab, when activated, has in addition its own menu where you can
    activate some specific settings (have a look at the small triangle on the right-hand
    side of the tab label).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You must also know that the **Console**, **Script**, and **Net** modules can
    be enabled and disabled for performance reasons. If the label of this tab is gray,
    the module is currently disabled; and if the label is black, it is enabled. All
    three modules can be enabled and disabled by their respective menus. Try it yourself!![Time
    for action – enabling and configuring Firebug](img/8246_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Disable unnecessary Firebug modules**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Unfortunately, Firebug is a little bit of a memory eater. If you've enabled
    all Firebug modules, and perhaps even have many Firefox tabs open, Firefox will
    quickly use several hundred MB of memory. So better disable all Firebug features
    that you currently don't require.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have opened the Firebug on any website and had a look at the possibilities
    for configuring Firebug and its tabs. In addition, we now know how we can enable
    and disable Firebug modules.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Firebug in a separate window**'
  prefs: []
  type: TYPE_NORMAL
- en: In order to open Firebug in its own window, just use the shortcut *Ctrl* + *F12*
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting HTML code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first module that we want to view in detail is the HTML tab. It's not the
    first in the row of Firebug tabs, but it gives us a good start to working with
    Firebug.
  prefs: []
  type: TYPE_NORMAL
- en: In the first step, we will inspect the HTML code of a website and try to select
    a particular HTML tag.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – inspecting HTML code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Firefox and navigate to any website, such as [google.com](http://google.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F12* in order to open Firebug.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the HTML tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the bottom-left, you will find the complete HTML code of the currently loaded
    site.![Time for action – inspecting HTML code](img/8246_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, you are able to navigate through the HTML tree by expanding nodes by clicking
    on the small plus icons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The HTML nodes you hover over with the mouse within the HTML tree will be highlighted
    blue in the browser window. If the hovered element has a margin (just like the
    top margin in the preceding screenshot), it will be highlighted yellow; and if
    the hovered element has a padding (just like the bottom padding in the screenshot),
    it will be highlighted purple.![Time for action – inspecting HTML code](img/8246_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the body element by doing a simple click on it. If you select an element,
    the right-hand side area of the **HTML** module gets the information about this
    element. This area is also divided by a little tab group, where you find the **Style**
    tab that we are using in the inspecting CSS section in this chapter, a **Computed**
    tab that you see in the following screenshot (which contains a list of all the
    current attributes from the element), a **Layout** tab where you can inspect and
    adjust the dimensions of the selected element (margin, border, padding, and the
    element itself), and finally the **DOM** tab where you can inspect all DOM attributes.![Time
    for action – inspecting HTML code](img/8246_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have used the **HTML** module of the Firebug for inspecting a website. Therefore,
    we opened the Firebug, selected the **HTML** module, and additionally selected
    the HTML element that we wanted to inspect. We have seen the complete HTML tree
    of the website; and further all HTML attributes in the **Computed** tab, the layout
    dimensions in the **Layout** tab, and the DOM attributes in the **DOM** tab.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Why so some attributes in the HTML view sometimes blink in yellow?**'
  prefs: []
  type: TYPE_NORMAL
- en: If you're inspecting some JavaScript-driven website and there are attributes
    in the current scope of the viewed HTML code, which just at that moment is manipulated
    by JavaScript, Firebug lets these attributes blink in yellow.
  prefs: []
  type: TYPE_NORMAL
- en: Now we want to go forward and take a look at how we can edit or delete some
    HTML code by using Firebug.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – using the mouse selector for editing HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start at the same position where the previous *Time for action* section
    ended. So, open Firefox, navigate to any website, and press *F12* in order to
    open Firebug.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if you're searching a special element within the website, you can also
    use the mouse selector. This is a small button in the form of a blue rectangle
    with a mouse inside, on the right-hand side of the Firebug main menu. Just activate
    the button and move the mouse over the website in order to find the element you
    want to inspect. Once clicked, the element will be selected in Firebug and the
    mouse selector button gets disabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you have selected an element, you have the option to right-click for opening
    a context-sensitive context menu. In this context menu, Firebug provides you with
    several actions for the selected HTML element. You can attach new attributes,
    edit the element node, delete the complete node, or perform other actions.![Time
    for action – using the mouse selector for editing HTML](img/8246_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point we use the mouse-selector for selecting the country name to the
    right of the Google logo. After this, we perform a right-click on the selected
    `div` node and click on the **Edit HTML** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we are able to edit the complete HTML node with all the other nodes inside.
    For a little test, we change the CSS attribute's color to red. By changing the
    HTML code, Firebug refreshes the website in real time, so you'll get any results
    of your changes directly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have made all your changes, just press the **Edit** button in the top-left
    to finish the editing.![Time for action – using the mouse selector for editing
    HTML](img/8246_06_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have selected a special element from a website and changed it. We have seen
    how Firebug shows us the changes in real time in the current website.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way, as we currently edit the HTML code, you are also able to delete
    nodes or just quickly add a single attribute.
  prefs: []
  type: TYPE_NORMAL
- en: A frequent workflow is therefore to select an HTML node and edit it, and after
    editing just copying the HTML node by right-clicking on it. The copied HTML node,
    which is now contained in the clipboard, can simply be pasted into your source
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting the CSS code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For inspecting and editing the CSS code, Firebug mainly provides two methods.
    In the first, there is the **Style** tab of the **HTML** module. Here you can
    inspect and adjust the CSS code of the currently selected HTML element. On the
    other hand, you can just use the **CSS** module. In the **CSS** module, you are
    able to inspect and edit the CSS code directly within the structure of the single
    CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we will take a look at both variants of working with CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – editing the CSS code by using the HTML module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start again just as we did in the previous *Time for action* section. So,
    open Firefox, navigate to any website (we use the Google site again), and press
    *F12* in order to open Firebug in the **HTML** module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the country name in the right of the Google logo by right clicking on
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now Firebug displays all the information about the current HTML element. We
    select the **Style** tab and take a look at the CSS information in detail.![Time
    for action – editing the CSS code by using the HTML module](img/8246_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see in the **Style** tab, the element gets an instruction to change
    the font size by three times. You can see in detail which property of the element
    comes from where. You can also see in each element block where it has been inherited
    from; and in each selector section, in which file and line number the selector
    is defined. So, from the lower side to the upper side the instructions will get
    overwritten.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, when we want to adjust the horizontal position of the label, we just have
    to double-click on the value of the top definition. The field becomes writable
    and you are able to adjust it. Like all the other changes, the result will be
    visible in real-time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Adjusting values**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you want to adjust a value step-by-step, you can also use the up and down
    arrow keys on your keyboard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you're done with changing the CSS attribute, you can also select the CSS
    code and copy and paste it into your source code file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We inspected the CSS instructions of a special HTML element and had a look at
    how we can adjust these values easily.
  prefs: []
  type: TYPE_NORMAL
- en: Now we want to look at the other possibility, to inspect the CSS code with Firebug.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – editing the CSS code by using the CSS module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start again just as we did in the previous *Time for action* section. Therefore,
    we open Firefox and, in this example, load the [aptana.com](http://aptana.com)
    website. When the site is completely loaded, press *F12* in order to open Firebug
    in the **CSS** module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the head of the **CSS** module, you can see a file sector where currently
    the `aptana.css` file is selected. If there are more CSS files included in the
    website, you can change the displayed file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the main area you will find the content of the selected CSS file. Like in
    the **Style** tab in the **HTML** module, you're able to change all attributes
    or add newly required attributes.![Time for action – editing the CSS code by using
    the CSS module](img/8246_06_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, when you're done with editing the whole CSS file, just press *Ctrl*
    + *A* to select the complete CSS file, copy it with *Ctrl* + *C*, and paste it
    with *Ctrl* + *V* into your source code file within Aptana Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have inspected the CSS code within the whole CSS file. Here you have seen
    that it's also possible to edit attributes in the whole file, and learned how
    to copy the complete CSS content so that you can paste the changed CSS code directly
    into the source code file.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Firebug console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Firebug console allows you to read logged info, warnings, errors, and so
    on. For example, you could write `console.log()`, like we have seen in [Chapter
    4](ch04.html "Chapter 4. Debugging JavaScript"), *Debugging JavaScript*, into
    your JavaScript files in order to debug them.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how the console can help us by developing web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – using the Firebug console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start again just as we did in the previous *Time for action* section.
    Switch back to Firefox, navigate to the [aptana.com](http://aptana.com) website,
    and press *F12* in order to open Firebug in the Console module.![Time for action
    – using the Firebug console](img/8246_06_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the head of the Console module you will find some buttons that allow you
    to filter the displayed messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All messages are listed in the main area. As you can see, there is already a
    warning listed because the site uses a deprecated function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the bottom area you're able to fire up your own actions in real time. This
    is sometimes very useful. You can trigger your own function or you can try jQuery
    selectors and can inspect which nodes are matched. Try it yourself by entering
    `console.log` `(document.title)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Enter multiline commands**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you need to enter a multiline—no problem. Just press the red triangle icon
    at the right of the command line, and the command line moves to the right into
    a multiline command line. Now you're also able to paste complete script lines
    at once into Firebug and execute them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Another nice feature is that the Console module provides a history of your commands.
    You can display the previous actions by clicking on the red list icon at the left
    of the command line. Additionally, you can use the up and down arrow keys, if
    the command line has the focus, to navigate through the previous history entries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also write your own messages, errors, warnings, or just a debug message
    in the Console module. Firebug therefore provides four methods on the console
    object, shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`console.log(object[, object, …])`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`console.error(object[, object, …])`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`console.warning(object[, object, …])`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`console.debug(object[, object, …])`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The last feature that we want to envisage here is the completion proposal (attention,
    this feature is only available by using the single line command line). If you
    write in the single line command line and you type `doc`, the Console will suggest
    an object or function you could have meant to type. If there is more than one
    successful suggestion, you are able to use the up and down arrow keys on your
    keyboard to select the one you need. If your required object or function is implied,
    just press the *Tab* key to select it.![Time for action – using the Firebug console](img/8246_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Did you know?**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Console module is also able to calculate. If you're currently creating a
    layout, and you have to calculate properties or dimensions, you don't have to
    start your systems calculator. Just use the Firebug console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have examined the main functionalities of the Console module. Now you should
    know how you can filter the output and fire up JavaScript commands at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Profiling code performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While developing goes forward and your web application gets larger and larger,
    the performance might slow down more and more. This results from the increasing
    amount of JavaScript code that must be executed by the browser.
  prefs: []
  type: TYPE_NORMAL
- en: This is the best moment to think about optimizing your code. Therefore, you
    have to profile many parts of your source code in order to find out which functions
    or code blocks are the largest performance eaters.
  prefs: []
  type: TYPE_NORMAL
- en: Firebug provides you with some useful functionalities that you can use to localize
    these performance eaters.
  prefs: []
  type: TYPE_NORMAL
- en: A simple way to find out how good the performance of a single code block or
    function is to wrap it into a `time` and `timeEnd` function. How we do this exactly
    will be discussed in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – profiling code performance by using console.time()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss the steps for profiling code performance by
    using the `console.time()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need some JavaScript code which we can profile. For this simple example
    we just use a small function (with some actions that require a little bit of time),
    like the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We embed this function into an HTML file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we now want to determine the execution time, we have to wrap the function
    call into two console functions. The first is for registering the start time and
    will be set by `console.time('unique_identifier')`. Pay attention to the first
    parameter; this must be a unique identifier for each profiling.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, we call the function which we will profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, we have to register that our time measurement is done. Therefore,
    we have to call the second function, which requires the same unique identifier
    as the first function `console.timeEnd(''unique_identifier'')`. After all, our
    code should look something like the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we open our HTML file within Firefox and open Firebug by pressing *F12*,
    and open the Console module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maybe we have to enable the Console. If so, we have to reload our site by pressing
    *F5*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we take a look at the Console output and see that the execution of
    our block has taken 4 milliseconds.![Time for action – profiling code performance
    by using console.time()](img/8246_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have wrapped our function call into the functions `console.time()` and `console.timeEnd()`
    in order to determine the exact execution time for our function. It is important
    that both the wrapper functions get the same unique parameter, which the Console
    needs to identify the timer.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to get more information about your application and where the most
    performance got lost is to profile some code block or function with the `console.profile`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at it in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – profiling code performance by using console.profile()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss the steps for profiling code performance by
    using the `console.profile()` function.
  prefs: []
  type: TYPE_NORMAL
- en: We grab the HTML file from the previous *Time for action* section and extend
    the JavaScript code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, we move the `Math.random` function call into a separate function named
    `getRandom`. We do this in order to create more function calls within our loop
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `console.time` and `console.timeEnd` functions are no longer required; but
    don't delete these rows. The `console.profile` function works in a similar way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, we change the `console.time` function into a `console.profile` function.
    The unique identifier is still required, because you're able to run more profiles
    at the same time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This step helps to Change the `console.timeEnd` function into a `console.profileEnd`
    function—and that''s it. After all these steps, your code should look something
    like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we will load our HTML file within Firefox and open Firebug by pressing *F12*
    and selecting the Console module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maybe we have to enable the Console. If so, we have to reload our site by pressing
    *F5*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we take a look at the Console output and see that our profiling code
    block has used 533 milliseconds and 101 function calls.![Time for action – profiling
    code performance by using console.profile()](img/8246_06_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have wrapped our function call into the `console.profile()` and `console.profileEnd()`
    functions. During the execution, the Console logs every function call between
    the `profile()` and `profileEnd()` functions and generates a complete profiling
    table where you can see which functions were called at which time, and how long
    they took.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Manually starting the profiling**'
  prefs: []
  type: TYPE_NORMAL
- en: You can also start a profiling process manually. If you take a look at the top
    buttons within the Console module, you will find a button called **Profile**.
    If you press it the first time, it will start a profiling process just like the
    `console.profile()` function. If you press it a second time, the profiling process
    stops and you get the profiling result in the Console output.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero – inspecting a website in detail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now your task is to select a website and open it within Firefox. Open the Firebug
    and start inspecting this website in detail. Have a look at how the HTML and CSS
    codes are structured. Also throw a closer look at how the individual CSS classes
    override the other CSS classes.
  prefs: []
  type: TYPE_NORMAL
- en: Play around with the different values and customize them in order to understand
    what they do. After you have explored the HTML code structure and CSS styles,
    take a look at the JavaScript codes within the site. Enable the profiling and
    examine which functions are called and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. Which keyboard shortcut opens Firebug?
  prefs: []
  type: TYPE_NORMAL
- en: '*F7*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*F12*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*F13*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Why is it better to disable unnecessary Firebug modules?
  prefs: []
  type: TYPE_NORMAL
- en: It ensures good performance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It doesn't matter
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's better to enable all the modules
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. When you inspect an HTML file and hover over some HTML elements, what does
    the yellow and purple color mean in the highlighted elements?
  prefs: []
  type: TYPE_NORMAL
- en: There are no yellow or purple highlight colors
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These colors display the distance to other elements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The yellow highlight displays the margin of an element and the purple highlight
    displays the padding of an element
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q4\. When will the change be visible after you have changed it within Firebug?
  prefs: []
  type: TYPE_NORMAL
- en: After you have reloaded the page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The change is immediately visible
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have saved your changes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q5\. Why did you make the `console.time()` and `console.timeEnd()` functions
    and the `console.profile()` and `console.profileEnd()` functions the first parameter
    and unique identifier?
  prefs: []
  type: TYPE_NORMAL
- en: If you start multiple time or profile processes, Firebug needs them to identify
    which process has to stop when
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's just a label and is not required
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's no parameter in these functions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After reading this chapter, you should be able to inspect websites and web applications
    by using Firebug. In addition, you should know in detail how you can edit HTML
    elements, change their CSS attributes, and examine JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: Now we want to go forward, and in the next chapter examine how we can work with
    JavaScript libraries and how we can integrate them in our project.
  prefs: []
  type: TYPE_NORMAL
