["```js\nconst student = {  \n    name: \"Eden\",  \n    printName() {  \n        console.log(this.name);  \n    } \n} \nstudent.printName(); //Output \"Eden\"\n```", "```js\nfunction Student(name) {  \n    this.name = name; \n} \n\nStudent.prototype.printName = function(){  \n    console.log(this.name); \n}\n\nconst student1 = new Student(\"Eden\"); \nconst student2 = new Student(\"John\"); \nstudent1.printName(); //Output \"Eden\" \nstudent2.printName(); //Output \"John\"\n```", "```js\nvar student = {} \nconsole.log(student.constructor == Object); //Output \"true\"\n```", "```js\nconst object1 = { name: \"Eden\", __proto__: {age: 24} } \nconst object2 = {name: \"Eden\" } \n\nObject.setPrototypeOf(object2, {age: 24}); \n\nconst object3 = Object.create({age: 24}, {\n    name: {value: \"Eden\"}\n}); \n\nconsole.log(object1.name + \" \" + object1.age); \nconsole.log(object2.name + \" \" + object2.age); \nconsole.log(object3.name + \" \" + object3.age);\n```", "```js\nEden 24\nEden 24\nEden 24\n```", "```js\nconst obj = { name: \"Eden\" } \nconsole.log(obj.__proto__ == Object.prototype); //Output \"true\"\n```", "```js\nfunction Student() { \n    this.name = \"Eden\"; \n} \nconst obj = new Student(); \nconsole.log(obj.__proto__.constructor == Student); //Output \"true\" \nconsole.log(obj.__proto__ == Student.prototype); //Output \"true\"\n```", "```js\nfunction Student(name) { \n    this.name = name; \n} \nStudent.prototype.printName = function() { \n    console.log(this.name); \n} \n\nconst s1 = new Student(\"Eden\"); \nconst s2 = new Student(\"John\"); \n\nfunction School(name) { \n    this.name = name; \n    this.printName = function() { \n        console.log(this.name); \n    } \n} \n\nconst s3 = new School(\"ABC\");\nconst s4 = new School(\"XYZ\"); \nconsole.log(s1.printName == s2.printName); \nconsole.log(s3.printName == s4.printName);\n```", "```js\ntrue\nfalse\n```", "```js\nfunction School(schoolName) { \n    this.schoolName = schoolName; \n} \n\nSchool.prototype.printSchoolName = function(){ \n    console.log(this.schoolName); \n} \n\nfunction Student(studentName, schoolName) { \n    this.studentName = studentName; \n    School.call(this, schoolName); \n} \n\nStudent.prototype = new School(); \nStudent.prototype.printStudentName = function() { \n    console.log(this.studentName); \n}\n\nconst s = new Student(\"Eden\", \"ABC School\"); \ns.printStudentName(); \ns.printSchoolName();\n```", "```js\nEden\nABC School\n```", "```js\nconst s1 = \"String\"; \nconst s2 = new String(\"String\"); \nconsole.log(typeof s1); \nconsole.log(typeof s2); \nconsole.log(s1 == s2); \nconsole.log(s1.length);\n```", "```js\nstring\nobject\ntrue\n6\n```", "```js\nconst s1 = \"String\"; \nconst s2 = new String(\"String\");\n\nconsole.log(typeof s1); \nconsole.log(typeof s2); \nconsole.log(s1 == s2.valueOf()); \nconsole.log((new String(s1)).length);\n```", "```js\nclass Student { \n    constructor(name) { \n        this.name = name; \n    } \n} \n\nconst s1 = new Student(\"Eden\"); \nconsole.log(s1.name); //Output \"Eden\" \n```", "```js\nfunction Student(name) { \n    this.name = name; \n} \n\nconst s1 = new Student(\"Eden\"); \nconsole.log(s1.name); //Output \"Eden\"\n```", "```js\nclass Student { \n    constructor(name) { \n        this.name = name; \n    } \n} \n\nfunction School(name) { \n    this.name = name; \n} \n\nconsole.log(typeof Student); \nconsole.log(typeof School == typeof Student);\n```", "```js\nfunction\ntrue\n```", "```js\nconst Student = class { \n    constructor(name) { \n        this.name = name; \n    } \n} \n\nconst s1 = new Student(\"Eden\"); \nconsole.log(s1.name); //Output \"Eden\"\n```", "```js\nconst Student = function(name) { \n    this.name = name; \n}; \nconst s1 = new Student(\"Eden\"); \nconsole.log(s1.name); //Output \"Eden\"\n```", "```js\nclass Person { \n    constructor(name, age) { \n        this.name = name; \n        this.age = age; \n    } \n    printProfile() { \n        console.log(\"Name is: \" + this.name + \" and Age is: \" + this.age); \n    } \n} \n\nconst p = new Person(\"Eden\", 12);\np.printProfile(); \nconsole.log(\"printProfile\" in p.__proto__); \nconsole.log(\"printProfile\" in Person.prototype);\n```", "```js\nName is: Eden and Age is: 12\ntrue\ntrue\n```", "```js\nfunction Person(name, age) { \n    this.name = name; \n    this.age = age; \n} \n\nPerson.prototype.printProfile = function() { \n    console.log(\"Name is: \" + this.name + \" and Age is: \" + this.age); \n} \n\nconst p = new Person(\"Eden\", 12);\np.printProfile(); \nconsole.log(\"printProfile\" in p.__proto__); \nconsole.log(\"printProfile\" in Person.prototype);\n```", "```js\nName is: Eden and Age is: 12\ntrue\ntrue\n```", "```js\nclass Person { \n    constructor(name) { \n        this._name_ = name; \n    } \n    get name() { \n        return this._name_; \n    } \n    set name(name) {\n        this.someOtherCustomProp = true;\n        this._name_ = name; \n    } \n} \n\nconst p = new Person(\"Eden\"); \nconsole.log(p.name); // Outputs: \"Eden\"\np.name = \"John\"; \nconsole.log(p.name); // Outputs: \"John\"\nconsole.log(p.someOtherCustomProp); // Outputs: \"true\"\n```", "```js\nclass myClass {  \n    * generator_function()  {  \n        yield 1;  \n        yield 2;  \n        yield 3;  \n        yield 4;  \n        yield 5;  \n    } \n} \n\nconst obj = new myClass(); \nlet generator = obj.generator_function(); \nconsole.log(generator.next().value); \nconsole.log(generator.next().value); \nconsole.log(generator.next().value); \nconsole.log(generator.next().value); \nconsole.log(generator.next().value); \nconsole.log(generator.next().done); \nconsole.log(\"generator_function\" in myClass.prototype);\n```", "```js\n 1\n 2\n 3\n 4\n 5\n true\n true\n```", "```js\nclass Student {  \n    constructor(name)  {  \n        this.name = name;  \n    }  \n    static findName(student)  {  \n        return student.name;  \n    } \n} \n\nconst s = new Student(\"Eden\"); \nconst name = Student.findName(s); \nconsole.log(name); //Output \"Eden\"\n```", "```js\nfunction A(a) { \n    this.a = a; \n} \n\nA.prototype.printA = function(){ \n    console.log(this.a); \n}\n\nclass B extends A {  \n    constructor(a, b)  {  \n        super(a);  \n        this.b = b;  \n    }  \n\n    printB()  {  \n        console.log(this.b);  \n    }  \n\n    static sayHello()  {  \n        console.log(\"Hello\");  \n    } \n} \n\nclass C extends B {  \n    constructor(a, b, c)  {  \n        super(a, b);  \n        this.c = c;  \n    }  \n\n    printC()  {  \n        console.log(this.c);  \n    }  \n\n    printAll()  {  \n        this.printC();  \n        super.printB();  \n        super.printA();  \n    } \n} \n\nconst obj = new C(1, 2, 3); \nobj.printAll(); \nC.sayHello();\n```", "```js\n 3\n 2\n 1\n Hello\n```", "```js\nclass myClass { \n    static [\"my\" + \"Method\"]() { \n        console.log(\"Hello\"); \n    } \n} \n\nmyClass[\"my\" + \"Method\"](); //Output \"Hello\"\n```", "```js\nvar s = Symbol(\"Sample\"); \n\nclass myClass { \n    static [s]() { \n        console.log(\"Hello\"); \n    } \n} \n\nmyClass[s](); //Output \"Hello\"\n```", "```js\nmyFunc(); // fine\nfunction myFunc(){} \nvar obj = new myClass(); // throws error\nclass myClass {}\n```", "```js\nclass myClass { \n    constructor() { \n        return Object.create(null); \n    } \n} \n\nconsole.log(new myClass() instanceof myClass); //Output \"false\"\n```", "```js\nclass myCustomArray1 extends Array {  \n    static get [Symbol.species]()  {  \n        return Array;  \n    } \n} \n\nclass myCustomArray2 extends Array{} \n\nvar arr1 = new myCustomArray1(0, 1, 2, 3, 4); \nvar arr2 = new myCustomArray2(0, 1, 2, 3, 4); \n\nconsole.log(arr1 instanceof myCustomArray1); // Outputs \"true\"\nconsole.log(arr2 instanceof myCustomArray2); // Outputs \"true\"\narr1 = arr1.map(value => value + 1); \narr2 = arr2.map(value => value + 1); \n\nconsole.log(arr1 instanceof myCustomArray1);  // Outputs \"false\"\nconsole.log(arr2 instanceof myCustomArray2);  // Outputs \"true\"\nconsole.log(arr1 instanceof Array); // Outputs \"true\"\nconsole.log(arr2 instanceof Array); // Outputs \"true\"\n```", "```js\n//Assume myArray1 is part of library \nclass myArray1 { \n//default @@species. Child class will inherit this property \n    static get [Symbol.species]() { \n        //default constructor \n        return this; \n    } \n    mapping() { \n        return new this.constructor[Symbol.species](); \n    } \n} \n\nclass myArray2 extends myArray1 { \n    static get [Symbol.species]() { \n        return myArray1; \n    } \n}\n\nlet arr = new myArray2(); \nconsole.log(arr instanceof myArray2); //Output \"true\" \narr = arr.mapping(); \nconsole.log(arr instanceof myArray1); //Output \"true\"\n```", "```js\nfunction myConstructor() { \n    console.log(new.target.name); \n} \n\nclass myClass extends myConstructor { \n    constructor() { \n        super(); \n    } \n} \n\nconst obj1 = new myClass(); \nconst obj2 = new myConstructor();\n```", "```js\nmyClass\nmyConstructor\n```", "```js\nconst obj1 = { \n    print() { \n        console.log(\"Hello\"); \n    } \n} \n\nconst obj2 = { \n    print() {\n        super.print(); \n    } \n} \n\nObject.setPrototypeOf(obj2, obj1); \nobj2.print(); //Output \"Hello\"\n```"]