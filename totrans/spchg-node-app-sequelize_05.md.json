["```js\nclass Receipt extends Model {}\nReceipt.init({\n  subtotal: DataTypes.DECIMAL(7, 2)\n}, {\n  hooks: {\n    beforeValidate: (receipt, options) => {\n      if (isEmployee(receipt.customer)) {\n        receipt.subtotal = 0;\n      }\n    }\n  }\n});\n// or with the define() method\nsequelize.define('Receipts', {\n  subtotal: DataTypes.DECIMAL(7, 2)\n}, {\n  hooks: {\n    beforeValidate(receipt, options) => { … })\n  }\n});\n```", "```js\nfunction employeeDiscount(receipt, options) {\n  if (isEmployee(receipt.customer)) {\n    receipt.subtotal = 0;\n  }\n}\nclass Receipt extends Model {}\nReceipt.init({ subtotal: DataTypes.DECIMAL(7, 2) });\nReceipt.addHook('beforeValidate',employeeDiscount);\n// or you can use the direct method:\nReceipt.beforeValidate(employeeDiscount);\n```", "```js\nasync function employeeDiscount(receipt, options) {\n  if (!customerIsEmployee) {\n    return;\n  }\n  const discountTotal = await \n  getDiscountFromExternalAccountingService(employeeId);\n  receipt.subtotal = discountTotal;\n}\nReceipt.addHook('beforeValidate', employeeDiscount);\n// or…\nReceipt.beforeValidate(employeeDiscount);\n```", "```js\nReceipt.beforeValidate((receipts, options) => {\n  return Promise.reject(new Error(\"Invalid receipt\"));\n});\n```", "```js\nReceipt.addHook('beforeValidate', 'checkForNegativeSubtotal', (receipt, options) => { … });\n// or\nReceipt.beforeValidate('checkForNegativeSubtotal', (receipt, options) => {…});\n```", "```js\nconst sequelize = new Sequelize(…, {\n  define: {\n    hooks: {\n      beforeValidate() {\n     // perform some kind of data transformation/validation\n      }\n  }\n});\n```", "```js\nsequelize.addHook('beforeValidate', () => { … });\n```", "```js\nawait Receipt.destroy({\n  where: { … },\n  individualHooks: true\n});\n```", "```js\nif (!isDev) {\n  User.addHook('beforeValidate', 'checkForPermissions', …);\n}\n```", "```js\nfunction removeProductionOnlyHooks() {\n  // this will remove all matching hooks by event type and \n     name\n  User.removeHook('beforeValidate', 'checkForPermissions');\n  // this will remove all beforeValidate hooks on the User \n     model\n  User.removeHook('beforeValidate');\n  // this will remove all of the User model's hooks\n  User.removeHook();\n}\n // load our models…\nif (isDev) {\n  removeProductionHooksOnly();\n}\n```", "```js\nvar post = await Post.findOne();\nawait Post.update(post.dataValues, {\n  where: { id: post.id }\n});\n```", "```js\nawait Post.update(post.dataValues, {\n  where: { id: post.id },\n  hooks: true\n});\n```", "```js\nclass Account extends Model {}\nAccount.init({\n    name: {\n        type: DataTypes.STRING,\n        primaryKey: true,\n    },\n    balance: DataTypes.DECIMAL,\n});\nclass Book extends Model {}\nBook.init({\n    from: DataTypes.STRING,\n    to: DataTypes.STRING,\n    amount: DataTypes.DECIMAL,\n});\n```", "```js\nclass Ledger extends Model {}\nLedger.init({\n    bookId: DataTypes.INTEGER,\n    signature: DataTypes.STRING,\n    amount: DataTypes.DECIMAL,\n    from: DataTypes.STRING,\n    to: DataTypes.STRING,\n});\n```", "```js\nBook.addHook('afterCreate', async (book, options) => {\n    const from = await Account.findOne(book.from);\n    const to = await Account.findOne(book.to);\n    // pretend that we have an external service that \"signs\" \n       our transactions\n    const signature = await getSignatureFromOracle(book);\n    await Ledger.create({\n        transactionId: book.id,\n        signature: signature,\n        amount: book.amount,\n        from: from.name,\n        to: to.name,\n    });\n});\n```", "```js\nconst Sequelize = require('@sequelize/core');\nconst sequelize = new Sequelize('db', 'username',  \n                                'password');\nawait sequelize.transaction(async t => {\n    // validate our balances here and some other work…\n\n    await Book.create({\n        to: 'Joe',\n        from: 'Bob',\n        amount: 20.21,\n    }, {\n        transaction: t,\n    });\n   // double check our new balances\n   await checkBalances(t, 'Joe', 'Bob', 20.21);\n});\n```", "```js\n      BoardingTicket.init({\n        seat: {\n          type: DataTypes.STRING,\n          validate: {\n            notEmpty: {\n       msg: 'Please enter in a valid seating arrangement'\n            }\n          }\n        },\n        cost: {\n          type: DataTypes.DECIMAL(7, 2)\n        },\n        isEmployee: {\n          type: DataTypes.VIRTUAL,\n          async get() {\n            const customer = await this.getCustomer();\n    if (!customer || !customer.email) \n                 return false;\n       return customer.email.endsWith('avalonairlines');\n          }\n        }\n      }, {\n        sequelize,\n        modelName: 'BoardingTicket'\n      });\n    ```", "```js\n      // Employees should be able to fly for free\n      BoardingTicket.beforeValidate('checkEmployee', \n                                    (ticket, options) => {\n        if (ticket.isEmployee) {\n           ticket.subtotal = 0;\n        }\n      });\n    ```", "```js\n      // Subtotal should never be less than zero\n      BoardingTicket.beforeSave('checkSubtotal', (ticket, options) => {\n        if (ticket.subtotal < 0) {\n          throw new Error('Invalid subtotal for this ticket.');\n        }\n      });\n    ```", "```js\n      // Ensure that the seat the customer has requested \n         is available\n      BoardingTicket.beforeSave('checkSeat', async (tick\n                                 et, options) => {\n      // getDataValue will retrieve the new value (as \n         opposed to the previous/current value)\n        const newSeat = ticket.getDataValue('seat');\n        if (ticket.changed('seat')) {\n          const boardingTicketExists = \n          BoardingTick-et.findOne({\n            where: { seat: newSeat }\n          });\n          if (boardingTicketExists) {\n            throw new Error(`The seat ${newSeat} has \n            al-ready been taken.`)\n          }\n        }\n      });\n    ```", "```js\n    await sequelize.transaction(async t => {\n      await BookingTicket.create({\n        seat: 'A1',\n        cost: 12,\n        customerId: 1,\n      }, {\n        transaction: t,\n      });\n    });\n    ```"]