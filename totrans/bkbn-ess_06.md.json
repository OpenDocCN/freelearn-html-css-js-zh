["```js\nBackbone.history.start();\n```", "```js\nBackbone.history.start({pushState: true});\n```", "```js\nvar MyRouter = Backbone.Router.extend({\n    // instance methods/properties go here\n}, {\n    // static methods/properties go here\n);\n```", "```js\nmyRouter = new Backbone.Router({\n    routes: {\n        'foo': function() {\n            // logic for the \"/foo\" or \"#foo\" route would go here }\n    }\n});\nBackbone.History.start(); // siteRouter won't work without this\n```", "```js\nvar SiteRouter = Backbone.Router.extend({\n    routes: {\n        'foo': 'fooRoute'\n    },\n    fooRoute: function() {\n        // logic for the \"/foo\" or \"#foo\" route would go here }\n});\nvar siteRouter = new SiteRouter();\nBackbone.History.start(); // siteRouter won't work without this\n```", "```js\nFor example:SiteRouter = new Backbone.Router({\n    initialize: function() {\n        this.route('foo', 'fooRoute');\n    },\n    fooRoute: function() {\n        // logic for the \"/foo\" or \"#foo\" route would go here}\n});\n```", "```js\n// NOTE: In a real case user data would come from the server\nvar user = new Backbone.Model({isAdmin: true});SiteRouter = new Backbone.Router({\n     initialize: function(options) {\n        if(user.get('isAdmin')) {\n            this.addAdminRoutes();\n        }\n    },\n    addAdminRoutes: function() {\n        this.route('adminPage1', 'adminPage1Route');\n        this.route('adminPage2', 'adminPage2Route');\n        // etc.\n    }\n});\n```", "```js\n// File #1\nwindow.addFooRoutes = function(router) {\n    router.route('foo', function() {\n        //...\n    })\n}\n\n// File #2SiteRouter = new Backbone.Router({\n    initialize: function(options) {\n        if(options.includeFooRoutes) {\n            addFooRoutes(this);\n        }\n    }\n});\n```", "```js\nvar SiteRouter = new Backbone.Router({\n    initialize: function(options) {\n        this.route('book/1', 'book1Route'); // for the book with ID 1\n        this.route('book/2', 'book2Route'); // for the book with ID 2\n        this.route('book/3', 'book3Route'); // for the book with ID 3\n        // this will get old fast\n    }\n});\n```", "```js\nSiteRouter = new Backbone.Router({\n    initialize: function(options) {\n        // This regex will match \"book/\" followed by a number\n        this.route(/^book\\/(\\d+)$/, 'bookRoute');\n    },\n    bookRoute: function(bookId) {\n        // book route logic would go here\n    }\n});\n```", "```js\nSiteRouter = new Backbone.Router({\n    initialize: function(options) {\n        this.route('book/:bookId', 'bookRoute');\n    },\n    bookRoute: function(bookId) {\n        // book route logic would go here\n    }\n});\n```", "```js\nSiteRouter = new Backbone.Router({\n    initialize: function(options) {\n        this.route('book/*bookId', 'bookRoute');\n    },\n    bookRoute: function(bookId) {\n        // book route logic would go here\n    }\n});\n// if we now navigate to \"book/example/with/slash/5 \" our bookRoute \n// method will receive an argument of \"example/with/slash/5 \"\n```", "```js\nnew Backbone.Router({\n    routes: {\n        'foo': function() {alert('bar')},\n        ':splatThatCouldBeFoo': function() {alert('baz')},\n    }\n}) \nBackbone.history.start();\n// navigating to #foo alerts('bar')\n```", "```js\n<a href=\"#foo\">Click here to go to the \"foo\" route</a>\n```", "```js\nvar router = new Backbone.Router({\n    routes: {\n        foo: function() {\n            alert('You have navigated to the \"foo\" route!');\n        }\n    }\n});\nrouter.navigate('foo', {trigger: true});\n```", "```js\nrouter.navigate('bar', {replace: true, trigger: true});\n```", "```js\nif (!Backbone.history.start()) {\n    // add logic to handle the \"404 Page Not Found\" case here\n}\n```", "```js\nvar SiteRouter = Backbone.Router.extend({\n    initialize: function(options) {\n        this.route('normalRoute/:id', 'normalRoute');\n        this.route('*nothingMatched', 'pageNotFoundRoute');\n    },\n    pageNotFoundRoute: function(failedRoute) {\n        alert( failedRoute + ' did not match any routes');\n    }\n});\n```", "```js\nvar router = new Backbone.Router();\nrouter.on('route:foo', function() {\n    // do something whenever the route \"foo\" is navigated to\n});\n```", "```js\nBackbone.history.on('route', function() { ... });\n```", "```js\nvar NormalRouter = Backbone.Router({\n     routes: {\n        // routes for all users would go here\n    }\n};\nvar AdminRouter = Backbone.Router({\n     routes: {\n        // routes for admin users only would go here\n    }\n};\nnew NormalRouter();\nif (user.get('isAdmin') {\n    new AdminRouter();\n}\n```", "```js\nvar Book = Backbone.Model.extend({urlRoot: '/book/'});\nvar Page = Backbone.View.extend({render: function() {\n        var data = this.model ? this.model.toJSON() : {};\n        this.$el.html(this.template(data));\n        return this;\n    }\n});\nvar BookPage = Page.extend({\n   template: 'Title: <%= title %>' \n});\nvar SiteRouter = new Backbone.Router({\n    route: {\n        'book/:bookId(/)': 'bookRoute',\n    },\n    bookRoute: function(bookId) {\n        var book = new Book({id:  bookId});\n        book.fetch().done(function() {\n            var page = new BookPage({model: book});\n            page.render();\n        });\n    }\n});\n```", "```js\nvar StandardSidebar = Backbone.View.extend({\n    // Logic for rendering the standard sidebar });Page = Backbone.View.extend({\n    sideBarClass:  StandardSidebar,\n\n    render: function() {\n        // render the base page HTML\n        this.$el.html('<div id=\"sidebar\"></div>' +\n                      '<div id=\"content\"></div>');\n\n        // render the sidebar\n        var sidebar = new this.sideBarClass({\n            el: this.$('#sidebar')\n        });\n        sidebar.render();\n\n        // logic for rendering the content area would go here\n        return this;\n    }\n});\nvar AlternateSidebar  = Backbone.View.extend({\n    // Logic for rendering the alternate sidebar });\nvar AlternateSidebarPage = Page.extend({\n   sidebarClass: AlternateSidebar\n});\n```"]