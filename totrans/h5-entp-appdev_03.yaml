- en: 'Chapter 3. The App: Structure and Semantics'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have walked through some useful tools and key ideas, we can begin
    with our enterprise application case study: MovieNow.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will cover the main aspects of HTML page structure, applying the
    correct use of HTML5 semantic tags. Also we are going to cover the use of microdata
    and best practices for **Search Engine Optimization** (**SEO**). Finally, we are
    going to introduce the concept of **Responsive Web Design** (**RWD**) as a technique
    to support mobile development discussing the pros and cons therein as well as
    alternatives. By the end of the chapter, we will have an HTML page with basic
    styling but with a layout that can be easily read by any web developer with a
    basic understanding of HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding page structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metadata
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microdata
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Favicons and icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS3 resets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sticky footer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsive web design and adaptive web design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding page structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we already gave you an introduction to semantic tags and page elements
    in the *Preface*, we are now going to put that knowledge into practice and go
    deeper into the meaning and use of each tag, while following the natural order
    of construction of our HTML5 enterprise application.
  prefs: []
  type: TYPE_NORMAL
- en: 'A common layout for web applications is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding page structure](img/5689EN_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The core structure of any HTML file includes a `DOCTYPE` declaration, an `html`
    root node, and `body` and `head` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: From this point, we can define the layout in any way we want. Usually, but not
    always, a page will contain a header section specifying the company or product
    logo and some copy, a footer section with copyright information and some links
    to further information such as terms and conditions, a navigation area with links
    to each section, and the content area. Before HTML5, we would typically define
    sections using the `class` attribute or the `id` attribute of generic HTML tags
    such as the `div` and `span` tags. HTML5, however, streamlines this by offering
    predefined tags for such standard sections. We can now use `<header>` to contain
    the main navigation and/or initial content, `<footer>` for copyright information
    and alternative navigation content, `<nav>` for navigation area, and `<section>`
    for other content containers. This allows us to standardize our content from site
    to site.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is one way we can define the semantics of our page using HTML5
    tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can have as many `header` and `footer` tags in an HTML page as we want, if
    they are in different containers. It may sound unintuitive, but it makes sense
    when you think of each container as a logical group of related content independent
    of sibling content.
  prefs: []
  type: TYPE_NORMAL
- en: As a general rule, when we have multiple `header` and `footer` tags, they should
    be contained in `body`, `article`, and `section` tags. Although there is no technical
    restriction on where semantic tags are positioned, we should maintain a structure
    that facilitates readability for web developers as well as search engine web crawlers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the main content, we can put an `article` tag in our `section` tag.
    Inside of it, we can place an `h1` tag for the main heading and a `p` tag for
    each paragraph. The resulting HTML looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Navigation list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unordered lists are, generally, the accepted way of representing navigation
    on websites since they have a cohesive semantic structure. Therefore, in our main
    `nav` tag, we can use an unordered list, `ul`, with embedded list elements (`li`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Secondary content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To finalize our main structure, we will need a sidebar that will display the
    top five box office movies. Since this section will be ancillary to the main content,
    we will use the `aside` tag. Inside the `aside` tag, we will place a heading with
    an `h2` tag. We use `h2` rather than `h1` because this represents the next level
    in the overall outline of the page content. To represent the list of movies, numerical
    order is important, which means that the best structure to use is an ordered list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result should look something like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Do not worry about the content just yet. For now, we will use sample data to
    demonstrate the page structure. In later chapters, we will populate this section
    with data from a web service.
  prefs: []
  type: TYPE_NORMAL
- en: Metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now we have been building the main structure of the MovieNow application
    with HTML5 semantic tags; however, there is a common misunderstanding about the
    effect of semantic tags in SEO. Use of semantic tags does not necessarily translate
    to higher search engine rankings. Nevertheless, they simplify the analysis of
    the content by web crawlers driving traffic to your application for specific searches
    related to the semantic content. In essence, they make your application more like
    an open book.
  prefs: []
  type: TYPE_NORMAL
- en: As a theoretical example, it will be far easier for a web crawler to determine
    the most important content in a specific page if this content is enclosed in an
    `article` tag, than if it is enclosed in a `div` tag that has no semantic meaning.
  prefs: []
  type: TYPE_NORMAL
- en: In order to provide search engine data to connect page content to the search
    queries that will inevitably bring people to your website or application, meta
    tags are a perfect solution. Meta tags store information about the web page—known
    as *metadata*—that is not necessarily visible to end users (unless you reveal
    the page source code). We can specify as many meta tags as we want. Search engine
    web crawlers often look to these meta tags for further information about the page
    content that cannot be ascertained by the display content itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Meta tags are contained in the `head` tag with the type of content defined
    by the property `name` and the content by the attribute `content`. The following
    are some of the most common meta tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Usually search engine results will display links where the main link text comes
    from the `title` tag and the description that appears underneath the `meta` tag
    with `name="description"`. As an example, when we search for the word "movies",
    we will find [fandango.com](http://fandango.com) listed in the search results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Metadata](img/5689_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we inspect the code on [fandango.com](http://fandango.com) by viewing the
    source, we can see the following in the `head` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can even define your own meta tags if you want. Search engines may overlook
    them as they may not be aware of them, but they may prove themselves useful for
    providing specific data to other developers or other applications you may want
    to write.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google does not take the `keywords` meta tag into consideration, according to
    [http://googlewebmastercentral.blogspot.com/2009/09/google-does-not-use-keywords-meta-tag.html](http://googlewebmastercentral.blogspot.com/2009/09/google-does-not-use-keywords-meta-tag.html);
    instead it uses `description` and others in conjunction with a series of specific
    Google search engine meta tags. SEO experts advise placing keywords in the `title`
    tag, the URL, and in the `H1` tag.
  prefs: []
  type: TYPE_NORMAL
- en: Meta tags also provide additional functionality by allowing the web developer
    to inform the web browser about certain characteristics of the web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'To prevent the page from being automatically translated to the client language,
    you can specify the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To direct the behavior of Google web crawlers (known as Googlebots), specify
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To tell search engine web crawlers whether to inspect the content of a page
    or not, specify the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `robots` meta tag, you can include any or all of the following list
    separated by commas:'
  prefs: []
  type: TYPE_NORMAL
- en: '**noindex**: This prevents the page from being indexed altogether'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**nofollow**: This prevents search engines from following links inside the
    page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**noarchive**: This prevents search engines from showing a cached link for
    the page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, the following meta tag suggests to search engines that they should
    not index the page and follow links on the page for further indexing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending upon each search engine implementation, the suggestions declared on
    meta tags can be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: If your enterprise application is mentioned on Twitter, you can add new meta
    tags that will be interpreted by Twitter when someone tweets (posts) a link to
    your page for display on Twitter streams.
  prefs: []
  type: TYPE_NORMAL
- en: 'To include a title, description, and a thumbnail image for your page when referenced
    by a tweet, you can add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For the Twitter account associated with the website, you can add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'These meta tags define for Twitter certain data that it can use to express
    more about your web page it mentions. For more information about meta tags, see
    the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dev.twitter.com/docs/cards](https://dev.twitter.com/docs/cards)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Facebook also has meta tags it defines for expressing metadata about links
    to web resources. For more information about Facebook''s meta tags, see the following
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developers.facebook.com/docs/opengraphprotocol/](http://developers.facebook.com/docs/opengraphprotocol/)'
  prefs: []
  type: TYPE_NORMAL
- en: Microdata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have the ability to define metadata at the page level but what about metadata
    on specific elements on the page? **Microdata** provides us with the answer. Microdata
    is an HTML specification used to add more information to HTML tags.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An interesting read to understand how Google manages metadata and microdata
    can be found at [http://support.google.com/webmasters/bin/answer.py?hl=en&answer=99170](http://support.google.com/webmasters/bin/answer.py?hl=en&answer=99170).
  prefs: []
  type: TYPE_NORMAL
- en: 'We previously defined HTML5 syntax for a list of movies. Now we can specify
    the meaning of each tag that defines a movie. First, we need to identify the item
    or container using the `itemscope` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can specify the type of content using the `itemprop` attribute and the
    word that defines the type of content, in this case `name` and `genre`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here we need to rely on the importance of standards; while you can define microdata
    in the way you prefer, the goal is to create a unified way to define the data
    in a way any web crawler or reader implementation can read it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose that we decide to define MovieNow''s microdata in a way that it can
    be easily analyzed. We would need to share a common schema with other applications.
    A possible solution to this is [schema.org](http://schema.org):'
  prefs: []
  type: TYPE_NORMAL
- en: Schema.org provides a collection of schemas, i.e., html tags, that webmasters
    can use to markup their pages in ways recognized by major search providers. Search
    engines including Bing, Google, Yahoo! and Yandex rely on this markup to improve
    the display of search results, making it easier for people to find the right web
    pages.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Using this site, we need to only search for the kind of data needed. Searching
    for `movie`, we get a page with a movie schema: [http://schema.org/Movie](http://schema.org/Movie).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Microdata](img/5689_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see the list includes **name** and **genre** attributes, so we only
    need to add the schema to our container tag using the `itemtype` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Any system that uses this schema will recognize our items as movies as well
    as the corresponding names and genres.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google provides an online tool to test site microdata. This is available at
    [http://www.google.com/webmasters/tools/richsnippets](http://www.google.com/webmasters/tools/richsnippets).
  prefs: []
  type: TYPE_NORMAL
- en: Favicons and icons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let us talk about some uses of the descriptive attribute `link`. As we develop
    our application, we will need to have icons to represent our product. Such icons
    can be shown not only inside our HTML, but also in browser tabs, bookmark lists,
    and home screen icons in the case of iOS, and some Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All images required are located in the `img` folder in our sample files.
  prefs: []
  type: TYPE_NORMAL
- en: A favicon, or favorite icon, is an image used by the browser to identify a website
    or web application. Usually, favicons are 16 x 16 pixels and formatted as a `.png`,
    `.gif` (including animated GIFs), or `.ico` – the last one being the most supported
    file format.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ico` file format was introduced by Microsoft Windows to contain one or
    more images at multiple sizes and color depths, so they can be scaled appropriately
    depending of the application requirements. Other non-Microsoft browsers adopted
    this format later to maintain compatibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a favicon, we can use any graphic editor program in the market such
    as Adobe Photoshop or Fireworks. Other possible solutions are the web tools such
    as **favicon.cc** ([http://www.favicon.cc/](http://www.favicon.cc/)). Favicon.cc
    allows you to upload an image and edit it using a pixel tool; this is shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Favicons and icons](img/5689_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although it is a great tool, there are downsides which include the lack of layers
    and undo/redo functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When possible, try to export your favicon as an `ico` format, unless you want
    to use an animated GIF. Be aware that `ico` is a file format itself, so you need
    to use an image editor and export to the `ico` format. Simply renaming it with
    the `ico` extension will not work.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make your application aware of your favicon, specify the name, location,
    and/or the format in a `link` tag inside your `head` tag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice the use of the attribute `rel` to identify the relationship of the image
    with the web page, as well as the use of the attribute `href` to indicate image
    location, and `type` to specify the MIME type of the image. As a result you will
    see an image in the browser tab, address bar, and the favorites/bookmarks lists.
    In case of Firefox on Mac, you will see something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Favicons and icons](img/5689_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, if there is no `link` tag with `rel="shortcut icon"`, web browsers
    will look for your favicon in the server root directory as a file named `favicon.ico`.
  prefs: []
  type: TYPE_NORMAL
- en: Since Version 1.1.3, iOS devices allow you to add a home screen icon as a shortcut
    for a mobile website or application. To add an icon for our enterprise application,
    we need to take into consideration the fact that there are multiple sizes depending
    on the device. For iPhones/iPods prior to Retina display technology, icons should
    be 57 x 57 px while iPhones/iPods with Retina display technology should have icons
    that are 114 x 114 px. For iPads prior to Retina display, icons should be 72 x
    72 px, and with Retina display they should be 144 x 144 px.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we can see the difference between a regular display (left) and a Retina
    display (right):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Favicons and icons](img/5689_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If there is no specification about the icons in the head, iOS devices will attempt
    to find an icon. Otherwise, the icon will be a section of a print screen of the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you have an iPod without Retina display, it will try to find
    an icon in the root directory with a filename by going down the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`apple-touch-icon-57x57-precomposed.png`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`apple-touch-icon-57x57.png`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`apple-touch-icon-precomposed.png`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`apple-touch-icon.png`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generates an icon taking a print screen and using a section of it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retina display devices can use the same size images as non-Retina display devices,
    but the quality will be much poorer and, in some cases, you will notice some pixelation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our enterprise application, we are going to specify icons for each case
    using the `link` tag inside our `head` tag. The way to declare iOS icons in a
    link is to use `apple-touch-icon` in the `rel` attribute, the icon path in the
    `href` attribute, and finally the size in the `sizes` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Considering all devices, we should have something that looks like the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: By default, iOS adds rounded corners and reflective shine effects to icons,
    but we can remove the reflective shine using `apple-touch-icon-precomposed` instead
    of `apple-touch-icon` as a `rel` value.
  prefs: []
  type: TYPE_NORMAL
- en: '![Favicons and icons](img/5689_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The previous image shows the difference between our original image, the default
    reflective shine effect icon, and the icon without the reflective shine effect.
    In our example files, we use a non-reflective version because we want to show
    the original image in more detail. Nevertheless, this often boils down to a mere
    design detail.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 resets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our overall page structure, we are ready to start adding some
    styles to our enterprise application. A good practice before jumping into styling
    with CSS is resetting default styles to work with the same initial conditions
    in all browsers. If you already know how to declare CSS reset styles, you can
    skip this section and continue to the *Responsive web design and adaptive web
    design* section.
  prefs: []
  type: TYPE_NORMAL
- en: A CSS reset defines an initial set of styles to remove or standardize across
    browsers' default values of some properties such as margins, paddings, and so
    on. There are several versions of CSS resets; the most common ones are the **Yahoo
    User Interface** (**YUI**) CSS Reset ([http://developer.yahoo.com/yui/reset/](http://developer.yahoo.com/yui/reset/)),
    the HTML5 Doctor Reset ([http://html5doctor.com/html-5-reset-stylesheet/](http://html5doctor.com/html-5-reset-stylesheet/)),
    Nicolas Gallagher's normalize.css ([http://necolas.github.com/normalize.css/](http://necolas.github.com/normalize.css/)),
    and Eric Mayer's Reset ([http://meyerweb.com/eric/thoughts/2011/01/03/reset-revisited/](http://meyerweb.com/eric/thoughts/2011/01/03/reset-revisited/)).
  prefs: []
  type: TYPE_NORMAL
- en: We are going to take styles from Eric Mayer's Reset and YUI's Reset to build
    our own. First, we will need to create a CSS file. Name it `styles.css` and save
    it in a folder called `css` under the root of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be recognized and applied by the HTML file, we have to import the file using
    a `link` tag with the attribute `rel="stylesheet"`, `type="text/css"`, and `href`
    pointing to our CSS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We are going to import `modernizr` too, adding HTML5 tags support for older
    browsers and browser capabilities detection. The `head` tag should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In `styles.css`, we are going to start resetting spaces and font styles. Basic
    spacing involves `margin` and `padding` properties as you can see in the diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS3 resets](img/5689EN_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For these properties (and for the `border` property), we can set styles in several
    ways.
  prefs: []
  type: TYPE_NORMAL
- en: Individual sides
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can set the top, right, bottom, and left `margin` to `0` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As we are using `0` as a value, we do not need to specify the unit (% or px).
    You can apply the same to the padding and border.
  prefs: []
  type: TYPE_NORMAL
- en: Shorthand
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A best practice is to declare `margin` properties in one block. This is known
    as **shorthand**. The shorthand syntax for `margin` and `padding` starts from
    the `top` property and is followed by the others in a clockwise manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We can specify only two values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the same as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Or only 1 value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This is equal to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to reset `outline` and `border` too, so putting it all together we
    should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The shorthand for border can include color and style too. For example, `border:5px
    solid blue;`.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we will need to keep the treatment of text standard across browsers.
    One fix to avoid exaggerated resizes of text in Internet Explorer is `font-size:100%;`.
    To force font inheritance from parent elements, we can use the shorthand `font:inherit`.
    However, to avoid problems with Internet Explorer 6 and 7, we must use the CSS
    properties `font-weight`, `font-style`, and `font-family`.
  prefs: []
  type: TYPE_NORMAL
- en: To set the vertical alignment using baselines of elements with their parents,
    we declare `vertical-align:baseline`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far we have the following as our reset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: By default, tables have a separation between cells. To avoid this, we can reset
    the `table` styles using `border-collapse:collapse` and `border-spacing:0`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Shorthand](img/5689EN_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The reset style should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We will need to clear the `font` styles and weight because in certain browsers
    some tags apply special styles such as bold and italic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove markers from ordered (`ol`) and unordered (`ul`) lists, we can set
    the `list-style` property to `none`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To set the main HTML5 tags as block boxes and avoid inconsistences across browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove quotes from tags, for long quotation (`blockquote`) and short quotation
    (`q`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'To assure that quotes really disappear across all browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that `outline` is used when the element is on focus, so we need to
    redefine or nullify it using `0` with the `:focus` selector. In this case, we
    redefine a dotted gray line of 1 pixel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Looks like a lot of code for a simple reset, but most of it is a result of inconsistencies
    across browser implementations. Resets provide a level playing field on which
    we can build our application.
  prefs: []
  type: TYPE_NORMAL
- en: Sticky footer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS sticky footer layout allows you to maintain our footer at the bottom of
    the page even if there is not enough content to push it down. If the content exceeds
    the height of the page, our footer will move to the end of the scroll.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point our enterprise application should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sticky footer](img/5689_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We would like our footer to stick to the bottom of the page. To achieve this,
    there are several implementations. We are going to follow one of the most common
    implementations that consists of two containers and a `.push` element that reserves
    the space for our `footer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sticky footer](img/5689EN_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To begin, we will add some tags to our current structure: a `section` tag with
    the class `wrapper` to separate all our tags from the footer, a `div` tag with
    the class `main` to contain page tags at the same level, and finally a `div` tag
    with the class `push`, to create space inside the wrapper section, allowing `footer`
    to be over the `wrapper` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Now we style our structure.
  prefs: []
  type: TYPE_NORMAL
- en: We need to expand the height of `html`, `body`, and `.wrapper`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to add `height:auto` and `min-height` for compatibility reasons
    and `overflow:hidden` to expand the `.wrapper` container when the content inside
    (that can be floated) grows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We can apply overflow to `.main` to expand too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `overflow:hidden` technique to enclose content should be used with caution.
    Its biggest downside is that it hides the absolute positioned content that is
    outside of the box. An alternative is Clearfix. In our case, we will then not
    need `overflow:hidden` in `.main` and `body > .wrapper`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then assign the same height to `footer` and `.push`. Both will align
    and we can use `clear` in case we need to add a floating element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'As a final step, we assign a negative `margin` value with the same value as
    `height` to our `footer` tag and `position:relative` for compatibility reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: General styling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With our sticky footer, we can continue with some basic styling. We can set
    the overall font family:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a debate about the performance implications of the universal selector
    `*`. While some authors discourage its use, others say CSS selectors are irrelevant
    in terms of web performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'To position our top five box office to the right and set its `width` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us add a background color to our main navigation menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that we are using the shorthand version of hexadecimal colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a decoration, we can add a background image to `header`. By default, it
    will tile the image unless we specify `no-repeat` to our `background` property.
    We can then set `color` and `height` too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'We can define the color of our `footer`, as well as color of `font`, `font-size`,
    `line-height` (to center the text vertically) and `text-align` to center text
    horizontally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Set our `wrapper` background color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We can define a fixed `width` for our content and we use `auto` for side margins
    to center our container tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'We add a `div` tag into our `header` tag to contain the application name and
    logo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'We define `width`, `height`, and our logo image using the `text-indent` property
    to hide text content inside `div`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Using `-9999px` in `text-indent` displaces our text to the left out of the visible
    area.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For accessibility and SEO considerations, it is a good practice to maintain
    application name as text. Other techniques can be seen at [http://css-tricks.com/css-image-replacement/](http://css-tricks.com/css-image-replacement/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the color of the columns at each side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Define wrapper padding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'We then remove link underlines and assign white color to all links inside our
    navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an underline on hover:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the font size of headings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Add color to our top five list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Content properties allow you to define and increment a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '`counter-reset:variable;` resets `variable` to 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`counter-increment:variable;` increments 1 to `variable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content:counter(variable);` shows the value of `variable` inside the tag'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can add `padding` and a `counter` variable to set the number for each movie
    on our top five:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use our counter `content:counter(counter)`, reset it using `counter-reset:counter;`,
    and increment it using `counter-increment:counter`. We can then add some spacing
    and set the font color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Counter properties are not supported in Internet Explorer 7\. Internet Explorer
    8 only supports them if `!DOCTYPE` is specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can assign the default management of ordered lists for IE7 and previous
    versions including a conditional CSS import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Where `ie7.css` contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Add more spacing, set the font size, and add a decorative dashed border:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Set a different color for movie genres:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add `color` to movie titles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Our application is now structured and looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![General styling](img/5689_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Responsive web design and adaptive web design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our application is taking form, but with so many devices and screen resolutions
    how can we support all of them?
  prefs: []
  type: TYPE_NORMAL
- en: Responsive web design is a fairly modern answer to this question. Responsive
    web design results from applying fluid grids and media queries to adapt the layout
    to the viewing environment. [http://mediaqueri.es/](http://mediaqueri.es/) is
    an illustrative guide about how to apply responsive web design in real world cases.
  prefs: []
  type: TYPE_NORMAL
- en: Using responsive web design, we can tackle many issues related to the diversity
    of environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the following ways in which we can tackle issues that
    may arise:'
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the size of the site when it is accessed on mobile devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving high-resolution images for retina display devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing user experience according to the device used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In responsive web design, media queries detect conditions such as screen resolution
    and based on that we can apply different styles.
  prefs: []
  type: TYPE_NORMAL
- en: A media query is formed specifying a media type (`screen`, `print`, and so on)
    and a series of features (`max-width`, `min-width`, `min-device-pixel-ratio`,
    and so on).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a more detailed explanation of the syntax, you can go to [http://www.w3.org/TR/css3-mediaqueries/](http://www.w3.org/TR/css3-mediaqueries/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the three ways to use media queries:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing CSS files using media queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is possible to specify which CSS file to import using media queries and
    the `link` tag in the `head` tag. In the following example, we load `iphone4.css`
    when retina display is detected and the device screen width is less than or equal
    to 480 px:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Importing other CSS from our main CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can import CSS files inside other CSS using `@import`. Here we can load
    `iphone4.css` when retina display is detected and the device screen `width` is
    less than or equal to 480 px:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Using media queries as conditionals in our main CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the most used technique and consists of media queries as conditionals
    inside our CSS. We are going to use this technique for our application, so let
    us define some media queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we define special styles for `width` between 738 px and 1024 px. This
    is applicable to many tablets in the market today. Here we are going to remove
    spaces and use the complete width of the device setting `width` for `wrapper`
    and `footer` to `100%`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Defining a case for devices less than 737 px width:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'We can add a special case for devices with a pixel ratio superior to 2, which
    is the case with Apple Retina display devices. In the style, we use a high definition
    version of our logo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While this technique doesn''t download our logo image twice if the Retina display
    image is required in a Safari mobile, we need to consider that for other cases.
    It is better to define a media query for each case and not rely on cascade override,
    so we can avoid multiple loads of the same asset. You can see other techniques
    at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://timkadlec.com/2012/04/media-query-asset-downloading-results/](http://timkadlec.com/2012/04/media-query-asset-downloading-results/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add cases for iPhone and iPad Retina display as well by defining some
    additional styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'In iOS devices, scale starts with values superior to 100%. For that reason,
    we need to add a line in our `head` tag to set the initial scale to 100%:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sadly, there is a scaling bug when you change between landscape and portrait
    orientations. Thanks to Scott Jehl, we can solve this problem by including a JavaScript
    library found at [https://github.com/scottjehl/iOS-Orientationchange-Fix](https://github.com/scottjehl/iOS-Orientationchange-Fix).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we view our application in a mobile device, we can see something like the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using media queries as conditionals in our main CSS](img/5689_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now have a set of different views in multiple evices and resolutions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using media queries as conditionals in our main CSS](img/5689_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One by-product of using media queries in this way is that if you resize your
    browser window you will see the different views. An alternative is to detect the
    device using JavaScript and import different CSS and JavaScript files depending
    on each case. This can be cumbersome. However, you will have to deterministically
    account for all the variations.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive web design is a good adaptive web design approach, where the behavior
    of the application is dictated by the capabilities of the device.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered the main structure and basic styles for our application as well as
    metadata and microdata. We introduced the usage of icons and common CSS techniques
    such as sticky footers. Finally, responsive and adaptive web design concepts were
    covered using real-world implementations that can be applied to any enterprise
    application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will introduce the use of HTML5 geolocation capabilities,
    AJAX calls, and API usage.
  prefs: []
  type: TYPE_NORMAL
