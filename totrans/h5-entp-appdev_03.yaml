- en: 'Chapter 3. The App: Structure and Semantics'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 应用：结构和语义
- en: 'Now that we have walked through some useful tools and key ideas, we can begin
    with our enterprise application case study: MovieNow.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了一些有用的工具和关键思想，我们可以开始我们的企业应用案例研究：MovieNow。
- en: This chapter will cover the main aspects of HTML page structure, applying the
    correct use of HTML5 semantic tags. Also we are going to cover the use of microdata
    and best practices for **Search Engine Optimization** (**SEO**). Finally, we are
    going to introduce the concept of **Responsive Web Design** (**RWD**) as a technique
    to support mobile development discussing the pros and cons therein as well as
    alternatives. By the end of the chapter, we will have an HTML page with basic
    styling but with a layout that can be easily read by any web developer with a
    basic understanding of HTML.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖HTML页面结构的主要方面，应用HTML5语义标签的正确使用。此外，我们还将介绍微数据的使用以及**搜索引擎优化**（**SEO**）的最佳实践。最后，我们将介绍**响应式网页设计**（**RWD**）的概念，作为一种支持移动开发的技巧，讨论其中的优缺点以及替代方案。到本章结束时，我们将拥有一个具有基本样式的HTML页面，但其布局可以很容易地被任何具有基本HTML理解能力的网络开发者阅读。
- en: 'The main topics covered in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主要内容包括：
- en: Understanding page structure
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解页面结构
- en: Metadata
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元数据
- en: Microdata
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微数据
- en: Favicons and icons
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站图标和图标
- en: CSS3 resets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS3重置
- en: Sticky footer
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固定底部
- en: General styling
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通用样式
- en: Responsive web design and adaptive web design
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应式网页设计和自适应网页设计
- en: Understanding page structure
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解页面结构
- en: Since we already gave you an introduction to semantic tags and page elements
    in the *Preface*, we are now going to put that knowledge into practice and go
    deeper into the meaning and use of each tag, while following the natural order
    of construction of our HTML5 enterprise application.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在**前言**中已经向您介绍了语义标签和页面元素，我们现在将把那些知识付诸实践，并深入探讨每个标签的意义和使用，同时遵循我们HTML5企业应用构建的自然顺序。
- en: 'A common layout for web applications is as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用的一个常见布局如下：
- en: '![Understanding page structure](img/5689EN_03_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![理解页面结构](img/5689EN_03_01.jpg)'
- en: 'The core structure of any HTML file includes a `DOCTYPE` declaration, an `html`
    root node, and `body` and `head` tags:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 任何HTML文件的核心结构包括一个`DOCTYPE`声明，一个`html`根节点，以及`body`和`head`标签：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: From this point, we can define the layout in any way we want. Usually, but not
    always, a page will contain a header section specifying the company or product
    logo and some copy, a footer section with copyright information and some links
    to further information such as terms and conditions, a navigation area with links
    to each section, and the content area. Before HTML5, we would typically define
    sections using the `class` attribute or the `id` attribute of generic HTML tags
    such as the `div` and `span` tags. HTML5, however, streamlines this by offering
    predefined tags for such standard sections. We can now use `<header>` to contain
    the main navigation and/or initial content, `<footer>` for copyright information
    and alternative navigation content, `<nav>` for navigation area, and `<section>`
    for other content containers. This allows us to standardize our content from site
    to site.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，我们可以以任何我们想要的方式定义布局。通常，但并非总是，一个页面将包含一个指定公司或产品标志和一些文本的页眉部分，一个包含版权信息和一些链接到更多信息的页脚部分（如条款和条件），一个包含链接到每个部分的导航区域，以及内容区域。在HTML5之前，我们通常会使用`class`属性或通用HTML标签（如`div`和`span`标签）的`id`属性来定义部分。然而，HTML5通过提供预定义标签来简化了这一点，用于这些标准部分。现在，我们可以使用`<header>`来包含主要导航和/或初始内容，使用`<footer>`来包含版权信息和替代导航内容，使用`<nav>`来定义导航区域，以及使用`<section>`来定义其他内容容器。这使我们能够从站点到站点标准化我们的内容。
- en: 'The following is one way we can define the semantics of our page using HTML5
    tags:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们可以使用HTML5标签定义页面语义的一种方法：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: We can have as many `header` and `footer` tags in an HTML page as we want, if
    they are in different containers. It may sound unintuitive, but it makes sense
    when you think of each container as a logical group of related content independent
    of sibling content.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在一个HTML页面中拥有任意数量的`header`和`footer`标签，只要它们位于不同的容器中。这听起来可能不太直观，但当你将每个容器视为一个独立于兄弟内容的相关内容逻辑组时，它就有意义了。
- en: As a general rule, when we have multiple `header` and `footer` tags, they should
    be contained in `body`, `article`, and `section` tags. Although there is no technical
    restriction on where semantic tags are positioned, we should maintain a structure
    that facilitates readability for web developers as well as search engine web crawlers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一般规则，当我们有多个`header`和`footer`标签时，它们应该包含在`body`、`article`和`section`标签中。尽管在语义标签的位置上没有技术限制，但我们应保持一种便于网络开发人员和搜索引擎爬虫阅读的结构。
- en: 'To add the main content, we can put an `article` tag in our `section` tag.
    Inside of it, we can place an `h1` tag for the main heading and a `p` tag for
    each paragraph. The resulting HTML looks as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加主要内容，我们可以在我们的`section`标签中放置一个`article`标签。在其中，我们可以放置一个`h1`标签作为主要标题，以及一个`p`标签作为每个段落。生成的HTML看起来如下：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Navigation list
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航列表
- en: 'Unordered lists are, generally, the accepted way of representing navigation
    on websites since they have a cohesive semantic structure. Therefore, in our main
    `nav` tag, we can use an unordered list, `ul`, with embedded list elements (`li`):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 无序列表通常是表示网站导航的接受方式，因为它们具有一致的语义结构。因此，在我们的主要`nav`标签中，我们可以使用一个嵌入了列表元素（`li`）的无序列表`ul`：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Secondary content
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二级内容
- en: To finalize our main structure, we will need a sidebar that will display the
    top five box office movies. Since this section will be ancillary to the main content,
    we will use the `aside` tag. Inside the `aside` tag, we will place a heading with
    an `h2` tag. We use `h2` rather than `h1` because this represents the next level
    in the overall outline of the page content. To represent the list of movies, numerical
    order is important, which means that the best structure to use is an ordered list.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最终确定我们的主结构，我们需要一个侧边栏，该侧边栏将显示前五部票房电影。由于这个部分将作为主要内容的辅助内容，我们将使用`aside`标签。在`aside`标签内部，我们将放置一个带有`h2`标签的标题。我们使用`h2`而不是`h1`，因为这代表了页面内容整体大纲的下一级。为了表示电影列表，数字顺序很重要，这意味着最好的结构是使用有序列表。
- en: 'The result should look something like the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该看起来像以下代码：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Do not worry about the content just yet. For now, we will use sample data to
    demonstrate the page structure. In later chapters, we will populate this section
    with data from a web service.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不必担心内容。现在，我们将使用示例数据来演示页面结构。在后面的章节中，我们将用来自网络服务的数据填充这个部分。
- en: Metadata
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元数据
- en: Until now we have been building the main structure of the MovieNow application
    with HTML5 semantic tags; however, there is a common misunderstanding about the
    effect of semantic tags in SEO. Use of semantic tags does not necessarily translate
    to higher search engine rankings. Nevertheless, they simplify the analysis of
    the content by web crawlers driving traffic to your application for specific searches
    related to the semantic content. In essence, they make your application more like
    an open book.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用HTML5语义标签构建MovieNow应用程序的主结构；然而，关于语义标签在SEO中效果的一个常见误解是，使用语义标签并不一定意味着更高的搜索引擎排名。尽管如此，它们简化了网络爬虫对内容的分析，这些爬虫会将流量带到你的应用程序，以进行与语义内容相关的特定搜索。本质上，它们使你的应用程序更像一本开放的书。
- en: As a theoretical example, it will be far easier for a web crawler to determine
    the most important content in a specific page if this content is enclosed in an
    `article` tag, than if it is enclosed in a `div` tag that has no semantic meaning.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 作为理论上的例子，如果内容被包含在一个具有语义意义的`article`标签中，那么网络爬虫将更容易确定特定页面中最重要内容，而不是被包含在一个没有语义意义的`div`标签中。
- en: In order to provide search engine data to connect page content to the search
    queries that will inevitably bring people to your website or application, meta
    tags are a perfect solution. Meta tags store information about the web page—known
    as *metadata*—that is not necessarily visible to end users (unless you reveal
    the page source code). We can specify as many meta tags as we want. Search engine
    web crawlers often look to these meta tags for further information about the page
    content that cannot be ascertained by the display content itself.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供搜索引擎数据，将页面内容与将不可避免地带来人们访问你的网站或应用程序的搜索查询相连接，元标签是一个完美的解决方案。元标签存储有关网页的信息——称为*元数据*——这些信息对最终用户来说不一定可见（除非你揭示了页面源代码）。我们可以指定尽可能多的元标签。搜索引擎的网络爬虫通常会查看这些元标签以获取有关页面内容的更多信息，这些信息无法通过显示内容本身确定。
- en: 'Meta tags are contained in the `head` tag with the type of content defined
    by the property `name` and the content by the attribute `content`. The following
    are some of the most common meta tags:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Meta 标签包含在`head`标签中，其内容类型由属性`name`定义，内容由属性`content`定义。以下是一些最常见的元标签：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Usually search engine results will display links where the main link text comes
    from the `title` tag and the description that appears underneath the `meta` tag
    with `name="description"`. As an example, when we search for the word "movies",
    we will find [fandango.com](http://fandango.com) listed in the search results:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，搜索引擎结果将显示来自`title`标签的主要链接文本和出现在`meta`标签下方的描述，该标签具有`name="description"`属性。例如，当我们搜索“电影”这个词时，我们将在搜索结果中找到[fandango.com](http://fandango.com)：
- en: '![Metadata](img/5689_03_02.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![元数据](img/5689_03_02.jpg)'
- en: 'If we inspect the code on [fandango.com](http://fandango.com) by viewing the
    source, we can see the following in the `head` tag:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们通过查看源代码来检查[fandango.com](http://fandango.com)上的代码，我们可以在`head`标签中看到以下内容：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can even define your own meta tags if you want. Search engines may overlook
    them as they may not be aware of them, but they may prove themselves useful for
    providing specific data to other developers or other applications you may want
    to write.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以定义自己的元标签。搜索引擎可能会忽略它们，因为它们可能不知道它们，但它们可能对提供特定数据给其他开发者或您可能想要编写的其他应用程序非常有用。
- en: Note
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Google does not take the `keywords` meta tag into consideration, according to
    [http://googlewebmastercentral.blogspot.com/2009/09/google-does-not-use-keywords-meta-tag.html](http://googlewebmastercentral.blogspot.com/2009/09/google-does-not-use-keywords-meta-tag.html);
    instead it uses `description` and others in conjunction with a series of specific
    Google search engine meta tags. SEO experts advise placing keywords in the `title`
    tag, the URL, and in the `H1` tag.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 根据http://googlewebmastercentral.blogspot.com/2009/09/google-does-not-use-keywords-meta-tag.html，谷歌不将`keywords`元标签考虑在内；相反，它使用`description`和其他标签，结合一系列特定的谷歌搜索引擎元标签。SEO专家建议将关键词放在`title`标签、URL和`H1`标签中。
- en: Meta tags also provide additional functionality by allowing the web developer
    to inform the web browser about certain characteristics of the web page.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Meta 标签还通过允许网页开发者向网页浏览器告知网页的某些特性，提供额外的功能。
- en: 'To prevent the page from being automatically translated to the client language,
    you can specify the following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要防止页面自动翻译成客户端语言，您可以指定以下代码：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To direct the behavior of Google web crawlers (known as Googlebots), specify
    the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要指导谷歌网络爬虫（也称为Googlebots）的行为，指定以下代码：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To tell search engine web crawlers whether to inspect the content of a page
    or not, specify the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要告诉搜索引擎爬虫是否检查页面的内容，指定以下代码：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With the `robots` meta tag, you can include any or all of the following list
    separated by commas:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`robots`元标签，您可以包含以下列表中的任何或所有内容，用逗号分隔：
- en: '**noindex**: This prevents the page from being indexed altogether'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**noindex**: 这将完全防止页面被索引'
- en: '**nofollow**: This prevents search engines from following links inside the
    page'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**nofollow**: 这可以防止搜索引擎跟踪页面内的链接'
- en: '**noarchive**: This prevents search engines from showing a cached link for
    the page'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**noarchive**: 这可以防止搜索引擎显示页面的缓存链接'
- en: 'For example, the following meta tag suggests to search engines that they should
    not index the page and follow links on the page for further indexing:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下元标签建议搜索引擎不要索引页面，并跟踪页面上的链接以进行进一步索引：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Depending upon each search engine implementation, the suggestions declared on
    meta tags can be ignored.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 根据每个搜索引擎的实现，元标签上声明的建议可能会被忽略。
- en: If your enterprise application is mentioned on Twitter, you can add new meta
    tags that will be interpreted by Twitter when someone tweets (posts) a link to
    your page for display on Twitter streams.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的企业应用在Twitter上被提及，您可以为Twitter添加新的元标签，这些标签将在有人通过Twitter分享（发布）指向您页面的链接时被Twitter解释以在Twitter流中显示。
- en: 'To include a title, description, and a thumbnail image for your page when referenced
    by a tweet, you can add the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要在通过推文引用您的页面时包含标题、描述和缩略图图像，您可以添加以下代码：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For the Twitter account associated with the website, you can add the following
    code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于与网站关联的Twitter账户，您可以添加以下代码：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'These meta tags define for Twitter certain data that it can use to express
    more about your web page it mentions. For more information about meta tags, see
    the following page:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些元标签为Twitter定义了某些数据，Twitter可以使用这些数据来更详细地表达它提到的网页。有关元标签的更多信息，请参阅以下页面：
- en: '[https://dev.twitter.com/docs/cards](https://dev.twitter.com/docs/cards)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.twitter.com/docs/cards](https://dev.twitter.com/docs/cards)'
- en: 'Facebook also has meta tags it defines for expressing metadata about links
    to web resources. For more information about Facebook''s meta tags, see the following
    page:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook也有它定义的元标签，用于表达关于网页资源的链接的元数据。有关Facebook元标签的更多信息，请参阅以下页面：
- en: '[http://developers.facebook.com/docs/opengraphprotocol/](http://developers.facebook.com/docs/opengraphprotocol/)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://developers.facebook.com/docs/opengraphprotocol/](http://developers.facebook.com/docs/opengraphprotocol/)'
- en: Microdata
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微数据
- en: We have the ability to define metadata at the page level but what about metadata
    on specific elements on the page? **Microdata** provides us with the answer. Microdata
    is an HTML specification used to add more information to HTML tags.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在页面级别定义元数据，但页面上的特定元素上的元数据怎么办？**微数据**为我们提供了答案。微数据是用于向HTML标签添加更多信息的HTML规范。
- en: Tip
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: An interesting read to understand how Google manages metadata and microdata
    can be found at [http://support.google.com/webmasters/bin/answer.py?hl=en&answer=99170](http://support.google.com/webmasters/bin/answer.py?hl=en&answer=99170).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一篇有趣的阅读材料，可以了解谷歌如何管理元数据和微数据，可以在[http://support.google.com/webmasters/bin/answer.py?hl=en&answer=99170](http://support.google.com/webmasters/bin/answer.py?hl=en&answer=99170)找到。
- en: 'We previously defined HTML5 syntax for a list of movies. Now we can specify
    the meaning of each tag that defines a movie. First, we need to identify the item
    or container using the `itemscope` attribute:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前定义了HTML5语法用于电影列表。现在我们可以指定定义电影的每个标签的含义。首先，我们需要使用`itemscope`属性来识别项目或容器：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we can specify the type of content using the `itemprop` attribute and the
    word that defines the type of content, in this case `name` and `genre`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用`itemprop`属性和定义内容类型的单词来指定内容类型，在这个例子中是`name`和`genre`：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here we need to rely on the importance of standards; while you can define microdata
    in the way you prefer, the goal is to create a unified way to define the data
    in a way any web crawler or reader implementation can read it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要依赖标准的重要性；虽然您可以按您喜欢的任何方式定义微数据，但目标是创建一种统一的方式来定义数据，以便任何网络爬虫或读取器实现都可以读取它。
- en: 'Suppose that we decide to define MovieNow''s microdata in a way that it can
    be easily analyzed. We would need to share a common schema with other applications.
    A possible solution to this is [schema.org](http://schema.org):'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们决定以易于分析的方式定义MovieNow的微数据。我们需要与其他应用程序共享一个共同的模式。一个可能的解决方案是[schema.org](http://schema.org)：
- en: Schema.org provides a collection of schemas, i.e., html tags, that webmasters
    can use to markup their pages in ways recognized by major search providers. Search
    engines including Bing, Google, Yahoo! and Yandex rely on this markup to improve
    the display of search results, making it easier for people to find the right web
    pages.
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Schema.org提供了一系列的方案，即html标签，网站管理员可以使用这些标签来标记他们的页面，以便主要搜索引擎识别。包括Bing、Google、Yahoo!和Yandex在内的搜索引擎依赖于这种标记来改善搜索结果的显示，使人们更容易找到正确的网页。
- en: 'Using this site, we need to only search for the kind of data needed. Searching
    for `movie`, we get a page with a movie schema: [http://schema.org/Movie](http://schema.org/Movie).'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此网站，我们只需要搜索所需的数据类型。搜索`movie`，我们得到一个包含电影模式的页面：[http://schema.org/Movie](http://schema.org/Movie)。
- en: '![Microdata](img/5689_03_03.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![微数据](img/5689_03_03.jpg)'
- en: 'As you can see the list includes **name** and **genre** attributes, so we only
    need to add the schema to our container tag using the `itemtype` attribute:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，列表中包括**name**和**genre**属性，因此我们只需要使用`itemtype`属性将模式添加到我们的容器标签中：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Any system that uses this schema will recognize our items as movies as well
    as the corresponding names and genres.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 任何使用此模式的系统都将识别我们的项目为电影以及相应的名称和类型。
- en: Tip
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Google provides an online tool to test site microdata. This is available at
    [http://www.google.com/webmasters/tools/richsnippets](http://www.google.com/webmasters/tools/richsnippets).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Google提供了一个在线工具来测试网站的微数据。这个工具可以在[http://www.google.com/webmasters/tools/richsnippets](http://www.google.com/webmasters/tools/richsnippets)找到。
- en: Favicons and icons
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Favicon和图标
- en: Now let us talk about some uses of the descriptive attribute `link`. As we develop
    our application, we will need to have icons to represent our product. Such icons
    can be shown not only inside our HTML, but also in browser tabs, bookmark lists,
    and home screen icons in the case of iOS, and some Android devices.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All images required are located in the `img` folder in our sample files.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: A favicon, or favorite icon, is an image used by the browser to identify a website
    or web application. Usually, favicons are 16 x 16 pixels and formatted as a `.png`,
    `.gif` (including animated GIFs), or `.ico` – the last one being the most supported
    file format.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ico` file format was introduced by Microsoft Windows to contain one or
    more images at multiple sizes and color depths, so they can be scaled appropriately
    depending of the application requirements. Other non-Microsoft browsers adopted
    this format later to maintain compatibility.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a favicon, we can use any graphic editor program in the market such
    as Adobe Photoshop or Fireworks. Other possible solutions are the web tools such
    as **favicon.cc** ([http://www.favicon.cc/](http://www.favicon.cc/)). Favicon.cc
    allows you to upload an image and edit it using a pixel tool; this is shown in
    the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '![Favicons and icons](img/5689_03_04.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: Although it is a great tool, there are downsides which include the lack of layers
    and undo/redo functionality.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When possible, try to export your favicon as an `ico` format, unless you want
    to use an animated GIF. Be aware that `ico` is a file format itself, so you need
    to use an image editor and export to the `ico` format. Simply renaming it with
    the `ico` extension will not work.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'To make your application aware of your favicon, specify the name, location,
    and/or the format in a `link` tag inside your `head` tag as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Notice the use of the attribute `rel` to identify the relationship of the image
    with the web page, as well as the use of the attribute `href` to indicate image
    location, and `type` to specify the MIME type of the image. As a result you will
    see an image in the browser tab, address bar, and the favorites/bookmarks lists.
    In case of Firefox on Mac, you will see something like the following screenshot:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![Favicons and icons](img/5689_03_05.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, if there is no `link` tag with `rel="shortcut icon"`, web browsers
    will look for your favicon in the server root directory as a file named `favicon.ico`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Since Version 1.1.3, iOS devices allow you to add a home screen icon as a shortcut
    for a mobile website or application. To add an icon for our enterprise application,
    we need to take into consideration the fact that there are multiple sizes depending
    on the device. For iPhones/iPods prior to Retina display technology, icons should
    be 57 x 57 px while iPhones/iPods with Retina display technology should have icons
    that are 114 x 114 px. For iPads prior to Retina display, icons should be 72 x
    72 px, and with Retina display they should be 144 x 144 px.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we can see the difference between a regular display (left) and a Retina
    display (right):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '![Favicons and icons](img/5689_03_06.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: If there is no specification about the icons in the head, iOS devices will attempt
    to find an icon. Otherwise, the icon will be a section of a print screen of the
    application.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you have an iPod without Retina display, it will try to find
    an icon in the root directory with a filename by going down the following list:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '`apple-touch-icon-57x57-precomposed.png`.'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`apple-touch-icon-57x57.png`.'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`apple-touch-icon-precomposed.png`.'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`apple-touch-icon.png`.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generates an icon taking a print screen and using a section of it.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retina display devices can use the same size images as non-Retina display devices,
    but the quality will be much poorer and, in some cases, you will notice some pixelation.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'In our enterprise application, we are going to specify icons for each case
    using the `link` tag inside our `head` tag. The way to declare iOS icons in a
    link is to use `apple-touch-icon` in the `rel` attribute, the icon path in the
    `href` attribute, and finally the size in the `sizes` attribute:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Considering all devices, we should have something that looks like the following
    code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: By default, iOS adds rounded corners and reflective shine effects to icons,
    but we can remove the reflective shine using `apple-touch-icon-precomposed` instead
    of `apple-touch-icon` as a `rel` value.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![Favicons and icons](img/5689_03_07.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: The previous image shows the difference between our original image, the default
    reflective shine effect icon, and the icon without the reflective shine effect.
    In our example files, we use a non-reflective version because we want to show
    the original image in more detail. Nevertheless, this often boils down to a mere
    design detail.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 resets
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our overall page structure, we are ready to start adding some
    styles to our enterprise application. A good practice before jumping into styling
    with CSS is resetting default styles to work with the same initial conditions
    in all browsers. If you already know how to declare CSS reset styles, you can
    skip this section and continue to the *Responsive web design and adaptive web
    design* section.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: A CSS reset defines an initial set of styles to remove or standardize across
    browsers' default values of some properties such as margins, paddings, and so
    on. There are several versions of CSS resets; the most common ones are the **Yahoo
    User Interface** (**YUI**) CSS Reset ([http://developer.yahoo.com/yui/reset/](http://developer.yahoo.com/yui/reset/)),
    the HTML5 Doctor Reset ([http://html5doctor.com/html-5-reset-stylesheet/](http://html5doctor.com/html-5-reset-stylesheet/)),
    Nicolas Gallagher's normalize.css ([http://necolas.github.com/normalize.css/](http://necolas.github.com/normalize.css/)),
    and Eric Mayer's Reset ([http://meyerweb.com/eric/thoughts/2011/01/03/reset-revisited/](http://meyerweb.com/eric/thoughts/2011/01/03/reset-revisited/)).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: We are going to take styles from Eric Mayer's Reset and YUI's Reset to build
    our own. First, we will need to create a CSS file. Name it `styles.css` and save
    it in a folder called `css` under the root of the application.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'To be recognized and applied by the HTML file, we have to import the file using
    a `link` tag with the attribute `rel="stylesheet"`, `type="text/css"`, and `href`
    pointing to our CSS file:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We are going to import `modernizr` too, adding HTML5 tags support for older
    browsers and browser capabilities detection. The `head` tag should look as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In `styles.css`, we are going to start resetting spaces and font styles. Basic
    spacing involves `margin` and `padding` properties as you can see in the diagram:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS3 resets](img/5689EN_03_08.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: For these properties (and for the `border` property), we can set styles in several
    ways.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Individual sides
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can set the top, right, bottom, and left `margin` to `0` like so:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As we are using `0` as a value, we do not need to specify the unit (% or px).
    You can apply the same to the padding and border.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Shorthand
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A best practice is to declare `margin` properties in one block. This is known
    as **shorthand**. The shorthand syntax for `margin` and `padding` starts from
    the `top` property and is followed by the others in a clockwise manner:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can specify only two values:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This is the same as:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Or only 1 value:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This is equal to:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We need to reset `outline` and `border` too, so putting it all together we
    should have the following:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Tip
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The shorthand for border can include color and style too. For example, `border:5px
    solid blue;`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we will need to keep the treatment of text standard across browsers.
    One fix to avoid exaggerated resizes of text in Internet Explorer is `font-size:100%;`.
    To force font inheritance from parent elements, we can use the shorthand `font:inherit`.
    However, to avoid problems with Internet Explorer 6 and 7, we must use the CSS
    properties `font-weight`, `font-style`, and `font-family`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: To set the vertical alignment using baselines of elements with their parents,
    we declare `vertical-align:baseline`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'So far we have the following as our reset:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: By default, tables have a separation between cells. To avoid this, we can reset
    the `table` styles using `border-collapse:collapse` and `border-spacing:0`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，表格单元格之间有分隔。为了避免这种情况，我们可以使用 `border-collapse:collapse` 和 `border-spacing:0`
    重置 `table` 样式。
- en: '![Shorthand](img/5689EN_03_09.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![缩写](img/5689EN_03_09.jpg)'
- en: 'The reset style should look as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 重置样式应如下所示：
- en: '[PRE29]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We will need to clear the `font` styles and weight because in certain browsers
    some tags apply special styles such as bold and italic:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要清除 `font` 样式和权重，因为在某些浏览器中，一些标签会应用特殊的样式，例如粗体和斜体：
- en: '[PRE30]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To remove markers from ordered (`ol`) and unordered (`ul`) lists, we can set
    the `list-style` property to `none`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从有序（`ol`）和无序列表（`ul`）中移除标记，我们可以将 `list-style` 属性设置为 `none`：
- en: '[PRE31]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To set the main HTML5 tags as block boxes and avoid inconsistences across browsers:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将主 HTML5 标签设置为块级框并避免浏览器之间的不一致：
- en: '[PRE32]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To remove quotes from tags, for long quotation (`blockquote`) and short quotation
    (`q`):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要从标签中移除引号，对于长引用（`blockquote`）和短引用（`q`）：
- en: '[PRE33]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'To assure that quotes really disappear across all browsers:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保引号在所有浏览器中都能真正消失：
- en: '[PRE34]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Remember that `outline` is used when the element is on focus, so we need to
    redefine or nullify it using `0` with the `:focus` selector. In this case, we
    redefine a dotted gray line of 1 pixel:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，`outline` 在元素获得焦点时使用，因此我们需要使用 `:focus` 选择器重新定义或取消它，使用 `0`。在这种情况下，我们重新定义了一条1像素的虚线灰色线：
- en: '[PRE35]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Looks like a lot of code for a simple reset, but most of it is a result of inconsistencies
    across browser implementations. Resets provide a level playing field on which
    we can build our application.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来这是一个简单的重置需要很多代码，但其中大部分是浏览器实现不一致的结果。重置提供了一个公平的竞技场，我们可以在此基础上构建我们的应用程序。
- en: Sticky footer
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 粘性页脚
- en: CSS sticky footer layout allows you to maintain our footer at the bottom of
    the page even if there is not enough content to push it down. If the content exceeds
    the height of the page, our footer will move to the end of the scroll.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: CSS粘性页脚布局允许即使在没有足够内容将其推下时，也能将页脚保持在页面底部。如果内容超过了页面高度，我们的页脚将移动到滚动末尾。
- en: 'At this point our enterprise application should look like the following screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的企业应用程序应如下截图所示：
- en: '![Sticky footer](img/5689_03_10.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![粘性页脚](img/5689_03_10.jpg)'
- en: 'We would like our footer to stick to the bottom of the page. To achieve this,
    there are several implementations. We are going to follow one of the most common
    implementations that consists of two containers and a `.push` element that reserves
    the space for our `footer`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望页脚固定在页面底部。为了实现这一点，有几种实现方式。我们将遵循最常见的一种实现方式，它包括两个容器和一个为我们的 `footer` 预留空间的
    `.push` 元素：
- en: '![Sticky footer](img/5689EN_03_11.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![粘性页脚](img/5689EN_03_11.jpg)'
- en: 'To begin, we will add some tags to our current structure: a `section` tag with
    the class `wrapper` to separate all our tags from the footer, a `div` tag with
    the class `main` to contain page tags at the same level, and finally a `div` tag
    with the class `push`, to create space inside the wrapper section, allowing `footer`
    to be over the `wrapper` class:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将向当前结构添加一些标签：一个带有 `wrapper` 类的 `section` 标签，以将所有标签与页脚分开，一个带有 `main` 类的
    `div` 标签，以包含同一级别的页面标签，最后是一个带有 `push` 类的 `div` 标签，在包装部分内部创建空间，允许 `footer` 在 `wrapper`
    类之上：
- en: '[PRE36]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now we style our structure.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来设置我们的结构样式。
- en: We need to expand the height of `html`, `body`, and `.wrapper`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要扩展 `html`、`body` 和 `.wrapper` 的高度。
- en: '[PRE37]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We then need to add `height:auto` and `min-height` for compatibility reasons
    and `overflow:hidden` to expand the `.wrapper` container when the content inside
    (that can be floated) grows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要为了兼容性原因添加 `height:auto` 和 `min-height`，以及 `overflow:hidden` 以在内容内部（可以浮动）增长时扩展
    `.wrapper` 容器：
- en: '[PRE38]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We can apply overflow to `.main` to expand too:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将 `overflow` 应用于 `.main` 以扩展它：
- en: '[PRE39]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Tip
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'The `overflow:hidden` technique to enclose content should be used with caution.
    Its biggest downside is that it hides the absolute positioned content that is
    outside of the box. An alternative is Clearfix. In our case, we will then not
    need `overflow:hidden` in `.main` and `body > .wrapper`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 应谨慎使用 `overflow:hidden` 技术来包围内容。它的最大缺点是隐藏了绝对定位且位于框外的绝对定位内容。一个替代方案是 Clearfix。在这种情况下，我们就不需要在
    `.main` 和 `body > .wrapper` 中使用 `overflow:hidden`：
- en: '[PRE40]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We can then assign the same height to `footer` and `.push`. Both will align
    and we can use `clear` in case we need to add a floating element:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以将相同的高度分配给 `footer` 和 `.push`。两者将对齐，并且如果需要添加浮动元素，我们可以使用 `clear`：
- en: '[PRE41]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'As a final step, we assign a negative `margin` value with the same value as
    `height` to our `footer` tag and `position:relative` for compatibility reasons:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: General styling
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With our sticky footer, we can continue with some basic styling. We can set
    the overall font family:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Note
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a debate about the performance implications of the universal selector
    `*`. While some authors discourage its use, others say CSS selectors are irrelevant
    in terms of web performance.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'To position our top five box office to the right and set its `width` property:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Let us add a background color to our main navigation menu:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Tip
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that we are using the shorthand version of hexadecimal colors.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'As a decoration, we can add a background image to `header`. By default, it
    will tile the image unless we specify `no-repeat` to our `background` property.
    We can then set `color` and `height` too:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We can define the color of our `footer`, as well as color of `font`, `font-size`,
    `line-height` (to center the text vertically) and `text-align` to center text
    horizontally:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Set our `wrapper` background color:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We can define a fixed `width` for our content and we use `auto` for side margins
    to center our container tags:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We add a `div` tag into our `header` tag to contain the application name and
    logo:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We define `width`, `height`, and our logo image using the `text-indent` property
    to hide text content inside `div`:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Using `-9999px` in `text-indent` displaces our text to the left out of the visible
    area.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For accessibility and SEO considerations, it is a good practice to maintain
    application name as text. Other techniques can be seen at [http://css-tricks.com/css-image-replacement/](http://css-tricks.com/css-image-replacement/).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the color of the columns at each side:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Define wrapper padding:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We then remove link underlines and assign white color to all links inside our
    navigation bar:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Add an underline on hover:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Change the font size of headings:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Add color to our top five list:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Note
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Content properties allow you to define and increment a variable:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '`counter-reset:variable;` resets `variable` to 1'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`counter-increment:variable;` increments 1 to `variable`'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content:counter(variable);` shows the value of `variable` inside the tag'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can add `padding` and a `counter` variable to set the number for each movie
    on our top five:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We can use our counter `content:counter(counter)`, reset it using `counter-reset:counter;`,
    and increment it using `counter-increment:counter`. We can then add some spacing
    and set the font color:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Tip
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Counter properties are not supported in Internet Explorer 7\. Internet Explorer
    8 only supports them if `!DOCTYPE` is specified.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'You can assign the default management of ordered lists for IE7 and previous
    versions including a conditional CSS import:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Where `ie7.css` contains:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Add more spacing, set the font size, and add a decorative dashed border:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Set a different color for movie genres:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Finally, add `color` to movie titles:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Our application is now structured and looks like the following screenshot:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序现在结构化，看起来如下截图所示：
- en: '![General styling](img/5689_03_12.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![通用样式](img/5689_03_12.jpg)'
- en: Responsive web design and adaptive web design
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式网页设计和适应性网页设计
- en: Our application is taking form, but with so many devices and screen resolutions
    how can we support all of them?
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用正在成形，但是面对如此多的设备和屏幕分辨率，我们如何支持所有这些设备呢？
- en: Responsive web design is a fairly modern answer to this question. Responsive
    web design results from applying fluid grids and media queries to adapt the layout
    to the viewing environment. [http://mediaqueri.es/](http://mediaqueri.es/) is
    an illustrative guide about how to apply responsive web design in real world cases.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式网页设计是对这个问题的相当现代的回答。响应式网页设计是通过应用流体网格和媒体查询来适应观看环境而产生的。[http://mediaqueri.es/](http://mediaqueri.es/)
    是一个关于如何在现实世界案例中应用响应式网页设计的说明性指南。
- en: Using responsive web design, we can tackle many issues related to the diversity
    of environments.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 使用响应式网页设计，我们可以解决与环境多样性相关的大量问题。
- en: 'For example, consider the following ways in which we can tackle issues that
    may arise:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下我们可以解决可能出现的问题的方法：
- en: Controlling the size of the site when it is accessed on mobile devices
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制在移动设备上访问网站时网站的大小
- en: Serving high-resolution images for retina display devices
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为视网膜显示屏设备提供高分辨率图像
- en: Changing user experience according to the device used
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据使用的设备改变用户体验
- en: In responsive web design, media queries detect conditions such as screen resolution
    and based on that we can apply different styles.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在响应式网页设计中，媒体查询检测屏幕分辨率等条件，基于这些条件我们可以应用不同的样式。
- en: A media query is formed specifying a media type (`screen`, `print`, and so on)
    and a series of features (`max-width`, `min-width`, `min-device-pixel-ratio`,
    and so on).
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询由指定媒体类型（`screen`、`print` 等）和一系列特性（`max-width`、`min-width`、`min-device-pixel-ratio`
    等）组成。
- en: 'For example:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE65]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Tip
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: For a more detailed explanation of the syntax, you can go to [http://www.w3.org/TR/css3-mediaqueries/](http://www.w3.org/TR/css3-mediaqueries/).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 对于语法的更详细解释，您可以访问 [http://www.w3.org/TR/css3-mediaqueries/](http://www.w3.org/TR/css3-mediaqueries/)。
- en: 'The following are the three ways to use media queries:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是三种使用媒体查询的方法：
- en: Importing CSS files using media queries
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用媒体查询导入 CSS 文件
- en: 'It is possible to specify which CSS file to import using media queries and
    the `link` tag in the `head` tag. In the following example, we load `iphone4.css`
    when retina display is detected and the device screen width is less than or equal
    to 480 px:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用媒体查询和 `head` 标签中的 `link` 标签来指定要导入的 CSS 文件。在以下示例中，当检测到视网膜显示屏并且设备屏幕宽度小于或等于
    480 px 时，我们加载 `iphone4.css`：
- en: '[PRE66]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Importing other CSS from our main CSS
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用媒体查询从我们的主 CSS 中导入其他 CSS
- en: 'We can import CSS files inside other CSS using `@import`. Here we can load
    `iphone4.css` when retina display is detected and the device screen `width` is
    less than or equal to 480 px:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `@import` 在其他 CSS 文件中导入 CSS 文件。在这里，当检测到视网膜显示屏并且设备屏幕 `width` 小于或等于 480
    px 时，我们可以加载 `iphone4.css`：
- en: '[PRE67]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Using media queries as conditionals in our main CSS
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在我们的主 CSS 中将媒体查询作为条件使用
- en: This is the most used technique and consists of media queries as conditionals
    inside our CSS. We are going to use this technique for our application, so let
    us define some media queries.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用最广泛的技术，它由 CSS 中的媒体查询作为条件组成。我们将使用这项技术为我们的应用程序定义一些媒体查询。
- en: 'First, we define special styles for `width` between 738 px and 1024 px. This
    is applicable to many tablets in the market today. Here we are going to remove
    spaces and use the complete width of the device setting `width` for `wrapper`
    and `footer` to `100%`:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们为 `width` 在 738 px 和 1024 px 之间的设备定义特殊样式。这适用于今天市场上许多平板电脑。在这里，我们将移除空格并使用设备的完整宽度，将
    `width` 设置为 `wrapper` 和 `footer` 的 `100%`：
- en: '[PRE68]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Defining a case for devices less than 737 px width:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 定义小于 737 px 宽度的设备案例：
- en: '[PRE69]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'We can add a special case for devices with a pixel ratio superior to 2, which
    is the case with Apple Retina display devices. In the style, we use a high definition
    version of our logo:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为像素比超过 2 的设备添加一个特殊案例，这是苹果视网膜显示屏设备的情况。在样式表中，我们使用我们标志的高清版本：
- en: '[PRE70]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Tip
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'While this technique doesn''t download our logo image twice if the Retina display
    image is required in a Safari mobile, we need to consider that for other cases.
    It is better to define a media query for each case and not rely on cascade override,
    so we can avoid multiple loads of the same asset. You can see other techniques
    at the following link:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种技术不会在需要Retina显示图像的Safari移动设备上下载我们的标志图像两次，但我们需要考虑其他情况。最好为每种情况定义一个媒体查询，而不是依赖于级联覆盖，这样我们可以避免加载相同的资产多次。您可以在以下链接中看到其他技术：
- en: '[http://timkadlec.com/2012/04/media-query-asset-downloading-results/](http://timkadlec.com/2012/04/media-query-asset-downloading-results/)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://timkadlec.com/2012/04/media-query-asset-downloading-results/](http://timkadlec.com/2012/04/media-query-asset-downloading-results/)'
- en: 'We can add cases for iPhone and iPad Retina display as well by defining some
    additional styles:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过定义一些额外的样式来为iPhone和iPad Retina显示添加情况：
- en: '[PRE71]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'In iOS devices, scale starts with values superior to 100%. For that reason,
    we need to add a line in our `head` tag to set the initial scale to 100%:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS设备中，缩放值从100%以上的值开始。因此，我们需要在我们的`head`标签中添加一行来设置初始缩放为100%：
- en: '[PRE72]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Tip
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Sadly, there is a scaling bug when you change between landscape and portrait
    orientations. Thanks to Scott Jehl, we can solve this problem by including a JavaScript
    library found at [https://github.com/scottjehl/iOS-Orientationchange-Fix](https://github.com/scottjehl/iOS-Orientationchange-Fix).
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾，在切换横屏和竖屏方向时，存在一个缩放错误。多亏了Scott Jehl，我们可以通过包含一个位于[https://github.com/scottjehl/iOS-Orientationchange-Fix](https://github.com/scottjehl/iOS-Orientationchange-Fix)的JavaScript库来解决此问题。
- en: 'If we view our application in a mobile device, we can see something like the
    following screenshot:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在移动设备上查看我们的应用程序，我们可以看到以下截图：
- en: '![Using media queries as conditionals in our main CSS](img/5689_03_13.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![在我们的主要CSS中使用媒体查询作为条件](img/5689_03_13.jpg)'
- en: 'We can now have a set of different views in multiple evices and resolutions:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以在多个设备和分辨率上拥有不同的视图：
- en: '![Using media queries as conditionals in our main CSS](img/5689_03_14.jpg)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![在我们的主要CSS中使用媒体查询作为条件](img/5689_03_14.jpg)'
- en: One by-product of using media queries in this way is that if you resize your
    browser window you will see the different views. An alternative is to detect the
    device using JavaScript and import different CSS and JavaScript files depending
    on each case. This can be cumbersome. However, you will have to deterministically
    account for all the variations.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 使用媒体查询的这种方式的副作用之一是，如果您调整浏览器窗口的大小，您将看到不同的视图。另一种方法是使用JavaScript检测设备，并根据每种情况导入不同的CSS和JavaScript文件。这可能很麻烦。然而，您必须确定地考虑所有变体。
- en: Responsive web design is a good adaptive web design approach, where the behavior
    of the application is dictated by the capabilities of the device.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式网页设计是一种良好的自适应网页设计方法，其中应用程序的行为由设备的性能决定。
- en: Summary
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We covered the main structure and basic styles for our application as well as
    metadata and microdata. We introduced the usage of icons and common CSS techniques
    such as sticky footers. Finally, responsive and adaptive web design concepts were
    covered using real-world implementations that can be applied to any enterprise
    application.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们涵盖了应用程序的主要结构和基本样式，以及元数据和微数据。我们介绍了图标的使用和常见的CSS技术，如固定页脚。最后，我们通过实际应用，涵盖了响应式和自适应网页设计概念，这些应用可以适用于任何企业应用程序。
- en: In the next chapter, we will introduce the use of HTML5 geolocation capabilities,
    AJAX calls, and API usage.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍HTML5地理位置功能、AJAX调用和API使用的应用。
