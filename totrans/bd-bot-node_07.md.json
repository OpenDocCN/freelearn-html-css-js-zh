["```js\nmkdir whosoffchatbot\ncd whosoffchatbot\n\n```", "```js\nvar http = require('http'); \n\nhttp.createServer(function (req, res) { \n\n    res.writeHead(200, { 'Content-Type': 'text/html' }); \n    res.end('Hello, world!'); \n\n}).listen(process.env.PORT || 8080); \n\n```", "```js\nnpm install express body-parser request --save\n\n```", "```js\nvar express = require('express'); \nvar bodyParser = require('body-parser'); \nvar request = require('request'); \nvar app = express(); \n\napp.use(bodyParser.urlencoded({extended: false})); \napp.use(bodyParser.json()); \n\napp.get('/', function (req, res) { \n    res.send('This is my Facebook Messenger Bot - Whos Off Bot Server'); \n}); \n\napp.get('/webhook', function (req, res) { \n    if (req.query['hub.verify_token'] === 'whosoffbot_verify_token') {       \n        res.status(200).send(req.query['hub.challenge']); \n    } else { \n        res.status(403).send('Invalid verify token'); \n    } \n}); \n\napp.listen((process.env.PORT || 8080)); \n\n```", "```js\ngit add .\ngit commit -m \"First Change to server.js\"\ngit push origin master\n\n```", "```js\nif (req.query['hub.verify_token'] === 'whosoffbot_verify_token') { \n\n```", "```js\napp.post('/webhook', function (req, res) { \n   var events = req.body.entry[0].messaging; \n    for (i = 0; i < events.length; i++) { \n        var event = events[i]; \n        if (event.message && event.message.text) { \n            sendMessage(event.sender.id, {text: \"Echo: \" + event.message.text}); \n        } \n    } \n    res.sendStatus(200); \n}); \nfunction sendMessage(recipientId, message) { \n    request({ \n        url: 'https://graph.facebook.com/v2.6/me/messages', \n        qs: {access_token: <PAGE_ACCESS_TOKEN>}, \n        method: 'POST', \n        json: { \n            recipient: {id: recipientId}, \n            message: message, \n        } \n    }, function(error, response, body) { \n        if (error) { \n            console.log('Error sending message: ', error); \n        } else if (response.body.error) { \n            console.log('Error: ', response.body.error); \n        } \n    }); \n}; \n\n```", "```js\napp.use(bodyParser.json()); \napp.use(bodyParser.urlencoded({extended: false})); \n\n```", "```js\nvar express = require('express'); \nvar bodyParser = require('body-parser'); \nvar request = require('request'); \nvar app = express(); \n\napp.use(bodyParser.json()); \napp.use(bodyParser.urlencoded({ extended: true })); \n\napp.get('/', function (req, res) { \n    res.send('This is my Facebook Messenger Bot - Whos Off Bot Server'); \n}); \n\n// for facebook verification \napp.get('/webhook', function (req, res) { \n    if (req.query['hub.verify_token'] === 'whosoffbot_verify_token') { \n        res.status(200).send(req.query['hub.challenge']); \n    } else { \n        res.status(403).send('Invalid verify token'); \n    } \n}); \n\napp.post('/webhook', function (req, res) { \n\n    var events = req.body.entry[0].messaging; \n    for (i = 0; i < events.length; i++) { \n        var event = events[i]; \n\n        if (event.message && event.message.text) { \n            if (event.message.text.indexOf('hi') > -1) { \n                sendMessageWithInitialOptions(event.sender.id);                 \n            }  \n        } \n    }    \n    res.sendStatus(200); \n}); \n\nfunction sendMessageWithInitialOptions(recipientId) { \n    messageData = { \n        'attachment': { \n            'type': 'template', \n            'payload': { \n                'template_type': 'button', \n                'text': 'Pl. Select your options', \n                'buttons': [{ \n                    'type': 'postback', \n                    'title': 'Schedule a Meetting', \n                    'payload': 'SCHEDULE A MEETING' \n                }, { \n                    'type': 'postback', \n                    'title': 'Whos Off When', \n                    'payload': 'WHOS OFF WHEN', \n                }, { \n                    'type': 'postback', \n                    'title': 'My Schedule', \n                    'payload': 'MY SCHEDULE' \n                }] \n            } \n        } \n    }; \n    sendMessage(recipientId, messageData); \n}; \n\nfunction sendMessage(recipientId, message) { \n    request({ \n        url: 'https://graph.facebook.com/v2.6/me/messages', \n        qs: { access_token: 'PAGE_ACCESS_TOKEN' }, \n        method: 'POST', \n        json: { \n            recipient: { id: recipientId }, \n            message: message, \n        } \n    }, function (error, response, body) { \n        if (error) { \n            console.log('Error sending message: ', error); \n        } else if (response.body.error) { \n            console.log('Error: ', response.body.error); \n        } \n    }); \n}; \n\napp.listen((process.env.PORT || 8080)); \n\n```", "```js\nif (event.message.text.indexOf('hi') > -1) { \n   sendMessageWithInitialOptions(event.sender.id);                 \n} \n\n```", "```js\nnpm install documentdb -save\n\n```", "```js\n{ \n  \"id\": \"8eeeb00d-5ae8-b01f-4054-cc8c3dda67f2\", \n  \"ownerid\": \"<SenderId>\", \n  \"owner\": \"<Facebook User Name>\", \n  \"startdatetime\": 1479376800, \n  \"enddatetime\": 1479380400, \n  \"title\": \"<Meeting Title>\" \n} \n\n```", "```js\nnpm install guid -save\n\n```", "```js\nnpm install moment -save\n\n```", "```js\nvar moment = require('moment'); \nvar https = require('https'); \n\nfunction isvalidateInput(str) { \n    var pattern = /^\\w+[a-z A-Z_]+?\\@[0-9]{1,2}\\:[0-9]{1,2}\\w[to][0-9]{1,2}:[0-9]{1,2}$/; \n    if (str.match(pattern) == null) { \n        return false; \n    } else { \n        return true; \n    } \n\n}; \nexports.isvalidateInput = isvalidateInput; \n\nfunction getFormattedTime(tsfrom, tsto) { \n    var timeString = moment.unix(tsfrom).format(\"HH:mm\") + ' - ' + moment.unix(tsto).format(\"HH:mm\") \n    return timeString; \n}; \nexports.getFormattedTime =getFormattedTime; \n\nfunction getFormattedDay(tsfrom) { \n    var dateString = moment.unix(tsfrom).format(\"MMM, DD\"); \n    return dateString; \n}; \nexports.getFormattedDay =getFormattedDay; \n\nfunction meeting(id,recipientId,ownername,strstartdatetime,strenddatetime,strtitle){     \n     this.id=id; \n     this.ownerid=recipientId; \n     this.owner=ownername; \n     this.startdatetime=strstartdatetime; \n     this.enddatetime=strenddatetime; \n     this.title=strtitle;              \n}; \nexports.meeting =meeting; \n\nfunction getUserName(uid,callback){ \n    https.get(\"https://graph.facebook.com/v2.6/\" + uid + \"?fields=first_name,last_name&access_token=<PAGE_ACCESS_TOKEN> \", function(res) {   \n        var d = '';   \n        var i;   \n        arr = [];   \n        res.on('data', function(chunk) {   \n            d += chunk;   \n        });   \n        res.on('end', function() {   \n            var e = JSON.parse(d);   \n            callback(e.first_name);            \n        });   \n    });   \n}; \nexports.getUserName =getUserName; \n\n```", "```js\nvar express = require('express'); \nvar bodyParser = require('body-parser'); \nvar request = require('request'); \nvar moment = require('moment'); \nvar Guid = require('guid'); \nvar utils = require('./utils.js'); \n\nvar app = express(); \n\napp.use(bodyParser.json()); \napp.use(bodyParser.urlencoded({ extended: true })); \n\n```", "```js\nvar DocumentClient = require('documentdb').DocumentClient; \nvar host = \"https://botdb.documents.azure.com:443/\"; \nvar masterKey = \"PRIMARY KEY\" \nvar docclient = new DocumentClient(host, { masterKey: masterKey }); \n\n```", "```js\napp.post('/webhook', function (req, res) { \n    var tday; \n    var events = req.body.entry[0].messaging; \n    for (i = 0; i < events.length; i++) { \n        var event = events[i]; \n\n        if (event.message && event.message.text) { \n             if (event.message.text.indexOf('hi') > -1) { \n                sendMessageWithInitialOptions(event.sender.id);                 \n            } \n\n```", "```js\nelse if (event.message.text.indexOf('@') > -1) { \n                if (utils.isvalidateInput(event.message.text)) { \n                    sendMessage(event.sender.id, { 'text': 'Sure! Let me set up your meeting for '+payloadm }); \n                    if (payloadm=='Today'){ \n                        tday = moment().format(\"MM/DD/YYYY\"); \n                    } \n                    else if (payloadm=='Tomorrow'){ \n                        tday = moment().add(1, 'day').format(\"MM/DD/YYYY\"); \n                    } \n                    processMeetingDetails(event.message.text, tday + ' ', event.sender.id); \n                } \n                else { \n                    console.log('Invalid format!'); \n                    sendMessage(event.sender.id, { 'text': 'Pl. input meeting details e.g. Team Meeting@10:00to11:00' }); \n                } \n            } \n\n```", "```js\nelse if (event.postback && event.postback.payload) { \n            payload = event.postback.payload; \n            // Handle a payload from this sender \n            console.log(JSON.stringify(payload));           \n            if (payload == 'SCHEDULE A MEETING') { \n                sendMessageWithScheduleOptions(event.sender.id); \n            } \n            else if (payload == 'SCHEDULETODAY') { \n                payloadm='Today'; \n                sendMessage(event.sender.id, { 'text': 'Pl. provide meeting details e.g. Team Meeting@10:00to11:00' }); \n            } \n            else if (payload == 'SCHEDULETOMORROW') { \n                 payloadm='Tomorrow'; \n                 sendMessage(event.sender.id, { 'text': 'Pl. provide meeting details e.g. Team Meeting@10:00to11:00' }); \n            }             \n            else if (payload=='WHOS OFF WHEN'){                                \n                sendMessageWithAllScheduleOptions(event.sender.id); \n            } \n            else if (payload == 'ALLSCHEDULETODAY') { \n                sendMessage(event.sender.id, 'Meeting(s) Scheduled for Today as..'); \n                var tilltonight = moment().add(1, 'day').startOf('day').unix(); \n                var startnow = moment().unix();                \n                showWhosIsBusyWhen(event.sender.id, startnow, tilltonight);                \n            } \n            else if (payload == 'ALLSCHEDULETOMORROW') { \n                sendMessage(event.sender.id, 'Meeting(s) Scheduled for tomorrow as..'); \n                var tilltomnight = moment().add(2, 'day').startOf('day').unix(); \n                var starttonight = moment().endOf('day').unix();                 \n                showWhosIsBusyWhen(event.sender.id, starttonight, tilltomnight);                 \n            } \n        } \n\n```", "```js\nfunction sendMessageWithInitialOptions(recipientId) { \n    messageData = { \n        'attachment': { \n            'type': 'template', \n            'payload': { \n                'template_type': 'button', \n                'text': 'Pl. Select your options', \n                'buttons': [{ \n                    'type': 'postback', \n                    'title': 'Schedule a Meetting', \n                    'payload': 'SCHEDULE A MEETING' \n                }, { \n                    'type': 'postback', \n                    'title': 'Whos Off When', \n                    'payload': 'WHOS OFF WHEN', \n                }, { \n                    'type': 'postback', \n                    'title': 'My Schedule', \n                    'payload': 'MY SCHEDULE' \n                }] \n            } \n        } \n    }; \n    sendMessage(recipientId, messageData); \n}; \n\n```", "```js\nfunction sendMessageWithScheduleOptions(recipientId) { \n    messageData = { \n        'attachment': { \n            'type': 'template', \n            'payload': { \n                'template_type': 'button', \n                'text': 'Select day to schedule a meeting', \n                'buttons': [{ \n                    'type': 'postback', \n                    'title': 'Today', \n                    'payload': 'SCHEDULETODAY' \n                }, { \n                    'type': 'postback', \n                    'title': 'Tomorrow', \n                    'payload': 'SCHEDULETOMORROW', \n                }] \n            } \n        } \n    }; \n    sendMessage(recipientId, messageData); \n}; \n\n```", "```js\nfunction processMeetingDetails(str, todaysdate, recipientId) { \n    var title, stime, etime, starttime, endtime, ownername \n\n    //parsing input provided for extracting meeting information \n    title = str.substring(0, str.indexOf('@')); \n    stime = str.substring(title.length + 1, str.indexOf('to')) + ':00'; \n    etime = str.substring(str.indexOf('to') + 2, str.length) + ':00'; \n\n    starttime = moment(todaysdate + stime).unix(); \n    endtime = moment(todaysdate + etime).unix(); \n\n    console.log(starttime + ' to ' + endtime + ' title' + title); \n    //function to get Fb User Name \n    utils.getUserName(recipientId, function (d) { \n        ownername = d; \n        var objMeeting = new utils.meeting(Guid.raw(), recipientId, ownername, starttime, endtime, title) \n        CheckMeetingsIfExistsOrInsert(objMeeting); \n    }); \n} \n\n```", "```js\nfunction CheckMeetingsIfExistsOrInsert(objMeeting) { \n    var querySpec = { \n        query: 'SELECT * FROM Events b WHERE  (b.ownerid= @id) and (@start between b.startdatetime and b.enddatetime)', \n        parameters: [ \n            { \n                name: '@id', \n                value: objMeeting.ownerid \n            }, \n            { \n                name: '@start', \n                value: objMeeting.startdatetime \n            } \n        ] \n    }; \n\n    docclient.queryDocuments('dbs/EventsDB/colls/Events', querySpec).toArray(function (err, results) { \n        console.log(objMeeting.title); \n        if (results.length === 0) { \n            console.log('No data found' + objMeeting.title); \n            var documentDefinition = { \n                'id': objMeeting.id, \n                'ownerid': objMeeting.ownerid, \n                'owner': objMeeting.owner, \n                'startdatetime': objMeeting.startdatetime, \n                'enddatetime': objMeeting.enddatetime, \n                'title': objMeeting.title \n            }; \n            docclient.createDocument('dbs/EventsDB/colls/Events', documentDefinition, function (err, document) { \n                if (err) return console.log(err); \n                console.log('Created A Meeting with id : ', document.id); \n                sendMessage(objMeeting.ownerid, { 'text': 'Meeting has been scheduled.' }); \n            }); \n        } else { \n            console.log('Data found'); \n            sendMessage(objMeeting.ownerid, { 'text': 'Meeting exists for this schedule. Pl. schedule another time.' }); \n        } \n    }); \n} \n\n```", "```js\nfunction showWhosIsBusyWhen(recipientId,start, end) { \n    var querySpec = { \n        query: 'SELECT * FROM Events b WHERE  b.startdatetime<= @end and b.startdatetime>= @start ORDER BY b.startdatetime', \n        parameters: [             \n            { \n                name: '@end', \n                value: end \n            }, \n            { \n                name: '@start', \n                value: start \n            } \n        ] \n    }; \n    docclient.queryDocuments('dbs/EventsDB/colls/Events', querySpec).toArray(function (err, results) { \n        if (results.length > 0) { \n            sendMessageWithMeetingsOwnerInList(recipientId, results) \n        } \n    }); \n} \n\n```", "```js\nfunction sendMessageWithMeetingsOwnerInList(recipientId, results) { \n    var card; \n    var cards = []; \n    var messageData; \n\n    messageData = { \n        attachment: { \n            type: 'template', \n            payload: { \n                template_type: 'generic', \n                elements: [] \n            } \n        } \n    }; \n\n    for (i = 0; i < results.length; i++) { \n        card = { \n            title: results[i].title, \n            item_url: 'https://myorgmeetings.com/' + results[i].id, \n            image_url: '', \n            subtitle: 'Your confirmed meeting.', \n            buttons: [ \n                { \n                    type: 'web_url', \n                    url: 'https://myorgmeetings.com/' + results[i].id, \n                    title: utils.getFormattedDay(results[i].startdatetime) \n                }, \n                 { \n                    type: 'web_url', \n                    url: 'https://myorgmeetings.com/' + results[i].id, \n                    title: results[i].owner \n                }, \n                { \n                    type: 'web_url', \n                    url: 'https://myorgmeetings.com/' + results[i].id, \n                    title: utils.getFormattedTime(results[i].startdatetime, results[i].enddatetime) \n                } \n            ] \n        }; \n        cards.push(card); \n    } \n\n    messageData.attachment.payload.elements = cards; \n    sendMessage(recipientId, messageData); \n}; \n\n```", "```js\nvar express = require('express'); \nvar bodyParser = require('body-parser'); \nvar request = require('request'); \nvar moment = require('moment'); \nvar Guid = require('guid'); \nvar utils = require('./utils.js'); \n\nvar app = express(); \n\napp.use(bodyParser.json()); \napp.use(bodyParser.urlencoded({ extended: true })); \n\nvar DocumentClient = require('documentdb').DocumentClient; \nvar host = \"https://botdb.documents.azure.com:443/\"; \nvar masterKey = \"PRIMARY KEY\" \nvar docclient = new DocumentClient(host, { masterKey: masterKey }); \n\nvar payloadm; \n\napp.get('/', function (req, res) { \n    res.send('This is my Facebook Messenger Bot - Whos Off Bot Server'); \n}); \n\n// for facebook verification \napp.get('/webhook', function (req, res) { \n    if (req.query['hub.verify_token'] === 'whosoffbot_verify_token') { \n        res.status(200).send(req.query['hub.challenge']); \n    } else { \n        res.status(403).send('Invalid verify token'); \n    } \n}); \n\napp.post('/webhook', function (req, res) { \n    var tday; \n    var events = req.body.entry[0].messaging; \n    for (i = 0; i < events.length; i++) { \n        var event = events[i]; \n\n        if (event.message && event.message.text) { \n             if (event.message.text.indexOf('hi') > -1) { \n                sendMessageWithInitialOptions(event.sender.id);                 \n            }  \n            else if (event.message.text.indexOf('@') > -1) { \n                if (utils.isvalidateInput(event.message.text)) { \n                    sendMessage(event.sender.id, { 'text': 'Sure! Let me set up your meeting for '+payloadm }); \n                    if (payloadm=='Today'){ \n                        tday = moment().format(\"MM/DD/YYYY\"); \n                    } \n                    else if (payloadm=='Tomorrow'){ \n                        tday = moment().add(1, 'day').format(\"MM/DD/YYYY\"); \n                    } \n                    processMeetingDetails(event.message.text, tday + ' ', event.sender.id); \n                } \n                else { \n                    console.log('Invalid format!'); \n                    sendMessage(event.sender.id, { 'text': 'Pl. input meeting details e.g. Team Meeting@10:00to11:00' }); \n                } \n            } \n        } \n          else if (event.postback && event.postback.payload) { \n            payload = event.postback.payload; \n            // Handle a payload from this sender \n            console.log(JSON.stringify(payload));           \n            if (payload == 'SCHEDULE A MEETING') { \n                sendMessageWithScheduleOptions(event.sender.id); \n            } \n            else if (payload == 'SCHEDULETODAY') { \n                payloadm='Today'; \n                sendMessage(event.sender.id, { 'text': 'Pl. provide meeting details e.g. Team Meeting@10:00to11:00' }); \n            } \n            else if (payload == 'SCHEDULETOMORROW') { \n                 payloadm='Tomorrow'; \n                 sendMessage(event.sender.id, { 'text': 'Pl. provide meeting details e.g. Team Meeting@10:00to11:00' }); \n            }             \n            else if (payload=='WHOS OFF WHEN'){                                \n                sendMessageWithAllScheduleOptions(event.sender.id); \n            } \n            else if (payload == 'ALLSCHEDULETODAY') { \n                sendMessage(event.sender.id, 'Meeting(s) Scheduled for Today as..'); \n                var tilltonight = moment().add(1, 'day').startOf('day').unix(); \n                var startnow = moment().unix();                \n                showWhosIsBusyWhen(event.sender.id, startnow, tilltonight);                \n            } \n            else if (payload == 'ALLSCHEDULETOMORROW') { \n                sendMessage(event.sender.id, 'Meeting(s) Scheduled for tomorrow as..'); \n                var tilltomnight = moment().add(2, 'day').startOf('day').unix(); \n                var starttonight = moment().endOf('day').unix();                 \n                showWhosIsBusyWhen(event.sender.id, starttonight, tilltomnight);                 \n            } \n        } \n\n    }    \n    res.sendStatus(200); \n}); \n\nfunction sendMessageWithInitialOptions(recipientId) { \n    messageData = { \n        'attachment': { \n            'type': 'template', \n            'payload': { \n                'template_type': 'button', \n                'text': 'Pl. Select your options', \n                'buttons': [{ \n                    'type': 'postback', \n                    'title': 'Schedule a Meetting', \n                    'payload': 'SCHEDULE A MEETING' \n                }, { \n                    'type': 'postback', \n                    'title': 'Whos Off When', \n                    'payload': 'WHOS OFF WHEN', \n                }, { \n                    'type': 'postback', \n                    'title': 'My Schedule', \n                    'payload': 'MY SCHEDULE' \n                }] \n            } \n        } \n    }; \n    sendMessage(recipientId, messageData); \n}; \n\nfunction sendMessageWithScheduleOptions(recipientId) { \n    messageData = { \n        'attachment': { \n            'type': 'template', \n            'payload': { \n                'template_type': 'button', \n                'text': 'Select day to schedule a meeting', \n                'buttons': [{ \n                    'type': 'postback', \n                    'title': 'Today', \n                    'payload': 'SCHEDULETODAY' \n                }, { \n                    'type': 'postback', \n                    'title': 'Tomorrow', \n                    'payload': 'SCHEDULETOMORROW', \n                }] \n            } \n        } \n    }; \n    sendMessage(recipientId, messageData); \n}; \n\nfunction processMeetingDetails(str, todaysdate, recipientId) { \n    var title, stime, etime, starttime, endtime, ownername \n\n    //parsing input provided for extracting meeting information \n    title = str.substring(0, str.indexOf('@')); \n    stime = str.substring(title.length + 1, str.indexOf('to')) + ':00'; \n    etime = str.substring(str.indexOf('to') + 2, str.length) + ':00'; \n\n    starttime = moment(todaysdate + stime).unix(); \n    endtime = moment(todaysdate + etime).unix(); \n\n    console.log(starttime + ' to ' + endtime + ' title' + title); \n    //function to get Fb User Name \n    utils.getUserName(recipientId, function (d) { \n        ownername = d; \n        var objMeeting = new utils.meeting(Guid.raw(), recipientId, ownername, starttime, endtime, title) \n        CheckMeetingsIfExistsOrInsert(objMeeting); \n    }); \n} \n\nfunction CheckMeetingsIfExistsOrInsert(objMeeting) { \n    var querySpec = { \n        query: 'SELECT * FROM Events b WHERE  (b.ownerid= @id) and (@start between b.startdatetime and b.enddatetime)', \n        parameters: [ \n            { \n                name: '@id', \n                value: objMeeting.ownerid \n            }, \n            { \n                name: '@start', \n                value: objMeeting.startdatetime \n            } \n        ] \n    }; \n\n    docclient.queryDocuments('dbs/EventsDB/colls/Events', querySpec).toArray(function (err, results) { \n        console.log(objMeeting.title); \n        if (results.length === 0) { \n            console.log('No data found' + objMeeting.title); \n            var documentDefinition = { \n                'id': objMeeting.id, \n                'ownerid': objMeeting.ownerid, \n                'owner': objMeeting.owner, \n                'startdatetime': objMeeting.startdatetime, \n                'enddatetime': objMeeting.enddatetime, \n                'title': objMeeting.title \n            }; \n            docclient.createDocument('dbs/EventsDB/colls/Events', documentDefinition, function (err, document) { \n                if (err) return console.log(err); \n                console.log('Created A Meeting with id : ', document.id); \n                sendMessage(objMeeting.ownerid, { 'text': 'Meeting has been scheduled.' }); \n            }); \n        } else { \n            console.log('Data found'); \n            sendMessage(objMeeting.ownerid, { 'text': 'Meeting exists for this schedule. Pl. schedule another time.' }); \n        } \n    }); \n} \n\nfunction sendMessageWithAllScheduleOptions(recipientId) { \n    messageData = { \n        'attachment': { \n            'type': 'template', \n            'payload': { \n                'template_type': 'button', \n                'text': 'Select your schedule for', \n                'buttons': [{ \n                    'type': 'postback', \n                    'title': 'Today', \n                    'payload': 'ALLSCHEDULETODAY' \n                }, { \n                    'type': 'postback', \n                    'title': 'Tomorrow', \n                    'payload': 'ALLSCHEDULETOMORROW',     \n                }] \n            } \n        } \n    }; \n    sendMessage(recipientId, messageData); \n}; \n\nfunction showWhosIsBusyWhen(recipientId,start, end) { \n    var querySpec = { \n        query: 'SELECT * FROM Events b WHERE  b.startdatetime<= @end and b.startdatetime>= @start ORDER BY b.startdatetime', \n        parameters: [             \n            { \n                name: '@end', \n                value: end \n            }, \n            { \n                name: '@start', \n                value: start \n            } \n        ] \n    }; \n    docclient.queryDocuments('dbs/EventsDB/colls/Events', querySpec).toArray(function (err, results) { \n        if (results.length > 0) { \n            sendMessageWithMeetingsOwnerInList(recipientId, results) \n        } \n    }); \n} \n\nfunction sendMessageWithMeetingsOwnerInList(recipientId, results) { \n    var card; \n    var cards = []; \n    var messageData; \n\n    messageData = { \n        attachment: { \n            type: 'template', \n            payload: { \n                template_type: 'generic', \n                elements: [] \n            } \n        } \n    }; \n\n    for (i = 0; i < results.length; i++) { \n        card = { \n            title: results[i].title, \n            item_url: 'https://myorgmeetings.com/' + results[i].id, \n            image_url: '', \n            subtitle: 'Your confirmed meeting.', \n            buttons: [ \n                { \n                    type: 'web_url', \n                    url: 'https://myorgmeetings.com/' + results[i].id, \n                    title: utils.getFormattedDay(results[i].startdatetime) \n                }, \n                 { \n                    type: 'web_url', \n                    url: 'https://myorgmeetings.com/' + results[i].id, \n                    title: results[i].owner \n                }, \n                { \n                    type: 'web_url', \n                    url: 'https://myorgmeetings.com/' + results[i].id, \n                    title: utils.getFormattedTime(results[i].startdatetime, results[i].enddatetime) \n                } \n            ] \n        }; \n        cards.push(card); \n    } \n\n    messageData.attachment.payload.elements = cards; \n    sendMessage(recipientId, messageData); \n}; \n\nfunction sendMessage(recipientId, message) { \n    request({ \n        url: 'https://graph.facebook.com/v2.6/me/messages', \n        qs: { access_token: 'PAGE_ACCESS_TOEKN' }, \n        method: 'POST', \n        json: { \n            recipient: { id: recipientId }, \n            message: message, \n        } \n    }, function (error, response, body) { \n        if (error) { \n            console.log('Error sending message: ', error); \n        } else if (response.body.error) { \n            console.log('Error: ', response.body.error); \n        } \n    }); \n}; \n\napp.listen((process.env.PORT || 8080));     \n\n```"]