["```js\nconst target = {  age: 12 }; \nconst handler = {}; \nconst proxy = new Proxy(target, handler); \nproxy.name = \"Eden\"; \nconsole.log(target.name); \nconsole.log(proxy.name); \nconsole.log(target.age); \nconsole.log(proxy.age);\n```", "```js\nEden\nEden\n12\n12\n```", "```js\nvar proxy = new Proxy({ age: 12 }, {}); \nproxy.name = \"Eden\";\n```", "```js\nconst proxy = new Proxy({ \n    age: 12 \n}, { \nget(target, property, receiver) { \n    if(property in target) { \n        return target[property]; \n    }\n    return \"Property not found!\"; \n} \n}); \nconsole.log(proxy.age); \nconsole.log(proxy.name);\n```", "```js\n12\nProperty not found!\n```", "```js\n12\nundefined\n```", "```js\nconst proxy = new Proxy({\n    age: 13\n}, { \nget(target, property, receiver) { \n    if(property in target) { \n        return target[property]; \n    } else if(property == \"name\") {\n        console.log(\"Receiver here is \", receiver);\n        return \"backup property value for name.\";\n    } else { \n        return console.log(\"Property Not Found \", receiver); \n    } \n} \n}); \nlet temp = proxy.name; \nlet obj = { \n    age: 12, \n    __proto__: proxy \n};\ntemp = obj.name;\nconst justARandomVariablePassingBy = obj.age;\nconsole.log(justARandomVariablePassingBy);\n```", "```js\nReceiver here is <ProxyObject> {age: 13}\nReceiver here is {age: 12}\n12\n```", "```js\nconst proxy = new Proxy({}, { \nset(target, property, value, receiver) { \n    target[property] = value; \n    return true; \n} \n}); \nproxy.name = \"Eden\";\nconsole.log(proxy.name); //Output \"Eden\"\n```", "```js\nconst proxy = new Proxy({age: 12}, { \nhas(target, property) { \n    return property in target;\n}\n}); \nconsole.log(Reflect.has(proxy, \"name\")); \nconsole.log(Reflect.has(proxy, \"age\"));\n```", "```js\nfalse\ntrue\n```", "```js\nconst proxy = new Proxy({age: 12}, { \nisExtensible(target) { \n    return Object.isExtensible(target); \n} \n}); \nconsole.log(Reflect.isExtensible(proxy)); //Output \"true\"\n```", "```js\nconst proxy = new Proxy({\n    age: 12, \n    __proto__: {name: \"Eden\"}\n}, \n{ \n    getPrototypeOf(target) { \n        return Object.getPrototypeOf(target); \n    } \n}); \n\nconsole.log(Reflect.getPrototypeOf(proxy).name); //Output \"Eden\"\n```", "```js\nconst proxy = new Proxy({}, { \n    setPrototypeOf(target, value) { \n        Reflect.setPrototypeOf(target, value); \n        return true; \n    } \n}); \n\nReflect.setPrototypeOf(proxy, {name: \"Eden\"}); console.log(Reflect.getPrototypeOf(proxy).name); //Output \"Eden\"\n```", "```js\nconst proxy = new Proxy({}, { \npreventExtensions(target) { \n    Object.preventExtensions(target); \n    return true; \n} \n}); \nReflect.preventExtensions(proxy); \nproxy.a = 12; \nconsole.log(proxy.a); //Output \"undefined\"\n```", "```js\nconst proxy = new Proxy({age: 12}, { \ngetOwnPropertyDescriptor(target, property) { \n    return Object.getOwnPropertyDescriptor(target, property); \n} \n}); \n\nconst descriptor = Reflect.getOwnPropertyDescriptor(proxy, \"age\"); console.log(\"Enumerable: \" + descriptor.enumerable); \nconsole.log(\"Writable: \" + descriptor.writable); \nconsole.log(\"Configurable: \" + descriptor.configurable); \nconsole.log(\"Value: \" + descriptor.value);\n```", "```js\nEnumerable: true\nWritable: true\nConfigurable: true\nValue: 12\n```", "```js\nconst proxy = new Proxy({}, { \ndefineProperty(target, property, descriptor) { \n    Object.defineProperty(target, property, descriptor); \n    return true; \n} \n}); \nReflect.defineProperty(proxy, \"name\", {value: \"Eden\"}); \nconsole.log(proxy.name); //Output \"Eden\"\n```", "```js\nconst proxy = new Proxy({age: 12}, { \ndeleteProperty(target, property) { \n    return delete target[property]; \n} \n}); \nReflect.deleteProperty(proxy, \"age\"); \nconsole.log(proxy.age); //Output \"undefined\"\n```", "```js\nconst s = Symbol(); \nconst object = {age: 12, __proto__: {name: \"Eden\"}, [s]: \"Symbol\"}; Object.defineProperty(object, \"profession\", \n{ \n    enumerable: false, \n    configurable: false, \n    writable: false, \n    value: \"Developer\" \n}) \n\nconst proxy = new Proxy(object, { \n    ownKeys(target) { \n        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target)); \n} \n}); \n\nconsole.log(Reflect.ownKeys(proxy)); \nconsole.log(Object.getOwnPropertyNames(proxy)); \nconsole.log(Object.keys(proxy)); \nconsole.log(Object.getOwnPropertySymbols(proxy));\n```", "```js\n[\"age\", \"profession\", Symbol()]\n[\"age\", \"profession\"]\n[\"age\"]\n[Symbol()]\n```", "```js\nconst proxy = new Proxy(function(){}, { \n    apply(target, thisValue, arguments) { \n        console.log(thisValue.name); \n        return arguments[0] + arguments[1] + arguments[2]; \n    } \n});\n\nconst obj = { name: \"Eden\", f: proxy } \nconst sum = obj.f(1,2,3); \nconsole.log(sum);\n```", "```js\nEden\n6\n```", "```js\nconst proxy = new Proxy(function(){}, { \n    construct(target, arguments) { \n        return {name: arguments[0]}; \n    } \n}); \n\nconst obj = new proxy(\"Eden\"); \nconsole.log(obj.name); //Output \"Eden\"\n```", "```js\nconst revocableProxy = Proxy.revocable({ age: 12 }, { \nget(target, property, receiver) { \n    if(property in target) {\n         return target[property]; \n    }\n    return \"Not Found\";  \n} \n}); \nconsole.log(revocableProxy.proxy.age); \nrevocableProxy.revoke(); \nconsole.log(revocableProxy.proxy.name);\n```", "```js\n12\nTypeError: proxy is revoked\n```"]