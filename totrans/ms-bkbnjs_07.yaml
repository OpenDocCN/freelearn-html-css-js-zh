- en: Chapter 7. Build Like a Pro
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some years ago, you could create a website with PHP, upload your source files
    through FTP to a server, and then go online. During those days, JavaScript was
    a tight piece of the whole system, used for UI tasks such as validating forms
    or small chunks of functionality.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Today, web is more JavaScript intensive, we are building web applications instead
    websites, this means that JavaScript is no more a trivial piece of applications,
    it is now a core piece. For this reason, it is important to pack our JavaScript
    application before being deployed for production.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn the following in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Building a workflow to automatically process your source files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minifying the application script size
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minifying the number of requests to the server when the application is loaded
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minifying the images
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing the CSS files
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wiring up everything in an HTML file
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a development environment to automatically reload the application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At the time of writing this book, there are many tools to build JavaScript
    applications; however, two of them are the most popular: Grunt and Gulp. Grunt
    is an older choice with a big community around and an amazing collection of plugins
    available. Gulp, on the other hand, is gaining more popularity each day and almost
    has the most popular plugins that exist for Grunt.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Development workflow
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you are developing an application, some tasks are very repetitive; for
    example, our contacts application uses Browserify to manage dependencies. It needs
    to rebundle the source code every time you make a change, which means that you
    need to run the `browserify` command each time:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To run these commands every time you make a small change is a very tedious
    task, there should be a better way to do it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '![Development workflow](img/B01962_07_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1\. Development workflow
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: The above figure shows the ideal development process; the first time you run
    the application, you should bundle the source files and run the BrowserSync web
    server and then open the browser. After that, for any change that you make in
    any source file, the application should be rebundled and then the browser should
    be refreshed to get the new changes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Currently, we are manually doing this process; however, in the next section,
    you will learn how to automatize this task to let the machine do all this for
    you.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: What's a task runner?
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A task runner is computer program that runs a sequence of tasks over your source
    code, applying transformations to the files. For example, consider that you are
    writing a source code in the CoffeeScript programming language, one task would
    be compiling all your source code in JavaScript, other task can be concatenating
    all the output JavaScript files in a single file, and the third task can finally
    be minifying the concatenated file to minimize the file size.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: These tasks will automatically be run by the task runner, you just need to write
    a script file to program what needs to be done and then forget to run any command
    line again. The task runner provides triggers to start a task whenever you change
    a file so that it is done transparently.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, a task runner can improve your productivity as you can forget
    about the details of the compilation process once you have correctly configured
    a task runner. It will allow you to automate all these repetitive and boring tasks
    and then, you can focus on product development.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Grunt and Gulp are the most popular task runners for JavaScript; they take
    different approach to run the tasks. In Grunt, the tasks are run sequentially:
    once a task is running, the next task cannot start until the first is done. In
    Gulp, the tasks can run parallel to each other, as shown in the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![What''s a task runner?](img/B01962_07_02.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 Different approach on running task by Grunt and Gulp
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: The above figure illustrates how Grunt and Gulp will run three tasks. Task B
    depends on whether Task A and Task C are done. Note that Grunt can run the tasks
    parallel to each other using plugins. While, Gulp does this from its core design.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Another difference between Grunt and Gulp is that, in Grunt, you can configure
    the tasks on writing a big configuration object. While, in Gulp, you will write
    standard JavaScript functions. An interesting point is that Grunt and Gulp can
    work together in the same project; however, it is better to choose just one of
    them in order to reduce complexity.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: If your project uses Grunt, you should not switch to Gulp unless have a good
    reason to do it.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: How Gulp works
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I mentioned at the beginning of the chapter, Gulp is the most popular JavaScript
    task runner at the time of writing this book and that's the main reason why we
    chose it. Gulp and Grunt work in a similar way, they both use third-party plugins
    to work. Keep in mind that Gulp is more like a framework, it does not make too
    much by itself.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Gulp acts as the glue that coordinates the build workflow; it has some basic
    functionality and an API, which the Gulp plugins can use to do their work. The
    plugins use the compilers and utility programs that make the real file processing,
    such as the CoffeeScript transpiler. The plugins connect these programs to the
    Gulp workflow:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![How Gulp works](img/B01962_07_03.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 Relationship between Gulp plugins and libraries
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: The preceding figure shows the relationship that was described earlier, you
    can get a better idea of how Gulp connects with its plugins; notice how the plugins
    delegate the file processing to the utility programs that they connect to.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Gulp is composed of several named tasks where each task can have dependencies
    on other tasks. A typical Gulp task opens a stream of files at the beginning and
    applies transformation to each file in the stream with the installed plugins.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'A stream is opened with the `gulp.src()` method. It starts a stream that you
    can connect to several pipes in order to apply the necessary transformations.
    When you open a stream, you need to specify the target files that will be used
    in the stream. You will select these files using the `node-glob format`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It is easy to specify the files for the stream, it is similar to what you do
    in the command line. The figure below shows how the stream and pipes are connected.
    The files that are selected are streamed into the Gulp plugins, they make the
    transformations and put the output back in the stream, the next plugin can then
    make its work, and put the result back in the stream:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![How Gulp works](img/B01962_07_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 Using node-blob to select files
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the pipe, you will normally write the result in a file that is
    ready to be used. You can put as many Gulp tasks as you need and each task can
    have as many dependencies as it needs.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Gulp
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, install the Gulp package globally; this will give you access
    to the `gulp` command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once you have installed Gulp globally, you will need to install it in your
    local project in order to have access to the Gulp core utilities:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To configure the Gulp tasks, you will need to create a file called `gulpfile.js`
    that Gulp will read every time you run the `gulp` command. All Gulp tasks have
    a name and a function that is executed when the task is invoked:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following simple Gulp task will print Hello world! on the console:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note how we invoke Gulp, `gulp hello`, the argument used in the command is the
    name of the task to be executed. This is the simplest Gulp task that you can write
    and it is the starting point for developing an effective build pipeline.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Creating a development workflow
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will build a script to help us in the development process
    and, later, to build a production-ready script. You will need to install the basic
    dependencies first:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `gulp-load-plugins` is useful to automatically load all the available plugins
    without manually requiring them in the `gulpfile.js` script; the `gulp-util` plugin
    provides utility functions such as log messages.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Bundling the JavaScript files with Browserify
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `gulp-browserify` plugin is currently deprecated and should not be used.
    The project author recommends using one of the recipes developed by the Gulp development
    team.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'The recipes described in the repository needs to install some plugins first:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In `gulpfile.js`, we can define the `browserify` task:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Notice how we configure the Browserify bundle, we use the Browserify `jstify`
    transformation to compile the underscore templates. As the `browserify` task is
    not a standard Gulp plugin, we are using `vinyl-source-stream` to stream the files
    to the bundler. Finally, we will write the output in the `.tmp/js` path.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can run Gulp with the Browserify argument to run the task:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The`.tmp/js/app.js` file should exist and be ready to be used. You can run
    the project to verify all is working:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Sourcemaps
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you run the project, the browser gets a single file named `app.js`, which
    contains all the concatenated source code. That's good for the production environments
    as it reduces the number of requests made to the server in order to get the assets.
    However, in development environments, it is more useful to see the individual
    files in the browser as you have it in the source code for the debugging process.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: You can make sure that the browser shows you the original source files with
    sourcemaps so that you can put debug breakpoints or simply inspect the code without
    the noise of the other dependencies such as the Backbone library.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'To include sourcemaps in the `browserify` task, you will need to install some
    extra dependencies:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, modify the task:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The following figure shows the source files in the Google Chrome browser. You
    can inspect the original files and put breakpoints, the browser will ensure to
    stop the execution at the right time.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'It is useful for Browserify bundles to see all the original files instead of
    a huge script; however, this technique can be used for the compiled programming
    languages such as CoffeeScript or maybe you can write your source code in ECMAScript
    6 and transpile it with babel and then, the original files with sourcemaps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![Sourcemaps](img/B01962_07_05.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 Sourcemaps in action
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Re-bundle automatically
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you change a source file, then you will need to run the `browserify` task
    again. You can make sure that Gulp and Browserify do this job for you. First,
    you will need to install another Browserify plugin:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `watchify` plugin listens for file changes in the source code and can be
    used to trigger a re-bundle task:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When a change is triggered, the `rebundle()` function will be executed automatically
    so that you only need to refresh the browser. In the next section, you will see
    how to automate this too.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: BrowserSync
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BrowserSync is an asset server that is useful for the purpose of developing,
    you should avoid its use for production environments. BrowserSync is a node package
    that runs an HTTP server that automatically reloads the browser when a change
    on the files that serve is detected. With BrowserSync, you may forget to manually
    refresh your browser every time you make a change.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to install the package before starting to use it:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once the package is installed, we can create a new Gulp task to run BrowserSync:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: On this Gulp task, we will run BrowserSync in the 9000 port and open an additional
    9001 port to allow us to configure the BrowserSync behavior. You can, for example,
    remotely debug your application, which is useful for mobile devices.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: We configure BrowserSync to serve the files from the `app` and `.tmp` directories.
    If you access `http://localhost:9000/`from your browser, the `app/index.html`
    file will be served as default and will use the script files in the `.tmp` directory.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: To automatically refresh the browser when a change in the source files is detected,
    we use the `gulp.watch()` method as it accepts a list of files to watch in the
    `node-blob` format and then, we can listen for the `change` event to fire a refresh
    signal to the browser through the `reload()` function that is included in BrowserSync.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'As the server task depends on the availability of the bundle script file, this
    task should depend on the Browserify task that we earlier created. To indicate
    Gulp that the task has a dependency, we should add a new argument to the `gulp.task()`
    function:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The second argument is a list of strings that the task depends on. In the previous
    snippet, Gulp will ensure that the `browserify` task runs and finishes first before
    executing the `browserify` task function.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Run server with Express
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have the assets server working, we need to run our Express server
    with `nodemon`, this package is very similar to BrowserSync; however, it does
    not include the browser features. With nodemon, you can run a node script that
    will watch for any changes on the JavaScript files. When a change is detected,
    the node script will be reloaded automatically.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to install the npm package first:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, we can create the task for nodemon:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this task, we are informing nodemon to ignore the changes under the `app`
    directory. The reason for this is that the `app` path is already watched by BrowserSync.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the server, and the assets are served and reloaded automatically,
    we can merge these two tasks in order to run the project in development mode:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'A new dependency should be installed, **http-proxy**. This dependency allows
    us to redirect all the API requests to the Express server so that BrowserSync
    does not try to serve these requests:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This time, we add the `express` task dependency to the `serve` task. As we are
    now running two servers on different ports, assets on 9000 and API on 8000, we
    add a middleware in BrowserSync to redirect the traffic that starts with `/api/`
    or `/avatar/` to the server located at port 8000.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Now, when you run the `serve` task from your command line, you will get an amazing
    development environment. Every time a file in the frontend is changed, the browser
    will be reloaded automatically with a new bundle. If a change in the server files
    is detected, the Express server will also be reloaded.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: That's a great improvement for your development workflow; you will be more productive
    and forget about manual reloads.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Creating a production workflow
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The development workflow that we built in the previous sections is an amazing
    improvement for the project; however, we are not finished yet. In this section,
    you will see how to optimize the project that is to be run in the production environments.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will learn how to minimize your JavaScript and CSS files
    to obfuscate your source code and reduce the time the browser takes to load the
    asset files. The images can also be minified in order to reduce its weight without
    altering its appearance.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Gulp useref
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `gulp-useref` plugin processes your HTML files to concatenate your JavaScript
    and CSS assets into a single file. Please note that the JavaScript is already
    processed by Browserify, therefore, it is not necessary to process the JavaScript
    files with useref; on the other hand, CSS can be processed here.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need to install the plugin with npm as a development dependency:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, to use it, you will need to create a new task. Let''s call it `html`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `gulp.src('app/*.html')` function grabs all the files with the`.html` extension.
    In our case, only the `index.html` file exists, therefore, it is the only file
    that will be processed. The `useref.assets()` function concatenates all the assets
    that are found in the HTML files and puts them in a stream, the `assets.restore()`
    function will restore the original stream of HTML files that are picked in the
    beginning.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: When you call the `useref()` function, the HTML file is parsed in order to replace
    the assets files in a single HTML tag. For example, if you have five CSS files,
    it replaces these five link tags in the HTML file in a single tag that points
    to the concatenated version.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'You should indicate the `useref` task how to concatenate the files with special
    tags in the HTML files:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You need add two HTML comments to the code, these comments have a special meaning
    for useref. Its syntax is as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As we are processing CSS files, we use `css` as type, and the search path indicates
    where useref will look for the files. If we left this optional parameter blank,
    then it will use the root project path. The last `path` argument indicates where
    the concatenated CSS files will be put.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the Gulp `html` task, you will get a concatenated file with all
    your styles under the `dist/css/vendor.css` path. The output HTML file will point
    to this file instead of the development ones:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can optimize the output CSS files by minifying them with the `gulp-minify-css`
    plugin. As you may have guessed, you should install the plugin with npm:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then you can use the plugin in your build process, as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This will minify the concatenated CSS file. However, as `useref` can process
    CSS and JavaScript files, the code can be buggy if a JavaScript build tag is added.
    To prevent errors, you can use the `gulp-if` plugin:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This will also install `uglify` in order to also process the JavaScript files:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: With `gulp-if` we test if the file in the stream is a CSS or a JavaScript file
    and then apply the right transformation.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Image Optimization
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are developing your project in the local machine, the assets load pretty
    fast as images and code live in the same computer; however, when you go to the
    production images, they travel through the Internet to your user machine.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: With image optimization, we can compress these images in order to reduce the
    amount of data that your app downloads from the server. With node, you can use
    the `imagemin` package; however, as we are using Gulp, `gulp-imagemin` will do
    the job.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'As we did earlier, you will need to install the plugin first:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now that the plugin is installed, we can use it:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: It grabs the images from the `app/images` path and applies the `imagemin()`
    process to each image.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Fonts
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fonts for Bootstrap are located under the `node_modules/` directory. If you
    install other type of fonts, such as Font Awesome, or download a specific fonts;
    they should be copied to the `dist/` directory. You can create a `fonts` task
    to do this, as shown in the following:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Note that you will need to install the `gulp-flatten` plugin; this plugin will
    remove any prefix directory:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Bundle JavaScript files for production
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `browserify` task that we have is useful for development, it creates sourcemaps
    and the output is not minified. If you want to go to the production, you will
    need to remove the sourcemaps and minimize the output too.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: For production environment, we will transform the ECMAScript 6 code into JavaScript
    in order to add support for these browsers that does not support for ECMAScript
    6\. Babel is the best transpiler at the moment to make this transformation.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'The babelify plugin of Browserify will apply the transformations, as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You will need to configure Babel before using the babelify plugin. In Babel
    6, you have to install individual packages for the functions that you want to
    support. For this project, we support ES2015:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In the `.babelrc` file, you should configure the preset:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Once you have configured Babel properly, we can create the `browserify` task
    for production:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This task does not generate sourcemaps and optimize the output.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all together
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have learned how to optimize several kind of assets: CSS, JavaScript, and
    images. Now let''s put all this together in order to build our application. The
    `serve:dist` task wires all the processes into a pipeline:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'To test our pipeline, we can run the `serve:dist` task in the terminal:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Notice how the tasks are executed by Gulp. After all these processes, the browser
    will automatically open while pointing to the `http://localhost:9000` address,
    running the application in the production environment.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how to use tools to build our Backbone application.
    First, you learned what a task runner is and the most popular choices available
    for Node. Then, we saw how Gulp works and creates tasks.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: With Gulp, you can build a development environment and configure it in order
    to apply optimizations to your assets for the production environments. Gulp is
    stream-based, which means that you can grab a bunch of files from a `glob` specification
    and stream these files in order to apply transformations, such as compiling, concatenating,
    transpiling, and so on, as you need.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Gulp，你可以构建一个开发环境并对其进行配置，以便为生产环境中的资源应用优化。Gulp 是基于流的，这意味着你可以从 `glob` 规范中抓取一串文件，并将这些文件流式传输以应用所需的转换，例如编译、连接、转译等。
- en: Task runners are amazing tools that allow you to automatize tasks. You can not
    only create development and production workflows, but also tasks for almost anything,
    which you don't want to repeat. For example, a task to make deployments.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 任务运行器是惊人的工具，它允许你自动化任务。你不仅可以创建开发和生产工作流程，还可以为几乎所有你不想重复的事情创建任务。例如，创建部署的任务。
- en: In the next chapter, we will see how to test the Backbone applications. You
    will learn how to isolate and fake dependencies for easy testing, the what and
    how to make Backbone testing.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何测试 Backbone 应用程序。你将学习如何隔离和模拟依赖关系以方便测试，以及如何进行 Backbone 测试。
