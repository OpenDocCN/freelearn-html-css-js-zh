["```js\nvar mySingletonObj = {};\n```", "```js\nvar mySingletonObj = {\n\n  name: \"Sasan\",\n\n  title: \"Software Developer\",\n\n  getName: function(){\n\n    return this.name;  \n  },\n\n  getTitle: function(){\n\n    return this.title;  \n  }\n\n};\n// displays \"Sasan\"\nconsole.log(mySingletonObj.getName()); \n\n//  displays \"Software Developer\"\nconsole.log(mySingletonObj.getTitle()); \n```", "```js\nmySingletonObj.name = \"John\";\nconsole.log(mySingletonObj.name); // displays \"John\"\n```", "```js\nvar mySingletonObj = (function(){\n\n    //private variables\n    var name = \"Sasan\"; \n    var title = \"Software Developer\";\n\n    //returning a Singleton\n    return {\n\n        // privileged method\n        getName : function(){\n\n            return name;\n        },\n        // privileged method\n        getTitle: function(){\n\n            return title;\n        }            \n\n    };\n\n})();\n```", "```js\nconsole.log(mySingletonObj.name); // displays undefined\n```", "```js\nconsole.log(mySingletonObj.getName()); // displays \"Sasan\"\n```", "```js\n// displays \"Software Developer\"\nconsole.log(mySingletonObj.getTitle());\n```", "```js\nvar mySingletonObj = function() {\n    //private variables\n    var name = \"Sasan\";\n    var title = \"Software Developer\";\n\n    //returning a singleton\n    return {\n        name: 'Tom',\n\n        // privileged method\n        getOuterName: function() {\n            return name;\n        },\n\n        // privileged method\n        getInnerName: function() {\n            return this.name;\n        },\n\n        // privileged method\n        getTitle: function() {\n            return title;\n        }\n    };\n}();\n```", "```js\nconsole.log(mySingletonObj.name); // displays \"Tom\"\n```", "```js\nconsole.log(mySingletonObj.getOuterName()); // displays \"Sasan\"\n```", "```js\n    getInnerName: function(){\n\n        return this.name;\n    }\n```", "```js\nconsole.log(mySingletonObj.getInnerName()); // displays \"Tom\"\n```", "```js\nmySingletonObj.name = \"Jack\";\n```", "```js\nconsole.log(mySingletonObj.name); // displays \"Jack\"\nconsole.log(mySingletonObj.getOuterName()); // displays \"Sasan\"\nconsole.log(mySingletonObj.getInnerName()); // displays \"Jack\"\n```", "```js\nvar myCarFactoryModule = function() {\n\n    var createdCars = [];\n\n    function carFactory() {\n\n        // could also use \"var newCar = {}\";  \n        var newCar = new Object();\n\n        newCar.type = arguments[0];\n        newCar.color = arguments[1];\n        newCar.gearType = arguments[2];\n        newCar.cylinder = arguments[3];\n        createdCars.push(newCar);\n        return newCar;\n    }\n    return {\n\n        // privileged method\n        createCar: function(type, color, gearType, cylinder) {\n            return carFactory(type, color, gearType, cylinder);\n        },\n\n        // privileged method\n        getCarCount: function() {\n            return createdCars.length;\n        },\n\n        // privileged method\n        removeCar: function(index) {\n            createdCars.splice(index, 1);\n        }\n    };\n}();\n```", "```js\nvar myFirstCar = myCarFactoryModule.createCar(\"Sedan\", \"red\", \"automatic\",4); // creates first instance of car\n\nvar mySecondCar = myCarFactoryModule.createCar(\"SUV\", \"Silver\", \"Standard\",6); // creates second instance of car\n\nconsole.log(myFirstCar.color); // displays \"red\"\nconsole.log(mySecondCar.gearType); // displays \"Standard\"\n\nvar myTotalCars = myCarFactoryModule.getCarCount();\nconsole.log(myTotalCars); //displays 2\n\nmyCarFactoryModule.removeCar(0); // removes the first care object\n\nvar myTotalCars = myCarFactoryModule.getCarCount();\nconsole.log(myTotalCars); // displays 1\n```", "```js\nvar ApplicationInitModule = function() {\n    var registeredModules = [];\n\n    return {\n        registerModule: function(module) {\n            registeredModules.push(module);\n        },\n        getAppModulesCount: function() {\n            return registeredModules.length;\n        },\n        removeRegisteredModule: function(index) {\n            registeredModules.splice(index, 1);\n        },\n        initializeAllModules: function() {\n            for (var module in registeredModules) {\n                registeredModules[module].initialize();\n            }\n        },\n    };\n}();\n\nvar GlobalApp = (function() {\n    var registerModule = ApplicationInitModule.registerModule;\n    return {\n        registerModule: registerModule\n    };\n})();\n\nvar testModule1 = (function() {\n    var self = {};\n    var moduleName = \"Module 1\";\n\n    self.initialize = function() {\n        //displays \"testmodule1 has been initialized!\"\n        console.log(\"testmodule1 has been initialized!\");\n        //displays \"module name is: Module 1\"\n        console.log(\"module name is: \" + moduleName);\n    };\n\n    (function() {\n        GlobalApp.registerModule(self);\n    })();\n\n    return {\n        initialize: self.initialize,\n        getName: function() {\n            return moduleName;\n        }\n    };\n})();\n\nvar testModule2 = (function() {\n    var moduleName = \"Module 2\";\n\n    function initialize() {\n        //displays \"testmodule2 has been initialized!\"\n        console.log(\"testmodule2 has been initialized!\");\n    }\n    return {\n        initialize: initialize\n    };\n})();\nGlobalApp.registerModule(testModule2);\n```", "```js\n(function(){\n\n    GlobalApp.registerModule(self);        \n\n})(); \n```", "```js\nGlobalApp.registerModule(testModule2);\n```", "```js\nregisterModule : function(module){\n\n        registeredModules.push(module);\n}\n```", "```js\ninitializeAllModules: function(){\n\n    for(var module in registeredModules){\n\n        registeredModules[module].initialize();\n\n    }\n};\n```", "```js\n// displays \n// \"testmodule1 has been initialized!\" \n// \"module name is: Module 1\"\n// \"testmodule2 has been initialized!\" \nApplicationInitModule.initializeAllModules();\n```"]