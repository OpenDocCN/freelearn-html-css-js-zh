- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stores and Animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will delve into the world of Svelte animations, focusing
    on the power and versatility of the `tweened` and `spring` stores. The `tweened`
    and `spring` stores are writable stores in which their store value changes over
    time when the `set` or `update` method is invoked, enabling us to develop more
    complex and visually appealing animations. By effectively harnessing these stores,
    you can elevate the user experience and create applications that are both dynamic
    and captivating.
  prefs: []
  type: TYPE_NORMAL
- en: We begin this chapter by delving into the `tweened` and `spring` stores, learning
    how to create animations using these stores. Following that, we explore interpolation
    and the use of custom interpolations. Throughout the chapter, we examine various
    examples, such as animated graphs and image lightboxes, to illustrate the concepts.
    By the end of this chapter, you will have acquired the skills necessary to harness
    the `tweened` and `spring` stores effectively, enabling you to create intricate
    and engaging animations in your Svelte projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the `tweened` and `spring` stores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom interpolation and its usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating with the `tweened` and `spring` stores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the code used in this chapter on GitHub: [https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12)'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the tweened and spring stores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us begin our journey into the world of Svelte animations by understanding
    the concept of `tweened` and `spring` stores.
  prefs: []
  type: TYPE_NORMAL
- en: The `tweened` and `spring` stores are writable stores that typically hold numeric
    values. To see the features they offer, let us compare them with a regular numeric
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not familiar with writable stores, you can check out [*Chapter 8*](B18887_08.xhtml#_idTextAnchor121),
    where we extensively explained Svelte stores and creating writable Svelte stores
    using the built-in `writable()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, when you have a numeric variable and you update the variable, the
    value of the variable changes instantly. In the following example, we have a numeric
    variable, `height`, whose initial value is `10`. When we assign a new value of
    `20` to the variable, the value of the variable changes to `20` immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If we use this numeric variable to represent the height of an element or the
    progress in a progress bar, the height or progress jumps to the new value as soon
    as it is assigned. These abrupt changes can be jarring.
  prefs: []
  type: TYPE_NORMAL
- en: So, how can we ensure a smooth transition when updating the target value?
  prefs: []
  type: TYPE_NORMAL
- en: Svelte provides two built-in stores, `tweened` and `spring`, specifically designed
    for storing numeric values and allowing for smooth transitions to new values over
    a specified duration.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at an example to get a clearer idea.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example, we create a `tweened` store with an initial value of `10`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we assign a new value of `20` to the store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When that is done, the store value gradually increases from `10` to `20` over
    one second. If we use this store value as the height of an element, the element’s
    height will smoothly grow or shrink toward the target value as we assign a new
    value to the store, resulting in a visually appealing and fluid transition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us try changing the height from a `tweened` store to a `spring` store.
    Do not worry about the options in the `spring` function, as we will explain them
    in the next section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, as you assign a new value to the store, you will notice that, similar to
    when using the `tweened` store, the store value changes over time to the new value
    but at a different rate.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the `tweened` and `spring` stores are powerful features in Svelte
    that enable you to create smooth animations and transitions in your applications.
    These stores allow for eased value changes. When used as component states, they
    allow state updates in a more natural and fluid manner.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between a `tweened` store and a `spring` store is that a `tweened`
    store provides a way to smoothly transition between two values over a specified
    duration using an easing function, whereas a `spring` store is designed for physics-based
    animations, where elements behave as if they were attached to a spring.
  prefs: []
  type: TYPE_NORMAL
- en: Let us dive in and look at how we can use the `tweened` and `spring` stores.
  prefs: []
  type: TYPE_NORMAL
- en: Using the tweened and spring stores
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`tweened` is a store that smoothly transitions between numeric values over
    a specified duration using a chosen easing function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how you can create a `tweened` store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding snippet, we created a `tweened` store called `progress`, with
    `0` as the initial store value. When you set a new value for the `progress` store,
    the store value of the `progress` store stays the same for 0.5 seconds, then transitions
    to the new value in 1 second, using the `cubicOut` easing function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function signature for the `tweened` store is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`initialValue` is the initial numeric value of the store.'
  prefs: []
  type: TYPE_NORMAL
- en: '`options` is an object containing the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`duration` (default: `400`): The duration of the transition in milliseconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`easing` (default: `linear`): The easing function to use for the transition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Svelte provides various easing functions in the `svelte/easing` module, such
    as `linear`, `quadIn`, and `expoOut`. You can also create a custom easing function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`delay` (default: `0`): The delay in milliseconds before the transition starts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the other hand, `spring` is a store that smoothly transitions between numeric
    values using a spring-based physics simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you can create a `spring` store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding snippet, we created a `spring` store called `position`, with
    `0` as the initial store value. When you set a new value for the `position` store,
    this value will bounce toward the target value and oscillate around the target
    value for a while until it settles at it. The amplitude and duration of the oscillations
    depend on the `stiffness`, `damping`, and `precision` values configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function signature for the `spring` store is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`initialValue` is the initial numeric value of the store.'
  prefs: []
  type: TYPE_NORMAL
- en: '`options` is an object containing the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`stiffness` (default: `0.15`): The stiffness of the spring. Higher values result
    in a stiffer spring, which causes quicker and more forceful transitions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`damping` (default: `0.8`): The damping coefficient of the spring. Higher values
    result in more damping, which causes the spring to settle more quickly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`precision` (default: `0.01`): The threshold at which the spring is considered
    to be at rest. Smaller values result in more accurate simulations but may take
    longer to settle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using tweened and spring stores with arrays and objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both `tweened` and `spring` stores can handle not just single numeric values,
    but also arrays of numbers and objects with numeric properties. This makes it
    easy to create complex animations involving multiple values.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you pass an array of numbers as the initial value, the stores will smoothly
    transition each element of the array independently. Here’s an example using an
    array of two numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, when you pass an object with numeric properties as the initial value,
    the stores will smoothly transition each property independently. Here’s an example
    using an object with two numeric properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When using arrays or objects, you can access and use the individual values
    in your Svelte component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This capability to handle arrays and objects makes the `tweened` and `spring`
    stores even more versatile and powerful, enabling you to create intricate animations
    with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to use the `tweened` and `spring` stores, let us use them
    to create an animated graph.
  prefs: []
  type: TYPE_NORMAL
- en: Examples – creating an animated graph with the tweened and spring stores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explore an example that demonstrates the power of the
    `tweened` and `spring` stores. We will create an animated bar chart where the
    bars dynamically resize to reflect updated data values. By adding animation to
    the bar chart, we can effectively highlight data changes and provide insights
    into complex datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, let us create a bar chart component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the code snippet provided, we initialize the `data` variable with an array
    of 10 randomly generated items, created using the `generateData` function. The
    `generateData` function takes a `length` parameter and creates an array of randomly
    generated data of the specified length.
  prefs: []
  type: TYPE_NORMAL
- en: With the `data` array, we use the `{#each}` block to create a `<div>` element
    for each item in the array, setting the width of the `<div>` element to the value
    of the corresponding item in the array.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, we have a horizontal bar chart displaying 10 bars with randomly
    generated widths.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make things more engaging, we will update the values of the bar chart at
    fixed intervals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We initiate an interval of 1 second using `setInterval` as soon as the component
    is mounted. On each interval, we update the data by regenerating it with `generateData(10)`.
  prefs: []
  type: TYPE_NORMAL
- en: With this new code addition, you’ll observe that the horizontal bars alter their
    width during each interval. The width of the horizontal bars adjusts suddenly,
    creating a jarring visual effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s utilize the `tweened` store to make the bars grow or shrink smoothly
    every time the data changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s import the `tweened` store from `svelte/motion`. We’ll then wrap
    the `data` array with the `tweened` store. As shown in the previous section, we
    can pass an array of numbers to the `tweened` function to create a `tweened` store.
    This store will smoothly transition each number in the array independently when
    updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, since `data` is a Svelte store, we need to update its value using the
    `$data` variable instead when making changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{#each $data as value}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Putting all these changes together, you will now observe that the horizontal
    bars grow and shrink smoothly, greatly improving the visual appeal and user experience
    of the bar chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, creating a smoothly animating chart using the `tweened` store
    is quite straightforward. Before we move on to the next section, we encourage
    you to try this on your own: replace the `tweened` function with `spring` and
    observe the changes in the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise – creating an animating line graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you’ve seen how to create an animating bar chart, it’s time for you
    to have a shot at creating an animating line graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the `d3-shape` library ([https://github.com/d3/d3-shape](https://github.com/d3/d3-shape)),
    which offers a convenient `line` method that generates an SVG path based on an
    array of items. Here is an example of using the `line` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we utilize the `line` method to create a `pathGenerator`
    function, which generates an SVG path by mapping the array’s values to the *y*
    coordinates. You can create a line graph by using the returned SVG path with the
    `<path>` element in an SVG.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve completed your implementation, feel free to compare your results
    with our example at [https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/02-line-chart](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/02-line-chart).
    Good luck and have fun experimenting with your animated line graph!
  prefs: []
  type: TYPE_NORMAL
- en: After familiarizing ourselves with using the `tweened` and `spring` stores with
    numbers, arrays, and objects, it is now time for us to incorporate non-numeric
    values. This will be achieved through the creation of custom tweened interpolators,
    which we will explore in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom tweened interpolators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you may want to transition between non-numeric values, such as colors.
    Fortunately, this doesn’t prevent us from using the `tweened` store. The `tweened`
    function offers an option to define custom interpolation between two values.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll explore how to create a custom interpolation to smoothly
    transition between two colors.
  prefs: []
  type: TYPE_NORMAL
- en: But what is interpolation?
  prefs: []
  type: TYPE_NORMAL
- en: When transitioning between two values, interpolating means generating intermediate
    values between the values, to create a smooth transition.
  prefs: []
  type: TYPE_NORMAL
- en: For example, consider a `tweened` store initialized at `0`, and we set it to
    `100`. The `tweened` store generates intermediate values between `0` and `100`,
    such as `20`, `40`, `60`, and so on, while updating the store value with these
    intermediate values. As a result, during the transition from `0` to `100`, the
    store value smoothly changes, providing a visually appealing progression from
    `0` to `100`.
  prefs: []
  type: TYPE_NORMAL
- en: This process of generating intermediate values is known as interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: The default `tweened` store is capable of interpolating between two numbers,
    two arrays of numbers, and two objects with numeric property values. However,
    it doesn’t know how to interpolate between two colors. In such cases, we can pass
    a custom interpolation function when creating a `tweened` store.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function signature of the `tweened` store interpolation looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this function, `a` and `b` represent the starting and ending values, while
    `t` is a value between `0` and `1` indicating the progress of the transition.
    The `interpolate` function should return another function that calculates and
    returns the intermediate value based on `t`, the progress of the transition.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, an `interpolate` function that interpolates between two numbers
    linearly looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `interpolate` function returns another function that takes a progress value,
    `t`, and calculates a linear interpolation between `a` and `b` based on the `t`
    value. When `t` is `0`, the function returns `a`, and when `t` is `1`, it returns
    `b`. For values of `t` between 0 and 1, the result is proportionally between `a`
    and `b`.To create an interpolation function for colors, we could break the colors
    down into individual **red, green, and blue** (**RGB**) components and interpolate
    each of the components separately. After interpolating each component, we could
    then recombine them to form the intermediate color.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we could use a library that has already implemented such interpolation.
    A good example of such a library is `d3-interpolate` ([https://github.com/d3/d3-interpolate](https://github.com/d3/d3-interpolate)).
    By using a well-tested library such as `d3-interpolate`, we can save time and
    ensure that our color interpolation is accurate and efficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example using `d3-interpolate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we import the `interpolateRgb` function from
    `d3-interpolate`, which returns an interpolator function for the colors `a` and
    `b`. We then create our custom interpolate function, `interpolateColor`, which
    returns a function that calculates the intermediate color based on the progress,
    `t`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use our custom `interpolate` function when creating a `tweened` store, we
    can pass the `interpolate` function in the second argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: And that’s it; you can now create a `tweened` store for colors that can smoothly
    transition between them.
  prefs: []
  type: TYPE_NORMAL
- en: You can find a code example of using color interpolation on GitHub at [https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/04-interpolation](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/04-interpolation).
  prefs: []
  type: TYPE_NORMAL
- en: By now, you’ve learned how to use a `tweened` store to create animated graphs
    and how to transition between non-numeric values using a custom `interpolate`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore more examples using the `tweened` and `spring` stores to create
    fluid user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Examples – creating an animated image preview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we’ll create an image preview feature that allows users to
    view a larger, more detailed version of a thumbnail image when they click on it,
    enhancing the user’s visual experience and allowing them to inspect images more
    closely.
  prefs: []
  type: TYPE_NORMAL
- en: While building this feature, you’ll see how we can utilize the `spring` store
    to create a more fluid and natural user experience, making the transitions between
    images and their larger previews feel smooth and engaging.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, let’s create a list of images that will be displayed on our page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we create an array of images containing the paths to our image
    files. We use the `{#each}` block to loop through the images and create a `<div>`
    element containing an `<img>` element for each image.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding snippet, the `<style>` section is omitted because it is not
    essential for understanding how the code functions. If you would like to know
    what the styles look like, you can find them at [https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/03-image-preview](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/03-image-preview).
  prefs: []
  type: TYPE_NORMAL
- en: We keep the references to the `<img>` elements inside the `imgElements` variable.
    This will be useful later.
  prefs: []
  type: TYPE_NORMAL
- en: 'To preview the images and close the preview, we need to implement two functions,
    `openPreview` and `closePreview`, along with a variable, `selectedImageIndex`,
    to keep track of the currently previewed image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we initialize `selectedImageIndex` to `-1`, indicating
    that no image is selected. The `openPreview` function sets `selectedImageIndex`,
    while `closePreview` unsets it. Lastly, we add a click event listener to call
    `openPreview` for the clicked image.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a black backdrop for our image preview, we add a `<div>`element,
    which will have the `.backdrop` class only when an image is selected. Clicking
    on the backdrop would close the preview:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: To display the image preview, our goal is to emphasize, enlarge, and center
    the image on the screen. In order to accomplish this, we must determine the target
    width and height for the enlarged image and calculate the *x* and *y* positions
    required to center it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For simplicity, let’s assume that the image has a 1:1 aspect ratio. We’ll set
    the target width and height to be 80% of the smaller value between the window
    height and window width. With the target height and width determined, we can use
    these values to calculate the *x* and *y* positions required to center the image
    on the screen. Let’s see how:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the code snippet, we set the style for the selected image. When an image
    is selected, we use `position: fixed` to position it, allowing us to set the `left`
    and `top` positions of the image relative to the viewport. At this point, we have
    a simple image preview component.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s move on to an interesting question: how can we use the `spring`
    store to make the preview more fluid, rather than abruptly placing the image at
    the center of the screen?'
  prefs: []
  type: TYPE_NORMAL
- en: 'One idea is to use `transform: translate` instead of directly setting the left
    and top positions to center the image. We can keep the left and top positions
    unchanged, and use `transform: translate` to move the image to the center of the
    screen. The values for the translation offsets would come from the `spring` store.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The reason for using `transform: translate` instead of updating the left and
    top positions is that it allows for smoother and more efficient animations, as
    it doesn’t trigger layout recalculations and repaints as frequently as updating
    positional properties such as `left` and `top`. Also, using `transform: translate`
    makes it much easier to reset the image back to its original position by simply
    resetting the translation offset back to `0`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can apply this idea to the width and height of the image. We
    can maintain the original image dimensions and utilize `transform: scale` to resize
    the image.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With this idea ready, let’s get to the code. Here, I initialize the transformation
    as a `spring` store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The default value of the `transform` `spring` store is a `0` translation offset
    and `1` as the scale.
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep the image in its original position after setting it to use `position:
    fixed`, we need to get the `<img>` element’s current position and dimension, which
    can be obtained through `getBoundingClientRect`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous formula we calculated for the `left`, `top`, `width`, and `height`
    values to center and enlarge the image will be our target `left`, `top`, `width`,
    and `height`. They will be used to calculate the translation offset and scale:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The translation offset is calculated using the difference between the target
    position and the actual position, while the scale is the ratio between the target
    width and height compared to the actual width and height.
  prefs: []
  type: TYPE_NORMAL
- en: 'Incorporating the transform values into the `<img>` styles looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: With these changes, the image will smoothly spring into the center when clicked,
    creating a more fluid and natural user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Now it’s your turn to try it for yourself. Experiment with creating an opacity
    value using the `spring` store and use this value to adjust the dimness of the
    image preview backdrop. This will further enhance the fluidity and visual appeal
    of the image preview component.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the `tweened` and `spring` stores from Svelte.
  prefs: []
  type: TYPE_NORMAL
- en: We explored how to use the `tweened` and `spring` stores to create smooth animations
    and transitions, enhancing the visual appeal and user experience. By working with
    custom interpolation functions and applying them to non-numeric values, such as
    colors, we’ve expanded the possibilities for creating dynamic and engaging user
    interface elements.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the chapter, we’ve seen multiple examples of the `tweened` and `spring`
    stores in action, seeing how easy it is to use the `tweened` and `spring` stores
    to create animations. Hopefully, you are now more comfortable using the `tweened`
    and `spring` stores in your Svelte projects.
  prefs: []
  type: TYPE_NORMAL
- en: This is our last chapter discussing Svelte context and Svelte stores. In the
    next chapter, we will look into transitions, namely, how to use transitions in
    our Svelte components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 4: Transitions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final section, we will delve into Svelte transitions. We will begin
    by understanding how to incorporate built-in transitions in our Svelte components.
    Following that, we will guide you through creating your own custom transitions.
    To end the section, we will wrap up by emphasizing accessibility and how we can
    create an accessible application with transitions that caters to all users.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B18887_13.xhtml#_idTextAnchor187)*, Using Transitions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B18887_14.xhtml#_idTextAnchor202)*, Exploring Custom Transitions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B18887_15.xhtml#_idTextAnchor211)*, Accessibility with Transitio*n'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
