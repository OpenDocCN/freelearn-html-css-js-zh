- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Stores and Animations
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储和动画
- en: In this chapter, we will delve into the world of Svelte animations, focusing
    on the power and versatility of the `tweened` and `spring` stores. The `tweened`
    and `spring` stores are writable stores in which their store value changes over
    time when the `set` or `update` method is invoked, enabling us to develop more
    complex and visually appealing animations. By effectively harnessing these stores,
    you can elevate the user experience and create applications that are both dynamic
    and captivating.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨 Svelte 动画的世界，重点关注 `tweened` 和 `spring` 存储的强大功能和多功能性。`tweened` 和
    `spring` 存储是可写存储，当调用 `set` 或 `update` 方法时，它们的存储值会随时间变化，使我们能够开发更复杂且视觉上吸引人的动画。通过有效地利用这些存储，您可以提升用户体验，并创建既动态又吸引人的应用程序。
- en: We begin this chapter by delving into the `tweened` and `spring` stores, learning
    how to create animations using these stores. Following that, we explore interpolation
    and the use of custom interpolations. Throughout the chapter, we examine various
    examples, such as animated graphs and image lightboxes, to illustrate the concepts.
    By the end of this chapter, you will have acquired the skills necessary to harness
    the `tweened` and `spring` stores effectively, enabling you to create intricate
    and engaging animations in your Svelte projects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从深入了解 `tweened` 和 `spring` 存储开始本章，学习如何使用这些存储创建动画。随后，我们探索插值和自定义插值的使用。在整个章节中，我们检查了各种示例，例如动画图表和图像灯箱，以说明概念。到本章结束时，您将掌握有效利用
    `tweened` 和 `spring` 存储所需的技能，使您能够在 Svelte 项目中创建复杂且引人入胜的动画。
- en: 'This chapter covers the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Introduction to the `tweened` and `spring` stores
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tweened` 和 `spring` 存储简介'
- en: Custom interpolation and its usage
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义插值及其使用
- en: Animating with the `tweened` and `spring` stores
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `tweened` 和 `spring` 存储进行动画
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the code used in this chapter on GitHub: [https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 GitHub 上找到本章使用的代码：[https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12)
- en: Introducing the tweened and spring stores
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 `tweened` 和 `spring` 存储
- en: Let us begin our journey into the world of Svelte animations by understanding
    the concept of `tweened` and `spring` stores.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过理解 `tweened` 和 `spring` 存储的概念，开始我们的 Svelte 动画之旅。
- en: The `tweened` and `spring` stores are writable stores that typically hold numeric
    values. To see the features they offer, let us compare them with a regular numeric
    variable.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`tweened` 和 `spring` 存储是通常包含数字值的可写存储。为了了解它们提供的功能，让我们将它们与一个常规的数字变量进行比较。'
- en: If you are not familiar with writable stores, you can check out [*Chapter 8*](B18887_08.xhtml#_idTextAnchor121),
    where we extensively explained Svelte stores and creating writable Svelte stores
    using the built-in `writable()` function.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉可写存储，您可以查看[*第 8 章*](B18887_08.xhtml#_idTextAnchor121)，在那里我们详细解释了 Svelte
    存储，以及如何使用内置的 `writable()` 函数创建可写 Svelte 存储。
- en: 'Usually, when you have a numeric variable and you update the variable, the
    value of the variable changes instantly. In the following example, we have a numeric
    variable, `height`, whose initial value is `10`. When we assign a new value of
    `20` to the variable, the value of the variable changes to `20` immediately:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当您有一个数字变量并且更新该变量时，变量的值会立即改变。在以下示例中，我们有一个初始值为 `10` 的数字变量 `height`。当我们将该变量的新值设置为
    `20` 时，变量的值会立即变为 `20`：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If we use this numeric variable to represent the height of an element or the
    progress in a progress bar, the height or progress jumps to the new value as soon
    as it is assigned. These abrupt changes can be jarring.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用这个数字变量来表示元素的高度或进度条中的进度，一旦赋值，高度或进度就会跳转到新值。这些突然的变化可能会让人感到震惊。
- en: So, how can we ensure a smooth transition when updating the target value?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何确保在更新目标值时有一个平滑的过渡？
- en: Svelte provides two built-in stores, `tweened` and `spring`, specifically designed
    for storing numeric values and allowing for smooth transitions to new values over
    a specified duration.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Svelte 提供了两个内置存储，`tweened` 和 `spring`，专门设计用于存储数字值，并允许在指定的时间内平滑过渡到新值。
- en: Let’s look at an example to get a clearer idea.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个示例来获得更清晰的概念。
- en: 'In the example, we create a `tweened` store with an initial value of `10`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，我们创建了一个初始值为 `10` 的 `tweened` 存储：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, we assign a new value of `20` to the store:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将存储库的新值设置为`20`：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When that is done, the store value gradually increases from `10` to `20` over
    one second. If we use this store value as the height of an element, the element’s
    height will smoothly grow or shrink toward the target value as we assign a new
    value to the store, resulting in a visually appealing and fluid transition.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当完成这些操作后，存储库的值在一秒钟内逐渐从`10`增加到`20`。如果我们将这个存储库值用作元素的宽度，那么当我们将新值分配给存储库时，元素的宽度将平滑地增长或缩小到目标值，从而实现视觉上吸引人且流畅的过渡。
- en: 'Let us try changing the height from a `tweened` store to a `spring` store.
    Do not worry about the options in the `spring` function, as we will explain them
    in the next section:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试将高度从`tweened`存储库更改为`spring`存储库。请不要担心`spring`函数中的选项，因为我们将它们在下一节中解释：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, as you assign a new value to the store, you will notice that, similar to
    when using the `tweened` store, the store value changes over time to the new value
    but at a different rate.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你为存储库分配新值时，你会注意到，与使用`tweened`存储库时类似，存储库的值随时间变化到新值，但变化速率不同。
- en: As you can see, the `tweened` and `spring` stores are powerful features in Svelte
    that enable you to create smooth animations and transitions in your applications.
    These stores allow for eased value changes. When used as component states, they
    allow state updates in a more natural and fluid manner.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`tweened`和`spring`存储库是Svelte中的强大功能，使您能够在应用程序中创建平滑的动画和过渡。这些存储库允许进行平滑的值变化。当用作组件状态时，它们允许以更自然和流畅的方式更新状态。
- en: The difference between a `tweened` store and a `spring` store is that a `tweened`
    store provides a way to smoothly transition between two values over a specified
    duration using an easing function, whereas a `spring` store is designed for physics-based
    animations, where elements behave as if they were attached to a spring.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`tweened`存储库和`spring`存储库之间的区别在于，`tweened`存储库提供了一种使用缓动函数在指定的时间内平滑过渡两个值的方法，而`spring`存储库是为基于物理的动画设计的，其中元素表现得就像它们被连接到一个弹簧上。'
- en: Let us dive in and look at how we can use the `tweened` and `spring` stores.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨如何使用`tweened`和`spring`存储库。
- en: Using the tweened and spring stores
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`tweened`和`spring`存储库
- en: '`tweened` is a store that smoothly transitions between numeric values over
    a specified duration using a chosen easing function.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`tweened`是一个存储库，它使用选择的缓动函数在指定的时间内平滑地过渡到数值。'
- en: 'Here is how you can create a `tweened` store:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建一个`tweened`存储库的方法：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding snippet, we created a `tweened` store called `progress`, with
    `0` as the initial store value. When you set a new value for the `progress` store,
    the store value of the `progress` store stays the same for 0.5 seconds, then transitions
    to the new value in 1 second, using the `cubicOut` easing function.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们创建了一个名为`progress`的`tweened`存储库，其初始存储库值为`0`。当你为`progress`存储库设置新值时，`progress`存储库的存储库值在0.5秒内保持不变，然后使用`cubicOut`缓动函数在1秒内过渡到新值。
- en: 'The function signature for the `tweened` store is as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`tweened`存储库的函数签名如下：'
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`initialValue` is the initial numeric value of the store.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`initialValue`是存储库的初始数值。'
- en: '`options` is an object containing the following properties:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`options`是一个包含以下属性的对象：'
- en: '`duration` (default: `400`): The duration of the transition in milliseconds.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`duration`（默认：`400`）：过渡的持续时间（以毫秒为单位）。'
- en: '`easing` (default: `linear`): The easing function to use for the transition.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`easing`（默认：`linear`）：用于过渡的缓动函数。'
- en: Svelte provides various easing functions in the `svelte/easing` module, such
    as `linear`, `quadIn`, and `expoOut`. You can also create a custom easing function.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Svelte在`svelte/easing`模块中提供了各种缓动函数，例如`linear`、`quadIn`和`expoOut`。您还可以创建自定义缓动函数。
- en: '`delay` (default: `0`): The delay in milliseconds before the transition starts.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delay`（默认：`0`）：在过渡开始之前的延迟（以毫秒为单位）。'
- en: On the other hand, `spring` is a store that smoothly transitions between numeric
    values using a spring-based physics simulation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`spring`是一个存储库，它使用基于弹簧的物理模拟平滑地过渡到数值。
- en: 'Here’s how you can create a `spring` store:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建一个`spring`存储库的方法：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding snippet, we created a `spring` store called `position`, with
    `0` as the initial store value. When you set a new value for the `position` store,
    this value will bounce toward the target value and oscillate around the target
    value for a while until it settles at it. The amplitude and duration of the oscillations
    depend on the `stiffness`, `damping`, and `precision` values configured.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们创建了一个名为`position`的`spring`存储，其初始存储值为`0`。当您为`position`存储设置新值时，此值将弹向目标值，并在目标值周围振荡一段时间，直到稳定下来。振荡的幅度和持续时间取决于配置的`stiffness`、`damping`和`precision`值。
- en: 'The function signature for the `spring` store is as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`spring`存储的函数签名如下：'
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`initialValue` is the initial numeric value of the store.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`initialValue`是存储的初始数值。'
- en: '`options` is an object containing the following properties:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`options`是一个包含以下属性的对象：'
- en: '`stiffness` (default: `0.15`): The stiffness of the spring. Higher values result
    in a stiffer spring, which causes quicker and more forceful transitions.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stiffness`（默认：`0.15`）：弹簧的刚度。较高的值会导致更刚性的弹簧，从而引起更快、更有力的转换。'
- en: '`damping` (default: `0.8`): The damping coefficient of the spring. Higher values
    result in more damping, which causes the spring to settle more quickly.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`damping`（默认：`0.8`）：弹簧的阻尼系数。较高的值会导致更多的阻尼，使弹簧更快地稳定下来。'
- en: '`precision` (default: `0.01`): The threshold at which the spring is considered
    to be at rest. Smaller values result in more accurate simulations but may take
    longer to settle.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`precision`（默认：`0.01`）：当弹簧被认为处于静止状态时的阈值。较小的值会导致更精确的模拟，但可能需要更长的时间才能稳定。'
- en: Using tweened and spring stores with arrays and objects
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数组和对象与`tweened`和`spring`存储
- en: Both `tweened` and `spring` stores can handle not just single numeric values,
    but also arrays of numbers and objects with numeric properties. This makes it
    easy to create complex animations involving multiple values.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`tweened`和`spring`存储不仅可以处理单个数值，还可以处理数字数组和具有数值属性的对象。这使得创建涉及多个值的复杂动画变得容易。'
- en: 'When you pass an array of numbers as the initial value, the stores will smoothly
    transition each element of the array independently. Here’s an example using an
    array of two numbers:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当您传递一个数字数组作为初始值时，存储将独立平滑地过渡数组的每个元素。以下是一个使用两个数字数组的示例：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Similarly, when you pass an object with numeric properties as the initial value,
    the stores will smoothly transition each property independently. Here’s an example
    using an object with two numeric properties:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，当您传递具有数值属性的对象作为初始值时，存储将独立平滑地过渡每个属性。以下是一个使用具有两个数值属性的对象的示例：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When using arrays or objects, you can access and use the individual values
    in your Svelte component as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用数组或对象时，您可以在Svelte组件中如下访问和使用单个值：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This capability to handle arrays and objects makes the `tweened` and `spring`
    stores even more versatile and powerful, enabling you to create intricate animations
    with ease.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 处理数组和对象的能力使得`tweened`和`spring`存储更加灵活和强大，让您能够轻松创建复杂的动画。
- en: Now that we know how to use the `tweened` and `spring` stores, let us use them
    to create an animated graph.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何使用`tweened`和`spring`存储，让我们用它们来创建一个动画图表。
- en: Examples – creating an animated graph with the tweened and spring stores
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 - 使用`tweened`和`spring`存储创建动画图表
- en: In this section, we will explore an example that demonstrates the power of the
    `tweened` and `spring` stores. We will create an animated bar chart where the
    bars dynamically resize to reflect updated data values. By adding animation to
    the bar chart, we can effectively highlight data changes and provide insights
    into complex datasets.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨一个示例，展示`tweened`和`spring`存储的强大功能。我们将创建一个动画柱状图，其中柱子会动态调整大小以反映更新的数据值。通过向柱状图添加动画，我们可以有效地突出数据变化，并深入了解复杂的数据集。
- en: 'Firstly, let us create a bar chart component:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个柱状图组件：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the code snippet provided, we initialize the `data` variable with an array
    of 10 randomly generated items, created using the `generateData` function. The
    `generateData` function takes a `length` parameter and creates an array of randomly
    generated data of the specified length.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供的代码片段中，我们使用`generateData`函数初始化`data`变量，该函数使用`length`参数创建一个指定长度的随机生成数据数组。
- en: With the `data` array, we use the `{#each}` block to create a `<div>` element
    for each item in the array, setting the width of the `<div>` element to the value
    of the corresponding item in the array.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `data` 数组，我们通过 `{#each}` 块为数组中的每个项目创建一个 `<div>` 元素，并将 `<div>` 元素的宽度设置为数组中相应项目的值。
- en: As a result, we have a horizontal bar chart displaying 10 bars with randomly
    generated widths.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们得到了一个显示 10 个条形的水平条形图，它们的宽度是随机生成的。
- en: 'To make things more engaging, we will update the values of the bar chart at
    fixed intervals:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使事情更有趣，我们将以固定间隔更新条形图的值：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We initiate an interval of 1 second using `setInterval` as soon as the component
    is mounted. On each interval, we update the data by regenerating it with `generateData(10)`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 组件挂载后，我们立即使用 `setInterval` 启动一个 1 秒的间隔。在每次间隔中，我们通过使用 `generateData(10)` 重新生成数据来更新数据。
- en: With this new code addition, you’ll observe that the horizontal bars alter their
    width during each interval. The width of the horizontal bars adjusts suddenly,
    creating a jarring visual effect.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加这段新代码，你会观察到水平条在每次间隔期间改变它们的宽度。水平条的宽度突然调整，产生一种令人不适的视觉效果。
- en: 'Now, let’s utilize the `tweened` store to make the bars grow or shrink smoothly
    every time the data changes:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们利用 `tweened` 存储在数据更改时使条形图平滑地增长或缩小：
- en: 'First, let’s import the `tweened` store from `svelte/motion`. We’ll then wrap
    the `data` array with the `tweened` store. As shown in the previous section, we
    can pass an array of numbers to the `tweened` function to create a `tweened` store.
    This store will smoothly transition each number in the array independently when
    updated:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们从 `svelte/motion` 中导入 `tweened` 存储。然后，我们将使用 `tweened` 存储包装 `data` 数组。如前一小节所示，我们可以将数字数组传递给
    `tweened` 函数以创建一个 `tweened` 存储。当更新时，此存储将独立平滑地过渡数组中的每个数字：
- en: '[PRE13]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, since `data` is a Svelte store, we need to update its value using the
    `$data` variable instead when making changes:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，由于 `data` 是一个 Svelte 存储，在更改时我们需要使用 `$data` 变量而不是直接更新其值：
- en: '[PRE14]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '{#each $data as value}'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{#each $data as value}'
- en: '[PRE15]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Putting all these changes together, you will now observe that the horizontal
    bars grow and shrink smoothly, greatly improving the visual appeal and user experience
    of the bar chart.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些更改放在一起，你现在将观察到水平条形图平滑地增长和缩小，大大提高了条形图的视觉吸引力和用户体验。
- en: 'As you can see, creating a smoothly animating chart using the `tweened` store
    is quite straightforward. Before we move on to the next section, we encourage
    you to try this on your own: replace the `tweened` function with `spring` and
    observe the changes in the animation.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，使用 `tweened` 存储创建平滑动画的图表相当简单。在我们进入下一节之前，我们鼓励你亲自尝试：将 `tweened` 函数替换为 `spring`
    并观察动画的变化。
- en: Exercise – creating an animating line graph
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 – 创建一个动态的折线图
- en: Now that you’ve seen how to create an animating bar chart, it’s time for you
    to have a shot at creating an animating line graph.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了如何创建动态条形图，现在是时候尝试创建一个动态折线图了。
- en: 'You can use the `d3-shape` library ([https://github.com/d3/d3-shape](https://github.com/d3/d3-shape)),
    which offers a convenient `line` method that generates an SVG path based on an
    array of items. Here is an example of using the `line` method:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `d3-shape` 库 ([https://github.com/d3/d3-shape](https://github.com/d3/d3-shape))，它提供了一个方便的
    `line` 方法，该方法基于项目数组生成 SVG 路径。以下是如何使用 `line` 方法的示例：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding code snippet, we utilize the `line` method to create a `pathGenerator`
    function, which generates an SVG path by mapping the array’s values to the *y*
    coordinates. You can create a line graph by using the returned SVG path with the
    `<path>` element in an SVG.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用 `line` 方法创建了一个 `pathGenerator` 函数，该函数通过将数组的值映射到 *y* 坐标来生成 SVG
    路径。你可以通过在 SVG 中使用返回的 SVG 路径和 `<path>` 元素来创建折线图。
- en: Once you’ve completed your implementation, feel free to compare your results
    with our example at [https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/02-line-chart](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/02-line-chart).
    Good luck and have fun experimenting with your animated line graph!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了你的实现，请随意将你的结果与我们的示例进行比较，示例在 [https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/02-line-chart](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/02-line-chart)。祝你好运，享受实验你的动态折线图吧！
- en: After familiarizing ourselves with using the `tweened` and `spring` stores with
    numbers, arrays, and objects, it is now time for us to incorporate non-numeric
    values. This will be achieved through the creation of custom tweened interpolators,
    which we will explore in the next section.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在熟悉了使用 `tweened` 和 `spring` 存储器处理数字、数组和对象之后，现在是时候将非数值值纳入其中了。这将通过创建自定义缓动插值器来实现，我们将在下一节中探讨。
- en: Creating custom tweened interpolators
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义缓动插值器
- en: Sometimes, you may want to transition between non-numeric values, such as colors.
    Fortunately, this doesn’t prevent us from using the `tweened` store. The `tweened`
    function offers an option to define custom interpolation between two values.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能想要在非数值值之间进行转换，例如颜色。幸运的是，这并不妨碍我们使用 `tweened` 存储器。`tweened` 函数提供了一个选项来定义两个值之间的自定义插值。
- en: In this section, we’ll explore how to create a custom interpolation to smoothly
    transition between two colors.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何创建自定义插值，以在两种颜色之间实现平滑过渡。
- en: But what is interpolation?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 但什么是插值？
- en: When transitioning between two values, interpolating means generating intermediate
    values between the values, to create a smooth transition.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当在两个值之间进行转换时，插值意味着在两个值之间生成中间值，以创建平滑的过渡。
- en: For example, consider a `tweened` store initialized at `0`, and we set it to
    `100`. The `tweened` store generates intermediate values between `0` and `100`,
    such as `20`, `40`, `60`, and so on, while updating the store value with these
    intermediate values. As a result, during the transition from `0` to `100`, the
    store value smoothly changes, providing a visually appealing progression from
    `0` to `100`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个初始化为 `0` 的 `tweened` 存储器，并将其设置为 `100`。`tweened` 存储器生成 `0` 和 `100` 之间的中间值，例如
    `20`、`40`、`60` 等等，同时使用这些中间值更新存储器值。因此，在从 `0` 到 `100` 的转换过程中，存储器值平滑地变化，提供了一个从 `0`
    到 `100` 的视觉上吸引人的进度。
- en: This process of generating intermediate values is known as interpolation.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 生成中间值的过程被称为插值。
- en: The default `tweened` store is capable of interpolating between two numbers,
    two arrays of numbers, and two objects with numeric property values. However,
    it doesn’t know how to interpolate between two colors. In such cases, we can pass
    a custom interpolation function when creating a `tweened` store.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 `tweened` 存储器能够插值两个数字、两个数字数组以及具有数值属性值的两个对象。然而，它不知道如何插值两个颜色。在这种情况下，我们可以在创建
    `tweened` 存储器时传递一个自定义插值函数。
- en: 'The function signature of the `tweened` store interpolation looks like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`tweened` 存储器插值的函数签名如下：'
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this function, `a` and `b` represent the starting and ending values, while
    `t` is a value between `0` and `1` indicating the progress of the transition.
    The `interpolate` function should return another function that calculates and
    returns the intermediate value based on `t`, the progress of the transition.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，`a` 和 `b` 代表起始值和结束值，而 `t` 是一个介于 `0` 和 `1` 之间的值，表示转换的进度。`interpolate`
    函数应该返回另一个函数，该函数根据 `t`（转换的进度）计算并返回中间值。
- en: 'For example, an `interpolate` function that interpolates between two numbers
    linearly looks like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个线性插值两个数字的 `interpolate` 函数看起来像这样：
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `interpolate` function returns another function that takes a progress value,
    `t`, and calculates a linear interpolation between `a` and `b` based on the `t`
    value. When `t` is `0`, the function returns `a`, and when `t` is `1`, it returns
    `b`. For values of `t` between 0 and 1, the result is proportionally between `a`
    and `b`.To create an interpolation function for colors, we could break the colors
    down into individual **red, green, and blue** (**RGB**) components and interpolate
    each of the components separately. After interpolating each component, we could
    then recombine them to form the intermediate color.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`interpolate` 函数返回另一个函数，该函数接受一个进度值 `t`，并根据 `t` 值在 `a` 和 `b` 之间计算线性插值。当 `t`
    为 `0` 时，函数返回 `a`，当 `t` 为 `1` 时，它返回 `b`。对于 `t` 在 0 和 1 之间的值，结果是 `a` 和 `b` 之间的比例值。要为颜色创建插值函数，我们可以将颜色分解成单个
    **红色、绿色和蓝色**（**RGB**）分量，并分别对每个分量进行插值。在插值每个分量之后，我们可以将它们重新组合以形成中间颜色。'
- en: Alternatively, we could use a library that has already implemented such interpolation.
    A good example of such a library is `d3-interpolate` ([https://github.com/d3/d3-interpolate](https://github.com/d3/d3-interpolate)).
    By using a well-tested library such as `d3-interpolate`, we can save time and
    ensure that our color interpolation is accurate and efficient.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用已经实现了此类插值的库。此类库的一个好例子是 `d3-interpolate` ([https://github.com/d3/d3-interpolate](https://github.com/d3/d3-interpolate))。通过使用经过良好测试的库如
    `d3-interpolate`，我们可以节省时间并确保我们的颜色插值既准确又高效。
- en: 'Here’s an example using `d3-interpolate`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个使用 `d3-interpolate` 的示例：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding code snippet, we import the `interpolateRgb` function from
    `d3-interpolate`, which returns an interpolator function for the colors `a` and
    `b`. We then create our custom interpolate function, `interpolateColor`, which
    returns a function that calculates the intermediate color based on the progress,
    `t`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们从 `d3-interpolate` 导入了 `interpolateRgb` 函数，该函数返回用于颜色 `a` 和 `b` 的插值函数。然后我们创建了一个自定义的插值函数
    `interpolateColor`，它返回一个基于进度 `t` 计算中间颜色的函数。
- en: 'To use our custom `interpolate` function when creating a `tweened` store, we
    can pass the `interpolate` function in the second argument:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建 `tweened` 存储库时，我们可以通过将 `interpolate` 函数作为第二个参数传递来使用我们的自定义 `interpolate`
    函数：
- en: '[PRE20]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: And that’s it; you can now create a `tweened` store for colors that can smoothly
    transition between them.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样；现在您可以为颜色创建一个可以平滑过渡的 `tweened` 存储库。
- en: You can find a code example of using color interpolation on GitHub at [https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/04-interpolation](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/04-interpolation).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 GitHub 上找到使用颜色插值的代码示例：[https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/04-interpolation](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/04-interpolation)。
- en: By now, you’ve learned how to use a `tweened` store to create animated graphs
    and how to transition between non-numeric values using a custom `interpolate`
    function.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，您已经学会了如何使用 `tweened` 存储库创建动画图表，以及如何使用自定义 `interpolate` 函数在非数值之间进行转换。
- en: Let’s explore more examples using the `tweened` and `spring` stores to create
    fluid user interfaces.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索更多使用 `tweened` 和 `spring` 存储库创建流畅用户界面的示例。
- en: Examples – creating an animated image preview
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 - 创建动画图像预览
- en: In this example, we’ll create an image preview feature that allows users to
    view a larger, more detailed version of a thumbnail image when they click on it,
    enhancing the user’s visual experience and allowing them to inspect images more
    closely.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建一个图像预览功能，允许用户在点击缩略图时查看更大、更详细的版本，从而增强用户的视觉体验，并使他们能够更仔细地检查图像。
- en: While building this feature, you’ll see how we can utilize the `spring` store
    to create a more fluid and natural user experience, making the transitions between
    images and their larger previews feel smooth and engaging.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建此功能时，您将看到我们如何利用 `spring` 存储库创建更流畅、更自然的用户体验，使图像及其更大预览之间的转换感觉平滑且引人入胜。
- en: 'To begin, let’s create a list of images that will be displayed on our page:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个将在页面上显示的图像列表：
- en: '[PRE21]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this example, we create an array of images containing the paths to our image
    files. We use the `{#each}` block to loop through the images and create a `<div>`
    element containing an `<img>` element for each image.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了一个包含图像文件路径的图像数组。我们使用 `{#each}` 块遍历图像，并为每个图像创建一个包含 `<img>` 元素的 `<div>`
    元素。
- en: In the preceding snippet, the `<style>` section is omitted because it is not
    essential for understanding how the code functions. If you would like to know
    what the styles look like, you can find them at [https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/03-image-preview](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/03-image-preview).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，省略了 `<style>` 部分，因为它对于理解代码功能不是必需的。如果您想了解样式的外观，可以在 [https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/03-image-preview](https://github.com/PacktPublishing/Real-World-Svelte/tree/main/Chapter12/03-image-preview)
    找到它们。
- en: We keep the references to the `<img>` elements inside the `imgElements` variable.
    This will be useful later.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `<img>` 元素的引用保存在 `imgElements` 变量中。这将在以后很有用。
- en: 'To preview the images and close the preview, we need to implement two functions,
    `openPreview` and `closePreview`, along with a variable, `selectedImageIndex`,
    to keep track of the currently previewed image:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了预览图像并关闭预览，我们需要实现两个函数 `openPreview` 和 `closePreview`，以及一个变量 `selectedImageIndex`
    来跟踪当前预览的图像：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding code snippet, we initialize `selectedImageIndex` to `-1`, indicating
    that no image is selected. The `openPreview` function sets `selectedImageIndex`,
    while `closePreview` unsets it. Lastly, we add a click event listener to call
    `openPreview` for the clicked image.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们将 `selectedImageIndex` 初始化为 `-1`，表示没有选择任何图片。`openPreview` 函数设置 `selectedImageIndex`，而
    `closePreview` 函数取消设置。最后，我们添加一个点击事件监听器，以便在点击的图片上调用 `openPreview` 函数。
- en: 'To create a black backdrop for our image preview, we add a `<div>`element,
    which will have the `.backdrop` class only when an image is selected. Clicking
    on the backdrop would close the preview:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为我们的图片预览创建一个黑色背景，我们添加了一个 `<div>` 元素，该元素仅在图片被选中时具有 `.backdrop` 类。点击背景将关闭预览：
- en: '[PRE23]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: To display the image preview, our goal is to emphasize, enlarge, and center
    the image on the screen. In order to accomplish this, we must determine the target
    width and height for the enlarged image and calculate the *x* and *y* positions
    required to center it.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示图片预览，我们的目标是强调、放大并在屏幕上居中显示图片。为了实现这一点，我们必须确定放大图片的目标宽度和高度，并计算所需的 *x* 和 *y*
    位置以使其居中。
- en: 'For simplicity, let’s assume that the image has a 1:1 aspect ratio. We’ll set
    the target width and height to be 80% of the smaller value between the window
    height and window width. With the target height and width determined, we can use
    these values to calculate the *x* and *y* positions required to center the image
    on the screen. Let’s see how:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，让我们假设图片的宽高比是 1:1。我们将目标宽度和高度设置为窗口高度和窗口宽度之间较小值的 80%。确定了目标高度和宽度后，我们可以使用这些值来计算在屏幕上居中图片所需的
    *x* 和 *y* 位置。让我们看看如何：
- en: '[PRE24]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the code snippet, we set the style for the selected image. When an image
    is selected, we use `position: fixed` to position it, allowing us to set the `left`
    and `top` positions of the image relative to the viewport. At this point, we have
    a simple image preview component.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '在代码片段中，我们设置了选中图片的样式。当图片被选中时，我们使用 `position: fixed` 来定位它，允许我们设置图片相对于视口的 `left`
    和 `top` 位置。到此为止，我们就有一个简单的图片预览组件了。'
- en: 'Now, let’s move on to an interesting question: how can we use the `spring`
    store to make the preview more fluid, rather than abruptly placing the image at
    the center of the screen?'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转向一个有趣的问题：我们如何使用 `spring` 存储使预览更加流畅，而不是突然将图片放置在屏幕中心？
- en: 'One idea is to use `transform: translate` instead of directly setting the left
    and top positions to center the image. We can keep the left and top positions
    unchanged, and use `transform: translate` to move the image to the center of the
    screen. The values for the translation offsets would come from the `spring` store.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '一个想法是使用 `transform: translate` 而不是直接设置左和顶位置来居中图片。我们可以保持左和顶位置不变，并使用 `transform:
    translate` 将图片移动到屏幕中心。平移偏移量的值将来自 `spring` 存储。'
- en: 'The reason for using `transform: translate` instead of updating the left and
    top positions is that it allows for smoother and more efficient animations, as
    it doesn’t trigger layout recalculations and repaints as frequently as updating
    positional properties such as `left` and `top`. Also, using `transform: translate`
    makes it much easier to reset the image back to its original position by simply
    resetting the translation offset back to `0`.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '使用 `transform: translate` 而不是更新左和顶位置的原因是，它允许更平滑、更高效的动画，因为它不像更新位置属性（如 `left`
    和 `top`）那样频繁地触发布局重新计算和重绘。此外，使用 `transform: translate` 使得只需将平移偏移量重置为 `0`，就可以轻松地将图片重置回原始位置。'
- en: 'Similarly, we can apply this idea to the width and height of the image. We
    can maintain the original image dimensions and utilize `transform: scale` to resize
    the image.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '同样，我们可以将这个想法应用到图片的宽度和高度上。我们可以保持原始图片的尺寸，并使用 `transform: scale` 来调整图片大小。'
- en: 'With this idea ready, let’s get to the code. Here, I initialize the transformation
    as a `spring` store:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在有了这个想法之后，让我们来看代码。在这里，我将转换初始化为一个 `spring` 存储：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The default value of the `transform` `spring` store is a `0` translation offset
    and `1` as the scale.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`transform` 的 `spring` 存储的默认值是一个 `0` 平移偏移量和 `1` 的缩放比例。'
- en: 'To keep the image in its original position after setting it to use `position:
    fixed`, we need to get the `<img>` element’s current position and dimension, which
    can be obtained through `getBoundingClientRect`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '在将图片设置为使用 `position: fixed` 后，为了保持图片在原始位置，我们需要获取 `<img>` 元素的当前位置和尺寸，这可以通过 `getBoundingClientRect`
    来实现：'
- en: '[PRE26]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The previous formula we calculated for the `left`, `top`, `width`, and `height`
    values to center and enlarge the image will be our target `left`, `top`, `width`,
    and `height`. They will be used to calculate the translation offset and scale:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前计算用于`left`、`top`、`width`和`height`值的公式，以实现图像居中和放大，将成为我们的目标`left`、`top`、`width`和`height`。它们将被用来计算位移偏移量和缩放：
- en: '[PRE27]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The translation offset is calculated using the difference between the target
    position and the actual position, while the scale is the ratio between the target
    width and height compared to the actual width and height.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 位移偏移量是通过目标位置与实际位置之间的差值来计算的，而缩放则是目标宽度和高度与实际宽度和高度之间的比率。
- en: 'Incorporating the transform values into the `<img>` styles looks as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 将变换值合并到`<img>`样式中的方法如下：
- en: '[PRE28]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: With these changes, the image will smoothly spring into the center when clicked,
    creating a more fluid and natural user experience.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些更改，当点击图像时，图像将平滑地弹回到中心，从而创造一个更加流畅和自然的用户体验。
- en: Now it’s your turn to try it for yourself. Experiment with creating an opacity
    value using the `spring` store and use this value to adjust the dimness of the
    image preview backdrop. This will further enhance the fluidity and visual appeal
    of the image preview component.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，轮到你自己尝试了。通过使用`spring`存储库创建一个不透明度值，并使用这个值来调整图像预览背景的暗度。这将进一步增强图像预览组件的流畅性和视觉吸引力。
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at the `tweened` and `spring` stores from Svelte.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Svelte的`tweened`和`spring`存储库。
- en: We explored how to use the `tweened` and `spring` stores to create smooth animations
    and transitions, enhancing the visual appeal and user experience. By working with
    custom interpolation functions and applying them to non-numeric values, such as
    colors, we’ve expanded the possibilities for creating dynamic and engaging user
    interface elements.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了如何使用`tweened`和`spring`存储库来创建平滑的动画和过渡，增强了视觉吸引力和用户体验。通过使用自定义插值函数并将它们应用于非数值，例如颜色，我们扩展了创建动态和引人入胜的用户界面元素的可能性。
- en: Throughout the chapter, we’ve seen multiple examples of the `tweened` and `spring`
    stores in action, seeing how easy it is to use the `tweened` and `spring` stores
    to create animations. Hopefully, you are now more comfortable using the `tweened`
    and `spring` stores in your Svelte projects.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了多个`tweened`和`spring`存储库在实际应用中的例子，了解了如何轻松地使用`tweened`和`spring`存储库来创建动画。希望你现在在使用Svelte项目中使用`tweened`和`spring`存储库时更加得心应手。
- en: This is our last chapter discussing Svelte context and Svelte stores. In the
    next chapter, we will look into transitions, namely, how to use transitions in
    our Svelte components.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本章最后讨论Svelte上下文和Svelte存储库的部分。在下一章中，我们将探讨过渡，特别是如何在Svelte组件中使用过渡。
- en: 'Part 4: Transitions'
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四部分：过渡
- en: In this final section, we will delve into Svelte transitions. We will begin
    by understanding how to incorporate built-in transitions in our Svelte components.
    Following that, we will guide you through creating your own custom transitions.
    To end the section, we will wrap up by emphasizing accessibility and how we can
    create an accessible application with transitions that caters to all users.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的最后部分，我们将深入探讨Svelte的过渡。我们将首先了解如何将内置过渡集成到我们的Svelte组件中。随后，我们将指导你创建自己的自定义过渡。为了结束本节，我们将强调可访问性以及如何通过过渡创建一个满足所有用户需求的应用程序。
- en: 'This part has the following chapters:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 13*](B18887_13.xhtml#_idTextAnchor187)*, Using Transitions*'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B18887_13.xhtml#_idTextAnchor187)*，使用过渡*'
- en: '[*Chapter 14*](B18887_14.xhtml#_idTextAnchor202)*, Exploring Custom Transitions*'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第14章*](B18887_14.xhtml#_idTextAnchor202)*，探索自定义过渡*'
- en: '[*Chapter 15*](B18887_15.xhtml#_idTextAnchor211)*, Accessibility with Transitio*n'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第15章*](B18887_15.xhtml#_idTextAnchor211)*，过渡中的可访问性*'
