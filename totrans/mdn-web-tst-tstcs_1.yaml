- en: '*Chapter 1*: Why TestCafe?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TestCafe—a new promising software testing framework or just a place where you
    can eat? Here, we will take a look at what TestCafe is and what its main features
    are. What is the technology? What do you need to know? How does it integrate with
    other tools? In this book, we will see what TestCafe is used for, go through its
    main features, and compare it with a well-known industry standard—Selenium.
  prefs: []
  type: TYPE_NORMAL
- en: More practically, we will develop a set of tests for a bug tracking system.
    You will learn how to write end-to-end tests using the TestCafe syntax and the
    features of the TestCafe framework. You'll go from setting up the environment
    all the way down to writing production-ready tests.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this book, we'll build a sample set of tests step by step that will
    log in to a website, verify the elements present on different pages, create/delete
    entities, and execute custom JavaScript code using TestCafe. Additionally, there
    will be several stages of refactoring to showcase setup/teardown and PageObjects.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Please keep in mind that this book does not pretend to be the only source of
    truth - its main goal is to demonstrate some original approaches, not to enforce
    the strict rules. Feel free to use and extend all the techniques explored in this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, we will have a clear idea of TestCafe and what lies
    ahead—a plan of features that will be tested. We will also review the demo website
    and come up with a set of test cases that will be automated in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up the contents of this chapter, the following main topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing TestCafe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the main features of TestCafe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing TestCafe and Selenium.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing the test project we will build.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing TestCafe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you work for a huge enterprise company or a small but innovative start-up
    and your automated tests need to support customers with older browsers the same
    as the new ones, you should definitely try TestCafe. Just like Selenium, it's
    open source, but you don't have to install any other packages or additional web
    drivers. TestCafe is a self-sufficient, free, end-to-end testing framework that
    combines unmatched ease of use with advanced automation and robust built-in stability
    mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: 'It was created by DevExpress (https://github.com/DevExpress) and was open sourced
    under the MIT license. TestCafe can take care of all stages of the automated testing
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: Launching applications before tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching different browsers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking screenshots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outputting test results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TestCafe does not require any additional installation of browser plugins and
    works in all major modern browsers right out of the box. It is gaining popularity
    as a faster and easier-to-use solution compared to Selenium.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've had a quick glimpse of what TestCafe is, let's continue with
    an overview of its main features.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the main features of TestCafe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s take a more detailed look at all the bells and whistles that TestCafe
    has to offer:'
  prefs: []
  type: TYPE_NORMAL
- en: Pretty much all TestCafe needs to run is a browser and Node.js configured on
    your machine, so there is **minimal setup**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TestCafe can run tests in **headless mode** (on Chrome or Firefox) without a
    need to render a **Document Object Model (DOM)**. This feature is extremely useful
    when running tests on any **Continuous Integration (CI)** system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TestCafe **supports all main operating systems**, including Windows, macOS,
    and Linux.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The officially supported browsers of TestCafe are Google Chrome (Stable, Beta,
    Dev, and Canary), Internet Explorer (11+), Microsoft Edge (Legacy and Chromium-based),
    Mozilla Firefox, Safari, Google Chrome mobile, and Safari mobile – so it is **cross-browser**.
    You can find a full list of supported browsers and their aliases at [https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#officially-supported-browsers](https://devexpress.github.io/testcafe/documentation/guides/concepts/browsers.html#officially-supported-browsers).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tests can be written in the latest **JavaScript (ES6+), TypeScript,** or **CoffeeScript**
    formats (we will be using JavaScript to demonstrate this in the upcoming chapters).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clear and flexible API with support of the **PageModel pattern** (we will see
    how this works in [*Chapter 6*](B16280_06_Final_JM_ePub.xhtml#_idTextAnchor132),
    *Refactoring with PageObjects*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stable tests due to the **smart assertion and automatic waiting mechanisms**
    (this will be discussed in [*Chapter 2*](B16280_02_Final_JM_ePub.xhtml#_idTextAnchor027),
    *Exploring TestCafe Under the Hood*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TestCafe has a lot of **free custom plugins**: cloud browser providers and
    emulators (SauceLabs, BrowserStack, CrossBrowserTesting, and so on), framework-specific
    selectors to interact with page elements in a way that is native to your framework
    (React, Angular, Vue, and Aurelia), custom reporters to get test results in different
    formats (TeamCity, Slack, NUnit, and TimeCafe), IDE plugins to run tests and view
    results from your favorite IDE (Visual Studio Code, Webstorm, and SublimeText),
    Cucumber support to create and run tests with Cucumber syntax, and much more,
    as TestCafe developers and community members are extremely active. All of these
    are ready to use and open source (https://github.com/DevExpress/testcafe#plugins).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the main features of the TestCafe open source framework. Wondering
    if there are any products on top of that that don't require you to write code?
    Sure thing!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing TestCafe Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to the open source TestCafe framework, there is a paid test recording
    tool called TestCafe Studio. It is built on top of the TestCafe engine to give
    test engineers the opportunity to record, run, and update tests without any special
    knowledge of JavaScript. It is achieved by transforming user actions from recording
    into repeatable code.
  prefs: []
  type: TYPE_NORMAL
- en: 'As well as complementing the features provided by the TestCafe framework, TestCafe
    Studio takes things even further with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visual test recorder**: This allows you to create tests without writing any
    code. It records your interactions with the web page in the browser and generates
    corresponding tests (https://docs.devexpress.com/TestCafeStudio/400165/guides/record-tests).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactive test editor**: Allows you to view and edit tests and hooks in
    a comprehensive, visualized manner (https://docs.devexpress.com/TestCafeStudio/400190/user-interface/test-editor).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automatic selector generation**: TestCafe Studio can generate element selectors
    while recording when you interact with a web page or when a web page element is
    picked with the element picker (https://docs.devexpress.com/TestCafeStudio/400407/test-actions/element-selectors#auto-generated-element-selectors).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run configuration manager**: Allows you to create, modify, and delete run
    configurations for desktop, headless, and mobile browsers (https://docs.devexpress.com/TestCafeStudio/400189/user-interface/run-configurations-dialog).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code editor**: Allows you to write and modify test scripts (https://docs.devexpress.com/TestCafeStudio/400181/user-interface/code-editor).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: TestCafe Studio has 30-day free trial period – you can find more information
    about this at [https://www.devexpress.com/products/testcafestudio/qa-end-to-end-web-testing.xml](https://www.devexpress.com/products/testcafestudio/qa-end-to-end-web-testing.xml).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's stop for a moment, catch our breath, and review what we have learned so
    far. We have acquired a basic understanding of what TestCafe is and have gone
    through a list of what it has to offer – the main features, plugins, and the TestCafe
    Studio test recording tool. Now, let's proceed with an overview of how TestCafe
    competes with Selenium.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing TestCafe and Selenium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TestCafe, with its 8,000+ stars on GitHub, is gaining a reputation as the 'next
    big thing' in the test automation world. Let's compare this new challenger with
    Selenium – a heavyweight leader with almost 18k+ stars that has ruled the industry
    for more than 15 years.
  prefs: []
  type: TYPE_NORMAL
- en: To start automating with Selenium, you will have to install the WebDriver client
    for the desired programming language and corresponding drivers for each browser
    you want your tests to run at. This may sound like an easy thing to do, but it's
    quite a time-consuming task to just get started with testing and is far from the
    ideal scenario of the run-one-command simplicity that we're used to with the majority
    of the packages in the Node.js infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: TestCafe includes a number of features that would not be possible if TestCafe
    was built on top of Selenium, such as spawning isolated test environments. Each
    of the tests performed by TestCafe runs as if it was started in a new incognito
    tab, so all the cookies and the storage are purged. This helps to reduce test
    code duplication and gives a significant execution time economy as you don't need
    to clear the browser state between tests to make them independent of each other.
  prefs: []
  type: TYPE_NORMAL
- en: This also enables one more extremely useful feature – user roles, that lets
    you save the state of different logged-in users and switch between them any time
    in any test (https://devexpress.github.io/testcafe/documentation/guides/advanced-guides/authentication.html).
  prefs: []
  type: TYPE_NORMAL
- en: Built-in automatic waiting is yet another killer feature introduced in TestCafe.
    What it means is that TestCafe will automatically wait for all XHR requests and
    page loads to be finished before running each test action, so you no longer need
    to write custom waiters in your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s compare TestCafe and Selenium side by side:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.0 - Table comparing TestCafe and Selenium'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.00_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.0 - Table comparing TestCafe and Selenium
  prefs: []
  type: TYPE_NORMAL
- en: To sum up what we have just learned, Selenium definitely provides an advantage
    with the number of supported programming languages, but needs a lot of tweaking
    and extending to work properly. On the other hand, TestCafe only supports JavaScript,
    TypeScript and CoffeeScript but offers much more comfort and ease of usage right
    out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: Let's proceed with our exploration and shed some light on the test project that
    we will be developing throughout the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the test project we will build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have got acquainted with the main features of TestCafe, let's think about
    the best way we can leverage this testing framework for our practical needs.
  prefs: []
  type: TYPE_NORMAL
- en: To make a set of tests that are reusable and demonstrate the main concepts of
    TestCafe, we will need an application that can be tested. It should be accessible
    online and should have a number of standard features, such as logging in, logging
    out, creating a new entity, displaying an entity, updating an entity, and deleting
    an entity.
  prefs: []
  type: TYPE_NORMAL
- en: The application we will use to do this is Redmine.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a test application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All of the previously mentioned features are present in any bug tracking system.
    However, one of the few applications that is publicly available and free to use
    is Redmine ([http://demo.redmine.org/](http://demo.redmine.org/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Redmine demo web portal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.01_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – Redmine demo web portal
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – Redmine demo web portal
  prefs: []
  type: TYPE_NORMAL
- en: Redmine is a web-based project management and issue-tracking tool released on
    June 25, 2006 and was written in Ruby on Rails. It is open sourced under the terms
    of the **GNU General Public License (GPL) v2**. Some of the features that Redmine
    supports include issue management (create, read, update, and delete), version
    management, document management, news, files, directories, calendars, charts,
    roadmaps, activity view, and member roles and permission management.
  prefs: []
  type: TYPE_NORMAL
- en: That's an impressive list, isn't it? Also, it is cross-platform, cross-database,
    and supports 49 languages. Redmine perfectly combines issue tracking and project
    management functionality, and can be considered a leading project management solution
    in the open source world.
  prefs: []
  type: TYPE_NORMAL
- en: Writing test cases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we now have a web application for testing, let's get familiar with it and
    write some test cases. We don't have to execute these tests right now, but we
    will need them when writing automated tests later on in the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what the Redmine login page looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Redmine login page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.02_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – Redmine login page
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s break down the actions that we''ll need to perform for logging in:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Sign in** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in the login details for the **Login** input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in the password for the **Password** input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Login** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is what we''ll see after logging in successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – The Redmine logged in page](img/Figure_1.03_B16280.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – The Redmine logged in page
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.3 – The Redmine logged-in page
  prefs: []
  type: TYPE_NORMAL
- en: To confirm that you have logged in properly, check whether the username is displayed
    in the top-right corner of the page. That's it – our first test case is ready!
  prefs: []
  type: TYPE_NORMAL
- en: But even before logging in, we will need to create a new test user. We will
    be doing this for each new test run – that's OK, however, as all users are wiped
    out from the Redmine demo portal on a regular basis. To stay on the safe side,
    for the test user's email, we will use one of the temporary email services – `test_user_testcafe_poc{randomDigits}@sharklasers.com`
    – and password – `test_user_testcafe_poc`.
  prefs: []
  type: TYPE_NORMAL
- en: To continue writing test cases in a more structured way, let's break them down
    into blocks one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new user
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to create a new user:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Register** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the **Login** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the **Password** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the **Confirmation** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the **First name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the **Last name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the **Email** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Submit** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected result is the **Your account has been activated. You can now log
    in.** notification, which should be displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Account activated'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.04_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.4 – Account activated
  prefs: []
  type: TYPE_NORMAL
- en: Logging in
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to log in:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Sign in** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the **Login** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the **Password** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Login** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected result is that the username should be displayed in the top-right
    corner of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Username displayed](img/Figure_1.05_B16280.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – Username displayed
  prefs: []
  type: TYPE_NORMAL
- en: Logging out
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to log out:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Sign out** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected result is that the sign-in link should be displayed in the top-right
    corner of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Sign-in link displayed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.06_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.6 – Sign-in link displayed
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to create a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Projects** link in the top panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **New project** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the **Name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected result is the **Successful creation.** notification displayed
    at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – The Successful creation. notification displayed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.07_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.7 – The Successful creation. notification displayed
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new issue
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to create a new issue:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Projects** link in the top panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the project link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **New issue** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the **Subject** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the **Description** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Priority** to **High**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected result is that the **Issue created.** notification should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – The Issue created. notification displayed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.08_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.8 – The Issue created. notification displayed
  prefs: []
  type: TYPE_NORMAL
- en: Verifying that the issue is displayed on a project page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to verify that the issue is displayed on a project page:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new issue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Projects** link in the top panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the project link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Issues** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected result is that the issue link should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Issue link displayed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.09_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.9 – Issue link displayed
  prefs: []
  type: TYPE_NORMAL
- en: Updating the issue
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to update the issue:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new issue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Projects** link in the top panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the project link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Issues** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the issue link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the **Subject** field and fill it in with a new subject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Priority** to **Normal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Submit** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected result is that the **Successful update.** notification should
    be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10 – The Successful update. notification displayed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.10_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.10 – The Successful update. notification displayed
  prefs: []
  type: TYPE_NORMAL
- en: Verifying that the updated issue is displayed on a project page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to verify that the updated issue is displayed on a project
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new issue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Projects** link in the top panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the project link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Issues** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected result is that the updated issue link should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.11 – Updated issue link displayed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.11_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.11 – Updated issue link displayed
  prefs: []
  type: TYPE_NORMAL
- en: Searching for the issue
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to search for the issue:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new issue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Search** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the issue's subject into the **Search** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Submit** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected result is that the issue link should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Issue link displayed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.12_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.12 – Issue link displayed
  prefs: []
  type: TYPE_NORMAL
- en: Deleting the issue
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to delete the issue:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new issue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Projects** link in the top panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the project link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Issues** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the issue link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Delete** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm the deletion in the browser modal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected result is that the **No data to display** notification should
    be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.13 – The No data to display notification displayed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.13_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.13 – The No data to display notification displayed
  prefs: []
  type: TYPE_NORMAL
- en: Uploading a file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to upload a file:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Projects** link in the top panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the project link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Files** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **New** file link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the path to a file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected result is that a link to the file and the MD5 checksum should
    be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.14 – Link to the file and the MD5 checksum displayed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.14_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.14 – Link to the file and the MD5 checksum displayed
  prefs: []
  type: TYPE_NORMAL
- en: Deleting the file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to delete the file:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload a new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Projects** link in the top panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the project link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Files** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the trash bin icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm the deletion in the browser modal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The expected result is that a link to the file and the MD5 checksum should
    not be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.15 – Link to the file and MD5 checksum not displayed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.15_B16280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.15 – Link to the file and MD5 checksum not displayed
  prefs: []
  type: TYPE_NORMAL
- en: While this test suite is relatively simple to build, it allows showcasing some
    of the most prominent features of TestCafe. Additionally, it demonstrates running
    the tests against a free and simple-to-use website, and it does not require you
    to build and deploy you own servers or backend services.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we reviewed what TestCafe is and its main features. While comparing
    TestCafe with its old and canonical rival – Selenium – we observed the strong
    and weak points of both frameworks. The main difference between Selenium and TestCafe
    is that Selenium is more heavyweight as it runs code through the Selenium server
    by interacting with the browser process itself, whereas TestCafe inserts a proxy
    in between that rewrites each URL and injects the test scripts into the browser.
    It runs as a Node.js process and can perform operations in both Node.js and browser
    contexts. The primary goal of TestCafe is to provide a modern tool that mitigates
    main test automation pain points and provides a convenient way to set up, maintain,
    and create new tests.
  prefs: []
  type: TYPE_NORMAL
- en: We also went through the testing project and came up with a plan for what test
    cases should be covered with the upcoming automation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive deeper and see how TestCafe operates under
    the hood, including what API it has and how built-in wait functions can help us
    to transform our test cases into a fast and reliable suite of automated tests.
  prefs: []
  type: TYPE_NORMAL
