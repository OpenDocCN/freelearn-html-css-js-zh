- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introduction to Node.js
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js 简介
- en: Welcome to the first chapter of the book! Node.js is one of the most relevant
    technologies available and allows you to build any kind of project (web, desktop,
    CLI tools, microservices, IoT, and so on) within the same stack. The community
    around the project is very powerful and innovative.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到本书的第一章！Node.js 是最相关的技术之一，它允许您在同一堆栈内构建任何类型的项目（Web、桌面、CLI 工具、微服务、物联网等）。围绕这个项目的社区非常强大且富有创新精神。
- en: In this chapter, we will explore the main features of Node.js and why it became
    so popular over time. Then, we will explore the Node.js architecture and how it
    works. Finally, we will explore the different versions of Node.js available to
    us.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 Node.js 的主要特性和它为何随着时间的推移而变得如此受欢迎。然后，我们将探讨 Node.js 的架构以及它是如何工作的。最后，我们将探讨我们可用的不同版本的
    Node.js。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: What makes Node.js so special and why it is a revolutionary technology
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使 Node.js 如此特别并使其成为革命性技术的因素是什么
- en: The Node.js architecture and how it works
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 的架构和它的工作原理
- en: How to identify the right Node.js version for your projects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何确定适合您项目的正确 Node.js 版本
- en: This knowledge will help you to decide when it is a good fit for your projects
    and will guide you around the complex ecosystem.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这项知识将帮助您决定何时适合您的项目，并引导您了解复杂的生态系统。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code files for the chapter can be found at [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在 [https://github.com/PacktPublishing/NodeJS-for-Beginners](https://github.com/PacktPublishing/NodeJS-for-Beginners)
    找到。
- en: Why is Node.js so popular?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么 Node.js 如此受欢迎？
- en: 'The official definition of Node.js is very simple, but it doesn’t explain why
    Node.js has become so popular over time:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 的官方定义非常简单，但它并没有解释为什么 Node.js 随着时间的推移变得如此受欢迎：
- en: '*“*Node.js® is an open-source, cross-platform JavaScript runtime environment.*”*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*“*Node.js® 是一个开源的、跨平台的 JavaScript 运行时环境。*”'
- en: In *Figure 1**.1*, we can see how the popularity of Node.js has been increasing
    over time, and even today, it is still growing fast.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 1.1* 中，我们可以看到 Node.js 的流行度是如何随着时间的推移而增加的，甚至至今仍在快速增长。
- en: '![Figure 1.1 – The interest in Node.js, generated using Google Trends](img/B21678_01_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 使用 Google Trends 生成的 Node.js 兴趣度](img/B21678_01_01.jpg)'
- en: Figure 1.1 – The interest in Node.js, generated using Google Trends
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 使用 Google Trends 生成的 Node.js 兴趣度
- en: Next, let’s explore the main reasons why Node.js is so popular.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们探讨 Node.js 如此受欢迎的主要原因。
- en: Lightweight and fast
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 轻量级且快速
- en: Node.js is a lightweight and fast runtime based on the V8 JavaScript engine,
    which is the same engine that powers Google Chrome and Microsoft Edge, among others.
    It is based on a single-thread architecture and event-driven model, which means
    that it doesn’t need to create a new thread for each request, as in other popular
    tools such as PHP. This is a huge advantage because the memory consumption is
    very low and the performance is very high.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 是一个基于 V8 JavaScript 引擎的轻量级且快速的运行时环境，V8 引擎同样也是 Google Chrome 和 Microsoft
    Edge 等浏览器所使用的引擎。它基于单线程架构和事件驱动模型，这意味着它不需要为每个请求创建一个新的线程，就像其他流行的工具如 PHP 那样。这是一个巨大的优势，因为内存消耗非常低，性能非常高。
- en: We will explore the single-thread architecture in detail in the upcoming sections.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中详细探讨单线程架构。
- en: Cross-platform and multi-purpose
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨平台和多用途
- en: Node.js is cross-platform, which means that we can run it on any operating system
    and architecture available in the modern market.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 是跨平台的，这意味着我们可以在现代市场上任何可用的操作系统和架构上运行它。
- en: Node.js is not only used to build web applications but it can also be used to
    build any kind of application, from a simple command-line tool to a complex desktop
    application such as Slack or Visual Studio Code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 不仅用于构建 Web 应用程序，还可以用于构建任何类型的应用程序，从简单的命令行工具到复杂的桌面应用程序，如 Slack 或 Visual
    Studio Code。
- en: Easy learning curve
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习曲线平缓
- en: Node.js is based on JavaScript, which is one of the most popular programming
    languages in the world. This means that millions of developers already know the
    language and they can easily start using Node.js.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 基于JavaScript，这是世界上最流行的编程语言之一。这意味着数百万的开发者已经熟悉这门语言，他们可以轻松地开始使用 Node.js。
- en: Any application that can be written in JavaScript, will eventually be written
    in JavaScript.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可以用 JavaScript 编写的应用程序最终都会用 JavaScript 编写。
- en: – Jeff Atwood (Atwood’s Law)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: – Jeff Atwood (Atwood’s Law)
- en: Also, the Node.js **application programming interface** (**API**) – the methods,
    libraries, and utilities that Node.js provides for us to use – is very simple
    and easy to use, so the learning curve is very small. You don’t need to master
    the Node.js API to start building web applications; you can progressively learn
    while you are building your application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Node.js 的 **应用程序编程接口**（**API**）——Node.js 为我们提供的用于使用的各种方法、库和实用工具——非常简单且易于使用，因此学习曲线非常小。你不需要精通
    Node.js API 就可以开始构建 Web 应用程序；你可以在构建应用程序的同时逐步学习。
- en: There are a lot of resources available to learn Node.js, from official documentation
    to online courses and tutorials in many languages and oriented to different profiles.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 学习 Node.js 的资源非常丰富，从官方文档到多种语言的在线课程和教程，面向不同的用户群体。
- en: Ecosystem
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生态系统
- en: Node.js has a huge ecosystem of packages, JavaScript libraries, and resources
    developed by the community that can be used to build any kind of application.
    There are more than two and a half million packages available in the npm Registry
    ([https://www.npmjs.com/](https://www.npmjs.com/)), which is the official package
    manager for Node.js.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 拥有一个庞大的生态系统，包括社区开发的包、JavaScript 库和资源，可用于构建任何类型的应用程序。npm 注册表中提供了超过两百五十万个包
    ([https://www.npmjs.com/](https://www.npmjs.com/))，这是 Node.js 的官方包管理器。
- en: Also, Node.js has huge support from cloud providers, which means that you can
    easily deploy your application to the cloud and scale it as much as you need.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Node.js 获得了云服务提供商的大力支持，这意味着你可以轻松地将你的应用程序部署到云端，并根据需要扩展它。
- en: Most of the emerging technologies provide **software development kits** (**SDKs**)
    for Node.js, so you can easily integrate your application with them. Many companies
    are using Node.js in production, so you can easily find support and resources
    to solve any problem that you may have.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数新兴技术都为 Node.js 提供了 **软件开发工具包**（**SDKs**），因此你可以轻松地将你的应用程序与它们集成。许多公司都在生产中使用
    Node.js，因此你可以轻松找到支持和资源来解决你可能遇到的任何问题。
- en: Also, many popular libraries are isomorphic, which means that they can be used
    in the browser and in the server, so you can reuse your code and avoid duplications.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，许多流行的库都是同构的，这意味着它们可以在浏览器和服务器中使用，因此你可以重用你的代码并避免重复。
- en: Community-powered
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社区驱动
- en: For me, the most important reason why Node.js is so popular is the community.
    Node.js has a huge community of developers that are constantly contributing to
    the project. This means that you can easily find support and resources to solve
    any problem that you may have and also to include new features or solve specific
    bugs.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，Node.js 如此受欢迎的最重要原因是社区。Node.js 拥有一个庞大的开发者社区，他们不断为项目做出贡献。这意味着你可以轻松找到支持和资源来解决你可能遇到的任何问题，也可以包括新功能或解决特定的错误。
- en: The Node.js Foundation merged with the JS Foundation in 2019 to create the OpenJS
    Foundation [https://openjsf.org/](https://openjsf.org/), which is the current
    organization that governs the Node.js project and other key projects in the JavaScript
    ecosystem, such as Appium, jQuery, Electron, Express, and webpack.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 基金会在 2019 年与 JS 基金会合并，成立了 OpenJS 基金会 [https://openjsf.org/](https://openjsf.org/)，这是目前管理
    Node.js 项目以及其他 JavaScript 生态系统中的关键项目（如 Appium、jQuery、Electron、Express 和 webpack）的组织。
- en: Important information
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: You can find the governance model of the OpenJS Foundation at [https://openjsf.org/about/governance/](https://openjsf.org/about/governance/)
    and the Node.js project at [https://nodejs.org/en/about/governance](https://nodejs.org/en/about/governance).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://openjsf.org/about/governance/](https://openjsf.org/about/governance/)
    找到 OpenJS 基金会的治理模式，以及在 [https://nodejs.org/en/about/governance](https://nodejs.org/en/about/governance/)
    找到 Node.js 项目的治理模式。
- en: Many companies are members of the OpenJS Foundation, such as Google, IBM, Microsoft,
    Netflix, Red Hat, GitHub, and many others ([https://openjsf.org/about/members/](https://openjsf.org/about/members/)).
    These provide a lot of support and resources to keep the project alive.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 许多公司都是 OpenJS 基金会的成员，例如 Google、IBM、Microsoft、Netflix、Red Hat、GitHub 以及许多其他公司
    ([https://openjsf.org/about/members/](https://openjsf.org/about/members/))。这些公司为保持项目活力提供了大量的支持和资源。
- en: As you can see, many factors are helping Node.js to become so popular, from
    a proven community-powered model to a solid ecosystem that brings many capabilities
    to Node.js. It appears that Node.js will remain popular in the future!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，许多因素都在帮助 Node.js 变得如此受欢迎，从经过验证的社区驱动模式到一个为 Node.js 带来许多能力的稳固生态系统。看起来 Node.js
    在未来仍将保持流行！
- en: In the next section, we will explore how the architecture works under the hood.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨底层架构是如何工作的。
- en: The Node.js single-thread architecture
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js的单线程架构
- en: 'When Node.js came out in 2009, it was a revolution in the web development world,
    as Ryan Dahl, the creator of Node.js, decided to use a very unusual approach at
    that time: a single-thread architecture.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当Node.js在2009年推出时，它是Web开发世界的一次革命，因为Node.js的创造者Ryan Dahl当时决定采用一个非常不寻常的方法：单线程架构。
- en: 'In his presentation about Node.js at the JSConf ([https://www.youtube.com/watch?v=EeYvFl7li9E](https://www.youtube.com/watch?v=EeYvFl7li9E)),
    Ryan Dahl said he wanted to achieve two key things when building Node.js: server-side
    JavaScript and non-blocking I/O.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在他的JSConf ([https://www.youtube.com/watch?v=EeYvFl7li9E](https://www.youtube.com/watch?v=EeYvFl7li9E))
    上的Node.js演讲中，Ryan Dahl说他构建Node.js时想要实现两个关键目标：服务器端JavaScript和非阻塞I/O。
- en: I/O needs to be done differently
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: I/O需要以不同的方式完成
- en: The common approach for I/O operations in web applications is to create a new
    thread for each request. This is a very expensive operation because the memory
    consumption is very high and the performance is very low.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序中，I/O操作的一般方法是为每个请求创建一个新的线程。这是一个非常昂贵的操作，因为内存消耗很高，性能很低。
- en: The idea behind this approach is to split the system resources and assign them
    to each thread. This is a very inefficient approach because, most of the time,
    the CPUs are idle, just waiting for the resources.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的理念是将系统资源分割并分配给每个线程。这是一个非常低效的方法，因为大多数时候，CPU都是空闲的，只是在等待资源。
- en: The other problem is that we are limited in the amount of memory that we can
    use because each thread needs to have its own memory space.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题是我们可使用的内存量有限，因为每个线程都需要有自己的内存空间。
- en: Overall, this process was very inefficient, and it was not scalable.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，这个过程非常低效，而且不具有可扩展性。
- en: Non-blocking I/O
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 非阻塞I/O
- en: With Node.js, we use a different approach. We won’t split the resources; we
    keep a single thread and use a non-blocking I/O model that allows us to free the
    resources while waiting, so we can continue processing requests.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在Node.js中，我们采用不同的方法。我们不会分割资源；我们保持一个单线程，并使用非阻塞I/O模型，这允许我们在等待时释放资源，因此我们可以继续处理请求。
- en: 'To make this possible, Node.js has two key dependencies: libuv ([https://libuv.org/](https://libuv.org/))
    and V8 ([https://v8.dev/](https://v8.dev/)).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，Node.js有两个关键依赖：libuv ([https://libuv.org/](https://libuv.org/)) 和 V8
    ([https://v8.dev/](https://v8.dev/))。
- en: '![Figure 1.2 – Diagram that showcase the relationship between the user code,
    v8, Node API and libuv (event queue and worker threads)](img/B21678_01_02.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 展示用户代码、V8、Node API和libuv（事件队列和工作线程）之间关系的图](img/B21678_01_02.jpg)'
- en: Figure 1.2 – Diagram that showcase the relationship between the user code, v8,
    Node API and libuv (event queue and worker threads)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – 展示用户代码、V8、Node API和libuv（事件队列和工作线程）之间关系的图
- en: As you can see, the architecture has many pieces and it can be a bit overwhelming
    at first. This diagram is not the full picture but it is a good starting point
    to understand how Node.js works in the context of this chapter. There are many
    pieces to understand from this figure, so let’s go step by step.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这个架构有很多部分，一开始可能会有些令人不知所措。这个图并不是完整的画面，但它是一个理解本章中Node.js工作原理的好起点。从这个图中可以理解很多内容，所以让我们一步一步来。
- en: Node.js application
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Node.js 应用程序
- en: This is the code that we write to build our application. It will be done in
    JavaScript and it can use Node.js APIs and third-party libraries.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是构建我们应用程序的代码。它将使用JavaScript编写，并可以使用Node.js API和第三方库。
- en: V8
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: V8
- en: This is the engine encapsulated in Node.js that will execute our JavaScript
    code. V8 is the same engine that is used in the Chrome browser under the hood.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Node.js中封装的引擎，它将执行我们的JavaScript代码。V8是Chrome浏览器底层使用的相同引擎。
- en: Node.js bindings
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Node.js绑定
- en: It is surprising for many developers to see that Node.js is written mostly in
    C/C++, but this is one of the reasons why Node.js is so fast. The Node.js bindings
    are the C/C++ code that will be executed when we use the Node.js APIs under the
    hood.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多开发者来说，看到Node.js主要是用C/C++编写的可能会感到惊讶，但这是Node.js如此快速的一个原因。Node.js的绑定是当我们在底层使用Node.js
    API时将被执行的C/C++代码。
- en: libuv
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: libuv
- en: This is the C library that will handle the I/O operations with multi-platform
    support. It will use the thread pool to execute the blocking operations and it
    will notify the Node.js bindings when the operation is completed. We will program
    Node.js defining functions that will be executed when certain async operations
    are completed. For example, when we try to read the content from a file, we will
    execute certain code when the content is available. libuv handles the low-level
    logic for this coordination to happen.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个支持多平台的 C 库，它将处理 I/O 操作。它将使用线程池来执行阻塞操作，并在操作完成后通知 Node.js 绑定。我们将通过定义在特定异步操作完成后将执行的函数来编程
    Node.js。例如，当我们尝试从文件中读取内容时，当内容可用时，我们将执行某些代码。libuv 处理这种协调的低级逻辑。
- en: Going deeper into the event loop
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入了解事件循环
- en: The event loop is the most critical part of the Node.js architecture. Keeping
    this in mind will help you to understand how Node.js works.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 事件循环是 Node.js 架构中最关键的部分。牢记这一点将有助于你理解 Node.js 的工作原理。
- en: As we have seen before, the new I/O operations approach is not magic, just a
    very smart way to handle and abstract using an asynchronous layer that is easily
    handled with JavaScript. This introduces the need for us to know how to do asynchronous
    programming. We will cover this topic in more detail in [*Chapter 4*](B21678_04.xhtml#_idTextAnchor132),
    but for now, we need to understand how the event loop works.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所看到的，新的 I/O 操作方法并非魔法，而是一种非常聪明的处理和抽象异步层的方式，这种异步层可以用 JavaScript 轻松处理。这引出了我们需要了解如何进行异步编程的需求。我们将在[*第
    4 章*](B21678_04.xhtml#_idTextAnchor132)中更详细地介绍这个主题，但就目前而言，我们需要理解事件循环是如何工作的。
- en: 'One fantastic resource to understand the event loop in more depth is this talk
    from Philip Roberts at JSConf EU 2014: *What the heck is the event loop anyway?*
    ([https://www.youtube.com/watch?v=8aGhZQkoFbQ](https://www.youtube.com/watch?v=8aGhZQkoFbQ)).
    It also includes a tool called Loupe ([http://latentflip.com/loupe](http://latentflip.com/loupe))
    to experiment with the event loop architecture yourself.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 深入理解事件循环的一个绝佳资源是 Philip Roberts 在 JSConf EU 2014 上的这次演讲：*究竟什么是事件循环？* ([https://www.youtube.com/watch?v=8aGhZQkoFbQ](https://www.youtube.com/watch?v=8aGhZQkoFbQ))。它还包括一个名为
    Loupe ([http://latentflip.com/loupe](http://latentflip.com/loupe)) 的工具，你可以用它自己实验事件循环架构。
- en: As you can see, Node.js is the product of combining several technologies. The
    event loop is quite an advanced topic that you will require some time to digest
    and understand fully, but don’t worry, as you can start working with Node.js even
    if you are not yet 100% clear on how the event loop and all the pieces work together.
    You will be able to learn about it better in practice with the exercises from
    the book. Now, let’s explore how Node.js organizes the versions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Node.js 是结合了多种技术的产物。事件循环是一个相当高级的话题，你需要一些时间来消化和完全理解，但不用担心，即使你还没有完全清楚事件循环以及所有部件是如何协同工作的，你仍然可以开始使用
    Node.js。你可以在书中的练习中更好地了解它。现在，让我们探索 Node.js 是如何组织版本的。
- en: Node.js versions
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js 版本
- en: Node.js follows **semantic versioning** (**SemVer**) ([https://semver.org/](https://semver.org/))
    and it is important to understand how this versioning works in order to choose
    the best version for the project.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 遵循**语义版本化**（**SemVer**）([https://semver.org/](https://semver.org/))，为了选择最适合项目的版本，理解这种版本化工作方式非常重要。
- en: Semantic versioning (SemVer)
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语义版本化（SemVer）
- en: When considering semantic versioning, it helps to determine what changes to
    anticipate as a user, especially whether they might cause disruptions or not.
    This understanding assists our end users in preparing for potential updates.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑语义版本化时，有助于确定作为用户可以预期哪些变化，特别是它们是否可能造成中断。这种理解有助于我们的最终用户为潜在更新做好准备。
- en: Semantic versioning is one of the most popular ways to version software. In
    the following figure, we can differentiate the elements used to build the release
    version.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 语义版本化是软件版本化中最受欢迎的方式之一。在下面的图中，我们可以区分构建发布版本所使用的元素。
- en: '![Figure 1.3 – Parts of a semantic version number (source: Devopedia 2020,
    https://devopedia.org/images/article/279/2766.1593275997.svg)](img/B21678_01_03.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 语义版本号的组成部分（来源：Devopedia 2020，https://devopedia.org/images/article/279/2766.1593275997.svg)](img/B21678_01_03.jpg)'
- en: 'Figure 1.3 – Parts of a semantic version number (source: Devopedia 2020, [https://devopedia.org/images/article/279/2766.1593275997.svg](https://devopedia.org/images/article/279/2766.1593275997.svg))'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 语义版本号的组成部分（来源：Devopedia 2020，[https://devopedia.org/images/article/279/2766.1593275997.svg](https://devopedia.org/images/article/279/2766.1593275997.svg))
- en: 'When a new version is released, the version number is incremented following
    the SemVer rules:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当发布新版本时，版本号将根据SemVer规则递增：
- en: '**Major** versions add incompatible API changes'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要**版本添加了不兼容的API更改'
- en: '**Minor** versions add functionality in a backward-compatible manner'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**次要**版本以向后兼容的方式添加功能'
- en: '**Patch** versions add backward-compatible bug fixes'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修补**版本添加了向后兼容的错误修复'
- en: Following these rules, we can easily upgrade the Node.js version in any project
    without breaking the code when the changes are cataloged as minor or a patch.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这些规则，我们可以在任何项目中轻松升级Node.js版本，而不会在变更被列为次要或修补时破坏代码。
- en: If we want to upgrade to a new major version, we will need to check whether
    there are any breaking changes that we need to address before upgrading. In most
    cases, the breaking changes are not related to our own code but to the dependencies
    that we are using in the project.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想升级到新主要版本，我们需要在升级前检查是否有任何需要解决的破坏性变更。在大多数情况下，破坏性变更与我们自己的代码无关，而是与我们在项目中使用的依赖项有关。
- en: Important note
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '**Metadata** is optional, and it is not used to define the version of the software
    but provides additional information. In general, we will try to avoid using versions
    with metadata as they are not stable versions but they can be used for testing
    purposes.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**元数据**是可选的，它不用于定义软件版本，但提供额外信息。通常，我们将尽量避免使用带有元数据的版本，因为它们不是稳定版本，但它们可以用于测试目的。'
- en: Release details
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布详细信息
- en: Before we move on to the release schedule, it is important to understand how
    we can check the details of any release. This is very important if we plan to
    upgrade to a major version, as it contains breaking changes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续到发布计划之前，了解我们如何检查任何发布的详细信息非常重要。如果我们计划升级到主要版本，这一点尤为重要，因为其中包含破坏性变更。
- en: 'In this case, we will analyze the Node.js 20.0.0 release, so we can see the
    details of the latest LTS version through the blog details: [https://nodejs.org/en/blog/release/v20.0.0/](https://nodejs.org/en/blog/release/v20.0.0/).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将分析Node.js 20.0.0版本发布，这样我们就可以通过博客详情看到最新LTS版本的详细信息：[https://nodejs.org/en/blog/release/v20.0.0/](https://nodejs.org/en/blog/release/v20.0.0/)。
- en: 'Every release has a structured blog post with the following information:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 每个发布都有一个包含以下信息的结构化博客文章：
- en: '**Summary**: Here, we can find a brief description of the release.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**摘要**：在这里，我们可以找到发布的一个简要描述。'
- en: '**Notable Changes**: Here, we can find the most important changes in the release,
    including examples and a lot of contexts behind the new features or deprecations.
    We can also see the more relevant changes in the dependencies that may affect
    the Node.js APIs.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显著变更**：在这里，我们可以找到发布中的最重要的变更，包括示例以及新功能或弃用背后的许多上下文。我们还可以看到可能影响Node.js API的依赖项中的更多相关变更。'
- en: '**Semver-(*) Commits**: Here, we can find the commits that are related to the
    SemVer changes (**Semver-Major Commits**, **Semver-Minor Commits**, and **Semver-Patch
    Commits**) and access the code changes directly using the *commits* reference.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Semver-(*) 提交**：在这里，我们可以找到与SemVer变更相关的提交（**Semver-Major 提交**、**Semver-Minor
    提交**和**Semver-Patch 提交**）并直接使用*提交*引用访问代码变更。'
- en: Information
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: The release information is available directly in the changelog. The changelog
    version includes references to all the commits and pull requests included in the
    release, so it is a great source of information when you need to migrate from
    another Node.js version. You can find the changelog version at [https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V20.md#2023-04-18-version-2000-current-rafaelgss](https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V20.md#2023-04-18-version-2000-current-rafaelgss).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 发布信息直接在变更日志中提供。变更日志版本包括对包含在发布中的所有提交和拉取请求的引用，因此当您需要从另一个Node.js版本迁移时，它是一个极好的信息来源。您可以在[https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V20.md#2023-04-18-version-2000-current-rafaelgss](https://github.com/nodejs/node/blob/main/doc/changelogs/CHANGELOG_V20.md#2023-04-18-version-2000-current-rafaelgss)找到变更日志版本。
- en: One of the best ways to explore the change in a release in more detail is to
    directly use the Node.js documentation – for example, [https://nodejs.org/dist/latest-v20.x/docs/api/](https://nodejs.org/dist/latest-v20.x/docs/api/).
    The website offers the option to navigate through the different versions so we
    can check the changes in the APIs between versions more easily.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 探索发布中变更的最好方法之一是直接使用Node.js文档——例如，[https://nodejs.org/dist/latest-v20.x/docs/api/](https://nodejs.org/dist/latest-v20.x/docs/api/)。网站提供了导航不同版本的选择，这样我们可以更轻松地检查版本间的API变更。
- en: '![Figure 1.4 – Node.js official documentation screenshot](img/B21678_01_04.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – Node.js 官方文档截图](img/B21678_01_04.jpg)'
- en: Figure 1.4 – Node.js official documentation screenshot
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – Node.js 官方文档截图
- en: Release schedule
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布时间表
- en: The Node.js project has a release schedule that is published on the official
    website ([https://nodejs.org/en/about/releases/](https://nodejs.org/en/about/releases/))
    and it is updated by the Node.js Release Working Group.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 项目有一个发布时间表，该时间表发布在官方网站上（[https://nodejs.org/en/about/releases/](https://nodejs.org/en/about/releases/)），并由
    Node.js 发布工作组更新。
- en: '![Figure 1.5 – Official release schedule from the Node.js website](img/B21678_01_05.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 来自 Node.js 网站的官方发布时间表](img/B21678_01_05.jpg)'
- en: Figure 1.5 – Official release schedule from the Node.js website
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 来自 Node.js 网站的官方发布时间表
- en: 'In Node.js, releases have three different phases:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Node.js 中，发布有三个不同的阶段：
- en: '**Current** is the phase where new features (non-major changes) are added to
    the project. This phase is very active, and it is not always recommended to use
    it in production as it is not a stable version.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当前** 阶段是向项目中添加新功能（非主要变更）的阶段。这个阶段非常活跃，并不总是建议在生产环境中使用它，因为它不是一个稳定的版本。'
- en: '**Active Long-Term Support** (**LTS**) is the phase where the version is stable
    and has been updated by the LTS team. This phase still includes new features,
    bug fixes, and updates. This phase is stable, so it is recommended to use it in
    production.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活跃长期支持**（**LTS**）阶段是版本稳定并由 LTS 团队更新的阶段。这个阶段仍然包括新功能、错误修复和更新。这个阶段是稳定的，因此建议在生产环境中使用它。'
- en: '**Maintenance** is the phase where the version is not receiving any new features,
    only critical bug fixes and security updates. This phase is recommended for projects
    that are not able to upgrade yet to the latest active LTS version.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护** 阶段是版本不再接收任何新功能，只进行关键错误修复和安全更新的阶段。这个阶段适用于那些尚未能够升级到最新活跃 LTS 版本的项目。'
- en: Important note
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Odd-numbered release lines are not promoted to active LTS, so they are not recommended
    for production use.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 奇数发布行不会被提升为活跃 LTS，因此不建议用于生产环境。
- en: As of today, for any new project, I will recommend using the latest LTS version,
    which is 20.11.0\. This version will be supported until April 2026, so it is a
    good choice for any new project.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，对于任何新的项目，我建议使用最新的 LTS 版本，即 20.11.0。这个版本将得到支持直到 2026 年 4 月，因此对于任何新的项目来说都是一个不错的选择。
- en: For any existing project using Node.js v18, it is recommended to start migrating
    to Node.js 20 as v18 is entering the *maintenance* phase.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何正在使用 Node.js v18 的现有项目，建议开始迁移到 Node.js 20，因为 v18 正进入 *维护* 阶段。
- en: Important note
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'While releasing a new version seems like an easy task, it is not. The Release
    Working Group has defined the complete process, which includes more than 20 steps.
    You can find all the relevant information in the official documentation ([https://github.com/nodejs/node/blob/main/doc/contributing/releases.md](https://github.com/nodejs/node/blob/main/doc/contributing/releases.md))
    or this talk: *The Life and Times of a Node.js Release*, by Danielle Adams at
    NodeConf EU 2022 ([https://www.youtube.com/watch?v=OiSBodpU174](https://www.youtube.com/watch?v=OiSBodpU174)).'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然发布新版本看起来像是一项简单的任务，但实际上并非如此。发布工作组已经定义了完整的流程，其中包括超过 20 个步骤。您可以在官方文档（[https://github.com/nodejs/node/blob/main/doc/contributing/releases.md](https://github.com/nodejs/node/blob/main/doc/contributing/releases.md)）或这次演讲中找到所有相关信息：丹妮尔·亚当斯在
    NodeConf EU 2022 上的 *Node.js 发布的生命周期*（[https://www.youtube.com/watch?v=OiSBodpU174](https://www.youtube.com/watch?v=OiSBodpU174)）。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored what makes Node.js so special and how it differs
    from other backend systems. We also covered the history of Node.js and how it
    has evolved over the years.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了是什么让 Node.js 如此特别，以及它与其他后端系统的不同之处。我们还介绍了 Node.js 的历史以及它是如何随着时间发展的。
- en: Additionally, we covered the Node.js architecture and how it works under the
    hood. We learned about the event loop and how it allows Node.js to handle many
    concurrent requests efficiently.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们介绍了 Node.js 架构及其内部工作原理。我们学习了事件循环以及它是如何使 Node.js 高效地处理许多并发请求的。
- en: In the next chapter, we will learn how to set up the development environment
    and start using Node.js.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何设置开发环境并开始使用 Node.js。
- en: Further reading
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Node.js governance: [https://nodejs.org/en/about/governance](https://nodejs.org/en/about/governance)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 治理：[https://nodejs.org/en/about/governance](https://nodejs.org/en/about/governance)
- en: 'OpenJS Foundation governance: [https://openjsf.org/about/governance/](https://openjsf.org/about/governance/)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenJS 基金会治理：[https://openjsf.org/about/governance/](https://openjsf.org/about/governance/)
- en: '*The Life and Times of a Node.js Release*, by Danielle Adams at NodeConf EU
    2022: [https://www.youtube.com/watch?v=OiSBodpU174](https://www.youtube.com/watch?v=OiSBodpU174)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Node.js 发布的生命与时代》，由 Danielle Adams 在 NodeConf EU 2022 上发表*：[https://www.youtube.com/watch?v=OiSBodpU174](https://www.youtube.com/watch?v=OiSBodpU174)'
- en: 'Node.js dependencies: [https://github.com/nodejs/node/blob/main/doc/contributing/maintaining/maintaining-dependencies.md](https://github.com/nodejs/node/blob/main/doc/contributing/maintaining/maintaining-dependencies.md)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 依赖项：[https://github.com/nodejs/node/blob/main/doc/contributing/maintaining/maintaining-dependencies.md](https://github.com/nodejs/node/blob/main/doc/contributing/maintaining/maintaining-dependencies.md)
- en: 'Node.js event loop architecture: [https://medium.com/preezma/node-js-event-loop-architecture-go-deeper-node-core-c96b4cec7aa4](https://medium.com/preezma/node-js-event-loop-architecture-go-deeper-node-core-c96b4cec7aa4)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js 事件循环架构：[https://medium.com/preezma/node-js-event-loop-architecture-go-deeper-node-core-c96b4cec7aa4](https://medium.com/preezma/node-js-event-loop-architecture-go-deeper-node-core-c96b4cec7aa4)
- en: '*How Node.js Bootstraps Itself*, 2019 edition, Joyee Cheung, Igalia: [https://www.youtube.com/watch?v=bwiLlcGvFEk](https://www.youtube.com/watch?v=bwiLlcGvFEk)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Node.js 自我引导》，2019 版本，作者 Joyee Cheung，Igalia*：[https://www.youtube.com/watch?v=bwiLlcGvFEk](https://www.youtube.com/watch?v=bwiLlcGvFEk)'
- en: '*Node.js 12: A Decade of Node.js*, Beth Griggs, IBM: [https://www.youtube.com/watch?v=HP4N0u_dEgI](https://www.youtube.com/watch?v=HP4N0u_dEgI)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Node.js 12：Node.js 的十年》，作者 Beth Griggs，IBM*：[https://www.youtube.com/watch?v=HP4N0u_dEgI](https://www.youtube.com/watch?v=HP4N0u_dEgI)'
- en: '*Node.js 2023 Year in An* *Article*: [https://blog.rafaelgss.dev/nodejs-2023-year-in-review](https://blog.rafaelgss.dev/nodejs-2023-year-in-review)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Node.js 2023 年回顾》文章*：[https://blog.rafaelgss.dev/nodejs-2023-year-in-review](https://blog.rafaelgss.dev/nodejs-2023-year-in-review)'
