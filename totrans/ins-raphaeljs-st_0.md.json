["```js\nvar raphaelObj = Raphael(x,y,width,height);\n```", "```js\n// Creating the canvas in the browser's viewport\nvar paper = Raphael(20, 30, 650, 400);\n```", "```js\n//The element itself is passed \n//This line creates a Raphael paper inside 'paperDiv', which is 650px in width and 400px in height\nvar elm= document.getElementById(\"paperDiv\");\nvar paper = Raphael(elm, 650, 400);\n//or \n// The element ID is passed directly\n//This line also creates a Raphael paper inside 'paperDiv', which is 650px in width and 400px in height\nvar paper = Raphael(\"paperDiv\", 650, 400);\n```", "```js\nvar cir = paper.circle(x,y,r);\n// x and y are the positioning co-ordinates, and \"r\" is the radius of the circle\n//Here the circle is assigned to a variable called cir.\n//Example\nvar cir = paper.circle(35,25,20);\n// This will create a circle of 20 pixels in radius at 35,25 (X & Y axis).\n```", "```js\nelement.attr({\n  \"Property1\":value1,\n  \"Property2\":value2\n})\n```", "```js\n//adding the attributes as key value pair\nvar coloredCircle = paper.circle(35,25,20).attr({\n  \"fill\":\"#17A9C6\",\n  \"stroke\":\"#2A6570\",\n  \"stroke-width\":2\n});\n```", "```js\npaper.rect(X,Y,Width,Height,border-radius(optional));\n```", "```js\n// creating a raphael paper in 'paperDiv'\nvar paper = Raphael (\"paperDiv\", 650,400);\n// creating a rectangle with the rect() method. The four required parameters are X,Y,Width & Height\nvar rect = paper.rect(35,25,170,100).attr({\n  \"fill\":\"#17A9C6\", //filling with background color\n  \"stroke\":\"#2A6570\", // border color of the rectangle\n  \"stroke-width\":2 // the width of the border \n});\n```", "```js\n// creating a raphael paper in 'paperDiv'\nvar paper = Raphael (\"paperDiv\", 650,400);\n//The fifth parameter will make the rectangle rounded by the number of pixels specified – A rectangle with rounded corners\nvar rect = paper.rect(35,25,170,100,20).attr({\n  \"fill\":\"#17A9C6\",//background color of the rectangle\n  \"stroke\":\"#2A6570\",//border color of the rectangle\n  \"stroke-width\":2 // width of the border\n});\n//in the preceding code 20(highlighted) is the border-radius of the rectangle.\n```", "```js\npaper.ellipse(X,Y,rX,rY);\n//rX is the horizontal radius & rY is the vertical radius of the ellipse\n```", "```js\n// creating a raphael paperin 'paperDiv'\nvar paper = Raphael (\"paperDiv\", 650,400);\n//The ellipse() method takes four required parameters: X,Y, horizontal radius & vertical Radius\nvar ellipse = paper.ellipse(195,125,170,100).attr({\n  \"fill\":\"#17A9C6\", // background color of the ellipse\n  \"stroke\":\"#2A6570\", // ellipse's border color\n  \"stroke-width\":2 // border width\n});\n```", "```js\npaper.path(\"pathString\");\n```", "```js\n// creating a raphael paper in 'paperDiv'\nvar paper = Raphael (\"paperDiv\", 350,200);\n// Creating a shape using the path() method and a path string\nvar tri = paper.path(\"M0,0L26,0L13,18L0,0\").attr({\n  \"fill\":\"#17A9C6\", // filling the background color\n  \"stroke\":\"#2A6570\", // the color of the border\n  \"stroke-width\":2 // the size of the border\n});\n```", "```js\nvar newpath=paper.path(\"copied path string from SVG\").attr({\n  \"fill\":\"#5DDEF4\",\n  \"stroke\":\"#2A6570\",\n  \"stroke-width\":2\n});\n```", "```js\npaper.text(X,Y,\"Raphael JS Text\");\n// the text method with X,Y coordinates and the text string\n```", "```js\n// creating a raphael paper in 'paperDiv'\nvar paper = Raphael (\"paperDiv\", 650,400);\n// creating text\nvar text = paper.text(40,55,\"Raphael Text\").attr({\n  \"fill\":\"#17A9C6\", // font-color\n  \"font-size\":75, // font size in pixels\n//text-anchor indicates the starting position of the text relative to the X, Y position.It can be \"start\", \"middle\" or  \"end\" default is \"middle\"\n\"text-anchor\":\"start\",\n\"font-family\":\"century gothic\" // font family of the text\n});\n```", "```js\nrect.attr('fill','#ddd');\n// This will update the background color of the rectangle to gray\n```", "```js\n//creating a Triangle using the path string\nvar tri = paper.path(\"M0,0L104,0L52,72L0,0\").attr({\n  \"fill\":\"#17A9C6\",\n  \"stroke\":\"#2A6570\",\n  \"stroke-width\":2\n});\n//transforming the triangle.\n    tri.animate({\n      \"transform\":\"r90t100,0,s1.5\"\n    },1000);\n//the transformation string should be read as rotating the element by 90 degrees, translating it to 100px in the X-axis and scaling up by 1.5 times\n```", "```js\nElement.animate({\n  Animation properties in key value pairs\n},time,easing,callback_function);\n```", "```js\n// creating a raphael paper in 'paperDiv'\nvar paper = Raphael (\"paperDiv\", 650,400);\nrect.animate({\n  \"width\":200, // final width\n  \"height\":200 // final height\n},300,\"bounce',function(){\n  // something to do when the animation is complete – this callback function is optional\n  // Print 'Animation complete' when the animation is complete\n  $(\"#animation_status\").html(\"Animation complete\")\n})\n```", "```js\nrect.animate({\n  \"fill\":\"#ddd\", // final color,\n  \"fill-opacity\":0.7\n},300,\"easeIn\",function(){\n  // something to do when the animation is complete – this call back function is optional\n  // Alerts done when the animation is complete\n  alert(\"done\");\n})\n```", "```js\n//animating the rotation and scaling of a rectangle \nrect.animate({\n// animating with a rotation of 45 degree and scaling up 1.5 times\ntransform:\"r45s1.5\" \n},500)\n```", "```js\n//creating a raphael paper in 'paperDiv'\nvar paper = Raphael(\"paperDiv\", 650, 400);\nvar blueStyle={\n  \"fill\":\"#5DDEF4\",\n  \"stroke\":\"#2A6570\",\n  \"stroke-width\":2\n}\n//creating a plain circle\nvar cir = paper.circle(120,120,30).attr(blueStyle);\ncir.click(function(){\n  alert('Clicked circle');\n})\n```", "```js\n// creating a circle with blue background\nvar cir = paper.circle(35,25,20).attr({\n  \"fill\":\"#17A9C6\",\n  \"stroke\":\"#2A6570\",\n  \"stroke-width\":2\n});\n// adding mouseover event to the circle with the mouseover() event handler\ncir.mouseover(function(){\ncir.animate({\n  \"fill\":\"#15EA18\",\n  \"transform\":\"s2\"\n  },400)\n})\n// The preceding code animates the background color and scales up the circle twice on mouseover\n```", "```js\nelement.animate({\n  Property1:value,\n  Property2:value\n},time_in_milliseconds,easing(optional),\ncallback_function(optional));\n```", "```js\nrect.animate({\n  \"width\":\"300\",\n  \"height\":\"200\"\n},500,'bounce',function(){\n//something to do after animation\n  alert(\"animation complete\")\n})\n```", "```js\nelement.attr({\n  Property1:value,\n  Property2:value\n})\n```", "```js\n// Adding background color and stroke to a rectangle\nrect.attr({\n  \"fill\":\"#17A9C6\",   // Adds a background color\n  \"stroke\":\"#2A6570\", // the color of the border\n  \"stroke-width\":2    // the width of the border\n})\n```", "```js\nrect.click(function(){\n  //something to do when the rectangle is clicked\n  alert(\"clicked rectangle\");\n})\n```", "```js\ncir.dblclick(function(){\n  //alerts \"it's a double click \" when double clicked\n  alert(\"It's a double click !\");\n})\n```", "```js\nrect.mousedown(function(){\n// The rectangle will animate to 200px wide when any mouse button is pressed down\nrect.animate({\n  'width':'200'\n  },400)\n})\n```", "```js\nrect.mouseup(function(){\n// The rectangle will animate to 100px wide any mouse button is released\nrect.animate({\n  'width':'100'\n  },400)\n})\n```", "```js\n// increases the size of the rectangle as the mouse moves over the rectangle.\nvar wd=100 // Intial width\nrect.mousemove(function(){\n  wd++ // incrementing the width on mouse move\n  rect.attr({\n    //setting the width of the rectangle with the attr() method\n    'width':wd\n  });\n})\n```", "```js\n//animating the size of the circle when the mouse enters the circle\ncir.mouseover(function(){\n  cir.animate({\n  transform:'s2' // scaling up the circle twice\n  },500,'elastic'); //adding and elastic easing function to the animation\n})\n```", "```js\n// scaling down the size of the circle when the mouse leaves it\ncir.mouseout(function(){\n  cir.animate({\n  transform:'s0.5' // scaling down the circle to half of its original size\n  },500,'bounce') //adding and elastic easing function to the animation\n})\n```", "```js\n// assigning the rect to a new variable called newRect\nvar newRect=rect;\nnewRect.attr({\n  fill:'#ddd',\n  transform:'t100,100'\n})\n```", "```js\n//To duplicate a rectangle\nvar newRect=rect.clone();\nnewRect.attr({\n  fill:'#ddd',\n  transform:'t100,100'\n})\n```", "```js\n//assigning a name to a circle\ncir.data('name','Am Raphael JS');\n// retrieving the data\ncir.click(function(){\n  alert(this.data('name'));\n})\n```", "```js\nremovedata(key)\n```", "```js\n//removing the name of the circle\ncir.removeData('name') // removes the name of the circle\n```", "```js\ncir.getBBox() // returns the bounding box \ncir.getBBox({\nisWithoutTransform:true // this will return the bouding box values before any transformation that has been applied on the element. It will still return the old values ignoring the transformations\n})\n```", "```js\ngetPointAtLength(path,length)\n```", "```js\ncir.toFront();//brings the circle on top of all the elements\n```", "```js\nrect.toBack() // moves the rect behind all the elements\n```", "```js\nrect.hide()\n```", "```js\nrect.show()\n```", "```js\ntransform([transformationString]);\n```", "```js\nrect.transform(\"s1.5t100,100,r90\");\n//scales the rectangle to 1.5 times larger and then translates it to 100px in the X-axis, 100px in the Y-axis and finally rotating it by 90 degrees\n//Transformation can also be done using the attr() method.\nelement.attr('transform','s1.5t100,100,r90');\n\n```", "```js\nrect.remove();\n//the preceding line removes the rect from Raphael paper\n```", "```js\ncircle(x,y,radius);\n```", "```js\nvar cir=paper.circle(100,50,20);\n```", "```js\nellipse(x,y,rx,ry);\n```", "```js\nvar ell = paper.ellipse(15,30,80,50);\n```", "```js\nrect(x,y,width,height,radius(optional));\n```", "```js\n// A rectangle with a border radius of 5px\nvar rectangle = paper.rect(10,10,50,70,5);\n```", "```js\npaper.clear()\n```", "```js\nvar img=paper.image(\"images/world.png\",10,15,80,100);\n//imports an image called world.png and places it at 10,15 position. Sets the image's width to 80px and height to 100px\n```", "```js\npaper.setSize(width,height);\n```", "```js\npaper.setSize(500,600);\n//500 and 600 will be the new width and height of the paper.\n```", "```js\nvar raphaelSet=paper.set();\nraphaelSet.push(element1,element2, ...);\n```", "```js\n// the following code will create a new set called raphaelSet, add elements to it and change the color of the set to red\nvar raphaelSet=paper.set();//creating a new set\n// adding elements to the set using the push() method \nraphaelSet.push(circle,rect,ellipse);\n//changing the color of the set – this will affect all the elements in the set.\nraphaelSet.attr('fill','red');\n```", "```js\nvar raphaelSet=paper.set();\n//raphaelSet is now a set object to which all the set methods apply.\n```", "```js\nSet.clear();\n```", "```js\nraphaelSet.clear();\n// The preceding code will remove the set called raphaelSet, not its elements\n```", "```js\nset.exclude(element);\n```", "```js\nraphaelSet.exclude(rect);\n//The preceding code removes the element called 'rect' from the set 'raphaelSet'\n```", "```js\nset.forEach(callback_function,thisArg);\n```", "```js\nraphaelSet.forEach(function(elm){\n  elm.attr('fill','green');\n})\n// The preceding code will loop through all the elements in the raphaelSet and change the background color of each and every element to green.\n```", "```js\nraphaelSet.pop();\n// the preceding code will remove the last element from the raphaelSet and return the removed element.\n```", "```js\nset.splice(index, count, element);\n```", "```js\nvar rect=paper.rect(10,10,50,100).attr('fill','green');\nraphaelSet.splice(1,2,rect);\n// The preceding code will remove two elements from the index position of 1 and add a rect element.\n```"]