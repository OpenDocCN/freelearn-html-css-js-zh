- en: Chapter 1. Setting up Our First Blog Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章. 设置我们的第一个博客项目
- en: Bootstrap is the most popular HTML, CSS, and JavaScript framework in the modern
    web development world today. Whether you are new to web development or an experienced
    professional, Bootstrap is a powerful tool for whatever type of web application
    you are building. With the release of version 4, Bootstrap is more relevant than
    ever and brings a complete set of components that are easy to learn and use. In
    this lesson, I'll show you how to set up our first blog project with all necessary
    files.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap是现代网络开发世界中最受欢迎的HTML、CSS和JavaScript框架。无论你是网络开发的新手还是经验丰富的专业人士，Bootstrap都是构建任何类型网络应用的强大工具。随着版本4的发布，Bootstrap比以往任何时候都更加相关，并带来了一套易于学习和使用的完整组件。在本课中，我将向你展示如何使用所有必要的文件设置我们的第一个博客项目。
- en: Implementing framework files
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现框架文件
- en: 'Before we get into building the basic template for a Bootstrap project, we
    should review the files that we need to include, so as to make the framework run
    properly. Minimal requirement for the purpose: one CSS file and two JavaScript
    files. These files can either be served from the Bootstrap **Content Delivery
    Network** (**CDN**) or downloaded and included directly in our project. When using
    CDN, simply include the following line of code in the head of your file:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建Bootstrap项目的基本模板之前，我们应该回顾我们需要包含的文件，以确保框架能够正常运行。为此的最小要求：一个CSS文件和两个JavaScript文件。这些文件可以从Bootstrap
    **内容分发网络**（**CDN**）提供，或者下载并直接包含在我们的项目中。当使用CDN时，只需在文件头部包含以下代码行：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: CDNs help to distribute bandwidth across multiple servers and allow users to
    download static content from a closer source.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: CDNs有助于在多个服务器之间分配带宽，并允许用户从更近的源下载静态内容。
- en: Bootstrap can be loaded from [https://www.bootstrapcdn.com/](https://www.bootstrapcdn.com/).
    BootstrapCDN is powered by MaxCDN which can be found at [https://www.maxcdn.com/](https://www.maxcdn.com/).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap可以从[https://www.bootstrapcdn.com/](https://www.bootstrapcdn.com/)加载。BootstrapCDN由MaxCDN提供支持，可在[https://www.maxcdn.com/](https://www.maxcdn.com/)找到。
- en: Inserting the JavaScript files
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插入JavaScript文件
- en: 'As I mentioned earlier, we need to include two JavaScript files to implement
    the framework properly. The files are the **jQuery** and **Bootstrap JavaScript**
    framework files. As with the CSS file, you can either do this through the use
    of a CDN or download and insert the files manually. The JavaScript files should
    be inserted at the bottom of your page right before the closing `</body>` tag.
    If you choose to use the CDN, insert the following lines of code:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，我们需要包含两个JavaScript文件以正确实现框架。这些文件是**jQuery**和**Bootstrap JavaScript**框架文件。与CSS文件一样，你可以通过使用CDN或下载并手动插入文件来完成此操作。JavaScript文件应插入到页面底部，紧接在`</body>`标签之前。如果你选择使用CDN，请插入以下代码行：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you prefer to insert the files yourself, go back to the Bootstrap package
    you downloaded earlier and locate the `/js` directory. There will be a few files
    here but the one you want is `bootstrap.min.js`. You''ll need to also head to
    [http://jquery.com](http://jquery.com/) to download the jQuery framework file.
    Once you''ve done that, drop both files into the `/js` directory for your own
    project. Next, enter the following lines of code at the bottom of your page template.
    Make sure jQuery is loaded before `bootstrap.min.js`. This is critical; if you
    load them in the opposite order, the framework won''t work properly:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢自己插入文件，请回到你之前下载的Bootstrap包，并定位到`/js`目录。这里会有一些文件，但你想要的是`bootstrap.min.js`。你还需要前往[http://jquery.com](http://jquery.com/)下载jQuery框架文件。一旦完成，将这两个文件放入你自己的项目的`/js`目录中。接下来，在你的页面模板底部输入以下代码行。确保在`bootstrap.min.js`之前加载jQuery。这是至关重要的；如果你以相反的顺序加载它们，框架将无法正常工作：
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That concludes the explanation of the key Bootstrap framework files you need
    to include to get your project started. The next step will be to set up the basic
    starter template so you can begin coding your project.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了对所需关键Bootstrap框架文件的解释。下一步将是设置基本启动模板，以便你可以开始编码你的项目。
- en: The starter template
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动模板
- en: 'The basic starter template is the bare bones of what you''ll need to get a
    page going using Bootstrap. Let''s start by reviewing the code for the entire
    template and then I''ll break down each critical part:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 基本启动模板是你使用Bootstrap开始页面所需的基本框架。让我们首先回顾整个模板的代码，然后我会逐个解析每个关键部分：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: HTML5 DOCTYPE
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML5文档类型
- en: 'Like most projects nowadays, Bootstrap uses the HTML5 DOCTYPE for its template.
    That is represented by the following line of code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 和现在的大多数项目一样，Bootstrap 使用 HTML5 DOCTYPE 作为其模板。这由以下代码行表示：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Avoid using other DOCTYPES such as **XHTML** strict or transitional or unexpected
    issues will arise with your components and layouts.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 避免使用其他 DOCTYPE，如 **XHTML** 严格或过渡型，否则你的组件和布局可能会出现意外问题。
- en: Structuring the responsive meta tag
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结构化响应式 meta 标签
- en: 'Bootstrap is a mobile-first framework so the following meta tag needs to be
    included to allow for responsive web design. To make sure your project renders
    properly on all types of devices, you must include this meta tag in the `<head>`
    of your project:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 是一个以移动端优先的框架，因此需要包含以下 meta 标签以允许响应式网页设计。为了确保你的项目能够在所有类型的设备上正确渲染，你必须将此
    meta 标签包含在项目的 `<head>` 中：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you''re interested in learning more about how responsive web design works
    in Bootstrap, you should check out the documentation at: [http://v4-alpha.getbootstrap.com/layout/responsive-utilities/](http://v4-alpha.getbootstrap.com/layout/responsive-utilities/)
    .'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要了解更多关于如何在 Bootstrap 中实现响应式网页设计的细节，你应该查看以下文档：[http://v4-alpha.getbootstrap.com/layout/responsive-utilities/](http://v4-alpha.getbootstrap.com/layout/responsive-utilities/)。
- en: That brings to a close the most important parts of the template that you need
    to be aware of. The remainder of the code in the starter template should be straightforward
    and easy to understand.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了模板中你需要了解的最重要部分。起始模板中的其余代码应该是简单易懂的。
- en: Normalizing and Rebooting
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正规化和重启
- en: As I mentioned earlier, Bootstrap uses `normalize.css` as the base CSS reset.
    With the addition of the Reboot reset, Bootstrap extends Normalize and allows
    for styling to only be done using CSS classes. This is a much safer pattern to
    follow, as it's much easier to deal with CSS specificity if you are NOT using
    CSS IDs for styling purposes. The CSS reset code is baked right into `bootstrap.min.css`
    so there is no need to include any further CSS files for the reset.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，Bootstrap 使用 `normalize.css` 作为其基础 CSS 重置。随着 Reboot 重置的添加，Bootstrap
    扩展了 Normalize，并允许仅使用 CSS 类进行样式化。这是一个更安全的模式，因为它在你不使用 CSS ID 进行样式化时，处理 CSS 特异性要容易得多。CSS
    重置代码直接嵌入到 `bootstrap.min.css` 中，因此不需要包含任何额外的 CSS 文件进行重置。
- en: Taking the starter template further
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将起始模板进一步发展
- en: Although we have our template set up, one of the main problems with static websites
    is when things change. If your project grew to 50, 100, or 500 pages and you wanted
    to possibly update to a new version of Bootstrap, you might be looking at having
    to update all of those files. This is extremely painful, to put it mildly. Now
    we enter static site generators.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们已经设置了模板，但静态网站的一个主要问题是当内容发生变化时。如果你的项目增长到50、100或500页，并且你想要更新到 Bootstrap 的新版本，你可能需要更新所有这些文件。这可以说是非常痛苦。现在我们进入静态站点生成器。
- en: Using a static site generator
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用静态站点生成器
- en: One of the hottest trends right now in web development is the use of static
    site generators. What exactly does that mean? Instead of having several static
    files that require updating every time something changes globally, you can use
    a series of base templates then load your body content into them. This is sometimes
    called includes or partials. This way, you only have one or two layout files that
    include the header and footer code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 目前在网页开发中最热门的趋势之一是使用静态站点生成器。这究竟意味着什么呢？不是拥有多个静态文件，每次全局有变化时都需要更新，你可以使用一系列基础模板，然后将你的主体内容加载到它们中。这有时被称为包含或部分。这样，你只需要一个或两个包含头部和尾部代码的布局文件。
- en: Then, when something changes, you only have to update a few files instead of
    500\. Once your website is complete, you then generate a version that is plain
    HTML, CSS, and JavaScript, and deploy it to your server. This is what I would
    call creating your own frontend web development environment. This is also how
    most people work on larger projects nowadays to keep them manageable.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当有变化发生时，你只需要更新几个文件，而不是500个。一旦你的网站完成，然后生成一个纯 HTML、CSS 和 JavaScript 版本，并将其部署到服务器上。这就是我所说的创建你自己的前端网页开发环境。这也是现在大多数人处理大型项目以保持其可管理性的方式。
- en: Converting the base template to a generator
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将基础模板转换为生成器
- en: Why don't we integrate the basic template into a generator so that I can show
    you what I'm talking about? My generator of choice is called Harp.js and you can
    install it by following the steps provided in the code folder (`Installation Manual`).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么不将基本模板集成到生成器中，这样我就可以向你展示我在说什么？我选择的生成器是 Harp.js，你可以通过遵循代码文件夹中提供的步骤来安装它（`安装手册`）。
- en: 'There are a number of great arguments for using a static site generator such
    as Harp.js: cleaner code, modern best practices, and more. However, the best reason
    is that it will just make your life simple. Instead of having to update a header
    on all 50 pages of the website, you can simply update the header partially and
    then have that compiled into all your templates. You can also take advantage of
    using variables to insert content and configuration.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用静态站点生成器，如 Harp.js，有许多很好的理由：更干净的代码、现代最佳实践和更多。然而，最好的理由是它将使你的生活变得简单。你不必更新网站所有
    50 页的标题，你只需部分更新标题，然后将其编译到所有模板中。你还可以利用变量来插入内容和配置。
- en: '![Converting the base template to a generator](img/00001.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![将基本模板转换为生成器](img/00001.jpeg)'
- en: Setting up the blog project
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置博客项目
- en: 'Let''s start by creating a new directory and call it something like `Bootstrap
    Blog`. Open up that folder and create the following sub-directories inside it:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个新的目录开始，并将其命名为类似 `Bootstrap Blog` 的东西。打开该文件夹，并在其中创建以下子目录：
- en: css
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: css
- en: fonts
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: fonts
- en: img
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: img
- en: js
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: js
- en: partial
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: partial
- en: css
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: css
- en: The `css` directory will hold the Bootstrap framework's CSS file and a custom
    theme file which we'll build later on. Go to the Bootstrap source file directory
    and locate the `dist/css` folder. From there, copy `bootstrap.min.css` to our
    new blog project's `css` directory.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`css` 目录将包含 Bootstrap 框架的 CSS 文件和我们将稍后构建的自定义主题文件。转到 Bootstrap 源文件目录，找到 `dist/css`
    文件夹。从那里，将 `bootstrap.min.css` 复制到我们的新博客项目的 `css` 目录中。'
- en: fonts
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: fonts
- en: The `fonts` directory will hold either a font icon library such as Glyphicon
    or Font Awesome. Previously, Bootstrap shipped with Glyphicon but they have dropped
    it in version 4\. If you wish to use it, you'll need to download the icon font
    set and then drop the files into this directory. You could also include a web
    font that you may want to use on your project in this directory. If you are looking
    for web fonts, a good place to start is Google Web Fonts.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`fonts` 目录将包含字体图标库，例如 Glyphicon 或 Font Awesome。以前，Bootstrap 随带 Glyphicon，但在版本
    4 中已经不再包含它。如果你希望使用它，你需要下载图标字体集，然后将文件放入这个目录中。你还可以在这个目录中包含你可能在项目中使用的网络字体。如果你正在寻找网络字体，一个好的起点是
    Google Web Fonts。'
- en: img
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: img
- en: The `img` directory will hold any images used in the blog.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`img` 目录将包含博客中使用的任何图像。'
- en: js
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: js
- en: The `js` or JavaScript directory will hold the Bootstrap framework JavaScript
    files. If you add any other third-party libraries, they should also be included
    in this directory. Go back to the Bootstrap source files one last time and locate
    the `dist/js` folder. From there, copy `bootstrap.min.js` to the `js` directory
    in the blog project.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`js` 或 JavaScript 目录将包含 Bootstrap 框架的 JavaScript 文件。如果你添加了任何其他第三方库，它们也应该包含在这个目录中。最后一次回到
    Bootstrap 源文件，找到 `dist/js` 文件夹。从那里，将 `bootstrap.min.js` 复制到博客项目的 `js` 目录中。'
- en: partial
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: partial
- en: The `partial` directory will hold any reusable snippets of code that we want
    to use in multiple locations throughout our templates or web pages, for example,
    the header and footer for our project. It's important to note you can have as
    many partial files as you like or use none at all.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`partial` 目录将包含我们希望在模板或网页的多个位置重复使用的代码片段，例如，我们项目的页眉和页脚。重要的是要注意，你可以有尽可能多的部分文件，或者根本不使用任何文件。'
- en: Within this folder, create two new files and name them `_header.ejs` and `footer.ejs`.
    For now, you can leave them blank.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件夹中，创建两个新的文件，并将它们命名为 `_header.ejs` 和 `footer.ejs`。目前，你可以将它们留空。
- en: EJS files
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EJS 文件
- en: '**EJS** stands for **Embeddable JavaScript**. This is a type of template file
    that allows us to use things such as partials and variables in our templates.
    Harp also supports Jade if you prefer that language. However, I prefer to use
    EJS because it is very similar to HTML and therefore really easy to learn. If
    you''ve ever used WordPress, it is very similar to using template tags to insert
    bits of content or components into your design.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**EJS** 代表 **可嵌入的 JavaScript**。这是一种模板文件类型，允许我们在模板中使用诸如部分和变量等功能。Harp 也支持 Jade，如果你更喜欢那种语言。然而，我更喜欢使用
    EJS，因为它非常类似于 HTML，因此非常容易学习。如果你曾经使用过 WordPress，它非常类似于使用模板标签将内容或组件插入到设计中。'
- en: Setting up the JSON files
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 JSON 文件
- en: Each Harp project has at least two JSON files that are used for configuring
    a project. JSON stands for JavaScript Object Notation and it's a lightweight format
    for data interchange. If that sounds complicated, don't worry about it. The actual
    coding of a JSON file is actually really straightforward, as I will show you now.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Harp项目至少有两个JSON文件，用于配置项目。JSON代表JavaScript对象表示法，是一种轻量级的数据交换格式。如果这听起来很复杂，请不要担心。实际上，JSON文件的编码非常简单，我将现在向您展示。
- en: 'The first is called `_harp.json` and it''s used for configuring global settings
    and variables that will be used across the entire blog. In this case, we''re going
    to set up a global variable for the name of our project that will be inserted
    into every page template. Start by creating a new file in the root of blog project
    and call it `_harp.json`. Within the file, insert the following code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个文件名为 `_harp.json`，用于配置整个博客中使用的全局设置和变量。在这种情况下，我们将设置一个全局变量来存储我们项目的名称，该名称将被插入到每个页面模板中。首先，在博客项目的根目录中创建一个新文件，并将其命名为
    `_harp.json`。在文件中，插入以下代码：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here''s what''s happening in this code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是这段代码中发生的事情：
- en: We're using the `globals` keyword so any variables under this will be available
    across all of our templates
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 `globals` 关键字，因此在此之下任何变量都将可在所有模板中使用
- en: I've created a new variable called `siteTitle` which will be the title of the
    project
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我创建了一个名为 `siteTitle` 的新变量，它将是项目的标题
- en: I've inserted the name of the book, `Learning Bootstrap 4`, as the title for
    the project
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我已将书籍名称 `Learning Bootstrap 4` 作为项目的标题插入
- en: That completes the setup of the global `_harp.json` file. In a little bit, I'll
    show you how to add the variable we set up to the main layout file.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了全局 `_harp.json` 文件的设置。稍后，我将向您展示如何将我们设置的变量添加到主布局文件中。
- en: Creating the data JSON file
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据 JSON 文件
- en: 'The next thing we need to do is set up the `_data.json` file that can hold
    template-specific variables and settings. For our project, we''ll set up one variable
    for each page template which will hold the name of the page. Create another file
    in the root of the blog project and name it `_data.json`. In that file, insert
    the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要做的是设置 `_data.json` 文件，它可以存储模板特定的变量和设置。对于我们的项目，我们将为每个页面模板设置一个变量，它将包含页面的名称。在博客项目的根目录中创建另一个文件，并将其命名为
    `_data.json`。在该文件中，插入以下代码：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let me break down this code for you:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我为您分解这段代码：
- en: '`index` refers to a filename. In this case, it will be our home page. We haven''t
    actually created this file yet but that is okay as we will in the next steps.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index` 指的是一个文件名。在这种情况下，它将是我们的主页。我们尚未实际创建此文件，但这没关系，我们将在下一步中创建它。'
- en: I've created a variable called `pageTitle` which will refer to the title of
    each page template in our project
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我创建了一个名为 `pageTitle` 的变量，它将引用我们项目中每个页面模板的标题
- en: Since this is the `index` template, I've assigned a value or name of `Home`
    to it
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于这是 `index` 模板，我已将其值或名称指定为 `Home`
- en: That completes the setup of the `_data.json` file for now. Later on, we'll need
    to update this file once we add more page templates. For now, this will give us
    the minimum resources that we need to get our project going.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了 `_data.json` 文件的设置。稍后，当我们添加更多页面模板时，我们需要更新此文件。现在，这将为我们启动项目提供所需的最小资源。
- en: Setting up the layout
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置布局
- en: Let's go ahead and set up the layout file for our project. The layout is a separate
    file that will be a wrapper for the content of all of our pages. It contains things
    such as the `<head>` of our page, a header partial, and a footer partial. This
    is one of the advantages to using a static site generator. We don't have to define
    this on every page so if we want to change something in our header, we only change
    it in the layout. On the next compile, all of the page templates' headers will
    be updated with the new code.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续设置我们项目的布局文件。布局是一个独立的文件，它将作为我们所有页面内容的包装器。它包含诸如我们页面 `<head>`、页眉部分和页脚部分等内容。这是使用静态站点生成器的一个优点。我们不需要在每一页上定义这些内容，所以如果我们想更改页眉中的某些内容，我们只需在布局中更改它。在下次编译时，所有页面模板的页眉都将使用新代码进行更新。
- en: 'Create a new file in the root of the blog project called `_layout.ejs`. Since
    this is technically a type of layout file, we''ll be creating it as an EJS template
    file. Once you''ve created the file, insert the following code into it:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在博客项目的根目录中创建一个新文件，命名为 `_layout.ejs`。由于这实际上是布局文件的一种类型，我们将将其创建为 EJS 模板文件。一旦创建文件，请将以下代码插入其中：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: That completes the setup of the layout. Next, let's move on to coding the header
    and footer partials.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了布局的设置。接下来，让我们继续编写页眉和页脚部分。
- en: Setting up the header
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置页眉
- en: 'Let''s set up our first partial by coding the header. We''ll use the Bootstrap
    `navbar` component here for our global navigation for the blog. In the partial
    directory, open up the `_header.ejs` file that you created a little earlier and
    insert the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过编写页眉来设置我们的第一个部分。在这里，我们将使用Bootstrap的`navbar`组件为博客的全局导航。在部分目录中，打开你稍早前创建的`_header.ejs`文件，并插入以下代码：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you''re a Bootstrap 3 user, you''ll likely notice that the code to render
    a `navbar` in version 4 is much cleaner. This will make the `navbar` much easier
    to use and explain. Let me break down the code for you:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Bootstrap 3，你可能会注意到在版本4中渲染`navbar`的代码要干净得多。这将使`navbar`的使用和解释更加容易。让我为你分解一下代码：
- en: On the `<nav>` tag, we have a few classes we need to include. `.navbar` is the
    standard class need for this component. `.navbar-light` will render a light-colored
    navbar for us. There are some other color options you can check out in the Bootstrap
    documents. Finally, the `.bg-faded` class is optional but I like to include it
    as it makes the background of the `navbar` a little more subtle.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`<nav>`标签上，我们需要包含几个类。`.navbar`是这个组件的标准类。`.navbar-light`将为我们渲染一个浅色导航栏。你可以在Bootstrap文档中查看一些其他颜色选项。最后，`.bg-faded`类是可选的，但我喜欢包含它，因为它使`navbar`的背景更加微妙。
- en: The `.navbar-brand` class is unchanged from Bootstrap 3 and I've inserted the
    name of the book for this tag. Feel free to name it whatever you want.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.navbar-brand`类与Bootstrap 3保持不变，我为这个标签插入了书的名称。你可以随意命名它。'
- en: 'Next, we have our navigation list of links. The `<ul>` tag needs to have the
    two required classes here: `.nav` and `.navbar-nav`.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们有我们的导航链接列表。`<ul>`标签需要在这里包含两个必需的类：`.nav`和`.navbar-nav`。
- en: 'Within the list, you''ll notice three pages: `Home`, `About` and `Contact`.
    These are going to be the pages we''ll build out through later chapters so please
    fill them in now.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在列表中，你会注意到三个页面：`首页`、`关于`和`联系`。这些页面将在后续章节中构建，所以请现在就填写它们。
- en: Tip
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note the `.active` class on the index page link. This is optional and you may
    not want to include it in this manner as this is a global navigation.
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意索引页面链接上的`.active`类。这是可选的，你可能不希望以这种方式包含它，因为这是一个全局导航。
- en: Finally, I've included a search form and used the `.pull-xs-right` to align
    it to the right of the `navbar`. If you're familiar with Bootstrap 3, this class
    used to simply be called `.pull-right`. In Bootstrap 4, you have more control
    of the alignment based on the viewport size of your device. If you always want
    the search bar to be aligned to the right then use the `-xs` value in the class.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我包含了一个搜索表单，并使用`.pull-xs-right`将其对齐到`navbar`的右侧。如果你熟悉Bootstrap 3，这个类曾经简单地被称为`.pull-right`。在Bootstrap
    4中，你可以根据设备的视口大小有更多控制对齐方式。如果你总是想让搜索栏对齐到右侧，那么在类中使用`-xs`值。
- en: Save the file and that will complete the setup of the header partial. Let's
    move on to setting up the footer.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件，这将完成页眉部分的设置。让我们继续设置页脚。
- en: Setting up the footer
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置页脚
- en: 'The footer partial works exactly like the header. Open up the `_footer.ejs`
    file in the partial directory that we created earlier and paste in the following
    code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 页脚部分的工作方式与页眉完全相同。打开我们在之前创建的部分目录中的`_footer.ejs`文件，并粘贴以下代码：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `footer` content is going to be quite basic for our blog. Here''s a breakdown
    of the code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的博客，页脚内容将会非常基础。以下是代码的分解：
- en: 'I''m using the `.container` class to wrap the entire `footer`, which will set
    a max width of 1140 px for the layout. The `navbar` wasn''t placed into a container
    so it will stretch to the full width of the page. The `.container` class will
    also set a left and right padding of .9375rem to the block. It''s important to
    note that Bootstrap 4 uses REMs for the main unit of measure. EMs has been deprecated
    with the upgrade from version 3\. If you''re interested in learning more about
    REMs, you should read this blog post: [http://snook.ca/archives/html_and_css/font-size-with-rem](http://snook.ca/archives/html_and_css/font-size-with-rem)
    .'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我使用 `.container` 类将整个 `footer` 包裹起来，这将设置布局的最大宽度为 1140 像素。`navbar` 没有放入容器中，所以它会扩展到页面的全宽。`.container`
    类还将为块设置左右填充为 .9375rem。需要注意的是，Bootstrap 4 使用 REM 作为主要度量单位。EM 单位在从版本 3 升级后已被弃用。如果你对
    REM 感兴趣，应该阅读这篇博客文章：[http://snook.ca/archives/html_and_css/font-size-with-rem](http://snook.ca/archives/html_and_css/font-size-with-rem)。
- en: It's also important to note that the column classes have NOT changed from Bootstrap
    3 to 4\. This is actually a good thing if you are porting over a project, as it
    will make the migration process much easier. I've set the width of the footer
    to be the full width of the container by using the `.col-lg-12` class.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还需要注意的是，从 Bootstrap 3 到 4，列类并没有发生变化。如果你正在迁移项目，这实际上是一件好事，因为它将使迁移过程变得更加容易。我通过使用
    `.col-lg-12` 类将页脚的宽度设置为容器全宽。
- en: Finally I've entered some simple content for the footer, which is the book name
    and the year of writing. Feel free to change this up to whatever you want.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我在页脚中输入了一些简单的内容，即书名和写作年份。你可以随意更改成你想要的任何内容。
- en: Save the file and the footer setup will be complete.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存文件，页脚设置将完成。
- en: We're getting closer to having our Harp development environment set up. The
    last thing we need to do is set up our index page template and then we can compile
    and view our project.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们越来越接近设置我们的 Harp 开发环境。我们最后需要做的是设置我们的索引页面模板，然后我们就可以编译并查看我们的项目了。
- en: Creating our first page template
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个页面模板
- en: 'For our first page template, we''re going to create our `Home` or `index` page.
    In the root of the blog project, create a new file called `index.ejs`. Note this
    file is not prepended with an underscore like the previous files. With Harp, any
    file that has the underscore will be compiled into another and ignored when the
    files are copied into the production directory. For example, you don''t want the
    compiler to spit out `layout.html` because it''s fairly useless with the content
    of the `Home` page. You only want to get `index.html`, which you can deploy to
    your web server. The basic thing you need to remember is to *not* include an underscore
    at the beginning of your page template files. Once you''ve created the file, insert
    the following code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个页面模板，我们将创建我们的 `Home` 或 `index` 页面。在博客项目的根目录下，创建一个名为 `index.ejs` 的新文件。注意，这个文件不像之前的文件那样以下划线开头。在
    Harp 中，任何带有下划线的文件都会被编译成另一个文件，并且在文件复制到生产目录时会被忽略。例如，你不想编译器输出 `layout.html`，因为它与
    `Home` 页面的内容相当无用。你只想得到 `index.html`，你可以将其部署到你的 web 服务器上。你需要记住的基本事情是不要在页面模板文件的开始处包含下划线。一旦创建了文件，插入以下代码：
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To get us started, I''m going to keep this really simple. Here''s a quick breakdown
    of what is happening:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们开始，我会让它非常简单。以下是对正在发生的事情的快速概述：
- en: I've created another `.container` which will hold the content for the `Home`
    page
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我又创建了一个 `.container`，它将包含 `Home` 页面的内容
- en: Within the container, there is a full-width column. In that column, I've inserted
    an `<h1>` with a `hello world!` message
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器内，有一个全宽的列。在那个列中，我插入了一个 `<h1>` 标题，内容为 `hello world!`。
- en: That will be it for now. Later on, we'll build this page out further. Save the
    file and close it. We've now completed setting up all the basic files for our
    Harp development environment. The last step is to compile the project and test
    it out.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止。稍后，我们将进一步构建这个页面。保存文件并关闭它。我们现在已经完成了设置 Harp 开发环境所有基本文件的设置。最后一步是编译项目并测试它。
- en: Compiling your project
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译你的项目
- en: 'When we compile a project in Harp, it will find all the different partial,
    layout, and template files and combine them into regular HTML, CSS, and JavaScript
    files. We haven''t used any Sass yet but, as with the template files, you can
    have multiple Sass files that are compiled into a single CSS file that can be
    used on a production web server. To compile your project, navigate to the root
    of the blog project in the Terminal. Once you are there, run the following command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 Harp 中编译一个项目时，它会找到所有不同的部分、布局和模板文件，并将它们组合成常规的 HTML、CSS 和 JavaScript 文件。我们还没有使用
    Sass，但就像模板文件一样，你可以有多个 Sass 文件，这些文件可以编译成一个可以在生产 Web 服务器上使用的单个 CSS 文件。要编译你的项目，在终端中导航到博客项目的根目录。一旦你到了那里，运行以下命令：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If everything worked, a new blank line in the terminal will appear. This is
    good! If the compiler spits out an error, read what it has to say and make the
    appropriate changes to your template files. A couple of common errors that you
    might run into are the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，终端中会出现一个新空白行。这是好的！如果编译器抛出错误，阅读它需要表达的内容，并对您的模板文件进行适当的修改。你可能遇到的一些常见错误如下：
- en: Syntax errors in `_harp.json` or `_data.json`
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_harp.json` 或 `_data.json` 中的语法错误'
- en: Syntax errors for variable or partial names in `_layout.ejs`
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `_layout.ejs` 中变量或部分名称的语法错误
- en: If you have created additional page templates in the root of your project, and
    *not* included them in `_data.json`, the compile will fail
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你已经在项目的根目录中创建了额外的页面模板，并且没有在 `_data.json` 中包含它们，编译将失败
- en: Once your compile is successful, head back to the root of the blog project and
    notice that there is a new `www` directory. This directory holds all the compiled
    HTML, CSS, and JavaScript files for your project. When you are ready to deploy
    your project to a production web server, you would copy these files up with FTP
    or using another means of file transfer. Every time you run the harp compile command
    in your project, these files will be updated with any new or edited code.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编译成功，回到博客项目的根目录，你会注意到有一个新的 `www` 目录。这个目录包含了你的项目的所有编译后的 HTML、CSS 和 JavaScript
    文件。当你准备好将项目部署到生产 Web 服务器时，你会使用 FTP 或其他文件传输方式将这些文件上传。每次你在项目中运行 harp 编译命令时，这些文件都会根据任何新的或编辑的代码进行更新。
- en: Running your project
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行你的项目
- en: 'Harp has a built-in web server that is backed by `Node.js`. This means you
    don''t need a web hosting account or web server to actually test your project.
    With a simple command, you can fire up the built-in server and view your project
    locally. This is also really great if you are working on a project somewhere with
    no Internet connection. It will allow you to continue building your projects Internet-free.
    To run the server, head back to the Terminal and make sure you are still in the
    root directory of your blog project. From there, enter the following command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Harp 内置了一个由 `Node.js` 支持的 Web 服务器。这意味着你不需要网络托管账户或 Web 服务器来实际测试你的项目。通过一个简单的命令，你可以启动内置服务器并在本地查看你的项目。如果你在一个没有互联网连接的地方工作，这也会非常棒。它将允许你在没有互联网的情况下继续构建你的项目。要运行服务器，回到终端并确保你仍然位于博客项目的根目录中。然后，输入以下命令：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the Terminal, you should see a message that the server is running. You are
    now free to visit the project in a browser.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，你应该看到一条消息表明服务器正在运行。你现在可以自由地在浏览器中访问项目。
- en: Viewing your project
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看你的项目
- en: 'Now that the project is up and running on the web server, simply navigate to
    the following URL to view it: `http://localhost:9000`.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在项目已经在 Web 服务器上运行，只需导航到以下 URL 来查看它：`http://localhost:9000`。
- en: 'By default, Harp runs on port `9000` but you can specify a different port by
    modifying the last command. Go back to the terminal and quit the server by hitting
    *Ctrl* + *C*. Now enter the following command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Harp 在端口 `9000` 上运行，但你可以通过修改最后一个命令来指定不同的端口。回到终端，通过按 *Ctrl* + *C* 来关闭服务器。现在输入以下命令：
- en: '[PRE14]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Using this command, you can invoke any port you would like to use. Head back
    to the web browser again and change the URL slightly to read `http://localhost:9001`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个命令，你可以调用你想要的任何端口。再次回到网页浏览器，稍微更改 URL，使其读取 `http://localhost:9001`。
- en: 'Your project should load for you and look something like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你的项目应该为你加载，看起来像这样：
- en: '![Viewing your project](img/00002.jpeg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![查看你的项目](img/00002.jpeg)'
- en: It might not be much to look at right now but it works! Your project is successfully
    set up and running. In future chapters, we'll add to this page and build some
    more using additional Bootstrap 4 components.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来可能不是很多，但它确实可以工作！您的项目已成功设置并运行。在未来的章节中，我们将添加到这个页面，并使用额外的 Bootstrap 4 组件构建更多内容。
- en: '![Viewing your project](img/00003.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![查看您的项目](img/00003.jpeg)'
- en: A note about Sass
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于 Sass 的注意事项
- en: When building a project with Bootstrap 4, there are two ways you can work with
    Sass. The first would be by editing the actual Bootstrap framework files and then
    recompiling them using Grunt. This is useful if you'd like to use something such
    as Flexbox for your grid layout. I'll discuss this in greater depth in the next
    lesson. The other way you might want to use Sass is to craft a unique theme that
    applies a custom look and feel to Bootstrap. This is done in the actual Harp project.
    Within the `css` directory, you can include Sass files; when you compile your
    Harp project, they will be converted to regular CSS, as Harp has a built-in Sass
    compiler. Then it is just a simple exercise of including those additional files
    in your layout template. I'll also get into that a little later in the course
    but I wanted to point out the difference now.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Bootstrap 4 构建项目时，您有两种方式可以与 Sass 一起工作。第一种是通过编辑实际的 Bootstrap 框架文件，然后使用 Grunt
    重新编译它们。如果您想使用 Flexbox 来实现网格布局，这将非常有用。我将在下一课中更深入地讨论这个问题。另一种您可能想要使用 Sass 的方式是创建一个独特的主题，将自定义的外观和感觉应用到
    Bootstrap 上。这是在实际的 Harp 项目中完成的。在 `css` 目录中，您可以包含 Sass 文件；当您编译 Harp 项目时，它们将被转换为常规
    CSS，因为 Harp 内置了 Sass 编译器。然后，只需简单地将这些额外的文件包含到您的布局模板中即可。我将在课程稍后也涉及到这一点，但现在我想指出这些差异。
- en: Browser support
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览器支持
- en: Bootstrap 4 does not support Internet Explorer version 8 and earlier. Bootstrap
    4 also comes with optional Flexbox support. Only Internet Explorer versions 11
    and higher support the CSS3 Flexible Box Layout Module. Besides Internet Explorer
    8 and earlier, Bootstrap supports all major browsers, including many mobile browsers.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 4 不支持 Internet Explorer 8 及更早版本。Bootstrap 4 还提供了可选的 Flexbox 支持。只有
    Internet Explorer 11 及更高版本支持 CSS3 弹性盒布局模块。除了 Internet Explorer 8 及更早版本外，Bootstrap
    支持所有主流浏览器，包括许多移动浏览器。
- en: Vendor prefixes
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 供应商前缀
- en: CSS3 introduced **vendor-specific** rules, which offer you the possibility of
    writing some additional CSS, applicable for only one browser. At first sight,
    this seems the exact opposite of what we want. What we want is a set of standards
    and practicalities that work the same with every browser and a standard set of
    HTML and CSS which has the same effect and interpretation for every browser. These
    vendor-specific rules are intended to help us reach this utopia. Vendor-specific
    rules also provide us with early implementations of standard properties and alternative
    syntax. Last but not least, these rules allow browsers to implement proprietary
    **CSS** properties that would otherwise have no working standard (and may never
    actually become the standard).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: CSS3 引入了 **供应商特定的** 规则，这为您提供了编写一些仅适用于单一浏览器的额外 CSS 的可能性。乍一看，这似乎与我们想要的正好相反。我们想要的是一套标准和实用性，在所有浏览器中都能正常工作，以及一套标准的
    HTML 和 CSS，在所有浏览器中具有相同的效果和解释。这些供应商特定的规则旨在帮助我们实现这个乌托邦。供应商特定的规则还为我们提供了标准属性和替代语法的早期实现。最后但同样重要的是，这些规则允许浏览器实现那些否则没有工作标准的专有
    **CSS** 属性（并且可能永远不会成为标准）。
- en: 'For these reasons, vendor-specific rules play an important role in many new
    features of CSS3\. For example, **animation properties**, **border-radius**, and
    **box-shadow**: all did depend on vendor-specific rules in past years. You can
    easily see that some properties may evolve from vendor prefixes to standard, because
    currently, most browsers support the **border-radius,** and **box-shadow** properties
    without any prefix.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些原因，供应商特定的规则在 CSS3 的许多新特性中扮演着重要的角色。例如，**动画属性**、**border-radius** 和 **box-shadow**：在过去几年中，所有这些属性都依赖于供应商特定的规则。您可以很容易地看出，某些属性可能会从供应商前缀演变为标准，因为目前，大多数浏览器都支持带有任何前缀的
    **border-radius** 和 **box-shadow** 属性。
- en: 'Vendors use the following prefixes:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商使用以下前缀：
- en: '**WebKit**: `-webkit`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WebKit**：`-webkit`'
- en: '**Firefox**: `-moz`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Firefox**：`-moz`'
- en: '**Opera**: `-o`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Opera**：`-o`'
- en: '**Internet Explorer**: `-ms`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Internet Explorer**：`-ms`'
- en: 'Consider the following CSS code:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 CSS 代码：
- en: '[PRE15]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'For full browser support, or to support at least the browser supported by Bootstrap,
    we''ll have to write:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现全浏览器支持，或者至少支持 Bootstrap 所支持的浏览器，我们不得不编写：
- en: '[PRE16]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'More information about the transition property and browser support can also
    be found at the following URL: [http://caniuse.com/#feat=css-transitions](http://caniuse.com/#feat=css-transitions).'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 关于过渡属性和浏览器支持的更多信息也可以在以下 URL 中找到：[http://caniuse.com/#feat=css-transitions](http://caniuse.com/#feat=css-transitions)。
- en: Because of different browsers and their different versions, browsers may use
    different vendor prefixes to support the same property in writing cross-browser
    CSS code which can become very complex.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 由于不同的浏览器及其不同版本，浏览器可能会使用不同的供应商前缀来支持在编写跨浏览器 CSS 代码时相同的属性，这可能会变得非常复杂。
- en: Bootstrap's Sass code, which compiles into CSS code does not contain any prefixes.
    Instead of using prefixes, the PostCSS autoprefixer has been integrated into Bootstrap's
    build process. When you create your own build process you should also use the
    PostCSS autoprefixer.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 的 Sass 代码，编译成 CSS 代码不包含任何前缀。而不是使用前缀，PostCSS autoprefixer 已集成到 Bootstrap
    的构建过程中。当你创建自己的构建过程时，你也应该使用 PostCSS autoprefixer。
- en: Troubleshooting
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除
- en: '[PRE17]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When we have so many moving parts to work with, things are bound to happen and
    these are some of our best survival methods!
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有这么多要处理的动态部分时，事情肯定会发生，这些是一些我们最好的生存方法！
- en: Bootply is a playground for Bootstrap, CSS, JavaScript, and jQuery; you can
    use it to test your HTML code. You can also add your compiled CSS code, but Bootply
    cannot compile your CSS code.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Bootply 是 Bootstrap、CSS、JavaScript 和 jQuery 的游乐场；你可以用它来测试你的 HTML 代码。你还可以添加你的编译后的
    CSS 代码，但 Bootply 不能编译你的 CSS 代码。
- en: Note
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Bootply can be found online at [http://www.bootply.com/](http://www.bootply.com/).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Bootply 可以在 [http://www.bootply.com/](http://www.bootply.com/) 上找到。
- en: Our site template is almost complete. Let's pause to take stock before moving
    on.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们网站模板几乎完成了。在继续之前，让我们暂停一下，总结一下。
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: That brings the first lesson to a close. In this lesson, we have set up our
    first blog project with all the necessary files.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了第一课。在本课中，我们已经设置了我们的第一个博客项目，并包含了所有必要的文件。
- en: Now that our environment is set up and ready to go, we'll start coding the blog
    in the next lesson. To get us started, we'll jump right into learning about how
    to use a Flexbox layout in Bootstrap.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好环境并准备就绪，我们将在下一课中开始编写博客。为了让我们开始，我们将直接学习如何在 Bootstrap 中使用 Flexbox 布局。
- en: Assessments
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Which of the following does NOT use the Bootstrap framework?
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个不使用 Bootstrap 框架？
- en: JavaScript
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaScript
- en: HTML
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTML
- en: PHP
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: PHP
- en: CSS
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSS
- en: What is the full form of CDN?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CDN 的全称是什么？
- en: Cloud Deployment Network
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 云部署网络
- en: Content Delivery Network
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内容分发网络
- en: Context Delivery Network
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内容交付网络
- en: Content Deployment Network
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内容交付网络
- en: What does Bootstrap use as a base CSS reset?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Bootstrap 作为基础 CSS 重置使用的是什么？
- en: '`normalize.css`'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`normalize.css`'
- en: '`reboot.css`'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`reboot.css`'
- en: '`bootstrap.css`'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bootstrap.css`'
- en: '`bootstrap.min.css`'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bootstrap.min.css`'
- en: Which command is used to know the version number of Node.js installed in your
    system?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于了解系统中安装的 Node.js 版本号的命令是什么？
- en: '`$ node –ver`'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$ node –ver`'
- en: '`$ node -vs`'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$ node -vs`'
- en: '`$ node –v`'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$ node –v`'
- en: '`$ node –vr`'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$ node –vr`'
- en: What is the command used for installing Harp in Mac?
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Mac 上安装 Harp 的命令是什么？
- en: '`$ sudo npm install -g harp`'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$ sudo npm install -g harp`'
- en: '`$ npm install -g harp`'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$ npm install -g harp`'
- en: '`$ node install hard`'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$ node install hard`'
- en: '`$ harp install`'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`$ harp install`'
- en: What does Bootstrap use for CSS and JavaScript build system?
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Bootstrap 用于 CSS 和 JavaScript 构建系统的工具是什么？
- en: Selenium
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Selenium
- en: Drone
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Drone
- en: Grunt
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Grunt
- en: Ruby
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ruby
- en: Which of the following sets the basic styles for the navigation bar?
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个用于设置导航栏的基本样式？
- en: '`<navbar class="navbar navbar-light bg-faded" role="navigation"></navbar>`'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<navbar class="navbar navbar-light bg-faded" role="navigation"></navbar>`'
- en: '`<nav classnav="navbar navbar-light bg-faded" rolenav="navigation"></nav>`'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<nav classnav="navbar navbar-light bg-faded" rolenav="navigation"></nav>`'
- en: '`<nav class="navbar navbar-light bg-faded" role="navigation"></nav>`'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<nav class="navbar navbar-light bg-faded" role="navigation"></nav>`'
- en: '`<nav navclass="navbar navbar-light bg-faded" navrole="navigation"></nav>`'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<nav navclass="navbar navbar-light bg-faded" navrole="navigation"></nav>`'
- en: Which of the following is NOT a build tool used in Bootstrap?
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个不是 Bootstrap 中使用的构建工具？
- en: Node.js
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Node.js
- en: Grunt.js
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Grunt.js
- en: Surge.js
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Surge.js
- en: Harp.js
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Harp.js
- en: In order to install Grunt, which of the following commands will you run?
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了安装 Grunt，你会运行以下哪个命令？
- en: '`npm install -g grunt-cli`'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`npm install -g grunt-cli`'
- en: '`npm install grunt-cli`'
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`npm install grunt-cli`'
- en: '`npm install -g grunt-cli`'
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`npm install -g grunt-cli`'
- en: '`npm install grunt-cli`'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`npm install grunt-cli`'
- en: What is used to run the documentation website and to compile the core Sass files
    into regular CSS?
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于运行文档网站并将核心 Sass 文件编译成常规 CSS 的工具是什么？
- en: Grunt
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Grunt
- en: Ruby
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ruby
- en: Perl
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Perl
- en: Bundlenr
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Bundlenr
- en: Which of the following directories will hold any reusable snippets of code that
    you want to use in multiple locations throughout your templates or web pages?
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个目录将包含您想在模板或网页的多个位置重复使用的代码片段？
- en: js
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: js
- en: partial
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部分内容
- en: JSON
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSON
- en: CSS
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: CSS
