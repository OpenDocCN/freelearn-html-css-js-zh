- en: Chapter 1. Setting up Our First Blog Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap is the most popular HTML, CSS, and JavaScript framework in the modern
    web development world today. Whether you are new to web development or an experienced
    professional, Bootstrap is a powerful tool for whatever type of web application
    you are building. With the release of version 4, Bootstrap is more relevant than
    ever and brings a complete set of components that are easy to learn and use. In
    this lesson, I'll show you how to set up our first blog project with all necessary
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing framework files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get into building the basic template for a Bootstrap project, we
    should review the files that we need to include, so as to make the framework run
    properly. Minimal requirement for the purpose: one CSS file and two JavaScript
    files. These files can either be served from the Bootstrap **Content Delivery
    Network** (**CDN**) or downloaded and included directly in our project. When using
    CDN, simply include the following line of code in the head of your file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CDNs help to distribute bandwidth across multiple servers and allow users to
    download static content from a closer source.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap can be loaded from [https://www.bootstrapcdn.com/](https://www.bootstrapcdn.com/).
    BootstrapCDN is powered by MaxCDN which can be found at [https://www.maxcdn.com/](https://www.maxcdn.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Inserting the JavaScript files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As I mentioned earlier, we need to include two JavaScript files to implement
    the framework properly. The files are the **jQuery** and **Bootstrap JavaScript**
    framework files. As with the CSS file, you can either do this through the use
    of a CDN or download and insert the files manually. The JavaScript files should
    be inserted at the bottom of your page right before the closing `</body>` tag.
    If you choose to use the CDN, insert the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you prefer to insert the files yourself, go back to the Bootstrap package
    you downloaded earlier and locate the `/js` directory. There will be a few files
    here but the one you want is `bootstrap.min.js`. You''ll need to also head to
    [http://jquery.com](http://jquery.com/) to download the jQuery framework file.
    Once you''ve done that, drop both files into the `/js` directory for your own
    project. Next, enter the following lines of code at the bottom of your page template.
    Make sure jQuery is loaded before `bootstrap.min.js`. This is critical; if you
    load them in the opposite order, the framework won''t work properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: That concludes the explanation of the key Bootstrap framework files you need
    to include to get your project started. The next step will be to set up the basic
    starter template so you can begin coding your project.
  prefs: []
  type: TYPE_NORMAL
- en: The starter template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The basic starter template is the bare bones of what you''ll need to get a
    page going using Bootstrap. Let''s start by reviewing the code for the entire
    template and then I''ll break down each critical part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: HTML5 DOCTYPE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like most projects nowadays, Bootstrap uses the HTML5 DOCTYPE for its template.
    That is represented by the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Avoid using other DOCTYPES such as **XHTML** strict or transitional or unexpected
    issues will arise with your components and layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Structuring the responsive meta tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bootstrap is a mobile-first framework so the following meta tag needs to be
    included to allow for responsive web design. To make sure your project renders
    properly on all types of devices, you must include this meta tag in the `<head>`
    of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''re interested in learning more about how responsive web design works
    in Bootstrap, you should check out the documentation at: [http://v4-alpha.getbootstrap.com/layout/responsive-utilities/](http://v4-alpha.getbootstrap.com/layout/responsive-utilities/)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: That brings to a close the most important parts of the template that you need
    to be aware of. The remainder of the code in the starter template should be straightforward
    and easy to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Normalizing and Rebooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As I mentioned earlier, Bootstrap uses `normalize.css` as the base CSS reset.
    With the addition of the Reboot reset, Bootstrap extends Normalize and allows
    for styling to only be done using CSS classes. This is a much safer pattern to
    follow, as it's much easier to deal with CSS specificity if you are NOT using
    CSS IDs for styling purposes. The CSS reset code is baked right into `bootstrap.min.css`
    so there is no need to include any further CSS files for the reset.
  prefs: []
  type: TYPE_NORMAL
- en: Taking the starter template further
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we have our template set up, one of the main problems with static websites
    is when things change. If your project grew to 50, 100, or 500 pages and you wanted
    to possibly update to a new version of Bootstrap, you might be looking at having
    to update all of those files. This is extremely painful, to put it mildly. Now
    we enter static site generators.
  prefs: []
  type: TYPE_NORMAL
- en: Using a static site generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the hottest trends right now in web development is the use of static
    site generators. What exactly does that mean? Instead of having several static
    files that require updating every time something changes globally, you can use
    a series of base templates then load your body content into them. This is sometimes
    called includes or partials. This way, you only have one or two layout files that
    include the header and footer code.
  prefs: []
  type: TYPE_NORMAL
- en: Then, when something changes, you only have to update a few files instead of
    500\. Once your website is complete, you then generate a version that is plain
    HTML, CSS, and JavaScript, and deploy it to your server. This is what I would
    call creating your own frontend web development environment. This is also how
    most people work on larger projects nowadays to keep them manageable.
  prefs: []
  type: TYPE_NORMAL
- en: Converting the base template to a generator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why don't we integrate the basic template into a generator so that I can show
    you what I'm talking about? My generator of choice is called Harp.js and you can
    install it by following the steps provided in the code folder (`Installation Manual`).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of great arguments for using a static site generator such
    as Harp.js: cleaner code, modern best practices, and more. However, the best reason
    is that it will just make your life simple. Instead of having to update a header
    on all 50 pages of the website, you can simply update the header partially and
    then have that compiled into all your templates. You can also take advantage of
    using variables to insert content and configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Converting the base template to a generator](img/00001.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up the blog project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by creating a new directory and call it something like `Bootstrap
    Blog`. Open up that folder and create the following sub-directories inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: css
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: fonts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: img
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: partial
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: css
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `css` directory will hold the Bootstrap framework's CSS file and a custom
    theme file which we'll build later on. Go to the Bootstrap source file directory
    and locate the `dist/css` folder. From there, copy `bootstrap.min.css` to our
    new blog project's `css` directory.
  prefs: []
  type: TYPE_NORMAL
- en: fonts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `fonts` directory will hold either a font icon library such as Glyphicon
    or Font Awesome. Previously, Bootstrap shipped with Glyphicon but they have dropped
    it in version 4\. If you wish to use it, you'll need to download the icon font
    set and then drop the files into this directory. You could also include a web
    font that you may want to use on your project in this directory. If you are looking
    for web fonts, a good place to start is Google Web Fonts.
  prefs: []
  type: TYPE_NORMAL
- en: img
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `img` directory will hold any images used in the blog.
  prefs: []
  type: TYPE_NORMAL
- en: js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `js` or JavaScript directory will hold the Bootstrap framework JavaScript
    files. If you add any other third-party libraries, they should also be included
    in this directory. Go back to the Bootstrap source files one last time and locate
    the `dist/js` folder. From there, copy `bootstrap.min.js` to the `js` directory
    in the blog project.
  prefs: []
  type: TYPE_NORMAL
- en: partial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `partial` directory will hold any reusable snippets of code that we want
    to use in multiple locations throughout our templates or web pages, for example,
    the header and footer for our project. It's important to note you can have as
    many partial files as you like or use none at all.
  prefs: []
  type: TYPE_NORMAL
- en: Within this folder, create two new files and name them `_header.ejs` and `footer.ejs`.
    For now, you can leave them blank.
  prefs: []
  type: TYPE_NORMAL
- en: EJS files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**EJS** stands for **Embeddable JavaScript**. This is a type of template file
    that allows us to use things such as partials and variables in our templates.
    Harp also supports Jade if you prefer that language. However, I prefer to use
    EJS because it is very similar to HTML and therefore really easy to learn. If
    you''ve ever used WordPress, it is very similar to using template tags to insert
    bits of content or components into your design.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the JSON files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each Harp project has at least two JSON files that are used for configuring
    a project. JSON stands for JavaScript Object Notation and it's a lightweight format
    for data interchange. If that sounds complicated, don't worry about it. The actual
    coding of a JSON file is actually really straightforward, as I will show you now.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first is called `_harp.json` and it''s used for configuring global settings
    and variables that will be used across the entire blog. In this case, we''re going
    to set up a global variable for the name of our project that will be inserted
    into every page template. Start by creating a new file in the root of blog project
    and call it `_harp.json`. Within the file, insert the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what''s happening in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: We're using the `globals` keyword so any variables under this will be available
    across all of our templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've created a new variable called `siteTitle` which will be the title of the
    project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've inserted the name of the book, `Learning Bootstrap 4`, as the title for
    the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That completes the setup of the global `_harp.json` file. In a little bit, I'll
    show you how to add the variable we set up to the main layout file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the data JSON file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next thing we need to do is set up the `_data.json` file that can hold
    template-specific variables and settings. For our project, we''ll set up one variable
    for each page template which will hold the name of the page. Create another file
    in the root of the blog project and name it `_data.json`. In that file, insert
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let me break down this code for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index` refers to a filename. In this case, it will be our home page. We haven''t
    actually created this file yet but that is okay as we will in the next steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've created a variable called `pageTitle` which will refer to the title of
    each page template in our project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since this is the `index` template, I've assigned a value or name of `Home`
    to it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That completes the setup of the `_data.json` file for now. Later on, we'll need
    to update this file once we add more page templates. For now, this will give us
    the minimum resources that we need to get our project going.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's go ahead and set up the layout file for our project. The layout is a separate
    file that will be a wrapper for the content of all of our pages. It contains things
    such as the `<head>` of our page, a header partial, and a footer partial. This
    is one of the advantages to using a static site generator. We don't have to define
    this on every page so if we want to change something in our header, we only change
    it in the layout. On the next compile, all of the page templates' headers will
    be updated with the new code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file in the root of the blog project called `_layout.ejs`. Since
    this is technically a type of layout file, we''ll be creating it as an EJS template
    file. Once you''ve created the file, insert the following code into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: That completes the setup of the layout. Next, let's move on to coding the header
    and footer partials.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the header
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s set up our first partial by coding the header. We''ll use the Bootstrap
    `navbar` component here for our global navigation for the blog. In the partial
    directory, open up the `_header.ejs` file that you created a little earlier and
    insert the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''re a Bootstrap 3 user, you''ll likely notice that the code to render
    a `navbar` in version 4 is much cleaner. This will make the `navbar` much easier
    to use and explain. Let me break down the code for you:'
  prefs: []
  type: TYPE_NORMAL
- en: On the `<nav>` tag, we have a few classes we need to include. `.navbar` is the
    standard class need for this component. `.navbar-light` will render a light-colored
    navbar for us. There are some other color options you can check out in the Bootstrap
    documents. Finally, the `.bg-faded` class is optional but I like to include it
    as it makes the background of the `navbar` a little more subtle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.navbar-brand` class is unchanged from Bootstrap 3 and I've inserted the
    name of the book for this tag. Feel free to name it whatever you want.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we have our navigation list of links. The `<ul>` tag needs to have the
    two required classes here: `.nav` and `.navbar-nav`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Within the list, you''ll notice three pages: `Home`, `About` and `Contact`.
    These are going to be the pages we''ll build out through later chapters so please
    fill them in now.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note the `.active` class on the index page link. This is optional and you may
    not want to include it in this manner as this is a global navigation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finally, I've included a search form and used the `.pull-xs-right` to align
    it to the right of the `navbar`. If you're familiar with Bootstrap 3, this class
    used to simply be called `.pull-right`. In Bootstrap 4, you have more control
    of the alignment based on the viewport size of your device. If you always want
    the search bar to be aligned to the right then use the `-xs` value in the class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the file and that will complete the setup of the header partial. Let's
    move on to setting up the footer.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the footer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The footer partial works exactly like the header. Open up the `_footer.ejs`
    file in the partial directory that we created earlier and paste in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `footer` content is going to be quite basic for our blog. Here''s a breakdown
    of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'I''m using the `.container` class to wrap the entire `footer`, which will set
    a max width of 1140 px for the layout. The `navbar` wasn''t placed into a container
    so it will stretch to the full width of the page. The `.container` class will
    also set a left and right padding of .9375rem to the block. It''s important to
    note that Bootstrap 4 uses REMs for the main unit of measure. EMs has been deprecated
    with the upgrade from version 3\. If you''re interested in learning more about
    REMs, you should read this blog post: [http://snook.ca/archives/html_and_css/font-size-with-rem](http://snook.ca/archives/html_and_css/font-size-with-rem)
    .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's also important to note that the column classes have NOT changed from Bootstrap
    3 to 4\. This is actually a good thing if you are porting over a project, as it
    will make the migration process much easier. I've set the width of the footer
    to be the full width of the container by using the `.col-lg-12` class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally I've entered some simple content for the footer, which is the book name
    and the year of writing. Feel free to change this up to whatever you want.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the file and the footer setup will be complete.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We're getting closer to having our Harp development environment set up. The
    last thing we need to do is set up our index page template and then we can compile
    and view our project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first page template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For our first page template, we''re going to create our `Home` or `index` page.
    In the root of the blog project, create a new file called `index.ejs`. Note this
    file is not prepended with an underscore like the previous files. With Harp, any
    file that has the underscore will be compiled into another and ignored when the
    files are copied into the production directory. For example, you don''t want the
    compiler to spit out `layout.html` because it''s fairly useless with the content
    of the `Home` page. You only want to get `index.html`, which you can deploy to
    your web server. The basic thing you need to remember is to *not* include an underscore
    at the beginning of your page template files. Once you''ve created the file, insert
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To get us started, I''m going to keep this really simple. Here''s a quick breakdown
    of what is happening:'
  prefs: []
  type: TYPE_NORMAL
- en: I've created another `.container` which will hold the content for the `Home`
    page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within the container, there is a full-width column. In that column, I've inserted
    an `<h1>` with a `hello world!` message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That will be it for now. Later on, we'll build this page out further. Save the
    file and close it. We've now completed setting up all the basic files for our
    Harp development environment. The last step is to compile the project and test
    it out.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling your project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we compile a project in Harp, it will find all the different partial,
    layout, and template files and combine them into regular HTML, CSS, and JavaScript
    files. We haven''t used any Sass yet but, as with the template files, you can
    have multiple Sass files that are compiled into a single CSS file that can be
    used on a production web server. To compile your project, navigate to the root
    of the blog project in the Terminal. Once you are there, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything worked, a new blank line in the terminal will appear. This is
    good! If the compiler spits out an error, read what it has to say and make the
    appropriate changes to your template files. A couple of common errors that you
    might run into are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Syntax errors in `_harp.json` or `_data.json`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Syntax errors for variable or partial names in `_layout.ejs`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have created additional page templates in the root of your project, and
    *not* included them in `_data.json`, the compile will fail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once your compile is successful, head back to the root of the blog project and
    notice that there is a new `www` directory. This directory holds all the compiled
    HTML, CSS, and JavaScript files for your project. When you are ready to deploy
    your project to a production web server, you would copy these files up with FTP
    or using another means of file transfer. Every time you run the harp compile command
    in your project, these files will be updated with any new or edited code.
  prefs: []
  type: TYPE_NORMAL
- en: Running your project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Harp has a built-in web server that is backed by `Node.js`. This means you
    don''t need a web hosting account or web server to actually test your project.
    With a simple command, you can fire up the built-in server and view your project
    locally. This is also really great if you are working on a project somewhere with
    no Internet connection. It will allow you to continue building your projects Internet-free.
    To run the server, head back to the Terminal and make sure you are still in the
    root directory of your blog project. From there, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the Terminal, you should see a message that the server is running. You are
    now free to visit the project in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing your project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that the project is up and running on the web server, simply navigate to
    the following URL to view it: `http://localhost:9000`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Harp runs on port `9000` but you can specify a different port by
    modifying the last command. Go back to the terminal and quit the server by hitting
    *Ctrl* + *C*. Now enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Using this command, you can invoke any port you would like to use. Head back
    to the web browser again and change the URL slightly to read `http://localhost:9001`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your project should load for you and look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing your project](img/00002.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It might not be much to look at right now but it works! Your project is successfully
    set up and running. In future chapters, we'll add to this page and build some
    more using additional Bootstrap 4 components.
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing your project](img/00003.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A note about Sass
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When building a project with Bootstrap 4, there are two ways you can work with
    Sass. The first would be by editing the actual Bootstrap framework files and then
    recompiling them using Grunt. This is useful if you'd like to use something such
    as Flexbox for your grid layout. I'll discuss this in greater depth in the next
    lesson. The other way you might want to use Sass is to craft a unique theme that
    applies a custom look and feel to Bootstrap. This is done in the actual Harp project.
    Within the `css` directory, you can include Sass files; when you compile your
    Harp project, they will be converted to regular CSS, as Harp has a built-in Sass
    compiler. Then it is just a simple exercise of including those additional files
    in your layout template. I'll also get into that a little later in the course
    but I wanted to point out the difference now.
  prefs: []
  type: TYPE_NORMAL
- en: Browser support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap 4 does not support Internet Explorer version 8 and earlier. Bootstrap
    4 also comes with optional Flexbox support. Only Internet Explorer versions 11
    and higher support the CSS3 Flexible Box Layout Module. Besides Internet Explorer
    8 and earlier, Bootstrap supports all major browsers, including many mobile browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Vendor prefixes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS3 introduced **vendor-specific** rules, which offer you the possibility of
    writing some additional CSS, applicable for only one browser. At first sight,
    this seems the exact opposite of what we want. What we want is a set of standards
    and practicalities that work the same with every browser and a standard set of
    HTML and CSS which has the same effect and interpretation for every browser. These
    vendor-specific rules are intended to help us reach this utopia. Vendor-specific
    rules also provide us with early implementations of standard properties and alternative
    syntax. Last but not least, these rules allow browsers to implement proprietary
    **CSS** properties that would otherwise have no working standard (and may never
    actually become the standard).
  prefs: []
  type: TYPE_NORMAL
- en: 'For these reasons, vendor-specific rules play an important role in many new
    features of CSS3\. For example, **animation properties**, **border-radius**, and
    **box-shadow**: all did depend on vendor-specific rules in past years. You can
    easily see that some properties may evolve from vendor prefixes to standard, because
    currently, most browsers support the **border-radius,** and **box-shadow** properties
    without any prefix.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Vendors use the following prefixes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WebKit**: `-webkit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Firefox**: `-moz`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Opera**: `-o`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internet Explorer**: `-ms`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following CSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'For full browser support, or to support at least the browser supported by Bootstrap,
    we''ll have to write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'More information about the transition property and browser support can also
    be found at the following URL: [http://caniuse.com/#feat=css-transitions](http://caniuse.com/#feat=css-transitions).'
  prefs: []
  type: TYPE_NORMAL
- en: Because of different browsers and their different versions, browsers may use
    different vendor prefixes to support the same property in writing cross-browser
    CSS code which can become very complex.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap's Sass code, which compiles into CSS code does not contain any prefixes.
    Instead of using prefixes, the PostCSS autoprefixer has been integrated into Bootstrap's
    build process. When you create your own build process you should also use the
    PostCSS autoprefixer.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: When we have so many moving parts to work with, things are bound to happen and
    these are some of our best survival methods!
  prefs: []
  type: TYPE_NORMAL
- en: Bootply is a playground for Bootstrap, CSS, JavaScript, and jQuery; you can
    use it to test your HTML code. You can also add your compiled CSS code, but Bootply
    cannot compile your CSS code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bootply can be found online at [http://www.bootply.com/](http://www.bootply.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Our site template is almost complete. Let's pause to take stock before moving
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That brings the first lesson to a close. In this lesson, we have set up our
    first blog project with all the necessary files.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our environment is set up and ready to go, we'll start coding the blog
    in the next lesson. To get us started, we'll jump right into learning about how
    to use a Flexbox layout in Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following does NOT use the Bootstrap framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JavaScript
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CSS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the full form of CDN?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cloud Deployment Network
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Content Delivery Network
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Context Delivery Network
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Content Deployment Network
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What does Bootstrap use as a base CSS reset?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`normalize.css`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`reboot.css`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`bootstrap.css`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`bootstrap.min.css`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command is used to know the version number of Node.js installed in your
    system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ node –ver`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ node -vs`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ node –v`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ node –vr`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the command used for installing Harp in Mac?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ sudo npm install -g harp`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ npm install -g harp`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ node install hard`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ harp install`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What does Bootstrap use for CSS and JavaScript build system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selenium
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drone
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Grunt
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Ruby
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following sets the basic styles for the navigation bar?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<navbar class="navbar navbar-light bg-faded" role="navigation"></navbar>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<nav classnav="navbar navbar-light bg-faded" rolenav="navigation"></nav>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<nav class="navbar navbar-light bg-faded" role="navigation"></nav>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<nav navclass="navbar navbar-light bg-faded" navrole="navigation"></nav>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is NOT a build tool used in Bootstrap?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Grunt.js
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Surge.js
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Harp.js
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to install Grunt, which of the following commands will you run?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`npm install -g grunt-cli`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`npm install grunt-cli`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`npm install -g grunt-cli`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`npm install grunt-cli`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is used to run the documentation website and to compile the core Sass files
    into regular CSS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grunt
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Ruby
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Perl
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Bundlenr
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following directories will hold any reusable snippets of code that
    you want to use in multiple locations throughout your templates or web pages?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: js
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: partial
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: CSS
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
