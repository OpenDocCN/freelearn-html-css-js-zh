["```js\n    export const fetchResponseOk = (response = {}) => ({\n      status: 'ok',\n      json: () => Promise.resolve(response)\n    });\n    ```", "```js\n    import {\n      fetchResponseOk\n    } from 'src/factories/fetch.js';\n    ```", "```js\n    import {\n      describe,\n      it,\n      expect,\n      beforeEach,\n      vi\n    } from 'vitest';\n    ```", "```js\n    describe('/birthdays - load', () => {\n      ...\n      it('calls fetch with /api/birthdays', async () => {\n        const fetch = vi.fn();\n        fetch.mockResolvedValue(fetchResponseOk());\n        const result = await load({ fetch });\n        expect(fetch).toBeCalledWith('/api/birthdays');\n      });\n    });\n    ```", "```js\n    export const load = ({ fetch }) => {\n      fetch('/api/birthdays');\n      return {\n        birthdays: getAll()\n      }\n    };\n    ```", "```js\n    describe('/birthdays - load', () => {\n      it('returns a fixture of two items', () => {\n        const result = load({ fetch: () => {} });\n        ...\n      });\n    });\n    ```", "```js\n    describe('/birthdays - load', () => {\n      ...\n      it('returns the response body', async () => {\n        const birthdays = [\n          createBirthday('Hercules', '1994-02-02'),\n          createBirthday('Athena', '1989-01-01')\n        ];\n        const fetch = vi.fn();\n        fetch.mockResolvedValue(\n          fetchResponseOk({ birthdays })\n        );\n        const result = await load({ fetch });\n        expect(result).toEqual({ birthdays });\n      });\n    });\n    ```", "```js\n    export const load = async ({ fetch }) => {\n      const result = await fetch('/api/birthdays');\n      return result.json();\n    };\n    ```", "```js\n    import {\n      addNew,\n      replace\n    } from '$lib/server/birthdayRepository.js';\n    ```", "```js\n    describe('/birthdays - default action', () => {\n      const fetch = vi.fn();\n      beforeEach(() => {\n        fetch.mockResolvedValue(fetchResponseOk());\n      });\n      const performFormAction = (formData) =>\n        actions.default({\n          request: createFormDataRequest(formData),\n          fetch\n        });\n      ...\n    });\n    ```", "```js\n    describe('when adding a new birthday', () => {\n      it('requests data from POST /api/birthdays', async\n      () => {\n        await performFormAction(\n          createBirthday('Zeus', '2009-02-02')\n        );\n        expect(fetch).toBeCalledWith(\n          '/api/birthdays',\n          expect.objectContaining({ method: 'POST' })\n        );\n      });\n    });\n    ```", "```js\n    export const actions = {\n      default: async ({ request, fetch }) => {\n      ...\n    }\n    ```", "```js\n    let result;\n    if (id) {\n      ...\n    } else {\n      result = addNew({ name, dob });\n      await fetch('/api/birthdays', {\n        method: 'POST'\n      });\n    }\n    ```", "```js\n    it('sends the birthday as the request body', async () => {\n      await performFormAction(\n        createBirthday('Zeus', '2009-02-02')\n      );\n      expect(fetch).toBeCalledWith(\n        expect.anything(),\n        expect.objectContaining({\n          body: JSON.stringify({\n            name: 'Zeus',\n            dob: '2009-02-02'\n          })\n        })\n      );\n    });\n    ```", "```js\n    await fetch('/api/birthdays', {\n      method: 'POST',\n      body: JSON.stringify({ name, dob })\n    });\n    ```", "```js\n    export const fetchResponseError = (errorMessage) => ({\n      status: 'error',\n      json: () =>\n        Promise.resolve({ message: errorMessage })\n    });\n    ```", "```js\n    import {\n      fetchResponseOk,\n      fetchResponseError\n    } from 'src/factories/fetch.js';\n    ```", "```js\n    it('returns a 422 if the POST request returns an error', async () => {\n      fetch.mockResolvedValue(\n        fetchResponseError('error message')\n      );\n      const result = await performFormAction(\n        createBirthday('Zeus', '2009-02-02')\n      );\n      expect(result).toBeUnprocessableEntity({\n        error: 'error message',\n        name: 'Zeus',\n        dob: '2009-02-02'\n      });\n    });\n    ```", "```js\n    let result;\n    let response;\n    if (id) {\n      ...\n    } else {\n      result = addNew({ name, dob });\n    response = await fetch('/api/birthdays', {\n        method: 'POST',\n        body: JSON.stringify({ name, dob })\n      });\n    }\n    ```", "```js\n    if (!response.ok) {\n      const { message } = await response.json();\n      return fail(422, {\n        id,\n        name,\n        dob,\n        error: message\n      });\n    }\n    ```", "```js\n    describe('when replacing an existing birthday', () => {\n      it('requests data from PUT /api/birthday/{id}',\n      async () => {\n        await performFormAction(\n          createBirthday('Zeus', '2009-02-02', {\n            id: '123'\n          })\n        );\n        expect(fetch).toBeCalledWith(\n          '/api/birthday/123',\n          expect.objectContaining({ method: 'PUT' })\n        );\n      });\n    });\n    ```", "```js\n    if (id) {\n      result = replace(id, { name, dob });\n      await fetch(`/api/birthday/${id}`, {\n        method: 'PUT'\n      });\n    } else {\n     ...\n    }\n    ```", "```js\n    it('sends the birthday as the request body', async () => {\n      await performFormAction(\n        createBirthday('Zeus', '2009-02-02', {\n          id: '123'\n        })\n      );\n      expect(fetch).toBeCalledWith(\n        expect.anything(),\n        expect.objectContaining({\n          body: JSON.stringify({\n            name: 'Zeus',\n            dob: '2009-02-02'\n          })\n        })\n      );\n    });\n    ```", "```js\n    await fetch(`/api/birthday/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify({ name, dob })\n    });\n    ```", "```js\n    it('returns a 422 if the POST request returns an error', async () => {\n      fetch.mockResolvedValue(\n        fetchResponseError('error message')\n      );\n      const result = await performFormAction(\n        createBirthday('Zeus', '2009-02-02', {\n          id: '123'\n        })\n      );\n      expect(result).toBeUnprocessableEntity({\n        error: 'error message',\n        name: 'Zeus',\n        dob: '2009-02-02',\n        id: '123'\n      });\n    });\n    ```", "```js\n    if (id) {\n      result = replace(id, { name, dob });\n      response = await fetch('/api/birthdays', {\n        method: 'POST',\n        body: JSON.stringify({ name, dob })\n      });\n    } ...\n    ```", "```js\n    const addBirthday = async (request, { name, dob }) => {\n      await request.post('/api/birthdays', {\n        data: { name, dob }\n      });\n    };\n    ```", "```js\n    test('lists all birthday', async ({ page, request }) => {\n      await addBirthday(request, {\n      name: 'Hercules',\n        dob: '1995-02-03'\n      });\n      await addBirthday(request, {\n        name: 'Athena',\n        dob: '1995-02-03'\n      });\n      ...\n    });\n    ```", "```js\n    test('edits a birthday', async ({ page, request }) => {\n      await addBirthday(request, {\n        name: 'Ares',\n        dob: '1985-01-01'\n      });\n      ...\n    });\n    ```", "```js\n    import {\n      addNew\n    } from '$lib/server/birthdayRepository.js';\n    if (import.meta.env.MODE === 'development') {\n      addNew({ name: 'Hercules', dob: '1994-02-02' });\n      addNew({ name: 'Athena', dob: '1989-01-01' });\n    }\n    ```"]