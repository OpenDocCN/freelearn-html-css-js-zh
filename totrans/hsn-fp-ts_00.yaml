- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Functional programming is a programming paradigm that treats computation as
    the evaluation of mathematical functions and avoids changing-state and mutable
    data. The origins of the functional programming paradigm can be traced back to
    the 1930s when Alonzo Church introduced Lambda calculus. Lambda calculus presents
    a theoretical framework for describing functions and their evaluation, and is
    a mathematical abstraction rather than a programming language. However, Lambda
    calculus is the foundation of most functional programming languages.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In the late 1950s, Lisp, one of the first functional programming languages,
    was developed by John McCarthy. Lisp introduced many functional programming paradigm
    features, and it was the primary influence of other popular functional programming
    languages, such as Scheme and Clojure.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: In 1973, Robin Milner created ML at the University of Edinburgh. ML eventually
    developed into several alternative languages, the most common of which are now
    OCaml and Standard ML. In 1977, John Backus defined functional programs in a way
    that allows an "algebra of programs" and follows the principle of compositionality.
    In 1985, Research Software Limited released Miranda, and the interest in lazy
    functional programming languages grew. After a couple of years, more than a dozen
    non-strict, purely functional programming languages existed. In 1987, at the conference
    on functional programming languages and computer architecture in Portland, Oregon,
    there was a strong consensus that a committee should be formed to define an open
    standard for such languages; Haskell was born.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: The 1970s and 1980s were years of significant advancement for functional programming.
    However, during the 1990s and 2000s, functional programming lost market share
    against object-oriented programming languages, such as Java and C#.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: In the 2010s, the adoption of JavaScript grew exponentially, and it became the
    most popular programming language. The Scheme programming language is one of the
    main influences of JavaScript and, as a result, JavaScript implements many functional
    programming features, such as support for higher-order functions. JavaScript became
    the first contact with functional programming for many young developers. However,
    because JavaScript is a multi-paradigm programming language, many ignored its
    functional programming capabilities. However, in recent times, thanks to the arrival
    of technologies highly influenced by functional programmings principles, such
    as React, RxJS, and Redux, there has been a significant increase in interest in
    functional programming within the JavaScript community.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: As the popularity of JavaScript grew, the complexity of JavaScript applications
    also grew exponentially. Web user interfaces became much more sophisticated, and
    JavaScript started to be used in a number of alternative scenarios, such as backend
    applications. The TypeScript programming language was then introduced as a tool
    that allows us to manage the new levels of complexity.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript aims to reduce the complexity of a system by adding a static type
    system to JavaScript. Static type systems can be used to detect errors at compilation
    time as a beneficial form of in-code documentation. Static type systems can be
    very beneficial in functional programming. Most object-oriented programming languages,
    such as Java and C#, are slowly adopting functional programming features, and
    sophisticated static type systems are something that is many times associated
    with purely functional programming languages, such as Haskell.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'This book is not going to encourage you to stop using object-oriented programming.
    Instead, we are going to try to think about both the functional programming and
    the object-oriented programming paradigms as two different solutions to the same
    problem: managing complexity:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '"Object-oriented programming makes code understandable by encapsulating moving
    parts. Functional programming makes code understandable by minimizing moving parts."'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: – *Michael Feath**ers*
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The popularity of distributed systems is increasing as the adoption of cloud
    computing continues to grow and, as a result, functional programming is expected
    to rise in popularity over the next decade because it is particularly well suited
    for concurrent systems and distributed systems. Functional programming encourages
    the implementation of stateless components, which can be scaled with ease. Since
    the complexity of distributed systems is usually high, this is just another example
    of how functional programming can be used as a weapon against complexity.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Mastering TypeScript together with the principles and techniques of both object-oriented
    programming and functional programming can provide us with a richer toolset to
    fight against complexity in our systems. This book will provide you with knowledge
    about a wide range of functional programming principles, patterns, and techniques
    that should help you to become a more versatile software engineer and prepare
    you for dealing with the increasing complexity in modern web applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a developer aiming to learn functional programming for the very first
    time and improve the quality of your applications, then this book is for you.
    No prior knowledge of functional programming is required. However, a basic understanding
    of JavaScript and TypeScript is recommended to make the most out of this book.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](65bf43e0-dba4-414a-b6e7-3c6f38581858.xhtml), *Functional Programming
    Fundamentals*, introduces the main functional programming terms, such as pure
    functions.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](5c1a8b07-e106-4ea8-a5e5-909e641eb271.xhtml), *Mastering Functions*,
    takes an in-depth look at the main building block in a functional programming
    application—functions. The chapter also explores most of the function-related
    features in TypeScript. We will learn how to work with functions in many different
    scenarios and how to take advantage of the TypeScript type system features while
    working with functions.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](3e1c3d5e-9b0a-417c-9d73-366fbd7432d6.xhtml), *Mastering Asynchronous
    Programming*, takes an in-depth look at the main asynchronous programming APIs
    in JavaScript and TypeScript, including callbacks, promises, generators, and asynchronous
    functions. These APIs are relevant in functional programming because they can
    be used to implement lazy evaluation.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](0ea0b1ad-d206-4b3a-9520-b08365a988d7.xhtml), *The Runtime – The
    Event Loop and the this Operator*, is the first chapter of two that are dedicated
    to exploring concepts about the runtime that are relevant for a number of functional
    programming techniques. For example, we can gain a much better understanding of
    recursion if we understand the event loop.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](68a4518b-0e8e-4273-8418-2751c4961ed1.xhtml), *The Runtime – Closures
    and Prototypes*, is the second chapter dedicated to exploring concepts about the
    runtime that are relevant to a number of functional programming techniques. For
    example, understanding closures can help us to understand how some higher-order
    functions work.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](b9229d02-8eca-4ff7-a88f-e4ccb019270f.xhtml), *Functional Programming
    Techniques*, explores the main functional programming techniques and patterns
    in detail. We will explore concepts such as partial function application, functional
    composition, and currying. This chapter also explores many other functional programming
    techniques and patterns, such as point-free style.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ca940a3c-ec71-4a5c-bb96-41dfe38228de.xhtml), *Category Theory*,
    explores category theory. You will learn about what algebraic data types are and
    what the relationships between them are. You will then learn how to implement
    some of the main algebraic data types, including functors and monads.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](da643d96-7b61-4d9c-8fed-8a44b485c140.xhtml), *Immutability, Optics,
    and Laziness*, explores three important functional programming techniques. You
    will learn about what lazy evaluation is, what its benefits are, and how to implement
    it. You will also learn about immutable data structures, their benefits, and how
    to implement them. Finally, you will learn about functional optics and how they
    can help with immutable data structures.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](6a03c916-f7a5-439a-bea6-6facecef0347.xhtml), *Functional-Reactive
    Programming*, explores the functional-reactive programming paradigm. We will learn
    about what observables are and how they can be used to simplify our code. We will
    also learn how to use RxJS, the leading reactive-programming library in the JavaScript
    ecosystem.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '*[Chapter 10](35e51290-b4e7-44e8-bc7f-b9fbbe3bc94c.xhtml), Real-World Functional
    Programming*, explores some production-ready functional programming libraries,
    such as Ramda and Funfix, to create real-world functional programming applications.\'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix A](9301d615-1e48-448c-91aa-956f9c94a1ba.xhtml), *Functional Programming
    Learning Road Map*, this was developed for Fantasyland institute of learning for
    the LambdaConf conference. It is used to track our level of knowledge regarding
    functional programming.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix B](70e73ea4-faef-4537-b7e6-01f087f0f913.xhtml), *Directory of TypeScript
    Functional Programming Libraries*, In this appendix, you will find a list of functional
    programming libraries compatible with TypeScript grouped.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You don't need any additional material to follow this book. No prior knowledge
    of functional programming is required. However, a basic understanding of JavaScript
    and TypeScript is recommended to make the most use of this book.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended reading the chapters in order. However, if you are new to
    functional programming and already have advanced knowledge of functions, asynchronous
    programming, and the runtime, you could maybe skip chapters two to five.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: You can refer to the TypeScript handbook at [http://www.typescriptlang.org/docs/handbook/basic-types.html](http://www.typescriptlang.org/docs/handbook/basic-types.html) if
    you have some experience with JavaScript, but TypeScript is new to you. This resource
    might be especially useful if TypeScript is your first statically typed programming
    language. Alternatively, you can refer to the book *Learning TypeScript 2.x, Second Edition*,
    also by *Remo H. Jansen* and *Packt Publishing*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: If you need help installing Node.js, you can refer to the official documentation
    at [https://nodejs.org/en/download/package-manager](https://nodejs.org/en/download/package-manager/).
    If you need help installing TypeScript, you can refer to the official documentation
    at [http://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html](http://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packt.com).
    If you purchased this book elsewhere, you can visit [www.packt.com/support](http://www.packt.com/support)
    and register to have the files emailed directly to you.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packt.com).
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Typescript](https://github.com/PacktPublishing/Hands-On-Functional-Programming-with-Typescript). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://www.packtpub.com/sites/default/files/downloads/9781788831437_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/9781788831437_ColorImages.pdf).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "Mount the downloaded `WebStorm-10*.dmg` disk image file as
    another disk in your system."'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Any command-line input or output is written as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    screen. For example, words in menus or dialog boxes appear in the text like this.
    Here is an example: "Select System info from the Administration panel."'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    mention the book title in the subject of your message and email us at `customercare@packtpub.com`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packt.com/submit-errata](http://www.packt.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in, and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请留下您的评价。一旦您阅读并使用过这本书，为何不在购买它的网站上留下评价呢？潜在读者可以查看并使用您的客观意见来做出购买决定，我们 Packt 可以了解您对我们产品的看法，而我们的作者也可以看到他们对书籍的反馈。谢谢！
- en: For more information about Packt, please visit [packt.com](http://www.packt.com/).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解 Packt 的更多信息，请访问 [packt.com](http://www.packt.com/).
