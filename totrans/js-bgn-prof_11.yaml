- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Interactive Content and Event Listeners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are now familiar with the basic manipulation of the **Document Object Model**
    (**DOM**). In the last chapter, we had a look at events, and we saw that event
    listeners are constantly monitoring for whether a certain event is taking place;
    when it does occur, the specified event (a function) gets invoked.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to take this knowledge one step further and use
    event listeners to create interactive web content. This chapter is really going
    to complete your DOM knowledge. We are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Interactive content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `onload` event handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mouse event handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The event target property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DOM event flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onchange` and `onblur`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The key event handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drag and drop elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form submission
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: exercise, project and self-check quiz answers can be found in the *Appendix*.'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing interactive content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Interactive content is content that responds to the actions of a user. Think,
    for example, of a web app in which you can create postcards dynamically, or play
    a game on a website in a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'This interactive content is made possible by changing the DOM based on user
    interactions. These interactions could be anything: entering text in an input
    field, clicking somewhere on the page, hovering over a certain element with the
    mouse, or a certain input with the keyboard. All these are called events. We have
    seen events already. But there is actually more to it!'
  prefs: []
  type: TYPE_NORMAL
- en: Specifying events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are three ways to specify events. We have seen each of these in the previous
    chapter, but let's run through them again now. One is HTML-based and the other
    two are JavaScript-based. For this example, we are going to use the `click` event
    as an example.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying events with HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, the HTML way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The great thing about specifying events this way is that it''s quite easy to
    read this code and predict what it is going to do. As soon as you click on the
    paragraph, the function `magic()` will be triggered. There are some downsides
    too: you can only specify one event this way, and you cannot change the event
    dynamically either.'
  prefs: []
  type: TYPE_NORMAL
- en: Specifying events with JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is the first way to do it using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: What is happening here is that we are getting the property that represents the
    selected event and assigning our function to it. So, in this case, we are selecting
    the `p` shown in the previous section by its attribute value `unique`, grabbing
    the `onclick` property, and assigning the `magic()` function to it by wrapping
    it in an anonymous function. We could also specify the exact function on the spot
    here. We can overwrite this with another function anytime, making the event that
    can be fired more dynamic.
  prefs: []
  type: TYPE_NORMAL
- en: We can also specify different events now, which we cannot do with HTML. So we
    could also give it a `keyup`, `keydown`, or `mouseover` event, for example—we
    will consider each of these event types in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If we wanted to specify event triggers for all the elements of the page, we
    could do so in a loop for a cleaner coding style.
  prefs: []
  type: TYPE_NORMAL
- en: Practice exercise 11.1
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Personalize your web pages. Allow users to change the theme of the page display
    between regular mode and dark mode.
  prefs: []
  type: TYPE_NORMAL
- en: Within a simple HTML document, set up a Boolean value variable to use that will
    toggle the color modes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `window.onclick` to set up a function that outputs a message in the console
    when clicked. You can use the value of the Boolean variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the function, add a condition that checks whether the `darkMode` variable
    is true or false.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If false, then update the page style to a background color of black and a font
    color of white.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an `else` response that changes the color of the background to white and
    the color of the text to black. Also, update the value of the `darkMode` variable
    accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specifying events with event listeners
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last method is using the `addEventListener()` method to add an event to
    an element. With this, we can specify multiple functions for the same event, for
    example, when an element gets clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'What is striking for both methods we have looked at—using HTML events and assigning
    to properties—is that the event gets prefixed with `on`. For example, `onclick`,
    `onload`, `onfocus`, `onblur`, `onchange`, etc. This is not the case when we use
    the `addEventListener()` method, where we specify the event type within the event
    listener *without* the `on` prefix, as here, with an alternative to `onclick`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Please note that we are leaving out the parentheses behind the magic function
    here. We cannot send in parameters like this. If that is something you have to
    do, you''d have to wrap the functionality in an anonymous function, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this chapter, we may use any of these ways to specify an event. We will mostly
    be using one of the JavaScript options, though.
  prefs: []
  type: TYPE_NORMAL
- en: Practice exercise 11.2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create several divs with color names in `textContent`. Add JavaScript to add
    `click` event listeners to each element, and as each element is clicked, update
    the background color of the body to match the color name in the div.
  prefs: []
  type: TYPE_NORMAL
- en: The onload event handler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We briefly saw this event handler in the previous chapter. The `onload` event
    gets fired after a certain element is loaded. This can be useful for a number
    of reasons. For example, if you want to select an element using `getElementById`,
    you''ll have to be sure this element is loaded in the DOM already. This event
    is most commonly used on the `window` object, but it can be used on any element.
    When you use it on `window`, this event gets started when the window object is
    done loading. Here is how to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`onload` is similar, but it''s different for the window and `document` objects.
    The difference depends on the web browser you are using. The `load` event fires
    at the end of the document loading process. Therefore, you will find that all
    the objects in the document are in the DOM and the assets have finished loading.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the `addEventListener()` method on any element to handle any
    event. And it can also be used for the event that all the content in the DOM is
    loaded. There is a special built-in event for this: `DOMContentLoaded()`. This
    event can be used to handle the event of the DOM loading, which will get fired
    immediately after the DOM for the page has been constructed when the event is
    set. Here is how to set it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will log to the console when all the DOM content has been loaded. As an
    alternative, you will also often see it in the `body` tag, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is assigning a function called `unique()` to the body, and it will fire
    off when the body is done loading. You cannot combine `addEventListener()` and
    the HTML by using them together. One will overwrite the other, depending on the
    order of the web page. If you need two events to happen when the DOM is loaded,
    you will need two `addEventListener()` calls in your JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Practice exercise 11.3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using a basic HTML file, the below exercise will demonstrate the order of loading
    for the `window` object and the `document` object using `DOMContentLoaded`, which
    is an event that fires once the `document` object content is loaded in the browser.
    The window object will load afterward, even if the `window`.`onload` statement
    comes first.
  prefs: []
  type: TYPE_NORMAL
- en: Within a basic HTML file, create a function named `message` that requires two
    parameters, the first one being a string value for the message and the second
    an event object. Within the function, output into the console using `console.log`
    the event and the message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `window` object, attach an `onload` function to the event object.
    Invoke the function, passing a string value of `Window Ready` and the event object
    to the `message` function for output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a second function to capture the DOM content loading, and add an event
    listener listening for `DOMContentLoaded` to the `document` object. Once that
    event is triggered, pass the event object and a string value of `Document Ready`
    to the `message` output function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the order of the event listeners, placing the `document` event statement
    prior to the window `onload`: does it make a difference in the output?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `document` object, add the `DOMContentLoaded` event listener, which
    will send to the function the arguments of `Document` `Ready` and the event object
    that was triggered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the script and see which event is triggered first; change the order of the
    events to see if the output sequence changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mouse event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are different mouse event handlers. Mouse events are actions of the mouse.
    These are the ones we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ondblclick`: when the mouse is double-clicked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onmousedown`: when the mouse clicks on top of an element without the click
    being released'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onmouseup`: when the mouse click on top of an element is released'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onmouseenter`: when the mouse moves onto an element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onmouseleave`: when the mouse leaves an element and all of its children'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onmousemove`: when the mouse moves over an element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onmouseout`: when the mouse leaves an individual element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onmouseover`: when the mouse hovers over an element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's have a look at one of these in practice. What do you think this does?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you go with your mouse over the pink square (the `div` with `id` `divvy`),
    it turns blue immediately. This is because `onmouseover` is added in the HTML
    and points to the JavaScript function that changes the color of the square.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at a similar slightly more complicated example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We are still starting with the pink square. There are four event listeners
    connected to this div:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mousedown`: when the button is pressed on the mouse but is not yet released,
    the square will turn green.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseup`: as soon as the mouse button gets released, the square will turn
    yellow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dblclick`: this is a favorite. What do you think will happen upon a double-click?
    A double-click contains two `mousedown` events and two `mouseup` events. Before
    the second `mouseup`, it is not a double-click. So, the square will get the colors
    green, yellow, green, black (and then stay black until another event is fired).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mouseout`: when the mouse leaves the square, it turns blue and stays blue
    until one of the three above events is fired again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This allows for a lot of interaction. You can do so many things with this. Just
    to give you an example of a thing you can do, say you want to have a very dynamic,
    `mouseover`-driven, product-help decision tool. It will consist of four columns,
    and the content of the last three columns (from the right) is dynamic content.
    The first column is for categories. The second column contains some more specific
    product categories for each category. The third column consists of individual
    products, and the fourth column shows product information. This requires a lot
    of event listeners, and lots of deletion and addition of listeners.
  prefs: []
  type: TYPE_NORMAL
- en: Practice exercise 11.4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our aim is to change the background color of the element on the page as the
    various mouse events occur. On `mousedown` over the element, the element will
    turn green. When the mouse is over the element, it will turn red. As the mouse
    moves out of the element boundaries, the color will turn yellow. When the mouse
    is clicked, the color will go green, and when the mouse is released, it will change
    to blue. The actions also be logged in the console.
  prefs: []
  type: TYPE_NORMAL
- en: Create a blank element on the page and assign a class to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the element using its class name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign a variable to the element object from the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the content of the element to say `hello world`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the style properties of the element, update the height and width, then
    add a default background color to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a function to handle two arguments, the first being a color value as
    a string and the second being the event object of the trigger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the function, output the color value to the console, and for the event, output
    the event type to the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add event listeners to the element: `mousedown`, `mouseover`, `mouseout`, and
    `mouseup`. For each of these events, send two arguments to the function that you
    created: a color value and the event object.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code and try it in your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The event target property
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whenever an event gets fired, an event variable becomes available. It has many
    properties, and you can check it out by using this command in the function that
    gets fired for the event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will show many properties. One of the most interesting properties for now
    is the `target` property. The target is the HTML element that fired the event.
    So, we can use it to get information from a web page. Let's look at a simple example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this case, `event.target` is the `button` element. In the console, the `button`
    element and all its properties will be logged, including potential siblings and
    parents.
  prefs: []
  type: TYPE_NORMAL
- en: 'A use case where parent properties can come in handy is in the case of HTML
    forms, where there are multiple input fields and a button. A button in a form
    would often have the form as its direct parent. Via this parent, data from the
    input fields can be fetched. This is demonstrated in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in a little form, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16682_11_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: Basic HTML form'
  prefs: []
  type: TYPE_NORMAL
- en: 'And once you enter data in the fields and hit **Submit**, this is what it looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16682_11_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: Data entered in the basic HTML form with a dynamic welcome message'
  prefs: []
  type: TYPE_NORMAL
- en: 'With this command, event.target[CIT] is the HTML button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The parent element of the button, the form in this case, gets stored in the
    `p` variable. `p` is the parent and it represents the form element. So, this command
    will get the value of the input box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, `p.lastname.value` gets the last name. We haven't seen this yet,
    but with the `value` property, you can get the values of input elements.
  prefs: []
  type: TYPE_NORMAL
- en: Next, both input values are combined and sent to the `message()` function. This
    function changes the inner HTML of the div to a personalized welcome message,
    which is why **Hi there!** changes to **Welcome Maaike van Putten**.
  prefs: []
  type: TYPE_NORMAL
- en: Practice exercise 11.5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Change the text in a div element on the page. This exercise will demonstrate
    how you can get the value from an input field and place it within a page element.
    It also covers tracking button clicks and details about the event target. You
    can use the following HTML document as a template, to which you can add JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the above HTML as a template, add the JavaScript code, selecting each
    page element, including the `div`, the input field, and the `button` element.
    Assign these element objects to variables in your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an empty array called `log`, which will be used to track and log all
    the events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a function that will capture the event object details in an object, adding
    it to the `log` array. Get the event target and create an object, adding it to
    the array that stores the input value at the time, the type of event, the class
    name of the target element, and the tag name of the target element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the logging function, get the value of the content within the input and
    assign that value to the `textContent` of the `div`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the `div` content after the information is added to the `log` array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an event listener to both of the first two buttons that sends the event
    object to the tracking function created in the earlier steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach an event listener to the third button that outputs the log content to
    the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DOM event flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's go over what happens when you click on an element that has multiple elements
    associated with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to create nested `div` elements. In order to illustrate this,
    there is a style added to the body. It is actually better to add this style in
    a `head` tag, and even better to have a separate CSS file, but this is a bit shorter
    to read. This is what the nested `div` elements will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16682_11_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.3: Event bubbling in web page'
  prefs: []
  type: TYPE_NORMAL
- en: And below is the code associated with it. The script is on the bottom and will
    be executed when the parts on top are done. It is going to add event listeners
    to every `div`, and what it will do is log the `innerText`. For the outermost
    element of the nested `div` elements, this would be `12345`, with a new number
    on every line.
  prefs: []
  type: TYPE_NORMAL
- en: So the question here is, how will it trigger the events? Say we click on the
    **5**, what will be executed? The event of all of the nested `div` elements, or
    only the one from **5**? And if it is going to execute all of them, will it execute
    them from inner to outer event or the other way around?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, it has the default behavior. It will execute all five events,
    so each one of every nested `div`. And it will execute them inside out. So it
    will start with the `innerText` of only **5**, then **45**, until the last one,
    **12345**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16682_11_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.4: Console output event bubbling'
  prefs: []
  type: TYPE_NORMAL
- en: This is called **event bubbling**. It's what happens when you trigger the handlers
    on an element. It runs its own events first, then its parents, and so on. It is
    called bubbling because it goes up from the inner event to the outer, like water
    bubbles going up.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can alter this behavior by adding `true` as a third argument when you add
    the event listener like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This would be the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16682_11_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.5: Console output event capturing'
  prefs: []
  type: TYPE_NORMAL
- en: This moving from the outer element to the inner element is called **event capturing**.
    It is not used a lot anymore nowadays, but if you do need to implement it, you
    can use the `useCapture` argument of `addEventListener()` (the third argument)
    and set it to `true`. It is `false` by default.
  prefs: []
  type: TYPE_NORMAL
- en: The event capturing and bubbling allows us to apply a principle called **event
    delegation**. Event delegation is the concept where instead of adding event handlers
    to every element in a certain block of HTML, we define a wrapper and add the event
    to this wrapper element, and it then applies to all the child elements as well.
    You'll apply this principle in the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Practice exercise 11.6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This example will demonstrate event capturing and the delegation of page elements.
    By adding event listeners to the parent and children within the main element,
    this example will order the console messages according to the event capture properties.
  prefs: []
  type: TYPE_NORMAL
- en: All of the `div` elements with a `class` of `box` will have the same event object.
    We can add the event target, `textcontent`, as well into the console so that we
    can tell which element was clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the JavaScript code, select all the elements with the classes, and separately
    select the main container element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add event listeners to the main container, outputting to the console value of
    `4` for the `useCapture` argument set to `false`, and `1` for the `useCapture`
    argument set to `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each of the nested elements, add `click` event listeners with a `console.log()`
    value of `3` for the `useCapture` argument set to `false`, and `2` for `useCapture`
    set to `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the page elements to see the event delegation and order of output on the
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the box elements on both `click` events, add to the console an output
    for the event target's `textContent` value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: onchange and onblur
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Two other events that are often combined with input boxes are `onchange` and
    `onblur`. `onchange` gets triggered when an element changes, for example, when
    the value of an input box changes. `onblur` gets triggered when an object goes
    out of focus; for example, when you have the cursor in one input box and the cursor
    goes to another input box, the `onblur` event of the first input box will get
    triggered.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `firstname` input box has an `onchange` event. If the value of the data
    in the input box gets changed, this event gets triggered as soon as the input
    box loses focus. If the input box loses focus when the value has not changed,
    nothing happens for `onchange`. This is not true for `onblur`, which is assigned
    to the `lastname` input box. Even when the value hasn't changed, the event will
    get triggered.
  prefs: []
  type: TYPE_NORMAL
- en: Another event that is often used with input boxes is `onfocus`, or simply `focus`
    when used in combination with an event listener. This event is associated with
    the cursor entering the input box, and it gets fired when the input box gets focused
    on by the cursor and input can be entered.
  prefs: []
  type: TYPE_NORMAL
- en: Practice exercise 11.7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With two input fields on the page, JavaScript will listen for changes to the
    content in the input field. Once the input field is not in focus, if the value
    has been changed, the change event will be invoked. `blur` and `focus` are also
    added to the input fields and will get logged to the console as those events occur.
    Both input elements will have the same event listeners, and as you change the
    content of the input fields and remove focus, the output text content will update
    using the values of the input field that triggered the event.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following HTML template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Within the JavaScript code, put the HTML output element into a variable object
    that you can use to display content on the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select both input fields. You can use `querySelector()` and `"input[name='first']"`,
    which will allow you to make your selection using the input field name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an event listener to the first input and the second input. The event listener
    should be a change event to track changed values. This will only be invoked if
    the value in the field is changed and you click off the input field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a separate function to handle the output of the content to the page,
    updating the `textContent` of the output element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Send the values of the input fields as they get changed to the output element
    `textContent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add four additional event listeners and listen for `blur` and `focus` on each
    input. Once the event gets triggered, output in the console the value of the event
    type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Key event handler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several key events. One of them is `onkeypress`. `onkeypress` gets
    triggered, well, you may have guessed this, whenever a key gets pressed. Pressing
    means here when the button is pressed and released. If you want an event to happen
    as soon as the button is pressed (so before releasing), you can use the `onkeydown`
    event. If you want the event to happen on release, you can use the `onkeyup` event.
  prefs: []
  type: TYPE_NORMAL
- en: There are many things we can do with key events. For example, we can restrict
    what characters can be entered in an input box. Every time a key gets pressed,
    we can check the character and decide whether it gets to stay.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can get the key that triggered the event using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The following HTML code has two input boxes. Can you see what is happening here?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The first one checks if a value is a number, and if it is a number, it will
    write `Number: true` at the top; else, it will write `Number: false` at the top.
    The second one is checking for if a value is not a number; if it is not a number,
    it will write `Not a number: true`; else, it will write `Not a number: false`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So this is one way of using the `onkeypress` event, but we can do even more.
    We can add a `return` statement to our `onkeypress` event, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If `true` is returned, the key value gets added to the input box; if `false`
    is returned, the key value is not added.
  prefs: []
  type: TYPE_NORMAL
- en: The following code snippet only allows numbers to be entered in the input box.
    Whenever the user tries to type something else, the function restricts it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, `return` gets included in onkeypress to ensure that only numbers
    can be entered. One other thing might have caught your eye: `onpaste="return false"`.
    This is to deal with smart people who copy and paste numbers to a non-numeric
    field or other characters to a numeric field and still manage to get illegal characters
    in there.'
  prefs: []
  type: TYPE_NORMAL
- en: Practice exercise 11.8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By recognizing key presses and detecting the values of characters as key presses
    occur with the element in focus, we can also detect if content is pasted into
    an input field.
  prefs: []
  type: TYPE_NORMAL
- en: Create two input fields within your HTML. Add an element to output content too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using JavaScript, select the page elements. You can assign a variable called
    `output` to the element with a class of `output`. Create another variable, `eles`,
    and select all the input fields (using `querySelectorAll()`) as its value. This
    way, we can loop through the node list and assign the same events to all the matching
    elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `forEach()`, iterate through all the input elements from the page. Add
    the same event listeners to all of them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a keydown event listener and check if the value is a number. If it is a
    number, then add it to the output area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On `keyup`, output to the console the value of the key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check if there was a paste in the input field; if there was, then you can output
    the word `paste` to the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag and drop elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are also special event handlers for dragging and dropping. We need a starting
    point to be able to drag and drop something. Let's create the CSS and HTML for
    a dragging and dropping area.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are also going to include an element that is going to be dragged and
    dropped. In order to mark an element as something that can be dragged, we need
    to add the attribute `draggable`. This is the code we are going to include in
    our second div, with the first div around it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Then we need to decide what we are going to do when we drop the draggable element.
    We need to specify this within the box it can be dragged to. We are going to add
    the functionality to both boxes, so it can be dragged over to one and back to
    the other.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the script that will be added to the end of the body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We start by specifying a variable in the script for the item that we want to
    hold when dragging. When the `ondragstart` event gets triggered, we are going
    to store the element that is being dragged in the `holderItem` variable. Normally,
    when you drag, dropping is not allowed by the design of HTML. In order to allow
    the drop, you''ll have to prevent the default event that means the item you want
    to drop cannot be dropped. You can do this with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Usually, before you prevent the default behavior, you would do some checks to
    see whether the element that is being dropped can be accepted at that place. In
    the example above, we check whether the class name of the element that it is being
    dropped to is `box`. If that's the case, we append `holderItem` as a child to
    the box.
  prefs: []
  type: TYPE_NORMAL
- en: We have created a page that allows moving an HTML element from one box to another.
    If you try to release it anywhere else, the element goes back instead to its previous
    location.
  prefs: []
  type: TYPE_NORMAL
- en: Practice exercise 11.9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This will be an "I'm not a robot" check. Drag and drop can be used to ensure
    that it's a live user that is acting on a page rather than a robot. This exercise
    will demonstrate how to create a visual dragging effect on an active element,
    in which the user clicks the mouse down to create a drag action, and once the
    mouse button is released, the drop event occurs. The successful actions are logged
    to the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the following template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding HTML creates styles for an element that will be used for dropping,
    and sets a width, height, and border. It creates another class called `red` and
    adds a red background to the active element so that it shows as active, along
    with two `div` elements that will have classes of the `box` element for dropoff.
    Finally, we create a `div` nested in one of the boxes that has an `id` of `dragme`
    and an attribute of `draggable` set to `true`, with some instructive text added
    to aid the user. Complete the script by taking the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `draggable` element as an object in your JavaScript code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an event listener of `dragstart`, where it updates the `draggable` element
    to `0.5` opacity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add another event listener of `dragend` that removes the value for the opacity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using `querySelectorAll()`, select all the dropoff boxes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add event listeners to all the dropoff boxes, setting things such that the `red`
    class is added to an element whenever the user triggers the `dragenter` event.
    This will indicate to the user that the action is taking place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `dragover`, adding a `preventDefault()` method to the element to disable
    any actions that might already exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On `dragleave`, remove the `red` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the event listener of `drop` to the box, append the `draggable` element
    to the event target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To work across all elements in the same way, remove the default action of the element.
    You can use the `preventDefault()` method to this event to disable any actions
    that might already exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can add console log messages to any of these events to better track them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Form submission
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a form gets submitted, an event can be triggered. This can be achieved
    in different ways, and one of them is to add to the `form` element the `onsubmit`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The function that is listed there will get triggered whenever input of type
    `submit` is submitted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We can do more with the HTML of the `form` element; for example, we can redirect
    to another page. We have to specify the way we want to send the form values using
    the `method` attribute and the location page using the `action` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t worry about the `get` for now; this just means that values get sent
    via the URL. URLs look like this when you use `get`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: After the question mark, the variables that are sent along are shown in key-value
    pairs. This is the form that created the URL when `edward` was inserted for `name`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '`anotherpage.html` can use the variables from the URL. This can be done in
    the JavaScript of `anotherpage.html` doing something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: So far we have been submitting forms using the `action` and `onsubmit` attributes.
    `action` redirects to another location. This could be the API endpoint of a different
    page. `onsubmit` specifies an event that is fired when the form gets submitted.
  prefs: []
  type: TYPE_NORMAL
- en: There are more cool things we can do with the `onsubmit` event of forms. Remember
    the use of `return` for `onkeypress`? We can do something similar here! If we
    make the called function return a Boolean, the form will only get submitted when
    the Boolean is `true`.
  prefs: []
  type: TYPE_NORMAL
- en: This comes in very handy if we want to do some form validation before sending
    it. Have a look at this code and see if you can figure out when it can be submitted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This form contains three input fields and one input button. The fields are for
    last name, first name, and age. When one of them is missing, the form will not
    submit, because the function will return `false`. A message will also be added
    to the `div` above the form, explaining what went wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Practice exercise 11.10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This will be about creating a form validator. In this exercise, you will be
    checking to ensure that the desired values are entered into the input fields.
    The code will check the input values that are entered by the user to match predetermined
    conditions for those field values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up a form, adding three input fields inside: `First`, `Last`, and `Age`.
    Add a submit button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the JavaScript code, select the form as an element object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an submit event listener to the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up the default value for `error` as `false`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a function named `checker()`, which will check to see the length of a
    string and output the string length to the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add conditions to each of the field values, first checking if the value is there
    and then returning an error if the response is `false`, before changing the error
    variable to `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `console.log()` to log the details about the error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the age input value, check the value to see if the age provided is 19 or
    over, otherwise cause an error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the end of the validation, check if `error` is `true`; if it is, use `preventDefault()`
    to stop the form submission. Log the errors to the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Animating elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lastly, we want to show you that you can animate using HTML, CSS, and JavaScript.
    This allows us to do even cooler things with our web page. For example, we can
    trigger an animation as an event. This can be used for many different purposes,
    for example, to illustrate an explanation, to draw the user's eyes to a certain
    location, or to play a game.
  prefs: []
  type: TYPE_NORMAL
- en: Let's show you a very basic example. We can use the `position` key and set it
    to `absolute` in CSS. This makes the position of the element relative to its nearest
    positioned parent. Here, that would be the body. This is the code for a purple
    square that moves from left to right when a button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We need to give the `div` block an absolute position, because we rely on the
    CSS `left` property to make it move. In order to be to the left of something,
    that something needs to be absolute, else the `left` property cannot be positioned
    relative to it. In this case, we need to be a certain number of pixels to the
    left of the `div`; this is why we need the position of the `div` to be absolute,
    so the position of the moving box can be relative to that of its parent.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we click the button, the function `toTheRight()` gets triggered. This
    function grabs `block` and stores it in `b`. It sets `x` to `0`. Then we use a
    very powerful built-in JavaScript function: `setInterval()`. This function keeps
    on evaluating an expression until `clearInterval()` gets called. This is done
    when `x`, the measure of how far we are to the left, reaches 600\. It repeats
    it every 2 milliseconds, which gives it the sliding look.'
  prefs: []
  type: TYPE_NORMAL
- en: You can at the same time also set different positions, like `style.top`, `style.bottom`,
    and `style.right`, or append new elements to create a snow effect, or show constantly
    driving cars. With this in your toolbox, the sky is the limit.
  prefs: []
  type: TYPE_NORMAL
- en: Practice exercise 11.11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we will click the purple square and watch it move on the page. This exercise
    will demonstrate creating the events for a simple interactive element on the page.
    The purple square will move every time it's clicked; once it reaches the boundaries
    of the page, it will change direction from left to right and right to left, depending
    on what side it hits.
  prefs: []
  type: TYPE_NORMAL
- en: Set up styling for an element, setting `height` and `width` before setting `position`
    to `absolute`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an element that you want to move on the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select and store the element using JavaScript.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up an object with values for `speed`, `direction`, and `position`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an event listener for if the element is clicked on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set a default value of `30` for the value of the interval counter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the counter is less than 1, then end the interval and clear it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the interval has run 30 times using the value of `x`, the element will
    stand still and wait to be clicked again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While in motion, check if the position value is greater than 800 or less than
    0, which means it needs to change direction. The `direction` value will provide
    the direction of movement. If the movement takes the box outside the boundaries
    of the container, we need to send it in the other direction. This can be done
    by multiplying by negative one. If the value is positive, it will become negative,
    sending the element to the left. If the value is negative, it will become positive,
    sending the element to the right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the `style.left` position value of the element, assigning the value of
    the position that was updated. Add `px`, as the assigned value of the style is
    a string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output the result to the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Build your own analytics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Figure out which elements are clicked on in a page and record their IDs, tags,
    and class name.
  prefs: []
  type: TYPE_NORMAL
- en: Create a main container element within your HTML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add four elements inside the main element, each having a class of `box` and
    a unique ID with unique text content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up your JavaScript code to contain an array that you can use for tracking,
    adding details from each click into it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the main container element as a variable object in your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an event listener to capture clicks on the element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a function to handle the clicks. Get the target element from the event
    object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check if the element has an ID, so that you don't track clicks on the main container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up an object to track the values; include the element `textContent`, `id`,
    `tagName`, and `className`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the temporary object to your tracking array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output the values captured in your tracking array to your console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Star rating system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a star rating component that is fully interactive and dynamic using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16682_11_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.6: Creating a star rating system'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the following HTML and CSS as a starting template. Provide the completed
    script element as your answer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select all the stars within the `ul` that have a `class` of `stars` into an
    object, and create another object for the `output` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create another object to contain the results of calling `querySelectorAll()`
    on elements with a class of `star`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Loop through the resulting node list, adding to the element object the value
    of the index plus 1, and adding an event listener listening for a click. Attach
    a function called `starRate()` to the `click` event of each `star` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the `starRate()` function, add to the output the value of the star using
    the event target and the element object's star value, which was set in the previous
    step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Loop through all the stars using `forEach()` to check if the index value of
    the star element is less than the star value; if it is, apply a `class` of `orange`.
    Otherwise, remove the `class` of `orange` from the `classList` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mouse position tracker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Track your mouse's `x` and `y` position within an element. As you move the mouse
    within the element, the `x` position and `y` position values will update.
  prefs: []
  type: TYPE_NORMAL
- en: Create a page element and add sizing to it, including `height` and `width`.
    Create a class style named `active` that has a `background-color` property of
    `red`. Finally, create an output element that will contain your text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the main container element and add event listeners to it. Listen for
    `mouseover`, `mouseout`, and `mousemove`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On `mouseover`, add the `active` class, and on `mouseout`, remove the `active`
    class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On `mousemove`, call a function that tracks the event element `clientX` and
    `clientY` positions, embeds them in a human-readable sentence, and outputs it
    into the output element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Box clicker speed test game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The objective here is to click on the red box as quickly as possible once it
    appears. The box will be randomly placed within a container and positioned with
    random values. The box will have an event listener that will track the start and
    click times to calculate the duration of the click events. You can use the following
    template, as the HTML gets a little complex here—just add the `<script>` element
    to make the HTML interactive!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Work with the above HTML code using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: There are two `div` elements, one with a class of `output` for the gameplay
    area and another with a class of `message` to provide instructions to the player.
    Select those main elements as objects using JavaScript.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using JavaScript, create another element within the `output` element, and create
    a `div` that will be the main clickable object. Attach a style called `box` to
    the new element and append it to the `output` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using JavaScript, add to the message area instructions for the user: `Press
    to Start`. They will need to click the newly created `div` with a class of `box`
    to start the game.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a global object called `game` to track the timer and the start time values.
    This is to be used to calculate the duration in seconds between when the element
    is shown and when the player clicks it. Set `start` to `null`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a function that will generate a random number and return a random value,
    with the argument being the maximum value you want to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an event listener to the `box` element. Once clicked, this should start
    the gameplay. Set the display of the `box` element to `none`. Using the `setTimeout()`
    method, invoke a function called `addBox()` and set the timeout to a random millisecond
    value. You can adjust as needed; this will be the time between the click object
    box being shown and it disappearing. If the start value is `null`, then add text
    content to the message area of loading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If start has a value, then get the Unix time value using `getTime()` of the
    current `date` object, subtract the game start time from the current time value
    in milliseconds, and then divide by 1,000 to get the value in seconds. Output
    the result to the `message` element for the player to see their score.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a function to handle the clicks, adding the box once the timer is up.
    Update the message text content to say `Click it….` Set the game `start` value
    to the current time in milliseconds. Apply the style of `block` to the element
    so it shows on the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the available space (500 total container width minus the 50 box width)
    set a random position above and to the left of the element using the `Math.random()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play the game and update the styling as needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Self-check quiz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Where can you find `window.innerHeight` and `window.innerWidth`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does `preventDefault()` do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have dealt with quite a few topics to increase the interactivity
    of web pages. We saw the different ways to specify events and then we dived into
    some different event handlers in more detail. The onload event handler gets fired
    when the element it was specified on, often the `document` object, is fully loaded.
    This is great to wrap other functionality in, because it avoids selecting DOM
    content that is not there yet.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw the mouse event handlers, for responding to all the different things
    that can be done with a mouse on a web page. The use of all these event handlers
    is very similar, but they each enable a different type of interaction with the
    user. We also saw that we can access the element that fired an event by calling
    `event.target`. This property holds the element that fired an event.
  prefs: []
  type: TYPE_NORMAL
- en: We also dived into `onchange`, `onblur`, and the key event handlers in more
    detail. After that, we saw how to trigger interaction when forms are submitted.
    We looked at the HTML `action` attribute, which redirects the handling of submission,
    and the onsubmit event, which deals with form submission. We then saw some things
    that we can do with all these events, such as specifying a drag and drop on a
    page and animating elements.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will move on to some more advanced topics that will
    take your existing JavaScript skills to the next level!
  prefs: []
  type: TYPE_NORMAL
