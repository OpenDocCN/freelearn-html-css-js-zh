- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Interactive Content and Event Listeners
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式内容和事件监听器
- en: You are now familiar with the basic manipulation of the **Document Object Model**
    (**DOM**). In the last chapter, we had a look at events, and we saw that event
    listeners are constantly monitoring for whether a certain event is taking place;
    when it does occur, the specified event (a function) gets invoked.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经熟悉了**文档对象模型**（**DOM**）的基本操作。在上一章中，我们探讨了事件，并了解到事件监听器持续监控是否有特定事件发生；当事件发生时，指定的函数（事件）会被调用。
- en: 'In this chapter, we are going to take this knowledge one step further and use
    event listeners to create interactive web content. This chapter is really going
    to complete your DOM knowledge. We are going to cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在此基础上更进一步，使用事件监听器来创建交互式网页内容。这一章将真正完善你的DOM知识。我们将涵盖以下主题：
- en: Interactive content
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交互式内容
- en: Specifying events
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定事件
- en: The `onload` event handler
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onload`事件处理器'
- en: The mouse event handler
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标事件处理器
- en: The event target property
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件目标属性
- en: DOM event flow
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM事件流
- en: '`onchange` and `onblur`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onchange`和`onblur`'
- en: The key event handler
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键事件处理器
- en: Drag and drop elements
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拖放元素
- en: Form submission
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单提交
- en: Animating elements
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素动画
- en: 'Note: exercise, project and self-check quiz answers can be found in the *Appendix*.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：练习、项目和自我检查测验的答案可以在*附录*中找到。
- en: Introducing interactive content
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍交互式内容
- en: Interactive content is content that responds to the actions of a user. Think,
    for example, of a web app in which you can create postcards dynamically, or play
    a game on a website in a web browser.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式内容是指能够响应用户操作的内容。例如，想象一下一个可以在网页浏览器中动态创建明信片或玩游戏的应用程序。
- en: 'This interactive content is made possible by changing the DOM based on user
    interactions. These interactions could be anything: entering text in an input
    field, clicking somewhere on the page, hovering over a certain element with the
    mouse, or a certain input with the keyboard. All these are called events. We have
    seen events already. But there is actually more to it!'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这种交互式内容是通过根据用户交互更改DOM来实现的。这些交互可以是任何操作：在输入字段中输入文本、在页面上点击某个位置、用鼠标悬停在某个元素上，或者使用键盘输入某个特定的内容。所有这些都被称为事件。我们已经看到了事件。但实际上还有更多！
- en: Specifying events
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定事件
- en: There are three ways to specify events. We have seen each of these in the previous
    chapter, but let's run through them again now. One is HTML-based and the other
    two are JavaScript-based. For this example, we are going to use the `click` event
    as an example.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种指定事件的方式。我们在上一章中已经看到过这些方法，但现在让我们再次回顾一下。其中一种是基于HTML的，另外两种是基于JavaScript的。在这个例子中，我们将使用`click`事件作为示例。
- en: Specifying events with HTML
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用HTML指定事件
- en: 'First, the HTML way:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，HTML方法：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The great thing about specifying events this way is that it''s quite easy to
    read this code and predict what it is going to do. As soon as you click on the
    paragraph, the function `magic()` will be triggered. There are some downsides
    too: you can only specify one event this way, and you cannot change the event
    dynamically either.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式指定事件的好处是，阅读代码并预测其行为相当容易。一旦你点击段落，`magic()`函数就会被触发。当然，也存在一些缺点：你只能以这种方式指定一个事件，而且也不能动态地更改事件。
- en: Specifying events with JavaScript
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JavaScript指定事件
- en: Here is the first way to do it using JavaScript.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用JavaScript实现的第一种方法。
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What is happening here is that we are getting the property that represents the
    selected event and assigning our function to it. So, in this case, we are selecting
    the `p` shown in the previous section by its attribute value `unique`, grabbing
    the `onclick` property, and assigning the `magic()` function to it by wrapping
    it in an anonymous function. We could also specify the exact function on the spot
    here. We can overwrite this with another function anytime, making the event that
    can be fired more dynamic.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的事情是我们正在获取表示所选事件的属性，并将我们的函数分配给它。因此，在这种情况下，我们通过其属性值`unique`选择上一节中显示的`p`元素，获取`onclick`属性，并通过将其包裹在匿名函数中将其`magic()`函数分配给它。我们也可以在这里指定确切的函数。我们可以随时用另一个函数覆盖它，使可以触发的事件更加动态。
- en: We can also specify different events now, which we cannot do with HTML. So we
    could also give it a `keyup`, `keydown`, or `mouseover` event, for example—we
    will consider each of these event types in this chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在也可以指定不同的事件，而HTML无法做到这一点。因此，我们也可以给它一个`keyup`、`keydown`或`mouseover`事件，例如——我们将在本章中考虑每种事件类型。
- en: If we wanted to specify event triggers for all the elements of the page, we
    could do so in a loop for a cleaner coding style.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要为页面上的所有元素指定事件触发器，我们可以在循环中这样做，以获得更清晰的编码风格。
- en: Practice exercise 11.1
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 11.1
- en: Personalize your web pages. Allow users to change the theme of the page display
    between regular mode and dark mode.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 个性化你的网页。允许用户在常规模式和暗黑模式之间切换页面显示的主题。
- en: Within a simple HTML document, set up a Boolean value variable to use that will
    toggle the color modes.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个简单的 HTML 文档中，设置一个布尔值变量，用于切换颜色模式。
- en: Use `window.onclick` to set up a function that outputs a message in the console
    when clicked. You can use the value of the Boolean variable.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`window.onclick`设置一个函数，当点击时在控制台输出一条消息。你可以使用布尔变量的值。
- en: Within the function, add a condition that checks whether the `darkMode` variable
    is true or false.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在函数中添加一个条件，检查`darkMode`变量是`true`还是`false`。
- en: If false, then update the page style to a background color of black and a font
    color of white.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果是`false`，则更新页面样式，将背景颜色设置为黑色，字体颜色设置为白色。
- en: Add an `else` response that changes the color of the background to white and
    the color of the text to black. Also, update the value of the `darkMode` variable
    accordingly.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`else`响应，将背景颜色改为白色，文本颜色改为黑色。同时，相应地更新`darkMode`变量的值。
- en: Specifying events with event listeners
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用事件监听器指定事件
- en: The last method is using the `addEventListener()` method to add an event to
    an element. With this, we can specify multiple functions for the same event, for
    example, when an element gets clicked.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一种方法是使用`addEventListener()`方法向元素添加事件。使用这种方法，我们可以为同一事件指定多个函数，例如，当元素被点击时。
- en: 'What is striking for both methods we have looked at—using HTML events and assigning
    to properties—is that the event gets prefixed with `on`. For example, `onclick`,
    `onload`, `onfocus`, `onblur`, `onchange`, etc. This is not the case when we use
    the `addEventListener()` method, where we specify the event type within the event
    listener *without* the `on` prefix, as here, with an alternative to `onclick`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所探讨的两种方法——使用 HTML 事件和属性赋值——引人注目的是，事件前都会加上`on`前缀。例如，`onclick`、`onload`、`onfocus`、`onblur`、`onchange`等。当我们使用`addEventListener()`方法时，情况并非如此，我们会在事件监听器中指定事件类型，而不使用`on`前缀，如下所示，这是`onclick`的替代方案：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Please note that we are leaving out the parentheses behind the magic function
    here. We cannot send in parameters like this. If that is something you have to
    do, you''d have to wrap the functionality in an anonymous function, like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在魔法函数后面省略了括号。我们不能用这种方式传入参数。如果你必须这样做，你将不得不将功能包装在一个匿名函数中，如下所示：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this chapter, we may use any of these ways to specify an event. We will mostly
    be using one of the JavaScript options, though.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们可以使用这些方法中的任何一种来指定事件。我们主要会使用 JavaScript 选项之一。
- en: Practice exercise 11.2
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 11.2
- en: Create several divs with color names in `textContent`. Add JavaScript to add
    `click` event listeners to each element, and as each element is clicked, update
    the background color of the body to match the color name in the div.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 创建几个带有颜色名称的`div`，并在`textContent`中添加 JavaScript 以添加对每个元素的`click`事件监听器。当每个元素被点击时，更新页面的背景颜色以匹配`div`中的颜色名称。
- en: The onload event handler
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`onload`事件处理程序'
- en: 'We briefly saw this event handler in the previous chapter. The `onload` event
    gets fired after a certain element is loaded. This can be useful for a number
    of reasons. For example, if you want to select an element using `getElementById`,
    you''ll have to be sure this element is loaded in the DOM already. This event
    is most commonly used on the `window` object, but it can be used on any element.
    When you use it on `window`, this event gets started when the window object is
    done loading. Here is how to use it:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章中简要介绍了这个事件处理程序。`onload`事件在某个元素加载后触发。这可以出于许多原因是有用的。例如，如果你想使用`getElementById`选择一个元素，你必须确保这个元素已经在
    DOM 中加载。这个事件最常用于`window`对象，但也可以用于任何元素。当你使用它时，当窗口对象加载完成后，这个事件就会被触发。以下是使用它的方法：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`onload` is similar, but it''s different for the window and `document` objects.
    The difference depends on the web browser you are using. The `load` event fires
    at the end of the document loading process. Therefore, you will find that all
    the objects in the document are in the DOM and the assets have finished loading.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`onload`类似，但它在`window`和`document`对象中有所不同。这种差异取决于你使用的浏览器。`load`事件在文档加载过程的末尾触发。因此，你会发现文档中的所有对象都在
    DOM 中，并且资源已经加载完成。'
- en: 'You can also use the `addEventListener()` method on any element to handle any
    event. And it can also be used for the event that all the content in the DOM is
    loaded. There is a special built-in event for this: `DOMContentLoaded()`. This
    event can be used to handle the event of the DOM loading, which will get fired
    immediately after the DOM for the page has been constructed when the event is
    set. Here is how to set it:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在任何元素上使用 `addEventListener()` 方法来处理任何事件。它也可以用于 DOM 中所有内容加载的事件。为此有一个特殊内置的事件：`DOMContentLoaded()`。这个事件可以用来处理
    DOM 加载的事件，当事件被设置时，会在页面上的 DOM 构造完成后立即触发。以下是设置它的方法：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will log to the console when all the DOM content has been loaded. As an
    alternative, you will also often see it in the `body` tag, like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在所有 DOM 内容加载完成后记录到控制台。作为替代，你也会经常在 `body` 标签中看到它，如下所示：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is assigning a function called `unique()` to the body, and it will fire
    off when the body is done loading. You cannot combine `addEventListener()` and
    the HTML by using them together. One will overwrite the other, depending on the
    order of the web page. If you need two events to happen when the DOM is loaded,
    you will need two `addEventListener()` calls in your JavaScript.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在主体上分配一个名为 `unique()` 的函数，并且当主体加载完成后会触发。你不能通过将 `addEventListener()` 和 HTML
    结合使用来组合它们。一个将会覆盖另一个，这取决于网页的顺序。如果你需要在 DOM 加载时发生两个事件，你需要在你的 JavaScript 中调用两个 `addEventListener()`。
- en: Practice exercise 11.3
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 11.3
- en: Using a basic HTML file, the below exercise will demonstrate the order of loading
    for the `window` object and the `document` object using `DOMContentLoaded`, which
    is an event that fires once the `document` object content is loaded in the browser.
    The window object will load afterward, even if the `window`.`onload` statement
    comes first.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用一个基本的 HTML 文件，下面的练习将演示使用 `DOMContentLoaded` 事件来展示 `window` 对象和 `document`
    对象的加载顺序，这是一个在浏览器中 `document` 对象内容加载后触发的事件。即使 `window.onload` 语句先出现，`window` 对象也会随后加载。
- en: Within a basic HTML file, create a function named `message` that requires two
    parameters, the first one being a string value for the message and the second
    an event object. Within the function, output into the console using `console.log`
    the event and the message.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个基本的 HTML 文件中，创建一个名为 `message` 的函数，该函数需要两个参数，第一个是一个字符串值的消息，第二个是一个事件对象。在函数内部，使用
    `console.log` 将事件和消息输出到控制台。
- en: Using the `window` object, attach an `onload` function to the event object.
    Invoke the function, passing a string value of `Window Ready` and the event object
    to the `message` function for output.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `window` 对象，将一个 `onload` 函数附加到事件对象上。调用该函数，将字符串值 `Window Ready` 和事件对象传递给 `message`
    函数以进行输出。
- en: Create a second function to capture the DOM content loading, and add an event
    listener listening for `DOMContentLoaded` to the `document` object. Once that
    event is triggered, pass the event object and a string value of `Document Ready`
    to the `message` output function.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第二个函数来捕获 DOM 内容加载，并将一个监听 `DOMContentLoaded` 事件的监听器添加到 `document` 对象上。一旦该事件被触发，将事件对象和字符串值
    `Document Ready` 传递给 `message` 输出函数。
- en: 'Change the order of the event listeners, placing the `document` event statement
    prior to the window `onload`: does it make a difference in the output?'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 改变事件监听器的顺序，将 `document` 事件语句放在 `window onload` 之前：这会影响输出吗？
- en: Using the `document` object, add the `DOMContentLoaded` event listener, which
    will send to the function the arguments of `Document` `Ready` and the event object
    that was triggered.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `document` 对象，添加 `DOMContentLoaded` 事件监听器，该监听器将 `Document Ready` 和触发的事件对象作为参数传递给函数。
- en: Run the script and see which event is triggered first; change the order of the
    events to see if the output sequence changes.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本并查看哪个事件首先被触发；改变事件的顺序以查看输出序列是否改变。
- en: Mouse event handlers
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鼠标事件处理器
- en: 'There are different mouse event handlers. Mouse events are actions of the mouse.
    These are the ones we have:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的鼠标事件处理器。鼠标事件是鼠标的动作。这些是我们所拥有的：
- en: '`ondblclick`: when the mouse is double-clicked'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ondblclick`：当鼠标双击时'
- en: '`onmousedown`: when the mouse clicks on top of an element without the click
    being released'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onmousedown`：当鼠标点击在元素上而没有释放点击时'
- en: '`onmouseup`: when the mouse click on top of an element is released'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onmouseup`：当鼠标点击在元素上释放时'
- en: '`onmouseenter`: when the mouse moves onto an element'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onmouseenter`：当鼠标移动到元素上时'
- en: '`onmouseleave`: when the mouse leaves an element and all of its children'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onmouseleave`：当鼠标离开一个元素及其所有子元素时'
- en: '`onmousemove`: when the mouse moves over an element'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onmousemove`：当鼠标移过元素时'
- en: '`onmouseout`: when the mouse leaves an individual element'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onmouseout`：当鼠标离开单个元素时'
- en: '`onmouseover`: when the mouse hovers over an element'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`onmouseover`：当鼠标悬停在元素上时'
- en: Let's have a look at one of these in practice. What do you think this does?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些在实际中的应用。你认为这会做什么？
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you go with your mouse over the pink square (the `div` with `id` `divvy`),
    it turns blue immediately. This is because `onmouseover` is added in the HTML
    and points to the JavaScript function that changes the color of the square.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将鼠标移到粉红色的正方形（具有`id` `divvy`的`div`元素）上，它会立即变成蓝色。这是因为HTML中添加了`onmouseover`，并指向改变正方形颜色的JavaScript函数。
- en: Let's look at a similar slightly more complicated example.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个类似的稍微复杂一点的例子。
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We are still starting with the pink square. There are four event listeners
    connected to this div:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然从粉红色的正方形开始。这个`div`上连接了四个事件监听器：
- en: '`mousedown`: when the button is pressed on the mouse but is not yet released,
    the square will turn green.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mousedown`：当鼠标按钮被按下但尚未释放时，正方形会变成绿色。'
- en: '`mouseup`: as soon as the mouse button gets released, the square will turn
    yellow.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mouseup`：一旦鼠标按钮被释放，正方形会变成黄色。'
- en: '`dblclick`: this is a favorite. What do you think will happen upon a double-click?
    A double-click contains two `mousedown` events and two `mouseup` events. Before
    the second `mouseup`, it is not a double-click. So, the square will get the colors
    green, yellow, green, black (and then stay black until another event is fired).'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dblclick`：这是最受欢迎的。你认为双击会发生什么？双击包含两个`mousedown`事件和两个`mouseup`事件。在第二个`mouseup`之前，它不是双击。所以，正方形会变成绿色、黄色、绿色、黑色（然后保持黑色，直到另一个事件被触发）。'
- en: '`mouseout`: when the mouse leaves the square, it turns blue and stays blue
    until one of the three above events is fired again.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mouseout`：当鼠标离开正方形时，它会变成蓝色并保持蓝色，直到上述三个事件之一再次被触发。'
- en: This allows for a lot of interaction. You can do so many things with this. Just
    to give you an example of a thing you can do, say you want to have a very dynamic,
    `mouseover`-driven, product-help decision tool. It will consist of four columns,
    and the content of the last three columns (from the right) is dynamic content.
    The first column is for categories. The second column contains some more specific
    product categories for each category. The third column consists of individual
    products, and the fourth column shows product information. This requires a lot
    of event listeners, and lots of deletion and addition of listeners.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许进行大量的交互。你可以用这个做很多事情。仅举一个例子，比如说你想要一个非常动态的、由`mouseover`驱动的产品帮助决策工具。它将包含四列，最后三列（从右到左）的内容是动态内容。第一列是用于分类的。第二列包含每个分类的一些更具体的产品分类。第三列包含单个产品，第四列显示产品信息。这需要很多事件监听器，以及大量监听器的删除和添加。
- en: Practice exercise 11.4
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11.4
- en: Our aim is to change the background color of the element on the page as the
    various mouse events occur. On `mousedown` over the element, the element will
    turn green. When the mouse is over the element, it will turn red. As the mouse
    moves out of the element boundaries, the color will turn yellow. When the mouse
    is clicked, the color will go green, and when the mouse is released, it will change
    to blue. The actions also be logged in the console.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目的是在页面上的元素上根据各种鼠标事件改变背景颜色。在元素上`mousedown`时，元素会变成绿色。当鼠标悬停在元素上时，它会变成红色。当鼠标移出元素边界时，颜色会变成黄色。当鼠标点击时，颜色会变成绿色，当鼠标释放时，它会变成蓝色。这些动作也会在控制台中记录。
- en: Create a blank element on the page and assign a class to it.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面上创建一个空白元素并给它分配一个类。
- en: Select the element using its class name.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用元素的类名选择元素。
- en: Assign a variable to the element object from the page.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个变量分配给页面上的元素对象。
- en: Update the content of the element to say `hello world`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新元素的内容，使其显示`hello world`。
- en: Using the style properties of the element, update the height and width, then
    add a default background color to it.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用元素的样式属性，更新高度和宽度，然后给它添加一个默认的背景颜色。
- en: Create a function to handle two arguments, the first being a color value as
    a string and the second being the event object of the trigger.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数来处理两个参数，第一个是一个字符串形式的颜色值，第二个是触发事件的的事件对象。
- en: In the function, output the color value to the console, and for the event, output
    the event type to the console.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在函数中，将颜色值输出到控制台，对于事件，将事件类型输出到控制台。
- en: 'Add event listeners to the element: `mousedown`, `mouseover`, `mouseout`, and
    `mouseup`. For each of these events, send two arguments to the function that you
    created: a color value and the event object.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向元素添加事件监听器：`mousedown`、`mouseover`、`mouseout` 和 `mouseup`。对于这些事件中的每一个，将两个参数发送到您创建的函数：一个颜色值和事件对象。
- en: Run the code and try it in your browser.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并在您的浏览器中尝试它。
- en: The event target property
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件目标属性
- en: 'Whenever an event gets fired, an event variable becomes available. It has many
    properties, and you can check it out by using this command in the function that
    gets fired for the event:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 每当事件被触发时，一个事件变量就会变得可用。它有许多属性，您可以通过在为事件触发的函数中使用此命令来检查它：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will show many properties. One of the most interesting properties for now
    is the `target` property. The target is the HTML element that fired the event.
    So, we can use it to get information from a web page. Let's look at a simple example.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示许多属性。目前最有趣的属性之一是 `target` 属性。目标是触发事件的 HTML 元素。因此，我们可以用它来获取网页上的信息。让我们看看一个简单的例子。
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In this case, `event.target` is the `button` element. In the console, the `button`
    element and all its properties will be logged, including potential siblings and
    parents.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`event.target` 是 `button` 元素。在控制台中，将记录 `button` 元素及其所有属性，包括潜在的兄弟元素和父元素。
- en: 'A use case where parent properties can come in handy is in the case of HTML
    forms, where there are multiple input fields and a button. A button in a form
    would often have the form as its direct parent. Via this parent, data from the
    input fields can be fetched. This is demonstrated in the following example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当有多个输入字段和一个按钮的 HTML 表单时，父属性可能会很有用。表单中的按钮通常是其直接父元素。通过这个父元素，可以获取输入字段的值。以下是一个示例：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This results in a little form, like this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生一个小表单，如下所示：
- en: '![](img/B16682_11_01.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16682_11_01.png)'
- en: 'Figure 11.1: Basic HTML form'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1：基本 HTML 表单
- en: 'And once you enter data in the fields and hit **Submit**, this is what it looks
    like:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在字段中输入数据并点击 **提交**，它看起来就像这样：
- en: '![](img/B16682_11_02.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16682_11_02.png)'
- en: 'Figure 11.2: Data entered in the basic HTML form with a dynamic welcome message'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2：带有动态欢迎信息的简单 HTML 表单
- en: 'With this command, event.target[CIT] is the HTML button:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此命令，`event.target[CIT]` 是 HTML 按钮：
- en: '[PRE12]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The parent element of the button, the form in this case, gets stored in the
    `p` variable. `p` is the parent and it represents the form element. So, this command
    will get the value of the input box:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮的父元素，在这个例子中是表单，被存储在 `p` 变量中。`p` 是父元素，它代表表单元素。因此，这个命令将获取输入框的值：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Similarly, `p.lastname.value` gets the last name. We haven't seen this yet,
    but with the `value` property, you can get the values of input elements.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`p.lastname.value` 获取姓氏。我们还没有看到这一点，但使用 `value` 属性，您可以获取输入元素的值。
- en: Next, both input values are combined and sent to the `message()` function. This
    function changes the inner HTML of the div to a personalized welcome message,
    which is why **Hi there!** changes to **Welcome Maaike van Putten**.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将两个输入值合并并发送到 `message()` 函数。此函数将 div 的内部 HTML 更改为个性化的欢迎信息，这就是为什么 **Hi there!**
    会变成 **Welcome Maaike van Putten**。
- en: Practice exercise 11.5
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 11.5
- en: 'Change the text in a div element on the page. This exercise will demonstrate
    how you can get the value from an input field and place it within a page element.
    It also covers tracking button clicks and details about the event target. You
    can use the following HTML document as a template, to which you can add JavaScript:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面上更改 div 元素的文本。这个练习将演示您如何从输入字段获取值并将其放置在页面元素中。它还涵盖了跟踪按钮点击和事件目标的相关细节。您可以使用以下
    HTML 文档作为模板，然后添加 JavaScript：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Take the following steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 采取以下步骤：
- en: Using the above HTML as a template, add the JavaScript code, selecting each
    page element, including the `div`, the input field, and the `button` element.
    Assign these element objects to variables in your code.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用上述 HTML 作为模板，添加 JavaScript 代码，选择每个页面元素，包括 `div`、输入字段和 `button` 元素。将这些元素对象分配给您的代码中的变量。
- en: Create an empty array called `log`, which will be used to track and log all
    the events.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `log` 的空数组，它将用于跟踪和记录所有事件。
- en: Create a function that will capture the event object details in an object, adding
    it to the `log` array. Get the event target and create an object, adding it to
    the array that stores the input value at the time, the type of event, the class
    name of the target element, and the tag name of the target element.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，该函数将事件对象详情捕获到对象中，并将其添加到`log`数组。获取事件目标和创建一个对象，将其添加到存储输入值时、事件类型、目标元素的类名和目标元素的标签名的数组中。
- en: Within the logging function, get the value of the content within the input and
    assign that value to the `textContent` of the `div`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在日志函数内部，获取输入内容中的值并将其分配给`div`的`textContent`。
- en: Clear the `div` content after the information is added to the `log` array.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在信息添加到`log`数组后清除`div`内容。
- en: Add an event listener to both of the first two buttons that sends the event
    object to the tracking function created in the earlier steps.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将事件监听器添加到前两个按钮上，将事件对象发送到之前步骤中创建的跟踪函数。
- en: Attach an event listener to the third button that outputs the log content to
    the console.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将事件监听器附加到第三个按钮上，将日志内容输出到控制台。
- en: DOM event flow
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DOM事件流
- en: Let's go over what happens when you click on an element that has multiple elements
    associated with it.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下当你点击一个与多个元素相关联的元素时会发生什么。
- en: 'We are going to create nested `div` elements. In order to illustrate this,
    there is a style added to the body. It is actually better to add this style in
    a `head` tag, and even better to have a separate CSS file, but this is a bit shorter
    to read. This is what the nested `div` elements will look like:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建嵌套的`div`元素。为了说明这一点，我们在`body`上添加了一个样式。实际上，最好在`head`标签中添加这个样式，甚至更好的是有一个单独的CSS文件，但这样读起来更简洁。这就是嵌套`div`元素的外观：
- en: '![](img/B16682_11_03.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B16682_11_03.png)'
- en: 'Figure 11.3: Event bubbling in web page'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3：网页中的事件冒泡
- en: And below is the code associated with it. The script is on the bottom and will
    be executed when the parts on top are done. It is going to add event listeners
    to every `div`, and what it will do is log the `innerText`. For the outermost
    element of the nested `div` elements, this would be `12345`, with a new number
    on every line.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与之相关的代码。脚本在底部，将在上面的部分完成后执行。它将为每个`div`添加事件监听器，并将执行的操作是记录`innerText`。对于嵌套`div`元素的最外层元素，这将显示`12345`，每行一个新数字。
- en: So the question here is, how will it trigger the events? Say we click on the
    **5**, what will be executed? The event of all of the nested `div` elements, or
    only the one from **5**? And if it is going to execute all of them, will it execute
    them from inner to outer event or the other way around?
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里的问题是，它将如何触发事件？比如说我们点击**5**，会执行什么？所有嵌套`div`元素的事件，还是只有**5**的事件？如果它要执行所有这些事件，是按照从内到外的事件顺序执行，还是相反？
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In this case, it has the default behavior. It will execute all five events,
    so each one of every nested `div`. And it will execute them inside out. So it
    will start with the `innerText` of only **5**, then **45**, until the last one,
    **12345**:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，它具有默认行为。它将执行所有五个事件，所以每个嵌套`div`都会执行。并且它是从内到外执行的。所以它将从只有**5**的`innerText`开始，然后是**45**，直到最后一个，**12345**：
- en: '![](img/B16682_11_04.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B16682_11_04.png)'
- en: 'Figure 11.4: Console output event bubbling'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4：控制台输出事件冒泡
- en: This is called **event bubbling**. It's what happens when you trigger the handlers
    on an element. It runs its own events first, then its parents, and so on. It is
    called bubbling because it goes up from the inner event to the outer, like water
    bubbles going up.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为**事件冒泡**。当你在一个元素上触发处理器时，就会发生这种情况。它首先运行自己的事件，然后是父元素，依此类推。之所以称为冒泡，是因为它从内部事件向上传播到外部，就像水泡上升一样。
- en: 'You can alter this behavior by adding `true` as a third argument when you add
    the event listener like this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在添加事件监听器时将`true`作为第三个参数来改变这种行为：
- en: '[PRE16]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This would be the result:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是结果：
- en: '![](img/B16682_11_05.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B16682_11_05.png)'
- en: 'Figure 11.5: Console output event capturing'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5：控制台输出事件捕获
- en: This moving from the outer element to the inner element is called **event capturing**.
    It is not used a lot anymore nowadays, but if you do need to implement it, you
    can use the `useCapture` argument of `addEventListener()` (the third argument)
    and set it to `true`. It is `false` by default.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这种从外部元素到内部元素的移动被称为**事件捕获**。现在不再经常使用，但如果你需要实现它，可以使用`addEventListener()`的`useCapture`参数（第三个参数）并将其设置为`true`。默认情况下是`false`。
- en: The event capturing and bubbling allows us to apply a principle called **event
    delegation**. Event delegation is the concept where instead of adding event handlers
    to every element in a certain block of HTML, we define a wrapper and add the event
    to this wrapper element, and it then applies to all the child elements as well.
    You'll apply this principle in the next exercise.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 事件捕获和冒泡允许我们应用一个称为 **事件委托** 的原则。事件委托的概念是，我们不是在 HTML 块中的每个元素上添加事件处理器，而是定义一个包装器并将事件添加到这个包装器元素，然后它也适用于所有子元素。你将在下一个练习中应用这个原则。
- en: Practice exercise 11.6
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 11.6
- en: This example will demonstrate event capturing and the delegation of page elements.
    By adding event listeners to the parent and children within the main element,
    this example will order the console messages according to the event capture properties.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例将演示事件捕获和页面元素的委托。通过在主元素内部添加事件监听器，此示例将根据事件捕获属性对控制台消息进行排序。
- en: All of the `div` elements with a `class` of `box` will have the same event object.
    We can add the event target, `textcontent`, as well into the console so that we
    can tell which element was clicked.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 所有具有 `class` 为 `box` 的 `div` 元素将具有相同的事件对象。我们可以将事件目标、`textcontent` 也添加到控制台，以便我们可以知道哪个元素被点击。
- en: 'Use the following template:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下模板：
- en: '[PRE17]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Take the following steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: In the JavaScript code, select all the elements with the classes, and separately
    select the main container element.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JavaScript 代码中，选择所有具有类别的元素，并单独选择主容器元素。
- en: Add event listeners to the main container, outputting to the console value of
    `4` for the `useCapture` argument set to `false`, and `1` for the `useCapture`
    argument set to `true`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向主容器添加事件监听器，当 `useCapture` 参数设置为 `false` 时输出控制台值 `4`，当 `useCapture` 参数设置为 `true`
    时输出 `1`。
- en: For each of the nested elements, add `click` event listeners with a `console.log()`
    value of `3` for the `useCapture` argument set to `false`, and `2` for `useCapture`
    set to `true`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个嵌套元素，添加 `click` 事件监听器，当 `useCapture` 参数设置为 `false` 时 `console.log()` 值为
    `3`，当 `useCapture` 参数设置为 `true` 时值为 `2`。
- en: Click the page elements to see the event delegation and order of output on the
    page.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面元素以查看页面上的事件委托和输出顺序。
- en: Within the box elements on both `click` events, add to the console an output
    for the event target's `textContent` value.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `click` 事件中，向盒元素添加到控制台的输出，输出事件目标的 `textContent` 值。
- en: onchange and onblur
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`onchange` 和 `onblur`'
- en: Two other events that are often combined with input boxes are `onchange` and
    `onblur`. `onchange` gets triggered when an element changes, for example, when
    the value of an input box changes. `onblur` gets triggered when an object goes
    out of focus; for example, when you have the cursor in one input box and the cursor
    goes to another input box, the `onblur` event of the first input box will get
    triggered.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个常与输入框结合使用的事件是 `onchange` 和 `onblur`。`onchange` 在元素改变时被触发，例如，当输入框的值改变时。`onblur`
    在对象失去焦点时被触发；例如，当你有一个输入框的光标并且光标移动到另一个输入框时，第一个输入框的 `onblur` 事件将被触发。
- en: '[PRE18]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `firstname` input box has an `onchange` event. If the value of the data
    in the input box gets changed, this event gets triggered as soon as the input
    box loses focus. If the input box loses focus when the value has not changed,
    nothing happens for `onchange`. This is not true for `onblur`, which is assigned
    to the `lastname` input box. Even when the value hasn't changed, the event will
    get triggered.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`firstname` 输入框有一个 `onchange` 事件。如果输入框中的数据值发生变化，此事件将在输入框失去焦点时立即触发。如果输入框在值未改变时失去焦点，则
    `onchange` 不会发生任何操作。这并不适用于分配给 `lastname` 输入框的 `onblur`，即使值没有改变，事件也会被触发。'
- en: Another event that is often used with input boxes is `onfocus`, or simply `focus`
    when used in combination with an event listener. This event is associated with
    the cursor entering the input box, and it gets fired when the input box gets focused
    on by the cursor and input can be entered.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常与输入框一起使用的事件是 `onfocus`，或者当与事件监听器结合使用时简称为 `focus`。此事件与光标进入输入框相关联，并且当输入框被光标聚焦并且可以输入时，此事件将被触发。
- en: Practice exercise 11.7
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 11.7
- en: With two input fields on the page, JavaScript will listen for changes to the
    content in the input field. Once the input field is not in focus, if the value
    has been changed, the change event will be invoked. `blur` and `focus` are also
    added to the input fields and will get logged to the console as those events occur.
    Both input elements will have the same event listeners, and as you change the
    content of the input fields and remove focus, the output text content will update
    using the values of the input field that triggered the event.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面上有两个输入字段时，JavaScript 会监听输入字段内容的变化。一旦输入字段不再聚焦，如果值已经改变，将调用改变事件。`blur` 和 `focus`
    也会添加到输入字段，并在这些事件发生时记录到控制台。两个输入元素将具有相同的事件监听器，当你更改输入字段的 内容并移除焦点时，输出文本内容将使用触发事件的输入字段值更新。
- en: 'Use the following HTML template:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下 HTML 模板：
- en: '[PRE20]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now take the following steps:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按照以下步骤操作：
- en: Within the JavaScript code, put the HTML output element into a variable object
    that you can use to display content on the page.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 JavaScript 代码中，将 HTML 输出元素放入一个变量对象中，这样你就可以在页面上显示内容了。
- en: Select both input fields. You can use `querySelector()` and `"input[name='first']"`,
    which will allow you to make your selection using the input field name.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择两个输入字段。你可以使用 `querySelector()` 和 `"input[name='first']"`，这将允许你通过输入字段名称进行选择。
- en: Add an event listener to the first input and the second input. The event listener
    should be a change event to track changed values. This will only be invoked if
    the value in the field is changed and you click off the input field.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将事件监听器添加到第一个输入和第二个输入。事件监听器应该是一个改变事件，用于跟踪更改的值。这只会在你点击离开输入字段时调用。
- en: Create a separate function to handle the output of the content to the page,
    updating the `textContent` of the output element.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个单独的函数来处理内容的输出到页面，更新输出元素的 `textContent`。
- en: Send the values of the input fields as they get changed to the output element
    `textContent`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将输入字段的值在它们改变时发送到输出元素 `textContent`。
- en: Add four additional event listeners and listen for `blur` and `focus` on each
    input. Once the event gets triggered, output in the console the value of the event
    type.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加四个额外的事件监听器，并监听每个输入的 `blur` 和 `focus` 事件。一旦事件被触发，就在控制台输出事件类型值。
- en: Key event handler
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键事件处理器
- en: There are several key events. One of them is `onkeypress`. `onkeypress` gets
    triggered, well, you may have guessed this, whenever a key gets pressed. Pressing
    means here when the button is pressed and released. If you want an event to happen
    as soon as the button is pressed (so before releasing), you can use the `onkeydown`
    event. If you want the event to happen on release, you can use the `onkeyup` event.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个关键事件。其中之一是 `onkeypress`。`onkeypress` 会在按下键时触发，嗯，你可能已经猜到了，按下意味着在这里按钮被按下然后释放。如果你想事件在按下按钮（在释放之前）立即发生，你可以使用
    `onkeydown` 事件。如果你想事件在释放时发生，你可以使用 `onkeyup` 事件。
- en: There are many things we can do with key events. For example, we can restrict
    what characters can be entered in an input box. Every time a key gets pressed,
    we can check the character and decide whether it gets to stay.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用关键事件做很多事情。例如，我们可以限制在输入框中可以输入的字符。每次按键时，我们都可以检查字符并决定是否保留它。
- en: 'We can get the key that triggered the event using:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下方式获取触发事件的键：
- en: '[PRE21]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The following HTML code has two input boxes. Can you see what is happening here?
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 HTML 代码中有两个输入框。你能看到这里发生了什么吗？
- en: '[PRE22]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The first one checks if a value is a number, and if it is a number, it will
    write `Number: true` at the top; else, it will write `Number: false` at the top.
    The second one is checking for if a value is not a number; if it is not a number,
    it will write `Not a number: true`; else, it will write `Not a number: false`.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '第一个检查值是否为数字，如果是数字，它将在顶部写 `Number: true`；否则，它将在顶部写 `Number: false`。第二个是检查值是否不是数字；如果不是数字，它将在顶部写
    `Not a number: true`；否则，它将在顶部写 `Not a number: false`。'
- en: 'So this is one way of using the `onkeypress` event, but we can do even more.
    We can add a `return` statement to our `onkeypress` event, like this:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是使用 `onkeypress` 事件的一种方法，但我们还能做得更多。我们可以在 `onkeypress` 事件中添加一个 `return` 语句，如下所示：
- en: '[PRE23]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If `true` is returned, the key value gets added to the input box; if `false`
    is returned, the key value is not added.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果返回 `true`，则键值被添加到输入框中；如果返回 `false`，则键值不会被添加。
- en: The following code snippet only allows numbers to be entered in the input box.
    Whenever the user tries to type something else, the function restricts it.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段只允许在输入框中输入数字。每当用户尝试输入其他内容时，该函数会限制它。
- en: '[PRE24]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As you can see, `return` gets included in onkeypress to ensure that only numbers
    can be entered. One other thing might have caught your eye: `onpaste="return false"`.
    This is to deal with smart people who copy and paste numbers to a non-numeric
    field or other characters to a numeric field and still manage to get illegal characters
    in there.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`return`被包含在onkeypress中，以确保只能输入数字。还有一件事可能引起了您的注意：`onpaste="return false"`。这是为了处理那些复制粘贴数字到非数字字段或字符到数字字段，但仍能成功输入非法字符的聪明人。
- en: Practice exercise 11.8
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习11.8
- en: By recognizing key presses and detecting the values of characters as key presses
    occur with the element in focus, we can also detect if content is pasted into
    an input field.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 通过识别按键和检测当元素获得焦点时字符的按键值，我们还可以检测内容是否被粘贴到输入字段中。
- en: Create two input fields within your HTML. Add an element to output content too.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的HTML中创建两个输入字段。添加一个元素以输出内容。
- en: Using JavaScript, select the page elements. You can assign a variable called
    `output` to the element with a class of `output`. Create another variable, `eles`,
    and select all the input fields (using `querySelectorAll()`) as its value. This
    way, we can loop through the node list and assign the same events to all the matching
    elements.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用JavaScript选择页面元素。你可以将一个名为`output`的变量分配给具有`output`类的元素。创建另一个变量`eles`，并使用`querySelectorAll()`选择所有输入字段作为其值。这样，我们可以遍历节点列表并将相同的事件分配给所有匹配的元素。
- en: Using `forEach()`, iterate through all the input elements from the page. Add
    the same event listeners to all of them.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`forEach()`遍历页面上的所有输入元素。将相同的事件监听器添加到所有这些元素上。
- en: Add a keydown event listener and check if the value is a number. If it is a
    number, then add it to the output area.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个keydown事件监听器并检查值是否为数字。如果是数字，则将其添加到输出区域。
- en: On `keyup`, output to the console the value of the key.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`keyup`事件中，将按键值输出到控制台。
- en: Check if there was a paste in the input field; if there was, then you can output
    the word `paste` to the console.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查输入字段中是否有粘贴操作；如果有，则可以将单词`paste`输出到控制台。
- en: Drag and drop elements
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拖放元素
- en: There are also special event handlers for dragging and dropping. We need a starting
    point to be able to drag and drop something. Let's create the CSS and HTML for
    a dragging and dropping area.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 对于拖放也有特殊的事件处理器。我们需要一个起点来能够拖放某个东西。让我们创建一个拖放区域的CSS和HTML。
- en: '[PRE25]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now we are also going to include an element that is going to be dragged and
    dropped. In order to mark an element as something that can be dragged, we need
    to add the attribute `draggable`. This is the code we are going to include in
    our second div, with the first div around it:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们还将包括一个将要被拖放和放下的元素。为了标记一个元素为可拖动，我们需要添加`draggable`属性。这是我们将在第二个div中包含的代码，第一个div围绕它：
- en: '[PRE26]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Then we need to decide what we are going to do when we drop the draggable element.
    We need to specify this within the box it can be dragged to. We are going to add
    the functionality to both boxes, so it can be dragged over to one and back to
    the other.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要决定当我们将可拖动元素放下时，我们将要做什么。我们需要在它可以被拖动的框内指定这一点。我们将向两个框都添加功能，以便它可以从一个拖动到另一个，然后再回到第一个。
- en: '[PRE27]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'And here is the script that will be added to the end of the body:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将被添加到body末尾的脚本：
- en: '[PRE28]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We start by specifying a variable in the script for the item that we want to
    hold when dragging. When the `ondragstart` event gets triggered, we are going
    to store the element that is being dragged in the `holderItem` variable. Normally,
    when you drag, dropping is not allowed by the design of HTML. In order to allow
    the drop, you''ll have to prevent the default event that means the item you want
    to drop cannot be dropped. You can do this with:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在脚本中指定一个变量，用于在拖动时保存的项目。当`ondragstart`事件被触发时，我们将把正在拖动的元素存储在`holderItem`变量中。通常，当你拖动时，由于HTML的设计，放下是不允许的。为了允许放下，你需要阻止默认事件，这意味着你想要放下的项目不能被放下。你可以通过以下方式做到这一点：
- en: '[PRE29]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Usually, before you prevent the default behavior, you would do some checks to
    see whether the element that is being dropped can be accepted at that place. In
    the example above, we check whether the class name of the element that it is being
    dropped to is `box`. If that's the case, we append `holderItem` as a child to
    the box.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在你阻止默认行为之前，你会做一些检查，看看被拖动的元素是否可以放置在那个位置。在上面的例子中，我们检查被拖动的元素的类名是否为 `box`。如果是这样，我们将
    `holderItem` 作为子元素添加到盒子中。
- en: We have created a page that allows moving an HTML element from one box to another.
    If you try to release it anywhere else, the element goes back instead to its previous
    location.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个页面，允许将 HTML 元素从一个盒子移动到另一个盒子。如果你尝试在其他任何地方释放它，元素将返回到其原始位置。
- en: Practice exercise 11.9
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 11.9
- en: This will be an "I'm not a robot" check. Drag and drop can be used to ensure
    that it's a live user that is acting on a page rather than a robot. This exercise
    will demonstrate how to create a visual dragging effect on an active element,
    in which the user clicks the mouse down to create a drag action, and once the
    mouse button is released, the drop event occurs. The successful actions are logged
    to the console.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个“我不是机器人”的检查。拖放可以用来确保是在页面上操作的是活生生的人，而不是机器人。这个练习将演示如何在一个活动元素上创建一个视觉拖动效果，其中用户按下鼠标以创建拖动动作，一旦鼠标按钮释放，就会发生放下事件。成功操作将被记录到控制台。
- en: 'You can use the following template:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下模板：
- en: '[PRE30]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The preceding HTML creates styles for an element that will be used for dropping,
    and sets a width, height, and border. It creates another class called `red` and
    adds a red background to the active element so that it shows as active, along
    with two `div` elements that will have classes of the `box` element for dropoff.
    Finally, we create a `div` nested in one of the boxes that has an `id` of `dragme`
    and an attribute of `draggable` set to `true`, with some instructive text added
    to aid the user. Complete the script by taking the following steps:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的 HTML 为用于放置的元素创建样式，并设置了宽度、高度和边框。它创建了一个名为 `red` 的另一个类，并将红色背景添加到活动元素，以便显示为活动状态，以及两个具有
    `box` 元素类别的 `div` 元素，用于放置。最后，我们在其中一个盒子中创建了一个嵌套的 `div`，其 `id` 为 `dragme`，并将 `draggable`
    属性设置为 `true`，添加了一些指导性文本以帮助用户。通过以下步骤完成脚本：
- en: Select the `draggable` element as an object in your JavaScript code.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 JavaScript 代码中将可拖动元素作为对象选择。
- en: Add an event listener of `dragstart`, where it updates the `draggable` element
    to `0.5` opacity.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `dragstart` 事件的监听器，其中它将可拖动元素的透明度更新为 `0.5`。
- en: Add another event listener of `dragend` that removes the value for the opacity.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个 `dragend` 事件的监听器，移除不透明度的值。
- en: Using `querySelectorAll()`, select all the dropoff boxes.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `querySelectorAll()` 选择所有放下盒子。
- en: Add event listeners to all the dropoff boxes, setting things such that the `red`
    class is added to an element whenever the user triggers the `dragenter` event.
    This will indicate to the user that the action is taking place.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向所有放下盒子添加事件监听器，设置当用户触发 `dragenter` 事件时向元素添加 `red` 类。这将向用户指示操作正在进行。
- en: Set `dragover`, adding a `preventDefault()` method to the element to disable
    any actions that might already exist.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 `dragover`，向元素添加 `preventDefault()` 方法以禁用可能已经存在的任何动作。
- en: On `dragleave`, remove the `red` class.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `dragleave` 事件中，移除 `red` 类。
- en: Adding the event listener of `drop` to the box, append the `draggable` element
    to the event target.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `drop` 事件的监听器添加到盒子中，将可拖动元素添加到事件目标。
- en: To work across all elements in the same way, remove the default action of the element.
    You can use the `preventDefault()` method to this event to disable any actions
    that might already exist.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要以相同的方式作用于所有元素，移除元素的默认行为。你可以使用 `preventDefault()` 方法来禁用可能已经存在的任何动作。
- en: You can add console log messages to any of these events to better track them.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在这些事件中的任何一个上添加控制台日志消息，以更好地跟踪它们。
- en: Form submission
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表单提交
- en: When a form gets submitted, an event can be triggered. This can be achieved
    in different ways, and one of them is to add to the `form` element the `onsubmit`
    attribute.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单提交时，可以触发一个事件。这可以通过不同的方式实现，其中之一是在 `form` 元素上添加 `onsubmit` 属性。
- en: '[PRE31]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The function that is listed there will get triggered whenever input of type
    `submit` is submitted.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 列出的函数将在提交 `submit` 类型的输入时被触发。
- en: '[PRE32]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: We can do more with the HTML of the `form` element; for example, we can redirect
    to another page. We have to specify the way we want to send the form values using
    the `method` attribute and the location page using the `action` attribute.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Don''t worry about the `get` for now; this just means that values get sent
    via the URL. URLs look like this when you use `get`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: After the question mark, the variables that are sent along are shown in key-value
    pairs. This is the form that created the URL when `edward` was inserted for `name`.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '`anotherpage.html` can use the variables from the URL. This can be done in
    the JavaScript of `anotherpage.html` doing something like this:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: So far we have been submitting forms using the `action` and `onsubmit` attributes.
    `action` redirects to another location. This could be the API endpoint of a different
    page. `onsubmit` specifies an event that is fired when the form gets submitted.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: There are more cool things we can do with the `onsubmit` event of forms. Remember
    the use of `return` for `onkeypress`? We can do something similar here! If we
    make the called function return a Boolean, the form will only get submitted when
    the Boolean is `true`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: This comes in very handy if we want to do some form validation before sending
    it. Have a look at this code and see if you can figure out when it can be submitted.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This form contains three input fields and one input button. The fields are for
    last name, first name, and age. When one of them is missing, the form will not
    submit, because the function will return `false`. A message will also be added
    to the `div` above the form, explaining what went wrong.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Practice exercise 11.10
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This will be about creating a form validator. In this exercise, you will be
    checking to ensure that the desired values are entered into the input fields.
    The code will check the input values that are entered by the user to match predetermined
    conditions for those field values.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up a form, adding three input fields inside: `First`, `Last`, and `Age`.
    Add a submit button.'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the JavaScript code, select the form as an element object.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an submit event listener to the form.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up the default value for `error` as `false`.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a function named `checker()`, which will check to see the length of a
    string and output the string length to the console.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add conditions to each of the field values, first checking if the value is there
    and then returning an error if the response is `false`, before changing the error
    variable to `true`.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `console.log()` to log the details about the error.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the age input value, check the value to see if the age provided is 19 or
    over, otherwise cause an error.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the end of the validation, check if `error` is `true`; if it is, use `preventDefault()`
    to stop the form submission. Log the errors to the console.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Animating elements
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lastly, we want to show you that you can animate using HTML, CSS, and JavaScript.
    This allows us to do even cooler things with our web page. For example, we can
    trigger an animation as an event. This can be used for many different purposes,
    for example, to illustrate an explanation, to draw the user's eyes to a certain
    location, or to play a game.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们想向你展示你可以使用HTML、CSS和JavaScript进行动画处理。这使我们能够用我们的网页做更多酷的事情。例如，我们可以将动画作为事件触发。这可以用于许多不同的目的，例如，说明解释，将用户的注意力吸引到某个位置，或者玩游戏。
- en: Let's show you a very basic example. We can use the `position` key and set it
    to `absolute` in CSS. This makes the position of the element relative to its nearest
    positioned parent. Here, that would be the body. This is the code for a purple
    square that moves from left to right when a button is clicked.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们给你一个非常基本的例子。我们可以使用`position`键，并在CSS中将其设置为`absolute`。这使得元素的位置相对于其最近的定位父元素。这里，那将是body。这是当点击按钮时从左到右移动的紫色方块的代码。
- en: '[PRE38]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: We need to give the `div` block an absolute position, because we rely on the
    CSS `left` property to make it move. In order to be to the left of something,
    that something needs to be absolute, else the `left` property cannot be positioned
    relative to it. In this case, we need to be a certain number of pixels to the
    left of the `div`; this is why we need the position of the `div` to be absolute,
    so the position of the moving box can be relative to that of its parent.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要给`div`块一个绝对位置，因为我们依赖于CSS的`left`属性来移动它。为了在某个东西的左边，那个东西必须是绝对的，否则`left`属性不能相对于它定位。在这种情况下，我们需要在`div`的左边一定数量的像素处；这就是为什么我们需要将`div`的位置设置为绝对，这样移动框的位置就可以相对于其父元素的位置了。
- en: 'When we click the button, the function `toTheRight()` gets triggered. This
    function grabs `block` and stores it in `b`. It sets `x` to `0`. Then we use a
    very powerful built-in JavaScript function: `setInterval()`. This function keeps
    on evaluating an expression until `clearInterval()` gets called. This is done
    when `x`, the measure of how far we are to the left, reaches 600\. It repeats
    it every 2 milliseconds, which gives it the sliding look.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击按钮时，会触发`toTheRight()`函数。这个函数获取`block`并将其存储在`b`中。将`x`设置为`0`。然后我们使用一个非常强大的内置JavaScript函数：`setInterval()`。这个函数会持续评估一个表达式，直到`clearInterval()`被调用。当`x`，即我们距离左边的测量值达到600时，它会这样做。它每2毫秒重复一次，这使得它看起来像在滑动。
- en: You can at the same time also set different positions, like `style.top`, `style.bottom`,
    and `style.right`, or append new elements to create a snow effect, or show constantly
    driving cars. With this in your toolbox, the sky is the limit.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 你同时也可以设置不同的位置，如`style.top`、`style.bottom`和`style.right`，或者添加新元素来创建雪花效果，或者显示不断行驶的汽车。有了这个工具箱，天空就是极限。
- en: Practice exercise 11.11
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习第11.11节练习题。
- en: Here we will click the purple square and watch it move on the page. This exercise
    will demonstrate creating the events for a simple interactive element on the page.
    The purple square will move every time it's clicked; once it reaches the boundaries
    of the page, it will change direction from left to right and right to left, depending
    on what side it hits.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将点击紫色方块，并观察它在页面上移动。这个练习将演示在页面上创建一个简单交互元素的事件的创建。紫色方块每次被点击时都会移动；一旦它达到页面的边界，它将根据它撞击的侧面从左到右或从右到左改变方向。
- en: Set up styling for an element, setting `height` and `width` before setting `position`
    to `absolute`.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置元素的样式，在设置`position`为`absolute`之前设置`height`和`width`。
- en: Create an element that you want to move on the page.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个你想要在页面上移动的元素。
- en: Select and store the element using JavaScript.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用JavaScript选择并存储元素。
- en: Set up an object with values for `speed`, `direction`, and `position`.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个包含`speed`、`direction`和`position`值的对象。
- en: Add an event listener for if the element is clicked on.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个事件监听器，以便在元素被点击时触发。
- en: Set a default value of `30` for the value of the interval counter.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将间隔计数器的默认值设置为`30`。
- en: If the counter is less than 1, then end the interval and clear it.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果计数器小于1，则结束间隔并清除它。
- en: Once the interval has run 30 times using the value of `x`, the element will
    stand still and wait to be clicked again.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦间隔运行了30次使用`x`的值，元素将静止并等待再次被点击。
- en: While in motion, check if the position value is greater than 800 or less than
    0, which means it needs to change direction. The `direction` value will provide
    the direction of movement. If the movement takes the box outside the boundaries
    of the container, we need to send it in the other direction. This can be done
    by multiplying by negative one. If the value is positive, it will become negative,
    sending the element to the left. If the value is negative, it will become positive,
    sending the element to the right.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运动过程中，检查位置值是否大于 800 或小于 0，这意味着需要改变方向。`direction` 值将提供运动的方向。如果运动将盒子移出容器的边界，我们需要将其送回另一个方向。这可以通过乘以负一来实现。如果值是正的，它将变成负的，将元素送向左边。如果值是负的，它将变成正的，将元素送向右边。
- en: Update the `style.left` position value of the element, assigning the value of
    the position that was updated. Add `px`, as the assigned value of the style is
    a string.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新元素的 `style.left` 位置值，分配更新后的位置值。添加 `px`，因为分配给样式的值是一个字符串。
- en: Output the result to the console.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将结果输出到控制台。
- en: Chapter projects
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节项目
- en: Build your own analytics
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建你自己的分析。
- en: Figure out which elements are clicked on in a page and record their IDs, tags,
    and class name.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 确定页面中点击了哪些元素，并记录它们的 ID、标签和类名。
- en: Create a main container element within your HTML.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 HTML 中创建一个主容器元素。
- en: Add four elements inside the main element, each having a class of `box` and
    a unique ID with unique text content.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主元素内部添加四个元素，每个元素都有一个 `class` 为 `box` 的类和一个唯一的 ID 以及唯一的文本内容。
- en: Set up your JavaScript code to contain an array that you can use for tracking,
    adding details from each click into it.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置你的 JavaScript 代码以包含一个数组，你可以使用它来跟踪，将每次点击的详细信息添加到其中。
- en: Select the main container element as a variable object in your code.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的代码中将主容器元素作为变量对象选择。
- en: Add an event listener to capture clicks on the element.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个事件监听器来捕获对元素的点击。
- en: Create a function to handle the clicks. Get the target element from the event
    object.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个处理点击的函数。从事件对象中获取目标元素。
- en: Check if the element has an ID, so that you don't track clicks on the main container.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查元素是否有 ID，这样你就不会跟踪主容器上的点击。
- en: Set up an object to track the values; include the element `textContent`, `id`,
    `tagName`, and `className`.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个对象来跟踪值；包括元素的 `textContent`、`id`、`tagName` 和 `className`。
- en: Add the temporary object to your tracking array.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将临时对象添加到你的跟踪数组中。
- en: Output the values captured in your tracking array to your console.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你在跟踪数组中捕获的值输出到你的控制台。
- en: Star rating system
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 星级评分系统
- en: Create a star rating component that is fully interactive and dynamic using JavaScript.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JavaScript 创建一个完全交互和动态的星级评分组件。
- en: '![](img/B16682_11_06.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16682_11_06.png)'
- en: 'Figure 11.6: Creating a star rating system'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6：创建星级评分系统
- en: You can use the following HTML and CSS as a starting template. Provide the completed
    script element as your answer.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下 HTML 和 CSS 作为起始模板。提供完成的脚本元素作为你的答案。
- en: '[PRE39]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Take the following steps:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: Select all the stars within the `ul` that have a `class` of `stars` into an
    object, and create another object for the `output` element.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `ul` 中所有具有 `class` 为 `stars` 的星星选择为一个对象，并为 `output` 元素创建另一个对象。
- en: Create another object to contain the results of calling `querySelectorAll()`
    on elements with a class of `star`.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个对象来包含对具有 `class` 为 `star` 的元素调用 `querySelectorAll()` 的结果。
- en: Loop through the resulting node list, adding to the element object the value
    of the index plus 1, and adding an event listener listening for a click. Attach
    a function called `starRate()` to the `click` event of each `star` element.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历结果节点列表，将索引值加 1 的值添加到元素对象中，并添加一个监听点击的事件监听器。将名为 `starRate()` 的函数附加到每个 `star`
    元素的 `click` 事件上。
- en: Within the `starRate()` function, add to the output the value of the star using
    the event target and the element object's star value, which was set in the previous
    step.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `starRate()` 函数中，将使用事件目标和元素对象的星值（在之前步骤中设置）的值添加到输出中。
- en: Loop through all the stars using `forEach()` to check if the index value of
    the star element is less than the star value; if it is, apply a `class` of `orange`.
    Otherwise, remove the `class` of `orange` from the `classList` element.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `forEach()` 遍历所有星星，检查星星元素的索引值是否小于星星值；如果是，则应用 `class` 为 `orange`。否则，从 `classList`
    元素中移除 `class` 为 `orange`。
- en: Mouse position tracker
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 鼠标位置跟踪器
- en: Track your mouse's `x` and `y` position within an element. As you move the mouse
    within the element, the `x` position and `y` position values will update.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪鼠标在元素内的 `x` 和 `y` 位置。当鼠标在元素内移动时，`x` 位置和 `y` 位置值将更新。
- en: Create a page element and add sizing to it, including `height` and `width`.
    Create a class style named `active` that has a `background-color` property of
    `red`. Finally, create an output element that will contain your text.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个页面元素并向其添加尺寸，包括 `height` 和 `width`。创建一个名为 `active` 的类样式，其 `background-color`
    属性为 `red`。最后，创建一个包含文本的输出元素。
- en: Select the main container element and add event listeners to it. Listen for
    `mouseover`, `mouseout`, and `mousemove`.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择主要的容器元素并向其添加事件监听器。监听 `mouseover`、`mouseout` 和 `mousemove` 事件。
- en: On `mouseover`, add the `active` class, and on `mouseout`, remove the `active`
    class.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `mouseover` 时添加 `active` 类，在 `mouseout` 时移除 `active` 类。
- en: On `mousemove`, call a function that tracks the event element `clientX` and
    `clientY` positions, embeds them in a human-readable sentence, and outputs it
    into the output element.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `mousemove` 时调用一个函数，该函数跟踪事件元素的 `clientX` 和 `clientY` 位置，将它们嵌入到可读句子中，并将输出输出到输出元素。
- en: Box clicker speed test game
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 盒子点击速度测试游戏
- en: The objective here is to click on the red box as quickly as possible once it
    appears. The box will be randomly placed within a container and positioned with
    random values. The box will have an event listener that will track the start and
    click times to calculate the duration of the click events. You can use the following
    template, as the HTML gets a little complex here—just add the `<script>` element
    to make the HTML interactive!
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的目标是尽可能快地点击出现的红色框。该框将在容器内随机放置，并使用随机值定位。该框将有一个事件监听器，用于跟踪开始和点击时间，以计算点击事件的持续时间。您可以使用以下模板，因为这里的HTML有点复杂——只需添加
    `<script>` 元素使HTML具有交互性！
- en: '[PRE40]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Work with the above HTML code using JavaScript.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JavaScript处理上述HTML代码。
- en: There are two `div` elements, one with a class of `output` for the gameplay
    area and another with a class of `message` to provide instructions to the player.
    Select those main elements as objects using JavaScript.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有两个 `div` 元素，一个具有 `output` 类用于游戏区域，另一个具有 `message` 类用于向玩家提供说明。使用JavaScript选择这些主要元素作为对象。
- en: Using JavaScript, create another element within the `output` element, and create
    a `div` that will be the main clickable object. Attach a style called `box` to
    the new element and append it to the `output` element.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用JavaScript，在 `output` 元素内创建另一个元素，并创建一个 `div` 作为主要可点击对象。将名为 `box` 的样式附加到新元素，并将其附加到
    `output` 元素。
- en: 'Using JavaScript, add to the message area instructions for the user: `Press
    to Start`. They will need to click the newly created `div` with a class of `box`
    to start the game.'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用JavaScript向信息区域添加用户说明：`按开始`。他们需要点击新创建的具有 `box` 类的 `div` 以开始游戏。
- en: Create a global object called `game` to track the timer and the start time values.
    This is to be used to calculate the duration in seconds between when the element
    is shown and when the player clicks it. Set `start` to `null`.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `game` 的全局对象来跟踪计时器和起始时间值。这将用于计算元素显示和玩家点击之间的持续时间（以秒为单位）。将 `start` 设置为
    `null`。
- en: Create a function that will generate a random number and return a random value,
    with the argument being the maximum value you want to use.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数，该函数将生成一个随机数并返回一个随机值，参数是要使用的最大值。
- en: Add an event listener to the `box` element. Once clicked, this should start
    the gameplay. Set the display of the `box` element to `none`. Using the `setTimeout()`
    method, invoke a function called `addBox()` and set the timeout to a random millisecond
    value. You can adjust as needed; this will be the time between the click object
    box being shown and it disappearing. If the start value is `null`, then add text
    content to the message area of loading.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `box` 元素添加事件监听器。一旦点击，这应该开始游戏。将 `box` 元素的显示设置为 `none`。使用 `setTimeout()` 方法调用名为
    `addBox()` 的函数，并将超时设置为随机毫秒值。根据需要调整；这将是在点击对象框显示和消失之间的时间。如果起始值是 `null`，则向加载信息区域添加文本内容。
- en: If start has a value, then get the Unix time value using `getTime()` of the
    current `date` object, subtract the game start time from the current time value
    in milliseconds, and then divide by 1,000 to get the value in seconds. Output
    the result to the `message` element for the player to see their score.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果起始值存在，则使用当前 `date` 对象的 `getTime()` 获取Unix时间值，从当前时间值中减去游戏开始时间，然后除以1,000以获得秒值。将结果输出到
    `message` 元素，以便玩家可以看到他们的分数。
- en: Create a function to handle the clicks, adding the box once the timer is up.
    Update the message text content to say `Click it….` Set the game `start` value
    to the current time in milliseconds. Apply the style of `block` to the element
    so it shows on the page.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个函数来处理点击事件，当计时器结束时添加盒子。更新消息的文本内容为`点击它……`。将游戏的`start`值设置为当前时间的毫秒数。将`block`样式应用于元素，使其在页面上显示。
- en: From the available space (500 total container width minus the 50 box width)
    set a random position above and to the left of the element using the `Math.random()`.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从可用空间（500个总容器宽度减去50个盒子宽度）设置一个随机位置，在元素的上方和左侧使用`Math.random()`。
- en: Play the game and update the styling as needed.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 玩游戏并根据需要更新样式。
- en: Self-check quiz
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自我检查测验
- en: Where can you find `window.innerHeight` and `window.innerWidth`?
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你在哪里可以找到`window.innerHeight`和`window.innerWidth`？
- en: What does `preventDefault()` do?
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`preventDefault()`的作用是什么？'
- en: Summary
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have dealt with quite a few topics to increase the interactivity
    of web pages. We saw the different ways to specify events and then we dived into
    some different event handlers in more detail. The onload event handler gets fired
    when the element it was specified on, often the `document` object, is fully loaded.
    This is great to wrap other functionality in, because it avoids selecting DOM
    content that is not there yet.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们处理了相当多的主题，以增加网页的交互性。我们看到了指定事件的不同方式，然后更详细地探讨了不同的事件处理器。当指定的元素（通常是`document`对象）完全加载时，会触发`onload`事件处理器。这非常适合包裹其他功能，因为它避免了选择尚未存在的DOM内容。
- en: We also saw the mouse event handlers, for responding to all the different things
    that can be done with a mouse on a web page. The use of all these event handlers
    is very similar, but they each enable a different type of interaction with the
    user. We also saw that we can access the element that fired an event by calling
    `event.target`. This property holds the element that fired an event.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还看到了鼠标事件处理器，用于响应在网页上可以使用鼠标做的所有不同的事情。所有这些事件处理器的使用非常相似，但它们各自启用与用户的不同类型的交互。我们还看到，我们可以通过调用`event.target`来访问触发事件的元素。这个属性持有触发事件的元素。
- en: We also dived into `onchange`, `onblur`, and the key event handlers in more
    detail. After that, we saw how to trigger interaction when forms are submitted.
    We looked at the HTML `action` attribute, which redirects the handling of submission,
    and the onsubmit event, which deals with form submission. We then saw some things
    that we can do with all these events, such as specifying a drag and drop on a
    page and animating elements.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还更详细地探讨了`onchange`、`onblur`和键事件处理器。之后，我们看到了如何在表单提交时触发交互。我们研究了HTML的`action`属性，它重定向提交的处理，以及`onsubmit`事件，它处理表单提交。然后我们看到了我们可以使用所有这些事件做一些事情，例如在页面上指定拖放和动画元素。
- en: In the next chapter, we will move on to some more advanced topics that will
    take your existing JavaScript skills to the next level!
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续探讨一些更高级的主题，这将把你的现有JavaScript技能提升到新的水平！
