- en: Chapter 6. User Authentication and Push Notification Using Ionic Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following tasks related to authenticating
    users and registering and receiving push notification messages:'
  prefs: []
  type: TYPE_NORMAL
- en: Registering and authenticating users using Ionic Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an iOS app to receive push notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an Android app to receive push notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tracking and engaging users are key features necessary for your app to grow.
    That means you should be able to register and authenticate users. Once the users
    start using the app, you also need to segment the users so that you can customize
    their interactions. Then, you can send push notifications to encourage users to
    revisit the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three components that you need to use for your project, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ionic Cloud**: This is a cloud service that helps save user information and
    coordinate push notifications between you, Apple, or Google and the end users''
    devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ionic Cloud Angular module**: This is just an Angular module to import to
    your local project. It provides some simple utilities for your code to interface
    with Ionic Cloud. Otherwise, directly calling Ionic Cloud API would be very complex.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cordova Push Notification and InAppBrowser**: Since your code is in JavaScript,
    you need to communicate with the device''s native features, such as push notification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering and authenticating users using Ionic Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ionic Cloud can provide all of the user management and authentication capabilities
    out of the box. The following providers are supported by Ionic Cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: E-mail/password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instagram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LinkedIn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the app, you may not need to use all of these authentication methods.
    For example, it would make more sense to use a LinkedIn authentication for an
    app focusing on a working professional to narrow down the audiences who fit the
    user profile of the app. If you have your own authentication server where you
    maintain your own user database, you can still use the custom authentication of
    Ionic Cloud to create a custom token.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will try to simplify the authentication concept as much as possible.
    You will learn how to do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Register a new user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log in and logging out a user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change user profile data using custom fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Observe the following screenshot of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering and authenticating users using Ionic Cloud](img/image00269.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can run this app via a browser. There is no need to test user authentication
    using a physical device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Observe the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `MySimpleAuth` app using the `blank` template, as shown, and go
    to the `MySimpleAuth` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install Ionic Cloud Angular using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize your Ionic Cloud setting so that an app ID can be created in your
    account, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will be prompted to log in to your Ionic Cloud account for this command
    line. The initialization process will save the `app_id` and `api_key` values to
    your project's `ionic.io.bundle.min.js`. This means you cannot change the project
    in your Ionic Cloud account after this (or you will have to manually remove the
    IDs and reinitialize). Your app ID is also recorded in the `ionic.config.json`
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Log in to your Ionic Cloud at [https://apps.ionic.io](https://apps.ionic.io).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the new app that you initialized and copy the app ID (that is, `7588ce26`),
    as shown in the following screenshot:![How to do it...](img/image00270.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open and edit `./src/app/app.module.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to ensure that the `app_id` has the correct value in your case.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit and replace ./src/pages/home/home.html with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: These are just your basic `login` and `logout` templates. It's all in a single
    page to keep things simple.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open and edit `./src/pages/home/home.ts` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding code provides four methods to register, save data, log in, and
    log out a user.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, add a minor `input` field alignment in `./src/pages/home/home.scss`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to your Terminal and run the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a nutshell, Ionic Cloud acts as a backend server for your app. It allows
    you to create a new user record in its database. Through the `user` class, you
    can interact with the Ionic Cloud authentication system. The first step is to
    register the user. This takes an **Email** and **Password** as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00271.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on **Register**, the following code will be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `details` object has the e-mail and password from the form. Once it has
    successfully completed, it will automatically log in the user via `this.auth.login`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that this piece of code here is just to show the loading screen to prevent
    the user from clicking on the Register button multiple times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This example app only has **Name** and **Birthday** as custom user data, as
    illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00272.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To save the **User Profile**, you call the `save()` method as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you look into the console log, the user token and custom data are also available,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00273.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can also view the **UserData** in the Ionic Cloud portal. Log in to your
    account and navigate to your app's **Auth** menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **VIEW** button of the user you created, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00274.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the **CUSTOM DATA** tab and you can see the same information stored
    for the user, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00275.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: For more information about user authentication, you may want to refer the official
    Ionic documentation at [http://docs.ionic.io/services/users/](http://docs.ionic.io/services/users/).
  prefs: []
  type: TYPE_NORMAL
- en: Building an iOS app to receive push notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Push notification is an important feature to engage users frequently, especially
    when the users are not using the app. Many people download an app but only open
    it a few times. If you send them a push notification message, it will encourage
    them to open the app to get involved in a new activity. Implementing push notifications
    is very complex if you have to build everything from scratch. However, Ionic makes
    it very simple by leveraging the Cordova Push Notification plugin and Ionic Cloud
    as the providers. A push notification provider is a server that can communicate
    with the **Apple Push Notification service** (**APNs**) or Google's **Firebase
    Cloud Messaging** (**FCM**). You can set up your own provider server using existing
    open sources, but you have to maintain this server separately and keep up with
    potential changes from the APN APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up Ionic Cloud for iOS Push Notification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure iOS app, certificates (App and Push), and provisioning profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write code to receive push notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the app after receiving a couple of notification
    messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building an iOS app to receive push notifications](img/image00276.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's required to have a physical iOS device available in order to test for notification
    messages.
  prefs: []
  type: TYPE_NORMAL
- en: You must also register for the **Apple Developer Program** (**ADP**) in order
    to access [https://developer.apple.com](https://developer.apple.com) and [https://itunesconnect.apple.com](https://itunesconnect.apple.com)
    because these websites will require an approved account.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, the following instructions use the specific version of these components:'
  prefs: []
  type: TYPE_NORMAL
- en: Mac OSX El Capitan 10.11.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode 7.3.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic CLI 2.1.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cordova 6.4.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node 6.8.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NPM 3.10.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Observe the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `MyiOSPush` app using the `blank` template, as shown, and go to
    the `MyiOSPush` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the Ionic `cloud-angular` client, which is a library to interact with
    the `push` object, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to have Node version 4.x or later and NPM version 3.x or later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Initialize your Ionic Cloud setting, as illustrated, so that an app ID can
    be created in your account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will be prompted to log in to your Ionic Cloud account for this command
    line. The initialization process will save the `app_id` and `api_key` values to
    your project's `ionic.io.bundle.min.js`. This means you cannot change the project
    in your Ionic Cloud account after this (or you will have to manually remove the
    IDs and reinitialize). Your app ID is also recorded in the `ionic.config.json`
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You need to install the Cordova Push Notification plugin and provide some value
    as `SENDER_ID`. Since you are only using iOS Push Notification, you can just provide
    a fake value, temporarily, here, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open your `./ionic.config.json` file in the project folder and copy the `app_id`
    value. In this case, the value is `00f293c4` from the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open and edit `./src/app/app.module.ts` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You must replace `''app_id'': ''00f293c4''` with your own app ID.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Visit the Apple Developer website at [https://developer.apple.com](https://developer.apple.com)
    and log in with your credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Certificates, Identifiers & Profiles**, as illustrated in the following
    screenshot:![How to do it...](img/image00277.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the correct device platform you are targeting. In this case, it will
    be **iOS, tvOS, watchOS** as shown in the following screenshot:![How to do it...](img/image00278.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Identifiers** > **App IDs** to create an app ID, as illustrated
    in the following screenshot:![How to do it...](img/image00279.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus(**+**) button in the top right corner of the screen, as shown
    in the following screenshot:![How to do it...](img/image00280.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the form to register your **App ID**. The **Name** field could be anything
    and it's not the same Ionic Cloud's app ID. You can provide the name of your project
    (that is, `MyiOSPush`) to keep things simple, as shown:![How to do it...](img/image00281.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The important part that you need to do correctly here is the **Bundle ID** because
    it must match your bundle identifier in the `./config.xml` file or Xcode, as illustrated:![How
    to do it...](img/image00282.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To enable push notifications, you need to check the **Push Notification** service
    on the following page:![How to do it...](img/image00283.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Register**, as shown:![How to do it...](img/image00284.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Done** to complete the step to create **App ID**, as follows:![How
    to do it...](img/image00285.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To start with certificate creation, you will need to generate a certificate
    signing request file locally on your Mac OSX using **Keychain Access**. Navigate
    to the **Keychain Access** top left menu and navigate to **Certificate Assistant**
    > **Request a Certificate From a Certificate Authority…**, as illustrated:![How
    to do it...](img/image00286.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your **User Email Address** and **Common Name**. Leave the **CA Email
    Address** field blank and check **Saved to disk**, as shown:![How to do it...](img/image00287.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your `CertificateSigningRequest.certSigningRequest` file, as follows:![How
    to do it...](img/image00288.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Apple Developer website and navigate to **Certificates** > **All**,
    as shown:![How to do it...](img/image00289.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus button in the top right corner to start creating a certificate,
    as follows:![How to do it...](img/image00290.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You just have to go through the steps on the website to fill out the necessary
    information. In this example, you will select the **Development** version instead
    of **Production**, as illustrated:![How to do it...](img/image00291.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Continue** button, as follows, to proceed:![How to do it...](img/image00292.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Choose File…** button, as shown in the following screenshot,
    to upload your signing request file that you saved earlier:![How to do it...](img/image00293.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Continue** button, as illustrated, to proceed:![How to do it...](img/image00294.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Download** button to download your iOS Development certificate
    file:![How to do it...](img/image00295.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `.cer` file you downloaded, as shown, so that it can be imported
    to **Keychain Access**:![How to do it...](img/image00296.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate your certificate in **Keychain Access** because you need to export this
    to the `.p12` file format. Ionic Cloud will need this file later in order to generate
    a push token and send push notifications to the app. Observe the following screenshot:![How
    to do it...](img/image00297.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right click and select **Export** from the drop-down menu:![How to do it...](img/image00298.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your `Certificates.p12` file, as illustrated, so that you can import it
    to Ionic Cloud later:![How to do it...](img/image00299.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As illustrated in the following screenshot, provide a password to protect this
    file:![How to do it...](img/image00300.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You must provide a password in this step although it's optional in **Keychain
    Access**. The reason is that Ionic Cloud cannot import a `.p12` file without a
    password.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you need to push the app to a specific device, you must register the device.
    Go to **Devices** > **All**:![How to do it...](img/image00301.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus button:![How to do it...](img/image00302.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the device **UDID** and save to register the device. Observe the following
    screenshot:![How to do it...](img/image00303.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll need a provisioning profile. Navigate to **Provisioning Profiles** >
    **All**:![How to do it...](img/image00304.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus button:![How to do it...](img/image00305.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **iOS App Development** as your provisioning profile since this example
    is for the development version only:![How to do it...](img/image00306.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Continue** button:![How to do it...](img/image00307.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the correct **App ID** in the drop-down menu and save to finalize your
    provisioning profile creation:![How to do it...](img/image00308.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Continue** button:![How to do it...](img/image00309.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the iOS Development certificate you created earlier, as shown in the
    following screenshot:![How to do it...](img/image00310.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As illustrated, select at least one device that you want to be able to install
    the app for testing:![How to do it...](img/image00311.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a **Profile Name** to your provisioning profile, as shown:![How to do
    it...](img/image00312.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Download** button to download the provisioning profile file (that
    is, `MyiOSPush_Provisioning_Profile.mobileprovision`):![How to do it...](img/image00313.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `MyiOSPush_Provisioning_Profile.mobileprovision`, which you just downloaded,
    in order to import it into Xcode:![How to do it...](img/image00314.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This step is very important because if you don't import it into Xcode, your
    app cannot be built successfully. If your app failed to build because of an invalid
    provisioning profile, it's best to check the provisioning profile status in the
    Developer console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To enable the **Push Notification** feature, you must request a **Push Certificate**,
    which is different from the app certificate. Select the **App ID** that you created
    earlier (that is, `MyiOSPush`):![How to do it...](img/image00315.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit** button at the bottom of the page:![How to do it...](img/image00316.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Push Notifications** must show the **Configurable** state. Otherwise,
    your app is not available for **Push Notifications**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Create Certificates...** button under the **Push Notifications**
    > **Development SSL Certificate** section:![How to do it...](img/image00317.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be taken to a new page to create your CSR file. Click on the **Continue**
    button:![How to do it...](img/image00318.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Choose File...** button:![How to do it...](img/image00319.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the `CertificateSigningRequest.certSigningRequest` file that you created
    earlier:![How to do it...](img/image00320.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You must upload the same, `.certSigningRequest` file as you did for the app
    certificate. Otherwise, your app will not receive push notifications and it's
    very hard to debug.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Continue** button:![How to do it...](img/image00321.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Download** button to download the certificate file. You can name
    it `aps_certificate.cer` to avoid overwriting to the earlier `.cer` file:![How
    to do it...](img/image00322.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your `.cer` file is downloaded, you need to click on it to import it to
    **Keychain Access**:![How to do it...](img/image00323.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the new push services certificate in **Keychain Access** and select it,
    as illustrated in the following screenshot:![How to do it...](img/image00324.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right click on the certificate and select **Export**:![How to do it...](img/image00325.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give it a new name to avoid overwriting it to the app certificate. This process
    is, basically, converting a `.cer` to `.p12` file for Ionic Cloud:![How to do
    it...](img/image00326.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a password for this `.p12` file to protect it:![How to do it...](img/image00327.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Password for the `.p12` file is required because Ionic Cloud will not import
    a `.p12` file for APN without password.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you have completed the setup on the Apple Developer website, you need to
    upload the provisioning profile and two certificates (app and push) to Ionic Cloud.
    Navigate to [https://apps.ionic.io](https://apps.ionic.io) and log in with your
    credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the app generated for this project (that is, `MyiOSPush`):![How to do
    it...](img/image00328.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Settings** > **Certificates**:![How to do it...](img/image00329.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **New Security Profile**:![How to do it...](img/image00330.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a **Profile Name** and click on the **Create** button to save the profile:![How
    to do it...](img/image00331.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **EDIT** next to the `MyPushProfile` that you just created to edit the
    settings:![How to do it...](img/image00332.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will need to upload three files: a provisioning profile, and app development
    certificate for the app itself, and an APN certificate for push notification.
    Let''s start with the app requirements. Click on **Choose File** under **Build
    Credentials** and upload two files: `Certificates.p12` (from Step 30) and `MyiOSPush_Provisioning_Profile.mobileprovision`
    (from Step 44). Ensure that you provide the same password that you used to protect
    the `.p12` file earlier:![How to do it...](img/image00333.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Choose File** under **Push Notification Service** and upload the
    `push_Certificates.p12` file (from Step 58). Ensure that you provide the same
    password that protects this file:![How to do it...](img/image00334.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You should not get confused between the two `.p12` files as one is for your
    app and one is for your push notification feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Save** button to save your security profile. This completes your
    Ionic Cloud setup for push notification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to modify your home page code in order to receive notification messages.
    Open and edit `./src/pages/home/home.html` and paste the given code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the content of the `home.ts` file, in the same folder, with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace `home.scss`, also in the `/home` folder, with the given code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Connect your physical iPhone to the Mac via a USB connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that you are in the app folder and build for the iOS platform, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You may need to include the `--device` parameter at the end due to an existing
    bug with Ionic 2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The OS will prompt to allow codesign to sign using the iOS Developer certificate.
    You must accept this to allow access in order to build the app and upload it to
    your device:![How to do it...](img/image00335.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the app has been running successfully on the device. The initial
    screen should look as illustrated:![How to do it...](img/image00336.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, you have completed the push notification setup and coding. The
    next step is to verify that you receive notifications via the app. Here are the
    instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Register Push** button in the mobile app to register for push
    notification to the Ionic Cloud provider server to acquire a token. Click on **OK**
    to accept permission to receive push notifications, as follows:![How to do it...](img/image00337.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Ionic Cloud** > your app (**MyiOSPush**) > **Push**:![How to do
    it...](img/image00338.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **CREATE YOUR FIRST PUSH** button:![How to do it...](img/image00339.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the push notification form to create your first push message:![How to
    do it...](img/image00340.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify on the right screen to ensure that the push message is displayed as desired:![How
    to do it...](img/image00341.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the segment as **All users** so that anyone can get the push:![How to
    do it...](img/image00342.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the security profile (that is, `mypushprofile`) that you created earlier.
    Then, click on the **Send this Push** button:![How to do it...](img/image00343.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the push notification has been sent successfully from Ionic Cloud.
    It should have the **Sent** status, as shown:![How to do it...](img/image00344.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the app on your mobile device, verify that the push message has appeared
    as illustrated:![How to do it...](img/image00345.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have successfully completed the verification steps.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand how the entire process works, let''s summarize what you have
    done, as shown in the following section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Created an Ionic project and initialized it to create an Ionic Cloud project:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your Ionic project on the local computer must sync with the Ionic Cloud project
    for push notifications and other management, such as user authentication
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set up your Apple Developer account by doing the following things:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created an app ID
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Created app certificate (after creating a signing request locally via **Keychain
    Access**)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Created a provisioning profile
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Created a push certificate
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set up your Ionic Cloud account:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created a security profile.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Imported three files from Apple Developer: an app certificate, a provisioning
    profile, and a push certificate. These files are needed so that Ionic Cloud can
    be a trusted provider to communicate with Apple''s APN server to trigger push
    notifications.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wrote code in your app to receive notifications:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to install the Ionic Cloud Angular library and the Cordova Push Notification
    plugin. The basic idea is to make the `push` object available for the app to use.
    This `push` object has been configured with your Ionic Cloud push provider.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's focus on the coding portion itself to understand how this works.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to change how the app bootstraps in `app.module.ts`. This requires
    the importing of the `provideCloud` and `CloudSettings` providers, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides setting the `app_id` to match with your project `app_id` in Ionic Cloud,
    you need to specify the `push` object with the parameters you want for both iOS
    and Android, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, inside `NgModule`, you need to insert the following line so that Ionic
    knows that it needs to initialize Ionic Cloud as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In your `home.html` template, there is a button to trigger the registration
    of push notification by calling `registerpush()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This registration process must be intervened manually by the user because the
    user will have to accept permission in the next step. It's not recommended to
    require the users to accept a push notification request when they open the app
    right away. The main reason is because they are not familiar with your app and
    don't know what to expect (that is, whether they will get bombarded with notifications
    later on).
  prefs: []
  type: TYPE_NORMAL
- en: 'The messages will be displayed via the `messages` object, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Here, each `message` item has the `title` and `text` fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `home.ts`, there are two critical imports that you must be aware of: `Push`
    and `PushToken` are required to register and receive push notifications. `ApplicationRef`
    will be discussed later as you need to trigger re-render the Angular template
    manually, as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'All you need to call is the `this.push.register()` function. This will return
    a `PushToken` object as you can see in the following screenshot of the console
    log:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00346.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To receive notifications, you need to subscribe by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This will call `processPush()` each time there is a new notification message,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user receives a push message, this function will append to the `messages`
    array. If you don''t call `this.applicationRef.tick()`, the UI will not get updated
    since this process is outside Angular cycle. If you look into the console log,
    the `PushMessage` looks as follows, with the `text` and `title` fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00347.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If the user doesn't open the app, you will see that the notification appears
    in the notification area.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ionic has its own iOS setup instructions pages, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.ionic.io/setup.html](http://docs.ionic.io/setup.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://docs.ionic.io/services/profiles/#ios-setup](http://docs.ionic.io/services/profiles/#ios-setup)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://docs.ionic.io/services/push/](http://docs.ionic.io/services/push/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Cordova Push Notification plugin is available directly at [https://github.com/phonegap/phonegap-plugin-push](https://github.com/phonegap/phonegap-plugin-push).
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the Apple Push Notification service, you can visit
    the official documentation at [https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html](https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html).
  prefs: []
  type: TYPE_NORMAL
- en: Building an Android app to receive push notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Push notification works in the same way as iOS for Google. However, instead
    of using the Apple Notification Service, you will be working through the Firebase
    Cloud Messaging server, which is a new replacement for **Google Cloud Messaging**
    (**GCM**). However, Ionic Cloud abstracts this process so that you don't have
    to code using a different API. You will be using the same `push` object as for
    the iOS app.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about the differences between FCM and GCM, visit the FAQ
    at [https://firebase.google.com/support/faq](https://firebase.google.com/support/faq).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up Ionic Cloud for Android push notification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Firebase project for the push API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write code to receive push notifications in Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will be using the same code base as your iOS Push Notification example.
    The main difference is the process to set up in your Firebase and Ionic Cloud
    account.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can test the Android push notification using the Android emulator. So, there
    is no need to have a physical Android device available.
  prefs: []
  type: TYPE_NORMAL
- en: You must also register for Firebase in order to access [https://console.firebase.google.com](https://console.firebase.google.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, the following instructions use the specific version of these components:'
  prefs: []
  type: TYPE_NORMAL
- en: Mac OSX El Capitan 10.11.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic CLI 2.1.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cordova 6.4.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node 6.8.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NPM 3.10.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Studio 2.x, with at least Android 5.1 (Lollipop) installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observe the following
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00348.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Android SDK Tools, Build Tools, Platform Tools and Intel **Hardware Accelerated
    Execution Manager** (**HAXM**) ([https://software.intel.com/en-us/android/articles/installation-instructions-for-intel-hardware-accelerated-execution-manager-windows](https://software.intel.com/en-us/android/articles/installation-instructions-for-intel-hardware-accelerated-execution-manager-windows)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Observe the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00349.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: At least one **Android Virtual Device** (**AVD**) has been created (use the
    `$ android avd` command line to open AVD Manager). Observe the following screenshot:![Getting
    ready](img/image00350.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `MyAndroidPush` app using the `blank` template, as follows, and
    go to the `MyAndroidPush` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the Ionic Cloud Angular client, which is a library, to interact with
    the `push` object, as illustrated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to have Node version 4.x or later and NPM version 3.x or later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Initialize your Ionic Cloud setting so that an app ID can be created in your
    account, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will be prompted to log in to your Ionic Cloud account for this command
    line.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will need a Firebase project number and a Firebase server ID in order to
    set up your `app.ts` file correctly. First, let's log in to the Firebase console
    at [https://console.firebase.google.com](https://console.firebase.google.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **CREATE NEW PROJECT** button and fill in a project name (that
    is, `MyAndroidPush`):![How to do it...](img/image00351.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Grow** > **Notifications** in the left navigation menu:![How to
    do it...](img/image00352.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Android icon:![How to do it...](img/image00353.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The Firebase Cloud Messaging service also supports the iOS app. So, it's possible
    that you can use FCM for both the iOS and Android projects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Provide **Package name** in the form. You can copy and paste the **Package name**
    from your app project at `./config.xml`:![How to do it...](img/image00354.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **CONTINUE** and save the JSON file somewhere. You will not need this
    JSON file for Ionic project:![How to do it...](img/image00355.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **FINISH** button to complete setting up the notification service:![How
    to do it...](img/image00356.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you will need the **Server key** and **Sender ID**. Navigate to the gear
    icon in the top left corner and select the **Project settings** menu item:![How
    to do it...](img/image00357.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **CLOUD MESSAGING** tab:![How to do it...](img/image00358.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy both the **Server key** and **Sender ID** (the same as **Project ID** if
    using Google Cloud Messaging):![How to do it...](img/image00359.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate back to the Terminal and ensure that you are in the Ionic project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to install the Cordova Push Notification plugin and provide the same
    **Sender ID** value as the `SENDER_ID` value in the command line previously, as
    shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open your `./ionic.config.json` file in the project folder and copy the `app_id`
    value (in this case, the value is `e546b9f6`) from the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open and edit `./src/app/app.module.ts` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You must replace `''app_id'': ''00f293c4''` with your own app ID. Also, you
    have to provide **Sender ID** here one more time.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The code for your home page is very similar to the iOS push example. Open and
    edit `./src/pages/home/home.html`, and paste the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the content of the `home.ts` file, in the same folder, with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace `home.scss`, also in the `/home` folder, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If this is the first time you create this app, you must have a `keystore` file.
    This file is used to identify your app for push and publishing. If you lose it,
    you cannot update your app later on. To create a `keystore`, type the following
    command line and ensure that it''s the same `keytool` version of the SDK (that
    is, check your `PATH` environment variable):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you fill out the information in the command line, make a copy of this
    file somewhere safe because you will need it later. Observe the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You must provide a password for this step. Otherwise, Ionic Cloud won't let
    you upload the `keystore` file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, log in to your Ionic Cloud at [https://apps.ionic.io](https://apps.ionic.io)
    to configure the security profile next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your project (that is, `MyAndroidPush`) and select the **Settings**
    menu:![How to do it...](img/image00360.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Certificates**, as follows:![How to do it...](img/image00361.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **New Security Profile** and provide a name (for example, `MyAndroidPush`):![How
    to do it...](img/image00362.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **EDIT**, as illustrated:![How to do it...](img/image00363.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload your `keystore` file (for example, `MyAndroidPushKe``y.keystore`,) alias
    name (for example, `MyAndroidPushKey`), and password from Step 22:![How to do
    it...](img/image00364.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste **Server key** from Step 13 into the **GCM API Key** input box:![How to
    do it...](img/image00365.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Save** to complete creating a security profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate back to the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that you are in the app folder and build for the Android platform, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The process to verify push notification for Android is very similar to iOS.
    Here are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Ionic Cloud** > your app (**MyAndroidPush**) > **Push**:![How
    to do it...](img/image00338.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **CREATE YOUR FIRST PUSH** button:![How to do it...](img/image00339.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the push notification form from the create your first push message:![How
    to do it...](img/image00366.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the segment as **All users** so that anyone can get the push:![How to
    do it...](img/image00342.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your security profile (that is, `MyAndroidPush`) that you created earlier.
    Then, click on the **Send this Push** button. Observe the following screenshot:![How
    to do it...](img/image00343.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the push notification has been sent successfully from Ionic Cloud.
    It should have the **Sent** status, as illustrated:![How to do it...](img/image00367.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the app on your simulator device, verify that the push message has appeared,
    as shown:![How to do it...](img/image00368.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have successfully completed the verification steps.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At a high level, this is the communication process behind the scene:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your device sends a registration request for push notification to Google''s
    Firebase server. Your device''s app must have the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase **Project ID**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase **Sender ID**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Google will reply with the registration ID (which is the same as the push token
    from the Ionic `push` object).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your app will send the registration ID to Ionic Cloud (or any push provider
    server). This process is behind the scene because Ionic Cloud Angular calls Ionic
    Cloud APIs to execute. However, your Ionic Cloud must have a security profile
    with four pieces of information, as listed in the following section:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase's Server key
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keystore
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keystore Alias
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keystore password
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic Cloud will save this registration ID to request Google to send push notification
    later. You can trigger notifications via the Ionic Cloud UI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is very similar to how Ionic Cloud works with Apple. Everything is simplified
    into your interactions with the `push` object from the Ionic Cloud Angular module.
  prefs: []
  type: TYPE_NORMAL
- en: 'To receive the console output, you can navigate to Google''s URL at [chrome://inspect/#devices](http://chrome://inspect/#devices).
    This will provide a list of the available simulators to debug. Click on the **inspect**
    link to open the Google Developer Tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00369.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You should be able to see the same screen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00370.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The app outputs a token (that is, a Registration ID) and each push notification
    will be a `PushMessage` object. You can open and inspect the properties.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, Android push notification works nicely because of the out-of-the-box
    integration between Ionic Cloud, Ionic Angular module, and Firebase Cloud Messaging.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ionic has its own Android setup instructions pages, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.ionic.io/setup.html](http://docs.ionic.io/setup.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://docs.ionic.io/services/profiles/#android-app-keystore](http://docs.ionic.io/services/profiles/#android-app-keystore)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://docs.ionic.io/services/push/](http://docs.ionic.io/services/push/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information about the Firebase Notification service, you can visit
    the official documentation at [https://firebase.google.com/docs/cloud-messaging/](https://firebase.google.com/docs/cloud-messaging/).
  prefs: []
  type: TYPE_NORMAL
