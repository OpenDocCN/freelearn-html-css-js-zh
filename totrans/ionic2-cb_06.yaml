- en: Chapter 6. User Authentication and Push Notification Using Ionic Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following tasks related to authenticating
    users and registering and receiving push notification messages:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Registering and authenticating users using Ionic Cloud
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an iOS app to receive push notifications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an Android app to receive push notifications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tracking and engaging users are key features necessary for your app to grow.
    That means you should be able to register and authenticate users. Once the users
    start using the app, you also need to segment the users so that you can customize
    their interactions. Then, you can send push notifications to encourage users to
    revisit the app.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three components that you need to use for your project, as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '**Ionic Cloud**: This is a cloud service that helps save user information and
    coordinate push notifications between you, Apple, or Google and the end users''
    devices.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ionic Cloud Angular module**: This is just an Angular module to import to
    your local project. It provides some simple utilities for your code to interface
    with Ionic Cloud. Otherwise, directly calling Ionic Cloud API would be very complex.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cordova Push Notification and InAppBrowser**: Since your code is in JavaScript,
    you need to communicate with the device''s native features, such as push notification.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering and authenticating users using Ionic Cloud
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ionic Cloud can provide all of the user management and authentication capabilities
    out of the box. The following providers are supported by Ionic Cloud:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: E-mail/password
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom authentication
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facebook
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twitter
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instagram
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LinkedIn
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the app, you may not need to use all of these authentication methods.
    For example, it would make more sense to use a LinkedIn authentication for an
    app focusing on a working professional to narrow down the audiences who fit the
    user profile of the app. If you have your own authentication server where you
    maintain your own user database, you can still use the custom authentication of
    Ionic Cloud to create a custom token.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will try to simplify the authentication concept as much as possible.
    You will learn how to do the following things:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Register a new user
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log in and logging out a user
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change user profile data using custom fields
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Observe the following screenshot of the app:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering and authenticating users using Ionic Cloud](img/image00269.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can run this app via a browser. There is no need to test user authentication
    using a physical device.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Observe the following instructions:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `MySimpleAuth` app using the `blank` template, as shown, and go
    to the `MySimpleAuth` folder:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install Ionic Cloud Angular using the following command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Initialize your Ionic Cloud setting so that an app ID can be created in your
    account, as follows:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will be prompted to log in to your Ionic Cloud account for this command
    line. The initialization process will save the `app_id` and `api_key` values to
    your project's `ionic.io.bundle.min.js`. This means you cannot change the project
    in your Ionic Cloud account after this (or you will have to manually remove the
    IDs and reinitialize). Your app ID is also recorded in the `ionic.config.json`
    file.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Log in to your Ionic Cloud at [https://apps.ionic.io](https://apps.ionic.io).
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the new app that you initialized and copy the app ID (that is, `7588ce26`),
    as shown in the following screenshot:![How to do it...](img/image00270.jpeg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open and edit `./src/app/app.module.ts` with the following code:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to ensure that the `app_id` has the correct value in your case.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit and replace ./src/pages/home/home.html with the following code:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: These are just your basic `login` and `logout` templates. It's all in a single
    page to keep things simple.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open and edit `./src/pages/home/home.ts` with the following code:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding code provides four methods to register, save data, log in, and
    log out a user.
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, add a minor `input` field alignment in `./src/pages/home/home.scss`,
    as follows:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Go to your Terminal and run the app:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a nutshell, Ionic Cloud acts as a backend server for your app. It allows
    you to create a new user record in its database. Through the `user` class, you
    can interact with the Ionic Cloud authentication system. The first step is to
    register the user. This takes an **Email** and **Password** as shown in the following
    screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00271.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: 'When you click on **Register**, the following code will be executed:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `details` object has the e-mail and password from the form. Once it has
    successfully completed, it will automatically log in the user via `this.auth.login`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that this piece of code here is just to show the loading screen to prevent
    the user from clicking on the Register button multiple times:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This example app only has **Name** and **Birthday** as custom user data, as
    illustrated in the following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00272.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: 'To save the **User Profile**, you call the `save()` method as shown in the
    following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you look into the console log, the user token and custom data are also available,
    as shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00273.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: You can also view the **UserData** in the Ionic Cloud portal. Log in to your
    account and navigate to your app's **Auth** menu.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **VIEW** button of the user you created, as shown in the following
    screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00274.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: 'Select the **CUSTOM DATA** tab and you can see the same information stored
    for the user, as illustrated in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00275.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: For more information about user authentication, you may want to refer the official
    Ionic documentation at [http://docs.ionic.io/services/users/](http://docs.ionic.io/services/users/).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Building an iOS app to receive push notifications
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Push notification is an important feature to engage users frequently, especially
    when the users are not using the app. Many people download an app but only open
    it a few times. If you send them a push notification message, it will encourage
    them to open the app to get involved in a new activity. Implementing push notifications
    is very complex if you have to build everything from scratch. However, Ionic makes
    it very simple by leveraging the Cordova Push Notification plugin and Ionic Cloud
    as the providers. A push notification provider is a server that can communicate
    with the **Apple Push Notification service** (**APNs**) or Google's **Firebase
    Cloud Messaging** (**FCM**). You can set up your own provider server using existing
    open sources, but you have to maintain this server separately and keep up with
    potential changes from the APN APIs.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to do the following things:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Set up Ionic Cloud for iOS Push Notification
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure iOS app, certificates (App and Push), and provisioning profile
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write code to receive push notifications
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the app after receiving a couple of notification
    messages:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![Building an iOS app to receive push notifications](img/image00276.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's required to have a physical iOS device available in order to test for notification
    messages.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: You must also register for the **Apple Developer Program** (**ADP**) in order
    to access [https://developer.apple.com](https://developer.apple.com) and [https://itunesconnect.apple.com](https://itunesconnect.apple.com)
    because these websites will require an approved account.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, the following instructions use the specific version of these components:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Mac OSX El Capitan 10.11.4
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xcode 7.3.1
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic CLI 2.1.8
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cordova 6.4.0
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node 6.8.1
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NPM 3.10.8
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Observe the following instructions:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `MyiOSPush` app using the `blank` template, as shown, and go to
    the `MyiOSPush` folder:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Install the Ionic `cloud-angular` client, which is a library to interact with
    the `push` object, as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to have Node version 4.x or later and NPM version 3.x or later.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Initialize your Ionic Cloud setting, as illustrated, so that an app ID can
    be created in your account:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will be prompted to log in to your Ionic Cloud account for this command
    line. The initialization process will save the `app_id` and `api_key` values to
    your project's `ionic.io.bundle.min.js`. This means you cannot change the project
    in your Ionic Cloud account after this (or you will have to manually remove the
    IDs and reinitialize). Your app ID is also recorded in the `ionic.config.json`
    file.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You need to install the Cordova Push Notification plugin and provide some value
    as `SENDER_ID`. Since you are only using iOS Push Notification, you can just provide
    a fake value, temporarily, here, as shown in the following code:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open your `./ionic.config.json` file in the project folder and copy the `app_id`
    value. In this case, the value is `00f293c4` from the following code:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Open and edit `./src/app/app.module.ts` with the following content:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You must replace `''app_id'': ''00f293c4''` with your own app ID.'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Visit the Apple Developer website at [https://developer.apple.com](https://developer.apple.com)
    and log in with your credentials.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Certificates, Identifiers & Profiles**, as illustrated in the following
    screenshot:![How to do it...](img/image00277.jpeg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the correct device platform you are targeting. In this case, it will
    be **iOS, tvOS, watchOS** as shown in the following screenshot:![How to do it...](img/image00278.jpeg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Identifiers** > **App IDs** to create an app ID, as illustrated
    in the following screenshot:![How to do it...](img/image00279.jpeg)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus(**+**) button in the top right corner of the screen, as shown
    in the following screenshot:![How to do it...](img/image00280.jpeg)
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the form to register your **App ID**. The **Name** field could be anything
    and it's not the same Ionic Cloud's app ID. You can provide the name of your project
    (that is, `MyiOSPush`) to keep things simple, as shown:![How to do it...](img/image00281.jpeg)
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The important part that you need to do correctly here is the **Bundle ID** because
    it must match your bundle identifier in the `./config.xml` file or Xcode, as illustrated:![How
    to do it...](img/image00282.jpeg)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To enable push notifications, you need to check the **Push Notification** service
    on the following page:![How to do it...](img/image00283.jpeg)
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Register**, as shown:![How to do it...](img/image00284.jpeg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Done** to complete the step to create **App ID**, as follows:![How
    to do it...](img/image00285.jpeg)
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To start with certificate creation, you will need to generate a certificate
    signing request file locally on your Mac OSX using **Keychain Access**. Navigate
    to the **Keychain Access** top left menu and navigate to **Certificate Assistant**
    > **Request a Certificate From a Certificate Authority…**, as illustrated:![How
    to do it...](img/image00286.jpeg)
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your **User Email Address** and **Common Name**. Leave the **CA Email
    Address** field blank and check **Saved to disk**, as shown:![How to do it...](img/image00287.jpeg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your `CertificateSigningRequest.certSigningRequest` file, as follows:![How
    to do it...](img/image00288.jpeg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Apple Developer website and navigate to **Certificates** > **All**,
    as shown:![How to do it...](img/image00289.jpeg)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus button in the top right corner to start creating a certificate,
    as follows:![How to do it...](img/image00290.jpeg)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You just have to go through the steps on the website to fill out the necessary
    information. In this example, you will select the **Development** version instead
    of **Production**, as illustrated:![How to do it...](img/image00291.jpeg)
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Continue** button, as follows, to proceed:![How to do it...](img/image00292.jpeg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Choose File…** button, as shown in the following screenshot,
    to upload your signing request file that you saved earlier:![How to do it...](img/image00293.jpeg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Continue** button, as illustrated, to proceed:![How to do it...](img/image00294.jpeg)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Download** button to download your iOS Development certificate
    file:![How to do it...](img/image00295.jpeg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `.cer` file you downloaded, as shown, so that it can be imported
    to **Keychain Access**:![How to do it...](img/image00296.jpeg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate your certificate in **Keychain Access** because you need to export this
    to the `.p12` file format. Ionic Cloud will need this file later in order to generate
    a push token and send push notifications to the app. Observe the following screenshot:![How
    to do it...](img/image00297.jpeg)
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right click and select **Export** from the drop-down menu:![How to do it...](img/image00298.jpeg)
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your `Certificates.p12` file, as illustrated, so that you can import it
    to Ionic Cloud later:![How to do it...](img/image00299.jpeg)
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As illustrated in the following screenshot, provide a password to protect this
    file:![How to do it...](img/image00300.jpeg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You must provide a password in this step although it's optional in **Keychain
    Access**. The reason is that Ionic Cloud cannot import a `.p12` file without a
    password.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you need to push the app to a specific device, you must register the device.
    Go to **Devices** > **All**:![How to do it...](img/image00301.jpeg)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus button:![How to do it...](img/image00302.jpeg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the device **UDID** and save to register the device. Observe the following
    screenshot:![How to do it...](img/image00303.jpeg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll need a provisioning profile. Navigate to **Provisioning Profiles** >
    **All**:![How to do it...](img/image00304.jpeg)
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus button:![How to do it...](img/image00305.jpeg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **iOS App Development** as your provisioning profile since this example
    is for the development version only:![How to do it...](img/image00306.jpeg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Continue** button:![How to do it...](img/image00307.jpeg)
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the correct **App ID** in the drop-down menu and save to finalize your
    provisioning profile creation:![How to do it...](img/image00308.jpeg)
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Continue** button:![How to do it...](img/image00309.jpeg)
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the iOS Development certificate you created earlier, as shown in the
    following screenshot:![How to do it...](img/image00310.jpeg)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As illustrated, select at least one device that you want to be able to install
    the app for testing:![How to do it...](img/image00311.jpeg)
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a **Profile Name** to your provisioning profile, as shown:![How to do
    it...](img/image00312.jpeg)
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Download** button to download the provisioning profile file (that
    is, `MyiOSPush_Provisioning_Profile.mobileprovision`):![How to do it...](img/image00313.jpeg)
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `MyiOSPush_Provisioning_Profile.mobileprovision`, which you just downloaded,
    in order to import it into Xcode:![How to do it...](img/image00314.jpeg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This step is very important because if you don't import it into Xcode, your
    app cannot be built successfully. If your app failed to build because of an invalid
    provisioning profile, it's best to check the provisioning profile status in the
    Developer console.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To enable the **Push Notification** feature, you must request a **Push Certificate**,
    which is different from the app certificate. Select the **App ID** that you created
    earlier (that is, `MyiOSPush`):![How to do it...](img/image00315.jpeg)
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit** button at the bottom of the page:![How to do it...](img/image00316.jpeg)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Push Notifications** must show the **Configurable** state. Otherwise,
    your app is not available for **Push Notifications**.
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Create Certificates...** button under the **Push Notifications**
    > **Development SSL Certificate** section:![How to do it...](img/image00317.jpeg)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be taken to a new page to create your CSR file. Click on the **Continue**
    button:![How to do it...](img/image00318.jpeg)
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Choose File...** button:![How to do it...](img/image00319.jpeg)
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the `CertificateSigningRequest.certSigningRequest` file that you created
    earlier:![How to do it...](img/image00320.jpeg)
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You must upload the same, `.certSigningRequest` file as you did for the app
    certificate. Otherwise, your app will not receive push notifications and it's
    very hard to debug.
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Continue** button:![How to do it...](img/image00321.jpeg)
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Download** button to download the certificate file. You can name
    it `aps_certificate.cer` to avoid overwriting to the earlier `.cer` file:![How
    to do it...](img/image00322.jpeg)
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once your `.cer` file is downloaded, you need to click on it to import it to
    **Keychain Access**:![How to do it...](img/image00323.jpeg)
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the new push services certificate in **Keychain Access** and select it,
    as illustrated in the following screenshot:![How to do it...](img/image00324.jpeg)
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right click on the certificate and select **Export**:![How to do it...](img/image00325.jpeg)
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give it a new name to avoid overwriting it to the app certificate. This process
    is, basically, converting a `.cer` to `.p12` file for Ionic Cloud:![How to do
    it...](img/image00326.jpeg)
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a password for this `.p12` file to protect it:![How to do it...](img/image00327.jpeg)
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Password for the `.p12` file is required because Ionic Cloud will not import
    a `.p12` file for APN without password.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you have completed the setup on the Apple Developer website, you need to
    upload the provisioning profile and two certificates (app and push) to Ionic Cloud.
    Navigate to [https://apps.ionic.io](https://apps.ionic.io) and log in with your
    credentials.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the app generated for this project (that is, `MyiOSPush`):![How to do
    it...](img/image00328.jpeg)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Settings** > **Certificates**:![How to do it...](img/image00329.jpeg)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **New Security Profile**:![How to do it...](img/image00330.jpeg)
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide a **Profile Name** and click on the **Create** button to save the profile:![How
    to do it...](img/image00331.jpeg)
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **EDIT** next to the `MyPushProfile` that you just created to edit the
    settings:![How to do it...](img/image00332.jpeg)
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will need to upload three files: a provisioning profile, and app development
    certificate for the app itself, and an APN certificate for push notification.
    Let''s start with the app requirements. Click on **Choose File** under **Build
    Credentials** and upload two files: `Certificates.p12` (from Step 30) and `MyiOSPush_Provisioning_Profile.mobileprovision`
    (from Step 44). Ensure that you provide the same password that you used to protect
    the `.p12` file earlier:![How to do it...](img/image00333.jpeg)'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Choose File** under **Push Notification Service** and upload the
    `push_Certificates.p12` file (from Step 58). Ensure that you provide the same
    password that protects this file:![How to do it...](img/image00334.jpeg)
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You should not get confused between the two `.p12` files as one is for your
    app and one is for your push notification feature.
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Save** button to save your security profile. This completes your
    Ionic Cloud setup for push notification.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to modify your home page code in order to receive notification messages.
    Open and edit `./src/pages/home/home.html` and paste the given code:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Replace the content of the `home.ts` file, in the same folder, with the following
    code:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Replace `home.scss`, also in the `/home` folder, with the given code:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Connect your physical iPhone to the Mac via a USB connection.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that you are in the app folder and build for the iOS platform, as follows:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You may need to include the `--device` parameter at the end due to an existing
    bug with Ionic 2.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The OS will prompt to allow codesign to sign using the iOS Developer certificate.
    You must accept this to allow access in order to build the app and upload it to
    your device:![How to do it...](img/image00335.jpeg)
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the app has been running successfully on the device. The initial
    screen should look as illustrated:![How to do it...](img/image00336.jpeg)
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, you have completed the push notification setup and coding. The
    next step is to verify that you receive notifications via the app. Here are the
    instructions:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Register Push** button in the mobile app to register for push
    notification to the Ionic Cloud provider server to acquire a token. Click on **OK**
    to accept permission to receive push notifications, as follows:![How to do it...](img/image00337.jpeg)
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Ionic Cloud** > your app (**MyiOSPush**) > **Push**:![How to do
    it...](img/image00338.jpeg)
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **CREATE YOUR FIRST PUSH** button:![How to do it...](img/image00339.jpeg)
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the push notification form to create your first push message:![How to
    do it...](img/image00340.jpeg)
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify on the right screen to ensure that the push message is displayed as desired:![How
    to do it...](img/image00341.jpeg)
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the segment as **All users** so that anyone can get the push:![How to
    do it...](img/image00342.jpeg)
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the security profile (that is, `mypushprofile`) that you created earlier.
    Then, click on the **Send this Push** button:![How to do it...](img/image00343.jpeg)
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the push notification has been sent successfully from Ionic Cloud.
    It should have the **Sent** status, as shown:![How to do it...](img/image00344.jpeg)
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the app on your mobile device, verify that the push message has appeared
    as illustrated:![How to do it...](img/image00345.jpeg)
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have successfully completed the verification steps.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand how the entire process works, let''s summarize what you have
    done, as shown in the following section:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'Created an Ionic project and initialized it to create an Ionic Cloud project:'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your Ionic project on the local computer must sync with the Ionic Cloud project
    for push notifications and other management, such as user authentication
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set up your Apple Developer account by doing the following things:'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created an app ID
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Created app certificate (after creating a signing request locally via **Keychain
    Access**)
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Created a provisioning profile
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Created a push certificate
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set up your Ionic Cloud account:'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created a security profile.
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Imported three files from Apple Developer: an app certificate, a provisioning
    profile, and a push certificate. These files are needed so that Ionic Cloud can
    be a trusted provider to communicate with Apple''s APN server to trigger push
    notifications.'
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wrote code in your app to receive notifications:'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to install the Ionic Cloud Angular library and the Cordova Push Notification
    plugin. The basic idea is to make the `push` object available for the app to use.
    This `push` object has been configured with your Ionic Cloud push provider.
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's focus on the coding portion itself to understand how this works.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to change how the app bootstraps in `app.module.ts`. This requires
    the importing of the `provideCloud` and `CloudSettings` providers, as shown:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Besides setting the `app_id` to match with your project `app_id` in Ionic Cloud,
    you need to specify the `push` object with the parameters you want for both iOS
    and Android, as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, inside `NgModule`, you need to insert the following line so that Ionic
    knows that it needs to initialize Ionic Cloud as well:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In your `home.html` template, there is a button to trigger the registration
    of push notification by calling `registerpush()`:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This registration process must be intervened manually by the user because the
    user will have to accept permission in the next step. It's not recommended to
    require the users to accept a push notification request when they open the app
    right away. The main reason is because they are not familiar with your app and
    don't know what to expect (that is, whether they will get bombarded with notifications
    later on).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'The messages will be displayed via the `messages` object, as shown in the following
    code:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, each `message` item has the `title` and `text` fields.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: 'In `home.ts`, there are two critical imports that you must be aware of: `Push`
    and `PushToken` are required to register and receive push notifications. `ApplicationRef`
    will be discussed later as you need to trigger re-render the Angular template
    manually, as illustrated:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'All you need to call is the `this.push.register()` function. This will return
    a `PushToken` object as you can see in the following screenshot of the console
    log:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00346.jpeg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
- en: 'To receive notifications, you need to subscribe by using the following code:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This will call `processPush()` each time there is a new notification message,
    as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'When the user receives a push message, this function will append to the `messages`
    array. If you don''t call `this.applicationRef.tick()`, the UI will not get updated
    since this process is outside Angular cycle. If you look into the console log,
    the `PushMessage` looks as follows, with the `text` and `title` fields:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/image00347.jpeg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
- en: If the user doesn't open the app, you will see that the notification appears
    in the notification area.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ionic has its own iOS setup instructions pages, as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.ionic.io/setup.html](http://docs.ionic.io/setup.html)'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://docs.ionic.io/services/profiles/#ios-setup](http://docs.ionic.io/services/profiles/#ios-setup)'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://docs.ionic.io/services/push/](http://docs.ionic.io/services/push/)'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Cordova Push Notification plugin is available directly at [https://github.com/phonegap/phonegap-plugin-push](https://github.com/phonegap/phonegap-plugin-push).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the Apple Push Notification service, you can visit
    the official documentation at [https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html](https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Building an Android app to receive push notifications
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Push notification works in the same way as iOS for Google. However, instead
    of using the Apple Notification Service, you will be working through the Firebase
    Cloud Messaging server, which is a new replacement for **Google Cloud Messaging**
    (**GCM**). However, Ionic Cloud abstracts this process so that you don't have
    to code using a different API. You will be using the same `push` object as for
    the iOS app.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about the differences between FCM and GCM, visit the FAQ
    at [https://firebase.google.com/support/faq](https://firebase.google.com/support/faq).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to do the following things:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Set up Ionic Cloud for Android push notification
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Firebase project for the push API
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write code to receive push notifications in Android
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will be using the same code base as your iOS Push Notification example.
    The main difference is the process to set up in your Firebase and Ionic Cloud
    account.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can test the Android push notification using the Android emulator. So, there
    is no need to have a physical Android device available.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: You must also register for Firebase in order to access [https://console.firebase.google.com](https://console.firebase.google.com).
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, the following instructions use the specific version of these components:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Mac OSX El Capitan 10.11.4
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic CLI 2.1.8
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cordova 6.4.0
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node 6.8.1
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NPM 3.10.8
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Studio 2.x, with at least Android 5.1 (Lollipop) installed.
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observe the following
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00348.jpeg)'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Android SDK Tools, Build Tools, Platform Tools and Intel **Hardware Accelerated
    Execution Manager** (**HAXM**) ([https://software.intel.com/en-us/android/articles/installation-instructions-for-intel-hardware-accelerated-execution-manager-windows](https://software.intel.com/en-us/android/articles/installation-instructions-for-intel-hardware-accelerated-execution-manager-windows)).
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Observe the following screenshot:'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Getting ready](img/image00349.jpeg)'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: At least one **Android Virtual Device** (**AVD**) has been created (use the
    `$ android avd` command line to open AVD Manager). Observe the following screenshot:![Getting
    ready](img/image00350.jpeg)
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the instructions:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `MyAndroidPush` app using the `blank` template, as follows, and
    go to the `MyAndroidPush` folder:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Install the Ionic Cloud Angular client, which is a library, to interact with
    the `push` object, as illustrated:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to have Node version 4.x or later and NPM version 3.x or later.
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Initialize your Ionic Cloud setting so that an app ID can be created in your
    account, as shown:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will be prompted to log in to your Ionic Cloud account for this command
    line.
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will need a Firebase project number and a Firebase server ID in order to
    set up your `app.ts` file correctly. First, let's log in to the Firebase console
    at [https://console.firebase.google.com](https://console.firebase.google.com).
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **CREATE NEW PROJECT** button and fill in a project name (that
    is, `MyAndroidPush`):![How to do it...](img/image00351.jpeg)
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Grow** > **Notifications** in the left navigation menu:![How to
    do it...](img/image00352.jpeg)
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Android icon:![How to do it...](img/image00353.jpeg)
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The Firebase Cloud Messaging service also supports the iOS app. So, it's possible
    that you can use FCM for both the iOS and Android projects.
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Provide **Package name** in the form. You can copy and paste the **Package name**
    from your app project at `./config.xml`:![How to do it...](img/image00354.jpeg)
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **CONTINUE** and save the JSON file somewhere. You will not need this
    JSON file for Ionic project:![How to do it...](img/image00355.jpeg)
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **FINISH** button to complete setting up the notification service:![How
    to do it...](img/image00356.jpeg)
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you will need the **Server key** and **Sender ID**. Navigate to the gear
    icon in the top left corner and select the **Project settings** menu item:![How
    to do it...](img/image00357.jpeg)
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **CLOUD MESSAGING** tab:![How to do it...](img/image00358.jpeg)
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy both the **Server key** and **Sender ID** (the same as **Project ID** if
    using Google Cloud Messaging):![How to do it...](img/image00359.jpeg)
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate back to the Terminal and ensure that you are in the Ionic project folder.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to install the Cordova Push Notification plugin and provide the same
    **Sender ID** value as the `SENDER_ID` value in the command line previously, as
    shown:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Open your `./ionic.config.json` file in the project folder and copy the `app_id`
    value (in this case, the value is `e546b9f6`) from the following code:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Open and edit `./src/app/app.module.ts` with the following content:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You must replace `''app_id'': ''00f293c4''` with your own app ID. Also, you
    have to provide **Sender ID** here one more time.'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The code for your home page is very similar to the iOS push example. Open and
    edit `./src/pages/home/home.html`, and paste the following code:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Replace the content of the `home.ts` file, in the same folder, with the following
    code:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Replace `home.scss`, also in the `/home` folder, with the following code:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If this is the first time you create this app, you must have a `keystore` file.
    This file is used to identify your app for push and publishing. If you lose it,
    you cannot update your app later on. To create a `keystore`, type the following
    command line and ensure that it''s the same `keytool` version of the SDK (that
    is, check your `PATH` environment variable):'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Once you fill out the information in the command line, make a copy of this
    file somewhere safe because you will need it later. Observe the following code:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Note
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You must provide a password for this step. Otherwise, Ionic Cloud won't let
    you upload the `keystore` file.
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, log in to your Ionic Cloud at [https://apps.ionic.io](https://apps.ionic.io)
    to configure the security profile next.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your project (that is, `MyAndroidPush`) and select the **Settings**
    menu:![How to do it...](img/image00360.jpeg)
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Certificates**, as follows:![How to do it...](img/image00361.jpeg)
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **New Security Profile** and provide a name (for example, `MyAndroidPush`):![How
    to do it...](img/image00362.jpeg)
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **EDIT**, as illustrated:![How to do it...](img/image00363.jpeg)
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload your `keystore` file (for example, `MyAndroidPushKe``y.keystore`,) alias
    name (for example, `MyAndroidPushKey`), and password from Step 22:![How to do
    it...](img/image00364.jpeg)
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste **Server key** from Step 13 into the **GCM API Key** input box:![How to
    do it...](img/image00365.jpeg)
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Save** to complete creating a security profile.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate back to the terminal.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that you are in the app folder and build for the Android platform, as
    follows:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The process to verify push notification for Android is very similar to iOS.
    Here are the instructions:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Ionic Cloud** > your app (**MyAndroidPush**) > **Push**:![How
    to do it...](img/image00338.jpeg)
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **CREATE YOUR FIRST PUSH** button:![How to do it...](img/image00339.jpeg)
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the push notification form from the create your first push message:![How
    to do it...](img/image00366.jpeg)
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the segment as **All users** so that anyone can get the push:![How to
    do it...](img/image00342.jpeg)
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your security profile (that is, `MyAndroidPush`) that you created earlier.
    Then, click on the **Send this Push** button. Observe the following screenshot:![How
    to do it...](img/image00343.jpeg)
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the push notification has been sent successfully from Ionic Cloud.
    It should have the **Sent** status, as illustrated:![How to do it...](img/image00367.jpeg)
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the app on your simulator device, verify that the push message has appeared,
    as shown:![How to do it...](img/image00368.jpeg)
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have successfully completed the verification steps.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At a high level, this is the communication process behind the scene:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: 'Your device sends a registration request for push notification to Google''s
    Firebase server. Your device''s app must have the following:'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase **Project ID**
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase **Sender ID**
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Google will reply with the registration ID (which is the same as the push token
    from the Ionic `push` object).
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your app will send the registration ID to Ionic Cloud (or any push provider
    server). This process is behind the scene because Ionic Cloud Angular calls Ionic
    Cloud APIs to execute. However, your Ionic Cloud must have a security profile
    with four pieces of information, as listed in the following section:'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase's Server key
  id: totrans-355
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keystore
  id: totrans-356
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keystore Alias
  id: totrans-357
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keystore password
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic Cloud will save this registration ID to request Google to send push notification
    later. You can trigger notifications via the Ionic Cloud UI.
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is very similar to how Ionic Cloud works with Apple. Everything is simplified
    into your interactions with the `push` object from the Ionic Cloud Angular module.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 这与Ionic Cloud与苹果的合作方式非常相似。所有内容都简化为与Ionic Cloud Angular模块中的`push`对象交互。
- en: 'To receive the console output, you can navigate to Google''s URL at [chrome://inspect/#devices](http://chrome://inspect/#devices).
    This will provide a list of the available simulators to debug. Click on the **inspect**
    link to open the Google Developer Tool:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 要接收控制台输出，您可以导航到谷歌的URL [chrome://inspect/#devices](http://chrome://inspect/#devices)。这将提供可用的模拟器列表以进行调试。点击**检查**链接以打开谷歌开发者工具：
- en: '![How it works...](img/image00369.jpeg)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image00369.jpeg)'
- en: 'You should be able to see the same screen as follows:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够看到以下相同的屏幕：
- en: '![How it works...](img/image00370.jpeg)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/image00370.jpeg)'
- en: The app outputs a token (that is, a Registration ID) and each push notification
    will be a `PushMessage` object. You can open and inspect the properties.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序输出一个令牌（即注册ID），每个推送通知都将是一个`PushMessage`对象。您可以打开并检查其属性。
- en: In summary, Android push notification works nicely because of the out-of-the-box
    integration between Ionic Cloud, Ionic Angular module, and Firebase Cloud Messaging.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Android推送通知之所以工作得很好，是因为Ionic Cloud、Ionic Angular模块和Firebase云消息传递之间的即插即用集成。
- en: There's more...
  id: totrans-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Ionic has its own Android setup instructions pages, as follows:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic有自己的Android设置说明页面，如下所示：
- en: '[http://docs.ionic.io/setup.html](http://docs.ionic.io/setup.html)'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.ionic.io/setup.html](http://docs.ionic.io/setup.html)'
- en: '[http://docs.ionic.io/services/profiles/#android-app-keystore](http://docs.ionic.io/services/profiles/#android-app-keystore)'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.ionic.io/services/profiles/#android-app-keystore](http://docs.ionic.io/services/profiles/#android-app-keystore)'
- en: '[http://docs.ionic.io/services/push/](http://docs.ionic.io/services/push/)'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.ionic.io/services/push/](http://docs.ionic.io/services/push/)'
- en: For more information about the Firebase Notification service, you can visit
    the official documentation at [https://firebase.google.com/docs/cloud-messaging/](https://firebase.google.com/docs/cloud-messaging/).
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Firebase通知服务的更多信息，您可以访问官方文档[https://firebase.google.com/docs/cloud-messaging/](https://firebase.google.com/docs/cloud-messaging/)。
