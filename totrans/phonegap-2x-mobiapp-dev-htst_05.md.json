["```js\nDOC.VoiceRecDocument = function(theFileEntry, completion, failure)\n{\n  var self = this;\n  self.fileEntry = theFileEntry;\n  self.fileName = self.fileEntry.fullPath;\n  self.fileType = PKUTIL.FILE.getFileExtensionPart(self.fileName);\n  self.completion = completion;\n  self.failure = failure;\n  self.state = \"\";\n```", "```js\n  self.title = PKUTIL.FILE.getFileNamePart(self.fileName);\n  self.media = null;\n  self.position = 0;\n  self.duration = 0;\n  self.playing = false;\n  self.recording = false;\n  self.paused = false;\n  self.positionTimer = -1;\n  self.durationTimer = -1;\n```", "```js\n      self.getFileName = function()\n      {\n        return self.fileName;\n      }\n\n      self.setFileName = function(theFileName)\n      {\n        self.theFileName = theFileName;\n        self.fileType = PKUTIL.FILE.getFileExtensionPart(self.fileName);\n        self.title = PKUTIL.FILE.getFileNamePart(self.fileName);\n      }\n    ```", "```js\n  self.initializeMediaObject = function()\n  {\n```", "```js\n    if (self.media == null)\n    {\n      if (PKDEVICE.platform()==\"android\")\n      {\n        self.fileName = self.fileName.replace (\"file://\",\"\");\n      }\n```", "```js\n      self.media = new Media(self.fileName, self.dispatchSuccess, self.dispatchFailure);\n```", "```js\n      self.positionTimer = setInterval(self.updatePosition, 250);\n      self.durationTimer = setInterval(self.updateDuration, 250);\n    }\n  }\n```", "```js\n  self.isPlaying = function()\n  {\n    return self.playing;\n  }\n\n  self.isRecording = function()\n  {\n    return self.recording;\n  }\n```", "```js\n  self.updatePosition = function()\n  {\n    if (self.playing)\n    {\n      self.media.getCurrentPosition(function(position)\n      {\n        self.position = position;\n      }, self.dispatchFailure);\n    } else\n    {\n      if (self.recording)\n      {\n        self.position += 0.25;\n      } else\n      {\n        self.position = 0;\n      }\n    }\n  }\n```", "```js\n  self.updateDuration = function()\n  {\n    if (self.media.getDuration() > -1)\n    {\n      self.duration = self.media.getDuration();\n      clearInterval(self.durationTimer);\n      self.durationTimer = -1;\n    } else\n    {\n      self.duration--;\n      if (self.duration < -20)\n      {\n        self.duration = -1;\n        clearInterval(self.durationTimer);\n        self.durationTimer = -1;\n      }\n    }\n  }\n```", "```js\n  self.getPlaybackPosition = function()\n  {\n    return self.position;\n  }\n\n  self.setPlaybackPosition = function(newPosition)\n  {\n    self.position = newPosition;\n    self.initializeMediaObject();\n    self.media.seekTo(newPosition * 1000);\n  }\n```", "```js\n  self.getDuration = function()\n  {\n    return self.duration;\n  }\n\n  self.startPlayback = function()\n  {\n    self.initializeMediaObject();\n    self.media.play();\n    self.paused = false;\n    self.recording = false;\n    self.playing = true;\n  }\n\n  self.pausePlayback = function()\n  {\n    self.initializeMediaObject();\n    self.media.pause();\n    self.playing = false;\n    self.paused = true;\n    self.recording = false;\n  }\n```", "```js\n  self.releaseResources = function()\n  {\n    if (self.recording)\n    {\n      self.stopRecording();\n    }\n    if (self.positionTimer > -1)\n    {\n      clearInterval(self.positionTimer);\n    }\n    if (self.durationTimer > -1)\n    {\n      clearInterval(self.durationTimer);\n    }\n    self.durationTimer = -1;\n    self.positionTimer = -1;\n    self.media.release();\n    self.media = null;\n  }\n```", "```js\n  self.stopPlayback = function()\n  {\n    self.initializeMediaObject();\n    self.media.stop();\n    self.isPlaying = false;\n    self.isPaused = false;\n    self.isRecording = false;\n  }\n```", "```js\n  self.startRecording = function()\n  {\n    self.initializeMediaObject();\n    self.media.startRecord();\n    self.isPlaying = false;\n    self.isPaused = false;\n    self.isRecording = true;\n  }\n\n  self.stopRecording = function()\n  {\n    self.initializeMediaObject();\n    self.media.stopRecord();\n    self.isPlaying = false;\n    self.isPaused = false;\n    self.isRecording = false;\n  }\n```", "```js\n  self.dispatchFailure = function(e)\n  {\n    console.log(\"While \" + self.State + \", encountered error: \" + e.target.error.code);\n    if (self.failure)\n    {\n      self.failure(e);\n    }\n  }\n```", "```js\n  self.dispatchSuccess = function()\n  {\n    if (self.completion)\n    {\n      self.completion();\n    }\n  }\n}\n```", "```js\nvar GESTURES = GESTURES || {};\n\nGESTURES.consoleLogging = false;\n\nGESTURES.SimpleGesture = function(element)\n{\n```", "```js\n  var self = this;\n\n  self.theElement =  {  };\n\n  self._touchStartX = 0;\n  self._touchStartY = 0;\n  self._touchX = 0;\n  self._touchY = 0;\n  self._deltaX = 0;\n  self._deltaY = 0;\n  self._duration = 0;\n  self._timerId = -1;\n  self._distance = 0;\n  self._event =   {  };\n  self._cleared = false;\n```", "```js\n  self.attachToElement = function(element)\n  {\n    self.theElement = element;\n    self.theElement.addEventListener(\"touchstart\", self.touchStart, false);\n    self.theElement.addEventListener(\"touchmove\", self.touchMove, false);\n    self.theElement.addEventListener(\"touchend\", self.touchEnd, false);\n\n    self.theElement.addEventListener(\"mousedown\", self.mouseDown, false);\n    self.theElement.addEventListener(\"mousemove\", self.mouseMove, false);\n    self.theElement.addEventListener(\"mouseup\", self.mouseUp, false);\n\n  }\n```", "```js\n  self.recognizeGesture = function(o)\n  {\n    if (GESTURES.consoleLogging)\n    {\n      console.log(\"default recognizer...\");\n    }\n  }\n  self.attachGestureRecognizer = function(fn)\n  {\n    self.recognizeGesture = fn;\n  }\n```", "```js\n  self.updateGesture = function()\n  {\n    self._duration += 100;\n    self._distance = Math.sqrt((self._deltaX * self._deltaX) + (self._deltaY * self._deltaY));\n    if (GESTURES.consoleLogging)\n    {\n      console.log(\"gesture: start: (\" + self._touchStartX + \",\" + self._touchStartY + \") current: (\" + self._touchX + \",\" + self._touchY + \") delta: (\" + self._deltaX + \",\" + self._deltaY + \") delay: \" + self._duration + \"ms, \" + self._distance + \"px\");\n    }     if (!self._cleared)\n    {\n      self.recognizeGesture(self);\n    }\n  }\n```", "```js\n  self.clearEvent = function()\n  {\n    if (self._cleared)\n    {\n      if (self._event.cancelBubble)\n      {\n        self._event.cancelBubble();\n      }\n      if (self._event.stopPropagation)\n      {\n        self._event.stopPropagation();\n      }\n      if (self._event.preventDefault)\n      {\n        self._event.preventDefault();\n      } else\n      {\n        self._event.returnValue = false;\n      }\n    }\n    if (self._timerId > -1)\n    {\n      clearInterval(self._timerId);\n      self._timerId = -1;\n    }\n    self._cleared = true;\n  }\n```", "```js\n  self.eventStart = function()\n  {\n    if (GESTURES.consoleLogging)\n    {\n      console.log(\"eventstart\");\n    }\n    self._duration = 0;\n    self._deltaX = 0;\n    self._deltaY = 0;\n    self._cleared = false;\n    self._touchStartX = self._touchX;\n    self._touchStartY = self._touchY;\n    self._timerId = setInterval(self.updateGesture, 100);\n  }\n```", "```js\n  self.touchStart = function(event)\n  {\n    if (GESTURES.consoleLogging)\n    {\n      console.log(\"touchstart\");\n    }\n    if (event)\n    {\n      self._touchX = event.touches[0].screenX;\n      self._touchY = event.touches[0].screenY;\n      self._event = event;\n    } else\n    {\n      self._touchX = window.event.screenX;\n      self._touchY = window.event.screenY;\n      self._event = window.event;\n    }\n    self.eventStart();\n  }\n\n  self.mouseDown = function(event)\n  {\n    if (GESTURES.consoleLogging)\n    {\n      console.log(\"mousedown\");\n    }\n    if (event)\n    {\n      self._touchX = event.screenX;\n      self._touchY = event.screenY;\n      self._event = event;\n    } else\n    {\n      self._touchX = window.event.screenX;\n      self._touchY = window.event.screenY;\n      self._event = window.event;\n    }\n    self.eventStart();\n  }\n```", "```js\n  self.eventMove = function()\n  {\n    if (GESTURES.consoleLogging)\n    {\n      console.log(\"eventmove\");\n    }\n    self._deltaX = self._touchX - self._touchStartX;\n    self._deltaY = self._touchY - self._touchStartY;\n\n  }\n```", "```js\n  self.eventEnd = function()\n  {\n    if (GESTURES.consoleLogging)\n    {\n      console.log(\"eventend\");\n    }\n      elf.clearEvent();\n  }\n```", "```js\n  self.attachToElement(element);\n}\n```", "```js\nGESTURES.LongPressGesture = function(element, whatToDo, delayToRecognition, delayToCancel)\n{\n```", "```js\n  var myGesture = new GESTURES.SimpleGesture(element);\n```", "```js\n  myGesture._delayToRecognition = delayToRecognition || 1000;\n  myGesture._delayToCancel = delayToCancel || 3000;\n  myGesture._whatToDo = whatToDo;\n```", "```js\n  myGesture.attachGestureRecognizer(function(o)\n  {\n    if (GESTURES.consoleLogging)\n    {\n      console.log(\"longpress recognizer...\");\n    }\n    if (o._distance < 25)\n    {\n      if (o._duration >= o._delayToRecognition && o._duration <= o._delayToCancel)\n      {\n        o.clearEvent();\n        o._whatToDo(o);\n      }\n    } \n```", "```js\n    else\n    {\n      o.clearEvent();\n    }\n  });\n```", "```js\n  return myGesture;\n}\n\nGESTURES.HorizontalSwipeGesture = function(element, whatToDo, radiusToRecognition, delayToCancel)\n{\n```", "```js\n  var myGesture = new GESTURES.SimpleGesture(element);\n```", "```js\n  myGesture._radiusToRecognition = radiusToRecognition || 50;\n  myGesture._delayToCancel = delayToCancel || 3000;\n  myGesture._whatToDo = whatToDo;\n```", "```js\n  myGesture.attachGestureRecognizer(function(o)\n  {\n    if (GESTURES.consoleLogging)\n    {\n      console.log(\"horizontal recognizer...\");\n    }\n    if (o._distance > o._radiusToRecognition)\n    {\n      if (o._duration <= o._delayToCancel)\n      {\n        if (Math.abs(o._deltaY) < 25)\n        {\n          o.clearEvent();\n          o._whatToDo(o);\n        }\n      }\n    }\n  });\n  return myGesture;\n}\n```", "```js\n<div id=\"documentsView_documentTemplate\" class=\"hidden\">\n  <div class=\"documentContainer\" \n    id=\"documentsView_item%INDEX%\">\n    <div class=\"documentTapArea\" \n      id=\"documentsView_item%INDEX%_area\"\n    onclick=\"documentsView.documentContainerTapped(%INDEX%);\">\n    </div>\n    <div class=\"documentImage\">\n      <img id=\"documentsView_item%INDEX%_img\"\n      src=\"img/playButton.png\" border=0\n      onclick=\"documentsView.documentContainerTapped(%INDEX%);\n      \"/>\n    </div>\n    <div class=\"documentTitle\"\n    onclick=\"documentsView.documentContainerTapped(%INDEX%);\">\n      <span>%TITLE%</span>\n    </div>\n    <div class=\"documentActions\" \n      id=\"documentsView_actions%INDEX%\">\n      <button class=\"destructive barButton\" \n      id=\"documentsView_deleteButton%INDEX%\"\n      onclick=\"documentsView.deleteDocument(%INDEX%); return \n        false;\">\n        %DELETE%\n      </button>\n    </div>\n  </div>\n</div>\n```", "```js\n  var documentsView = $ge(\"documentsView\") ||  {  };\n  documentsView.firstTime = true;\n  documentsView.lastScrollLeft = 0;\n  documentsView.lastScrollTop = 0;\n  documentsView.myScroll =  {  };\n  documentsView.availableDocuments =  {  };\n```", "```js\n  documentsView.currentDocument = null;\n  documentsView.documentCurrentlyPlaying = -1;\n```", "```js\n   documentsView.documentContainerTapped = function(idx)\n  {\n    var theElement = $ge(\"documentsView_item\" + idx + \"_img\");\n\n    if (documentsView.documentCurrentlyPlaying == idx)\n    {\n      if (documentsView.currentDocument.isPlaying())\n      {\n        documentsView.currentDocument.pausePlayback();\n        theElement.setAttribute(\"src\", \"./images/playButton.png\");\n      } else\n      {\n        documentsView.currentDocument.startPlayback();\n        theElement.setAttribute(\"src\", \"./images/pauseButton.png\");\n      }\n    } \n```", "```js\n    else\n    {\n      if (documentsView.documentCurrentlyPlaying > -1)\n      {\n        var theOldElement = $ge(\"documentsView_item\" + documentsView.documentCurrentlyPlaying + \"_img\");\n        documentsView.currentDocument.releaseResources();\n        documentsView.currentDocument = null;\n        documentsView.documentCurrentlyPlaying = -1;\n        theOldElement.setAttribute(\"src\", \"./images/playButton.png\");\n      }\n```", "```js\n      documentsView.currentDocument = new DOC.VoiceRecDocument(documentsView.availableDocuments.getDocumentAtIndex(idx), documentsView.mediaSuccess, null);\n      documentsView.currentDocument.startPlayback();\n      documentsView.documentCurrentlyPlaying = idx;\n      theElement.setAttribute(\"src\", \"./images/pauseButton.png\");\n    }\n }\n\n```", "```js\n  documentsView.mediaSuccess = function()\n  {\n    var theElement = $ge(\"documentsView_item\" + documentsView.documentCurrentlyPlaying + \"_img\");\n    documentsView.currentDocument.releaseResources();\n    documentsView.currentDocument = null;\n    documentsView.documentCurrentlyPlaying = -1;\n    theElement.setAttribute(\"src\", \"./images/playButton.png\");\n  }\n```", "```js\n  documentsView.documentIterator = function(o)\n  {\n    var theHTML = \"\";\n    var theNumberOfDocuments = 0;\n    for (var i = 0; i < o.getDocumentCount(); i++)\n    {\n      var theDocumentEntry = o.getDocumentAtIndex(i);\n\n      theHTML += PKUTIL.instanceOfTemplate($ge(\"documentsView_documentTemplate\"),\n      {\n        \"title\" : PKUTIL.FILE.getFileNamePart ( theDocumentEntry.name ),\n        \"index\" : i,\n        \"delete\" : __T(\"DELETE\")\n      });\n      theNumberOfDocuments++;\n    }\n    $ge(\"documentsView_contentArea\").innerHTML = theHTML;\n```", "```js\n    PKUTIL.delay(100, function()\n    {\n```", "```js\n      for (var i = 0; i < theNumberOfDocuments; i++)\n      {\n        var theElement = $ge(\"documentsView_item\" + i + \"\");\n```", "```js\n        var theLPGesture = new GESTURES.LongPressGesture(theElement, function(o)\n        {\n          documentsView.longPressReceived(o.data);\n        });\n          theLPGesture.data = i;\n```", "```js\n        var theHSGesture = new GESTURES.HorizontalSwipeGesture(theElement, function(o)\n        {\n          documentsView.horizontalSwipeReceived(o.data);\n        });\n        theHSGesture.data = i;\n      }\n    });\n  }\n```", "```js\n  documentsView.longPressReceived = function(idx)\n  {\n    var anAlert = new PKUI.MESSAGE.Confirm(__T(\"Select Action\"), __T(\"Select an action to perform:\"), \"Copy|Rename|Cancel<\", function(i)\n    {\n      PKUTIL.delay(100, function()\n      {\n        if (i == 0)\n        {\n          documentsView.copyDocument(idx);\n        }\n          if (i == 1)\n        {\n          documentsView.renameDocument(idx);\n        }\n      });\n    });\n    anAlert.show();\n  }\n```", "```js\n  documentsView.horizontalSwipeReceived = function(idx)\n  {\n    var theActionContainer = $ge(\"documentsView_actions\" + idx);\n    if (theActionContainer.style.display == \"block\")\n    {\n      theActionContainer.style.opacity = \"0\";\n      PKUTIL.delay(400, function()\n      {\n        theActionContainer.style.display = \"none\";\n      });\n    } else\n    {\n      theActionContainer.style.display = \"block\";\n      PKUTIL.delay(50, function()\n      {\n        theActionContainer.style.opacity = \"1\";\n      });\n    }\n\n  }\n```", "```js\n  documentsView.startRecording = function (theFileEntry)\n  {\n```", "```js\n    documentsView.currentDocument = new DOC.VoiceRecDocument(theFileEntry, null, null);\n```", "```js\n    var anAlert = new PKUI.MESSAGE.Confirm(\n         __T(\"Recording...\"),\n         \"<img src='./images/microphone.png' width=54 height=123>\",\n         __T(\"STOP_\"), function(i)\n    {\n      documentsView.currentDocument.stopRecording();\n      documentsView.currentDocument.releaseResources();\n      documentsView.currentDocument = null;\n      documentsView.documentCurrentlyPlaying = -1;\n      documentsView.reloadAvailableDocuments();\n    });\n    anAlert.show();\n```", "```js\n    documentsView.currentDocument.startRecording();\n  }\n```", "```js\n  documentsView.createNewDocument = function()\n  {\n```", "```js\n    var anAlert = new PKUI.MESSAGE.Prompt(__T(\"Create Document\"), __T(\"This will create a new document with the name below:\"), \"text\", \"Memo \" + __D(new Date(), \"yyyy-MM-dd HH-mm-ss\"), __T(\"Don't Create<|Create>\"), function(i)\n    {\n```", "```js\n      if (i === 1)\n      {\n        var fileType = \".wav\";\n        if (device.platform()==\"android\")\n        {\n          fileType = \".3gr\";\n        }\n        documentsView.availableDocuments.createDocument(\"\" + anAlert.inputElement.value + fileType, function()\n```", "```js\n        {\n          if (documentsView.documentCurrentlyPlaying > -1)\n          {\n            documentsView.mediaSuccess();\n          }\n```", "```js\n          var theFileEntry = documentsView.availableDocuments.getFileEntry();\n          if (PKDEVICE.platform()==\"ios\")\n          {\n            console.log(4);\n            theFileEntry.createWriter(function(writer)\n            {\n              console.log(5);\n              writer.onwriteend = function(e)\n              {\n                documentsView.startRecording (theFileEntry);\n              };\n\n              writer.write(\"It doesn't matter what goes here.\");\n              console.log(12);\n            }, function(err)\n            {\n              console.log(6);\n              var anAlert = new PKUI.MESSAGE.Alert(__T(\"Oops!\"), __T(\"Couldn't create the file.\"));\n              anAlert.show();\n            });\n        }\n```", "```js\n        else\n        {\n          if (PKDEVICE.platform()==\"android\")\n          {\n            theFileEntry.remove( function () { documentsView.startRecording(theFileEntry); } , null );\n          }\n```", "```js\n          else\n          {\n            documentsView.startRecording(theFileEntry);\n          }\n        }\n        }, function(e)\n        {\n          var anAlert = new PKUI.MESSAGE.Alert(__T(\"Oops!\"), __T(\"Couldn't create the file.\"));\n          anAlert.show();\n        });\n      }\n    });\n    anAlert.show();\n  }\n\n  documentsView.renameDocument = function(idx)\n  {\n    var theFile = documentsView.availableDocuments.getDocumentAtIndex(idx).name;\n    var theFileName = PKUTIL.FILE.getFileNamePart(theFile);\n    var theFileExt = PKUTIL.FILE.getFileExtensionPart(theFile);\n```", "```js\n    var anAlert = new PKUI.MESSAGE.Prompt(__T(\"Rename Document\"), __T(\"Rename your document to the following:\"), \"text\", theFileName, __T(\"Cancel<|Rename>\"), function(i)\n    {\n      if (i == 1)\n      {\n        if (documentsView.documentCurrentlyPlaying > -1)\n        {\n          documentsView.currentDocument.releaseResources();\n        }\n```", "```js\n var theNewFileName = \"\" + anAlert.inputElement.value + PKUTIL.FILE.extensionSeparator + theFileExt;\n\n```"]