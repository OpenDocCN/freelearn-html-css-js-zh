["```js\n{ name: 'leo' }\n```", "```js\nvar mongoose = require('mongoose');\nvar schema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    index: {\n      unique: true\n    }\n  }\n});\n\nvar User = mongoose.model('user', schema);\nmodule.exports = User;\n\n```", "```js\nschema.statics.join = function(name, callback) {\n  var user = new User({\n    name: name\n  });\n\n  user.save(function(err, doc) {\n    if (!callback) { return ; }\n    if (err) { return callback(err); }\n\n    callback(null, doc);\n  });\n};\n\n```", "```js\nschema.statics.join = function(name) {\n  return User.create({\n    name: name\n  });\n};\n\n```", "```js\n getUserinfo('leo', function(err, user){\n   if (err) {\n    // handle error\n     onFail(err);\n     return;\n   }\n\n  onSuccess(user);\n });\n\n```", "```js\nvar promiseUserInfo = getUserinfo('leo');\n\npromiseUserInfo.then(function(user) {\n  onSuccess(user);\n});\n\npromiseUserInfo.catch(function(error) {\n  // code to handle error\n  onFail(user);\n});\n\n```", "```js\nvar onJoinSuccess = function(user) {console.log('user', user.name, 'joined game!');\n  return user;\n};\n\nvar onJoinFail = function(err) {console.error('user fails to join, err', err);\n};\n\nUser.join('leo', function(err, user) {if (err) {return onJoinFail(err);\n  }\n\n  onJoinSuccess(user);\n});\n```", "```js\nUser.join('leo')\n.then(function(user) {onJoinSuccess(user);})\n.catch(function(err) {onJoinFail(err);\n});\n```", "```js\nUser.join('leo')\n.then(onJoinSuccess)\n.catch(onJoinFail);\n```", "```js\nvar User = require('../app/models/user.js');\nvar db = require('../db');\n\nvar onJoinSuccess = function(user) {\n  console.log('user', user.name, 'joined game!');\n  return user;\n};\n\nvar onJoinFail = function(err) {\n  console.error('user fails to join, err', err);\n};\n\nconsole.log('Before leo send req to join game');\n\nUser.join('leo')\n.then(onJoinSuccess)\n.catch(onJoinFail);\n\nconsole.log('After leo send req to join game');\n```", "```js\nvar User = require('../app/models/user.js');\nvar db = require('../db');\n\nvar onJoinSuccess = function(user) {\n  console.log('user', user.name, 'joined game!');\n  return user;\n};\n\nvar onJoinFail = function(err) {\n  console.error('user fails to join, err', err);\n};\n\nconsole.log('Before leo send req to join game');\nUser.join('leo')\n.then(onJoinSuccess)\n.then(function(user) {\n  return User.findAllUsers();\n})\n.then(function(allUsers) {\n  return JSON.stringify(allUsers);\n})\n.then(function(val) {\n  console.log('all users json string:', val);\n})\n.catch(onJoinFail);\n\nconsole.log('After leo send req to join game');\n```", "```js\nvar schema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: true,\n    index: {\n      unique: true\n    }\n  }\n});\n\n```", "```js\nvar User = require('../../app/models/user');\n\n  describe('when leo joins', function() {\n    it('should return leo', function(done) {\n      User.join('leo')\n\n        .then(function(user) {\n          expect(user.name).to.equal('leo');\n          done();\n        })\n        .catch(function(error) {\n          done(error);\n        });\n    });\n  });\n\n```", "```js\n  describe('when leo joins', function() {\n    it('should return leo', function() {\n      return User.join('leo')\n        .then(function(user) {\n          expect(user.name).to.equal('leo');\n        });\n    });\n  });\n\n```", "```js\n describe('when another leo joins', function() {\n    it('should be rejected', function() {\n      return User.join('leo')\n        .then(function() {\n          throw new Error('should return Error');\n        })\n        .catch(function(err) {\n          expect(err.code).to.equal(11000);\n          return true;\n        });\n    });\n  });\n\n```", "```js\nschema.statics.leave = function(name) {\n  return Promise.resolve(this.findOneAndRemove({name: name\n  })\n  .exec());\n};\n```", "```js\nschema.statics.findAllUsers = function() {\n  return Promise.resolve(User.find({}).exec())\n    .map(function(user) {\n      return user.name;\n    });\n};\n\n```", "```js\n{\n  'word': 'what',\n  'used': [\n    { 'user': 'admin', 'word': 'what' },\n    { 'user': 'player1', 'word': 'tomorrow' },\n    { 'user': 'player2', 'word': 'when' },\n    { 'user': 'player2', 'word': 'nice' },\n    { 'user': 'player1', 'word': 'egg' },\n  ]\n}\n\n```", "```js\nvar schema = new mongoose.Schema({word: {type: String,required: true},\n  used: {type: Array\n  },\n});\n```", "```js\nschema.statics.newGame = function() {return Promise.resolve(Stat.remove().exec())\n  .then(function() {return Stat.create({word: 'what',used: [{word: 'what',user: 'admin'}]\n    });\n  });\n};\n```", "```js\nschema.statics.chain = function(word, user) {var first = word.substr(0, 1).toLowerCase();\n\n  return Promise.resolve(Stat.findOne({}).exec())\n  .then(function(stat) {var currentWord = stat.word;\n    if (currentWord.substr(-1) !== first) {throw Helper.build400Error('not match');\n    }\n\n    return currentWord;\n  })\n  .then(function(currentWord ) {return Promise.resolve(Stat.findOneAndUpdate({word: currentWord,}, {$push: {used: { 'word': word, 'user': user }}\n    }, {upsert: false}).exec();\n  });\n});\n```", "```js\nthrow Helper.build400Error('not match');\n\n```", "```js\nexports.build400Error = function(message) {var error = new Error(message);\n  error.status = 400;\n  return error;\n};\n```", "```js\nStat.findOneAndUpdate({word: currentWord,}, {$push: {used: { 'word': word, 'user': user }\n  }\n}, {upsert: false\n}).exec();\n```", "```js\nschema.statics.chain = function(word, user) {var first = word.substr(0, 1);\n\n  return Promise.resolve(Stat.findOne({}).exec())\n  .then(function(stat) {var currentWord = stat.word;\n\n    if (currentWord.substr(-1).toLowerCase() !== first.toLowerCase()) {throw Helper.build400Error('not match');\n    }\n\n    return currentWord;\n  })\n  .then(function(currentWord) {return Promise.resolve(Stat.findOneAndUpdate({word: currentWord,'used.word': { $ne: word }\n    }, {word: word,$push: {used: { 'word': word, 'user': user }}\n    }, {upsert: false,\n    })\n    .exec());\n  })\n  .then(function(result) {if (!result) {throw Helper.build404Error('not found');\n    }\n\n    return result;\n  });\n};\n```", "```js\n describe('when player1 and player2 send different valid word together', function() {it('should accept player1\\'s word, and reject player2\\'s word', function(done) {Game.chain('geoffrey', 'hello')\n        .then(function(state) {expect(state.used.length).to.equal(4);\n          expect(state.used[3].word).to.equal('hello');\n          expect(state.used[3].user).to.equal('geoffrey');\n\n          expect(state.word).to.equal('hello');\n        });\n\n      Game.chain('marc', 'helium')\n        .then(function(state) {done(new Error('should return Error'));\n        })\n        .catch(function(err) {expect(err.status).to.equal(400);\n          done();\n        });\n\n    });\n  });\n```", "```js\nnpm install --save socket.io\n\n```", "```js\nvar socketIO = require('socket.io');\nvar Game = require('./app/controllers/game');\n```", "```js\nmodule.exports = function(server) {\n  var io = socketIO(server, {transports: ['websocket']});\n\n  io.use(function(socket, next) {var handshakeData = socket.request;\n    console.log('socket handshaking', handshakeData._query.username);\n    socket.user = handshakeData._query.username;\n\n    Game.join(socket.user)\n    .then(function(users) {console.log('game joined successfully', socket.user);\n      socket.broadcast.emit('join', users);\n      next();\n    })\n    .catch(function(err) {console.log('game joined fail', socket.user);\n      next(err);\n    });\n  });\n\n};\n```", "```js\n io.sockets.on('connection', function(socket) {console.log('client connected via socket', socket.user);\n\n    socket.on('disconnect', function() {console.log('socket user', socket.user, 'leave');\n      Game.leave(socket.user)\n      .then(function(users) {socket.broadcast.emit('leave', users);\n      });\n    });\n\n    socket.on('chain', function(word, responseFunc) {console.log('socket chain', word);\n      Game.chain(socket.user, word)\n      .then(function(stat) {console.log('successful to chain', stat);\n        if (responseFunc) {responseFunc({status: 200,\n            resp: stat\n          });\n        }\n        console.log('broadcasting from', socket.user, stat);\n        socket.broadcast.emit('stat', stat);\n      })\n      .catch(function(err) {console.log('fail to chain', err);\n        if (responseFunc) {responseFunc(err);\n        }\n      });\n    });\n\n    socket.on('game', function(query, responseFunc) {console.log('socket stat', socket.user);\n      Game.state()\n      .then(function(game) {console.log('socket stat end', game);\n        if (responseFunc) {responseFunc(game);\n        }\n      });\n    });\n\n    socket.on('error', function(err) {console.error('error', err);\n    });\n  });\n```", "```js\n#!/usr/bin/env node\nvar app = require('../app');\nvar socket = require('../socket');\n\napp.set('port', process.env.PORT || 3000);\n\nvar server = app.listen(app.get('port'), function() {console.log('Express server listening on port ' + server.address().port);\n});\nsocket(server);\n```", "```js\n./bin/www\n\n```", "```js\n$ ./bin/www\nconnecting db...\nExpress server listening on port 3000\ndb connected\n\n```", "```js\n$(function() {var game = new Game({$viewLogin: $('.view-login'),$viewGame: $('.view-game'),$username: $('.username'),$wordInput: $('.word-input'),$word: $('.word'),$bywho: $('.bywho'),$users: $('.users'),});\n});\n\nvar Game = function(views) {this.views = views;\n\n  this.init();\n};\n```", "```js\nGame.prototype = {init: function() {var me = this;\n\n    this.views.$username.focus();\n\n    this.views.$viewLogin.submit(function() {var username = me.views.$username.val();me.join(username);\n      return false;\n    });\n\n    this.views.$viewGame.submit(function() {var word = me.views.$wordInput.val();\n      me.chain(word);\n      me.views.$chain.val('');\n      return false;\n    });\n  };\n```", "```js\n join: function(username) {var socket = io.connect('/?username=' + username, {transports: ['websocket'],\n    });\n\n    this.socket = socket;\n\n    var me = this;\n    this.socket.on('connect', function() {console.log('connect');\n      me.socket.emit('game', null, function(game) {console.log('stat', game);\n        me.updateStat(game.stat);\n        me.updateUsers(game.users);\n      });\n\n      me.showGameView();\n    });\n\n    this.socket.on('join', function(users) {me.updateUsers(users);\n    });\n\n    this.socket.on('leave', function(users) {me.updateUsers(users);\n    });\n\n    this.socket.on('stat', function(stat) {me.updateStat(stat);\n    });\n  },\n\n  showGameView: function() {this.views.$viewLogin.hide();\n    this.views.$viewGame.show();\n    this.views.$wordInput.focus();\n  },\n```", "```js\n  updateStat: function(stat) {this.views.$word.html(stat.word);\n\n    this.views.$wordInput.attr('placeholder', stat.word.substr(-1));\n    this.views.$bywho.html('current word updated by: ' + stat.used.pop().user);\n  },\n\n  updateUsers: function(users) {this.views.$users.html(users.map(function(user) {return '<li>' + user + '</li>';\n    }).join(''));\n  },\n```", "```js\n chain: function(word) {if (!word) {return alert('Please input a word');\n    }\n\n    var me = this;\n    this.socket.emit('chain', word, function(data) {console.log('chain', data);\n      if (!data || data.status !== 200) {return alert('Your word \"' + word + ' can\\'t chain with current word.');\n      }\n\n      me.updateStat(data.resp);\n    });\n  }\n};\n```"]