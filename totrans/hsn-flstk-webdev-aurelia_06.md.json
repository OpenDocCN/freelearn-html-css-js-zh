["```js\n{\n  \"identification\" : \"PE0022458197\",\n  \"name\": {\n    \"firstName\": \"Jack\",\n    \"LastName\": \"Ma\"\n  },\n  \"age\": 45,\n  \"addresses\": [ \n    {\"country\": \"Peru\", \"address\": \"MyTown PE#32\"},\n    {\"country\": \"China\", \"address\": \"OtherTown CH#44\"}\n  ]\n  ...\n}\n```", "```js\n> docker run -p 27017:27017 -v $(pwd)/data:data/db mongo\n```", "```js\n$ docker exec -it mongo sh\n```", "```js\n> db.collection_name.insert(JSON_Object)\n```", "```js\n> db.teams.insert({\"code\": \"PER\", \n  ... \"name\": \"Peru\", \n  ... \"ranking\": 11, \n  ... \"captain\": \"Paolo Guerreo\", \n  ... \"Trainer\": \"Ricardo Gareca\", \n  ... \"confederation\": \"Conmebol\"})\n\nWriteResult({ \"nInserted\" : 1 })\n\n```", "```js\n> db.teams.find()\n\n{ \"_id\" : ObjectId(\"5a5cf1419afc8af268b9bb21\"), \"code\" : \"PER\", \"name\" : \"Peru\", \"ranking\" : 11, \"captain\" : \"Paolo Guerreo\", \"Trainer\" : \"Ricardo Gareca\", \"confederation\" : \"Conmebol\" }\n```", "```js\n> db.teams.find({\"code\": \"PER\"})\n\n{ \"_id\" : ObjectId(\"5a5cf1419afc8af268b9bb21\"), \"code\" : \"PER\", \"name\" : \"Peru\", \"ranking\" : 11, \"captain\" : \"Paolo Guerreo\", \"Trainer\" : \"Ricardo Gareca\", \"confederation\" : \"Conmebol\" }\n```", "```js\n> db.teams.updateOne({\"code\": \"PER\"}, {$set: {\"ranking\": 1}})\n\n{ \"acknowledged\" : true, \"matchedCount\" : 1, \"modifiedCount\" : 1 }\n```", "```js\n> db.teams.find({\"code\": \"PER\"})\n\n{ \"_id\" : ObjectId(\"5a5cf1419afc8af268b9bb21\"), \"code\" : \"PER\", \"name\" : \"Peru\", \"ranking\" : 1, \"captain\" : \"Paolo Guerreo\", \"Trainer\" : \"Ricardo Gareca\", \"confederation\" : \"Conmebol\" }\n```", "```js\n> db.teams.updateOne({\"code\": \"PER\"}, {\"ranking\": 1})\n\n[thread1] Error: the update operation document must contain atomic operators :\n```", "```js\n> db.teams.update({\"code\": \"PER\"}, {\"ranking\": 1})\n\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n```", "```js\n> db.teams.find({\"code\": \"PER\"})\n```", "```js\n> db.teams.deleteOne({\"code\": \"PER\"})\n\n{ \"acknowledged\" : true, \"deletedCount\" : 1 }\n```", "```js\n$ npm install --save mongoose\n```", "```js\n$ cd src\n$ mkdir config\n$ touch config/mongoose-connection.js\n```", "```js\nconst mongoose = require('mongoose')\n\nmongoose.connect('mongodb://localhost:32768/wcDb')\n\nmongoose.Promise = global.Promise\n\nmongoose.connection.on('connected', () => {\n  console.log('connection is ready')\n})\n\nmongoose.connection.on('error', () => {\n  console.log(err)\n})\n\n```", "```js\n$ node src/config/mongoose-connection.js\n\nconnection is ready\n```", "```js\n...\nconst TeamSchema = new mongoose.Schema({\n  name: String,\n  ranking: Number,\n  captain: String,\n  trainer: String,\n  confederation: String\n})\n```", "```js\n...\nconst TeamSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    min: 3,\n    max: 100,\n    required: true,\n    unique: true\n  },\n  ranking: {\n    type: Number,\n    min: 1\n  },\n  captain: {\n    type: String,\n    required: true\n  },\n  Trainer: {\n    type: String,\n    required: true\n  },\n  confederation: {\n    type: String,\n    required: true,\n    uppercase: true\n  }\n})\n```", "```js\n...\nconst Team = mongoose.model('team', TeamSchema)\n```", "```js\n...\nconst peruTeam = new Team({\n  name: 'Peru',\n  ranking: 11,\n  captain: 'Paolo Guerrero',\n  Trainer: 'Ricardo Gareca',\n  confederation: 'Conmebol'\n})\n\nperuTeam.save((err, data) => {\n  if (err)\n    throw err\n\n  console.log(\"Team was created with the Id\", data._id)\n})\n```", "```js\n$ node src/config/mongoose-connection.js\n\nconnection is ready\nTeam was created with the Id 5a5f8e5c34a28e049c026ed6\n```", "```js\n$ touch src/models/team.js\n```", "```js\nconst mongoose = require('mongoose')\n\nconst TeamSchema = new mongoose.Schema({\n    name: {\n      type: String,\n      min: 3,\n      max: 100,\n      required: true,\n      unique: true\n    },\n    ranking: {\n      type: Number,\n      min: 1\n    },\n    captain: {\n      type: String,\n      required: true\n    },\n    Trainer: {\n      type: String,\n      required: true\n    },\n    confederation: {\n      type: String,\n      required: true,\n      uppercase: true\n    }\n  })\n\n  module.exports = mongoose.model('team', TeamSchema)\n```", "```js\nconst mongoose = require('mongoose')\nmongoose.connect('mongodb://localhost:32768/wcDb', { useMongoClient: true })\nmongoose.Promise = global.Promise\n\nmongoose.connection.on('connected',() => {\n  console.log('connection is ready')\n})\n\nmongoose.connection.on('error', err => {\n  console.log(err)\n})\n```", "```js\nconst express = require('express')\nconst bodyParser = require('body-parser')\nconst teamsApi = require('./src/routes/teams-api')\nconst mongooseConfig = require('./src/config/mongoose-connection')\nconst app = express()\n\napp.use(bodyParser.json())\napp.use(teamsApi)\n...\n```", "```js\nconst express = require('express')\nconst api = express.Router()\nconst Team = require('../models/team')\n\nlet teams = [\n    { id: 1, name: \"Peru\"},\n    { id: 2, name: \"Russia\"}\n]\n...\n```", "```js\n...\napi\n  .route('/teams')\n  .get((req, res) => {\n    res.json(teams)\n  })\n  .post((req, res, next) => {\n    let team = new Team(req.body)\n\n team.save()\n .then(data => res.json(data))\n .catch(err => next(err) )\n  })\n...\n```", "```js\n$ curl -X POST -H 'Content-type: application/json' -d '{\"code\": \"GER\", \"name\": \"Germany\", \"ranking\": 8, \"captain\": \"Paolo Guerreo\", \"Trainer\": \"Ricardo Gareca\", \"confederation\": \"Conmebol\"}' http://localhost:3000/teams\n\n{\"__v\":0,\"name\":\"Germany\",\"ranking\":8,\"captain\":\"Paolo Guerreo\",\"Trainer\":\"Ricardo Gareca\",\"confederation\":\"CONMEBOL\",\"_id\":\"5a662fbf728726072c6298fc\"}\n```", "```js\n$ curl -X POST -H 'Content-type: application/json' -d '{\"code\": \"PER\", \"name\": \"Peru\", \"ranking\": 11, \"captain\": \"Paolo Guerreo\", \"Trainer\": \"Ricardo Gareca\", \"confederation\": \"Conmebol\"}' \n\nhttp://localhost:3000/teams\n\nMongoError: E11000 duplicate key error collection: wcDb.teams index: name_1 dup key: { :\\\"Peru\\\" }\n...\n\n```", "```js\nconst mongoose = require('mongoose')\n\nconst TeamSchema = new mongoose.Schema({\n    name: {\n      type: String,\n      min: 3,\n      max: 100,\n      required: true,\n      unique: true\n    },\n\n...\n```", "```js\nconst express = require('express')\nconst bodyParser = require('body-parser')\nconst teamsApi = require('./src/routes/teams-api')\nconst mongooseConfig = require('./src/config/mongoose-connection')\nconst app = express()\n\napp.use(bodyParser.json())\napp.use(teamsApi)\n\napp.use((err, req, res, next) => {\n return res.status(500).send({ message: err.message })\n})\n\napp.listen(3000, () => {\n    console.log('running on port: 3000')\n})\n```", "```js\n$ curl -X POST -H 'Content-type: application/json' -d '{\"code\": \"PER\", \"name\": \"Peru\", \"ranking\": 11, \"captain\": \"Paolo Guerreo\", \"Trainer\": \"Ricardo Gareca\", \"confederation\": \"Conmebol\"}' http://localhost:3000/teams\n\n{\"error\":\"E11000 duplicate key error collection: wcDb.teams index: name_1 dup key: { : \\\"Peru\\\" }\"}\n```", "```js\n...\n\napi\n  .route('/teams')\n  .get((req, res) => {\n    // TODO\n  })\n  .post((req, res, next) => {\n    let team = new Team(req.body)\n    team.save()\n      .then(data => res.json(data))\n      .catch(err => next(err) )\n  })\n\napi\n  .route('/teams/:id')\n  .get((req, res) => {\n      // TODO\n  })\n  .put((req, res) => {\n    // TODO\n\n  })\n  .delete((req, res) => {\n    // TODO\n  })\n\n...\n```", "```js\n...\napi\n  .route('/teams')\n  .get((req, res, next) => {\n    Team.find()\n .then(data => res.json(data))\n .catch(err => { next(err) })\n  })\n  .post((req, res, next) => {\n    let team = new Team(req.body)\n    team.save()\n      .then(data => res.json(data))\n      .catch(err => { next(err) } )\n  })\n...\n```", "```js\n$ curl http://localhost:3000/teams\n\n[{\"_id\":\"5a662fbf728726072c6298fc\",\"name\":\"Peru\",\"ranking\":11,\"captain\":\"Paolo Guerreo\",\"Trainer\":\"Ricardo Gareca\",\"confederation\":\"CONMEBOL\",\"__v\":0}]\n```", "```js\napi\n  .route('/teams/:id')\n  .get((req, res, next) => {\n      let id = req.params.id\n\n Team.findById(id)\n .then(data => res.json(data))\n .catch(err => next(err))\n  })\n  .put((req, res) => {\n    // TODO\n\n  })\n  .delete((req, res) => {\n    // TODO\n  })\n```", "```js\n$ curl http://localhost:3000/teams/5a662fbf728726072c6298fc\n\n{\"_id\":\"5a662fbf728726072c6298fc\",\"name\":\"Peru\",\"ranking\":11,\"captain\":\"Paolo Guerreo\",\"Trainer\":\"Ricardo Gareca\",\"confederation\":\"CONMEBOL\",\"__v\":0}\n```", "```js\n$ curl http://localhost:3000/teams/5a662fbf728726072c629233\n\nnull\n```", "```js\n...\napi\n  .route('/teams/:id')\n  .get((req, res, next) => {\n      let id = req.params.id\n      Team.findById(id)\n        .then(data => {\n          if (data === null) {\n throw new Error(\"Team not found\")\n }\n\n          res.json(data)\n        })\n        .catch(err => { next(err) })\n  })\n  ...\n```", "```js\n$ curl http://localhost:3000/teams/5a662fbf728726072c629233\n\n{\"error\":\"Team not found\"}\n```", "```js\n...\napp.use((err, req, res, next) => {\n    let status = 500\n\n if (err.message.match(/not found/)) {\n status = 404\n }\n\n return res.status(status).send({ error: err.message })\n})\n...\n```", "```js\ncurl http://localhost:3000/teams/5a662fbf728726072c629233 -v\n...\n>\n< HTTP/1.1 404 Bad Request\n...\n{\"error\":\"Team not found\"}\n```", "```js\napi\n  .route('/teams/:id')\n  .get((req, res, next) => {\n     ...\n  })\n  .put((req, res, next) => {\n    let id = req.params.id \n\n Team.findById(id)\n .then(data => {\n if (data == null) {\n throw new Error(\"Team not found\")\n }\n return data\n })\n .then(team => {\n // We found the team. \n // Code to update goes here!\n })\n .catch(err => next(err))\n\n  })\n  .delete((req, res) => {\n    // TODO\n  })\n...\n```", "```js\n...\n  .put((req, res, next) => {\n    let id = req.params.id\n    let teamBody = req.body\n\n    Team.findById(id)\n      .then(data => {\n        if (data == null) {\n          throw new Error(\"Team not found\")\n        }\n        return data\n      })\n      .then(team => {\n         team.code = teamBody.code || team.code\n team.name = teamBody.name || team.name\n team.ranking = teamBody.ranking || team.ranking\n team.captain = teamBody.captain || team.captain\n team.trainer = teamBody.trainer || team.trainer\n team.confederation = teamBody.confederation || team.confederation\n\n      })\n      .catch(err => {\n        next(err)\n      })\n\n  })\n...\n```", "```js\n... \n.put((req, res, next) => {\n    let id = req.params.id\n    let teamBody = req.body\n\n    Team.findById(id)\n      .then(data => {\n        if (data == null) {\n          throw new Error(\"Team not found\")\n        }\n        return data\n      })\n      .then(team => {\n        team.code = teamBody.code || team.code\n        team.name = teamBody.name || team.name\n        team.ranking = teamBody.ranking || team.ranking\n        team.captain = teamBody.captain || team.captain\n        team.trainer = teamBody.trainer || team.trainer\n        team.confederation = teamBody.confederation || team.confederation\n\n        return team.save()\n      })\n      .then(result => res.json(result))\n      .catch(err => next(err))\n\n  })\n...\n```", "```js\n$ curl -X PUT -H 'Content-type: application/json' -d '{\"ranking\": 1}' http://localhost:3000/teams/5a662fbf728726072c6298fc\n\n{\"_id\":\"5a662fbf728726072c6298fc\",\"name\":\"Peru\",\"ranking\":1,\"captain\":\"Paolo Guerreo\",\"Trainer\":\"Ricardo Gareca\",\"confederation\":\"CONMEBOL\",\"__v\":0}\n```", "```js\n...\nconst Team = require('../models/team')\n\nconst updateTeam = async (id, teamBody) => {\n  try {\n    let team = await Team.findById(id)\n\n    if (team == null) throw new Error(\"Team not found\")\n\n    team.code = teamBody.code || team.code\n    team.name = teamBody.name || team.name\n    team.ranking = teamBody.ranking || team.ranking\n    team.captain = teamBody.captain || team.captain\n    team.trainer = teamBody.trainer || team.trainer\n    team.confederation = teamBody.confederation || team.confederation\n\n    team = await team.save()\n    return team\n\n  } catch (err) {\n    throw err\n  }\n}\n\napi\n  .route('/teams')\n...\n```", "```js\n...\n  })\n  .put((req, res, next) => {\n updateTeam(req.params.id, req.body)\n .then(team => res.json(team))\n .catch(err => next(err))\n\n  })\n  .delete((req, res) => {\n    // TODO\n  })\n...\n```", "```js\n...\n.delete((req, res, next) => {\n    let id = req.params.id\n\n Team.remove({_id: id})\n .then(result => res.json(result))\n .catch(err => next(err))\n  })\n\nmodule.exports = api\n```", "```js\n$ curl -X DELETE http://localhost:3000/teams/5a662fbf728726072c6298fc\n\n{\"n\":1,\"ok\":1}\n```"]