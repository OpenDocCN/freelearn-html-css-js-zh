- en: 4\. JavaScript Libraries and Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to use JavaScript frameworks and
    libraries to perform different tasks; demonstrate event handling with jQuery;
    use popular JavaScript Frameworks; name the do's and don'ts of using a framework;
    and build a library
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how and when to combine your source code with
    external software.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, you learned how to utilize conditional logic, loops,
    and the most common data structures. These form the groundwork and essentials
    for writing programs and building complex JavaScript applications. Still, building
    actual software is an inherently challenging task; focusing on only business logic
    is even more so. Therefore, as developers, we often rely on external software
    that lets us dedicate ourselves to the source code that's the most relevant to
    our product or business. This software does this by simplifying specific tasks
    and abstracting away complexity for us. Those pieces of external software are
    what we refer to as **frameworks** or **libraries**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the tasks that modern JavaScript frameworks can support
    us with:'
  prefs: []
  type: TYPE_NORMAL
- en: Performance rendering of complex or dynamic single-page applications (SPAs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing ongoing dataflow between the controllers and views of client-side applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating sophisticated animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating with fast and straightforward server APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we dive deeper into the whys and the wherefores of using external code,
    we need to clarify what the difference is between the terms "framework" and "library."
    This will be the topic of the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Framework versus Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Library describes an external collection of functions that perform a given
    task. These functions are made accessible to us as users of the library via APIs.
    One useful library is `lodash`, which can, for example, remove all duplicated
    values from an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Frameworks, on the other hand, are a particular form of library. They are reusable
    code frames that build the foundation of a JavaScript application. In contrast
    to libraries, which extend your code with functionality, a framework can stand
    alone and is enhanced with your source code to create an app as you like.
  prefs: []
  type: TYPE_NORMAL
- en: 'A popular framework is `Vue.js`, which we can use as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, in general, there is more complexity to a framework than there
    is to a library. Nonetheless, both are equally important to software development.
  prefs: []
  type: TYPE_NORMAL
- en: Despite the technical differences between libraries and frameworks, we are going
    to use those terms interchangeably. Another synonym you'll encounter in the JavaScript
    world to describe external source code is "package." One of those packages you
    may encounter in JS resources is `Vanilla.js`. We'll have a look at it in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Vanilla.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This specific framework follows the informal convention of including the JavaScript
    file extension with the name `nameOfFramework.js`. However, vanilla.js is not
    a framework; it's not even a library. People referring to `vanilla.js` are talking
    about plain JavaScript without any external code or tooling. The name is a running
    gag within the JavaScript community because some developers and non-developers
    think we need to use a framework for everything we build. We will discuss why
    this isn't the case later.
  prefs: []
  type: TYPE_NORMAL
- en: Popular JavaScript Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have just looked at lodash.js, a library that helps developers handle data
    structures; (to be used, for example, making arrays unique) and Vue.js, a framework
    for building modular and dynamic user interfaces. These are just two examples
    of quite popular and widely used JS frameworks/libraries. In addition to those,
    there is a vast and ever-growing number of external packages you can choose from.
    Each one of them is useful for solving one specialized set of problems.
  prefs: []
  type: TYPE_NORMAL
- en: A few modern and often used alternatives that support creating browser applications
    are, for instance, React.js, Vue.js, and Angular.js. Other libraries that help
    you store and manage data in your app are MobX, VueX, and Redux.
  prefs: []
  type: TYPE_NORMAL
- en: Again, others can transform source code so that it supports older browser engines,
    for example, **Babel**, or handle and manipulate time for you, such as moment.js.
  prefs: []
  type: TYPE_NORMAL
- en: Then, there are frameworks such as Express.js or Hapi that let you create simple,
    easy-to-maintain, and performant REST APIs for Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Some packages make building **command-line interfaces** (**CLIs**) or desktop
    applications easy.
  prefs: []
  type: TYPE_NORMAL
- en: Most build and productivity tools for the JavaScript ecosystem are provided
    to the community as a library, too. Webpack, Parcel, and Gulp are a few of these
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Not all of the available libraries are equally popular or useful. Their popularity
    depends on a few key facts:'
  prefs: []
  type: TYPE_NORMAL
- en: Whether they fix a problem that bothers many developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How well their API is defined and structured
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The quality of their documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The level of performance optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep these in mind when crafting a package that you want to become well known.
  prefs: []
  type: TYPE_NORMAL
- en: Everlasting jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One evergreen library that has been around for over a decade is jQuery. It
    touches almost every web app in one way or another and belongs in the toolkit
    of everybody who builds browser applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1: jQuery documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_04_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.1: jQuery documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '**jQuery** was not the first but was definitely among the earliest JavaScript
    libraries ever to be used by developers all over the world to make their jobs
    easier. Since it was first released, a lot of maintainers and engineers have contributed
    to making jQuery what it is today – namely, a robust and essential part of the
    modern internet that offers lots of different functionalities.'
  prefs: []
  type: TYPE_NORMAL
- en: 'jQuery provides, but is not limited to providing, the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: DOM manipulations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animated effects and transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will see how to do these things when we look at jQuery in more detail later
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Where to Find and How to Use External Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few different approaches when it comes to including libraries in
    your program. Depending on those approaches, we get packages from different places.
  prefs: []
  type: TYPE_NORMAL
- en: One is to copy the library's source code and to handle it as we wish. This approach
    is the most secure in the sense that we have all the control of the software and
    can customize it to fit our needs. However, by doing so, we give up compatibility
    and automated updates and patches. Most open-source projects host their code on
    GitHub or any other version control platform. Therefore, it's rather easy to access
    and fork the package's code. As soon as we download the source code, we can do
    whatever we want to get it working with our software. Possible solutions could
    be hosting it on our **cloud distribution network** (**CDN**) and accessing it
    from there or bundling it with our source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another approach is downloading the package from a CDN from the client at runtime.
    The most popular CDN to exclusively host JavaScript libraries is [cdnjs.com](http://cdnjs.com).
    It hosts thousands of libraries you can include in your markup without you having
    to worry about where to store it or how to upgrade it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2: Downloading a package from cdnjs.com'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_04_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.2: Downloading a package from cdnjs.com'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of how you''d include Vue.js with your markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you include packages by loading them from the browser during runtime, you
    have to be aware of the order of the script tags. They're loaded from top to bottom.
    Therefore, if you switched the two script tags in the preceding example, console.log
    would print that there is no `Vue.js` loaded, even though, eventually, it will
    be.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous approach gained lots of popularity and is now by far the most
    common due to the development of the JavaScript ecosystem in recent years. It
    involves the **Node.js Package Manager** (**npm**). npm is a tool that, as its
    name suggests, takes care of JavaScript packages within the Node.js ecosystem.
    npm itself consists of three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The website [npmjs.com](http://lodash.com), for hosting all the documentation
    and package searches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CLI that gets installed with `Node.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The registry, which is where all of the modules are stored and made installable:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 4.3: NPM website'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '](img/C14377_04_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.3: NPM website'
  prefs: []
  type: TYPE_NORMAL
- en: Using npm requires a `Node.js` version to be installed on your machine and any
    tool to bundle all your JavaScript together to make it executable in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, all you have to do is install any module you can find on npm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This command then stores the package in a particular folder, called **node_modules**.
    This folder contains all the source code of the libraries you installed, and from
    there, the bundler will join it into your application during build time.
  prefs: []
  type: TYPE_NORMAL
- en: All of the aforementioned methods to include libraries and frameworks with your
    source code are valid and have their preferred use cases. However, it's likely
    that you are going to use the latter the most as new projects are set up within
    the `Node.js` ecosystem, which is where modules and npm come from, naturally.
    Nonetheless, knowing how to use external resources without npm can come in handy
    when you want something much more comfortable and quicker than an entire project
    setup. Therefore, let's perform an exercise in which we will load a third-party
    library into our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4.01: Using a Third-Party Library in Your Code'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we''ve already discovered, using external software, namely libraries and
    frameworks, is an extremely useful skill as it can save a lot of resources and
    help you build highly functional apps. In this exercise, we are going to find
    and utilize a library ourselves. We''ll use the `lodash` library to create an
    array of unique values. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new HTML file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the CDN URL for the latest `lodash` version. To do so, navigate to `cdnjs.com`
    and search for lodash, and then copy the URL highlighted in the figure:![Figure
    4.4: Search result of lodash at cdnjs.com'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_04_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.4: Search result of lodash at cdnjs.com'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To look at the `lodash` documentation, navigate to [lodash.com](http://lodash.com).
    There, you can use the search bar to find the "`uniq`" function:![Figure 4.5:
    lodash.com documentation for uniq function'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_04_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.5: lodash.com documentation for uniq function'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Load the CDN URL in a script tag''s `src` attribute. To do so, paste the URL
    you previously copied in *step 2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create another `script` tag and write JS code using *lodash* to make an array,
    `[1,5,5,2,6,7,2,1]`, that contains `unique` values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open your HTML, including the JavaScript, in a browser and verify that you
    created an array with unique values inside the browser''s development tools console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.6: Unique array values in the browser''s development tools console'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_04_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.6: Unique array values in the browser''s development tools console'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we used the *lodash* library to create an array that contains
    sole unique values.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery versus Vanilla.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Earlier, in the *Everlasting jQuery* section of this chapter, we had a look
    at jQuery and how it has an exceptional standing in the JavaScript community.
    To demonstrate why libraries and frameworks, but mainly jQuery, became popular,
    we will compare it to `Vanilla.js` (plain JS).
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating the DOM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we wanted to fade out and then remove one element in plain JavaScript, we
    would write verbose and less comprehensive code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'On the other hand, with jQuery, we could have all this in just one line of
    understandable code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Making XHR Requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A fundamental functionality of modern web pages and applications is requesting
    additional resources or data from remote servers. Every browser provides interfaces
    to execute these so-called XHR requests. Those interfaces can be used from JavaScript.
    As we can see in the following code examples, jQuery, compared to vanilla.js,
    lets us write clean and self-explanatory code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In comparison to the preceding snippet, the code for making calls to a server
    is much clear and readable in jQuery. It is more readable in the sense that it
    is very clear and understandable regarding what exactly the function needs as
    parameters and what it is going to do. Let''s have a look at a `POST` Ajax request
    to the `/example/api` URL with a specified payload data and also a function that
    gets triggered when the request is successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: jQuery assigns itself to the $ variable. Hence, in the code examples,`$.functionName`
    could be replaced with `jquery.functionName`.
  prefs: []
  type: TYPE_NORMAL
- en: We could go on and show you more use cases where jQuery gets us faster to our
    goal than raw JS would. Instead, in the following exercises, we will use the library
    and gain some first-hand experience with it. Specifically, we will be writing
    code to handle a button-click event, once with jQuery and once with plain JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The dev tools in all modern major browsers have adapted to `$`, but only as
    a wrapper for `document.querySelector`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4.02: Handling Click Events with jQuery'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will identify how jQuery can help us react to events that
    get propagated when the target (in our case, a button) gets clicked. Let''s get
    started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new HTML file including a button tag with the ID `exampleButton`.
    This button will be our target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Find the latest jQuery CDN URL on [cdnjs.com](http://cdnjs.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Read the jQuery documentation for .`on()`([https://api.jquery.com/on/](https://api.jquery.com/on/))
    erytion:![Figure 4.7: JQuery.com Documentation for .on()'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_04_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.7: jquery.com Documentation for .on()'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Load in the CDN URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a script tag containing code that logs a `Hello World` message to the
    console when you click the button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure you place the `script` tag after the button tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the HTML in your browser and open the dev tool console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press the `Click me.` button and verify that it prints `Hello World` to the
    console:![Figure 4.8: Hello world output using jQuery click events'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_04_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.8: Hello world output using jQuery click events'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you handled an event that got fired by the browser on a button
    click using jQuery. The handler you implemented prints `Hello World` to the browser's
    console as soon as the `click me` button is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: You also saw how easy it is to use a library such as jQuery to do work that,
    otherwise, you would need to do manually.
  prefs: []
  type: TYPE_NORMAL
- en: Handling a click event, however, is not particularly hard to do in vanilla.js
    either, as you'll see in the next exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4.03: Handling the Same Event with Vanilla.js'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In contrast to the previous exercise, this one demonstrates how to create a
    handler that gets triggered on a click event using plain JavaScript. Let''s get
    started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new HTML file that includes a button tag with the ID exampleButton:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a script tag containing vanilla.js code that logs a `Hello World` message
    to the dev tools console when you click the button. `addEventListener` is a vanilla
    API provided to us by the browser. It takes `eventType` and `handlerFunction`
    as parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Again, make sure you place the `script` tag after the button tag.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the HTML in your browser and open the dev tools console. Press the "Click
    me." button and verify that it prints "Hello World" to the console:![Figure 4.9:
    Hello World output using Vanilla.js'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_04_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.9: Hello World output using Vanilla.js'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous two exercises, we added an event listener to a button. We did
    so once with the help of jQuery and the other time with no external code and instead
    used the native APIs that the browser provided us with.
  prefs: []
  type: TYPE_NORMAL
- en: UI Animation Using jQuery
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to the use cases for jQuery that we have seen in the code examples
    in the Manipulating the DOM and Making XHR Requests sections and in *Exercise
    4.02: Handling Click Events with jQuery*, there is another important functionality
    that `jQuery` provides us with: animating the user interface (UI).'
  prefs: []
  type: TYPE_NORMAL
- en: Animations contribute to a more engaging website and can mean that your users
    enjoy the experience of using your application more. Often reactions to user input
    are animated to highlight the fact that the interaction has been acknowledged
    or that something has changed. For example, appearing elements could be animated
    or placeholders inside of input fields. Proceed with the following exercise to
    implement the former UI animation example yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4.04: Animating a "Peek-a-boo" on Button Click'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will build on the knowledge you have gained regarding
    how to handle events using jQuery. The relevant part, however, will be animating
    an element on the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever the `"Peek…`" button is clicked, the `…a-boo` headline will show up.
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new HTML file that includes a button tag with the ID `Peek...`, a
    headline with the ID `…a-boo`, and a `display: none` style attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the latest `jQuery` CDN URL, from `cdnjs.com` (see *Exercise 2, Handling
    Click Events with jQuery, step 2*), inside a script tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a script tag containing the code to select the peek button and add an
    `onClick` event listener:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the new script tag, write additional code to select the `aboo` headline
    and use the `jQuery.fadeToggle` function to animate the headline so that it''s
    fading in and fading out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the HTML page in your browser and click the `peek` button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the `aboo` headline fading in and fading out whenever you click
    the `peek` button:![Figure 4.10: Animated output using the Click button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_04_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.10: Animated output using the Click button'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you used `jQuery` to execute yet another type of task in the
    browser. Animations in UIs can be as simple as our fading example, but they can
    also be very complex when building games or creating 3D animations.
  prefs: []
  type: TYPE_NORMAL
- en: By now, you have an idea of what jQuery, and also other libraries or frameworks,
    can help you do. In the next section, we will explore why and when it may be wiser
    to renounce external source code.
  prefs: []
  type: TYPE_NORMAL
- en: Frameworks versus Core JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've spoken a lot about why, how, and in what situations to use libraries.
    But we are yet to discuss when and why it would be a better idea not to rely on
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, all of the things that frameworks and libraries do can be done
    by ourselves. In a business context, or for the sake of development speed, however,
    we usually decide to buy them when facing the "make-or-buy" decision. But sometimes,
    we should keep in mind that adding external sources to our program or even founding
    it on top of these sources expands the amount of source code we have. Increasing
    the overall size of the necessary resources is particularly unpleasant for us
    JavaScript developers who build client-facing applications since we should be
    optimizing for delivering performance (how fast the app loads on the client).
    In general, more JavaScript code leads to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Longer download times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Longer parsing times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More delayed execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Potentially blocked rendering or usability of the app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Though we have complex optimization algorithms such as tree shaking or dead
    code elimination, which help us cope with huge bundle sizes in these cases, often,
    the better choice is to do the task at hand on our own.
  prefs: []
  type: TYPE_NORMAL
- en: Another aspect to consider is the security of our application. Some libraries
    or frameworks may open up attack vectors that we cannot control because we do
    not have full ownership or understanding of the involved code. However, the most
    popular libraries are concerned with the security of their packages and are also
    very fast at releasing patches for known vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: To provide an actual use case that spells out the negative impact a library
    or framework may have on our application, in the following two exercises, we will
    create a list and render it to the screen. The first one will make use of an external
    library, whereas the second one will be written in raw JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4.05: Rendering a List of To-Dos Using React'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we''re going to display a few list tags as bullet points
    of an imaginary `todo` list. To do so, we''ll be using a massively popular library
    called `react.js` and its complementary `react-dom.js`. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new empty HTML file with a head and a div tag with the `root` ID inside
    the HTML body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to `cdnjs.com` and to get the latest `react.js` and `react-dom.js` CDN URLs
    and load the URLs into a script tag inside the HTML head:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `react.js` and `react-dom` to create three list items and render them to
    the `root` `div`-element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the HTML page inside your browser and make sure that your `todo` list items
    are displayed correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the network tab of your browser''s dev tools and have a glance at how
    many kilobytes of JavaScript was loaded:![Figure 4.11: Size of the JavaScript
    that was loaded into the Network tab'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_04_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.11: Size of the JavaScript that was loaded into the Network tab'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you learned where to find and how to use React.js. Although
    in this exercise you simply created a small, static list of To-Dos, `React.js`
    lets you create complex, dynamic UIs without you having to worry about native
    browser APIs that you would normally need to create such UIs. However, as we mentioned
    previously, using a framework also comes at a cost, measured in kilobytes.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will learn how to do the same task without React. Afterward, you will
    be able to understand the kilobytes versus complexity trade-off when building
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4.06: Rendering a List of To-Dos without a Library'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous exercise, we used the trendy library known as React.js to load
    more than `37 KB` (in ZIP format) and a couple of hundred bytes for the HTML,
    including the script tags, to create and render a list of three items. In this
    exercise, we are going to do the same thing, except we will utilize all the functionality
    that''s already provided by the browser. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new empty HTML file with a div tag with an ID of `root` inside the
    HTML body:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a script tag and write some JS to create three list items and render
    them to the `root` div element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the HTML page inside your browser and make sure your `todoListItems` are
    presented correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the network tab of your browser''s dev tools and have a glance at how
    many kilobytes of JavaScript was loaded:![Figure 4.12: Loading the JavaScript''s
    download size without using a library'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_04_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.12: Loading the JavaScript''s download size without using a library'
  prefs: []
  type: TYPE_NORMAL
- en: There's exactly no, that is, 0 KB, additional JavaScript. That gives us 37 KB
    of downloading, parsing, and execution advantage over the method using `react.js`,
    all while achieving the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this is a simplified example. In general, real-world applications
    are more complex than our exercise. Nonetheless, you may often find yourself in
    an analogous situation where performance is a thing to consider and the task can
    plausibly be done using `vanilla.js`.
  prefs: []
  type: TYPE_NORMAL
- en: We have spoken in detail about what libraries and frameworks are and what they
    can help us to do. In order to really grasp what libraries may look like internally
    and how easy it actually is to build one, we'll be creating one ourselves in the
    following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4.07: Creating a Library Yourself'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our library won't be capable of much at first, but you may want to put some
    effort into it and extend it as you wish.
  prefs: []
  type: TYPE_NORMAL
- en: '`HeadlineCreator.js` is our library''s name. It''s a good name because it already
    hints at what it does; that is, it creates headlines. Technically speaking, our
    library will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Be accessible on the global window object of the current browser tab, just
    as we''ve seen with jQuery before: window.headlineCreator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide a single method called createHeadline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow us (through the createHeadline method) to create a headline with the given
    text and append it to a given parent element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take care of error handling for us, for instance, if we forgot to define some
    text to be displayed or passed an invalid selector for the parent element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To verify that our library is working and having an example of its usage, we
    will create, additional to creating the library itself, an HTML page including
    script tags using our HeadlineCreator.js library.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s get started:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create an empty HTML file with a head tag, a body tag, and a div tag with an
    ID of `root` inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load a local JS file with the name `headlineCreator.js` inside a `script` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the `headlineCreator.js` file inside of the same directory you created
    the empty HTML file in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the JavaScript file, create an IIFE and assign it to the `headlineCreator`
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IIFE stands for "immediately invoked function expression." This sounds more
    complicated than it is. IIFEs are functions that are executed at the very same
    moment they are defined. One use case for them in frameworks or libraries is to
    prevent name collisions with variables that are used in the source code. This
    includes the library. For example, using a create function within your library
    can cause weird side effects since this is a very common and ambiguous name. Hence,
    the library could be a different function than it was supposed to be.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Within the IIFE, create another function and name it `createHeadline`. This
    function takes two parameters, `text` and `parentElementSelector`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the IIFE `headlineCreator`, add a r`eturn` statement. This `return`
    statement will return an object with a single key named `createHeadline` that
    has the value of the same name (just like the function name we created in the
    previous step):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Extend the new function with a DOM query to look for an element with the `parentElementSelector`
    that is passed as an argument to the `createHeadline` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Assign the result of the DOM query to a variable called `parentElement`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create an `h1` tag element and set the `innerText` attribute of this
    element to the `text` parameter that is passed to the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, append the created headline to the node that we stored in `parentElement`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Refresh your HTML page and inside the dev tools console, call the `window.headlineCreator.createHeadline`
    function with any parameter you''d like. Then, view the result:![Figure 4.13:
    The window.headlineCreator.createHeadline function in the console and its output'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_04_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.13: The window.headlineCreator.createHeadline function in the console
    and its output'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you''d like to, you can add some error handling and return the newly created
    headline element since that''s considered good practice in such a case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To test the error handling, simply call the `headlineCreator` function without
    the text parameter:![Figure 4.14: Error message in the console'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_04_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.14: Error message in the console'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Last but not least, add a script tag to the HTML file and call the `headlineCreator`
    library from there so that every time the HTML is loaded, a headline is created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.15: The HeadlineCreator.js library created'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C14377_04_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.15: The HeadlineCreator.js library created'
  prefs: []
  type: TYPE_NORMAL
- en: Going through this exercise has taught you that the inner workings of a library
    don't have to be complex and hard to understand. The `headlineCreator` library
    lets the user create and append a headline to a given parent element. Even though
    this is a simplified and almost trivial use case, it demonstrates the basic process
    of building and using a library – that is, having a programmatic problem, finding
    a solution to it, abstracting the complexity, and providing it to others through
    a library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 4.01: Adding an Animation to the To-Do List Application'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this activity, you have been asked to animate the `todo` list application
    that you have been building in the activities from the preceding chapters. Do
    so using one of the following three libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Velocity.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anime.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The resulting `todo` list should animate the to-dos whenever you click the Shuffle
    button. It's up to you what exact animation you use, but nonetheless, I advise
    you to start with something simple, such as fading the to-dos.
  prefs: []
  type: TYPE_NORMAL
- en: 'The high-level steps for the activity are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose one of the frameworks. To gain a better understanding of how to use
    them, search for them online and have a look at their documentation ([https://jquery.com](https://jquery.com),
    [http://velocityjs.org](http://velocityjs.org), [https://animejs.com](https://animejs.com)):'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [cdnjs.com](http://cdnjs.com) and get the jQuery CDN URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the library into the head tag of your existing Todo-List-HTML using a script
    tag. This will enable you to use jQuery within your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside `activity.js`, you need to change the `todoEle` variable. Change it to
    a jQuery element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `replaceListElements` function, you can now use functions on the
    `todoEle` element that jQuery provides to you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hide and clear what's inside the element using the jQuery functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the for loop, create the `liEle` list item element, set the text contest,
    and append it to the `listEle` list element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, slowly fade in the new sorted `todo` list, that is, `listEle`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the HTML in your browser and click the `Shuffle` button. The to-do
    list should fade out, shuffle, and fade in again. You will see the expected output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we'll use the `Velocity.js` method. Go to [cdnjs.com](http://cdnjs.com)
    and get the `velocity.js` CDN URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the library into the head tag of your existing Todo-List-HTML using a script
    tag. This will allow you to use `velocity.js` within your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `replaceListElements` function, you can now use `Velocity.js` to
    hide (by setting opacity to 0) the list element, `listEle`, and then empty the
    elements inside of it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To fade the list element back in, animate `listEle` using `Velocity.js` and
    set the opacity to 1\. Set the code after the `for` loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the HTML in your browser and click the `Shuffle` button. The to-do
    list should fade out, shuffle, and fade in again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, using the `Animae` method, go to [cdnjs.com](http://cdnjs.com) and
    get the `Anime.js` CDN URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load the library into the head tag of your existing Todo-List-HTML using a `script`
    tag. This will allow you to use `Anime.js` within your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `replaceListElements` function, you can now use `Anime.js` to move
    (by using `translateX = -1000`) the list element, `listEle`, out of view and then
    empty the elements inside of it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To show the newly shuffled to-do list, use Anime.js to animate the `listEle`
    list element back into view (`translateX = 0`). Do so inside a timeout to ensure
    that the shuffling has been done already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, open the HTML in your browser and click the `Shuffle` button. The to-do
    list should fade out, shuffle, and fade in again. It should appear as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.16: Animated todo list on click'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C14377_04_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.16: Animated to-do list on click'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this activity can be found on page 719.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a dive into the vast world of JavaScript libraries.
    We started with an explanation of the terms library and framework. From there,
    we had a look at a few popular frameworks and what they can help us with. The
    exercises in this chapter demonstrated where we can find external packages and
    how we can make use of them. Some of the things we did with these libraries included
    creating fading effects, removing duplicated entries from a list, and rendering
    DOM elements to the document. We discussed the disadvantages of using external
    source code as well. However, the biggest achievement of this chapter was creating
    our own library that helped us create headlines. We finished this chapter by making
    use of various libraries to enhance our to-do list with some nice UI effects.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will show us how to work with data in JavaScript. We will gain
    an understanding of how data is represented, how it can be passed around, and
    how specific types can be cast into different types.
  prefs: []
  type: TYPE_NORMAL
