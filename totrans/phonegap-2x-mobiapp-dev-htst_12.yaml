- en: Appendix B. InstallingShareKit 2.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's astonishing, quite frankly, that there's no system-defined framework on
    iOS that enables easy sharing across many different services. iOS 5 does provide
    the Twitter framework, and iOS 6 expands on it by providing the Facebook framework,
    but there's no system-defined framework that you can use to easily share to a
    wider variety of services. Maybe iOS 7 will address that need but don't hold your
    breath.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, there is an open source framework called ShareKit that helps to
    address this. It gives us an easy way to share to any number of services (assuming
    one has API keys for each), and it's not hard to call from PhoneGap. Unfortunately,
    installing it is also a royal pain.
  prefs: []
  type: TYPE_NORMAL
- en: We've listed the steps that worked for us as follows. Some of these steps come
    from ShareKit's Wiki at [https://github.com/ShareKit/ShareKit/wiki/Installing-sharekit](https://github.com/ShareKit/ShareKit/wiki/Installing-sharekit),
    so it would be a good idea to refer to that document as well.
  prefs: []
  type: TYPE_NORMAL
- en: You need to get the ShareKit files. ShareKit recommends using Git to do this,
    or you can use our copy – it is your option. Frankly, it will be easier to use
    the copy in the `Submodules` directory in our code package. It won't be the latest
    version of ShareKit, but it has the required source code changes to work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add ShareKit to the project using the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to `Submodules/ShareKit` and drag `ShareKit.xcodeproj` to your project
    as shown in the following screenshot:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![InstallingShareKit 2.0](img/9403_B_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We need to make various adjustments to permit ShareKit to compile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to your project's settings, click on **Build Phases**, and expand **Target**
    **Dependencies**. Add the **Static Library (ShareKit)** and **Resource Bundle**
    **(ShareKit)** dependencies as shown in the following screenshot:![InstallingShareKit
    2.0](img/9403_B_02.jpg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand **Link Binary With Libraries** and add **libShareKit.a** as shown in
    the following screenshot:![InstallingShareKit 2.0](img/9403_B_03.jpg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Expand **Copy Bundle Resources** and copy Sharekit''s resource bundle (located
    in the ShareKit subproject under the `Products` folder and named `ShareKit.bundle`)
    to the list as shown in the following screenshot:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![InstallingShareKit 2.0](img/9403_B_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Next we need to adjust the header search paths and linker flags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to **Build Settings**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `user header`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the row named **User Header Search Paths**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add **Submodules** and check the checkbox next to the new entry. It should look
    like **Submodules/**** as seen in the following screenshot:![InstallingShareKit
    2.0](img/9403_B_05.jpg)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Now search for `other linker`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the row named **Other Linker Flags**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add `-all_load` and, on a separate line, `-ObjC`, if not already present as
    shown in the following screenshot:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![InstallingShareKit 2.0](img/9403_B_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We need to add the various Apple Frameworks this plugin requires:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the **Summary** tab.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to **Linked Libraries and Frameworks**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `SystemConfiguration.framework`, `Security.framework`, `MessageUI.framework`,
    `CFNetwork.framework` (required for Flickr sharing), `CoreLocation.framework`
    (Required for FourSquare sharing), `Twitter.Framework` and `CoreFoundation.framework`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make `CoreFoundation.framework` **Optional** as shown in the following screenshot:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![InstallingShareKit 2.0](img/9403_B_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: At this point you should be able to build the project with no errors.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may receive an error regarding a failure to find a protocol definition if
    you aren't using our copy of ShareKit. This occurs on the Flickr code; to get
    rid of the error, just remove `OFFlickrAPIRequestDelegate`, on the line causing
    the error. Since we don't use Flicker in the examples, this won't cause a problem.
    (It might, however, should you decide to use Flickr in the future.)
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to obtain API keys for the services we intend on using. In our project,
    we used Twitter, Facebook, and ReadItLater (now Pocket). You''re free to use whatever
    services you would like but you must use your own API keys to do so. (Our code
    package does not provide you with API keys.) Visit [https://github.com/ShareKit/ShareKit/wiki/3rd-party-api-links](https://github.com/ShareKit/ShareKit/wiki/3rd-party-api-links)
    for some good information about how to obtain these keys. Please refer the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We have to configure ShareKit 2.0 with these keys so create a new file in XCode
    and set it to subclass `DefaultSHKConfigurator`. We used `MySHKConfiguration`
    for the name, but you can use whatever you like. Be sure to save this new file
    to your project and not the subproject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look at ShareKit | Classes | ShareKit | Sharers | Configuration | DefaultSHKConfigurator.m
    for the methods you can override. Each of these is labeled with comments indicating
    the code specific to each social networking service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the code you need to override and paste it into your own `configurator`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alter each method to return the appropriate API key, secret, or other string.
    Here''s an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Navigate to your project''s `/Classes/AppDelegate.m` file and add the following
    at the end of the `didFinishLaunchingWithOptions:` method, just prior to the return
    statement (assuming your file is named `MySHKConfigurator`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also add the following code to the import section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to enable offline sharing (optional):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `[SHK flushOfflineQueue];` just below our newly added code in the last step.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you''re supporting Facebook, you need to support Single Sign On (SSO):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code at the end of the `handleOpenURL:` method in `AppDelegate.m`
    (replacing the `return YES;` statement):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a custom URL scheme to your project''s `info.plist` file:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add **URL Types**
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add **Item 0**
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add **URL Schemes**
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add **Item 0** with a value of "`fb`" and your app ID from Facebook
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![InstallingShareKit 2.0](img/9403_B_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: To determine how your `AppDelegate.m` file should look when complete, verify
    your file against ours in the downloadable code package.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re almost done; all we need now is to indicate which social networks we
    don''t support:'
  prefs: []
  type: TYPE_NORMAL
- en: COPY the `SHKSharers.plist` file from the `ShareKit` subproject into your project.
    Be sure to name it something different, like `MySHKSharers.plist`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the rows corresponding to the networks you don't support. Here's an example
    of ours:![InstallingShareKit 2.0](img/9403_B_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the end of your `configurator` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At this point, you should have the ShareKit framework integrated into your project.
    You'll want to refer to [Project 2](ch02.html "Chapter 2. Let's Get Social!"),
    *Let's Get Social!* to finish integrating it with the ShareKit PhoneGap plugin.
  prefs: []
  type: TYPE_NORMAL
- en: I wish I could give you more to watch out for regarding build errors. Unfortunately,
    every time I do this, I seem to come across new errors I hadn't seen the time
    before. (The Flickr error previously in this document is a good example!) It usually
    takes a cross-your-fingers-and-hope methodology to fix these kinds of errors (such
    as my removal of the protocol causing the error), but removing the error itself
    might not always work. If you have problems, it would be a good idea to ask the
    PhoneGap community or the ShareKit community if they have any suggestions.
  prefs: []
  type: TYPE_NORMAL
