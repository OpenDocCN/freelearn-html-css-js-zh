- en: Getting Started with AWS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All major public cloud vendors currently provide serverless products. In this
    book, the focus will be on AWS, which is often considered the best option with
    regards to features, costs, and reliability. As we need to use a large number
    of AWS services throughout the book, this chapter introduces them to help you
    to get familiar with the building blocks of our sample application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'The main topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Handling user accounts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the AWS, CLI, and the SDK services
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying your first Lambda function
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other AWS serverless products
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The architecture of our sample application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Estimating costs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After this chapter, you will be able to start playing with AWS.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Web Services
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS is the largest cloud vendor in terms of revenues. Often considered the
    best with regards to features, it offers great serverless products. This is why
    we have chosen AWS. If you prefer to use another cloud vendor, the following providers
    are other great options for serverless:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '**Google Cloud Engine**: This is where you can use Google Cloud Functions for
    serverless code execution with Node.js, and Google Cloud Datastore as a serverless
    database. Also, Google has integrated the Firebase platform, which offers many
    tools and serverless services for mobile and web applications like storage, authentication,
    and messaging.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Azure**: This offers Azure Functions for serverless code execution,
    supporting C#, Node.js, Python, and PHP.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IBM Cloud**: This offers IBM Bluemix OpenWhisk for serverless code execution,
    supporting C#, Node.js, Java, and Swift.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All code examples in this book were designed for AWS using Node.js. They can
    be ported to other clouds, but this won't be an easy task. As previously stated
    in [Chapter 1](41e30804-d6ff-4759-9388-5e8734fed26f.xhtml), *Understanding the
    Serverless Model*, one of the disadvantages of serverless is the vendor lock-in.
    However, you can use this book to learn the concepts and maybe mix services from
    different vendors. For example, you could use Azure Functions with Amazon SimpleDB.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: If you are just starting with AWS and don't have any previous experience, that's
    not a problem since we'll start right from the basics. You can start by creating
    a new account at [https://aws.amazon.com](https://aws.amazon.com). For 12 months,
    you benefit from a free tier ([https://aws.amazon.com/free](https://aws.amazon.com/free))
    that is designed to enable you to learn and get hands-on experience for free while
    building demo applications. There are also some services that offer a permanent
    free tier that goes beyond the 12 months period.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'The next sections will cover a selection of services that will be used in this
    book. Note that AWS has an official categorization of products ([https://aws.amazon.com/products](https://aws.amazon.com/products))
    that is different from this book''s categories. This is because, instead of grouping
    services in their main field of application, we are grouping them based on how
    they will be used in our use case. For example, the IoT service will be used for
    notifications and not to connect devices. Also, Cognito is commonly used in mobile
    applications, but we will use its security features for a website:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Security services
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS IAM
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Cognito
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Management
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS SDKs
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CLI
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CloudFormation
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon CloudWatch
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Frontend services
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon S3
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon Route 53
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon CloudFront
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Certificate Manager
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Messaging and notifications
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon SNS
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS IoT
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Backend services
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Lambda
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon API Gateway
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Database services
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon SimpleDB
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon DynamoDB
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling user accounts and security
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start covering security topics because you need to know how to properly
    configure user access and how to give permissions to the tools that we'll use
    to automate our infrastructure.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: AWS IAM
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create your AWS account, you receive a root user with full access.
    It can create/delete and start/stop any service. That's great for learning, but
    you shouldn't use it when developing a real project. In information security,
    the principle of least privilege requires that a user or program must be able
    to access only the information or resources that are necessary for its legitimate
    purpose. In case your access keys are compromised, the damage will be reduced
    if the access scope is restricted.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Traceability is another important aspect. You shouldn't share your user with
    others. It's really important that each person has their own user. AWS offers
    CloudTrail as a tool to track user activity and API usage.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: So, you need to learn how to create user accounts and application keys with
    restricted access using **Identity and Access Management** (**IAM**). As we don't
    have applications keys yet, we will configure security using the IAM Management
    Console.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Creating users and groups
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take a look at the following steps to learn how to create a user and associate
    a group to restrict the user access:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'Browse to the IAM website at [https://console.aws.amazon.com/iam](https://console.aws.amazon.com/iam):'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/513f7b47-e98b-4c31-9b9f-d2920f82284a.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: Click on Users in the left-hand side menu.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose Add user as shown in the following screenshot:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3b358138-67d3-4f21-8fe0-0ef34a02cf09.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: Type a username. Here, you can add multiple users at once by clicking on the
    Add another user option.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the Programmatic access box to enable API access using the CLI and the
    SDK.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Next: Permissions, as shown in the following screenshot:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4499a64a-687f-4151-b74c-3e4223a7f082.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to create a group for this user. If you don''t have one already,
    click on Create group:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0e0c7185-8c96-44a7-a1a9-721de4acd827.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: 'Choose a group name and select a policy. In this example, we will use a **Simple
    Storage Service** (**S3**) policy with full access. Click on Create group to continue
    and then click on Next: Review:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77916f00-bcc4-485d-ab7c-0c883f7d722a.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: 'Review the selected data and click on Create user:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/78a4cefe-346c-4441-a83d-5d639d6a8360.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: 'Write down the access key ID and secret access key displayed in the Access
    key ID and Secret access key boxes. They will be needed later to configure the
    CLI and the SDK:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/83b69481-113b-436d-8661-34f247c81363.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: In this chapter, we will run examples for S3, SNS, Lambda, and API Gateway.
    You can take the opportunity and give proper access to each of these services.
    The **AdministratorAccess** policy type gives full access to all AWS resources
    and should be avoided if you are using this account to deploy applications to
    production.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Sign in with a non-root user account
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The previous user was created with programmatic access only. You can edit the
    user or create another one to allow access to the Management Console by performing
    the following steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Add user screen, you need to check the AWS Management Console access
    option:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c7ba1f20-65c0-43ba-b9ed-b0a8277e9368.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: 'You can keep the Autogenerated password and Require password reset options
    checked. After selecting a group and confirming, you will receive a password and
    a link to access the AWS account with this non-root user:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ed6ccf70-cd3e-47bb-bdff-702bd4967118.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: The access link has the format as `https://your_aws_account_id.signin.aws.amazon.com/console`.
    You just need to follow the link and type your new credentials.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you don''t want to disclose the AWS Account ID or if you prefer to use a
    friendly name, like your company name, you can create an account alias. On the
    IAM Console Management, select Dashboard and click on Customize:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/189ae6d3-ca47-4a77-beba-086f140dec1c.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: 'Now, the user can sign in using a link that follows this format: `https://your_alias.signin.aws.amazon.com/console`'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon Cognito
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Handling authentication in a secure way is a complex problem, but this use case
    is so common that many frameworks and services were built dedicated to solve it.
    Nowadays, you just need to copy a few lines of code and you are good to go.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Cognito is Amazon's solution for this problem. More than solving how you authenticate
    accounts, it provides an easy way to sync data between different devices. When
    you log in using a Cognito account, you receive a temporary AWS token that is
    used to store and retrieve data specific to the user, like preferences, user profile,
    or saved game data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: We'll explore more about this service through code examples in [Chapter 8](5778526b-7b49-48bd-8fc8-f5285baa64c1.xhtml),
    *Securing the Serverless Application*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Managing AWS resources
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All services offered by Amazon are configured through RESTful interfaces named
    AWS API. You can access them using the following services:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: AWS Management Console
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS SDKs
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CLI
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Take look at the following diagram, which depicts the services offered by Amazon:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6321638-e3db-4d94-967a-43a8765c2437.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
- en: Rough schematic of the AWS architecture
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: AWS Management Console
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The console is the graphical user interface provided by Amazon and is accessed
    through the official website at [https://console.aws.amazon.com](https://console.aws.amazon.com).
    It's the easiest interface for beginners and useful to learn new services, but
    it's not complete. There are some features that can't be accessed or configured
    using the console, such as managing your SimpleDB data. Also, in some cases, it
    requires a lot of manual work. If you have a repetitive task, it's better to automate
    it using the SDK or the CLI.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: AWS SDKs
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SDK is the best way to manage your AWS resources through reusable code.
    Using the SDK, you can automate your infrastructure and handle errors using very
    simple commands. There are SDKs for many different programming languages like
    Java, Python, Ruby, and others. In this book, we will use exclusively the SDK
    for Node.js. The official documentation is available at [http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: All code examples in this book use Node.js, which is a cross-platform JavaScript
    runtime with an event-driven model. Basic knowledge of Node.js is expected from
    the reader since we will not cover the basics. Also, we will use Node's default
    package manager, `npm`, to install dependencies.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s learn about using the SDK for Node.js by performing the following steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Start a new Node project using `npm init` and run the npm command to install
    the AWS SDK:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After installing, you need to set the access keys that will be used by the SDK
    to connect to AWS. These keys were generated in the previous section, when we
    created a new user.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following are a few options to set the credentials:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting the credentials with hardcoded keys
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a JSON file on disk
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a credentials file
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting environment variables
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You should always avoid hardcoding AWS keys, especially in open source projects
    on GitHub. You don't want to risk accidentally committing your private keys.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'I prefer to configure them through environment variables. If you are running
    on macOS or Linux, add the following lines to the `~/.bash_profile` file. Replace
    `YOUR-KEY` and `YOUR-REGION` by the real values:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you are running on Windows, execute the following commands on command prompt
    as the admin, replacing the values of the keys and region:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you don't have a preferred region, you can use `us-east-1` (Northern Virginia,
    US East). When you use the AWS Management Console, you can set the region where
    you are going to manage the resources through the upper-right drop-down menu.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both the configurations are persistent, but they will work only for the next
    time that you open the command line.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'You can test your setup creating a new file named `index.js` and running the
    following code to list your S3 buckets. As a simplified definition, you can consider
    a **bucket** as a repository of files. Now, if you have proper access, this example
    will return your bucket list or an empty array, if there is none. If you don''t
    have access or had a problem setting the credentials, it will return an error:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: AWS CLI
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The CLI is the command-line interface. For experienced users, it''s a great
    tool to access information and manage resources. If you already have Python installed,
    you just need to run `pip`, which is the default package manager for Python, to
    install the CLI:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The configuration of the CLI is very similar to the one used by the SDK. The
    only difference is that you need to add another environment variable: `AWS_DEFAULT_REGION`.
    You need this because the SDK uses `AWS_REGION` instead of the `AWS_DEFAULT_REGION`
    variable.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'To test if your setup is correct, you can execute the `ls` (list) command to
    list S3 buckets:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Considering an AWS account with one bucket, the preceding command line derives
    the following output:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12e70c2d-8c24-4ce0-9999-56cfae4ed6c0.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: AWS CloudFormation
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CloudFormation gives to developers the possibility to script the entire infrastructure
    using templates. This approach is called as *Infrastructure as a Code*. It's a
    powerful feature because it makes it easy to reproduce the configuration of servers
    and resources into another region or in a different account. Furthermore, you
    can version control your scripts to help you with the development of your infrastructure.
    As a quick start, AWS offers many sample templates ([https://aws.amazon.com/cloudformation/aws-cloudformation-templates](https://aws.amazon.com/cloudformation/aws-cloudformation-templates))
    for common use cases.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will not use CloudFormation directly, but in the next chapter,
    we'll start using the Serverless Framework that extensively uses CloudFormation
    under the hood to manage resources. That's how you can easily duplicate your solution
    to different environments, making a production deployment an exact copy of the
    development or staging environment.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Amazon CloudWatch
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CloudWatch is a monitoring service for your AWS resources. It is often used
    to monitor virtual machines, but it is not restricted to it and plays an important
    role even when your operation is based only on serverless functions. With CloudWatch,
    you can monitor errors, throttles, number of invocations, duration, and costs.
    You can also expand monitoring further with custom plugins.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: This subject will be covered in [Chapter 10](3c6f35a1-ca69-49db-ba87-f9b37af86ced.xhtml),
    *Testing, Deploying, and Monitoring*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Frontend services
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section describes the main services related to frontend development. While
    an introduction is made here, you will find detailed examples in [Chapter 4](274d8aba-8e7e-4c5e-b55b-a8e1797d3057.xhtml),
    *Hosting the Website*, when we will host our application frontend using a serverless
    approach.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Amazon S3
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Amazon Simple Storage Service** (**S3**) is a service where you can save
    any type of file such as images, log files, and backups. Starting here with a
    bit of nomenclature, Amazon calls each file as an **object** and, to store files,
    you need a root folder that is called as a **bucket**. In your account, you can
    have multiple buckets to better organize your data. You can also have folders
    inside a bucket, but can''t have buckets within buckets.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'An interesting feature is that each file receives a unique URL in the following
    format:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '`https://s3.amazonaws.com/bucketname/filename`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: With this format, the bucket name must be unique through all accounts to guarantee
    unique URLs. It means that you can't create a bucket with a common name like “my-photos”
    because it will already be taken. Be creative and count on luck when choosing
    a name.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: You can restrict the file access if it's a backup or another kind of private
    data, but what we will explore here is to let the files be publicly available
    to store our frontend data. This is a powerful feature. For example, you can use
    it to stream videos. You just need to add a `<video>` HTML5 tag that references
    the URL of an mp4 file. For a nice looking player, you could use something like
    [http://videojs.com](http://videojs.com), which is open source.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: We will take advantage of S3 as it is a very cheap storage service and it has
    the flexibility to share files to build our low cost and serverless frontend.
    In our bucket, we'll add all static files of our frontend, including HTML, CSS,
    JavaScript, images, and so on. With proper configuration, which will be detailed
    in [Chapter 4](274d8aba-8e7e-4c5e-b55b-a8e1797d3057.xhtml), *Hosting the Website*,
    it will be ready to serve our content with high availability, scalability, and
    low costs.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Using S3 with the CLI
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Management Console is very useful to upload and download files from S3,
    but so is the CLI. Let''s play with the CLI in this section to gain more familiarity.
    We will create a bucket and store a file by performing the following steps. Those
    will be useful later for the AWS Lambda demo:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'First, choose a bucket name and use the make-bucket command:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, create a file named `test.txt` and write something to it.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the file to your new bucket setting the **Access Control List** (**ACL**)
    as public content:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'List the bucket contents using the following command line:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Download the file as `test2.txt` by using the following command line:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For more commands, refer to the official guide at [http://docs.aws.amazon.com/cli/latest/userguide/using-s3-commands.html](http://docs.aws.amazon.com/cli/latest/userguide/using-s3-commands.html).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Route 53
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Route 53 provides a DNS service where you can buy and host your site's domain.
    You may prefer to buy your domain from another seller, like GoDaddy or Namecheap,
    but if you want to serve your serverless frontend using AWS services, you need
    to use Route 53 to host it.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: When you configure a subdomain (like in `mysubdomain.mydomain.com`), you can
    set an A record (IP address) or CNAME (alias to another address), but the root
    domain (`mydomain.com`) requires an A record. If you host your frontend using
    S3, you receive an endpoint to set a CNAME record, but you don't get a fixed IP
    to set an A record. Since Route 53 is an AWS service, it accepts an S3 endpoint
    in the A record option and solves this issue.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your domain requires a simple setup, but it often confuses web developers
    who are not used to DNS management. This service will receive more attention later,
    specifically in [Chapter 4](274d8aba-8e7e-4c5e-b55b-a8e1797d3057.xhtml), *Hosting
    the Website*.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Amazon CloudFront
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CloudFront is a **Content Delivery Network** (**CDN**). It is a special service
    with the objective of improving your website speed and availability. It achieves
    this by reducing the distance between users and files using Amazon's infrastructure
    around the world, which contains more than 60 edge locations, where each one of
    them can be used to host copies of your files.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'A signal traveling at light speed from Sydney (Australia) to New York (USA)
    takes 53 milliseconds. A ping message needs a roundtrip, covering twice the distance
    and taking double the time. Also, there are other factors that increase this time:
    light travels 33% slower on fiber optics (glass), there is no straight line connecting
    both cities, and equipment like repeaters and switches will slow down transfer
    speeds. The result is a measured latency between 200 milliseconds and 300 milliseconds.
    By comparison, providing the content in the same city may reduce the latency to
    15 milliseconds.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: This difference is usually not significant for most applications. In a serverless
    website, the cold start delay has a bigger impact. If your use case is very sensitive
    to high latencies, you should avoid serverless or you can use CloudFront to minimize
    the impact, at least in the frontend.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: To reduce costs, CloudFront won't replicate your content automatically throughout
    the world. It will replicate only where a demand for it exists. For example, when
    a request is made from a British city, the DNS will route the request to the nearest
    edge location and if it does not have yet a local copy of the file, it will be
    copied temporarily (cached). When another user in a nearby city requests the same
    file, it will benefit from a lower latency and fast response.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: AWS Certificate Manager
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Certificate Manager is a service where you can request free SSL/TLS certificates
    to make your website support HTTPS. A certificate used to be an expensive purchase
    for small sites, ranging from US$ 100 to US$ 500 per year. To help make certificates
    (and HTTPS) accessible to everyone, Let's Encrypt ([https://letsencrypt.org](https://letsencrypt.org))
    was created as a nonprofit certificate authority company, which operates based
    on donations and sponsorship. You can get free certificates and they will be accepted
    by all major browsers.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Following Let's Encrypt, Amazon launched its own service named AWS Certificate
    Manager. It's restricted to AWS customers, but it's also free and easier to use.
    Once you issue a new certificate and associate it with a CloudFront distribution,
    Amazon will also be responsible by automatically renewing the certificate when
    necessary. We will cover this service in [Chapter 4](274d8aba-8e7e-4c5e-b55b-a8e1797d3057.xhtml),
    *Hosting the Website*.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Messaging and notifications
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section covers which services you can use on AWS to send notifications
    to your users.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Amazon SNS
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon **Simple Notification Service** (**SNS**) implements the publish-subscribe
    messaging pattern. When you create an SNS topic, it becomes available for other
    services to subscribe to it. If someone publishes a message in this topic, all
    subscribed services will be alerted.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: It's a very simple and powerful service. You can use it to dynamically attach
    different services that are able to handle a specific kind of notification. For
    example, an application can send a notification to an SNS topic to alert that
    you have received a new file to process. You can subscribe to this topic using
    an HTTP endpoint and SNS will send a message to your web service with the file
    location that needs processing. Later, you can add another endpoint, using a Lambda
    function programmed to do another kind of processing.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to create a simple demo using the CLI as
    an example:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an SNS topic using the following command line:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result is an **Amazon Resource Name** (**ARN**) that you need to save.
    The ARN will be created with a format of this example: `arn:aws:sns:us-east-1:1234567890:email-alerts`'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Subscribe to a topic using the e-mail protocol, so you will receive an e-mail
    every time that an application publishes to this topic:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Open your e-mail account and confirm that you want to subscribe to events.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Publish a test message and see it working by using the following command line:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For more commands, refer to the official guide at [http://docs.aws.amazon.com/cli/latest/userguide/cli-sqs-queue-sns-topic.html](http://docs.aws.amazon.com/cli/latest/userguide/cli-sqs-queue-sns-topic.html).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: AWS IoT
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS IoT (Internet of Things) will be used in our solution to handle serverless
    notifications. Although the name indicates the usage of IoT devices, we will use
    this service exclusively for users connected through browsers. This is becasuse
    hooking a web page into a notification service to receive updates, through a subscription
    mechanism and not data polling, requires the usage of WebSockets, which are supported
    by IoT and not supported by Amazon SNS. So, although the IoT name may sound as
    a strange choice, we will use it because it is the only AWS service capable of
    handling our use case.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: AWS IoT implements the publish-subscribe pattern using the **Message Queuing
    Telemetry Transport** (**MQTT**) protocol. We will see code examples in [Chapter
    9](ab2add3a-931b-478c-9fbf-039ba2a637a1.xhtml), *Handling Serverless Notifications*,
    while implementing live comments for product review pages of our sample website.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Backend services
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will go through the services that are needed to build the
    backend with some practical examples.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: AWS Lambda
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lambda is the flagship product of the serverless concept. The ability to run
    functions on demand with zero administration and its particular pricing model
    is the main drive that aroused interest in the developer community. We can say
    that we have serverless databases, serverless notifications, and serverless frontends,
    but those are merely extensions of the main feature, that is, serverless code
    executions.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Lambda currently only supports Node.js (JavaScript), Python, Java, and C# languages,
    but there is a third-party framework named Apex ([https://github.com/apex/apex](https://github.com/apex/apex))
    that adds support for Go, Rust, and Clojure by injecting Node.js shims in the
    deployment build.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Lambda function
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we will use the Serverless Framework extensively to make the deployment
    of Lambda functions easier; however, to see how useful the framework is, in this
    chapter, we will use the AWS Management Console for comparison.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: We will now create a Lambda function to process log files. This function will
    be triggered when a new log file is added to an S3 bucket and the result of the
    Lambda function is to create an SNS notification if there is an error in the file.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following steps, which are necessary to execute:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'Browse the following link: [https://console.aws.amazon.com/lambda](https://console.aws.amazon.com/lambda).
    Select Get Started Now to start creating a new function:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f854341a-2312-4616-98de-8c9d5b851c83.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
- en: 'AWS offers many templates with sample configuration and code. For example,
    you could use a template of a Lambda function that processes bounced e-mails.
    This option is interesting for marketing campaigns to remove e-mail addresses
    that don''t exist. However, in this example, we will select a Blank Function template:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9668324f-0ea3-4845-bf0b-0df8897434c2.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
- en: 'A Lambda function can be triggered by many different sources. In the next screen,
    you will see a list of all available options. Select S3:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0da9fbe4-2bc4-4a4a-a0e5-04766d7a7370.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
- en: 'On a side note, take a look at some use cases of the available triggers:'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon S3: You can select a bucket name with Event type as Object Created (All)
    and Prefix `images/`. In this setting, when you upload an image to this bucket
    within the images folder, you will trigger a Lambda function for post-processing
    and image optimization.'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SNS: You can use this service to handle notifications. For example, you could
    create an SNS topic named `Process Order` that would be activated by your application
    when a new order is received. SNS could be configured to send an e-mail for a
    specific list of employees and trigger a Lambda function to execute some logic.'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CloudWatch Logs: This service helps you to monitor your AWS resources and take
    automated actions. You could trigger Lambda functions to handle alert messages
    and execute specific actions according to its content.'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After selecting S3, you will be presented with some configuration options. Select
    the bucket that we have created previously with the CLI. For the Event type, select
    Object Created (All) to trigger the function whenever a new file is created. For
    Prefix, type `logs/` to consider only files in the logs folder and in the Suffix,
    type `txt` to consider only text files. Finally, check the Enable trigger option
    and click on Next:![](img/92ee7bca-6327-4131-a6b0-56c68a635a6b.png)
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type a name for your Lambda function, for example, `processLog`, and select
    the Node.js 6.10 option for Runtime:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1eb4d49e-a633-4373-bdb7-01297d721911.png)'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now we need to implement the code that will be executed by the Lambda function
    using the Edit code inline option. In this example, we are using `S3.getObject`
    to retrieve the file created and `SNS.publish` to create a notification if there
    is the `error` word in this file. For the SNS topic ARN, you can use the same
    that was previously created with the CLI:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `aws-sdk` module is available for all Lambda functions. If you want to add
    another dependency that is not the `aws-sdk` module or a core module of Node,
    you need to upload a ZIP file to AWS containing your function and the module.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have used the inline option to write the code instead of uploading a
    ZIP file, the code will be placed inside an `index.js` file. Also, the module
    that we have created exports a function named `handler`. In this case, we need
    to configure the Lambda handler with the `index.handler` name. For the Role box,
    we need to create a new one because a Lambda function can''t execute without proper
    access. Even if you create a Lambda using an administrator account, you must give
    explicit permissions for which kind of services and resources the Lambda will
    be able to access:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1d76ac0c-dfcf-4a1d-9d5a-4e59b1e4e9f7.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
- en: 'Type a role name for this role and click on Edit to modify the default policy
    document. Add the following JSON object and finish by clicking on Allow:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need to replace the S3 and SNS ARNs to your respective ARNs.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ced41b18-bc63-4a07-bb51-36dbb670e89f.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
- en: 'Use the following JSON object:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The last step is to configure the Advanced settings. Set the amount of RAM
    memory that should be allocated for this function and the timeout value that AWS
    must wait for this function to finish its execution. You may need to increase
    the timeout value depending on the size of the log files that you are going to
    use for testing:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b91066aa-301f-4c99-96e5-dacb0c361b6f.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
- en: Click on Next and you will be redirected to a Review page where you need to
    confirm the function creation.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To test this function, we can use the Management Console, which lets us create
    custom input events, but, in this case, we can use the CLI to upload a new file
    and trigger the Lambda function. If the file has the word “error”, you should
    receive an e-mail message with the file name.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at the following CLI command to trigger this Lambda function:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you have any issues, you can try using the Management Console to see the
    error message that appears. In this case, use the following JSON object as the
    event trigger, replacing the bucket name:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Amazon API Gateway
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: API Gateway is a service that helps you to build RESTful APIs. You need to configure
    your resources, set the supported HTTP verbs and specify what will handle the
    requests. You can use it to redirect requests to EC2 instances (virtual machines)
    or external web servers, but what we'll explore here is to use it to trigger Lambda
    functions.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Besides, API Gateway has other interesting features. For example, after creating
    your API endpoints, you can use API Gateway to automatically generate a client
    SDK for many different platforms, where you can easily test and distribute it
    to be used by third-party developers. Also, you can create third-party API keys
    to access your content with fine-grained access permissions, request quota limits,
    and throttling.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: In our architecture, API Gateway will act as a thin layer that exists only to
    expose our Lambda functions to the world. Additionally, you can set security controls
    to allow only authenticated users to trigger your code. We are going to use this
    service in the next chapter, where we'll talk about how to configure our endpoints
    using the Serverless Framework, we will see more in [Chapter 6](a225cec3-99da-4be5-8833-f8fdaf0aa819.xhtml),
    *Developing the Backend*, while building our backend code, and lastly, in [Chapter
    8](5778526b-7b49-48bd-8fc8-f5285baa64c1.xhtml), *Securing the Serverless Application*,
    when our security measures will be explained.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Expose your Lambda function using API Gateway
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s use the API Gateway to expose our previous Lambda function to be accessible
    using a URL by performing the following steps:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: First, go to the API Gateway Management Console by visiting this link [https://console.aws.amazon.com/apigateway](https://console.aws.amazon.com/apigateway)
    and click on Create API.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the Create new API header, select the New API option and type the API
    name. For example: `log-processor`:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4ede3bb0-2593-42d4-9638-e634c7f0409e.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
- en: 'Under Resources, click on the Actions dropdown and choose Create Method:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5bcffaf3-00cd-470b-933f-74f4800f3d71.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
- en: In the new dropdown, select the POST HTTP verb.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under - POST - Setup, select Lambda Function as our Integration type. Select
    the region in which you have deployed our previous Lambda function and its corresponding
    name and click on Save button:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5d7e640-9e70-420a-b486-e9ddd28995bf.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
- en: A popup will request that you allow this method to access the Lambda function.
    Accept it.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under Resources, click again in the Actions drop-down and choose Deploy API.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A popup will request a stage to be selected. You can select [New Stage] and
    name it as `dev`:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9367e29e-8f6f-4bcb-b38d-a86cfcfcd029.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
- en: Click on Deploy. The next screen will show where the API Gateway was deployed.
    The URL will follow this format, such as `https://[identifier].execute-api.[region].amazonaws.com/dev`.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you try this URL in your browser, the result will be an authentication error
    that happens because the browser will try a `GET` request that was not defined.
    As we have defined only a `POST` resource, we need another way to test. You can
    use the API Gateway test feature that is accessible under the Resources feature
    in the left menu, followed by selecting the `POST` verb and clicking on Test.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to provide a **Request Body**. In our case, it will be a JSON object
    with a format similar to a new S3 object event:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You just need to change the bucket name for the name that you used previously,
    and the API Gateway will trigger the Lambda function to process the `log1.txt`
    file that we have uploaded before.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another way to test this integration with the API Gateway is using **Postman**,
    which is a very popular tool to test any kind of RESTful APIs. Postman can be
    installed as a Chrome extension or as a macOS application.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Database services
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see a brief explanation about the SimpleDB and DynamoDB
    products. Both of them will be covered in details in [Chapter 7](cb2f92df-5bc3-4c8e-8872-fbee58e5b0be.xhtml),
    *Managing a Serverless Database*.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Amazon SimpleDB
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SimpleDB is a NoSQL database that can be defined as a serverless database because
    it scales automatically, it is highly available without needing to pay for provisions,
    and you are only billed by the seconds that the database engine needs to execute
    your queries.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: You can use SimpleDB to make queries using a SQL-like syntax, but SimpleDB is
    very limited in terms of functionalities. It's so limited that it only stores
    string fields! If you store a datetime data type, you need to save it as a string
    ISO representation to avoid localization issues and to be able to make the `where`
    clauses. If you want to store numbers, use zero-padding. And how can we make `where`
    clauses with negative numbers? It is done by adding a large offset to all numbers
    to avoid storing negatives! As you can see, building a system on top of SimpleDB
    can be hard. There are many considerations and you can have performance problems
    when running with large datasets. Hence, SimpleDB is usually useful only for small
    projects.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see more tips on how to handle data types by following this link: [https://aws.amazon.com/articles/Amazon-SimpleDB/1232](https://aws.amazon.com/articles/Amazon-SimpleDB/1232)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'SimpleDB is the only serverless database offered by AWS. If you want a better
    serverless solution, you would need to try other cloud providers. You currently
    have the following options: Google Firebase storage, Google Cloud Datastore, or
    FaunaDB.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: SimpleDB is one of the oldest AWS services, announced in late 2007\. However,
    it continues to be one of very few services that don't have a Management Console.
    If you want a GUI to easily query and manage your SimpleDB data, you can install
    a third-party solution. In this case, I suggest the **SdbNavigator** **Chrome
    Extension** as a good option. You only need to add an access key and a secret
    key to connect to your database. As a security measure, create a new user account
    using IAM with restricted privileges to SimpleDB.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Amazon DynamoDB
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DynamoDB is a fully managed NoSQL database designed to be highly scalable having
    a fast and consistent performance. Unlike SimpleDB, DynamoDB has all the common
    features that you expect in a NoSQL database and can be extensively used in large
    projects. However, DynamoDB has a flaw for our use case: it is *not* a serverless
    database. It requires provisioning of resources, so you *can''t* say that DynamoDB
    is truly serverless. If you pay for provisioned capacity, you need to worry about
    the *servers* because you may end up provisioning more or less than necessary
    and paying for availability even when no one is using your database.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, AWS has a permanent free tier that is very generous. You can serve
    more than 100 million read/write requests per month for free and this offer is
    not restricted to new AWS users. Considering this advantage, the low price to
    grow your user base, the possibility to automate the throughput provisioning,
    DynamoDB is a good choice for most serverless applications and this is proven
    by the numerous examples of projects and demos created by the serverless community
    using DynamoDB. It is very hard to see SimpleDB being used even for small projects,
    since DynamoDB is free for low usage.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: So, even if you have a large project and end up having to pay for provisioned
    resources that you would not use, DynamoDB requires much less management and can
    be a cheaper option than running a traditional database solution. For all these
    reasons, we are going to cover SimpleDB usage in this book, but our sample application
    will run on DynamoDB.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: The serverless architecture of our online store
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this book, we will build a real-world use case of a serverless solution.
    This sample application is an online store with the following requirements:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: List of available products
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product details with user rating
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add products to a shopping cart
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create account and login pages
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will describe and implement each feature in the next chapters. For a better
    understanding of the architecture, the following diagram gives a general view
    of how the different services that we covered in this chapter are organized and
    how they interact:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df96537f-9214-434f-a13a-afb45b22d41e.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
- en: Estimating costs
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will estimate the costs of our sample application demo based
    on some usage assumptions and Amazon's pricing model. All pricing values used
    here are from mid 2017 and considers the cheapest region, US East (Northern Virginia).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'This section covers an example to illustrate how costs are calculated. Since
    the billing model and prices can change over time, always refer to the official
    sources to get updated prices before making your own estimations. You can use
    Amazon''s calculator, which is accessible at this link: [http://calculator.s3.amazonaws.com/index.html](http://calculator.s3.amazonaws.com/index.html).
    If you still have any doubts after reading the instructions, you can always contact
    Amazon''s support for free to get commercial guidance.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Assumptions
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For our pricing example, we can assume that our online store will receive the
    following traffic *per month*:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: 100,000 page views
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1,000 registered user accounts
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 200 GB of data transferred considering an average page size of 2 MB
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5,000,000 code executions (Lambda functions) with an average of 200 milliseconds
    per request
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Route 53 pricing
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need a hosted zone for our domain name and it costs US$ 0.50 per month. Also,
    we need to pay US$ 0.40 per million DNS queries to our domain. As this is a prorated
    cost, 100,000 page views will cost only US$ 0.04.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: 'Total: US$ 0.54'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: S3 pricing
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon S3 charges you US$ 0.023 per GB/month stored, US$ 0.004 per 10,000 requests
    to your files, and US$ 0.09 per GB transferred. However, as we are considering
    the CloudFront usage, transfer costs will be charged by CloudFront prices and
    will not be considered in S3 billing.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: If our website occupies less than 1 GB of static files and has an average per
    page of 2 MB and 20 files, we can serve 100,000 page views for less than US$ 20\.
    Considering CloudFront, S3 costs will go down to US$ 0.82 while you need to pay
    for CloudFront usage in another section. Real costs would be even lower because
    CloudFront caches files and it would not need to make 2,000,000 file requests
    to S3, but let's skip this detail to reduce the complexity of this estimation.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: On a side note, the cost would be much higher if you had to provision machines
    to handle this number of page views to a static website with the same availability
    and scalability.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: 'Total: US$ 0.82'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: CloudFront pricing
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CloudFront is slightly more complicated to price since you need to guess how
    much traffic comes from each region, as they are priced differently. The following
    table shows an example of estimation:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '| **Region** | **Estimated traffic** | **Cost per GB transferred** | **Cost
    per 10,000 HTTPS requests** |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
- en: '| North America | 70% | US$ 0.085 | US$ 0.010 |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
- en: '| Europe | 15% | US$ 0.085 | US$ 0.012 |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
- en: '| Asia | 10% | US$ 0.140 | US$ 0.012 |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
- en: '| South America | 5% | US$ 0.250 | US$ 0.022 |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
- en: As we have estimated 200 GB of files transferred with 2,000,000 requests, the
    total will be US$ 21.97.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: 'Total: US$ 21.97'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: Certificate Manager pricing
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Certificate Manager provides SSL/TLS certificates for free. You only need to
    pay for the AWS resources you create to run your application.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: IAM pricing
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no charge specifically for IAM usage. You will be charged only by what
    AWS resources your users are consuming.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: Cognito pricing
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each user has an associated profile that costs US$ 0.0055 per month. However,
    there is a permanent free tier that allows 50,000 monthly active users without
    charges, which is more than enough for our use case.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: Besides that, we are charged for Cognito Syncs of our user profiles. It costs
    US$ 0.15 for each 10,000 sync operations and US$ 0.15 per GB/month stored. If
    we estimate 1,000 active and registered users with less than 1 MB per profile,
    with less than 10 visits per month in average, we can estimate a charge of US$
    0.30.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: 'Total: US$ 0.30'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: IoT pricing
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IoT charges starts at US$ 5 per million messages exchanged. As each page view
    will make at least 2 requests, one to connect and another to subscribe to a topic,
    we can estimate a minimum of 200,000 messages per month. We need to add 1,000
    messages if we suppose that 1% of the users will rate the products and we can
    ignore other requests like disconnect and unsubscribed because they are excluded
    from billing. In this setting, the total cost would be of US$ 1.01.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: 'Total: US$ 1.01'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: SNS pricing
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use SNS only for internal notifications, when CloudWatch triggers a
    warning about issues in our infrastructure. SNS charges US$ 2.00 per 100,000 e-mail
    messages, but it offers a permanent free tier of 1,000 e-mails. So, it will be
    free for us.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: CloudWatch pricing
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CloudWatch charges US$ 0.30 per metric/month and US$ 0.10 per alarm and offers
    a permanent free tier of 50 metrics and 10 alarms per month. If we create 20 metrics
    and expect 20 alarms in a month, we can estimate a cost of US$ 1.00.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: 'Total: US$ 1.00'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: API Gateway pricing
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: API Gateway starts charging US$ 3.50 per million of API calls received and US$
    0.09 per GB transferred out to the Internet. If we assume 5 million requests per
    month with each response with an average of 1 KB, the total cost of this service
    will be US$ 17.93.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: 'Total: US$ 17.93'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Lambda pricing
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you create a Lambda function, you need to configure the amount of RAM memory
    that will be available for use. It ranges from 128 MB to 1.5 GB. Allocating more
    memory means additional costs. It breaks the philosophy of avoiding provision,
    but at least it's the only thing you need to worry about. The good practice here
    is to estimate how much memory each function needs and make some tests before
    deploying to production. A bad provision may result in errors or higher costs.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: 'Lambda has the following billing model:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: US$ 0.20 per 1 million requests
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: US$ 0.00001667 GB-second
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running time is counted in fractions of seconds, rounding up to the nearest
    multiple of 100 milliseconds.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, there is a permanent free tier that gives you 1 million requests
    and 400,000 GB-seconds per month without charges.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: 'In our use case scenario, we have assumed 5 million requests per month with
    an average of 200 milliseconds per execution. We can also assume that the allocated
    RAM memory is 512 MB per function:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '**Request charges**: Since 1 million requests are free, you pay for 4 million
    that will cost US$ 0.80.'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compute charges**: Here, 5 million executions of 200 milliseconds each gives
    us 1 million seconds. As we are running with a 512 MB capacity, it results in
    500,000 GB-seconds, where 400,000 GB-seconds of these are free, resulting in a
    charge of 100,000 GB-seconds that costs US$ 1.67.'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Total**: US$ 2.47'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SimpleDB pricing
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take a look at the following SimpleDB billing where the free tier is valid
    for new and existing users:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: US$ 0.14 per machine-hour (25 hours free)
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: US$ 0.09 per GB transferred out to the internet (1 GB is free)
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: US$ 0.25 per GB stored (1 GB is free)
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Take a look at the following charges:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '**Compute charges**: Considering 5 million requests with an average of 200
    milliseconds of execution time, where 50% of this time is waiting for the database
    engine to execute, we estimate 139 machine hours per month. Discounting 25 free
    hours, we have an execution cost of US$ 15.96.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transfer costs**: Since we''ll transfer data between SimpleDB and AWS Lambda,
    there is no transfer cost.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage charges**: If we assume a 5 GB database, it results in US$ 1.00,
    since 1 GB is free.'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Total**: US$ 16.96, but this will not be added in the final estimation since
    we will run our application using DynamoDB.'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DynamoDB
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DynamoDB requires you to provision the throughput capacity that you expect your
    tables to offer. Instead of provisioning hardware, memory, CPU, and other factors,
    you need to say how many read and write operations you expect and AWS will handle
    the necessary machine resources to meet your throughput needs with consistent
    and low-latency performance.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: 'One read capacity unit represents one strongly consistent read per second or
    two eventually consistent reads per second, where objects have a size up to 4
    KB. Regarding the writing capacity, one unit means that you can write one object
    of size 1 KB per second. Considering these definitions, AWS offers in the permanent
    free tier 25 read units and 25 write units of throughput capacity, in addition
    to 25 GB of free storage. It charges as follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: US$ 0.47 per month for every **Write Capacity Unit** (**WCU**)
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: US$ 0.09 per month for every **Read Capacity Unit** (**RCU**)
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: US$ 0.25 per GB/month stored
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: US$ 0.09 GB per GB transferred out to the Internet
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since our estimated database will have only 5 GB, we are on the free tier and
    we will not pay for transferred data because there is no transfer cost to AWS
    Lambda.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: Regarding read/write capacities, we have estimated 5 million requests per month.
    If we evenly distribute them, we will get two requests per second. In this case,
    we will consider that it's one read and one write operation per second.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: We need to estimate now how many objects are affected by a read and a write
    operation. For a write operation, we can estimate that we will manipulate 10 items
    on average and a read operation will scan 100 objects. In this scenario, we would
    need to reserve 10 WCU and 100 RCU. As we have 25 WCU and 25 RCU for free, we
    only need to pay for 75 RCU per month, which costs US$ 6.75.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: 'Total: US$ 6.75'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: Total pricing
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s summarize the cost of each service in the following table:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '| **Service** | **Monthly Costs** |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
- en: '| Route 53 | US$ 0.54 |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
- en: '| S3 | US$ 0.82 |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
- en: '| CloudFront | US$ 21.97 |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
- en: '| Cognito | US$ 0.30 |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
- en: '| IoT | US$ 1.01 |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
- en: '| CloudWatch | US$ 1.00 |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
- en: '| API Gateway | US$ 17.93 |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
- en: '| Lambda | US$ 2.47 |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
- en: '| DynamoDB | US$ 6.75 |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
- en: '| **Total** | **US$ 52.79** |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
- en: It results in a total cost of ~ US$ 50 per month in infrastructure to serve
    100,000 page views. If you have a conversion rate of 1%, you can get 1,000 sales
    per month, which means that you pay US$ 0.05 in infrastructure for each product
    that you sell.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were introduced to the services that will be used throughout
    this book. You already know how to create new AWS users with restricted privileges,
    how to use the AWS CLI and the Node SDK, and what the frontend, backend, and notification
    services are. This chapter finished showing how each service fits in our sample
    application architecture and you learned how to estimate its costs.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll be introduced to the Serverless Framework that plays
    an important role in our development workflow, automating tasks and organizing
    the code. You'll learn how to configure, deploy Lambda functions, and structure
    the beginning of our sample application.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解到在开发工作流程中扮演重要角色的无服务器框架，它能够自动化任务和组织代码。你将学习如何配置、部署Lambda函数，以及如何构建我们示例应用的初始结构。
