- en: Getting Started with AWS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 入门
- en: All major public cloud vendors currently provide serverless products. In this
    book, the focus will be on AWS, which is often considered the best option with
    regards to features, costs, and reliability. As we need to use a large number
    of AWS services throughout the book, this chapter introduces them to help you
    to get familiar with the building blocks of our sample application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 目前所有主要公共云服务提供商都提供无服务器产品。在本书中，我们将重点关注 AWS，它通常被认为是功能、成本和可靠性方面最佳的选择。由于我们需要在整本书中使用大量的
    AWS 服务，因此本章介绍了它们，以帮助您熟悉我们示例应用程序的构建块。
- en: 'The main topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主要主题如下：
- en: Handling user accounts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理用户账户
- en: Using the AWS, CLI, and the SDK services
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AWS CLI 和 SDK 服务
- en: Deploying your first Lambda function
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署你的第一个 Lambda 函数
- en: Other AWS serverless products
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他 AWS 无服务器产品
- en: The architecture of our sample application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们示例应用程序的架构
- en: Estimating costs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 估算成本
- en: After this chapter, you will be able to start playing with AWS.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章之后，你将能够开始尝试使用 AWS。
- en: Amazon Web Services
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon Web Services
- en: 'AWS is the largest cloud vendor in terms of revenues. Often considered the
    best with regards to features, it offers great serverless products. This is why
    we have chosen AWS. If you prefer to use another cloud vendor, the following providers
    are other great options for serverless:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 在收入方面是最大的云服务提供商。通常被认为是功能最好的，它提供了优秀的无服务器产品。这就是我们选择 AWS 的原因。如果你更喜欢使用其他云服务提供商，以下提供者是其他优秀的无服务器选择：
- en: '**Google Cloud Engine**: This is where you can use Google Cloud Functions for
    serverless code execution with Node.js, and Google Cloud Datastore as a serverless
    database. Also, Google has integrated the Firebase platform, which offers many
    tools and serverless services for mobile and web applications like storage, authentication,
    and messaging.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Cloud Engine**：在这里，你可以使用 Google Cloud Functions 以 Node.js 执行无服务器代码，以及
    Google Cloud Datastore 作为无服务器数据库。此外，Google 还集成了 Firebase 平台，该平台为移动和 Web 应用程序提供了许多工具和无服务器服务，如存储、身份验证和消息传递。'
- en: '**Microsoft Azure**: This offers Azure Functions for serverless code execution,
    supporting C#, Node.js, Python, and PHP.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft Azure**：这提供了 Azure Functions 以支持无服务器代码执行，支持 C#、Node.js、Python 和
    PHP。'
- en: '**IBM Cloud**: This offers IBM Bluemix OpenWhisk for serverless code execution,
    supporting C#, Node.js, Java, and Swift.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IBM Cloud**：这提供了 IBM Bluemix OpenWhisk 以支持无服务器代码执行，支持 C#、Node.js、Java 和 Swift。'
- en: All code examples in this book were designed for AWS using Node.js. They can
    be ported to other clouds, but this won't be an easy task. As previously stated
    in [Chapter 1](41e30804-d6ff-4759-9388-5e8734fed26f.xhtml), *Understanding the
    Serverless Model*, one of the disadvantages of serverless is the vendor lock-in.
    However, you can use this book to learn the concepts and maybe mix services from
    different vendors. For example, you could use Azure Functions with Amazon SimpleDB.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有代码示例都是使用 Node.js 为 AWS 设计的。它们可以被移植到其他云平台，但这不会是一个容易的任务。正如在[第 1 章](41e30804-d6ff-4759-9388-5e8734fed26f.xhtml)中之前所述的，*理解无服务器模型*，无服务器的一个缺点是供应商锁定。然而，你可以使用这本书来学习这些概念，也许可以混合来自不同供应商的服务。例如，你可以使用
    Azure Functions 与 Amazon SimpleDB。
- en: If you are just starting with AWS and don't have any previous experience, that's
    not a problem since we'll start right from the basics. You can start by creating
    a new account at [https://aws.amazon.com](https://aws.amazon.com). For 12 months,
    you benefit from a free tier ([https://aws.amazon.com/free](https://aws.amazon.com/free))
    that is designed to enable you to learn and get hands-on experience for free while
    building demo applications. There are also some services that offer a permanent
    free tier that goes beyond the 12 months period.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你刚开始使用 AWS 而且没有任何先前的经验，那不是问题，因为我们将从基础知识开始。你可以从在 [https://aws.amazon.com](https://aws.amazon.com)
    创建新账户开始。在 12 个月内，你可以享受免费层 ([https://aws.amazon.com/free](https://aws.amazon.com/free))，该免费层旨在让你在构建演示应用程序的同时免费学习和获得实践经验。还有一些服务提供超过
    12 个月的永久免费层。
- en: 'The next sections will cover a selection of services that will be used in this
    book. Note that AWS has an official categorization of products ([https://aws.amazon.com/products](https://aws.amazon.com/products))
    that is different from this book''s categories. This is because, instead of grouping
    services in their main field of application, we are grouping them based on how
    they will be used in our use case. For example, the IoT service will be used for
    notifications and not to connect devices. Also, Cognito is commonly used in mobile
    applications, but we will use its security features for a website:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将介绍本书中将使用的一些服务。请注意，AWS 有一个官方的产品分类（[https://aws.amazon.com/products](https://aws.amazon.com/products)），这与本书的分类不同。这是因为，我们不是根据服务的主要应用领域来分组服务，而是根据它们在我们用例中的使用方式来分组。例如，IoT
    服务将用于通知，而不是连接设备。此外，Cognito 通常用于移动应用程序，但我们将使用其安全功能来构建网站：
- en: Security services
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全服务
- en: AWS IAM
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS IAM
- en: Amazon Cognito
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊 Cognito
- en: Management
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理
- en: AWS SDKs
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS SDKs
- en: AWS CLI
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI
- en: AWS CloudFormation
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 云形成
- en: Amazon CloudWatch
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊云监控
- en: Frontend services
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端服务
- en: Amazon S3
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊 S3
- en: Amazon Route 53
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊 Route 53
- en: Amazon CloudFront
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊云前端
- en: AWS Certificate Manager
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 证书管理器
- en: Messaging and notifications
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息和通知
- en: Amazon SNS
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊 SNS
- en: AWS IoT
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS IoT
- en: Backend services
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端服务
- en: AWS Lambda
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Lambda
- en: Amazon API Gateway
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊 API 网关
- en: Database services
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库服务
- en: Amazon SimpleDB
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊简单数据库
- en: Amazon DynamoDB
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊 DynamoDB
- en: Handling user accounts and security
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理用户账户和安全
- en: We will start covering security topics because you need to know how to properly
    configure user access and how to give permissions to the tools that we'll use
    to automate our infrastructure.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将开始介绍安全主题，因为你需要知道如何正确配置用户访问以及如何授予我们用于自动化基础设施的工具的权限。
- en: AWS IAM
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS IAM
- en: When you create your AWS account, you receive a root user with full access.
    It can create/delete and start/stop any service. That's great for learning, but
    you shouldn't use it when developing a real project. In information security,
    the principle of least privilege requires that a user or program must be able
    to access only the information or resources that are necessary for its legitimate
    purpose. In case your access keys are compromised, the damage will be reduced
    if the access scope is restricted.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建你的 AWS 账户时，你会收到一个具有完全访问权限的根用户。它可以创建/删除和启动/停止任何服务。这对于学习来说很棒，但在开发真实项目时你不应该使用它。在信息安全中，最小权限原则要求用户或程序只能访问其合法目的所必需的信息或资源。如果你的访问密钥被泄露，如果访问范围受到限制，损害将会减少。
- en: Traceability is another important aspect. You shouldn't share your user with
    others. It's really important that each person has their own user. AWS offers
    CloudTrail as a tool to track user activity and API usage.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 可追溯性是另一个重要方面。你不应该与他人共享你的用户。确保每个人都有自己的用户非常重要。AWS 提供了 CloudTrail 作为跟踪用户活动和 API
    使用的工具。
- en: So, you need to learn how to create user accounts and application keys with
    restricted access using **Identity and Access Management** (**IAM**). As we don't
    have applications keys yet, we will configure security using the IAM Management
    Console.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你需要学习如何使用**身份和访问管理**（**IAM**）创建具有受限访问权限的用户账户和应用密钥。由于我们还没有应用密钥，我们将使用 IAM 管理控制台配置安全设置。
- en: Creating users and groups
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户和组
- en: 'Take a look at the following steps to learn how to create a user and associate
    a group to restrict the user access:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下步骤以了解如何创建用户并将组关联到用户以限制用户访问：
- en: 'Browse to the IAM website at [https://console.aws.amazon.com/iam](https://console.aws.amazon.com/iam):'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到 IAM 网站 [https://console.aws.amazon.com/iam](https://console.aws.amazon.com/iam)：
- en: '![](img/513f7b47-e98b-4c31-9b9f-d2920f82284a.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/513f7b47-e98b-4c31-9b9f-d2920f82284a.png)'
- en: Click on Users in the left-hand side menu.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单中的“用户”。
- en: 'Choose Add user as shown in the following screenshot:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“添加用户”，如图所示：
- en: '![](img/3b358138-67d3-4f21-8fe0-0ef34a02cf09.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3b358138-67d3-4f21-8fe0-0ef34a02cf09.png)'
- en: Type a username. Here, you can add multiple users at once by clicking on the
    Add another user option.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入用户名。在这里，你可以通过点击“添加另一个用户”选项一次添加多个用户。
- en: Check the Programmatic access box to enable API access using the CLI and the
    SDK.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“程序访问”框以启用使用 CLI 和 SDK 的 API 访问。
- en: 'Click on Next: Permissions, as shown in the following screenshot:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步：权限”，如图所示：
- en: '![](img/4499a64a-687f-4151-b74c-3e4223a7f082.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4499a64a-687f-4151-b74c-3e4223a7f082.png)'
- en: 'Now we need to create a group for this user. If you don''t have one already,
    click on Create group:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要为这个用户创建一个组。如果你还没有，请点击“创建组”：
- en: '![](img/0e0c7185-8c96-44a7-a1a9-721de4acd827.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0e0c7185-8c96-44a7-a1a9-721de4acd827.png)'
- en: 'Choose a group name and select a policy. In this example, we will use a **Simple
    Storage Service** (**S3**) policy with full access. Click on Create group to continue
    and then click on Next: Review:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个组名并选择一个策略。在本例中，我们将使用具有完全访问权限的**简单存储服务**（**S3**）策略。点击创建组继续，然后点击下一步：审查：
- en: '![](img/77916f00-bcc4-485d-ab7c-0c883f7d722a.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/77916f00-bcc4-485d-ab7c-0c883f7d722a.png)'
- en: 'Review the selected data and click on Create user:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查所选数据并点击创建用户：
- en: '![](img/78a4cefe-346c-4441-a83d-5d639d6a8360.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/78a4cefe-346c-4441-a83d-5d639d6a8360.png)'
- en: 'Write down the access key ID and secret access key displayed in the Access
    key ID and Secret access key boxes. They will be needed later to configure the
    CLI and the SDK:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录显示在“访问密钥ID”和“秘密访问密钥”框中的访问密钥ID和秘密访问密钥。稍后您将需要它们来配置CLI和SDK：
- en: '![](img/83b69481-113b-436d-8661-34f247c81363.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/83b69481-113b-436d-8661-34f247c81363.png)'
- en: In this chapter, we will run examples for S3, SNS, Lambda, and API Gateway.
    You can take the opportunity and give proper access to each of these services.
    The **AdministratorAccess** policy type gives full access to all AWS resources
    and should be avoided if you are using this account to deploy applications to
    production.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将运行S3、SNS、Lambda和API Gateway的示例。您可以利用这个机会，为每个服务提供适当的访问权限。**管理员访问**策略类型提供了对所有AWS资源的完全访问权限，如果您使用此账户部署到生产环境，应避免使用。
- en: Sign in with a non-root user account
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用非root用户账户登录
- en: 'The previous user was created with programmatic access only. You can edit the
    user or create another one to allow access to the Management Console by performing
    the following steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 之前创建的用户仅具有程序访问权限。您可以通过以下步骤编辑用户或创建另一个用户，以允许通过管理控制台访问：
- en: 'On the Add user screen, you need to check the AWS Management Console access
    option:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加用户”界面，您需要勾选AWS管理控制台访问选项：
- en: '![](img/c7ba1f20-65c0-43ba-b9ed-b0a8277e9368.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c7ba1f20-65c0-43ba-b9ed-b0a8277e9368.png)'
- en: 'You can keep the Autogenerated password and Require password reset options
    checked. After selecting a group and confirming, you will receive a password and
    a link to access the AWS account with this non-root user:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以保留自动生成的密码和需要重置密码的选项。在选择组并确认后，您将收到一个密码和一个链接，用于使用此非root用户访问AWS账户：
- en: '![](img/ed6ccf70-cd3e-47bb-bdff-702bd4967118.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ed6ccf70-cd3e-47bb-bdff-702bd4967118.png)'
- en: The access link has the format as `https://your_aws_account_id.signin.aws.amazon.com/console`.
    You just need to follow the link and type your new credentials.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问链接的格式为`https://your_aws_account_id.signin.aws.amazon.com/console`。您只需点击链接并输入您的新凭据。
- en: 'If you don''t want to disclose the AWS Account ID or if you prefer to use a
    friendly name, like your company name, you can create an account alias. On the
    IAM Console Management, select Dashboard and click on Customize:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您不想公开AWS账户ID或您更喜欢使用友好的名称，如公司名称，您可以创建一个账户别名。在IAM控制台管理中，选择仪表板并点击自定义：
- en: '![](img/189ae6d3-ca47-4a77-beba-086f140dec1c.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/189ae6d3-ca47-4a77-beba-086f140dec1c.png)'
- en: 'Now, the user can sign in using a link that follows this format: `https://your_alias.signin.aws.amazon.com/console`'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，用户可以使用以下格式的链接登录：`https://your_alias.signin.aws.amazon.com/console`
- en: Amazon Cognito
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊Cognito
- en: Handling authentication in a secure way is a complex problem, but this use case
    is so common that many frameworks and services were built dedicated to solve it.
    Nowadays, you just need to copy a few lines of code and you are good to go.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以安全的方式处理认证是一个复杂的问题，但这个用例如此常见，以至于许多框架和服务都是专门为解决它而构建的。如今，您只需复制几行代码，就可以顺利完成了。
- en: Cognito is Amazon's solution for this problem. More than solving how you authenticate
    accounts, it provides an easy way to sync data between different devices. When
    you log in using a Cognito account, you receive a temporary AWS token that is
    used to store and retrieve data specific to the user, like preferences, user profile,
    or saved game data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Cognito是亚马逊针对此问题的解决方案。它不仅解决了账户认证的问题，还提供了一个在不同设备之间同步数据的方法。当您使用Cognito账户登录时，您会收到一个临时AWS令牌，用于存储和检索特定于用户的数据，如偏好设置、用户资料或保存的游戏数据。
- en: We'll explore more about this service through code examples in [Chapter 8](5778526b-7b49-48bd-8fc8-f5285baa64c1.xhtml),
    *Securing the Serverless Application*.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第8章](5778526b-7b49-48bd-8fc8-f5285baa64c1.xhtml)，*保护无服务器应用程序*中通过代码示例进一步探讨此服务。
- en: Managing AWS resources
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理AWS资源
- en: 'All services offered by Amazon are configured through RESTful interfaces named
    AWS API. You can access them using the following services:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊提供的所有服务都是通过名为 AWS API 的 RESTful 接口配置的。您可以使用以下服务访问它们：
- en: AWS Management Console
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 管理控制台
- en: AWS SDKs
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS SDKs
- en: AWS CLI
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CLI
- en: 'Take look at the following diagram, which depicts the services offered by Amazon:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下图示，它描述了亚马逊提供的服务：
- en: '![](img/c6321638-e3db-4d94-967a-43a8765c2437.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6321638-e3db-4d94-967a-43a8765c2437.png)'
- en: Rough schematic of the AWS architecture
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 架构的粗略示意图
- en: AWS Management Console
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 管理控制台
- en: The console is the graphical user interface provided by Amazon and is accessed
    through the official website at [https://console.aws.amazon.com](https://console.aws.amazon.com).
    It's the easiest interface for beginners and useful to learn new services, but
    it's not complete. There are some features that can't be accessed or configured
    using the console, such as managing your SimpleDB data. Also, in some cases, it
    requires a lot of manual work. If you have a repetitive task, it's better to automate
    it using the SDK or the CLI.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台是亚马逊提供的图形用户界面，可通过官方网站 [https://console.aws.amazon.com](https://console.aws.amazon.com)
    访问。它是初学者最简单的界面，用于学习新服务很有用，但它并不完整。有些功能无法通过控制台访问或配置，例如管理您的 SimpleDB 数据。此外，在某些情况下，它需要大量的手动工作。如果您有一个重复的任务，最好使用
    SDK 或 CLI 自动化它。
- en: AWS SDKs
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS SDKs
- en: The SDK is the best way to manage your AWS resources through reusable code.
    Using the SDK, you can automate your infrastructure and handle errors using very
    simple commands. There are SDKs for many different programming languages like
    Java, Python, Ruby, and others. In this book, we will use exclusively the SDK
    for Node.js. The official documentation is available at [http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: SDK 是通过可重用代码管理您的 AWS 资源的最佳方式。使用 SDK，您可以通过非常简单的命令来自动化您的基础设施并处理错误。SDK 支持多种不同的编程语言，如
    Java、Python、Ruby 等。在这本书中，我们将专门使用 Node.js SDK。官方文档可在 [http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html)
    查找。
- en: All code examples in this book use Node.js, which is a cross-platform JavaScript
    runtime with an event-driven model. Basic knowledge of Node.js is expected from
    the reader since we will not cover the basics. Also, we will use Node's default
    package manager, `npm`, to install dependencies.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有代码示例都使用 Node.js，它是一个跨平台的 JavaScript 运行时，具有事件驱动模型。我们不会介绍基础知识，因此读者应具备 Node.js
    的基本知识。此外，我们将使用 Node 的默认包管理器 `npm` 来安装依赖项。
- en: 'Let''s learn about using the SDK for Node.js by performing the following steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤学习如何使用 Node.js SDK：
- en: 'Start a new Node project using `npm init` and run the npm command to install
    the AWS SDK:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `npm init` 启动一个新的 Node 项目，并运行 npm 命令安装 AWS SDK：
- en: '[PRE0]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After installing, you need to set the access keys that will be used by the SDK
    to connect to AWS. These keys were generated in the previous section, when we
    created a new user.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装后，您需要设置 SDK 连接到 AWS 时将使用的访问密钥。这些密钥在上一节创建新用户时已生成。
- en: 'The following are a few options to set the credentials:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是一些设置凭证的选项：
- en: Setting the credentials with hardcoded keys
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用硬编码的密钥设置凭证
- en: Loading a JSON file on disk
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在磁盘上加载 JSON 文件
- en: Setting a credentials file
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置凭证文件
- en: Setting environment variables
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置环境变量
- en: You should always avoid hardcoding AWS keys, especially in open source projects
    on GitHub. You don't want to risk accidentally committing your private keys.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您应始终避免在 AWS 密钥中硬编码，尤其是在 GitHub 上的开源项目中。您不希望不小心提交您的私钥。
- en: 'I prefer to configure them through environment variables. If you are running
    on macOS or Linux, add the following lines to the `~/.bash_profile` file. Replace
    `YOUR-KEY` and `YOUR-REGION` by the real values:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我更喜欢通过环境变量来配置它们。如果您正在 macOS 或 Linux 上运行，请将以下行添加到 `~/.bash_profile` 文件中。将 `YOUR-KEY`
    和 `YOUR-REGION` 替换为实际值：
- en: '[PRE1]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you are running on Windows, execute the following commands on command prompt
    as the admin, replacing the values of the keys and region:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您正在 Windows 上运行，请在管理员命令提示符中执行以下命令，将密钥和区域的值替换为实际值：
- en: '[PRE2]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you don't have a preferred region, you can use `us-east-1` (Northern Virginia,
    US East). When you use the AWS Management Console, you can set the region where
    you are going to manage the resources through the upper-right drop-down menu.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您没有首选区域，可以使用 `us-east-1`（美国东部弗吉尼亚州）。当您使用 AWS 管理控制台时，您可以通过右上角的下拉菜单设置您将要管理的资源所在区域。
- en: Both the configurations are persistent, but they will work only for the next
    time that you open the command line.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种配置都是持久的，但它们只会在您下次打开命令行时生效。
- en: 'You can test your setup creating a new file named `index.js` and running the
    following code to list your S3 buckets. As a simplified definition, you can consider
    a **bucket** as a repository of files. Now, if you have proper access, this example
    will return your bucket list or an empty array, if there is none. If you don''t
    have access or had a problem setting the credentials, it will return an error:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过创建一个名为 `index.js` 的新文件并运行以下代码来测试您的设置，以列出您的 S3 存储桶。作为一个简化的定义，您可以将 **存储桶**
    视为一个文件仓库。现在，如果您有适当的访问权限，此示例将返回您的存储桶列表或一个空数组，如果没有的话。如果您没有访问权限或设置凭证时出现问题，它将返回一个错误：
- en: '[PRE3]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: AWS CLI
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS CLI
- en: 'The CLI is the command-line interface. For experienced users, it''s a great
    tool to access information and manage resources. If you already have Python installed,
    you just need to run `pip`, which is the default package manager for Python, to
    install the CLI:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 是命令行界面。对于经验丰富的用户来说，这是一个获取信息和管理工作资源的优秀工具。如果您已经安装了 Python，只需运行 `pip`，这是 Python
    的默认包管理器，即可安装 CLI：
- en: '[PRE4]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The configuration of the CLI is very similar to the one used by the SDK. The
    only difference is that you need to add another environment variable: `AWS_DEFAULT_REGION`.
    You need this because the SDK uses `AWS_REGION` instead of the `AWS_DEFAULT_REGION`
    variable.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 的配置与 SDK 使用的配置非常相似。唯一的区别是您需要添加另一个环境变量：`AWS_DEFAULT_REGION`。您需要这个变量，因为 SDK
    使用 `AWS_REGION` 而不是 `AWS_DEFAULT_REGION` 变量。
- en: 'To test if your setup is correct, you can execute the `ls` (list) command to
    list S3 buckets:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试您的设置是否正确，您可以执行 `ls`（列表）命令来列出 S3 存储桶：
- en: '[PRE5]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Considering an AWS account with one bucket, the preceding command line derives
    the following output:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到一个包含一个存储桶的 AWS 账户，前面的命令行将产生以下输出：
- en: '![](img/12e70c2d-8c24-4ce0-9999-56cfae4ed6c0.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/12e70c2d-8c24-4ce0-9999-56cfae4ed6c0.png)'
- en: AWS CloudFormation
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS CloudFormation
- en: CloudFormation gives to developers the possibility to script the entire infrastructure
    using templates. This approach is called as *Infrastructure as a Code*. It's a
    powerful feature because it makes it easy to reproduce the configuration of servers
    and resources into another region or in a different account. Furthermore, you
    can version control your scripts to help you with the development of your infrastructure.
    As a quick start, AWS offers many sample templates ([https://aws.amazon.com/cloudformation/aws-cloudformation-templates](https://aws.amazon.com/cloudformation/aws-cloudformation-templates))
    for common use cases.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation 为开发者提供了使用模板脚写整个基础设施的可能性。这种方法被称为 *基础设施即代码*。这是一个强大的功能，因为它使得将服务器和资源的配置复制到另一个区域或不同的账户变得容易。此外，您还可以对脚本进行版本控制，以帮助您开发基础设施。作为一个快速入门，AWS
    为常见用例提供了许多示例模板 ([https://aws.amazon.com/cloudformation/aws-cloudformation-templates](https://aws.amazon.com/cloudformation/aws-cloudformation-templates))。
- en: In this book, we will not use CloudFormation directly, but in the next chapter,
    we'll start using the Serverless Framework that extensively uses CloudFormation
    under the hood to manage resources. That's how you can easily duplicate your solution
    to different environments, making a production deployment an exact copy of the
    development or staging environment.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '在这本书中，我们不会直接使用 CloudFormation，但在下一章中，我们将开始使用 Serverless Framework，它广泛使用 CloudFormation
    来管理资源。这就是您如何轻松地将解决方案复制到不同环境，使得生产部署与开发或测试环境完全相同。 '
- en: Amazon CloudWatch
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon CloudWatch
- en: CloudWatch is a monitoring service for your AWS resources. It is often used
    to monitor virtual machines, but it is not restricted to it and plays an important
    role even when your operation is based only on serverless functions. With CloudWatch,
    you can monitor errors, throttles, number of invocations, duration, and costs.
    You can also expand monitoring further with custom plugins.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: CloudWatch 是 AWS 资源的监控服务。它通常用于监控虚拟机，但它不仅限于这一点，在您的操作仅基于无服务器函数时也发挥着重要作用。使用 CloudWatch，您可以监控错误、限制、调用次数、持续时间以及成本。您还可以通过自定义插件进一步扩展监控。
- en: This subject will be covered in [Chapter 10](3c6f35a1-ca69-49db-ba87-f9b37af86ced.xhtml),
    *Testing, Deploying, and Monitoring*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这个主题将在第 10 章 [测试、部署和监控](3c6f35a1-ca69-49db-ba87-f9b37af86ced.xhtml) 中介绍。
- en: Frontend services
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前端服务
- en: This section describes the main services related to frontend development. While
    an introduction is made here, you will find detailed examples in [Chapter 4](274d8aba-8e7e-4c5e-b55b-a8e1797d3057.xhtml),
    *Hosting the Website*, when we will host our application frontend using a serverless
    approach.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了与前端开发相关的主要服务。虽然在这里进行了介绍，但你将在第 4 章 [托管网站](274d8aba-8e7e-4c5e-b55b-a8e1797d3057.xhtml)中找到详细示例，届时我们将使用无服务器方法托管我们的应用程序前端。
- en: Amazon S3
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon S3
- en: '**Amazon Simple Storage Service** (**S3**) is a service where you can save
    any type of file such as images, log files, and backups. Starting here with a
    bit of nomenclature, Amazon calls each file as an **object** and, to store files,
    you need a root folder that is called as a **bucket**. In your account, you can
    have multiple buckets to better organize your data. You can also have folders
    inside a bucket, but can''t have buckets within buckets.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**Amazon Simple Storage Service** (**S3**) 是一个可以保存任何类型文件的服务，如图像、日志文件和备份。从一点命名学开始，Amazon
    将每个文件称为 **对象**，要存储文件，你需要一个称为 **存储桶** 的根文件夹。在你的账户中，你可以有多个存储桶以更好地组织你的数据。你还可以在存储桶内创建文件夹，但不能在存储桶内创建存储桶。'
- en: 'An interesting feature is that each file receives a unique URL in the following
    format:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的功能是，每个文件都会收到一个以下格式的唯一 URL：
- en: '`https://s3.amazonaws.com/bucketname/filename`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://s3.amazonaws.com/bucketname/filename`'
- en: With this format, the bucket name must be unique through all accounts to guarantee
    unique URLs. It means that you can't create a bucket with a common name like “my-photos”
    because it will already be taken. Be creative and count on luck when choosing
    a name.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种格式，存储桶名称必须在所有账户中唯一，以确保URL的唯一性。这意味着你不能创建一个像“my-photos”这样的通用名称的存储桶，因为它已经被占用。在命名时要有创意，并寄希望于好运。
- en: You can restrict the file access if it's a backup or another kind of private
    data, but what we will explore here is to let the files be publicly available
    to store our frontend data. This is a powerful feature. For example, you can use
    it to stream videos. You just need to add a `<video>` HTML5 tag that references
    the URL of an mp4 file. For a nice looking player, you could use something like
    [http://videojs.com](http://videojs.com), which is open source.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件是备份或其他类型的私有数据，你可以限制文件访问，但在这里我们将探讨的是让文件公开可用以存储我们的前端数据。这是一个强大的功能。例如，你可以用它来流式传输视频。你只需要添加一个引用
    mp4 文件 URL 的 `<video>` HTML5 标签。为了获得一个看起来不错的播放器，你可以使用类似 [http://videojs.com](http://videojs.com)
    的东西，它是开源的。
- en: We will take advantage of S3 as it is a very cheap storage service and it has
    the flexibility to share files to build our low cost and serverless frontend.
    In our bucket, we'll add all static files of our frontend, including HTML, CSS,
    JavaScript, images, and so on. With proper configuration, which will be detailed
    in [Chapter 4](274d8aba-8e7e-4c5e-b55b-a8e1797d3057.xhtml), *Hosting the Website*,
    it will be ready to serve our content with high availability, scalability, and
    low costs.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用 S3，因为它是一个非常便宜的存储服务，并且具有将文件共享以构建我们的低成本无服务器前端的能力。在我们的存储桶中，我们将添加所有前端静态文件，包括
    HTML、CSS、JavaScript、图像等。通过适当的配置，这将在第 4 章 [托管网站](274d8aba-8e7e-4c5e-b55b-a8e1797d3057.xhtml)中详细说明，它将准备好以高可用性、可扩展性和低成本为我们提供内容服务。
- en: Using S3 with the CLI
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 CLI 与 S3 一起使用
- en: 'The Management Console is very useful to upload and download files from S3,
    but so is the CLI. Let''s play with the CLI in this section to gain more familiarity.
    We will create a bucket and store a file by performing the following steps. Those
    will be useful later for the AWS Lambda demo:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 管理控制台非常有用，可以从 S3 上传和下载文件，但 CLI 同样有用。在本节中，我们将通过以下步骤创建存储桶并存储文件，以熟悉 CLI。这些步骤将在
    AWS Lambda 演示中很有用：
- en: 'First, choose a bucket name and use the make-bucket command:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，选择一个存储桶名称，并使用 make-bucket 命令：
- en: '[PRE6]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, create a file named `test.txt` and write something to it.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个名为 `test.txt` 的文件并向其中写入内容。
- en: 'Copy the file to your new bucket setting the **Access Control List** (**ACL**)
    as public content:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件复制到新的存储桶中，并将 **访问控制列表** (**ACL**) 设置为公开内容：
- en: '[PRE7]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'List the bucket contents using the following command line:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令行列出存储桶内容：
- en: '[PRE8]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Download the file as `test2.txt` by using the following command line:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令行下载文件为 `test2.txt`：
- en: '[PRE9]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For more commands, refer to the official guide at [http://docs.aws.amazon.com/cli/latest/userguide/using-s3-commands.html](http://docs.aws.amazon.com/cli/latest/userguide/using-s3-commands.html).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多命令，请参考官方指南：[http://docs.aws.amazon.com/cli/latest/userguide/using-s3-commands.html](http://docs.aws.amazon.com/cli/latest/userguide/using-s3-commands.html)。
- en: Amazon Route 53
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon Route 53
- en: Route 53 provides a DNS service where you can buy and host your site's domain.
    You may prefer to buy your domain from another seller, like GoDaddy or Namecheap,
    but if you want to serve your serverless frontend using AWS services, you need
    to use Route 53 to host it.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Route 53提供DNS服务，你可以在这里购买和托管你的网站域名。你可能更喜欢从其他卖家那里购买域名，比如GoDaddy或Namecheap，但如果你想要使用AWS服务来托管你的无服务器前端，你需要使用Route
    53来托管它。
- en: When you configure a subdomain (like in `mysubdomain.mydomain.com`), you can
    set an A record (IP address) or CNAME (alias to another address), but the root
    domain (`mydomain.com`) requires an A record. If you host your frontend using
    S3, you receive an endpoint to set a CNAME record, but you don't get a fixed IP
    to set an A record. Since Route 53 is an AWS service, it accepts an S3 endpoint
    in the A record option and solves this issue.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当你配置一个子域名（例如 `mysubdomain.mydomain.com`）时，你可以设置一个A记录（IP地址）或CNAME（指向另一个地址的别名），但根域名（`mydomain.com`）需要A记录。如果你使用S3托管前端，你会收到一个设置CNAME记录的端点，但你不会得到一个固定的IP来设置A记录。由于Route
    53是AWS服务，它接受S3端点作为A记录选项，从而解决了这个问题。
- en: Configuring your domain requires a simple setup, but it often confuses web developers
    who are not used to DNS management. This service will receive more attention later,
    specifically in [Chapter 4](274d8aba-8e7e-4c5e-b55b-a8e1797d3057.xhtml), *Hosting
    the Website*.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 配置你的域名需要一个简单的设置，但它经常让不习惯DNS管理的网络开发者感到困惑。这个服务将在以后得到更多的关注，特别是在[第4章](274d8aba-8e7e-4c5e-b55b-a8e1797d3057.xhtml)，*托管网站*中。
- en: Amazon CloudFront
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon CloudFront
- en: CloudFront is a **Content Delivery Network** (**CDN**). It is a special service
    with the objective of improving your website speed and availability. It achieves
    this by reducing the distance between users and files using Amazon's infrastructure
    around the world, which contains more than 60 edge locations, where each one of
    them can be used to host copies of your files.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFront是一个**内容分发网络**（**CDN**）。这是一个特殊的服务，其目标是提高你的网站速度和可用性。它通过使用亚马逊在全球范围内的基础设施，包含超过60个边缘位置，每个位置都可以用来托管你的文件的副本，从而实现这一点。
- en: 'A signal traveling at light speed from Sydney (Australia) to New York (USA)
    takes 53 milliseconds. A ping message needs a roundtrip, covering twice the distance
    and taking double the time. Also, there are other factors that increase this time:
    light travels 33% slower on fiber optics (glass), there is no straight line connecting
    both cities, and equipment like repeaters and switches will slow down transfer
    speeds. The result is a measured latency between 200 milliseconds and 300 milliseconds.
    By comparison, providing the content in the same city may reduce the latency to
    15 milliseconds.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一束以光速从悉尼（澳大利亚）到纽约（美国）传播的信号需要53毫秒。一个ping消息需要往返，覆盖两倍的距离，花费两倍的时间。此外，还有其他因素会增加这个时间：光在光纤（玻璃）中传播速度慢33%，两个城市之间没有直线连接，以及像中继器和交换机这样的设备会减慢传输速度。结果是测量的延迟在200毫秒到300毫秒之间。相比之下，在同一城市提供内容可能会将延迟降低到15毫秒。
- en: This difference is usually not significant for most applications. In a serverless
    website, the cold start delay has a bigger impact. If your use case is very sensitive
    to high latencies, you should avoid serverless or you can use CloudFront to minimize
    the impact, at least in the frontend.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这种差异对于大多数应用程序通常并不显著。在无服务器网站上，冷启动延迟有更大的影响。如果你的用例对高延迟非常敏感，你应该避免使用无服务器，或者你可以使用CloudFront来最小化影响，至少在前端。
- en: To reduce costs, CloudFront won't replicate your content automatically throughout
    the world. It will replicate only where a demand for it exists. For example, when
    a request is made from a British city, the DNS will route the request to the nearest
    edge location and if it does not have yet a local copy of the file, it will be
    copied temporarily (cached). When another user in a nearby city requests the same
    file, it will benefit from a lower latency and fast response.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了降低成本，CloudFront不会自动在全球范围内复制你的内容。它只会复制存在需求的地方。例如，当从英国城市发起请求时，DNS会将请求路由到最近的边缘位置，如果还没有本地副本的文件，它将临时复制（缓存）。当附近城市的另一个用户请求相同的文件时，它将受益于更低的延迟和快速响应。
- en: AWS Certificate Manager
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS证书管理器
- en: Certificate Manager is a service where you can request free SSL/TLS certificates
    to make your website support HTTPS. A certificate used to be an expensive purchase
    for small sites, ranging from US$ 100 to US$ 500 per year. To help make certificates
    (and HTTPS) accessible to everyone, Let's Encrypt ([https://letsencrypt.org](https://letsencrypt.org))
    was created as a nonprofit certificate authority company, which operates based
    on donations and sponsorship. You can get free certificates and they will be accepted
    by all major browsers.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 证书管理器是一个你可以请求免费SSL/TLS证书以使你的网站支持HTTPS的服务。以前，证书对于小型网站来说是一项昂贵的购买，每年从100美元到500美元不等。为了帮助使证书（和HTTPS）对每个人可访问，Let's
    Encrypt（[https://letsencrypt.org](https://letsencrypt.org)）作为一个非营利性证书授权公司被创建，它基于捐赠和赞助运营。你可以获得免费证书，并且它们将被所有主要浏览器接受。
- en: Following Let's Encrypt, Amazon launched its own service named AWS Certificate
    Manager. It's restricted to AWS customers, but it's also free and easier to use.
    Once you issue a new certificate and associate it with a CloudFront distribution,
    Amazon will also be responsible by automatically renewing the certificate when
    necessary. We will cover this service in [Chapter 4](274d8aba-8e7e-4c5e-b55b-a8e1797d3057.xhtml),
    *Hosting the Website*.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在Let's Encrypt之后，Amazon推出了自己的服务，名为AWS证书管理器。它仅限于AWS客户，但也是免费的且更容易使用。一旦你颁发了一个新证书并将其与CloudFront分发关联，Amazon还将负责在必要时自动续订证书。我们将在[第4章](274d8aba-8e7e-4c5e-b55b-a8e1797d3057.xhtml)，*托管网站*中介绍此服务。
- en: Messaging and notifications
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息和通知
- en: This section covers which services you can use on AWS to send notifications
    to your users.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了你可以在AWS上使用哪些服务向用户发送通知。
- en: Amazon SNS
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon SNS
- en: Amazon **Simple Notification Service** (**SNS**) implements the publish-subscribe
    messaging pattern. When you create an SNS topic, it becomes available for other
    services to subscribe to it. If someone publishes a message in this topic, all
    subscribed services will be alerted.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon **简单通知服务**（**SNS**）实现了发布-订阅消息模式。当你创建一个SNS主题时，它将可供其他服务订阅。如果有人在主题中发布消息，所有已订阅的服务都将被提醒。
- en: It's a very simple and powerful service. You can use it to dynamically attach
    different services that are able to handle a specific kind of notification. For
    example, an application can send a notification to an SNS topic to alert that
    you have received a new file to process. You can subscribe to this topic using
    an HTTP endpoint and SNS will send a message to your web service with the file
    location that needs processing. Later, you can add another endpoint, using a Lambda
    function programmed to do another kind of processing.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单且强大的服务。你可以用它动态地附加能够处理特定类型通知的不同服务。例如，一个应用程序可以向SNS主题发送通知，提醒你已收到需要处理的文件。你可以使用HTTP端点订阅此主题，SNS会将需要处理的文件位置的消息发送到你的Web服务。稍后，你可以添加另一个端点，使用一个编程用于执行另一种类型处理的Lambda函数。
- en: 'Let''s perform the following steps to create a simple demo using the CLI as
    an example:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤，以CLI为例创建一个简单的演示：
- en: 'Create an SNS topic using the following command line:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令行创建一个SNS主题：
- en: '[PRE10]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The result is an **Amazon Resource Name** (**ARN**) that you need to save.
    The ARN will be created with a format of this example: `arn:aws:sns:us-east-1:1234567890:email-alerts`'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果是一个**Amazon资源名称**（**ARN**），你需要将其保存。ARN将以以下示例中的格式创建：`arn:aws:sns:us-east-1:1234567890:email-alerts`
- en: 'Subscribe to a topic using the e-mail protocol, so you will receive an e-mail
    every time that an application publishes to this topic:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用电子邮件协议订阅一个主题，这样每当应用程序向此主题发布时，你都会收到一封电子邮件：
- en: '[PRE11]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Open your e-mail account and confirm that you want to subscribe to events.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的电子邮件账户并确认你想要订阅事件。
- en: 'Publish a test message and see it working by using the following command line:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令行发布测试消息并查看其工作情况：
- en: '[PRE12]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For more commands, refer to the official guide at [http://docs.aws.amazon.com/cli/latest/userguide/cli-sqs-queue-sns-topic.html](http://docs.aws.amazon.com/cli/latest/userguide/cli-sqs-queue-sns-topic.html).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更多命令，请参阅官方指南[http://docs.aws.amazon.com/cli/latest/userguide/cli-sqs-queue-sns-topic.html](http://docs.aws.amazon.com/cli/latest/userguide/cli-sqs-queue-sns-topic.html)。
- en: AWS IoT
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS IoT
- en: AWS IoT (Internet of Things) will be used in our solution to handle serverless
    notifications. Although the name indicates the usage of IoT devices, we will use
    this service exclusively for users connected through browsers. This is becasuse
    hooking a web page into a notification service to receive updates, through a subscription
    mechanism and not data polling, requires the usage of WebSockets, which are supported
    by IoT and not supported by Amazon SNS. So, although the IoT name may sound as
    a strange choice, we will use it because it is the only AWS service capable of
    handling our use case.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: AWS IoT (物联网) 将在我们的解决方案中用于处理无服务器通知。尽管名称表明了物联网设备的使用，但我们将仅为此通过浏览器连接的用户使用此服务。这是因为将网页连接到通知服务以接收更新，通过订阅机制而不是数据轮询，需要使用
    WebSocket，而 IoT 支持 WebSocket，而 Amazon SNS 不支持。因此，尽管 IoT 名称听起来可能有些奇怪，但我们仍会使用它，因为它是我们唯一能够处理我们用例的
    AWS 服务。
- en: AWS IoT implements the publish-subscribe pattern using the **Message Queuing
    Telemetry Transport** (**MQTT**) protocol. We will see code examples in [Chapter
    9](ab2add3a-931b-478c-9fbf-039ba2a637a1.xhtml), *Handling Serverless Notifications*,
    while implementing live comments for product review pages of our sample website.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: AWS IoT 使用 **消息队列遥测传输**（**MQTT**）协议实现发布-订阅模式。我们将在 [第 9 章](ab2add3a-931b-478c-9fbf-039ba2a637a1.xhtml)，*处理无服务器通知*
    中看到代码示例，同时为我们的示例网站的产品评论页面实现实时评论。
- en: Backend services
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后端服务
- en: In this section, we will go through the services that are needed to build the
    backend with some practical examples.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过一些实际示例介绍构建后端所需的服务。
- en: AWS Lambda
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Lambda
- en: Lambda is the flagship product of the serverless concept. The ability to run
    functions on demand with zero administration and its particular pricing model
    is the main drive that aroused interest in the developer community. We can say
    that we have serverless databases, serverless notifications, and serverless frontends,
    but those are merely extensions of the main feature, that is, serverless code
    executions.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 是无服务器概念的主打产品。按需运行函数且无需管理以及其特定的定价模式是激发开发者社区兴趣的主要驱动力。我们可以这样说，我们有无服务器数据库、无服务器通知和无服务器前端，但这些都只是主要功能的扩展，即无服务器代码执行。
- en: Lambda currently only supports Node.js (JavaScript), Python, Java, and C# languages,
    but there is a third-party framework named Apex ([https://github.com/apex/apex](https://github.com/apex/apex))
    that adds support for Go, Rust, and Clojure by injecting Node.js shims in the
    deployment build.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 目前仅支持 Node.js (JavaScript)、Python、Java 和 C# 语言，但有一个名为 Apex 的第三方框架 ([https://github.com/apex/apex](https://github.com/apex/apex))，通过在部署构建中注入
    Node.js 模拟器，增加了对 Go、Rust 和 Clojure 的支持。
- en: Creating a Lambda function
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Lambda 函数
- en: In this book, we will use the Serverless Framework extensively to make the deployment
    of Lambda functions easier; however, to see how useful the framework is, in this
    chapter, we will use the AWS Management Console for comparison.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将广泛使用 Serverless Framework 来简化 Lambda 函数的部署；然而，为了展示框架的实用性，在本章中，我们将使用
    AWS 管理控制台进行对比。
- en: We will now create a Lambda function to process log files. This function will
    be triggered when a new log file is added to an S3 bucket and the result of the
    Lambda function is to create an SNS notification if there is an error in the file.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建一个 Lambda 函数来处理日志文件。当新的日志文件添加到 S3 桶中时，该函数将被触发，Lambda 函数的结果是如果文件中存在错误，则创建一个
    SNS 通知。
- en: 'Let''s take a look at the following steps, which are necessary to execute:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下必要的步骤：
- en: 'Browse the following link: [https://console.aws.amazon.com/lambda](https://console.aws.amazon.com/lambda).
    Select Get Started Now to start creating a new function:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览以下链接：[https://console.aws.amazon.com/lambda](https://console.aws.amazon.com/lambda)。选择“立即开始”以创建一个新的函数：
- en: '![](img/f854341a-2312-4616-98de-8c9d5b851c83.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f854341a-2312-4616-98de-8c9d5b851c83.png)'
- en: 'AWS offers many templates with sample configuration and code. For example,
    you could use a template of a Lambda function that processes bounced e-mails.
    This option is interesting for marketing campaigns to remove e-mail addresses
    that don''t exist. However, in this example, we will select a Blank Function template:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS 提供了许多带有示例配置和代码的模板。例如，您可以使用处理退回电子邮件的 Lambda 函数模板。这对于营销活动来说，可以移除不存在的电子邮件地址。然而，在这个例子中，我们将选择“空白函数”模板：
- en: '![](img/9668324f-0ea3-4845-bf0b-0df8897434c2.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9668324f-0ea3-4845-bf0b-0df8897434c2.png)'
- en: 'A Lambda function can be triggered by many different sources. In the next screen,
    you will see a list of all available options. Select S3:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lambda函数可以由许多不同的来源触发。在下一屏，您将看到所有可用选项的列表。选择S3：
- en: '![](img/0da9fbe4-2bc4-4a4a-a0e5-04766d7a7370.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0da9fbe4-2bc4-4a4a-a0e5-04766d7a7370.png)'
- en: 'On a side note, take a look at some use cases of the available triggers:'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 顺便提一下，看看一些可用触发器的用例：
- en: 'Amazon S3: You can select a bucket name with Event type as Object Created (All)
    and Prefix `images/`. In this setting, when you upload an image to this bucket
    within the images folder, you will trigger a Lambda function for post-processing
    and image optimization.'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon S3：您可以选择一个存储桶名称，事件类型为“对象创建（全部）”和前缀`images/`。在此设置中，当您将图像上传到图像文件夹中的此存储桶时，将触发Lambda函数进行后处理和图像优化。
- en: 'SNS: You can use this service to handle notifications. For example, you could
    create an SNS topic named `Process Order` that would be activated by your application
    when a new order is received. SNS could be configured to send an e-mail for a
    specific list of employees and trigger a Lambda function to execute some logic.'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SNS：您可以使用此服务来处理通知。例如，您可以为收到新订单时激活的应用程序创建一个名为“Process Order”的SNS主题。SNS可以配置为向特定员工列表发送电子邮件并触发Lambda函数以执行某些逻辑。
- en: 'CloudWatch Logs: This service helps you to monitor your AWS resources and take
    automated actions. You could trigger Lambda functions to handle alert messages
    and execute specific actions according to its content.'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudWatch Logs：此服务帮助您监控AWS资源并执行自动化操作。您可以通过触发Lambda函数来处理警报消息并根据其内容执行特定操作。
- en: After selecting S3, you will be presented with some configuration options. Select
    the bucket that we have created previously with the CLI. For the Event type, select
    Object Created (All) to trigger the function whenever a new file is created. For
    Prefix, type `logs/` to consider only files in the logs folder and in the Suffix,
    type `txt` to consider only text files. Finally, check the Enable trigger option
    and click on Next:![](img/92ee7bca-6327-4131-a6b0-56c68a635a6b.png)
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择S3后，您将看到一些配置选项。选择之前使用CLI创建的存储桶。对于事件类型，选择“对象创建（全部）”以在创建新文件时触发函数。对于前缀，键入`logs/`以仅考虑日志文件夹中的文件，并在后缀中键入`txt`以仅考虑文本文件。最后，勾选启用触发选项并点击下一步![图片](img/92ee7bca-6327-4131-a6b0-56c68a635a6b.png)
- en: 'Type a name for your Lambda function, for example, `processLog`, and select
    the Node.js 6.10 option for Runtime:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的Lambda函数键入一个名称，例如`processLog`，并选择Node.js 6.10作为运行时选项：
- en: '![](img/1eb4d49e-a633-4373-bdb7-01297d721911.png)'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/1eb4d49e-a633-4373-bdb7-01297d721911.png)'
- en: 'Now we need to implement the code that will be executed by the Lambda function
    using the Edit code inline option. In this example, we are using `S3.getObject`
    to retrieve the file created and `SNS.publish` to create a notification if there
    is the `error` word in this file. For the SNS topic ARN, you can use the same
    that was previously created with the CLI:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要使用“编辑代码内联”选项实现Lambda函数将要执行的代码。在这个例子中，我们使用`S3.getObject`来检索创建的文件，并使用`SNS.publish`在文件中存在`error`单词时创建一个通知。对于SNS主题ARN，您可以使用之前使用CLI创建的相同主题：
- en: '[PRE13]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `aws-sdk` module is available for all Lambda functions. If you want to add
    another dependency that is not the `aws-sdk` module or a core module of Node,
    you need to upload a ZIP file to AWS containing your function and the module.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`aws-sdk`模块对所有Lambda函数都可用。如果您想添加不是`aws-sdk`模块或Node核心模块的依赖项，您需要上传一个包含您的函数和模块的ZIP文件到AWS。'
- en: 'As we have used the inline option to write the code instead of uploading a
    ZIP file, the code will be placed inside an `index.js` file. Also, the module
    that we have created exports a function named `handler`. In this case, we need
    to configure the Lambda handler with the `index.handler` name. For the Role box,
    we need to create a new one because a Lambda function can''t execute without proper
    access. Even if you create a Lambda using an administrator account, you must give
    explicit permissions for which kind of services and resources the Lambda will
    be able to access:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们使用了内联选项来编写代码而不是上传ZIP文件，代码将被放置在一个`index.js`文件中。此外，我们创建的模块导出了一个名为`handler`的函数。在这种情况下，我们需要使用`index.handler`名称配置Lambda处理程序。对于角色框，我们需要创建一个新的角色，因为Lambda函数没有适当的访问权限是无法执行的。即使您使用管理员账户创建Lambda，也必须明确授予Lambda可以访问哪些服务和资源的权限：
- en: '![](img/1d76ac0c-dfcf-4a1d-9d5a-4e59b1e4e9f7.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1d76ac0c-dfcf-4a1d-9d5a-4e59b1e4e9f7.png)'
- en: 'Type a role name for this role and click on Edit to modify the default policy
    document. Add the following JSON object and finish by clicking on Allow:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此角色输入一个角色名称，然后点击编辑以修改默认策略文档。添加以下 JSON 对象，并通过点击允许完成：
- en: You will need to replace the S3 and SNS ARNs to your respective ARNs.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将 S3 和 SNS ARN 替换为您各自的 ARN。
- en: '![](img/ced41b18-bc63-4a07-bb51-36dbb670e89f.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ced41b18-bc63-4a07-bb51-36dbb670e89f.png)'
- en: 'Use the following JSON object:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下 JSON 对象：
- en: '[PRE14]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The last step is to configure the Advanced settings. Set the amount of RAM
    memory that should be allocated for this function and the timeout value that AWS
    must wait for this function to finish its execution. You may need to increase
    the timeout value depending on the size of the log files that you are going to
    use for testing:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是配置高级设置。设置分配给此函数的 RAM 内存量以及 AWS 必须等待此函数完成执行的超时值。根据您将要使用的日志文件的大小，您可能需要增加超时值：
- en: '![](img/b91066aa-301f-4c99-96e5-dacb0c361b6f.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b91066aa-301f-4c99-96e5-dacb0c361b6f.png)'
- en: Click on Next and you will be redirected to a Review page where you need to
    confirm the function creation.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步，您将被重定向到审查页面，您需要确认函数创建。
- en: To test this function, we can use the Management Console, which lets us create
    custom input events, but, in this case, we can use the CLI to upload a new file
    and trigger the Lambda function. If the file has the word “error”, you should
    receive an e-mail message with the file name.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试此函数，我们可以使用管理控制台，它允许我们创建自定义输入事件，但在此情况下，我们可以使用 CLI 上传新文件并触发 Lambda 函数。如果文件中有“错误”这个词，您应该会收到一个包含文件名的电子邮件消息。
- en: 'Take a look at the following CLI command to trigger this Lambda function:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下 CLI 命令以触发此 Lambda 函数：
- en: '[PRE15]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you have any issues, you can try using the Management Console to see the
    error message that appears. In this case, use the following JSON object as the
    event trigger, replacing the bucket name:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您遇到任何问题，可以尝试使用管理控制台查看出现的错误消息。在这种情况下，使用以下 JSON 对象作为事件触发器，替换桶名称：
- en: '[PRE16]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Amazon API Gateway
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊 API Gateway
- en: API Gateway is a service that helps you to build RESTful APIs. You need to configure
    your resources, set the supported HTTP verbs and specify what will handle the
    requests. You can use it to redirect requests to EC2 instances (virtual machines)
    or external web servers, but what we'll explore here is to use it to trigger Lambda
    functions.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: API Gateway 是一个帮助您构建 RESTful API 的服务。您需要配置您的资源，设置支持的 HTTP 动词并指定将处理请求的内容。您可以使用它将请求重定向到
    EC2 实例（虚拟机）或外部 Web 服务器，但我们将在这里探索的是使用它来触发 Lambda 函数。
- en: Besides, API Gateway has other interesting features. For example, after creating
    your API endpoints, you can use API Gateway to automatically generate a client
    SDK for many different platforms, where you can easily test and distribute it
    to be used by third-party developers. Also, you can create third-party API keys
    to access your content with fine-grained access permissions, request quota limits,
    and throttling.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，API Gateway 还具有其他有趣的功能。例如，在创建您的 API 端点后，您可以使用 API Gateway 为许多不同的平台自动生成客户端
    SDK，您可以在其中轻松测试并将其分发给第三方开发者使用。您还可以创建第三方 API 密钥，以细粒度访问权限、请求配额限制和节流来访问您的内容。
- en: In our architecture, API Gateway will act as a thin layer that exists only to
    expose our Lambda functions to the world. Additionally, you can set security controls
    to allow only authenticated users to trigger your code. We are going to use this
    service in the next chapter, where we'll talk about how to configure our endpoints
    using the Serverless Framework, we will see more in [Chapter 6](a225cec3-99da-4be5-8833-f8fdaf0aa819.xhtml),
    *Developing the Backend*, while building our backend code, and lastly, in [Chapter
    8](5778526b-7b49-48bd-8fc8-f5285baa64c1.xhtml), *Securing the Serverless Application*,
    when our security measures will be explained.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的架构中，API Gateway 将充当一个薄层，它只存在于向世界公开我们的 Lambda 函数。此外，您还可以设置安全控制，仅允许经过身份验证的用户触发您的代码。我们将在下一章中使用此服务，我们将讨论如何使用
    Serverless Framework 配置我们的端点，我们将在[第 6 章](a225cec3-99da-4be5-8833-f8fdaf0aa819.xhtml)
    *开发后端* 中看到更多，在构建我们的后端代码时，最后，在[第 8 章](5778526b-7b49-48bd-8fc8-f5285baa64c1.xhtml)
    *保护无服务器应用程序* 中，当我们的安全措施将被解释。
- en: Expose your Lambda function using API Gateway
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 API Gateway 公开 Lambda 函数
- en: 'Let''s use the API Gateway to expose our previous Lambda function to be accessible
    using a URL by performing the following steps:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 API Gateway 通过以下步骤公开我们的前一个 Lambda 函数，使其可以通过 URL 访问：
- en: First, go to the API Gateway Management Console by visiting this link [https://console.aws.amazon.com/apigateway](https://console.aws.amazon.com/apigateway)
    and click on Create API.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过访问此链接[https://console.aws.amazon.com/apigateway](https://console.aws.amazon.com/apigateway)进入API网关管理控制台，然后点击创建API。
- en: 'Under the Create new API header, select the New API option and type the API
    name. For example: `log-processor`:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建新API标题下，选择新建API选项并输入API名称。例如：`log-processor`：
- en: '![](img/4ede3bb0-2593-42d4-9638-e634c7f0409e.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ede3bb0-2593-42d4-9638-e634c7f0409e.png)'
- en: 'Under Resources, click on the Actions dropdown and choose Create Method:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在资源下，点击操作下拉菜单并选择创建方法：
- en: '![](img/5bcffaf3-00cd-470b-933f-74f4800f3d71.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5bcffaf3-00cd-470b-933f-74f4800f3d71.png)'
- en: In the new dropdown, select the POST HTTP verb.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的下拉菜单中，选择POST HTTP动词。
- en: 'Under - POST - Setup, select Lambda Function as our Integration type. Select
    the region in which you have deployed our previous Lambda function and its corresponding
    name and click on Save button:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在- POST - 设置下，选择Lambda函数作为我们的集成类型。选择你已部署我们之前Lambda函数的区域及其对应名称，然后点击保存按钮：
- en: '![](img/a5d7e640-9e70-420a-b486-e9ddd28995bf.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5d7e640-9e70-420a-b486-e9ddd28995bf.png)'
- en: A popup will request that you allow this method to access the Lambda function.
    Accept it.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会弹出一个窗口请求你允许此方法访问Lambda函数。接受它。
- en: Under Resources, click again in the Actions drop-down and choose Deploy API.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在资源下，再次点击操作下拉菜单并选择部署API。
- en: 'A popup will request a stage to be selected. You can select [New Stage] and
    name it as `dev`:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会弹出一个窗口请求选择一个阶段。你可以选择[新建阶段]并将其命名为`dev`：
- en: '![](img/9367e29e-8f6f-4bcb-b38d-a86cfcfcd029.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9367e29e-8f6f-4bcb-b38d-a86cfcfcd029.png)'
- en: Click on Deploy. The next screen will show where the API Gateway was deployed.
    The URL will follow this format, such as `https://[identifier].execute-api.[region].amazonaws.com/dev`.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击部署。下一屏幕将显示API网关的部署位置。URL将遵循以下格式，例如`https://[identifier].execute-api.[region].amazonaws.com/dev`。
- en: If you try this URL in your browser, the result will be an authentication error
    that happens because the browser will try a `GET` request that was not defined.
    As we have defined only a `POST` resource, we need another way to test. You can
    use the API Gateway test feature that is accessible under the Resources feature
    in the left menu, followed by selecting the `POST` verb and clicking on Test.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你尝试在浏览器中输入此URL，结果将是一个认证错误，这是由于浏览器将尝试一个未定义的`GET`请求。因为我们只定义了一个`POST`资源，我们需要另一种测试方法。你可以使用API网关的测试功能，该功能位于左侧菜单的资源功能下，然后选择`POST`动词并点击测试。
- en: 'You need to provide a **Request Body**. In our case, it will be a JSON object
    with a format similar to a new S3 object event:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要提供**请求体**。在我们的案例中，它将是一个类似于新S3对象事件的JSON对象：
- en: '[PRE17]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You just need to change the bucket name for the name that you used previously,
    and the API Gateway will trigger the Lambda function to process the `log1.txt`
    file that we have uploaded before.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你只需将存储桶名称更改为之前使用的名称，API网关将触发Lambda函数处理我们之前上传的`log1.txt`文件。
- en: Another way to test this integration with the API Gateway is using **Postman**,
    which is a very popular tool to test any kind of RESTful APIs. Postman can be
    installed as a Chrome extension or as a macOS application.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种使用API网关测试此集成的方法是使用**Postman**，这是一个非常流行的用于测试任何类型RESTful API的工具。Postman可以作为Chrome扩展或macOS应用程序安装。
- en: Database services
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库服务
- en: In this section, we will see a brief explanation about the SimpleDB and DynamoDB
    products. Both of them will be covered in details in [Chapter 7](cb2f92df-5bc3-4c8e-8872-fbee58e5b0be.xhtml),
    *Managing a Serverless Database*.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简要介绍SimpleDB和DynamoDB产品。这两个产品将在[第7章](cb2f92df-5bc3-4c8e-8872-fbee58e5b0be.xhtml)中详细说明，*管理无服务器数据库*。
- en: Amazon SimpleDB
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon SimpleDB
- en: SimpleDB is a NoSQL database that can be defined as a serverless database because
    it scales automatically, it is highly available without needing to pay for provisions,
    and you are only billed by the seconds that the database engine needs to execute
    your queries.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: SimpleDB是一个NoSQL数据库，可以定义为无服务器数据库，因为它可以自动扩展，高度可用且无需支付配置费用，并且你只需为数据库引擎执行查询所需的秒数付费。
- en: You can use SimpleDB to make queries using a SQL-like syntax, but SimpleDB is
    very limited in terms of functionalities. It's so limited that it only stores
    string fields! If you store a datetime data type, you need to save it as a string
    ISO representation to avoid localization issues and to be able to make the `where`
    clauses. If you want to store numbers, use zero-padding. And how can we make `where`
    clauses with negative numbers? It is done by adding a large offset to all numbers
    to avoid storing negatives! As you can see, building a system on top of SimpleDB
    can be hard. There are many considerations and you can have performance problems
    when running with large datasets. Hence, SimpleDB is usually useful only for small
    projects.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 SimpleDB 使用类似 SQL 的语法进行查询，但 SimpleDB 在功能方面非常有限。它的限制如此之高，以至于它只存储字符串字段！如果你存储
    datetime 数据类型，你需要将其保存为字符串 ISO 表示形式，以避免本地化问题并能够使用 `where` 子句。如果你想存储数字，请使用零填充。那么我们如何使用负数来制作
    `where` 子句呢？这是通过给所有数字添加一个大的偏移量来实现的，以避免存储负数！正如你所看到的，在 SimpleDB 上构建系统可能会很困难。有许多需要考虑的因素，并且在处理大量数据集时可能会遇到性能问题。因此，SimpleDB
    通常仅适用于小型项目。
- en: 'You can see more tips on how to handle data types by following this link: [https://aws.amazon.com/articles/Amazon-SimpleDB/1232](https://aws.amazon.com/articles/Amazon-SimpleDB/1232)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下链接了解如何处理数据类型的更多技巧：[https://aws.amazon.com/articles/Amazon-SimpleDB/1232](https://aws.amazon.com/articles/Amazon-SimpleDB/1232)
- en: 'SimpleDB is the only serverless database offered by AWS. If you want a better
    serverless solution, you would need to try other cloud providers. You currently
    have the following options: Google Firebase storage, Google Cloud Datastore, or
    FaunaDB.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: SimpleDB 是 AWS 提供的唯一无服务器数据库。如果你想获得更好的无服务器解决方案，你可能需要尝试其他云服务提供商。你目前有以下选择：Google
    Firebase 存储、Google Cloud Datastore 或 FaunaDB。
- en: SimpleDB is one of the oldest AWS services, announced in late 2007\. However,
    it continues to be one of very few services that don't have a Management Console.
    If you want a GUI to easily query and manage your SimpleDB data, you can install
    a third-party solution. In this case, I suggest the **SdbNavigator** **Chrome
    Extension** as a good option. You only need to add an access key and a secret
    key to connect to your database. As a security measure, create a new user account
    using IAM with restricted privileges to SimpleDB.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: SimpleDB 是 AWS 最古老的服务之一，于 2007 年底宣布。然而，它仍然是极少数没有管理控制台的服务之一。如果你想有一个图形用户界面来轻松查询和管理你的
    SimpleDB 数据，你可以安装第三方解决方案。在这种情况下，我建议使用 **SdbNavigator** **Chrome 扩展程序** 作为不错的选择。你只需要添加一个访问密钥和一个秘密密钥来连接到你的数据库。作为一个安全措施，使用
    IAM 创建一个新的用户账户，并限制对 SimpleDB 的权限。
- en: Amazon DynamoDB
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon DynamoDB
- en: 'DynamoDB is a fully managed NoSQL database designed to be highly scalable having
    a fast and consistent performance. Unlike SimpleDB, DynamoDB has all the common
    features that you expect in a NoSQL database and can be extensively used in large
    projects. However, DynamoDB has a flaw for our use case: it is *not* a serverless
    database. It requires provisioning of resources, so you *can''t* say that DynamoDB
    is truly serverless. If you pay for provisioned capacity, you need to worry about
    the *servers* because you may end up provisioning more or less than necessary
    and paying for availability even when no one is using your database.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: DynamoDB 是一个完全托管的 NoSQL 数据库，旨在实现高度可扩展性，具有快速和一致的性能。与 SimpleDB 不同，DynamoDB 拥有你在
    NoSQL 数据库中期望的所有常见功能，并且可以广泛应用于大型项目中。然而，对于我们的用例，DynamoDB 有一个缺陷：它**不是**一个无服务器数据库。它需要配置资源，因此你不能说
    DynamoDB 真正是无服务器的。如果你为配置的容量付费，你需要担心**服务器**，因为你可能会配置过多或过少的资源，即使没有人使用你的数据库，你也需要为可用性付费。
- en: Fortunately, AWS has a permanent free tier that is very generous. You can serve
    more than 100 million read/write requests per month for free and this offer is
    not restricted to new AWS users. Considering this advantage, the low price to
    grow your user base, the possibility to automate the throughput provisioning,
    DynamoDB is a good choice for most serverless applications and this is proven
    by the numerous examples of projects and demos created by the serverless community
    using DynamoDB. It is very hard to see SimpleDB being used even for small projects,
    since DynamoDB is free for low usage.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，AWS 有一个永久性的免费层，非常慷慨。你可以免费处理每月超过 1 亿次的读写请求，并且这个优惠不仅限于新 AWS 用户。考虑到这个优势，低廉的用户基础增长价格，以及自动化的吞吐量配置可能性，DynamoDB
    对于大多数无服务器应用来说是一个不错的选择，这一点通过无服务器社区使用 DynamoDB 创建的众多项目和演示得到了证明。很难想象 SimpleDB 会被用于即使是小型项目，因为
    DynamoDB 对于低使用量是免费的。
- en: So, even if you have a large project and end up having to pay for provisioned
    resources that you would not use, DynamoDB requires much less management and can
    be a cheaper option than running a traditional database solution. For all these
    reasons, we are going to cover SimpleDB usage in this book, but our sample application
    will run on DynamoDB.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即使您有一个大型项目并最终不得不为未使用的预留资源付费，DynamoDB的管理需求要少得多，并且可能比运行传统数据库解决方案更便宜。出于所有这些原因，我们将在本书中介绍SimpleDB的使用，但我们的示例应用程序将运行在DynamoDB上。
- en: The serverless architecture of our online store
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们在线商店的无服务器架构
- en: 'In this book, we will build a real-world use case of a serverless solution.
    This sample application is an online store with the following requirements:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将构建一个无服务器解决方案的真实世界用例。此示例应用程序是一个在线商店，具有以下要求：
- en: List of available products
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用产品列表
- en: Product details with user rating
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品详情和用户评分
- en: Add products to a shopping cart
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将产品添加到购物车
- en: Create account and login pages
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建账户和登录页面
- en: 'We will describe and implement each feature in the next chapters. For a better
    understanding of the architecture, the following diagram gives a general view
    of how the different services that we covered in this chapter are organized and
    how they interact:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中描述和实现每个功能。为了更好地理解架构，以下图表给出了我们在本章中介绍的不同服务组织方式和它们之间交互的一般视图：
- en: '![](img/df96537f-9214-434f-a13a-afb45b22d41e.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df96537f-9214-434f-a13a-afb45b22d41e.png)'
- en: Estimating costs
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 估算成本
- en: In this section, we will estimate the costs of our sample application demo based
    on some usage assumptions and Amazon's pricing model. All pricing values used
    here are from mid 2017 and considers the cheapest region, US East (Northern Virginia).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将根据一些使用假设和亚马逊的定价模型来估算我们的示例应用程序演示的成本。这里使用的所有定价值均来自2017年中期，并考虑了最便宜的地区，美国东部（弗吉尼亚北部）。
- en: 'This section covers an example to illustrate how costs are calculated. Since
    the billing model and prices can change over time, always refer to the official
    sources to get updated prices before making your own estimations. You can use
    Amazon''s calculator, which is accessible at this link: [http://calculator.s3.amazonaws.com/index.html](http://calculator.s3.amazonaws.com/index.html).
    If you still have any doubts after reading the instructions, you can always contact
    Amazon''s support for free to get commercial guidance.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含一个示例，说明如何计算成本。由于计费模型和价格可能会随时间变化，在做出自己的估算之前，请始终参考官方来源以获取更新的价格。您可以使用亚马逊的计算器，该计算器可通过此链接访问：[http://calculator.s3.amazonaws.com/index.html](http://calculator.s3.amazonaws.com/index.html)。如果您在阅读说明后仍有任何疑问，您始终可以免费联系亚马逊的支持以获得商业指导。
- en: Assumptions
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 假设
- en: 'For our pricing example, we can assume that our online store will receive the
    following traffic *per month*:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的定价示例，我们可以假设我们的在线商店每月将接收以下流量：
- en: 100,000 page views
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 100,000次页面浏览
- en: 1,000 registered user accounts
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1,000个注册用户账户
- en: 200 GB of data transferred considering an average page size of 2 MB
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑到平均页面大小为2 MB，已传输200 GB的数据
- en: 5,000,000 code executions (Lambda functions) with an average of 200 milliseconds
    per request
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 5,000,000次代码执行（Lambda函数），平均每次请求200毫秒
- en: Route 53 pricing
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Route 53定价
- en: We need a hosted zone for our domain name and it costs US$ 0.50 per month. Also,
    we need to pay US$ 0.40 per million DNS queries to our domain. As this is a prorated
    cost, 100,000 page views will cost only US$ 0.04.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个托管区域来处理我们的域名，每月费用为0.50美元。此外，我们还需要为每百万次对域名的DNS查询支付0.40美元。由于这是一个按比例计算的费用，100,000次页面浏览将只需支付0.04美元。
- en: 'Total: US$ 0.54'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 总计：0.54美元
- en: S3 pricing
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: S3定价
- en: Amazon S3 charges you US$ 0.023 per GB/month stored, US$ 0.004 per 10,000 requests
    to your files, and US$ 0.09 per GB transferred. However, as we are considering
    the CloudFront usage, transfer costs will be charged by CloudFront prices and
    will not be considered in S3 billing.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊S3按每GB/月存储费用收取0.023美元，每10,000次对文件的请求费用为0.004美元，以及每GB传输费用为0.09美元。然而，由于我们正在考虑CloudFront的使用，传输费用将按CloudFront的价格收取，不会计入S3的账单中。
- en: If our website occupies less than 1 GB of static files and has an average per
    page of 2 MB and 20 files, we can serve 100,000 page views for less than US$ 20\.
    Considering CloudFront, S3 costs will go down to US$ 0.82 while you need to pay
    for CloudFront usage in another section. Real costs would be even lower because
    CloudFront caches files and it would not need to make 2,000,000 file requests
    to S3, but let's skip this detail to reduce the complexity of this estimation.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的网站静态文件小于1 GB，平均每页2 MB和20个文件，我们可以以低于US$ 20的价格提供100,000次页面浏览。考虑到CloudFront，S3费用将降至US$
    0.82，而您需要在另一个部分支付CloudFront的使用费用。实际费用会更低，因为CloudFront会缓存文件，它不需要向S3发出2,000,000次文件请求，但让我们跳过这个细节以减少估计的复杂性。
- en: On a side note, the cost would be much higher if you had to provision machines
    to handle this number of page views to a static website with the same availability
    and scalability.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，如果您需要配置机器来处理这么多页面浏览量，以相同的可用性和可伸缩性来处理静态网站，费用将会更高。
- en: 'Total: US$ 0.82'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 总计：US$ 0.82
- en: CloudFront pricing
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloudFront定价
- en: 'CloudFront is slightly more complicated to price since you need to guess how
    much traffic comes from each region, as they are priced differently. The following
    table shows an example of estimation:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 由于不同区域的价格不同，CloudFront的定价稍微复杂一些，因为您需要猜测每个区域的流量。以下表格显示了一个估计示例：
- en: '| **Region** | **Estimated traffic** | **Cost per GB transferred** | **Cost
    per 10,000 HTTPS requests** |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| **区域** | **预估流量** | **每GB传输费用** | **每10,000个HTTPS请求费用** |'
- en: '| North America | 70% | US$ 0.085 | US$ 0.010 |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
  zh: '| 北美 | 70% | US$ 0.085 | US$ 0.010 |'
- en: '| Europe | 15% | US$ 0.085 | US$ 0.012 |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
  zh: '| 欧洲 | 15% | US$ 0.085 | US$ 0.012 |'
- en: '| Asia | 10% | US$ 0.140 | US$ 0.012 |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| 亚洲 | 10% | US$ 0.140 | US$ 0.012 |'
- en: '| South America | 5% | US$ 0.250 | US$ 0.022 |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| 南美 | 5% | US$ 0.250 | US$ 0.022 |'
- en: As we have estimated 200 GB of files transferred with 2,000,000 requests, the
    total will be US$ 21.97.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们估计的200 GB文件传输和2,000,000次请求，总费用将是US$ 21.97。
- en: 'Total: US$ 21.97'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 总计：US$ 21.97
- en: Certificate Manager pricing
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 证书管理器定价
- en: Certificate Manager provides SSL/TLS certificates for free. You only need to
    pay for the AWS resources you create to run your application.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 证书管理器提供免费的SSL/TLS证书。您只需为运行应用程序创建的AWS资源付费。
- en: IAM pricing
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IAM定价
- en: There is no charge specifically for IAM usage. You will be charged only by what
    AWS resources your users are consuming.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: IAM使用没有特定费用。您只需为用户使用的AWS资源付费。
- en: Cognito pricing
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Cognito定价
- en: Each user has an associated profile that costs US$ 0.0055 per month. However,
    there is a permanent free tier that allows 50,000 monthly active users without
    charges, which is more than enough for our use case.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户都有一个关联的配置文件，每月费用为US$ 0.0055。然而，有一个永久免费层，允许50,000个每月活跃用户免费使用，这对于我们的用例来说已经足够了。
- en: Besides that, we are charged for Cognito Syncs of our user profiles. It costs
    US$ 0.15 for each 10,000 sync operations and US$ 0.15 per GB/month stored. If
    we estimate 1,000 active and registered users with less than 1 MB per profile,
    with less than 10 visits per month in average, we can estimate a charge of US$
    0.30.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还需要为用户配置文件的Cognito同步付费。每次10,000次同步操作的费用为US$ 0.15，每GB/月存储的费用为US$ 0.15。如果我们估计有1,000个活跃且注册的用户，每个配置文件小于1
    MB，平均每月访问次数少于10次，我们可以估计费用为US$ 0.30。
- en: 'Total: US$ 0.30'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 总计：US$ 0.30
- en: IoT pricing
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网定价
- en: IoT charges starts at US$ 5 per million messages exchanged. As each page view
    will make at least 2 requests, one to connect and another to subscribe to a topic,
    we can estimate a minimum of 200,000 messages per month. We need to add 1,000
    messages if we suppose that 1% of the users will rate the products and we can
    ignore other requests like disconnect and unsubscribed because they are excluded
    from billing. In this setting, the total cost would be of US$ 1.01.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网费用起价为每百万条交换消息US$ 5。由于每次页面浏览至少会触发2次请求，一次用于连接，另一次用于订阅主题，我们可以估计每月至少有200,000条消息。如果我们假设1%的用户会对产品进行评分，我们需要额外增加10,000条消息，我们可以忽略其他请求，如断开连接和取消订阅，因为它们不包括在计费中。在这种情况下，总费用将是US$
    1.01。
- en: 'Total: US$ 1.01'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 总计：US$ 1.01
- en: SNS pricing
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SNS定价
- en: We will use SNS only for internal notifications, when CloudWatch triggers a
    warning about issues in our infrastructure. SNS charges US$ 2.00 per 100,000 e-mail
    messages, but it offers a permanent free tier of 1,000 e-mails. So, it will be
    free for us.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将仅使用SNS进行内部通知，当CloudWatch触发关于我们基础设施问题的警告时。SNS每100,000封电子邮件收费US$ 2.00，但它提供1,000封电子邮件的永久免费层。因此，对我们来说将是免费的。
- en: CloudWatch pricing
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloudWatch定价
- en: CloudWatch charges US$ 0.30 per metric/month and US$ 0.10 per alarm and offers
    a permanent free tier of 50 metrics and 10 alarms per month. If we create 20 metrics
    and expect 20 alarms in a month, we can estimate a cost of US$ 1.00.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: CloudWatch 每个指标/月收费 US$ 0.30 和每个警报收费 US$ 0.10，并提供每月 50 个指标和 10 个警报的永久免费层。如果我们创建
    20 个指标并预计一个月内有 20 个警报，我们可以估计成本为 US$ 1.00。
- en: 'Total: US$ 1.00'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 总计：US$ 1.00
- en: API Gateway pricing
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API Gateway 定价
- en: API Gateway starts charging US$ 3.50 per million of API calls received and US$
    0.09 per GB transferred out to the Internet. If we assume 5 million requests per
    month with each response with an average of 1 KB, the total cost of this service
    will be US$ 17.93.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: API Gateway 开始对每百万个接收到的 API 调用收费 US$ 3.50 和每向互联网传输 1 GB 数据收费 US$ 0.09。如果我们假设每月有
    500 万次请求，每次响应的平均大小为 1 KB，该服务的总成本将为 US$ 17.93。
- en: 'Total: US$ 17.93'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 总计：US$ 17.93
- en: Lambda pricing
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda 定价
- en: When you create a Lambda function, you need to configure the amount of RAM memory
    that will be available for use. It ranges from 128 MB to 1.5 GB. Allocating more
    memory means additional costs. It breaks the philosophy of avoiding provision,
    but at least it's the only thing you need to worry about. The good practice here
    is to estimate how much memory each function needs and make some tests before
    deploying to production. A bad provision may result in errors or higher costs.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个 Lambda 函数时，你需要配置将可用于使用的 RAM 内存量。它的范围从 128 MB 到 1.5 GB。分配更多内存意味着额外的成本。这打破了避免配置的哲学，但至少这是你需要担心的事情之一。这里的良好实践是估计每个函数所需的内存量，并在部署到生产之前进行一些测试。不良的配置可能会导致错误或更高的成本。
- en: 'Lambda has the following billing model:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 具有以下计费模型：
- en: US$ 0.20 per 1 million requests
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每 1,000,000 次请求收费 US$ 0.20
- en: US$ 0.00001667 GB-second
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每GB-second 收费 US$ 0.00001667
- en: Running time is counted in fractions of seconds, rounding up to the nearest
    multiple of 100 milliseconds.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时间按秒的分数计算，向上取整到最接近的 100 毫秒的倍数。
- en: Furthermore, there is a permanent free tier that gives you 1 million requests
    and 400,000 GB-seconds per month without charges.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个永久免费层，每月提供 1,000,000 次请求和 400,000 GB-seconds，无需收费。
- en: 'In our use case scenario, we have assumed 5 million requests per month with
    an average of 200 milliseconds per execution. We can also assume that the allocated
    RAM memory is 512 MB per function:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的用例场景中，我们假设每月有 500 万次请求，平均每次执行时间为 200 毫秒。我们还可以假设每个函数分配的 RAM 内存为 512 MB：
- en: '**Request charges**: Since 1 million requests are free, you pay for 4 million
    that will cost US$ 0.80.'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求费用**：由于 1,000,000 次请求是免费的，你只需为 4,000,000 次请求付费，费用为 US$ 0.80。'
- en: '**Compute charges**: Here, 5 million executions of 200 milliseconds each gives
    us 1 million seconds. As we are running with a 512 MB capacity, it results in
    500,000 GB-seconds, where 400,000 GB-seconds of these are free, resulting in a
    charge of 100,000 GB-seconds that costs US$ 1.67.'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计算费用**：在这里，500 万次执行每次 200 毫秒的计算，总共为 1,000,000 秒。由于我们以 512 MB 的容量运行，这导致 500,000
    GB-seconds，其中 400,000 GB-seconds 是免费的，因此产生 100,000 GB-seconds 的费用，费用为 US$ 1.67。'
- en: '**Total**: US$ 2.47'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总计**：US$ 2.47'
- en: SimpleDB pricing
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SimpleDB 定价
- en: 'Take a look at the following SimpleDB billing where the free tier is valid
    for new and existing users:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下 SimpleDB 计费，其中免费层适用于新用户和现有用户：
- en: US$ 0.14 per machine-hour (25 hours free)
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每机器小时收费 US$ 0.14（25 小时免费）
- en: US$ 0.09 per GB transferred out to the internet (1 GB is free)
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每向互联网传输 1 GB 数据收费 US$ 0.09（1 GB 是免费的）
- en: US$ 0.25 per GB stored (1 GB is free)
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每存储 1 GB 数据收费 US$ 0.25（1 GB 是免费的）
- en: 'Take a look at the following charges:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下费用：
- en: '**Compute charges**: Considering 5 million requests with an average of 200
    milliseconds of execution time, where 50% of this time is waiting for the database
    engine to execute, we estimate 139 machine hours per month. Discounting 25 free
    hours, we have an execution cost of US$ 15.96.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计算费用**：考虑到 500 万次请求，平均执行时间为 200 毫秒，其中 50% 的时间是在等待数据库引擎执行，我们估计每月需要 139 个机器小时。扣除
    25 个免费小时，执行费用为 US$ 15.96。'
- en: '**Transfer costs**: Since we''ll transfer data between SimpleDB and AWS Lambda,
    there is no transfer cost.'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传输费用**：由于我们将数据在 SimpleDB 和 AWS Lambda 之间传输，因此没有传输费用。'
- en: '**Storage charges**: If we assume a 5 GB database, it results in US$ 1.00,
    since 1 GB is free.'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储费用**：如果我们假设一个 5 GB 的数据库，由于 1 GB 是免费的，因此结果为 US$ 1.00。'
- en: '**Total**: US$ 16.96, but this will not be added in the final estimation since
    we will run our application using DynamoDB.'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总计**：US$ 16.96，但这个费用将不会添加到最终估计中，因为我们将在使用 DynamoDB 运行我们的应用程序。'
- en: DynamoDB
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DynamoDB
- en: DynamoDB requires you to provision the throughput capacity that you expect your
    tables to offer. Instead of provisioning hardware, memory, CPU, and other factors,
    you need to say how many read and write operations you expect and AWS will handle
    the necessary machine resources to meet your throughput needs with consistent
    and low-latency performance.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: DynamoDB 要求您为预期您的表提供的吞吐量容量进行配置。您不需要配置硬件、内存、CPU 等因素，您需要说明您期望的读取和写入操作的数量，AWS 将处理必要的机器资源，以提供一致且低延迟的性能来满足您的吞吐量需求。
- en: 'One read capacity unit represents one strongly consistent read per second or
    two eventually consistent reads per second, where objects have a size up to 4
    KB. Regarding the writing capacity, one unit means that you can write one object
    of size 1 KB per second. Considering these definitions, AWS offers in the permanent
    free tier 25 read units and 25 write units of throughput capacity, in addition
    to 25 GB of free storage. It charges as follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 一个读取容量单元代表每秒一次强一致性读取或每秒两次最终一致性读取，其中对象大小最多为 4 KB。关于写入容量，一个单元意味着您每秒可以写入一个大小为 1
    KB 的对象。考虑到这些定义，AWS 在永久免费层提供 25 个读取单元和 25 个写入单元的吞吐量容量，以及 25 GB 的免费存储。其收费如下：
- en: US$ 0.47 per month for every **Write Capacity Unit** (**WCU**)
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个月每 **写入容量单元**（**WCU**）收费美元 0.47
- en: US$ 0.09 per month for every **Read Capacity Unit** (**RCU**)
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个月每 **读取容量单元**（**RCU**）收费美元 0.09
- en: US$ 0.25 per GB/month stored
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每存储 1 GB/月收费美元 0.25
- en: US$ 0.09 GB per GB transferred out to the Internet
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每传输 1 GB 到互联网收费美元 0.09
- en: Since our estimated database will have only 5 GB, we are on the free tier and
    we will not pay for transferred data because there is no transfer cost to AWS
    Lambda.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们估计的数据库将只有 5 GB，我们处于免费层，我们不会为传输的数据付费，因为向 AWS Lambda 的传输没有费用。
- en: Regarding read/write capacities, we have estimated 5 million requests per month.
    If we evenly distribute them, we will get two requests per second. In this case,
    we will consider that it's one read and one write operation per second.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 关于读写容量，我们估计每月有 500 万次请求。如果我们平均分配，我们将每秒获得两次请求。在这种情况下，我们将考虑每秒一次读操作和一次写操作。
- en: We need to estimate now how many objects are affected by a read and a write
    operation. For a write operation, we can estimate that we will manipulate 10 items
    on average and a read operation will scan 100 objects. In this scenario, we would
    need to reserve 10 WCU and 100 RCU. As we have 25 WCU and 25 RCU for free, we
    only need to pay for 75 RCU per month, which costs US$ 6.75.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要估计受读操作和写操作影响的对象数量。对于写操作，我们可以估计平均操纵 10 项，而读操作将扫描 100 个对象。在这种情况下，我们需要预留
    10 WCU 和 100 RCU。由于我们有 25 WCU 和 25 RCU 的免费额度，我们每月只需为 75 RCU 支付费用，费用为美元 6.75。
- en: 'Total: US$ 6.75'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 总计：美元 6.75
- en: Total pricing
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总定价
- en: 'Let''s summarize the cost of each service in the following table:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下表中总结每种服务的成本：
- en: '| **Service** | **Monthly Costs** |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| **服务** | **月度成本** |'
- en: '| Route 53 | US$ 0.54 |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| Route 53 | 美元 0.54 |'
- en: '| S3 | US$ 0.82 |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| S3 | 美元 0.82 |'
- en: '| CloudFront | US$ 21.97 |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| CloudFront | 美元 21.97 |'
- en: '| Cognito | US$ 0.30 |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| Cognito | 美元 0.30 |'
- en: '| IoT | US$ 1.01 |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| IoT | 美元 1.01 |'
- en: '| CloudWatch | US$ 1.00 |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| CloudWatch | 美元 1.00 |'
- en: '| API Gateway | US$ 17.93 |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| API Gateway | 美元 17.93 |'
- en: '| Lambda | US$ 2.47 |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| Lambda | 美元 2.47 |'
- en: '| DynamoDB | US$ 6.75 |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| DynamoDB | 美元 6.75 |'
- en: '| **Total** | **US$ 52.79** |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| **总计** | **美元 52.79** |'
- en: It results in a total cost of ~ US$ 50 per month in infrastructure to serve
    100,000 page views. If you have a conversion rate of 1%, you can get 1,000 sales
    per month, which means that you pay US$ 0.05 in infrastructure for each product
    that you sell.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致在基础设施上每月总成本约为美元 50，以服务 10 万次页面浏览。如果您有 1% 的转化率，您每月可以获得 1,000 笔销售，这意味着您为每件销售的产品支付美元
    0.05 的基础设施费用。
- en: Summary
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you were introduced to the services that will be used throughout
    this book. You already know how to create new AWS users with restricted privileges,
    how to use the AWS CLI and the Node SDK, and what the frontend, backend, and notification
    services are. This chapter finished showing how each service fits in our sample
    application architecture and you learned how to estimate its costs.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经了解了本书中将使用的服务。您已经知道如何创建具有受限权限的新 AWS 用户，如何使用 AWS CLI 和 Node SDK，以及前端、后端和通知服务是什么。本章展示了每个服务如何适应我们的示例应用程序架构，并学习了如何估计其成本。
- en: In the next chapter, you'll be introduced to the Serverless Framework that plays
    an important role in our development workflow, automating tasks and organizing
    the code. You'll learn how to configure, deploy Lambda functions, and structure
    the beginning of our sample application.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将了解到在开发工作流程中扮演重要角色的无服务器框架，它能够自动化任务和组织代码。你将学习如何配置、部署Lambda函数，以及如何构建我们示例应用的初始结构。
