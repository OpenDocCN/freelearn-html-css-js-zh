["```js\nconst ac = getAc(\"zammetti\");\n```", "```js\nconst checkingAccount = getCheckingAccountFromLastName(\"Zammetti\");\n```", "```js\n// Get the checking account.\nconst checkingAccount = getCheckingAccuntFromLastName(\"Zammetti\");\n// Increment its transaction count.\ncheckingAccount.transactionCount++;\n// Create a transaction.\nconst transaction = new Transaction();\n// Add a credit.\nTransaction.credit(100);\n// Add transaction to account.\naccount.addTransaction(transaction);\n// Save the updated account back to the database.\naccount.saveToDatabase();\n```", "```js\n// Add a transaction to the account and update it in the database.\nconst checkingAccount = getCheckingAccuntFromLastName(\"Zammetti\");\ncheckingAccount.transactionCount++;\nconst transaction = new Transaction();\nTransaction.credit(100);\naccount.addTransaction(transaction);\naccount.saveToDatabase();\n```", "```js\n/**\n * Perform a SQL database query against the MASTER accounts\n * table to find a checking account based on a last name.\n * The account will consist of the basic account details,\n * as well as extended transaction data as a sub-object.\n * Note that an exception is never thrown, an Account\n * object will ALWAYS be returned.  Used by the account\n * list screen, as well as the processing subsystem.\n *\n * @param  inLastName The last name to return an account\n                      for.\n * @return            An Account object.  If inLastName is\n                      null, return an empty Account object.\n                      If no account is found for the last\n                      name, return an Account object with\n                      an account number of -1 and all\n                      other fields empty.\n */\n```"]