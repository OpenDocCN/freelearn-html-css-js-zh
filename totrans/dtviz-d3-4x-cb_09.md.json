["```js\nvar data = [ \n  {startAngle: 0, endAngle: 0.6283185307179586},  \n  {startAngle: 0.6283185307179586, endAngle: 1.2566370614359172}, \n  ... \n  {startAngle: 5.654866776461628, endAngle: 6.283185307179586} \n]; \n\n```", "```js\n<script type=\"text/javascript\"> \n    function pieChart() { \n        var _chart = {}; \n\n        var _width = 500, _height = 500, \n                _data = [], \n                _colors = d3.scaleOrdinal(d3.schemeCategory10), \n                _svg, \n                _bodyG, \n                _pieG, \n                _radius = 200, \n                _innerRadius = 100, \n                _duration = 1000; \n\n        _chart.render = function () { \n            if (!_svg) { \n                _svg = d3.select(\"body\").append(\"svg\") \n                        .attr(\"height\", _height) \n                        .attr(\"width\", _width); \n            } \n\n            renderBody(_svg); \n        }; \n\n        function renderBody(svg) { \n            if (!_bodyG) \n                _bodyG = svg.append(\"g\") \n                        .attr(\"class\", \"body\"); \n\n            renderPie(); \n        } \n\n        function renderPie() { \n            var pie = d3.pie() // <-A \n                    .sort(function (d) { \n                        return d.id; \n                    }) \n                    .value(function (d) { \n                        return d.value; \n                    }); \n\n            var arc = d3.arc() \n                    .outerRadius(_radius) \n                    .innerRadius(_innerRadius); \n\n            if (!_pieG) \n                _pieG = _bodyG.append(\"g\") \n                        .attr(\"class\", \"pie\") \n                        .attr(\"transform\", \"translate(\"  \n                            + _radius  \n                            + \",\"  \n                            + _radius + \")\"); \n\n            renderSlices(pie, arc); \n\n            renderLabels(pie, arc); \n        } \n\n  function renderSlices(pie, arc) { \n  // explained in detail in the'how it works...' section \n  ... \n  } \n\n  function renderLabels(pie, arc) { \n  // explained in detail in the 'how it works...' section \n  ... \n  } \n  ... \n  return _chart; \n} \n... \n</script> \n\n```", "```js\nvar pie = d3.pie() // <-A \n              .sort(function (d) { \n                  return d.id; \n              }) \n              .value(function (d) { \n                  return d.value; \n              }); \n\n```", "```js\nfunction renderSlices(pie, arc) { \n    var slices = _pieG.selectAll(\"path.arc\") \n            .data(pie(_data)); // <-B \n\n    slices.enter() \n            .append(\"path\") \n        .merge(slices) \n            .attr(\"class\", \"arc\") \n            .attr(\"fill\", function (d, i) { \n                return _colors(i); \n            }) \n        .transition() \n            .duration(_duration) \n            .attrTween(\"d\", function (d) { \n                var currentArc = this.__current__; // <-C \n\n                if (!currentArc) \n                    currentArc = {startAngle: 0,  \n                                    endAngle: 0}; \n\n                var interpolate = d3.interpolate( \n                                    currentArc, d); \n\n                this.__current__ = interpolate(1);//<-D \n\n                return function (t) { \n                    return arc(interpolate(t)); \n                }; \n            }); \n} \n\n```", "```js\nfunction renderLabels(pie, arc) { \n            var labels = _pieG.selectAll(\"text.label\") \n                    .data(pie(_data)); // <-E \n\n            labels.enter() \n                    .append(\"text\") \n                .merge(labels) \n                    .attr(\"class\", \"label\") \n                .transition() \n                    .duration(_duration) \n                    .attr(\"transform\", function (d) { \n                        return \"translate(\"  \n                            + arc.centroid(d) + \")\"; // <-F \n                    }) \n                    .attr(\"dy\", \".35em\") \n                    .attr(\"text-anchor\", \"middle\") \n                    .text(function (d) { \n                        return d.data.id; \n                    });         \n} \n\n```", "```js\n<script type=\"text/javascript\"> \nfunction stackedAreaChart() { \n    var _chart = {}; \n\n    var _width = 900, _height = 450, \n            _margins = {top: 30, left: 30, right: 30, bottom: 30}, \n            _x, _y, \n            _data = [], \n            _colors = d3.scaleOrdinal(d3.schemeCategory10), \n            _svg, \n            _bodyG, \n            _line; \n\n    _chart.render = function () { \n        if (!_svg) { \n            _svg = d3.select(\"body\").append(\"svg\") \n                    .attr(\"height\", _height) \n                    .attr(\"width\", _width); \n\n            renderAxes(_svg); \n\n            defineBodyClip(_svg); \n        } \n\n    renderBody(_svg); \n}; \n... \nfunction renderBody(svg) { \n   if (!_bodyG) \n       _bodyG = svg.append(\"g\") \n                    .attr(\"class\", \"body\") \n                    .attr(\"transform\", \"translate(\" \n                            + xStart() + \",\" \n                            + yEnd() + \")\") \n                    .attr(\"clip-path\", \"url(#body-clip)\"); \n\n    var stack = d3.stack() // <-A \n                .keys(['value1', 'value2', 'value3']) \n                .offset(d3.stackOffsetNone); \n\n    var series = stack(_data); //<-B \n\n    renderLines(series); \n\n    renderAreas(series); \n} \n\nfunction renderLines(stackedData) { \n  // explained in details in the'how it works...' section \n... \n} \n\nfunction renderAreas(stackedData) { \n  // explained in details in the 'how it works...' section \n... \n} \n... \n\n```", "```js\nvar stack = dn3.stack() // <-A \n                .keys(['value1', 'value2', 'value3']) // <-B \n                .offset(d3.stackOffsetNone); \n... \nfunction update() { \n    data = d3.range(numberOfDataPoint).map(function (i) { \n        return {value1: randomData(),  \n                value2: randomData(),  \n                value3: randomData()}; \n    }); \n\n    chart.data(data).render(); \n} \n\n```", "```js\nfunction renderLines(series) { \n        _line = d3.line() \n                .x(function (d, i) { \n                    return _x(i); //<-C \n                }) \n                .y(function (d) { \n                    return _y(d[1]); //<-D \n                }); \n\n        var linePaths = _bodyG.selectAll(\"path.line\") \n                .data(series); \n\n        linePaths.enter() \n                .append(\"path\") \n            .merge(linePaths) \n                .style(\"stroke\", function (d, i) { \n                    return _colors(i); \n                }) \n                .attr(\"class\", \"line\") \n            .transition() \n                .attr(\"d\", function (d) { \n                    return _line(d); \n                }); \n} \n\n```", "```js\nfunction renderAreas(series) { \n        var area = d3.area() \n                .x(function (d, i) { \n                    return _x(i); //<-E \n                }) \n                .y0(function(d){return _y(d[0]);}) //<-F \n                .y1(function (d) { \n                    return _y(d[1]); //<-G \n                }); \n\n        var areaPaths = _bodyG.selectAll(\"path.area\") \n                .data(series); \n\n        areaPaths.enter() \n                .append(\"path\") \n            .merge(areaPaths) \n                .style(\"fill\", function (d, i) { \n                    return _colors(i); \n                }) \n                .attr(\"class\", \"area\") \n            .transition() \n                .attr(\"d\", function (d) { \n                    return area(d); \n                }); \n} \n\n```", "```js\n{ \n  \"name\": \"flare\", \n  \"children\": [ \n  { \n    \"name\": \"analytics\", \n    \"children\": [ \n    { \n      \"name\": \"cluster\", \n      \"children\": [ \n        {\"name\": \"AgglomerativeCluster\", \"size\": 3938}, \n        {\"name\": \"CommunityStructure\", \"size\": 3812}, \n        {\"name\": \"MergeEdge\", \"size\": 743} \n      ] \n    }, \n    { \n      \"name\": \"graph\", \n      \"children\": [ \n        {\"name\": \"BetweennessCentrality\", \"size\": 3534}, \n        {\"name\": \"LinkDistance\", \"size\": 5731} \n      ] \n    }, \n    { \n      \"name\": \"optimization\", \n      \"children\": [ \n        {\"name\": \"AspectRatioBanker\", \"size\": 7074} \n      ] \n    } \n  ]   \n  ] \n} \n\n```", "```js\nfunction treemapChart() { \n        var _chart = {}; \n\n        var _width = 1600, _height = 800, \n                _colors = d3.scaleOrdinal(d3.schemeCategory20c), \n                _svg, \n                _nodes, \n                _valueAccessor, \n                _treemap, \n                _bodyG; \n\n        _chart.render = function () { \n            if (!_svg) { \n                _svg = d3.select(\"body\").append(\"svg\") \n                        .attr(\"height\", _height) \n                        .attr(\"width\", _width); \n            } \n\n            renderBody(_svg); \n        }; \n\n        function renderBody(svg) { \n            // explained in the 'how it works...' section \n            ...  \n\n            renderCells(cells); \n        } \n\n        function renderCells(cells){ \n            // explained in the 'how it works...' section \n            ... \n        } \n\n        // accessors omitted \n        ... \n\n        return _chart; \n} \n\nd3.json(\"flare.json\", function (nodes) { \n  var chart = treemapChart(); \n  chart.nodes(nodes).render(); \n}); \n\n```", "```js\nfunction renderBody(svg) { \n        if (!_bodyG) { \n            _bodyG = svg.append(\"g\") \n                    .attr(\"class\", \"body\"); \n\n            _treemap = d3.treemap() //<-A \n                    .size([_width, _height]) \n                    .round(true) \n                    .padding(1); \n        } \n\n        var root = d3.hierarchy(_nodes) // <-B \n                .sum(_valueAccessor) \n                .sort(function(a, b) {  \n                     return b.value - a.value;  \n                }); \n\n        _treemap(root); //<-C \n\n        var cells = _bodyG.selectAll(\"g\") \n                .data(root.leaves()); // <-D \n\n        renderCells(cells); \n    } \n\n```", "```js\nfunction(d){ return d.size; } // visualize package size \nfunction(d){ return 1; } // visualize package count \n\n```", "```js\nvar cells = _bodyG.selectAll(\"g\") \n                .data(root.leaves()); // <-D \n\n```", "```js\nfunction renderCells(cells) { \n        var cellEnter = cells.enter().append(\"g\") \n                .attr(\"class\", \"cell\") \n                .attr(\"transform\", function (d) { \n                    return \"translate(\" + d.x0 + \",\"  \n                                     + d.y0 + \")\"; //<-E \n                }); \n\n        renderRect(cellEnter, cells); \n\n        renderText(cellEnter, cells); \n\n        cells.exit().remove(); \n    } \n\n```", "```js\nfunction renderRect(cellEnter, cells) { \n        cellEnter.append(\"rect\"); \n\n        cellEnter.merge(cells) \n                .transition() \n                .attr(\"transform\", function (d) { \n                    return \"translate(\" + d.x0 + \",\" + d.y0 + \")\";  \n                }) \n                .select(\"rect\") \n                .attr(\"width\", function (d) { //<-F \n                    return d.x1 - d.x0; \n                }) \n                .attr(\"height\", function (d) { \n                    return d.y1 - d.y0; \n                }) \n                .style(\"fill\", function (d) { \n                    return _colors(d.parent.data.name); //<-G \n                }); \n    } \n\n```", "```js\nfunction renderText(cellEnter, cells) { \n        cellEnter.append(\"text\"); \n\n        cellEnter.merge(cells) \n                .select(\"text\") //<-H \n                .style(\"font-size\", 11) \n                .attr(\"x\", function (d) { \n                    return (d.x1 - d.x0) / 2; \n                }) \n                .attr(\"y\", function (d) { \n                    return (d.y1 - d.y0) / 2; \n                }) \n                .attr(\"text-anchor\", \"middle\") \n                .text(function (d) { \n                    return d.data.name; \n                }) \n                .style(\"opacity\", function (d) { \n                    d.w = this.getComputedTextLength(); \n                    return d.w < (d.x1 - d.x0) ? 1 : 0; //<-I \n                }); \n    } \n\n```", "```js\nfunction tree() { \n        var _chart = {}; \n\n        var _width = 1600, _height = 1600, \n                _margins = {top: 30, left: 120, right: 30, bottom: 30}, \n                _svg, \n                _nodes, \n                _i = 0, \n                _duration = 300, \n                _bodyG, \n                _root; \n\n        _chart.render = function () { \n            if (!_svg) { \n                _svg = d3.select(\"body\").append(\"svg\") \n                        .attr(\"height\", _height) \n                        .attr(\"width\", _width); \n            } \n\n            renderBody(_svg); \n        }; \n\n        function renderBody(svg) { \n            if (!_bodyG) { \n                _bodyG = svg.append(\"g\") \n                        .attr(\"class\", \"body\") \n                        .attr(\"transform\", function (d) { \n                            return \"translate(\" + _margins.left \n                                    + \",\" + _margins.top + \")\"; \n                        }); \n            } \n\n            _root = d3.hierarchy(_nodes); // <-A \n\n            render(_root); \n        } \n\n        function render(root) { \n            var tree = d3.tree() // <-B \n                        .size([ \n                            (_height - _margins.top - _margins.bottom), \n                            (_width - _margins.left - _margins.right) \n                        ]); \n\n            tree(root); // <-C \n\n            renderNodes(root); // <-D \n\n            renderLinks(root); // <-E \n        } \n\n  function renderNodes(nodes, source) { \n    // will be explained in the 'how it works...' section \n    ... \n  } \n\n  function renderLinks(nodes, source) { \n    // will be explained in the 'how it works...' section \n    ... \n  } \n\n  // accessors omitted \n  ... \n\n  return _chart; \n} \n\n```", "```js\n{ \n \"name\": \"flare\", \n \"children\": [ \n  { \n   \"name\": \"analytics\", \n   \"children\": [ \n    { \n     \"name\": \"cluster\", \n     \"children\": [ \n      {\"name\": \"AgglomerativeCluster\", \"size\": 3938}, \n      {\"name\": \"CommunityStructure\", \"size\": 3812}, \n      {\"name\": \"HierarchicalCluster\", \"size\": 6714}, \n      {\"name\": \"MergeEdge\", \"size\": 743} \n     ] \n}, \n... \n} \n\n```", "```js\nfunction flare() { \n        d3.json(\"../../data/flare.json\", function (nodes) { \n            chart.nodes(nodes).render(); \n        }); \n} \n\n```", "```js\n_root = d3.hierarchy(_nodes); // <-A \n\n```", "```js\nvar tree = d3.tree() // <-B \n                .size([ \n                    (_height - _margins.top - _margins.bottom), \n                    (_width - _margins.left - _margins.right) \n                ]); \n\n```", "```js\ntree(root); // <-C \n\n```", "```js\nfunction renderNodes(root) { \n            var nodes = root.descendants(); \n\n            var nodeElements = _bodyG.selectAll(\"g.node\") \n                    .data(nodes, function (d) { \n                                    return d.id || (d.id = ++_i); \n                                }); \n\n            var nodeEnter = nodeElements.enter().append(\"g\") \n                    .attr(\"class\", \"node\") \n                    .attr(\"transform\", function (d) {  // <-F \n                        return \"translate(\" + d.y \n                                + \",\" + d.x + \")\"; \n                    }) \n                    .on(\"click\", function (d) { // <-G \n                        toggle(d); \n                        render(_root); \n                    }); \n\n            nodeEnter.append(\"circle\") // <-H \n                    .attr(\"r\", 4); \n\n            var nodeUpdate = nodeEnter.merge(nodeElements) \n                .transition().duration(_duration) \n                .attr(\"transform\", function (d) { \n                    return \"translate(\" + d.y + \",\" + d.x + \")\"; // <-I \n                }); \n\n            nodeUpdate.select('circle') \n                .style(\"fill\", function (d) { \n                  return d._children ? \"lightsteelblue\" : \"#fff\"; // <-J \n                }); \n\n            var nodeExit = nodeElements.exit() \n                    .transition().duration(_duration) \n                    .attr(\"transform\", function (d) { \n                        return \"translate(\" + d.y \n                                + \",\" + d.x + \")\"; \n                    }) \n                    .remove(); \n\n            nodeExit.select(\"circle\") \n                    .attr(\"r\", 1e-6) \n                    .remove(); \n\n            renderLabels(nodeEnter, nodeUpdate, nodeExit); \n} \n\n```", "```js\nvar nodes = root.descendants(); \nvar nodeElements = _bodyG.selectAll(\"g.node\") \n        .data(nodes, function (d) { \n            return d.id || (d.id = ++_i); \n        }); \n\n```", "```js\nvar nodeEnter = nodeElements.enter().append(\"g\") \n            .attr(\"class\", \"node\") \n            .attr(\"transform\", function (d) {  // <-F \n                return \"translate(\" + d.y \n                        + \",\" + d.x + \")\"; \n            }) \n            .on(\"click\", function (d) { // <-G \n                toggle(d); \n                render(_root); \n            }); \n\n```", "```js\n        function toggle(d) { \n            if (d.children) { \n                d._children = d.children; \n                d.children = null; \n            } else { \n                d.children = d._children; \n                d._children = null; \n            } \n        } \n\n```", "```js\nnodeEnter.append(\"circle\") // <-H \n            .attr(\"r\", 4); \n\n    var nodeUpdate = nodeEnter.merge(nodeElements) \n            .transition().duration(_duration) \n                .attr(\"transform\", function (d) { \n                    return \"translate(\" + d.y + \",\" + d.x + \")\"; // <-I \n                }); \n\n    nodeUpdate.select('circle') \n            .style(\"fill\", function (d) { \n                return d._children ? \"lightsteelblue\" : \"#fff\"; // <-J \n         }); \n\n```", "```js\nfunction renderLinks(root) { \n            var nodes = root.descendants().slice(1); \n\n            var link = _bodyG.selectAll(\"path.link\") \n                .data(nodes, function (d) { \n                    return d.id || (d.id = ++_i); \n                }); \n\n            link.enter().insert(\"path\", \"g\") // <-M \n                        .attr(\"class\", \"link\") \n                    .merge(link) \n                    .transition().duration(_duration) \n                       .attr(\"d\", function (d) { \n                        return generateLinkPath(d, d.parent); // <-N \n                    }); \n\n            link.exit().remove(); \n} \n\n```", "```js\nfunction generateLinkPath(target, source) { \n    var path = d3.path(); \n    path.moveTo(target.y, target.x); \n    path.bezierCurveTo((target.y + source.y) / 2, target.x, \n            (target.y + source.y) / 2, source.x, source.y, source.x); \n    return path.toString(); \n} \n\n```", "```js\nfunction pack() { \n        var _chart = {}; \n\n        var _width = 1280, _height = 800, \n                _svg, \n                _valueAccessor, \n                _nodes, \n                _bodyG; \n\n        _chart.render = function () { \n            if (!_svg) { \n                _svg = d3.select(\"body\").append(\"svg\") \n                        .attr(\"height\", _height) \n                        .attr(\"width\", _width); \n            } \n\n            renderBody(_svg); \n        }; \n\n        function renderBody(svg) { \n          if (!_bodyG) { \n              _bodyG = svg.append(\"g\") \n                      .attr(\"class\", \"body\"); \n          } \n\n          var pack = d3.pack() // <-A \n                  .size([_width, _height]); \n\n          var root = d3.hierarchy(_nodes) // <-B \n                        .sum(_valueAccessor) \n                        .sort(function(a, b) {  \n                          return b.value - a.value;  \n                        }); \n\n          pack(root); // <-C \n\n          renderCircles(root.descendants()); \n\n          renderLabels(root.descendants()); \n       } \n\n    function renderCircles(nodes) { \n      // will be explained in the 'how it works...' section \n      ... \n    } \n\n    function renderLabels(nodes) { \n      // omitted \n      ... \n    } \n\n    // accessors omitted \n    ... \n\n    return _chart; \n} \n\n```", "```js\n{ \n \"name\": \"flare\", \n \"children\": [ \n  { \n   \"name\": \"analytics\", \n   \"children\": [ \n    { \n     \"name\": \"cluster\", \n     \"children\": [ \n      {\"name\": \"AgglomerativeCluster\", \"size\": 3938}, \n      {\"name\": \"CommunityStructure\", \"size\": 3812}, \n      {\"name\": \"HierarchicalCluster\", \"size\": 6714}, \n      {\"name\": \"MergeEdge\", \"size\": 743} \n     ] \n    }, \n    ... \n   } \n  ] \n} \n\n```", "```js\nfunction flare() { \n    d3.json(\"../../data/flare.json\", function (nodes) { \n       chart.nodes(nodes).valueAccessor(size).render(); \n    }); \n} \n\n```", "```js\nvar pack = d3.pack() // <-A \n            .size([_width, _height]); \n\n```", "```js\nvar root = d3.hierarchy(_nodes) // <-B \n                .sum(_valueAccessor) \n                .sort(function(a, b) { return b.value - a.value; }); \npack(root); // <-C \n\n```", "```js\nfunction renderCircles(nodes) { // <-C \n    var circles = _bodyG.selectAll(\"circle\") \n            .data(nodes); \n    circles.enter().append(\"circle\") \n            .merge(circles) \n            .transition() \n        .attr(\"class\", function (d) { \n            return d.children ? \"parent\" : \"child\"; \n        }) \n        .attr(\"cx\", function (d) {return d.x;}) // <-D \n        .attr(\"cy\", function (d) {return d.y;}) \n        .attr(\"r\", function (d) {return d.r;}); \n    circles.exit().transition() \n            .attr(\"r\", 0) \n            .remove(); \n} \n\n```"]