["```js\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>QUnit Example</title>\n  <link rel=\"stylesheet\" href=\"/resources/qunit.css\">\n</head>\n<body>\n  <div id=\"qunit\"></div>\n  <div id=\"qunit-fixture\"></div>\n  <script src=\"img/qunit.js\"></script>\n  <script src=\"img/tests.js\"></script>\n</body>\n</html>\n```", "```js\n// Function to check a prime number\nfunction isPrime(number) {\n  var start = 2;\n  while (start <= Math.sqrt(number)) {\n    if (number % start++ < 1) return false;\n  }\n  return number > 1;\n}\n\ntest('Test a prime number', function () {\n  // tells you how many assertions are there in the test\n  expect(2);\n\n  // following two assertions check with two numbers \n  // whether they are prime number or not\n  ok(isPrime(3), '3 is a prime number');\n  equal(isPrime(8), false, '8 is not a prime number');\n});\n```", "```js\n// First module\nmodule('1st module', {\n  setup: function () {\n    // Runs before each test\n  },\n  teardown: function () {\n    // Runs after each test\n  }\n});\ntest('Test 1', function () {});\ntest('Test 2', function () {});\n\n// Second module\nmodule('2nd module');\ntest('Test 1', function () {});\n```", "```js\nvar User = Backbone.Model.extend({\n  defaults: {\n    name: 'Swapan Guha',\n    age: 56\n  }\n});\n\nmodule('User model tests', {\n  setup: function () {\n    this.user = new User();\n    this.user.set('age', 62);\n  }\n});\n\ntest('Can be instantiated with a default name and age to be set', function () {\n  equal(this.user.get('name'), 'Swapan Guha');\n  equal(this.user.get('age'), 64);\n});\n```", "```js\n// A User model definition\nvar User = Backbone.Model.extend({\n  defaults: {\n    name: ''\n  },\n\n  // Split the name to provide an array of first and last name\n  getNameAsArray: function () {\n    return this.get('name').split(' ');\n  }\n});\n\ntest('should call getNameAsArray and return an array',function () {\n  this.user = new User({\n    name: 'Krishnendu Saha'\n  });\n\n  // Added a spy on the the \"getNameAsArray\" method\n  sinon.spy(this.user, 'getNameAsArray'); // or this.spy()\n  this.user.getNameAsArray();\n\n  // We check whether the method is called only once\n  ok(this.user.getNameAsArray.calledOnce);\n\n  // We check whether the returned value of this \n  // method is an array\n  equal(_.isArray(this.user.getNameAsArray.returnValues[0]),true);\n});\n```", "```js\nvar stub = sinon.stub();\n```", "```js\nvar stub = sinon.stub(object, \"method\");\n```", "```js\nvar stub = sinon.stub(object, \"method\", function(){});\n```", "```js\n// We will use the same User model definition here\n\nmodule(\"Should work when getNameAsArray method is called\", {\n  setup: function () {\n    this.user = new User();\n\n    // Use a stub to replace the getNameAsArray method\n    this.userStub = sinon.stub(this.user, \"getNameAsArray\");\n    this.userStub.returns([]);\n  },\n\n  // Restore the original method\n  teardown: function () {\n    this.userStub.restore();\n  }\n});\n\ntest('should call getNameAsArray and must return an empty array', function () {\n  this.user.getNameAsArray();\n\n  // Should return an empty array\n  equal(_.isArray(this.user.getNameAsArray.returnValues[0]), true);\n  equal(this.user.getNameAsArray.returnValues[0].length, 0);\n});\n```", "```js\ntest('should call getNameAsArray once and check it is called on the user model', function () {\n  this.user = new User({\n    name: 'Subodh Guha'\n  });\n\n  var mock = sinon.mock(this.user);\n\n  // We set the expectations here\n  mock.expects('getNameAsArray').once().on(this.user);\n\n  // Execution happens here\n  this.user.getNameAsArray();\n\n  // Now we verify whether the expectations are met or not\n  mock.verify();\n});\n```"]