- en: Chapter 7. CSS Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS functions are used for many things in CSS. They can be used to create special
    types of processes such as creating animations or use custom fonts, or create
    visual effects like transparencies or transforming elements in both two-dimensional
    and three-dimensional planes.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see what CSS functions are all about.
  prefs: []
  type: TYPE_NORMAL
- en: Filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS filters allow us to manipulate the color of an element in different ways.
  prefs: []
  type: TYPE_NORMAL
- en: brightness()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `brightness()` CSS function is used with the `filter` property, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `brightness()` function modifies the illumination of an image. Values are
    declared as either a *percentage* or a *number* without a unit, for example, `10%`
    and `0.5%`
  prefs: []
  type: TYPE_NORMAL
- en: A value of `100%` leaves the element unchanged; a value of `0%` makes the element
    completely black. Values over `100%` are allowed and create a more intense effect.
    There is no limit to the value.
  prefs: []
  type: TYPE_NORMAL
- en: A value of `1` leaves the element unchanged; a value of `0` makes the element
    completely black. Values over `1` are allowed and create a more intense effect.
    There is no limit to the value. Also, negative values are not valid for either
    the percentage of the number.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: contrast()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `contrast()` CSS function is used with the `filter` property, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `contrast()` function modifies the contrast of an element. Values are declared
    as either a *percentage* or a *number* without a unit, for example, `10%` and
    `0.5%`.
  prefs: []
  type: TYPE_NORMAL
- en: A value of `100%` leaves the element unchanged; a value of `0%` makes the element
    completely black. Values over `100%` are allowed and create a more intense effect.
    There is no limit to the value.
  prefs: []
  type: TYPE_NORMAL
- en: A value of `1` leaves the element unchanged; a value of `0` makes the element
    completely black. Values over `1` are allowed and create a more intense effect.
    There is no limit to the value. Also, negative values are not valid and decimal
    values are allowed for both.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: grayscale()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `grayscale()` CSS function is used with the `filter` property, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `grayscale()` function converts an element to shades of black. Values are
    declared as either a *percentage* or a *number* without a unit, for example, `10%`
    and `0.5%`.
  prefs: []
  type: TYPE_NORMAL
- en: A value of `0%` leaves the element unchanged; a value of `100%` makes the element
    grayscale. Values over `100%` are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: A value of `0` leaves the element unchanged; a value of `1` makes the element
    grayscale. Values over `1` are not allowed. Also, negative values are not valid
    for either. Decimal values are allowed
  prefs: []
  type: TYPE_NORMAL
- en: invert()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `invert()` CSS function is used with the `filter` property, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `invert()` function inverts the color of the element. If used in an image,
    it makes the image look like a film negative.
  prefs: []
  type: TYPE_NORMAL
- en: A value of `100%` completely inverts the element's color; a value of `0%` leaves
    the element unchanged. Values over `100%` are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: A value of `1` completely inverts the element's color; a value of `0` leaves
    the element unchanged. Values over `1` are not allowed. Also, negative values
    are not valid. Decimal values are allowed for both.
  prefs: []
  type: TYPE_NORMAL
- en: hue-rotate()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `hue-rotate()` CSS function is used with the `filter` property, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `hue-rotate()` function applies a hue rotation to the element. It accepts
    an *angle* value.
  prefs: []
  type: TYPE_NORMAL
- en: The angle value defines the degrees around the color wheel that the element
    sample will be modified to.
  prefs: []
  type: TYPE_NORMAL
- en: There is no maximum value. However, if the value is larger than `360deg`, the
    rotation will just go around. For example, if we declare `380deg`, that would
    the same as `20deg`.
  prefs: []
  type: TYPE_NORMAL
- en: blur()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `blur()` CSS function is used with the `filter` property, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `blur()` function gives the *smudge* effect. Values are declared as *length*
    values (`px`, `em`, `in`, `mm`, `cm`, `vw` and so on). The higher the value, the
    more intense the blur effect is, and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: Percentage and negative values are not allowed, but decimal values are.
  prefs: []
  type: TYPE_NORMAL
- en: saturate()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `saturate()` CSS function is used with the `filter` property, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It affects the saturation levels of an element. Values are declared as either
    a *percentage* or a *number* without a unit, for example, `10%` and `0.5%`
  prefs: []
  type: TYPE_NORMAL
- en: The default saturation value of an element is `100%`, or `1` if using a unitless
    number.
  prefs: []
  type: TYPE_NORMAL
- en: A value of `0%` completely desaturates the element (it removes all color leaving
    the element in grayscale); a value of `100%` leaves the element unchanged. Values
    over `100%` are allowed creating a more intense effect.
  prefs: []
  type: TYPE_NORMAL
- en: A value of `0` completely desaturates the element (it removes all color leaving
    the element in grayscale); a value of `1` leaves the element unchanged. Values
    over `1` are allowed creating a more intense effect.
  prefs: []
  type: TYPE_NORMAL
- en: sepia()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `sepia()` CSS function is used with the `filter` property, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `sepia()` function converts an element to sepia. Think of a grayscale image
    but in shades of brown.
  prefs: []
  type: TYPE_NORMAL
- en: A value of `100%` completely turns the element to sepia; a value of `0%` leaves
    the element unchanged. Values over `100%` are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: A value of `1` completely turns the element to sepia; a value of `0` leaves
    the element unchanged. Values over `1` are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Also, for both, negative values are not valid.
  prefs: []
  type: TYPE_NORMAL
- en: Transforms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS transforms have gained such popularity that it's rare not to see some sort
    of transformation in a website nowadays, for example, button shapes, animations,
    and layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see the transformation CSS functions.
  prefs: []
  type: TYPE_NORMAL
- en: matrix()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `matrix()` CSS function is used with the `transform` property, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `matrix()` function is the shorthand for all transformation properties,
    since they can be combined here. This function is used to define a two-dimensional
    transformation matrix.
  prefs: []
  type: TYPE_NORMAL
- en: This function requires a solid understanding of math, but in reality this function
    isn't something to be done by hand. Instead, we can use a tool like Eric Meyer's
    and Aaron Gustafson's *The Matrix Resolutions* ([http://tiny.cc/eric-meyer-matrix](http://tiny.cc/eric-meyer-matrix)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The explanation of the advanced mathematics of the `matrix()` function are
    beyond the scope of this book. However, for very detailed explanations you can
    refer to any of these two articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Understanding the CSS Transforms Matrix* by Tiffany Brown ([http://tiny.cc/css-matrix-1](http://tiny.cc/css-matrix-1))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The CSS3 matrix() Transform for the Mathematically Challenged* by Zoltan Hawryluk
    ([http://tiny.cc/css-matrix-2](http://tiny.cc/css-matrix-2))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: matrix3d()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `matrix3d()` CSS function is used with the `transform` property, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just like the two-dimensional `matrix()` function, the `matrix3d()` function
    is a shorthand, but this one is for all transform 3D properties in a 4 x 4 grid.
  prefs: []
  type: TYPE_NORMAL
- en: This function requires a solid understanding of math, but in reality this function
    isn't something to be done by hand. Instead, we can use a tool like Eric Meyer
    and Aaron Gustafson's *The Matrix Resolutions* ([http://tiny.cc/eric-meyer-matrix](http://tiny.cc/eric-meyer-matrix)).
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: rotate()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rotate()` CSS function is used with the `transform` property, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `rotate()` function rotates an element around a fixed point in a two-dimensional
    space. It accepts an *angle* value using the `deg`, `grad`, `rad`, or `turn` units.
    The `deg` unit is most commonly used. Negative values are valid.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: rotate3d()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rotate3d()` CSS function is used with the `transform` property, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `rotate3d()` function rotates an element around a fixed position in a three-dimensional
    plane via the *X*, *Y*, and *Z* axes. It accepts four values: three unitless *number*
    values that correspond to the *X*, *Y*, and *Z* axes, and an *angle* value that
    defines the amount of rotation.'
  prefs: []
  type: TYPE_NORMAL
- en: Positive values rotate the element clockwise in the corresponding axis. Negative
    values rotate the element counter-clockwise.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: rotateX()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rotateX()` CSS function is used with the `transform` property, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code is similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `rotateX()` function rotates an element on the *X* axes in a three-dimensional
    plane. It accepts an *angle* value.
  prefs: []
  type: TYPE_NORMAL
- en: Positive values rotate the element clockwise. Negative values rotate the element
    counter-clockwise.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: rotateY()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rotateY()` CSS function is used with the `transform` property, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous line is the same as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `rotateY()` function rotates an element on the *Y* axes in a three-dimensional
    plane. It accepts an *angle* value.
  prefs: []
  type: TYPE_NORMAL
- en: Positive values rotate the element clockwise. Negative values rotate the element
    counter-clockwise.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: rotateZ()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rotateY()` CSS function is used with the `transform` property, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Which is the same as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `rotateY()` function rotates an element on the *Z* axes in a three-dimensional
    plane. It accepts an *angle* value.
  prefs: []
  type: TYPE_NORMAL
- en: Positive values rotate the element clockwise. Negative values rotate the element
    counter-clockwise.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: scale()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `scale()` CSS function is used with the `transform` property, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `scale()` function changes the size of an element in a two-dimensional plane
    to make it larger or smaller. It supports one or two unitless *number* values,
    where the second value is optional. The number indicates the number of times the
    element should be scaled. For example, a value of `2` means the element is scaled
    (enlarged) `200%`; a value of `0.5` means the element should be scaled (reduced)
    to `50%`.
  prefs: []
  type: TYPE_NORMAL
- en: The first value represents a horizontal scale and the second a vertical scale.
    If a single value is declared, it means that both orientations will use the same
    value.
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are allowed. However, when negative values are used, the element
    is flipped.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When an element is scaled, it *does not* affect the layout; it will simply overlap
    or appear below other elements depending on the source order.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: scale3d()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `scaled3d()` CSS function is used with the `transform` property, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `scaled3d()` function changes the size of an element in a three-dimensional
    plane via the *X*, *Y*, and *Z* axes to make it larger or smaller.
  prefs: []
  type: TYPE_NORMAL
- en: It supports three unitless *number* values which are required. Negative values
    are allowed. However, when negative values are used, the element is flipped.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: scaleX()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `scaleX()` CSS function is used with the `transform` property, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `scaleX()` function changes the size of an element on the *X* axes in a
    two-dimensional plane. It supports a unitless *number* value.
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are allowed. However, the element is flipped when negative values
    are used.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: scaleY()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `scaleY()` CSS function is used with the `transform` property, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `scaleY()` function changes the size of an element on the *Y* axes in a
    two-dimensional plane. It supports a unitless *number* value.
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are allowed. However, the element is flipped when negative values
    are used.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: scaleZ()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `scaleZ()` CSS function is used with the `transform` property, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `scaleZ()` function changes the size of an element on the *Y* axes in a
    two-dimensional plane. It supports a unitless *number* value.
  prefs: []
  type: TYPE_NORMAL
- en: Negative values are allowed. However, the element is flipped when negative values
    are used.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: skew()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `skew()` CSS function is used with the `transform` property, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can also use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `skew()` function skews or *tilts* an element on the *X* axes or both the
    *X* and the *Y* axes on a two-dimensional plane. For example, a parallelogram
    is a skewed rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'It supports one or two *angle* values: the first one corresponds to the *X*
    axes and the second one to the *Y* axes. If only one value is declared, the element
    is skewed only on the *X* axes. Negative values are allowed.'
  prefs: []
  type: TYPE_NORMAL
- en: It's recommended that you use either the `skewX()` or `skewY()` functions rather
    than `skew()`, because `skew()` has been removed from the spec (although most
    browsers still support it).
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: skewX()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `@skewX()` CSS function is used with the `transform` property, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `@skewX()` function skews or *tilts* an element on the *X* axes on a two-dimensional
    plane.
  prefs: []
  type: TYPE_NORMAL
- en: It supports one *angle* value. Negative values are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: skewY()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `@skewY()` CSS function is used with the `transform` property, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `@skewY()` function skews or *tilts* an element on the *Y* axes in a two-dimensional
    plane.
  prefs: []
  type: TYPE_NORMAL
- en: It supports one *angle* value. Negative values are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: steps()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `steps()` timing function is used with the `transition-timing-function`
    or the `animation-timing-function` properties, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `steps()` timing function divides the transition or the animation into intervals
    of equal sizes. We can also specify if the steps of transition or animation happen
    at the `start` or the `end` of the interval. The `end` value is the default in
    case no argument is declared.
  prefs: []
  type: TYPE_NORMAL
- en: It supports one *numeric* value, or one *numeric* value and an optional value
    of either `start` or `end`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The best way to understand how `start` or `end` works is with an example: the
    animation will begin right away when using `start`, and it will be delayed a bit
    when using `end`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: translate()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `translate()` CSS function is used with the `transform` property, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Or like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `translate()` function affects the position of an element on the *X* axes
    or both the *X* and the *Y* axes on a two-dimensional plane.
  prefs: []
  type: TYPE_NORMAL
- en: It supports both *length* and *percentage* values. Negative values are allowed.
    It supports one or two *length* and *percentage* values; the first one corresponds
    to the X-axis and the second one to the Y-axis. If only one value is declared,
    the element is moved only on the X-axis. Negative values are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: translate3d()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `translate3d()` CSS function is used with the `transform` property and
    the `perspective` function, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `translate3d()` function is used to move an element on the *X*, *Y*, and
    *Z* axes on a three-dimensional plane.
  prefs: []
  type: TYPE_NORMAL
- en: It supports both *length* and *percentage* values. Negative values are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: In order to be able to see this function work, we need to give the element in
    question a three-dimensional plane with the `perspective` function, otherwise
    the `translate3d()` declaration will have no effect.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: translateX()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `translateX()` CSS function is used with the `transform` property, and
    it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `translateX()` function is used to move an element on the *X* axes in a
    two-dimensional plane.
  prefs: []
  type: TYPE_NORMAL
- en: It supports both *length* and *percentage* values. Negative values are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: translateY()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `translateY()` CSS function is used with the `transform` property, and
    it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is used to move an element on the *Y* axes in a two-dimensional plane.
    It supports both *length* and *percentage* values. Negative values are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: translateZ()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `translateZ()` CSS function is used with the `transform` property and with
    the `perspective` function, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is used to move an element on the *Z* axes on a three-dimensional plane.
    It supports both *length* and *percentage* values. Negative values are allowed.
  prefs: []
  type: TYPE_NORMAL
- en: In order to be able to see this function work, we need to give the element in
    question a three-dimensional plane with the `perspective` function; otherwise,
    the `translateZ()` declaration will have no effect.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Colors can make or break a design, there are many ways to go about creating
    palettes and all that good stuff.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at *HSL(a)* and *RGB(a)*.
  prefs: []
  type: TYPE_NORMAL
- en: hsl() and hsla()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `hsl()` and `hsla()` CSS functional notations set the color in HSL/HSLa
    formats, and they look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**HSL** stands for **Hue, Saturation, and Lightness** (or Luminance). The **a**
    stands for **Alpha**, which is the alpha channel, with which we declare the transparency
    of the color.'
  prefs: []
  type: TYPE_NORMAL
- en: The `hsl()` function supports three or four values separated by commas. The
    first value is the hue, which is the base color. This is declared with a unitless
    *number*. This number represents an angle in degrees (*10 = 10º*) in the color
    wheel from 0 to 360\. So, 0 and 360 are Red, 90 is Yellow-Green, 180 is Cyan,
    and 270 is Blue-Magenta.
  prefs: []
  type: TYPE_NORMAL
- en: The second value is the saturation, which is basically the amount of the base
    color. This is declared with a *percentage* value. `0%` means there is no base
    color at all and it shows gray. `100%` means the base color is full.
  prefs: []
  type: TYPE_NORMAL
- en: The third value is the lightness, also known as luminance. This is basically
    the brightness of the base color. `0%` means there is no lightness, hence it's
    black. `100%` is full lightness, hence it looks white. `50%` means the base color
    is full.
  prefs: []
  type: TYPE_NORMAL
- en: The fourth value is the alpha channel. This is the transparency of the color.
    It's declared with a unitless *numeric* decimal value from `0` to `1`. Complete
    transparent is `0`, and `1` is fully opaque.
  prefs: []
  type: TYPE_NORMAL
- en: The great advantage that HSL color naming system has over RGB is that it is
    more intuitive. Once we choose a base color, we can easily create a palette based
    on that color by only changing the saturation and lightness values.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the HSL color wheel in CodePen: [http://tiny.cc/hsl-color-wheel](http://tiny.cc/hsl-color-wheel)'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: rgb() and rgba()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rgb()` and `rgba()` CSS functional notations set the color in RGB/RGBa
    formats, and they look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**RGB** stands for **Red, Green and Blue**. The *a* stands for **Alpha**, which
    is the alpha channel with which we declare the transparency of the color.'
  prefs: []
  type: TYPE_NORMAL
- en: This supports three or four unitless *numeric* values separated by commas, or
    three *percentage* values and one unitless *numeric* value. The last value is
    for the alpha channel.
  prefs: []
  type: TYPE_NORMAL
- en: The *numeric* values range from 0 to 255\. The *percentage* values range from
    0% to 100%. For example, we can represent the color green as `rgb(0, 255, 0)`
    or `rgb(0, 100%, 0)`.
  prefs: []
  type: TYPE_NORMAL
- en: As I just mentioned, the fourth value is the alpha channel. This is the transparency
    of the color. It's declared with a unitless *numeric* decimal value from `0` to
    `1`. Complete transparent is `0`, and `1` is fully opaque.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Gradients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For those who didn't know, CSS gradients are actually images. But these images
    are created by the browser the moment it sees a gradient color declared. The thing
    with these images is that they are created on the fly and do not cause any HTTP
    requests.
  prefs: []
  type: TYPE_NORMAL
- en: CSS gradients are so powerful that we can not only create gradients in any direction
    and various shapes, but we can also create amazing patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this being said, Lea Verou has an amazing library of CSS patterns created
    with gradients everyone reading this book should bookmark. Check it out here:
    [http://tiny.cc/leave-verou-css3-patterns](http://tiny.cc/leave-verou-css3-patterns)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how to create gradients in CSS.
  prefs: []
  type: TYPE_NORMAL
- en: linear-gradient()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `linear-gradient()` CSS function creates a gradient that transitions from
    one color to another in a *line*. It looks like this in its simplest form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can create linear gradients that obey practically any direction called the
    *gradient line*: left to right, right to left, top to bottom, bottom to top, diagonal,
    and at any degree in a 360º radius.'
  prefs: []
  type: TYPE_NORMAL
- en: If no direction for the gradient line is specified, the default value is from
    top to bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Any amount of colors can be declared in the gradient line. Technically speaking,
    there's no limit, but from a design standpoint we should always try to keep it
    simple. At least two color values are required.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `linear-gradient()` function supports all color modes: `HEX`, `RGB`, `RGBa`,
    `HSL`, `HSLa`, and *color name*.'
  prefs: []
  type: TYPE_NORMAL
- en: Direction
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can also declare the direction of the gradient line via an *angle* value
    or four *keyword* values: `to top`, `to` `bottom`, `to left`, and `to right`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`to top`: The gradient will start at the bottom and end at the top'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to bottom`: The gradient will start at the top and end at the bottom'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to left`: The gradient will start at the right and end at the left'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to right`: The gradient will start at the left and end at the right'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *angle* value is defined at the beginning of the declaration and can range
    from 0 to 360\. Larger values wrap around the circumference.
  prefs: []
  type: TYPE_NORMAL
- en: Color stops
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can also define where a color *stops* in the gradient. A color stop is a
    combination of a *color* value followed by a *stop position*, which is optional.
  prefs: []
  type: TYPE_NORMAL
- en: Stop positions can be declared in any *length* value or a *percentage* value
    and go after the color value.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Percentage values are more commonly used due to the fact that they can scale
    with the element. Pixel values are fine too, but they just don't have the same
    versatility as relative units.
  prefs: []
  type: TYPE_NORMAL
- en: Color stops are very flexible because they allow us to make solid transitions
    between colors. This is great for making patterns or other types of graphics that
    require solid color transitions, like country flags.
  prefs: []
  type: TYPE_NORMAL
- en: When the *stop positions* aren't declared, the browser distributes the gradient
    colors evenly along the gradient line.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: radial-gradient()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `radial-gradient()` CSS function creates a gradient that transitions from
    one color to another but in circular or elliptical form, and it looks like this
    in its simplest form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are three parts to a radial gradient: its *center*, its *ending shape*,
    and *color stops*.'
  prefs: []
  type: TYPE_NORMAL
- en: The *center* defines the location in the element from which the radial gradient
    will start; a radial gradient doesn't have to start at the center of an element.
    The *ending shape* defines if the radial gradient is going to be a circle or an
    ellipse. The ellipse shape is the default shape if the `circle` keyword isn't
    declared. The *color stops* are the colors that make the gradient and, if declared,
    any *stop positions* which are optional. Remember that stop positions can be declared
    in any *length* value or a *percentage* value and go after the color value.
  prefs: []
  type: TYPE_NORMAL
- en: At least two colors are required to make a radial gradient, or *any* gradient
    for that matter.
  prefs: []
  type: TYPE_NORMAL
- en: Position
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can define where the center of the radial gradient is located within the
    element. As I mentioned before, the default position is at the center of the element.
  prefs: []
  type: TYPE_NORMAL
- en: To declare a specific position we use the keyword `at` and define the *X* and
    *Y* axes coordinates. This value should go before any color value is declared
    but after the *ending shape*.
  prefs: []
  type: TYPE_NORMAL
- en: The *X* and *Y* axes coordinates can be declared in any *length* value, a *percentage*
    value or any of the keyword values, `top`, `right`, `bottom`, and `left`. This
    is pretty much the same way we declare the `background-position` on an element.
  prefs: []
  type: TYPE_NORMAL
- en: The position requires an *ending shape* to be declared, either `circle` or `ellipse`;
    otherwise, the declaration is invalid.
  prefs: []
  type: TYPE_NORMAL
- en: Sizing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We can also change the size of the radial gradient. The *size* of the gradient
    is declared before the *position* but it can go before or after the *ending shape*.
    It can take one or two values for *width* and *height*. If one value is declared
    it will be used for both.
  prefs: []
  type: TYPE_NORMAL
- en: 'The size can be defined with a *length* value, a *percentage* value, or one
    of four *keyword* *values*: `closest-corner`, `farthest-corner`, `closest-side`,
    and `farthest-side`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`closest-corner`: The size of the gradient depends on the corner that is closest
    to the center.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`farthest-corner`: The size of the gradient depends on the corner that is farthest
    from the center.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`closest-side`: The size of the gradient depends on the side that is closest
    to the center.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`farthest-side`: The size of the gradient depends on the side that is farthest
    from the center.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: repeating-linear-gradient()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `repeating-linear-gradient()` CSS function is used to repeat a gradient
    image, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `repeating-linear-gradient()` function uses the same syntax and values as
    the `linear-gradient()` CSS function, so please refer to that function for a detailed
    explanation of all the available values.
  prefs: []
  type: TYPE_NORMAL
- en: In order for the `repeating-linear-gradient()` function to work, we need to
    define *stop positions* on the colors. Otherwise, the repeated gradient will look
    as if we're just using `linear-gradient()`.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: repeating-radial-gradient()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `repeating-radial-gradient()` CSS function is used to repeat a gradient
    image, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `repeating-radial-gradient()` function uses the same syntax and values as
    the `radial-gradient()` CSS function, so please refer to that function for a detailed
    explanation of all the available values.
  prefs: []
  type: TYPE_NORMAL
- en: In order for the `repeating-radial-gradient()` function to work, we need to
    define *stop positions* on the colors. Otherwise, the repeated gradient will look
    as if we're just using `radial-gradient()`.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following CSS functions allow us to declare many custom values for various
    results. Let's check them out.
  prefs: []
  type: TYPE_NORMAL
- en: attr()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `attr()` CSS function allows us to target the value of any HTML attribute
    and use in CSS, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The term **attr** is the abbreviation of the word **attribute**. This CSS function
    targets an *HTML attribute* and uses its value to accomplish different things
    via CSS.
  prefs: []
  type: TYPE_NORMAL
- en: In CSS, the `attr()` function is most commonly used with the `content` property
    together with the `:after` CSS pseudo-element to inject content into the document,
    but in reality the `attr()` function can be used with *any* other CSS property.
  prefs: []
  type: TYPE_NORMAL
- en: In HTML, it's very common to use the `attr()` CSS function to target the HTML5
    `data-` or the `href` attributes. The `attr()` function can be used to target
    *any* HTML attribute.
  prefs: []
  type: TYPE_NORMAL
- en: In CSS3 the syntax of the `attr()` CSS function is a bit different. It accepts
    not only an attribute value but it also accepts two more arguments, a *type-or-unit*
    argument and an *attribute fallback* argument. The *type-or-unit* argument is
    optional. It tells the browser which type of attribute is in order to interpret
    its value. The *attribute fallback* argument defines a fallback value in case
    something goes wrong during the parsing of the main attribute of the element.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new CSS3 syntax that includes the *type-or-unit* and the *attribute fallback*
    arguments is not stable and it may potentially be dropped from the spec. Do your
    research before deciding to use the new syntax.
  prefs: []
  type: TYPE_NORMAL
- en: A good practice for printing web documents is to print the URL next to the linked
    element. Another common practice is to use a combination of the `attr()` CSS function
    with the `content` property and the HTML5 `data-` attribute in responsive tables
    to inject the content of a cell (usually a heading) next to their corresponding
    value via CSS, thus saving space.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Responsive Table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the viewport width is 640px or less, the table will become responsive.
    This is accomplished by combining the use of the `attr()` CSS function with the
    `content` property and the HTML5 `data-` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: calc()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `calc()` CSS function allows us to perform mathematical calculations, and
    it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Or like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can perform those calculations with addition (`+`), subtraction (`-`), division
    (`/`), and multiplication (`*`). It's commonly used to calculate relative values
    for `width` and `height`, but as you saw, we can use this function with any CSS
    property.
  prefs: []
  type: TYPE_NORMAL
- en: A few things to consider are that a space is required before and after the addition
    (`+`) and subtraction (`-`) operators, otherwise a subtraction, for example, can
    be considered to have a negative value, for example, `calc(2.5em -5px)`. This
    `calc()` function is invalid since the second value is considered a negative value.
    Space is required after the subtraction (`-`) operator. However, the division
    (`/`) and multiplication (`*`) operators don't require the spaces.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when doing a division (`/`), the value on the right *must* be a *number*
    value. For a multiplication (`*`) operation, at least one of the values *must*
    be *number* value as well.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: url()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `url()` CSS function is used to point to an external resource, and it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `url()` function uses the URL value to point or link to a resource. **URL**
    stands for **Uniform Resource Locator**.
  prefs: []
  type: TYPE_NORMAL
- en: This function is commonly used with the `background` or `background-image` properties,
    but it can be used with any of the properties that take a URL as a value, like
    `@font-face`, `list-style`, `cursor`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The URL can be quoted using single (`'` `'`) or double quotes (`"` `"`), or
    not quoted at all. However, there can't be any combinations of quote styles such
    as starting with a single quote and ending with a double quote.
  prefs: []
  type: TYPE_NORMAL
- en: Also, double quotes inside a URL that uses single quotes and single quotes inside
    a URL that uses double quotes *must* be escaped with a backslash (`\`). Otherwise,
    it will break the URL.
  prefs: []
  type: TYPE_NORMAL
- en: The URL pointing to the resource can be either absolute or relative. If it's
    relative, it's relative to the location of the style sheet in the folder structure,
    not the webpage itself.
  prefs: []
  type: TYPE_NORMAL
- en: The `url()` CSS function also supports Data URI's, which is basically the code
    of an image. So instead of pointing the selector to download an image in the `/images`
    folder, we can embed the actual image in the CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Be careful with this because although we are reducing an HTTP request (and that's
    a *huge* win), we might be making the CSS file larger and a bit harder to maintain
    if the image changes. There can also be potential performance and render-blocking
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about Data URIs, you can read this great article by Nicholas
    Zakas: *Data URIs Explained* ([https://www.nczonline.net/blog/2009/10/27/data-uris-explained/](https://www.nczonline.net/blog/2009/10/27/data-uris-explained/)).'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: cubic-bezier()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `cubic-bezier()` function allows us to create custom acceleration curves,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `cubic-bezier()` function is used with the `animation-timing-function` and
    the `transition-timing-function` CSS properties. Most use cases can benefit from
    the already defined easing functions we mentioned in [Chapter 4](ch04.html "Chapter 4. CSS
    Properties – Part 1"), *CSS Properties – Part 1*, (`ease`, `ease-in`, `ease-out`,
    `ease-in-out`, and `linear`); if you're feeling adventurous, `cubic-bezier()`
    is your best bet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the `animation-timing-function` CSS property in [Chapter 4](ch04.html
    "Chapter 4. CSS Properties – Part 1"), *CSS Properties – Part 1*, to see what
    a **Bézier** curve looks like. The `cubic-bezier()` function takes four parameters
    in the form of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s represent all five predefined easing functions with the `cubic-bezier()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ease`: `animation-timing-function: cubic-bezier(.25, .1, .25, 1);`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ease-in`: `animation-timing-function: cubic-bezier(.42, 0, 1, 1);`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ease-out`: `animation-timing-function: cubic-bezier(0, 0, .58, 1);`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ease-in-out`: `animation-timing-function: cubic-bezier(.42, 0, .58, 1);`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`linear`: `animation-timing-function: cubic-bezier(0, 0, 1, 1);`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'm not sure about you, but I prefer to use the predefined values.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can start tweaking and testing each value to the decimal, save, and
    wait for the live refresh to do its thing. But that's too much wasted time testing
    if you ask me.
  prefs: []
  type: TYPE_NORMAL
- en: 'The amazing Lea Verou created the best web app to work with Bézier curves:
    [www.cubic-bezier.com](http://www.cubic-bezier.com). This is by far the easiest
    way to work with Bézier curves. I highly recommend this tool.'
  prefs: []
  type: TYPE_NORMAL
- en: The Bézier curve image showed previously was taken from the [www.cubic-bezier.com](http://www.cubic-bezier.com)
    website.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Miscellaneous
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following CSS functions have no specific category, so we grouped them here
    in a miscellaneous section.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see what we have.
  prefs: []
  type: TYPE_NORMAL
- en: drop-shadow()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `drop-shadow()` CSS function works with the `filter` property adds a shadow
    under the element, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `drop-shadow()` function works almost exactly the same way as the `box-shadow`
    property with two differences: the `drop-shadow()` function doesn''t support the
    `spread-radius` or the `inset` values.'
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the `box-shadow` property for a detailed description of all
    the values. Additionally, some browsers actually provide hardware acceleration
    when using this function, which eventually improves performance. You know how
    it goes; anything we can do to improve performance is always a +1.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: element()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `element()` CSS function allows us to use any HTML element as a background
    for another HTML element, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use cases for the `element()` function are rare, but nonetheless it is available
    to us (granted, browser support isn't ideal yet).
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: image()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `image()` CSS function allows us to target an image file to be used as
    background, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `image()` function is practically the same as the `url()` function and it's
    considered to be more flexible and ideal to declare background images rather than
    using the commonly known `url()` function. However, the `image()` CSS function
    is at risk from being dropped from the spec due to lack of browser support.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: opacity()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `opacity()` CSS function works with the `filter` property. It defines the
    transparency (opacity) of an element, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When this function is applied to an element, the element itself and its children
    are affected. This function supports a numeric value ranging from `0` (zero) to
    `1` which is the default value. A value of `0` is completely transparent, as in
    `0%` opaque, and `1` is `100%` opaque, no transparency whatsoever. Decimal numbers
    are allowed but negative values are not.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: perspective()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `perspective()` CSS function is used with the `transform` CSS property,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This value gives three-dimensional perspective to the element. The element in
    question will react in a three-dimensional plane.
  prefs: []
  type: TYPE_NORMAL
- en: This function works similarly to the `perspective` property, and the difference
    is that the `perspective()` function is used to give perspective to a single element.
    Hence, it's applied to the *element itself*. The `perspective` property is good
    for giving perspective to several elements at once, hence it is applied to the
    parent element instead.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we apply the `perspective()` function to every element on a
    list, each element will have its own vanishing point. But if we apply the `perspective`
    property to the parent container of that list, all elements will share the same
    vanishing point.
  prefs: []
  type: TYPE_NORMAL
- en: The `perspective()` function on its own doesn't do much, so in order to see
    it in action we must combine it with any of the other transform functions like
    `rotate()`, `rotateX()`, or `rotateY()`.
  prefs: []
  type: TYPE_NORMAL
- en: It accepts a *numeric* value with a *length* unit. Negative values are not allowed.
    The value defines the distance of the *Z* axes from the user.
  prefs: []
  type: TYPE_NORMAL
- en: The higher the value, the less intense the perspective. This is because the
    element is farther away from us. However, the lower the value, the more pronounced
    the perspective looks. This is because the element is closer to us.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: rect()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rect()` CSS function is used to create a rectangle-shaped clipping mask
    with the `clip` property, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `clip` CSS property is now deprecated due to poor features and limitations
    with SVGs. The current and widely supported `clip-path` property is part of the
    SVG specification and it has been adopted by the CSS Masking module.
  prefs: []
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This function *only* works with the `clip` property, and as I mentioned, this
    property is now deprecated. Also, this CSS function *does not* work with the more
    modern `clip-path` CSS property, so the recommendation is to use the `inset()`
    CSS function instead.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the `inset()` CSS function in [Chapter 6](ch06.html "Chapter 6. CSS
    Properties – Part 3"), *CSS Properties – Part 3*.
  prefs: []
  type: TYPE_NORMAL
- en: At-rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS *at-rules* start with the `@` character and are followed by a keyword or
    identifier. They always have to end with a semicolon (`;`) character.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the most popular at-rules are `@font-face`, which is used to declare
    custom fonts; `@import` that is used to import external CSS files (not recommended
    by the way for performance reasons), and it is also used in some CSS preprocessors
    to bring external partial files that will eventually get compiled into a single
    CSS file (recommended method); `@media` is used to declare media queries in our
    responsive projects or print style sheets and so on; `@keyframes` is used to create
    animations and so on.
  prefs: []
  type: TYPE_NORMAL
- en: At-rules, let's see where they're *at*.
  prefs: []
  type: TYPE_NORMAL
- en: '@charset'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `@charset()` at-rule defines the character encoding to be used by a style
    sheet, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We rarely need to define the character encoding in a style sheet as long as
    it's defined in the HTML. When the browser detects the character encoding in the
    HTML, it implies that it's the same character encoding for the CSS file(s).
  prefs: []
  type: TYPE_NORMAL
- en: If you like to declare the character encoding in your CSS files, that's fine
    too. If you plan to use this in a style sheet, it should be the first thing at
    the top of the file. It cannot have a space character before the `@` symbol, or
    a blank line above it. The *character encoding name* should always be inside quotes,
    either single (`'` `'`) or double quotes (`"` `"`).
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '@document()'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `@document()` at-rule allows to define styles that only apply to a certain
    pages of a site, and it looks like this in one of its forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are four CSS functions that are exclusive to the `@document()` at-rule:
    `url()`, `url-prefix()`, `domain()`, and `regexp("` `")`. Multiple functions can
    be defined in a single declaration.'
  prefs: []
  type: TYPE_NORMAL
- en: The values inside the functions can either be declared without quotation marks,
    or use single (`'` `'`) or double quotes (`"` `"`). Only the `regexp("")` function
    requires the use of double quotes (`"` `"`).
  prefs: []
  type: TYPE_NORMAL
- en: '`url()`: This restricts the styles to a document that matches the URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url-prefix()`: This restricts the styles to a document that start with the
    specified URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`domain()`: This restricts the styles to a document''s specific domain'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`regexp("")`: This restricts the styles to a document that match the regular
    expression'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '@font-face'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `@font-face()` at-rule is used to define custom fonts to use on a document,
    and it looks like this in its simplest form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `@font-face()` at-rule has been around for actually more years than many
    believe, so our buddy IE6 supports this function. With the `@font-face()` at-rule,
    we can target custom font files to use on a website/webapp and extend the design
    and branding possibilities way beyond system fonts.
  prefs: []
  type: TYPE_NORMAL
- en: One peculiarity of custom fonts is that different versions of each browser support
    one format but not another or even has its own proprietary font format.
  prefs: []
  type: TYPE_NORMAL
- en: Paul Irish's article *Bulletproof @font-face Syntax*, where the *smiley face*
    technique originated, is a must-read `@font-face` article for all web designers
    and developers ([http://tiny.cc/paul-irish-font-face](http://tiny.cc/paul-irish-font-face)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The five font formats we need to account for are: WOFF/WOFF2, EOT, TTF, OTF,
    and SVG.'
  prefs: []
  type: TYPE_NORMAL
- en: WOFF/WOFF2
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**WOFF** stands for **Web Open Font Format** and was created by Mozilla. The
    WOFF format is a *wrapper* for OTF/TTF font formats and it provides better font
    data compression than any other format, thus making the file(s) smaller.'
  prefs: []
  type: TYPE_NORMAL
- en: '**WOFF2** is basically WOFF on steroids. It provides even more compression,
    about 30 percent in average and in some cases up to 50 percent more.'
  prefs: []
  type: TYPE_NORMAL
- en: All modern browsers support these two formats.
  prefs: []
  type: TYPE_NORMAL
- en: EOT
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**EOT** stands for **Embedded Open Type** and was created by Microsoft. Only
    old versions of IE (IE6 to IE8) require the use of this font format. No other
    browsers support this format, so if we don''t need to support legacy browsers,
    we do not need to declare a link to this font format in the `@font-face()` at-rule
    declaration.'
  prefs: []
  type: TYPE_NORMAL
- en: OTF and TTF
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**OTF** and **TTF** stand for **OpenType Font** and **TrueType Font**. These
    font formats are cross-platform compatible and include advanced layout features
    and information for expert typographic control. OTF is a newer format and has
    a few more features than TTF, such as small caps, ligatures, fractions, and so
    on.'
  prefs: []
  type: TYPE_NORMAL
- en: SVG
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**SVG** stands for **Scalable Vector Graphic**. An SVG *font file* doesn''t
    really have a font; it has vector representations of the font. This type of font
    file is used when old iOS devices need to be supported. However, if this type
    of font is not declared, the old iOS device will simply use a system font instead,
    which if you ask me, I''m totally fine with.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The values inside the `@font-face` brackets are called the **font descriptors**.
    In it, we can declare several values: `font-family`, `src`, `font-variant`, `font-stretch`,
    `font-style`, `font-weight`, and `unicode-range`.'
  prefs: []
  type: TYPE_NORMAL
- en: font-family
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a required value. It defines the name of the font to be used in the
    style sheet.
  prefs: []
  type: TYPE_NORMAL
- en: src
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is a required value. It defines the location or URL of the font file(s).
    Multiple URLs can be defined in the same `src` declaration block to account for
    the different types of fonts that each browser supports. However, legacy IEs choke
    when it finds multiple URLs in the same `src` declaration block, so an independent
    `src` declaration block needs to be declared if support for legacy IEs is required.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to targeting external files with URLs, we can also target locally
    installed files with the `local()` function.
  prefs: []
  type: TYPE_NORMAL
- en: font-variant
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `font-variant` CSS property turns the targeted text into small caps. In
    CSS3, it's considered a shorthand and has been extended with new values, which
    developers rarely use. Refer to [Chapter 5](ch05.html "Chapter 5. CSS Properties
    – Part 2"), *CSS Properties – Part 2*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: font-stretch
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `font-stretch` CSS property allows us to select a *condensed*, *normal*,
    or *expanded* face from the font family in question. Refer to [Chapter 5](ch05.html
    "Chapter 5. CSS Properties – Part 2"), *CSS Properties – Part 2*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: font-weight
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `font-weight` CSS property defines the thickness (weight) of the font. Refer
    to [Chapter 5](ch05.html "Chapter 5. CSS Properties – Part 2"), *CSS Properties
    – Part 2*, for more information.
  prefs: []
  type: TYPE_NORMAL
- en: unicode-range
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `unicode-range` CSS property descriptor defines a specific range of characters
    or glyphs that should be downloaded from a font declared in a `@font-face` declaration.
    This is helpful, for example, when working on a site with different languages.
    By declaring `unicode-range`, the browser only downloads the specific characters
    of that language for that page, thus saving bandwidth and optimizing performance.
  prefs: []
  type: TYPE_NORMAL
- en: This property is rarely used.
  prefs: []
  type: TYPE_NORMAL
- en: Google fonts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can't talk about `@font-face` without talking about **Google Fonts**. Google
    Fonts is a free web font service that allows us to practically skip all the manual
    work of creating `@font-face` declaration block in our CSS files by giving us
    an HTML `<link>` that points to the font(s) we selected.
  prefs: []
  type: TYPE_NORMAL
- en: Check out Google Fonts at [http://tiny.cc/google-fonts](http://tiny.cc/google-fonts)
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '@import'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `@import()` at-rule is used to import a style sheet into another, and it
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The previous example targets another style sheet with a `string` value. But
    style sheets can also be imported using the `url()` function.
  prefs: []
  type: TYPE_NORMAL
- en: The `@import` rules should always precede any other rules except the `@charset`
    rule, otherwise, it will be ignored by the browser.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to take into consideration is cascading. Imported style sheets cascade
    in the order they are imported. There is also a way to specify the media a specific
    imported style sheet is for via media queries. If more than one media query is
    declared, it needs to be separated by commas.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's a known fact that using `@import` has a negative impact on performance
    due to sequential downloading instead of parallel downloads and multiple HTTP
    requests. Read more about this issue on Steve Souders' article *Don't Use @import*
    at [http://tiny.cc/steve-souders-avoidimport](http://tiny.cc/steve-souders-avoidimport)
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '@keyframes'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `@keyframes()` at-rule is used to list CSS properties to be animated, and
    it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The animation created with the `@keyframes` at-rule only runs for one cycle.
    If we want the animation to play over and over, ease-in, ease-out, or show other
    behavior, we need to declare those properties in the element itself, outside the
    `@keyframes` at-rule.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the Animation section in [Chapter 4](ch04.html "Chapter 4. CSS
    Properties – Part 1"), *CSS Properties – Part 1*, for detailed explanations of
    those CSS properties.
  prefs: []
  type: TYPE_NORMAL
- en: The animation's name (also called an **identifier**) always comes after the
    `@keyframes` keyword separated by a space. This animation name will later be referenced
    with the `animation-name` or `animation` shorthand CSS properties.
  prefs: []
  type: TYPE_NORMAL
- en: The beginning and end of an animation can be declared with the two *selector
    keywords* `from` and `to`, or with two *keyframe selectors* `0%` and `100%`. Negative
    values are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, we can declare intermediate waypoints but we can only do this using
    *keyframe selectors*. There is no limit to the amount of properties that can be
    declared in the `@keyframes` at-rule. However, some browsers animate properties
    that the spec says can't be animated, while others follow the spec correctly.
    Granted, the spec is unclear about some of the definitions, so make sure to run
    proper tests.
  prefs: []
  type: TYPE_NORMAL
- en: Now the difference between using `@keyframes` at-rule and the `transition` property
    is that with the `@keyframes` at-rule we have the power of defining what happens
    in the middle waypoints rather than letting the browser figure it out for us.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, if we have a simple animation, we can just use the `transition` property.
    If we have somewhat more complex and elaborate animations, use `@keyframes`.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '@media'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `@media()` at-rule allows us to define a set of CSS styles that apply to
    a certain media type, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the preceding code or the following code as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This piece of CSS allows us to declare any set of styles to a specific media
    type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two types of directives that come after the `@media()` at-rule, for example,
    `print` and `screen` and even `(min-width: 40em)` or `(max-width: 40em)`, and
    they are called **media queries**.'
  prefs: []
  type: TYPE_NORMAL
- en: The keywords (`print` and `screen`) are called **media types**. And the ones
    that test specific features of a **User Agent** (**UA**) or display are called
    **media features**.
  prefs: []
  type: TYPE_NORMAL
- en: Media types
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Media types are case-sensitive. There are 10 media types that we can use with
    the `@media()` at-rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '`all`: This is meant to work on all devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`braille`: This is meant to work with braille tactile-feedback devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`embossed`: This is meant to work on braille printers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`handheld`: This is meant to work with handled "mobile" devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print`: This is meant to work for printing documents'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`projection`: This is meant to work with projectors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`screen`: This is meant to work with computer screens of all sizes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`speech`: This is meant to work with speech synthesizers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tty`: This is meant to work with teletypes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tv`: This is meant to work with televisions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '@namespace'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `@namespace()` at-rule is used to define the XML namespaces in a style
    sheet, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the preceding code or the following code as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We use the `@namespace()` at-rule in a CSS document when we need to use selectors
    that apply or target certain elements in a specific namespace. For example, we
    can have an embedded SVG file in our HTML document. The thing is that SVGs share
    common elements with HTML and XML, such as the `<a>` element. So instead of creating
    a separate style sheet to target the SVG elements, we can declare an SVG namespace
    with the `@namespace()` at-rule to target the `<a>` elements within the same HTML
    document, thus we only have to work in one style sheet rather than two (or more).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the `@namespace()` at-rule is mostly used for legacy XHTML documents where
    it''s necessary to declare a namespace in the `<html>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '**With the `xmlns` directive in place, we can now declare the namespaces in
    our CSS. Finally, we can then target the `<a>` elements in the SVG block without
    affecting the HTML `<a>` elements.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**The URLs are merely to make the markup more readable and easier to understand
    when someone is reading through it.**'
  prefs: []
  type: TYPE_NORMAL
- en: '****XHTML**:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '******CSS**:****'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '****@page****'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '****The `@page()` at-rule is used to modify certain properties of a page to
    get it ready for printing, and it looks like this:****'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '****Description****'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '****When using the `@page()` at-rule, only a few properties of the page can
    be changed: `margins`, `widows`, `orphans`, and *page breaks*. Declaring any other
    types of properties will be ignored.****'
  prefs: []
  type: TYPE_NORMAL
- en: '****We can also declare if we want to target *only the first page*, *all the
    left pages only*, or *all the right pages only* with the `:first`, `:left` and
    `:right` pseudo-classes. The `@page()` at-rule is most commonly used to change
    the margins.****'
  prefs: []
  type: TYPE_NORMAL
- en: '******CSS**:****'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '****@supports****'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '****The `@supports()` at-rule is used to detect a *feature* on a browser, and
    it looks like this:****'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '****Description****'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*****Feature detection* is something that''s usually done with polyfills like
    **Modernizr**. With the `@supports()` at-rule, we can accomplish similar results
    via CSS only.****'
  prefs: []
  type: TYPE_NORMAL
- en: '****In order for this function to work properly, we need to specify a *property*
    and a *value*. There are three keyword operators that we can use with the `@supports()`
    at-rule: `not`, `and` and `or`.****'
  prefs: []
  type: TYPE_NORMAL
- en: '****The not operator****'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '****Just like we can check for features that the browser supports, we can also
    check for features that the browser *does not* support using the `not` operator.****'
  prefs: []
  type: TYPE_NORMAL
- en: '****The and operator****'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '****The `and` operator allows us to check for multiple CSS properties in the
    same declaration.****'
  prefs: []
  type: TYPE_NORMAL
- en: '****The or operator****'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '****A good example of this operator is when we need to check for a vendor-prefixed
    CSS property in case we need to support legacy browsers. When using this operator,
    if one of the expressions is `true`, it will make all other expressions valid
    as well. Additionally, we can also combine operators when necessary.****'
  prefs: []
  type: TYPE_NORMAL
- en: '******CSS**:****'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '****# Global CSS keyword values'
  prefs: []
  type: TYPE_NORMAL
- en: The following list of keyword values is ubiquitous to web designers and developers,
    but have you ever wondered what exactly they mean and do?
  prefs: []
  type: TYPE_NORMAL
- en: auto
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `auto` CSS keyword value tells the browser to automatically compute the
    CSS property''s value, and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: The term **auto** is short for **automatic**. It's not the same as saying 100%
    because 100% is an actual defined value; `auto` is calculated by the browser.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most common locations to see the keyword `auto` applied is when centering
    an element horizontally with the `margin` CSS property.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'I''ve seen most people use `margin: 0 auto;` to center an element. This is
    fine, but the value zero (`0`) can be omitted. `margin: auto;` is enough and yields
    the same result.'
  prefs: []
  type: TYPE_NORMAL
- en: inherit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `inherit` CSS keyword value makes an element derive/inherit the values of
    its parent container.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: initial
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `initial` CSS keyword value sets the CSS property to its default value as
    per the CSS spec.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: none
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `none` CSS keyword value defines the lack of a specific styling.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: normal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `normal` CSS keyword value defines a *standard* value.
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: unset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `unset` CSS keyword is the combination of the `inherit` and `initial` keywords,
    and it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: By combining the `inherit` and `initial` keywords, the `unset` CSS keyword value
    resets the value of a property.
  prefs: []
  type: TYPE_NORMAL
- en: If an element is inheriting values from its parent container and the `unset`
    keyword is declared, then the property's value is reset to the parent container's
    value (since it's inheriting). But if an element has no parent container and the
    `unset` keyword is declared, then its property's value is reset to the default
    value as per the spec (since it's not inheriting).
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: revert
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `revert` CSS keyword value is like an *undo* in CSS as it returns the cascade
    to a previous state and resets the property to the default value defined by the
    *user agent*. It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: This is different from the `initial` CSS keyword because `revert` rolls back
    the cascade and resets the value as per the user agent's *style sheet* value.
    With `initial` the value is reset to its default value as per the specification.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the spec says that the default value of `display` is `inline`.
    However, most UAs assign a default value of `display: block;` to `<div>`, or `display:
    table;` to `<table>`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This conclude the chapters about CSS, pretty interesting stuff eh?
  prefs: []
  type: TYPE_NORMAL
- en: We learned about CSS Filters and how we can modify elements' colors without
    having to rely on image editing tools. This also applies to CSS Transforms because
    we can modify the shape and orientation of elements', at least to some extent,
    quite easily with CSS only.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time we learned about the different ways we can create colors in
    CSS, and that HSL mode is more intuitive and versatile than any other color mode.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating and declaring different values with the `attr()` or `calc()` functions
    opens new possibilities in our CSS toolbox, for example, how to make responsive
    tables.
  prefs: []
  type: TYPE_NORMAL
- en: We now know that to improve performance with drop shadows we can use the `drop-shadow()`
    function; or to modify the transparency of an element we can use the `opacity()`
    function; or the perspective of an element with the `perspective()` function.
  prefs: []
  type: TYPE_NORMAL
- en: At-rules now make more sense I'm sure. Additionally, we addressed the different
    font formats and learned that if we don't need to support legacy IEs we can just
    use WOFF and WOFF2.
  prefs: []
  type: TYPE_NORMAL
- en: And finally, we got clarification on the all the global CSS keyword values like
    auto or inherit that we use all the time and never really question what they are
    and how they work.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you don't have to know and remember all the CSS functions, you need
    to know where to look—this book.****
  prefs: []
  type: TYPE_NORMAL
