["```js\nvar myObj = new Object();\n\n  myObj.value = \"my first value\";\n  myObj.method = function(){\n  return this.value;\n};\n\nconsole.log(myObj.method()); // displays \"my first value\"\n```", "```js\nvar obj = {};\n```", "```js\nvar MyFirstObj = {\n  myFirstValue : 2,\n  mySecondValue : 5,\n\n  addValues: function(){\n    return this.myFirstValue + this.mySecondValue ;\n  }\n};\n```", "```js\nconsole.log( MyFirstObj.addValues()); // displays 7\n```", "```js\nfunction MyObjDefinition(){\n  var myFirstValue = 2;\n  var mySecondValue = 5;\n\n  this.addValues = function(){\n    return myFirstValue + mySecondValue;\n  };\n}\n\nvar myFirstObj = new MyObjDefinition();\n\nconsole.log( myFirstObj.addValues()); // displays 7 \n```", "```js\n// defining an object\nfunction MyObjDefinition(){\n  MyObjDefinition.myFirstValue = 2;\n  MyObjDefinition.mySecondValue = 5; \n}\n\n// adding a property to the object\nMyObjDefinition.addValues = function(){\n\n  return this.myFirstValue + this.mySecondValue;\n};\n\n// initializing the object by calling it as a function\nMyObjDefinition();\n```", "```js\nconsole.log( MyObjDefinition.addValues()); // displays 7\n```", "```js\nvar anotherObj = new MyObjDefinition();\nanotherObj.addValues(); // error\n```", "```js\nvar firstPerson = CreatePerson(\"Tom\", \"Software Developer\");\n\nfunction CreatePerson(personName, personJob){\n  // creating an object instance, using object type\n  var person = new Object();\n  // we can also use an object literal instead as below\n  // var person = {};\n  person.name = personName;\n  person.job = personJob;\n\n  return person;\n}\n\nconsole.log(firstPerson.name); // displays \"Tom\" \n```", "```js\nvar Tom = {\n  name: \"Tom\"\n};\nTom.job = \"SoftWare Developer\";\n\nconsole.log(Tom.job); // displays \"Software Developer\"\nconsole.log(Tom.name); //  displays \"Tom\" \n```", "```js\nTom.job = \"SoftWare Developer\"; // \"TypeError: Cannot set property 'job' of undefined\"\n\nvar Tom = {\n  name: \"Tom\"\n};\n```", "```js\nfunction CreatePerson(personData){\n  var person = {}; // using Object literal\n  person.name = personData.Name;\n  person.job = personData.Job;\n\n  return person;\n}\n\nvar personData = {\n  Name: \"Tom\",\n  Job: \"Software Developer\"\n};\n\nvar firstPerson = new CreatePerson(personData); \n\nconsole.log(firstPerson.name); // displays \"Tom\"\n```", "```js\nfunction Person(){\n  this.name = \"Tom\";\n  this.job = \"Software Developer\";\n}\n```", "```js\nPerson();\n```", "```js\nconsole.log(window.name); // displays \"Tom\";\nconsole.log(window.job); // displays \"Software Developer\";\n```", "```js\nfunction CreatePerson(personData){\n  this.name = personData.Name;\n  this.job = personData.Job;\n}\n\nvar personOneData = {\n  Name: \"Tom\",\n  Job: \"Software Developer\"\n};\n\nvar firstPerson = new CreatePerson(personOneData);\n\nconsole.log(firstPerson.name);// displays \"Tom\"\nconsole.log(firstPerson.job); // displays \"Software Developer\" \n```", "```js\nvar personTwoData = {\n  Name: \"John\",\n  Job: \"Software Architect\"\n};\n```", "```js\nvar secondPerson = new CreatePerson(personTwoData); \n```", "```js\nconsole.log(secondPerson.name); // displays \"John\";\nconsole.log(secondPerson.job); // displays \"Software Architect\"  \n```", "```js\nvar name = \"The window global\";\n\nvar myOwnObject = {\n\n  name: \"my Own Object\",\n\n  getName: function(){\n    return this.name; \n  }\n};\n```", "```js\nconsole.log(myOwnObject.getName()); // displays \"my Own Object\" \n```", "```js\n// displays \"The Window global\"\nconsole.log((myOwnObject.getName = myOwnObject.getName)()); \n```", "```js\nvar name = \"The window global\";\nvar myOwnObject = {\n\n  name: \"my Own Object\",\n  getName: function(){\n    return function(){\n      return this.name; \n    };\n  }\n};\n\nconsole.log(myOwnObject.getName()()); // displays \"The window global\"\n```", "```js\nvar name = \"The window global\";\nvar myOwnObject = {\n\n  name: \"My Own Object\",\n\n  getName: function(){\n    var that = this;\n    return function(){\n      return that.name; \n    };\n  }\n};\n\nconsole.log(myOwnObject.getName()()); // displays \"My Own Object\"\n```", "```js\nfunction setTestValue(value){\n\n  var firstNum = value || 2;\n\n  return function(secondNum){\n    if(firstNum > secondNum){\n      return firstNum;\n    }else if(firstNum < secondNum){\n      return secondNum;\n    }else{\n      return \"=\";\n    } \n  };\n}\n\nvar theNumberExaminer = setTestValue(6);\nvar result = theNumberExaminer(2); \nconsole.log(result); // displays 6\n```", "```js\nfunction myClosedObject (){\n  var privateValue = 5;\n\n  function privateFunc (){\n    privateValue *= 2;\n    return privateValue ;\n  }\n\n  // privileged method \n  this.publicFunc = function(){\n\n    return privateFunc();\n  };\n} \n\nvar firstObj = new myClosedObject ();\nconsole.log(firstObj.publicFunc()); // displays 10\nconsole.log(firstObj.publicFunc()); // displays 20\n```", "```js\nfunction simpleFunc (){\n  var firstValue = 1;\n  var secondValue = 2;\n  this.instanceValue = 100;\n\n  for(var i =0; i<50; i++){\n    var thirdValue = firstValue + secondValue + i;\n  }\n\n  // displays \"The final value of thirdValue is:52\" \n  console.log(\"The final value of thirdValue is:\" + thirdValue);\n}\n\nsimpleFunc();\n```", "```js\nconsole.log(simpleFunc.firstValue); // displays undefined\n```", "```js\nconsole.log(simpleFunc.instanceValue); // displays undefined\n```", "```js\nvar testObj = new simpleFunc();\nconsole.log(testObj.firstValue);   // displays undefined\nconsole.log(testObj.instanceValue); // displays 100 \n```", "```js\nfunction simpleFunc(){\n  var firstValue = 1;\n  (function(){\n    var secondValue = 2;\n    this.instanceValue = 100;\n    console.log(firstValue); // shows 1\n\n  })();\n\n  //console.log(secondValue); //produces an error\n\n}\n```", "```js\nvar testObj = new simpleFunc();\nconsole.log(testObj.instanceValue); // displays undefined \n```", "```js\nfunction simpleFunc (){\n  var privateValue = 1;\n  this.readPrivateValue = function(){\n\n    return privateValue;\n  }; \n}\n\nvar testObj = new simpleFunc();\nconsole.log(testObj.readPrivateValue());// displays 1\n```", "```js\nfunction BaseType (){\n  this.baseValue = 2;\n}\n\nBaseType.prototype.getBaseValue = function(){\n  return this.baseValue;\n};\n\nfunction ChildType (){\n  this.childTypeValue = 50;\n}\n// creating inheritance relationship\nChildType.prototype = new BaseType();\n\nChildType.prototype.getChildTypeValue = function(){\n  return this.childTypeValue;\n};\n\nvar childInstance = new ChildType();\n\nconsole.log(childInstance.getBaseValue()); // displays 2\nconsole.log(childInstance.getChildTypeValue()); // displays 50\n```", "```js\nChildType.prototype = new BaseType(); \n```", "```js\nconsole.log(childInstance.getBaseValue()); //displays 2\n```", "```js\nconsole.log(childInstance.getChildTypeValue()); // displays 50\n```", "```js\nfunction ChildType (){\n  this.childTypeValue = 50;\n}\n// creating inheritance relationship\nChildType.prototype = new BaseType();\n\nChildType.prototype.getChildTypeValue = function(){\n  return this.childTypeValue;\n};\nChildType.prototype.getBaseValue = function(){\n  return this.childTypeValue;\n};\nvar childInstance = new ChildType();\nconsole.log(childInstance.getBaseValue()); // displays 50 \n```", "```js\nconsole.log(childInstance instanceof Object);    // displays true\nconsole.log(childInstance instanceof BaseType);  // displays true\nconsole.log(childInstance instanceof ChildType); // displays true \n```", "```js\nChildType.prototype = new BaseType();\n```", "```js\nconsole.log(childInstance.constructor);\n```", "```js\nfunction BaseType(){\n  this.baseValue = 2;\n}\n```", "```js\nChildType.prototype.constructor = ChildType;\n```", "```js\nconsole.log(childInstance.constructor);\n```", "```js\nfunction ChildType(){\n  this.childTypeValue = 50;\n}\n```", "```js\nfunction BaseType(){\n  this.baseValue = 2;\n}\nfunction ChildType(){\n  BaseType.call(this);\n}\nChildType.prototype.getBaseTypeValue = function(){\n  return this.baseValue;\n};\nvar instanceObj = new ChildType();\n\nconsole.log(instanceObj.getBaseTypeValue());  // displays 2\n```", "```js\nfunction BaseType (){\n\n  this.baseValue = 2;\n  this.secondBaseValue = 99;\n}\n\nBaseType.prototype.getBaseValue = function(){\n  return this.baseValue;\n};\n\nfunction ChildType (){\n  BaseType.call(this);\n  this.childTypeValue = 50;\n}\n\n// creating inheritance relationship\nChildType.prototype = BaseType.prototype;\n\nChildType.prototype.getChildTypeValue = function(){\n  return this.childTypeValue;\n};\n\nvar childInstance1 = new ChildType();\nvar childInstance2 = new ChildType();\nchildInstance1.baseValue = 100;\nchildInstance2.baseValue = 55;\n\nconsole.log(childInstance1.getBaseValue()); //displays 100 \nconsole.log(childInstance1.getChildTypeValue()); //displays 50\nconsole.log(childInstance1.secondBaseValue); //displays 99\n\nconsole.log(childInstance2.getBaseValue()); //displays 55 \nconsole.log(childInstance2.getChildTypeValue()); //displays 50\nconsole.log(childInstance2.secondBaseValue); // displays 99 \n```", "```js\nBaseType.call(this); \n```", "```js\nChildType.prototype = BaseType.prototype;\n```", "```js\nconsole.log(ChildType.constructor); // references Function type constructor \n```", "```js\nconsole.log(ChildType.prototype.constructor); // \n  references ChildType \n```", "```js\nChildType.prototype = BaseType.prototype; \n```", "```js\nconsole.log(ChildType.prototype.constructor) // references BaseType \n```", "```js\nChildType.prototype.constructor = ChildType; \n```", "```js\nChildType.prototype = BaseType.prototype;\nChildType.prototype.constructor = ChildType; \n```", "```js\nvar BaseType = {\n  firstValue: 20,\n  secondValue: [3,4]\n};\nvar ChildType1 = Object.create(BaseType);\n\nChildType1.secondValue.push(5);\n\nChildType1.getBaseTypeFirstValue = function(){\n  return this.firstValue ;\n};\n\nvar ChildType2 = Object.create(BaseType);\nChildType2.newProperty = 50; \n\nconsole.log(ChildType1.getBaseTypeFirstValue()); // displays 20\nconsole.log(ChildType1.secondValue); // displays [3, 4, 5]\n\nconsole.log(ChildType2.secondValue); // displays [3, 4, 5]\nconsole.log(BaseType.secondValue); // displays [3, 4, 5] \n```", "```js\nconsole.log(ChildType2.secondValue); // displays [3, 4, 5]\n```", "```js\nconsole.log(BaseType.secondValue); // displays [3, 4, 5]\n```", "```js\nvar BaseType = {\n  firstValue: 20,\n  secondValue: [3,4]\n};\nvar ChildType = Object.create(BaseType, {\n  optionalObject:{\n    value: 50\n  }\n});\n\nconsole.log(ChildType.optionalObject); // displays 50\nconsole.log(ChildType.firstValue); // displays 20 \n```"]