- en: Chapter 5. Adding Animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following tasks related to adding animation
    and interaction to the app:'
  prefs: []
  type: TYPE_NORMAL
- en: Embedding fullscreen inline video as background
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating physics-based animation using Dynamics.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating the slide component by binding gesture to animation state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding background CSS animation to the login page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: User experience is crucial for the initial traction of users. When your early
    adopters use the app for the first time, they will have a better impression, which
    creates trust and increases retention. App animation will also provide interactive
    feedback for the users so that they know what to do or take action based on very
    gentle visual hints.
  prefs: []
  type: TYPE_NORMAL
- en: Native apps used to have an advantage over web-based hybrid apps because of
    animation performance. However, frameworks like Ionic and Angular have closed
    the gap in performance a lot in the recent years. Web animation is also easier
    to learn and code since many frontend developers are already familiar with JavaScript
    and CSS.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to do basic animation using video and CSS.
    Then, you will start utilizing physics-based animation to create interesting interactivity.
    Moreover, you could even bind the gesture frame by frame so that your animation
    happens instantly during a swipe event.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding full screen inline video as background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, there are many apps leveraging video as an animated background for the
    introduction screen. This makes the app more interesting and creative. The users
    feel that they are welcomed to the app. This tactic is great to impress new users
    and encourage them to come back.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section will teach you how to add a video with autoplay in the background:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Embedding full screen inline video as background](img/image00261.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You will also learn how to use `animate.css` to add custom animation to the
    app header text.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This app example could work either in the browser or on a physical device. However,
    it's optional that you connect your physical device to verify that the animation
    is playing correctly in the background.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `VideoIntro` app using the `blank` template, as shown, and go
    into the `VideoIntro` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You need to have your video ready at this point. However, for this example,
    let's download a free video from a public website that does not require a license.
    Navigate to [http://www.coverr.co](http://www.coverr.co).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can download any video. The example in this app uses the `Blurry-People.mp4`
    clip. Download it to your computer:![How to do it...](img/image00262.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the videos in `./src/assets/`:![How to do it...](img/image00263.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `./src/index.html` file and replace the content with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Basically, the main difference with the original `index.html` file is that you
    want to include the `Google Lobster` font for the heading text and `animate.css`
    for animation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For the main template, you can modify the `./src/pages/home.html` file and
    replace it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'There are only two important items on this page: the video and the header with
    subheader.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open and edit the `./src/pages/home/home.scss` file in the same folder using
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All animation is done using CSS; thus, you don't need to write any code for
    the JavaScript file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `config.xml` file and add the following line within the `<widget>`
    tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to your terminal and run the app with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start with the `home.html` file because that is the only page where
    you added the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is just a typical `<video>` tag in HTML5\. However, there is a new attribute,
    called `webkit-playsinline`. This means that you want the video to play where
    it is on the HTML page and not open it up fullscreen with the play control. The
    reason is that you want this video to play in the background, while you can animate
    text on top of it. This is the reason you need to enable this feature by setting
    `AllowInlineMediaPlayback` in `config.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second item in this template is your header and subheader:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that there are `animated` and `zoomIn` classes included. These are the
    required classes for `animate.css` to kick in. If you run the app, you will see
    the text starting to appear from a smaller size to a bigger size (that is, a zoom-in
    effect).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `home.scss` file is important because it has a lot of animation logic.
    Let''s take a look at the header text first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: One interesting thing here is the use of the `text-shadow` attribute. This is
    because you want to create a thin border line around the text so that your white
    text can be easily seen on top of a light background.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the video to fullscreen, you need it to have a negative index so that
    it''s below the other layers. Also, the height must be 100%. This is shown as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in order to position the text vertically in the center, you have to
    create this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `center` class forces the element to have top of 50% but then push the Y
    position -50% to reset the vertical pivot of the `<div>` tag in the middle area.
    You will rarely need to customize such classes; thus, it's good to keep the `center`
    class handy for future use.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a physics-based animation using Dynamics.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using physics-based animations can make your app more interactive and lively,
    which helps attract and retain more users. There are many methods to add physics
    to your component animation. For example, you could even use the CSS `animation-timing`
    function to add property values, such as `ease-in`, `ease-out`, or `cubic-bezier`.
    However, it's easier and better to use an existing JavaScript-based physic animation.
    `Dynamics.js` is one of those JavaScripts that comes with utilities and performance.
    Using native CSS physic features is actually not a good practice as it comes with
    a frame-per-second penalty on mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'The app will show a bouncing button, which can show and hide a top quote box,
    as follows, it also uses physics animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a physics-based animation using Dynamics.js](img/image00264.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This app example could work either in a browser or on a physical device. However,
    it's recommended that you run the app via your physical device to test for performance.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal window, create a new `SpinningButton` app using the `blank`
    template, and go into the `SpinningButton` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit [http://dynamicsjs.com/](http://dynamicsjs.com/) and download the `dynamics.min.js`
    file to your `./src/assets` folder, as follows:![How to do it...](img/image00265.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `./src/index.html` file and replace the code with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The key part of this file is to ensure that `dynamics.min.js` is included.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open and edit the `./src/pages/home/home.html` file to replace the content
    with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There is no need to have header navigation in this app because it will just
    be a single page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `home.ts` file for editing in the same folder as Step 2, with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that you must import the `dynamics` object in this file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify the `home.scss` stylesheet, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to your terminal and run the app with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main concept behind the physics animation in this app is the `dynamics.animate`
    method from the `Dynamics.js` library. Let''s start with the button in the template,
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This is your floating button that you can click to create a nice bouncing effect
    by calling the `animateMe()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To learn more about Ionic 2's floating button, you can refer to the Ionic documentation
    at [http://ionicframework.com/docs/v2/components/#floating-action-buttons](http://ionicframework.com/docs/v2/components/#floating-action-buttons).
  prefs: []
  type: TYPE_NORMAL
- en: 'The simple logic here is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If the button is animated, `isAnimating` must be `True`. Once it's `True`, any
    additional click will not trigger the animation since we don't want the physics
    to kick in multiple times.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the top quote bar is displayed, `isQuoteShown` must be `True`. Otherwise,
    it will call a different animation to hide it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can pass many options in the `dynamics.animate` method. For example, the
    button will use `dynamics.bounce` as the type; thus, it will bounce up and down
    on each click. You can also specify the duration to be applied to the animation
    process itself. After the animation is done, it will trigger the callback in the
    `complete` function, as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: An important thing to keep in mind is that `Dynamics.js` must refer to the DOM
    JavaScript object itself and not the DOM node or Ionic object. That's why you
    have to use `el._elementRef.nativeElement` to point to the native element object
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the quote box, it creates a local variable, called `myCard`, in the template,
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You must refer to this variable using the `ViewChild` decorator, as shown,
    so that `@Page` knows to include it as a dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are interested in learning more about native CSS physics-based animation,
    visit [https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function](https://developer.mozilla.org/en-US/docs/Web/CSS/animation-timing-function).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating the slide component by binding a gesture to the animation state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way to get a *wow* experience from users is to have great-looking introduction
    slides. A typical app would have three to five slides to describe what the app
    does and how it will benefit the users. Today, many apps even add videos or interactive
    screens so that the users can get a *feel* for how the app may work. Such an interactive
    animation will require some internal development to bind touch gestures to the
    animation state. Animating based on a specific state is very difficult because
    you really have to get granular gesture data. On the other hand, it's a lot easier
    to just animate at the beginning or ending of a state. For example, you could
    animate an object inside a slide when the slide completely shows up on the screen
    after a left swipe. However, this animation effect is not as interesting or attractive
    as binding the animation during the touch movement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The app you will build in this section will have three slides that will animate
    when you swipe left or right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating the slide component by binding a gesture to the animation state](img/image00266.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see fade in and fade out animation effects between slides. The following
    Angular logo also moves up when you swipe left from the second slide:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Animating the slide component by binding a gesture to the animation state](img/image00267.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no need to test the app in a physical device because the animation
    is done via HTML and JavaScript. However, it's recommended to test the app in
    your device to evaluate to animation performance.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `SliderAnimation` app using the `blank` template, as follows,
    and go to the `SliderAnimation` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `./src/pages/home/home.html` file and modify its content with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This template mainly uses the `<ion-slides>` tag. However, there are some layers
    to float on top of the `<ion-slide>` tag in order to animate them separately.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After this, replace the content of `./src/pages/home/home.ts` with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that the comments are useful to calculate an animation formula for each
    object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit `./app/pages/home/home.scss` with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to your Terminal and run the app with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the general process for animation:'
  prefs: []
  type: TYPE_NORMAL
- en: Since there are three slides, the user has to swipe twice to reach the end.
    This means that the first swipe will be at 50% progress.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a user swipes left to 25%, the Ionic logo will fade out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a user swipes to 50%, the Angular logo will fade in for the second slide.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a user swipes to 75%, the Angular logo will move up to disappear instead
    of fading out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, in the last 75% to 100%, the JavaScript logo will fade in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You probably noted that the amount of fade or movement will depend on the progress
    percentage. Thus, if you swipe left and right a little bit, you can see the animation
    responding to the gesture right away. There are two *layers* in the template.
    The *floating* static layer, as illustrated, must be on top and it must stay at
    the same position regardless of which slide is current:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The bottom layer is your typical `<ion-slides>`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: When you swipe, it's actually moving `<ion-slide>`. However, it also triggers
    the `onMove()` method because you bind it with the `move` event. The `onMove()`
    method will access `#slidefloat1`, `#slidefloat2`, and `#slidefloat3` from the
    floating `<div>` layer. The `home.ts` file is where you have to animate these
    individual floating slides.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several variables that you need to declare in the `home.ts` file.
    You need to be able to access the `<ion-slides>` object in order to call the *native*
    Swiper methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: According to the Ionic documentation, the `<ion-slides>` object is written based
    on the Swiper library at [http://ionicframework.com/docs/v2/api/components/slides/Slides/](http://ionicframework.com/docs/v2/api/components/slides/Slides/).
  prefs: []
  type: TYPE_NORMAL
- en: You need to bind it with the swiping event natively in order to get the correct
    progress data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following three variables are necessary to access each floating slide:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to leverage `requestAnimationFrame`, as follows, for the best animation
    performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Otherwise, users will sense a *jerky* movement during a swipe because your animation
    is not at 60 FPS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, you need to bind the swipe event only once; thus, it''s necessary to
    have a Boolean toggle to detect the binding event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code shows how to create a `requestAnimationFrame` object to
    call whichever function is to be rendered later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The `onMove()` method is where you put all the animation logic, which must
    bind with the `onProgress` event, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'First, let''s take a look at the code at the bottom of `onMove()`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Basically, you want to have four quarters (or segments) of animation. When you
    swipe from slide 1 to slide 2, it will trigger the `firstQuarter` and `secondQuarter`
    methods. That is, you want to fade out the first floating slide and fade in the
    second floating slide at the end of the process. The concept is similar for the
    `thirdQuarter` and `fourthQuarter` methods. Note that you don't want to call the
    method directly but just pass the function reference inside `this.rAf` to have
    the rendering engine manage the frame rate. Otherwise, the rendered function may
    end up blocking other processes in the UI, which causes jerky movement.
  prefs: []
  type: TYPE_NORMAL
- en: 'For each of the quarters, you only have to change the `style` property, given
    a known **progress value**, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: It's important to use the arrow function here so that you can access the `this`
    context. You have to call `this.slidefloat2.nativeElement` to get to the `<div>`
    DOM object. It's really up to you to write your own math function to calculate
    the position or opacity during the slide movement with the progress value. In
    this example, the `slidefloat1Opacity` variable is just a linear function based
    on the `progress` input value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `secondQuarter` follows the same approach. However, the `thirdQuarter`
    uses the `transform` property instead of `opacity`, as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: There are many ways to make a DOM object change its position. However, it's
    best to leverage the `transform` property instead of using the `left` and `top`
    properties. You want to achieve the highest Frame Per Second. In the `thirdQuarter`
    method, your `slidefloat2transform` will be calculated and it will update a new
    Y position using `translateY()`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you must use `this.bindOnProgress` to disable another event binding
    to `onProgress` because, for each swipe, it will continue to add more events.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand more about `requestAnimationFrame`, you can check out the official
    documentation at [https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Swiper API is located at [http://idangero.us/swiper/api/](http://idangero.us/swiper/api/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic 2 has an official usage example at [http://ionicframework.com/docs/v2/components/#slides](http://ionicframework.com/docs/v2/components/#slides)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic 2 also provides a limited number of API for slides at [http://ionicframework.com/docs/v2/api/components/slides/Slides/](http://ionicframework.com/docs/v2/api/components/slides/Slides/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a background CSS animation to the login page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Animation can also be completely done in CSS. In many cases, you will probably
    run into some interesting demos online and would like to incorporate the CSS-only
    code for animation. If the animation is not as critical to the user experience,
    you could just use to add additional effects to the app. CSS animation is great
    because you don't have to write JavaScript code to manage the animation and just
    leave the browser to process it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, you will build an app to show some floating squares in the
    background of your login page, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a background CSS animation to the login page](img/image00268.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no need to test in a physical device because CSS animation will work
    just fine in the Ionic app.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `BubbleLogin` app using the `blank` template, as follows, and
    go to the `BubbleLogin` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `./src/pages/home/home.html` file and modify the content with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `bg-bubbles` class will convert a list of `<li>` into floating squares pieces.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit `./src/pages/home/home.scss` with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to your terminal and run the app with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since this app does not use JavaScript for animation, you will not need to modify
    anything in `home.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CSS will drive the animation infinitely with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You will also be using two points in the `square` keyframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: So, for a 0% to 100% loop, it will move 700 px vertically and rotate 600 degrees
    in the duration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The reason that each square has a different size and speed is because you can
    customize the CSS as per the `<li>` tag further. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Since this animation does not generate a random number of square objects and
    there are a limited number of objects, you could write a customization for each
    `<li>` tag in the CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you have to put the animation with `z-index: 0` because it will stay
    above other layers, such as form and button.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand more about CSS keyframes, you can check out the Mozilla documentation
    at [https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes](https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
