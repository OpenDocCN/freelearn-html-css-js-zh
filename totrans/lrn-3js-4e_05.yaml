- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Learning to Work with Geometries
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习与几何体一起工作
- en: In the previous chapters, you learned a lot about how to work with Three.js.
    Now you know how to create a basic scene, add lighting, and configure the material
    for your meshes. In [*Chapter 2*](B18726_02.xhtml#_idTextAnchor028), *The Basic
    Components That Make Up a Three.js Scene*, we touched upon (but didn’t really
    go into) the details of the available geometries that Three.js provides and that
    you can use to create your 3D objects. In this chapter and [*Chapter 6*](B18726_06.xhtml#_idTextAnchor101),
    *Exploring Advanced Geometries*, we’ll walk you through all the geometries that
    Three.js provides out of the box (except `THREE.Line`, which we discussed in [*Chapter
    4*](B18726_04.xhtml#_idTextAnchor056), *Working with* *Three.js Materials*).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，您学习了如何使用 Three.js。现在您知道如何创建基本场景，添加光照，并为您的网格配置材质。在 [*第 2 章*](B18726_02.xhtml#_idTextAnchor028)，*构成
    Three.js 场景的基本组件*，我们简要介绍了（但并未深入探讨）Three.js 提供的可用几何体以及您可以使用它们创建 3D 对象的细节。在本章和 [*第
    6 章*](B18726_06.xhtml#_idTextAnchor101)，*探索高级几何体* 中，我们将向您介绍 Three.js 提供的所有内置几何体（除了我们在
    [*第 4 章*](B18726_04.xhtml#_idTextAnchor056)，*使用 Three.js 材质* 中讨论的 `THREE.Line`）。
- en: 'In this chapter, we’ll look at the following geometries:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下几何体：
- en: '`THREE.CircleGeometry`'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.CircleGeometry`'
- en: '`THREE.RingGeometry`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.RingGeometry`'
- en: '`THREE.PlaneGeometry`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.PlaneGeometry`'
- en: '`THREE.ShapeGeometry`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.ShapeGeometry`'
- en: '`THREE.BoxGeometry`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.BoxGeometry`'
- en: '`THREE.SphereGeometry`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.SphereGeometry`'
- en: '`THREE.CylinderGeometry`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.CylinderGeometry`'
- en: '`THREE.ConeGeometry`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.ConeGeometry`'
- en: '`THREE.TorusGeometry`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.TorusGeometry`'
- en: '`THREE.TorusKnotGeometry`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.TorusKnotGeometry`'
- en: '`THREE.PolyhedronGeometry`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.PolyhedronGeometry`'
- en: '`THREE.IcosahedronGeometry`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.IcosahedronGeometry`'
- en: '`THREE.OctahedronGeometry`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.OctahedronGeometry`'
- en: '`THREE.TetraHedronGeometry`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.TetraHedronGeometry`'
- en: '`THREE.DodecahedronGeometry`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THREE.DodecahedronGeometry`'
- en: Before we look into the geometries provided by Three.js, we’ll first look a
    bit deeper into how Three.js represents geometries internally as `THREE.BufferGeometry`.
    In some documentation, you might still encounter `THREE.Geometry` as a base object
    for all geometries. This has been replaced completely in the newer version by
    `THREE.BufferGeometry`, which generally provides better performance, since it
    can easily get its data to the GPU. It is, however, a bit more difficult to use
    than the old `THREE.Geometry`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们探讨 Three.js 提供的几何体之前，我们首先深入了解一下 Three.js 如何作为 `THREE.BufferGeometry` 内部表示几何体。在某些文档中，您可能仍然会遇到
    `THREE.Geometry` 作为所有几何体的基础对象。在较新版本中，这已被完全替换为 `THREE.BufferGeometry`，它通常提供更好的性能，因为它可以轻松地将数据传递到
    GPU。然而，它比旧的 `THREE.Geometry` 稍微难以使用。
- en: 'With `THREE.BufferGeometry`, all properties of geometry are identified by a
    set of attributes. An attribute is basically an array with some additional metadata
    that contains information about the position of the vertices. Attributes are also
    used to store additional information about a vertex – for example, its color.
    To use an attribute to define a vertex and a face, you use the following two properties
    of `THREE.BufferGeometry`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `THREE.BufferGeometry`，几何体的所有属性都通过一组属性来识别。属性基本上是一个包含有关顶点位置信息的附加元数据的数组。属性还用于存储有关顶点的额外信息——例如，其颜色。要使用属性来定义顶点和面，您可以使用
    `THREE.BufferGeometry` 的以下两个属性：
- en: '`attributes`: The `attributes` properties are used to store information that
    can be directly passed to the GPU. For instance, for defining a shape, you define
    a `Float32Array`, where every three values define the position of a vertex.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attributes`：`attributes` 属性用于存储可以直接传递到 GPU 的信息。例如，为了定义一个形状，您定义一个 `Float32Array`，其中每个三个值定义一个顶点的位置。'
- en: 'Each of the three vertices is then interpreted as a face. This can be defined
    in `THREE.BufferGeometry` like this: `geometry.setAttribute( ''position'', new
    THREE.BufferAttribute( arrayOfVertices, 3 ) );`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将每个三个顶点解释为一个面。这可以在 `THREE.BufferGeometry` 中定义如下：`geometry.setAttribute( 'position',
    new THREE.BufferAttribute( arrayOfVertices, 3 ) );`。
- en: '`index`: By default, faces don’t need to be explicitly defined (every three
    consecutive positions are interpreted as a single face), but using the `index`
    property, we can explicitly define which vertices together form a face: `geometry.setIndex(`
    `indicesArray );`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`：默认情况下，不需要显式定义面（每三个连续的位置被解释为一个单独的面），但使用 `index` 属性，我们可以显式定义哪些顶点一起形成一个面：`geometry.setIndex(`
    `indicesArray );`。'
- en: For using the geometries in this chapter, you don’t need to think about these
    internal attributes, since Three.js takes care of setting them correctly when
    you construct a geometry. If you want to create a geometry from scratch, though,
    you need to use the properties shown in the previous list.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章中使用的几何形状，你不需要考虑这些内部属性，因为 Three.js 在你构建几何形状时会正确设置它们。但是，如果你要从头开始创建一个几何形状，你需要使用前面列表中显示的属性。
- en: 'In Three.js, we have a couple of geometries that result in a 2D mesh, and a
    larger number of geometries that create a 3D mesh. In this chapter, we will discuss
    the following topics:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Three.js 中，我们有几个几何形状可以生成 2D 网格，以及更多用于创建 3D 网格的几何形状。在本章中，我们将讨论以下主题：
- en: 2D geometries
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2D 几何形状
- en: 3D geometries
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3D 几何形状
- en: 2D geometries
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2D 几何形状
- en: '2D objects look like flat objects and, as the name implies, only have two dimensions.
    In this section, we’ll first look at the 2D geometries: `THREE.CircleGeometry`,
    `THREE.RingGeometry`, `THREE.PlaneGeometry`, and `THREE.ShapeGeometry`.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 2D 对象看起来像平面对象，正如其名称所暗示的，只有两个维度。在本节中，我们将首先查看 2D 几何形状：`THREE.CircleGeometry`、`THREE.RingGeometry`、`THREE.PlaneGeometry`
    和 `THREE.ShapeGeometry`。
- en: THREE.PlaneGeometry
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.PlaneGeometry
- en: 'A `THREE.PlaneGeometry` object can be used to create a very simple 2D rectangle.
    For an example of this geometry, look at the `plane-geometry.html` example in
    the sources for this chapter. A rectangle that was created using `THREE.PlaneGeometry`
    is shown in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `THREE.PlaneGeometry` 对象可以用来创建一个非常简单的 2D 矩形。例如，查看本章源代码中的 `plane-geometry.html`
    示例。以下截图展示了使用 `THREE.PlaneGeometry` 创建的矩形：
- en: '![Figure 5.1 – Plane geometry](img/Figure_5.01_B18726.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – 平面几何](img/Figure_5.01_B18726.jpg)'
- en: Figure 5.1 – Plane geometry
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 平面几何
- en: 'In the examples for this chapter, we’ve added a control GUI that you can use
    to control the properties of the geometry (in this case, `width`, `height`, `widthSegments`,
    and `heightSegments`), and also change the material (and its properties), disable
    shadows, and hide the ground plane. For instance, if you want to see the individual
    faces of this shape, you can easily show them by disabling the ground plane and
    enabling the `wireframe` property of the selected material:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的示例中，我们添加了一个控制 GUI，你可以使用它来控制几何形状的属性（在这种情况下，`width`、`height`、`widthSegments`
    和 `heightSegments`），还可以更改材质（及其属性），禁用阴影，并隐藏地面。例如，如果你想看到这个形状的各个面，你可以通过禁用地面并启用所选材质的
    `wireframe` 属性轻松显示它们：
- en: '![Figure 5.2 – Plane geometry as a wireframe](img/Figure_5.02_B18726.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 作为线框的平面几何](img/Figure_5.02_B18726.jpg)'
- en: Figure 5.2 – Plane geometry as a wireframe
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 作为线框的平面几何
- en: 'Creating a `THREE.PlaneGeometry` object is very simple, and is done as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `THREE.PlaneGeometry` 对象非常简单，如下所示：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this example for `THREE.PlaneGeometry`, you can change these properties
    and directly see the effect it has on the resulting 3D object. An explanation
    of these properties is shown in the following list:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，对于 `THREE.PlaneGeometry`，你可以更改这些属性，并直接看到它们对生成的 3D 对象产生的影响。以下列表展示了这些属性的说明：
- en: '`width`: This is the width of the rectangle.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width`：这是矩形的宽度。'
- en: '`height`: This is the height of the rectangle.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`height`：这是矩形的长度。'
- en: '`widthSegments`: This is the number of segments that the width should be divided
    into. This defaults to 1.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`widthSegments`：这是宽度应该分割成的段数。默认为 1。'
- en: '`heightSegments`: This is the number of segments the height should be divided
    into. This defaults to 1.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heightSegments`：这是高度应该分割成的段数。默认为 1。'
- en: As you can see, this is not a very complex geometry. You just specify the size,
    and you’re done. If you want to create more faces (for example, when you want
    to create a checkered pattern), you can use the `widthSegments` and `heightSegments`
    properties to divide the geometry into smaller faces.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这并不是一个非常复杂的几何形状。你只需指定大小，然后就可以完成了。如果你想创建更多的面（例如，当你想创建一个棋盘图案时），你可以使用 `widthSegments`
    和 `heightSegments` 属性将几何形状分割成更小的面。
- en: Note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you want to access the properties of a geometry after it has been created,
    you can’t just say `plane.width`. To access the properties of a geometry, you
    have to use the `parameters` property of the object. So, to get the `width` property
    of the plane object we created in this section, you’d have to use `plane.parameters.width`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在创建几何形状之后访问其属性，你不能只说 `plane.width`。要访问几何形状的属性，你必须使用对象的 `parameters` 属性。因此，要获取本节中创建的平面对象的
    `width` 属性，你必须使用 `plane.parameters.width`。
- en: THREE.CircleGeometry
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.CircleGeometry
- en: You can probably already guess what `THREE.CircleGeometry` creates. With this
    geometry, you can create a very simple 2D circle (or part of a circle). First,
    let’s look at the example for this geometry, `circle-geometry.html`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经能猜到`THREE.CircleGeometry`创建的是什么了。使用这种几何形状，你可以创建一个非常简单的2D圆（或圆的一部分）。首先，让我们看看这个几何形状的示例，`circle-geometry.html`。
- en: 'In the following screenshot, you can find an example where we created a `THREE.CircleGeometry`
    object with a `thetaLength` value that is smaller than `2 *` `PI`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕截图中，你可以找到一个示例，其中我们创建了一个具有`thetaLength`值的`THREE.CircleGeometry`对象，这个值小于`2
    *` `PI`：
- en: '![Figure 5.3 – 2D circle geometry](img/Figure_5.03_B18726.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图5.3 – 2D圆几何](img/Figure_5.03_B18726.jpg)'
- en: Figure 5.3 – 2D circle geometry
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3 – 2D圆几何
- en: In this example, you can see and control a mesh that’s been created by using
    `THREE.CircleGeometry`. `2 * PI` represents a complete circle in radians. If you’d
    rather work with degrees than radians, converting between them is very easy.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，你可以看到并控制由`THREE.CircleGeometry`创建的网格。`2 * PI`代表弧度为完整的圆。如果你更愿意使用度数而不是弧度，它们之间的转换非常简单。
- en: 'The following two functions can help you to convert between radians and degrees,
    as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个函数可以帮助你将弧度转换为度数，如下所示：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When you create `THREE.CircleGeometry`, you can specify a few properties that
    define what the circle looks like, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建`THREE.CircleGeometry`时，你可以指定一些属性来定义圆的外观，如下所示：
- en: '`radius`: The radius of a circle defines its size. The radius is the distance
    from the center of the circle to its edge. The default value is 50.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radius`: 圆的半径定义了它的大小。半径是从圆心到其边缘的距离。默认值是50。'
- en: '`segments`: This property defines the number of faces that are used to create
    the circle. The minimum number is 3, and if not specified, this number defaults
    to 8\. A higher value means a smoother circle.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`segments`: 这个属性定义了用于创建圆的面数。最小值是3，如果没有指定，这个值默认为8。数值越高，圆越平滑。'
- en: '`thetaStart`: This property defines the position from which to start drawing
    the circle. This value can range from 0 to `2 * PI`, and the default value is
    0.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thetaStart`: 这个属性定义了绘制圆的起始位置。这个值可以从0到`2 * PI`，默认值是0。'
- en: '`thetaLength`: This property defines to what extent the circle is complete.
    This defaults to `2 * PI` (a full circle) when not specified. For instance, if
    you specify `0.5 * PI` for this value, you’ll get a quarter circle. Use this property
    together with the `thetaStart` property to define the shape of a circle.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thetaLength`: 这个属性定义了圆的完整程度。如果没有指定，默认值为`2 * PI`（一个完整的圆）。例如，如果你为这个值指定`0.5 *
    PI`，你将得到一个四分之一的圆。使用这个属性与`thetaStart`属性一起定义圆的形状。'
- en: 'You can create a full circle by just specifying the `radius` and the `segments`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过只指定`radius`和`segments`来创建一个完整的圆：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you wanted to create half a circle from this geometry, you’d use something
    like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要从这个几何形状创建半圆，你可以使用类似以下的方法：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This creates a circle with a `radius` of `3` that is split into `12` segments.
    The circle starts at a default of `0` and is only drawn halfway since we specify
    `thetaLength` as `Math.PI`, which is half a circle.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个半径为`3`的圆，被分成`12`个段。圆从默认的`0`开始，只画了一半，因为我们指定了`thetaLength`为`Math.PI`，这是半圆。
- en: 'Before moving on to the next geometry, here’s a quick note on the orientation
    that Three.js uses when creating these 2D shapes (`THREE.PlaneGeometry`, `THREE.CircleGeometry`,
    `THREE.RingGeometry`, and `THREE.ShapeGeometry`): Three.js creates these objects
    standing up, so they are aligned along the *x*-*y* plane. This is very logical
    since they are 2D shapes. However, often, especially with `THREE.PlaneGeometry`,
    you want to have the mesh lying down on the ground (the *x*-*z* plane), as some
    sort of ground area on which you can position the rest of your objects. The easiest
    way to create a 2D object that is horizontally orientated instead of vertical
    is by rotating the mesh a quarter rotation backward (`-PI/2`) around its *x-*axis,
    as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一个几何形状之前，这里有一个关于Three.js在创建这些2D形状（`THREE.PlaneGeometry`、`THREE.CircleGeometry`、`THREE.RingGeometry`和`THREE.ShapeGeometry`）时使用的方向的快速说明：Three.js将这些对象创建为直立状态，因此它们沿着*x*-*y*平面对齐。这非常合乎逻辑，因为它们是2D形状。然而，通常，特别是使用`THREE.PlaneGeometry`时，你希望网格平放在地面上（*x*-*z*平面），作为某种地面区域，你可以在这个区域上定位其余的对象。要创建一个水平方向的2D对象而不是垂直方向的，最简单的方法是将网格绕其*x-*轴旋转四分之一圈（`-PI/2`），如下所示：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That’s all for `THREE.CircleGeometry`. The next geometry, `THREE.RingGeometry`,
    looks a lot like `THREE.CircleGeometry`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`THREE.CircleGeometry`的所有内容到此结束。下一个几何形状，`THREE.RingGeometry`，看起来与`THREE.CircleGeometry`非常相似。
- en: THREE.RingGeometry
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.RingGeometry
- en: 'With `THREE.RingGeometry`, you can create a 2D object that not only closely
    resembles `THREE.CircleGeometry`, but also allows you to define a hole in the
    center (see `ring-geometry.html`):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`THREE.RingGeometry`，你可以创建一个2D对象，它不仅非常类似于`THREE.CircleGeometry`，还允许你在中心定义一个孔（见`ring-geometry.html`）：
- en: '![Figure 5.4 – 2D ring geometry](img/Figure_5.04_B18726.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图5.4 – 2D环形几何](img/Figure_5.04_B18726.jpg)'
- en: Figure 5.4 – 2D ring geometry
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4 – 2D环形几何
- en: 'When creating a `THREE.RingGeometry` object, you can use the following properties:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`THREE.RingGeometry`对象时，你可以使用以下属性：
- en: '`innerRadius`: The inner radius of a circle defines the size of the center
    hole. If this property is set to `0`, no hole will be shown. The default value
    is 0.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`innerRadius`: 圆的内半径定义了中心孔的大小。如果此属性设置为`0`，则不会显示孔。默认值为0。'
- en: '`outerRadius`: The outer radius of a circle defines its size. The radius is
    the distance from the center of the circle to its edge. The default value is 50.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outerRadius`: 圆的外半径定义了其大小。半径是从圆心到其边缘的距离。默认值为50。'
- en: '`thetaSegments`: This is the number of diagonal segments that will be used
    to create the circle. A higher value means a smoother ring. The default value
    is 8.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thetaSegments`: 这是指用于创建圆的斜线段的数量。值越大，环形越平滑。默认值为8。'
- en: '`phiSegments`: This is the number of segments required to be used along the
    length of the ring. The default value is 8\. This doesn’t really affect the smoothness
    of the circle but increases the number of faces.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phiSegments`: 这是沿环形长度所需的段数。默认值为8。这实际上并不影响圆的平滑度，但增加了面的数量。'
- en: '`thetaStart`: This defines the position from which to start drawing the circle.
    This value can range from 0 to `2 * PI`, and the default value is 0.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thetaStart`: 这定义了开始绘制圆的位置。此值可以从0到`2 * PI`，默认值为0。'
- en: '`thetaLength`: This defines the extent to which the circle is complete. This
    defaults to `2 * PI` (a full circle) when not specified. For instance, if you
    specify `0.5 * PI` for this value, you’ll get a quarter circle. Use this property
    together with the `thetaStart` property to define the shape of the ring.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thetaLength`: 这定义了圆的完整程度。如果没有指定，默认为`2 * PI`（一个完整的圆）。例如，如果您为此值指定`0.5 * PI`，则将得到四分之一的圆。使用此属性与`thetaStart`属性一起定义环的形状。'
- en: 'The following screenshot shows how `thetaStart` and `thetaLength` work with
    `THREE.RingGeometry`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`thetaStart`和`thetaLength`如何与`THREE.RingGeometry`一起工作：
- en: '![Figure 5.5 – 2D ring geometry with different theta](img/Figure_5.05_B18726.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图5.5 – 不同theta值的2D环形几何](img/Figure_5.05_B18726.jpg)'
- en: Figure 5.5 – 2D ring geometry with different theta
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5 – 不同theta值的2D环形几何
- en: 'In the next section, we’ll look at the last of the 2D shapes: `THREE.ShapeGeometry`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨2D形状中的最后一个：`THREE.ShapeGeometry`。
- en: THREE.ShapeGeometry
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.ShapeGeometry
- en: '`THREE.PlaneGeometry` and `THREE.CircleGeometry` have limited ways of customizing
    their appearance. If you want to create custom 2D shapes, you can use `THREE.ShapeGeometry`.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.PlaneGeometry`和`THREE.CircleGeometry`在自定义外观方面有限。如果您想创建自定义2D形状，可以使用`THREE.ShapeGeometry`。'
- en: With `THREE.ShapeGeometry`, you have a couple of functions you can call to create
    your own shapes. You can compare this functionality with the `<path/>` element
    functionality, which is also available to the HTML canvas element and SVG. Let’s
    start with an example and after that, we’ll show you how you can use the various
    functions to draw your own shape. The `shape-geometry.html` example can be found
    in the sources of this chapter.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`THREE.ShapeGeometry`，你可以调用一些函数来创建自己的形状。你可以将此功能与HTML画布元素和SVG中可用的`<path/>`元素功能进行比较。让我们从一个示例开始，然后我们将向您展示如何使用各种函数来绘制自己的形状。`shape-geometry.html`示例可以在本章的源代码中找到。
- en: 'The following screenshot shows this example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了此示例：
- en: '![Figure 5.6 – A custom shape geometry](img/Figure_5.06_B18726.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图5.6 – 自定义形状几何](img/Figure_5.06_B18726.jpg)'
- en: Figure 5.6 – A custom shape geometry
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 – 自定义形状几何
- en: 'In this example, you can see a custom-created 2D shape. Before going into the
    description of the properties, first, let’s look at the code that is used to create
    this shape. Before we create a `THREE.ShapeGeometry` object, we first have to
    create a `THREE.Shape` object. You can trace these steps by looking at the previous
    screenshot, where we start in the bottom-right corner. Here’s how we created a
    `THREE.Shape` object:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，你可以看到一个自定义创建的 2D 形状。在描述属性之前，首先，让我们看看创建这个形状所使用的代码。在我们创建 `THREE.ShapeGeometry`
    对象之前，我们首先必须创建一个 `THREE.Shape` 对象。你可以通过查看之前的截图来追踪这些步骤，我们从右下角开始。这是创建 `THREE.Shape`
    对象的方法：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this piece of code, you can see that we created the outline of this shape
    using lines, curves, and splines. After that, we punched a number of holes into
    this shape by using the `holes` property of `THREE.Shape`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，你可以看到我们使用线条、曲线和样条创建了这个形状的轮廓。之后，我们通过使用 `THREE.Shape` 的 `holes` 属性在这个形状上打了许多孔。
- en: 'In this section, though, we’re talking about `THREE.ShapeGeometry` and not
    `THREE.Shape` – to create a geometry from `THREE.Shape`, we need to pass in `THREE.Shape`
    (returned, in our case, from the `drawShape()` function) as the argument to `THREE.ShapeGeometry`.
    You can also pass in an array of a `THREE.Shape` object, but in our example, we
    only use one object:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在本节中，我们讨论的是 `THREE.ShapeGeometry` 而不是 `THREE.Shape` – 要从 `THREE.Shape` 创建一个几何体，我们需要将
    `THREE.Shape`（在我们的例子中，由 `drawShape()` 函数返回）作为 `THREE.ShapeGeometry` 的参数传入。你也可以传入一个
    `THREE.Shape` 对象的数组，但在我们的例子中，我们只使用了一个对象：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The result of this function is a geometry that can be used to create a mesh.
    Besides the shape you want to convert into `THREE.ShapeGeometry`, you can also
    pass in a number of additional options objects as the second argument:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的结果是一个可以用来创建网格的几何体。除了你想要转换为 `THREE.ShapeGeometry` 的形状之外，你还可以将多个额外的选项对象作为第二个参数传入：
- en: '`curveSegments`: This property determines how smooth the curves created from
    the shape are. The default value is 12.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`curveSegments`: 这个属性决定了从形状创建的曲线的平滑度。默认值是 12。'
- en: '`material`: This is the `materialIndex` property that is used for the faces
    that are created for the speciﬁed shapes. So, if you pass in multiple materials,
    you can specify which of those materials should be applied to the faces of the
    shape that is created.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`material`: 这是用于为指定形状创建的面的 `materialIndex` 属性。因此，如果你传入多个材质，你可以指定应该将哪些材质应用于创建的形状的面。'
- en: '`UVGenerator`: When you use a texture with your material, the UV mapping determines
    what part of a texture is used for a speciﬁc face. With the `UVGenerator` property,
    you can pass in your own object, which will create the UV settings for the faces
    that are created for the shapes passed in. More information on UV settings can
    be found in [*Chapter 10*](B18726_10.xhtml#_idTextAnchor171), *Loading and Working
    with Textures*. If none are speciﬁed, `THREE.ExtrudeGeometry.WorldUVGenerator`
    is used.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UVGenerator`: 当你使用材质与纹理一起使用时，UV 映射决定了纹理的哪一部分用于特定的面。使用 `UVGenerator` 属性，你可以传入自己的对象，这将为传入的形状创建
    UV 设置。有关 UV 设置的更多信息，请参阅[*第10章*](B18726_10.xhtml#_idTextAnchor171)，*加载和使用纹理*。如果没有指定，则使用
    `THREE.ExtrudeGeometry.WorldUVGenerator`。'
- en: 'The most important part of `THREE.ShapeGeometry` is `THREE.Shape`, which you
    use to create the shape, so let’s look at the list of drawing functions you can
    use to create `THREE.Shape`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.ShapeGeometry` 的最重要部分是 `THREE.Shape`，你使用它来创建形状，所以让我们看看你可以用来创建 `THREE.Shape`
    的绘图函数列表：'
- en: '`moveTo(x,y)`: Move the drawing position to the `x-` and `y-c`oordinates that
    are specified.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`moveTo(x,y)`: 将绘图位置移动到指定的 `x-` 和 `y-c` 坐标。'
- en: '`lineTo(x,y)`: Draw a line from the current position (for example, set by the
    `moveTo` function) to the `x-` and `y-c`oordinates that have been provided.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lineTo(x,y)`: 从当前位置（例如，由 `moveTo` 函数设置）绘制一条线到提供的 `x-` 和 `y-c` 坐标。'
- en: '`quadraticCurveTo(aCPx, aCPy, x, y)`: There are two different ways of specifying
    curves. You can use the `quadraticCurveTo` function, or you can use the `bezierCurveTo`
    function. The difference between these two functions is how you specify the curvature
    of the curve.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quadraticCurveTo(aCPx, aCPy, x, y)`: 有两种不同的方式来指定曲线。你可以使用 `quadraticCurveTo`
    函数，或者使用 `bezierCurveTo` 函数。这两个函数之间的区别在于如何指定曲线的曲率。'
- en: For a quadratic curve, we need to specify one additional point (using the `aCPx`
    and `aCPy` arguments), and the curve is based solely on that point and, of course,
    the specified endpoint (from the `x` and `y` arguments). For a cubic curve (used
    by the `bezierCurveTo` function), you specify two additional points to define
    the curve. The starting point is the current position of the path.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于二次曲线，我们需要指定一个额外的点（使用 `aCPx` 和 `aCPy` 参数），曲线仅基于该点以及当然，指定的端点（来自 `x` 和 `y` 参数）。对于三次曲线（由
    `bezierCurveTo` 函数使用），你指定两个额外的点来定义曲线。起点是路径的当前位置。
- en: 'The following diagram explains the differences between these two options:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表解释了这两种选项之间的区别：
- en: '![Figure 5.7 – Quadratic bezier and cubic bezier](img/Figure_5.07_B18726.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.7 – 二次贝塞尔和三次贝塞尔](img/Figure_5.07_B18726.jpg)'
- en: Figure 5.7 – Quadratic bezier and cubic bezier
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 二次贝塞尔和三次贝塞尔
- en: '`bezierCurveTo(aCPx1, aCPy1, aCPx2, aCPy2, x, y)`: This draws a curve based
    on the arguments supplied. For an explanation, see the previous list entry. The
    curve is drawn based on the two coordinates that define the curve (`aCPx1`, `aCPy1`,
    `aCPx2`, and `aCPy2`) and the end coordinates (`x` and `y`). The starting point
    is the current position of the path.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bezierCurveTo(aCPx1, aCPy1, aCPx2, aCPy2, x, y)`: 这将根据提供的参数绘制一条曲线。有关解释，请参阅前面的列表条目。曲线是根据定义曲线的两个坐标（`aCPx1`、`aCPy1`、`aCPx2`
    和 `aCPy2`）以及端点坐标（`x` 和 `y`）绘制的。起点是路径的当前位置。'
- en: '`splineThru(pts)`: This function draws a fluid line through the set of coordinates
    provided, (`pts`). This argument should be an array of `THREE.Vector2` objects.
    The starting point is the current position of the path.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`splineThru(pts)`: 此函数通过提供的坐标集（`pts`）绘制一条流畅的线条。此参数应为一个 `THREE.Vector2` 对象的数组。起点是路径的当前位置。'
- en: '`arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise)`: This draws a circle
    (or part of a circle). The circle starts from the current position of the path.
    Here, `aX` and `aY` are used as offsets from the current position. Note that `aRadius`
    sets the size of the circle and `aStartAngle` and `aEndAngle` define how large
    a part of the circle is drawn. The Boolean `aClockwise` property determines whether
    the circle is drawn clockwise or counterclockwise.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise)`: 这将绘制一个圆（或圆的一部分）。圆从路径的当前位置开始。在这里，`aX`
    和 `aY` 被用作相对于当前位置的偏移量。请注意，`aRadius` 设置圆的大小，而 `aStartAngle` 和 `aEndAngle` 定义绘制圆的哪一部分。布尔值
    `aClockwise` 属性确定圆是按顺时针还是逆时针绘制。'
- en: '`absArc(aX, aY, aRadius, aStartAngle, aEndAngle, AClockwise)`: See the description
    of the `arc` property. The position is absolute instead of relative to the current
    position.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`absArc(aX, aY, aRadius, aStartAngle, aEndAngle, AClockwise)`: 请参阅 `arc` 属性的描述。位置是绝对值，而不是相对于当前位置。'
- en: '`ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise)`: See
    the description of the `arc` property. As an addition, with the `ellipse` function,
    we can separately set the `x` radius and the `y` radius.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise)`: 请参阅
    `arc` 属性的描述。作为补充，使用 `ellipse` 函数，我们可以分别设置 `x` 半径和 `y` 半径。'
- en: '`absEllipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise)`:
    See the description of the `ellipse` property. The position is absolute instead
    of relative to the current position.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`absEllipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise)`:
    请参阅 `ellipse` 属性的描述。位置是绝对值，而不是相对于当前位置。'
- en: '`fromPoints(vectors)`: If you pass in an array of `THREE.Vector2` (or `THREE.Vector3`)
    objects into this function, Three.js will create a path using straight lines from
    the supplied vectors.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fromPoints(vectors)`: 如果你向此函数传递一个 `THREE.Vector2`（或 `THREE.Vector3`）对象的数组，Three.js
    将使用提供的向量创建一条路径。'
- en: '`holes`: The `holes` property contains an array of `THREE.Shape` objects. Each
    of the objects in this array is rendered as a hole. A good example of this is
    the example we saw at the beginning of this section. In that code fragment, we
    added three `THREE.Shape` objects to this array: one for the left eye, one for
    the right eye, and one for the mouth of our main `THREE.Shape` object.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`holes`: `holes` 属性包含一个 `THREE.Shape` 对象的数组。数组中的每个对象都被渲染为一个孔。一个很好的例子是我们在本节开头看到的例子。在那个代码片段中，我们向这个数组添加了三个
    `THREE.Shape` 对象：一个用于左眼，一个用于右眼，还有一个用于我们主要的 `THREE.Shape` 对象的嘴巴。'
- en: 'Just like for a lot of examples, to understand how the various properties affect
    the final shape, the easiest way is to just enable the `wireframe` property on
    the material and play around with the settings. For example, the following screenshot
    shows what happens when you use a low value for `curveSegments`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 就像许多示例一样，为了理解各种属性如何影响最终形状，最简单的方法就是只启用材质上的 `wireframe` 属性，并调整设置。例如，以下截图显示了当您为
    `curveSegments` 使用低值时会发生什么：
- en: '![Figure 5.8 – The wireframe of a shape geometry](img/Figure_5.08_B18726.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8 – 形状几何的线框图](img/Figure_5.08_B18726.jpg)'
- en: Figure 5.8 – The wireframe of a shape geometry
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 形状几何的线框图
- en: As you can see, the shape loses its nice, round edges, but uses a lot fewer
    faces in the process. That’s it for the 2D shapes. The following sections will
    show and explain the basic 3D shapes.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，形状失去了它漂亮、圆润的边缘，但在过程中使用了更少的面。这就是二维形状的全部内容。以下几节将展示并解释基本三维形状。
- en: 3D geometries
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三维几何体
- en: 'In this section on basic 3D geometries, we’ll start with a geometry we’ve already
    seen a couple of times: `THREE.BoxGeometry`.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节关于基本三维几何体的内容中，我们将从我们已经见过几次的几何体开始：`THREE.BoxGeometry`。
- en: THREE.BoxGeometry
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.BoxGeometry
- en: '`THREE.BoxGeometry` is a very simple 3D geometry that allows you to create
    a box by specifying its `width`, `height`, and `depth` properties. We’ve added
    an example, `box-geometry.html`, where you can play around with these properties.
    The following screenshot shows this geometry:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.BoxGeometry` 是一个非常简单的三维几何体，允许您通过指定其 `width`、`height` 和 `depth` 属性来创建一个盒子。我们添加了一个示例，`box-geometry.html`，您可以在其中调整这些属性。以下截图显示了此几何体：'
- en: '![Figure 5.9 – Basic 3D box geometry](img/Figure_5.09_B18726.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.9 – 基本三维箱体几何](img/Figure_5.09_B18726.jpg)'
- en: Figure 5.9 – Basic 3D box geometry
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 基本三维箱体几何
- en: 'As you can see in this example, by changing the `width`, `height`, and `depth`
    properties of `THREE.BoxGeometry`, you can control the size of the resulting mesh.
    These three properties are also mandatory when you create a new cube, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在此示例中看到的，通过更改 `THREE.BoxGeometry` 的 `width`、`height` 和 `depth` 属性，您可以控制生成的网格的大小。当您创建一个新的立方体时，这三个属性也是必需的，如下所示：
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the example, you can also see a couple of other properties that you can
    define on the cube. The following list explains all the properties:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，您还可以看到一些可以在立方体上定义的其他属性。以下列表解释了所有属性：
- en: '`width`: This is the width of the cube. This is the length of the vertices
    of the cube along the *x-*axis.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width`：这是立方体的宽度。这是立方体顶点沿 *x* 轴的长度。'
- en: '`height`: This is the height of the cube. This is the length of the vertices
    of the cube along the *y-*axis.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`height`：这是立方体的高度。这是立方体顶点沿 *y* 轴的长度。'
- en: '`depth`: This is the depth of the cube. This is the length of the vertices
    of the cube along the *z-*axis.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`depth`：这是立方体的深度。这是立方体顶点沿 *z* 轴的长度。'
- en: '`widthSegments`: This is the number of segments into which we divide a face
    along the cube’s *x-*axis. The default value is 1\. The more segments you define,
    the more faces a side has. If this property and the next two are set to `1`, each
    side of the cube will just have 2 faces. If this property is set to `2`, the face
    will be divided into 2 segments, resulting in 4 faces.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`widthSegments`：这是我们将立方体的一个面沿 *x* 轴分割成多少段。默认值是 1。您定义的段数越多，一个面的面数就越多。如果此属性和下一个两个属性设置为
    `1`，立方体的每个面将只有 2 个面。如果此属性设置为 `2`，面将被分割成 2 段，从而产生 4 个面。'
- en: '`heightSegments`: This is the number of segments into which we divide a face
    along the cube’s *y-*axis. The default value is 1.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heightSegments`：这是我们将立方体的一个面沿 *y* 轴分割成多少段。默认值是 1。'
- en: '`depthSegments`: This is the number of segments into which we divide a face
    along the cube’s *z-*axis. The default value is 1.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`depthSegments`：这是我们将立方体的一个面沿 *z* 轴分割成多少段。默认值是 1。'
- en: By increasing the various segment properties, you divide the six main faces
    of the cube into smaller faces. This is useful if you want to set specific material
    properties on parts of the cube using `THREE.MeshFaceMaterial`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 通过增加各种段属性，您将立方体的六个主要面分割成更小的面。如果您想使用 `THREE.MeshFaceMaterial` 在立方体的某些部分设置特定的材质属性，这很有用。
- en: '`THREE.BoxGeometry` is a very simple geometry. Another simple one is `THREE.SphereGeometry`.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.BoxGeometry` 是一个非常简单的几何体。另一个简单的是 `THREE.SphereGeometry`。'
- en: THREE.SphereGeometry
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.SphereGeometry
- en: 'With `THREE.SphereGeometry`, you can create a 3D sphere. Let’s dive straight
    into the example, `sphere-geometry.html`:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `THREE.SphereGeometry`，您可以创建一个三维球体。让我们直接进入示例，`sphere-geometry.html`：
- en: '![Figure 5.10 – Simple 3D sphere geometry](img/Figure_5.10_B18726.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 – 简单 3D 球体几何](img/Figure_5.10_B18726.jpg)'
- en: Figure 5.10 – Simple 3D sphere geometry
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – 简单 3D 球体几何
- en: 'In the previous screenshot, we have shown you a half-open sphere that was created
    based on `THREE.SphereGeometry`. This geometry is a very flexible one and can
    be used to create all kinds of sphere-related geometries. A basic `THREE.SphereGeometry`
    instance, though, can be created as easily as this: `new THREE.SphereGeometry()`.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个截图中，我们向您展示了一个基于 `THREE.SphereGeometry` 创建的半开放球体。这种几何形状非常灵活，可以用来创建各种与球体相关的几何形状。然而，一个基本的
    `THREE.SphereGeometry` 实例可以像这样轻松创建：`new THREE.SphereGeometry()`。
- en: 'The following properties can be used to tune what the resulting mesh looks
    like:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下属性可以用来调整最终网格的外观：
- en: '`radius`: This is used to set the radius for the sphere. This defines how large
    the resulting mesh will be. The default value is 50.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radius`：这用于设置球体的半径。这定义了最终网格的大小。默认值是 50。'
- en: '`widthSegments`: This is the number of segments to be used vertically. More
    segments mean a smoother surface. The default value is 8 and the minimum value
    is 3.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`widthSegments`：这是用于垂直方向的段数。段数越多，表面越光滑。默认值是 8，最小值是 3。'
- en: '`heightSegments`: This is the number of segments to be used horizontally. The
    more segments, the smoother the surface of the sphere. The default value is 6
    and the minimum value is 2.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heightSegments`：这是用于水平方向的段数。段数越多，球体的表面越光滑。默认值是 6，最小值是 2。'
- en: '`phiStart`: This determines where to start drawing the sphere along its *x-*axis.
    This can range from 0 to `2 * PI`. The default value is `0`.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phiStart`：这决定了在球体的 *x-* 轴上开始绘制球体的位置。这可以从 0 到 `2 * PI` 范围内变化。默认值是 `0`。'
- en: '`phiLength`: This determines how far from `phiStart` the sphere is to be drawn.
    `2 * PI` will draw a full sphere and `0.5 * PI` will draw an open quarter-sphere.
    The default value is `2 *` `PI`.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`phiLength`：这决定了从 `phiStart` 开始绘制球体的距离。`2 * PI` 将绘制一个完整的球体，而 `0.5 * PI` 将绘制一个开放的四分之一球体。默认值是
    `2 * PI`。'
- en: '`thetaStart`: This determines where to start drawing the sphere along its *x-*axis.
    This can range from 0 to `2 * PI`, and the default value is 0.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thetaStart`：这决定了在球体的 *x-* 轴上开始绘制球体的位置。这可以从 0 到 `2 * PI` 范围内变化，默认值是 0。'
- en: '`thetaLength`: This determines how far from `thetaStart` the sphere is drawn.
    The `2 * PI` value is a full sphere, whereas `PI` will draw only half of the sphere.
    The default value is `2 *` `PI`.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thetaLength`：这决定了从 `thetaStart` 开始绘制球体的距离。`2 * PI` 值表示一个完整的球体，而 `PI` 将只绘制球体的一半。默认值是
    `2 * PI`。'
- en: 'The `radius`, `widthSegments`, and `heightSegments` properties should be clear.
    We’ve already seen these kinds of properties in other examples. The `phiStart`,
    `phiLength`, `thetaStart`, and `thetaLength` properties are a bit harder to understand
    without looking at an example. Luckily, though, you can experiment with these
    properties from the menu in the `sphere-geometry.html` example and create interesting
    geometries such as these:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`radius`、`widthSegments` 和 `heightSegments` 属性应该是清晰的。我们已经在其他示例中看到过这类属性。`phiStart`、`phiLength`、`thetaStart`
    和 `thetaLength` 属性没有例子可能比较难以理解。幸运的是，你可以在 `sphere-geometry.html` 示例的菜单中实验这些属性，并创建如这些有趣的几何形状：'
- en: '![Figure 5.11 – Sphere geometry with different phi and theta properties](img/Figure_5.11_B18726.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.11 – 具有不同 phi 和 theta 属性的球体几何](img/Figure_5.11_B18726.jpg)'
- en: Figure 5.11 – Sphere geometry with different phi and theta properties
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – 具有不同 phi 和 theta 属性的球体几何
- en: The next one on the list is `THREE.CylinderGeometry`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的下一个是 `THREE.CylinderGeometry`。
- en: THREE.CylinderGeometry
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.CylinderGeometry
- en: 'With this geometry, we can create cylinders and cylindrical objects. As for
    all the other geometries, we also have an example (`cylinder-geometry.html`) that
    lets you experiment with the properties of this geometry, the screenshot for which
    is as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种几何形状，我们可以创建圆柱和圆柱形物体。至于其他所有几何形状，我们也有一个示例（`cylinder-geometry.html`），让你可以实验这种几何形状的特性，其截图如下：
- en: '![Figure 5.12 – 3D cylinder geometry](img/Figure_5.12_B18726.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.12 – 3D 圆柱体几何](img/Figure_5.12_B18726.jpg)'
- en: Figure 5.12 – 3D cylinder geometry
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – 3D 圆柱体几何
- en: 'When you create `THREE.CylinderGeometry`, there aren’t any mandatory arguments,
    so you can create a cylinder by just calling `new THREE.CylinderGeometry()`. You
    can pass in a number of properties, as you can see in the preceding example, to
    alter the appearance of this cylinder. The properties are explained in the following
    list:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建`THREE.CylinderGeometry`时，没有强制性的参数，因此您只需调用`new THREE.CylinderGeometry()`即可创建圆柱。您可以通过传递一系列属性，如前例所示，来改变这个圆柱的外观。这些属性将在以下列表中解释：
- en: '`radiusTop`: This sets the size that this cylinder will be at the top. The
    default value is 20.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radiusTop`: 这设置了圆柱顶部的尺寸。默认值为20。'
- en: '`radiusBottom`: This sets the size that this cylinder will be at the bottom.
    The default value is 20.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radiusBottom`: 这设置了圆柱底部的尺寸。默认值为20。'
- en: '`height`: This property sets the height of the cylinder. The default height
    is 100.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`height`: 这个属性设置了圆柱的高度。默认高度为100。'
- en: '`radialSegments`: This determines the number of segments along the radius of
    the cylinder. This defaults to 8\. More segments mean a smoother cylinder.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radialSegments`: 这决定了圆柱半径方向上的分段数。默认值为8。更多的分段意味着圆柱更加光滑。'
- en: '`heightSegments`: This determines the number of segments along the height of
    the cylinder. The default value is 1\. More segments mean more faces.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heightSegments`: 这决定了圆柱高度方向上的分段数。默认值为1。更多的分段意味着更多的面。'
- en: '`openEnded`: This determines whether or not the mesh is closed at the top and
    the bottom. The default value is `false`.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openEnded`: 这决定了网格在顶部和底部是否闭合。默认值为`false`。'
- en: '`thetaStart`: This determines where to start drawing the cylinder along its
    *x-*axis. This can range from 0 to `2 * PI`, and the default value is 0.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thetaStart`: 这决定了沿着圆柱的*x-*轴开始绘制圆柱的位置。这可以从0到`2 * PI`，默认值为0。'
- en: '`thetaLength`: This determines how far from `thetaStart` the cylinder is drawn.
    The `2 * PI` value is a full cylinder, whereas `PI` will draw only half of a cylinder.
    The default value is `2 *` `PI`.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thetaLength`: 这决定了从`thetaStart`开始绘制圆柱的距离。`2 * PI`值是一个完整的圆柱，而`PI`将只绘制圆柱的一半。默认值为`2
    * PI`。'
- en: 'These are all very basic properties that you can use to configure a cylinder.
    One interesting aspect, though, is when you use a negative `radius` value for
    the top (or for the bottom). If you do this, you can use this geometry to create
    an hourglass-like shape, as shown in the following screenshot:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是非常基本的属性，您可以使用它们来配置圆柱。然而，有一个有趣的地方，那就是当您为顶部（或底部）使用负`radius`值时。如果您这样做，可以使用这种几何形状创建一个沙漏形状，如下面的截图所示：
- en: '![Figure 5.13 – 3D cylinder geometry as an hourglass](img/Figure_5.13_B18726.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图5.13 – 3D圆柱几何作为沙漏](img/Figure_5.13_B18726.jpg)'
- en: Figure 5.13 – 3D cylinder geometry as an hourglass
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.13 – 3D圆柱几何作为沙漏
- en: One thing to note here is that the top half, in this case, is turned inside
    out. If you use a material that isn’t configured with `THREE.DoubleSide`, you
    won’t see the top half.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一点是，在这种情况下，上半部分是翻转的。如果您使用未配置`THREE.DoubleSide`的材料，您将看不到上半部分。
- en: The next geometry is `THREE.ConeGeometry`, which provides the basic functionalities
    of `THREE.CylinderGeometry`, but has the top radius fixed to zero.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个几何形状是`THREE.ConeGeometry`，它提供了与`THREE.CylinderGeometry`基本相同的功能，但顶部半径固定为零。
- en: THREE.ConeGeometry
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.ConeGeometry
- en: '`THREE.ConeGeometry` is pretty much the same as `THREE.CylinderGeometry`. It
    uses all the same properties, except it only allows you to set the radius instead
    of separate `radiusTop` and `radiusBottom` values:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.ConeGeometry`几乎与`THREE.CylinderGeometry`相同。它使用所有相同的属性，但它只允许您设置半径，而不是单独的`radiusTop`和`radiusBottom`值：'
- en: '![Figure 5.14 – Simple 3D cone geometry](img/Figure_5.14_B18726.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图5.14 – 简单3D圆锥几何](img/Figure_5.14_B18726.jpg)'
- en: Figure 5.14 – Simple 3D cone geometry
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14 – 简单3D圆锥几何
- en: 'The following properties can be set on `THREE.ConeGeometry`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下属性可以在`THREE.ConeGeometry`上设置：
- en: '`radius`: This sets the size that this cylinder will be at the bottom. The
    default value is `20`.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radius`: 这设置了圆柱底部的尺寸。默认值为`20`。'
- en: '`height`: This property sets the height of the cylinder. The default height
    is 100.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`height`: 这个属性设置了圆柱的高度。默认高度为100。'
- en: '`radialSegments`: This determines the number of segments along the radius of
    the cylinder. This defaults to 8\. More segments mean a smoother cylinder.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radialSegments`: 这决定了圆柱半径方向上的分段数。默认值为8。更多的分段意味着圆柱更加光滑。'
- en: '`heightSegments`: This determines the number of segments along the height of
    the cylinder. The default value is 1\. More segments mean more faces.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heightSegments`: 这决定了沿着圆柱高度方向的分段数。默认值是1。更多的分段意味着更多的面。'
- en: '`openEnded`: This determines whether or not the mesh is closed at the top and
    the bottom. The default value is `false`.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openEnded`: 这决定了网格是否在顶部和底部封闭。默认值是`false`。'
- en: '`thetaStart`: This determines where to start drawing the cylinder along its
    *x-*axis. This can range from 0 to `2 * PI`, and the default value is 0.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thetaStart`: 这决定了沿着圆柱的*x-*轴开始绘制的位置。这可以是从0到`2 * PI`的范围，默认值是0。'
- en: '`thetaLength`: This determines how far from `thetaStart` the cylinder is drawn.
    The `2 * PI` value is a full cylinder, whereas `PI` will draw only half of a cylinder.
    The default value is `2 *` `PI`.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thetaLength`: 这决定了从`thetaStart`开始绘制圆柱的距离。`2 * PI`值是一个完整的圆柱，而`PI`将只绘制圆柱的一半。默认值是`2
    * PI`。'
- en: The next geometry, `THREE.TorusGeometry`, allows you to create a donut-like
    shaped object.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个几何形状，`THREE.TorusGeometry`，允许您创建类似甜甜圈的形状对象。
- en: THREE.TorusGeometry
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.TorusGeometry
- en: 'A torus is a simple shape that looks like a donut. The following screenshot,
    which you can get yourself by opening the `torus-geometry.html` example, shows
    `THREE.TorusGeometry` in action:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 环面是一个看起来像甜甜圈的基本形状。以下截图，您可以通过打开`torus-geometry.html`示例来获取，显示了`THREE.TorusGeometry`的实际应用：
- en: '![Figure 5.15 – 3D torus geometry](img/Figure_5.15_B18726.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图5.15 – 3D环面几何形状](img/Figure_5.15_B18726.jpg)'
- en: Figure 5.15 – 3D torus geometry
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15 – 3D环面几何形状
- en: 'Just like most of the simple geometries, there aren’t any mandatory arguments
    when creating `THREE.TorusGeometry`. The following list mentions the arguments
    you can specify when you create this geometry:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 就像大多数简单几何形状一样，创建`THREE.TorusGeometry`时没有强制性的参数。以下列表提到了您在创建此几何形状时可以指定的参数：
- en: '`radius`: This sets the size of the complete torus. The default value is 100.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radius`: 这设置了完整环面的大小。默认值是100。'
- en: '`tube`: This sets the radius of the tube (the actual donut). The default value
    for this attribute is 40.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tube`: 这设置了管状体的半径（即实际的甜甜圈）。此属性的默认值是40。'
- en: '`radialSegments`: This determines the number of segments to be used along the
    length of the torus. The default value is 8\. See the effect of changing this
    value in the example.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radialSegments`: 这决定了沿着环面长度方向要使用的分段数。默认值是8。请参见示例中更改此值的效果。'
- en: '`tubularSegments`: This determines the number of segments to be used along
    the width of the torus. The default value is 6\. See the effect of changing this
    value in the example.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tubularSegments`: 这决定了沿着环面宽度方向要使用的分段数。默认值是6。请参见示例中更改此值的效果。'
- en: '`arc`: With this property, you can control whether the torus draws a full circle.
    The default of this value is `2 * PI` (a full circle).'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arc`: 通过这个属性，您可以控制环面是否绘制一个完整的圆。此值的默认值是`2 * PI`（一个完整的圆）。'
- en: 'Most of these are very basic properties that you’ve already seen. The `arc`
    property, however, is a very interesting one. With this property, you can define
    whether the donut makes a full circle or only a partial one. By experimenting
    with this property, you can create very interesting meshes, such as the following
    one with `arc` set to a value lower than `2 *` `PI`:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这些大多数都是非常基本的属性，您已经见过。然而，`arc`属性却非常有趣。通过这个属性，您可以定义甜甜圈是画一个完整的圆还是只有部分圆。通过实验这个属性，您可以创建非常有趣的网格，如下面一个将`arc`设置为小于`2
    * PI`的值的例子：
- en: '![Figure 5.16 – 3D torus geometry with a smaller arc property](img/Figure_5.16_B18726.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图5.16 – 具有较小圆弧属性的3D环面几何形状](img/Figure_5.16_B18726.jpg)'
- en: Figure 5.16 – 3D torus geometry with a smaller arc property
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.16 – 具有较小圆弧属性的3D环面几何形状
- en: '`THREE.TorusGeometry` is a very straightforward geometry. In the next section,
    we’ll look at a geometry that almost shares its name but is much less straightforward:
    `THREE.TorusKnotGeometry`.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.TorusGeometry`是一个非常直接的几何形状。在下一节中，我们将查看一个几乎与其名称相同但不太直接的几何形状：`THREE.TorusKnotGeometry`。'
- en: THREE.TorusKnotGeometry
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.TorusKnotGeometry
- en: 'With `THREE.TorusKnotGeometry`, you can create a torus knot. A torus knot is
    a special kind of knot that looks like a tube that winds around itself a couple
    of times. The best way to explain this is by looking at the `torus-knot-geometry.html`
    example. The following screenshot shows this geometry:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`THREE.TorusKnotGeometry`，您可以创建环面结。环面结是一种特殊的结，看起来像一根管子绕自身缠绕了几次。最好的解释方式是查看`torus-knot-geometry.html`示例。以下截图显示了此几何形状：
- en: '![Figure 5.17 – Torus knot geometry](img/Figure_5.17_B18726.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图5.17 – 环面结几何形状](img/Figure_5.17_B18726.jpg)'
- en: Figure 5.17 – Torus knot geometry
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.17 – 环面结几何形状
- en: If you open this example and play around with the `p` and `q` properties, you
    can create all kinds of beautiful geometries. The `p` property defines how often
    the knot winds around its axis, and `q` defines how much the knot winds around
    its interior.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打开这个示例并调整 `p` 和 `q` 属性，你可以创建各种美丽的几何形状。`p` 属性定义了结围绕其轴旋转的频率，而 `q` 定义了结围绕其内部旋转的程度。
- en: 'If this sounds a bit vague, don’t worry. You don’t need to understand these
    properties to create beautiful knots, such as the one shown in the following screenshot
    (for those interested in the details, Wolfram has a good article on this subject
    at [https://mathworld.wolfram.com/TorusKnot.html](https://mathworld.wolfram.com/TorusKnot.html)):'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这听起来有点模糊，不要担心。你不需要理解这些属性就能创建出美丽的结，例如以下截图所示（对细节感兴趣的人，Wolfram 在 [https://mathworld.wolfram.com/TorusKnot.html](https://mathworld.wolfram.com/TorusKnot.html)
    上有一篇关于这个主题的好文章）：
- en: '![Figure 5.18 – Torus knot geometry with different p and q values](img/Figure_5.18_B18726.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图5.18 – 不同p和q值的环面结几何形状](img/Figure_5.18_B18726.jpg)'
- en: Figure 5.18 – Torus knot geometry with different p and q values
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.18 – 不同p和q值的环面结几何形状
- en: 'With the example for this geometry, you can play around with the following
    properties and see the effect that various combinations of `p` and `q` have on
    this geometry:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个几何形状的示例，你可以调整以下属性并查看 `p` 和 `q` 的各种组合对这个几何形状的影响：
- en: '`radius`: This sets the size of the complete torus. The default value is 100.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radius`：这个属性设置了完整环面的尺寸。默认值是100。'
- en: '`tube`: This sets the radius of the tube (the actual donut). The default value
    for this attribute is 40.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tube`：这个属性设置了管（实际甜甜圈）的半径。此属性的默认值是40。'
- en: '`radialSegments`: This determines the number of segments to be used along the
    length of the torus knot. The default value is 64\. See the effect of changing
    this value in the demo.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radialSegments`：这个属性决定了在环面结的长度方向上要使用的分段数。默认值是64。在演示中查看更改此值的效果。'
- en: '`tubularSegments`: This determines the number of segments to be used along
    the width of the torus knot. The default value is 8\. See the effect of changing
    this value in the demo.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tubularSegments`：这个属性决定了在环面结的宽度方向上要使用的分段数。默认值是8。在演示中查看更改此值的效果。'
- en: '`p`: This defines the shape of the knot, and the default value is 2.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`p`：这个属性定义了结的形状，默认值是2。'
- en: '`q`: This defines the shape of the knot, and the default value is 3.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`q`：这个属性定义了结的形状，默认值是3。'
- en: '`heightScale`: With this property, you can stretch out the torus knot. The
    default value is 1.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heightScale`：使用这个属性，你可以拉伸环面结。默认值是1。'
- en: 'The next geometry on the list is the last one of the basic geometries: `THREE.PolyhedronGeometry`.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的下一个几何形状是基本几何形状中的最后一个：`THREE.PolyhedronGeometry`。
- en: THREE.PolyhedronGeometry
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.PolyhedronGeometry
- en: With this geometry, you can easily create polyhedrons. A polyhedron is a geometry
    that has only flat faces and straight edges. Most often, though, you won’t use
    `THREE.PolyhedronGeometry` directly. Three.js provides a number of specific polyhedrons
    you can use without having to specify the vertices and faces of `THREE.PolyhedronGeometry`.
    We’ll discuss these polyhedrons later on in this section.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种几何形状，你可以轻松地创建多面体。多面体是一种只有平面面和直线边的几何形状。然而，通常你不会直接使用 `THREE.PolyhedronGeometry`。Three.js
    提供了一系列特定的多面体，你可以使用这些多面体而不必指定 `THREE.PolyhedronGeometry` 的顶点和面。我们将在本节后面讨论这些多面体。
- en: 'If you do want to use `THREE.PolyhedronGeometry` directly, you have to specify
    the vertices and the faces (just as we did for the cube in [*Chapter 3*](B18726_03.xhtml#_idTextAnchor040),
    *Working with Light Sources in Three.js*). For instance, we can create a simple
    tetrahedron (also see the section on `THREE.TetrahedronGeometry` in this chapter)
    like this:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确实想直接使用 `THREE.PolyhedronGeometry`，你必须指定顶点和面（就像我们在 [*第3章*](B18726_03.xhtml#_idTextAnchor040)，*在Three.js中使用光源*)
    中为立方体所做的那样）。例如，我们可以创建一个简单的四面体（也参见本章中关于 `THREE.TetrahedronGeometry` 的部分），如下所示：
- en: '[PRE8]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To construct `THREE.PolyhedronGeometry`, we pass in the `vertices`, `indices`,
    `radius`, and `detail` properties. The resulting `THREE.PolyhedronGeometry` object
    is shown in the `polyhedron-geometry.html` example:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 `THREE.PolyhedronGeometry`，我们需要传入 `vertices`、`indices`、`radius` 和 `detail`
    属性。生成的 `THREE.PolyhedronGeometry` 对象在 `polyhedron-geometry.html` 示例中展示：
- en: '![Figure 5.19 – Custom polyhedron](img/Figure_5.19_B18726.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图5.19 – 自定义多面体](img/Figure_5.19_B18726.jpg)'
- en: Figure 5.19 – Custom polyhedron
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.19 – 自定义多面体
- en: 'When you create a polyhedron, you can pass in the following four properties:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个多面体时，你可以传入以下四个属性：
- en: '`vertices`: These are the points that make up the polyhedron.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vertices`: 这些是多面体组成的点。'
- en: '`indices`: These are the faces that need to be created from the vertices.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`indices`: 这些是需要从顶点创建的面。'
- en: '`radius`: This is the size of the polyhedron. This defaults to 1.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radius`: 这是多面体的大小。默认值为 1。'
- en: '`detail`: With this property, you can add additional detail to the polyhedron.
    If you set this to `1`, each triangle in the polyhedron will be split into 4 smaller
    triangles. If you set this to `2`, those 4 smaller triangles will each be split
    into 4 smaller triangles once more, and so on.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`detail`: 使用这个属性，你可以为多面体添加额外的细节。如果你将其设置为 `1`，多面体中的每个三角形将被分割成 4 个更小的三角形。如果你将其设置为
    `2`，那 4 个更小的三角形将再次各自分割成 4 个更小的三角形，依此类推。'
- en: 'The following screenshot shows the same custom mesh, but now with a higher
    level of detail:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了相同的自定义网格，但现在具有更高的细节级别：
- en: '![Figure 5.20 – A custom polyhedron with a higher level of detai](img/Figure_5.20_B18726.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.20 – 具有更高细节级别的自定义多面体](img/Figure_5.20_B18726.jpg)'
- en: Figure 5.20 – A custom polyhedron with a higher level of detai
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.20 – 具有更高细节级别的自定义多面体
- en: At the beginning of this section, we mentioned that Three.js comes with a couple
    of polyhedrons out of the box. In the following subsections, we’ll quickly show
    you these. All of these polyhedron types can be viewed by looking at the `polyhedron-geometry.html`
    example.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的开始，我们提到 Three.js 默认提供了一些多面体。在接下来的小节中，我们将快速展示这些多面体。所有这些多面体类型都可以通过查看 `polyhedron-geometry.html`
    示例来查看。
- en: THREE.IcosahedronGeometry
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.IcosahedronGeometry
- en: '`THREE.IcosahedronGeometry` creates a polyhedron that has 20 identical triangular
    faces created from 12 vertices. When creating this polyhedron, all you need to
    specify are the radius and the detail level. This screenshot shows a polyhedron
    that was created using `THREE.IcosahedronGeometry`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`THREE.IcosahedronGeometry` 创建了一个由 12 个顶点构成的 20 个相同三角形面的多面体。在创建这个多面体时，你需要指定的只有半径和细节级别。此截图显示了使用
    `THREE.IcosahedronGeometry` 创建的多面体：'
- en: '![Figure 5.21 – 3D icosahedron geometry](img/Figure_5.21_B18726.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.21 – 3D 二十面体几何](img/Figure_5.21_B18726.jpg)'
- en: Figure 5.21 – 3D icosahedron geometry
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.21 – 3D 二十面体几何
- en: The next polyhedron we’re going to look at is `THREE.TetrahedronGeometry`.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的下一个多面体是 `THREE.TetrahedronGeometry`。
- en: THREE.TetrahedronGeometry
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.TetrahedronGeometry
- en: 'The tetrahedron is one of the simplest polyhedrons. This polyhedron only contains
    four triangular faces that are created from four vertices. You can create `THREE.TetrahedronGeometry`
    just like the other polyhedrons provided by Three.js, by specifying the radius
    and detail levels. Here’s a screenshot that shows a tetrahedron that was created
    using `THREE.TetrahedronGeometry`:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 四面体是多面体中最简单的一种。这个多面体只包含由四个顶点创建的四个三角形面。你可以像使用 Three.js 提供的其他多面体一样创建 `THREE.TetrahedronGeometry`，只需指定半径和细节级别。以下截图显示了使用
    `THREE.TetrahedronGeometry` 创建的四面体：
- en: '![Figure 5.22 – 3D tetrahedron geometry](img/Figure_5.22_B18726.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.22 – 3D 四面体几何](img/Figure_5.22_B18726.jpg)'
- en: Figure 5.22 – 3D tetrahedron geometry
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.22 – 3D 四面体几何
- en: 'Next, we will see a polyhedron with eight faces: an octahedron.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到具有八个面的多面体：八面体。
- en: THREE.OctahedronGeometry
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.OctahedronGeometry
- en: 'Three.js also provides an implementation of an octahedron. As the name implies,
    this polyhedron has eight faces. These faces are created from six vertices. The
    following screenshot shows this geometry:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Three.js 还提供了一个八面体的实现。正如其名所示，这个多面体有八个面。这些面是由六个顶点创建的。以下截图显示了此几何形状：
- en: '![Figure 5.23 – 3D octahedron geometry](img/Figure_5.23_B18726.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.23 – 3D 八面体几何](img/Figure_5.23_B18726.jpg)'
- en: Figure 5.23 – 3D octahedron geometry
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.23 – 3D 八面体几何
- en: The last of the polyhedrons we’re going to look at is a dodecahedron.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的最后一个多面体是十二面体。
- en: THREE.DodecahedronGeometry
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: THREE.DodecahedronGeometry
- en: 'The final polyhedron geometry provided by Three.js is `THREE.DodecahedronGeometry`.
    This polyhedron has 12 faces. The following screenshot shows this geometry:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: Three.js 提供的最后一个多面体几何是 `THREE.DodecahedronGeometry`。这个多面体有 12 个面。以下截图显示了此几何形状：
- en: '![Figure 5.24 – 3D dodecahedron geometry](img/Figure_5.24_B18726.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.24 – 3D 十二面体几何](img/Figure_5.24_B18726.jpg)'
- en: Figure 5.24 – 3D dodecahedron geometry
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.24 – 3D 十二面体几何
- en: As you can see, Three.js provides a large number of 3D geometries, from directly
    useful ones such as spheres and cubes to geometries that probably aren’t that
    useful in practice, such as the set of polyhedrons. In any case, these 3D geometries
    will give you a good starting point for creating and experimenting with materials,
    geometries, and 3D scenes.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Three.js提供了一系列的3D几何形状，从直接有用的形状，如球体和立方体，到在实践中可能不太有用的形状，如多面体集合。无论如何，这些3D几何形状将为你创建和实验材料、几何形状和3D场景提供一个良好的起点。
- en: Summary
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed all of the standard geometries that Three.js has
    to offer. As you saw, there are a whole lot of geometries you can use right out
    of the box. To best learn how to use the geometries, experiment with them. Use
    the examples in this chapter to get to know the properties you can use to customize
    the standard set of geometries available from Three.js.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Three.js所能提供的所有标准几何形状。正如你所见，有很多几何形状可以直接使用。为了最好地学习如何使用这些几何形状，请进行实验。使用本章中的示例来了解你可以用来自定义从Three.js获取的标准几何形状集的属性。
- en: For 2D shapes, it’s important to remember that they are placed on the *x*-*y*
    plane. If you want to have a 2D shape horizontally, you’ll have to rotate the
    mesh around the *x-*axis for `-0.5 * PI`. And finally, take care that if you’re
    rotating a 2D shape, or a 3D shape that is open (for example, a cylinder or a
    tube), remember to set the material to `THREE.DoubleSide`. If you don’t do this,
    the inside or the back of your geometry won’t be shown.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 对于二维形状，重要的是要记住它们放置在*x*-*y*平面上。如果你想水平放置二维形状，你需要将网格绕*x-*轴旋转`-0.5 * PI`。最后，注意如果你正在旋转二维形状，或者一个开放的3D形状（例如，圆柱或管），记得将材质设置为`THREE.DoubleSide`。如果不这样做，你的几何体的内部或背面将不会显示。
- en: In this chapter, we focused on simple, straightforward meshes. Three.js also
    provides ways to create complex geometries, which we will cover in [*Chapter 6*](B18726_06.xhtml#_idTextAnchor101).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于简单、直接的网格。Three.js还提供了创建复杂几何形状的方法，我们将在[*第6章*](B18726_06.xhtml#_idTextAnchor101)中介绍。
