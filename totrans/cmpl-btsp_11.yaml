- en: Chapter 11. Bootstrapping a One-Page Marketing Website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've developed some significant skills with Bootstrap. Now it's time to bring
    an extra touch of beauty and creativity to helping our clients achieve their full
    online marketing potential. So, let's create a beautiful, one-page, upscale marketing
    site.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A large introductory carousel with a customized responsive welcome message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A section for customer reviews with images and captions laid out in the masonry
    format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A features list with large Font Awesome icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A signup section with custom-designed pricing tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A ScrollSpy navbar with animated scrolling behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've been approached by a new prospective client. She is stricken by the beauty
    of one-pagers websites that scroll vertically, providing a visually stimulating
    presentation of a product or message with a clear call to action at the end. She
    wants one of these.
  prefs: []
  type: TYPE_NORMAL
- en: 'This client is knowledgeable and discerning. She frequents [http://onepagelove.com](http://onepagelove.com)
    and has a list of her current favorites to hand. Her desired features include:'
  prefs: []
  type: TYPE_NORMAL
- en: A clean, modern, aesthetic website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introductory welcome message with a visually intriguing background image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An efficient presentation of the main features of her product, accentuated with
    visually appealing icons.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customer testimony presented in a visually stimulating way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An easy-to-understand overview of three basic packages that a customer can choose
    from. These need to be presented clearly in a way that makes it easy to choose
    the right fit and then sign up!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conversions! Everything should draw the user down the page, making it nearly
    impossible to avoid clicking on the Signup button at the end.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To protect the secrecy of her upcoming product launch, our client has chosen
    not to reveal the exact nature of her product or service to us. Rather, she has
    provided mock-ups of the design she would like us to create by using a dummy copy
    for placeholders.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first section will open with an interesting full-width image, a large welcome
    message, and an invitation to scroll down the page to learn more, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview](img/00225.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The second section will list six key features of the product, which are laid
    out in a three-column grid, and illustrated by appropriate icons as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview](img/00226.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The third section will feature client testimonies with photos and quotations
    laid out in the masonry style:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview](img/00227.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The fourth and final section will feature three available plans, each with
    a pricing table, and will have a visual emphasis on the center of the three tables,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview](img/00228.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Savvy client that she is, she further demands that the design adapt beautifully
    to tablets and phones.
  prefs: []
  type: TYPE_NORMAL
- en: A great plan. No problem. Let's get to work.
  prefs: []
  type: TYPE_NORMAL
- en: Surveying the starter files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's survey the initial files for this exercise. Create a new project by using
    Bootstrap CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install Bootstrap CLI by running the following command in your console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can set up your project by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Again, choose the ****An empty new Bootstrap project. Powered by Panini, Sass
    and Gulp**** option when prompted.
  prefs: []
  type: TYPE_NORMAL
- en: '![Surveying the starter files](img/00229.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are a few additions you will have to make now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `assets/images` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the files in the `images` folder to the new `assets/images` folder. It
    contains five images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One logo image, named `logo.png`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Two background images for the intro section.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Seven images of happy people for the **Impact** section.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The images are automatically copied to the `_site` folder by the `copy` task
    in the `Gulpfile.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `html` folder, which contains your Panini HTML templates, should have the
    file and folder structure shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Surveying the starter files](img/00230.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can read more about Panini at [https://github.com/zurb/panini](https://github.com/zurb/panini).
  prefs: []
  type: TYPE_NORMAL
- en: Instead of the modifications described above, you can also start with the files
    found in the `Lesson 11/start` folder. In this folder, run the `npm install` and
    `bower install` commands first. After running the `npm` and `bower` commands,
    you can run the `bootstrap watch` or `gulp` command to view the results in your
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the page content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the bootstrap watch command and watch the page in your browser at `http://localhost:8080/`.
    You''ll see the following major components in place. Each component got its own
    HTML partial. Of course, at present, they will be displayed with default Bootstrap
    styles, awaiting the customization that needs to be done:'
  prefs: []
  type: TYPE_NORMAL
- en: A fixed top navbar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A jumbotron with a big welcome message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A features section with icons, headings, and text organized in three columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Impact** section with photos of six happy customers and placeholder content
    for their positive testimony
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Sign up now!** section with three tables laying out the **Basic Plan**,
    **Premium Plan**, and **Pro Plan** packages, with a **Sign up now!** button under
    each
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A footer logo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Photo credits (images are attribution-licensed)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To view the markup, open the corresponding Panini HTML partial in your editor.
    We will get very familiar with the markup in the steps that follow!
  prefs: []
  type: TYPE_NORMAL
- en: Adding Font Awesome to our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Font Awesome** gives you scalable vector icons that can instantly be customized:
    size, color, drop shadow, and anything that can be done with the power of CSS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we simply load Font Awesome''s CSS code from CDN by linking it in the
    `html/layouts/default.html` HTML template as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Adjusting the navbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This design calls for a fixed top navbar with a significant color shift for
    hovered and active links. I've already applied some of these styles by setting
    appropriate variables. Let me point those out, and then we'll move on to make
    some necessary adjustments to the markup.
  prefs: []
  type: TYPE_NORMAL
- en: The `scss/_variables.scss` file is based on Bootstrap's `variables.scss` file.
    I've customized the shades of gray in line with previous projects. You'll see
    these in the topmost section of the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve further adjusted the following navbar variables, adjusting its height,
    margin, colors, and hover colors specifically for this design:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The HTML code for the navbar can be found in the `html/includes/page-header.html`
    file and looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code, the navbar also gets the `navbar-fixed-top`
    class, which fixes the navbar to the top of our page. The `navbar-fixed-top` class
    also sets the `border-radius property` to 0\. The `navbar-fixed-top` class is
    one of Bootstrap's navbar classes determining the placement of the navbar; classes
    are available for static or fixed navbars.
  prefs: []
  type: TYPE_NORMAL
- en: Along with the custom variables, I've made a few adjustments to the `_navbar.scss`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve customized the list items in the expanded navbar, adding padding, removing
    the spacing between the links, and transforming the text to uppercase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Bootstrap''s predefined CSS classes also contain some classes for text transformations.
    More information about these text capitalization classes can be found at the following
    URL: [http://getbootstrap.com/components/utilities/#text-transform](http://getbootstrap.com/components/utilities/#text-transform).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The original logo image file had these settings: width `900` pixels and height
    `259` pixels. We can use these values to calculate the height in Sass when we
    resize its width to `120` pixels as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: I use the `$brand-image-height` variable to set the line-height of the navbar
    links to ensure that the brand image and links are in line.
  prefs: []
  type: TYPE_NORMAL
- en: Now the total height of the navbar becomes `$brand-image-height + 2 * ($spacer-y
    * 0.75)`. We'll use this value to set the `padding-top` of the HTML body element,
    because the fixed navbar will overlap the body.
  prefs: []
  type: TYPE_NORMAL
- en: The `$brand-image-height` variable got pixel units, whilst the `$spacer-y` got
    rem units. Sass can't add up these values with different dimensions. You can remove
    the rem units by dividing with 1rem. Now the unitless value times `$font-size-root`
    will give you the value in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: First, create a new `_page-contents.scss` in the main `scss/includes` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import it into `main.scss` just as shown in the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Then calculating the padding-top value for the HTML body element in scss/app.scss
    will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When combined, the adjusted variables and navbar customizations yield these
    visual results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting the navbar](img/00231.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's move on to the jumbotron with its big welcome message.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the jumbotron
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The jumbotron is a Bootstrap component highlighting the key message of your
    website. More information about the jumbotron and its HTML markup can be found
    at the following URL: [http://v4-alpha.getbootstrap.com/components/jumbotron](http://v4-alpha.getbootstrap.com/components/jumbotron)/.'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll customize the jumbotron to display our client's big welcome
    message with stylistic touches in line with her mockup. This will include adding
    a large background image, enlarging the welcome message text, and then adjusting
    its presentation for multiple viewports.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `index.html`, find the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s start by expanding the height of our jumbotron and putting our desired
    background image in place:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new custom `Sass partial` file, `scss/includes/_jumbotron.scss`, in your
    editor. Don't forget to import it in the `scss/app.scss` file too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s set the height, background color, and font color for the `#welcome`
    section. While we''re at it, we''ll add some top margin to the button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The background and font color of the jumbotron are set in the `scss/includes/_variable.scss`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `contrast()` Sass function can be found in the `scss/functions_contrast.scss`
    file. The `contrast()` function uses the built-in lightness function of Sass to
    return a light (white) or dark (black) color depending on the lightness of the
    input color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Using color contrasts in your design may improve the accessibility of your
    projects`. When your font colors depend on the background color and change automatically
    when you change the base colors of your design, the changes do not influence readability
    and accessibility. In this chapter, we''ll use a simple `contrast()` function.
    Sass libraries such as Compass have their own contrast function. Also read *Design
    Accessibly, See Differently: Color Contrast Tips And Tools by Cathy O'' Connor*
    at the following URL: [https://www.smashingmagazine.com/2014/10/color-contrast-tips-and-tools-for-accessibility/](https://www.smashingmagazine.com/2014/10/color-contrast-tips-and-tools-for-accessibility/).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, let's use a media query to place our background image for large screens
    and up (991px, according to the current default Bootstrap media query breakpoint
    values).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you like, take a few minutes to open and read the documentation about Bootstrap''s
    responsive breakpoints again. The information can be found at the following URL:
    [getbootstrap.com/layout/overview/#responsive-breakpoints](http://getbootstrap.com/layout/overview/#responsive-breakpoints).
    All media queries are available via Sass mixins.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can use the power of Sass to nest a media query within the context of the
    jumbotron selector. Within this media query, we''ll specify the `subway-906x600.jpg`
    image for the background. This image is scaled to be large enough for this breakpoint
    while still loading relatively quickly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remember that the preceding SCSS code compiles into CSS code as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file, run the `bootstrap watch` command, and inspect the results in
    your browser. You should see the new background image appear - but only within
    a window width of `991px` or less.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, let''s expand the height of the jumbotron for tablet-sized viewports.
    We''ll write a media query only the medium grid, which increases the `jumbotron`
    element''s height to `480px` within this breakpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file, run the `bootstrap watch` command, and watch the results in your
    browser. You should see the jumbotron grow to `480px` in height for viewports
    between 768 px and `991px` in width.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, for medium and larger (greater than 992px in width) viewports, we''ll
    increase the height of the jumbotron to 540px. At this width, we''ll use the larger
    version of the `subway-1600x1060.jpg` background image. While we''re at it, we''ll
    set the background size to `cover`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With these style rules in place, large viewports will have a 1600px-wide background
    image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file, and test it in your browser. You should find that we have our
    major breakpoints nicely covered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After these steps, the Jumbotron should look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing the jumbotron](img/00232.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that we''ve set a max-width for the small background image by using
    the `@include media-breakpoint-down(md)` mixin call. The preceding may break the
    mobile-first approach of Bootstrap. Media queries can be used to conditional-load
    background images based on screen size and so reduce load time and bandwidth on
    mobile phones and tablets. Read Media Query & Asset Downloading Results by Tim
    Kadlec for more information about testing a browser''s file requests and media
    queries. You can find the test result at the following URL: [https://timkadlec.com/2012/04/media-query-asset-downloading-results/](https://timkadlec.com/2012/04/media-query-asset-downloading-results/).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can style our big marketing message for maximum impact.
  prefs: []
  type: TYPE_NORMAL
- en: Refining the jumbotron message design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our client wants the welcome message in the jumbotron to be extra big. Bootstrap's
    display-3 styles in the jumbotron increase the font size by 350 % globally. We
    want to enhance the results further. We also want to constrain the width of the
    message on wide screens and put a dark translucent box behind it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our current results, we should reduce the font size for small and extra-small
    screens. We can, however, improve the contrast of our text by placing a translucent
    dark overlay behind the text. Let''s do that here by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `index.html`, add a new `div` tag inside the jumbotron `container` class
    and above the `h1` heading and paragraph. Give this new `div` tag a class of `welcome-message`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, to create some styles for this new div, in the  `scss/includes/_jumbotron.sccs`
    file we will perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give it a translucent dark background using HSLA
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stretch it to fill the full width and height of our jumbotron by positioning
    it as `absolute` and setting its top, bottom, left, and right values to `0`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Position the jumbotron itself as `relative` using the `container` selector inside
    the jumbotron so that it will anchor our absolute-positioned welcome message
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add internal padding to the welcome message
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the provided `strong` tag to transform the word **Big** to uppercase and
    increase its font size:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Save the file, run the bootstrap watch command, and inspect the results in your
    browser. You should see the background darken and the text stand out more clearly
    against it, as shown in the following screenshot:![Refining the jumbotron message
    design](img/00233.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, let''s address the medium and large viewports. We''ll constrain the
    width a bit more. This can all be done under `with Sass` media query mixins again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Again, save the file, and take a look in your browser. You should see the following
    result in a large viewport:![Refining the jumbotron message design](img/00234.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mission accomplished!
  prefs: []
  type: TYPE_NORMAL
- en: Our customized jumbotron is finished, providing the large welcome message our
    client has asked for, including the ability to adapt to tablet- and phone-sized
    viewports, which we've accomplished efficiently with a mobile-first approach.
  prefs: []
  type: TYPE_NORMAL
- en: Now we're ready to move on to the features list.
  prefs: []
  type: TYPE_NORMAL
- en: Beautifying the features list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to enlarge the icons, align the text at the center, and iron out the
    grid layout. Let''s review the markup structure for the features list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Each feature with its icon, heading, and paragraph is wrapped in a `div` tag
    with two classes: `features-item` and `col-md-4`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With this in mind, let''s write the styles we need:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `scss/includes/_features.scss`, a new Sass partial, and do not forget
    to import it in the scss/app.scss file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With `scss/includes/_features.scss` opened in your editor, add a new section
    with a comment for our `#features` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let''s focus on the `.features-item` section by aligning the text at the
    center, adding padding, providing a set height to keep the floating items from
    interfering with each other, and increasing the `.icon` font size to `90px`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file, and test the results in your browser. Run the `bootstrap watch`
    command first, if you haven't already done so. You should see the following result
    in a medium viewport:![Beautifying the features list](img/00235.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's a great start! Now let's adapt our features section for small screens.
    Currently, our `.features-item` section includes a class of `col-md-4`. We can
    shift our small-screen layout to two columns, as shown in the following screenshot,
    by adding a class of `col-sm-6`:![Beautifying the features list](img/00236.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And then, of course, they'll arrange themselves in a single column for extra-small
    screens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unfortunately, at the upper range of extra-small screens, 500px to 767px, the
    full-width layout allows the descriptive text to range too wide.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can fix this by adding a media query within which we set a maximum width
    on the `.features-item` section and center the content by setting the horizontal
    margins to auto:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Bootstrap also includes a  `m-x-auto` class for horizontally centering fixed-width
    block level content. The  `m-x-auto` class replaces the center-block class and
    mixin from Bootstrap 3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With these lines in place, our `.features-item` elements retain their desired
    dimensions across all viewports! On small viewports, our features will look like
    this:![Beautifying the features list](img/00237.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we have satisfied our client's demands for this section of her
    website! We're ready to move on to the customer reviews.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tackling customer reviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our next section, named **Impact**, presents reviews from happy customers. In
    this section, we see smiling faces of happy customers with excerpts from their
    commentary about our client's product.
  prefs: []
  type: TYPE_NORMAL
- en: We'll use the **Card** module for this section again. The Card module is a flexible
    and extensible content container which replaces the panels, thumbnails, and wells
    used in earlier versions of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: The Card module to create the masonry grid layout. A masonry grid layout works
    by placing elements in optimal position based on available vertical space, sort
    of like a mason fitting stones in a wall. You'll create a Masonry grid layout
    for the Impact section again. The Bootstrap masonry solution uses CSS only. If
    you need a JavaScript solution which works in older browsers too, you can use
    a JavaScript masonry plugin available at [http://masonry.desandro.com](http://masonry.desandro.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Card columns use the CSS multi-column layout; you can read more about it
    at the following URL: [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Columns/Using_multi-column_layouts](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Columns/Using_multi-column_layouts).'
  prefs: []
  type: TYPE_NORMAL
- en: The masonry grid layout is not available in IE9 and below as they have no support
    for the column-* CSS properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'So the initial markup starts as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Each review is marked up as follows using the `hreview` microformat:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Microformats are an extension of HTML to mark up things such as people, organizations,
    products, and reviews. Sites using microformats publish a standard API, which
    can be consumed by search engines, browsers, and other tools. **h-review** is
    a simple, open format for publishing reviews on the Web. More information can
    be found at the following URL: [http://microformats.org/](http://microformats.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Each card image gets the `img-fluid` class to make the image responsive and
    fit the cards.
  prefs: []
  type: TYPE_NORMAL
- en: The class turns an image into a card background and overlays the card's text
    by setting the position property of the image to absolute and the card's position
    property to relative.
  prefs: []
  type: TYPE_NORMAL
- en: Each card (having the card class) will be automatically arranged in the grid
    due to the card-columns class of the selector.
  prefs: []
  type: TYPE_NORMAL
- en: 'The card-columns class creates CSS columns for the small grid and up by default.
    On the extra-small grid, the grid item will stack. Use the following SCSS code
    in the scss/includes/_impact.scss file for two columns on the small grid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You may read about the `hreview` microformat at [http://microformats.org/wiki/hreview-examples](http://microformats.org/wiki/hreview-examples).
  prefs: []
  type: TYPE_NORMAL
- en: 'Save your modifications and run the `bootstrap watch` command. You''ll find
    that the Impact section should now look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tackling customer reviews](img/00238.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Both in terms of semantics and presentational starting points, we're off to
    a good start.
  prefs: []
  type: TYPE_NORMAL
- en: Because we wanted to arrive at a masonry layout, our images are a mixture of
    portrait and landscape aspect ratios. We've made them all of equal width in order
    to provide enough room for bright faces and textual overlays with short laudatory
    statements.
  prefs: []
  type: TYPE_NORMAL
- en: Before addressing the layout for larger viewports, let's start by tackling captions.
  prefs: []
  type: TYPE_NORMAL
- en: Positioning and styling captions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s begin by positioning our captions as overlays on top of their respective
    customer photos:'
  prefs: []
  type: TYPE_NORMAL
- en: 'While editing the `scss/includes/_impact.scss` file, add a new comment and
    selector for the `#impact` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can work on the captions. We''ll add a translucent background and position
    them as `absolute` at the bottom of each image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can focus on the review text and specify the margin, border, font family,
    font size, and color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, specify styles for the reviewer''s name, which appears below the review
    text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file, run the `bootstrap watch` command, and check your progress.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should end up with an **Impact** section like that shown in the following
    screenshot:![Positioning and styling captions](img/00239.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Not bad! However, we can do it one step better.
  prefs: []
  type: TYPE_NORMAL
- en: Refining the caption position
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Looking carefully at the available open space in the preceding screenshots and
    examining the overlap variations at various viewport widths in your responsive
    grid, you may want to position each caption in a way that works best for each
    customer's photo.
  prefs: []
  type: TYPE_NORMAL
- en: This is where the `review-item-1`, `review-item-2`, and so on classes become
    relevant and helpful, as we may use these specific classes to position each caption
    in a way that fits best with its image.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate the positions of the caption, I''ve added the following lines
    in the `scss/includes/_impact.scss` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding markup adjusts the absolute positioning of each second and third
    caption, which yields the results shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Refining the caption position](img/00240.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Instead of using the `:nth-child()` selectors in the above, you can also write
    your own SCSS to position each specific caption.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting for tiny screens
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On the extra-small grid, the reviews are stacked, and on the small grid we'll
    arrange them in two columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll reduce the font size of the captions for the small grid. To reduce
    the font size, insert the following SCSS code into the `scss/includes/_impact.scss`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'On the small and extra-small grid, we''ll only show the first four reviews.
    Hide the last reviews by default by using the following SCSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and then test the results in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Voilà! The customer reviews are now performing entirely in line with our client's
    desires.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now to take care of the last major item in our client''s desired home page
    design: the pricing tables.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating attention-grabbing pricing tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s revisit the mockup of how our client would like the pricing tables to
    look on desktop-sized screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating attention-grabbing pricing tables](img/00241.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's see how close we can get to the desired result, and what we can work out
    for other viewport sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the variables, files, and markup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As shown in the preceding screenshot, there are a few tables in this design.
    We can begin by adjusting a few fundamental variables for all tables. These are
    found in Bootstrap''s `_variables.scss file`. Search for the tables section and
    adjust the variables for background, accented rows, and borders as desired. I''ve
    made these adjustments as shown in the following lines of code, and saved them
    in the local `scss/includes/_variables.scss` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file, and run the `bootstrap watch` command to see the result as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the variables, files, and markup](img/00242.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That's a start. Now we need to write more specific styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'To carry the custom styles, let''s create a new Sass file for these pricing
    tables:'
  prefs: []
  type: TYPE_NORMAL
- en: Create `_pricing-tables.scss` in the main `scss/includes` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import it into `main.scss` just after `the import of the _impact.scss file`
    as shown in the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open `_pricing-tables.less` in your editor and begin writing your new styles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: But before we begin writing styles, let's review the markup that we'll be working
    with.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the following special classes already provided in the markup on the
    parent element of each respective table:'
  prefs: []
  type: TYPE_NORMAL
- en: '`package package-basic`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package package-premium`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package package-pro`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Thus, for the first table, you''ll see the following markup on its parent `div`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that the `table` and `table-striped` classes in the above HTML code
    are part of Bootstrap''s styles to display content. You can use these styles by
    just adding the table base class to any `<table>` element, Extend the base class
    with custom styles or by including a modifier class such as the `table-striped`
    class. Read more about tables in Bootstrap at the following URL: [http://getbootstrap.com/content/tables/http://v4-alpha.getbootstrap.com/content/tables/](http://getbootstrap.com/content/tables/http://v4-alpha.getbootstrap.com/content/tables/).'
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we'll use `package package-premium` and `package package-pro` for
    the second and third tables, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: These parent containers obviously also provide basic layout instructions using
    the `col-md-4` class to set up a three-column layout in medium viewports and up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will observe the markup for each table. We see that the basic `table`
    and `table-striped` classes have been applied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The table uses the `<thead>` element for its topmost block. Within this, there
    is `<th>` spanning two columns, with an `<h2>` heading for the package name and
    `<div class="price">` to mark up the dollar amount:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Next is the `tfoot` tag with the **Sign up now!** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Then there is the `tbody` tag with the list of features laid out in a straightforward
    manner in rows with two columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, of course, the closing tags for the `table` and parent `div` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Each table repeats this basic structure. This gives us what we need to start
    work!
  prefs: []
  type: TYPE_NORMAL
- en: Beautifying the table head
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To beautify the `thead` element of all of our tables, we''ll do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Align the text at the center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a background color; for now, add a gray color that is approximately a midtone
    similar to the colors we'll apply to the final version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn the font color white
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert the `h2` heading to uppercase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase the size of the price table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the necessary padding all around the tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can apply many of these touches with the following lines of SCSS code. We''ll
    specify the `#signup` section as the context for these special table styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'In short, we''ve accomplished everything except increasing the size of the
    price tables. We can get started on this by adding the following lines of code,
    which are still nested within our `#signup table` selector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This yields the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Beautifying the table head](img/00243.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is close to our desired result, but we need to decrease the size of the
    dollar sign. We can nest the first letter within our styles for `.price`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '`::first-letter` is a pseudo element, which allows you to style the first letter
    in an element without needing to stick a `<span>` tag around that first letter
    in your HTML. You can read more about this pseudo element at the following URL:
    [https://css-tricks.com/almanac/selectors/f/first-letter/](https://css-tricks.com/almanac/selectors/f/first-letter/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'These lines reduce the dollar sign to half its size and align it at the top.
    The following screenshot shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Beautifying the table head](img/00244.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Styling the table body and foot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Continuing to focus on the styles that apply to all three pricing tables, let''s
    make the following adjustments:'
  prefs: []
  type: TYPE_NORMAL
- en: Add left and right padding to the list of features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stretch the button to full width
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase the button size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can accomplish this by adding the following rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding SCSS code, the `@extend` feature of Sass has been used to extend
    the button with Bootstrap's styles for large buttons. Bootstrap itself avoids
    the `@extend` feature, but you can use it.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Alternatively, you can use Bootsstrap''s `button-size()` mixin to set the large
    button styles. Notice that I have set font-size: 1.25em; afterward. The button
    mixin sets the font size in rem units and we want the font size to scale with
    its parent.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the file, run the `bootstrap watch` command, and you should see the following
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the table body and foot](img/00245.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We're now ready to add styles to differentiate our three packages.
  prefs: []
  type: TYPE_NORMAL
- en: Differentiating the packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s begin by giving each package the desired color for the table head and
    the **Sign up now!** button. Our provided mockup uses blue for the **Basic**,
    green for the **Premium**, and red for the **Pro** packages. Let''s prepare our
    color scheme by using the chosen color values in new variables for primary, secondary,
    and tertiary brand colors, as shown in the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Having set up these colors, we can efficiently apply them to the appropriate
    `thead` and `button` elements. We''ll use the distinctive class that we applied
    earlier to each table''s parent element, that is, `package-basic`, `package-premium`,
    and `package-pro`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `scss/includes/_pricing-tables.scss` file, begin a new section with
    a comment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We''ll apply the primary brand color to the `.package-basic` table using the
    $`brand-primary` variable; we''ll try it first on the `thead th` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, apply the primary brand color to the `thead th` element''s button. Here,
    we''ll use the `.button-variant()` mixin from the `bootstrap/mixins.less` file
    to efficiently apply styles to the `:hover` and `:active` states. The mixin takes
    three parameters: color, background color, and border color. We''ll define them
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When compiled, this concise mixin will generate styles for the button and its
    hover and active states!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: For a reminder of how the `button-variant()` mixin works, consult the `bootstrap/scss/mixins/_buttons.scss
    file`, where the mixin is defined, and then `bootstrap/scss/_buttons.scss`, where
    it is used to define the default Bootstrap button classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we need to repeat this for our `.package-premium` table; this time, however,
    use the $`brand-secondary` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we''ll apply the tertiary brand color to the `.package-pro` table
    using the $`brand-tertiary` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You might have noticed that the preceding steps and code are very repetitive.
    Sass can help you to code your CSS code DRY (**D**o not **R**epeat **Y**ourself).
    By wrapping the names in a Sass map and using an `@each` loop, you'll have to
    write the code only once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can also read my *Sass and Compass Designer''s Cookbook* to learn how to
    write efficient, maintainable, and reusable CSS code with Sass for your web development
    projects. You can find it at the following URL: [https://www.packtpub.com/web-development/sass-and-compass-designers-cookbook](https://www.packtpub.com/web-development/sass-and-compass-designers-cookbook).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the file, and run the `bootstrap watch` command if you have not already
    run it. You should see the new colors we applied to our tables:![Differentiating
    the packages](img/00246.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nice!
  prefs: []
  type: TYPE_NORMAL
- en: Now let's check how our tables respond to various viewport widths.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting for small viewports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thanks to the attention Bootstrap gives to responsive design, our tables perform
    quite well across viewport breakpoints. We've already seen how our tables fare
    in the medium breakpoint range. In large screens, the tables expand wider. In
    narrow viewports, the tables stack up vertically, quite nicely.
  prefs: []
  type: TYPE_NORMAL
- en: However, there is an awkward range of width approximately between 480px and
    768px, where the tables expand to fill the full width of the screen. Clearly,
    they become too wide.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we have three tables, there is no benefit involved in having a two-column
    layout at this dimension. Instead, let''s constrain the width of our tables and
    align them at the center with `auto` left and right margins. We''ll use the media-breakpoint-down()
    media query mixin to set `400px` as our maximum width, and set the horizontal
    margins to auto to keep our tables at the center of the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: You cannot center the tables by using the `@`extend feature of Sass to extend
    the `.m-x-auto` class, because you may not @extend an outer selector from within
    `@media`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the medium grid, the tables are too wide for the grid columns, so we reduce
    the total font size for only the medium grid by using the following SCSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file, and test the results in your browser. You should see nicely
    constrained tables aligned at the center within the window! The following screenshot
    shows our result:'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, our tables are differentiated by color and are responsive. However,
    one last step remains. In the medium and large viewport widths, we want the premium
    plan to stand out.
  prefs: []
  type: TYPE_NORMAL
- en: Providing a visual hierarchy to our tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we look back at the mockup, we see that the design - at least for desktop-sized
    viewports - calls for visual emphasis on the central Premium plan by increasing
    its size and bringing it visually into the foreground.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be accomplished with some adjustments to padding, margins, and font
    sizes. We''ll do this within a media query for medium viewports and up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Our first aim is to bring the tables closer to one another. This can be done
    by removing the padding (the gutter of the grid) between the grid columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can enlarge the font size for the price information in the premium
    block as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Nested within this media query, we can first reduce the widths of our basic
    and pro tables (the first and third) and add a little margin to the top to push
    them down a bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s enhance the font size of our premium table and add padding to
    its button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file, and inspect the results in the browser. You should see the following
    result in large viewports of 1,200px and above:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Providing a visual hierarchy to our tables](img/00247.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That's it! We've accomplished the last major challenge in our client's design.
    Now let's tidy things up by applying those little touches that hold it all together.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the final touches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will enhance the details that hold our design together.
    First, we'll enhance the `h1` headings for each of our major sections and add
    some needed top and bottom padding to each section. Then, we'll enhance the navigation
    experience by adding ScrollSpy to the navbar and using jQuery to animate the scrolling
    action when triggered by a click on the navbar item.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin by enhancing the size and contrast of our major `h1` headings for
    each section and increasing the top and bottom padding. If you pause to look at
    these `h1` headings, you may note that they are rather lackluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enlarging these headings, bringing the contrast down a little, and providing
    extra padding will make a big difference. We only want these rules to apply to
    the **Features**, **Impact**, and **Sign up** sections. We will select these by
    ID:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `scss/includes/_page-contents.scss` file again in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top of the file, after the rule applying top padding to the body, add
    the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, we''ve done the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Added top and bottom padding to these sections
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Significantly increased the size of the `h1` heading
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduced the heavy contrast of that heading
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensured that the heading has room to breathe by setting the line height and
    bottom padding
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Save your work and notice the difference in your browser:![Adding the final
    touches](img/00248.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This yields a nice result across almost all viewport sizes. For small viewports,
    the `h1` font size is now a bit large. So, let''s adjust this. As we do not want
    these styles to flow up to larger viewports, we''ll wrap the styles we have already
    written in a query by limiting them to larger viewports. Finally, the refactored
    and mobile-first SCSS code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows our result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the final touches](img/00249.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is a much improved result! Now we'll enhance the navigation experience.
  prefs: []
  type: TYPE_NORMAL
- en: Adding ScrollSpy to the navbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's configure our top navbar to indicate our location on the page. We'll add
    Bootstrap's ScrollSpy behavior to the navbar.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to Bootstrap's ScrollSpy plugin documentation at [http://getbootstrap.com/javascript/#scrollspy](http://getbootstrap.com/javascript/#scrollspy).
  prefs: []
  type: TYPE_NORMAL
- en: By default, the ScrollSpy plugin requires a Bootstrap nav component. Bootstrap's
    navbar contains a nav component already. The relative position is required too.
    You should set position:relative; in your CSS for the element you're spying on.
    In our situation, we'll have to set the relative position for the body element.
  prefs: []
  type: TYPE_NORMAL
- en: You can easily initiate the ScrollSpy plugin by adding data-attributes in the
    HTML code. First add data-spy="scroll" to the element you want to spy and then
    add the data-target attribute with the ID or class of the parent element of any
    Bootstrap .nav component.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Data-attributes in HTML5 allow use to store extra information into standard
    semantic HTML elements. Read more about data-attributes in HTML5 at the following
    URL: [https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes](https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Using_data_attributes).'
  prefs: []
  type: TYPE_NORMAL
- en: 'ScrollSpy requires a resolvable ID target in our HTML code. We''ve already
    added the target in the preceding steps. For instance, the Intro section had `id="welcome"`
    in the section element as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The above HTML code can be found in the `html/includes/intro.html` file. The
    `id="welcome"` declaration corresponds with the resolvable id targets in the navbar
    links, as can be seen in the `html/includes/page-header.html file`. The HTML code
    of the `Welcome` should look as follows now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Now perform the following steps to initiate the ScrollSpy plugin in our project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `scss/app.scss` file to set the relative position of the body element.
    Add the following SCSS code at the end of this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then open `index.html` in your editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add these ScrollSpy data-attributes to the `body` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the file and set the resolvable ID targets in the navbar links. At the
    end, your HTML code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the resolvable id targets and the new data-attributes in place, save the
    file, refresh your browser, and scroll up and down the page. You should see your
    main navigation respond as it should, indicating your position on the page as
    shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Adding ScrollSpy to the navbar](img/00250.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'In the preceding step, we used data-attributes to initiate Bootstrap ScrollSpy
    behavior. You can also initiate the plugin via JavaScript by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First add the `position: relative`; declaration for the body element in your
    CSS/SCSS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then call the ScrollSpy via JavaScript/jQuery as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Animating the scroll
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's animate the page scrolls that will be triggered by clicking on the
    navbar page anchors. We'll use jQuery to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'jQuery is a JavaScript library and provides you with an API for HTML document
    traversal and manipulation, event handling, and animations. The `jQuery animate()`
    API call lets you create custom animations of CSS properties. You can read more
    about jQuery''s animations at the following URL: [http://api.jquery.com/animate/](http://api.jquery.com/animate/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Animating the page scroll requires adding a few lines to our `main.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `js/main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines within `$(document).ready(function() {`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and refresh your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Take a moment to scroll back and forth through our page, appreciating its details
    and resizing it to see how it adjusts to viewport dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: When we consider the variety of features packed into this page - and that they
    all work responsively across desktop-, tablet-, and phone-sized viewports - it's
    not a bad accomplishment!
  prefs: []
  type: TYPE_NORMAL
- en: To recap, we have given our client a beautiful, one-page marketing site with
    a large welcome section using Bootstrap's jumbotron styles, a bold background
    image, and responsive customizations, a features list making use of large-sized
    Font Awesome icons, a section of customer reviews with images and captions laid
    out in the masonry format, which adapts beautifully across viewports. We ended
    up with a signup section with custom-designed pricing tables built on Bootstrap
    styles and enhanced further to provide a visual hierarchy for medium and large
    viewports. As a finishing touch, we added a ScrollSpy-equipped navbar with animated
    scrolling behavior provided by a bit of extra jQuery. With this design, we have
    reached a point where there is nothing we can't do with Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Across this and previous projects, we have accomplished a great deal. We have
    learned the ins and outs of Bootstrap, and folded Bootstrap Sass and JavaScript
    into our own custom set of project files. We then used the robust Font Awesome
    icons. We also tweaked, customized, and otherwise innovated on Bootstrap styles
    to arrive the exact results we were seeking.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we've come to the end of this learning journey. I hope you'd a smooth
    journey and gained a lot of knowledge on Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: I wish you all the best for your future projects. Keep learning and exploring!
  prefs: []
  type: TYPE_NORMAL
- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following command is used to install Bootstrap CLI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`npm install -i bootstrap-cli`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`npm install -g bootstrap-cli`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`npm install -d bootstrap-cli`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`npm install -w bootstrap-cli`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following code is used to copy assets from source folder to destination
    folder?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`gulp.task(''copy'', function() { gulp.src([''assets/*/**'']).pipe(gulp.dest(''_site''));
    });`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`gulp.task(''copy'', function() { gulp.src(''assets/**/*'').pipe(gulp.dest(''_site''));
    });`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`gulp.task(''copy'', function() { gulp.src(''assets/*/**'').pipe(gulp.dest(''_site''));
    });`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`gulp.task(''copy'', function() { gulp.src([''assets/**/*'']).pipe(gulp.dest(''_site''));
    });`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following command is used to load Font Awesome's CSS code from
    CDN?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/css/font-awesome.min.css">`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<a href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/css/font-awesome.min.css">`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/css/font-awesome.min.css">`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<a rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/css/font-awesome.min.css">`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the Bootstrap's navbar classes determines the placement of the navbar?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`navbar-fixed-bottom`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`navbar-fixed-left`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`navbar-fixed-top`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`navbar-fixed-right`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following uses the built-in lightness function of Sass to return
    a light (white) or dark (black) color depending on the lightness of the input
    color?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`contrast()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`lighten()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`darken()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`saturate()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
