["```js\nmongod --dbpath ./data --rest\n```", "```js\nGET /replSetGetStatus?text=1 HTTP/1.1\nHost: localhost:28017\nConnection: Keep-Alive\nUser-Agent: RestClient-Tool\n\nHTTP/1.0 200 OK\nContent-Length: 56\nConnection: close\nContent-Type: text/plain;charset=utf-8\n\n{\n\"ok\": 0,\n\"errmsg\": \"not running with --replSet\"\n}\n```", "```js\nnpm install mongoose\n```", "```js\nvar mongoose = require('mongoose'); \nvar Schema = mongoose.Schema;\nvar itemSchema = new Schema ({\n    \"itemId\" : {type: String, index: {unique: true}},\n    \"itemName\": String,\n    \"price\": Number,\n    \"currency\" : String,\n    \"categories\": [String]\n}); \n```", "```js\nvar CatalogItem = mongoose.model('Item', itemSchema);\n```", "```js\nvar mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/catalog');\nvar db = mongoose.connection;\n\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', function() {\n  var watch = new CatalogItem({\n    itemId: 9 ,\n    itemName: \"Sports Watch1\",\n    brand: 'А1',\n    price: 100,\n    currency: \"EUR\",\n    categories: [\"Watches\", \"Sports Watches\"]\n  });\n\n  watch.save((error, item, affectedNo)=> {\n    if (!error) {\n      console.log('Item added successfully to the catalog');\n    } else {\n      console.log('Cannot add item to the catlog');\n    }\n  });\n});\n\ndb.once('open', function() {\n  var filter = {\n    'itemName' : 'Sports Watch1',\n    'price': 100\n  }\n\n  CatalogItem.find(filter, (error, result) => {\n    if (error) {\n      consoloe.log('Error occured');\n    } else {\n      console.log('Results found:'+ result.length);\n      console.log(result);\n    }\n  });\n});\n\n```", "```js\ndb.once('open', function() {\n  var filter = {\n    'itemName' : 'Sports Watch1',\n    'price': 100\n  }\n  CatalogItem.findOne(filter, (error, result) => {\n    if (error) {\n      consoloe.log('Error occurred');\n    } else {\n      console.log(result);\n    }\n  });\n});\n```", "```js\nCatalogItem.findOne({itemId: 1 }, (error, data) => { \n  if (error) {  \n    console.log(error); \n    return; \n  } else { \n    if (!data) { \n    console.log('not found'); \n      return; \n    } else { \n      data.remove(function(error){ \n        if (!error) { data.remove();} \n        else { console.log(error);} \n        }); \n      } \n    } \n });\n```", "```js\nnpm install -g mocha\n```", "```js\nnpm install -g should\n```", "```js\n{ \n\"name\": \"chapter4\", \n\"version\": \"0.0.0\", \n\"private\": true, \n\"scripts\": { \n\"start\": \"node ./bin/www\", \n\"test\": \"mocha test/model-test.js\" \n }, \n\"dependencies\": { \n\"body-parser\": \"~1.13.2\", \n\"cookie-parser\": \"~1.3.5\", \n\"debug\": \"~2.2.0\", \n\"express\": \"~4.16.0\", \n\"jade\": \"~1.11.0\", \n\"morgan\": \"~1.6.1\", \n\"serve-favicon\": \"~2.3.0\" \n } \n} \n```", "```js\nvar mongoose = require('mongoose');\nbeforeEach(function (done) {\n  function clearDatabase() {\n    for (var i in mongoose.connection.collections) {\n      mongoose.connection.collections[i].remove(function() \n      {});\n    }\n    return done();\n  }\n  if (mongoose.connection.readyState === 0) {\n    mongoose.connect(config.db.test, function (err) {\n      if (err) {\n        throw err;\n      }\n      return clearDatabase();\n    });\n  } else {\n    return clearDatabase();\n  }\n});\nafterEach(function (done) {\n  mongoose.disconnect();\n  return done();\n});\n```", "```js\nvar mongoose = require('mongoose');\nvar should = require('should');\nvar prepare = require('./prepare');\n\nconst model = require('../model/item.js');\nconst CatalogItem = model.CatalogItem;\n\nmongoose.createConnection('mongodb://localhost/catalog');\n\ndescribe('CatalogItem: models', function () {\n  describe('#create()', function () {\n    it('Should create a new CatalogItem', function (done) {\n\n      var item = {\n        \"itemId\": \"1\",\n        \"itemName\": \"Sports Watch\",\n        \"price\": 100,\n        \"currency\": \"EUR\",\n        \"categories\": [\n          \"Watches\",\n          \"Sports Watches\"\n        ]\n\n      };\n\n      CatalogItem.create(item, function (err, createdItem) {\n        // Check that no error occured\n        should.not.exist(err);\n        // Assert that the returned item has is what we expect\n\n        createdItem.itemId.should.equal('1');\n        createdItem.itemName.should.equal('Sports Watch');\n        createdItem.price.should.equal(100);\n        createdItem.currency.should.equal('EUR');\n        createdItem.categories[0].should.equal('Watches');\n        createdItem.categories[1].should.equal('Sports Watches');\n        //Notify mocha that the test has completed\n        done();\n      });\n    });\n  });\n});\n```", "```js\nexports.remove = function (request, response) {\n  console.log('Deleting item with id: '    + request.body.itemId);\n  CatalogItem.findOne({itemId: request.params.itemId}, function(error, data) {\n      if (error) {\n          console.log(error);\n          if (response != null) {\n              response.writeHead(500, contentTypePlainText);\n              response.end('Internal server error');\n          }\n          return;\n      } else {\n          if (!data) {\n              console.log('Item not found');\n              if (response != null) {\n                  response.writeHead(404, contentTypePlainText);\n                  response.end('Not Found');\n              }\n              return;\n          } else {\n              data.remove(function(error){\n                  if (!error) {\n                      data.remove();\n                      response.json({'Status': 'Successfully deleted'});\n                  }\n                  else {\n                      console.log(error);\n                      response.writeHead(500, contentTypePlainText);\n                      response.end('Internal Server Error');\n                  }\n              });\n          }\n      }\n  });\n}\n```", "```js\nexports.saveItem = function(request, response)\n{\n  var item = toItem(request.body);\n  item.save((error) => {\n    if (!error) {\n      item.save();\n      response.writeHead(201, contentTypeJson);\n      response.end(JSON.stringify(request.body));\n    } else {\n      console.log(error);\n      CatalogItem.findOne({itemId : item.itemId    },\n      (error, result) => {\n        console.log('Check if such an item exists');\n            if (error) {\n                console.log(error);\n                response.writeHead(500, contentTypePlainText);\n                response.end('Internal Server Error');\n            } else {\n                if (!result) {\n                    console.log('Item does not exist. Creating a new one');\n                    item.save();\n                    response.writeHead(201, contentTypeJson);\n                    response.\n                    response.end(JSON.stringify(request.body));\n                } else {\n                    console.log('Updating existing item');\n                    result.itemId = item.itemId;\n                    result.itemName = item.itemName;\n                    result.price = item.price;\n                    result.currency = item.currency;\n                    result.categories = item.categories;\n                    result.save();\n                    response.json(JSON.stringify(result));\n                }\n           }\n      });\n    }\n  });\n};\n```", "```js\nfunction toItem(body) {\n    return new CatalogItem({\n        itemId: body.itemId,\n        itemName: body.itemName,\n        price: body.price,\n        currency: body.currency,\n        categories: body.categories\n    });\n}\n```", "```js\nexports.findItemsByCategory = function (category, response) {\n    CatalogItem.find({categories: category}, function(error, result) {\n        if (error) {\n            console.error(error);\n            response.writeHead(500, { 'Content-Type': 'text/plain' });\n            return;\n        } else {\n            if (!result) {\n                if (response != null) {\n                    response.writeHead(404, contentTypePlainText);\n                    response.end('Not Found');\n                }\n                return;\n            }\n\n            if (response != null){\n                response.setHeader('Content-Type', 'application/json');\n                response.send(result);\n            }\n            console.log(result);\n        }\n    });\n}\n```", "```js\nexports.findItemById = function (itemId, response) {\n    CatalogItem.findOne({itemId: itemId}, function(error, result) {\n        if (error) {\n            console.error(error);\n            response.writeHead(500, contentTypePlainText);\n            return;\n        } else {\n            if (!result) {\n                if (response != null) {\n                    response.writeHead(404, contentTypePlainText);\n                    response.end('Not Found');\n                }\n                return;\n            }\n\n            if (response != null){\n                response.setHeader('Content-Type', 'application/json');\n                response.send(result);\n            }\n            console.log(result);\n        }\n    });\n}\n```", "```js\nexports.findAllItems = function (response) {\n    CatalogItem.find({}, (error, result) => {\n        if (error) {\n            console.error(error);\n            return null;\n        }\n        if (result != null) {\n            response.json(result);\n        } else {\n```", "```js\n      response.json({});\n    }\n    });\n};\n```", "```js\nconst express = require('express');\nconst router = express.Router();\n\nconst catalog = require('../modules/catalog');\nconst model = require('../model/item.js');\n\nrouter.get('/', function(request, response, next) {\n  catalog.findAllItems(response);\n});\n\nrouter.get('/item/:itemId', function(request, response, next) {\n  console.log(request.url + ' : querying for ' + request.params.itemId);\n  catalog.findItemById(request.params.itemId, response);\n});\nrouter.get('/:categoryId', function(request, response, next) {\n  console.log(request.url + ' : querying for ' + request.params.categoryId);\n  catalog.findItemsByCategory(request.params.categoryId, response);\n});\n\nrouter.post('/', function(request, response, next) {\n  console.log('Saving item using POST method);\n  catalog.saveItem(request, response);\n});\n\nrouter.put('/', function(request, response, next) {\n  console.log('Saving item using PUT method');\n  catalog.saveItem(request, response);\n});\n\nrouter.delete('/item/:itemId', function(request, response, next) {\n  console.log('Deleting item with id: request.params.itemId);\n  catalog.remove(request, response);\n});\n\nmodule.exports = router;\n```"]