["```js\nvar ss = SpreadsheetApp.getActiveSpreadsheet();\n\n// A dedicated sheet to store values temporarily.\nvar sheet = ss.getSheetByName(\"Settings\");\n\nfunction doLengthyProcess() {\n  // Prefix '+' to get date as epochy number.\n  var elapsedTime, startTime = +new Date();\n\n  // Loop variable.\n  // Load value of 'i' from spreadsheet cell, or default 0.\n  var i = sheet.getRange(\"A1\").getValue() || 0;\n\n  for(; i<1000; i++){\n    // Your time consuming process goes here.\n    …\n    …\n    …\n    …\n\n    // Recalculate elapsedTime.\n    elapsedTime = +new Date() - startTime;\n\n    if(elapsedTime> 300000){ // 300000 ms or 5 minutes.\n      sheet.getRange(\"A1\").setValue(i);\n      return;\n    }\n  };\n\n  // Loop completed successfully, so delete trigger.\n  deleteTriggers_();\n}\n\n// Helper function\nfunction deleteTriggers_(){\n  var triggers = ScriptApp.getProjectTriggers();\n  triggers.forEach(function(trigger){\n    ScriptApp.deleteTrigger(trigger);\n    /*\n     * Wait a moment before calling deleteTrigger again.\n     * Otherwise you may get warning message something like\n     * \"Service invoked too many times...\"\n     *\n     */\n    Utilities.sleep(1000); // In millisecond.\n  });\n\n};\n```", "```js\nfunction createTrigger_(funcName,minutes){\n// Delete already created triggers if any.\ndeleteTriggers_();\n  ScriptApp.newTrigger(funcName).timeBased()\n    .everyMinutes(minutes).create();\n}\n```", "```js\nfunction startProcess(){\n  createTrigger_(\"doLengthyProcess\",10);\n  doLengthyProcess();\n}\n```", "```js\nfunction test(){\n\n  var pricelist = Chapter8.getPrice();\n\n  Logger.log(pricelist);\n}\n```", "```js\n/**\n *  Returns price list data from the Stock tab/sheet\n *\n *  @param {number} index \n *  @return {array}\n *\n */\nfunction getPrice(index){\n          …\n}\n```", "```js\nfunction onOpen(e){\n  SpreadsheetApp.getUi().createAddonMenu()\n  .addItem(\"Show Sidebar\", \"showSidebar\")\n  .addToUi();\n}\n```", "```js\nfunction onInstall(e){\n  onOpen(e);\n}\n```", "```js\n/**\n *  Opens sidebar in the document containing the add-on's\n *   user interface.\n *\n */\nfunction showSidebar() {\n  SpreadsheetApp.getUi().showSidebar(\n    HtmlService.createHtmlOutputFromFile('Sidebar')\n  );\n}\n```", "```js\nvar ss = SpreadsheetApp.getActiveSpreadsheet();\nvar activeSheet = ss.getActiveSheet();\nvar activeSheetName = activeSheet.getSheetName();\n```", "```js\n/**\n * Creates a menu entry in the Google Sheets UI when the document\n * is opened.\n *\n * @param {object} e The event parameter for a simple onOpen\n * trigger.\n *\n */\nfunction onOpen(e){\n  // Create an Add-on menu item and associate a function.\n  SpreadsheetApp.getUi().createAddonMenu()\n  .addItem(\"Sheet To PDF\", \"sendSheetAsPdfToActiveUser\")\n  .addToUi();\n}\n\n/**\n * Runs when the add-on is installed.\n *\n * @param {object} e The event parameter for a simple onInstall\n * trigger.\n *\n */\nfunction onInstall(e){\n  onOpen(e);\n}\n```", "```js\n/** \n* Sends PDF attachment to the active user e-mail id. \n* \n*/ \nfunction sendSheetAsPdfToActiveUser(){ \n  // Get active user's email id. \n  var mailTo = Session.getActiveUser().getEmail(); \n  // Returns either pdf or false. \n  var attachments = getAttachments(); \n  // Send only if there is attachment. \n  if(attachments){ \n    MailApp.sendEmail( \n        mailTo, activeSheetName, '', {attachments:attachments} \n); \n  } \n}\n```", "```js\n/**\n * Authorizes the application for the first time or the token\n *  expires. If authentication token is valid then returns the pdf\n *  file with other attachment parameter otherwise prompts the \n *  user to authorize.\n *\n *  @return {Object} Array of attachment objects.\n */\nfunction getAttachments(){\n  // Authenticated service object.\n  var service = getGoogleService();\n\n  // Proceed further only if authenticated, otherwise prompt for\n  // authentication.\n  if (service.hasAccess()) {\n\n    // The url to download activesheet as pdf.\n    var url = ss.getUrl()\n        .replace(\"edit\", \"export?gid=\" + activeSheet.getSheetId()\n          + \"&format=pdf&attachment=false\");\n\n    // The access token should be sent on every request.\n    var headers = {\n        Authorization:'Bearer ' + service.getAccessToken()\n    };\n\n    // Send request to the pdf url with the access token.\n    var response = UrlFetchApp.fetch(url, { headers:headers });\n\n    // Returned content.\n    var content = response.getContent();\n\n    // Returns as an array of objects.\n    return [{\n      fileName: activeSheetName + \".pdf\",\n      content: content,\n      mimeType:\"application/pdf\"\n    }];\n\n  } else {\n\n    // Authorization url from the service object.\n    var authorizationUrl = service.getAuthorizationUrl();\n\n    // Side bar with the authorization link.\nvar template = HtmlService \n    .createTemplate( \n    '<a href=\"<?= authorizationUrl ?>\" \n    target=\"_blank\">Authorize</a>.' \n);\n\n    // Authorization url assigned to template\n    template.authorizationUrl = authorizationUrl;\n\n    // Finally evaluate the template and show sidebar.\n    var page = template.evaluate();\n    SpreadsheetApp.getUi().showSidebar(page);\n\n    // Attracting user attention.\n    Browser.msgBox('Authorize on sidebar and run again.');\n\n    // Return false, so no need to send e-mail.\n    return false;\n  }\n}\n```", "```js\n/**\n * Executes OAuth2 flow.\n *\n * @return {Object} Authentication service object.\n *\n */\nfunction getGoogleService(){\n  /*\n   * Create a new service with the given name (here 'PACKT').\n   * The name will be used when persisting the authorized token,\n   * so ensure it is unique within the scope of the property\n   * store.\n   *\n   */\n  return OAuth2.createService(\"PACKT\")\n\n// Endpoint URLs are same for all Google services. \n.setAuthorizationBaseUrl( \n'https://accounts.google.com/o/oauth2/auth' \n)\n.setTokenUrl('https://accounts.google.com/o/oauth2/token')\n  /*\n   * Replace with your client ID and secret got from developers\n   * console.\n   *\n   */\n  .setClientId('...')\n  .setClientSecret('...')\n\n  // A callback function to complete the OAuth2 flow.\n  .setCallbackFunction('authCallback')\n\n  // A place to store authenticated tokens.\n  .setPropertyStore(PropertiesService.getUserProperties())\n\n  /*\n   * Scopes to request, separate with space if more than one\n   * scope.\n   *\n   */\n  .setScope('https://docs.google.com/feeds/')\n\n  /*\n   * Google-specific parameters.\n   *\n   * Sets the login hint, which will prevent the account chooser\n   * screen from being shown to users if logged in with multiple\n   * accounts.\n   *\n   */\n  .setParam('login_hint', Session.getActiveUser().getEmail())\n\n  // Requests offline access.\n  .setParam('access_type', 'offline')\n\n  /*\n   * Forces the approval prompt every time to show up.\n   * This is useful for testing, but not desirable in a production\n   * application.\n   *\n   */\n  .setParam('approval_prompt', 'force');\n}\n```", "```js\nhttps://script.google.com/macros/d/[[PROJECT KEY]]/usercallback\n```", "```js\nfunction authCallback(request) {\n  var service = getGoogleService();\n  var isAuthorized = service.handleCallback(request);\n\n  if (isAuthorized) {\nreturn HtmlService \n  .createHtmlOutput('Success! You can close this tab.'); \n  } else {\nreturn HtmlService \n  .createHtmlOutput('Denied. You can close this tab'); \n  }\n}\n```", "```js\nMswhXl8fVhTFUH_Q3UOJbXvxhMjh3Sh48\n```", "```js\nfunction clearService(){\n  OAuth2.createService('PACKT')\n  .setPropertyStore(PropertiesService.getUserProperties())\n  .reset();\n}\n```"]