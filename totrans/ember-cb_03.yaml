- en: Chapter 3. Ember Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining an application template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with conditionals in templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a list of items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding with element attributes and classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with HTML links inside templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling HTML actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using template input helpers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using development helpers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ember applications use a templating engine to display HTML and dynamic content
    to the user. In Ember, this is done via the Handlebars templating library. This
    library takes Handlebars expressions and renders them to the screen using data
    binding.
  prefs: []
  type: TYPE_NORMAL
- en: '**HTMLbars** is a variant of Handlebars that Ember uses as well. It has better
    performance and handles building the DOM in a more efficient manner. Keep in mind
    that for this chapter, we''ll be using HTMLbars and Handlebars interchangeably
    as they essentially do the same thing.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll be going over how to use templates in our applications.
  prefs: []
  type: TYPE_NORMAL
- en: Defining an application template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work with templates, we need to understand the basics on how properties bind
    with controllers and components. Here are a few recipes that go over how to accomplish
    this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we get started, we'll need to generate a template.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll first create a new application using Ember CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will generate a new application that we can use for this recipe.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create a new route that will add a new template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will generate the template and routes file as well as unit tests.
    The template file is called `helloworld.hbs` and will be generated in the `app/templates`
    folder. The route file is called `helloworld.js` and is located in the `app/routes`
    folder. The `route.js` file will also get modified with the new `helloworld` route.
    We'll discuss more about routes in [Chapter 4](part0039_split_000.html#1565U1-d21a6ad8148a415181fa52c0043435bb
    "Chapter 4. Ember Router"), *Ember Router*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After this, we''ll need to generate a `controller`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate a new file called `helloworld.js` in the `app/controller`
    folder and a unit test in `tests/unit/controllers`. We are now ready to continue.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at adding properties to our new template file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by editing the `helloworld.hbs` file. For this simple example, we''ll
    create a string with the first and last name properties as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Handlebar expressions are surrounded by double curly braces `{{ }}` and backed
    by a context. A context is an object from which Handlebar expressions read their
    properties. In this example, the context is the controller. The `{{outlet}}` will
    render the template of any nested routes, which will be discussed in more detail
    later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The controller will need to have the `firstName` and `lastName` properties
    so that they can be displayed in the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The controller has the same name as the template. The template, by convention,
    will retrieve the properties from the controller of the same name. Each of them
    is bound to each other. If any changes occur to the data, the other values will
    change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using templates with components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to controllers, we can create a component that can act as a context
    for the template. In the component, we can set up properties that can be accessed
    by the template later.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new component, use the `generate component` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All components must have a dash in their names. This command will create the
    `hello-world.js` file in the `app/components/hello-world.js` folder, a template
    file in the `app/components/hello-world.hbs` file, and an integration test file
    at `tests/integration/components/hello-world-test.js`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `hello-world.hbs` file and add the hello world string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `firstName` and `lastName` parameters are retrieved from the component.
    The `yield` expression is used when the component is in the block form. We'll
    talk more about this in [Chapter 6](part0053_split_000.html#1IHDQ1-d21a6ad8148a415181fa52c0043435bb
    "Chapter 6. Ember Components"), *Ember Components*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add two properties to the component file, `hello-world.js`, the first one being
    `firstName` and the last one being `lastName`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the last part, all we need to do is add the component that we just created
    to one of our `application.hbs` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `{{hello-world}}` Handlebar expression adds the component to the `application.hbs`
    file. The `hello-world` template will then be rendered here. The `{{outlet}}`
    template will render the nested routes under the `application` route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the Ember server and navigate to `http://localhost:4200`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the Ember server is started, open a web browser at localhost port 4200\.
    The message on the screen will show **Hello World! My name is John Smith**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `http://localhost:4200/helloworld` and you'll be greeted with two
    messages. The message on the screen will show **Hello World! My name is John Smith**.
    **Hello World! My name is Erik Hanchett**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the `helloworld` route is loaded, the application template is displayed.
    The `{{outlet}}` template then gets rendered with the contents of the `helloworld`
    template file. This is why both messages are displayed. Remember that all routes
    are nested under the `application` route.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ember.js uses the Handlebars templating library. This library provides you with
    a way to do data binding between the component or controller, also known as a
    context, and the template. This data binding occurs in both directions. In other
    words, changes to the data in the component or controller will be reflected in
    the template. Changes in the template to the data will be reflected in the controller
    or component.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous simple example, the `firstName` and `lastName` properties in
    the component were accessed in the template with double curly braces `{{}}`. This
    is known as a Handlebars expression. The template is just regular HTML with embedded
    Handlebar expressions. Ember compiles these templates later on during the build
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Working with conditionals in templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using conditionals is fundamental to using Ember's templating engine. In the
    following recipes, we'll take a look at conditionals and how they work with templates.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at a simple example that displays text if some property is
    true.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new project and generate a new controller called `conditional`. Run
    this command in the root of the `application` folder to create `controller` and
    `template`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create the conditional controller.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `router.js` file with the new `conditional` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add a new `conditional` route. To access this route using the Ember
    server, open a web browser and navigate to `http://localhost:4200/conditional`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `conditional` controller with the `isHomeworkDone` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a new `isHomeworkDone` property and default it to `true`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the conditional template so that it will display one message if `isHomeworkDone`
    is `true` and another message if it isn''t:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `{{if}}` statement is a helper and must be surrounded by curly braces `{{}}`
    like any other Handlebar expression. It begins with a `#` sign, which indicates
    that it's a form of a block invocation. The `{{/if}}` statement closes the statement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The preceding example shows two statements, `{{if}}` and `{{else}}`, both in
    the block form. Only the statement that is true will be displayed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As we know from the controller earlier, if `isHomeworkDone` is `true`, the statement
    `Thanks for finishing the homework!` will be displayed after the template is rendered.
    On the other hand, if `isHomeworkDone` was `false`, the statement `Please finish
    the homework` will be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To test this example, navigate to the `http://localhost:4200/conditional` route.
    The `{{outlet}}` in `application.hbs` will render the `conditional` template inside
    of it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using inline invocation with templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Inline invocation can be used to display data with `if` statements, all within
    one line of code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll take the previous example and recreate it using inline invocation. Edit
    the `condtional.hbs` file in the `app/templates` folder with the new `if` statement
    using inline invocation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When using inline invocation, you don't need to use the pound sign `#` or end
    the `if` block with `{{/if}}`. Everything can be written in one expression.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first argument of the helper after `isHomeworkDone`, `Thanks for finishing`
    `the homework!`, will be shown only if `isHomeworkDone` is `true`. The second
    argument, `Please finish the homework`, will be displayed if `isHomeworkDone`
    is `false`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Working on nested invocation with templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nested invocations are inline, which means that they return a single value.
    They can also accept multiple nested `if` statements in the inline helper.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `conditional` controller, add a couple of properties called `isHomeworkDone`
    and `isChoresDone`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Both of these are defaulted to `true`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s use nested invocation to display a message only if both `isHomeworkDone`
    and `isChoresDone` are `true`. Edit the `condtional.hbs` file with the new nested
    `if` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Thanks for finishing the homework` string will display only if both `isChoresDone`
    and `isHomeworkDone` are `true`. Otherwise, nothing is displayed. As the controller
    has both values set to `true`, the message will display **Thanks for finishing
    the homework!** after the template is rendered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The opposite of if is unless
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another useful helper is `unless`. It works exactly the opposite of the `if`
    helper. It can work with all three invocation styles—inline, block, and nested.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll create the `unless` block that will display a string if it''s not true
    in our `conditional.hbs` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this block, the `unless` helper will display `Please finish the homework`
    only if `isHomeworkDone` is `false`. On the other hand, the message `Thanks for
    finishing the homework!` will be displayed if `isHomeworkDone` is `true`. This
    is essentially the opposite of the `if` helper.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, assuming that `isHomeworkDone` is `true`, the `Thanks for finishing
    the homework!` string will be displayed in the template after it's rendered.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `if` and `unless` conditionals are built-in helpers that are made available
    to us from the Handlebars templating engine. They are surrounded by curly braces
    `{{}}`, which tell Handlebars to interpret them. The `{{if}}` statement checks
    whether the property is `true`. JavaScript values such as `undefined`, `null`,
    `''` , `[]`, and numeric `0` will return as `false`.
  prefs: []
  type: TYPE_NORMAL
- en: There are three different ways in which these conditional helpers can be invoked—block,
    nested, or inline. All three will work with `if` and `unless` helpers.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a list of items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, you'll have a list of items that you'll need to iterate over. We can
    iterate through these items with the `each` helper. This recipe will go over how
    to do this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's say that we have a list of students and want to display them in our template.
    We'll use the `each` helper to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new project, generate `student` `controller` and `template`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create the necessary files needed for our example.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `router.js` file with the new `student` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add a new `conditional` route. To access this route using the Ember
    server, open a web browser and navigate to `http://localhost:4200/student`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update our student controller with an array of `students` as a property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This array has three student objects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In our `student.hbs` template, we''ll iterate through the `students` array
    using the `each` helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first argument to the `each` helper is the array to be iterated over. In
    this case, this is the `students` array that was declared in the `student` controller.
    The `|student|` block `param` is what we'll use to iterate over the array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `each` helper must be in the block form. In this example, each value of
    the student will be displayed with an HTML break afterward.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output will look like this after being rendered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If, by chance, the array was empty, you can use `{{else}}`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a new array to the template. This array can be empty or may not even exist:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `else` block will be rendered only if the array is empty or doesn't exist.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finding the index of the array
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If needed, you can also access `index` of the array in the second block `param`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new array and add the `index` block `param`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After each iteration, `name` and `index` is displayed with an HTML break element.
    The index can be accessed using the double curly braces `{{index}}`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Assuming that we are using the same student array from earlier in this chapter,
    the rendered output will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Keep in mind that `index` starts at `0` and not `1`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `each` helper uses block params to iterate through arrays. The `each` helper
    takes an array argument and the block `param` is used to iterate each individual
    item on the list. If the array doesn't exist or is empty, you can use `else` to
    display a message instead.
  prefs: []
  type: TYPE_NORMAL
- en: In the recipes in this chapter, the `students` array was declared in `controller`.
    It had several student objects that could be accessed by the template. The template
    used this array and iterated over it with the `each` helper.
  prefs: []
  type: TYPE_NORMAL
- en: Binding with element attributes and classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very useful feature of HTMLBars is binding elements to attributes in your
    HTML.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A very simple example would be binding an element to an `img src` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new project, generate `index template` and `index controller`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate the files needed for this example.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new `index controller` file with `url`, `sideClass`, and `secondClass`
    as its properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We get the `index` route and controller without having to create a specific
    route for them. It works like the application route, which all other routes inherit
    from.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new template and add an `img` tag. The `url` element will be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will be rendered as if the `url` property is in the `src` attribute for
    the `img` tag.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The template will be rendered with the `url` property as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We can essentially add this to any tag we like.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s create a `div` tag in our template with a couple of properties added
    for the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Both `sideClass` and `secondClass` will be added to the class attribute. As
    these properties are bound, they act like any other property in Ember. They can
    be dynamically changed and the template will render accordingly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Content security policy**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When running examples in this book, you might occasionally see messages in the
    console warning you about content security violations. They'll usually appear
    in big red text in your console. The Ember team put this in place to help remind
    developers about potential security issues that your application might have. For
    the purpose of this book, these warnings can be ignored. On the other hand, you
    can fix these warnings by editing the `config/environment.js` file and the `contentSecurityPolicy`
    section. You can find examples on how content security works at [http://content-security-policy.com/](http://content-security-policy.com/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Binding elements in attributes is done by the HTMLBars templating library, which
    is based on the Handlebars library. It looks at every attribute with a property
    and renders it on the screen. These attributes are bound to properties that can
    be accessed in the controller or component.
  prefs: []
  type: TYPE_NORMAL
- en: We can bind any property to any attribute. The only exception being view helpers.
    We'll discuss this more in a later part of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Working with HTML links inside templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most useful helpers that Ember.js provides is the link-to helper.
    We'll discuss how to use this helpful feature in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The link-to helper is used to navigate an Ember application. The first argument
    is always the name of the route. The second is the dynamic segment. We'll discuss
    dynamic segments a little later.
  prefs: []
  type: TYPE_NORMAL
- en: One of the simplest ways to use the link-to helper is to use it inline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new student application and route. Run this command in the root of
    the `project` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Ember CLI will generate a new route called students. This will update the `router.js`
    file as well as add the template and route files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `students.hbs` file in the `app/templates` folder and add this string
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This message will be displayed after navigating to the `students` route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `application.hbs` file. Let''s add a `link-to` helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `link-to` helper's first argument is `students`. This is the `students`
    route that we created earlier. This will render an HTML hyperlink with the name
    of `Students` linked to the `students` route. The `{{outlet}}` tells the Handlebars
    templating library where to render the output of the route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output of `link-to` will show an HTML link. When this is clicked, the link
    will display the `students` route message that we created earlier in the `students.hbs`
    file. This is rendered by `{{outlet}}`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Students` is a hyperlink to the route, `/students`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Ember.js is smart enough to remember the history of a link after it's clicked.
    Therefore, if by chance a user clicks back on the web browser, it will return
    to the previous route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can override this behavior, if needed, by adding the `replace=true` option
    to the `link-to` helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Adding data attributes to view helpers**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Unfortunately, data view helpers such as `link-to` and `input` don't allow custom
    data attributes. In other words, if you're using `link-to`, you can't add `data-toggle='dropdown'`
    to the end of the `link-to` helper. Normal attributes such as class will work,
    however.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'One way to add custom attributes is to reopen `Ember.LinkComponent` for `link-to`
    or `Ember.TextField` for the `input` helper. Reopening a class was discussed in
    [Chapter 2](part0023_split_000.html#LTSU1-d21a6ad8148a415181fa52c0043435bb "Chapter 2. The
    Ember.Object Model"), *The Ember.Object Model*, so check there first. After reopening
    the class, you can add an `attributeBindings` property array. Each element in
    the array is a data attribute that you want available to your `link-to` or `input`
    helper. For example, to add `data-toggle` as an attribute to your `link-to` helper,
    it would look like `attributeBindings: [''data-toggle'']`. We''ll discuss more
    about `input` helpers in the next section.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Alternatively, you can create a component that extends from `LinkComponent`
    instead of the normal simple component. You can then add attributes to it. Make
    sure to name it something other than `link-to`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using link-to helpers with dynamic segments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Link-to helpers can be used to link dynamic segments. The dynamic segment is
    added to the second argument in the `link-to` helper. In this recipe, we'll create
    a `students` route with a dynamic segment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run this command from the project root to create `resource` for `students`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create the model, route, and templates needed for our new `students`
    route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we''ll need to update the `router.js` file and add a simple dynamic segment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The most important thing to realize here is the path. This is called a dynamic
    segment and is represented by :`student_id`. By convention, the `students` route
    will retrieve information from the student model. If the user navigates to `/students/5`,
    the route will retrieve the student model with the ID of 5\. Look for more information
    on dynamic segments and routes in the [Chapter 4](part0039_split_000.html#1565U1-d21a6ad8148a415181fa52c0043435bb
    "Chapter 4. Ember Router"), *Ember Router*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new `application.js` file in the `app/routes` folder. For the sake
    of simplicity, we''ll have the application route return an array of student objects
    that we can then retrieve in our template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `application` route is on top and is inherited by all other routes. For
    this example, we returned a list of objects with a number of properties. This
    model will be able to be accessed in our students template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the students template in the `app/templates` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This template will display `name`, `age`, and `location` of the model passed
    to it. Make sure to prefix all the values with `model`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We''ll then update the `application.hbs` file with a `{{each}}` helper and
    `link-to`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this example, we have an `each` helper that iterates through the model.
    The `link-to` helper has two arguments. The first is the route, which is `students`.
    The second is the dynamic segment, `student`. Ember will replace each segment
    with the value of the corresponding object ID''s property. If, for some reason,
    no model exists, you can explicitly set the value instead:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will link the student's route with a dynamic segment with an ID of `1`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Multiple segments**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There might be times where you have nested routes with multiple segments. For
    example, a blog might have blog posts and each blog post might have comments.
    In this case, you can specify multiple segments in the `link-to` helper. All you
    need to do is separate them with a space. For instance, a blog with multiple comments
    might look like `{{#link-to 'blog.comment' 1 comment}}Comment{{/link-to}}`. The
    `1` is the first dynamic segment and the comment is the second dynamic segment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After being rendered, three links will be displayed as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Clicking on any link will navigate to the student's route with that ID. The
    template will then display the student's information on the screen as follows:![Using
    link-to helpers with dynamic segments](img/00005.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `link-to` helper is used by the templating engine to route a customer throughout
    an application. It's only used for internal links, not external.
  prefs: []
  type: TYPE_NORMAL
- en: The `link-to` helper takes two or more arguments. The first is the name of the
    route. The second is used for dynamic segments.
  prefs: []
  type: TYPE_NORMAL
- en: Handling HTML actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, in an application, we'll need to allow interaction with controls that
    affect the application state. To accomplish this, we'll use actions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `{{action}}` helper is used on HTML elements to send actions back to the
    template's corresponding controller or component when the user clicks on an element.
    Let's take a look at an example of this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new project, navigate to the root of the `application` directory,
    and type this command to generate a new component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Keep in mind that all components must have a dash in their names. This will
    generate the component template, JavaScript files, and test files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `action-component.js` file in the `components` folder. We''ll add
    the action, `toggleTex`t:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this example, we have a `showText` property that's defaulted to `true`. When
    the action, `toggleText`, is triggered, it toggles the `showText` property. The
    `toggleProperty` method sets the opposite value of its current property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `toggleText` action is now ready to be added to the template. The next
    step is to add the action to the component template using the `{{action}}` helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `if` helper will display text only if the `showText` property is `true`.
    The button at the bottom has an action called `toggleText` attached to it. Whenever
    this button is pressed, the `toggleText` action will be invoked by the corresponding
    `action-component` component. To keep things clear, the button text will show
    `Hide Text` if the text is shown and `Show Text` if it's hidden.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `action` helper can be added to any HTML element. As soon as the element
    is clicked, the action will be triggered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'It''s good to know that you can attach an action to any HTML element but not
    all will respond. Some browsers may ignore the click event. In this case, you
    can use this `css` trick as a workaround:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Specifying the type of event**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By default, all actions listen for click events. When a click occurs, that action
    is triggered in the context, component, or controller. You can specify an alternative
    to the click event with the `on` option. For example, a button with a double-click
    action would look like `<button {{action 'toggleText' on='doubleClick'}}Show Text</button>`.
    All event names must be camel-cased and lowercase when assigned to `on`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We now need to add the component to the `application` template file so that
    it can be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add our action component to our `application` template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After loading the application with the Ember server, it will look as follows:![How
    to do it...](img/00006.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pressing the **Hide Text** button will hide the text. Pressing it again will
    show the text.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Allowing modifier keys**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By default, the `action` helper will ignore click events when modifier keys
    such as *Alt* or *Ctrl* are pressed at the same time. If needed, you can specify
    an `allowedKeys` option. For example, a button with an allowed key *Alt* would
    look like `<button {{action 'toggleText' allowedKeys='alt'}}Show Text</button>`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adding a parameter to an action event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can have arguments in an action handler that will be passed back to the
    context. Anything after the action name of the `action` helper will be passed
    as an argument to the component or controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, we''ll create a new component. After the project is created, run
    this command in the root of the `project` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate the necessary component files for our new `param-component`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `param-component.js` file and add a new action called `pressed`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this simple example, the `pressed` action has only one parameter. When the
    action is triggered, an `alert` box is displayed with the passed in parameter
    text.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is to edit the template and add the action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this template, we have an `input` helper. The `input` helper will be discussed
    in more detail in the *Using template input helpers* recipe. The button press
    triggers the `pressed` action and passes the `hello` text from the input helper
    to the action.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Allowing default browser action**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The action helper, by default, prevents the default browser action of the DOM
    event. In other words, when a user clicks on a link or button that might otherwise
    reload the page, Ember prevents this. If needed, you can turn this behavior off
    using `preventDefault=false`. For example, we can add an action event to a link
    and have it redirected to a page as well as trigger an event `<a href="thispage.htm"
    {{action 'pressed' preventDefault=false}}>Press Me</a>`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next step is to add `param-component` to the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this code, we added `param-component` to the `application` template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After starting the server, a textbox will be displayed. Pressing the **Press
    Me** button will display the text in an alert box. It should look as follows:![Adding
    a parameter to an action event](img/00007.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In some cases, we may not be using an `input` helper. Let''s say that we want
    to have an action event trigger `onblur`. We can specify a `value` option in our
    `action` helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The input `text` field has `value` equal to the `hello` property. The `onblur`
    event is raised whenever the element loses focus. By default, the action handler
    receives the first parameter of the event listener. In this case, it would be
    `Event {}`. We must specify the `value` option to specify the target value using
    `target.value`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Unfortunately, due to the way Ember binds values, we cannot simply just send
    the `hello` property as a parameter to the action. This is why we must use the
    `value` option.
  prefs: []
  type: TYPE_NORMAL
- en: You can test this by entering text in the textbox and clicking outside the box
    so that it loses focus. It should show the correct text in the alert popup.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `action` helper attaches to HTML elements in order to allow user interaction.
    It sends named events to the template's corresponding context, component, or controller.
  prefs: []
  type: TYPE_NORMAL
- en: The `action` helper by default sends the first parameter of the event listener.
    You can send any parameter that you want after the `action` event. If needed,
    you can specify the `value` option and use `value.target`, which will send the
    target of the event.
  prefs: []
  type: TYPE_NORMAL
- en: Using template input helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create common form controls, `input` helpers can be used. This recipe will
    go over how to use them in our Ember applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most common `input` helper is `{{input}}`. It wraps around the `Ember.TextField`
    view and is almost identical to the traditional `<input>` HTML element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new project. In the `app/templates` folder, open the `application.hbs`
    file and add an `input` helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This `input` helper is very simple; all it does is set the value of the textbox
    to `hello world`. It is surrounded by double curly braces and supports the normal
    input attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When rendered, it will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If needed, we can assign properties to the `input` helper.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new `application` controller. Run this command in the root `application`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate a new controller that the application can access.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the controller and add a new property. We''ll call this `helloText`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `application.hbs` file again and set `value` to the property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `helloText` property is now bound to the input value. Attributes that have
    quoted values will be set directly to the element. If left unquoted, these values
    will be bound to the property on the template's current rendering context. In
    this case, this is the controller.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s add a simple action to the `input` helper. This can be done using the
    dasherized event name as an attribute to the `input` helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Whenever a key is pressed, the action pressed will be triggered in the component
    or controller.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As we haven''t created a key press, we''ll add it to our controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Whenever a key is pressed in the textbox, a message will be logged to the console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to use checkbox helpers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous example, we created a simple input textbox. We can also create
    a checkbox in the same way. This uses the `Ember.Checkbox` view.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new project, open the `application.hbs` file in the `app/templates` folder.
    Let''s add a new checkbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is very similar to the input textbox.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Generate an `application` controller. This will be used to store our `isChecked`
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the controller with the new `isChecked` property. Set it to `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This controller has only a Boolean property, `isChecked`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `isChecked` property is bound to the checkbox. After it''s rendered, it
    should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to use text areas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create a `textarea` element, we can use the `textarea` helper. This wraps
    the `Ember.TextArea` view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new project and edit the `application.hbs` file in the `app/templates`
    folder. Add a `textarea` helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The text area box will be displayed with `20` columns and `10` rows. It will
    look like this after being rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Adding actions and attributes work in the same way as the `input` and `checkbox`
    helpers.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The input, textarea, and checkbox are all helpers that make it easier to work
    with common form controls. They wrap around `Ember.TextField`, `Ember.Checkbox`,
    and `Ember.TextArea`.
  prefs: []
  type: TYPE_NORMAL
- en: With these helpers, we can easily bind elements and actions to them.
  prefs: []
  type: TYPE_NORMAL
- en: Using development helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging your template is a task that you'll often use. Here are the steps
    to do this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The most basic way of debugging Ember templates is to use `{{log}}` and `{{debugger}}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Ember application. Create a new component called `log-example`.
    Run this command in the root `application` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a new component template and JavaScript files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `log-example.js` file in the `app/components` folder and a new property
    called `helloText`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is a simple component with just one property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `log-example.hbs` file in the `app/templates/components` directory.
    Add `log` to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will display a string in the browser's console window.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we can add this new component to our `application.hbs` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After being rendered, the text **Hello text is Hello World** will be displayed
    in the console.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In this same example, let''s add `{{debugger}}`. Edit the `log-example.hbs`
    file and add it at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The debugger is the equivalent of JavaScript's debugger keyword. It will halt
    the execution of code and allow the inspection of the current rendering context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If we start the server and load the web page, the browser will halt on the
    debug statement while loading. At this point, we can open the browser''s console
    window and use the `get` function to find the current value of `helloText`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `get` command can retrieve any value from the context. In other words, it
    can retrieve any value from the component or controller. This works the same if
    the debug statement was in a `{{each}}` loop.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can get the context of the view as well in the console debugger:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Ember Inspector**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Ember Inspector is a plugin for Chrome and Firefox web browsers. It makes
    it easy to debug and understand your Ember application. When you are using the
    plugin, you can see all sorts of information on your application, including routes,
    models, templates, controllers, and components. You can download it from the Firefox
    or Chrome plugin store for free.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Handlebars library has made it easy to debug your templates. They are helpers
    that interact with the web browser to log information to the console or stop the
    execution of it.
  prefs: []
  type: TYPE_NORMAL
- en: The Ember's `{{debugger}}` equivalent in JavaScript is the debugger. Both work
    very much in the same way.
  prefs: []
  type: TYPE_NORMAL
