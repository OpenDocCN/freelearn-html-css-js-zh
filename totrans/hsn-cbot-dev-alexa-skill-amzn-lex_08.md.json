["```js\nelicitIntent({ message, sessionAttributes = {}, responseCard = null }) {\n  return {\n    sessionAttributes,\n    dialogAction: {\n      type: 'ElicitIntent',\n      message: { contentType: 'PlainText', content: message },\n      responseCard\n    },\n  };\n}\n```", "```js\ncreateCardFormat(cards) {\n return {\n   version: 1,\n   contentType: \"application/vnd.amazonaws.card.generic\",\n   genericAttachments: cards.map(({ title, subtitle, imageUrl, linkUrl, buttons }) => {\n     return {\n       title,\n       subtitle,\n       imageUrl,\n       attachmentLinkUrl: linkUrl,\n       buttons: buttons.map(({ text, value }) => {\n         return { text, value };\n       })\n     };\n   })\n }\n}\n```", "```js\nlet responseCard = Lex.createCardFormat([{\n    title: `${size}, ${colour}${type === 'trousers' ? ', ' + length : ''}${type}`,\n    subTitle: `${item.stock} in stock`,\n    imageUrl: item.imageUrl,\n    buttons: [\n        { text: 'Add to Cart', value: 'Yes' },\n        { text: 'Not Now', value: 'No' }]\n    }\n]);\n```", "```js\nconst SearchHandler = {\n    canHandle(handlerInput) {\n        return handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n            handlerInput.requestEnvelope.request.intent.name === 'searchIntent';\n    },\n    async handle(handlerInput) {\n        const { slots } = handlerInput.requestEnvelope.request.intent;\n        let { city, query } = slots;\n        let cityValue = city.value;\n        let queryValue = query.value;\n        if (!cityValue) {\n            let slotToElicit = 'city';\n            let speechOutput = `What city are you looking in?`;\n            return handlerInput.responseBuilder\n                .speak(speechOutput)\n                .addElicitSlotDirective(slotToElicit)\n                .getResponse();\n        }\n        if (!queryValue) {\n            let slotToElicit = 'query';\n            let speechOutput = `What are you looking for in ${cityValue}`;\n            return handlerInput.responseBuilder\n                .speak(speechOutput)\n                .addElicitSlotDirective(slotToElicit)\n                .getResponse();\n        }\n    }\n}\n```", "```js\nhttps://maps.googleapis.com/maps/api/place/findplacefromtext/json?input={YOUR SEARCH}&inputtype=textquery&fields=formatted_address,name&key={YOUR API KEY}\n```", "```js\nconst GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;\nconst googleURL = 'https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=';\nconst queryString = '&inputtype=textquery&fields=formatted_address,name&key=';\n```", "```js\nlet completeURL = googleURL + [queryValue, 'in', cityValue].join('%20') + queryString + GOOGLE_API_KEY;\n```", "```js\nif (err || !res || !res.data) {\n    let apology = `unfortunately I couldn't find that for you`;\n    return handlerInput.responseBuilder\n        .speak(apology)\n        .getResponse();\n}\n```", "```js\nlet data = res.data;\nlet info = `There's ${data.candidates.length} ${query.value}${data.candidates.length === 1 ? \"\" : 's'} in ${city.value}.\n${data.candidates.map(candidate => `the ${candidate.name}`)}`;\nreturn handlerInput.responseBuilder\n    .speak(info)\n    .withShouldEndSession(false)\n    .getResponse();\n```"]