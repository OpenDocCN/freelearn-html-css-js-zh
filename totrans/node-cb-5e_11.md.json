["```js\n$ npm install --global @loopback/cli\n```", "```js\n    $ lb4 loopback-bookstore\n    ```", "```js\n        force loopback-bookstore/.yo-rc.json\n       create loopback-bookstore/.eslintignore\n       create loopback-bookstore/.eslintrc.js\n       create loopback-bookstore/.mocharc.json\n       create loopback-bookstore/.prettierignore\n       create loopback-bookstore/.prettierrc\n       create loopback-bookstore/DEVELOPING.md\n       create loopback-bookstore/package.json\n       create loopback-bookstore/tsconfig.json\n    ...\n    ```", "```js\n    $ cd loopback-bookstore\n    $ npm install\n    $ npm start\n    ```", "```js\n    $ lb4 model\n    ```", "```js\n    $ lb4 datasource\n    ```", "```js\n    $ lb4 repository\n    ```", "```js\n    $ lb4 controller\n    ```", "```js\n    [{\"id\":1,\"title\":\"Watership Down\",\"author\":\"Richard Adams\"}]\n    ```", "```js\n@get('/books', {\n    responses: {\n      '200': {\n        description: 'Array of Book model instances',\n        content: {\n          'application/json': {\n            schema: {\n              type: 'array',\n              items: getModelSchemaRef(Book, {includeRelations: true}),\n            },\n          },\n        },\n      },\n    },\n  })\n  async find(\n    @param.filter(Book) filter?: Filter<Book>,\n  ): Promise<Book[]> {\n    return this.bookRepository.find(filter);\n  }\n```", "```js\n$ npx express-generator --view=ejs ./bookstore-web-app\n$ cd bookstore-web-app\n$ npm install\n```", "```js\n$ touch routes/inventory.js views/inventory.ejs\n```", "```js\n    const { Router } = require('express');\n    const router = Router();\n    router.get('/', function (req, res) {\n      fetch('http://localhost:3000/books')\n        .then((res) => res.json())\n        .then((json) =>\n          res.render('inventory', {\n            books: json,\n          })\n        );\n    });\n    router.post('/add', function (req, res) {\n      console.log(req.body);\n      fetch('http://localhost:3000/books', {\n        method: \"POST\",\n        body: JSON.stringify(req.body),\n        headers: { 'Content-Type': 'application/json' },\n      })\n        .then(res.redirect('/inventory'))\n        .catch((err) => {\n          throw err;\n        });\n    });\n    module.exports = router;\n    ```", "```js\n    var inventoryRouter = require('./routes/inventory');\n    ```", "```js\n    app.use('/inventory', inventoryRouter);\n    ```", "```js\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <title>Book Inventory</title>\n        <link rel='stylesheet' href='/stylesheets/style.css' />\n      </head>\n      <body>\n        <h1>Book Inventory</h1>\n        <ul>\n            <% for(let book of books) { %>\n                <li><%= book.title %> - <%= book.author %></li>\n            <% } %>\n        </ul>\n        <h2>Add Book:</h2>\n        <form action=\"/inventory/add\" method=\"POST\">\n            <label for=\"title\">Title</label>\n            <input type=\"text\" name=\"title\" />\n            <label for=\"author\">Author</label>\n            <input type=\"text\" name=\"author\" />\n            <button type=\"submit\" value=\"Submit\">Submit</button>\n        </form>\n      </body>\n    </html>\n    ```", "```js\n    $ npm start\n    ```", "```js\n    $ PORT=8080 npm start\n    ```", "```js\n$ docker run hello-world\n```", "```js\n$ npx fastify-cli generate fastify-microservice\n$ cd fastify-microservice\n```", "```js\n    $ touch Dockerfile .dockerignore\n    ```", "```js\n    FROM node:22\n    WORKDIR \"/app\"\n    RUN apt-get update \\\n     && apt-get dist-upgrade -y \\\n     && apt-get clean \\\n     && echo 'Finished installing dependencies'\n    COPY package*.json ./\n    RUN npm install --production\n    COPY . /app\n    ENV PORT 3000\n    EXPOSE 3000\n    USER node\n    CMD [\"npm\", \"start\"]\n    ```", "```js\n    .git\n    .gitignore\n    node_modules\n    npm-debug.log\n    ```", "```js\n    $ docker build --tag fastify-microservice .\n    ```", "```js\n    $ docker images\n    ```", "```js\n    $ docker run --publish 3000:3000 fastify-microservice\n    > fastify-microservice@1.0.0 start /app\n    > fastify start -l info app.js\n    {\"level\":30,\"time\":1594555188739,\"pid\":19,\"hostname\":\"f83abfa3276a\",\"msg\":\"Server listening at http://0.0.0.0:3000\"}\n    ```", "```js\nFROM node:22\nWORKDIR \"/app\"\nRUN apt-get update \\\n && apt-get dist-upgrade -y \\\n && apt-get clean \\\n && echo 'Finished installing dependencies'\nCOPY package*.json ./\nRUN npm install --production\nFROM node:22-slim\nWORKDIR \"/app\"\nRUN apt-get update \\\n && apt-get dist-upgrade -y \\\n && apt-get clean \\\n && echo 'Finished installing dependencies'\nCOPY --from=0 /app/node_modules /app/node_modules\nCOPY . /app\nENV NODE_ENV production\nENV PORT 3000\nUSER node\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n```", "```js\n    $ docker login\n    ```", "```js\n    $ docker tag fastify-microservice <namespace>/fastify-microservice\n    ```", "```js\n    $ docker push <namespace>/fastify-microservice\n    Using default tag: latest\n    The push refers to repository [docker.io/<namespace>/fastify-microservice]\n    2e4fc733214e: Preparing\n    f4ab51cf75a4: Preparing\n    92f894697ee2: Preparing\n    69619ce237eb: Preparing\n    3e23088f380e: Preparing\n    ...\n    ```", "```js\n    $ docker pull <namespace>/fastify-microservice\n    ```", "```js\n$ docker tag fastify-microservice <namespace>/fastify-microservice:1.0.0\n```", "```js\n$ docker push <namespace>/fastify-microservice:1.0.0\n```", "```js\n    $ docker --version\n    Docker version 26.1.4, build 5650f9b\n    $ kubectl version\n    Client Version: v1.29.2\n    Kustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3\n    Server Version: v1.29.2\n    ```", "```js\n    $ kubectl get nodes\n    NAME             STATUS   ROLES           AGE    VERSION\n    docker-desktop   Ready    control-plane   109s   v1.29.2\n    $ kubectl get services\n    NAME         TYPE        CLUSTER-IP   EXTERNAL-IP    PORT(S)   AGE\n    kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   110s\n    ```", "```js\n    $ docker build --tag fastify-microservice .\n    ```", "```js\n    $ mkdir deployment\n    $ touch deployment/fastify-app.yml deployment/fastify-app-svc.yml\n    ```", "```js\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: fastify-app\n      labels:\n        app: fastify\n    spec:\n      replicas: 3\n      selector:\n        matchLabels:\n          app: fastify\n      template:\n        metadata:\n          labels:\n            app: fastify\n        spec:\n          containers:\n          - name: fastify-app\n            image: fastify-microservice:latest\n            imagePullPolicy: Never\n            ports:\n            - containerPort: 3000\n    ```", "```js\n    $ kubectl apply --filename deployment/fastify-app.yml\n    deployment.apps/fastify-app created\n    $ kubectl get deployments\n    NAME          READY   UP-TO-DATE   AVAILABLE   AGE\n    fastify-app   3/3     3            3           7m19s\n    ```", "```js\n    $ kubectl get pods\n    NAME                           READY   STATUS    RESTARTS   AGE\n    fastify-app-749687fd5f-2vxcb   1/1     Running   0          6s\n    fastify-app-749687fd5f-94rlc   1/1     Running   0          6s\n    fastify-app-749687fd5f-rvx6n   1/1     Running   0          6s\n    ```", "```js\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: fastify-app-svc\n      labels:\n        run: fastify\n    spec:\n      selector:\n        app: fastify\n      ports:\n        - protocol: TCP\n          port: 3000\n          targetPort: 3000\n      type: NodePort\n    ```", "```js\n    $ kubectl apply --filename deployment/fastify-app-svc.yml\n    service/fastify-app-svc created\n    $ kubectl get service\n    NAME              TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)          AGE\n    fastify-app-svc   NodePort    10.97.82.33   <none>        3000:31815/TCP   15m\n    kubernetes        ClusterIP   10.96.0.1     <none>        443/TCP          65d\n    ```", "```js\n        return 'this is an updated example'\n    ```", "```js\n    $ docker build --tag fastify-microservice:2.0.0 .\n    ```", "```js\n            image: fastify-microservice:2.0.0\n    ```", "```js\n    $ kubectl apply --filename deployment/fastify-app.yml\n    deployment.apps/fastify-app configured\n    ```", "```js\n    $ kubectl describe service fastify-app-svc | grep NodePort:\n    NodePort:                 <unset>  31815/TCP\n    ```"]