["```js\nmodule.exports = function *() {\n  return 'hello generator';\n};\n```", "```js\n    require('co-mocha');\n    var expect = require('chai').expect;\n    var helloGenerator = require('../src/helloGenerator');\n\n    describe('Hello Generator', function() {\n      it('should yield to the function and return hello', function *() {\n        var ans = yield helloGenerator();\n        expect(ans).to.equal('hello generator');\n      });\n    });\n    ```", "```js\n    ./node_modules/mocha/bin/mocha --harmony-generators\n    ```", "```js\n    helloGenerator(function(ans) {\n      expect(ans).to.equal('hello generator');\n    });\n    ```", "```js\n    var A = yield foo();\n    var B = yield bar(A);\n    var C = yield baz(A, B);\n    ```", "```js\n    var A, B, C;\n\n    foo(function(A) {\n      bar(A, function(B) {\n        baz(A, B, function(C) {\n          return C;\n        });\n      });\n    });\n    ```", "```js\n    module.exports = function *() {\n      setTimeout(function(){\n        return 'hello generator';\n      }, 1000);\n    }\n    ```", "```js\n    module.exports = sleep;\n    function sleep(ms) {\n      return function (cb) {\n        setTimeout(cb, ms);\n      };\n    }\n    ```", "```js\n    var sleep = require('co-sleep');\n\n    module.exports = function *() {\n      yield sleep(1000);\n      return 'hello generator';\n    }\n    ```", "```js\n    var co = require('co');\n    var sleep = require('co-sleep');\n\n    co(function*(){\n      console.log('1');\n      yield sleep(10);\n      console.log('3');\n    });\n\n    console.log('2');\n    ```", "```js\nvar koa = require('koa');\nvar app = koa();\n\napp.use(function *(next){\n  var start = new Date();\n  yield next;\n  var ms = new Date() - start;\n  this.set('X-Response-Time', ms + 'ms');\n});\n\napp.use(function *(){\n  this.body = 'Hello World';\n});\n\napp.listen(3000);\n```", "```js\nnode --harmony app.js\n```", "```js\nvar mongoose = require('mongoose');\n\nvar schema = new mongoose.Schema({\n  title: { type: String, require: true },\n  URL: { type: String, require: true },\n  upvotes: { type: Number, require: true, 'default': 0 },\n  timestamp: { type: Date, require: true, 'default': Date.now }\n});\n\nschema.statics.upvote = function *(linkId) {\n  return yield this.findByIdAndUpdate(linkId, {\n    $inc: {\n      upvotes: 1\n    }\n  }).exec();\n};\n\nvar Links = mongoose.model('links', schema);\nmodule.exports = Links;\n```", "```js\nvar model = require('../models/links');\n\nmodule.exports = function(app) {\n  app.get('/links', function *(next) {\n    var links = yield model.find({}).sort({upvotes: 'desc'}).exec();\n    this.body = links;\n  });\n\n  app.post('/links', function *(next) {\n    var link = yield model.create({\n      title: this.request.body.title,\n      URL: this.request.body.URL\n    });\n    this.body = link;\n  });\n\n  app.delete('/links/:id', function *(next) {\n    var link = yield model.remove({ _id: this.params.id }).exec();\n    this.body = link;\n  });\n\n  app.put('/links/:id/upvote', function *(next) {\n    var link = yield model.upvote(this.params.id);\n    this.body = link;\n  });\n};\n```", "```js\n    var koa = require('koa'),\n        app = koa(),\n        bodyParser = require('koa-body-parser'),\n        router = require('koa-router');\n\n    // Connect to DB\n    require('./db');\n\n    app.use(bodyParser());\n    app.use(router(app));\n    require('./routes/links')(app);\n\n    module.exports = app;\n    ```", "```js\n    var app = require('./src/app.js');\n    app.listen(3000);\n    console.log('Koa app listening on port 3000');\n    ```", "```js\nvar logger = console;\n\nmodule.exports = function *(next) {\n  try {\n    yield next;\n  } catch (err) {\n    this.status = err.status || 500;\n    this.body = err.message;\n    this.app.emit('error', err, this);\n  }\n};\n```", "```js\napp.put('/links/:id/upvote', function *(next) {\n  var link;\n  try {\n    link = yield model.upvote(this.params.id);\n  } catch (err) {\n    if (err.name === 'CastError') {\n      this.throw(404, 'link can not be found');\n    }\n  }\n\n  // Check that a link document is returned\n  this.assert(link, 404, 'link not found');\n\n  this.body = link;\n});\n```", "```js\napp.post('/links', function *(next) {\n  this.assert(typeof this.request.body.title === 'string', 400, 'title is required');\n  this.assert(this.request.body.title.length > 0, 400, 'title is required');\n\n  this.assert(utils.isValidURL(this.request.body.URL), 400, 'URL is invalid');\n\n  // If the above assertion fails, the following code won't be executed.\n  var link = yield model.create({\n    title: this.request.body.title,\n    URL: this.request.body.URL\n  });\n  this.body = link;\n});\n```", "```js\nmodule.exports = {\n  isValidURL: function(url) {\n    return /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n  }\n};\n```", "```js\nnpm install --save thunkify\n```", "```js\nvar thunk = require('thunkify');\n\n...\n\n// Thunkify save method\nLinks.prototype.saveThunk = thunk(Links.prototype.save);\n```", "```js\napp.put('/links/:id', function *(next) {\n  this.assert((this.request.body.title || '').length > 0, 400, 'title is required');\n\n  var link;\n  try {\n    link = yield model.findById(this.params.id).exec();\n  } catch (err) {\n    if (err.name === 'CastError') {\n      this.throw(400, 'invalid link id');\n    }\n  }\n\n  // Check that a link document is returned\n  this.assert(link, 400, 'link not found');\n\n  link.title = this.request.body.title;\n  link = yield link.saveThunk()[0];\n  this.body = link;\n});\n```", "```js\nvar app = require('../src/app').callback();\n```", "```js\nvar app = require('../src/app').callback(),\n    Links = require('../src/models/links');\n\ndescribe('Submit a link', function() {\n\n  before(function(done) {\n    Links.remove({}, function(err) {\n      done();\n    });\n  });\n\n  it('should successfully submit a link', function (done) {\n    request(app).post('/links')\n      .send({title: 'google', URL: 'http://google.com'})\n      .expect(200, done);\n  });\n```", "```js\n  it('should successfully submit another link', function (done) {\n    request(app).post('/links')\n      .send({title: 'Axiom Zen', URL: 'http://axiomzen.co'})\n      .expect(200, done);\n  });\n\n  it('should successfully submit a third link', function (done) {\n    request(app).post('/links')\n      .send({title: 'Hacker News', URL: 'http://news.ycombinator.com'})\n      .expect(200, done);\n  });\n\n  // To be used in next test\n  var linkIDs = [];\n  it('should list all links', function (done) {\n    request(app).get('/links')\n      .expect(200)\n      .end(function(err, res) {\n        var body = res.body;\n        expect(body).to.have.length(3);\n\n        // Store Link ids for next test\n        for(var i = 0; i < body.length; i++) {\n          linkIDs.push(body[i]._id);\n        }\n        done();\n      });\n  });\n```", "```js\n// Add to top of file\nrequire('co-mocha');\nvar corequest = require('co-supertest');\n\nâ€¦\n\n  it('should upvote all links in parallel', function *() {\n\n    var res = yield linkIDs.map(function(id) {\n     return corequest(app)\n        .put('/links/' + id + '/upvote')\n        .end()\n    });\n;\n\n    // Assert that all Links have been upvoted\n    for(var i = 0; i < res.length; i++) {\n      expect(res[i].body.upvotes).to.equal(1);\n    }\n\n  });\n```", "```js\nnpm install co-supertest --save-dev\n```", "```js\n  app.get('/links', function *(next) {\n    var links = yield model.find({}).sort({upvotes: 'desc'}).exec();\n    if( this.accepts('text/html') ){\n      yield this.render('index', {links: links});\n    } else {\n      this.body = links;\n    }\n```", "```js\nvar views = require('koa-views');\n\n...\n\napp.use(views('./views', {default: 'jade'}));\n```", "```js\ndoctype html\nhtml(lang=\"en\")\n  head\n    title Koa News\n  body\n    h1 Koa News\n    div\n      each link in links\n        .link-row\n          a(href='#', onclick=\"upvote('#{link._id}', $(this))\") ^\n          span &nbsp;\n          a(href=link.URL)= link.title\n          .count= link.upvotes\n            |  votes\n    h2 Submit your link:\n    form(action='/links', method='post')\n      label Title:\n      input(name='title', placeholder=\"Title\")\n      br\n      label URL:\n      input(name='URL', placeholder=\"https://\")\n      br\n      br\n      button.submit-btn Submit\n    script(src=\"img/jquery-2.1.3.min.js\")\n    script.\n      var upvote = function(id, elem) {\n        $.ajax({url:'/links/'+id+'/upvote', type:'put' })\n        .done(function(data) {\n          elem.siblings('.count').text(data.upvotes + ' votes');\n        })\n      }\n```", "```js\nvar serve = require('koa-static');\nvar mount = require('koa-mount');\n\n// ..\n\napp.use(mount('/public', serve('./public') ));\n```"]