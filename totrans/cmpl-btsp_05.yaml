- en: Chapter 5. Playing with Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。玩转组件
- en: The real power of Bootstrap lies in the components contained within the framework.
    In this chapter, we'll go through a number of new and existing components. I'll
    show you how to use them and then we'll insert them into our sample blog project
    so you can see them in practice. Let's get right into it by covering one of the
    most commonly used components, which are buttons.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 的真正力量在于框架中包含的组件。在本章中，我们将探讨许多新组件和现有组件。我会向您展示如何使用它们，然后我们将它们插入到我们的示例博客项目中，以便您可以在实践中看到它们。让我们直接从最常见的组件之一——按钮——开始。
- en: Using the button component
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用按钮组件
- en: 'Buttons are one of the most commonly used components in Bootstrap. In version
    4 of Bootstrap, some of the new options for the button component include an outlined
    variation, toggle states, and button groups with checkboxes and radios. Before
    we get into that, let''s review the basic button options and configuration. Here''s
    a few general points to keep in mind when using buttons:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮是 Bootstrap 中最常用的组件之一。在 Bootstrap 4 版本中，按钮组件的一些新选项包括轮廓变体、切换状态以及带有复选框和单选按钮的按钮组。在我们深入探讨这些之前，让我们回顾一下基本的按钮选项和配置。以下是一些使用按钮时需要记住的几点：
- en: No matter what type of button you are creating, it will require the `.btn` CSS
    class to be included at a minimum
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论你创建什么类型的按钮，它至少需要包含 `.btn` CSS 类
- en: The `.btn` class can be attached to a number of HTML tags, such as `<button>`,
    `<a>`, and `<input>`, to render a button
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.btn` 类可以附加到多个 HTML 标签上，例如 `<button>`、`<a>` 和 `<input>`，以渲染按钮'
- en: There are different CSS classes for creating different size and color buttons
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有不同的 CSS 类用于创建不同大小和颜色的按钮
- en: Basic button examples
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本按钮示例
- en: 'Before we move on to more advanced configuration, let''s cover the basics of
    creating Bootstrap buttons. If you aren''t new to Bootstrap, you may want to skip
    this section. Bootstrap comes with six different button color options out of the
    box. Here''s a breakdown of their names and when to use them:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续更高级的配置之前，让我们先了解一下创建 Bootstrap 按钮的基础知识。如果您不熟悉 Bootstrap，您可能想跳过这一部分。Bootstrap
    默认提供了六种不同的按钮颜色选项。以下是它们的名字和何时使用它们的说明：
- en: '**Primary**: The main button used on your website. It is blue by default.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要**：在您的网站上使用的主要按钮。默认颜色为蓝色。'
- en: '**Secondary**: The alternate or secondary button used in your website. It is
    white by default.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**次要**：在你的网站上使用的备用或次要按钮。默认颜色为白色。'
- en: '**Success**: Used for positive-based actions. It is green by default.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成功**：用于基于正面的操作。默认颜色为绿色。'
- en: '**Info**: Used for informational buttons. It is a light blue by default.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息**：用于信息按钮。默认颜色为浅蓝色。'
- en: '**Warning**: Used for warning-based actions. It is yellow by default.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警告**：用于基于警告的操作。默认颜色为黄色。'
- en: '**Danger**: Used for error-based actions. It is red by default.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**危险**：用于基于错误的操作。默认颜色为红色。'
- en: 'Now that I''ve explained all the button variations, let''s check out the code
    for a button:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我已经解释了所有按钮变体，让我们看看按钮的代码：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see, I''m using the `<button>` tag and I''ve added a couple of CSS
    classes to it. The first is the `.btn` class, which I mentioned you need to include
    on all buttons. The second is the `.btn-primary` class, which indicates that you
    want to use the **Primary** button variation. If you want to use a different button
    style, you simply change up that second class to use the corresponding keyword.
    Let''s take a look at the code for all of the button variations:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我正在使用 `<button>` 标签，并向其添加了一些 CSS 类。第一个是 `.btn` 类，我提到您需要在所有按钮上包含它。第二个是 `.btn-primary`
    类，表示您想使用 **主要** 按钮变体。如果您想使用不同的按钮样式，只需更改第二个类以使用相应的关键字。让我们看看所有按钮变体的代码：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It''s as easy as that. Note that the last line is a **Link** button option
    that I haven''t talked about. This variation will appear as a text link in the
    browser, but will act as a button when you click or hover over it. I don''t often
    use this variation so I left it out at first. If you view this code in your browser,
    you should see the following buttons:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单。请注意，最后一行是一个 **链接** 按钮选项，我还没有讨论过。这个变体在浏览器中会显示为文本链接，但在您点击或悬停时将作为按钮操作。我不经常使用这个变体，所以最初我把它留出来了。如果您在浏览器中查看此代码，您应该看到以下按钮：
- en: '![Basic button examples](img/00053.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![基本按钮示例](img/00053.jpeg)'
- en: Creating outlined buttons
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建轮廓按钮
- en: 'Starting in Bootstrap 4, they''ve introduced a new button variation which will
    produce an outlined button instead of a filled one. To apply this look and feel,
    you need to change up one of the button classes. Let''s take a look at the following
    code for all variations:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Bootstrap 4 开始，他们引入了一种新的按钮变体，它将生成轮廓按钮而不是填充按钮。要应用这种外观和感觉，您需要更改按钮类中的一个。让我们看一下以下代码的所有变体：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, the class names have changed; here''s how they map to each
    button variation:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，类名已更改；以下是它们映射到每个按钮变体的方式：
- en: '`btn-primary-outline`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`btn-primary-outline`'
- en: '`btn-secondary-outline`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`btn-secondary-outline`'
- en: '`btn-success-outline`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`btn-success-outline`'
- en: '`btn-info-outline`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`btn-info-outline`'
- en: '`btn-warning-outline`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`btn-warning-outline`'
- en: '`btn-danger-outline`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`btn-danger-outline`'
- en: 'Basically, you just need to append `-outline` to the default button variation
    class name. Once you do, your buttons should look like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，您只需将 `-outline` 追加到默认按钮变体类名中。一旦这样做，您的按钮应该看起来像这样：
- en: '![Creating outlined buttons](img/00054.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![创建轮廓按钮](img/00054.jpeg)'
- en: Checkbox and radio buttons
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复选框和单选按钮
- en: 'A new feature in Bootstrap 4 is the ability to convert checkboxes and radio
    buttons into regular buttons. This is really handy from a mobile standpoint because
    it is much easier to touch a button than it is to check a box or tap a radio button.
    If you are building a mobile app or responsive website, it would be a good idea
    to use this component. Let''s start by taking a look at the code to generate a
    group of three checkboxes as a button group:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 4 中的一个新特性是能够将复选框和单选按钮转换为常规按钮。从移动设备的角度来看，这非常方便，因为触摸按钮比勾选复选框或点击单选按钮要容易得多。如果您正在构建移动应用或响应式网站，使用此组件会是一个好主意。让我们首先查看生成三个复选框按钮组的代码：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let me break down the code and explain what is going on here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我分解代码并解释这里发生了什么：
- en: To generate a button group with checkboxes, you need to wrap the boxes in a
    `<div>` with a class of `.btn-group`.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要生成带有复选框的按钮组，您需要将复选框包裹在一个具有 `.btn-group` 类的 `<div>` 中。
- en: To allow the buttons to toggle on and off, you also need to add the data attribute
    `data-toggle="buttons"` to the `<div>`.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要允许按钮切换开启或关闭，您还需要将数据属性 `data-toggle="buttons"` 添加到 `<div>` 中。
- en: Next we need to use the button classes on the `<label>` tag to convert each
    checkbox into a button. Note that on the first button I'm using the `.active`
    class, which will make this checkbox toggled on by default. This class is totally
    optional.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在 `<label>` 标签上使用按钮类将每个复选框转换为按钮。请注意，在第一个按钮上，我使用了 `.active` 类，这将使此复选框默认开启。这个类完全是可选的。
- en: Your basic checkbox `<input>` tag is nested within the label.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的基本复选框 `<input>` 标签嵌套在标签内。
- en: 'Keep in mind since these are checkboxes, you can toggle multiple options on
    or off. Here''s what the button group should look like when rendered in the browser:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，由于这些是复选框，您可以切换多个选项的开启或关闭。以下是按钮组在浏览器中渲染时的样子：
- en: '![Checkbox and radio buttons](img/00055.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![复选框和单选按钮](img/00055.jpeg)'
- en: As you can see, this renders a nice-looking button group that is optimized for
    mobile and desktop. Also, notice how the first checkbox has a different background
    color as it is currently toggled on because of the `.active` class applied to
    that label. In the same way that we've created a button group with checkboxes,
    we can do the same thing with radio buttons.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这渲染了一个看起来很漂亮的按钮组，它针对移动设备和桌面设备进行了优化。同时，请注意第一个复选框具有不同的背景颜色，因为它当前处于开启状态，这是由于应用了
    `.active` 类的标签。与创建带有复选框的按钮组相同，我们也可以用相同的方法处理单选按钮。
- en: Creating a radio button group
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建单选按钮组
- en: 'Creating a radio button group is very similar to the checkboxes. Let''s start
    by checking out the code to generate this different variation:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 创建单选按钮组与复选框非常相似。让我们首先查看生成这种不同变体的代码：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let me explain what''s happening here with this code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我解释一下这段代码中发生了什么：
- en: Like the checkboxes, you need to wrap your collection of radio buttons in a
    `<div>` with the same class and data attribute
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与复选框一样，您需要将您的单选按钮集合包裹在一个具有相同类和数据属性的 `<div>` 中
- en: The `<label>` tag and button classes also work the same way
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<label>` 标签和按钮类也以相同的方式工作'
- en: The only difference is that we are swapping the checkbox `<input>` type for
    radio buttons
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 唯一的区别是我们将复选框 `<input>` 类型替换为单选按钮
- en: 'Keep in mind that with radio buttons, only one can be selected at a time. In
    this case, the first one is selected by default, but you could easily remove that.
    Here''s what the buttons should look like in the browser:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，对于单选按钮，一次只能选择一个。在这种情况下，第一个是默认选中的，但您可以轻松地移除它。以下是按钮在浏览器中的样子：
- en: '![Creating a radio button group](img/00056.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![创建单选按钮组](img/00056.jpeg)'
- en: As you can see, the button group is rendered the same way as the checkboxes,
    but in this case we are using radios. This should be the expected result to optimize
    your group of radio buttons for mobile and desktop. Next we'll build on what we've
    learned about button groups, but learn how to use them in other ways.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，按钮组是以与复选框相同的方式渲染的，但在这个例子中我们使用的是单选按钮。这应该是优化您在移动和桌面上的单选按钮组的预期结果。接下来，我们将基于我们关于按钮组的了解，但学习如何以其他方式使用它们。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We'll circle back later in this chapter and actually add the components to our
    blog project.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面回顾并实际上将组件添加到我们的博客项目中。
- en: Using button groups
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用按钮组
- en: 'If you''re new to Bootstrap, button groups are exactly as they sound. They
    are a group of buttons that are connected horizontally or vertically to look like
    a single component. Let''s take a look at the code to render the most basic version
    of the component:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是 Bootstrap 的新手，按钮组听起来就是这样。它们是一组按钮，水平或垂直连接以看起来像一个单一组件。让我们看看代码来渲染组件的最基本版本：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see, we have a group of regular button tags surrounded by `<div>`
    with a class of `.btn-group` on it. At the very least, this is all you need to
    do to render a button group. There are a couple of other optional attributes on
    the `<div>` tag, which are `role` and `aria-label`. If you need to worry about
    accessibility, then you should include those attributes, otherwise they are optional.
    One other small change in this code is I''ve decided to use the `.btn-secondary`
    class to mix things up a bit with the button styles. Let''s take a look at how
    this will appear in the browser:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有一个由 `<div>` 包围的常规按钮标签组，该 `<div>` 上有一个 `.btn-group` 类。至少，这就是您需要做的来渲染一个按钮组。在
    `<div>` 标签上还有一些其他可选属性，即 `role` 和 `aria-label`。如果您需要担心可访问性，那么您应该包括这些属性，否则它们是可选的。在这段代码中还有一个小的变化，我决定使用
    `.btn-secondary` 类来稍微改变一下按钮样式。让我们看看这在浏览器中会如何显示：
- en: '![Using button groups](img/00057.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![使用按钮组](img/00057.jpeg)'
- en: As you can see, we have a single component that is made up of three buttons.
    This component is commonly used for a secondary navigation, or in a form like
    I explained in the previous section. If you'd like to display the buttons vertically,
    that is also possible with a small change.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有一个由三个按钮组成的单一组件。这个组件通常用于次要导航，或者像我之前解释的那样在表单中使用。如果您想以垂直方式显示按钮，这也是可能的，只需稍作更改即可。
- en: Creating vertical button groups
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建垂直按钮组
- en: 'If you''d like to arrange the buttons in your group vertically, that is actually
    quite easy to do. There is no need to change any of the code on the `<button>`
    tags, you just need to update the CSS class name on the wrapping `<div>` tag.
    Here''s the code you need to change:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想以垂直方式排列您组中的按钮，这实际上相当容易做到。您不需要更改 `<button>` 标签上的任何代码，只需更新包装 `<div>` 标签上的
    CSS 类名即可。以下是您需要更改的代码：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you make that alteration to your code, then the same button group will appear
    like this in the browser:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对代码进行那个更改，那么相同的按钮组在浏览器中会显示如下：
- en: '![Creating vertical button groups](img/00058.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![创建垂直按钮组](img/00058.jpeg)'
- en: It would probably have made sense to change the left button label to the top
    and the right button label to the bottom. However, I left them as they are because
    I wanted to show you how you can simply shift the alignment of the group by changing
    one CSS class. That covers the basics of using the button groups component; in
    the next section, I'll show you how to create button drop-down menus.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有必要将左侧按钮标签改为顶部，将右侧按钮标签改为底部。然而，我保留了它们原来的样子，因为我想向您展示您可以通过更改一个 CSS 类简单地改变组的对齐方式。这涵盖了使用按钮组组件的基本知识；在下一节中，我将向您展示如何创建按钮下拉菜单。
- en: Coding a button dropdown
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写按钮下拉菜单
- en: 'The code to render a button as a dropdown is a little bit more complicated
    but still fairly easy to get up and running. You''ll combine a button tag with
    `<div>` that has a nested collection of links inside it. Let''s take a look at
    the code required to render a basic drop-down button:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 将按钮渲染为下拉菜单的代码稍微复杂一些，但仍然相当容易上手。您将结合一个按钮标签和一个 `<div>`，其中包含嵌套的链接集合。让我们看看渲染基本下拉按钮所需的代码：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Okay, there are a few things going on here. Let''s break them down one by one
    and explain how the dropdown works:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这里有几个要点。让我们逐一分析并解释下拉菜单的工作原理：
- en: The entire component needs to be wrapped in a `<div>` with a class of `.btn-group`
    on it.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个组件需要被一个带有 `.btn-group` 类的 `<div>` 包裹。
- en: 'Next you insert a `<button>` tag with some button CSS classes on it. Like in
    the previous section, some of the other attributes are optional. However, it is
    a good idea to include this attribute: `aria-expanded`. This can either be set
    to `false` or `true` and controls whether the dropdown is open or closed on page
    load. In most cases, you will want to set this to `false`.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，您插入一个带有一些按钮 CSS 类的 `<button>` 标签。就像在上一节中一样，一些其他属性是可选的。然而，包含此属性是一个好主意：`aria-expanded`。它可以设置为
    `false` 或 `true`，控制页面加载时下拉菜单是打开还是关闭。在大多数情况下，您会希望将其设置为 `false`。
- en: After the `<button>` tag, insert another `<div>` tag which will hold all the
    links that appear in the drop-down menu list. Make sure you give this `<div>`
    a class of `.dropdown-menu`.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<button>` 标签之后，插入另一个 `<div>` 标签，该标签将包含在下拉菜单列表中出现的所有链接。请确保给这个 `<div>` 一个 `.dropdown-menu`
    类。
- en: Within the second `<div>` you insert a collection of `<a>` tags, one for each
    item in your list. Each `<a>` tag requires a class of `.dropdown-item` so that
    the proper CSS styling is applied.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二个 `<div>` 中，您需要插入一组 `<a>` 标签，每个标签对应列表中的一个项目。每个 `<a>` 标签都需要一个 `.dropdown-item`
    类，以便应用正确的 CSS 样式。
- en: You may also want to insert a divider in your drop-down list if you have a large
    amount of links. This is done by inserting a third `<div>` with a class of `.dropdown-divider`
    on it.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的链接数量很多，您可能还希望在下拉列表中插入一个分隔符。这是通过插入一个带有 `.dropdown-divider` 类的第三个 `<div>`
    来实现的。
- en: 'As I mentioned, this component is a little more complex, but in Bootstrap 4
    they have actually simplified it a bit to make it easier to use. Let''s take a
    look at what it should look like in the browser. In the following screenshot,
    I''ve showed what the expanded version of the dropdown will look like so you can
    see the button and the list of links:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我提到的，这个组件稍微复杂一些，但在 Bootstrap 4 中，他们实际上简化了一些，使其更容易使用。让我们看看它在浏览器中的样子。在下面的屏幕截图中，我展示了下拉菜单展开的样子，以便您可以看到按钮和链接列表：
- en: '![Coding a button dropdown](img/00059.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![编写按钮下拉菜单](img/00059.jpeg)'
- en: As you can see, we have a drop-down button with a list of links nested within
    it. Keep in mind that if you want to use this component, it does require that
    you include jQuery and `bootstrap.min.js` in your template. There are some other
    variations of this component you can easily implement, such as the pop-up menu.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有一个嵌套在其中的链接列表的下拉按钮。请注意，如果您想使用这个组件，确实需要在模板中包含 jQuery 和 `bootstrap.min.js`。您还可以轻松实现这个组件的其他一些变体，例如弹出菜单。
- en: Creating a pop-up menu
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建弹出菜单
- en: 'In some cases, you might want to have your menu pop up above the button instead
    of below it. You can achieve this by adding one class on the wrapping `<div>`
    for the component. Check out the code here:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能希望菜单在按钮上方弹出而不是下方。您可以通过在组件的包装 `<div>` 上添加一个类来实现这一点。查看以下代码：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see, I''ve added the class `.dropup` to the `<div>`. This will make
    the menu appear above the button, and it should look like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我已经将 `.dropup` 类添加到了 `<div>` 上。这将使菜单出现在按钮上方，并且应该看起来像这样：
- en: '![Creating a pop-up menu](img/00060.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![创建弹出菜单](img/00060.jpeg)'
- en: As you can see, the list appears above the button when it is expanded.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，当菜单展开时，列表出现在按钮上方。
- en: Creating different size drop-down buttons
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建不同尺寸的下拉按钮
- en: 'By adding a single class to the `<button>` tag in the dropdown, you can make
    the trigger larger or smaller. Let''s take a look at the code for the smaller
    and larger button variations:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在下拉按钮的 `<button>` 标签上添加一个类，您可以调整触发器的尺寸。让我们看看小按钮和大按钮变体的代码：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you find the button tag in the first example, you'll see I've added a class
    of `.btn-lg` to it. This class will increase the button size to be larger than
    the default. Take a look at the second chunk of code, find the `<button>` tag
    again, and you'll see a class of `.btn-sm` on it. This works the same way except
    the button will now be smaller than the default. Let's see how these buttons will
    render in the browser.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在第一个示例中找到按钮标签，您会看到我为它添加了一个 `.btn-lg` 类。这个类将增加按钮大小，使其比默认值更大。看看代码的第二部分，再次找到
    `<button>` 标签，您会看到它上面有一个 `.btn-sm` 类。这以相同的方式工作，只是按钮现在将比默认值更小。让我们看看这些按钮在浏览器中的渲染效果。
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `.btn-lg` and `.btn-sm` classes are not exclusive to the button drop-down
    component. You can use them on any button component variation you like.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`.btn-lg` 和 `.btn-sm` 类不仅限于按钮下拉组件。您可以在任何您喜欢的按钮组件变体上使用它们。'
- en: '![Creating different size drop-down buttons](img/00061.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![创建不同大小的下拉按钮](img/00061.jpeg)'
- en: That concludes the basics of using the button drop-down component. In the next
    section, we'll cover a more complicated component, which is forms.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了使用按钮下拉组件的基本知识。在下一节中，我们将介绍一个更复杂的组件，即表单。
- en: Coding forms in Bootstrap 4
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Bootstrap 4 中编写表单
- en: If you are familiar with Bootstrap 3, then you'll notice the CSS form classes
    are pretty much the same in version 4\. The biggest change I see in forms for
    the new version is that each form group uses a `<fieldset>` tag instead of `<div>`.
    If you are new to Bootstrap forms, a basic form group is made up of a label and
    an input. It can also include help text, but that is optional. Let's jump right
    in by creating a generic form that uses a number of core components.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉 Bootstrap 3，那么您会注意到 CSS 表单类在版本 4 中几乎相同。我认为新版本中表单的最大变化是每个表单组使用一个 `<fieldset>`
    标签而不是 `<div>`。如果您是 Bootstrap 表单的新手，一个基本的表单组由一个标签和一个输入组成。它还可以包括帮助文本，但这不是必需的。让我们直接创建一个使用多个核心组件的通用表单。
- en: Setting up a form
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置表单
- en: 'At the very least, a form needs to be made up of one input and one button.
    Let''s start with the basics and create a form following those requirements. Here''s
    the code to get you started:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，一个表单需要由一个输入和一个按钮组成。让我们从基础知识开始，创建一个符合这些要求的表单。以下是开始编写的代码：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let me explain what is happening here in the code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我解释一下代码中发生的事情：
- en: Every form needs to start with a `<form>` tag. However, no special classes are
    required on this tag.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个表单都需要从一个 `<form>` 标签开始。然而，这个标签上不需要特殊类。
- en: I've inserted a `<fieldset>` tag with a class of `.form-group` on it for our
    single input. This `<fieldset>` pattern will be repeated in the future when you
    add additional inputs.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我在单个输入上插入了一个带有 `.form-group` 类的 `<fieldset>` 标签。这个 `<fieldset>` 模式将在您添加更多输入时重复使用。
- en: Within the `<fieldset>`, we have a `<label>`. Again, no special CSS classes
    need to be added to the `<label>`.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<fieldset>` 内，我们有一个 `<label>`。同样，不需要添加特殊 CSS 类到 `<label>`。
- en: After the label, you need to insert the form `<input>` tag. In this case, I'm
    using a text input. On this HTML tag, you need to add a class of `.form-control`.
    All input tags in Bootstrap will require this class. The placeholder text is optional
    but nice to add for usability.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在标签之后，您需要插入表单 `<input>` 标签。在这种情况下，我使用的是文本输入。在这个 HTML 标签上，您需要添加一个 `.form-control`
    类。Bootstrap 中的所有输入标签都需要这个类。占位文本是可选的，但为了可用性添加它是很好的。
- en: In the last line of the `<fieldset>`, I've included a `<small>` tag with a class
    of `.text-muted`, which will render the text small and light grey. This is the
    pattern you should use if you want to include some help text with your form input.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<fieldset>` 的最后一行中，我包含了一个带有 `.text-muted` 类的 `<small>` 标签，这将使文本变得小且浅灰色。如果您想在表单输入中包含一些帮助文本，应使用此模式。
- en: Close the `<fieldset>` tag and then you need to add a `<button>` tag for the
    form `submit` button.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭 `<fieldset>` 标签，然后您需要添加一个 `<button>` 标签作为表单的提交按钮。
- en: Close the `<form>` and you are done.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭 `<form>`，您就完成了。
- en: 'After you''ve finished reviewing the code, fire up your web browser, and your
    form should look like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 完成代码审查后，打开您的网页浏览器，您的表单应该看起来像这样：
- en: '![Setting up a form](img/00062.jpeg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![设置表单](img/00062.jpeg)'
- en: You've successfully coded your first Bootstrap 4 form. Let's continue and I'll
    explain how to implement other common form components using the latest version
    of Bootstrap.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经成功编写了第一个 Bootstrap 4 表单。让我们继续，我将解释如何使用 Bootstrap 的最新版本实现其他常见表单组件。
- en: Adding a select dropdown
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加选择下拉菜单
- en: 'Let''s build on our form code by adding a select drop-down menu. Insert the
    following code after our text input:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过添加一个选择下拉菜单来构建我们的表单代码。在我们的文本输入之后插入以下代码：
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s break down the parts of the code you need to be aware of:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一下你需要注意的代码部分：
- en: Note that the entire `<select>` is wrapped in a `<fieldset>` with a class of
    `.form-group`. This pattern should repeat for each type of form input you add.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意，整个 `<select>` 都被一个具有 `.form-group` 类的 `<fieldset>` 包裹。这种模式应该为每个你添加的表单输入类型重复。
- en: On the `<select>` tag, there is a class of `.form-control` that needs to be
    added.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<select>` 标签上，需要添加一个 `.form-control` 类。
- en: Aside from that, you should code the `<select>` as you normally would, following
    the best HTML syntax practices.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了这些，你应该像通常一样编码 `<select>`，遵循最佳 HTML 语法实践。
- en: 'Once you''re done, if you view the form in the browser, it should now look
    like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，如果你在浏览器中查看表单，它现在应该看起来像这样：
- en: '![Adding a select dropdown](img/00063.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![添加选择下拉菜单](img/00063.jpeg)'
- en: That completes the setup for `<select>` dropdowns. Next let's check out the
    `<textarea>` tag.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了 `<select>` 下拉菜单的设置。接下来，让我们检查 `<textarea>` 标签。
- en: Inserting a textarea tag into your form
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在你的表单中插入一个文本区域标签
- en: 'Moving along to the next input type, let''s insert a `<textarea>` tag into
    our form. After the `<select>` menu, add the following code:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将一个 `<textarea>` 标签插入到我们的表单中。在 `<select>` 菜单之后，添加以下代码：
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Using this input is fairly simple. Like our other examples, you need to use
    a `<fieldset>` tag with a CSS class of `.form-group` to wrap the entire thing.
    On the actual `<textarea>` tag, you need to add the `.form-control` class. That''s
    it; once you''re done, your form should now look like this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个输入相当简单。像我们的其他示例一样，你需要使用一个具有 `.form-group` CSS 类的 `<fieldset>` 标签来包裹整个内容。在实际的
    `<textarea>` 标签上，你需要添加 `.form-control` 类。就是这样；一旦完成，你的表单现在应该看起来像这样：
- en: '![Inserting a textarea tag into your form](img/00064.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![在表单中插入文本区域标签](img/00064.jpeg)'
- en: Now that the `<textarea>` is complete, let's move on to the file input form
    field.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在文本区域已经完成，让我们继续到文件输入表单字段。
- en: Adding a file input form field
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加文件输入表单字段
- en: 'Historically, the file input form field has been a tricky one to style with
    CSS. I''m happy to say that in Bootstrap 4 they''ve created a new approach that''s
    the best I''ve seen to date. Let''s start by inserting the following code after
    the `<textarea>` in our form:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 从历史上看，文件输入表单字段一直是用 CSS 样式化的难题。我很高兴地说，在 Bootstrap 4 中，他们创造了一种新的方法，这是我迄今为止看到最好的。让我们首先在我们的表单中的
    `<textarea>` 之后插入以下代码：
- en: '[PRE13]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Again, this form field is constructed in the same manner as the previous ones.
    However, there is one small change you need to be aware of with the **File input**
    field. On the `<input>` tag, you need to change the CSS class to `.form-control-file`.
    There are some specific styles being applied to clean up the look and feel of
    this form field. Once you''re done, your form should look like this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这个表单字段是以与前面相同的方式构建的。然而，你需要注意的一个小变化是关于 **文件输入** 字段。在 `<input>` 标签上，你需要将 CSS
    类更改为 `.form-control-file`。有一些特定的样式被应用来清理这个表单字段的视觉效果。一旦完成，你的表单应该看起来像这样：
- en: '![Adding a file input form field](img/00065.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![添加文件输入表单字段](img/00065.jpeg)'
- en: That completes the **File input** field which leaves us with two more basic
    form field inputs to go over. They are radio buttons and checkboxes. Let's learn
    how to add them next.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就完成了 **文件输入** 字段，剩下两个基本表单字段输入需要介绍。它们是单选按钮和复选框。让我们学习如何添加它们。
- en: Inserting radio buttons and checkboxes to a form
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向表单中插入单选按钮和复选框
- en: 'These fields are pretty similar so I''m going to group them together in their
    own section. The code for these two fields differs a little bit from the other
    inputs, as I''ll outline now. First, let''s insert the following code after the
    `File input` field in our form:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字段非常相似，所以我将它们分组在自己的部分中。这两个字段的代码与其他输入略有不同，我将现在概述。首先，让我们在我们的表单中的“文件输入”字段之后插入以下代码：
- en: '[PRE14]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s start by going over the radio button code first, then we''ll move on
    to the checkbox:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从单选按钮的代码开始，然后我们将转到复选框：
- en: The fields don't use the `<fieldset>` tag as the wrapper. In this case, you
    should use a `<div>` and give it a class of either `.radio` or `.checkbox`, depending
    on what type you want to use.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段不使用 `<fieldset>` 标签作为包装器。在这种情况下，你应该使用一个 `<div>` 并给它一个 `.radio` 或 `.checkbox`
    类，具体取决于你想要使用哪种类型。
- en: For these fields, the `<label>` tag will also wrap around the `<input>` tag
    so that everything is displayed in a horizontal line. We don't want the text label
    to drop down below the radio button or checkbox.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于这些字段，`<label>` 标签也将围绕 `<input>` 标签包裹，使所有内容都显示在同一水平线上。我们不希望文本标签掉到单选按钮或复选框下面。
- en: You don't need a special class on the `<input>` for either of these fields.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不需要为这些字段中的任何一个在 `<input>` 上使用特殊类。
- en: 'As you can see, the code for these fields is a bit different from what we''ve
    learned about the other form inputs. Not to worry, as they are pretty easy to
    use and there aren''t a bunch of CSS classes you have to memorize. One of the
    nicest changes with forms in Bootstrap 4 is that they require less HTML markup,
    so are easier to write. Finally, if you view our form in the browser, it should
    look like this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这些字段的代码与我们之前学到的其他表单输入有所不同。不用担心，它们使用起来很简单，而且不需要记住很多 CSS 类。Bootstrap 4 中表单的一个非常好的变化是它们需要的
    HTML 标记更少，因此更容易编写。最后，如果你在浏览器中查看我们的表单，它应该看起来像这样：
- en: '![Inserting radio buttons and checkboxes to a form](img/00066.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![向表单中插入单选按钮和复选框](img/00066.jpeg)'
- en: That completes the explanation of all the core form fields that you need to
    know how to use in Bootstrap 4\. Before we move on to some more advanced form
    fields and variations, why don't we add a form to our blog project?
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了所有核心表单字段的解释，这些字段是你在 Bootstrap 4 中需要知道如何使用的。在我们继续到一些更高级的表单字段和变体之前，为什么不把我们自己的表单添加到博客项目中呢？
- en: Adding a form to the blog contact page
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将表单添加到博客联系页面
- en: I know, I know. I said we would wait till the end of the chapter to build components
    into the blog project. However, I'm thinking you might like a break from learning
    and actually add some of what you've learned to your project. Let's go ahead and
    do just that by filling in a form on the **Contact** page.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道，我知道。我说过我们会等到本章的结尾再构建组件到博客项目中。然而，我想你可能想从学习中休息一下，并将你学到的一些东西应用到你的项目中。让我们继续这样做，通过在**联系**页面上填写表单来实现这一点。
- en: Updating your project
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新你的项目
- en: 'Let''s start by opening up our project directory and finding the file named
    `contact.ejs`. Open up that file in your text editor and we are going to add some
    new form code and remove some filler code. To start, find the body section of
    the page that is wrapped in the following column `<div>`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先打开我们的项目目录，找到名为 `contact.ejs` 的文件。在文本编辑器中打开该文件，我们将添加一些新的表单代码并删除一些填充代码。首先，找到页面中以下列
    `<div>` 包裹的正文部分：
- en: '[PRE15]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Within that `<div>` is currently some filler text. Remove that text and replace
    it with the following form code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个 `<div>` 中目前有一些填充文本。删除该文本，并用以下表单代码替换：
- en: '[PRE16]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'I''ve coded up a basic contact form that you''ll commonly see on a blog. It
    has e-mail, name, and message fields along with a **submit** button. Save your
    file and then preview your project in a browser. The **Contact** page should now
    look like this:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经编写了一个基本的联系表单，你通常会在博客上看到。它包含电子邮件、姓名和消息字段，以及一个**提交**按钮。保存你的文件，然后在浏览器中预览你的项目。现在**联系**页面应该看起来像这样：
- en: '![Updating your project](img/00067.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![更新你的项目](img/00067.jpeg)'
- en: That concludes the updates to the **Contact** page for now. Later on in the
    book, we'll add some additional components to this page. Let's jump back into
    learning about forms in Bootstrap 4 by reviewing some additional form controls.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了目前对**联系**页面的更新。在本书的后面，我们将向这个页面添加一些额外的组件。让我们回到学习 Bootstrap 4 中的表单，通过回顾一些额外的表单控件。
- en: Additional form fields
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外的表单字段
- en: Now that we've learned how to build a basic form and added one to our project,
    let's circle back and talk about some more advanced form fields and variations
    you can apply with Bootstrap 4\. I'm going to start by showing you how to lay
    out forms in a few different ways.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何构建基本的表单并将其添加到我们的项目中，让我们回顾一下一些更高级的表单字段和变体，你可以使用 Bootstrap 4 应用。我将首先向你展示如何以几种不同的方式布局表单。
- en: Creating an inline form
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建内联表单
- en: 'Let''s start by learning how to create an inline form. This is a layout you
    might want to use in the header of a project or perhaps for a login page. In this
    case, we''re going to align the fields and buttons of the form vertically across
    the page. For this example, let''s create a simple login form with the following
    code:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先学习如何创建内联表单。这是一个你可能想在项目标题或登录页面中使用的布局。在这种情况下，我们将使表单的字段和按钮垂直排列在整个页面上。为了这个例子，让我们创建一个简单的登录表单，代码如下：
- en: '[PRE17]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'There are a few things going on in this form, so let me explain them for you:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个表单中发生了一些事情，所以让我为你解释一下：
- en: For inline forms, we need to add a CSS class named `.form-inline` to the `<form>`
    tag.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于内联表单，我们需要在 `<form>` 标签中添加一个名为 `.form-inline` 的 CSS 类。
- en: You'll also notice the `<fieldset>` tags have been replaced with `<div>` tags.
    This is so they can be set to `display` as `inline-block`, which won't work with
    a fieldset.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还会注意到 `<fieldset>` 标签已经被 `<div>` 标签替换。这样做是为了它们可以被设置为 `display` 为 `inline-block`，这在字段集中是不行的。
- en: 'Aside from those two differences, the form is coded up the same way as a regular
    one. Once you''re done, your form should look like this in the browser:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这两个区别之外，表单的编码方式与常规表单相同。一旦完成，你的表单在浏览器中应该看起来像这样：
- en: '![Creating an inline form](img/00068.jpeg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![创建内联表单](img/00068.jpeg)'
- en: If you're like me, you might find the labels next to the text inputs kind of
    ugly. The good news is there is an easy way to hide them.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你像我一样，你可能会觉得文本输入旁边的标签有点丑。好消息是有一个简单的方法可以隐藏它们。
- en: Hiding the labels in an inline form
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在内联表单中隐藏标签
- en: 'The reason those labels are there is for accessibility and screen readers.
    We don''t want to remove them altogether from the code, but we can hide them by
    adding a CSS class named `.sr-only`. This class stands for **screen reader only**
    and will therefore only show the labels if they are viewed on an accessible screen
    reader. Here is an example of how to add the CSS class:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 那些标签存在的原因是为了无障碍性和屏幕阅读器。我们不想完全从代码中移除它们，但我们可以通过添加一个名为 `.sr-only` 的 CSS 类来隐藏它们。这个类代表
    **仅屏幕阅读器**，因此只有在可访问的屏幕阅读器上查看时才会显示标签。以下是如何添加该 CSS 类的示例：
- en: '[PRE18]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After you apply that CSS class to all the labels in the form, it should now
    appear like this in the browser:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在你将这个 CSS 类应用到表单中的所有标签之后，现在在浏览器中应该看起来像这样：
- en: '![Hiding the labels in an inline form](img/00069.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![在内联表单中隐藏标签](img/00069.jpeg)'
- en: That concludes how to make a basic inline form. However, what if you want to
    include other fields in an inline manner? Let's see how we can add checkboxes
    and radios.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了如何制作一个基本的内联表单。然而，如果你想在内联方式中包含其他字段怎么办？让我们看看我们如何添加复选框和单选按钮。
- en: Adding inline checkboxes and radio buttons
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加内联复选框和单选按钮
- en: 'If you''d like to include checkboxes and radio buttons to an inline form you
    need to make some changes to your code. Let''s start by going over the checkbox
    code. Insert the following code after the last text input in the inline form:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在内联表单中包含复选框和单选按钮，你需要对你的代码做一些修改。让我们首先来看一下复选框的代码。在表单中的最后一个文本输入之后插入以下代码：
- en: '[PRE19]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'There are a couple of things here that you need to be aware of:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个需要注意的地方：
- en: First, there is no longer a `<div>` wrapped around the checkbox
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，复选框周围不再有 `<div>` 包裹
- en: You need to add a class named `.checkbox-inline` to the checkbox's `<label>`
    tag
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要给复选框的 `<label>` 标签添加一个名为 `.checkbox-inline` 的类
- en: 'Once you do this, save your form and it should look like this in the browser:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你这样做，保存你的表单，它应该在浏览器中看起来像这样：
- en: '![Adding inline checkboxes and radio buttons](img/00070.jpeg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![添加内联复选框和单选按钮](img/00070.jpeg)'
- en: 'Now that we''ve added the checkbox, let''s check out an example using radio
    buttons. Add the following code to your form after the checkbox code:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了复选框，让我们看看使用单选按钮的示例。在复选框代码之后添加以下代码：
- en: '[PRE20]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As you can see, the pattern here is exactly the same. The `<div>` around each
    radio button has been removed. Instead, there is a CSS class named `.radio-inline`
    that needs to be added to each radio `<label>` tag. Once you''ve completed this
    step, your form should look like this:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这里的模式完全相同。每个单选按钮周围的 `<div>` 都已被移除。取而代之的是，每个单选 `<label>` 标签需要添加一个名为 `.radio-inline`
    的 CSS 类。一旦完成这一步，你的表单应该看起来像这样：
- en: '![Adding inline checkboxes and radio buttons](img/00071.jpeg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![添加内联复选框和单选按钮](img/00071.jpeg)'
- en: That completes everything you need to know about inline forms. Let's now move
    on to some more utility-type actions that you can apply to your form fields.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了你需要了解的所有关于内联表单的内容。现在让我们继续学习一些可以应用到你的表单字段上的更多实用类操作。
- en: Changing the size of inputs
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改变输入的大小
- en: 'Bootstrap comes with a few handy utility CSS classes that you can use with
    form fields to have them appear at different sizes. Along with the default size,
    you can choose to display your fields in a larger or smaller size. Let''s take
    a look at the code to render all three size variations:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 提供了一些方便的实用 CSS 类，你可以与表单字段一起使用，使它们以不同的尺寸显示。除了默认尺寸外，你可以选择以更大的或更小的尺寸显示你的字段。让我们看看渲染所有三种尺寸变体的代码：
- en: '[PRE21]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To use the different size inputs, you simply have to add an additional class
    to the tag:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用不同大小的输入，你只需在标签中添加一个额外的类：
- en: For a larger input, use the class `.form-control-lg`
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于较大的输入，使用类 `.form-control-lg`
- en: For a smaller input, use the class `.form-control-sm`
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于较小的输入，使用类 `.form-control-sm`
- en: The default input size requires no extra CSS class
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认输入大小不需要额外的 CSS 类
- en: 'Here''s how each version looks in the browser:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这是每个版本在浏览器中的样子：
- en: '![Changing the size of inputs](img/00072.jpeg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![更改输入的大小](img/00072.jpeg)'
- en: As you can see, the larger input is taller and has some additional padding.
    The smaller input is shorter with reduced padding. These classes only cover the
    vertical size of an input. Now let's learn how to control the width of inputs.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，较大的输入更高，并且有一些额外的填充。较小的输入较短，填充减少。这些类仅覆盖输入的垂直尺寸。现在让我们学习如何控制输入的宽度。
- en: Controlling the width of form fields
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制表单字段的宽度
- en: Since Bootstrap is a mobile-first framework, form fields are designed to stretch
    to fit the width of their column. Therefore, if you are using `.col-md-12` for
    your column class, the field is going to stretch to the width of the layout. This
    may not always be what you want, you may only want the input to stretch to half
    of the width of the layout.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Bootstrap 是一个以移动设备优先的框架，表单字段被设计为可以扩展以适应其列的宽度。因此，如果你为你的列类使用了 `.col-md-12`，字段将扩展到布局的宽度。这可能并不总是你想要的，你可能只想让输入扩展到布局宽度的一半。
- en: 'If this is the case, you need to wrap your field in a `<div>` with a column
    class on it to control the width. Let''s check out some example code to get the
    point across:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样，你需要将你的字段包裹在一个带有列类的 `<div>` 中以控制宽度。让我们看看一些示例代码来阐明这个点：
- en: '[PRE22]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the preceding code, I''ve removed some of the labels and other form code
    to make it easier to see what is going on. Here''s a breakdown of what you need
    to know:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我移除了一些标签和其他表单代码，以便更容易看到正在发生的事情。以下是你需要了解的要点分解：
- en: You need to wrap your input in a `<div>` with a column class on it
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要将你的输入包裹在一个带有列类的 `<div>` 中
- en: The first input will stretch to the width of the layout because of the `.col-md-12`
    class
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个输入将因为 `.col-md-12` 类而扩展到布局的宽度
- en: The second input will only stretch to fill 50% of the layout because of the
    `.col-md-6 class`
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个输入将只扩展到填充 50% 的布局，因为使用了 `.col-md-6` 类
- en: 'Let''s take a look at how this will look in the actual browser:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这将在实际浏览器中看起来如何：
- en: '![Controlling the width of form fields](img/00073.jpeg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![控制表单字段的宽度](img/00073.jpeg)'
- en: As you can see, the second input only stretches to half of the width. This is
    how you can control the width of inputs if you don't want them to fill the entire
    layout of your page. The last thing I'd like to cover when it comes to forms is
    validation of input fields.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，第二个输入只扩展到一半的宽度。这就是如果你不想让输入填充整个页面布局时如何控制输入宽度。在讨论表单时，我想最后讨论的是输入字段的验证。
- en: Adding validation to inputs
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加输入验证
- en: 'Bootstrap 4 comes with some powerful yet easy to use validation styles for
    input fields. Validation styles are used to show things such as errors, warnings,
    and success states for form fields when you submit the actual form. Let''s take
    a look at the code to render all three validation states:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 4 为输入字段提供了一些强大且易于使用的验证样式。验证样式用于在提交实际表单时显示错误、警告和成功状态。让我们看看渲染所有三个验证状态的代码：
- en: '[PRE23]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The markup for each validation variation is very similar to a regular input
    with the addition of a few CSS classes to apply the proper state look and feel.
    Let''s go over each change you need to be aware of:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 每个验证变体的标记与常规输入非常相似，只是增加了一些 CSS 类来应用正确的状态外观和感觉。让我们逐一了解你需要注意的每个更改：
- en: The first input is the success state. The wrapping `<div>` needs to have a class
    called `.has-success` added to it.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个输入是成功状态。需要将一个名为 `.has-success` 的类添加到包裹 `<div>` 中。
- en: Each `<label>` tag needs to have a class named `.form-control-label` added to
    it. This is required to color the label to match the state color.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 `<label>` 标签都需要添加一个名为 `.form-control-label` 的类。这是为了使标签颜色与状态颜色相匹配。
- en: The success input requires a class named `.form-control-success`.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成功输入需要添加一个名为 `.form-control-success` 的类。
- en: The second input is the warning state. The wrapping `<div>` needs a class named
    `.has-warning` added to it.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个输入是警告状态。包裹 `<div>` 需要添加一个名为 `.has-warning` 的类。
- en: The warning input also needs a class named `.form-control-warning` added.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警告输入也需要添加一个名为 `.form-control-warning` 的类。
- en: Finally, the last input is the danger or error state. The wrapping `<div>` needs
    to have a class named `.has-danger` added.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，最后一个输入是危险或错误状态。包装 `<div>` 需要添加一个名为 `.has-danger` 的类。
- en: The danger input also needs a class named `.form-control-danger` added.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 危险输入也需要添加一个名为 `.form-control-danger` 的类。
- en: 'Let''s take a look at how all these validation inputs should look in the browser:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看所有这些验证输入在浏览器中应该如何显示：
- en: '![Adding validation to inputs](img/00074.jpeg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![添加输入验证](img/00074.jpeg)'
- en: As you can see, the inputs and labels are colored to match their state. You'll
    also notice each input has an icon to the right edge of it. These icons are automatically
    added when you include the required CSS files. There is no need to actually use
    any images here, which is great. That concludes everything that you need to know
    about forms in Bootstrap 4\. In the next section, I'll teach you about the **Jumbotron**
    component.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，输入和标签的颜色与它们的状态相匹配。您还会注意到每个输入的右侧都有一个图标。这些图标在包含所需的 CSS 文件时自动添加。实际上在这里不需要使用任何图像，这真是太好了。这也就结束了您需要了解的所有关于
    Bootstrap 4 中表单的内容。在下一节中，我将教您关于 **Jumbotron** 组件的内容。
- en: Using the Jumbotron component
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jumbotron 组件
- en: 'If you''re new to Bootstrap, you may be asking yourself what the heck is a
    Jumbotron component. Jumbotron is used to feature a block of content, usually
    at the top of your page. This is your standard main feature block that you''ll
    see on a number of websites. If you require something more sophisticated than
    a simple page title, Jumbotron is the component you''ll want to use. Let''s take
    a quick look at the code required to create this component:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是 Bootstrap 的新手，您可能会问自己 Jumbotron 组件是什么东西。Jumbotron 用于展示内容块，通常位于页面顶部。这是您在许多网站上都会看到的标准主要功能块。如果您需要比简单的页面标题更复杂的东西，Jumbotron
    就是您想要使用的组件。让我们快速看一下创建此组件所需的代码：
- en: '[PRE24]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'There are some new CSS classes here that we need to review, as well as some
    existing ones we have already learned about. Let''s break down what''s happening
    in the code:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些新的 CSS 类需要我们回顾，以及一些我们已经学过的现有类。让我们分析一下代码中发生的事情：
- en: The Jumbotron component is based off a `<div>` with a CSS class named `.jumbotron`.
    Within this `<div>`, you can pretty much use whatever text formatting tags you
    like. However, there are a few basics you should include to make it look good.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jumbotron 组件基于一个带有 `.jumbotron` CSS 类的 `<div>`。在这个 `<div>` 中，您几乎可以使用您喜欢的任何文本格式化标签。然而，有一些基本的东西您应该包括，以便使其看起来更好。
- en: The first tag you'll see is the `<h1>` with a class of `.display-3` on it. Since
    the Jumbotron is more of a "display" component, you'll want to beef up the size
    of your `<h1>` by using the optional class we learned about earlier in the book.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您首先会看到一个带有 `.display-3` 类的 `<h1>` 标签。由于 Jumbotron 更像是一个“显示”组件，您可能希望使用本书之前学到的可选类来增加
    `<h1>` 的大小。
- en: Next, you'll see a simple `<p>` tag for the feature's tagline. On that tag,
    there is a class named `.lead`. This class increases the base font size by 25%
    and sets the `font-weight` to `300` which is a lighter weight. Again, this gives
    the Jumbotron component more of a "feature" like look and feel.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，您将看到一个简单的 `<p>` 标签，用于功能的标语。在这个标签上，有一个名为 `.lead` 的类。这个类将基本字体大小增加 25%，并将 `font-weight`
    设置为 `300`，这是一个较轻的重量。同样，这给了 Jumbotron 组件更多的“功能”外观和感觉。
- en: After the tagline text, you'll see an `<hr>` tag with a class of `.m-y-2` on
    it. If you remember, this is a utility spacing class. The `-y` in this case will
    add a `margin` above and below the `<hr>` tag.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在标语文本之后，您将看到一个带有 `.m-y-2` 类的 `<hr>` 标签。如果您还记得，这是一个实用间距类。在这种情况下，`-y` 会为 `<hr>`
    标签上方和下方添加 `margin`。
- en: Next we have another `<p>` tag with some additional descriptive text in it.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们还有一个带有一些附加描述文本的 `<p>` 标签。
- en: Finally, we have a `<button>` wrapped in a `<p>` tag so that there is a conclusion
    to the call to action in the Jumbotron block. Note that the user of the `.btn-lg`
    class will produce a larger-sized button.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们有一个 `<button>` 被一个 `<p>` 标签包裹，以便在 Jumbotron 块中有一个行动呼吁的结论。请注意，使用 `.btn-lg`
    类的用户将产生一个更大尺寸的按钮。
- en: 'After you''ve coded up your Jumbotron component, it should look like this in
    the browser:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在您编写完 Jumbotron 组件后，在浏览器中应该看起来像这样：
- en: '![Using the Jumbotron component](img/00075.jpeg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Jumbotron 组件](img/00075.jpeg)'
- en: 'By default, the Jumbotron component will stretch to fit the width of the column
    it is contained within. In most cases, you''ll likely want it to span the entire
    width of your page. However, in some cases, you might want a Jumbotron to stretch
    from one edge of the browser to the other without any horizontal padding on it.
    If this is the case, you need to add the `.jumbotron-fluid` class to the main
    `<div>` and make sure it is outside of a Bootstrap `.container`. Let''s take a
    look at the following code to see what I mean:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，巨幕组件将扩展以适应其包含的列的宽度。在大多数情况下，您可能希望它跨越整个页面的宽度。然而，在某些情况下，您可能希望巨幕从浏览器的一边延伸到另一边，没有任何水平填充。如果是这种情况，您需要向主`<div>`添加`.jumbotron-fluid`类，并确保它位于Bootstrap
    `.container`之外。让我们看看以下代码，以了解我的意思：
- en: '[PRE25]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As you can see, the `.container <div>` is now inside of the Jumbotron `<div>`.
    This is how you remove the horizontal padding on the section. Once completed,
    it should look like this in the browser:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`.container <div>`现在位于`Jumbotron <div>`内部。这就是如何移除该部分的水平填充。一旦完成，在浏览器中应该看起来像这样：
- en: '![Using the Jumbotron component](img/00076.jpeg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![使用巨幕组件](img/00076.jpeg)'
- en: That concludes the use of the Jumbotron component in Bootstrap 4\. Next let's
    move on to learning how to use the Label component.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了Bootstrap 4中巨幕组件的使用。接下来，让我们继续学习如何使用标签组件。
- en: Adding the Label component
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加标签组件
- en: 'The Label component is used to add context to different types of content. A
    good example would be notifications on an application. You might use a label to
    indicate how many unread emails there are in an email app. Another would be to
    insert a warning tag next to an item in a table or list. Like buttons, labels
    are available in a number of color variations to meet your needs in your project.
    Let''s take a look at the code to render the basic label options:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 标签组件用于为不同类型的内容添加上下文。一个很好的例子是在应用程序中的通知。您可能会使用标签来指示电子邮件应用程序中有多少未读电子邮件。另一个例子是在表格或列表中的项目旁边插入警告标签。像按钮一样，标签有多种颜色变体，以满足您在项目中的需求。让我们看看代码，以了解如何渲染基本的标签选项：
- en: '[PRE26]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You''ll likely notice some similarities here with the Button component CSS
    classes. When using a label, you should use the `<span>` tag as your base for
    the component. Here are some more important facts when using this component:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到这里与按钮组件CSS类的相似之处。当使用标签时，您应该使用`<span>`标签作为组件的基础。当使用此组件时，以下是一些更重要的事实：
- en: Every variation of the Label component requires the use of the `.label` class
    on the `<span>` tag
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签组件的每个变体都需要在`<span>`标签上使用`.label`类
- en: The **Default** label uses the `.label-default` class and is grey
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认**标签使用`.label-default`类，颜色为灰色'
- en: The **Primary** label uses the `.label-primary` class and is blue
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要**标签使用`.label-primary`类，颜色为蓝色'
- en: The **Success** label uses the `.label-success` class and is green
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成功**标签使用`.label-success`类，颜色为绿色'
- en: The **Info** label uses the `.label-info` class and is light blue
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息**标签使用`.label-info`类，颜色为浅蓝色'
- en: The **Warning** label uses the `.label-warning` class and is yellow
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警告**标签使用`.label-warning`类，颜色为黄色'
- en: Finally, the **Danger** label uses the `.label-danger` class and is red
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，**危险**标签使用`.label-danger`类，颜色为红色
- en: 'Once you''ve coded that up, it should look like this in your browser:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 编码完成后，在您的浏览器中应该看起来像这样：
- en: '![Adding the Label component](img/00077.jpeg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![添加标签组件](img/00077.jpeg)'
- en: 'By default, labels will be rectangular with slightly rounder corners. If you''d
    like to display them in pill format, you can do so by adding the `.label-pill`
    class to the `<span>` tag. Here''s an example to see what I mean:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，标签将是矩形，并且角落略微圆润。如果您想以药丸格式显示它们，可以通过向`<span>`标签添加`.label-pill`类来实现。以下是一个示例，以说明我的意思：
- en: '[PRE27]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If you add that class to your labels, they should look like this in the browser:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将此类添加到标签中，它们在浏览器中应该看起来像这样：
- en: '![Adding the Label component](img/00078.jpeg)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![添加标签组件](img/00078.jpeg)'
- en: That concludes the Label component in Bootstrap 4\. Next, I'll teach you how
    to use the Alerts component.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了Bootstrap 4中的标签组件。接下来，我将教您如何使用警报组件。
- en: Using the Alerts component
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用警报组件
- en: 'The Alerts component in Bootstrap provides contextual messages for typical
    uses, such as validation and general information, that need to stand out more.
    Like our previous components, it comes in a few different variations depending
    on your needs. Let''s start by looking at the basic code required to render the
    different alert options:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap中的Alert组件为典型的用途提供上下文信息，例如验证和一般信息，需要更加突出。像我们之前的组件一样，它有几个不同的变体，取决于你的需求。让我们先看看渲染不同警报选项所需的基本代码：
- en: '[PRE28]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The classes used to create an alert can be added to any block element, but
    for demo purposes we''ll implement them using `<div>` tags. Here are the key points
    you need to know:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 创建警报所使用的类可以添加到任何块元素中，但为了演示目的，我们将使用`<div>`标签来实现。以下是你需要知道的关键点：
- en: Any instance of the Alert component will require the use of the `.alert` CSS
    class on the `<div>` tag
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何Alert组件的实例都需要在`<div>`标签上使用`.alert`CSS类
- en: You also need a second CSS class to indicate which version of the alert you
    want to use
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还需要第二个CSS类来指明你想要使用警报的哪个版本
- en: The **Success** alert uses the class `.alert-success` and is green
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成功**警报使用类`.alert-success`，颜色为绿色'
- en: The **Info** alert uses the class `.alert-info` and is blue
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息**警报使用类`.alert-info`，颜色为蓝色'
- en: The **Warning** alert uses the class `.alert-warning` and is yellow
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警告**警报使用类`.alert-warning`，颜色为黄色'
- en: The **Danger** alert uses the class `.alert-danger` and is red
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**危险**警报使用类`.alert-danger`，颜色为红色'
- en: 'Once you''ve set up the code for those alerts, they should look like this in
    the browser:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好那些警报的代码后，在浏览器中它们应该看起来像这样：
- en: '![Using the Alerts component](img/00079.jpeg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![使用Alert组件](img/00079.jpeg)'
- en: That was a basic example of using Alerts. There are some additional things you
    can do to extend this component such as adding a dismiss button.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个使用警报的基本示例。你可以做一些额外的事情来扩展这个组件，比如添加一个关闭按钮。
- en: Adding a dismiss button to alerts
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向警报添加关闭按钮
- en: 'If you want to make your alert bar dismissible, you can add a button to do
    this. To include the link, update the code for your bar, as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要使警报栏可关闭，你可以添加一个按钮来实现。为了包含链接，更新你的栏代码，如下所示：
- en: '[PRE29]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The previous Alert bar code doesn''t change, but you do need to add a button
    before the alert message:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的警报栏代码没有变化，但你确实需要在警报消息之前添加一个按钮：
- en: The `<button>` requires a class named `.close` to appear
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<button>`元素需要名为`.close`的类才能显示'
- en: You'll also need the `data-dismiss` attribute to be included with a value of
    `alert`
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还需要包含`data-dismiss`属性，其值为`alert`。
- en: The `&times;` code will be rendered as an **X** in the browser
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`&times;`代码在浏览器中将被渲染为**X**'
- en: 'Once you''ve added the new code, your alert bar should look like this:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新代码后，你的警报栏应该看起来像这样：
- en: '![Adding a dismiss button to alerts](img/00080.jpeg)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![向警报添加关闭按钮](img/00080.jpeg)'
- en: Now your alert bar has a dismissible **X** button that can be triggered to close
    when you implement the functionality of the component in your app or website.
    That completes the Alert component in Bootstrap 4\. In the next section, I'll
    teach you about the best new component in version 4, which is Cards.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的警报栏有一个可关闭的**X**按钮，当你在你应用或网站中实现组件的功能时可以触发关闭。这完成了Bootstrap 4中的Alert组件。在下一节中，我将教你关于版本4中最好的新组件——Cards。
- en: Using Cards for layout
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cards进行布局
- en: In my opinion, the best new feature in Bootstrap 4 is the new Card component.
    If you're unfamiliar with Cards, they were made popular with the release of Google
    Material Design. They are a mobile first content container that works well for
    phones, tablets, and the desktop.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，Bootstrap 4中最好的新特性是新的Card组件。如果你不熟悉Cards，它们随着Google Material Design的发布而变得流行。它们是一个以移动端优先的内容容器，非常适合手机、平板电脑和桌面电脑。
- en: 'We''ll be using the Card component heavily in our blog project so let''s jump
    right in and start learning how to use them. Check out the following code to learn
    how to render a basic card:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的博客项目中，我们将大量使用Card组件，所以让我们直接开始学习如何使用它们。查看以下代码以了解如何渲染一个基本的卡片：
- en: '[PRE30]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'There are a number of new CSS classes you need to be aware of here, so let''s
    go through them one by one:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些新的CSS类你需要了解，让我们逐一介绍：
- en: Any instance of the Card component must use a `<div>` tag with a CSS class named
    `.card` on it.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何Card组件的实例都必须使用带有名为`.card`的CSS类的`<div>`标签。
- en: If you wish to include an image inside your card, it comes next. The image requires
    a class named `.card-img-top` to display the image at the top of the card. Although
    not required, I would also recommend adding the class `.img-fluid` to your image.
    This will make the image responsive so that it will automatically resize to match
    the width of your card.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想在卡片内包含图片，它应该放在这里。图片需要一个名为 `.card-img-top` 的类来在卡片顶部显示图片。虽然不是必需的，但我还建议您为图片添加
    `.img-fluid` 类。这将使图片响应式，以便它将自动调整大小以匹配卡片的宽度。
- en: After the image, you need to start a new `<div>` with a CSS class named `.card-block`.
    This part of the Card will contain the actual textual content.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图片之后，您需要开始一个新的 `<div>`，并给它一个名为 `.card-block` 的 CSS 类。这个卡片的部分将包含实际的文本内容。
- en: The first thing your card should have is a title. Use an `<h4>` tag with a CSS
    class of `.card-title` for this section.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的卡片首先应该有一个标题。使用带有 `.card-title` CSS 类的 `<h4>` 标签来创建这个部分。
- en: Next, you can insert a paragraph of text with a `<p>` tag and a class of `.card-text`.
    If you choose to have multiple paragraphs, make sure each one uses that same class
    name.
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，您可以使用 `<p>` 标签和 `.card-text` 类插入一段文本。如果您选择有多个段落，请确保每个段落都使用相同的类名。
- en: Finally, I've inserted a primary `<button>` so the user has something to click
    on to view the full piece of content.
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我插入了一个主要的 `<button>`，这样用户就有东西可以点击来查看完整的内容。
- en: 'After you''ve finished coding this up, it should appear like this in your browser.
    Note for demo purposes, I''ve included an image of my own so you can see how it
    works. You''ll need to provide your own images for your projects:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在您完成编码后，它应该在您的浏览器中看起来像这样。注意，出于演示目的，我包含了我自己的图片，以便您可以看到它是如何工作的。您需要为您的项目提供自己的图片：
- en: '![Using Cards for layout](img/00081.jpeg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![使用卡片进行布局](img/00081.jpeg)'
- en: As you can see, this will render a neat-looking little content component that
    you can use in many different ways. Let's move on by learning some other ways
    that you can customize the Card component.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这将渲染一个看起来整洁的小内容组件，您可以用许多不同的方式使用它。让我们继续学习一些其他可以自定义卡片组件的方法。
- en: Moving the Card title
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动卡片标题
- en: 'Perhaps you want to move the title of your card above the image? This is actually
    really easy to do, you simply need to move the `<title>` tag before the image
    in the flow of the component, like this:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 也许您想将卡片的标题移动到图片上方？这实际上非常简单，您只需将 `<title>` 标签移动到组件流中的图片之前即可，就像这样：
- en: '[PRE31]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'There are a couple of things here that you need to know about:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些您需要了解的事情：
- en: There are now two instances of `<div class="card-block">` in this card. It is
    perfectly fine to reuse this section within a single card. You'll notice that
    the header tag is wrapped inside of this `<div>`. This is required to apply the
    proper padding and margin around the title in the card.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个卡片中现在有两个 `<div class="card-block">` 实例。在单个卡片内重复使用这个部分是完全可行的。您会注意到标题标签被包裹在这个
    `<div>` 内。这是必需的，以便在卡片中的标题周围应用适当的填充和边距。
- en: The second thing you need to note is that the header tag has been moved above
    the image in the Card layout.
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二件事您需要注意是，标题标签在卡片布局中已经被移动到图片上方。
- en: 'After making this change, your card should look like this:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行这个更改后，您的卡片应该看起来像这样：
- en: '![Moving the Card title](img/00082.jpeg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![移动卡片标题](img/00082.jpeg)'
- en: Hopefully this shows you how easy it is to work with different content in cards.
    Let's continue by showing some other things that you can do.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这展示了在卡片中处理不同内容是多么容易。让我们继续展示您可以做的其他一些事情。
- en: Changing text alignment in cards
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改变卡片中的文本对齐方式
- en: 'By default, text and elements will always align left in a card. However, it
    is possible to change this quite easily. Let''s create a second card and then
    we''ll center one and right align the other. I''m going to remove the image so
    the code is easier to understand:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，文本和元素在卡片中总是左对齐。但是，您可以非常容易地更改这一点。让我们创建第二个卡片，然后我们将居中一个并右对齐另一个。我将移除图片，以便代码更容易理解：
- en: '[PRE32]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Not much has changed here, but let''s go over what is different:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有太多变化，但让我们来看看有什么不同：
- en: First, as I mentioned, I removed the image to make the code simpler
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，正如我提到的，我移除了图片以使代码更简单。
- en: On the first card, I've added a class of `.text-xs-center`, which will center
    the text in the card
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一张卡片上，我添加了一个名为 `.text-xs-center` 的类，这将使卡片中的文本居中。
- en: On the second card, I added a class named `.text-xs-right`, which will right
    align everything
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二张卡片上，我添加了一个名为 `.text-xs-right` 的类，这将使所有内容右对齐。
- en: 'That''s all you need to do. If you view this in the browser it should look
    like this:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你需要做的全部。如果你在浏览器中查看它，它应该看起来像这样：
- en: '![Changing text alignment in cards](img/00083.jpeg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![更改卡片中的文本对齐方式](img/00083.jpeg)'
- en: So with one additional CSS class we can easily control the alignment of the
    text and elements in a card. Cards are a pretty powerful component, so let's continue
    to learn how you can customize them.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，通过添加一个额外的 CSS 类，我们可以轻松地控制卡片中文本和元素的对齐方式。卡片是一个非常强大的组件，所以让我们继续学习如何自定义它们。
- en: Adding a header to a Card
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加卡片标题
- en: 'If you want to add a header to your Card, this is also pretty easy to do. Check
    out this code sample to see it in action:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想给你的卡片添加一个标题，这也很容易做到。查看这个代码示例，看看它是如何工作的：
- en: '[PRE33]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'With the addition of a new section of code, we can add a header:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加新的代码部分，我们可以添加一个标题：
- en: Before the `.card-block` section, insert a new `<div>` with a class named `.card-header`
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `.card-block` 部分之前，插入一个新的 `<div>`，并给它一个名为 `.card-header` 的类
- en: Within this new `<div>`, you can add the header title
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个新的 `<div>` 中，你可以添加标题
- en: 'Save your file and check it out in the browser, and it should look like this:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 保存你的文件，并在浏览器中查看，它应该看起来像这样：
- en: '![Adding a header to a Card](img/00084.jpeg)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![添加卡片标题](img/00084.jpeg)'
- en: 'That''s a super easy way to add a header section to your card. You can add
    a footer in the same manner. Let''s add some additional code for the footer:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种非常简单的方法，可以将标题部分添加到你的卡片中。你可以用同样的方式添加页脚。让我们添加一些额外的代码来设置页脚：
- en: '[PRE34]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The setup for the footer is very similar to the header; let''s break it down:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 页脚的设置与标题非常相似；让我们将其分解：
- en: This time, below the `.card-block` section, insert a new `<div>` with a class
    named `.card-footer`
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这次，在 `.card-block` 部分下方，插入一个新的 `<div>`，并给它一个名为 `.card-footer` 的类
- en: Inside this new `<div>`, insert your footer text
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个新的 `<div>` 中，插入你的页脚文本
- en: 'Save the file again and view it in the browser, and it should look like this:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 再次保存文件，并在浏览器中查看，它应该看起来像这样：
- en: '![Adding a header to a Card](img/00085.jpeg)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![添加卡片标题](img/00085.jpeg)'
- en: Easy as that, we've now also included a footer with our Card. Next, let's learn
    a way to apply a different look and feel to our Card.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 如此简单，我们现在也包含了我们的卡片页脚。接下来，让我们学习一种为我们的卡片应用不同外观和感觉的方法。
- en: Inverting the color scheme of a Card
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反转卡片的配色方案
- en: 'In some cases, you may want a different look and feel for your Card to make
    it stand out more. There are some CSS classes included with Bootstrap that will
    allow you to inverse the color scheme. Let''s take a look at the code to apply
    this style:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你可能想要为你的卡片应用不同的外观和感觉，使其更加突出。Bootstrap 包含了一些 CSS 类，允许你反转配色方案。让我们看看应用这种样式的代码：
- en: '[PRE35]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Again, this variation is pretty easy to apply with a couple of small changes:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这种变化通过几个小的修改很容易应用：
- en: On the `<div>` with the `.card` class, add a second class named `.card-inverse`.
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在具有 `.card` 类的 `<div>` 上，添加一个名为 `.card-inverse` 的第二个类。
- en: This will only inverse the text in the card. You need to set the `background
    color` yourself. For speed, I just did an inline CSS style in the demo code. I'd
    recommend actually creating a CSS class in your stylesheet for your own project,
    which is a nicer way to do things.
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这只会反转卡片中的文本。你需要自己设置背景颜色。为了速度，我在演示代码中只做了内联 CSS 样式。我建议实际上在你的样式表中创建一个 CSS 类，这对于你的项目来说是一种更好的做法。
- en: 'That''s all you need to do. Once you''re done, your card should look like this:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你需要做的全部。一旦完成，你的卡片应该看起来像这样：
- en: '![Inverting the color scheme of a Card](img/00086.jpeg)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![反转卡片配色方案](img/00086.jpeg)'
- en: 'In this case, you do need to specify the custom background color. However,
    Bootstrap does have some background color variations that you can use if you want
    to add an additional CSS class. The naming convention for these options is just
    like buttons and labels. Let''s take a look at what the code will look like:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你需要指定自定义的背景颜色。然而，Bootstrap 确实有一些背景颜色变体，如果你想要添加一个额外的 CSS 类，你可以使用它们。这些选项的命名约定与按钮和标签相同。让我们看看代码将是什么样子：
- en: '[PRE36]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This is a bunch of code, but there are only a couple of things that change from
    our previous card example:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一堆代码，但只有几处变化是从我们之前的卡片示例来的：
- en: All I've done is add an additional CSS class to the `<div>` with our base `.card`
    class on it. Let's review each one in the following points.
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我所做的一切只是给带有基础 `.card` 类的 `<div>` 添加了一个额外的 CSS 类。让我们在以下要点中逐一回顾。
- en: The **Primary** card uses the `.card-primary` class and is blue.
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要** 卡片使用 `.card-primary` 类，颜色为蓝色。'
- en: The **Success** card uses the `.card-success` class and is green.
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成功** 卡片使用 `.card-success` 类，颜色为绿色。'
- en: The **Info** card uses the `.card-info` class and is light blue.
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息**卡片使用`.card-info`类，颜色为浅蓝色。'
- en: The **Warning** card uses the `.card-warning` class and is yellow.
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警告**卡片使用`.card-warning`类，颜色为黄色。'
- en: The **Danger** card uses the `.card-danger` class and is red.
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**危险**卡片使用`.card-danger`类，颜色为红色。'
- en: 'Once you''ve set up the above code, your cards should look like this in the
    browser:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您设置了上述代码，您的卡片在浏览器中应该看起来像这样：
- en: '![Inverting the color scheme of a Card](img/00087.jpeg)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![反转卡片颜色方案](img/00087.jpeg)'
- en: That concludes the basic and advanced styling you can do with the Card component.
    Why don't we take a break from learning for a bit and actually build some Cards
    in our blog project.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了您可以使用卡片组件进行的基调和高级样式。为什么我们不暂时放下学习，实际上在我们的博客项目中构建一些卡片呢。
- en: Adding a location card to the Contact page
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在联系页面添加位置卡片
- en: 'Let''s jump back into our project by adding a simple Card component to the
    **Contact** page. Reopen `contact.ejs` in your text editor and head down to the
    main body that we recently updated with a contact form. Find the following column
    code for that section:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过向**联系**页面添加一个简单的卡片组件来重新进入我们的项目。在您的文本编辑器中重新打开`contact.ejs`，并找到我们最近更新过的包含联系表单的主体部分。找到该部分以下列出的列代码：
- en: '[PRE37]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now that the column is set up, let''s insert a Card component into our new
    column. Enter the following code into the second column in the layout:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 现在列已经设置好了，让我们在我们的新列中插入一个卡片组件。将以下代码输入到布局的第二列中：
- en: '[PRE39]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Once you''ve inserted the Card component code, save your file and check it
    out in a browser. It should look like this:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您插入了卡片组件代码，保存您的文件并在浏览器中查看。它应该看起来像这样：
- en: '![Adding a location card to the Contact page](img/00088.jpeg)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
  zh: '![在联系页面添加位置卡片](img/00088.jpeg)'
- en: Now the **Contact** page is starting to take more shape. Let's add the Card
    component to a few other pages before we move on to our next Content component.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 现在**联系**页面开始呈现出更多的形状。在我们继续到下一个内容组件之前，让我们将卡片组件添加到几个其他页面上。
- en: Updating the Blog index page
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新博客索引页面
- en: 'Now that we''ve covered the card component, it''s time to set up the main layout
    for our Blog index page. The design is going to rely heavily on the Card component,
    so let''s get to it. First of all, open up `index.ejs` in your text editor and
    find the body of the page section. The left column will look like this:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了卡片组件，是时候为我们的博客索引页面设置主要布局了。设计将严重依赖于卡片组件，让我们开始吧。首先，在您的文本编辑器中打开`index.ejs`并找到页面部分的主体。左侧列将看起来像这样：
- en: '[PRE40]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Within this `<div>` currently is some filler text. Delete the filler text and
    insert the following Card component, which will be our first Blog post:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个当前存在的`<div>`中有些填充文本。删除填充文本并插入以下卡片组件，这将是我们第一篇博客文章：
- en: '[PRE41]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now that we''ve added our first card to the Blog roll, let''s break down what''s
    happening:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将第一张卡片添加到博客滚动列表中，让我们来分析一下发生了什么：
- en: I've started by including a photo I took in Nova Scotia a few summers ago. I've
    given it a class of `.img-fluid` so it stretches the width of the card.
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我开始时包括了我几年前在 Nova Scotia 拍摄的照片。我给它添加了`.img-fluid`类，使其宽度拉伸到卡片。
- en: From there, I've set up my card exactly like I taught you previously, but in
    this case, I've added some real content for a blog.
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从那里，我按照之前教你的方式设置了卡片，但这次我添加了一些实际的博客内容。
- en: 'Let''s go ahead and add the rest of the Card component code for the blog roll.
    Insert the following code after the first Card in the left column:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加博客滚动列表的其余卡片组件代码。在左侧第一张卡片之后插入以下代码：
- en: '[PRE42]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'That''s a long chunk of code. The filler text is just in there to give you
    an idea. Feel free to remove that or replace it with actual text. Now that we''ve
    filled out the left column with a good amount of content, your page should look
    like this:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一段很长的代码。填充文本只是用来给您一个想法。您可以随意删除它或用实际文本替换它。现在我们已经用足够的内容填满了左侧列，您的页面应该看起来像这样：
- en: '![Updating the Blog index page](img/00089.jpeg)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![更新博客索引页面](img/00089.jpeg)'
- en: Now that the main blog roll content is complete, let's also add the right column
    content.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 现在主要博客滚动内容已经完成，让我们也添加右侧列的内容。
- en: Adding the sidebar
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加侧边栏
- en: 'Let''s add some more content to the index page by adding the sidebar. We''ll
    also use the Card component here, but in this case, some different variations
    of it. Go back to `index.ejs` and remove the filler text from the second column.
    Instead, insert the following Card code:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过添加侧边栏来为索引页面添加更多内容。我们也将在这里使用卡片组件，但这次是它的不同变体。回到`index.ejs`并从第二列删除填充文本。相反，插入以下卡片代码：
- en: '[PRE43]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'You''ll notice in this Card I''m using a different variation, which is the
    List Group option. To do this, follow these steps:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到在这个卡片中我使用了不同的变体，即列表组选项。要这样做，请按照以下步骤操作：
- en: Create a new `<div>` with a class of `.list-group` inside your card.
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的卡片内创建一个新的 `<div>`，并给它一个 `.list-group` 类。
- en: Inside, insert a `<button>` with a class of `.list-group-item` on it for every
    item of your list. I've added five different options.
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在内部，为你的列表中的每个项目插入一个带有 `.list-group-item` 类的 `<button>`。
- en: 'Once you''re done, save your file and it should look like this in the browser:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，保存你的文件，在浏览器中它应该看起来像这样：
- en: '![Adding the sidebar](img/00090.jpeg)'
  id: totrans-373
  prefs: []
  type: TYPE_IMG
  zh: '![添加侧边栏](img/00090.jpeg)'
- en: 'As you can see, that will draw a nice-looking sidebar list component. Let''s
    fill out the rest of the sidebar by inserting the following code after the first
    Card component:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这将绘制一个看起来很棒的侧边栏列表组件。让我们通过在第一个卡片组件之后插入以下代码来填写侧边栏的其余部分：
- en: '[PRE44]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This will produce two more List Group Card components for the sidebar of your
    blog project. Once it''s all done, the entire page should now look like this:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为你的博客项目侧边栏生成两个额外的列表组卡片组件。一旦全部完成，整个页面现在应该看起来像这样：
- en: '![Adding the sidebar](img/00091.jpeg)'
  id: totrans-377
  prefs: []
  type: TYPE_IMG
  zh: '![添加侧边栏](img/00091.jpeg)'
- en: That concludes the user of the Card component on the index page. The last page
    we need to set up with the Card component is our Blog post page.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了在索引页面上使用卡片组件。我们需要用卡片组件设置的最后一个页面是我们的博客文章页面。
- en: Setting up the Blog post page
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置博客文章页面
- en: 'The index page is a list of all the Blog posts in our project. The last page
    we need to setup is the Blog post page, which is just a single post in our project.
    Open up the `blog-post.ejs` template you created earlier in the book and let''s
    start updating some code. Head down to the page body section and find this line
    of code:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 索引页面是我们项目中所有博客文章的列表。我们需要设置的最后一个页面是博客文章页面，它只是我们项目中的一个单独的文章。打开你之前在书中创建的 `blog-post.ejs`
    模板，让我们开始更新一些代码。转到页面主体部分，找到以下代码行：
- en: '[PRE45]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Currently, you''ll see some filler text in that `<div>`; let''s replace it
    with the following code:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你会在那个 `<div>` 中看到一些填充文本；让我们用以下代码替换它：
- en: '[PRE46]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'There''s a good chunk of things going on in this code. I''ve thrown in a few
    other components we''ve already learned about so you can see them in action. The
    Card component has the following things included inside it:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码中有很多事情在进行。我加入了一些我们已经学过的其他组件，以便你可以看到它们在实际中的应用。卡片组件内部包含以下内容：
- en: Text, `<code>` and `<pre>` tags
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本、`<code>` 和 `<pre>` 标签
- en: Tables
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格
- en: Images
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图片
- en: Let's also update this template to use the same sidebar code as the index page.
    Copy the right column code from the index template and paste it into the same
    location in the blog post template.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也更新这个模板，使用与索引页面相同的侧边栏代码。从索引模板复制右侧列的代码，并将其粘贴到博客文章模板中的相同位置。
- en: 'When you are done, the page should now look like this:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，页面现在应该看起来像这样：
- en: '![Setting up the Blog post page](img/00092.jpeg)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
  zh: '![设置博客页面](img/00092.jpeg)'
- en: As you can see, we're using a single Card component to hold all of the content
    for the body of the page. We're also using the same Card components for the sidebar
    that we copied over from the index page. Now that we've added the Cards to all
    of our page templates, let's get back to learning about some other Content components
    in Bootstrap 4.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们使用单个卡片组件来包含页面的所有内容。我们也使用了从索引页面复制过来的相同的卡片组件作为侧边栏。现在我们已经将卡片添加到所有页面模板中，让我们回到学习
    Bootstrap 4 中的一些其他内容组件。
- en: How to use the Navs component
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 Nav 组件
- en: 'The Navs component in Bootstrap can be displayed in a couple of different ways.
    The default view for the component is just a simple unstyled list of links. This
    list can also be transformed into tabs or pills for ways of organizing your content
    and navigation. Let''s start by learning how to create a default Nav component:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 中的 Nav 组件可以以几种不同的方式显示。组件的默认视图只是一个简单的无样式的链接列表。这个列表也可以转换成标签页或药丸，以组织你的内容和导航。让我们首先学习如何创建默认的
    Nav 组件：
- en: '[PRE47]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The most basic version of the Nav component is built using the preceding code:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: Nav 组件最基本版本是使用前面的代码构建的：
- en: The component is based on an unordered list with a class of `.nav`
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该组件基于一个具有 `.nav` 类的无序列表
- en: Each `<li>` tag in the list requires a class of `.nav-item`
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表中的每个 `<li>` 标签都需要一个 `.nav-item` 类。
- en: Nested inside the `<li>` tag must be an `<a>` tag with a class of `.nav-link`
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<li>` 标签内部必须嵌套一个具有 `.nav-link` 类的 `<a>` 标签。
- en: 'Once you''ve completed adding that code it should look like this in the browser:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 完成添加代码后，在浏览器中应该看起来像这样：
- en: '![How to use the Navs component](img/00093.jpeg)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![如何使用 Navs 组件](img/00093.jpeg)'
- en: 'As I mentioned, this is just a basic unstyled list of links. One easy change
    you can make is to display the list of links inline horizontally. To achieve this,
    you just need to add a class named `.nav-inline` to the `<ul>` tag, like this:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 如我所说，这只是一个基本的未加样式的链接列表。你可以做的简单更改之一是将链接列表水平显示。要实现这一点，你只需要给 `<ul>` 标签添加一个名为 `.nav-inline`
    的类，就像这样：
- en: '[PRE48]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This will display all the links in a horizontal line. Why don't we move on to
    something a little more exciting, such as converting this list into tabs.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示所有链接成一行。为什么我们不尝试一些更有趣的事情，比如将这个列表转换为标签。
- en: Creating tabs with the Nav component
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Nav 组件创建标签
- en: 'Converting the basic list to tabs is easy to do by adding a couple of things
    to our code. Take a look at this sample:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在我们的代码中添加一些内容，将基本的列表转换为标签非常简单。看看这个示例：
- en: '[PRE49]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'I''ve made two changes to the code, let''s review them now:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 我对代码做了两个修改，现在让我们来回顾一下：
- en: On the `<ul>` tag, I removed the `.nav-inline` class and added `.nav-tabs`.
    This will render the list as tabs.
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<ul>` 标签上，我移除了 `.nav-inline` 类并添加了 `.nav-tabs`。这将使列表以标签的形式显示。
- en: I then added a class of `.active` to the first link so that it is the selected
    tab when the page loads.
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我接着给第一个链接添加了一个 `.active` 类，以便在页面加载时它成为选中的标签。
- en: 'After you''ve coded that up, it should look like this in the browser:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 编写完代码后，在浏览器中应该看起来像这样：
- en: '![Creating tabs with the Nav component](img/00094.jpeg)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Nav 组件创建标签](img/00094.jpeg)'
- en: Just like that you can render the list as a set of tabs. The next variations
    you'll want to try are pills.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，你可以将列表渲染为一系列标签。接下来，你想要尝试的下一个变体是药丸。
- en: Creating a pill navigation
  id: totrans-413
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建药丸导航
- en: 'Changing the style of the Nav component to Pills is actually really easy. Take
    a look at the following sample code:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Nav 组件的样式更改为药丸实际上非常简单。看看以下示例代码：
- en: '[PRE50]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Let's breakdown what is new here. I've only made one change to the code. I've
    removed the `.nav-tabs` class from the `<ul>` tag and replaced it with a `.nav-pills`
    class. This is the only change you need to make.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下这里的新变化。我对代码只做了一处修改。我从 `<ul>` 标签中移除了 `.nav-tabs` 类，并用 `.nav-pills` 类替换了它。这就是你需要做的唯一修改。
- en: 'Save your file with the changes and it should look like this in the browser:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 保存更改后的文件，在浏览器中应该看起来像这样：
- en: '![Creating a pill navigation](img/00095.jpeg)'
  id: totrans-418
  prefs: []
  type: TYPE_IMG
  zh: '![创建药丸导航](img/00095.jpeg)'
- en: 'The preceding example is the default display for Nav pills. There is another
    variation you can try though, which are stacked pills. This pattern is commonly
    used in sidebar navigations. To create this version, update the following line
    of code:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例是 Nav 药丸的默认显示。不过，你可以尝试另一种变体，即堆叠药丸。这种模式在侧边栏导航中很常见。要创建这个版本，更新以下代码行：
- en: '[PRE51]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Here I''ve simply added a class of `.nav-stacked` to the `<ul>` tag to stack
    the pills. Here''s how it will look in the browser:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我简单地在 `<ul>` 标签上添加了一个 `.nav-stacked` 类来堆叠药丸。在浏览器中的样子如下：
- en: '![Creating a pill navigation](img/00096.jpeg)'
  id: totrans-422
  prefs: []
  type: TYPE_IMG
  zh: '![创建药丸导航](img/00096.jpeg)'
- en: That concludes the Nav component in Bootstrap 4\. As you learned, it's pretty
    easy to create a few different styles of navigation with a simple list of unordered
    links. In the next section, we'll review the more complicated navigation component,
    which is the Navbar.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了 Bootstrap 4 中的 Nav 组件。正如你所学的，使用简单的无序列表创建几种不同的导航样式非常容易。在下一节中，我们将回顾更复杂的导航组件，即
    Navbar。
- en: Using the Bootstrap Navbar component
  id: totrans-424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Bootstrap Navbar 组件
- en: 'The Navbar component is a staple of Bootstrap that gets used all the time.
    In the past, this component has required a decent amount of markup to get it working.
    I''m glad to report that in Bootstrap 4 they have simplified this component and
    made it easier to use. Let''s start by going over a basic example of the Navbar:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: Navbar 组件是 Bootstrap 的一个基本组件，经常被使用。在过去，这个组件需要相当数量的标记才能使其工作。我很高兴地报告，在 Bootstrap
    4 中，他们简化了这个组件，使其更容易使用。让我们从一个基本的 Navbar 示例开始：
- en: '[PRE52]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'You may notice some similarities here with the Nav component. The Navbar uses
    some of the same code, but you can extend it further and combine additional components
    into it. Let''s start by breaking down this basic example:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到这里与 Nav 组件的一些相似之处。Navbar 使用了一些相同的代码，但你可以进一步扩展它，并将额外的组件组合进去。让我们先分析这个基本的示例：
- en: A Navbar component can be used outside or inside of a `<div>` with a `.container`
    class on it. If you want the Navbar to be flush with the edges of the browser,
    you should not include it inside a `.container <div>`. However, if you do want
    the default padding and margins applied, put it inside the `<div>`. For this example,
    I'm going to build it outside of a container.
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Navbar组件可以放在带有`.container`类的`<div>`内部或外部。如果您想让Navbar与浏览器边缘对齐，则不应将其包含在`.container
    <div>`内部。但是，如果您想应用默认的内边距和外边距，请将其放在`<div>`内部。在这个例子中，我将将其构建在容器外部。
- en: The Navbar component starts with an HTML5 `<nav>` tag that has the following
    CSS classes added to it.
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Navbar组件从HTML5的`<nav>`标签开始，该标签添加了以下CSS类。
- en: '`.navbar` is the default class that always needs to appear on the component.'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.navbar`是始终需要出现在组件上的默认类。'
- en: '`.navbar-light` is the color of component you want to use. There are some other
    variations you can pick from.'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.navbar-light`是您想要使用的组件颜色。您还可以选择其他一些变体。'
- en: '`.bg-faded` is a utility class that you can use to make the background lighter.
    This is an optional class.'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.bg-faded`是一个可以用来使背景变亮的实用类。这是一个可选类。'
- en: The first element inside of a Navbar is the Brand. The Brand should be the title
    for your project. To render the element, create an `<a>` tag and give it a class
    of `.navbar-brand`. The anchor text for this link should be the name of your project
    or website. Keep in mind, using the Brand is optional.
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Navbar内部的第一元素是品牌。品牌应该是您项目的标题。要渲染该元素，创建一个`<a>`标签并给它一个`.navbar-brand`类。此链接的锚文本应该是您项目的名称或网站名称。请注意，使用品牌是可选的。
- en: The core part of the Navbar is the list of navigation links. This is created
    with an unordered list, similar to the Nav component. In this case, your `<ul>`
    tag should have classes of `.nav` and `.navbar-nav` included.
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Navbar的核心部分是导航链接列表。这是使用无序列表创建的，类似于Nav组件。在这种情况下，您的`<ul>`标签应包含`.nav`和`.navbar-nav`类。
- en: The nested `<li>` and `<a>` tags should use the same `.nav-item` and `.nav-link`
    classes from the Nav component.
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套的`<li>`和`<a>`标签应使用来自Nav组件的相同`.nav-item`和`.nav-link`类。
- en: 'This will create a basic Navbar component for you. This is how it should look
    in the browser:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您创建一个基本的Navbar组件。这是它在浏览器中的样子：
- en: '![Using the Bootstrap Navbar component](img/00097.jpeg)'
  id: totrans-437
  prefs: []
  type: TYPE_IMG
  zh: '![使用Bootstrap Navbar组件](img/00097.jpeg)'
- en: Now that you've learned how to build a basic Navbar, let's learn how to extend
    the component further.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了如何构建基本的Navbar，让我们学习如何进一步扩展该组件。
- en: Changing the color of the Navbar
  id: totrans-439
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改Navbar的颜色
- en: 'In Bootstrap 3, you could invert the color scheme of the Navbar. However, in
    Bootstrap 4 you have multiple options for coloring the Navbar component. All that
    is needed to edit is some of the classes on the `<nav>` tag that wrap the component.
    Let''s take a look at the code for some of the different color options:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bootstrap 3中，您可以反转Navbar的颜色方案。然而，在Bootstrap 4中，您有多个选项来为Navbar组件着色。要编辑的只是包裹组件的`<nav>`标签上的一些类。让我们看看不同颜色选项的代码：
- en: '[PRE53]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'As you can see, we''re reusing the keywords for color variations that we''ve
    used in other components. Let''s break down each variation of the Navbar component:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们正在重用我们在其他组件中使用的颜色变体的关键词。让我们分解Navbar组件的每个变体：
- en: '`.navbar-inverse` will color the component black and grey'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.navbar-inverse`将组件颜色设置为黑色和灰色'
- en: '`.navbar-primary` will color the component blue'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.navbar-primary`将组件颜色设置为蓝色'
- en: '`.navbar-success` will color the component green'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.navbar-success`将组件颜色设置为绿色'
- en: '`.navbar-warning` will color the component yellow'
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.navbar-warning`将组件颜色设置为黄色'
- en: '`.navbar-info` will color the component light blue'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.navbar-info`将组件颜色设置为浅蓝色'
- en: '`.navbar-danger` will color the component red'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.navbar-danger`将组件颜色设置为红色'
- en: 'Once you''re done coding that up, the navbars should look like this in the
    browser:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 完成编码后，在浏览器中navbar应该看起来像这样：
- en: '![Changing the color of the Navbar](img/00098.jpeg)'
  id: totrans-450
  prefs: []
  type: TYPE_IMG
  zh: '![更改Navbar的颜色](img/00098.jpeg)'
- en: As you can see, we now have the Navbar in a whole range of colors you can choose
    from. Let's learn what else we can add to this component.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们现在有了一整系列可供选择的颜色来设置Navbar。让我们来看看我们还能为这个组件添加些什么。
- en: Making the Navbar responsive
  id: totrans-452
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使Navbar响应式
- en: 'Being that Bootstrap is a mobile-first framework, it would only make sense
    that you need the ability to make the Navbar component responsive. Let''s check
    out the basic code for this:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Bootstrap是一个以移动设备为先的框架，因此您需要有能力使Navbar组件响应式。让我们看看实现这一点的基本代码：
- en: '[PRE54]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'There''s a few different things in the code here that you need to be aware
    of:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，代码中有几个不同之处需要您注意：
- en: After the opening `<nav>` class, you need to insert a `<button>` with the CSS
    classes `.navbar-toggle` and `.hidden-sm-up`. The first class says this button
    will toggle the navigation. The second class says only show the responsive navigation
    for sizes above small. You also need to include the data attribute `data-toggle="collapse"`
    to all the Nav to collapse. Finally, you need to add a data-target, which will
    point to the area you want to be collapsible. I've given that an ID of `#responsive-nav`.
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `<nav>` 标签的打开之后，您需要插入一个带有 CSS 类 `.navbar-toggle` 和 `.hidden-sm-up` 的 `<button>`。第一个类表示此按钮将切换导航。第二个类表示仅对大于小号的尺寸显示响应式导航。您还需要包括
    `data-toggle="collapse"` 数据属性，以便所有导航都可以折叠。最后，您需要添加一个数据目标，这将指向您想要可折叠的区域。我已经给它一个
    ID 为 `#responsive-nav`。
- en: Next, head down to your list of links and wrap a `<div>` around them. This section
    needs CSS classes named `.collapse` and `.navbar-toggleable-xs`. You also need
    to give it an ID of `responsive-nav` to tie it to the button from the previous
    step.
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，前往您的链接列表，并将一个 `<div>` 包裹在它们周围。本节需要名为 `.collapse` 和 `.navbar-toggleable-xs`
    的 CSS 类。您还需要给它一个 `responsive-nav` 的 ID，以便将其与上一步中的按钮关联起来。
- en: 'That''s it; once you code this up shrink your browser window to a small size
    and your bar should switch to look like this. Oh, and don''t forget that the code
    `☰` in the button will render a hamburger menu icon in the responsive Navbar:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样；一旦您编写了这段代码，缩小浏览器窗口到一个小尺寸，您的栏应该会切换成如下所示。哦，别忘了按钮中的代码 `☰` 将在响应式导航栏中渲染一个汉堡菜单图标：
- en: '![Making the Navbar responsive](img/00099.jpeg)'
  id: totrans-459
  prefs: []
  type: TYPE_IMG
  zh: '![制作响应式导航栏](img/00099.jpeg)'
- en: That concludes the Navbar component in Bootstrap 4\. I know this has been a
    long chapter, but we only have a few more components to go over.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了 Bootstrap 4 中的导航栏组件。我知道这已经是一个很长的章节，但我们还有几个组件需要介绍。
- en: Adding Breadcrumbs to a page
  id: totrans-461
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在页面中添加面包屑
- en: 'The Breadcrumbs component is a pretty easy one to use in Bootstrap. Let''s
    check out the code for how to render one:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 面包屑组件在 Bootstrap 中使用起来相当简单。让我们看看如何渲染一个面包屑的代码：
- en: '[PRE55]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'As you can see, the code for this component is pretty basic, let''s review
    it:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，此组件的代码相当基础，让我们来回顾一下：
- en: The Breadcrumb component uses an ordered list or `<ol>` tag as its base.
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面包屑组件使用有序列表或 `<ol>` 标签作为其基础。
- en: Within the ordered list, you simply just need to create a list of links. The
    last item in the list should have a class of `.active` on it.
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在有序列表中，您只需创建一个链接列表。列表中的最后一项应该有一个 `.active` 类。
- en: Adding Breadcrumbs to the Blog post page
  id: totrans-467
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在博客文章页面中添加面包屑
- en: 'For this example, let''s actually add some Breadcrumbs to our Blog post page
    template. Open up `blog-post.ejs` and add the following code after the container
    `<div>` at the top:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，让我们实际上在我们的博客文章页面模板中添加一些面包屑。打开 `blog-post.ejs` 并在顶部的容器 `<div>` 之后添加以下代码：
- en: '[PRE56]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'This code should come before the page title and once you make the update, your
    page should now look like this at the top:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码应位于页面标题之前，一旦您完成更新，您的页面顶部现在应如下所示：
- en: '![Adding Breadcrumbs to the Blog post page](img/00100.jpeg)'
  id: totrans-471
  prefs: []
  type: TYPE_IMG
  zh: '![在博客文章页面中添加面包屑](img/00100.jpeg)'
- en: There, now we've added a nice Breadcrumb to our blog post template. Let's move
    on to adding Pagination to our page templates.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经在我们的博客文章模板中添加了一个漂亮的面包屑。让我们继续在页面模板中添加分页。
- en: Using the Pagination component
  id: totrans-473
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用分页组件
- en: 'Let''s continue adding some more components to our templates by learning how
    to use the Pagination component. For our blog project, we want to use the Pager
    version of the component. Open up `index.ejs` and insert the following code after
    the last Card component in our blog feed:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续通过学习如何使用分页组件来添加更多组件到我们的模板中。对于我们的博客项目，我们想使用组件的翻页版本。打开 `index.ejs` 并在我们博客内容中的最后一个
    Card 组件之后插入以下代码：
- en: '[PRE57]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The Pager is wrapped in an HTML5 `<nav>` tag and uses an unordered list as
    its base:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 翻页组件被包裹在一个 HTML5 `<nav>` 标签中，并使用无序列表作为其基础：
- en: The `<ul>` tag should have a class of `.pager` added to it.
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ul>` 标签应该添加一个名为 `.pager` 的类。'
- en: The first list item in the group should have a class of `.pager-prev` on it.
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组合中的第一个列表项应该有一个 `.pager-prev` 类。
- en: The second list item should have a class of `.pager-next` on it. In this case,
    I've also added the class `.disabled` which means there are no more posts to go
    to.
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个列表项应该有一个 `.pager-next` 类。在这种情况下，我还添加了 `.disabled` 类，这意味着没有更多的文章可以访问。
- en: 'After you''ve added this code to your index template, it should look like this
    in the browser:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 在您将此代码添加到索引模板后，在浏览器中应该看起来像这样：
- en: '![Using the Pagination component](img/00101.jpeg)'
  id: totrans-481
  prefs: []
  type: TYPE_IMG
  zh: '![使用分页组件](img/00101.jpeg)'
- en: Let's also add this component to the Blog post page template.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也将此组件添加到博客文章页面模板中。
- en: Adding the Pager to the Blog post template
  id: totrans-483
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将分页器添加到博客文章模板
- en: Open up `blog-post.ejs` and paste the same snippet of code from previously at
    the bottom of the left column, right after the end of the Card component. I won't
    bother posting another screenshot, as it should look the same as the previous example.
    Let's continue by learning how to use another component.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `blog-post.ejs` 并将之前粘贴的相同代码片段放在左侧列的底部，紧接在卡片组件之后。我不会再发截图，因为它应该和之前的例子看起来一样。让我们继续学习如何使用另一个组件。
- en: How to use the List Group component
  id: totrans-485
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用列表组组件
- en: 'This is the last main content component we need to go over for this chapter.
    Let''s get right into it by reviewing the code needed to render a List Group:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本章我们需要讨论的最后一个主要内容组件。让我们通过回顾渲染列表组所需的代码来直接进入正题：
- en: '[PRE58]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Like the components before it, this one is based off of an unordered list:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前的组件一样，这个组件是基于无序列表的：
- en: The `<ul>` tag needs a class of `.list-group` on it to start
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<ul>` 标签需要在其上添加 `.list-group` 类以开始'
- en: Each `<li>` needs a class of `.list-group-item` on it
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 `<li>` 都需要在其上添加 `.list-group-item` 类
- en: 'Once you''re done, your List Group should look like this in the browser:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您的列表组在浏览器中应该看起来像这样：
- en: '![How to use the List Group component](img/00102.jpeg)'
  id: totrans-492
  prefs: []
  type: TYPE_IMG
  zh: '![如何使用列表组组件](img/00102.jpeg)'
- en: 'As you can see, with some minimal coding you can render a decent looking component.
    You may have missed it, but we actually already used this component when we were
    building our sidebar on the index and blog post page templates. Open up one of
    them in a text editor and you''ll see the following code, which is a List Group:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，通过一些简单的编码，您就可以渲染出一个看起来不错的组件。您可能已经错过了，但我们在构建索引和博客文章页面模板的侧边栏时实际上已经使用了这个组件。在文本编辑器中打开其中一个，您将看到以下代码，它是一个列表组：
- en: '[PRE59]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: That concludes the use of the List Group component. That also concludes the
    Content components chapter.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了列表组组件的使用。这也标志着内容组件章节的结束。
- en: Summary
  id: totrans-496
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This has been a really long chapter but I hope you have learned a lot. We have
    covered Bootstrap components including buttons, button groups, button dropdown,
    forms, input groups, dropdowns, Jumbotron, Label, Alerts, Cards, Navs, Navbar,
    Breadcrumb, Pagination, and List Group. Our blog project is really starting to
    take shape now, too. In the next chapter, we'll dive into some JavaScript components
    in Bootstrap 4 that will include Modal, Tooltips, Popovers, Collapse, and Carousel.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一章非常长的内容，但我希望您学到了很多。我们涵盖了包括按钮、按钮组、按钮下拉菜单、表单、输入组、下拉菜单、巨幕、标签、警告、卡片、导航、导航栏、面包屑、分页和列表组在内的Bootstrap组件。我们的博客项目现在也开始成形了。在下一章中，我们将深入研究Bootstrap
    4的一些JavaScript组件，包括模态框、工具提示、弹出框、折叠和轮播。
- en: Assessments
  id: totrans-498
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: The .btn class cannot be attached to which among the following HTML tags?
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.btn` 类不能附加到以下哪个HTML标签？'
- en: '`<button>`'
  id: totrans-500
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<button>`'
- en: '`<a>`'
  id: totrans-501
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<a>`'
- en: '`<p>`'
  id: totrans-502
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<p>`'
- en: '`<input>`'
  id: totrans-503
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<input>`'
- en: Which among the following button is blue by default?
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个按钮默认是蓝色的？
- en: '`Primary`'
  id: totrans-505
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`主要`'
- en: '`Secondary`'
  id: totrans-506
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`次要`'
- en: '`tsInfo`'
  id: totrans-507
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`tsInfo`'
- en: '`Success`'
  id: totrans-508
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`成功`'
- en: Which among the following button is yellow by default?
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个按钮默认是黄色的？
- en: '`Primary`'
  id: totrans-510
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`主要`'
- en: '`Warning`'
  id: totrans-511
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`警告`'
- en: '`Danger`'
  id: totrans-512
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`危险`'
- en: '`Secondary`'
  id: totrans-513
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`次要`'
- en: Which among the following is the correct command for displaying a primary button?
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个是显示主要按钮的正确命令？
- en: '`<button type="Button" class="btn btn-primary">Primary</button>`'
  id: totrans-515
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<button type="Button" class="btn btn-primary">主要</button>`'
- en: '`<button type="Button" class="btn-primary">Primary</button>`'
  id: totrans-516
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<button type="Button" class="btn-primary">主要</button>`'
- en: '`<button type="button" class="btn-primary">Primary</button>`'
  id: totrans-517
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<button type="button" class="btn-primary">主要</button>`'
- en: '`<button type="button" class="btn btn-primary">Primary</button>`'
  id: totrans-518
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<button type="button" class="btn btn-primary">主要</button>`'
- en: What will be the output if a `<button>` tag has class `.btn-success-outline`?
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个 `<button>` 标签有 `.btn-success-outline` 类，输出将会是什么？
- en: Entire button will be filled with the color of class `.btn-success`
  id: totrans-520
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个按钮将被填充具有 `.btn-success` 类的颜色
- en: The border of the button will get the color of the button with class `.btn-success`
  id: totrans-521
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按钮的边框将获得具有 `.btn-success` 类的按钮的颜色
- en: The text inside the button will get the color of the button with `.btn-success`
  id: totrans-522
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按钮内的文本将获得具有 `.btn-success` 类的按钮的颜色
- en: Entire button with the text inside will be filled with the color of class `.btn-success`
  id: totrans-523
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整个按钮（包括其中的文本）将填充 `.btn-success` 类的颜色
- en: Which among the following classes groups buttons together on a single line?
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个类将按钮组合在单行上？
- en: '`.btn-group`'
  id: totrans-525
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.btn-group`'
- en: '`.btn-group-justified`'
  id: totrans-526
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.btn-group-justified`'
- en: '`.btn-group-lg`'
  id: totrans-527
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.btn-group-lg`'
- en: '`.btn-group-vertical`'
  id: totrans-528
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.btn-group-vertical`'
- en: Which of the following attribute needs to be added to allow the buttons to `toggle
    on and off`?
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个属性需要添加以允许按钮“切换开和关”？
- en: '`data-target`'
  id: totrans-530
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`data-target`'
- en: '`data-toggle`'
  id: totrans-531
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`data-toggle`'
- en: '`class`'
  id: totrans-532
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`class`'
- en: '`href`'
  id: totrans-533
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`href`'
- en: Which among the following tags need to be added to convert each checkbox into
    a button?
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个标签需要添加以将每个复选框转换为按钮？
- en: '`<label>`'
  id: totrans-535
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<label>`'
- en: '`<div>`'
  id: totrans-536
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<div>`'
- en: '`<input>`'
  id: totrans-537
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<input>`'
- en: '`<button>`'
  id: totrans-538
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<button>`'
- en: Which among the factors are required to wrap your collection of radio buttons
    in a `<div>`?
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些因素是包裹你的单选按钮集合在 `<div>` 中所需的？
- en: All the `<div>` should have same class and different data attribute
  id: totrans-540
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有 `<div>` 应该有相同的类和不同的数据属性
- en: All the `<div>` should have same class and same data attribute
  id: totrans-541
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有 `<div>` 应该有相同的类和相同的数据属性
- en: All the `<div>` should have different class and same data attribute
  id: totrans-542
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有 `<div>` 应该有相同的类和不同的数据属性
- en: All the `<div>` should have different class and different data attribute
  id: totrans-543
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有 `<div>` 应该有不同的类和不同的数据属性
- en: What is the output of class `.dropup` if you apply it on a `<div>`?
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在 `<div>` 上应用 `.dropup` 类，输出是什么？
- en: This makes the menu disappear
  id: totrans-545
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这使得菜单消失
- en: This makes the menu appear below the button
  id: totrans-546
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这使得菜单出现在按钮下方
- en: This makes the menu appear above the button
  id: totrans-547
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这使得菜单出现在按钮上方
- en: This displays a popup
  id: totrans-548
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这会显示一个弹出窗口
- en: Consider the code below:![Assessments](img/00103.jpeg)
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑以下代码：![评估](img/00103.jpeg)
- en: What is the output of this code?
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这段代码的输出是什么？
- en: Dropdown button appears large
  id: totrans-551
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下拉按钮看起来很大
- en: Dropdown button appears small
  id: totrans-552
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下拉按钮看起来很小
- en: Dropdown button appears to be toggled
  id: totrans-553
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下拉按钮看起来是切换的
- en: Dropdown button is having justified size
  id: totrans-554
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下拉按钮具有合适的尺寸
- en: Consider the code below:![Assessments](img/00104.jpeg)
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑以下代码：![评估](img/00104.jpeg)
- en: What does the `<small>` tag with a class of `.text-muted` display?
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 带有 `.text-muted` 类的 `<small>` 标签显示什么内容？
- en: It renders the text small and light grey
  id: totrans-557
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它使文本变小并呈现浅灰色
- en: It renders the text small and dark grey
  id: totrans-558
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它使文本变小并呈现深灰色
- en: It renders the text small
  id: totrans-559
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它使文本变小
- en: It renders text in dark grey color
  id: totrans-560
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它以深灰色显示文本
- en: For which of the following we use the `<select>` tag?
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个标签用于 `<select>`？
- en: Displaying a dropdown
  id: totrans-562
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示下拉菜单
- en: Displaying radio buttons
  id: totrans-563
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示单选按钮
- en: Displaying checkboxes
  id: totrans-564
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示复选框
- en: None of the above
  id: totrans-565
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以上都不是
- en: Which among the following tags is used for displaying large text?
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个标签用于显示大号文本？
- en: '`<fieldset>`'
  id: totrans-567
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<fieldset>`'
- en: '`<textarea>`'
  id: totrans-568
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<textarea>`'
- en: '`<input>`'
  id: totrans-569
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<input>`'
- en: '`<form>`'
  id: totrans-570
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<form>`'
- en: What is the output if the `.form-inline` class is applied on a `<form>` tag
    with elements inside it?
  id: totrans-571
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在包含元素的 `<form>` 标签上应用 `.form-inline` 类，输出是什么？
- en: All of the elements are inlined
  id: totrans-572
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有元素都是内联
- en: All of the elements are inlined and right-aligned
  id: totrans-573
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有元素都是内联且右对齐
- en: All of the elements are inlined and left-aligned
  id: totrans-574
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有元素都是内联且左对齐
- en: All of the elements are inlined and center-aligned
  id: totrans-575
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有元素都是内联且居中对齐
- en: Which among the following classes is used to hide labels?
  id: totrans-576
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个类用于隐藏标签？
- en: '`.sr-only`'
  id: totrans-577
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.sr-only`'
- en: '`disabled`'
  id: totrans-578
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`disabled`'
- en: '`readonly`'
  id: totrans-579
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`readonly`'
- en: '`.form-control`'
  id: totrans-580
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.form-control`'
- en: Which among the following classes will make an image responsive so that it will
    automatically resize to match the width of your card?
  id: totrans-581
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个类将使图像响应式，以便它自动调整大小以匹配卡片宽度？
- en: '`.img-responsive`'
  id: totrans-582
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.img-responsive`'
- en: '`.card-img-top`'
  id: totrans-583
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.card-img-top`'
- en: '`.img-thumbnail`'
  id: totrans-584
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.img-thumbnail`'
- en: '`.img-fluid`'
  id: totrans-585
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.img-fluid`'
- en: Which among the following nav classes will color the component black and grey?
  id: totrans-586
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个导航类将使组件颜色为黑色和灰色？
- en: '`.navbar-warning`'
  id: totrans-587
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.navbar-warning`'
- en: '`.navbar-primary`'
  id: totrans-588
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.navbar-primary`'
- en: '`.navbar-inverse`'
  id: totrans-589
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.navbar-inverse`'
- en: '`.navbar-info`'
  id: totrans-590
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.navbar-info`'
