- en: Chapter 5. Playing with Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The real power of Bootstrap lies in the components contained within the framework.
    In this chapter, we'll go through a number of new and existing components. I'll
    show you how to use them and then we'll insert them into our sample blog project
    so you can see them in practice. Let's get right into it by covering one of the
    most commonly used components, which are buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Using the button component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Buttons are one of the most commonly used components in Bootstrap. In version
    4 of Bootstrap, some of the new options for the button component include an outlined
    variation, toggle states, and button groups with checkboxes and radios. Before
    we get into that, let''s review the basic button options and configuration. Here''s
    a few general points to keep in mind when using buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: No matter what type of button you are creating, it will require the `.btn` CSS
    class to be included at a minimum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.btn` class can be attached to a number of HTML tags, such as `<button>`,
    `<a>`, and `<input>`, to render a button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are different CSS classes for creating different size and color buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic button examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we move on to more advanced configuration, let''s cover the basics of
    creating Bootstrap buttons. If you aren''t new to Bootstrap, you may want to skip
    this section. Bootstrap comes with six different button color options out of the
    box. Here''s a breakdown of their names and when to use them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Primary**: The main button used on your website. It is blue by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secondary**: The alternate or secondary button used in your website. It is
    white by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Success**: Used for positive-based actions. It is green by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Info**: Used for informational buttons. It is a light blue by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warning**: Used for warning-based actions. It is yellow by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Danger**: Used for error-based actions. It is red by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that I''ve explained all the button variations, let''s check out the code
    for a button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, I''m using the `<button>` tag and I''ve added a couple of CSS
    classes to it. The first is the `.btn` class, which I mentioned you need to include
    on all buttons. The second is the `.btn-primary` class, which indicates that you
    want to use the **Primary** button variation. If you want to use a different button
    style, you simply change up that second class to use the corresponding keyword.
    Let''s take a look at the code for all of the button variations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s as easy as that. Note that the last line is a **Link** button option
    that I haven''t talked about. This variation will appear as a text link in the
    browser, but will act as a button when you click or hover over it. I don''t often
    use this variation so I left it out at first. If you view this code in your browser,
    you should see the following buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic button examples](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating outlined buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Starting in Bootstrap 4, they''ve introduced a new button variation which will
    produce an outlined button instead of a filled one. To apply this look and feel,
    you need to change up one of the button classes. Let''s take a look at the following
    code for all variations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the class names have changed; here''s how they map to each
    button variation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`btn-primary-outline`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-secondary-outline`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-success-outline`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-info-outline`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-warning-outline`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-danger-outline`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Basically, you just need to append `-outline` to the default button variation
    class name. Once you do, your buttons should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating outlined buttons](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Checkbox and radio buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A new feature in Bootstrap 4 is the ability to convert checkboxes and radio
    buttons into regular buttons. This is really handy from a mobile standpoint because
    it is much easier to touch a button than it is to check a box or tap a radio button.
    If you are building a mobile app or responsive website, it would be a good idea
    to use this component. Let''s start by taking a look at the code to generate a
    group of three checkboxes as a button group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let me break down the code and explain what is going on here:'
  prefs: []
  type: TYPE_NORMAL
- en: To generate a button group with checkboxes, you need to wrap the boxes in a
    `<div>` with a class of `.btn-group`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To allow the buttons to toggle on and off, you also need to add the data attribute
    `data-toggle="buttons"` to the `<div>`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next we need to use the button classes on the `<label>` tag to convert each
    checkbox into a button. Note that on the first button I'm using the `.active`
    class, which will make this checkbox toggled on by default. This class is totally
    optional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your basic checkbox `<input>` tag is nested within the label.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Keep in mind since these are checkboxes, you can toggle multiple options on
    or off. Here''s what the button group should look like when rendered in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checkbox and radio buttons](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, this renders a nice-looking button group that is optimized for
    mobile and desktop. Also, notice how the first checkbox has a different background
    color as it is currently toggled on because of the `.active` class applied to
    that label. In the same way that we've created a button group with checkboxes,
    we can do the same thing with radio buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a radio button group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating a radio button group is very similar to the checkboxes. Let''s start
    by checking out the code to generate this different variation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let me explain what''s happening here with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: Like the checkboxes, you need to wrap your collection of radio buttons in a
    `<div>` with the same class and data attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<label>` tag and button classes also work the same way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The only difference is that we are swapping the checkbox `<input>` type for
    radio buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Keep in mind that with radio buttons, only one can be selected at a time. In
    this case, the first one is selected by default, but you could easily remove that.
    Here''s what the buttons should look like in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a radio button group](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the button group is rendered the same way as the checkboxes,
    but in this case we are using radios. This should be the expected result to optimize
    your group of radio buttons for mobile and desktop. Next we'll build on what we've
    learned about button groups, but learn how to use them in other ways.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll circle back later in this chapter and actually add the components to our
    blog project.
  prefs: []
  type: TYPE_NORMAL
- en: Using button groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''re new to Bootstrap, button groups are exactly as they sound. They
    are a group of buttons that are connected horizontally or vertically to look like
    a single component. Let''s take a look at the code to render the most basic version
    of the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have a group of regular button tags surrounded by `<div>`
    with a class of `.btn-group` on it. At the very least, this is all you need to
    do to render a button group. There are a couple of other optional attributes on
    the `<div>` tag, which are `role` and `aria-label`. If you need to worry about
    accessibility, then you should include those attributes, otherwise they are optional.
    One other small change in this code is I''ve decided to use the `.btn-secondary`
    class to mix things up a bit with the button styles. Let''s take a look at how
    this will appear in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using button groups](img/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have a single component that is made up of three buttons.
    This component is commonly used for a secondary navigation, or in a form like
    I explained in the previous section. If you'd like to display the buttons vertically,
    that is also possible with a small change.
  prefs: []
  type: TYPE_NORMAL
- en: Creating vertical button groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you''d like to arrange the buttons in your group vertically, that is actually
    quite easy to do. There is no need to change any of the code on the `<button>`
    tags, you just need to update the CSS class name on the wrapping `<div>` tag.
    Here''s the code you need to change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you make that alteration to your code, then the same button group will appear
    like this in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating vertical button groups](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It would probably have made sense to change the left button label to the top
    and the right button label to the bottom. However, I left them as they are because
    I wanted to show you how you can simply shift the alignment of the group by changing
    one CSS class. That covers the basics of using the button groups component; in
    the next section, I'll show you how to create button drop-down menus.
  prefs: []
  type: TYPE_NORMAL
- en: Coding a button dropdown
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The code to render a button as a dropdown is a little bit more complicated
    but still fairly easy to get up and running. You''ll combine a button tag with
    `<div>` that has a nested collection of links inside it. Let''s take a look at
    the code required to render a basic drop-down button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, there are a few things going on here. Let''s break them down one by one
    and explain how the dropdown works:'
  prefs: []
  type: TYPE_NORMAL
- en: The entire component needs to be wrapped in a `<div>` with a class of `.btn-group`
    on it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next you insert a `<button>` tag with some button CSS classes on it. Like in
    the previous section, some of the other attributes are optional. However, it is
    a good idea to include this attribute: `aria-expanded`. This can either be set
    to `false` or `true` and controls whether the dropdown is open or closed on page
    load. In most cases, you will want to set this to `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the `<button>` tag, insert another `<div>` tag which will hold all the
    links that appear in the drop-down menu list. Make sure you give this `<div>`
    a class of `.dropdown-menu`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within the second `<div>` you insert a collection of `<a>` tags, one for each
    item in your list. Each `<a>` tag requires a class of `.dropdown-item` so that
    the proper CSS styling is applied.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may also want to insert a divider in your drop-down list if you have a large
    amount of links. This is done by inserting a third `<div>` with a class of `.dropdown-divider`
    on it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As I mentioned, this component is a little more complex, but in Bootstrap 4
    they have actually simplified it a bit to make it easier to use. Let''s take a
    look at what it should look like in the browser. In the following screenshot,
    I''ve showed what the expanded version of the dropdown will look like so you can
    see the button and the list of links:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Coding a button dropdown](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have a drop-down button with a list of links nested within
    it. Keep in mind that if you want to use this component, it does require that
    you include jQuery and `bootstrap.min.js` in your template. There are some other
    variations of this component you can easily implement, such as the pop-up menu.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a pop-up menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In some cases, you might want to have your menu pop up above the button instead
    of below it. You can achieve this by adding one class on the wrapping `<div>`
    for the component. Check out the code here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, I''ve added the class `.dropup` to the `<div>`. This will make
    the menu appear above the button, and it should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a pop-up menu](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the list appears above the button when it is expanded.
  prefs: []
  type: TYPE_NORMAL
- en: Creating different size drop-down buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By adding a single class to the `<button>` tag in the dropdown, you can make
    the trigger larger or smaller. Let''s take a look at the code for the smaller
    and larger button variations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If you find the button tag in the first example, you'll see I've added a class
    of `.btn-lg` to it. This class will increase the button size to be larger than
    the default. Take a look at the second chunk of code, find the `<button>` tag
    again, and you'll see a class of `.btn-sm` on it. This works the same way except
    the button will now be smaller than the default. Let's see how these buttons will
    render in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `.btn-lg` and `.btn-sm` classes are not exclusive to the button drop-down
    component. You can use them on any button component variation you like.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating different size drop-down buttons](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That concludes the basics of using the button drop-down component. In the next
    section, we'll cover a more complicated component, which is forms.
  prefs: []
  type: TYPE_NORMAL
- en: Coding forms in Bootstrap 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are familiar with Bootstrap 3, then you'll notice the CSS form classes
    are pretty much the same in version 4\. The biggest change I see in forms for
    the new version is that each form group uses a `<fieldset>` tag instead of `<div>`.
    If you are new to Bootstrap forms, a basic form group is made up of a label and
    an input. It can also include help text, but that is optional. Let's jump right
    in by creating a generic form that uses a number of core components.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the very least, a form needs to be made up of one input and one button.
    Let''s start with the basics and create a form following those requirements. Here''s
    the code to get you started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let me explain what is happening here in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: Every form needs to start with a `<form>` tag. However, no special classes are
    required on this tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've inserted a `<fieldset>` tag with a class of `.form-group` on it for our
    single input. This `<fieldset>` pattern will be repeated in the future when you
    add additional inputs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within the `<fieldset>`, we have a `<label>`. Again, no special CSS classes
    need to be added to the `<label>`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the label, you need to insert the form `<input>` tag. In this case, I'm
    using a text input. On this HTML tag, you need to add a class of `.form-control`.
    All input tags in Bootstrap will require this class. The placeholder text is optional
    but nice to add for usability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the last line of the `<fieldset>`, I've included a `<small>` tag with a class
    of `.text-muted`, which will render the text small and light grey. This is the
    pattern you should use if you want to include some help text with your form input.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Close the `<fieldset>` tag and then you need to add a `<button>` tag for the
    form `submit` button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Close the `<form>` and you are done.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After you''ve finished reviewing the code, fire up your web browser, and your
    form should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a form](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You've successfully coded your first Bootstrap 4 form. Let's continue and I'll
    explain how to implement other common form components using the latest version
    of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a select dropdown
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s build on our form code by adding a select drop-down menu. Insert the
    following code after our text input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break down the parts of the code you need to be aware of:'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the entire `<select>` is wrapped in a `<fieldset>` with a class of
    `.form-group`. This pattern should repeat for each type of form input you add.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the `<select>` tag, there is a class of `.form-control` that needs to be
    added.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aside from that, you should code the `<select>` as you normally would, following
    the best HTML syntax practices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you''re done, if you view the form in the browser, it should now look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a select dropdown](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That completes the setup for `<select>` dropdowns. Next let's check out the
    `<textarea>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting a textarea tag into your form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Moving along to the next input type, let''s insert a `<textarea>` tag into
    our form. After the `<select>` menu, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Using this input is fairly simple. Like our other examples, you need to use
    a `<fieldset>` tag with a CSS class of `.form-group` to wrap the entire thing.
    On the actual `<textarea>` tag, you need to add the `.form-control` class. That''s
    it; once you''re done, your form should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting a textarea tag into your form](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now that the `<textarea>` is complete, let's move on to the file input form
    field.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a file input form field
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Historically, the file input form field has been a tricky one to style with
    CSS. I''m happy to say that in Bootstrap 4 they''ve created a new approach that''s
    the best I''ve seen to date. Let''s start by inserting the following code after
    the `<textarea>` in our form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, this form field is constructed in the same manner as the previous ones.
    However, there is one small change you need to be aware of with the **File input**
    field. On the `<input>` tag, you need to change the CSS class to `.form-control-file`.
    There are some specific styles being applied to clean up the look and feel of
    this form field. Once you''re done, your form should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a file input form field](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That completes the **File input** field which leaves us with two more basic
    form field inputs to go over. They are radio buttons and checkboxes. Let's learn
    how to add them next.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting radio buttons and checkboxes to a form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These fields are pretty similar so I''m going to group them together in their
    own section. The code for these two fields differs a little bit from the other
    inputs, as I''ll outline now. First, let''s insert the following code after the
    `File input` field in our form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s start by going over the radio button code first, then we''ll move on
    to the checkbox:'
  prefs: []
  type: TYPE_NORMAL
- en: The fields don't use the `<fieldset>` tag as the wrapper. In this case, you
    should use a `<div>` and give it a class of either `.radio` or `.checkbox`, depending
    on what type you want to use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For these fields, the `<label>` tag will also wrap around the `<input>` tag
    so that everything is displayed in a horizontal line. We don't want the text label
    to drop down below the radio button or checkbox.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You don't need a special class on the `<input>` for either of these fields.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As you can see, the code for these fields is a bit different from what we''ve
    learned about the other form inputs. Not to worry, as they are pretty easy to
    use and there aren''t a bunch of CSS classes you have to memorize. One of the
    nicest changes with forms in Bootstrap 4 is that they require less HTML markup,
    so are easier to write. Finally, if you view our form in the browser, it should
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inserting radio buttons and checkboxes to a form](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That completes the explanation of all the core form fields that you need to
    know how to use in Bootstrap 4\. Before we move on to some more advanced form
    fields and variations, why don't we add a form to our blog project?
  prefs: []
  type: TYPE_NORMAL
- en: Adding a form to the blog contact page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I know, I know. I said we would wait till the end of the chapter to build components
    into the blog project. However, I'm thinking you might like a break from learning
    and actually add some of what you've learned to your project. Let's go ahead and
    do just that by filling in a form on the **Contact** page.
  prefs: []
  type: TYPE_NORMAL
- en: Updating your project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s start by opening up our project directory and finding the file named
    `contact.ejs`. Open up that file in your text editor and we are going to add some
    new form code and remove some filler code. To start, find the body section of
    the page that is wrapped in the following column `<div>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Within that `<div>` is currently some filler text. Remove that text and replace
    it with the following form code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ve coded up a basic contact form that you''ll commonly see on a blog. It
    has e-mail, name, and message fields along with a **submit** button. Save your
    file and then preview your project in a browser. The **Contact** page should now
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating your project](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That concludes the updates to the **Contact** page for now. Later on in the
    book, we'll add some additional components to this page. Let's jump back into
    learning about forms in Bootstrap 4 by reviewing some additional form controls.
  prefs: []
  type: TYPE_NORMAL
- en: Additional form fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've learned how to build a basic form and added one to our project,
    let's circle back and talk about some more advanced form fields and variations
    you can apply with Bootstrap 4\. I'm going to start by showing you how to lay
    out forms in a few different ways.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an inline form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by learning how to create an inline form. This is a layout you
    might want to use in the header of a project or perhaps for a login page. In this
    case, we''re going to align the fields and buttons of the form vertically across
    the page. For this example, let''s create a simple login form with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few things going on in this form, so let me explain them for you:'
  prefs: []
  type: TYPE_NORMAL
- en: For inline forms, we need to add a CSS class named `.form-inline` to the `<form>`
    tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You'll also notice the `<fieldset>` tags have been replaced with `<div>` tags.
    This is so they can be set to `display` as `inline-block`, which won't work with
    a fieldset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Aside from those two differences, the form is coded up the same way as a regular
    one. Once you''re done, your form should look like this in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an inline form](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you're like me, you might find the labels next to the text inputs kind of
    ugly. The good news is there is an easy way to hide them.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding the labels in an inline form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The reason those labels are there is for accessibility and screen readers.
    We don''t want to remove them altogether from the code, but we can hide them by
    adding a CSS class named `.sr-only`. This class stands for **screen reader only**
    and will therefore only show the labels if they are viewed on an accessible screen
    reader. Here is an example of how to add the CSS class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'After you apply that CSS class to all the labels in the form, it should now
    appear like this in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hiding the labels in an inline form](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That concludes how to make a basic inline form. However, what if you want to
    include other fields in an inline manner? Let's see how we can add checkboxes
    and radios.
  prefs: []
  type: TYPE_NORMAL
- en: Adding inline checkboxes and radio buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''d like to include checkboxes and radio buttons to an inline form you
    need to make some changes to your code. Let''s start by going over the checkbox
    code. Insert the following code after the last text input in the inline form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a couple of things here that you need to be aware of:'
  prefs: []
  type: TYPE_NORMAL
- en: First, there is no longer a `<div>` wrapped around the checkbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to add a class named `.checkbox-inline` to the checkbox's `<label>`
    tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you do this, save your form and it should look like this in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding inline checkboxes and radio buttons](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we''ve added the checkbox, let''s check out an example using radio
    buttons. Add the following code to your form after the checkbox code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the pattern here is exactly the same. The `<div>` around each
    radio button has been removed. Instead, there is a CSS class named `.radio-inline`
    that needs to be added to each radio `<label>` tag. Once you''ve completed this
    step, your form should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding inline checkboxes and radio buttons](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That completes everything you need to know about inline forms. Let's now move
    on to some more utility-type actions that you can apply to your form fields.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the size of inputs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bootstrap comes with a few handy utility CSS classes that you can use with
    form fields to have them appear at different sizes. Along with the default size,
    you can choose to display your fields in a larger or smaller size. Let''s take
    a look at the code to render all three size variations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To use the different size inputs, you simply have to add an additional class
    to the tag:'
  prefs: []
  type: TYPE_NORMAL
- en: For a larger input, use the class `.form-control-lg`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a smaller input, use the class `.form-control-sm`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default input size requires no extra CSS class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s how each version looks in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the size of inputs](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the larger input is taller and has some additional padding.
    The smaller input is shorter with reduced padding. These classes only cover the
    vertical size of an input. Now let's learn how to control the width of inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the width of form fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since Bootstrap is a mobile-first framework, form fields are designed to stretch
    to fit the width of their column. Therefore, if you are using `.col-md-12` for
    your column class, the field is going to stretch to the width of the layout. This
    may not always be what you want, you may only want the input to stretch to half
    of the width of the layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'If this is the case, you need to wrap your field in a `<div>` with a column
    class on it to control the width. Let''s check out some example code to get the
    point across:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, I''ve removed some of the labels and other form code
    to make it easier to see what is going on. Here''s a breakdown of what you need
    to know:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to wrap your input in a `<div>` with a column class on it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first input will stretch to the width of the layout because of the `.col-md-12`
    class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second input will only stretch to fill 50% of the layout because of the
    `.col-md-6 class`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at how this will look in the actual browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling the width of form fields](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the second input only stretches to half of the width. This is
    how you can control the width of inputs if you don't want them to fill the entire
    layout of your page. The last thing I'd like to cover when it comes to forms is
    validation of input fields.
  prefs: []
  type: TYPE_NORMAL
- en: Adding validation to inputs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bootstrap 4 comes with some powerful yet easy to use validation styles for
    input fields. Validation styles are used to show things such as errors, warnings,
    and success states for form fields when you submit the actual form. Let''s take
    a look at the code to render all three validation states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The markup for each validation variation is very similar to a regular input
    with the addition of a few CSS classes to apply the proper state look and feel.
    Let''s go over each change you need to be aware of:'
  prefs: []
  type: TYPE_NORMAL
- en: The first input is the success state. The wrapping `<div>` needs to have a class
    called `.has-success` added to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each `<label>` tag needs to have a class named `.form-control-label` added to
    it. This is required to color the label to match the state color.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The success input requires a class named `.form-control-success`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second input is the warning state. The wrapping `<div>` needs a class named
    `.has-warning` added to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The warning input also needs a class named `.form-control-warning` added.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the last input is the danger or error state. The wrapping `<div>` needs
    to have a class named `.has-danger` added.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The danger input also needs a class named `.form-control-danger` added.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at how all these validation inputs should look in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding validation to inputs](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the inputs and labels are colored to match their state. You'll
    also notice each input has an icon to the right edge of it. These icons are automatically
    added when you include the required CSS files. There is no need to actually use
    any images here, which is great. That concludes everything that you need to know
    about forms in Bootstrap 4\. In the next section, I'll teach you about the **Jumbotron**
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Jumbotron component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re new to Bootstrap, you may be asking yourself what the heck is a
    Jumbotron component. Jumbotron is used to feature a block of content, usually
    at the top of your page. This is your standard main feature block that you''ll
    see on a number of websites. If you require something more sophisticated than
    a simple page title, Jumbotron is the component you''ll want to use. Let''s take
    a quick look at the code required to create this component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'There are some new CSS classes here that we need to review, as well as some
    existing ones we have already learned about. Let''s break down what''s happening
    in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: The Jumbotron component is based off a `<div>` with a CSS class named `.jumbotron`.
    Within this `<div>`, you can pretty much use whatever text formatting tags you
    like. However, there are a few basics you should include to make it look good.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first tag you'll see is the `<h1>` with a class of `.display-3` on it. Since
    the Jumbotron is more of a "display" component, you'll want to beef up the size
    of your `<h1>` by using the optional class we learned about earlier in the book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, you'll see a simple `<p>` tag for the feature's tagline. On that tag,
    there is a class named `.lead`. This class increases the base font size by 25%
    and sets the `font-weight` to `300` which is a lighter weight. Again, this gives
    the Jumbotron component more of a "feature" like look and feel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the tagline text, you'll see an `<hr>` tag with a class of `.m-y-2` on
    it. If you remember, this is a utility spacing class. The `-y` in this case will
    add a `margin` above and below the `<hr>` tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next we have another `<p>` tag with some additional descriptive text in it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we have a `<button>` wrapped in a `<p>` tag so that there is a conclusion
    to the call to action in the Jumbotron block. Note that the user of the `.btn-lg`
    class will produce a larger-sized button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After you''ve coded up your Jumbotron component, it should look like this in
    the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Jumbotron component](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, the Jumbotron component will stretch to fit the width of the column
    it is contained within. In most cases, you''ll likely want it to span the entire
    width of your page. However, in some cases, you might want a Jumbotron to stretch
    from one edge of the browser to the other without any horizontal padding on it.
    If this is the case, you need to add the `.jumbotron-fluid` class to the main
    `<div>` and make sure it is outside of a Bootstrap `.container`. Let''s take a
    look at the following code to see what I mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the `.container <div>` is now inside of the Jumbotron `<div>`.
    This is how you remove the horizontal padding on the section. Once completed,
    it should look like this in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Jumbotron component](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That concludes the use of the Jumbotron component in Bootstrap 4\. Next let's
    move on to learning how to use the Label component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Label component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Label component is used to add context to different types of content. A
    good example would be notifications on an application. You might use a label to
    indicate how many unread emails there are in an email app. Another would be to
    insert a warning tag next to an item in a table or list. Like buttons, labels
    are available in a number of color variations to meet your needs in your project.
    Let''s take a look at the code to render the basic label options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll likely notice some similarities here with the Button component CSS
    classes. When using a label, you should use the `<span>` tag as your base for
    the component. Here are some more important facts when using this component:'
  prefs: []
  type: TYPE_NORMAL
- en: Every variation of the Label component requires the use of the `.label` class
    on the `<span>` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Default** label uses the `.label-default` class and is grey
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Primary** label uses the `.label-primary` class and is blue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Success** label uses the `.label-success` class and is green
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Info** label uses the `.label-info` class and is light blue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Warning** label uses the `.label-warning` class and is yellow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the **Danger** label uses the `.label-danger` class and is red
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you''ve coded that up, it should look like this in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Label component](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, labels will be rectangular with slightly rounder corners. If you''d
    like to display them in pill format, you can do so by adding the `.label-pill`
    class to the `<span>` tag. Here''s an example to see what I mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If you add that class to your labels, they should look like this in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Label component](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That concludes the Label component in Bootstrap 4\. Next, I'll teach you how
    to use the Alerts component.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Alerts component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Alerts component in Bootstrap provides contextual messages for typical
    uses, such as validation and general information, that need to stand out more.
    Like our previous components, it comes in a few different variations depending
    on your needs. Let''s start by looking at the basic code required to render the
    different alert options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The classes used to create an alert can be added to any block element, but
    for demo purposes we''ll implement them using `<div>` tags. Here are the key points
    you need to know:'
  prefs: []
  type: TYPE_NORMAL
- en: Any instance of the Alert component will require the use of the `.alert` CSS
    class on the `<div>` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You also need a second CSS class to indicate which version of the alert you
    want to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Success** alert uses the class `.alert-success` and is green
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Info** alert uses the class `.alert-info` and is blue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Warning** alert uses the class `.alert-warning` and is yellow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Danger** alert uses the class `.alert-danger` and is red
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you''ve set up the code for those alerts, they should look like this in
    the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Alerts component](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That was a basic example of using Alerts. There are some additional things you
    can do to extend this component such as adding a dismiss button.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a dismiss button to alerts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to make your alert bar dismissible, you can add a button to do
    this. To include the link, update the code for your bar, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous Alert bar code doesn''t change, but you do need to add a button
    before the alert message:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<button>` requires a class named `.close` to appear
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You'll also need the `data-dismiss` attribute to be included with a value of
    `alert`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `&times;` code will be rendered as an **X** in the browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you''ve added the new code, your alert bar should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a dismiss button to alerts](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now your alert bar has a dismissible **X** button that can be triggered to close
    when you implement the functionality of the component in your app or website.
    That completes the Alert component in Bootstrap 4\. In the next section, I'll
    teach you about the best new component in version 4, which is Cards.
  prefs: []
  type: TYPE_NORMAL
- en: Using Cards for layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my opinion, the best new feature in Bootstrap 4 is the new Card component.
    If you're unfamiliar with Cards, they were made popular with the release of Google
    Material Design. They are a mobile first content container that works well for
    phones, tablets, and the desktop.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be using the Card component heavily in our blog project so let''s jump
    right in and start learning how to use them. Check out the following code to learn
    how to render a basic card:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a number of new CSS classes you need to be aware of here, so let''s
    go through them one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: Any instance of the Card component must use a `<div>` tag with a CSS class named
    `.card` on it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you wish to include an image inside your card, it comes next. The image requires
    a class named `.card-img-top` to display the image at the top of the card. Although
    not required, I would also recommend adding the class `.img-fluid` to your image.
    This will make the image responsive so that it will automatically resize to match
    the width of your card.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the image, you need to start a new `<div>` with a CSS class named `.card-block`.
    This part of the Card will contain the actual textual content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first thing your card should have is a title. Use an `<h4>` tag with a CSS
    class of `.card-title` for this section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, you can insert a paragraph of text with a `<p>` tag and a class of `.card-text`.
    If you choose to have multiple paragraphs, make sure each one uses that same class
    name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, I've inserted a primary `<button>` so the user has something to click
    on to view the full piece of content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After you''ve finished coding this up, it should appear like this in your browser.
    Note for demo purposes, I''ve included an image of my own so you can see how it
    works. You''ll need to provide your own images for your projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Cards for layout](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, this will render a neat-looking little content component that
    you can use in many different ways. Let's move on by learning some other ways
    that you can customize the Card component.
  prefs: []
  type: TYPE_NORMAL
- en: Moving the Card title
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perhaps you want to move the title of your card above the image? This is actually
    really easy to do, you simply need to move the `<title>` tag before the image
    in the flow of the component, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a couple of things here that you need to know about:'
  prefs: []
  type: TYPE_NORMAL
- en: There are now two instances of `<div class="card-block">` in this card. It is
    perfectly fine to reuse this section within a single card. You'll notice that
    the header tag is wrapped inside of this `<div>`. This is required to apply the
    proper padding and margin around the title in the card.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second thing you need to note is that the header tag has been moved above
    the image in the Card layout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After making this change, your card should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Moving the Card title](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Hopefully this shows you how easy it is to work with different content in cards.
    Let's continue by showing some other things that you can do.
  prefs: []
  type: TYPE_NORMAL
- en: Changing text alignment in cards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, text and elements will always align left in a card. However, it
    is possible to change this quite easily. Let''s create a second card and then
    we''ll center one and right align the other. I''m going to remove the image so
    the code is easier to understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Not much has changed here, but let''s go over what is different:'
  prefs: []
  type: TYPE_NORMAL
- en: First, as I mentioned, I removed the image to make the code simpler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the first card, I've added a class of `.text-xs-center`, which will center
    the text in the card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the second card, I added a class named `.text-xs-right`, which will right
    align everything
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That''s all you need to do. If you view this in the browser it should look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing text alignment in cards](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So with one additional CSS class we can easily control the alignment of the
    text and elements in a card. Cards are a pretty powerful component, so let's continue
    to learn how you can customize them.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a header to a Card
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to add a header to your Card, this is also pretty easy to do. Check
    out this code sample to see it in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'With the addition of a new section of code, we can add a header:'
  prefs: []
  type: TYPE_NORMAL
- en: Before the `.card-block` section, insert a new `<div>` with a class named `.card-header`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within this new `<div>`, you can add the header title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Save your file and check it out in the browser, and it should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a header to a Card](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'That''s a super easy way to add a header section to your card. You can add
    a footer in the same manner. Let''s add some additional code for the footer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The setup for the footer is very similar to the header; let''s break it down:'
  prefs: []
  type: TYPE_NORMAL
- en: This time, below the `.card-block` section, insert a new `<div>` with a class
    named `.card-footer`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside this new `<div>`, insert your footer text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Save the file again and view it in the browser, and it should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a header to a Card](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Easy as that, we've now also included a footer with our Card. Next, let's learn
    a way to apply a different look and feel to our Card.
  prefs: []
  type: TYPE_NORMAL
- en: Inverting the color scheme of a Card
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In some cases, you may want a different look and feel for your Card to make
    it stand out more. There are some CSS classes included with Bootstrap that will
    allow you to inverse the color scheme. Let''s take a look at the code to apply
    this style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, this variation is pretty easy to apply with a couple of small changes:'
  prefs: []
  type: TYPE_NORMAL
- en: On the `<div>` with the `.card` class, add a second class named `.card-inverse`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will only inverse the text in the card. You need to set the `background
    color` yourself. For speed, I just did an inline CSS style in the demo code. I'd
    recommend actually creating a CSS class in your stylesheet for your own project,
    which is a nicer way to do things.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That''s all you need to do. Once you''re done, your card should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inverting the color scheme of a Card](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this case, you do need to specify the custom background color. However,
    Bootstrap does have some background color variations that you can use if you want
    to add an additional CSS class. The naming convention for these options is just
    like buttons and labels. Let''s take a look at what the code will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a bunch of code, but there are only a couple of things that change from
    our previous card example:'
  prefs: []
  type: TYPE_NORMAL
- en: All I've done is add an additional CSS class to the `<div>` with our base `.card`
    class on it. Let's review each one in the following points.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Primary** card uses the `.card-primary` class and is blue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Success** card uses the `.card-success` class and is green.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Info** card uses the `.card-info` class and is light blue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Warning** card uses the `.card-warning` class and is yellow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Danger** card uses the `.card-danger` class and is red.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you''ve set up the above code, your cards should look like this in the
    browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inverting the color scheme of a Card](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That concludes the basic and advanced styling you can do with the Card component.
    Why don't we take a break from learning for a bit and actually build some Cards
    in our blog project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a location card to the Contact page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s jump back into our project by adding a simple Card component to the
    **Contact** page. Reopen `contact.ejs` in your text editor and head down to the
    main body that we recently updated with a contact form. Find the following column
    code for that section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the column is set up, let''s insert a Card component into our new
    column. Enter the following code into the second column in the layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''ve inserted the Card component code, save your file and check it
    out in a browser. It should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a location card to the Contact page](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now the **Contact** page is starting to take more shape. Let's add the Card
    component to a few other pages before we move on to our next Content component.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Blog index page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve covered the card component, it''s time to set up the main layout
    for our Blog index page. The design is going to rely heavily on the Card component,
    so let''s get to it. First of all, open up `index.ejs` in your text editor and
    find the body of the page section. The left column will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Within this `<div>` currently is some filler text. Delete the filler text and
    insert the following Card component, which will be our first Blog post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we''ve added our first card to the Blog roll, let''s break down what''s
    happening:'
  prefs: []
  type: TYPE_NORMAL
- en: I've started by including a photo I took in Nova Scotia a few summers ago. I've
    given it a class of `.img-fluid` so it stretches the width of the card.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From there, I've set up my card exactly like I taught you previously, but in
    this case, I've added some real content for a blog.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s go ahead and add the rest of the Card component code for the blog roll.
    Insert the following code after the first Card in the left column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s a long chunk of code. The filler text is just in there to give you
    an idea. Feel free to remove that or replace it with actual text. Now that we''ve
    filled out the left column with a good amount of content, your page should look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating the Blog index page](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now that the main blog roll content is complete, let's also add the right column
    content.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the sidebar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add some more content to the index page by adding the sidebar. We''ll
    also use the Card component here, but in this case, some different variations
    of it. Go back to `index.ejs` and remove the filler text from the second column.
    Instead, insert the following Card code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll notice in this Card I''m using a different variation, which is the
    List Group option. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `<div>` with a class of `.list-group` inside your card.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside, insert a `<button>` with a class of `.list-group-item` on it for every
    item of your list. I've added five different options.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you''re done, save your file and it should look like this in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the sidebar](img/00090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, that will draw a nice-looking sidebar list component. Let''s
    fill out the rest of the sidebar by inserting the following code after the first
    Card component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce two more List Group Card components for the sidebar of your
    blog project. Once it''s all done, the entire page should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the sidebar](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That concludes the user of the Card component on the index page. The last page
    we need to set up with the Card component is our Blog post page.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Blog post page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The index page is a list of all the Blog posts in our project. The last page
    we need to setup is the Blog post page, which is just a single post in our project.
    Open up the `blog-post.ejs` template you created earlier in the book and let''s
    start updating some code. Head down to the page body section and find this line
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Currently, you''ll see some filler text in that `<div>`; let''s replace it
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s a good chunk of things going on in this code. I''ve thrown in a few
    other components we''ve already learned about so you can see them in action. The
    Card component has the following things included inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: Text, `<code>` and `<pre>` tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's also update this template to use the same sidebar code as the index page.
    Copy the right column code from the index template and paste it into the same
    location in the blog post template.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are done, the page should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the Blog post page](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we're using a single Card component to hold all of the content
    for the body of the page. We're also using the same Card components for the sidebar
    that we copied over from the index page. Now that we've added the Cards to all
    of our page templates, let's get back to learning about some other Content components
    in Bootstrap 4.
  prefs: []
  type: TYPE_NORMAL
- en: How to use the Navs component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Navs component in Bootstrap can be displayed in a couple of different ways.
    The default view for the component is just a simple unstyled list of links. This
    list can also be transformed into tabs or pills for ways of organizing your content
    and navigation. Let''s start by learning how to create a default Nav component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The most basic version of the Nav component is built using the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: The component is based on an unordered list with a class of `.nav`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each `<li>` tag in the list requires a class of `.nav-item`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nested inside the `<li>` tag must be an `<a>` tag with a class of `.nav-link`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you''ve completed adding that code it should look like this in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use the Navs component](img/00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As I mentioned, this is just a basic unstyled list of links. One easy change
    you can make is to display the list of links inline horizontally. To achieve this,
    you just need to add a class named `.nav-inline` to the `<ul>` tag, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: This will display all the links in a horizontal line. Why don't we move on to
    something a little more exciting, such as converting this list into tabs.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tabs with the Nav component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Converting the basic list to tabs is easy to do by adding a couple of things
    to our code. Take a look at this sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ve made two changes to the code, let''s review them now:'
  prefs: []
  type: TYPE_NORMAL
- en: On the `<ul>` tag, I removed the `.nav-inline` class and added `.nav-tabs`.
    This will render the list as tabs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I then added a class of `.active` to the first link so that it is the selected
    tab when the page loads.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After you''ve coded that up, it should look like this in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating tabs with the Nav component](img/00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Just like that you can render the list as a set of tabs. The next variations
    you'll want to try are pills.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a pill navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Changing the style of the Nav component to Pills is actually really easy. Take
    a look at the following sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Let's breakdown what is new here. I've only made one change to the code. I've
    removed the `.nav-tabs` class from the `<ul>` tag and replaced it with a `.nav-pills`
    class. This is the only change you need to make.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save your file with the changes and it should look like this in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a pill navigation](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding example is the default display for Nav pills. There is another
    variation you can try though, which are stacked pills. This pattern is commonly
    used in sidebar navigations. To create this version, update the following line
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Here I''ve simply added a class of `.nav-stacked` to the `<ul>` tag to stack
    the pills. Here''s how it will look in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a pill navigation](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That concludes the Nav component in Bootstrap 4\. As you learned, it's pretty
    easy to create a few different styles of navigation with a simple list of unordered
    links. In the next section, we'll review the more complicated navigation component,
    which is the Navbar.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Bootstrap Navbar component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Navbar component is a staple of Bootstrap that gets used all the time.
    In the past, this component has required a decent amount of markup to get it working.
    I''m glad to report that in Bootstrap 4 they have simplified this component and
    made it easier to use. Let''s start by going over a basic example of the Navbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'You may notice some similarities here with the Nav component. The Navbar uses
    some of the same code, but you can extend it further and combine additional components
    into it. Let''s start by breaking down this basic example:'
  prefs: []
  type: TYPE_NORMAL
- en: A Navbar component can be used outside or inside of a `<div>` with a `.container`
    class on it. If you want the Navbar to be flush with the edges of the browser,
    you should not include it inside a `.container <div>`. However, if you do want
    the default padding and margins applied, put it inside the `<div>`. For this example,
    I'm going to build it outside of a container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Navbar component starts with an HTML5 `<nav>` tag that has the following
    CSS classes added to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.navbar` is the default class that always needs to appear on the component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.navbar-light` is the color of component you want to use. There are some other
    variations you can pick from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.bg-faded` is a utility class that you can use to make the background lighter.
    This is an optional class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first element inside of a Navbar is the Brand. The Brand should be the title
    for your project. To render the element, create an `<a>` tag and give it a class
    of `.navbar-brand`. The anchor text for this link should be the name of your project
    or website. Keep in mind, using the Brand is optional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The core part of the Navbar is the list of navigation links. This is created
    with an unordered list, similar to the Nav component. In this case, your `<ul>`
    tag should have classes of `.nav` and `.navbar-nav` included.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The nested `<li>` and `<a>` tags should use the same `.nav-item` and `.nav-link`
    classes from the Nav component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This will create a basic Navbar component for you. This is how it should look
    in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Bootstrap Navbar component](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now that you've learned how to build a basic Navbar, let's learn how to extend
    the component further.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the color of the Navbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Bootstrap 3, you could invert the color scheme of the Navbar. However, in
    Bootstrap 4 you have multiple options for coloring the Navbar component. All that
    is needed to edit is some of the classes on the `<nav>` tag that wrap the component.
    Let''s take a look at the code for some of the different color options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we''re reusing the keywords for color variations that we''ve
    used in other components. Let''s break down each variation of the Navbar component:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.navbar-inverse` will color the component black and grey'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.navbar-primary` will color the component blue'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.navbar-success` will color the component green'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.navbar-warning` will color the component yellow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.navbar-info` will color the component light blue'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.navbar-danger` will color the component red'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you''re done coding that up, the navbars should look like this in the
    browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the color of the Navbar](img/00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we now have the Navbar in a whole range of colors you can choose
    from. Let's learn what else we can add to this component.
  prefs: []
  type: TYPE_NORMAL
- en: Making the Navbar responsive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Being that Bootstrap is a mobile-first framework, it would only make sense
    that you need the ability to make the Navbar component responsive. Let''s check
    out the basic code for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s a few different things in the code here that you need to be aware
    of:'
  prefs: []
  type: TYPE_NORMAL
- en: After the opening `<nav>` class, you need to insert a `<button>` with the CSS
    classes `.navbar-toggle` and `.hidden-sm-up`. The first class says this button
    will toggle the navigation. The second class says only show the responsive navigation
    for sizes above small. You also need to include the data attribute `data-toggle="collapse"`
    to all the Nav to collapse. Finally, you need to add a data-target, which will
    point to the area you want to be collapsible. I've given that an ID of `#responsive-nav`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, head down to your list of links and wrap a `<div>` around them. This section
    needs CSS classes named `.collapse` and `.navbar-toggleable-xs`. You also need
    to give it an ID of `responsive-nav` to tie it to the button from the previous
    step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'That''s it; once you code this up shrink your browser window to a small size
    and your bar should switch to look like this. Oh, and don''t forget that the code
    `☰` in the button will render a hamburger menu icon in the responsive Navbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making the Navbar responsive](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That concludes the Navbar component in Bootstrap 4\. I know this has been a
    long chapter, but we only have a few more components to go over.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Breadcrumbs to a page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Breadcrumbs component is a pretty easy one to use in Bootstrap. Let''s
    check out the code for how to render one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the code for this component is pretty basic, let''s review
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: The Breadcrumb component uses an ordered list or `<ol>` tag as its base.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within the ordered list, you simply just need to create a list of links. The
    last item in the list should have a class of `.active` on it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Breadcrumbs to the Blog post page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this example, let''s actually add some Breadcrumbs to our Blog post page
    template. Open up `blog-post.ejs` and add the following code after the container
    `<div>` at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'This code should come before the page title and once you make the update, your
    page should now look like this at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Breadcrumbs to the Blog post page](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There, now we've added a nice Breadcrumb to our blog post template. Let's move
    on to adding Pagination to our page templates.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Pagination component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s continue adding some more components to our templates by learning how
    to use the Pagination component. For our blog project, we want to use the Pager
    version of the component. Open up `index.ejs` and insert the following code after
    the last Card component in our blog feed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The Pager is wrapped in an HTML5 `<nav>` tag and uses an unordered list as
    its base:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<ul>` tag should have a class of `.pager` added to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first list item in the group should have a class of `.pager-prev` on it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second list item should have a class of `.pager-next` on it. In this case,
    I've also added the class `.disabled` which means there are no more posts to go
    to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After you''ve added this code to your index template, it should look like this
    in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Pagination component](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's also add this component to the Blog post page template.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Pager to the Blog post template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open up `blog-post.ejs` and paste the same snippet of code from previously at
    the bottom of the left column, right after the end of the Card component. I won't
    bother posting another screenshot, as it should look the same as the previous example.
    Let's continue by learning how to use another component.
  prefs: []
  type: TYPE_NORMAL
- en: How to use the List Group component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the last main content component we need to go over for this chapter.
    Let''s get right into it by reviewing the code needed to render a List Group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Like the components before it, this one is based off of an unordered list:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<ul>` tag needs a class of `.list-group` on it to start
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each `<li>` needs a class of `.list-group-item` on it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you''re done, your List Group should look like this in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use the List Group component](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, with some minimal coding you can render a decent looking component.
    You may have missed it, but we actually already used this component when we were
    building our sidebar on the index and blog post page templates. Open up one of
    them in a text editor and you''ll see the following code, which is a List Group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: That concludes the use of the List Group component. That also concludes the
    Content components chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This has been a really long chapter but I hope you have learned a lot. We have
    covered Bootstrap components including buttons, button groups, button dropdown,
    forms, input groups, dropdowns, Jumbotron, Label, Alerts, Cards, Navs, Navbar,
    Breadcrumb, Pagination, and List Group. Our blog project is really starting to
    take shape now, too. In the next chapter, we'll dive into some JavaScript components
    in Bootstrap 4 that will include Modal, Tooltips, Popovers, Collapse, and Carousel.
  prefs: []
  type: TYPE_NORMAL
- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The .btn class cannot be attached to which among the following HTML tags?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<button>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<a>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<p>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<input>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following button is blue by default?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Primary`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Secondary`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`tsInfo`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Success`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following button is yellow by default?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Primary`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Warning`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Danger`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Secondary`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following is the correct command for displaying a primary button?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<button type="Button" class="btn btn-primary">Primary</button>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<button type="Button" class="btn-primary">Primary</button>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<button type="button" class="btn-primary">Primary</button>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<button type="button" class="btn btn-primary">Primary</button>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What will be the output if a `<button>` tag has class `.btn-success-outline`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Entire button will be filled with the color of class `.btn-success`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The border of the button will get the color of the button with class `.btn-success`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The text inside the button will get the color of the button with `.btn-success`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Entire button with the text inside will be filled with the color of class `.btn-success`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following classes groups buttons together on a single line?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.btn-group`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.btn-group-justified`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.btn-group-lg`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.btn-group-vertical`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following attribute needs to be added to allow the buttons to `toggle
    on and off`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`data-target`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`data-toggle`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`class`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`href`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following tags need to be added to convert each checkbox into
    a button?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<label>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<div>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<input>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<button>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the factors are required to wrap your collection of radio buttons
    in a `<div>`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the `<div>` should have same class and different data attribute
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All the `<div>` should have same class and same data attribute
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All the `<div>` should have different class and same data attribute
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All the `<div>` should have different class and different data attribute
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the output of class `.dropup` if you apply it on a `<div>`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This makes the menu disappear
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: This makes the menu appear below the button
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: This makes the menu appear above the button
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: This displays a popup
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Consider the code below:![Assessments](img/00103.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the output of this code?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Dropdown button appears large
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Dropdown button appears small
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Dropdown button appears to be toggled
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Dropdown button is having justified size
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Consider the code below:![Assessments](img/00104.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the `<small>` tag with a class of `.text-muted` display?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It renders the text small and light grey
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It renders the text small and dark grey
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It renders the text small
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It renders text in dark grey color
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For which of the following we use the `<select>` tag?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Displaying a dropdown
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Displaying radio buttons
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Displaying checkboxes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following tags is used for displaying large text?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<fieldset>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<textarea>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<input>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<form>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the output if the `.form-inline` class is applied on a `<form>` tag
    with elements inside it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the elements are inlined
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the elements are inlined and right-aligned
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the elements are inlined and left-aligned
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the elements are inlined and center-aligned
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following classes is used to hide labels?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.sr-only`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`disabled`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`readonly`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.form-control`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following classes will make an image responsive so that it will
    automatically resize to match the width of your card?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.img-responsive`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.card-img-top`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.img-thumbnail`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.img-fluid`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which among the following nav classes will color the component black and grey?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.navbar-warning`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.navbar-primary`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.navbar-inverse`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.navbar-info`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
