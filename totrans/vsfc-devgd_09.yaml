- en: Appendix A. Security Tips for Apex and Visualforce Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录A. Apex和Visualforce开发的安全提示
- en: Security is an important part of web-based applications. This important part
    applies for the Force.com applications as well. We create custom pages with Visualforce
    markup and Apex, and this allows us to provide fully-customized functionality
    to the client. When we use these programming languages, we must be careful with
    the security aspects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性是网络应用程序的重要组成部分。这一重要部分同样适用于Force.com应用程序。我们使用Visualforce标记和Apex创建自定义页面，这使得我们能够向客户提供完全定制的功能。当我们使用这些编程语言时，我们必须注意安全方面。
- en: The Force.com platform has some in-built security assistance, such as user management,
    profile management, role hierarchy, **organization wide defaults** (**OWD**),
    permission sets, public groups, sharing settings, field accessibility, password
    policies, session settings, network access, login access policies, certificate
    and key management, single sign-on Settings, Auth. Providers, Identity Provider,
    View Setup Audit Trail, Expire All Passwords, Delegated Administration, Remote
    Site Settings and HTML Documents and Attachments Settings. But when we create
    custom pages with Apex and Visualforce, we must be careful because there are many
    ways to bypass the in-built security defenses on the Force.com platform. There
    can be general security vulnerabilities as well as Apex and Visualforce specific
    vulnerabilities.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Force.com平台提供一些内置的安全辅助功能，例如用户管理、配置文件管理、角色层次结构、**组织默认值**（**OWD**）、权限集、公共组、共享设置、字段可访问性、密码策略、会话设置、网络访问、登录访问策略、证书和密钥管理、单点登录设置、身份提供者、身份提供者、查看设置审计跟踪、过期所有密码、委托管理、远程站点设置和HTML文档和附件设置。但是，当我们使用Apex和Visualforce创建自定义页面时，我们必须小心，因为有许多方法可以绕过Force.com平台上的内置安全防御。可能存在一般安全漏洞以及Apex和Visualforce特定的漏洞。
- en: Security scanning tools
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全扫描工具
- en: Before we add an application to AppExchange, we have to get the certification
    for the security aspects. A developer must be aware of these security concerns.
    There are some tools available to scan our code for security and quality for example,
    the Force.com Security Source Scanner.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将应用程序添加到AppExchange之前，我们必须获得安全方面的认证。开发者必须意识到这些安全关注点。有一些工具可用于扫描我们的代码以检查安全和质量，例如，Force.com安全源扫描器。
- en: Force.com Security Source Scanner
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Force.com安全源扫描器
- en: The Force.com Security Source Scanner is a cloud-based code analysis tool for
    the Force.com platform. This is a free tool for Force.com developers and the code
    is scanned on a first-come-first-serves basis. The file size, queue size, and
    the complexity of the code directly affects the time for getting the scan results.
    For scanning a particular Salesforce.com user account, we must have the "Author
    Apex" permission and the particular code must not be contained within a package.
    We can submit the code for scanning at [http://security.force.com/security/tools/forcecom/scanner](http://security.force.com/security/tools/forcecom/scanner).
    This tool scans every possible code flow and checks for security vulnerabilities
    and quality of the Apex code. The Force.com Security Source Scanner can detect
    the following security vulnerabilities.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Force.com安全源扫描器是Force.com平台上的基于云的代码分析工具。这是一个免费的工具，供Force.com开发者使用，代码扫描遵循先到先得的原则。文件大小、队列大小和代码的复杂性直接影响扫描结果的时间。为了扫描特定的Salesforce.com用户账户，我们必须拥有“编写Apex”权限，并且特定的代码不能包含在包中。我们可以在[http://security.force.com/security/tools/forcecom/scanner](http://security.force.com/security/tools/forcecom/scanner)提交代码进行扫描。此工具扫描所有可能的代码流程，并检查Apex代码的安全漏洞和质量。Force.com安全源扫描器可以检测以下安全漏洞。
- en: Cross-site scripting
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨站脚本
- en: SOQL injection
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOQL注入
- en: SOSL injection
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SOSL注入
- en: Frame spoofing
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 框架欺骗
- en: Access control issues
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问控制问题
- en: 'The Force.com Security Source Scanner can detect following code and design
    issues:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Force.com安全源扫描器可以检测以下代码和设计问题：
- en: DML statements inside loops
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环中的DML语句
- en: SOQL/SOSL inside loops
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环中的SOQL/SOSL
- en: Not bulkifying Apex methods
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未将Apex方法批量化
- en: Asynchronous (`@future`) methods inside loops
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环中的异步（`@future`）方法
- en: Hardcoding IDs
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬编码ID
- en: Hardcoding `Trigger.new[0]`
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬编码`Trigger.new[0]`
- en: Hardcoding `Trigger.old[0]`
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬编码`Trigger.old[0]`
- en: Referencing static resources
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用静态资源
- en: Queries with no `Where` clause or no `LIMIT` clause
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有WHERE子句或没有LIMIT子句的查询
- en: Multiple triggers on the same object
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同一对象上的多个触发器
- en: Cross-site scripting (XSS)
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨站脚本（XSS）
- en: Cross-site scripting attacks web applications where there is malicious client-side
    scripting or HTML. If the web application includes a malicious script, then the
    attacker can use the web application as an intermediate layer and make the trusted
    user a victim of the attack. A cross-site scripting weakness occurs when dynamically-generated
    web pages display invalidated, unfiltered, and non-encoded user input, allowing
    an attacker to embed malicious scripts into the generated page. This can be leveraged
    to execute the scripting code as if it came from the site's server on to the computer
    of anyone who used the site.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 跨站脚本攻击会攻击存在恶意客户端脚本或HTML的Web应用程序。如果Web应用程序包含恶意脚本，攻击者就可以利用Web应用程序作为中间层，使受信任的用户成为攻击的受害者。当动态生成的Web页面显示无效、未经过滤和未编码的用户输入时，就会发生跨站脚本弱点，这允许攻击者将恶意脚本嵌入到生成的页面中。这可以被利用来执行脚本代码，就像它来自网站的服务器一样，发送到任何使用该网站的用户的计算机上。
- en: 'The Force.com platform has several methods to protect from XSS attacks, which
    are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Force.com平台有几种方法来防止XSS（跨站脚本）攻击，具体如下：
- en: '**Unescaped output and formulas in Visualforce pages**: There can be Visualforce
    pages which depend on the user input, and further functionality will proceed with
    that user input. There are some encoding functions to stop XSS vulnerabilities,
    which are as follows:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visualforce页面中的未转义输出和公式**：可能存在依赖于用户输入的Visualforce页面，并且后续功能将使用该用户输入继续。有一些编码函数可以阻止XSS漏洞，具体如下：'
- en: '`HTMLENCODE`: This function encodes the text and the merged field values to
    reserved HTML characters. For example, the greater than sign(>) into &gt.'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTMLENCODE`：此函数将文本和合并字段值编码为保留HTML字符。例如，大于号(>)编码为&gt;。'
- en: '`JSENCODE`: This function encodes the text and merged field values by inserting
    escape characters.'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSENCODE`：此函数通过插入转义字符来编码文本和合并字段值。'
- en: '`JSINHTMLENCODE`: This function does the tasks of both the `HTMLENCODE` and
    `JSENCODE` functions.'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JSINHTMLENCODE`：此函数执行`HTMLENCODE`和`JSENCODE`函数的任务。'
- en: '`URLENCODE`: This function encodes the text and merged field values by replacing
    illegal characters in URLs. For example, blank spaces are replaced by %20.'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`URLENCODE`：此函数通过替换URL中的非法字符来编码文本和合并字段值。例如，空格被替换为%20。'
- en: Tip
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: All the standard Visualforce components (starting with `<apex>`) are anti-XSS.
    They have a filter to stop the XSS attacks. Optionally, we can disable the escape
    on Visualforce components by setting the value of the escape attribute to false.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所有标准Visualforce组件（以`<apex>`开头）都是防XSS的。它们有一个过滤器来阻止XSS攻击。可选地，我们可以通过将escape属性的值设置为false来禁用Visualforce组件上的转义。
- en: Cross-site request forgery (CSRF)
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨站请求伪造（CSRF）
- en: The Web does not, and cannot, sufficiently verify whether a well-formed, valid,
    consistent request was intentionally provided by the user who submitted the request.
    In effect, when a server receives a request it has no ability to determine whether
    that was initiated by a valid user or an attacker, leading to potential escalation
    of the privilege or theft of data attacks.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网无法，也无法充分验证一个格式良好、有效、一致请求是否是提交请求的用户有意提供的。实际上，当服务器收到请求时，它无法确定该请求是由有效用户还是攻击者发起的，这可能导致权限提升或数据盗窃攻击的潜在升级。
- en: The Force.com platform has implemented an anti-CSRF in standard controllers.
    Each page has random characters as a hidden field. When we load the next page,
    the validity will be checked and the command will be executed after the value
    matches with the expected value.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Force.com平台在标准控制器中实现了反CSRF（跨站请求伪造）机制。每个页面都有一个作为隐藏字段的随机字符。当我们加载下一页时，会检查其有效性，并在值与预期值匹配后执行命令。
- en: 'The following code has bypassed the anti-CSRF controls in a custom method called
    `AutoRun`. There aren''t any in-built anti-CSRF controls for such scenarios in
    the Force.com platform. There are workarounds that will add an intermediate confirmation
    page before executing the action and shortening the idle session timeout for an
    organization:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码在名为`AutoRun`的自定义方法中绕过了反CSRF控制。在Force.com平台中，此类场景没有内置的反CSRF控制。有一些解决方案可以在执行操作之前添加一个中间确认页面，并缩短组织的空闲会话超时时间：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: SOQL injection
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SOQL注入
- en: The most popular injection attacks occur when the user's input is directly involved
    with the query or command. Therefore, the attacker can pass an untrusted date
    to execute a particular functionality or command. Then the attacker will get the
    access to unauthorized data.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的注入攻击发生在用户的输入直接涉及查询或命令时。因此，攻击者可以传递不受信任的数据来执行特定的功能或命令。然后攻击者将获得访问未经授权数据的权限。
- en: Apex uses SOQL as the query language and it has limited functionality than SQL.
    But the SOQL injection attacks are similar to SQL injection attacks. The Salesforce.com
    users are willing to put their sensitive data into Salesforce because Salesforce.com
    is a secure platform. Therefore, when we build custom pages and custom controllers,
    we must pay more attention to prevent such attacks. In Force.com, SOQL injections
    occur with dynamic SOQL queries.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Apex 使用 SOQL 作为查询语言，其功能比 SQL 有限。但 SOQL 注入攻击与 SQL 注入攻击类似。Salesforce.com 用户愿意将敏感数据放入
    Salesforce，因为 Salesforce.com 是一个安全平台。因此，当我们构建自定义页面和自定义控制器时，我们必须更加注意防止此类攻击。在 Force.com
    中，SOQL 注入发生在动态 SOQL 查询中。
- en: Dynamic SOQL is used to create the SOQL query string at the runtime of Apex
    code and allows us to build more flexible functionality (for example, the search
    functionality which depends on the user's input). Using the `Database.query(queryString)`
    method, we can create dynamic queries that return a single `sObject` or a list
    of `sObjects`. The SOQL injection can be implemented in Apex if the application
    proceeds with the user's input to build a dynamic SOQL and we haven't handled
    the input properly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 动态 SOQL 用于在 Apex 代码的运行时创建 SOQL 查询字符串，并允许我们构建更灵活的功能（例如，依赖于用户输入的搜索功能）。使用 `Database.query(queryString)`
    方法，我们可以创建动态查询，返回单个 `sObject` 或 `sObjects` 列表。如果应用程序在 Apex 中使用用户的输入来构建动态 SOQL 而我们没有正确处理输入，则可以在
    Apex 中实现 SOQL 注入。
- en: The Force.com platform provides a method called `escapeSingleQuotes` to prevent
    SOQL injections. Using this method, we can handle the user's input by adding the
    escape character (`\`) to all single quotations in the user input string. Basically,
    this method considers all the single quotation as enclosing strings instead of
    database commands.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Force.com 平台提供了一个名为 `escapeSingleQuotes` 的方法来防止 SOQL 注入。使用此方法，我们可以通过在用户输入字符串中的所有单引号添加转义字符（`\`）来处理用户的输入。基本上，此方法将所有单引号视为字符串的定界符，而不是数据库命令。
- en: The following example illustrates the SOQL injection's vulnerability in Apex.
    This query returns order records which are not delivered and the customer's name
    (`cusName`) for the specific order is found according to the user input.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了 Apex 中 SOQL 注入的漏洞。此查询返回未交付的订单记录以及特定订单的客户的名称（`cusName`），该名称是根据用户输入找到的。
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If the user input is `chamil`, the executing query string would be as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户输入是 `chamil`，执行查询字符串将如下所示：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That''s a clean input. But the problem is that users can enter malicious inputs,
    for example, `chamil%''` or `Customer__r.Name like ''`. Then the query string
    would look as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个干净的输入。但问题是用户可以输入恶意输入，例如，`chamil%'` 或 `Customer__r.Name like ''`。然后查询字符串将如下所示：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this case, the result of the query will not return selective orders but
    will deliver all the orders from the database This is the impact of SOQL injections.
    There is a way to protect from such SOQL injection attacks. We can use a string
    variable to assign the user input to, and add that particular variable to the
    dynamic query. The following is the fixed code snippet for the preceding vulnerability:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，查询的结果将不会返回选择性的订单，而是将数据库中的所有订单都发送出来。这是 SOQL 注入的影响。有一种方法可以保护免受此类 SOQL 注入攻击。我们可以使用一个字符串变量来分配用户输入，并将该特定变量添加到动态查询中。以下是为前述漏洞提供的固定代码片段：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Data access control
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据访问控制
- en: 'The Force.com platform allows us to configure object permissions (read, create,
    edit, and delete) and create data sharing rules. We can implement security controls
    using those features. The standard controllers adhere to these security settings.
    But the custom controllers and controller extensions can access all the data during
    the execution. This is the default behavior, but we can control the data access
    from Apex classes using the `with sharing` keyword. The keyword is used as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Force.com 平台允许我们配置对象权限（读取、创建、编辑和删除）并创建数据共享规则。我们可以使用这些功能来实现安全控制。标准控制器遵循这些安全设置。但是，自定义控制器和控制器扩展可以在执行过程中访问所有数据。这是默认行为，但我们可以使用
    `with sharing` 关键字从 Apex 类中控制数据访问。该关键字的使用方法如下：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `with sharing` keyword forces the Apex class to consider the security sharing
    permissions of the logged user.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`with sharing`关键字强制Apex类考虑已登录用户的权限共享安全设置。'
- en: Summary
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have learned the importance of securing an application. We became familiar
    with the possible vulnerabilities, solution for those vulnerabilities, and security
    scanning tools.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了保护应用程序的重要性。我们熟悉了可能存在的漏洞、解决这些漏洞的方法以及安全扫描工具。
- en: Every start has an end, and thus we have reached the end of the book. We have
    covered the most important topics that will help you to improve the knowledge
    of Visualforce development. Further, you can use Force.com resources such as the
    Force.com discussion board (you can obtain help on technical issues), by using
    `#askforce` on Twitter and [https://blogs.developerforce.com](https://blogs.developerforce.com).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 每个开始都有一个结束，因此我们已到达本书的结尾。我们涵盖了帮助你提高Visualforce开发知识的最重要主题。此外，你可以通过在Twitter上使用`#askforce`和[https://blogs.developerforce.com](https://blogs.developerforce.com)来使用Force.com资源，例如Force.com讨论板（你可以在技术问题上获得帮助）。
- en: May the force be with you!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 愿力量与你同在！
