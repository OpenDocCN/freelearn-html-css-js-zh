- en: Appendix A. Security Tips for Apex and Visualforce Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is an important part of web-based applications. This important part
    applies for the Force.com applications as well. We create custom pages with Visualforce
    markup and Apex, and this allows us to provide fully-customized functionality
    to the client. When we use these programming languages, we must be careful with
    the security aspects.
  prefs: []
  type: TYPE_NORMAL
- en: The Force.com platform has some in-built security assistance, such as user management,
    profile management, role hierarchy, **organization wide defaults** (**OWD**),
    permission sets, public groups, sharing settings, field accessibility, password
    policies, session settings, network access, login access policies, certificate
    and key management, single sign-on Settings, Auth. Providers, Identity Provider,
    View Setup Audit Trail, Expire All Passwords, Delegated Administration, Remote
    Site Settings and HTML Documents and Attachments Settings. But when we create
    custom pages with Apex and Visualforce, we must be careful because there are many
    ways to bypass the in-built security defenses on the Force.com platform. There
    can be general security vulnerabilities as well as Apex and Visualforce specific
    vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Security scanning tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we add an application to AppExchange, we have to get the certification
    for the security aspects. A developer must be aware of these security concerns.
    There are some tools available to scan our code for security and quality for example,
    the Force.com Security Source Scanner.
  prefs: []
  type: TYPE_NORMAL
- en: Force.com Security Source Scanner
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Force.com Security Source Scanner is a cloud-based code analysis tool for
    the Force.com platform. This is a free tool for Force.com developers and the code
    is scanned on a first-come-first-serves basis. The file size, queue size, and
    the complexity of the code directly affects the time for getting the scan results.
    For scanning a particular Salesforce.com user account, we must have the "Author
    Apex" permission and the particular code must not be contained within a package.
    We can submit the code for scanning at [http://security.force.com/security/tools/forcecom/scanner](http://security.force.com/security/tools/forcecom/scanner).
    This tool scans every possible code flow and checks for security vulnerabilities
    and quality of the Apex code. The Force.com Security Source Scanner can detect
    the following security vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-site scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SOQL injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SOSL injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frame spoofing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access control issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Force.com Security Source Scanner can detect following code and design
    issues:'
  prefs: []
  type: TYPE_NORMAL
- en: DML statements inside loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SOQL/SOSL inside loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not bulkifying Apex methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asynchronous (`@future`) methods inside loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardcoding IDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardcoding `Trigger.new[0]`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardcoding `Trigger.old[0]`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referencing static resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Queries with no `Where` clause or no `LIMIT` clause
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple triggers on the same object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-site scripting (XSS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cross-site scripting attacks web applications where there is malicious client-side
    scripting or HTML. If the web application includes a malicious script, then the
    attacker can use the web application as an intermediate layer and make the trusted
    user a victim of the attack. A cross-site scripting weakness occurs when dynamically-generated
    web pages display invalidated, unfiltered, and non-encoded user input, allowing
    an attacker to embed malicious scripts into the generated page. This can be leveraged
    to execute the scripting code as if it came from the site's server on to the computer
    of anyone who used the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Force.com platform has several methods to protect from XSS attacks, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unescaped output and formulas in Visualforce pages**: There can be Visualforce
    pages which depend on the user input, and further functionality will proceed with
    that user input. There are some encoding functions to stop XSS vulnerabilities,
    which are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTMLENCODE`: This function encodes the text and the merged field values to
    reserved HTML characters. For example, the greater than sign(>) into &gt.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JSENCODE`: This function encodes the text and merged field values by inserting
    escape characters.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JSINHTMLENCODE`: This function does the tasks of both the `HTMLENCODE` and
    `JSENCODE` functions.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`URLENCODE`: This function encodes the text and merged field values by replacing
    illegal characters in URLs. For example, blank spaces are replaced by %20.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the standard Visualforce components (starting with `<apex>`) are anti-XSS.
    They have a filter to stop the XSS attacks. Optionally, we can disable the escape
    on Visualforce components by setting the value of the escape attribute to false.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-site request forgery (CSRF)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Web does not, and cannot, sufficiently verify whether a well-formed, valid,
    consistent request was intentionally provided by the user who submitted the request.
    In effect, when a server receives a request it has no ability to determine whether
    that was initiated by a valid user or an attacker, leading to potential escalation
    of the privilege or theft of data attacks.
  prefs: []
  type: TYPE_NORMAL
- en: The Force.com platform has implemented an anti-CSRF in standard controllers.
    Each page has random characters as a hidden field. When we load the next page,
    the validity will be checked and the command will be executed after the value
    matches with the expected value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code has bypassed the anti-CSRF controls in a custom method called
    `AutoRun`. There aren''t any in-built anti-CSRF controls for such scenarios in
    the Force.com platform. There are workarounds that will add an intermediate confirmation
    page before executing the action and shortening the idle session timeout for an
    organization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: SOQL injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most popular injection attacks occur when the user's input is directly involved
    with the query or command. Therefore, the attacker can pass an untrusted date
    to execute a particular functionality or command. Then the attacker will get the
    access to unauthorized data.
  prefs: []
  type: TYPE_NORMAL
- en: Apex uses SOQL as the query language and it has limited functionality than SQL.
    But the SOQL injection attacks are similar to SQL injection attacks. The Salesforce.com
    users are willing to put their sensitive data into Salesforce because Salesforce.com
    is a secure platform. Therefore, when we build custom pages and custom controllers,
    we must pay more attention to prevent such attacks. In Force.com, SOQL injections
    occur with dynamic SOQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic SOQL is used to create the SOQL query string at the runtime of Apex
    code and allows us to build more flexible functionality (for example, the search
    functionality which depends on the user's input). Using the `Database.query(queryString)`
    method, we can create dynamic queries that return a single `sObject` or a list
    of `sObjects`. The SOQL injection can be implemented in Apex if the application
    proceeds with the user's input to build a dynamic SOQL and we haven't handled
    the input properly.
  prefs: []
  type: TYPE_NORMAL
- en: The Force.com platform provides a method called `escapeSingleQuotes` to prevent
    SOQL injections. Using this method, we can handle the user's input by adding the
    escape character (`\`) to all single quotations in the user input string. Basically,
    this method considers all the single quotation as enclosing strings instead of
    database commands.
  prefs: []
  type: TYPE_NORMAL
- en: The following example illustrates the SOQL injection's vulnerability in Apex.
    This query returns order records which are not delivered and the customer's name
    (`cusName`) for the specific order is found according to the user input.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If the user input is `chamil`, the executing query string would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s a clean input. But the problem is that users can enter malicious inputs,
    for example, `chamil%''` or `Customer__r.Name like ''`. Then the query string
    would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the result of the query will not return selective orders but
    will deliver all the orders from the database This is the impact of SOQL injections.
    There is a way to protect from such SOQL injection attacks. We can use a string
    variable to assign the user input to, and add that particular variable to the
    dynamic query. The following is the fixed code snippet for the preceding vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Data access control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Force.com platform allows us to configure object permissions (read, create,
    edit, and delete) and create data sharing rules. We can implement security controls
    using those features. The standard controllers adhere to these security settings.
    But the custom controllers and controller extensions can access all the data during
    the execution. This is the default behavior, but we can control the data access
    from Apex classes using the `with sharing` keyword. The keyword is used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `with sharing` keyword forces the Apex class to consider the security sharing
    permissions of the logged user.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned the importance of securing an application. We became familiar
    with the possible vulnerabilities, solution for those vulnerabilities, and security
    scanning tools.
  prefs: []
  type: TYPE_NORMAL
- en: Every start has an end, and thus we have reached the end of the book. We have
    covered the most important topics that will help you to improve the knowledge
    of Visualforce development. Further, you can use Force.com resources such as the
    Force.com discussion board (you can obtain help on technical issues), by using
    `#askforce` on Twitter and [https://blogs.developerforce.com](https://blogs.developerforce.com).
  prefs: []
  type: TYPE_NORMAL
- en: May the force be with you!
  prefs: []
  type: TYPE_NORMAL
