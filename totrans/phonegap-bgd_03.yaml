- en: Chapter 3. Mobile Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*In [Chapter 2](ch02.html "Chapter 2. Building Your First PhoneGap Project"),
    *Building Your First PhoneGap Project*, you learned about the PhoneGap app structure,
    events, how to use command-line tools, and how to create a sample app. You also
    learned about the various debugging methods that can help developers and saw how
    to build/deploy your app. In this chapter, you will learn about the design method,
    the mobile frameworks available in the industry, and the details regarding these.
    We will also see how to create a sample application using jQuery Mobile.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Review some of the concepts on developing native UI for mobile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore best practices for developing mobile UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get an overview of the most popular app frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to create a mobile application using jQuery mobile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building native UI for the mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using PhoneGap, you create hybrid apps based on standards. The app is rendered
    to the user through a WebView, which means it is a browser instance wrapped into
    the app itself.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, it's important to know how to use mobile-specific HTML tags,
    CSS properties, and JavaScript methods, properties, and events.
  prefs: []
  type: TYPE_NORMAL
- en: The viewport meta tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `viewport` meta tag was introduced by Apple with iOS 1.0 and is largely
    supported in all the major mobile browsers. When a web page doesn't fit the size
    of the browser, the default behavior of a mobile browser is to scale it. The `viewport`
    meta tag is what you need in order to have control over this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `viewport` meta tag looks like the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: What you are actually saying to the browser is that the default width and height
    of the content are the width and height of the device screen (`width=device-width`
    and `height=device-height`), that the content is scalable (`user-scalable=1`),
    and what the minimum and maximum scale is (`minimum-scale=1` and `maximum-scale=1.5`).
  prefs: []
  type: TYPE_NORMAL
- en: An exhaustive reference covering the `viewport` meta tag is available on the
    Apple Developer Library website at [https://developer.apple.com/library/safari/#documentation/appleapplications/reference/SafariHTMLRef/Articles/MetaTags.html](https://developer.apple.com/library/safari/#documentation/appleapplications/reference/SafariHTMLRef/Articles/MetaTags.html).
    Some useful information is available on the Opera developer's website at [http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/](http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/).
  prefs: []
  type: TYPE_NORMAL
- en: Remember that by default the WebView used by PhoneGap ignores the settings defined
    in the `viewport` meta tag; you will learn during this chapter how to enable the
    handling of the viewport settings in your app.
  prefs: []
  type: TYPE_NORMAL
- en: Unwanted telephone number linking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The mobile browser click-to-call format detection on most phones isn''t that
    accurate; plenty of numbers get selected, including addresses, ISBN numbers, and
    a variety of different types of numeric data that aren''t phone numbers. In order
    to avoid any possible issues and to have full control on a call from your HTML
    markup, it is necessary to add the following meta tag to the header of your page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Defining this tag, you can then control how to handle numbers using the `tel`
    or `sms` scheme in the `href` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Please note that this telephone format detection will only work for mobile browsers.
    In desktop browsers, it does nothing, unless you have some desktop telephony software
    such as Skype installed on the desktop along with the browser plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Autocorrect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Submitting data using mobile devices is a tedious operation for the user, because
    sometimes the built-in autocorrect features don''t help at all. In order to disable
    the autocorrect features, use the `autocorrect`, `autocomplete`, and `autocapitalize`
    attributes in conjunction with an `input` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: CSS media queries and mobile properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the interesting features of CSS is media queries. Media queries themselves
    are actually quite old and not mobile-specific, but they are really useful when
    handling different screen sizes on mobiles. Media queries can be used inline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, media queries can be used as the `media` attribute of a `link`
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There is no best way to use them because it depends on the type of app. Using
    media queries inline, the CSS file tends to grow and the parsing can be slow on
    old devices. On the other hand, having CSS rules organized in separate files helps
    to keep the code well organized and speeds up the parsing, but it means more HTTP
    calls, which are usually not the best option on mobiles due to the latency of
    mobile connections.
  prefs: []
  type: TYPE_NORMAL
- en: A good balance should be reached using offline caching strategies, which you
    will learn more about in the next chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several CSS mobile-specific properties; most of them are vendor-specific
    and are identified with prefixes. The most common properties used in mobile development
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-webkit-tap-highlight-color: 0;` (iOS): This overrides the semitransparent
    color overlay when a user clicks on a link or clickable element. This is the only
    property that is iOS-specific.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-webkit-user-select: none;`: This prevents the user from selecting a text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-webkit-touch-callout: none;`: This prevents the callout toolbar from appearing
    when a user touches and holds an element such as an `anchor` tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Always remember that the usage of browser prefixes in JavaScript is possible
    only by using mixed case or lower CamelCase formatting, which means that in order
    to prevent the user from selecting text through JavaScript, you have to use the
    following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The CamelCase formatting is due to the fact that the dash sign cannot be used
    in a variable name in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Screen orientation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The screen orientation is important when dealing with an app because the size
    of the screen dramatically changes when the orientation is changed. The `orientationchange`
    event is triggered at every 90 degrees of rotation (portrait and landscape modes),
    and it's possible to listen to it using `addEventListener`; the current orientation
    is available through `window.orientation`.
  prefs: []
  type: TYPE_NORMAL
- en: Device orientation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to get more detailed information about the orientation of the device,
    you can define a listener for the `deviceorientation` event. The `deviceorientation`
    event will fire very frequently and give information about the device''s orientation
    in three dimensions as values of alpha, beta, and gamma, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `deviceorientation` event is strictly related to the existence of a gyroscope
    on the device; the gyroscope measures the 3D angle orientation, even when the
    device is at rest. For details on using the orientation data, please refer to
    [https://developer.mozilla.org/en-US/docs/Web/API/Detecting_device_orientation](https://developer.mozilla.org/en-US/docs/Web/API/Detecting_device_orientation).
  prefs: []
  type: TYPE_NORMAL
- en: Shake gestures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gesture handling is the key to successful apps. The `devicemotion` event fires
    when the user shakes or moves his/her device. The `devicemotion` event is strictly
    related to the accelerometer, which fires events off when the device accelerates.
  prefs: []
  type: TYPE_NORMAL
- en: Media capture APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While old versions of iOS are still lacking basic file input, Android, iOS
    version 6, and later, Windows Phone 8 and BlackBerry 10 are giving developers
    fine-grained control over content that users can upload and allow you to access
    the device camera and microphone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Data URI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can represent an image as a Base64 string, which ensures higher performance
    because there is no TCP negotiation in order to open a new HTTP connection. Practically
    speaking, it means that there is a lower latency when compared to the usual way
    to load an image on the Web. When a `base64` string is assigned as the `src` attribute
    to an `img` tag, the code looks as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When converting an image to Base64, there is a 30-40 percent weight increase;
    for this reason, you have to optimize the image carefully before converting it
    and when possible, activate GZip compression on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Achieving a native look and feel on iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the biggest problems with the iOS platform is the publication of your
    app in the App Store. In fact, Apple is pretty scrupulous when checking whether
    an app can be added to the store.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important criteria to be admitted to the App Store is that the
    app provides an iOS user experience. For more details on the requirements an app
    must meet to make it into the App Store, go to the Apple Developer website available
    at [https://developer.apple.com/app-store/review/](https://developer.apple.com/app-store/review/).
  prefs: []
  type: TYPE_NORMAL
- en: In recent times, there have been several iOS-specific mobile frameworks developed,
    such as Framework 7, which can provide iOS native looks to your app. For more
    information, visit [http://www.idangero.us/framework7/](http://www.idangero.us/framework7/).
  prefs: []
  type: TYPE_NORMAL
- en: Choosing mobile frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developers typically have their own template libraries, built from scratch or
    commercial, to jump-start their projects. In this section, we will see a short
    overview of some useful HTML/CSS/JavaScript frameworks you can evaluate as your
    blueprint, libraries, and frameworks that you can integrate within your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A framework or a library is essentially a set of functions that you can call,
    these days usually organized into classes or files. A framework embodies some
    abstract design with more behavior built-in. Martin Fowler discusses further the
    difference between a library and a framework in his article available at [http://martinfowler.com/bliki/InversionOfControl.html](http://martinfowler.com/bliki/InversionOfControl.html).
  prefs: []
  type: TYPE_NORMAL
- en: Using HTML5 Mobile Boilerplate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a very clean, mobile-friendly HTML template that includes an optimized
    Google Analytics snippet, placeholders for touch-based device icons, the library
    Zepto (a minimalist JavaScript library for modern browsers with a largely jQuery-compatible
    API), and the Modernizr feature detection library (a library that uses object
    detection techniques to discover whether a feature is available before you use
    it, allowing for graceful degradation or progressive enhancement of web pages).
  prefs: []
  type: TYPE_NORMAL
- en: You can download the HTML5 Mobile Boilerplate template from the official website
    at [http://html5boilerplate.com/mobile/](http://html5boilerplate.com/mobile/);
    for updates or to get involved, follow the project on GitHub at [https://github.com/h5bp/mobile-boilerplate](https://github.com/h5bp/mobile-boilerplate).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to download a customized version of HTML5 Mobile Boilerplate, which
    enables you to select which templates to use, the JavaScript libraries to include,
    and so on, go to [http://www.initializr.com/](http://www.initializr.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Using Zurb Foundation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You've probably already heard about responsive design, which is a website design
    that responds to the device constraints of the person viewing it. It's a hot topic
    right now and the Foundation framework's most important feature is the responsiveness
    of its layout mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, Foundation provides a good selection of templates to use for the
    most common sections of your app; you can choose the templates you want when downloading
    the framework from [http://foundation.zurb.com/download.php](http://foundation.zurb.com/download.php).
  prefs: []
  type: TYPE_NORMAL
- en: 'The strengths of Foundation are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A 12-column, percentage-based grid with an arbitrary maximum width
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image styles that disregard pixels—foundation images are scaled by the grid
    to different widths
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI and layout elements, including common pieces such as typography and forms,
    as well as tabs, pagination, N-up grids, and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile visibility classes—Foundation lets you very quickly hide and show elements
    on desktops, tablets, and phones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To keep up with Foundation and get the latest builds, follow the GitHub project
    available at [https://github.com/zurb/foundation](https://github.com/zurb/foundation).
  prefs: []
  type: TYPE_NORMAL
- en: Using Twitter Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Twitter Bootstrap is a free collection of tools used to create websites and
    web applications. It contains HTML- and CSS-based design templates for typography,
    forms, buttons, charts, navigation, and other interface components, as well as
    optional JavaScript extensions.
  prefs: []
  type: TYPE_NORMAL
- en: This project is one of the most popular on GitHub; it's very well organized
    and seems born to build apps. In fact, it includes basic CSS and HTML to create
    grids, layouts, typography, tables, forms, navigation, alerts, popovers, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: It's pretty easy to start working with Bootstrap because it uses jQuery. To
    download Bootstrap, you can refer to the project download and customize page available
    at [http://twitter.github.com/bootstrap/customize.html](http://twitter.github.com/bootstrap/customize.html);
    if you want to download a template for Bootstrap, you can refer to the already
    mentioned [http://www.initializr.com/](http://www.initializr.com/) website. But
    note that Bootstrap is specially designed for mobile web and not for hybrid mobile
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ionic framework is a powerful HTML5 hybrid app development framework that helps
    you build native-feeling mobile apps, all with web technologies such HTML, CSS,
    and JavaScript. It's made keeping hybrid mobile apps in mind. As Ionic is based
    on AngularJS and built on top of PhoneGap/Cordova CLI, you can see more CLI command
    syntax similar to it. It has a deep learning curve but it's worth learning. AngularJS
    is not a hybrid mobile framework by itself but Ionic gives everything that a hybrid
    mobile framework would need. The framework is actively maintained. Moreover, the
    framework handles UI rendering based on the platform to provide a native feel
    to the users. Note that it has official support only for Android and iOS. You
    can find more information from [http://ionicframework.com/](http://ionicframework.com/).
  prefs: []
  type: TYPE_NORMAL
- en: ExtJS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ExtJS is a JavaScript framework with good-looking UI widgets to build interactive
    websites, and Sencha Touch based on ExtJS can be used to build hybrid mobile applications.
    It has various features and it's hard to list them all. Also, overall, you will
    have all that you need to develop a feature-rich application. It has both open
    source license and enterprise license available and you can know more about it
    at [https://www.sencha.com/products/extjs/](https://www.sencha.com/products/extjs/)
    and [https://www.sencha.com/products/touch](https://www.sencha.com/products/touch).
  prefs: []
  type: TYPE_NORMAL
- en: AngularJS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AngularJS is a JavaScript framework from Google and it's now the star of enterprise
    development. AngularJS and Cordova/PhoneGap gel very well as it's a framework
    based on JavaScript. AngularJS has steep learning curves, such as ExtJS, but once
    you go through that phase, you will feel wonderful. To build hybrid applications,
    AngularJS has a special mobile counterpart called Mobile AngularJS UI. You can
    learn more about AngularJS and Mobile AngularJS UI at [http://angularjs.org](http://angularjs.org)
    and [http://mobileangularui.com](http://mobileangularui.com), respectively.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery Mobile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The jQuery Mobile framework is a user interface system that works across all
    popular mobile device platforms, built on the rock-solid jQuery and jQuery UI
    foundation. Its codebase is built with progressive enhancement and has a flexible,
    easily themeable design.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery Mobile has broad support for all the major modern desktop, smartphone,
    tablet, and e-reader platforms. In addition, feature phones and older browsers
    are supported because of the progressive enhancement approach (for details, go
    to [http://jquerymobile.com/gbs/](http://jquerymobile.com/gbs/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The main features of jQuery Mobile can be summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Cross-platform, cross-device, and cross-browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI optimized for touch devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Themeable and customizable design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage of non-intrusive semantic HTML5 code only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AJAX calls automatically load dynamic content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightweight (12 KB compressed)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Progressive enhancement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To download the last stable version and to keep up-to-date with the project,
    refer to the official website available at [http://jquerymobile.com](http://jquerymobile.com),
    where you can find useful examples and a tool to create your own themes at [http://jquerymobile.com/themeroller/](http://jquerymobile.com/themeroller/).
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – developing with jQuery Mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's see a quick example of how to use jQuery Mobile in a PhoneGap application.
    You can make any HTML page mobile friendly by using jQuery Mobile. We will create
    a simple app to show multiple entries in the page as a list and show some footer
    menus.
  prefs: []
  type: TYPE_NORMAL
- en: To start with, we need to download jQuery and jQuery Mobile components and place
    them in our project's JS/CSS directory. jQuery is a single JavaScript file and
    jQuery Mobile includes both a JavaScript file and a CSS file. We need to include
    them both in our app's HTML page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the CSS file at the top of the HTML page, right above the `</head>`
    tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Include the JavaScript files at the bottom of the page, right above the `</body>`
    tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In jQuery Mobile, you define a page section by assigning the `data-role` property
    to `page`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, let''s add a `div` element to mark a page:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s add a list to the page. A list in jQuery Mobile is identified by
    adding a `listview` data role to the `<ul>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To add items to the list view, we will add data to the `<ul>` tag as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can test the output either in a desktop browser or in a mobile emulator
    from the IDEs. For the preceding code, you will see the following output in your
    emulator:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – developing with jQuery Mobile](img/B03476_03_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now let''s add a header to the page to make it look better. To add a header
    to the page, use the `data-role` attribute as `header`, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the header, you will now see the following output in the emulator:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – developing with jQuery Mobile](img/B03476_03_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now, it''s time to add a footer menu to the application. Use the following
    code to add a footer menu to the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding HTML code creates a simple unordered list inside a `div` element.
    The content of the list will act as a navigation bar based on the `data-role`
    property we set.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now the application will look as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Time for action – developing with jQuery Mobile](img/B03476_03_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We created a simple application based on jQuery Mobile and the complete `index.html`
    code is provided here for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Selecting a framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's pretty hard to say which is the best framework to use since each one has
    its own advantages and disadvantages. Most of the time, I have to say that it
    depends on the features you have to implement and even more so on the nature of
    your app. For instance, if the app is just for mobiles, then you can decide to
    go lighter and use HTML5 Mobile Boilerplate; on the other hand, if the app is
    intended for the Web and mobiles, then a more sophisticated library can be the
    right choice.
  prefs: []
  type: TYPE_NORMAL
- en: jQuery Mobile is pretty much easy and straightforward to learn and implement.
    However, when it comes to good performance, jQuery Mobile is not the leader. On
    the other hand, certain frameworks such as ExtJS and Ionic require more learning
    to use them in an enterprise-ready application. They have several ready-to-use
    components that help in rapid development.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the frameworks are CSS only, some JavaScript and some with a mix of
    both. For example, jQuery Mobile provides both CSS theming capabilities and also
    JavaScript plugins to add more features. Always keep in mind that your goal is
    to find a balance between the built-in features and performance because mobile
    devices are far less powerful than a desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to build a PhoneGap app that looks native on
    all platforms and got an overview of various mobile development frameworks. A
    sample jQuery Mobile application code was explained step-by-step. In the next
    chapter, you will learn how to work with plugins in your Cordova/PhoneGap project.
    You will find out how to install, integrate, and remove plugins using command-line
    tools.
  prefs: []
  type: TYPE_NORMAL
