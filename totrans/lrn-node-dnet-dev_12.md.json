["```js\n> npm install express-session --save\n\n```", "```js\n> npm install connect-redis --save\n\n```", "```js\n'use strict';\n\nconst session = require('express-session');\n\nlet config = {\n    secret: process.env.SESSION_SECRET,\n    saveUninitialized: false,\n    resave: false\n};\n\nif (process.env.REDIS_URL && process.env.NODE_ENV !== 'test') {\n    const RedisStore = require('connect-redis')(session);\n    config.store = new RedisStore({ url: process.env.REDIS_URL });\n}\n\nmodule.exports = session(config);\n```", "```js\ngulp.task('integration-test', ..., (done) => {\n    const TEST_PORT = 5000;\n process.env.SESSION_SECRET =\n process.env.SESSION_SECRET || 'testOnly';\n    require('./src/server.js').then((server) => {\n        ...\n    });\n}); \n```", "```js\n let sessions = require('./middleware/sessions');\n    ...\n    app.use(bodyParser.urlencoded({ extended: false }));\n app.use(sessions);\n    app.use(express.static(path.join(__dirname, 'public')));\n    ...\n```", "```js\n'use strict';\n\nmodule.exports = (service) => {\n    const uuid = require('uuid');\n\n    return function(req, res, next) {\n let userId = req.session.userId;\n        if (!userId) {\n            userId = uuid.v4();\n req.session.userId = userId;\n            req.user = {\n                id: userId\n            };\n            next();\n        } else {\n            ...\n        }\n    };\n};\n```", "```js\n'use strict';\n\nmodule.exports = require('./config/mongoose').then(mongoose => {\n    ...\n io.use(adapt(require('./middleware/sessions')));\n    const usersService = require('./services/users.js');\n    ...\n});\n```", "```js\n> npm install passport --save\n> npm install passport-twitter --save\n\n```", "```js\n'use strict';\n\nconst passport = require('passport');\nconst TwitterStrategy = require('passport-twitter').Strategy;\n\nmodule.exports = (usersService) => {\n    if(process.env.TWITTER_API_KEY &&\n            process.env.TWITTER_API_SECRET) {\n        passport.use(new TwitterStrategy({\n            consumerKey: process.env.TWITTER_API_KEY,\n            consumerSecret: process.env.TWITTER_API_SECRET,\n            callbackURL: '/auth/twitter/callback',\n            passReqToCallback: true\n        }, (req, token, tokenSecret, profile, done) => {\n            usersService.setUsername(req.user.id,\n                    profile.username || profile.displayName)\n                .then(() => { done(); }, done);\n        }));\n    }\n    return passport;\n};\n```", "```js\n let passport = require('./config/passport')(usersService);\n    ... \n\n    app.use(users);\n app.use(passport.initialize());\napp.post('/auth/twitter', passport.authenticate('twitter'));\napp.get('/auth/twitter/callback',\n passport.authenticate('twitter',\n { successRedirect: '/', failureRedirect: '/' }));\n\n    app.use('/', routes);\n    ...\n```", "```js\n    <h1>{{ title }}</h1>\n <h2>Account</h2>\n {{#ranking}}\n ...\n {{/ranking}}\n <form action=\"/auth/twitter\" method=\"POST\">\n <input type=\"submit\" value=\"Log in using Twitter\" />\n </form>\n <h3>Profile</h3>\n    <form action=\"/profile\" method=\"POST\">\n      ...\n    </form>\n    ...\n```", "```js\n'use strict';\n\nconst redisClient = require('../config/redis.js');\nconst uuid = require('uuid');\n\nconst getUser = userId =>\n redisClient.getAsync(`user:${userId}:name`)\n .then(userName => ({\n id: userId,\n name: userName\n }));\n\nconst setUsername = (userId, name) =>\n redisClient.setAsync(`user:${userId}:name`, name);\n\nmodule.exports = {\n getOrCreate: (provider, providerId, providerUsername) => {\n let providerKey = `provider:${provider}:${providerId}:user`;\n let newUserId = uuid.v4();\n return redisClient.setnxAsync(providerKey, newUserId)\n .then(created => {\n if (created) {\n return setUsername(newUserId, providerUsername)\n .then(() => getUser(newUserId));\n } else {\n return redisClient\n .getAsync(providerKey).then(getUser);\n }\n });\n },\n  getUser: getUser,    getUsername: userId => redisClient.getAsync(`user:${userId}:name`),\n setUsername: setUsername,\n  ...\n};\n```", "```js\n'use strict'; \n\nconst passport = require('passport');\nconst TwitterStrategy = require('passport-twitter').Strategy;\n\nmodule.exports = (usersService) => {\n    if(process.env.TWITTER_API_KEY &&\n            process.env.TWITTER_API_SECRET) {\n        passport.use(new TwitterStrategy({\n            consumerKey: process.env.TWITTER_API_KEY,\n            consumerSecret: process.env.TWITTER_API_SECRET,\n            callbackURL: '/auth/twitter/callback',\n            passReqToCallback: true\n        }, (req, token, tokenSecret, profile, done) => {\n usersService.getOrCreate('twitter', profile.id,\n profile.username || profile.displayName)\n .then(user => done(null, user), done);\n        }));\n    }\n\n passport.serializeUser((user, done) => {\n done(null, user.id);\n });\n\n passport.deserializeUser((id, done) => {\n usersService.getUser(id)\n .then(user => done(null, user))\n .catch(done);\n });\n\n    return passport;\n};\n```", "```js\n...\n\nconst expressSession = session(config);\nmodule.exports = passport => [\n expressSession, passport.initialize(), passport.session()\n];\n```", "```js\n    ...\n    let passport = require('./config/passport')(usersService);\n let sessions = require('./middleware/sessions')(passport);\n    ...\n    app.use(bodyParser.json());\n    app.use(bodyParser.urlencoded({ extended: false }));\n app.use(sessions);\n    app.use(express.static(path.join(__dirname, 'public')));\n\n    app.post('/auth/twitter', passport.authenticate('twitter'));\n    ...\n```", "```js\n    ...\n    const usersService = require('./services/users.js');\n let passport = require('./config/passport');\n require('./middleware/sessions')(passport).forEach(\n middleware => io.use(adapt(middleware)));\n\n    require('./realtime/chat')(io);\n    ...\n```", "```js\n    namespace.on('connection', (socket) => {\n let username = null;\n if (socket.request.user) {\n username = socket.request.user.name;\n }\n        ...\n```", "```js\n    function forwardEvent(name, socket) {\n        service.events.on(name, game => {\n if (!socket.request.user ||\n game.setBy !== socket.request.user.id) {\n                socket.emit(name, game.id);\n            }\n        });\n    }\n```", "```js\n    router.post('/:id/guesses', function(req, res, next) {\n        checkGameExists(\n            req.params.id,\n            res,\n            game => {\n if (req.user && game.matches(req.body.word)) {\n                    userService.recordWin(req.user.id);\n                }\n                ...\n            },\n            next\n        );\n    });\n```", "```js\n    router.get('/', function(req, res, next) {\n let userId = null;\n if (req.user) {\n userId = req.user.id;\n }\n\n        Promise.all([gamesService.createdBy(userId),\n                    gamesService.availableTo(userId),\n                    usersService.getUsername(userId),\n                    usersService.getRanking(userId),\n                    usersService.getTopPlayers()])\n            .then(results => {\n                res.render('index', {\n                            title: 'Hangman online',\n loggedIn: req.isAuthenticated(),\n                            createdGames: results[0],\n                            ...\n                        });\n                    })\n            .catch(next);\n    });\n```", "```js\n...\n  <body>\n    ...\n {{^loggedIn}}\n      <form action=\"/auth/twitter\" method=\"POST\">\n        <input type=\"submit\" value=\"Log in using Twitter\" />\n      </form>\n {{/loggedIn}}\n {{#loggedIn}}\n      <h3>Profile</h3>\n      <form action=\"/profile\" method=\"POST\">    \n        ...\n      </form>\n {{/loggedIn}}\n    <h2>Games</h2> \n {{#loggedIn}}\n      <form action=\"/games\" method=\"POST\" id=\"createGame\">\n        ...\n      </form>\n      <h3>Games created by you</h3>\n      ...\n {{/loggedIn}}\n    <h3>Games available to play</h3>\n    ...\n    <h2>Top players</h2>\n    ...\n    <h3>Lobby</h3>\n    <form class=\"chat\" data-room=\"lobby\">\n      <div id=\"messages\"></dl>\n {{#loggedIn}}\n        <input id=\"message\"/><input type=\"submit\" value=\"Send\"/>\n {{/loggedIn}}\n    </form>\n  </body>\n</html>\n```", "```js\n> npm install passport-local --save-dev\n\n```", "```js\nif (process.env.NODE_ENV === 'test') {\n    const LocalStrategy = require('passport-local');\n    const uuid = require('uuid');\n    passport.use(new LocalStrategy((username, password, done) => {\n            const userId = uuid.v4();\n            usersService.setUsername(userId, username)\n                .then(() => {\n                    done(null, { id: userId, name: username });\n                });\n        }\n    ));\n}\n```", "```js\n  if (process.env.NODE_ENV === 'test') {\n    app.post('/auth/test',\n      passport.authenticate('local', { successRedirect: '/' }));\n  }\n```", "```js\n    function withGame(word, callback) {        \n page.open(rootUrl + '/auth/test',\n 'POST',\n 'username=TestUser&password=dummy',\n            function() {\n                 ...\n            }\n        );\n    }\n```", "```js\n    router.post('/logout', function(req, res){\n        req.logout();\n        res.redirect('/');\n    });\n```", "```js\n    {{#loggedIn}}\n <form action=\"/logout\" method=\"POST\">\n <input type=\"submit\" value=\"Log out\" />\n </form>\n      <h3>Profile</h3>\n```", "```js\n> npm install passport-facebook --save\n\n```", "```js\n...\nconst FacebookStrategy = require('passport-facebook').Strategy;\n\nmodule.exports = (usersService) => {\n const providerCallback = providerName =>\n function(req, token, tokenSecret, profile, done) {\n usersService.getOrCreate(providerName, profile.id,\n profile.username || profile.displayName)\n .then(user => done(null, user), done);\n };\n\n    if(process.env.TWITTER_API_KEY &&\n            process.env.TWITTER_API_SECRET) {\n        passport.use(new TwitterStrategy({\n            consumerKey: process.env.TWITTER_API_KEY,\n            consumerSecret: process.env.TWITTER_API_SECRET,\n            callbackURL: '/auth/twitter/callback',\n            passReqToCallback: true\n }, providerCallback('twitter')));\n    }\n\n if(process.env.FACEBOOK_APP_ID &&\n process.env.FACEBOOK_APP_SECRET) {\n passport.use(new FacebookStrategy({\n clientID: process.env.FACEBOOK_APP_ID,\n clientSecret: process.env.FACEBOOK_APP_SECRET,\n callbackURL: '/auth/facebook/callback',\n passReqToCallback: true\n }, providerCallback('facebook')));\n }\n    ...\n};\n```", "```js\n  app.use(sessions);\n const addAuthEndpoints = provider => {\n app.post(`/auth/${provider}`, passport.authenticate(provider));\n app.get(`/auth/${provider}/callback`,\n passport.authenticate(provider, { successRedirect: '/',\n failureRedirect: '/', session: true }));\n };\n addAuthEndpoints('twitter');\n  addAuthEndpoints('facebook');\n```", "```js\n    {{^loggedIn}}\n      <form action=\"/auth/twitter\" method=\"POST\">\n        <input type=\"submit\" value=\"Log in using Twitter\" />\n      </form>\n <form action=\"/auth/facebook\" method=\"POST\">\n <input type=\"submit\" value=\"Log in using Facebook\" />\n </form>\n    {{/loggedIn}}\n```"]