- en: Building OAuth Strategies with passport.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the preceding chapter, we discussed the passport-JWT strategy. We discussed
    how to leverage the JWT package to build a robust user on-boarding process. We
    covered how to implement the signup and sign-in process for a user. In this chapter,
    we will dive into the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`passport.js` Facebook Strategy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`passport.js` Twitter Strategy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`passport.js` Google Strategy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`passport.js` LinkedIn Strategy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these parts individually consume a lot of time if we set out to do them
    from scratch. `passport.js` provides a simpler way to integrate all these strategies
    in a very flexible way, and also makes them easier to implement.
  prefs: []
  type: TYPE_NORMAL
- en: '**OAuth** is an authentication protocol that lets users log in via different
    external services. For example, logging in to an application via Facebook or Twitter
    does not require a user to provide their username and password if the user is
    already logged in to Facebook or Twitter. It saves the user from setting up a
    new account in an application, which makes the login process smooth. This makes
    logging in to an app easier; otherwise, a user first needs to register to our
    application and then log in using those credentials. Passport''s OAuth strategies
    allow users to log in to our application with a single click if the browser remembers
    the account. Everything else is done automatically and is handled by the strategy
    itself.'
  prefs: []
  type: TYPE_NORMAL
- en: Passport's Facebook Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Passport's Facebook Strategy is easy to integrate. As always, let's start with
    the installation of this strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Passport's Facebook Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can install passport''s Facebook Strategy by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code should add the package to your `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Configuring Passport's Facebook Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a few steps to configure the Passport''s Facebook Strategy. We will
    discuss each step in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Create and set up a Facebook app. This will provide us with an `App ID` and
    an `App Secret`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a button to our login page that allows our users to log in via Facebook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the necessary routes for Facebook authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a middleware method to check whether authentication is successful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's dive into the details for each of the preceding steps.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and setting up a Facebook app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To be able to use the Facebook Strategy, you have to build a Facebook application
    first. The developers, portal for Facebook is at [https://developers.facebook.com/](https://developers.facebook.com/).
  prefs: []
  type: TYPE_NORMAL
- en: After logging in, click on the Get Started button and then click on Next.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you will see a drop-down menu in the top-right corner of the screen called
    My Apps, where you can find the option to create a new application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose a display name that you want to name your application. In this case,
    we will name it `movie_rating_app`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c16be676-d69d-40a3-be90-e4592e943604.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Create App ID. If you go the settings page, you will see the App ID
    and App Secret for your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f449d1c8-dae4-4401-8070-966e4455aaec.png)'
  prefs: []
  type: TYPE_IMG
- en: You will be needing the values mentioned in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a button to our login page that allows users to log in via Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to add a LOGIN WITH FACEBOOK button in your login page, which
    you will be linking to your Facebook application. Replace the contents of `Login.vue`, with
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also add some styling to these buttons. In `src/assets/stylesheets/home.css`,
    add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will add a LOGIN WITH FACEBOOK button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c49cfff2-17ec-4208-9611-efb6650fd253.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding configurations for Facebook app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s configure the Facebook Strategy just as we did for the local strategy.
    We will create a separate file to handle Facebook login so that the code is simpler.
    Let''s create a file called `facebook.js` inside the `controllers` folder and
    add the following contents to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the first line inside the `exports` method imports the
    Facebook Strategy. The configuration takes three parameters: `clientID`, `clientSecret`,
    and callback URL. `clientID` and `clientSecret` are the `App ID` and `App Secret`
    for your Facebook app, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add those secrets into our config file. In `config/Config.js`, let''s
    add our Facebook keys, the `facebook_client_id` and `facebook_client_secret`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The callback URL is the URL that you want to route your application to after
    the successful transaction with Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'The callback we have defined here is `http://127.0.0.1:8081/login/facebook/return`,
    which we have to define. The configuration is followed by a function that takes
    the following four parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`accessToken`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`refreshToken`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`profile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cb` (callback)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upon successful request, our application will get redirected to the home page.
  prefs: []
  type: TYPE_NORMAL
- en: Adding necessary routes for Facebook login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s go ahead and add the necessary routes for when we click on the
    login button and when we receive the callback from Facebook. In the same file,
    `facebook.js`, add the following routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have added two routes. If you remember, in `Login.vue`,
    we have added a link to `http://127.0.0.1:8081/login/facebook`, which will be
    served by the first route that we defined here.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you recall, in the configuration setting, we have added a callback
    function that will be served by the second route, which we have defined here as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the final thing to do is to actually log in the user using the strategy.
    Replace the contents of `facebook.js` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: While logging in with the Facebook login, if the user already exists in our
    database, the user simply gets logged in and saved in the session. The session
    data is not stored in the browser cookies but on the server-side itself. If the
    user doesn't exist in our database, then we create a new user with the provided
    email from Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing to configure here is to add the return URLs or the redirect URL
    from Facebook to our application. For this, we can add the URLs in the App Settings
    page in Facebook. In the app `Settings` page, under the `Valid OAuth Redirect
    URIs`, add the redirect URLs to our application from Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we should be able to log in via Facebook. When the `login` function is
    successful, it will redirect the user to the home page. If you notice, Facebook
    redirects us to `http://localhost:8081/#*=* `instead of just `http://localhost:8081`.
    This is because of a security vulnerability. We can remove the `#` from the URL
    by adding the following piece of code in the main file, which is `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This will remove the `#` symbol from the preceding URL. When you are successfully
    logged in, we should see your email in the top bar view similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9a8c95b-fcd9-4d90-9d01-6673e544d493.png)'
  prefs: []
  type: TYPE_IMG
- en: Passport's Twitter Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next strategy is Passport's Twitter Strategy.  Let's start with the installation
    of this strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Passport's Twitter Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the following command to install the Twitter Strategy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command should add the package to your `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Configuring Passport's Twitter Strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like Facebook Strategy, we have to perform the following steps to configure
    passport''s Twitter Strategy:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and setting up a Twitter application. This will provide us with a consumer
    key (API Key) and a consumer secret (API Secret).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a button to our login page that allows our users to LOGIN WITH TWITTER.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the necessary routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a middleware method to check authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Redirecting the user to the home page after redirection and displaying the logged-in
    user's email in the top bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's dive into the details for each of the preceding steps.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and setting up a Twitter app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as with Facebook Strategy, to be able to use the Twitter Strategy, we have
    to build a Twitter application as well. The developers' portal for Twitter is
    at [https://apps.twitter.com/](https://apps.twitter.com/), where you will see
    a list of all of your applications. If this is new, you will see a button to create
    a new application—click on Create your Twitter application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see a form, which will ask you to fill in the application name and
    other details. You can name the application whatever you want. For this application,
    we will name the application `movie_rating_app`. For the callback URL, we have
    provided `http://localhost:8081/login/twitter/return`, which we will have to define
    later:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/201cae01-374c-4749-9d30-7da5d1d2add5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upon successful creation of the application, you can see the API Key (Consumer
    Key) and API Secret (Consumer Secret) in the Keys and Access Tokens tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65e39922-dee4-4d3d-9352-3f2b19f5af24.png)'
  prefs: []
  type: TYPE_IMG
- en: These tokens will be used for authentication in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a button to our login page that allows users to log in via Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step is to add a LOGIN WITH TWITTER button in our login page, which
    we will link to our Twitter application that we just created.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Login.vue`, add a link to log in via Twitter with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will add a LOGIN WITH TWITTER button. Let''s run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we visit the URL `http://localhost:8080/users/login`, we should see
    the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7252b3ec-3ecd-4607-9c42-d7dd9bd95592.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding configurations for Twitter App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, the next step is to add the necessary routes for the Twitter login. For
    this, we will need to configure the settings and callback URL. Just like we did
    for the Facebook Strategy, let''s create a separate file to set up our Twitter
    login. Let''s create a new file inside the `controllers` directory called `twitter.js`
    and add the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As we did in the Facebook Strategy, the first line imports the Twitter Strategy.
    The configuration takes the following three parameters: `clientID`, `clientSecret`,
    and a callback URL. The `consumerKey` and `consumerSecret` are the `App ID` and
    `App Secret` for your Twitter application app, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add those secrets into our config file. In `config/Config.js`, add the
    `Facebook client ID` and `Facebook Client Secret`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The callback URL is the URL that you want to route your application to after
    the successful transaction with Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The callback we have defined in the [preceding piece of code is `http://localhost:8081/login/twitter/return`,
    which we have to define. The configuration is followed by a function that takes
    the following four parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`accessToken`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`refreshToken`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`profile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cb` (callback)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upon a successful request, our application will get redirected to the home page.
  prefs: []
  type: TYPE_NORMAL
- en: Adding necessary routes for Twitter login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s add the necessary routes for when we click on the `Login` button
    and when we receive the callback from Twitter. In the same file, `twitter.js`,
    add the following routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have added two routes: `/login/google` and `/login/google/return`.
    If you remember, in `Login.vue`, we have added a link to `http://localhost:8081/login/twitter`,
    which will be served by the first route that we defined here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the final thing to do is to actually log in the user using the strategy.
    Replace the contents of `twitter.js` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We have to consider a few things here. Twitter does not allow us to access the
    user's email address by default. For that, we will need to check a field called Request
    email addresses from users while setting up the Twitter application, which can
    be found under the Permissions tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we do that, we also need to set the Privacy Policy URL and Terms of
    Service URL in order to request the user''s access to their email address. This
    setting can be found under the Settings tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/553ca72b-d8a4-441b-a4cd-859b3e3454eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fill in the privacy policy and terms of service URLs, and then under the Permissions
    tab, check the checkbox that says Request email addresses from users and click
    on Update Settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e38f0c5-dd9f-4ded-b1e5-52d1007e2509.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The last thing we also need is to specify the resource URL to be able to access
    the email address, which we do by adding the following in `twitter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, everything is ready to go for the Twitter login. We should be able to log
    in successfully with the LOGIN WITH TWITTER button now.
  prefs: []
  type: TYPE_NORMAL
- en: Passport's Google strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next strategy is the Passport's Google Strategy.  Let's start with the installation
    of this strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Passport's Google strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the following command to install Passport''s Google strategy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command should add the package to your `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Configuring Passport's Google strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The configuration for all the strategies is somewhat similar. For the Google
    strategy, the following are the steps we have to follow for configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and registering an application on Google. This will provide us with
    a consumer key (API key) and a consumer secret (API secret).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a button to our login page that allows our users to log in via Google.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the necessary routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a middleware method to check authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Redirecting the user to the home page and displaying the logged-in user's email
    in the top bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's dive into the details for each of the preceding steps.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and setting up a Google app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as we did for the Facebook and Twitter strategies, to be able to use the
    Google Strategy, we have to build a Google application. The developers, portal
    for Google is at [https://console.developers.google.com/](https://console.developers.google.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Then, click on the drop-down list of the projects, which lies at the top-left
    corner of the page. A popup will show up. Then, click on the + icon to create
    a new application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You just have to add the name of your application. We will name the application
    *movieratingapp*, as Google does not allow underscores or any other special characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1fe5003c-736e-440f-b59e-b0383aa820f7.png)'
  prefs: []
  type: TYPE_IMG
- en: When the application gets created successfully, click on Credentials and `Create`
    and then on OAuth Client ID to generate the app tokens. To generate the tokens,
    we will first need to Enable the Google+ API via Developer Console at [https://console.developers.google.com/](https://console.developers.google.com/).
  prefs: []
  type: TYPE_NORMAL
- en: It then takes us to the `Create Consent` page, where we need to fill in some
    information about our application. After that, on the Credentials page, we will
    be able to view our `Client ID` and `Client Secret`.
  prefs: []
  type: TYPE_NORMAL
- en: 'These tokens will be used to verify the authentication in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d509cd5-ae77-4ee8-8d96-4d53b7378e5b.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a button to our login page that allows users to log in via Google
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to add a LOGIN WITH GOOGLE button in our login page, which
    we will be linking to our Google application that we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will add a LOGIN WITH GOOGLE button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b72db97e-b9df-4aea-ba88-23eb2c5e7c6e.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding configurations for Google app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s configure the Google Strategy just as we did for the Facebook and Twitter
    strategies. We will create a separate file to handle Google login so that the
    code is simple. Let''s create a file called `google.js` inside the `controllers` folder
    and add the following contents to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As we did in the Facebook and Twitter strategies, the first line imports the
    Google Strategy. The configuration takes the following three parameters: `clientID`,
    `clientSecret`, and callback URL. The `clientID` and `clientSecret` are the `App
    ID` and `App Secret` of the Google application we just created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add those secrets into our `config` file. In `config/Config.js`, add
    the `facebook_client_id` and `facebook_client_secret`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The callback URL is the URL that you want to route your application to after
    the successful transaction with Google.
  prefs: []
  type: TYPE_NORMAL
- en: 'The callback we just added is `http://127.0.0.1:8081/login/google/return`,
    which we have to define. The configuration is followed by a function that takes
    the following four parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`accessToken`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`refreshToken`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`profile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cb` (callback)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upon a successful request, our application will get redirected to the `profile`
    page, which we are yet to define.
  prefs: []
  type: TYPE_NORMAL
- en: Adding necessary routes for Google login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s go ahead and add the necessary routes, when we click on the login
    button and when we receive the callback from Google. In the same file, `google.js`,
    add the following routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have added two routes. If you remember, in `Login.vue`,
    we have added a link to `http://localhost:8081/login/google`, which will be served
    by the first route that we defined here.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you recall, in the configuration setting, we have added a callback
    function, which will be served by the second route that we have defined here as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the final thing to do is to actually log in the user using the strategy.
    Replace the contents of `google.js` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Passport's LinkedIn strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, you must understand quite well how to use each of the strategies provided
    by `passport.js`. Let's quickly revise these using the LinkedIn strategy. This
    is the last strategy we will be covering in this book. There are several other
    strategies that you can use according to your needs. You can find the list at
    [https://github.com/jaredhanson/passport/wiki/Strategies](https://github.com/jaredhanson/passport/wiki/Strategies).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's start with the installation of this strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Passport's LinkedIn strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the following command to install the LinkedIn strategy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command should add the following package to your `package.json`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Configuring Passport's LinkedIn strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The configuration for all the strategies is somewhat similar. So, the following
    are the steps we have to follow to configure this strategy:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and registering an application on LinkedIn. This will provide us with
    a consumer key (API Key) and a consumer secret (API Secret).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a button to our login page that allows users to log in via LinkedIn.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the necessary routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a middleware method to check authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Redirecting the user to the home page and displaying the logged in user's email
    in the top bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's dive into the details for each of the preceding steps.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and setting up a LinkedIn app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like we did for the Facebook and Twitter Strategies, to be able to use
    the Linkedin Strategy, we have to build a LinkedIn application. The developers,
    portal for LinkedIn is at [https://www.linkedin.com/developer/apps](https://www.linkedin.com/developer/apps).
    You will see a list of all of your applications there. You will also note a button
    to create a new application; click on Create Application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We just have to add the name of our application. We can name the application
    whatever we want, but for our application, we will be naming it `movie_rating_app`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/297423a4-5b9b-4491-997b-e3f203051476.png)'
  prefs: []
  type: TYPE_IMG
- en: Upon successful creation of the application, you can see the API Key (`clientID`)
    and API Secret (client secret) in the Credentials tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'These tokens will be used to verify the authentication in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f34f2eb-7114-47e8-8f88-1ee30738ed2f.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a button to our login page that allows users to log in via LinkedIn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step is to add a LOGIN WITH LINKEDIN button in our login page, which
    we will be linking to our LinkedIn application  that we just created.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Login.vue`, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will add a LOGIN WITH LINKEDIN button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d184e8a0-f2e6-43a4-830e-dbd4248ed8a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding configurations for LinkedIn app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s configure the LinkedIn strategy just as we did for all the other strategies.
    We will create a separate file to handle LinkedIn login so that the code is simple.
    Let''s create a file called `linkedin.js` inside the `controllers` folder and
    add the following contents to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the first line imports the LinkedIn Strategy. The configuration
    takes the following three parameters: `clientID`, `clientSecret`, and a callback
    URL. The `clientID` and `clientSecret` are the `App ID` and `App Secret` of the
    LinkedIn application we just created, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add those secrets to our `config` file. In `config/Config.js`, add the
    `Facebook Client ID` and `Facebook Client Secret`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `callbackURL` is the URL that you want to route your application to after
    the successful transaction with LinkedIn.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `callbackURL` that we have defined in the preceding code is `http://127.0.0.1:8081/login/linkedin/return`,
    which we have to define. The configuration is followed by a function that takes
    the following four parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`accessToken`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`refreshToken`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`profile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cb` (callback)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upon successful request, our application will get redirected to the profile
    page, which we are yet to define.
  prefs: []
  type: TYPE_NORMAL
- en: Adding necessary routes for LinkedIn login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s add the necessary routes for when we click on the Login button
    and when we receive the callback from LinkedIn:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have added two routes. If you remember, in `Login.vue`,
    we have added a link to `http://localhost:8081/login/linkedin`, which will be
    served by the first route that we defined here.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you recall, in the configuration setting, we have added a callback
    function that will be served by the second route, which we have defined here as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the final thing to do is to actually log in the user using the strategy.
    Replace the contents of `linkedin.js` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: With this, everything is ready to go for the LinkedIn login. We should be able
    to log in successfully with the LOGIN WITH LINKEDIN button now.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered what OAuth is and how to integrate different varieties
    of OAuth with our application. We also covered Facebook, Twitter, Google, and
    LinkedIn strategies provided by `passport.js`. If you want to explore a different
    strategy, a good list of available packages is available at[ https://github.com/jaredhanson/passport/wiki/Strategies](https://github.com/jaredhanson/passport/wiki/Strategies).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will find out more about what `Vuex` is and how can
    we use `Vuex` to simplify our application.
  prefs: []
  type: TYPE_NORMAL
