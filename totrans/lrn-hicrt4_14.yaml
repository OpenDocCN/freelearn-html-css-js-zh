- en: Chapter 14. Server-side Highcharts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first edition of *Learning Highcharts* covered a number of approaches to
    run Highcharts on the server side. Since then, there has been significant development
    in this area. It turns out that Highcharts adopts PhantomJS (the headless webkit)
    for the server solution and PhantomJS/Batik for the server implementation in Java.
    We will also explore how we can create our own Highcharts server process using
    PhantomJS and how to use the official server-side script released by Highcharts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Why we want to run Highcharts on the server side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why PhantomJS and Batik are adopted by Highcharts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basics of PhantomJS and Batik
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our own PhantomJS script to export charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the Highcharts server-side script in both command-line and server
    modes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Highcharts on the server side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main reason for running Highcharts on the server side is to allow the client-based
    graphing application to be automated and accessible on the server side. In some
    cases, it is desirable to produce graphs at the frontend as well as delivering
    automated reports with graphs at the backend. For the sake of consistency and
    development costs, we would like to produce the same style of graphs at both ends.
    Here are other scenarios where we may want to generate graphs on the server side:'
  prefs: []
  type: TYPE_NORMAL
- en: The application is required to run a scheduled task on the server side. It generates
    a regular summary report with graphs (for example, the Service Level Agreement
    report) and automatically e-mails the report to clients or users with a managerial
    role.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The nature of the data means it requires a long time to compute for a graph.
    Instead, users send the parameters over to the server to generate a graph. Once
    it is finished, the chart setup is saved, then the users are notified to see a
    live Highcharts chart from the precomputed JSON setup.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application involves a vast amount of recurring data that is only kept for
    a certain period, such as data trend graphs that are automatically produced and
    stored in an image format for your records.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highcharts on the server side
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first edition of this book, we mentioned a number of technologies that
    can be used to produce chart images purely on the server side. Within those technologies,
    PhantomJS is the most prominent. In a nutshell, it is a standalone program that
    is capable of running JavaScript on the server. Besides this, it is easy to use,
    has minimum setup, and is programmable and robust.
  prefs: []
  type: TYPE_NORMAL
- en: The alternative approach was to use Rhino, a Java implementation of the JavaScript
    engine, to run JavaScript on the server side so that Highcharts can be run on
    the server side to export a chart into an SVG file. Then, the SVG file is forwarded
    to Batik, a generic Java-based SVG toolkit, to produce an image file from SVG.
  prefs: []
  type: TYPE_NORMAL
- en: Since then, Highcharts have extensively experimented with different approaches
    and concluded that incorporating PhantomJS is the solution moving forward. There
    are a number of reasons for this decision. First, Rhino has rendering problems
    compared to PhantomJS, which makes PhantomJS a better choice. Moreover, PhantomJS
    can also export images, although it has scalability issues in rendering charts
    when the number of data points increases to around 1,500\. ImageMagick, the image
    converter, was also considered, but it also has specific performance and reliability
    issues. For details of the findings, please see [http://www.highcharts.com/component/content/article/2-articles/news/52-serverside-generated-charts#phantom_usage](http://www.highcharts.com/component/content/article/2-articles/news/52-serverside-generated-charts#phantom_usage).
  prefs: []
  type: TYPE_NORMAL
- en: For a server-side solution required to implement in Java, Batik is a more natural
    choice for formatting SVG, whereas PhantomJS is launched to run Highcharts for
    SVG content. As for a non-Java approach, PhantomJS itself is good enough to drive
    the whole server-side solution.
  prefs: []
  type: TYPE_NORMAL
- en: Batik – an SVG toolkit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Batik is part of the Apache foundation projects, [http://xmlgraphics.apache.org/batik/](http://xmlgraphics.apache.org/batik/).
    Its purpose is to provide a web service to view, generate, and transform SVG data.
    For instance, Highcharts uses this third-party software to convert SVG data into
    an image format. When the user clicks on the export button, Highcharts internally
    forwards the chart's SVG data and the user-selected image format request to Batik.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, Batik receives the SVG data and transforms the data into the desired
    image format. The following diagram summarizes how a normal Highcharts chart uses
    the export service with Batik:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Batik – an SVG toolkit](img/7451OS_14_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To install Batik, download the latest distribution from [http://xmlgraphics.apache.org/batik/download.html#binary](http://xmlgraphics.apache.org/batik/download.html#binary)
    and follow the installation instructions. As for Ubuntu, simply do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Out of the entire Batik package, we only need the image converter component,
    which is the `batik-rasterizer.jar` file. To transcode from an SVG to a PNG file,
    we can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will convert `chart.svg` and create `chart.png` in the
    same directory.
  prefs: []
  type: TYPE_NORMAL
- en: PhantomJS (headless webkit)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A webkit is basically the backend engine that drives browsers such as Safari
    and Google Chrome. It implements almost everything in HTML5 except the browser's
    user interface. PhantomJS (found at [http://phantomjs.org/](http://phantomjs.org/),
    created and maintained by Ariya Hidayat) is a headless webkit, which means that
    the webkit engine can be run as a standalone program. It is useful in a number
    of ways, and one of them is server-side SVG rendering.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple PhantomJS script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although Highcharts released a PhantomJS script to export charts on the server
    side, it is worth understanding the concept of PhantomJS and how it works. Suppose
    we already have a web server and PhantomJS installed and running. To run an HTML
    page on PhantomJS from a command line, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `loadPage.js` page can be as simple as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Inside the PhantomJS process, it first loads the `webpage` module and creates
    a `page` object.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is only a short example for illustration. For a proper way of handling
    error messages, please refer to the PhantomJS API documentation.
  prefs: []
  type: TYPE_NORMAL
- en: The `page.onError` and `page.onConsoleMessage` methods redirect the page's error
    and output messages to the terminal output via `console.log`. Note that `console.log`
    in this instance is referring to our terminal console. If `console.log` is called
    inside a page, it will only stay within the page object life cycle and we will
    never see those messages unless `page.onConsoleMessage` is defined to redirect
    them.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding script only opens the HTML page into a `webpage` object and then
    terminates, which is not particularly useful.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our own server-side Highcharts script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s use PhantomJS in a slightly more advanced way. In PhantomJS, we don''t
    need to rely on a web server to serve a page. Instead, we load a Highcharts page
    file locally and include the series data from another JSON file. Then, we render
    the result into an image file. So here is how we will run the server-side script
    on a command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `chart.html` page is just a simple Highcharts page that we would normally
    create. In this exercise, we will leave the series data as a variable, `seriesData`.
    The following shows how we structure the `chart.html` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, `data.json` is just a simple JSON file containing the array of *x* and
    *y* series data. Here is some of the content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For the PhantomJS file, `renderChart.js`, it is surprising how little extra
    code (highlighted in bold) we need to add to achieve the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We first load the `system` and `fs` modules, which are used in this example
    to select command-line arguments and process file I/O on the JSON file. The script
    basically reads (`fs.read`) the content of the JSON file and converts the content
    into a JavaScript expression and saves (`fs.write`) it in a file. Then, we define
    the `onInitialized` event handler for the page object that is triggered before
    the URL is loaded. So, we insert (`injectJs`) the JavaScript expression of `seriesData`
    before the page object loads the `chart.html` page. Once the page is loaded, we
    export (`page.render`) the page content into an image file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the resulting image file is not quite correct in that the line
    series is actually missing. However, if we observe the image more carefully, actually
    the line has just started being drawn (see the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our own server-side Highcharts script](img/7451OS_14_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is because of the chart default animation settings. After we turn the
    initial animation off by setting the `plotOptions.series.animation` option to
    `false`, the line series appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our own server-side Highcharts script](img/7451OS_14_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running the Highcharts server script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, our script example is lacking in features and error checking functionality,
    and is far from perfect. Nonetheless, we can see how easy it is to create our
    own server-side Highcharts process to produce images. In this section, you will
    learn how to use the official server-side script by Highcharts, which has more
    features and can be used in different scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Server script usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since version 3, Highcharts is packaged with server-side script, `highcharts_convert.js`,
    which is located in the `exporting-server/phantomjs` directory. The script can
    be run as either a command line or as a listening server.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a full description of usage and parameters, refer to [https://github.com/highslide-software/highcharts.com/tree/master/exporting-server/phantomjs](https://github.com/highslide-software/highcharts.com/tree/master/exporting-server/phantomjs).
  prefs: []
  type: TYPE_NORMAL
- en: Running the script as a standalone command
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is a typical command-line format for `highcharts_convert.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a list of parameters used in the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-infile`: This is the input source for the script, which can be either a chart
    configuration in the JSON format (general usage) or an SVG file. The server script
    automatically detects the content type, and processes and exports the chart/content
    in the desired format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-outfile`, `-type`, `-tmpdir`: The two ways to specify the output format are
    by `-type` or `-outfile`. With the `-outfile` parameter, the script will derive
    the image format from the extension name. Alternatively, `-type`, for example,
    type `png`, formats into a PNG image file and combines with `-tmpdir` to save
    the output file in a specific location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-scale`, `-width`: There are two optional parameters to adjust the output
    image size, by `-scale` or by `-width`. As the name suggests, one is to adjust
    the size by scaling and the other is by the absolute size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-constr`: The `-constr` parameter is to instruct the script whether to export
    the chart as a Highcharts or Highstock chart (another product for financial charts).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-callback`: The `-callback` parameter is to execute additional JavaScript
    code on the chart once it is loaded and before the chart is exported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's apply the previous chart configuration file into this command line. Furthermore,
    we are going to superimpose a watermark, `SAMPLE`, on top of the chart with the
    callback argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we save the whole chart configuration object into a file including the
    series data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create a callback script with the following code to add the watermark,
    `watermark.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The command generates the output as it runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'It also produces the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the script as a standalone command](img/7451OS_14_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running the script as a listening server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To run the script as a server listening for HTTP requests, we launch the script
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s start a Highcharts export server with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This starts a server listening only to local incoming connections on port 9413,
    and the following message outputs to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Passing options to the listening server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once the server process is ready, we can start sending POST requests embedded
    within the Highcharts configuration data. The Highcharts options used inside the
    request are the same ones we used in the command line. Let's reuse the configuration
    from the last exercise and pack them into a POST request.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to "stringify" the whole chart configuration as a value for
    the `infile` option. Next, we treat the callback method in the same manner. Then,
    we put the rest of the options into one JSON format and save it in a file called
    `post.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The next task is to package this data into a POST query. Since the purpose
    of this chapter is the server-side process, we should operate in a command-line
    style. Hence, we use the `curl` utility to create a POST request. The following
    command can do the job:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `curl` command is to create a POST request with the JSON content
    type. The `-d @` argument notifies the `curl` command about which file contains
    the POST data. Since HTTP is an ASCII protocol, the response of the result binary
    image data is returned in base-64 encoding. Therefore, we need to pipe the POST
    response data to another utility, base64, to decode the data and write it to a
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we described the purpose of running Highcharts on the server
    side and you learned which technology Highcharts has opted to use on a server.
    You learned the basics of PhantomJS and the role of Batik. You extended your understanding
    of PhantomJS to create your own server-side script for Highcharts. Besides that,
    we experimented with how to run the official PhantomJS script released by Highcharts
    in both single command-line and server mode.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a glimpse at which online services Highcharts
    offer and explore some of the Highcharts plugins.
  prefs: []
  type: TYPE_NORMAL
