["```js\nvar student = {\n  name: \"Eden\",\n  printName: function(){\n    console.log(this.name);\n  }\n}\n\nstudent.printName(); //Output \"Eden\"\n```", "```js\nfunction Student(name)\n{\n  this.name = name;\n}\n\nStudent.prototype.printName = function(){\n  console.log(this.name);\n}\n\nvar student1 = new Student(\"Eden\");\nvar student2 = new Student(\"John\");\n\nstudent1.printName(); //Output \"Eden\"\nstudent2.printName(); //Output \"John\"\n```", "```js\nvar student = {}\n\nconsole.log(student.constructor == Object); //Output \"true\"\n```", "```js\nvar object1 = {\n  name: \"Eden\",\n  __proto__: {age: 24}\n}\n\nvar object2 = {name: \"Eden\"}\nObject.setPrototypeOf(object2, {age: 24});\n\nvar object3 = Object.create({age: 24}, {name: {value: \"Eden\"}});\n\nconsole.log(object1.name + \" \" + object1.age);\nconsole.log(object2.name + \" \" + object2.age);\nconsole.log(object3.name + \" \" + object3.age);\n```", "```js\nEden 24\nEden 24\nEden 24\n```", "```js\nvar obj = {\n  name: \"Eden\"\n}\n\nconsole.log(obj.__proto__ == Object.prototype); //Output \"true\"\n```", "```js\nfunction Student()\n{\n  this.name = \"Eden\";\n}\n\nvar obj = new Student();\n\nconsole.log(obj.__proto__.constructor == Student); //Output \"true\"\nconsole.log(obj.__proto__ == Student.prototype); //Output \"true\"\n```", "```js\nfunction Student(name)\n{\n    this.name = name;\n}\n\nStudent.prototype.printName = function(){\n    console.log(this.name);\n}\n\nvar s1 = new Student(\"Eden\");\nvar s2 = new Student(\"John\");\n\nfunction School(name)\n{\n  this.name = name;\n  this.printName = function(){\n    console.log(this.name);\n  }\n}\n\nvar s3 = new School(\"ABC\");\nvar s4 = new School(\"XYZ\");\n\nconsole.log(s1.printName == s2.printName);\nconsole.log(s3.printName == s4.printName);\n```", "```js\ntrue\nfalse\n```", "```js\nfunction School(schoolName)\n{\n  this.schoolName = schoolName;\n}\nSchool.prototype.printSchoolName = function(){\n  console.log(this.schoolName);\n}\n\nfunction Student(studentName, schoolName)\n{\n  this.studentName = studentName;\n\n  School.call(this, schoolName);\n}\nStudent.prototype = new School();\nStudent.prototype.printStudentName = function(){\n  console.log(this.studentName);\n}\n\nvar s = new Student(\"Eden\", \"ABC School\");\ns.printStudentName();\ns.printSchoolName();\n```", "```js\nEden\nABC School\n```", "```js\nvar s1 = \"String\";\nvar s2 = new String(\"String\");\n\nconsole.log(typeof s1);\nconsole.log(typeof s2);\n\nconsole.log(s1 == s2);\nconsole.log(s1.length);\n```", "```js\nstring\nobject\ntrue\n6\n```", "```js\nvar s1 = \"String\";\nvar s2 = new String(\"String\");\n\nconsole.log(typeof s1);\nconsole.log(typeof s2);\n\nconsole.log(s1 == s2.valueOf());\nconsole.log((new String(s1)).length);\n```", "```js\nclass Student\n{\n  constructor(name)\n  {\n    this.name = name;\n  }\n}\n\nvar s1 = new Student(\"Eden\");\nconsole.log(s1.name); //Output \"Eden\"\n```", "```js\nfunction Student(name)\n{\n  this.name = name;\n}\n\nvar s1 = new Student(\"Eden\");\nconsole.log(s1.name); //Output \"Eden\"\n```", "```js\nclass Student\n{\n  constructor(name)\n  {\n    this.name = name;\n  }\n}\n\nfunction School(name)\n{\n  this.name = name;\n}\n\nconsole.log(typeof Student);\nconsole.log(typeof School == typeof Student);\n```", "```js\nfunction\ntrue\n```", "```js\nvar Student = class {\n  constructor(name)\n  {\n    this.name = name;\n  }\n}\n\nvar s1 = new Student(\"Eden\");\nconsole.log(s1.name); //Output \"Eden\"\n```", "```js\nvar Student = function(name) {\n  this.name = name;\n}\n\nvar s1 = new Student(\"Eden\");\nconsole.log(s1.name); //Output \"Eden\"\n```", "```js\nclass Person\n{\n  constructor(name, age)\n  {\n    this.name = name;\n    this.age = age;\n  }\n\n  printProfile()\n  {\n    console.log(\"Name is: \" + this.name + \" and Age is: \" + this.age);\n  }\n}\n\nvar p = new Person(\"Eden\", 12)\np.printProfile();\n\nconsole.log(\"printProfile\" in p.__proto__);\nconsole.log(\"printProfile\" in Person.prototype);\n```", "```js\nName is: Eden and Age is: 12\ntrue\ntrue\n```", "```js\nfunction Person(name, age)\n{\n  this.name = name;\n  this.age = age;\n}\n\nPerson.prototype.printProfile = function()\n{\n  console.log(\"Name is: \" + this.name + \" and Age is: \" + this.age);\n}\n\nvar p = new Person(\"Eden\", 12)\np.printProfile();\n\nconsole.log(\"printProfile\" in p.__proto__);\nconsole.log(\"printProfile\" in Person.prototype);\n```", "```js\nName is: Eden and Age is: 12\ntrue\ntrue\n```", "```js\nclass Person\n{\n  constructor(name)\n  {\n    this._name_ = name;\n  }\n\n  get name(){\n    return this._name_;\n  }\n\n  set name(name){\n    this._name_ = name;\n  }\n}\n\nvar p = new Person(\"Eden\");\nconsole.log(p.name);\np.name = \"John\";\nconsole.log(p.name);\n\nconsole.log(\"name\" in p.__proto__);\nconsole.log(\"name\" in Person.prototype);\nconsole.log(Object.getOwnPropertyDescriptor(p.__proto__, \"name\").set);\nconsole.log(Object.getOwnPropertyDescriptor(Person.prototype, \"name\").get);\nconsole.log(Object.getOwnPropertyDescriptor(p, \"_name_\").value);\n```", "```js\nEden\nJohn\ntrue\ntrue\nfunction name(name) { this._name_ = name; }\nfunction name() { return this._name_; }\nJohn\n```", "```js\nclass myClass\n{\n  * generator_function()\n  {\n    yield 1;\n    yield 2;\n    yield 3;\n    yield 4;\n    yield 5;\n  }\n\n}\n\nvar obj = new myClass();\n\nlet generator = obj.generator_function();\n\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().value);\nconsole.log(generator.next().done);\n\nconsole.log(\"generator_function\" in myClass.prototype);\n```", "```js\n1\n2\n3\n4\n5\ntrue\ntrue\n```", "```js\nclass Student\n{\n  constructor(name)\n  {\n    this.name = name;\n  }\n\n  static findName(student)\n  {\n    return student.name;\n  }\n}\n\nvar s = new Student(\"Eden\");\nvar name = Student.findName(s);\n\nconsole.log(name); //Output \"Eden\"\n```", "```js\nfunction Student(name)\n{\n    this.name = name;\n}\n\nStudent.findName = function(student){\n  return student.name;\n}\n\nvar s = new Student(\"Eden\");\nvar name = Student.findName(s);\n\nconsole.log(name); //Output \"Eden\"\n```", "```js\nfunction A(a)\n{\n  this.a = a;\n}\n\nA.prototype.printA = function(){\n  console.log(this.a);\n}\n\nclass B extends A\n{\n  constructor(a, b)\n  {\n    super(a);\n    this.b = b;\n  }\n\n  printB()\n  {\n    console.log(this.b);\n  }\n\n  static sayHello()\n  {\n    console.log(\"Hello\");\n  }\n}\n\nclass C extends B\n{\n  constructor(a, b, c)\n  {\n    super(a, b);\n    this.c = c;\n  }\n\n  printC()\n  {\n    console.log(this.c);\n  }\n\n  printAll()\n  {\n    this.printC();\n    super.printB();\n    super.printA();\n  }\n}\n\nvar obj = new C(1, 2, 3);\nobj.printAll();\n\nC.sayHello();\n```", "```js\n3\n2\n1\nHello\n```", "```js\nclass myClass\n{\n  static [\"my\" + \"Method\"](){\n    console.log(\"Hello\");\n  }\n}\n\nmyClass[\"my\" + \"Method\"](); //Output \"Hello\"\n```", "```js\nvar s = Symbol(\"Sample\");\n\nclass myClass\n{\n  static [s]()\n  {\n    console.log(\"Hello\");\n  }\n}\n\nmyClass[s](); //Output \"Hello\"\n```", "```js\nmyFunc();\nfunction myFunc(){}\n\nvar obj = new myClass(); //throws ReferenceError exception\nclass myClass{}\n```", "```js\nclass myClass\n{\n  constructor()\n  {\n    return Object.create(null);\n  }\n}\n\nconsole.log(new myClass() instanceof myClass); //Output \"false\"\n```", "```js\nclass myCustomArray1 extends Array\n{\n   static get [Symbol.species]()\n   {\n     return Array;\n   }\n}\n\nclass myCustomArray2 extends Array{}\n\nvar arr1 = new myCustomArray1(0, 1, 2, 3, 4);\nvar arr2 = new myCustomArray2(0, 1, 2, 3, 4);\n\nconsole.log(arr1 instanceof myCustomArray1);\nconsole.log(arr2 instanceof myCustomArray2);\n\narr1 = arr1.map(function(value){ return value + 1; })\narr2 = arr2.map(function(value){ return value + 1; })\n\nconsole.log(arr1 instanceof myCustomArray1);\nconsole.log(arr2 instanceof myCustomArray2);\n\nconsole.log(arr1 instanceof Array);\nconsole.log(arr2 instanceof Array);\n```", "```js\ntrue\ntrue\nfalse\ntrue\ntrue\nfalse\n```", "```js\n//Assume myArray1 is part of library\nclass myArray1\n{\n\n  //default @@species. Child class will inherit this property\n  static get [Symbol.species]()\n  {\n    //default constructor\n    return this;\n  }\n\n  mapping()\n  {\n    return new this.constructor[Symbol.species]();\n  }\n}\n\nclass myArray2 extends myArray1\n{\n  static get [Symbol.species]()\n  {\n    return myArray1;\n  }\n}\n\nvar arr = new myArray2();\n\nconsole.log(arr instanceof myArray2); //Output \"true\"\n\narr = arr.mapping();\n\nconsole.log(arr instanceof myArray1); //Output \"true\"\n```", "```js\nfunction myConstructor()\n{\n  console.log(new.target.name);\n}\n\nclass myClass extends myConstructor\n{\n  constructor()\n  {\n    super();\n  }\n}\n\nvar obj1 = new myClass();\nvar obj2 = new myConstructor();\n```", "```js\nmyClass\nmyConstructor\n```", "```js\nvar obj1 = {\n  print(){\n    console.log(\"Hello\");\n  }\n}\n\nvar obj2 = {\n  print(){\n    super.print();\n  }\n}\n\nObject.setPrototypeOf(obj2, obj1);\nobj2.print(); //Output \"Hello\"\n```"]