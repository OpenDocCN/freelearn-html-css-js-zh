["```js\n<script type=\"text/javascript\"> \n    var w = 1280, h = 800, r = 4.5, \n        nodes = [], \n        force = d3.forceSimulation() \n                .velocityDecay(0.8) \n                .alphaDecay(0) \n                .force(\"collision\",  \n                   d3.forceCollide(r + 0.5).strength(1)); \n\n    var svg = d3.select(\"body\") \n        .append(\"svg\") \n            .attr(\"width\", w) \n            .attr(\"height\", h); \n\n    force.on(\"tick\", function () { \n        svg.selectAll(\"circle\") \n            .attr(\"cx\", function (d) {return d.x;}) \n            .attr(\"cy\", function (d) {return d.y;}); \n    }); \n\n    svg.on(\"mousemove\", function () { \n        var point = d3.mouse(this), \n            node = {x: point[0], y: point[1]}; // <-A \n\n        svg.append(\"circle\") \n                .data([node]) \n            .attr(\"class\", \"node\") \n            .attr(\"cx\", function (d) {return d.x;}) \n            .attr(\"cy\", function (d) {return d.y;}) \n            .attr(\"r\", 1e-6) \n        .transition() \n            .attr(\"r\", r) \n        .transition() \n            .delay(7000) \n            .attr(\"r\", 1e-6) \n            .on(\"end\", function () { \n                nodes.shift(); // <-B \n                force.nodes(nodes); \n            }) \n            .remove(); \n\n        nodes.push(node); // <-C \n        force.nodes(nodes); \n    }); \n\n    function noForce(){ \n        force.force(\"charge\", null); \n        force.force(\"x\", null); \n        force.force(\"y\", null); \n        force.restart(); \n    } \n\n    function repulsion(){ \n        force.force(\"charge\", d3.forceManyBody().strength(-10)); \n        force.force(\"x\", null); \n        force.force(\"y\", null); \n        force.restart(); \n    } \n\n    function gravity(){ \n        force.force(\"charge\", d3.forceManyBody().strength(1)); \n        force.force(\"x\", null); \n        force.force(\"y\", null); \n        force.restart(); \n    } \n\n    function positioningWithGravity(){ \n        force.force(\"charge\", d3.forceManyBody().strength(0.5)); \n        force.force(\"x\", d3.forceX(w / 2)); \n        force.force(\"y\", d3.forceY(h / 2)); \n        force.restart(); \n    } \n\n    function positioningWithRepulsion(){ \n        force.force(\"charge\", d3.forceManyBody().strength(-20)); \n        force.force(\"x\", d3.forceX(w / 2)); \n        force.force(\"y\", d3.forceY(h / 2)); \n        force.restart(); \n    } \n\n</script> \n\n<div class=\"control-group\"> \n    <button onclick=\"noForce()\"> \n        No Force \n    </button> \n    <button onclick=\"repulsion()\"> \n        Repulsion \n    </button> \n    <button onclick=\"gravity()\"> \n        Gravity \n    </button> \n    <button onclick=\"positioningWithGravity()\"> \n        Positioning with Gravity \n    </button> \n    <button onclick=\"positioningWithRepulsion()\"> \n        Positioning with Repulsion \n    </button> \n</div> \n\n```", "```js\nvar w = 1280, h = 800, r = 4.5, \n        nodes = [], \n        force = d3.forceSimulation() \n                .velocityDecay(0.8) \n                .alphaDecay(0) \n                .force(\"collision\",  \n                    d3.forceCollide(r + 0.5).strength(1)); \n\n```", "```js\nsvg.on(\"mousemove\", function () { \n        var point = d3.mouse(this), \n            node = {x: point[0], y: point[1]}; // <-A \n\n        svg.append(\"circle\") \n                .data([node]) \n            .attr(\"class\", \"node\") \n            .attr(\"cx\", function (d) {return d.x;}) \n            .attr(\"cy\", function (d) {return d.y;}) \n            .attr(\"r\", 1e-6) \n        .transition() \n            .attr(\"r\", r) \n        .transition() \n            .delay(7000) \n            .attr(\"r\", 1e-6) \n            .on(\"end\", function () { \n                nodes.shift(); // <-B \n                force.nodes(nodes); \n            }) \n            .remove(); \n\n        nodes.push(node); // <-C \n        force.nodes(nodes); \n    }); \n\n```", "```js\n    function repulsion(){ \n        force.force(\"charge\", d3.forceManyBody().strength(-10)); \n        force.force(\"x\", null); \n        force.force(\"y\", null); \n        force.restart(); \n    } \n\n```", "```js\nforce.on(\"tick\", function () { \n        svg.selectAll(\"circle\") \n            .attr(\"cx\", function (d) {return d.x;}) \n            .attr(\"cy\", function (d) {return d.y;}); \n}); \n\n```", "```js\n     function gravity(){ \n        force.force(\"charge\", d3.forceManyBody().strength(1)); \n        force.force(\"x\", null); \n        force.force(\"y\", null); \n        force.restart(); \n    } \n\n```", "```js\n    function positioningWithGravity(){ \n        force.force(\"charge\", d3.forceManyBody().strength(0.5)); \n        force.force(\"x\", d3.forceX(w / 2)); \n        force.force(\"y\", d3.forceY(h / 2)); \n        force.restart(); \n    } \n\n```", "```js\n    function positioningWithRepulsion(){ \n        force.force(\"charge\", d3.forceManyBody().strength(-20)); \n        force.force(\"x\", d3.forceX(w / 2)); \n        force.force(\"y\", d3.forceY(h / 2)); \n        force.restart(); \n    } \n\n```", "```js\n<script type=\"text/javascript\"> \n    var r = 4.5, nodes = []; \n\n    var force = d3.forceSimulation() \n                    .velocityDecay(0.1) \n                    .alphaDecay(0) \n                    .force(\"collision\",  \n                         d3.forceCollide(r + 0.5).strength(1)); \n\n    var svg = d3.select(\"body\").append(\"svg:svg\"); \n\n    force.on(\"tick\", function () { \n        svg.selectAll(\"circle\") \n                .attr(\"cx\", function (d) {return d.x;}) \n                .attr(\"cy\", function (d) {return d.y;}); \n    }); \n\n    var previousPoint; \n\n    svg.on(\"mousemove\", function () { \n        var point = d3.mouse(this), \n            node = { \n                x: point[0], \n                y: point[1], \n                vx: previousPoint? \n                     point[0]-previousPoint[0]:point[0], \n                vy: previousPoint? \n                     point[1]-previousPoint[1]:point[1] \n            }; \n\n        previousPoint = point; \n\n        svg.append(\"svg:circle\") \n                    .data([node]) \n                .attr(\"class\", \"node\") \n                .attr(\"cx\", function (d) {return d.x;}) \n                .attr(\"cy\", function (d) {return d.y;}) \n                .attr(\"r\", 1e-6) \n            .transition() \n                .attr(\"r\", r) \n            .transition() \n            .delay(5000) \n                .attr(\"r\", 1e-6) \n                .on(\"end\", function () { \n                    nodes.shift(); \n                    force.nodes(nodes); \n                }) \n                .remove(); \n\n        nodes.push(node); \n        force.nodes(nodes); \n    }); \n</script>  \n\n```", "```js\nvar force = d3.forceSimulation() \n                    .velocityDecay(0.1) \n                    .alphaDecay(0) \n                    .force(\"collision\",  \n                         d3.forceCollide(r + 0.5).strength(1)); \n\n```", "```js\n    var previousPoint; \n\n    svg.on(\"mousemove\", function () { \n        var point = d3.mouse(this), \n            node = { \n                x: point[0], \n                y: point[1], \n                vx: previousPoint? \n                    point[0]-previousPoint[0]:point[0], \n                vy: previousPoint? \n                    point[1]-previousPoint[1]:point[1] \n            }; \n\n        previousPoint = point; \n    ... \n} \n\n```", "```js\n<script type=\"text/javascript\"> \n    var w = 1280, h = 800, \n            r = 4.5, nodes = [], links = []; \n\n    var force = d3.forceSimulation() \n                    .velocityDecay(0.8) \n                    .alphaDecay(0) \n                    .force(\"charge\",  \n                        d3.forceManyBody() \n                            .strength(-50).distanceMax(h / 4)) \n                    .force(\"collision\",  \n                        d3.forceCollide(r + 0.5).strength(1)); \n\n    var duration = 10000; \n\n    var svg = d3.select(\"body\") \n            .append(\"svg\") \n                .attr(\"width\", w) \n                .attr(\"height\", h); \n\n    force.on(\"tick\", function () { \n        svg.selectAll(\"circle\") \n            .attr(\"cx\", function (d) {return boundX(d.x);}) \n            .attr(\"cy\", function (d) {return boundY(d.y);}); \n\n        svg.selectAll(\"line\") \n            .attr(\"x1\", function (d) {return boundX(d.source.x);}) \n            .attr(\"y1\", function (d) {return boundY(d.source.y);}) \n            .attr(\"x2\", function (d) {return boundX(d.target.x);}) \n            .attr(\"y2\", function (d) {return boundY(d.target.y);} \n        ); \n    }); \n\n    function boundX(x) { \n        return x > (w - r) ? (w - r): (x > r ? x : r); \n    } \n\n    function boundY(y){ \n        return y > (h - r) ? (h - r) : (y > r ? y : r); \n    } \n\n    function offset() { \n        return Math.random() * 100; \n    } \n\n    function createNodes(point) { \n        var numberOfNodes = Math.round(Math.random() * 10); \n        var newNodes = []; \n\n        for (var i = 0; i < numberOfNodes; ++i) { \n            newNodes.push({ \n                x: point[0] + offset(), \n                y: point[1] + offset() \n            }); \n        } \n\n        newNodes.forEach(function(e){nodes.push(e)}); \n\n        return newNodes; \n    } \n\n    function createLinks(nodes) { \n        var newLinks = []; \n        for (var i = 0; i < nodes.length; ++i) { // <-A \n            if(i == nodes.length - 1) \n                newLinks.push( \n                    {source: nodes[i], target: nodes[0]} \n                ); \n            else \n                newLinks.push( \n                    {source: nodes[i], target: nodes[i + 1]} \n                ); \n        } \n\n        newLinks.forEach(function(e){links.push(e)}); \n\n        return newLinks; \n    } \n\n    svg.on(\"click\", function () { \n        var point = d3.mouse(this), \n                newNodes = createNodes(point), \n                newLinks = createLinks(newNodes); \n\n        newNodes.forEach(function (node) { \n            svg.append(\"circle\") \n                    .data([node]) \n                .attr(\"class\", \"node\") \n                .attr(\"cx\", function (d) {return d.x;}) \n                .attr(\"cy\", function (d) {return d.y;}) \n                .attr(\"r\", 1e-6) \n                    .call(d3.drag() // <-D \n                            .on(\"start\", dragStarted) \n                            .on(\"drag\", dragged) \n                            .on(\"end\", dragEnded)) \n                    .transition() \n                .attr(\"r\", 7) \n                    .transition() \n                    .delay(duration) \n                .attr(\"r\", 1e-6) \n                .on(\"end\", function () {nodes.shift();}) \n                .remove(); \n        }); \n\n        newLinks.forEach(function (link) { \n            svg.append(\"line\") // <-B \n                    .data([link]) \n                .attr(\"class\", \"line\") \n                .attr(\"x1\", function (d) {return d.source.x;}) \n                .attr(\"y1\", function (d) {return d.source.y;}) \n                .attr(\"x2\", function (d) {return d.target.x;}) \n                .attr(\"y2\", function (d) {return d.target.y;}) \n                    .transition() \n                    .delay(duration) \n                .style(\"stroke-opacity\", 1e-6) \n                .on(\"end\", function () {links.shift();}) \n                .remove(); \n        }); \n\n        force.nodes(nodes); \n        force.force(\"link\",  \n                         d3.forceLink(links) \n                            .strength(1).distance(20)); // <-C \n        force.restart(); \n    }); \n\n    function dragStarted(d) { \n        d.fx = d.x; // <-E \n        d.fy = d.y; \n    } \n\n    function dragged(d) { \n        d.fx = d3.event.x; // <-F \n        d.fy = d3.event.y; \n    } \n\n    function dragEnded(d) { \n        d.fx = null; // <-G \n        d.fy = null; \n    } \n</script> \n\n```", "```js\nvar force = d3.forceSimulation() \n                    .velocityDecay(0.8) \n                    .alphaDecay(0) \n                    .force(\"charge\", d3.forceManyBody() \n                             .strength(-50).distanceMax(h / 4)) \n                    .force(\"collision\",   \n                            d3.forceCollide(r + 0.5).strength(1)); \n\n```", "```js\n    function createLinks(nodes) { \n        var newLinks = []; \n        for (var i = 0; i < nodes.length; ++i) { // <-A \n            if(i == nodes.length - 1) \n                newLinks.push( \n                    {source: nodes[i], target: nodes[0]} \n                ); \n            else \n                newLinks.push( \n                    {source: nodes[i], target: nodes[i + 1]} \n                ); \n        } \n\n        newLinks.forEach(function(e){links.push(e)}); \n\n        return newLinks; \n    } \n\n    svg.on(\"click\", function () { \n        var point = d3.mouse(this), \n                newNodes = createNodes(point), \n                newLinks = createLinks(newNodes); \n\n        newNodes.forEach(function (node) { \n            svg.append(\"circle\") \n                    .data([node]) \n                .attr(\"class\", \"node\") \n                .attr(\"cx\", function (d) {return d.x;}) \n                .attr(\"cy\", function (d) {return d.y;}) \n                .attr(\"r\", 1e-6) \n                    .call(d3.drag() // <-D \n                            .on(\"start\", dragStarted) \n                            .on(\"drag\", dragged) \n                            .on(\"end\", dragEnded)) \n                    .transition() \n                .attr(\"r\", 7) \n                    .transition() \n                    .delay(duration) \n                .attr(\"r\", 1e-6) \n                .on(\"end\", function () {nodes.shift();}) \n                .remove(); \n        }); \n\n        newLinks.forEach(function (link) { \n            svg.append(\"line\") // <-B \n                    .data([link]) \n                .attr(\"class\", \"line\") \n                .attr(\"x1\", function (d) {return d.source.x;}) \n                .attr(\"y1\", function (d) {return d.source.y;}) \n                .attr(\"x2\", function (d) {return d.target.x;}) \n                .attr(\"y2\", function (d) {return d.target.y;}) \n                    .transition() \n                    .delay(duration) \n                .style(\"stroke-opacity\", 1e-6) \n                .on(\"end\", function () {links.shift();}) \n                .remove(); \n        }); \n\n        force.nodes(nodes); \n        force.force(\"link\", \n                        d3.forceLink(links) \n                           .strength(1).distance(20)); // <-C \n        force.restart(); \n    }); \n\n```", "```js\n    force.on(\"tick\", function () { \n        svg.selectAll(\"circle\") \n            .attr(\"cx\", function (d) {return boundX(d.x);}) \n            .attr(\"cy\", function (d) {return boundY(d.y);}); \n\n        svg.selectAll(\"line\") \n            .attr(\"x1\", function (d) {return boundX(d.source.x);}) \n            .attr(\"y1\", function (d) {return boundY(d.source.y);}) \n            .attr(\"x2\", function (d) {return boundX(d.target.x);}) \n            .attr(\"y2\", function (d) {return boundY(d.target.y);}); \n    }); \n\n    function boundX(x) { \n        return x > (w - r) ? (w - r): (x > r ? x : r); \n    } \n\n    function boundY(y){ \n        return y > (h - r) ? (h - r) : (y > r ? y : r); \n    } \n\n```", "```js\n       newNodes.forEach(function (node) { \n            svg.append(\"circle\") \n                    .data([node]) \n                .attr(\"class\", \"node\") \n                .attr(\"cx\", function (d) {return d.x;}) \n                .attr(\"cy\", function (d) {return d.y;}) \n                .attr(\"r\", 1e-6) \n                    .call(d3.drag() // <-D \n                            .on(\"start\", dragStarted) \n                            .on(\"drag\", dragged) \n                            .on(\"end\", dragEnded)) \n                    .transition() \n                .attr(\"r\", 7) \n                    .transition() \n                    .delay(duration) \n                .attr(\"r\", 1e-6) \n                .on(\"end\", function () {nodes.shift();}) \n                .remove(); \n        }); \n\n```", "```js\n    function dragStarted(d) { \n        d.fx = d.x; // <-E \n        d.fy = d.y; \n    } \n\n    function dragged(d) { \n        d.fx = d3.event.x; // <-F \n        d.fy = d3.event.y; \n    } \n\n    function dragEnded(d) { \n        d.fx = null; // <-G \n        d.fy = null; \n    } \n\n```", "```js\n<svg> \n    <defs> \n        <radialGradient id=\"gradient\" cx=\"50%\" cy=\"50%\"  \n                                r=\"100%\" fx=\"50%\" fy=\"50%\"> \n            <stop offset=\"0%\" \n              style=\"stop-color:blue;stop-opacity:0\"/> \n            <stop offset=\"100%\" \n              style=\"stop-color:rgb(255,255,255);stop-opacity:1\"/> \n        </radialGradient> \n    </defs> \n</svg> \n\n<script type=\"text/javascript\"> \n    var w = 1280, h = 800, \n                r = 4.5, nodes = [], links = []; \n\n    var force = d3.forceSimulation() \n                    .velocityDecay(0.8) \n                    .alphaDecay(0) \n                    .force(\"charge\", d3.forceManyBody() \n                              .strength(-50).distanceMax(h / 4)) \n                    .force(\"collision\",  \n                              d3.forceCollide(r + 0.5).strength(1)) \n                    .force(\"position\", d3.forceY(h / 2)); \n\n    var duration = 60000; \n\n    var svg = d3.select(\"svg\") \n                .attr(\"width\", w) \n                .attr(\"height\", h); \n\n    var line = d3.line() // <-A \n            .curve(d3.curveBasisClosed) \n            .x(function(d){return d.x;}) \n            .y(function(d){return d.y;}); \n\n    force.on(\"tick\", function () { \n        svg.selectAll(\"path\") \n            .attr(\"d\", line); \n    }); \n\n    function offset() { \n        return Math.random() * 100; \n    } \n\n    function createNodes(point) { \n        var numberOfNodes = Math.round(Math.random() * 10); \n        var newNodes = []; \n\n        for (var i = 0; i < numberOfNodes; ++i) { \n            newNodes.push({ \n                x: point[0] + offset(), \n                y: point[1] + offset() \n            }); \n        } \n\n        newNodes.forEach(function(e){nodes.push(e)}); \n\n        return newNodes; \n    } \n\n    function createLinks(nodes) { \n        var newLinks = []; \n        for (var i = 0; i < nodes.length; ++i) { \n            if(i == nodes.length - 1) \n                newLinks.push( \n                    {source: nodes[i], target: nodes[0]} \n                ); \n            else \n                newLinks.push( \n                    {source: nodes[i], target: nodes[i + 1]} \n                ); \n        } \n\n        newLinks.forEach(function(e){links.push(e)}); \n\n        return newLinks; \n    } \n\n    svg.on(\"click\", function () { \n        var point = d3.mouse(this), \n                newNodes = createNodes(point), \n                newLinks = createLinks(newNodes); \n\n        console.log(point); \n\n        svg.append(\"path\") \n                .data([newNodes]) \n            .attr(\"class\", \"bubble\") \n            .attr(\"fill\", \"url(#gradient)\") // <-B \n            .attr(\"d\", function(d){return line(d);}) \n                .transition().delay(duration) // <-C \n            .attr(\"fill-opacity\", 0) \n            .attr(\"stroke-opacity\", 0) \n            .on(\"end\", function(){d3.select(this).remove();}); \n\n        force.nodes(nodes); \n        force.force(\"link\",  \n                   d3.forceLink(links).strength(1).distance(20)); \n        force.restart(); \n    }); \n</script> \n\n```", "```js\nvar line = d3.line() // <-A \n            .curve(d3.curveBasisClosed) \n            .x(function(d){return d.x;}) \n            .y(function(d){return d.y;}); \n... \nsvg.on(\"click\", function () { \n        var point = d3.mouse(this), \n                newNodes = createNodes(point), \n                newLinks = createLinks(newNodes); \n\n        console.log(point); \n\n        svg.append(\"path\") \n                .data([newNodes]) \n            .attr(\"class\", \"bubble\") \n            .attr(\"fill\", \"url(#gradient)\") // <-B \n            .attr(\"d\", function(d){return line(d);}) // <-C \n                .transition().delay(duration) \n            .attr(\"fill-opacity\", 0) \n            .attr(\"stroke-opacity\", 0) \n            .on(\"end\", function(){d3.select(this).remove();}); \n\n        force.nodes(nodes); \n        force.force(\"link\",  \n                d3.forceLink(links).strength(1).distance(20)); \n        force.restart(); \n    }); \n\n```", "```js\n    force.on(\"tick\", function () { \n        svg.selectAll(\"path\") \n            .attr(\"d\", line); \n    }); \n\n```", "```js\n<script type=\"text/javascript\"> \n    var svg = d3.select(\"body\").append(\"svg\"), \n            colors = d3.scaleOrdinal(d3.schemeCategory20c), \n            r = 4.5, \n            w = 1290, \n            h = 800; \n\n    svg.attr(\"width\", w).attr(\"height\", h); \n\n    var force = d3.forceSimulation() \n                    .velocityDecay(0.8) \n                    .alphaDecay(0) \n                    .force(\"charge\",  \n                        d3.forceManyBody().strength(-30)) \n                    .force(\"x\", d3.forceX(w / 2)) \n                    .force(\"y\", d3.forceY(h / 2)) \n                    .force(\"collision\",   \n                        d3.forceCollide(r + 0.5).strength(1)); \n\n    var nodes = [], centers = []; \n\n    for (var i = 0; i < 5; ++i) { \n        for (var j = 0; j < 50; ++j) { \n            nodes.push({ \n                x: w / 2 + offset(), \n                y: h / 2 + offset(), \n                color: colors(i), // <-A \n                type: i // <-B \n            }); \n        } \n    } \n\n    force.nodes(nodes); \n\n    function offset() { \n        return Math.random() * 100; \n    } \n\n    function boundX(x) { \n        return x > (w - r) ? (w - r): (x > r ? x : r); \n    } \n\n    function boundY(y){ \n        return y > (h - r) ? (h - r) : (y > r ? y : r); \n    } \n\n    svg.selectAll(\"circle\") \n                .data(nodes).enter() \n            .append(\"circle\") \n            .attr(\"class\", \"node\") \n            .attr(\"cx\", function (d) {return d.x;}) \n            .attr(\"cy\", function (d) {return d.y;}) \n            .attr(\"fill\", function(d){return d.color;}) \n            .attr(\"r\", 1e-6) \n                .transition() \n            .attr(\"r\", r); \n\n    force.on(\"tick\", function() { \n        var k = 0.1; \n        nodes.forEach(function(node) { \n            var center = centers[node.type]; \n            if(center){ \n                node.x += (center[0] - node.x) * k; \n                node.y += (center[1] - node.y) * k; \n            } \n        }); \n\n        svg.selectAll(\"circle\") \n            .attr(\"cx\", function (d) {return boundX(d.x);}) \n            .attr(\"cy\", function (d) {return boundY(d.y);}); \n    }); \n\n    d3.select(\"body\") \n        .on(\"touchstart\", touch) \n        .on(\"touchend\", touch); \n\n    function touch() { \n        d3.event.preventDefault(); \n\n        centers = d3.touches(svg.node()); \n\n        console.log(centers); \n\n        var g = svg.selectAll(\"g.touch\") \n                .data(centers, function (d) { \n                    return d.identifier; \n                }); \n\n        g.enter() \n            .append(\"g\") \n            .attr(\"class\", \"touch\") \n            .attr(\"transform\", function (d) { \n                return \"translate(\" + d[0] + \",\" + d[1] + \")\"; \n            }) \n            .append(\"circle\") \n                .attr(\"class\", \"touch\") \n                .attr(\"fill\",  \n                        function(d){return colors(d.identifier);}) \n                    .transition() \n                .attr(\"r\", 50); \n\n        g.exit().remove(); \n    } \n</script> \n\n```", "```js\nvar force = d3.forceSimulation() \n                    .velocityDecay(0.8) \n                    .alphaDecay(0) \n                    .force(\"charge\",  \n                        d3.forceManyBody().strength(-30)) \n                    .force(\"x\", d3.forceX(w / 2)) \n                    .force(\"y\", d3.forceY(h / 2)) \n                    .force(\"collision\",  \n                        d3.forceCollide(r + 0.5).strength(1)); \n\n    var nodes = [], centers = []; \n\n    for (var i = 0; i < 5; ++i) { \n        for (var j = 0; j < 50; ++j) { \n            nodes.push({ \n                x: w / 2 + offset(), \n                y: h / 2 + offset(), \n                color: colors(i), // <-A \n                type: i // <-B \n            }); \n        } \n} \n\n    force.nodes(nodes); // <-C \n\n```", "```js\nfunction touch() { \n        d3.event.preventDefault(); \n\n        centers = d3.touches(svg.node()); \n\n        var g = svg.selectAll(\"g.touch\") \n                .data(centers, function (d) { \n                    return d.identifier; \n                }); \n\n        g.enter() \n            .append(\"g\") \n            .attr(\"class\", \"touch\") \n            .attr(\"transform\", function (d) { \n                return \"translate(\" + d[0] + \",\" + d[1] + \")\"; \n            }) \n            .append(\"circle\") \n                .attr(\"class\", \"touch\") \n                .attr(\"fill\",  \n                    function(d){return colors(d.identifier);}) \n                    .transition() \n                .attr(\"r\", 50); \n\n        g.exit().remove(); \n    } \n\n```", "```js\n    force.on(\"tick\", function() { \n        var k = 0.1; \n        nodes.forEach(function(node) { \n            var center = centers[node.type]; // <-C \n            if(center){ \n                node.x += (center[0] - node.x) * k; // <-D \n                node.y += (center[1] - node.y) * k; // <-E \n            } \n        }); \n\n        svg.selectAll(\"circle\") // <-F \n            .attr(\"cx\", function (d) {return boundX(d.x);}) \n            .attr(\"cy\", function (d) {return boundY(d.y);}); \n    }); \n\n```", "```js\n<script type=\"text/javascript\"> \n    var w = 1280, \n            h = 800, \n            r = 4.5, \n            colors = d3.scaleOrdinal(d3.schemeCategory20c); \n\n    var force = d3.forceSimulation() \n            .velocityDecay(0.8) \n            .alphaDecay(0) \n            .force(\"charge\", d3.forceManyBody()) \n            .force(\"x\", d3.forceX(w / 2)) \n            .force(\"y\", d3.forceY(h / 2)); \n\n    var svg = d3.select(\"body\").append(\"svg\") \n            .attr(\"width\", w) \n            .attr(\"height\", h); \n\n    d3.json(\"../../data/flare.json\", function (data) { \n        var root = d3.hierarchy(data); \n        var nodes = root.descendants(); \n        var links = root.links(); \n\n        force.nodes(nodes); \n        force.force(\"link\",  \n            d3.forceLink(links).strength(1).distance(20)); \n\n          var link = svg.selectAll(\"line\") \n              .data(links) \n            .enter().insert(\"line\") \n              .style(\"stroke\", \"#999\") \n              .style(\"stroke-width\", \"1px\"); \n\n          var nodeElements = svg.selectAll(\"circle.node\") \n              .data(nodes) \n            .enter().append(\"circle\") \n              .attr(\"r\", r) \n              .style(\"fill\", function(d) {  \n                    return colors(d.parent && d.parent.data.name);  \n              }) \n              .style(\"stroke\", \"#000\") \n              .call(d3.drag() \n                      .on(\"start\", dragStarted) \n                      .on(\"drag\", dragged) \n                      .on(\"end\", dragEnded)); \n\n          force.on(\"tick\", function(e) { \n            link.attr(\"x1\", function(d) { return d.source.x; }) \n                .attr(\"y1\", function(d) { return d.source.y; }) \n                .attr(\"x2\", function(d) { return d.target.x; }) \n                .attr(\"y2\", function(d) { return d.target.y; }); \n\n            nodeElements.attr(\"cx\", function(d) { return d.x; }) \n                .attr(\"cy\", function(d) { return d.y; }); \n          }); \n    }); \n\n    function dragStarted(d) { \n        d.fx = d.x; \n        d.fy = d.y; \n    } \n\n    function dragged(d) { \n        d.fx = d3.event.x; \n        d.fy = d3.event.y; \n    } \n\n    function dragEnded(d) { \n        d.fx = null; \n        d.fy = null; \n    } \n</script> \n\n```", "```js\nd3.json(\"../../data/flare.json\", function (data) { \n        var root = d3.hierarchy(data); // <-A \n        var nodes = root.descendants(); // <-B \n        var links = root.links(); // <-C \n\n        force.nodes(nodes); // <-D \n        force.force(\"link\", // <-E \n                d3.forceLink(links).strength(1).distance(20)); \n        ... \n} \n\n```", "```js\n          var link = svg.selectAll(\"line\") \n              .data(links) \n            .enter().insert(\"line\") \n              .style(\"stroke\", \"#999\") \n              .style(\"stroke-width\", \"1px\"); \n\n          var nodeElements = svg.selectAll(\"circle.node\") \n              .data(nodes) \n            .enter().append(\"circle\") \n              .attr(\"r\", r) \n              .style(\"fill\", function(d) { // <-F \n                  return colors(d.parent && d.parent.data.name); \n              }) \n              .style(\"stroke\", \"#000\") \n              .call(d3.drag() // <-G \n                      .on(\"start\", dragStarted) \n                      .on(\"drag\", dragged) \n                      .on(\"end\", dragEnded)); \n\n```", "```js\n          force.on(\"tick\", function(e) { \n            link.attr(\"x1\", function(d) { return d.source.x; }) \n                .attr(\"y1\", function(d) { return d.source.y; }) \n                .attr(\"x2\", function(d) { return d.target.x; }) \n                .attr(\"y2\", function(d) { return d.target.y; }); \n\n            nodeElements.attr(\"cx\", function(d) { return d.x; }) \n                .attr(\"cy\", function(d) { return d.y; }); \n          }); \n\n```"]