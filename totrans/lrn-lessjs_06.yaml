- en: Chapter 6. Migrating Your Site to Less
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 将您的网站迁移到Less
- en: So, by now, you've hopefully spent some time using Less and are thinking that
    this could be really useful for your projects going forward, right?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，到现在为止，你希望已经花了一些时间使用Less，并且认为这对你未来的项目可能非常有用，对吧？
- en: The trouble is you'll also probably be thinking of existing projects that could
    easily benefit by using Less, but you're not sure how to go about converting them
    to use Less. No problem; in this chapter, I will take you through some of the
    tips and tricks of how to make this transition to use Less, without risking everything.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于你可能也会想到现有的项目，它们通过使用Less可以轻易受益，但你不确定如何将它们转换为使用Less。没问题；在本章中，我将带你了解如何进行这种过渡到使用Less的一些技巧和窍门，而不会冒任何风险。
- en: We'll start by taking a look at the kind of questions we need to ask ourselves
    and then move on to creating the basic framework that we'll use when beginning
    the conversion, going through a detailed example of converting a mini website
    to use Less.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将审视我们需要问自己的问题类型，然后继续创建我们将用于开始转换的基本框架，通过一个将迷你网站转换为使用Less的详细示例。
- en: 'The key to conversion is to remember that Less is, after all, just a superset
    of CSS—most of the work is about identifying those parts that can be changed easily
    and those that might require more work. In this chapter, we''ll cover the following
    topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 转换的关键是记住，Less毕竟只是CSS的超集——大部分工作都是关于识别那些可以轻松更改的部分以及可能需要更多工作的部分。在本章中，我们将涵盖以下主题：
- en: Low-hanging fruit—obvious candidates for Less conversion
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低垂的果实——Less转换的明显候选者
- en: Identifying patterns in your CSS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别CSS中的模式
- en: Building a library of mixins
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建混入库
- en: Using prebuilt libraries as part of the conversion process
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将预构建库作为转换过程的一部分使用
- en: Mixing Less with plain CSS
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Less与普通CSS混合
- en: Working through a practical example
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过实际示例进行操作
- en: Are you ready to start converting your CSS? Good, let's get started...
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你准备好开始转换你的CSS了吗？好的，让我们开始吧...
- en: Preparing for the initial jump
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备初次跳跃
- en: 'So, you''ve read all about using Less and are keen to start using it in some
    of your older projects. You''ve started working with it on your newer sites and
    love how it makes writing CSS so much more manageable...but, you''re probably
    thinking: how can I incorporate it into an older site?'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你已经阅读了有关使用Less的所有内容，并且渴望开始在您的一些较旧的项目中使用它。你已经开始在您的新网站上使用它，并且非常喜欢它使编写CSS变得多么容易...但是，你可能正在想：我如何将其纳入一个较旧的网站？
- en: 'Well, you''re in the right place—making the change in older sites doesn''t
    need to be difficult, as long as you keep these tips in mind:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，你来了对地方——只要记住这些提示，在较旧的网站上做出改变并不需要那么困难：
- en: Make sure you have installed Firebug with Less support, as outlined in [Chapter
    2](part0025_split_000.html#page "Chapter 2. Building a Less Development Toolkit"),
    *Building a Less Development Toolkit*. Trust me on this; it will make debugging
    your efforts so much easier!
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你已经安装了带有Less支持的Firebug，如[第2章](part0025_split_000.html#page "第2章. 构建Less开发工具包")中所述，*构建Less开发工具包*。相信我，这将使调试你的工作变得容易得多！
- en: Run your existing CSS through a site, such as W3C CSS Validator ([http://jigsaw.w3.org/css-validator/validator](http://jigsaw.w3.org/css-validator/validator)).
    If you haven't already done so, this will help spot any errors and ensure that
    your code validates properly, before beginning to convert it to Less.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的现有CSS通过一个网站，如W3C CSS验证器([http://jigsaw.w3.org/css-validator/validator](http://jigsaw.w3.org/css-validator/validator))进行验证。如果你还没有这样做，这将有助于发现任何错误，并在开始将其转换为Less之前确保你的代码正确验证。
- en: Try to get into the mentality that converting Less should be done in blocks
    at a time and should be an iterative process—this reduces the risk of missing
    opportunities or making mistakes in your code; this is particularly important
    when converting large files, such as a WordPress style sheet!
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试养成将Less转换分块进行，并且应该是一个迭代过程的心态——这减少了错过机会或在你代码中犯错误的风险；这在转换大型文件，如WordPress样式表时尤其重要！
- en: Don't forget that Less is a superset of CSS—provided we work through the conversion
    process in a logical manner. Less will still compile plain CSS code that has yet
    to be converted to its Less equivalent. This means that we can mix code during
    the conversion process until all of the styles have been suitably converted.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要忘记Less是CSS的超集——只要我们以逻辑方式完成转换过程。Less仍然会编译尚未转换为Less等价的普通CSS代码。这意味着我们可以在转换过程中混合代码，直到所有样式都得到了适当的转换。
- en: Get into the habit of using sites such as [http://less2css.org](http://less2css.org)
    or [http://lesstester.com](http://lesstester.com). These are great for experimenting
    with the Less code in order to see how it will compile into valid CSS.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 养成使用诸如[http://less2css.org](http://less2css.org)或[http://lesstester.com](http://lesstester.com)等网站的习惯。这些网站非常适合实验Less代码，以查看它将如何编译为有效的CSS。
- en: Let's put some of these tips into practice and take a look at the initial steps
    that should form the basis for any initial conversion process.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将一些这些技巧付诸实践，并查看应该构成任何初始转换过程基础的初步步骤。
- en: Creating the initial framework
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建初始框架
- en: Once you've made the decision to convert in order to use Less, there are a few
    steps that we can take, which help with the initial conversion process, before
    we start writing Less code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您决定转换为使用Less，我们就可以采取一些步骤，这些步骤有助于初始转换过程，在我们开始编写Less代码之前。
- en: Let's take a look at how we can make this process easier. For the purpose of
    this example, I'll assume that you have just one style sheet, called `styles.css`,
    and that you're working in a development environment on a simple HTML-based site
    in order to get accustomed to the conversion process.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们如何使这个过程更容易。为了本例的目的，我将假设您只有一个样式表，称为`styles.css`，并且您正在开发环境中工作，在基于HTML的简单网站上工作，以便熟悉转换过程。
- en: Start by renaming the `sitestyles.css` file with a `.less` extension to `sitestyles.less`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将`sitestyles.css`文件重命名为`.less`扩展名的`sitestyles.less`。
- en: 'In a new file in your text editor, add the following:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的文本编辑器中的新文件中，添加以下内容：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Save this as `styles.less`. In your HTML code, change the existing link to
    `sitestyles.css` in order to point to `sitestyles.less`, using the following link:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其保存为`styles.less`。在您的HTML代码中，将现有的链接`sitestyles.css`更改为指向`sitestyles.less`，使用以下链接：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Use Crunch! or Sublime Text (depending on what you have set up in [Chapter 3](part0031_split_000.html#page
    "Chapter 3. Getting Started with Less"), *Getting Started with Less*) to compile
    the new `styles.less` file in order to confirm whether it is producing a valid
    `styles.css` file.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Crunch!或Sublime Text（取决于您在[第3章](part0031_split_000.html#page "第3章。使用Less入门")中设置的内容，*使用Less入门*)来编译新的`styles.less`文件，以确认它是否生成有效的`styles.css`文件。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We've referenced the Less file directly in our code—this is for development
    purposes only and not recommended for production use.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的代码中直接引用了Less文件——这仅用于开发目的，不建议用于生产使用。
- en: 'At this point, you might think that having a single statement in the `styles.less`
    file might sound like an overkill; there is a reason for this: the key to working
    with Less is to build up the initial framework of the Less file so that we can
    prove that it compiles to valid CSS first. Once this has been proven, it is simply
    a matter of adding more `@import` statements for each partial file you want to
    include. Less will combine all of these into one file when we next recompile `styles.less`,
    as we will see in the next section.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您可能会认为在`styles.less`文件中只有一个语句听起来可能有些过度；这是有原因的：与Less一起工作的关键是建立Less文件的初始框架，以便我们首先证明它可以编译为有效的CSS。一旦证明这一点，就只需为每个您想要包含的部分文件添加更多的`@import`语句。在我们下次重新编译`styles.less`时，Less会将所有这些合并到一个文件中，正如我们将在下一节中看到的。
- en: Mixing Less with plain CSS
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Less与纯CSS混合
- en: 'If we mix Less with CSS to create a framework for importing individual partials,
    we will get an additional benefit: we are not obliged to convert all of the Less
    files in one go! Instead, we can simply break the existing CSS files into smaller
    **partials** and then import them into the master CSS file (here, `styles.less`)—this
    makes it easier to manage the conversion process.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将Less与CSS混合以创建导入单个部分文件的框架，我们将获得一个额外的好处：我们不必一次性转换所有Less文件！相反，我们可以简单地将现有的CSS文件拆分成更小的**部分**，然后将它们导入到主CSS文件（此处为`styles.less`）中——这使得转换过程更容易管理。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Partials are separate files that contain Less code—they are a means to help
    make managing Less code easier, as multiple files can be imported in one style
    sheet as part of the compilation process.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 部分是包含Less代码的单独文件——它们是帮助简化Less代码管理的手段，因为多个文件可以作为编译过程的一部分在一个样式表中导入。
- en: 'We then simply add an `@import` statement for each Less file we need to import,
    such as the examples shown:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们只需为每个需要导入的Less文件添加一个`@import`语句，例如以下示例所示：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Remember that no matter how big the Less file is or how many partials are being
    imported, Less will only ever import a style in the final compiled CSS file if
    it is being referenced in the code. While we are still developing the Less file,
    we can easily compile this dynamically in the browser; once the final version
    is ready, this can be precompiled, and the resulting CSS file can be imported
    in our production environment.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，无论Less文件有多大或正在导入多少部分，Less在最终编译的CSS文件中只会导入被代码引用的样式。当我们还在开发Less文件时，我们可以轻松地在浏览器中动态编译它；一旦最终版本准备就绪，它就可以预先编译，生成的CSS文件可以导入我们的生产环境中。
- en: Spotting low-hanging fruit
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找低垂的果实
- en: Now that we have our basic framework in place, it's time to go fruit picking—no,
    I'm not referring to fruit picking in the literal sense, but finding CSS statements
    that can be easily converted with little effort.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经建立了基本框架，是时候去“摘水果”了——不，我并不是字面意义上的摘水果，而是寻找那些可以轻松转换且几乎不需要努力的CSS语句。
- en: 'Each project will vary in size and scope, but there will be some easy conversions
    that we can make, which will apply to any project:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每个项目的大小和范围都会有所不同，但总会有一些简单的转换我们可以进行，这些转换适用于任何项目：
- en: 'An easy change that can be made is to incorporate variables for colors—once
    converted, we can use operators to calculate new values, such as lightening a
    specific color by 25 percent. As a start, we can create some variables, such as
    the following:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以进行的一个简单更改是引入颜色变量——一旦转换，我们可以使用运算符来计算新的值，例如将特定颜色亮度提高25%。作为开始，我们可以创建一些变量，例如以下这些：
- en: '[PRE3]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can then use variables in our styles, instead of the hex codes; they will
    appear as follows:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以在我们的样式中使用变量，而不是十六进制代码；它们将如下所示：
- en: '[PRE4]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Ideally, the names used here should reflect the context that they are used for,
    such as `body-textcolor` or `heading-textcolor`; we've used names here to illustrate
    how they can replace existing colors, and at least make the color names readable!
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 理想情况下，这里使用的名称应该反映它们被使用的上下文，例如`body-textcolor`或`heading-textcolor`；我们在这里使用名称来展示它们如何替换现有的颜色，并且至少使颜色名称可读！
- en: During the conversion process, you may want to consider moving converted code
    into a separate Less partial and importing it using the process we covered earlier.
    Although this will allow you to maintain a distinction between Less and CSS styles,
    it does mean that we may miss opportunities if the converted Less code is not
    displayed on the screen while we work on converting the existing CSS styles.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在转换过程中，你可能想要考虑将转换后的代码移动到一个单独的Less部分，并使用我们之前介绍的过程导入它。虽然这允许你在Less和CSS样式之间保持区分，但也意味着如果我们正在转换现有的CSS样式，而转换后的Less代码没有在屏幕上显示，我们可能会错过机会。
- en: If we're using CSS3 styles that contain vendor prefixes, we can convert our
    code to import mixins from external prebuilt libraries, such as LESS Hat or LESS
    Elements. This will reduce the code we need to write—after all, why reinvent the
    wheel if someone has already built a suitable mixin that we can use?
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们使用包含供应商前缀的CSS3样式，我们可以将我们的代码转换为从外部预构建库导入混入（mixins），例如LESS Hat或LESS Elements。这将减少我们需要编写的代码量——毕竟，如果有人已经构建了一个我们可以使用的合适的混入，为什么还要重新发明轮子呢？
- en: 'A more evolved change that we can make is related to the use of nesting—this
    will make our code easier to read, as it is clearer how child styles will affect
    their parent elements. A perfect example of this is a menu system built into the
    header `DIV` of a page:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以做出的一个更进阶的更改是关于嵌套的使用——这将使我们的代码更容易阅读，因为更清楚子样式将如何影响其父元素。一个完美的例子是嵌入到页面头部`DIV`中的菜单系统：
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can then convert it manually or using a site, such as [http://css2less.cc](http://css2less.cc);
    while this site isn''t perfect, it will give you a head start in the conversion
    process:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以手动转换或使用网站，例如[http://css2less.cc](http://css2less.cc)；虽然这个网站并不完美，但它会在转换过程中给你一个良好的起点：
- en: '![Spotting low-hanging fruit](img/00060.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![寻找低垂的果实](img/00060.jpeg)'
- en: Tip
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Online CSS to Less convertors are not perfect—for example, they may struggle
    to produce good quality code if your CSS file contains a lot of random selectors;
    Less will also regroup CSS statements during compilation, which may break your
    code. These sites should be treated as a start point for development; the assumption
    time is spent in finessing the code manually after the initial conversion.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在线CSS到Less转换器并不完美——例如，如果您的CSS文件包含大量随机选择器，它们可能难以生成高质量的代码；Less在编译过程中也会重新组合CSS语句，这可能会破坏您的代码。这些网站应该被视为开发的一个起点；假设在初始转换后，手动花费时间对代码进行微调。
- en: There will no doubt be other easy changes we can make—it will all depend on
    the size and scope of the site being converted to use Less. Again, the key point
    to remember here is that conversion should be an iterative process and that you
    will do yourself no favors if you try to convert your site in one go!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，我们还可以做出其他一些简单的改变——这完全取决于将要转换为使用Less的网站的大小和范围。再次强调，这里的关键点是转换应该是一个迭代的过程，如果你试图一次性完成网站的转换，那么你并不会给自己带来任何好处！
- en: Let's change our focus slightly and move on to the next stage in the process—once
    you've dealt with the easy conversions, it's time to ask yourself a series of
    questions, all of which fall under the banner of identifying patterns in your
    CSS.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微改变一下焦点，继续到过程的下一阶段——一旦你处理了简单的转换，就是时候问自己一系列问题，所有这些问题都属于在CSS中识别模式这一范畴。
- en: Identifying patterns in your CSS
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的CSS中识别模式
- en: 'Identifying patterns in your CSS is all about asking yourself one question:
    how can I reduce code?'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的CSS中识别模式，就是问自己一个问题：我如何减少代码？
- en: 'There are a number of ways of doing this; the exact process will depend on
    the nature of the site being converted. There are some general questions that
    you can ask yourself though, to help with the conversion process:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多种方法可以做到这一点；具体的过程将取决于要转换的网站的性质。尽管如此，你可以问自己一些一般性的问题，以帮助转换过程：
- en: Does your site use any CSS3 styles? If it does, consider using a prebuilt Less
    library, which we can import in our Less style sheet.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的网站使用了任何CSS3样式吗？如果使用了，考虑使用预构建的Less库，我们可以在我们的Less样式表中导入它。
- en: Does your CSS code contain any statements, such as links to image elements?
    If it does, you might want to consider using string variables and interpolation
    to better manage the links, particularly if they need to be updated in the future.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的CSS代码中是否包含任何语句，例如链接到图像元素？如果包含，您可能希望考虑使用字符串变量和插值来更好地管理链接，尤其是如果它们需要在未来进行更新。
- en: How many variables does your site use? If any of these variables will be used
    to define colors, then consider using some of Less' in-built functions or operators
    to dynamically generate colors, such as making a color lighter by 20 percent or
    adding a value to an existing color to create a new one.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的网站使用了多少变量？如果其中任何变量将用于定义颜色，那么考虑使用一些Less内置的函数或运算符来动态生成颜色，例如将颜色变亮20%或向现有颜色添加值以创建一个新的颜色。
- en: How often do you see the same (or very similar) block of code shown throughout
    your code? With a little care, can it be altered to be the same as others? If
    so, this would be a prime candidate for conversion into a mixin. The more instances
    of code we can alter while still maintaining the same effect, the more value we
    will get from using a mixin.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你在代码中看到相同的（或非常相似的）代码块有多频繁？只要稍加注意，是否可以将其修改为与其他代码相同？如果是这样，这将是一个非常适合转换为混入的候选者。我们能够改变多少代码实例，同时仍然保持相同的效果，我们就能够从使用混入中获得更多的价值。
- en: While there are likely to be more questions that you might ask, since each site
    is different, not every question will apply. One of the key questions will be
    related to creating mixins and whether we can separate them in our own library
    for future use.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可能会有更多的问题要问，因为每个网站都是不同的，但并非每个问题都适用。其中一个关键问题将涉及到创建混入（mixins）以及我们是否可以将它们分离到我们自己的库中以便将来使用。
- en: Using prebuilt mixin libraries
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用预构建的混入库
- en: If we've created a number of mixins, we could turn these into a library. However,
    this may not always be necessary; instead, we can always look for ways to reuse
    mixins from libraries that are available for download from the Internet.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们创建了许多混入，我们可以将这些混入变成一个库。然而，这并不总是必要的；相反，我们总是可以寻找方法来重用从互联网上可下载的库中的混入。
- en: 'Why should we use them? There are two good reasons for doing so:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们应该使用它们？这样做有两个很好的理由：
- en: We can avoid the need to reinvent the wheel
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以避免重造轮子的需要
- en: We don't need to worry about the support for, or the updating of, the library—this
    will be handled by the author, frequently with the help of the open source community
    at large
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不需要担心库的支持或更新——这将由作者处理，通常还会得到整个开源社区的协助
- en: 'There are lots of libraries that are available—they can all be imported using
    the same `@import` statement we''ve already seen in use. We will cover how to
    use such a library in more detail in the practical example at the end of the chapter,
    but in the meantime, here are some examples of libraries that are available for
    use:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的库有很多——它们都可以使用我们之前已经看到的相同的`@import`语句导入。我们将在本章末尾的实践示例中更详细地介绍如何使用此类库，但在此期间，以下是一些可用的库示例：
- en: 3L ([http://mateuszkocz.github.io/3l/](http://mateuszkocz.github.io/3l/))
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3L ([http://mateuszkocz.github.io/3l/](http://mateuszkocz.github.io/3l/))
- en: Animate.css ([https://github.com/daneden/animate.cs](https://github.com/daneden/animate.cs))
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Animate.css ([https://github.com/daneden/animate.cs](https://github.com/daneden/animate.cs))
- en: ClearLess ([https://github.com/clearleft/clearless](https://github.com/clearleft/clearless))
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ClearLess ([https://github.com/clearleft/clearless](https://github.com/clearleft/clearless))
- en: CSS Effects ([http://adodson.com/css-effects/](http://adodson.com/css-effects/))
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS Effects ([http://adodson.com/css-effects/](http://adodson.com/css-effects/))
- en: Cssowl ([http://cssowl.owl-stars.com/](http://cssowl.owl-stars.com/))
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cssowl ([http://cssowl.owl-stars.com/](http://cssowl.owl-stars.com/))
- en: LESS Elements ([http://lesselements.com/](http://lesselements.com/))
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LESS Elements ([http://lesselements.com/](http://lesselements.com/))
- en: LESS Hat ([http://lesshat.com/](http://lesshat.com/))
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LESS Hat ([http://lesshat.com/](http://lesshat.com/))
- en: Oban ([http://oban.io/](http://oban.io/))
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Oban ([http://oban.io/](http://oban.io/))
- en: Preboot ([http://getpreboot.com/](http://getpreboot.com/))
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Preboot ([http://getpreboot.com/](http://getpreboot.com/))
- en: There will be plenty more available online; you can search over the Internet
    to see what is available, as you may find others that are more suited to your
    needs. We will be using the LESS Hat library in a practical demo later in this
    chapter.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在线将有更多可用资源；您可以在互联网上搜索以查看可用资源，您可能会找到更适合您需求的资源。我们将在本章后面的实践演示中使用LESS Hat库。
- en: Building a library of mixins
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建混入库
- en: As part of identifying patterns in our CSS, where we can identify code that
    can be turned into mixins, we might find that using a prebuilt library, such as
    LESS Elements or LESS Hat, doesn't always meet our requirements.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 作为识别我们CSS中模式的一部分，我们可以识别出可以转换为混入的代码，我们可能会发现使用预构建的库，如LESS Elements或LESS Hat，并不总是满足我们的需求。
- en: 'This is not necessarily an issue; it may be that the author of the library
    hasn''t created the mixin the way we want it, as he was trying to satisfy another
    requirement. If existing mixins aren''t available, we can always consider creating
    our own library of mixins as partials that can be included in future projects.
    We could even consider hosting mixins on GitHub ([http://www.github.com](http://www.github.com)),
    as has been done by others:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能不是问题；可能是因为库的作者没有按照我们的期望创建混入，因为他试图满足另一个需求。如果现有的混入不可用，我们始终可以考虑创建自己的混入库作为部分，以便在未来的项目中使用。我们甚至可以考虑在GitHub
    ([http://www.github.com](http://www.github.com))上托管混入，就像其他人所做的那样：
- en: '![Building a library of mixins](img/00061.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![构建混入库](img/00061.jpeg)'
- en: Tip
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: There are several popular code-sharing platforms available, which you can try—two
    good examples are Google Code ([https://code.google.com/](https://code.google.com/))
    and Bitbucket ([https://bitbucket.org/](https://bitbucket.org/)).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个流行的代码共享平台可供选择，您可以尝试——两个很好的例子是Google Code ([https://code.google.com/](https://code.google.com/))和Bitbucket
    ([https://bitbucket.org/](https://bitbucket.org/))。
- en: The trick in creating mixins for libraries here is to stay several steps ahead
    of yourself and work out how you can convert similar blocks of code so that they
    can be replaced with one or more mixins.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在为库创建混入时，技巧是提前几步考虑，并找出您如何转换相似的代码块，以便它们可以用一个或多个混入来替换。
- en: If you find that the code can be converted into mixins, it is worth giving a
    thought to how these mixins should be written. A key precept of Less is the DRY
    principle (Don't Repeat Yourself)—you may find yourself writing a number of mixins
    that can be reused. The usefulness of these mixins will increase if careful consideration
    is given to any tweaks that can be made, so that other blocks of CSS code can
    be replaced by Less calls to the mixins you create.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现代码可以转换为mixin，那么思考这些mixin应该如何编写是值得的。Less的一个关键原则是DRY（不要重复自己）——你可能会发现自己编写了许多可以重用的mixin。如果仔细考虑任何可以进行的调整，这些mixin的实用性将会增加，这样其他CSS代码块就可以通过Less调用你创建的mixin来替换。
- en: 'Once your library has been created, you can host it on GitHub—there are several
    good reasons for doing so:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的库创建完成，你就可以在GitHub上托管它——这样做有几个很好的理由：
- en: There is a ready-made community at large, who can help with issues or support
    the library
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在社区中有一个现成的群体，他们可以帮助解决问题或支持这个库
- en: It is a good way to say thank you to others, as you may have used their work
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一种向他人表示感谢的好方法，因为你可能已经使用了他们的工作
- en: Anyone who uses your mixin library can help suggest improvements to your mixins
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何使用你的mixin库的人都可以帮助你提出对mixin的改进建议
- en: Creating your own library and making it available online will give you an enormous
    sense of satisfaction, from having been able to contribute back to the open source
    movement—after all, we've only reached where we are today, thanks to the efforts
    of those who have spent hours creating libraries such as Less!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自己的库并将其在线上发布，将给你带来巨大的满足感，因为你能够为开源运动做出贡献——毕竟，我们今天所达到的成就，离不开那些花费数小时创建库（如Less）的人们的努力！
- en: Now, let's turn our focus to using one of these prebuilt libraries that we've
    just covered—we're going to take a look at using LESS Hat as part of our practical
    example.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将注意力转向使用我们刚刚提到的这些预构建库之一——我们将通过实际例子来看看如何使用LESS Hat。
- en: Working through a practical example
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过实际例子进行操作
- en: So far, we've looked at a range of tips and tricks that you can use to convert
    a site in order to use Less—while there are some useful tips, I think you will
    agree that it is far better to see the conversion process in action! With this
    in mind, let's take a look at a simple example, in the form of the CSS styling
    we created in [Chapter 4](part0041_split_000.html#page "Chapter 4. Working with
    Variables, Mixins, and Functions"), *Working with Variables, Mixins, and Functions*,
    for the one-page website.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经查看了一系列你可以用来将网站转换为使用Less的技巧和窍门——虽然有一些有用的技巧，但我认为你也会同意，看到转换过程在实际中发生要更好！考虑到这一点，让我们看看一个简单的例子，以我们在[第4章](part0041_split_000.html#page
    "第4章。使用变量、mixin和函数")中创建的CSS样式为例，*使用变量、mixin和函数*，这是一个单页网站。
- en: 'Before we start making changes, let''s take a look at the compiled CSS that
    was created for the page, along with a screenshot of the page:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始做出更改之前，让我们看看为该页面创建的编译后的CSS，以及页面的截图：
- en: '![Working through a practical example](img/00062.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![通过实际例子进行操作](img/00062.jpeg)'
- en: Introducing the CSS
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍CSS
- en: 'Now that we''ve seen a screenshot of the page that we''re going to retrofit
    to use Less, let''s take a look at the CSS code we need to convert. The compiled
    CSS that was generated using Crunch! is as follows—a copy of this is in the code
    download that accompanies this book, as `conversion.css`. We''ll also include
    a slightly modified version of the styles from `social.css`, within `conversion.css`.
    This will still produce the same results, but the reason for modifying it here
    will become apparent in the next section:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了将要改造以使用Less的页面的截图，让我们来看看我们需要转换的CSS代码。使用Crunch!生成的编译后的CSS如下——这本书附带的代码下载中包含了这个副本，作为`conversion.css`。我们还将包括对`social.css`中样式的一点点修改，并将其包含在`conversion.css`中。这将产生相同的结果，但修改它的原因将在下一节中变得明显：
- en: '[PRE6]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'At first glance, this should look like an ordinary style sheet, which hopefully
    uses some fairly common style attributes that could be used in any website project:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 初看，这应该看起来像一张普通的样式表，希望它使用了一些在任何一个网站项目中都可能用到的相当常见的样式属性：
- en: '![Introducing the CSS](img/00063.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![介绍CSS](img/00063.jpeg)'
- en: You're probably thinking that with such a simple example, there's little we
    can do here, right?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能正在想，这样一个简单的例子，我们在这里能做些什么，对吧？
- en: Identifying the changes to be made
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定需要做出的更改
- en: Wrong! Making the conversion to use Less should not always be about the size
    of your style sheet but about getting into the mindset that using Less will make
    it easier to manage your code, no matter what its size. Converting to use Less
    should be an iterative process that stops only when all of the original CSS has
    been converted and when Less is being used in your site.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 错误！将转换到使用Less不应该总是关于你的样式表的大小，而应该是进入使用Less将使代码管理更容易的心态。将转换到使用Less应该是一个迭代的过程，只有当所有原始CSS都已转换并且Less正在你的网站上使用时，这个过程才会停止。
- en: To prove this, let's take a look at the code and highlight some of the areas
    that can be converted. The style sheet is a simple example, but it is enough to
    illustrate the processes that you can use to convert a CSS file to its Less equivalent.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明这一点，让我们看一下代码，并突出显示一些可以转换的区域。样式表是一个简单的例子，但它足以说明你可以用来将CSS文件转换为Less等价物的过程。
- en: Did you notice the three style rules that use `#leftmargin`? Here is the perfect
    opportunity to use nesting—we can avoid having to duplicate the rule name, and
    we can group the styles in a more logical manner.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你注意到使用`#leftmargin`的三个样式规则了吗？这是一个使用嵌套的完美机会——我们可以避免重复规则名称，并且可以以更合理的方式分组样式。
- en: We used the box-sizing attribute used for `#content` but didn't include all
    the vendor prefixes for it. It's a good excuse to look at one of the many mixin
    libraries available online and see if one of them contains a suitable mixin that
    we can use. This avoids the need to reinvent the wheel—we can simply link to the
    mixin and pass values to it, if appropriate. Importing a prebuilt mixin will also
    handle any vendor prefixes that are required for operation.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用了`#content`的`box-sizing`属性，但没有包含所有供应商前缀。这是一个很好的理由去查看网上可用的许多mixin库，看看其中是否包含一个合适的mixin我们可以使用。这避免了重新发明轮子的需要——如果合适，我们可以简单地链接到mixin并传递给它值。导入预构建的mixin也会处理操作所需的任何供应商前缀。
- en: Instead of using hex values for colors, which aren't easy to translate into
    something meaningful, we can create variables and assign values to them. The names
    can be set to describe the color value being set. If they need to be updated,
    then it only requires one update, as Less will handle changing all the other instances
    automatically.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与使用难以转换为有意义的十六进制值的颜色值相比，我们可以创建变量并将值分配给它们。名称可以设置为描述所设置的颜色的值。如果需要更新，那么只需要一个更新，因为Less会自动处理所有其他实例的更改。
- en: In `div` and `#title`, we've included a `font-family` attribute—while this will
    work perfectly well in normal CSS, we can use the same variable process and create
    meaningful names for each `font-family` attribute. This makes them much easier
    to update, should they need to be changed in the future.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`div`和`#title`中，我们包含了`font-family`属性——虽然这在正常CSS中可以完美工作，但我们可以使用相同的变量过程并为每个`font-family`属性创建有意义的名称。这使得它们在将来需要更改时更容易更新。
- en: 'In `#leftmargin` and `#content`, you may or may not have noticed an opportunity
    here—we''re repeating the same code (albeit, with slightly different values) to
    create our column. Instead, we could use a mixin to control these styles. However,
    there is a catch: notice that `#content` has additional `padding: 10px` in the
    style rule? In this instance, it''s not an issue—we can add this in `#leftmargin`
    with no noticeable adverse effect. Remember, it''s all about making the initial
    change and then taking a look to see what we can alter, which will then allow
    us to add more to the mixin and make it more useful.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在`#leftmargin`和`#content`中，你可能已经注意到了这里的一个机会——我们重复使用相同的代码（尽管值略有不同）来创建我们的列。然而，有一个问题：注意`#content`在样式规则中额外有`padding:
    10px`？在这种情况下，这不是问题——我们可以在`#leftmargin`中添加这个样式，而不会产生明显的负面影响。记住，关键在于先进行初始更改，然后查看我们可以更改什么，这样我们就可以向mixin添加更多内容，使其更有用。'
- en: A more advanced change that we can make is to switch to using `data-uri` for
    importing the social networking image in our CSS in order to save on server requests
    and bandwidth usage. We used it in the original example in [Chapter 4](part0041_split_000.html#page
    "Chapter 4. Working with Variables, Mixins, and Functions"), *Working with Variables,
    Mixins, and Functions*—it will work perfectly well for small images (such as ours)
    but is less useful for larger ones, or those that are not reused in the site.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以做出的更高级的更改是，将使用`data-uri`来导入我们的CSS中的社交网络图片，以节省服务器请求和带宽使用。我们在[第4章](part0041_split_000.html#page
    "第4章. 使用变量、混入和函数")的原始示例中使用了它，*使用变量、混入和函数*——它对于小图像（如我们的示例）将完美工作，但对于较大的图像或那些在网站上未重复使用的图像则不太有用。
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There is no hard and fast rule regarding what can be defined as a "small" image—the
    image I've used in this example weighs in at 9 KB. This will depend a little on
    any `data-uri` limit within a browser; for example, IE8 is limited to 32 KB. It
    is all about choosing carefully—small images such as credit card logos would be
    perfect, but a large picture clearly isn't!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 关于什么可以定义为“小”图像并没有硬性规定——我在这个示例中使用的图像重量为9 KB。这会稍微取决于浏览器中的任何`data-uri`限制；例如，IE8的限制为32
    KB。这完全关乎仔细选择——如信用卡标志这样的小图像将完美无缺，但一张大图片显然就不合适了！
- en: These are just a few of the concepts that we can use to convert this style sheet
    to use Less. The key to the conversion process is not about size, but about re-engineering
    the code to make it easier to maintain and removing duplication if others have
    already created code that you can import in your own projects. Once you've started
    converting code, you will see other opportunities for conversion—it is very much
    a case of practice makes perfect!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是我们可以用来将此样式表转换为使用Less的一些概念。转换过程的关键不在于大小，而在于重新设计代码以使其更容易维护，并移除其他人已经创建且你可以导入到自己的项目中的代码的重复部分。一旦你开始转换代码，你将看到其他转换的机会——这完全是一个熟能生巧的例子！
- en: Making the changes
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进行更改
- en: 'Now that we''ve seen the changes we can make, let''s begin to implement some
    of these changes, beginning with the creation of our Less framework files. Start
    by renaming the `conversion.css` file to `conversion.less`. Next, add the following
    line to a new file in your text editor:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看到了可以做出的更改，让我们开始实施一些这些更改，从创建我们的Less框架文件开始。首先，将`conversion.css`文件重命名为`conversion.less`。接下来，在你的文本编辑器中的新文件中添加以下行：
- en: '[PRE7]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save the file as `styles.less`—this sets up our framework, ready for us to convert
    our code. If you've used Sublime Text or Crunch!, then you will find that a `styles.css`
    file has been created—this contains a compiled copy of the code from `conversion.less`.
    Setting up the framework in this manner means that we can add more `@import` statements
    in the future; the contents of these imported files will automatically be included
    in the final article, when the `styles.less` file is recompiled.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为`styles.less`——这设置了我们的框架，以便我们可以转换我们的代码。如果你使用了Sublime Text或Crunch!，那么你将发现已创建了一个`styles.css`文件——它包含从`conversion.less`编译的代码副本。以这种方式设置框架意味着我们可以在未来添加更多的`@import`语句；这些导入文件的
    内容将在`styles.less`文件重新编译时自动包含到最终文章中。
- en: Using the CSS3 mixins
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CSS3混入
- en: Next, let's take a look at the CSS3 styles we've used—we can convert to use
    a prebuilt mixin library. For the purpose of this exercise, we're going to use
    the LESS Hat library, available at [http://lesshat.madebysource.com/](http://lesshat.madebysource.com/).
    Click on the **Download LESS Hat** button—at the time of writing this book, the
    latest Version is 2.0.15.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看我们使用的CSS3样式——我们可以将其转换为使用预构建的混入库。为了这个练习的目的，我们将使用可从[http://lesshat.madebysource.com/](http://lesshat.madebysource.com/)获取的LESS
    Hat库。点击**下载LESS Hat**按钮——在撰写本书时，最新版本是2.0.15。
- en: 'We need to extract the `lesshat.less` file, which is in the `build` subfolder—copy
    this to the `css` subfolder in your project folder. Switch back to the `conversion.less`
    file in your text editor and then add this line at the start:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要提取`lesshat.less`文件，该文件位于`build`子文件夹中——将其复制到项目文件夹中的`css`子文件夹。切换回文本编辑器中的`conversion.less`文件，然后在开头添加以下行：
- en: '[PRE8]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will now import any of the mixins that we need to use from the LESS Hat
    library.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这将导入我们需要从LESS Hat库中使用的任何混入（mixins）。
- en: Note
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can't include the `@import` statement for LESS Hat in the `styles.less` file—this
    will cause a compilation error in `conversion.less`, as it can't find the source
    mixins it needs to use when compiling the code.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能在`styles.less`文件中包含`@import`语句用于LESS Hat——这将在`conversion.less`中导致编译错误，因为它在编译代码时找不到它需要使用的源混入。
- en: 'Now that we''ve added the LESS Hat library, we can start adapting our code
    to use the mixins from this library; there are several places where we alter the
    code to use mixins, as highlighted:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了LESS Hat库，我们可以开始调整我们的代码以使用这个库中的混入；有几个地方我们更改了代码以使用混入，如下所示：
- en: '[PRE9]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example, there are only three places where we can use LESS Hat. Even
    though this is only a limited number, we should not forget that it is not so much
    about the number of instances where we can use external mixin libraries, but more
    about not reinventing the wheel and that the use of an external library means
    less work for us to do, provided a suitable library is available for use.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们只能在三个地方使用LESS Hat。尽管这个数量有限，但我们不应该忘记，这更多不是关于我们可以使用外部混入库的实例数量，而是关于不重复造轮子，以及使用外部库意味着我们做更少的工作，前提是有一个合适的库可供使用。
- en: Creating variables for fonts
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为字体创建变量
- en: 'Let''s change our focus and take a look at another concept that we can use
    when converting to use Less: the use of variables to help maintain values, such
    as fonts.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们改变我们的焦点，看看在将代码转换为使用Less时我们可以使用另一个概念：使用变量来帮助维护值，例如字体。
- en: In our code, we have a few instances where we're using fonts. These can be a
    pain to update in normal CSS, so let's create some variables that we can use to
    automatically update our Less code. Creating variables means that only one value
    needs to be updated at the start of our code. Less will handle the update of any
    other instance of these variables automatically.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中，有几个地方使用了字体。在正常的CSS中更新这些可能会很麻烦，所以让我们创建一些变量，我们可以使用这些变量来自动更新我们的Less代码。创建变量意味着我们只需要在代码的开始处更新一个值。Less将自动处理这些变量其他实例的更新。
- en: 'In a copy of `conversion.less`, add the following line immediately below the
    `@import` statement:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在`conversion.less`的一个副本中，在`@import`语句下面立即添加以下行：
- en: '[PRE10]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The observant among you will see that we''ve added a variable—the only difference
    from the ones we looked at earlier in the book is that this is an encapsulated
    variable. We''re using the tilde symbol to tell Less to reproduce this exactly
    as shown when compiling our code. This means that instead of using a long sentence,
    we can now simply use `@KiteOne` as a value:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细观察的你们会注意到，我们增加了一个变量——与本书前面提到的变量相比，唯一的区别是这个变量是封装的。我们使用波浪号符号来告诉Less在编译我们的代码时，要精确地按照显示的样式来复制这个变量。这意味着我们不再需要使用长句，现在我们可以简单地使用`@KiteOne`作为值：
- en: '[PRE11]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this instance, we only need to change one rule. In a larger style sheet,
    the benefits of this will become more apparent, as it removes the need to alter
    each instance manually when updating styles.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们只需要更改一条规则。在一个更大的样式表中，这种做法的好处将更加明显，因为它消除了在更新样式时手动更改每个实例的需求。
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will cover more on how to use Less to manipulate fonts in [Chapter 7](part0066_split_000.html#page
    "Chapter 7. Manipulating Fonts with Less"), *Manipulating Fonts with Less*.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第7章](part0066_split_000.html#page "第7章. 使用Less操作字体")中详细介绍如何使用Less来操作字体，*使用Less操作字体*。
- en: Creating variables for colors
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为颜色创建变量
- en: 'We''ve also used several colors in our code—one should be recognizable as white
    (`#fff`), but the other is less recognizable as light gray. Let''s fix this using
    the same process to create two new variables for these colors and one variable
    for black:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在代码中使用了几个颜色——其中一个应该是白色(`#fff`)，但另一个则不太容易识别为浅灰色。让我们使用相同的过程为这些颜色创建两个新变量，并为黑色创建一个变量：
- en: '[PRE12]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can now alter our Less code to use these variables, as shown—this will make
    the code more readable:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以像下面这样修改我们的Less代码以使用这些变量，这将使代码更易于阅读：
- en: '[PRE13]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will make the code easier to read, but it also means that if we ever need
    to change the values, we only need to do it once at the start—Less will take care
    of updating all other instances automatically.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使代码更容易阅读，但也意味着如果我们需要更改值，我们只需要在开始时更改一次——Less将自动处理所有其他实例的更新。
- en: Switching to using nesting
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换为使用嵌套
- en: Our next change is a little more dramatic; it concerns the four instances of
    the `#leftmargin` style rules in our code. Instead of having to write each rule
    manually, we can group them together by using Less' nesting functionality; this
    makes them easier to read, as they follow a more logical structure.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的更改更为显著；它涉及到代码中`#leftmargin`样式规则的四个实例。我们不需要手动编写每个规则，可以通过使用Less的嵌套功能将它们组合在一起；这使得它们更容易阅读，因为它们遵循更合理的结构。
- en: 'In a copy of `conversion.less`, remove the four `#leftmargin` lines and replace
    them with this:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在`conversion.less`的副本中，删除四个`#leftmargin`行，并用以下内容替换：
- en: '[PRE14]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will make our code easier to read and will avoid the need to have to repeat
    the element name when writing the rules. Notice also how we've used the ampersand
    symbol for `:hover`—the ampersand symbol tells Less that `:hover` should be treated
    as a pseudo selector, which will be compiled as `#leftmargin a:hover` by Less.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们的代码更容易阅读，并避免在编写规则时重复元素名称的需要。注意我们如何使用&符号为`:hover`——&符号告诉Less将`:hover`视为伪选择器，Less将编译为`#leftmargin
    a:hover`。
- en: Tip
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The use of ampersands (as shown in our example) isn't limited to pseudo selectors;
    it can be used to represent a parent selector or class used in the code—see [http://lesscss.org/features/#parent-selectors-feature](http://lesscss.org/features/#parent-selectors-feature)
    for more details.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如示例所示，使用&符号（ampersands）不仅限于伪选择器；它可以用来表示代码中使用的父选择器或类——有关更多详细信息，请参阅[http://lesscss.org/features/#parent-selectors-feature](http://lesscss.org/features/#parent-selectors-feature)。
- en: Incorporating our own mixins
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入我们自己的混合
- en: 'Our final change is related to column sizes—if you read the code carefully,
    you will notice that in at least two places, we have almost identical code: `#leftmargin`
    and `#content`. We can move four style attributes into a separate parametric mixin,
    as shown—add this immediately below the variables we created earlier in this chapter:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后的更改与列大小有关——如果你仔细阅读代码，你将注意到至少有两个地方我们有几乎相同的代码：`#leftmargin`和`#content`。我们可以将四个样式属性移动到一个单独的参数化混合中，如所示——将此内容添加到本章前面创建的变量下面：
- en: '[PRE15]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once done, we can alter our style rules accordingly:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们可以相应地更改我们的样式规则：
- en: '[PRE16]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: It's a simple example of how, with a little care, we can create our own mixin
    to remove some of the duplication in the code. While it may not reduce the number
    of lines in our code, it will help make the code more readable and easier to alter
    if we need to change the values passed through the mixin.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的例子，说明我们可以通过一点细心，创建自己的混合来减少代码中的重复。虽然它可能不会减少我们代码中的行数，但它将帮助使代码更易于阅读，并在需要更改通过混合传递的值时更容易修改。
- en: At this point, we've worked through our original code to convert it to use Less.
    If all is well, we should end up with something that will compile in valid CSS;
    if you take a look at the code download that accompanies this book, you can see
    a copy of `conversion.less` and compare it with your own version.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经将原始代码转换为使用Less。如果一切顺利，我们应该得到可以编译成有效CSS的代码；如果你查看本书附带的代码下载，可以看到`conversion.less`的副本，并比较你的版本。
- en: 'We can test the success of the conversion process by altering a copy of the
    HTML code we produced in [Chapter 4](part0041_split_000.html#page "Chapter 4. Working
    with Variables, Mixins, and Functions"), *Working with Variables, Mixins, and
    Functions*. Open a copy of `functions2.html` and then look for the lines highlighted
    below:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过更改[第4章](part0041_split_000.html#page "第4章。使用变量、混合和函数")中产生的HTML代码副本来测试转换过程的成功，*使用变量、混合和函数*。打开`functions2.html`的副本，然后寻找以下突出显示的行：
- en: '[PRE17]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Change these as shown; then, save the file as `conversion.html`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 按照所示进行更改；然后，将文件保存为`conversion.html`：
- en: '[PRE18]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you preview the results in a browser, don't expect to see any real changes
    to the overall page, with the exception of the small amount of extra padding that
    was added, which has pushed the left-hand navigation down by a small measure.
    Hopefully, this goes to show that with some care and thought, we can produce the
    same results while better managing our code!
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个浏览器中预览结果，不要期望看到任何对整体页面的真正变化，除了添加的一小部分额外填充，这使左侧导航略微下移。希望这能表明，通过一些细心和思考，我们可以产生相同的结果，同时更好地管理我们的代码！
- en: Importing images into style sheets – a bonus
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将图像导入样式表——一个额外的好处
- en: Before we complete our changes, I thought I would throw in a little bonus; if
    we look back at the list of changes that we could make, we noted one small change
    that could be made, which is related to the social media image that is used in
    the footer of our page.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成更改之前，我想加入一个小奖励；如果我们回顾一下我们可以做出的更改列表，我们注意到一个可以做出的微小更改，这与我们页面页脚中使用的社交媒体图像有关。
- en: 'The CSS for this is controlled by the following line in our Less file:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 CSS 由我们 Less 文件中的以下行控制：
- en: '[PRE19]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will pull in the image as a separate file, which means an additional request
    to the server. On a small site, this won't be an issue, but on a larger site,
    this could make the site bandwidth hungry, which will be an issue.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这将作为单独的文件引入图像，这意味着对服务器的额外请求。在一个小型网站上，这不会成为问题，但在一个大型网站上，这可能会使网站带宽需求增加，这将成为一个问题。
- en: Instead, we can use one of Less' functions, `data-uri`, which we covered in
    [Chapter 4](part0041_split_000.html#page "Chapter 4. Working with Variables, Mixins,
    and Functions"), *Working with Variables, Mixins, and Functions*, when we created
    the original version of our page. This is ideal for small images, particularly
    those that are repeated throughout the site; this will convert them to a base64
    statement that can be included in our CSS, thereby removing the need to shell
    out to the server to request the image.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们可以使用 Less 的一个函数，`data-uri`，这在[第 4 章](part0041_split_000.html#page "第 4
    章。使用变量、混合和函数")中有所介绍，即 *使用变量、混合和函数*，当我们创建我们页面的原始版本时。这对于小图像来说非常理想，尤其是那些在整个网站上重复出现的图像；这将它们转换为可以包含在我们的
    CSS 中的 base64 语句，从而消除了需要从服务器请求图像的需要。
- en: 'In `conversion.less`, look for this line:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `conversion.less` 中，查找以下这一行：
- en: '[PRE20]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If we wanted to use `data-uri`, we would change the `background-image` property
    as shown:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想使用 `data-uri`，我们将像下面这样更改 `background-image` 属性：
- en: '[PRE21]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The net effect of this means that while we may have a few hundred lines in our
    CSS, we've cut down the need to request for the image from the server. This process
    should be used with care though—it should only be used for small images, which
    may be repeated throughout the site. It's a useful little trick for saving requests
    to the server, provided it is used with care!
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着虽然我们可能在 CSS 中有几百行代码，但我们已经减少了从服务器请求图像的需求。虽然这个过程应该谨慎使用——它只应该用于小图像，这些图像可能在整个网站上重复出现。这是一个有用的技巧，可以节省对服务器的请求，只要谨慎使用！
- en: Viewing the finished article
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看完成的文章
- en: 'Now that we''ve made the changes to our converted CSS file, let''s take a look
    at the end result. To compare, open a copy of `conversion.less` from the code
    download that accompanies the book and see how you got on with making the changes:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经更改了转换后的 CSS 文件，让我们看看最终结果。为了比较，打开书中附带的代码下载中的 `conversion.less` 的副本，看看你在做出更改方面做得如何：
- en: '![Viewing the finished article](img/00064.jpeg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![查看完成的文章](img/00064.jpeg)'
- en: Hopefully, you can see some of the changes we've made—Note that we've not necessarily
    saved on the number of lines we've written, but we've made it easier to update
    the code in the future, if changes need to be made. Granted that in a small Less
    file such as this one, we may not see the full benefits of using Less; in a larger
    file, the benefits will become apparent when converting from CSS to use Less.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你能看到我们所做的部分更改——请注意，我们并不一定减少了所写的行数，但我们已经使代码在未来需要更改时更容易更新。诚然，在这个小型 Less 文件中，我们可能看不到使用
    Less 的全部好处；但在一个较大的文件中，当从 CSS 转换为使用 Less 时，好处将变得明显。
- en: Summary
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: One of the hardest concepts to understand in Less is how we can convert an existing
    site to use Less. While there are some easy (or perhaps more complex, depending
    on your take) questions that we can answer, converting a site can require a certain
    degree of skill, to ensure that we take full advantage of Less during the conversion
    process.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Less 中，最难理解的概念之一是如何将现有网站转换为使用 Less。虽然有一些简单（或者可能更复杂，取决于你的看法）的问题我们可以回答，但转换一个网站可能需要一定程度的技能，以确保我们在转换过程中充分利用
    Less。
- en: Throughout this chapter, we saw some of the questions and tricks that we can
    use to start the conversion process. We began by taking a look at how to prepare
    for the initial jump into the conversion process, which was followed by the initial
    steps anyone should take before considering how to convert their CSS code. We
    saw how easy it is to split code into separate partials, which can be imported
    into one master file that Less will compile to valid CSS.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了一些问题和技巧，我们可以使用它们来开始转换过程。我们首先查看如何为转换过程的初步跳跃做准备，然后是任何人在考虑如何转换他们的CSS代码之前应该采取的初步步骤。我们看到了如何轻松地将代码拆分为单独的部分，这些部分可以导入到一个Less将编译为有效CSS的主文件中。
- en: Our initial steps into converting Less code began with a look at spotting the
    low-hanging fruits, or quick and easy changes that we can make. We saw how, with
    the use of sites such as [http://css2less.cc](http://css2less.cc), we can easily
    start converting code; it was noted that these sites are not perfect but can serve
    as a good basis for converting code. Next came a look at how to identify patterns
    in our CSS code—we examined some of the questions that should be asked as part
    of the process. It was noted that every site will be different; hence, different
    questions will need to be asked. Nonetheless, there are some basic questions that
    will apply to any site.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将Less代码转换为CSS代码的初步步骤，始于寻找低垂的果实，即快速且容易的改变。我们看到了如何使用诸如[http://css2less.cc](http://css2less.cc)之类的网站，我们可以轻松地开始转换代码；指出这些网站并不完美，但可以作为转换代码的良好基础。接下来，我们探讨了如何识别我们的CSS代码中的模式——我们检查了在过程中应该提出的一些问题。指出每个网站都会有所不同；因此，需要提出不同的问题。尽管如此，仍有一些基本问题适用于任何网站。
- en: We then saw how to use prebuilt mixin libraries as part of the conversion process
    and covered some examples that can be used in our projects—this is a good way
    to incorporate mixins created by others, which will help reduce the effort required
    for creating our style sheet. We then covered how it might be necessary to create
    our own mixin library, if an existing one available online does not meets our
    needs.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先了解了如何在转换过程中使用预构建的mixin库，并介绍了一些可以在我们的项目中使用的示例——这是一种将他人创建的mixin引入的好方法，这将有助于减少创建我们样式表所需的工作量。然后，我们讨论了在现有的在线mixin库不能满足我们的需求时，可能需要创建我们自己的mixin库。
- en: We finished the chapter with a detailed look at a practical example of how to
    convert an existing website to use Less—we used the single web page that was created
    in [Chapter 4](part0041_split_000.html#page "Chapter 4. Working with Variables,
    Mixins, and Functions"), *Working with Variables, Mixins, and Functions*, as a
    way to prove that it doesn't matter how large the site is, most sites will benefit
    from the conversion to use Less. We examined how easy it was to apply some simple
    conversions, using the basic principle of examining the code carefully, in a block
    at a time, and using the techniques outlined earlier in the chapter. One of the
    conversions we included was a simple change to the fonts used—we'll explore this
    further in the next chapter.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以一个详细的实际例子结束了这一章，展示了如何将现有的网站转换为使用Less——我们使用了在[第4章](part0041_split_000.html#page
    "第4章. 使用变量、混入和函数")中创建的单个网页，*使用变量、混入和函数*，作为证明无论网站有多大，大多数网站都将从转换为使用Less中受益的例子。我们探讨了如何通过仔细检查代码的基本原则，一次检查一个代码块，并使用本章前面概述的技术，轻松地应用一些简单的转换。其中之一是我们对所使用的字体进行的一个简单更改——我们将在下一章进一步探讨这一点。
