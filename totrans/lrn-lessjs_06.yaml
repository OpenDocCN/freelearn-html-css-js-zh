- en: Chapter 6. Migrating Your Site to Less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, by now, you've hopefully spent some time using Less and are thinking that
    this could be really useful for your projects going forward, right?
  prefs: []
  type: TYPE_NORMAL
- en: The trouble is you'll also probably be thinking of existing projects that could
    easily benefit by using Less, but you're not sure how to go about converting them
    to use Less. No problem; in this chapter, I will take you through some of the
    tips and tricks of how to make this transition to use Less, without risking everything.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by taking a look at the kind of questions we need to ask ourselves
    and then move on to creating the basic framework that we'll use when beginning
    the conversion, going through a detailed example of converting a mini website
    to use Less.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key to conversion is to remember that Less is, after all, just a superset
    of CSS—most of the work is about identifying those parts that can be changed easily
    and those that might require more work. In this chapter, we''ll cover the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Low-hanging fruit—obvious candidates for Less conversion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying patterns in your CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a library of mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using prebuilt libraries as part of the conversion process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mixing Less with plain CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working through a practical example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you ready to start converting your CSS? Good, let's get started...
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for the initial jump
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, you''ve read all about using Less and are keen to start using it in some
    of your older projects. You''ve started working with it on your newer sites and
    love how it makes writing CSS so much more manageable...but, you''re probably
    thinking: how can I incorporate it into an older site?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, you''re in the right place—making the change in older sites doesn''t
    need to be difficult, as long as you keep these tips in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have installed Firebug with Less support, as outlined in [Chapter
    2](part0025_split_000.html#page "Chapter 2. Building a Less Development Toolkit"),
    *Building a Less Development Toolkit*. Trust me on this; it will make debugging
    your efforts so much easier!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run your existing CSS through a site, such as W3C CSS Validator ([http://jigsaw.w3.org/css-validator/validator](http://jigsaw.w3.org/css-validator/validator)).
    If you haven't already done so, this will help spot any errors and ensure that
    your code validates properly, before beginning to convert it to Less.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to get into the mentality that converting Less should be done in blocks
    at a time and should be an iterative process—this reduces the risk of missing
    opportunities or making mistakes in your code; this is particularly important
    when converting large files, such as a WordPress style sheet!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't forget that Less is a superset of CSS—provided we work through the conversion
    process in a logical manner. Less will still compile plain CSS code that has yet
    to be converted to its Less equivalent. This means that we can mix code during
    the conversion process until all of the styles have been suitably converted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get into the habit of using sites such as [http://less2css.org](http://less2css.org)
    or [http://lesstester.com](http://lesstester.com). These are great for experimenting
    with the Less code in order to see how it will compile into valid CSS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's put some of these tips into practice and take a look at the initial steps
    that should form the basis for any initial conversion process.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the initial framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've made the decision to convert in order to use Less, there are a few
    steps that we can take, which help with the initial conversion process, before
    we start writing Less code.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at how we can make this process easier. For the purpose of
    this example, I'll assume that you have just one style sheet, called `styles.css`,
    and that you're working in a development environment on a simple HTML-based site
    in order to get accustomed to the conversion process.
  prefs: []
  type: TYPE_NORMAL
- en: Start by renaming the `sitestyles.css` file with a `.less` extension to `sitestyles.less`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a new file in your text editor, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Save this as `styles.less`. In your HTML code, change the existing link to
    `sitestyles.css` in order to point to `sitestyles.less`, using the following link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use Crunch! or Sublime Text (depending on what you have set up in [Chapter 3](part0031_split_000.html#page
    "Chapter 3. Getting Started with Less"), *Getting Started with Less*) to compile
    the new `styles.less` file in order to confirm whether it is producing a valid
    `styles.css` file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We've referenced the Less file directly in our code—this is for development
    purposes only and not recommended for production use.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you might think that having a single statement in the `styles.less`
    file might sound like an overkill; there is a reason for this: the key to working
    with Less is to build up the initial framework of the Less file so that we can
    prove that it compiles to valid CSS first. Once this has been proven, it is simply
    a matter of adding more `@import` statements for each partial file you want to
    include. Less will combine all of these into one file when we next recompile `styles.less`,
    as we will see in the next section.'
  prefs: []
  type: TYPE_NORMAL
- en: Mixing Less with plain CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we mix Less with CSS to create a framework for importing individual partials,
    we will get an additional benefit: we are not obliged to convert all of the Less
    files in one go! Instead, we can simply break the existing CSS files into smaller
    **partials** and then import them into the master CSS file (here, `styles.less`)—this
    makes it easier to manage the conversion process.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Partials are separate files that contain Less code—they are a means to help
    make managing Less code easier, as multiple files can be imported in one style
    sheet as part of the compilation process.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then simply add an `@import` statement for each Less file we need to import,
    such as the examples shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Remember that no matter how big the Less file is or how many partials are being
    imported, Less will only ever import a style in the final compiled CSS file if
    it is being referenced in the code. While we are still developing the Less file,
    we can easily compile this dynamically in the browser; once the final version
    is ready, this can be precompiled, and the resulting CSS file can be imported
    in our production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Spotting low-hanging fruit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our basic framework in place, it's time to go fruit picking—no,
    I'm not referring to fruit picking in the literal sense, but finding CSS statements
    that can be easily converted with little effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each project will vary in size and scope, but there will be some easy conversions
    that we can make, which will apply to any project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'An easy change that can be made is to incorporate variables for colors—once
    converted, we can use operators to calculate new values, such as lightening a
    specific color by 25 percent. As a start, we can create some variables, such as
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can then use variables in our styles, instead of the hex codes; they will
    appear as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Ideally, the names used here should reflect the context that they are used for,
    such as `body-textcolor` or `heading-textcolor`; we've used names here to illustrate
    how they can replace existing colors, and at least make the color names readable!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: During the conversion process, you may want to consider moving converted code
    into a separate Less partial and importing it using the process we covered earlier.
    Although this will allow you to maintain a distinction between Less and CSS styles,
    it does mean that we may miss opportunities if the converted Less code is not
    displayed on the screen while we work on converting the existing CSS styles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we're using CSS3 styles that contain vendor prefixes, we can convert our
    code to import mixins from external prebuilt libraries, such as LESS Hat or LESS
    Elements. This will reduce the code we need to write—after all, why reinvent the
    wheel if someone has already built a suitable mixin that we can use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A more evolved change that we can make is related to the use of nesting—this
    will make our code easier to read, as it is clearer how child styles will affect
    their parent elements. A perfect example of this is a menu system built into the
    header `DIV` of a page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can then convert it manually or using a site, such as [http://css2less.cc](http://css2less.cc);
    while this site isn''t perfect, it will give you a head start in the conversion
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Spotting low-hanging fruit](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Online CSS to Less convertors are not perfect—for example, they may struggle
    to produce good quality code if your CSS file contains a lot of random selectors;
    Less will also regroup CSS statements during compilation, which may break your
    code. These sites should be treated as a start point for development; the assumption
    time is spent in finessing the code manually after the initial conversion.
  prefs: []
  type: TYPE_NORMAL
- en: There will no doubt be other easy changes we can make—it will all depend on
    the size and scope of the site being converted to use Less. Again, the key point
    to remember here is that conversion should be an iterative process and that you
    will do yourself no favors if you try to convert your site in one go!
  prefs: []
  type: TYPE_NORMAL
- en: Let's change our focus slightly and move on to the next stage in the process—once
    you've dealt with the easy conversions, it's time to ask yourself a series of
    questions, all of which fall under the banner of identifying patterns in your
    CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying patterns in your CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Identifying patterns in your CSS is all about asking yourself one question:
    how can I reduce code?'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of ways of doing this; the exact process will depend on
    the nature of the site being converted. There are some general questions that
    you can ask yourself though, to help with the conversion process:'
  prefs: []
  type: TYPE_NORMAL
- en: Does your site use any CSS3 styles? If it does, consider using a prebuilt Less
    library, which we can import in our Less style sheet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does your CSS code contain any statements, such as links to image elements?
    If it does, you might want to consider using string variables and interpolation
    to better manage the links, particularly if they need to be updated in the future.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many variables does your site use? If any of these variables will be used
    to define colors, then consider using some of Less' in-built functions or operators
    to dynamically generate colors, such as making a color lighter by 20 percent or
    adding a value to an existing color to create a new one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How often do you see the same (or very similar) block of code shown throughout
    your code? With a little care, can it be altered to be the same as others? If
    so, this would be a prime candidate for conversion into a mixin. The more instances
    of code we can alter while still maintaining the same effect, the more value we
    will get from using a mixin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While there are likely to be more questions that you might ask, since each site
    is different, not every question will apply. One of the key questions will be
    related to creating mixins and whether we can separate them in our own library
    for future use.
  prefs: []
  type: TYPE_NORMAL
- en: Using prebuilt mixin libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we've created a number of mixins, we could turn these into a library. However,
    this may not always be necessary; instead, we can always look for ways to reuse
    mixins from libraries that are available for download from the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Why should we use them? There are two good reasons for doing so:'
  prefs: []
  type: TYPE_NORMAL
- en: We can avoid the need to reinvent the wheel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We don't need to worry about the support for, or the updating of, the library—this
    will be handled by the author, frequently with the help of the open source community
    at large
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are lots of libraries that are available—they can all be imported using
    the same `@import` statement we''ve already seen in use. We will cover how to
    use such a library in more detail in the practical example at the end of the chapter,
    but in the meantime, here are some examples of libraries that are available for
    use:'
  prefs: []
  type: TYPE_NORMAL
- en: 3L ([http://mateuszkocz.github.io/3l/](http://mateuszkocz.github.io/3l/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animate.css ([https://github.com/daneden/animate.cs](https://github.com/daneden/animate.cs))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ClearLess ([https://github.com/clearleft/clearless](https://github.com/clearleft/clearless))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS Effects ([http://adodson.com/css-effects/](http://adodson.com/css-effects/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cssowl ([http://cssowl.owl-stars.com/](http://cssowl.owl-stars.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LESS Elements ([http://lesselements.com/](http://lesselements.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LESS Hat ([http://lesshat.com/](http://lesshat.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oban ([http://oban.io/](http://oban.io/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preboot ([http://getpreboot.com/](http://getpreboot.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There will be plenty more available online; you can search over the Internet
    to see what is available, as you may find others that are more suited to your
    needs. We will be using the LESS Hat library in a practical demo later in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Building a library of mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As part of identifying patterns in our CSS, where we can identify code that
    can be turned into mixins, we might find that using a prebuilt library, such as
    LESS Elements or LESS Hat, doesn't always meet our requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is not necessarily an issue; it may be that the author of the library
    hasn''t created the mixin the way we want it, as he was trying to satisfy another
    requirement. If existing mixins aren''t available, we can always consider creating
    our own library of mixins as partials that can be included in future projects.
    We could even consider hosting mixins on GitHub ([http://www.github.com](http://www.github.com)),
    as has been done by others:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a library of mixins](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several popular code-sharing platforms available, which you can try—two
    good examples are Google Code ([https://code.google.com/](https://code.google.com/))
    and Bitbucket ([https://bitbucket.org/](https://bitbucket.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: The trick in creating mixins for libraries here is to stay several steps ahead
    of yourself and work out how you can convert similar blocks of code so that they
    can be replaced with one or more mixins.
  prefs: []
  type: TYPE_NORMAL
- en: If you find that the code can be converted into mixins, it is worth giving a
    thought to how these mixins should be written. A key precept of Less is the DRY
    principle (Don't Repeat Yourself)—you may find yourself writing a number of mixins
    that can be reused. The usefulness of these mixins will increase if careful consideration
    is given to any tweaks that can be made, so that other blocks of CSS code can
    be replaced by Less calls to the mixins you create.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your library has been created, you can host it on GitHub—there are several
    good reasons for doing so:'
  prefs: []
  type: TYPE_NORMAL
- en: There is a ready-made community at large, who can help with issues or support
    the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a good way to say thank you to others, as you may have used their work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anyone who uses your mixin library can help suggest improvements to your mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own library and making it available online will give you an enormous
    sense of satisfaction, from having been able to contribute back to the open source
    movement—after all, we've only reached where we are today, thanks to the efforts
    of those who have spent hours creating libraries such as Less!
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's turn our focus to using one of these prebuilt libraries that we've
    just covered—we're going to take a look at using LESS Hat as part of our practical
    example.
  prefs: []
  type: TYPE_NORMAL
- en: Working through a practical example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've looked at a range of tips and tricks that you can use to convert
    a site in order to use Less—while there are some useful tips, I think you will
    agree that it is far better to see the conversion process in action! With this
    in mind, let's take a look at a simple example, in the form of the CSS styling
    we created in [Chapter 4](part0041_split_000.html#page "Chapter 4. Working with
    Variables, Mixins, and Functions"), *Working with Variables, Mixins, and Functions*,
    for the one-page website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start making changes, let''s take a look at the compiled CSS that
    was created for the page, along with a screenshot of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working through a practical example](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Introducing the CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we''ve seen a screenshot of the page that we''re going to retrofit
    to use Less, let''s take a look at the CSS code we need to convert. The compiled
    CSS that was generated using Crunch! is as follows—a copy of this is in the code
    download that accompanies this book, as `conversion.css`. We''ll also include
    a slightly modified version of the styles from `social.css`, within `conversion.css`.
    This will still produce the same results, but the reason for modifying it here
    will become apparent in the next section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'At first glance, this should look like an ordinary style sheet, which hopefully
    uses some fairly common style attributes that could be used in any website project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing the CSS](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You're probably thinking that with such a simple example, there's little we
    can do here, right?
  prefs: []
  type: TYPE_NORMAL
- en: Identifying the changes to be made
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wrong! Making the conversion to use Less should not always be about the size
    of your style sheet but about getting into the mindset that using Less will make
    it easier to manage your code, no matter what its size. Converting to use Less
    should be an iterative process that stops only when all of the original CSS has
    been converted and when Less is being used in your site.
  prefs: []
  type: TYPE_NORMAL
- en: To prove this, let's take a look at the code and highlight some of the areas
    that can be converted. The style sheet is a simple example, but it is enough to
    illustrate the processes that you can use to convert a CSS file to its Less equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: Did you notice the three style rules that use `#leftmargin`? Here is the perfect
    opportunity to use nesting—we can avoid having to duplicate the rule name, and
    we can group the styles in a more logical manner.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We used the box-sizing attribute used for `#content` but didn't include all
    the vendor prefixes for it. It's a good excuse to look at one of the many mixin
    libraries available online and see if one of them contains a suitable mixin that
    we can use. This avoids the need to reinvent the wheel—we can simply link to the
    mixin and pass values to it, if appropriate. Importing a prebuilt mixin will also
    handle any vendor prefixes that are required for operation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead of using hex values for colors, which aren't easy to translate into
    something meaningful, we can create variables and assign values to them. The names
    can be set to describe the color value being set. If they need to be updated,
    then it only requires one update, as Less will handle changing all the other instances
    automatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In `div` and `#title`, we've included a `font-family` attribute—while this will
    work perfectly well in normal CSS, we can use the same variable process and create
    meaningful names for each `font-family` attribute. This makes them much easier
    to update, should they need to be changed in the future.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `#leftmargin` and `#content`, you may or may not have noticed an opportunity
    here—we''re repeating the same code (albeit, with slightly different values) to
    create our column. Instead, we could use a mixin to control these styles. However,
    there is a catch: notice that `#content` has additional `padding: 10px` in the
    style rule? In this instance, it''s not an issue—we can add this in `#leftmargin`
    with no noticeable adverse effect. Remember, it''s all about making the initial
    change and then taking a look to see what we can alter, which will then allow
    us to add more to the mixin and make it more useful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A more advanced change that we can make is to switch to using `data-uri` for
    importing the social networking image in our CSS in order to save on server requests
    and bandwidth usage. We used it in the original example in [Chapter 4](part0041_split_000.html#page
    "Chapter 4. Working with Variables, Mixins, and Functions"), *Working with Variables,
    Mixins, and Functions*—it will work perfectly well for small images (such as ours)
    but is less useful for larger ones, or those that are not reused in the site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no hard and fast rule regarding what can be defined as a "small" image—the
    image I've used in this example weighs in at 9 KB. This will depend a little on
    any `data-uri` limit within a browser; for example, IE8 is limited to 32 KB. It
    is all about choosing carefully—small images such as credit card logos would be
    perfect, but a large picture clearly isn't!
  prefs: []
  type: TYPE_NORMAL
- en: These are just a few of the concepts that we can use to convert this style sheet
    to use Less. The key to the conversion process is not about size, but about re-engineering
    the code to make it easier to maintain and removing duplication if others have
    already created code that you can import in your own projects. Once you've started
    converting code, you will see other opportunities for conversion—it is very much
    a case of practice makes perfect!
  prefs: []
  type: TYPE_NORMAL
- en: Making the changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we''ve seen the changes we can make, let''s begin to implement some
    of these changes, beginning with the creation of our Less framework files. Start
    by renaming the `conversion.css` file to `conversion.less`. Next, add the following
    line to a new file in your text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `styles.less`—this sets up our framework, ready for us to convert
    our code. If you've used Sublime Text or Crunch!, then you will find that a `styles.css`
    file has been created—this contains a compiled copy of the code from `conversion.less`.
    Setting up the framework in this manner means that we can add more `@import` statements
    in the future; the contents of these imported files will automatically be included
    in the final article, when the `styles.less` file is recompiled.
  prefs: []
  type: TYPE_NORMAL
- en: Using the CSS3 mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, let's take a look at the CSS3 styles we've used—we can convert to use
    a prebuilt mixin library. For the purpose of this exercise, we're going to use
    the LESS Hat library, available at [http://lesshat.madebysource.com/](http://lesshat.madebysource.com/).
    Click on the **Download LESS Hat** button—at the time of writing this book, the
    latest Version is 2.0.15.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to extract the `lesshat.less` file, which is in the `build` subfolder—copy
    this to the `css` subfolder in your project folder. Switch back to the `conversion.less`
    file in your text editor and then add this line at the start:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will now import any of the mixins that we need to use from the LESS Hat
    library.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can't include the `@import` statement for LESS Hat in the `styles.less` file—this
    will cause a compilation error in `conversion.less`, as it can't find the source
    mixins it needs to use when compiling the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we''ve added the LESS Hat library, we can start adapting our code
    to use the mixins from this library; there are several places where we alter the
    code to use mixins, as highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this example, there are only three places where we can use LESS Hat. Even
    though this is only a limited number, we should not forget that it is not so much
    about the number of instances where we can use external mixin libraries, but more
    about not reinventing the wheel and that the use of an external library means
    less work for us to do, provided a suitable library is available for use.
  prefs: []
  type: TYPE_NORMAL
- en: Creating variables for fonts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s change our focus and take a look at another concept that we can use
    when converting to use Less: the use of variables to help maintain values, such
    as fonts.'
  prefs: []
  type: TYPE_NORMAL
- en: In our code, we have a few instances where we're using fonts. These can be a
    pain to update in normal CSS, so let's create some variables that we can use to
    automatically update our Less code. Creating variables means that only one value
    needs to be updated at the start of our code. Less will handle the update of any
    other instance of these variables automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a copy of `conversion.less`, add the following line immediately below the
    `@import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The observant among you will see that we''ve added a variable—the only difference
    from the ones we looked at earlier in the book is that this is an encapsulated
    variable. We''re using the tilde symbol to tell Less to reproduce this exactly
    as shown when compiling our code. This means that instead of using a long sentence,
    we can now simply use `@KiteOne` as a value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this instance, we only need to change one rule. In a larger style sheet,
    the benefits of this will become more apparent, as it removes the need to alter
    each instance manually when updating styles.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will cover more on how to use Less to manipulate fonts in [Chapter 7](part0066_split_000.html#page
    "Chapter 7. Manipulating Fonts with Less"), *Manipulating Fonts with Less*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating variables for colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ve also used several colors in our code—one should be recognizable as white
    (`#fff`), but the other is less recognizable as light gray. Let''s fix this using
    the same process to create two new variables for these colors and one variable
    for black:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now alter our Less code to use these variables, as shown—this will make
    the code more readable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will make the code easier to read, but it also means that if we ever need
    to change the values, we only need to do it once at the start—Less will take care
    of updating all other instances automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Switching to using nesting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our next change is a little more dramatic; it concerns the four instances of
    the `#leftmargin` style rules in our code. Instead of having to write each rule
    manually, we can group them together by using Less' nesting functionality; this
    makes them easier to read, as they follow a more logical structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a copy of `conversion.less`, remove the four `#leftmargin` lines and replace
    them with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This will make our code easier to read and will avoid the need to have to repeat
    the element name when writing the rules. Notice also how we've used the ampersand
    symbol for `:hover`—the ampersand symbol tells Less that `:hover` should be treated
    as a pseudo selector, which will be compiled as `#leftmargin a:hover` by Less.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The use of ampersands (as shown in our example) isn't limited to pseudo selectors;
    it can be used to represent a parent selector or class used in the code—see [http://lesscss.org/features/#parent-selectors-feature](http://lesscss.org/features/#parent-selectors-feature)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating our own mixins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our final change is related to column sizes—if you read the code carefully,
    you will notice that in at least two places, we have almost identical code: `#leftmargin`
    and `#content`. We can move four style attributes into a separate parametric mixin,
    as shown—add this immediately below the variables we created earlier in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Once done, we can alter our style rules accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: It's a simple example of how, with a little care, we can create our own mixin
    to remove some of the duplication in the code. While it may not reduce the number
    of lines in our code, it will help make the code more readable and easier to alter
    if we need to change the values passed through the mixin.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we've worked through our original code to convert it to use Less.
    If all is well, we should end up with something that will compile in valid CSS;
    if you take a look at the code download that accompanies this book, you can see
    a copy of `conversion.less` and compare it with your own version.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can test the success of the conversion process by altering a copy of the
    HTML code we produced in [Chapter 4](part0041_split_000.html#page "Chapter 4. Working
    with Variables, Mixins, and Functions"), *Working with Variables, Mixins, and
    Functions*. Open a copy of `functions2.html` and then look for the lines highlighted
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Change these as shown; then, save the file as `conversion.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If you preview the results in a browser, don't expect to see any real changes
    to the overall page, with the exception of the small amount of extra padding that
    was added, which has pushed the left-hand navigation down by a small measure.
    Hopefully, this goes to show that with some care and thought, we can produce the
    same results while better managing our code!
  prefs: []
  type: TYPE_NORMAL
- en: Importing images into style sheets – a bonus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we complete our changes, I thought I would throw in a little bonus; if
    we look back at the list of changes that we could make, we noted one small change
    that could be made, which is related to the social media image that is used in
    the footer of our page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CSS for this is controlled by the following line in our Less file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This will pull in the image as a separate file, which means an additional request
    to the server. On a small site, this won't be an issue, but on a larger site,
    this could make the site bandwidth hungry, which will be an issue.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we can use one of Less' functions, `data-uri`, which we covered in
    [Chapter 4](part0041_split_000.html#page "Chapter 4. Working with Variables, Mixins,
    and Functions"), *Working with Variables, Mixins, and Functions*, when we created
    the original version of our page. This is ideal for small images, particularly
    those that are repeated throughout the site; this will convert them to a base64
    statement that can be included in our CSS, thereby removing the need to shell
    out to the server to request the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `conversion.less`, look for this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If we wanted to use `data-uri`, we would change the `background-image` property
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The net effect of this means that while we may have a few hundred lines in our
    CSS, we've cut down the need to request for the image from the server. This process
    should be used with care though—it should only be used for small images, which
    may be repeated throughout the site. It's a useful little trick for saving requests
    to the server, provided it is used with care!
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the finished article
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve made the changes to our converted CSS file, let''s take a look
    at the end result. To compare, open a copy of `conversion.less` from the code
    download that accompanies the book and see how you got on with making the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Viewing the finished article](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Hopefully, you can see some of the changes we've made—Note that we've not necessarily
    saved on the number of lines we've written, but we've made it easier to update
    the code in the future, if changes need to be made. Granted that in a small Less
    file such as this one, we may not see the full benefits of using Less; in a larger
    file, the benefits will become apparent when converting from CSS to use Less.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the hardest concepts to understand in Less is how we can convert an existing
    site to use Less. While there are some easy (or perhaps more complex, depending
    on your take) questions that we can answer, converting a site can require a certain
    degree of skill, to ensure that we take full advantage of Less during the conversion
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, we saw some of the questions and tricks that we can
    use to start the conversion process. We began by taking a look at how to prepare
    for the initial jump into the conversion process, which was followed by the initial
    steps anyone should take before considering how to convert their CSS code. We
    saw how easy it is to split code into separate partials, which can be imported
    into one master file that Less will compile to valid CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Our initial steps into converting Less code began with a look at spotting the
    low-hanging fruits, or quick and easy changes that we can make. We saw how, with
    the use of sites such as [http://css2less.cc](http://css2less.cc), we can easily
    start converting code; it was noted that these sites are not perfect but can serve
    as a good basis for converting code. Next came a look at how to identify patterns
    in our CSS code—we examined some of the questions that should be asked as part
    of the process. It was noted that every site will be different; hence, different
    questions will need to be asked. Nonetheless, there are some basic questions that
    will apply to any site.
  prefs: []
  type: TYPE_NORMAL
- en: We then saw how to use prebuilt mixin libraries as part of the conversion process
    and covered some examples that can be used in our projects—this is a good way
    to incorporate mixins created by others, which will help reduce the effort required
    for creating our style sheet. We then covered how it might be necessary to create
    our own mixin library, if an existing one available online does not meets our
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: We finished the chapter with a detailed look at a practical example of how to
    convert an existing website to use Less—we used the single web page that was created
    in [Chapter 4](part0041_split_000.html#page "Chapter 4. Working with Variables,
    Mixins, and Functions"), *Working with Variables, Mixins, and Functions*, as a
    way to prove that it doesn't matter how large the site is, most sites will benefit
    from the conversion to use Less. We examined how easy it was to apply some simple
    conversions, using the basic principle of examining the code carefully, in a block
    at a time, and using the techniques outlined earlier in the chapter. One of the
    conversions we included was a simple change to the fonts used—we'll explore this
    further in the next chapter.
  prefs: []
  type: TYPE_NORMAL
