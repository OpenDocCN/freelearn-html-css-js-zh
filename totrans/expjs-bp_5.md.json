["```js\n'''javascript\nmodule.exports = function (dependency1){\n  // these will be public\n  var methods = {}\n\n  // individual for each instance\n  var state = 0\n\n  // some core functionality of this file\n  methods.addToState = function(x) {\n    state += x\n  };\n\n  methods.getResult = function() {\n    return dependency1.getYforX(state)\n  };\n\n  return methods\n}\n'''\n```", "```js\n    '''javascript\n    var dbCleanup = require('./utils/db')\n    var expect = require('chai').expect;\n    var request = require('supertest');\n    var app = require('../src/app');\n\n    describe('Registration', function() {\n      it(\"shoots a valid request\", function(done){\n        var user = {\n          'email': 'supertest'+Math.random()+'@example.com',\n          'name': 'Super'+Math.random(),\n        };\n\n        request(app)\n          .post('/register')\n          .send(user)\n          .expect(200, done);\n      })\n    })\n    ```", "```js\n    '''javascript\n    // src/routes/index.js\n    module.exports = function() {\n      var router = require('express').Router();\n      var register = require('./user)();\n      router.post(\"/user\", user.create);\n      return router;\n    };\n\n    // src/routes/user.js\n    module.exports = function() {\n      var methods = {};\n\n      methods.create = function(req,res,next) {\n        res.send({});\n      }\n\n      return methods;\n    };\n    ```", "```js\n    module.exports = function(env) {\n      var configs = {};\n      configs.dbUrl = \"localhost/coffee_\"+env;\n      return configs;\n    };\n    ```", "```js\n    '''javascript\n    //..\n    var config  = require('../config')(app.get('env'));\n    var models  = require('./models')(config.dbUrl);\n    app.set('models', models);\n    //..\n    ```", "```js\n    '''javascript\n    module.exports = function(dbUrl) {\n      var mongojs = require('mongojs');\n      var db = mongojs(dbUrl);\n      var models = {\n        User: require('./user')(db)\n      };\n      return models;\n    };\n    ```", "```js\n    '''javascript\n    module.exports = function (db) {\n      var methods = {};\n      var User = db.collection('users');\n\n      methods.create = function(name,email,cb) {\n        User.insert({\n          name: name,\n          email: email\n        }, cb)\n      };\n\n      return methods;\n    }\n    ```", "```js\n    '''javascript\n    module.exports = function(Model) {\n      var methods = {};\n\n      methods.create = function(req,res,next) {\n        Model.User.create(req.param('name'), req.param('email'), function(err, user) {\n          if(err) return next(err);\n          res.send(user);\n        });\n      }\n    ```", "```js\n    '''\n    module.exports = function() {\n      var methods = {};\n\n      methods.catchAll = function(err, req, res, next) {\n        console.warn(\"catchAll ERR:\", err);\n        res.status(500).send({\n          error: err.toString ? err.toString() : err\n        });\n      }\n\n      return methods;\n    };\n    '''\n    ```", "```js\n    //..\n      router.use(errorHandler.catchAll);\n\n      return router;\n    };\n    ```", "```js\n    '''javascript\n      var arrangeTime = function() {\n        var time = moment().add(1,'d');\n        time.hour(12);\n        time.minute(0);\n        time.second(0);\n        return time.toDate();\n      };\n\n      methods.pairNaive = function(user, done) {\n        /**\n         * Try to find an unpaired User in Meeting collection,\n         * at the same time, update with an pair id, it either:\n         * 1\\. Add the new created user to  Meeting collection, or\n         * 2\\. The newly created user was added to a Meeting document\n         */\n        Meeting.findAndModify({\n          new: true,\n          query: {\n            user2: { $exists: false },\n          },\n          update: {\n            $set: {\n              user2: user,\n              at: arrangeTime()\n            }\n          }\n        }, function(err, newPair) {\n          if (err) { return done(err) }\n\n          if (newPair){\n            return done(null, newPair);\n          }\n\n          // no user currently waiting for a match\n          Meeting.insert({user1: user}, function(err,meeting) {\n            done();\n          })\n        });\n      };\n    '''\n    ```", "```js\n'''\ndescribe('Naive Meeting Setup', function() {\n  // will go over each collection and remove all documents\n  before(dbCleanup);\n\n  var userRes1, userRes2;\n\n  it(\"register user 1\", function(done){\n    var seed = Math.random()\n    var user = {\n      'name': 'Super'+seed,\n      'email': 'supertest'+seed+'@example.com',\n    }\n\n    request(app)\n      .post('/register')\n      .send(user)\n      .expect(200, function(err,res){\n        userRes1 = res.body\n        done(err)\n      })\n  });\n\n  it('should be no meeting for one user', function(done) {\n    models.Meeting.all(function(err,meetings) {\n      expect(meetings).to.have.length(1);\n      var meeting = meetings[0];\n      expect(meeting.user1).to.be.an(\"object\");\n      expect(meeting.user2).to.be.an(\"undefined\");\n      done(err);\n    });\n  });\n\n  it(\"register user 2\", function(done){\n    var seed = Math.random();\n    var user = {\n      'name': 'Super'+seed,\n      'email': 'supertest'+seed+'@example.com',\n    };\n\n    request(app)\n      .post('/register')\n      .send(user)\n      .expect(200, function(err,res){\n        userRes2 = res.body\n        done(err)\n      });\n  });\n\n  it('should be a meeting setup with the 2 users', function(done) {\n    models.Meeting.all(function(err,meetings) {\n      expect(meetings).to.have.length(1)\n      var meeting = meetings[0]\n      expect(meeting.user1.email).to.equal(userRes1.email)\n      expect(meeting.user2.email).to.equal(userRes2.email)\n      done(err)\n    });\n  });\n});\n'''\n```", "```js\n'''javascript\n//...\n  app.post(\"/register\", register.create);\n  app.post(\"/meeting\", [filter.requireUser], meeting.create);\n//...\n'''\n\nThe filter in 'src/routes/filter.js' is:\n\n'''javascript\nmodule.exports = function(Model) {\n  var methods = {};\n\n  methods.loadUser = function(req,res,next) {\n    var email = req.query.email || req.body.email\n    if(!email) return res.status(400).send({error: \"email missing, it should be either in the body or querystring\"});\n    Model.User.loadByEmail(email, function(err,user) {\n      if(err) return next(err);\n      if(!user) return res.status(400).send({error: \"email not associated with an user\"});\n      res.locals.user = user;\n      next();\n    })\n  }\n\n  return methods;\n};\n```", "```js\n'''javascript\ndescribe('Meeting Setup', function() {\n  before(dbCleanup);\n\n  after(function() {\n    timekeeper.reset();\n  });\n\n  // ...\n\n  it('should try matching an already matched user', function(done) {\n    request(app)\n      .post('/meeting')\n      .send({email:userRes1.email})\n      .expect(412, done);\n  });\n\n  it('should be able match the user again, 2 days later', function() {\n    var nextNextDay = moment().add(2,'d');\n    timekeeper.travel(nextNextDay.toDate());\n    request(app)\n      .post('/meeting')\n      .send({email:userRes1.email})\n      .expect(200, function(err,res){\n        done(err);\n      });\n  });\n```", "```js\n  methods.isUserScheduled = function(user, cb) {\n    Meeting.count({\n      $or:[\n        {'user1.email': user.email},\n        {'user2.email': user.email}\n      ],\n      at: {$gt: new Date()}\n    }, function(err,count) {\n      cb(err, count > 0);\n    });\n  };\n```", "```js\n'''javascript\nmodule.exports = function(Model) {\n  var methods = {};\n\n  methods.create = function(req,res,next) {\n    var user = res.locals.user;\n    Model.Meeting.isUserScheduled(user, function(err,isScheduled) {\n      if(err) return next(err);\n      if(isScheduled) return res.status(412).send({error: \"user is already scheduled\"});\n      Model.Meeting.pair(user, function(err,result) {\n        // we don't really expect this function to fail, if that's the case it should be an internal error\n        if(err) return next(err);\n        res.send({});\n      })\n    })\n  }\n\n  return methods;\n};\n```", "```js\n  /**\n   * the callback returns an array with emails that have previously been\n   * matched with this user\n   */\n  methods.userMatchHistory = function(user,cb) {\n    var email = user.email;\n    Meeting.find({\n      $or:[\n        {'user1.email': email},\n        {'user2.email': email}\n      ],\n      user1: {$exists: true},\n      user2: {$exists: true}\n    }, function(err, meetings) {\n      if(err) return cb(err);\n      var pastMatches = meetings.map(function(m) {\n        if( m.user1.email != email) return m.user1.email;\n        else return m.user2.email;\n      });\n      // avoid matching themselves!\n      pastMatches.push(user.email);\n      cb(null, pastMatches);\n    })\n  }\n```", "```js\n  methods.pair = function(user,done) {\n    // find the people we shouldn't be matched with again\n    methods.userMatchHistory(user, function(err, emailList) {\n      if(err) return done(err);\n\n      Meeting.findAndModify({\n        new: true,\n        query: {\n          user2: { $exists: false },\n          'user1.email': {$nin: emailList}\n        },\n        update: {\n          $set: {\n            user2: user,\n            at: arrangeTime()\n          }\n        }\n      }, function(err, newPair) {\n        if (err) { return done(err); }\n\n        if (newPair){\n          return done(null, newPair);\n        }\n\n        Meeting.insert({user1: user}, function(err,meeting) {\n          done();\n        })\n        return;\n      });\n    })\n  }\n```", "```js\n'''javascript\n  Meeting.ensureIndex({location1: \"2dsphere\"});\n\n  //..\n\n  methods.pair = function(user,done) {\n    methods.userMatchHistory(user, function(err, emailList) {\n      if(err) return done(err);\n\n      Meeting.findAndModify({\n        new: true,\n        query: {\n          user2: {$exists: false},\n          'user1.email': {$nin: emailList},\n          'location1': {$nearSphere:{\n            $geometry :\n              { type : 'Point',\n              coordinates : user.location } ,\n              $maxDistance : 7*1000\n          }}\n        },\n        update: {\n          $set: {\n            user2: user,\n            at: arrangeTime()\n          }\n        }\n      }, function(err, newPair) {\n        if (err) { return done(err); }\n\n        if (newPair){\n          return done(null, newPair);\n        }\n\n        Meeting.insert({\n          user1: user,\n          location1: user.location\n        }, function(err,meeting) {\n          done();\n        })\n        return;\n      });\n\n    });\n  }\n'''\n```", "```js\n  methods.outcomes = function() {\n    return {\n      awesome : \"It was awesome\",\n      awful   : \"It was awful\",\n      meh     : \"Meh\",\n      noshow  : \"My pair didn't show up!\"\n    }\n  }\n```", "```js\n'''\nvar nodemailer = require('nodemailer')\n\nmodule.exports = function (mailConfig){\n  var methods = {};\n  var transporter;\n\n  // Setup transport\n  if(process.env.NODE_ENV == 'test'){\n    var stubTransport = require('nodemailer-stub-transport');\n    transporter = nodemailer.createTransport(stubTransport());\n  } else if( mailConfig.service === 'Mailgun'){\n    transporter = nodemailer.createTransport({\n        service: 'Mailgun',\n        auth: {\n            user: mailConfig.user,\n            pass: mailConfig.password\n        }\n    });\n  } else {\n    throw new Error(\"email service missing\");\n  }\n\n  // define a simple function to deliver mails\n  methods.send = function(recipients, subject, body, cb) {\n    // small trick to ensure dev & tests emails go to myself\n    if(process.env.NODE_ENV !== 'production') {\n      recipients = [\"my.own.email@provider.com\"];\n    }\n    transporter.sendMail({\n      to: recipients,\n      from: mailConfig.from,\n      subject: subject,\n      generateTextFromHTML: true,\n      html: body\n    }, function(err, info) {\n      // console.info(\"nodemailer::send\",err,info)\n      if(typeof cb === 'function'){\n        cb(err,info);\n      }\n    })\n  }\n\n  return methods;\n}\n```", "```js\nvar dbCleanup = require('./utils/db');\nvar app = require('../src/app');\nvar mailer = app.get('mailer');\n\ndescribe('Meeting Setup', function() {\n\n  it('just send one.', function(done) {\n    this.timeout(10*1000);\n    mailer.send(\n      \"my.own.email@provider.com\",\n      \"Test \"+(new Date()).toLocaleString(),\n      \"Body \"+Math.random()+\"<br>\"+Math.random()\n    , done);\n  })\n})\n```", "```js\n  var ENV = process.env;\n  configs.email = {\n    service: \"Mailgun\",\n    from: ENV.MAIL_FROM,\n    user: ENV.MAIL_USER,\n    password: ENV.MAIL_PASSWORD\n  };\n```", "```js\n'''javascript\nmodule.exports = function(sendMail, models) {\n  //..\n\n  function sendForUser (user1, user2, id, date, cb) {\n    emailTemplates(templatesDir, function(err,template) {\n      if(err) return cb(err);\n\n      template('followup', {\n        meetingId: id.toString(),\n        user1    : user1,\n        user2    : user2,\n        date     : date,\n        outcomes : Meeting.outcomes()\n      }, function(err,html) {\n        if(err) return cb(err);\n        sendMail(\n          user1.email,\n          \"How was your meeting with \"+user2.name+\"?\",\n          html,\n          cb\n        )\n      });\n    });\n  }\n\n  // call done() when both emails are sent\n  return function followUp(meeting, done) {\n    async.parallel([\n      function(cb) {\n        sendForUser(meeting.user1, meeting.user2, meeting._id, meeting.at, cb);\n      },\n      function(cb) {\n        sendForUser(meeting.user2, meeting.user1, meeting._id, meeting.at, cb);\n      },\n    ], done)\n  }\n}\n```", "```js\n'''html\n<h4 class=\"title\">\n  Hey {{user1.name}},\n</h4>\n<div class=\"text\">\n  We hope you just had an awesome meeting with {{user2.name}}!\n  You guys were supposed to meetup at {{date|date('jS \\o\\f F H:i')}}, how did it go?\n</div>\n<ul>\n  {% for id, text in outcomes %}\n  <li><a href=\"http://127.0.0.1:8000/followup/{{meetingId}}/{{user2._id.toString()}}/{{id}}\">{{text}}</a></li>\n  {% endfor %}\n</ul>\n<div class=\"text\">\n  Hope to see you back soon!\n</div>\n'''\n\n'''css\nbody{\n  background: #EEE;\n  padding: 20px;\n}\n.text{\n  margin-top: 30px;\n}\nul{\n  list-style-type: circle;\n}\nul li{1\n  line-height: 150%;\n}\na{\n  text-decoration: none;\n}\n```", "```js\n  app.get(\"/followup/:meetingId/:reviewedUserId/:feedback\", meeting.followUp);\n```", "```js\n  methods.followUp = function(req,res,next) {\n    var meetingId = req.param(\"meetingId\");\n    var reviewedUserId = req.param(\"reviewedUserId\");\n    var feedback = req.param(\"feedback\");\n    // validate feedback\n    if(!(feedback in Model.Meeting.outcomes())) return res.status(400).send(\"Feedback not recognized\");\n    Model.Meeting.didMeetingHappened(meetingId, function(err, itDid) {\n      if(err){\n        if(err.message == \"no meeting found by this id\"){\n          return res.status(404).send(err.message);\n        } else {\n          return next(err);\n        }\n      }\n      if(!itDid){\n        return res.status(412).send(\"The meeting didn't happen yet, come back later!\");\n      }\n      Model.Meeting.rate(meetingId, reviewedUserId, feedback, function(err, userName, text) {\n        if(err) return next(err);\n        res.send(\"You just rated your meeting with \"+userName+\" as \"+text+\". Thanks!\");\n      });\n    });\n\n  }\n```", "```js\n'''\n  // cb(err, itDid)\n  methods.didMeetingHappened = function(meetingId, cb) {\n    if(!db.ObjectId.isValid(meetingId)) return cb(new Error(\"bad ObjectId\"));\n    Meeting.findOne({\n      user1: {$exists: true},\n      user2: {$exists: true},\n      _id: new db.ObjectId(meetingId)\n    }, function(err, meeting) {\n      if(err) return cb(err);\n      if(!meeting) return cb(new Error('no meeting found by this id'));\n      if(meeting.at > new Date()) return cb(null,false);\n      cb(null,true);\n    })\n  }\n\n  // cb(err, userName, text)\n  methods.rate = function(meetingId, reviewedUserId, feedback, cb) {\n    Meeting.findOne({\n      _id: new db.ObjectId(meetingId),\n    }, function(err,meeting) {\n      if(err) return cb(err)\n        var update = {};\n        // check the ids present at the meeting object, if user 1 is being reviewed then the review belongs to user 2\n        var targetUser = (meeting.user1._id.toString() == reviewedUserId) ? '1' : '2';\n        update[\"user\"+targetUser+\"review\"] = feedback;\n        Meeting.findAndModify({\n          new: true,\n          query: {\n            _id: new db.ObjectId(meetingId),\n          },\n          update: {\n            $set: update\n          }\n        }, function(err, meeting) {\n          if(err) return cb(err);\n          var userName = (meeting[\"user\"+targetUser].name);\n          var text = methods.outcomes()[feedback];\n          cb(null, userName, text);\n        })\n    })\n  }\n'''\n```", "```js\nvar CronJob = require('cron').CronJob;\n\nmodule.exports = function(models, mailer) {\n  var tasks = {};\n\n  tasks.followupMail = require('./followupMail')(models,mailer);\n\n  tasks.init = function() {\n    (new CronJob('00 */15 * * * *', tasks.followupMail)).start();\n  };\n\n  return tasks;\n}\n```", "```js\n'''\nmodule.exports = function(Model, mailer) {\n  return function() {\n    Model.Meeting.needMailing(function(err,meetings) {\n      if(err) return console.warn(\"needMailing\", err);\n      if(!meetings || meetings.length < 1) return;\n      meetings.forEach(function(meeting) {\n        mailer.followUp(meeting, function(err) {\n          if(err) return console.warn(\"needMailing followup failed \"+meeting._id.toString(), err);\n          Model.Meeting.markAsMailed(meeting._id);\n        });\n      });\n      Model.Meeting.markAsMailed(meetings);\n    });\n  };\n};\n'''\n```", "```js\n  // all meetings that are due and not mailed yet\n  methods.needMailing = function(cb) {\n    Meeting.find({\n      at: {$lt: new Date},\n      mailed: {$exists: false}\n    },cb);\n  };\n\n  // mark a meeting as mailed\n  methods.markAsMailed = function(id,cb) {\n    Meeting.findAndModify({\n      query: {\n        _id: id\n      },\n      update:{\n        $set: {mailed: new Date()}\n      }\n    },cb);\n  };\n```"]