["```js\n// simpleAjax.js\nimport * as hard from \"hardajaxlibrary\";\n// import the other library that does Ajax calls\n// but in a hard, difficult way, requiring complex code\nconst convertParamsToHardStyle = (params) => {\n  // do some internal steps to convert params\n  // into whatever the hard library may require\n};\nconst makeStandardUrl = (url) => {\n  // make sure the URL is in the standard\n  // way for the hard library\n};\nconst getUrl = (url, params, callback) => {\n  const xhr = hard.createAnXmlHttpRequestObject();\n  hard.initializeAjaxCall(xhr);\n  const standardUrl = makeStandardUrl(url);\n  hard.setUrl(xhr, standardUrl);\n  const convertedParams = convertParamsToHardStyle(params);\n  hard.setAdditionalParameters(params);\n  hard.setCallback(callback);\n  if (hard.everythingOk(xhr)) {\n    hard.doAjaxCall(xhr);\n  } else {\n    throw new Error(\"ajax failure\");\n  }\n};\nconst postUrl = (url, params, callback) => {\n  // some similarly complex code\n  // to do a POST using the hard library\n};\nexport { getUrl, postUrl };\n// the only methods that will be seen\n```", "```js\nconst simpleAjax = (function () {\n  const hard = require(\"hardajaxlibrary\");\n  const convertParamsToHardStyle = (params) => {\n    // ...\n  };\n  const makeStandardUrl = (url) => {\n    // ...\n  };\n  const getUrl = (url, params, callback) => {\n    // ...\n  };\n  const postUrl = (url, params, callback) => {\n    // ...\n  };\n  return { getUrl, postUrl };\n})();\n```", "```js\nconst FullNameDisplay = ({ first, last }) => {\n  return (\n    <div>\n      First Name: <b>{first}</b>\n      <br />\n      Last Name: <b>{last}</b>\n    </div>\n  );\n};\nconst ListOfNames = ({ people, heading }) => {\n  return (\n    <div>\n      <h1>{heading}</h1>\n      <ul>\n        {people.map((v) => (\n          <FullNameDisplay first={v.first} last={v.last} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n```", "```js\nimport { createRoot } from \"react-dom/client\";\nconst GANG_OF_FOUR = [\n  { first: \"Erich\", last: \"Gamma\" },\n  { first: \"Richard\", last: \"Helm\" },\n  { first: \"Ralph\", last: \"Johnson\" },\n  { first: \"John\", last: \"Vlissides\" }\n];\nconst FullNameDisplay = ...\nconst ListOfNames = ...\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\nroot.render(\n  <ListOfNames people={GANG_OF_FOUR} heading=\"GoF\" />\n);\n```", "```js\nconst makeVisible = (component) => {\n  return (\n    <div style={{ border: \"1px solid red\" }}>\n      {component}\n    </div>\n  );\n};\n```", "```js\nconst ListOfNames = ({ people, heading }) => {\n  return (\n    <div>\n      <h1>{heading}</h1>\n      <ul>\n        {people.map((v) =>\n          makeVisible(<FullNameDisplay\n            first={v.first}\n            last={v.last} />)\n        )}\n      </ul>\n    </div>\n  );\n};\n```", "```js\nfunction findRoute(byMeans, fromPoint, toPoint) {\n  switch (byMeans) {\n    case \"foot\":\n    /*\n    find the shortest road for a walking person\n    */\n    case \"bicycle\":\n    /*\n    find a route apt for a cyclist\n    */\n    case \"car-fastest\":\n    /*\n    find the fastest route for a car driver\n    */\n    case \"car-shortest\":\n    /*\n    find the shortest route for a car driver\n    */\n    default:\n    /*\n    plot a straight line, or throw an error,\n    or whatever suits you\n    */\n  }\n}\n```", "```js\nfunction findRoute(routeAlgorithm, fromPoint, toPoint) {\n  return routeAlgorithm(fromPoint, toPoint);\n}\n```", "```js\ntype FindClientPort = (\n  id: number\n) => Promise<ClientType | null>;\n```", "```js\nconst findClientFromDBAdapter: FindClientPort = async (\n  id: number\n) => {\n  // access the database, do the search, etc., and\n  // return a promise to get the client from DB\n};\n```", "```js\nfunction getClientService(id: number,\n  { findClient, sendMsg } =\n  { findClient: findClientFromDBAdapter,\n    sendMsg: sendMsgToMQAdapter }) {\n  ...\n}\n```", "```js\nfindClientMock = jest.fn().mockResolvedValue(...);\nsendMsgMock = jest.fn().mockReturnValue(...);\nresult = await getClientService(22,\n  { findClient: findClientMock,\n    sendMsg: sendMsgMock });\nexpect(findClientMock).toHaveBeenCalledWith(22);\nexpect(sendMsgMock).toHaveBeenCalledWith(...);\nexpect(result).toMatchObject(...);\n```", "```js\nconst obs1$ = from([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\nconst obs2$ = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nconst obs3$ = range(1, 10);\n```", "```js\n<html>\n  <head>\n    <title>Multiple click example</title>\n    <script\n      type=\"text/javascript\"\n      src=\"img/rxjs.umd.js\"\n    ></script>\n  </head>\n  <body>\n    <span id=\"mySpan\"\n      >Click this text many times (quickly)</span\n    >\n    <script>\n      // our code goes here...\n    </script>\n  </body>\n</html>\n```", "```js\nconst { fromEvent, pipe } = rxjs;\nconst { buffer, filter } = rxjs.operators;\n```", "```js\nconst spanClick$ = fromEvent(\n  document.getElementById(\"mySpan\"),\n  \"click\"\n);\nspanClick$\n  .pipe(\n    buffer(spanClick$.pipe(debounceTime(250))),\n    map((list) => list.length),\n    filter((x) => x >= 3)\n  )\n  .subscribe((e) => {\n    console.log(`${e} clicks at ${new Date()}`);\n  });\n/*\n5 clicks at Fri Feb 03 2023 18:08:42 GMT-0300\n3 clicks at Fri Feb 03 2023 18:08:45 GMT-0300\n6 clicks at Fri Feb 03 2023 18:08:47 GMT-0300\n4 clicks at Fri Feb 03 2023 18:08:51 GMT-0300\n*/\n```", "```js\n<html>\n  <head>\n    <title>Cities search</title>\n    <script\n      type=\"text/javascript\"\n      src=\"img/rxjs.umd.js\"\n    ></script>\n  </head>\n  <body>\n    Find cities:\n    <input type=\"text\" id=\"myText\" />\n    <br />\n    <h4>Some cities...</h4>\n    <div id=\"myResults\"></div>\n    <script>\n      // typeahead code goes here...\n    </script>\n  </body>\n</html>\n```", "```js\nconst URL = `http://` +\n  `geodb-free-service.wirefreethought.com/v1/geo/cities`;\nconst getCitiesOrNull = (text) => {\n  if (text) {\n    const citySearchUrl =\n      `${URL}?` +\n      `hateoasMode=false&` +\n      `sort=-population&` +\n      `namePrefix=${encodeURIComponent(text)}`;\n    return;\n    fetch(citySearchUrl);\n  } else {\n    return Promise.resolve(null);\n  }\n};\n```", "```js\nconst { fromEvent, pipe } = rxjs;\nconst {\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  map,\n  reduce,\n  switchMap,\n} = rxjs.operators;\n```", "```js\nconst textInput$ = fromEvent(\n  document.getElementById(\"myText\"),\n  \"input\"\n).pipe(\n  map((e) => e.target.value),\n  debounceTime(200),\n  filter((w) => w.length === 0 || w.length > 3),\n  distinctUntilChanged(),\n  switchMap((w) => getCitiesOrNull(w))\n);\n```", "```js\ntextInput$.subscribe(async (fetchResult) => {\n  domElem = document.getElementById(\"myResults\");\n  if (fetchResult !== null) {\n    result = await fetchResult.json();\n    domElem.innerHTML = result.data\n      .map((x) => `${x.city}, ${x.region}, ${x.country}`)\n      .join(\"<br />\");\n  } else {\n    domElem.innerHTML = \"\";\n  }\n});\n```", "```js\nconst logging = (target, name, descriptor) => {\n  const savedMethod = descriptor.value;\n  descriptor.value = function (...args) {\n    console.log(`entering ${name}: ${args}`);\n    try {\n      const valueToReturn = savedMethod.bind(this)(...args);\n      console.log(`exiting ${name}: ${valueToReturn}`);\n      return valueToReturn;\n    } catch (thrownError) {\n      console.log(`exiting ${name}: threw ${thrownError}`);\n      throw thrownError;\n    }\n  };\n  return descriptor;\n};\n```", "```js\nclass SumThree {\n  constructor(z) {\n    this.z = z;\n  }\n  @logging\n  sum(x, y) {\n    return x + y + this.z;\n  }\n}\nnew SumThree(100).sum(20, 8);\n// entering sum: 20,8\n// exiting sum: 128\n```", "```js\nclass Foo {\n  constructor(fooValue) {\n    this.fooValue = fooValue;\n  }\n  doSomething() {\n    console.log(\"something: foo... \", this.fooValue);\n  }\n}\nconst addBar = (BaseClass) => {\n  /*\n  your code goes here\n  */\n};\nconst fooBar = new (addBar(Foo))(22, 9);\nfooBar.doSomething();\n// something: foo... 22\nfooBar.somethingElse();\n// something else: bar... 9\nconsole.log(Object.keys(fooBar));\n// [\"fooValue\", \"barValue\"]\n```"]