["```js\nconst element = <h1>Example</h1> \n```", "```js\nconst element = React.createElement('h1', null, 'Example') \n```", "```js\nconst element = ( \n    <details> \n        <summary>React Elements</summary> \n        <p>JSX is cool</p> \n    </details> \n) \n```", "```js\nconst element = React.createElement( \n    'details', \n    null, \n    React.createElement('summary', null, 'React Elements'), \n    React.createElement('p', null, 'JSX is cool'), \n  ) \n```", "```js\nconst element = <p /> \n```", "```js\nconst element = ( \n    <input type=\"text\" value=\"Example\" readOnly /> \n) \n```", "```js\n      const InputText = ({ name, children }) => ( \n          <input \n              type=\"text\" \n              name={name} \n              value={children} \n              readOnly \n          />Â­ \n      ) \n```", "```js\nclass InputText extends React.Component { \n    render() { \n              const { name, children } = this.props \n              return ( \n                  <input \n                      type=\"text\" \n                      name={name} \n                      value={children} \n                      readOnly \n                  /> \n              ) \n          } \n      } \n```", "```js\nconst InstanceInputText = ( \n          <InputText name=\"username\"> \n              Huang Jx \n          </InputText> \n      ) \n```", "```js\n<MyComponent> \n    <span>Example</span> \n</MyComponent> \n```", "```js\n<MyComponent> \n    {() => { \n        console.log('Example!') \n        return null\n    }} \n</MyComponent> \n```", "```js\nconst SayHi = ({ to }) => ( \n    `Hello ${to}` \n) \nconst element = ( \n    <h1> \n        <SayHi to=\"John\" />, how are you? \n    </h1> \n) \n```", "```js\nimport * as ReactDOM from 'react-dom' \nimport App from './App' \nReactDOM.render( \n   <App />, \n   document.querySelector('[role=\"main\"]'), \n) \n```", "```js\nimport * as React from 'react' \nimport * as ReactDOMServer from 'react-dom/server' \nconst OrderedList = ({ children }) => ( \n   <ol> \n      {children.map((item, indx) => ( \n         <li key={indx}>{item}</li> \n      ))} \n   </ol> \n) \nconsole.log( \n   ReactDOMServer.renderToStaticMarkup( \n      <OrderedList> \n         {['One', 'Two', 'Three']} \n      </OrderedList> \n   ) \n) \n```", "```js\n<ol> \n   <li>One</li> \n   <li>Two</li> \n   <li>Three</li> \n</ol> \n```", "```js\n{ \n  \"scripts\": { \n    \"start\": \"parcel serve -p 1337 index.html\" \n  }, \n  \"devDependencies\": { \n    \"babel-plugin-transform-class-properties\": \"6.24.1\", \n    \"babel-preset-env\": \"1.6.1\", \n    \"babel-preset-react\": \"6.24.1\", \n    \"babel-core\": \"6.26.3\", \n    \"parcel-bundler\": \"1.8.1\", \n    \"react\": \"16.3.2\", \n    \"react-dom\": \"16.3.2\" \n  } \n} \n```", "```js\n{ \n    \"presets\": [\"env\",\"react\"], \n    \"plugins\": [\"transform-class-properties\"] \n} \n```", "```js\nnpm install \n```", "```js\n      import * as React from 'react' \n      import * as ReactDOM from 'react-dom' \n```", "```js\n      const RedText = ({ text }) => ( \n          <span style={{ color: 'red' }}> \n              {text} \n          </span> \n      ) \n```", "```js\n      const Welcome = ({ to }) => ( \n          <h1>Hello, <RedText text={to}/></h1> \n      ) \n```", "```js\n      const TodoList = ( \n          <ul> \n              <li>Lunch at 14:00 with Jenny</li> \n              <li>Shower</li> \n          </ul> \n      ) \n```", "```js\n      class Footer extends React.Component { \n          render() { \n              return ( \n                  <footer> \n                      {new Date().toDateString()} \n                  </footer> \n              ) \n          } \n      } \n```", "```js\n      ReactDOM.render( \n          <div> \n              <Welcome to=\"John\" /> \n              {TodoList} \n              <Footer /> \n          </div>, \n          document.querySelector('[role=\"main\"]'), \n      ) \n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>MyApp</title> \n      </head> \n      <body> \n          <div role=\"main\"></div> \n          <script src=\"img/basics.js\"></script> \n      </body> \n      </html> \n```", "```js\n npm start\n```", "```js\n      http://localhost:1337/\n```", "```js\n{ \n  \"scripts\": { \n    \"start\": \"parcel serve -p 1337 index.html\" \n  }, \n  \"devDependencies\": { \n    \"babel-plugin-transform-class-properties\": \"6.24.1\", \n    \"babel-preset-env\": \"1.6.1\", \n    \"babel-preset-react\": \"6.24.1\", \n    \"babel-core\": \"6.26.3\", \n    \"parcel-bundler\": \"1.8.1\", \n    \"react\": \"16.3.2\", \n    \"react-dom\": \"16.3.2\" \n  } \n} \n```", "```js\n{ \n    \"presets\": [\"env\",\"react\"], \n    \"plugins\": [\"transform-class-properties\"] \n} \n```", "```js\nnpm install\n```", "```js\n      import * as React from 'react' \nimport * as ReactDOM from 'react-dom' \n      export default ({ title }) => ( \n          <h1>{title}</h1> \n      ) \n```", "```js\n      import * as React from 'react' \n      import * as ReactDOM from 'react-dom' \n      export default ({ date }) => ( \n          <footer>{date}</footer> \n      ) \n```", "```js\n      import * as React from 'react' \n      import * as ReactDOM from 'react-dom' \n      export default () => ( \n          <p>This is a cool website designed with ReactJS</p> \n      ) \n```", "```js\n      import * as React from 'react' \n      import * as ReactDOM from 'react-dom' \n```", "```js\n      import Header from './component/Header' \n      import Footer from './component/Footer' \n      import Description from './component/Description' \n```", "```js\n      const App = () => ( \n          <React.Fragment> \n              <Header title=\"Simple React App\" /> \n              <Description /> \n              <Footer date={new Date().toDateString()} /> \n          </React.Fragment> \n      ) \n```", "```js\n      ReactDOM.render( \n          <App />, \n          document.querySelector('[role=\"main\"]'), \n      ) \n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Composing Components</title> \n      </head> \n      <body> \n          <div role=\"main\"></div> \n          <script src=\"img/composing-react.js\"></script> \n      </body> \n      </html> \n```", "```js\n npm start\n```", "```js\n      http://localhost:1337/ \n```", "```js\n      <div role=\"app\"> \n      <h1>React App</h1> \n      <p>This is a cool website designed with ReactJS</p> \n      <footer>Tue May 22 2018</footer> \n      </div> \n```", "```js\nconst Example = () => ( \n   <span>One</span> \n   <span>Two</span> \n) // < will trow an error \n```", "```js\nconst Example = () => ( \n   <React.Fragment> \n      <span>One</span> \n      <span>Two</span> \n   </React.Fragment> \n) \n```", "```js\nclass Example extends React.Component { \n   render() { \n      <span>This is an example</span> \n   } \n} \n```", "```js\nclass Example extends React.Component {  \n    state = { title: null } \n    render() { \n        return ( \n            <React.Fragment>  \n                <span>{this.props.title}</span>  \n                <span>{this.state.title}</span>  \n            </React.Fragment>  \n        ) \n    } \n} \n```", "```js\nclass Example extends React.Component { \n    state = { \n        title: \"Example\", \n        date: null, \n    } \n    componentDidMount() { \n        this.setState((prevState) => ({ \n            date: new Date().toDateString(), \n        })) \n    } \n    render() { \n        return ( \n            <React.Fragment>  \n                <span>{this.state.title}</span>  \n                <span>{this.state.date}</span>  \n            </React.Fragment>  \n        ) \n    } \n} \n```", "```js\ncomponentDidMount() { \n   this.setState({ \n      date: new Date().toDateString(), \n   }) \n} \n```", "```js\ncomponentDidMount() { \n   this.setState({ \n      date: new Date().toDateString(), \n   }, () => { \n      console.log('date has been updated!') \n   }) \n   console.log(this.state.date) // null \n} \n```", "```js\ncurrentState = Object.assign({}, currentState, nextState) \n```", "```js\n{ \n  \"scripts\": { \n    \"start\": \"parcel serve -p 1337 index.html\" \n  }, \n  \"devDependencies\": { \n    \"babel-plugin-transform-class-properties\": \"6.24.1\", \n    \"babel-preset-env\": \"1.6.1\", \n    \"babel-preset-react\": \"6.24.1\", \n    \"babel-core\": \"6.26.3\", \n    \"parcel-bundler\": \"1.8.1\", \n    \"react\": \"16.3.2\", \n    \"react-dom\": \"16.3.2\" \n  } \n} \n```", "```js\n{ \n    \"presets\": [\"env\",\"react\"], \n    \"plugins\": [\"transform-class-properties\"] \n} \n```", "```js\nnpm install  \n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Life cycle methods</title> \n      </head> \n      <body> \n          <div role=\"main\"></div> \n          <script src=\"img/stateful-react.js\"></script> \n      </body> \n      </html> \n```", "```js\n      import * as React from 'react' \n      import * as ReactDOM from 'react-dom' \n```", "```js\n      class LifeCycleTime extends React.Component { \n          constructor(props) { \n              super(props) \n              this.state = { \n                  time: new Date().toTimeString(), \n                  color: null, \n                  dontUpdate: false, \n              } \n          } \n          static getDerivedStateFromProps(nextProps, prevState) { \n              return nextProps \n          } \n          componentDidMount() { \n              this.intervalId = setInterval(() => { \n                  this.setState({ \n                      time: new Date().toTimeString(), \n                  }) \n              }, 100) \n          } \n          componentWillUnmount() { \n              clearInterval(this.intervalId) \n          } \n          shouldComponentUpdate(nextProps, nextState) { \n              if (nextState.dontUpdate) { \n                  return false \n              } \n              return true \n          } \n          getSnapshotBeforeUpdate(prevProps, prevState) { \n              return 'snapshot before update' \n          } \n          componentDidUpdate(prevProps, prevState, snapshot) { \n              console.log( \n                  'Component did update and received snapshot:', \n                  snapshot, \n              ) \n          } \n          render() { \n              return ( \n                  <span style={{ color: this.state.color }}> \n                      {this.state.time} \n                  </span> \n              ) \n          } \n      } \n```", "```js\n      class App extends React.Component { \n          constructor(props) { \n              super(props) \n              this.state = { \n                  color: 'red', \n                  dontUpdate: false, \n                  unmount: false, \n              } \n              this.toggleColor = this.toggleColor.bind(this) \n              this.toggleUpdate = this.toggleUpdate.bind(this) \n              this.toggleUnmount = this.toggleUnmount.bind(this) \n          } \n          toggleColor() { \n              this.setState((prevState) => ({ \n                  color: prevState.color === 'red' \n                      ? 'blue' \n                      : 'red', \n              })) \n          } \n          toggleUpdate() { \n              this.setState((prevState) => ({ \n                  dontUpdate: !prevState.dontUpdate, \n              })) \n          } \n          toggleUnmount() { \n              this.setState((prevState) => ({ \n                  unmount: !prevState.unmount, \n              })) \n          } \n          render() { \n              const { \n                  color, \n                  dontUpdate, \n                  unmount, \n              } = this.state \n              return ( \n                  <React.Fragment> \n                      {unmount === false && <LifeCycleTime \n                          color={color} \n                          dontUpdate={dontUpdate} \n                      />} \n                      <button onClick={this.toggleColor}> \n                          Toggle color \n                          {JSON.stringify({ color })} \n                      </button> \n                      <button onClick={this.toggleUpdate}> \n                          Should update? \n                          {JSON.stringify({ dontUpdate })} \n                      </button> \n                      <button onClick={this.toggleUnmount}> \n                          Should unmount? \n                          {JSON.stringify({ unmount })} \n                      </button> \n                  </React.Fragment> \n              ) \n          } \n      } \n```", "```js\n      ReactDOM.render( \n          <App />, \n          document.querySelector('[role=\"main\"]'), \n      ) \n```", "```js\n npm start\n```", "```js\n http://localhost:1337/\n```", "```js\n{ \n  \"scripts\": { \n    \"start\": \"parcel serve -p 1337 index.html\" \n  }, \n  \"devDependencies\": { \n    \"babel-plugin-transform-class-properties\": \"6.24.1\", \n    \"babel-preset-env\": \"1.6.1\", \n    \"babel-preset-react\": \"6.24.1\", \n    \"babel-core\": \"6.26.3\", \n    \"parcel-bundler\": \"1.8.1\", \n    \"react\": \"16.3.2\", \n    \"react-dom\": \"16.3.2\" \n  } \n} \n```", "```js\n{ \n    \"presets\": [\"env\",\"react\"], \n    \"plugins\": [\"transform-class-properties\"] \n} \n```", "```js\nnpm install  \n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>React.PureComponent</title> \n      </head> \n      <body> \n          <div role=\"main\"></div> \n          <script src=\"img/pure-component.js\"></script> \n      </body> \n      </html> \n```", "```js\n      import * as React from 'react' \n      import * as ReactDOM from 'react-dom' \n```", "```js\n      class Button extends React.PureComponent { \n          componentDidUpdate() { \n              console.log('Button Component did update!') \n          } \n          render() { \n              return ( \n                  <button>{this.props.children}</button> \n              ) \n          } \n      } \n```", "```js\n      class Text extends React.Component { \n          componentDidUpdate() { \n              console.log('Text Component did update!') \n          } \n          render() { \n              return this.props.children \n          } \n      } \n```", "```js\n      class App extends React.Component { \n          state = { \n              counter: 0, \n          } \n          componentDidMount() { \n              this.intervalId = setInterval(() => { \n                  this.setState(({ counter }) => ({ \n                      counter: counter + 1, \n                  })) \n              }, 1000) \n          } \n          componentWillUnmount() { \n              clearInterval(this.intervalId) \n          } \n          render() { \n              const { counter } = this.state \n              return ( \n                  <React.Fragment> \n                      <h1>Counter: {counter}</h1> \n                      <Text>I'm just a text</Text> \n                      <Button>I'm a button</Button> \n                  </React.Fragment> \n              ) \n          } \n      } \n```", "```js\n      ReactDOM.render( \n          <App />, \n          document.querySelector('[role=\"main\"]'), \n      ) \n```", "```js\n npm start\n```", "```js\n http://localhost:1337/  \n```", "```js\n      [N] Text Component did update! \n```", "```js\n{ \n  \"scripts\": { \n    \"start\": \"parcel serve -p 1337 index.html\" \n  }, \n  \"devDependencies\": { \n    \"babel-plugin-transform-class-properties\": \"6.24.1\", \n    \"babel-preset-env\": \"1.6.1\", \n    \"babel-preset-react\": \"6.24.1\", \n    \"babel-core\": \"6.26.3\", \n    \"parcel-bundler\": \"1.8.1\", \n    \"react\": \"16.3.2\", \n    \"react-dom\": \"16.3.2\" \n  } \n} \n```", "```js\n{ \n    \"presets\": [\"env\",\"react\"], \n    \"plugins\": [\"transform-class-properties\"] \n} \n```", "```js\nnpm install \n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>React Events Handlers</title> \n      </head> \n      <body> \n          <div role=\"main\"></div> \n          <script src=\"img/events.js\"></script> \n      </body> \n      </html> \n```", "```js\n      import * as React from 'react' \n      import * as ReactDOM from 'react-dom' \n```", "```js\n      class App extends React.Component { \n          constructor(props) { \n              super(props) \n              this.state = { \n                  title: 'Untitled', \n              } \n              this.onBtnClick = this.onBtnClick.bind(this) \n          } \n          onBtnClick() { \n              this.setState({ \n                  title: 'Hello there!', \n              }) \n          } \n          render() { \n              return ( \n                  <section> \n                      <h1>{this.state.title}</h1> \n                      <button onClick={this.onBtnClick}> \n                          Click me to change the title \n                      </button> \n                  </section> \n              ) \n          } \n      } \n```", "```js\n      ReactDOM.render( \n          <App />, \n          document.querySelector('[role=\"main\"]'), \n      ) \n```", "```js\n       npm start\n```", "```js\n      http://localhost:1337/\n```", "```js\nclass Example { \n    fn() { return this } \n} \nconst examp = new Example() \nconst props = examp.fn \nconst bound = examp.fn.bind(examp) \nconsole.log('1:', typeof examp.fn()) \nconsole.log('2:', typeof props()) \nconsole.log('3:', typeof bound()) \n```", "```js\n1: object \n2: undefined \n3: object \n```", "```js\nconst Meal = ({ timeOfDay }) => (  \n    <span>{timeOfDay === 'noon' \n        ? 'Pizza' \n        : 'Sandwich' \n    }</span>  \n) \n```", "```js\nconst Meal = ({ timeOfDay }) => (  \n    <span children={timeOfDay === 'noon' \n        ? 'Pizza' \n        : 'Sandwich' \n    } />  \n) \n```", "```js\n<span>Pizza</span> \n```", "```js\n<span>Sandwich</span> \n```", "```js\n{ \n  \"scripts\": { \n    \"start\": \"parcel serve -p 1337 index.html\" \n  }, \n  \"devDependencies\": { \n    \"babel-plugin-transform-class-properties\": \"6.24.1\", \n    \"babel-preset-env\": \"1.6.1\", \n    \"babel-preset-react\": \"6.24.1\", \n    \"babel-core\": \"6.26.3\", \n    \"parcel-bundler\": \"1.8.1\", \n    \"react\": \"16.3.2\", \n    \"react-dom\": \"16.3.2\" \n  } \n} \n```", "```js\n{ \n    \"presets\": [\"env\",\"react\"], \n    \"plugins\": [\"transform-class-properties\"] \n} \n```", "```js\nnpm install\n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Conditional Rendering</title> \n      </head> \n      <body> \n          <div role=\"main\"></div> \n          <script src=\"img/conditions.js\"></script> \n      </body> \n      </html> \n```", "```js\n      import * as React from 'react' \n      import * as ReactDOM from 'react-dom' \n```", "```js\n      const Toggle = ({ condition, children }) => ( \n          condition \n              ? children[0] \n              : children[1] \n      ) \n```", "```js\n      class App extends React.Component { \n          constructor(props) { \n              super(props) \n              this.state = { \n                  color: 'blue', \n              } \n              this.onClick = this.onClick.bind(this) \n          } \n          onClick() { \n              this.setState(({ color }) => ({ \n                  color: (color === 'blue') ? 'lime' : 'blue' \n              })) \n          } \n          render() { \n              const { color } = this.state \n              return ( \n                  <React.Fragment> \n                      <Toggle condition={color === 'blue'}> \n                          <p style={{ color }}>Blue!</p> \n                          <p style={{ color }}>Lime!</p> \n                      </Toggle> \n                      <button onClick={this.onClick}> \n                          Toggle Colors \n                      </button> \n                  </React.Fragment> \n              ) \n          } \n      } \n```", "```js\n      ReactDOM.render( \n          <App />, \n          document.querySelector('[role=\"main\"]'), \n      ) \n```", "```js\n npm start\n```", "```js\n      http://localhost:1337/\n```", "```js\n   <ul> \n      {[ \n         <li key={0}>One</li>, \n         <li key={1}>Two</li>, \n      ]} \n   </ul> \n```", "```js\n{ \n  \"scripts\": { \n    \"start\": \"parcel serve -p 1337 index.html\" \n  }, \n  \"devDependencies\": { \n    \"babel-plugin-transform-class-properties\": \"6.24.1\", \n    \"babel-preset-env\": \"1.6.1\", \n    \"babel-preset-react\": \"6.24.1\", \n    \"babel-core\": \"6.26.3\", \n    \"parcel-bundler\": \"1.8.1\", \n    \"react\": \"16.3.2\", \n    \"react-dom\": \"16.3.2\" \n  } \n} \n```", "```js\n{ \n    \"presets\": [\"env\",\"react\"], \n    \"plugins\": [\"transform-class-properties\"] \n} \n```", "```js\n npm install\n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Rendering Lists</title> \n      </head> \n      <body> \n         <div role=\"main\"></div> \n          <script src=\"img/lists.js\"></script> \n      </body> \n      </html> \n```", "```js\n      import * as React from 'react' \n      import * as ReactDOM from 'react-dom' \n```", "```js\n      const MapArray = ({ \n          from, \n          mapToProps, \n          children: Child, \n      }) => ( \n          <React.Fragment> \n              {from.map((item) => ( \n                  <Child {...mapToProps(item)} /> \n              ))} \n          </React.Fragment> \n      ) \n```", "```js\n      const TodoItem = ({ done, label }) => ( \n          <li> \n              <input type=\"checkbox\" checked={done} readOnly /> \n              <label>{label}</label> \n          </li> \n      ) \n```", "```js\n      const list = [ \n          { id: 1, done: true, title: 'Study for Chinese exam' }, \n          { id: 2, done: false, title: 'Take a shower' }, \n          { id: 3, done: false, title: 'Finish chapter 6' }, \n      ] \n```", "```js\n      const mapToProps = ({ id: key, done, title: label }) => ({ \n          key, \n          done, \n          label, \n      }) \n```", "```js\n      const TodoListApp = ({ items }) => ( \n          <ol> \n              <MapArray from={list} mapToProps={mapToProps}> \n                  {TodoItem} \n              </MapArray> \n          </ol> \n      ) \n```", "```js\n      ReactDOM.render( \n          <TodoListApp items={list} />, \n          document.querySelector('[role=\"main\"]'), \n      ) \n```", "```js\n npm start\n```", "```js\n      http://localhost:1337/\n```", "```js\n<ol> \n   <MapArray from={list} mapToProps={mapToProps}> \n      {TodoItem} \n   </MapArray> \n</ol> \n```", "```js\n<ol> \n   <React.Fragment> \n      {from.map((item) => ( \n         <TodoItem {...mapToProps(item) } /> \n      ))} \n   </React.Fragment> \n</ol> \n```", "```js\n<input type=\"text\" value=\"Ms.Huang Jx\" /> \n```", "```js\n<input type=\"text\" value=\"Ms.Huang Jx\" onChange={event => null} /> \n```", "```js\n<input type=\"text\" defaultValue=\"Ms.Huang Jx\" /> \n```", "```js\n{ \n  \"scripts\": { \n    \"start\": \"parcel serve -p 1337 index.html\" \n  }, \n  \"devDependencies\": { \n    \"babel-plugin-transform-class-properties\": \"6.24.1\", \n    \"babel-preset-env\": \"1.6.1\", \n    \"babel-preset-react\": \"6.24.1\", \n    \"babel-core\": \"6.26.3\", \n    \"parcel-bundler\": \"1.8.1\", \n    \"react\": \"16.3.2\", \n    \"react-dom\": \"16.3.2\" \n  } \n} \n```", "```js\n{ \n    \"presets\": [\"env\",\"react\"], \n    \"plugins\": [\"transform-class-properties\"] \n} \n```", "```js\n npm install\n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Forms and Inputs</title> \n      </head> \n      <body> \n          <div role=\"main\"></div> \n          <script src=\"img/forms.js\"></script> \n      </body> \n      </html> \n```", "```js\n      import * as React from 'react' \n      import * as ReactDOM from 'react-dom' \n```", "```js\n      class LoginForm extends React.Component { \n          constructor(props) { \n              super(props) \n              this.state = { \n                  username: '', \n                  password: '', \n              } \n              this.onChange = this.onChange.bind(this) \n          } \n          onChange(event) { \n              const { name, value } = event.target \n              this.setState({ \n                  [name]: name === 'username' \n                      ? value.replace(/d/gi, '') \n                      : value \n              }) \n          } \n          render() { \n              return ( \n                  <form> \n                      <input \n                          type=\"text\" \n                          name=\"username\" \n                          placeholder=\"Username\" \n                          value={this.state.username} \n                          onChange={this.onChange} \n                      /> \n                      <input \n                          type=\"password\" \n                          name=\"password\" \n                          placeholder=\"Password\" \n                          value={this.state.password} \n                          onChange={this.onChange} \n                      /> \n                      <pre> \n                          {JSON.stringify(this.state, null, 2)} \n                      </pre> \n                  </form> \n              ) \n          } \n      } \n```", "```js\n      ReactDOM.render( \n          <LoginForm />, \n          document.querySelector('[role=\"main\"]'), \n      ) \n```", "```js\n npm start\n```", "```js\nhttp://localhost:1337/\n```", "```js\nclass Span extends React.Component { \n    render() { \n        return <span>{this.props.children}</span> \n    } \n} \nclass App extends React.Component { \n    rf1 = React.createRef() \n    rf2 = React.createRef() \n    componentDidMount() { \n        const { rf1, rf2 } = this \n        console.log(rf1.current instanceof HTMLSpanElement) \n        console.log(rf2.current instanceof Span) \n    } \n    render() { \n        return ( \n            <React.Fragment> \n                <span ref={this.rf1} /> \n                <Span ref={this.rf2} /> \n            </React.Fragment> \n        ) \n    } \n} \n```", "```js\ntrue // rf1.current instanceof HTMLSpanElement \ntrue // rf2.current instanceof Span \n```", "```js\n{ \n  \"scripts\": { \n    \"start\": \"parcel serve -p 1337 index.html\" \n  }, \n  \"devDependencies\": { \n    \"babel-plugin-transform-class-properties\": \"6.24.1\", \n    \"babel-preset-env\": \"1.6.1\", \n    \"babel-preset-react\": \"6.24.1\", \n    \"babel-core\": \"6.26.3\", \n    \"parcel-bundler\": \"1.8.1\", \n    \"react\": \"16.3.2\", \n    \"react-dom\": \"16.3.2\" \n  } \n} \n```", "```js\n{ \n    \"presets\": [\"env\",\"react\"], \n    \"plugins\": [\"transform-class-properties\"] \n} \n```", "```js\n npm install\n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Refs</title> \n      </head> \n      <body> \n          <div role=\"main\"></div> \n          <script src=\"img/refs.js\"></script> \n      </body> \n      </html> \n```", "```js\n      import * as React from 'react' \nimport * as ReactDOM from 'react-dom' \n```", "```js\n      class LoginForm extends React.Component { \n          refForm = React.createRef() \n          constructor(props) { \n              super(props) \n              this.state = {} \n              this.onSubmit = this.onSubmit.bind(this) \n              this.onClick = this.onClick.bind(this) \n          } \n          onSubmit(event) { \n              const form = this.refForm.current \n              const data = new FormData(form) \n              this.setState({ \n                  user: data.get('user'), \n                  pass: data.get('pass'), \n              }) \n              event.preventDefault() \n          } \n          onClick(event) { \n              const form = this.refForm.current \n              form.dispatchEvent(new Event('submit')) \n          } \n          render() { \n              const { onSubmit, onClick, refForm, state } = this \n              return ( \n                  <React.Fragment> \n                      <form onSubmit={onSubmit} ref={refForm}> \n                          <input type=\"text\" name=\"user\" /> \n                          <input type=\"text\" name=\"pass\" /> \n                      </form> \n                      <button onClick={onClick}>LogIn</button> \n                      <pre>{JSON.stringify(state, null, 2)}</pre> \n                  </React.Fragment> \n              ) \n          } \n      } \n```", "```js\n      ReactDOM.render( \n          <LoginForm />, \n          document.querySelector('[role=\"main\"]'), \n      ) \n```", "```js\n npm start\n```", "```js\nhttp://localhost:1337/\n```", "```js\nReactDOM.createPortal(  \n    ReactComponent, \n    DOMNode,  \n) \n```", "```js\n<article> \n   {ReactDOM.createPortal( \n      <h1>Example</h1>, \n      document.querySelector('[id=\"heading\"]'), \n   )} \n</article> \n```", "```js\n{ \n  \"scripts\": { \n    \"start\": \"parcel serve -p 1337 index.html\" \n  }, \n  \"devDependencies\": { \n    \"babel-plugin-transform-class-properties\": \"6.24.1\", \n    \"babel-preset-env\": \"1.6.1\", \n    \"babel-preset-react\": \"6.24.1\", \n    \"babel-core\": \"6.26.3\", \n    \"parcel-bundler\": \"1.8.1\", \n    \"react\": \"16.3.2\", \n    \"react-dom\": \"16.3.2\" \n  } \n} \n```", "```js\n{ \n    \"presets\": [\"env\",\"react\"], \n    \"plugins\": [\"transform-class-properties\"] \n} \n```", "```js\n npm install\n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Portals</title> \n      </head> \n      <body> \n          <header id=\"heading\"></header> \n          <div role=\"main\"></div> \n          <script src=\"img/portals.js\"></script> \n      </body> \n      </html> \n```", "```js\n      import * as React from 'react' \n      import * as ReactDOM from 'react-dom' \n```", "```js\n      const Header = () => ReactDOM.createPortal( \n          <h1>React Portals</h1>, \n          document.querySelector('[id=\"heading\"]'), \n      ) \n```", "```js\n      const App = () => ( \n          <React.Fragment> \n              <p>Hello World!</p> \n              <Header /> \n          </React.Fragment> \n      ) \n```", "```js\n      ReactDOM.render( \n          <App />, \n          document.querySelector('[role=\"main\"]'), \n      ) \n```", "```js\n npm start\n```", "```js\nhttp://localhost:1337/\n```", "```js\n      <header id=\"heading\"> \n         <h1>React Portals</h1> \n      </header> \n      <section role=\"main\"> \n         <p>Hello World!</p> \n      </section> \n```", "```js\n{ \n  \"scripts\": { \n    \"start\": \"parcel serve -p 1337 index.html\" \n  }, \n  \"devDependencies\": { \n    \"babel-plugin-transform-class-properties\": \"6.24.1\", \n    \"babel-preset-env\": \"1.6.1\", \n    \"babel-preset-react\": \"6.24.1\", \n    \"babel-core\": \"6.26.3\", \n    \"parcel-bundler\": \"1.8.1\", \n    \"react\": \"16.3.2\", \n    \"react-dom\": \"16.3.2\" \n  } \n} \n```", "```js\n{ \n    \"presets\": [\"env\",\"react\"], \n    \"plugins\": [\"transform-class-properties\"] \n} \n```", "```js\n npm install \n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Catching Errors</title> \n      </head> \n      <body> \n          <div role=\"main\"></div> \n          <script src=\"img/error-boundary.js\"></script> \n      </body> \n      </html> \n```", "```js\n      import * as React from 'react' \n      import * as ReactDOM from 'react-dom' \n```", "```js\n      class ErrorBoundary extends React.Component { \n          constructor(props) { \n              super(props) \n              this.state = { \n                  hasError: false, \n                  message: null, \n                  where: null, \n              } \n          } \n          componentDidCatch(error, info) { \n              this.setState({ \n                  hasError: true, \n                  message: error.message, \n                  where: info.componentStack, \n              }) \n          } \n          render() { \n              const { hasError, message, where } = this.state \n              return (hasError \n                  ? <details style={{ whiteSpace: 'pre-wrap' }}> \n                      <summary>{message}</summary> \n                      <p>{where}</p> \n                  </details> \n                  : this.props.children \n              ) \n          } \n      } \n```", "```js\n      class App extends React.Component { \n          constructor(props) { \n              super(props) \n              this.onClick = this.onClick.bind(this) \n          } \n          onClick() { \n              this.setState(() => { \n                  throw new Error('Error while setting state.') \n              }) \n          } \n          render() { \n              return ( \n                  <button onClick={this.onClick}> \n                      Buggy button! \n                  </button> \n              ) \n          } \n      } \n```", "```js\n      ReactDOM.render( \n          <ErrorBoundary> \n              <App /> \n          </ErrorBoundary>, \n          document.querySelector('[role=\"main\"]'), \n      ) \n```", "```js\n npm start\n```", "```js\n      http://localhost:1337/\n```", "```js\n      Error while setting state.  \n          in App \n          in ErrorBoundary \n```", "```js\nclass MyComponent extends React.Component { \n   static propTypes = { \n      children: propTypes.string.isRequired, \n   } \n   render() { \n      return<span>{this.props.children}</span> \n   } \n} \n```", "```js\n{ \n  \"scripts\": { \n    \"start\": \"parcel serve -p 1337 index.html\" \n  }, \n  \"devDependencies\": { \n    \"babel-core\": \"6.26.3\", \n    \"babel-plugin-transform-class-properties\": \"6.24.1\", \n    \"babel-preset-env\": \"1.6.1\", \n    \"babel-preset-react\": \"6.24.1\", \n    \"parcel-bundler\": \"1.8.1\", \n    \"prop-types\": \"15.6.1\", \n    \"react\": \"16.3.2\", \n    \"react-dom\": \"16.3.2\" \n  } \n} \n```", "```js\n{ \n    \"presets\": [\"env\",\"react\"], \n    \"plugins\": [\"transform-class-properties\"] \n} \n```", "```js\nnpm install \n```", "```js\n      <!DOCTYPE html> \n      <html lang=\"en\"> \n      <head> \n          <meta charset=\"UTF-8\"> \n          <title>Type Checking</title> \n      </head> \n      <body> \n          <div role=\"main\"></div> \n          <script src=\"img/type-checking.js\"></script> \n      </body> \n      </html> \n```", "```js\n      import * as React from 'react' \n      import * as ReactDOM from 'react-dom' \n      import * as propTypes from 'prop-types' \n```", "```js\n      class Toggle extends React.Component { \n          static propTypes = { \n              condition: propTypes.any.isRequired, \n              children: (props, propName, componentName) => { \n                  const customPropTypes = { \n                      children: propTypes \n                          .arrayOf(propTypes.element) \n                          .isRequired \n                  } \n                  const isArrayOfElements = propTypes \n                      .checkPropTypes( \n                          customPropTypes, \n                          props, \n                          propName, \n                          componentName, \n                  ) \n                  const children = props[propName] \n                  const count = React.Children.count(children) \n                  if (isArrayOfElements instanceof Error) { \n                      return isArrayOfElements \n                  } else if (count !== 2) { \n                      return new Error( \n                          `\"${componentName}\"` + \n                          ` expected ${propName}` + \n                          ` to contain exactly 2 React elements` \n                      ) \n                  } \n              } \n          } \n          render() { \n              const { condition, children } = this.props \n              return condition ? children[0] : children[1] \n          } \n      } \n```", "```js\n      class App extends React.Component { \n          constructor(props) { \n              super(props) \n              this.state = { value: false } \n              this.onClick = this.onClick.bind(this) \n          } \n          onClick() { \n              this.setState(({ value }) => ({ \n                  value: !value, \n              })) \n          } \n          render() { \n              const { value } = this.state \n              return ( \n                  <React.Fragment> \n                      <Toggle condition={value}> \n                          <p style={{ color: 'blue' }}>Blue!</p> \n                          <p style={{ color: 'lime' }}>Lime!</p> \n                          <p style={{ color: 'pink' }}>Pink!</p> \n                      </Toggle> \n                      <button onClick={this.onClick}> \n                          Toggle Colors \n                      </button> \n                  </React.Fragment> \n              ) \n          } \n      } \n```", "```js\n      ReactDOM.render( \n          <App />, \n          document.querySelector('[role=\"main\"]'), \n      ) \n```", "```js\n npm start\n```", "```js\n      http://localhost:1337/\n```", "```js\n      Warning: Failed prop type: \"Toggle\" expected children to contain exactly 2 React       elements \n          in Toggle (created by App) \n          in App \n```", "```js\nconst pTypes = { \n   name: propTypes.string.isRequired, \n   age: propTypes.number.isRequired, \n} \nconst props = { \n   name: 'Huang Jx', \n   age: 20, \n} \npropTypes.checkPropTypes(pTypes, props, 'property', 'props') \n```", "```js\nconst props = { \n   name: 20, \n   age: 'Huang Jx', \n} \n```", "```js\nWarning: Failed property type: Invalid property `name` of type `number` supplied to `props`, expected `string`. \nWarning: Failed property type: Invalid property `age` of type `string` supplied to `props`, expected `number`. \n```", "```js\ncheckPropTypes(typeSpecs, values, location, componentName, getStack) \n```"]