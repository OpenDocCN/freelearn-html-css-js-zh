- en: Chapter 8. Adding User Interactivity
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：添加用户交互
- en: Great visualizations provide more than a pretty picture and animations; they
    allow the user to interact with the data, giving them the ability to play with
    the data to discover the meaning in the data that may not be obvious through a
    given static presentation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 优秀的可视化不仅提供漂亮的图片和动画；它们允许用户与数据交互，赋予他们通过给定静态展示可能不明显的数据含义进行探索的能力。
- en: Exceptional interactions allow the users to steer their way through large amounts
    of information. It allows them to pan through data too large for a single display,
    to dive into summary information, and also zoom out to get a higher level view—in
    essence, it allows users to see the forest from the trees.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 优秀的交互允许用户在大量信息中找到自己的路径。它允许他们浏览单个显示无法容纳的数据，深入总结信息，并且可以放大以获得更高层次的视图——本质上，它允许用户从树木中看到森林。
- en: Also of great value is the capability to allow the user to easily select, reorder,
    and reposition visual elements. Through these actions, the user is able to see
    details of a datum simply by mouseover or touch, to rearrange items for exposing
    other insights, and to also see how data moves around when reordered. This provides
    the user a sense of constancy and shows how the data changes when asked to reshuffle
    on demand.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 同样非常有价值的是允许用户轻松选择、重新排序和重新定位视觉元素的能力。通过这些操作，用户可以通过鼠标悬停或触摸简单地查看数据的详细信息，重新排列项目以揭示其他见解，并且还可以看到数据在重新排序时的移动情况。这为用户提供了一种恒定的感觉，并显示了当需要重新排列时数据如何变化。
- en: In this chapter, we will examine a number of techniques for adding interactivity
    to your D3.js visualizations. We will examine concepts involved in using the mouse
    to highlight information and provide contextual information, to pan and zoom your
    visualizations, and to use brushing to select and zoom the view of information
    in and out.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨为您的D3.js可视化添加交互性的多种技术。我们将探讨使用鼠标突出显示信息、提供上下文信息、平移和缩放您的可视化以及使用刷选来选择和缩放信息视图的概念。
- en: 'Specifically, in this chapter we will learn the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中我们将学习以下主题：
- en: Hooking into mouse events on D3.js visuals
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 钩入D3.js可视化上的鼠标事件
- en: Clicking and responding to mouse events
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击和响应鼠标事件
- en: Building several models of visual animation to provide feedback on interaction
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建多个视觉动画模型以提供交互反馈
- en: Handling mouse hovers to provide detailed information on specific visuals
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理鼠标悬停以在特定视觉上提供详细信息
- en: Creating fluid animations that respond to mouse events
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建对鼠标事件做出响应的流畅动画
- en: Brushing and its use in selecting data
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 刷选及其在数据选择中的应用
- en: Implementing a context-focus pattern of interaction for viewing stock data
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现用于查看股票数据的上下文焦点交互模式
- en: Handling mouse events
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理鼠标事件
- en: The mouse is the most common device available to users for interacting with
    D3.js visualizations. Touch is commonly used in case of tablets, and in many cases,
    touch events can be mapped to mouse events. In this chapter, we will focus exclusively
    on the mouse. But most of everything we cover also applies to touch. Touch concepts
    such as pinching can also be easily supported on touch devices with D3.js.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标是用户与D3.js可视化交互最常用的设备。触摸在平板电脑的情况下常用，在许多情况下，触摸事件可以映射到鼠标事件。在本章中，我们将专注于鼠标。但我们涵盖的大部分内容也适用于触摸。D3.js还可以轻松支持触摸设备上的触摸概念，如捏合。
- en: To work with mouse events in D3.js, we attach event listeners to the SVG elements
    for which we desire to handle the events. The handlers are added using the `.on()`
    function, which takes as parameters the name of the event and a function to call
    when the mouse event happens.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要在D3.js中处理鼠标事件，我们为希望处理事件的SVG元素附加事件监听器。使用`.on()`函数添加处理程序，该函数接受事件名称和当鼠标事件发生时要调用的函数作为参数。
- en: 'We will examine the handling of four mouse events: `mousemove`, `mouseenter`,
    `mouseout`, and `click`.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨处理四个鼠标事件：`mousemove`、`mouseenter`、`mouseout`和`click`。
- en: Tracking the mouse position using mousemove
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用mousemove跟踪鼠标位置
- en: 'The movement of the mouse on an SVG visual is reported to your code by listening
    for the `mousemove` event. This following example demonstrates tracking and reporting
    the mouse position:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标在SVG可视化上的移动通过监听`mousemove`事件报告给您的代码。以下示例演示了跟踪和报告鼠标位置：
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (8.1): [http://goo.gl/VK67C4](http://goo.gl/VK67C4)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (8.1): [http://goo.gl/VK67C4](http://goo.gl/VK67C4)'
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We listen to `mousemove` events using `.on()`, passing it when the event fires,
    and the example updates the content of the text in the SVG text element:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `.on()` 监听 `mousemove` 事件，在事件触发时传递它，并更新 SVG 文本元素中的文本内容：
- en: '![Tracking the mouse position using mousemove](img/B04230_08_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![使用 mousemove 跟踪鼠标位置](img/B04230_08_01.jpg)'
- en: The position of the mouse is not passed to the function as parameters. To get
    the actual mouse position, we need to call the `d3.mouse()` function, passing
    it to the return value of `svg.node()`. This function then calculates the *X*
    and *Y* mouse position relative to the SVG element for which the mouse is moving
    over.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标的位置不会作为参数传递给函数。为了获取实际的鼠标位置，我们需要调用 `d3.mouse()` 函数，并将其传递给 `svg.node()` 的返回值。然后该函数计算鼠标相对于鼠标正在移动的
    SVG 元素的 *X* 和 *Y* 位置。
- en: Capturing the mouse entering and exiting an SVG element
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 捕获鼠标进入和退出 SVG 元素
- en: The mouse entering and exiting a particular SVG element is captured using the
    respective `mouseenter` and `mouseout` events. The following example shows this
    by creating several circles and then changing their color while the mouse is within
    the area of the circle (also known as **hovering**).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相应的 `mouseenter` 和 `mouseout` 事件捕获鼠标进入和退出特定 SVG 元素。以下示例通过创建几个圆并改变鼠标在圆区域内（也称为
    **悬停**）时的颜色来展示这一点。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (8.2): [http://goo.gl/4cfrdq](http://goo.gl/4cfrdq)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (8.2): [http://goo.gl/4cfrdq](http://goo.gl/4cfrdq)'
- en: 'This code creates three circles of varying size (`30`, `20`, and `40` pixel
    radius):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码创建了三个不同大小的圆（半径分别为 `30`、`20` 和 `40` 像素）：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Tracking the enter and exit of the mouse is performed by hooking into those
    two events:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过挂钩到这两个事件来跟踪鼠标的进入和退出：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When you run this example, you will be presented by three `steelblue` circles
    of slightly varying size, and when you hover the mouse over any of them you will
    see it change to `red`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行此示例时，你会看到三个大小略有不同的 `steelblue` 圆圈，并且当你将鼠标悬停在任何一个上面时，它会变成 `red`：
- en: '![Capturing the mouse entering and exiting an SVG element](img/B04230_08_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![捕获鼠标进入和退出 SVG 元素](img/B04230_08_02.jpg)'
- en: Note that the SVG element which the mouse is currently entering or exiting is
    not passed to the functions, so we need to retrieve them using `d3.select(this)`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当前鼠标正在进入或退出的 SVG 元素不会传递给函数，因此我们需要使用 `d3.select(this)` 来检索它们。
- en: Letting the user know they have clicked the mouse
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让用户知道他们已经点击了鼠标
- en: 'When the user clicks a button on the mouse, the mouse can track the mouse being
    clicked by using the `mouseclick` event. The code at the following link demonstrates
    handling the click event handler:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在鼠标上点击按钮时，可以使用 `mouseclick` 事件跟踪被点击的鼠标。以下链接中的代码演示了处理点击事件处理器：
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (8.3): [http://goo.gl/91rt4S](http://goo.gl/91rt4S)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (8.3): [http://goo.gl/91rt4S](http://goo.gl/91rt4S)'
- en: 'This code adds an event handler to the code in example *8.2* to capture the
    click event and pop up an alert box that shows the value of the datum and its
    position in the collection:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码向示例 *8.2* 中的代码添加了一个事件处理器，以捕获点击事件并弹出一个显示数据值及其在集合中位置的警告框：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Letting the user know they have clicked the mouse](img/B04230_08_03.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![让用户知道他们已经点击了鼠标](img/B04230_08_03.jpg)'
- en: This is pretty neat as you are given the data underlying the visual that you
    clicked. There is no need to retain a map of the visuals to the data to just look
    this up.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常方便，因为你可以得到你点击的视觉背后的数据。无需保留视觉到数据的映射，只需查找即可。
- en: Using behaviors to drag, pan, and zoom
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用行为来拖动、平移和缩放
- en: Mouse events often need to be combined to create more complex interactions such
    as drag, pan, and zoom. Normally, this requires a good quantity of code to track
    sequences of the `mouseenter`, `mousemove`, and `mouseexit` events.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标事件通常需要组合起来创建更复杂的交互，如拖动、平移和缩放。通常，这需要大量的代码来跟踪 `mouseenter`、`mousemove` 和 `mouseexit`
    事件的序列。
- en: D3.js provides us with a better way of implementing these interactions through
    the use of **behaviors**. These behaviors are a complex set of DOM/SVG interactions
    through D3.js itself handling the mouse events. In a sense, behaviors function
    similarly to gesture recognizers on mobile platforms.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 通过使用 **行为** 提供了一种更好的方式来实现这些交互。这些行为是通过 D3.js 本身处理鼠标事件的一组复杂的 DOM/SVG 交互。在某种程度上，行为在移动平台上的手势识别器功能上作用相似。
- en: 'D3.js currently provides two built-in behaviors:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js 目前提供了两种内置的行为：
- en: '**Drag**: This tracks mouse or multi-touch movements relative to an origin'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拖动**：这跟踪相对于原点的鼠标或多点触控移动'
- en: '**Zoom**: This emits zoom and pan events in response to dragging or pinching'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Zoom**: 在拖动或捏合时，此功能会发出缩放和平移事件'
- en: Let's examine an example of implementing drag and another that also adds pan
    and zoom capabilities.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考察一个实现拖动的示例，以及另一个也添加了平移和缩放功能的示例。
- en: Drag
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拖动
- en: 'Drag is a common behavior in interactive visualization that allows the movement
    of visual elements by the user via the mouse or touch. The following example demonstrates
    using the drag behavior:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 拖动是交互式可视化中的一种常见行为，允许用户通过鼠标或触摸移动视觉元素。以下示例演示了使用拖动行为：
- en: Note
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (8.4): [http://goo.gl/wxn6iN](http://goo.gl/wxn6iN)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (8.4): [http://goo.gl/wxn6iN](http://goo.gl/wxn6iN)'
- en: 'The preceding example renders four circles and lets you move them around the
    SVG area using the mouse, but also constrains the movement so that the circles
    remain completely within the SVG element''s visual area:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例渲染了四个圆圈，并允许您使用鼠标在 SVG 区域内移动它们，但同时也限制了移动，以确保圆圈完全位于 SVG 元素的视觉区域内：
- en: '![Drag](img/B04230_08_04.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Drag](img/B04230_08_04.jpg)'
- en: 'The code begins by calculating the positions for the circles and rendering
    them using a selection. The drag behavior is then implemented with the following
    code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 代码首先计算圆圈的位置，并使用选择进行渲染。然后，使用以下代码实现拖动行为：
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The behavior is created using `d3.behavior.drag()`. This object then requires
    us to tell it that we are interested in listening to `drag` events. You can also
    specify handlers for `dragstart` and `dragged` events to identify the start and
    completion of a drag behavior.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 该行为是通过使用 `d3.behavior.drag()` 创建的。然后，此对象要求我们告知它我们感兴趣的是监听 `drag` 事件。您还可以指定 `dragstart`
    和 `dragged` 事件的处理器，以识别拖动行为的开始和完成。
- en: Next, we need to inform D3.js to hook up the behavior to SVG elements. This
    is done by using the `.call()` function on the selection. As we saw when rendering
    axes, the function we specified will be called by D3.js during the rendering of
    each selected item. In this case, this will be our drag behavior, and hence, the
    implementation of this function can perform all the event processing needed for
    dragging an SVG element on our behalf.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要通知 D3.js 将行为连接到 SVG 元素。这是通过在选择上使用 `.call()` 函数来完成的。正如我们在渲染坐标轴时看到的，我们指定的函数将由
    D3.js 在渲染每个选定项目时调用。在这种情况下，这将是我们拖动行为，因此，此函数的实现可以为我们执行所有必要的拖动 SVG 元素的事件处理。
- en: Our event handler for the drag behavior is then called whenever the user drags
    an associated SVG element. This function first retrieves the new `x` and `y` position
    for the item being dragged from the `d3.event` object. These values are computed
    and set by D3.js prior to this function being called.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户拖动相关 SVG 元素时，我们的拖动行为事件处理程序就会被调用。此函数首先从 `d3.event` 对象中检索正在拖动的项目的新的 `x` 和 `y`
    位置。这些值在调用此函数之前由 D3.js 计算并设置。
- en: All that is required at this point is to set a new transform for the respective
    SVG element to move it into the new position. This example also checks that the
    circle is still completely within the SVG element and only sets the new position
    if that is `true`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 目前所需的所有操作只是为相应的 SVG 元素设置一个新的变换，将其移动到新位置。此示例还检查圆圈是否仍然完全位于 SVG 元素内，并且只有在该条件为 `true`
    时才设置新位置。
- en: Pan and zoom
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平移和缩放
- en: Panning and zooming are two common techniques in data visualization. Panning
    allows the user to drag the entire visual around the screen. This exposes visuals
    that would otherwise be rendered outside of the bounds of the visual area. A common
    scenario for panning is to move a map around to expose areas previously out of
    view.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 平移和缩放是数据可视化中的两种常见技术。平移允许用户将整个视觉在屏幕上拖动。这可以揭示原本在视觉区域外渲染的视觉。平移的一个常见场景是将地图拖动以显示之前不可见的区域。
- en: Zooming allows you to scale up or down the perceived distance of the user from
    the visual. This can be used to make small items bigger or to zoom out to see
    items that were too big or out of the extent of the visual display.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放允许您放大或缩小用户与视觉之间的感知距离。这可以用来放大小物品，或者缩放以查看太大或超出视觉显示范围的物品。
- en: 'Both panning and zooming are implemented by the same D3.js behavior, `d3.behavior.zoom()`.
    The following example demonstrates its use:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 平移和缩放都通过相同的 D3.js 行为 `d3.behavior.zoom()` 实现。以下示例演示了其用法：
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (8.5): [http://goo.gl/tEY0hm](http://goo.gl/tEY0hm)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (8.5): [http://goo.gl/tEY0hm](http://goo.gl/tEY0hm)'
- en: 'When running this example, you can not only drag the circles, but you can drag
    the background to move all the circles at once (the pan) and use your mouse wheel
    to zoom in and out:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行此示例时，您不仅可以拖动圆圈，还可以拖动背景以同时移动所有圆圈（平移）并使用鼠标滚轮进行缩放：
- en: '![Pan and zoom](img/B04230_08_05.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![平移和缩放](img/B04230_08_05.jpg)'
- en: 'There are a few small changes to the previous example for adding these additional
    features. These start with the declaration of the zoom behavior:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加这些附加功能，对之前的示例进行了一些小的修改。这些修改从声明缩放行为开始：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The initial zoom level is `1.0`. The call `to .scaleExtent()` informs the behavior
    that it should zoom down to `0.1`, one-tenth of the original size, and up to `10`,
    or 10x of the original. Moreover, the behavior should call the `onZoom()` function
    when zoom events occur .
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 初始缩放级别为`1.0`。调用`to .scaleExtent()`通知行为，它应该缩小到`0.1`，即原始尺寸的十分之一，并放大到`10`，即原始尺寸的10倍。此外，当发生缩放事件时，行为应调用`onZoom()`函数。
- en: 'Now we create the main SVG element and attach the zoom behavior to it using
    `.call()`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们创建主SVG元素，并使用`.call()`将其缩放行为附加到它：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The code also appends a group element to the SVG element and the `svg` variable
    then refers to this group. The pan and zoom events are routed by the top level
    SVG element to our handler, which then sets the translate and scale factor on
    this group, therefore creating the effects on the circles.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 代码还向SVG元素添加了一个组元素，然后`svg`变量就引用了这个组。平移和缩放事件通过顶级SVG元素路由到我们的处理器，然后处理器设置此组上的平移和缩放因子，因此对圆圈产生效果。
- en: 'Now we just need to implement the `zoomIt` function:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要实现`zoomIt`函数：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Just before the behavior calls this function, it sets the `d3.event.translate`
    variable to represent the extent of translation that should occur on the entire
    visual.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在行为调用此函数之前，它将`d3.event.translate`变量设置为表示整个视觉应该发生的平移范围。
- en: The `d3.event.scale` variable is also set by D3.js to represent the appropriate
    level of zoom. In this example, this ranges from 0.1 to 10.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`d3.event.scale`变量也由D3.js设置，以表示适当的缩放级别。在此示例中，这个范围从0.1到10。'
- en: Another small change is in the way the drag behavior is declared.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个小改动是在声明拖动行为的方式上。
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is done because there will be an issue with the example if this is not
    modified in the preceding manner. If left as-is, the pan and zoom behavior and
    the drag behavior will conflict with each other. When dragging a circle, the `svg`
    element will also pan when it should stay in place.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做是因为如果以这种方式修改，示例将出现问题。如果保持原样，平移和缩放行为以及拖动行为将相互冲突。当拖动圆圈时，`svg`元素也会平移，而它应该保持在原位。
- en: By handling the `dragstart` event and calling `d3.event.sourceEvent.stopPropagation()`,
    we prevent this mouse event on a circle from **bubbling up** to the `svg` element
    and starting a pan. Problem solved!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过处理`dragstart`事件并调用`d3.event.sourceEvent.stopPropagation()`，我们防止了在圆圈上的鼠标事件向上冒泡到`svg`元素并开始平移。问题解决！
- en: Enhancing a bar graph with interactivity
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强条形图的交互性
- en: Now let's apply what we have learned about mouse event handling to create an
    interactive bar graph. Mouse events on a bar chart can provide useful contextual
    information to the person interacting with the graph.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将我们关于鼠标事件处理所学的知识应用到创建交互式条形图。条形图上的鼠标事件可以为与图表交互的人提供有用的上下文信息。
- en: The data for the examples will use a stripped-down version of the life expectancy
    vs fertility dataset that was used in earlier chapters. This dataset will use
    the data for the Latin American and Caribbean economic regions only, which contain
    roughly 35 countries, for the year 2013.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 示例数据将使用早期章节中使用的预期寿命与生育率数据集的简化版。此数据集仅使用拉丁美洲和加勒比海经济区域的数据，这些区域大约包含35个国家，数据年份为2013年。
- en: The bars in the examples will represent the longevity, will be annotated at
    the top with the country code, and have vertically oriented text representing
    the actual longevity value and the full country name. The examples will omit axes
    and margins to keep things simple.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中的条形图将代表长寿，顶部将标注国家代码，并垂直排列的文本表示实际的长寿值和完整的国家名称。示例将省略坐标轴和边距以保持简单。
- en: 'The code and live example for this example is available at the following location:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的代码和实时示例可在以下位置找到：
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (8.6): [http://goo.gl/8jb9Rn](http://goo.gl/8jb9Rn)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (8.6): [http://goo.gl/8jb9Rn](http://goo.gl/8jb9Rn)'
- en: 'This interaction pattern can be used to visually accentuate a particular bar
    in a bar chart when the mouse is moved over it. We have seen this when using `mouseenter`
    and `mouseout` events earlier as applied to circles. Here, we will use it to highlight
    the bar:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标移到条形图上时，这种交互模式可以用来视觉上强调特定的条形。我们之前在应用于圆的`mouseenter`和`mouseout`事件中看到了这一点。这里，我们将用它来突出条形：
- en: '![Enhancing a bar graph with interactivity](img/B04230_08_06.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![增强条形图的交互性](img/B04230_08_06.jpg)'
- en: 'The rectangles representing the bars are created with the following code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 创建表示条形的矩形使用以下代码：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After the creation of the bars, the code hooks up the `mouseover` and `mouseout`
    events. The `mouseover` event makes the vertical text completely opaque and sets
    the bar color to orange:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建条形图之后，代码将`mouseover`和`mouseout`事件连接起来。`mouseover`事件使垂直文本完全不透明，并将条形图颜色设置为橙色：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `mouseout` event animates and sets the text opacity back to the original
    value and starts an animation to set the color back to its original shade. This
    animation gives the appearance of mouse trails when moving across the bars:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`mouseout`事件动画化并设置文本不透明度回到原始值，并开始动画将颜色恢复到原始色调。这个动画在移动到条形图上时给出了鼠标轨迹的视觉效果：'
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The last portion of the selection creating the bars performs an animation to
    make the bars grow and transition from black to their eventual colors which the
    graph loads:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 创建条形图的最后部分执行动画，使条形图增长并从黑色过渡到图形加载的最终颜色：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To also enhance the presentation of the underlying information, we will place
    two pieces of data on each bar: the country code as horizontal text at the top
    and a piece of vertical text which shows the actual value of the datum and the
    full name of the country. The following code creates the horizontal text:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强底层信息的展示，我们将在每个条形上放置两份数据：国家代码作为顶部水平文本，以及显示数据实际值和国家全名的垂直文本。以下代码创建水平文本：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The vertical text is created by the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直文本由以下代码创建：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Highlighting selected items using brushes
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用画笔突出显示选定的项目
- en: A **brush** in D3.js provides the ability for the user to interact with your
    visualization by allowing the selection of one or more visual elements (and the
    underlying data items) using the mouse.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js中的**画笔**提供了用户通过允许使用鼠标选择一个或多个视觉元素（以及相关的数据项）与你的可视化进行交互的能力。
- en: This is a very important concept in exploratory data analysis and visualization,
    as it allows users to easily drill in and out of data or select specific data
    items for further analysis.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在探索性数据分析与可视化中的一个非常重要的概念，因为它允许用户轻松地钻入和钻出数据或选择特定的数据项进行进一步分析。
- en: Brushing in D3.js is very flexible, and how you implement it depends upon the
    type of visualization you are presenting to the user. We will look at several
    examples or brushes and then implement a real example that lets us use a brush
    to examine stock data.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js中的画笔非常灵活，你如何实现它取决于你向用户展示的视觉化的类型。我们将查看几个画笔的示例，然后实现一个真实示例，让我们可以使用画笔来检查股票数据。
- en: Online examples of brushes
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 画笔的在线示例
- en: To understand brushes, let's first take a look at several brush examples on
    the Internet. These are all examples available on the web that you can go and
    play with.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解画笔，让我们首先看看互联网上的一些画笔示例。这些都是你可以去玩玩的网络上的示例。
- en: 'The following brush shows the use of rectangular selection for selecting data
    that is within the brush ([http://bl.ocks.org/mbostock/4343214](http://bl.ocks.org/mbostock/4343214)):'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下画笔显示了使用矩形选择来选择画笔内部的数据的方法([http://bl.ocks.org/mbostock/4343214](http://bl.ocks.org/mbostock/4343214))：
- en: '![Online examples of brushes](img/B04230_08_07.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![画笔的在线示例](img/B04230_08_07.jpg)'
- en: 'Another example of this brushing is the scatterplot matrix brush at [http://bl.ocks.org/mbostock/4063663](http://bl.ocks.org/mbostock/4063663).
    This example is notable for the way in which you can select points on any one
    of the scatter plots. The app then selects the points on all the other plots so
    that the data is highlighted on those too:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这种画笔的另一个例子是[http://bl.ocks.org/mbostock/4063663](http://bl.ocks.org/mbostock/4063663)上的散点图矩阵画笔。这个例子值得注意的是你可以选择任何散点图上的点。然后应用程序会选择其他所有图上的点，以便在这些图上突出显示数据：
- en: '![Online examples of brushes](img/B04230_08_08.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![画笔的在线示例](img/B04230_08_08.jpg)'
- en: 'The following example demonstrates using a brush to select a point within a
    force-directed network visualization ([http://bl.ocks.org/mbostock/4565798](http://bl.ocks.org/mbostock/4565798)):'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何使用画笔在力导向网络可视化中选择一个点（[http://bl.ocks.org/mbostock/4565798](http://bl.ocks.org/mbostock/4565798)）：
- en: '![Online examples of brushes](img/B04230_08_09.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![画笔的在线示例](img/B04230_08_09.jpg)'
- en: Note
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We will learn about force-directed network visualizations in greater detail
    in [Chapter 11](ch11.html "Chapter 11. Visualizing Information Networks"), *Visualizing
    Information Networks*.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第11章[可视化信息网络](ch11.html "第11章. 可视化信息网络")中更详细地了解力导向网络可视化。
- en: The creation of custom brush handles is a common scenario you will see when
    using brushes. Handles provide you a means of providing a custom rendering of
    the edges of the brush to provide a visual cue to the user.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用画笔时，创建自定义画笔手柄是一个常见的场景。手柄为你提供了一种方式，可以自定义画笔边缘的渲染，从而为用户提供视觉提示。
- en: 'As an example of a custom brush, the following creates semicircles as the handles:
    [http://bl.ocks.org/mbostock/4349545](http://bl.ocks.org/mbostock/4349545).'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 作为自定义画笔的一个例子，以下代码创建半圆形作为手柄：[http://bl.ocks.org/mbostock/4349545](http://bl.ocks.org/mbostock/4349545)。
- en: 'You can resize the brush by dragging either handle and reposition it by dragging
    the area between the handles:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过拖动任一手柄来调整画笔的大小，并通过拖动手柄之间的区域来重新定位它：
- en: '![Online examples of brushes](img/B04230_08_10.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![画笔的在线示例](img/B04230_08_10.jpg)'
- en: 'The last example of a brush (before we create our own) is the following, which
    demonstrates a concept referred to as `focus + context`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建自己的画笔之前，最后一个画笔的例子如下，它演示了一个被称为“焦点+上下文”的概念：
- en: '![Online examples of brushes](img/B04230_08_11.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![画笔的在线示例](img/B04230_08_11.jpg)'
- en: In this example, the brush is drawn atop the smaller graph (the context). The
    context graph is static in nature, showing a summary of the entire range of data.
    As the brush is changed upon the context, the larger graph (the focus) animates
    in real-time while the brush is changed.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，画笔被绘制在较小的图形（上下文）之上。上下文图是静态的，显示了整个数据范围的总览。当画笔在上下文中改变时，较大的图形（焦点）会实时动画化，同时画笔被改变。
- en: In the next section, we will examine creating a similar version of this graph
    which utilizes financial data, a common domain for this type of interactive visualization.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨创建一个类似版本的图形，该图形利用金融数据，这是此类交互式可视化的常见领域。
- en: Implementing focus + context
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现焦点+上下文
- en: 'Now let''s examine how to implement **focus + context**. The following example
    that we will use will apply this concept to a series of stock data:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来探讨如何实现**焦点+上下文**。以下我们将使用的示例将此概念应用于一系列股票数据：
- en: Note
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (8.7): [http://goo.gl/Niyc56](http://goo.gl/Niyc56)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (8.7): [http://goo.gl/Niyc56](http://goo.gl/Niyc56)'
- en: 'The resulting graph will look like the following graph:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的图形将类似于以下图形：
- en: '![Implementing focus + context](img/B04230_08_12.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![实现焦点+上下文](img/B04230_08_12.jpg)'
- en: The top graph is the focus of the chart and represents the detail of the stock
    data that we are examining. The bottom graph is the context and is always a plot
    of the full series of data. In this example, we focus on data from just before
    the start of 2010 until just after the start of 2012.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部的图形是图表的焦点，表示我们正在检查的股票数据的详细信息。底部的图形是上下文，始终是整个数据系列的图表。在这个例子中，我们关注的是2010年初到2012年初的数据。
- en: The context area supports brushing. You can create a new brush by clicking on
    the context graph and dragging the mouse to select the extents of the brush. The
    brush can then be slid back and forth by dragging it, and it can be resized on
    the left and right by dragging either boundary. The focus area will always display
    the details of the area selected by the context.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文区域支持画笔操作。你可以通过点击上下文图并拖动鼠标来创建新的画笔，选择画笔的范围。然后可以通过拖动来滑动画笔，并且可以通过拖动任一边界在左右两侧调整其大小。焦点区域将始终显示上下文选择的区域详情。
- en: 'To create this visualization, we will be drawing two different graphs, and
    hence, we need to layout the vertical areas for each and create the main SVG element
    with a size enough to hold both:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建这个可视化，我们将绘制两个不同的图形，因此，我们需要为每个图形布局垂直区域，并创建一个足够大的主要SVG元素来容纳两者：
- en: '[PRE15]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This example will also require the creation of a clipping area. As the line
    drawn in the focus area scales, it may be drawn overlapping on the left with the
    *y* axis. The clipping area prevents the line from flowing off to the left over
    the axis:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例还需要创建一个裁剪区域。当焦点区域的线条按比例缩放时，它可能会与*y*轴重叠在左侧。裁剪区域防止线条在轴上向左流动：
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This clipping rectangle is referred to in the styling for the lines. When the
    lines are drawn, they will be clipped to this boundary. We will see how this is
    specified when examining the function to style the lines.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个裁剪矩形在线条的样式中被引用。当线条被绘制时，它们将被裁剪到这个边界。我们将在检查用于样式化线条的函数时看到这是如何指定的。
- en: 'Now we add two groups that will hold the renderings for both the focus and
    context graphs:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们添加两个组，将分别包含焦点和上下文图的渲染：
- en: '[PRE17]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This visual requires one *y* axis, two *x* axes, and the appropriate scales
    for each. These are created with the following code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个可视化需要一个*y*轴，两个*x*轴，以及每个轴的适当比例。这些是通过以下代码创建的：
- en: '[PRE18]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We will be drawing two lines, so we create the two line generators, one for
    each of the lines:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将绘制两条线，因此我们创建了两个线生成器，每个线一个：
- en: '[PRE19]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The last thing we need to do before loading the data and actually rendering
    it is to create our brush using `d3.svg.brush()`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载数据并实际渲染之前，我们需要做最后一件事情，就是使用`d3.svg.brush()`创建我们的画笔：
- en: '[PRE20]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This preceding snippet informs the brush that we want to brush along the `x`
    values using the scale defined in `xScaleBottom`. Brushes are event-driven and
    will handle the `brush` event, which is raised every time the brush is moved or
    resized.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这个前置片段通知画笔，我们想要使用在`xScaleBottom`中定义的比例在`x`值上画笔。画笔是事件驱动的，并将处理`brush`事件，每当画笔移动或调整大小时都会触发此事件。
- en: 'And finally, the last major thing the code does is load the data and establish
    the initial visuals. You''ve seen this code before, so we won''t explain it step
    by step. In short, it consists of loading the data, setting the domains on the
    scales, and adding and drawing the axes and lines:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，代码所做的最后一件主要事情是加载数据并建立初始可视化。你之前已经见过这段代码，所以我们不会一步一步地解释它。简而言之，它包括加载数据，设置比例的域，以及添加和绘制轴和线条：
- en: '[PRE21]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Congratulations! You have stepped through creating a fairly complicated interactive
    display of stock data. But the beauty is that through the underlying capabilities
    of D3.js, it was comprised of a relatively small set of simple steps that result
    in **Beautiful Data**.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经完成了创建一个相当复杂的股票数据交互式显示的过程。但美的是，通过D3.js的底层功能，它由一系列相对简单的步骤组成，最终实现了**美丽的数据**。
- en: Summary
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to use mouse events provided by D3.js to create
    interactive visualization. We started by explaining how to hook up mouse events
    and respond to them, changing the visualization as the events occurred. Then we
    examined behaviors and how we can use them to implement drag, pan, and zoom, which
    allow the user to move around data, take a closer look, as well as zoom in and
    out. Finally, we covered brushing and how it can be used to select multiple visuals/data
    items, ending with a slick example of applying **focus + context** to visualize
    financial data.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用D3.js提供的鼠标事件来创建交互式可视化。我们首先解释了如何连接鼠标事件并对其做出响应，随着事件的发生改变可视化。然后我们检查了行为，以及我们如何使用它们来实现拖动、平移和缩放，这使用户能够移动数据，更仔细地查看，以及进行放大和缩小。最后，我们介绍了画笔及其如何用于选择多个可视化/数据项，并以一个应用**焦点
    + 上下文**来可视化财务数据的流畅示例结束。
- en: In the next chapter on layouts, we will move a little higher up the visual stack
    of D3.js to examine layouts, which are essentially generators for complex data
    visualizations.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章关于布局的内容中，我们将稍微提升到D3.js的视觉堆栈中，以检查布局，布局本质上是为复杂数据可视化生成器。
