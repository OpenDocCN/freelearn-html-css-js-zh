["```js\nnpm init -y \n```", "```js\n`bootstrap` \n```", "```js\n`express` \n```", "```js\n`helmet` \n```", "```js\n`http-proxy` \n```", "```js\nnpm install bootstrap@5.3.2\nnpm install express@4.18.2\nnpm install helmet@7.1.0\nnpm install http-proxy@1.18.1 \n```", "```js\n`@tsconfig/node20` \n```", "```js\n`npm-run-all` \n```", "```js\n`tsc-watch` \n```", "```js\n`typescript` \n```", "```js\n`webpack` \n```", "```js\n`webpack-cli` \n```", "```js\n`webpack-dev-server` \n```", "```js\nnpm install --save-dev @tsconfig/node20\nnpm install --save-dev npm-run-all@4.1.5\nnpm install --save-dev tsc-watch@6.0.4\nnpm install --save-dev typescript@5.2.2\nnpm install --save-dev webpack@5.89.0\nnpm install --save-dev webpack-cli@5.1.4\nnpm install --save-dev webpack-dev-server@4.15.1 \n```", "```js\n`@types/express` \n```", "```js\n`@types/node` \n```", "```js\nnpm install --save-dev @types/express@4.17.20\nnpm install --save-dev @types/node@20.6.1 \n```", "```js\n{\n    \"extends\": \"@tsconfig/node20/tsconfig.json\",\n     \"compilerOptions\": {                     \n         \"rootDir\": \"src/server\", \n         \"outDir\": \"dist/server/\"\n     },\n     \"include\": [\"src/server/**/*\"]\n} \n```", "```js\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\nexport default  {\n    mode: \"development\",\n    entry: \"./src/client/client.js\",\n    devtool: \"source-map\",  \n    output: {\n        path: path.resolve(__dirname, \"dist/client\"),\n        filename: \"bundle.js\"\n    },\n    devServer: {\n        static: [\"./static\"],       \n        port: 5100,\n        client: { webSocketURL: \"http://localhost:5000/ws\" }\n    }\n}; \n```", "```js\n...\n\"scripts\": {\n   ** \"server\": \"****tsc-watch --noClear --onsuccess \\\"node dist/server/server.js\\\"\",**\n **\"client\": \"webpack serve\",**\n **\"start\": \"npm-run-all --parallel server client\"**\n},\n... \n```", "```js\nimport { createServer } from \"http\";\nimport express, {Express } from \"express\";\nimport { testHandler } from \"./testHandler\";\nimport httpProxy from \"http-proxy\";\nimport helmet from \"helmet\";\nconst port = 5000;\nconst expressApp: Express = express();\nconst proxy = httpProxy.createProxyServer({\n    target: \"http://localhost:5100\", ws: true\n});\nexpressApp.use(helmet());\nexpressApp.use(express.json());\nexpressApp.post(\"/test\", testHandler);\nexpressApp.use(express.static(\"static\"));\nexpressApp.use(express.static(\"node_modules/bootstrap/dist\"));\nexpressApp.use((req, resp) => proxy.web(req, resp));\nconst server = createServer(expressApp);\nserver.on('upgrade', (req, socket, head) => proxy.ws(req, socket, head));\nserver.listen(port,\n    () => console.log(`HTTP Server listening on port ${port}`)); \n```", "```js\nimport { Request, Response } from \"express\";\nexport const testHandler = async (req: Request, resp: Response) => {  \n    resp.setHeader(\"Content-Type\", \"application/json\")\n    resp.json(req.body);\n    resp.end();      \n} \n```", "```js\n<!DOCTYPE html>\n<html>\n    <head>\n        <script src=\"img/bundle.js\"></script>\n        <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n        <button id=\"btn\" class=\"btn btn-primary m-2\">Send Request</button>\n        <table class=\"table table-striped\">\n            <tbody>\n                <tr><th>Status</th><td id=\"msg\"></td></tr>\n                <tr><th>Response</th><td id=\"body\"></td></tr>\n            </tbody>\n       </table>\n    </body>\n</html> \n```", "```js\ndocument.addEventListener('DOMContentLoaded', function() {\n    document.getElementById(\"btn\").addEventListener(\"click\", sendReq);\n});\nsendReq = async () => {\n    const response = await fetch(\"/test\", {\n        method: \"POST\", body: JSON.stringify({message: \"Hello, World\"}),\n        headers: { \"Content-Type\": \"application/json\" }\n    });\n    document.getElementById(\"msg\").textContent = response.statusText;\n    document.getElementById(\"body\").innerHTML = await response.text();\n}; \n```", "```js\nnpm start \n```"]