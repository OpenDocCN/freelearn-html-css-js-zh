["```js\n<div id=\"linear\" class=\"clear\"><span>n</span></div> \n<div id=\"linear-capped\" class=\"clear\"> \n    <span>1 &lt;= a*n + b &lt;= 20</span> \n</div> \n<div id=\"pow\" class=\"clear\"><span>n^2</span></div> \n<div id=\"pow-capped\" class=\"clear\"> \n    <span>1 &lt;= a*n^2 + b &lt;= 10</span> \n</div> \n<div id=\"log\" class=\"clear\"><span>log(n)</span></div> \n<div id=\"log-capped\" class=\"clear\"> \n    <span>1 &lt;= a*log(n) + b &lt;= 10</span> \n</div> \n\n<script type=\"text/javascript\"> \n    var max = 11, data = []; \n    for (var i = 1; i < max; ++i) data.push(i); \n\n    var linear = d3.scaleLinear() // <-A \n        .domain([1, 10]) // <-B \n        .range([1, 10]); // <-C         \n    var linearCapped = d3.scaleLinear() \n        .domain([1, 10])         \n        .range([1, 20]); // <-D \n\n    var pow = d3.scalePow().exponent(2); // <-E \n    var powCapped = d3.scalePow() // <-F \n        .exponent(2) \n        .domain([1, 10]) \n        .rangeRound([1, 10]); // <-G \n\n    var log = d3.scaleLog(); // <-H \n    var logCapped = d3.scaleLog() // <-I \n        .domain([1, 10]) \n        .rangeRound([1, 10]); \n\n    function render(data, scale, selector) { \n        d3.select(selector).selectAll(\"div\") \n                    .data(data) \n                .enter() \n                .append(\"div\") \n                    .classed(\"cell\", true) \n                    .style(\"display\", \"inline-block\") \n                    .text(function (d) { \n                        return d3.format(\".2\")(scale(d), 2); \n                    }); \n    } \n\n    render(data, linear, \"#linear\"); \n    render(data, linearCapped, \"#linear-capped\"); \n    render(data, pow, \"#pow\"); \n    render(data, powCapped, \"#pow-capped\"); \n    render(data, log, \"#log\"); \n    render(data, logCapped, \"#log-capped\"); \n</script> \n\n```", "```js\n    var linear = d3.scaleLinear() // <-A \n        .domain([1, 10]) // <-B \n        .range([1, 10]); // <-C         \n\n```", "```js\n    var linearCapped = d3.scaleLinear() \n        .domain([1, 10])         \n        .range([1, 20]); // <-D \n\n```", "```js\n    var pow = d3.scalePow().exponent(2); // <-E \n\n```", "```js\n    var powCapped = d3.scalePow() // <-F \n        .exponent(2) \n        .domain([1, 10]) \n        .rangeRound([1, 10]); // <-G \n\n```", "```js\n    var log = d3.scale.log(); // <-H \n\n```", "```js\n    var logCapped = d3.scaleLog() // <-I \n        .domain([1, 10]) \n        .rangeRound([1, 10]); \n\n```", "```js\n<div id=\"time\" class=\"clear\"> \n    <span>Linear Time Progression<br></span> \n    <span>Mapping [01/01/2016, 12/31/2016] to [0, 1200]<br></span> \n</div> \n\n<script type=\"text/javascript\"> \n    var start = new Date(2016, 0, 1), // <-A \n        end = new Date(2016, 11, 31), \n        range = [0, 1200], \n        time = d3.scaleTime().domain([start, end]) // <-B \n            .rangeRound(range), // <-C \n        max = 12, \n        data = []; \n\n    for (var i = 0; i < max; ++i){ // <-D \n        var date = new Date(start.getTime()); \n        date.setMonth(start.getMonth() + i); \n        data.push(date); \n    } \n\n    function render(data, scale, selector) { // <-E \n        d3.select(selector).selectAll(\"div.fixed-cell\") \n                    .data(data) \n                .enter() \n                    .append(\"div\") \n                        .classed(\"fixed-cell\", true) \n                        .style(\"margin-left\", function(d){ // <-F \n                            return scale(d) + \"px\"; \n                        }) \n                        .html(function (d) { // <-G \n                            var format = d3.timeFormat(\"%x\"); // <-H \n                            return format(d) + \"<br>\" + scale(d) + \"px\"; \n                        }); \n    } \n\n    render(data, time, \"#time\"); \n</script> \n\n```", "```js\nvar start = new Date(2016, 0, 1), // <-A \n        end = new Date(2016, 11, 31), \n        range = [0, 1200], \n        time = d3.scaleTime().domain([start, end]) // <-B \n            .rangeRound(range), // <-C \n\n```", "```js\n    for (var i = 0; i < max; ++i){ // <-D \n        var date = new Date(start.getTime()); \n        date.setMonth(start.getMonth() + i); \n        data.push(date); \n    } \n\n```", "```js\n.style(\"margin-left\", function(d){ // <-F \n    return scale(d) + \"px\"; \n}) \n\n```", "```js\n.html(function (d) { // <-G \n    var format = d3.timeFormat(\"%x\"); // <-H \n    return format(d) + \"<br>\" + scale(d) + \"px\"; \n}); \n\n```", "```js\n<div id=\"alphabet\" class=\"clear\"> \n    <span>Ordinal Scale with Alphabet<br></span> \n    <span>Mapping [1..10] to [\"a\"..\"j\"]<br></span> \n</div> \n<div id=\"category10\" class=\"clear\"> \n    <span>Ordinal Color Scale Category 10<br></span> \n    <span>Mapping [1..10] to category 10 colors<br></span> \n</div> \n<div id=\"category20\" class=\"clear\"> \n    <span>Ordinal Color Scale Category 20<br></span> \n    <span>Mapping [1..10] to category 20 colors<br></span> \n</div> \n<div id=\"category20b\" class=\"clear\"> \n    <span>Ordinal Color Scale Category 20b<br></span> \n    <span>Mapping [1..10] to category 20b colors<br></span> \n</div> \n<div id=\"category20c\" class=\"clear\"> \n    <span>Ordinal Color Scale Category 20c<br></span> \n    <span>Mapping [1..10] to category 20c colors<br></span> \n</div> \n\n<script type=\"text/javascript\"> \n    var max = 10, data = []; \n\n    for (var i = 1; i <= max; ++i) data.push(i); // <-A \n\n    var alphabet = d3.scaleOrdinal() // <-B \n        .domain(data) \n        .range([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]); \n\n    function render(data, scale, selector) { // <-C \n        var cells  = d3.select(selector).selectAll(\"div.cell\") \n                .data(data); \n\n        cells.enter() \n                .append(\"div\") \n                    .classed(\"cell\", true) \n                    .style(\"display\", \"inline-block\") \n                    .style(\"background-color\", function(d){  // <-D \n                        return scale(d).indexOf(\"#\") >=0 ?  \n                                             scale(d) : \"white\"; \n                    }) \n                    .text(function (d) { // <-E \n                        return scale(d); \n                    }); \n    } \n\n    render(data, alphabet, \"#alphabet\"); // <-F \nrender(data, d3.scaleOrdinal(d3.schemeCategory10),  \n                                      \"#category10\"); \nrender(data, d3.scaleOrdinal(d3.schemeCategory20),  \n                                      \"#category20\"); \nrender(data, d3.scaleOrdinal(d3.schemeCategory20b),  \n                                      \"#category20b\"); \nrender(data, d3.scaleOrdinal(d3.schemeCategory20c),  \n                                      \"#category20c\"); // <-G \n</script> \n\n```", "```js\nfor (var i = 0; i < max; ++i) data.push(i); // <-A     \nvar alphabet = d3.scaleOrdinal() // <-B \n    .domain(data) \n.range([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]); \n\n```", "```js\n.style(\"background-color\", function(d){  // <-D \n    return scale(d).indexOf(\"#\")>=0 ? scale(d) : \"white\"; \n}) \n\n```", "```js\n.text(function (d) { // <-E \n    return scale(d); \n}); \n\n```", "```js\nvar interpolate = d3.interpolateNumber(0, 100); \ninterpolate(0.1); // => 10 \ninterpolate(0.99); //=> 99 \n\n```", "```js\nfunction interpolate(t) { \n    return a * (1 - t) + b * t; \n} \n\n```", "```js\n<div id=\"font\" class=\"clear\"> \n    <span>Font Interpolation<br></span> \n</div> \n\n<script type=\"text/javascript\"> \n    var max = 11, data = []; \n\n    var sizeScale = d3.scaleLinear() // <-A \n        .domain([0, max]) \n        .range([  // <-B \n            \"italic bold 12px/30px Georgia, serif\",  \n            \"italic bold 120px/180px Georgia, serif\" \n        ]); \n\n    for (var i = 0; i < max; ++i) data.push(i); \n\n    function render(data, scale, selector) { // <-C \n        var cells = d3.select(selector).selectAll(\"div.cell\") \n                .data(data); \n\n        cells.enter() \n            .append(\"div\") \n                .classed(\"cell\", true) \n                .style(\"display\", \"inline-block\") \n            .append(\"span\") \n                .style(\"font\", function(d,i){ \n                    return scale(d); // <-D \n                }) \n                .text(function(d,i){return i;}); // <-E \n    } \n\n    render(data, sizeScale, \"#font\"); \n</script> \n\n```", "```js\nvar sizeScale = d3.scale.linear() // <-A \n        .domain([0, max]) \n        .range([  // <-B \n            \"italic bold 12px/30px Georgia, serif\",  \n            \"italic bold 120px/180px Georgia, serif\" \n        ]); \n\n```", "```js\n.style(\"font\", function(d,i){  \n    return scale(d); // <-D \n}) \n.text(function(d,i){return i;}); // <-E \n\n```", "```js\n/[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g \n\n```", "```js\n<div id=\"color\" class=\"clear\"> \n    <span>Linear Color Interpolation<br></span> \n</div> \n<div id=\"color-diverge\" class=\"clear\"> \n    <span>Poly-Linear Color Interpolation<br></span> \n</div> \n\n<script type=\"text/javascript\"> \n    var max = 21, data = []; \n\n    var colorScale = d3.scaleLinear() // <-A \n        .domain([0, max]) \n        .range([\"white\", \"#4169e1\"]); \n\n    var divergingScale = function(pivot) { // <-B \n        return d3.scaleLinear() \n                .domain([0, pivot, max]) // <-C \n                .range([\"white\", \"#4169e1\", \"white\"]) \n    }; \n\n    for (var i = 0; i < max; ++i) data.push(i); \n\n    function render(data, scale, selector) { // <-D \n        var cells = d3.select(selector).selectAll(\"div.cell\") \n                .data(data); \n\n        cells.enter() \n            .append(\"div\").merge(cells) \n                .classed(\"cell\", true) \n                .style(\"display\", \"inline-block\") \n                .style(\"background-color\", function(d){ \n                    return scale(d); // <-E \n                }) \n                .text(function(d,i){return i;}); \n    } \n\n    render(data, colorScale, \"#color\"); \n    render(data, divergingScale(5), \"#color-diverge\"); \n</script> \n\n<div class=\"control-group clear\"> \n    <button onclick=\"render(data, divergingScale(5), '#color-diverge')\">Pivot at 5</button> \n    <button onclick=\"render(data, divergingScale(10), '#color-diverge')\">Pivot at 10</button> \n    <button onclick=\"render(data, divergingScale(15), '#color-diverge')\">Pivot at 15</button> \n    <button onclick=\"render(data, divergingScale(20), '#color-diverge')\">Pivot at 20</button> \n</div> \n\n```", "```js\nvar colorScale = d3.scaleLinear() // <-A \n    .domain([0, max]) \n    .range([\"white\", \"#4169e1\"]); \n\n```", "```js\nvar divergingScale = function(pivot) { // <-B \n    return d3.scaleLinear() \n            .domain([0, pivot, max]) // <-C \n            .range([\"white\", \"#4169e1\", \"white\"]) \n}; \n\n```", "```js\nd3.scaleLinear() \n    .domain([0, pivot]).range([\"white\", \"#4169e1\"]); \nd3.scaleLinear() \n.domain([pivot, max]).range([\"#4169e1\", \"white \"]); \n\n```", "```js\n<div id=\"compound\" class=\"clear\"> \n    <span>Compound Interpolation<br></span> \n</div> \n\n<script type=\"text/javascript\"> \n    var max = 21, data = []; \n\n    var compoundScale = d3.scalePow() \n            .exponent(2) \n            .domain([0, max]) \n            .range([ \n                {color:\"#add8e6\", height:\"15px\"}, // <-A \n                {color:\"#4169e1\", height:\"150px\"} // <-B \n            ]); \n\n    for (var i = 0; i < max; ++i) data.push(i); \n\n    function render(data, scale, selector) { // <-C \n        var bars = d3.select(selector).selectAll(\"div.v-bar\") \n                .data(data); \n        bars.enter() \n                .append(\"div\") \n                .classed(\"v-bar\", true) \n                .style(\"height\", function(d){ // <-D \n                        return scale(d).height; \n                    }) \n                .style(\"background-color\", function(d){ // <-E \n                    return scale(d).color; \n                }) \n                .text(function(d,i){return i;}); \n    } \n\n    render(data, compoundScale, \"#compound\"); \n</script> \n\n```", "```js\nvar compoundScale = d3.scalePow() \n            .exponent(2) \n            .domain([0, max]) \n            .range([ \n                {color:\"#add8e6\", height:\"15px\"}, // <-A \n                {color:\"#4169e1\", height:\"150px\"} // <-B \n            ]); \n\n```", "```js\n.style(\"height\", function(d){ \n  return scale(d).height; // <-D \n})  \n.style(\"background-color\", function(d){ \n  return scale(d).color; // <-E \n}) \n\n```"]