["```js\nnpm install -g typescript\n```", "```js\nlet myNumberVariable: number = 1; \nconsole.log(myNumberVariable); \n```", "```js\ntsc test.ts\n```", "```js\nnode test.js\n```", "```js\nlet counter; // unknown (any) type \nlet counter = 0; // number (inferred) \nlet counter: number; // number \nlet counter: number = 0; // number \n```", "```js\nnamespace type_inference_demo { \n    let counter1; // unknown (any) type \n    let counter2 = 0; // number (inferred) \n    let counter3: number; // number \n    let counter4: number = 0; // number \n} \n```", "```js\nlet isDone:   boolean = false;   \n```", "```js\nlet height:   number = 6;   \n```", "```js\nlet name: string   = \"bob\";   \nname = 'Smith';   \n```", "```js\nlet list: number[]   = [1, 2, 3];   \n```", "```js\nlet list: Array<number>   = [1, 2, 3];   \n```", "```js\nlet x: [string,   number];   \nx = [\"hello\",   10]; // OK   \nx = [\"world\",   20]; // OK   \nx = [10, \"hello\"];   // Error   \nx = [20, \"world\"];   // Error   \n```", "```js\nenum Color {Red,   Green, Blue};   \nlet c: Color =   Color.Green;   \n```", "```js\nlet notSure: any   = 4; // OK   \nnotSure = \"maybe   a string instead\"; // OK   \nnotSure =   false; // OK   \n```", "```js\nlet list: any[] =   [1, true, \"free\"];   \nlist[1] = 100;   \n```", "```js\nconst obj =   {};    \nobj.prop = \"value\";   // Error   \n```", "```js\n\nfunction   impossibleTypeGuard(value: any) {   \n    if (   \n        typeof   value === \"string\" &&   \n        typeof   value === \"number\"   \n    ) {   \n        value; //   Type never   \n    }    \n}   \n```", "```js\nfunction   warnUser(): void {   \n    console.log(\"This   is my warning message\");   \n}   \n```", "```js\nlet testVar; // variable is declared but not initialized \nconsoe.log(testVar); // shows undefined  \nconsole.log(typeof testVar); // shows undefined \n\nlet testVar = null; // variable is declared, and null is assigned as its value \ncosole.log(testVar); // shows null  \nconsole.log(typeof testVar); // shows object \n```", "```js\nvar myNumber: number = 1; \nlet isValid: boolean = true; \nconst apiKey: string = \"0E5CE8BD-6341-4CC2-904D-C4A94ACD276E\"; \n```", "```js\nlet originalArr1 = [ 1, 2, 3]; \nlet originalArr2 = [ 4, 5, 6]; \nlet copyArr = [...originalArr1]; \nlet mergedArr = [...originalArr1, ...originalArr2]; \nlet newObjArr = [...originalArr1, 7, 8]; \n```", "```js\nlet originalObj1 = {a: 1, b: 2, c: 3}; \nlet originalObj2 = {d: 4, e: 5, f: 6}; \nlet copyObj = {...originalObj1}; \nlet mergedObj = {...originalObj1, ...originalObj2}; \nlet newObjObj = {... originalObj1, g: 7, h: 8}; \n```", "```js\nlet isValid: boolean = true; \n\nif (isValid) { \n  console.log(\"is valid!\"); \n} \n```", "```js\nlet isValid: boolean = true; \n\nif (isValid) { \n  console.log(\"Is valid!\"); \n} else { \n  console.log(\"Is NOT valid!\"); \n} \n```", "```js\nlet isValid: boolean = true; \nlet message = isValid ? \"Is valid!\" : \"Is NOT valid!\"; \nconsole.log(message); \n```", "```js\nenum AlertLevel{ \n info, \n  warning, \n  error   \n} \n\nfunction getAlertSubscribers(level: AlertLevel){ \n  let emails = new Array<string>(); \n  switch(level){ \n  case AlertLevel.info: \n     emails.push(\"cst@domain.com\"); \n     break; \n  case AlertLevel.warning: \n     emails.push(\"development@domain.com\"); \n     emails.push(\"sysadmin@domain.com\"); \n     break; \n  case AlertLevel.error: \n    emails.push(\"development@domain.com\"); \n    emails.push(\"sysadmin@domain.com\"); \n    emails.push(\"management@domain.com\"); \n    break; \n  default: \n    throw new Error(\"Invalid argument!\"); \n  } \n  return emails; \n} \n\ngetAlertSubscribers(AlertLevel.info); // [\"cst@domain.com\"] \ngetAlertSubscribers(AlertLevel.warning); // \n [\"development@domain.com\", \"sysadmin@domain.com\"]\n```", "```js\nlet i: number = 0; \nwhile (i < 5) { \n  i += 1; \n  console.log(i); \n} \n```", "```js\nlet i: number = 0; \ndo { \n  i += 1; \n  console.log(i); \n} while (i < 5); \n```", "```js\nlet obj: any = { a: 1, b: 2, c: 3 }; \n\nfor (let key in obj) { \n    if (obj.hasOwnProperty(key)) { \n        console.log(key + \" = \" + obj[key]); \n    } \n} \n\n// Output: \n// \"a = 1\" \n// \"b = 2\" \n// \"c = 3\" \n```", "```js\nlet iterable = [10, 20, 30]; \n\nfor (let value of iterable) { \n  value += 1; \n  console.log(value); \n} \n```", "```js\nfor (let i: number = 0; i < 9; i++) { \n   console.log(i); \n} \n```", "```js\n// named function \nfunction greet(name?: string): string { \n  if(name){ \n    return \"Hi! \" + name; \n  } else { \n    return \"Hi!\"; \n  } \n} \n\n// anonymous function \nlet greet = function(name?: string): string { \n  if (name) { \n    return \"Hi! \" + name; \n  } else { \n    return \"Hi!\"; \n  } \n} \n```", "```js\nlet greet = (name: string): string => { \n    if(name){ \n      return \"Hi! \" + name; \n    } \n    else \n    { \n      return \"Hi\"; \n    } \n}; \n```", "```js\nlet greet: (name: string) => string = function(name: string): \n string { \n    if (name) { \n      return \"Hi! \" + name; \n    } else { \n      return \"Hi!\"; \n    } \n}; \n```", "```js\nfunction add( \n    a: number, b: number, callback: (result: number) => void \n) { \n    callback(a + b); \n} \n```", "```js\nclass Character { \n  public fullname: string; \n  public constructor(firstname: string, lastname: string) { \n    this.fullname = `${firstname} ${lastname}`; \n  } \n  public greet(name?: string) { \n    if (name) { \n      return `Hi! ${name}! my name is ${this.fullname}`; \n    } else { \n      return `Hi! my name is ${this.fullname}`; \n    } \n  } \n} \n\nlet spark = new Character(\"Jacob\",\"Keyes\"); \nlet msg = spark.greet();              \nconsole.log(msg); // \"Hi! my name is Jacob Keyes\" \n\nlet msg1 = spark.greet(\"Dr. Halsey\");  \nconsole.log(msg1); // \"Hi! Dr. Halsey! my name is Jacob Keyes\" \n```", "```js\ninterface LoggerInterface{ \n    log(arg: any): void; \n} \n\nclass Logger implements LoggerInterface { \n    log (arg: any){ \n        if (typeof console.log === \"function\") { \n            console.log(arg); \n        } else { \n            console.log(arg); \n        } \n    } \n} \n```", "```js\ninterface UserInterface { \n    name: string; \n    password: string; \n} \n\n// Error property password is missing \nlet user: UserInterface = { \n    name: \"\" \n}; \n```", "```js\nnamespace geometry { \n    interface VectorInterface { \n        /* ... */ \n    } \n    export interface Vector2DInterface { \n        /* ... */ \n    } \n    export interface Vector3DInterface { \n        /* ... */ \n    } \n    export class Vector2D \n        implements VectorInterface, Vector2dInterface { \n        /* ... */ \n    } \n    export class Vector3D \n        implements VectorInterface, Vector3DInterface { \n        /* ... */ \n    } \n} \n\nlet vector2DInstance: geometry.Vector2DInterface = new  \ngeometry.Vector2D(); \nlet vector3DInstance: geometry.Vector3DInterface = new  \ngeometry.Vector3d(); \n```", "```js\nnamespace geometry_demo { \n\n    export interface Vector2DInterface { \n        toArray(callback: (x: number[]) => void): void; \n        length(): number; \n        normalize(): void; \n    } \n\n    export class Vector2D implements Vector2DInterface { \n        private _x: number; \n        private _y: number; \n        constructor(x: number, y: number) { \n            this._x = x; \n            this._y = y; \n        } \n        public toArray(callback: (x: number[]) => void): void { \n            callback([this._x, this._y]); \n        } \n        public length(): number { \n            return Math.sqrt( \n                this._x * this._x + this._y * this._y \n            ); \n        } \n        public normalize() { \n            let len = 1 / this.length(); \n            this._x *= len; \n            this._y *= len; \n        } \n    } \n\n} \n```", "```js\nlet vector: geometry_demo.Vector2DInterface = new geometry_demo.Vector2D(2,3); \nvector.normalize(); \nvector.toArray(function(vectorAsArray: number[]){ \n  console.log(`x: ${vectorAsArray[0]}, y: ${vectorAsArray[1]}`); \n}); \n```"]