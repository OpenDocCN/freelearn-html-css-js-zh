["```js\nconst fs    = require(\"fs\");\nconst path  = require(\"path\");\nconst mocha = require(\"mocha\");\nconst suite = new mocha();\n\nfs.readdir(path.join(__dirname, \"integration\"), (err, files) => {\n    if (err) throw err;\n\n    files.filter((filename) => \n    (filename.match(/\\.js$/))).map((filename) => {\n        suite.addFile(path.join(__dirname, \"integration\", filename));\n    });\n\n    suite.run((failures) => {\n        process.exit(failures);\n    });\n});\n```", "```js\ndescribe(\"Uploading image\", () => {\n    it(\"should accept only images\");\n});\n```", "```js\nnpm test\n> imagini@1.0.0 test /Users/dresende/imagini\n> node test/run\n\n0 passing (2ms)\n```", "```js\nconst fs   = require(\"fs\");\nconst path = require(\"path\");\n\nexports.service = require(\"../imagini.js\");\nexports.sample  = fs.readFileSync(path.join(__dirname, \"sample.png\"));\n```", "```js\nmodule.exports = app;\n```", "```js\nconst chai  = require(\"chai\");\nconst http  = require(\"chai-http\");\nconst tools = require(\"../tools\");\n\nchai.use(http);\n\ndescribe(\"Uploading image\", () => {\n    beforeEach((done) => {\n        chai\n        .request(tools.service)\n        .delete(\"/uploads/test_image_upload.png\")\n        .end(() => {\n            return done();\n        });\n    });\n\n    it (\"should accept a PNG image\", function (done) {\n        chai\n        .request(tools.service)\n        .post(\"/uploads/test_image_upload.png\")\n        .set(\"Content-Type\", \"image/png\")\n        .send(tools.sample)\n        .end((err, res) => {\n            chai.expect(res).to.have.status(200);\n            chai.expect(res.body).to.have.status(\"ok\");\n\n            return done();\n        });\n    });\n});\n```", "```js\nconst chai  = require(\"chai\");\nconst http  = require(\"chai-http\");\nconst tools = require(\"../tools\");\n\nchai.use(http);\n```", "```js\ndescribe(\"Uploading image\", () => {\n```", "```js\nbeforeEach((done) => {\n    chai\n    .request(tools.service)\n    .delete(\"/uploads/test_image_upload.png\")\n    .end(() => {\n        return done();\n    });\n});\n```", "```js\nit(\"should accept a PNG image\", (done) => {\n    chai\n    .request(tools.service)\n    .post(\"/uploads/test_image_upload.png\")\n    .set(\"Content-Type\", \"image/png\")\n    .send(tools.sample)\n    .end((err, res) => {\n        chai.expect(res).to.have.status(200);\n        chai.expect(res.body).to.have.status(\"ok\");\n\n        return done();\n    });\n});\n```", "```js\nit(\"should deny duplicated images\", (done) => {\n    chai\n    .request(tools.service)\n    .post(\"/uploads/test_image_upload.png\")\n    .set(\"Content-Type\", \"image/png\")\n    .send(tools.sample)\n    .end((err, res) => {\n        chai.expect(res).to.have.status(200);\n        chai.expect(res.body).to.have.status(\"ok\");\n\n        chai\n        .request(tools.service)\n        .post(\"/uploads/test_image_upload.png\")\n        .set(\"Content-Type\", \"image/png\")\n        .send(tools.sample)\n        .end((err, res) => {\n            chai.expect(res).to.have.status(200);\n            chai.expect(res.body).to.have.status(\"error\");\n            chai.expect(res.body).to.have.property(\"code\", \n            \"ER_DUP_ENTRY\");\n\n            return done();\n        });\n    });\n});\n```", "```js\nconst chai = require(\"chai\");\nconst http = require(\"chai-http\");\nconst tools = require(\"../tools\");\n\nchai.use(http);\n\ndescribe(\"Checking image\", () => {\n    beforeEach((done) => {\n        chai\n        .request(tools.service)\n        .delete(\"/uploads/test_image_check.png\")\n        .end(() => {\n            return done();\n        });\n    });\n\n    it(\"should return 404 if it doesn't exist\", (done) => {\n        chai\n        .request(tools.service)\n        .head(\"/uploads/test_image_check.png\")\n        .end((err, res) => {\n            chai.expect(res).to.have.status(404);\n\n            return done();\n        });\n    });\n\n    it(\"should return 200 if it exists\", (done) => {\n        chai\n        .request(tools.service)\n        .post(\"/uploads/test_image_check.png\")\n        .set(\"Content-Type\", \"image/png\")\n        .send(tools.sample)\n        .end((err, res) => {\n            chai.expect(res).to.have.status(200);\n            chai.expect(res.body).to.have.status(\"ok\");\n\n            chai\n            .request(tools.service)\n            .head(\"/uploads/test_image_check.png\")\n            .end((err, res) => {\n                chai.expect(res).to.have.status(200);\n\n                return done();\n            });\n        });\n    });\n});\n```", "```js\nconst chai = require(\"chai\");\nconst http = require(\"chai-http\");\nconst tools = require(\"../tools\");\n\nchai.use(http);\n\ndescribe(\"Downloading image\", () => {\n    beforeEach((done) => {\n        chai\n        .request(tools.service)\n        .delete(\"/uploads/test_image_download.png\")\n        .end(() => {\n            chai\n            .request(tools.service)\n            .post(\"/uploads/test_image_download.png\")\n            .set(\"Content-Type\", \"image/png\")\n            .send(tools.sample)\n            .end((err, res) => {\n                chai.expect(res).to.have.status(200);\n                chai.expect(res.body).to.have.status(\"ok\");\n\n                return done();\n            });\n        });\n    });\n\n    it(\"should return the original image size if no parameters given\", \n    (done) => {\n        chai\n        .request(tools.service)\n        .get(\"/uploads/test_image_download.png\")\n        .end((err, res) => {\n            chai.expect(res).to.have.status(200);\n            chai.expect(res.body).to.have.length(tools.sample.length);\n\n            return done();\n        });\n    });\n});\n```", "```js\nif (Object.keys(req.query).length === 0) {\n    db.query(\"UPDATE images \" +\n             \"SET date_used = UTC_TIMESTAMP \" +\n             \"WHERE id = ?\",\n             [ req.image.id ]);\n\n    res.setHeader(\"Content-Type\", \"image/\" + \n    path.extname(req.image.name).substr(1));\n\n    return res.end(req.image.data);\n}\n```", "```js\nconst sharp = require(\"sharp\");\n```", "```js\nit(\"should be able to resize the image as we request\", (done) => {\n    chai\n    .request(tools.service)\n    .get(\"/uploads/test_image_download.png?width=200&height=100\")\n    .end((err, res) => {\n        chai.expect(res).to.have.status(200);\n\n        let image = sharp(res.body);\n\n        image\n        .metadata()\n        .then((metadata) => {\n            chai.expect(metadata).to.have.property(\"width\", 200);\n            chai.expect(metadata).to.have.property(\"height\", 100);\n\n            return done();\n        });\n    });\n});\n```", "```js\nit(\"should be able to add image effects as we request\", (done) => {\n    chai\n    .request(tools.service)\n    .get(\"/uploads/test_image_download.png?\n    flip=y&flop=y&greyscale=y&blur=10&sharpen=10\")\n    .end((err, res) => {\n        chai.expect(res).to.have.status(200);\n\n        return done();\n    });\n});\n```", "```js\nit(\"should be able to resize the image width as we request\", (done) => {\n    chai\n    .request(tools.service)\n    .get(\"/uploads/test_image_download.png?width=200\")\n    .end((err, res) => {\n        chai.expect(res).to.have.status(200);\n\n        let image = sharp(res.body);\n\n        image\n        .metadata()\n        .then((metadata) => {\n            chai.expect(metadata).to.have.property(\"width\", 200);\n\n            return done();\n        });\n    });\n});\n```", "```js\nconst chai = require(\"chai\");\nconst http = require(\"chai-http\");\nconst tools = require(\"../tools\");\n\nchai.use(http);\n\ndescribe(\"Statistics\", () => {\n    it(\"should return an object with total, size, last_used and \n    uptime\", (done) => {\n        chai\n        .request(tools.service)\n        .get(\"/stats\")\n        .end((err, res) => {\n            chai.expect(res).to.have.status(200);\n            chai.expect(res.body).to.have.property(\"total\");\n            chai.expect(res.body).to.have.property(\"size\");\n            chai.expect(res.body).to.have.property(\"last_used\");\n            chai.expect(res.body).to.have.property(\"uptime\");\n\n            return done();\n        });\n    });\n});\n```", "```js\nnpm install --save-dev sinon\n```", "```js\nconst chai = require(\"chai\");\nconst sinon = require(\"sinon\");\nconst http = require(\"chai-http\");\nconst tools = require(\"../tools\");\n\nchai.use(http);\n\ndescribe.only(\"Deleting image\", () => {\n    beforeEach((done) => {\n        chai\n        .request(tools.service)\n        .delete(\"/uploads/test_image_delete.png\")\n        .end(() => {\n            return done();\n        });\n    });\n\n    it(\"should return 200 if it exists\", (done) => {\n        chai\n        .request(tools.service)\n        .post(\"/uploads/test_image_delete.png\")\n        .set(\"Content-Type\", \"image/png\")\n        .send(tools.sample)\n        .end((err, res) => {\n            chai.expect(res).to.have.status(200);\n            chai.expect(res.body).to.have.status(\"ok\");\n\n            chai\n            .request(tools.service)\n            .delete(\"/uploads/test_image_delete.png\")\n            .end((err, res) => {\n                chai.expect(res).to.have.status(200);\n\n                return done();\n            });\n        });\n    });\n});\n```", "```js\napp.db = db;\n```", "```js\nit(\"should return 500 if a database error happens\", (done) => {\n    chai\n    .request(tools.service)\n    .post(\"/uploads/test_image_delete.png\")\n    .set(\"Content-Type\", \"image/png\")\n    .send(tools.sample)\n    .end((err, res) => {\n        chai.expect(res).to.have.status(200);\n        chai.expect(res.body).to.have.status(\"ok\");\n\n        let query = sinon.stub(tools.service.db, \"query\");\n\n        query\n        .withArgs(\"DELETE FROM images WHERE id = ?\")\n        .callsArgWithAsync(2, new Error(\"Fake\"));\n\n        query\n        .callThrough();\n\n        chai\n        .request(tools.service)\n        .delete(\"/uploads/test_image_delete.png\")\n        .end((err, res) => {\n            chai.expect(res).to.have.status(500);\n\n            query.restore();\n\n            return done();\n        });\n    });\n});\n```", "```js\nit(\"should return 500 if a database error happens\", (done) => {\n    let query = sinon.stub(tools.service.db, \"query\");\n\n    query\n    .withArgs(\"SELECT COUNT(*) total, SUM(size) size, MAX(date_used) \n    last_used FROM images\")\n    .callsArgWithAsync(1, new Error(\"Fake\"));\n\n    query\n    .callThrough();\n\n    chai\n    .request(tools.service)\n    .get(\"/stats\")\n    .end((err, res) => {\n        chai.expect(res).to.have.status(500);\n\n        query.restore();\n\n        return done();\n    });\n});\n```", "```js\nconst chai = require(\"chai\");\nconst sinon = require(\"sinon\");\nconst http = require(\"chai-http\");\nconst tools = require(\"../tools\");\n\nchai.use(http);\n\ndescribe(\"Deleting older images\", () => {\n    let clock = sinon.useFakeTimers({ shouldAdvanceTime : true });\n\n    it(\"should run every hour\", (done) => {\n        chai\n        .request(tools.service)\n        .get(\"/stats\")\n        .end((err, res) => {\n            chai.expect(res).to.have.status(200);\n\n            clock.tick(3600 * 1000);\n            clock.restore();\n\n            return done();\n        });\n    });\n});\n```"]