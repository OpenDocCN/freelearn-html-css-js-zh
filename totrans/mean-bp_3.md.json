["```js\n    git remote remove origin\n\n    ```", "```js\n    cd jobboard\n\n    ```", "```js\n    npm install\n\n    ```", "```js\n    cp config/environments/example.js config/environments/development.js\n\n    ```", "```js\n'use strict';\n\nmodule.exports = {\n  port: 3000,\n  hostname: '127.0.0.1',\n  baseUrl: 'http://localhost:3000',\n  mongodb: {\n    uri: 'mongodb://localhost/jobboard_dev_db'\n  },\n  app: {\n    name: 'Job board'\n  },\n  serveStatic: true,\n  session: {\n    type: 'mongo',                          \n    secret: 'someVeRyN1c3S#cr3tHer34U',\n    resave: false,                          \n    saveUninitialized: true                 \n  }\n};\n```", "```js\nvar UserSchema = new Schema({\n  email:  {\n    type: String,\n    required: true,\n    unique: true\n  },\n  name: {\n    type: String\n  },\n  password: {\n    type: String,\n    required: true,\n    select: false\n  },\n  passwordSalt: {\n    type: String,\n    required: true,\n    select: false\n  },\n  active: {\n    type: Boolean,\n    default: true\n  },\n  roles: {\n    type: [\n      {\n        type: String,\n        enum: ['user', 'member', 'owner']\n      }\n    ],\n    default: ['user']\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n```", "```js\nmodule.exports.onlyMembers = authorizeOnlyToCompanyMembers;\n\nfunction authorizeOnlyToCompanyMembers(req, res, next) {\n  // check if user is member of company\n  const isMember = req.resources.company.members.find((member) => {\n    return member.toString() === req.user._id.toString();\n  });\n\n  if (!isMember) {\n    return res.status(403).json({ message: 'Unauthorized' });\n  }\n\n  next();\n}\n```", "```js\nrouter.put(\n  '/companies/:companyId',\n  auth.ensured,\n  companyCtrl.findById,\n  authorize.onlyOwner,\n  companyCtrl.update,\n  response.toJSON('company')\n);\n```", "```js\n'use strict';\n\nmodule.exports.createSlug = createSlug;\n\nfunction createSlug(value) {\n   return value\n   .toLowerCase()\n   .replace(/[^\\w\\s]+/g,'')\n   .trim()\n   .replace(/[\\s]+/g,'-');\n}\n```", "```js\n'use strict';\n\nconst mongoose = require('mongoose');\nconst commonHelper = require('../helpers/common');\nconst Schema = mongoose.Schema;\nconst ObjectId = Schema.ObjectId;\n\nlet CompanySchema = new Schema({\n  name: {\n    type: String,\n    required: true\n  },\n  slug: {\n    type: String\n  },\n  owner: {\n    type: ObjectId,\n    required: true,\n    ref: 'User'\n  },\n  members: {\n    type: Array,\n    default: []\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nCompanySchema.pre('save', (next) => {\n  this.slug = commonHelper.createSlug(this.name);\n  next();\n});\n\n// compile Company model\nmodule.exports = mongoose.model('Company', CompanySchema);\n```", "```js\n'use strict';\n\nconst _ = require('lodash');\nconst mongoose = require('mongoose');\nconst Company = mongoose.model('Company');\n\nmodule.exports.create = createCompany;\n\nfunction createCompany(req, res, next) {\n  let data = _.pick(req.body, ['name', 'country', 'address']);\n  data.owner = req.user._id;\n  data.members = [req.user._id];\n\n  Company.create(data, (err, company) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.status(201).json(company);\n  });\n}\n```", "```js\nmodule.exports.findById = findCompanyById;\n\nfunction findCompanyById(req, res, next) {\n  if (!ObjectId.isValid(id)) {\n    res.status(404).send({ message: 'Not found.'});\n  }\n\n  Company.findById(req.params.companyId, (err, company) => {\n    if (err) {\n      return next(err);\n    }\n\n    req.resources.company = company;\n    next();\n  });\n}\n```", "```js\nmodule.exports.getAll = getAllCompanies;\n\nfunction getAllCompanies(req, res, next) {\n  const limit = +req.query.limit || 50;\n  const skip = +req.query.skip || 0;\n  let query = _.pick(req.query, ['country']);\n\n  Company\n  .find(query)\n  .limit(limit)\n  .skip(skip)\n  .exec((err, companies) => {\n    if (err) {\n      return next(err);\n    }\n\n    req.resources.companies = companies;\n    next();\n  });\n}\n```", "```js\nmodule.exports.update = updateCompany;\n\nfunction updateCompany(req, res, next) {\n  let data = _.pick(req.body, ['name', 'country', 'address']);\n  _.assign(req.resources.company, req.body);\n\n  req.resources.company.save((err, updatedCompany) => {\n    if (err) {\n      return next(err);\n    }\n\n    req.resources.company = updatedCompany;\n    next();\n  });\n}\n```", "```js\nmodule.exports.addMember = addCompanyMember;\n\nfunction addCompanyMember(req, res, next) {\n  let includes = _.includes(req.resources.company.members, req.body.member);\n\n  if (includes) {\n    return res.status(409).json({\n      message: 'User is already a member of your company',\n      type: 'already_member'\n    });\n  }\n\n  req.resources.company.members.push(req.body.member);\n  req.resources.company.save((err, updatedCompany) => {\n    if (err) {\n      return next(err);\n    }\n\n    req.resources.company = updatedCompany;\n    next();\n  });\n}\n```", "```js\nmodule.exports.removeMember = removeCompanyMember;\n\nfunction removeCompanyMember(req, res, next) {\n  let includes = _.includes(req.resources.company.members, req.body.member);\n\n  if (!includes) {\n    return res.status(409).json({\n      message: 'User is not a member of your company',\n      type: 'not_member'\n    });\n  }\n\n  _.pull(req.resources.company.members, req.body.member);\n  req.resources.company.save((err, updatedCompany) => {\n    if (err) {\n      return next(err);\n    }\n\n    req.resources.company = updatedCompany;\n    next();\n  });\n}\n```", "```js\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\nconst companyCtrl = require('../controllers/company');\nconst auth = require('../middlewares/authentication');\nconst authorize = require('../middlewares/authorization');\nconst response = require('../helpers/response');\n```", "```js\n    router.post(\n      '/companies',\n      auth.ensured,\n      companyCtrl.checkUserCompany,\n      companyCtrl.create\n    );\n    ```", "```js\n    router.get(\n      '/companies',\n      companyCtrl.getAll,\n      response.toJSON('companies')\n    );\n    ```", "```js\n    router.get(\n      '/companies/:companyId',\n      companyCtrl.findById,\n      response.toJSON('company')\n    );\n    ```", "```js\n    router.put(\n      '/companies/:companyId',\n      auth.ensured,\n      companyCtrl.findById,\n      authorize.onlyOwner,\n      companyCtrl.update,\n      response.toJSON('company')\n    );\n    ```", "```js\n    router.post(\n      '/companies/:companyId/members',\n      auth.ensured,\n      companyCtrl.findById,\n      authorize.onlyOwner,\n      companyCtrl.addMember,\n      response.toJSON('company')\n    );\n    ```", "```js\n    router.delete(\n      '/companies/:companyId/members',\n      auth.ensured,\n      companyCtrl.findById,\n      authorize.onlyOwner,\n      companyCtrl.removeMember,\n      response.toJSON('company')\n    );\n    ```", "```js\n    module.exports = router;\n    ```", "```js\n    const mongoose = require('mongoose');\n    const commonHelper = require('../helpers/common');\n    const Industries = require('../../config/variables/industries');\n    const Countries = require('../../config/variables/countries');\n    const Jobtypes = require('../../config/variables/jobtypes');\n    const Schema = mongoose.Schema;\n    const ObjectId = Schema.ObjectId;\n    ```", "```js\n    const indEnum = Industries.map(item => item.slug);\n    const cntEnum = Countries.map(item => item.code);\n    const jobEnum = Jobtypes.map(item => item.slug);\n    ```", "```js\n    let JobSchema = new Schema({\n      title: {\n        type: String,\n        required: true\n      },\n      slug: {\n        type: String,\n        required: true\n      },\n      summary: {\n        type: String,\n        maxlength: 250\n      },\n      description: {\n        type: String\n      },\n      type: {\n        type: String,\n        required: true,\n        enum: jobEnum\n      },\n      company: {\n        type: ObjectId,\n        required: true,\n        ref: 'Company'\n      },\n      industry: {\n        type: String,\n        required: true,\n        enum: indEnum\n      },\n      country: {\n        type: String,\n        required: true,\n        enum: cntEnum\n      },\n      createdAt: {\n        type: Date,\n        default: Date.now\n      }\n    });\n    ```", "```js\n    JobSchema.pre('save', (next) => {\n      this.slug = commonHelper.createSlug(this.name);\n      next();\n    });\n    ```", "```js\n    module.exports = mongoose.model('Job', JobSchema);\t\n    ```", "```js\nconst MAX_LIMIT = 50;\nconst JOB_FIELDS = ['title', 'summary', 'description', 'type', 'industry', 'country'];\n\nconst _ = require('lodash');\nconst mongoose = require('mongoose');\nconst Job = mongoose.model('Job');\nconst ObjectId = mongoose.Types.ObjectId;\n\nmodule.exports.create = createJob;\n\nfunction createJob(req, res, next) {\n  let data = _.pick(req.body, JOB_FIELDS);\n  data.company = req.company._id;\n\n  Job.create(data, (err, job) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.status(201).json(job);\n  });\n}\n```", "```js\nmodule.exports.findById = findJobById;\n\nfunction findJobById(req, res, next) {\n  if (!ObjectId.isValid(id)) {\n    res.status(404).send({ message: 'Not found.'});\n  }\n\n  Job.findById(req.params.jobId, (err, job) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.resources.job = job;\n    next();\n  });\n}\n```", "```js\nmodule.exports.getAll = getAllJobs;\n\nfunction getAllJobs(req, res, next) {\n  const limit = +req.query.limit || MAX_LIMIT;\n  const skip = +req.query.skip || 0;\n  let query = _.pick(req.query, ['type', 'country', 'industry']);\n\n  if (req.params.companyId) {\n    query.company = req.params.companyId;\n  }\n\n  Job\n  .find(query)\n  .limit(limit)\n  .skip(skip)\n  .exec((err, jobs) => {\n    if (err) {\n      return next(err);\n    }\n\n    req.resources.jobs = jobs;\n    next();\n  });\n}\n```", "```js\nmodule.exports.update = updateJob;\nfunction updateJob(req, res, next) {\n  var data = _.pick(req.body, JOB_FIELDS);\n  _.assign(req.resources.job, data);\n\n  req.resources.job.save((err, updatedJob) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.json(job);\n  });\n}\n```", "```js\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\nconst companyCtrl = require('../controllers/company');\nconst jobCtrl = require('../controllers/job');\nconst auth = require('../middlewares/authentication');\nconst authorize = require('../middlewares/authorization');\nconst response = require('../helpers/response');\n```", "```js\nrouter.get(\n  '/jobs',\n  jobCtrl.getAll,\n  response.toJSON('jobs')\n);\n\nrouter.get(\n  '/jobs/:jobId',\n  jobCtrl.findById,\n  response.toJSON('job')\n);\n```", "```js\nrouter.get(\n  '/companies/:companyId/jobs',\n  jobCtrl.getAll,\n  response.toJSON('jobs')\n);\n```", "```js\nrouter.post(\n  '/companies/:companyId/jobs',\n  auth.ensured,\n  companyCtrl.findById,\n  authorize.onlyMembers,\n  jobCtrl.create\n);\n```", "```js\nrouter.put(\n  '/companies/:companyId/jobs/:jobId',\n  auth.ensured,\n  companyCtrl.findById,\n  authorize.onlyMembers,\n  jobCtrl.findById,\n  jobCtrl.update\n);\n```", "```js\n'use strict';\n\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\nconst ObjectId = Schema.ObjectId;\n\nlet ApplicationSchema = new Schema({\n  user: {\n    type: ObjectId,\n    required: true,\n    ref: 'User'\n  },\n  status: {\n    type: String,\n    default: 'pending',\n    enum: ['pending', 'accepted', 'processed']\n  },\n  job: {\n    type: ObjectId,\n    required: true,\n    ref: 'Job'\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nmodule.exports = mongoose.model('Application', ApplicationSchema);\n```", "```js\nmodule.exports.create = createApplication;\n\nfunction createApplication(req, res, next) {\n  Application.create({\n    user: req.user._id,\n    job: req.params.jobId\n  }, (err, application) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.status(201).json(application);\n  });\n}\n```", "```js\nmodule.exports.findById = findApplicationById;\n\nfunction findApplicationById(req, res, next) {\n  if (!ObjectId.isValid(id)) {\n    res.status(404).send({ message: 'Not found.'});\n  }\n\n  Application.findById(req.params.applicationId, (err, application) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.resources.application = application;\n    next();\n  });\n}\n```", "```js\nmodule.exports.getAll = getAllApplications;\n\nfunction getAllApplications(req, res, next) {\n  const limit = +req.query.limit || 50;\n  const skip = +req.query.skip || 0;\n  let query = {\n    job: req.params.jobId\n  };\n\n  if (req.query.status) {\n    query.status = req.query.status;\n  }\n\n  Application\n  .find(query)\n  .limit(limit)\n  .skip(offset)\n  .exec((err, applications) => {\n    if (err) {\n      return next(err);\n    }\n\n    req.resources.applications = applications;\n    next();\n  });\n}\n```", "```js\nmodule.exports.update = updateApplication;\n\nfunction updateApplication(req, res, next) {\n  req.resources.application.status = req.body.status;\n\n  req.resources.application.save((err, updatedApplication) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.json(updatedApplication);\n  });\n}\n```", "```js\nmodule.exports.remove = removeApplication;\n\nfunction removeApplication(req, res, next) {\n  req.resources.application.remove((err) => {\n    if (err) {\n      return next(err);\n    }\n\n    res.json(req.resources.application);\n  });\n}\n```", "```js\n    import { Injectable } from 'angular2/core';\n    import { Http, Response, Headers } from 'angular2/http';\n    import { AuthHttp } from '../auth/index';\n    import { contentHeaders } from '../common/index';\n    import { Company } from './company.model';\n    ```", "```js\n    @Injectable()\n    export class CompanyService {\n      private _http: Http;\n      private _authHttp: AuthHttp;\n    }\n    ```", "```js\n      constructor(http: Http, authHttp: AuthHttp) {\n        this._http = http;\n        this._authHttp = authHttp;\n      }\n    ```", "```js\n      create(company) {\n        let body = JSON.stringify(company);\n\n        return this._authHttp\n        .post('/api/companies', body, { headers: contentHeaders })\n        .map((res: Response) => res.json())  \n      }\n    ```", "```js\n      findById(id) {\n        return this._http\n        .get(`/api/companies/${id}`, { headers: contentHeaders })\n        .map((res: Response) => res.json())\n      }\n    ```", "```js\n      getAll() {\n        return this._http\n        .get('/api/companies', { headers: contentHeaders })\n        .map((res: Response) => res.json())\n      }\n    ```", "```js\n     update(company) {\n        let body = JSON.stringify(company);\n\n        return this._authHttp\n        .put(`/api/companies/${company._id}`, body, { headers: contentHeaders })\n        .map((res: Response) => res.json())\n      }\n    ```", "```js\nimport { Component, OnInit } from 'angular2/core';\nimport { Router, RouterLink } from 'angular2/router';\nimport { CompanyService } from '../company.service';\nimport { Company } from '../company.model';\nexport class CompanyCreateComponent implements OnInit {\n  public company: Company;\n  private _router: Router;\n  private _companyService: CompanyService;\n\n  constructor(companyService: CompanyService, router: Router) {\n    this._router = router;\n    this._companyService = companyService;\n  }\n\n  ngOnInit() {\n    this.company = new Company();\n  }\n}\n```", "```js\n@Component({\n    selector: 'company-create',\n    directives: [\n      RouterLink\n    ],\n    template: `\n      <div class=\"login jumbotron center-block\">\n        <h1>Register</h1>\n      </div>\n      <div>\n        <form role=\"form\" (submit)=\"onSubmit($event)\">\n          <div class=\"form-group\">\n            <label for=\"name\">Company name</label>\n            <input type=\"text\" [(ngModel)]=\"company.name\" class=\"form-control\" id=\"name\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"email\">Country</label>\n            <input type=\"text\" [(ngModel)]=\"company.country\" class=\"form-control\" id=\"country\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"email\">Address</label>\n            <input type=\"text\" [(ngModel)]=\"company.address\" class=\"form-control\" id=\"address\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\">Summary</label>\n            <textarea [(ngModel)]=\"company.summary\" class=\"form-control\" id=\"summary\"></textarea>\n          </div>\n          <button type=\"submit\" class=\"button\">Submit</button>\n        </form>\n      </div>\n    `\n})\n```", "```js\n  onSubmit(event) {\n    event.preventDefault();\n\n    this._companyService\n    .create(this.company)\n    .subscribe((company) => {\n      if (company) {\n        this.goToCompany(company._id, company.slug);\n      }\n    }, err => console.error(err));\n  }\n```", "```js\n  goToCompany(id, slug) {\n    this._router.navigate(['CompanyDetail', { id: id, slug: slug}]);\n  }\n```", "```js\nimport { Component, OnInit } from 'angular2/core';\nimport { Router, RouterLink } from 'angular2/router';\nimport { CompanyService } from '../company.service';\nimport { Company } from '../company.model';\n\n@Component({})\nexport class CompanyListComponent implements OnInit {\n  public companies: Array<Company>;\n  private _router: Router;\n  private _companyService: CompanyService;\n\n  constructor(companyService: CompanyService, router: Router) {\n    this._router = router;\n    this._companyService = companyService;\n  }\n\n  ngOnInit() {\n    this._companyService\n    .getAll()\n    .subscribe((companies) => {\n      this.companies = companies;\n    });\n  }\n}\n```", "```js\n@Component({\n    selector: 'company-list',\n    directives: [\n      RouterLink\n    ],\n    template: `\n      <div class=\"jumbotron center-block\">\n        <h2>Companies list</h2>\n        <p class=\"lead\">Here you can find all the registered companies.</p>\n      </div>\n      <div>\n      <div *ngFor=\"#company of companies\" class=\"col col-25\">\n        <img src=\"img/208x140?text=product+image&txtsize=18\"/>\n        <h3>\n          <a href=\"#\"\n            [routerLink]=\"['CompanyDetail', { id: company._id, slug: company.slug }]\">\n            {{ company.name }}\n          </a>\n          </h3>\n      </div>\n      </div>\n    `\n})\n```", "```js\n    import { Injectable } from 'angular2/core';\n    import { Http, Response, Headers } from 'angular2/http';\n    import { AuthHttp } from '../auth/index';\n    import { contentHeaders, serializeQuery } from '../common/index';\n    import { Job } from './job.model';\n\n    @Injectable()\n    export class JobService {\n      private _http: Http;\n      private _authHttp: AuthHttp;\n\n      constructor(http: Http, authHttp: AuthHttp) {\n        this._http = http;\n        this._authHttp = authHttp;\n      }\n    }\n    ```", "```js\n      create(job) {\n        let body = JSON.stringify(job);\n\n        return this._authHttp\n        .post('/api/jobs', body, { headers: contentHeaders })\n        .map((res: Response) => res.json())\n      }\n    ```", "```js\n      findById(id) {\n        return this._http\n        .get(`/api/jobs/${id}`, { headers: contentHeaders })\n        .map((res: Response) => res.json())\n      }\n    ```", "```js\n      getAll(criteria) {\n        let query = '';\n        let str = serializeQuery(criteria);\n\n        if (str) {\n          query = `?${str}`;\n        }\n\n        return this._http\n        .get(`/api/jobs${query}`, { headers: contentHeaders })\n        .map((res: Response) => res.json())\n      }\n    ```", "```js\nexport function serializeQuery(query): string {\n  var chunks = [];\n  for(var key in query)\n    if (query.hasOwnProperty(key)) {\n      let k = encodeURIComponent(key);\n      let v = encodeURIComponent(query[key]);\n      chunks.push(`${k}=${v}`);\n    }\n  return chunks.join('&');\n}\n```", "```js\nimport { Component } from 'angular2/core';\nimport { RouterOutlet, RouteConfig } from 'angular2/router';\nimport { JobService } from '../job.service';\nimport { JobListComponent } from './job-list.component';\nimport { JobDetailComponent } from './job-detail.component';\nimport { JobCreateComponent } from './job-create.component';\n\n@RouteConfig([\n  { path: '/', as: 'JobList', component: JobListComponent, useAsDefault: true },\n  { path: '/:id/:slug', as: 'JobDetail', component: JobDetailComponent },\n  { path: '/create', as: 'JobCreate', component: JobCreateComponent }\n])\n@Component({\n    selector: 'job-base',\n    directives: [\n      RouterOutlet\n    ],\n    template: `\n      <router-outlet></router-outlet>\n    `\n})\nexport class JobBaseComponent {\n  constructor() {}\n} \n```", "```js\nimport { Component, OnInit } from 'angular2/core';\nimport { Router, RouterLink } from 'angular2/router';\nimport { JobService } from '../job.service';\nimport { Job } from '../job.model'; \n\nexport class JobsComponent implements OnInit {\n  public company: any;\n  public jobs: Array<Job>;\n  private _jobsService: JobService;\n  private _router: Router;\n\n  constructor(jobsService: JobService, router: Router) {\n    this._router = router;\n    this._jobsService = jobsService;\n  }\n}\n```", "```js\n  ngOnInit() {\n    let query: any = {};\n\n    if (this.company) {\n      query.company = this.company;\n    }\n\n    this._jobsService\n    .getAll(query)\n    .subscribe((jobs) => {\n      this.jobs = jobs;\n    });\n  }\n```", "```js\n@Component({\n    selector: 'jobs',\n    inputs: ['company'],\n    directives: [RouterLink],\n    template: `\n      <div *ngFor=\"#job of jobs\" class=\"col\">\n        <h3>\n          <a href=\"#\"\n            [routerLink]=\"['/Jobs', 'JobDetail', { id: job._id, slug: job.slug }]\">\n            {{ job.title }}\n          </a>\n        </h3>\n        <p>\n          <a href=\"#\"\n            [routerLink]=\"['/Companies', 'CompanyDetail', { id: job.company._id, slug: job.company.slug }]\">\n            {{ job.company.name }}\n          </a>\n          <span>·</span>\n          <span>{{ job.industry }}</span>\n          <span>·</span>\n          <span>{{ job.type }}</span>\n          <span>·</span>\n          <span>{{ job.createdAt }}</span>\n        </p>\n        <p>{{ job.summary }}</p>\n      </div>\n    `\n})\n```", "```js\nimport { Component } from 'angular2/core';\nimport { JobService } from '../job.service';\nimport { Job } from '../job.model';\nimport { JobsComponent } from './jobs.component';\n\n@Component({\n    selector: 'job-list',\n    directives: [JobsComponent],\n    template: `\n      <div class=\"login jumbotron center-block\">\n        <h2>Job openings</h2>\n        <p class=\"lead\">Take a look, maybe you will find something for you.</p>\n      </div>\n      <div>\n        <jobs></jobs>\n      </div>\n    `\n})\nexport class JobListComponent {\n  public jobs: Array<Job>;\n  private _jobsService: JobService;\n\n  constructor(jobsService: JobService) {\n    this._jobsService = jobsService;\n  }\n}\n```", "```js\nimport { Component, OnInit } from 'angular2/core';\nimport { RouteParams, RouterLink } from 'angular2/router';\nimport { JobService } from '../job.service';\nimport { Job } from '../job.model';\n\n@Component({})\nexport class JobDetailComponent implements OnInit {\n  public job: Job;\n  private _routeParams: RouteParams;\n  private _jobService: JobService;\n\n  constructor(jobService: JobService, routerParams: RouteParams) {\n    this._routeParams = routerParams;\n    this._jobService = jobService;\n  }\n\n  ngOnInit() {\n    const id: string = this._routeParams.get('id');\n    this.job = new Job();\n    this._jobService\n    .findById(id)\n    .subscribe((job) => {\n      this.job = job;\n    });\n  }\n}\n```", "```js\n@Component({\n    selector: 'job-detail',\n    directives: [\n      RouterLink\n    ],\n    template: `\n      <div class=\"job-header\">\n        <div class=\"col content\">\n          <p>Added on: {{ job.createdAt }}</p>\n          <h2>{{ job.name }}</h2>\n          <div class=\"job-description\">\n            <h4>Description</h4>\n            <div>{{ job.description }}</div>\n          </div>\n        </div>\n        <div class=\"sidebar\">\n          <h4>Country</h4>\n          <p>{{ job.country }}</p>\n          <h4>Industry</h4>\n          <p>{{ job.industry }}</p>\n          <h4>Job type</h4>\n          <p>{{ job.type }}</p>\n        </div>\n      </div>\n    `\n})\n```", "```js\nimport { Component, OnInit } from 'angular2/core';\nimport { Router, RouterLink } from 'angular2/router';\nimport { JobService } from '../job.service';\nimport { Job } from '../job.model';\n\nexport class JobCreateComponent implements OnInit {\n  public job: Job;\n  private _router: Router;\n  private _jobService: JobService;\n\n  constructor(jobService: JobService, router: Router) {\n    this._router = router;\n    this._jobService = jobService;\n  }\n\n  ngOnInit() {\n    this.job = new Job();\n  }\n\n  onSubmit(event) {\n    event.preventDefault();\n\n    this._jobService\n    .create(this.job)\n    .subscribe((job) => {\n      if (job) {\n        this.goToJob(job._id, job.slug);\n      }\n    });\n  }\n\n  goToJob(id, slug) {\n    this._router.navigate(['JobDetail', { id: id, slug: slug}]);\n  }\n}\n```", "```js\n@Component({\n    selector: 'job-create',\n    directives: [\n      RouterLink\n    ],\n    template: `\n      <div class=\"jumbotron center-block\">\n        <h1>Post a new job</h1>\n        <p>We are happy to see that you are growing.</p>\n      </div>\n      <div>\n        <form role=\"form\" (submit)=\"onSubmit($event)\">\n          <div class=\"form-group\">\n            <label for=\"title\">Job title</label>\n            <input type=\"text\" [(ngModel)]=\"job.title\" class=\"form-control\" id=\"title\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"industry\">Industry</label>\n            <input type=\"text\" [(ngModel)]=\"job.industry\" class=\"form-control\" id=\"industry\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"country\">Country</label>\n            <input type=\"text\" [(ngModel)]=\"job.country\" class=\"form-control\" id=\"country\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"type\">Job type</label>\n            <input type=\"text\" [(ngModel)]=\"job.type\" class=\"form-control\" id=\"type\">\n          </div>\n          <div class=\"form-group\">\n            <label for=\"summary\">Summary</label>\n            <textarea [(ngModel)]=\"job.summary\" class=\"form-control\" id=\"summary\"></textarea>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"description\">Description</label>\n            <textarea [(ngModel)]=\"job.description\" class=\"form-control\" id=\"description\"></textarea>\n          </div>\n          <button type=\"submit\" class=\"button\">Create a job</button>\n        </form>\n      </div>\n    `\n})\n```", "```js\n    import { Component, OnInit } from 'angular2/core';\n    import { RouteParams, RouterLink } from 'angular2/router';\n    import { CompanyService } from '../company.service';\n    import { Company } from '../company.model';\n    import { JobsComponent } from '../../job/index';\n    ```", "```js\n    @Component({\n        selector: 'company-detail',\n        directives: [\n          JobsComponent,\n          RouterLink\n        ],\n        template: `\n          <div class=\"company-header\">\n            <h2>{{ company.name }}</h2>\n            <p>\n              <span>{{ company.country }}</span>\n              <span>·</span>\n              <span>{{ company.address }}</span>\n            </p>\n          </div>\n          <div class=\"company-description\">\n            <h4>Description</h4>\n          </div>\n          <div class=\"company-job-list\">\n            <jobs [company]=company._id></jobs>\n          </div>\n        `\n    })\n    ```", "```js\n    export class CompanyDetailComponent implements OnInit {\n      public company: Company;\n      private _routeParams: RouteParams;\n      private _companyService: CompanyService;\n\n      constructor(companyService: CompanyService, routerParams: RouteParams) {\n        this._routeParams = routerParams;\n        this._companyService = companyService;\n      }\n\n      ngOnInit() {\n        const id: string = this._routeParams.get('id');\n        this.company = new Company();\n        this._companyService\n        .findById(id)\n        .subscribe((company) => {\n          this.company = company;\n        });\n      }\n    }\n    ```", "```js\n'use strict';\n\nconst _ = require('lodash');\nconst mongoose = require('mongoose');\nconst User = mongoose.model('User');\nconst ProfileBlock = mongoose.model('ProfileBlock');\nconst ObjectId = mongoose.Types.ObjectId;\n\nmodule.exports.getProfile = getUserProfile;\nmodule.exports.createProfileBlock = createUserProfileBlock;\nmodule.exports.updateProfile = updateUserProfile;\n```", "```js\n    function getUserProfile(req, res, next) {\n      User\n      .findById(req.user._id)\n      .select('+profile')\n      .exec((err, user) => {\n        if (err) {\n          return next(err);\n        }\n\n        req.resources.user = user;\n        next();\n      });\n    }\n    ```", "```js\n    function createUserProfileBlock(req, res, next) {\n      if (!req.body.title) {\n        return res.status(400).json({ message: 'Block title is required' });\n      }\n\n      var block = new ProfileBlock(req.body);\n      req.resources.user.profile.push(block);\n\n      req.resources.user.save((err, updatedProfile) => {\n        if (err) {\n          return next(err);\n        }\n\n        req.resources.block = block;\n        next();\n      });\n    }\n    ```", "```js\n    function updateUserProfile(req, res, next) {\n      // same as calling user.profile.id(blockId)\n      // var block = req.resources.user.profile.find(function(b) {\n      //   return b._id.toString() === req.params.blockId;\n      // });\n\n      let block = req.resources.user.profile.id(req.params.blockId);\n\n      if (!block) {\n        return res.status(404).json({ message: '404 not found.'});\n      }\n\n      if (!block.title) {\n        return res.status(400).json({ message: 'Block title is required' });\n      }\n\n      let data = _.pick(req.body, ['title', 'data']);\n      _.assign(block, data);\n\n      req.resources.user.save((err, updatedProfile) => {\n        if (err) {\n          return next(err);\n        }\n\n        req.resources.block = block;\n        next();\n      });\n    }\n    ```", "```js\n'use strict';\n\nconst mongoose = require('mongoose');\nconst commonHelper = require('../helpers/common');\nconst Schema = mongoose.Schema;\n\nlet ProfileBlock = new Schema({\n  title: {\n    type: String,\n    required: true\n  },\n  slug: String,\n  data: []\n});\n\nProfileBlock.pre('save', function(next) {\n  this.slug = commonHelper.createSlug(this.title);\n  next();\n});\n\nmodule.exports = mongoose.model('ProfileBlock', ProfileBlock);\n```", "```js\n'use strict';\n\nconst express = require('express');\nconst router = express.Router();\nconst profileCtrl = require('../controllers/profile');\nconst auth = require('../middlewares/authentication');\nconst response = require('../helpers/response');\n\nrouter.get(\n  '/profile',\n  auth.ensured,\n  profileCtrl.getProfile,\n  response.toJSON('user')\n);\n\nrouter.post(\n  '/profile/blocks',\n  auth.ensured,\n  profileCtrl.getProfile,\n  profileCtrl.createProfileBlock,\n  response.toJSON('block')\n);\n\nrouter.put(\n  '/profile/blocks/:blockId',\n  auth.ensured,\n  profileCtrl.getProfile,\n  profileCtrl.updateProfile,\n  response.toJSON('block')\n);\n\nmodule.exports = router;\n```", "```js\nimport { Injectable } from 'angular2/core';\nimport { Http, Response, Headers } from 'angular2/http';\nimport { Subject } from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/Subject/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { contentHeaders } from '../../common/index';\nimport { AuthHttp } from '../../auth/index';\nimport { Block } from './block.model';\n\n@Injectable()\nexport class ProfileService {\n  public user: Subject<any> = new BehaviorSubject<any>({});\n  public profile: Subject<Array<any>> = new BehaviorSubject<Array<any>>([]);\n  private _http: Http;\n  private _authHttp: AuthHttp;\n  private _dataStore: { profile: Array<Block> };\n}\n```", "```js\n      constructor(http: Http, authHttp: AuthHttp) {\n        this._http = http;\n        this._authHttp = authHttp;\n        this._dataStore = { profile: [] };\n        this.profile.subscribe((profile) => {\n          this._dataStore.profile = profile;\n        });\n      }\n    ```", "```js\n      public getProfile() {\n        this._authHttp\n        .get('/api/profile', { headers: contentHeaders })\n        .map((res: Response) => res.json())\n        .subscribe((user: any) => {\n          this.user.next(user);\n          this.profile.next(user.profile);\n        });\n      }\n    ```", "```js\n      public createProfileBlock(block) {\n        let body = JSON.stringify(block);\n\n        this._authHttp\n        .post('/api/profile/blocks', body, { headers: contentHeaders })\n        .map((res: Response) => res.json())\n        .subscribe((block: any) => {\n          this._dataStore.profile.push(block);\n          this.profile.next(this._dataStore.profile);\n        }, err => console.error(err));\n      }\n    ```", "```js\n      public updateProfileBlock(block) {\n        if (!block._id) {\n          this.createProfileBlock(block);\n        } else {\n          let body = JSON.stringify(block);\n\n          this._authHttp\n          .put(`/api/profile/blocks/${block._id}`, body, { headers: contentHeaders })\n          .map((res: Response) => res.json())\n          .subscribe((block: any) => {\n            this.updateLocalBlock(block);\n          }, err => console.error(err));\n        }\n      }\n    ```", "```js\n      private updateLocalBlock(data) {\n        this._dataStore.profile.forEach((block) => {\n          if (block._id === data._id) {\n            block = data;\n          }\n        });\n\n        this.profile.next(this._dataStore.profile);\n      }\n    ```", "```js\n    import { Component, OnInit } from 'angular2/core';\n    import { ProfileBlockComponent } from './profile-block.component';\n    import { ProfileService } from '../profile.service';\n    import { Block } from '../block.model';\n    ```", "```js\n    @Component({\n        selector: 'profile-edit',\n        directives: [ProfileBlockComponent],\n        template: `\n        <section>\n\n          <div class=\"jumbotron\">\n            <h2>Hi! {{user.name}}</h2>\n            <p class=\"lead\">Your public e-mail is <span>{{user.email}}</span> <br> and this is your profile</p>\n          </div>\n\n          <div class=\"row\">\n            <div class=\"col-md-12\">\n              <div class=\"profile-block\" *ngFor=\"#block of profile\">\n                <profile-block [block]=\"block\"></profile-block>\n              </div>\n            </div>\n\n            <form class=\"form-horizontal col-md-12\">\n              <div class=\"form-group\">\n                <div class=\"col-md-12\">\n                  <input [(ngModel)]=\"newBlock.title\" type=\"text\" class=\"form-control\" placeholder=\"Block title\">\n                </div>\n              </div>\n              <div class=\"form-group\">\n                <div class=\"col-md-12\">\n                  <button (click)=\"onClick($event)\" class=\"button\">New block</button>\n                </div>\n              </div>\n            </form>\n          </div>\n\n        </section>\n        `\n    })\n    ```", "```js\n    export class ProfileEditComponent implements OnInit {\n      public user: any;\n      public profile: any;\n      public newBlock: Block;\n      private _profileService: ProfileService;\n\n      constructor(profileService: ProfileService) {\n        this._profileService = profileService;\n      }\n    }\n    ```", "```js\n      ngOnInit() {\n        this.user = {};\n        this.newBlock = new Block();\n        this._profileService.user.subscribe((user) => {\n          this.user = user;\n        });\n        this._profileService.profile.subscribe((profile) => {\n          this.profile = profile;\n        });\n        this._profileService.getProfile();\n      }\n    ```", "```js\n      onClick(event) {\n        event.preventDefault();\n        let profile = this.profile.slice(0);  // clone the profile\n        let block = Object.assign({}, this.newBlock); // clone the new block\n\n        profile.push(block);\n        this._profileService.profile.next(profile);\n        this.newBlock = new Block();\n      }\n    ```", "```js\n    import { Component, OnInit } from 'angular2/core';\n    import { ProfileService } from '../profile.service';\n    import { Block } from '../block.model';\n    import { Entry } from '../entry.model';\n    ```", "```js\n    @Component({\n        selector: 'profile-block',\n        inputs: ['block'],\n        template: `\n          <div class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n              <h3 class=\"panel-title\">{{block.title}}</h3>\n            </div>\n            <div class=\"panel-body\">\n              <div class=\"profile-block-entries\">\n                <div *ngFor=\"#entry of block.data\">\n                  <div class=\"form-group\">\n                    <label>Title</label>\n                    <input class=\"form-control\" type=\"text\"\n                      (keydown.enter)=\"onEnter($event)\"\n                      [(ngModel)]=\"entry.title\">\n                  </div>\n                  <div class=\"form-group\">\n                    <label>Sub title</label>\n                    <input class=\"form-control\" type=\"text\"\n                      (keydown.enter)=\"onEnter($event)\"\n                      [(ngModel)]=\"entry.subTitle\">\n                  </div>\n                  <div class=\"form-group\">\n                    <label>Description</label>\n                    <textarea class=\"form-control\"\n                      (keydown.enter)=\"onEnter($event)\"\n                      [(ngModel)]=\"entry.description\"></textarea>\n                  </div>\n                  <hr>\n                </div>\n              </div>\n              <button class=\"btn btn-default btn-xs btn-block\" (click)=\"addEntry($event)\">\n                <i class=\"glyphicon glyphicon-plus\"></i> Add new entry\n              </button>\n            </div>\n          </div>\n        `\n    })\n    ```", "```js\n    export class ProfileBlockComponent implements OnInit {\n      public block: any;\n      private _profileService: ProfileService;\n\n      constructor(profileService: ProfileService) {\n        this._profileService = profileService;\n      }\n\n      ngOnInit() {\n        console.log(this.block);\n      }\n\n      addEntry(event) {\n        event.preventDefault();\n        this.block.data.push(new Entry());\n      }\n\n      onEnter(event) {\n        event.preventDefault();\n        this._profileService.updateProfileBlock(this.block);\n      }\n    }\n    ```", "```js\nexport class Entry {\n  title: string;\n  subTitle: string;\n  description: string;\n\n  constructor(\n    title?: string,\n    subTitle?: string,\n    description?: string\n  ) {\n    this.title = title || '';\n    this.subTitle = subTitle || '';\n    this.description = description || '';\n  }\n}\n```", "```js\nimport { Entry } from './entry.model';\n\nexport class Block {\n  _id: string;\n  title: string;\n  slug: string;\n  data: Array<any>;\n\n  constructor(\n    _id?: string,\n    title?: string,\n    slug?: string,\n    data?: Array<any>\n  ) {\n    this._id = _id;\n    this.title = title;\n    this.slug = slug;\n    this.data = data || [new Entry()];\n  }\n}\n```"]