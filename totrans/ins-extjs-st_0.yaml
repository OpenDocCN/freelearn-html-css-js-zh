- en: Chapter 1. Instant Ext JS Starter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 立即开始使用Ext JS
- en: Welcome to *Instant Ext JS Starter*. This book has been especially created to
    provide you with all the information that you need to start with the Ext JS @
    Sencha JavaScript framework. You will understand what the framework does, get
    started with building your first browser-based application/widget, and discover
    its rich and modern UI components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎使用 *立即开始使用Ext JS*。这本书特别创建，旨在为你提供所有开始使用Ext JS @ Sencha JavaScript框架所需的信息。你将了解框架的功能，开始构建你的第一个基于浏览器的应用程序/小部件，并发现其丰富和现代的UI组件。
- en: 'This document contains the following sections:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档包含以下部分：
- en: '*So, what is Ext JS?* looks at what Ext JS actually is, what you can do with
    it, and why it''s so great.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*那么，什么是Ext JS呢？* 这篇文章探讨了Ext JS究竟是什么，你可以用它做什么，以及为什么它如此出色。'
- en: '*Installation and environment setup* teaches you how to download and install
    Ext Js with minimum fuss and then how to set up a quick working environment.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安装和环境设置* 教你如何轻松下载和安装Ext Js，然后如何设置一个快速的工作环境。'
- en: '*Quick Start – Creating and defining your Ext JS application* explains to you
    the basics of the framework, class system, extend, apply, and a few other EXT
    JS built-in basic functions.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*快速入门 – 创建和定义你的Ext JS应用程序* 向你解释了框架的基本知识、类系统、扩展、应用以及一些其他EXT JS内置的基本函数。'
- en: '*Top features you''ll want to know about* explains the basics of the framework,
    class system, types of components, how to lay out the components and their containers,
    event mechanisms, and custom components and theming.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*你想要了解的顶级功能* 解释了框架的基本知识、类系统、组件类型、如何布局组件及其容器、事件机制以及自定义组件和主题。'
- en: '*People and places you should get to know* provides you with many useful links
    to the project page and forums, as well as a number of helpful articles, tutorials,
    and contributors.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*你应该了解的人和地方* 为你提供了许多有用的链接到项目页面和论坛，以及一系列有帮助的文章、教程和贡献者。'
- en: So, what is Ext JS?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么，什么是Ext JS？
- en: '**Ext JS** is a JavaScript library that makes it (relatively) easy to create
    cross-platform browser and desktop-style user interfaces in a web application.
    It supports the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ext JS** 是一个JavaScript库，它使得在Web应用程序中创建跨平台的浏览器和桌面风格的用户界面变得（相对）容易。它支持以下功能：'
- en: Component model
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件模型
- en: Layouts
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布局
- en: Plugin free charting
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无插件图表
- en: Drawing
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘图
- en: CSS theming
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS主题
- en: JavaScript is a classless, prototype-oriented language but Ext JS follows a
    class-based approach to make the code extensible and scalable over time. Class
    names can be grouped into packages with namespaces using the object property dot-notation
    (`.`). Namespaces allow developers to write structured and maintainable code,
    use libraries without the risk of overwriting functions, avoid cluttering the
    global namespace, and provide an ability to encapsulate the code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种无类的、面向原型的语言，但Ext JS遵循基于类的方法，使代码随着时间的推移具有可扩展性和可伸缩性。类名可以使用对象属性点符号（`.`）分组到具有命名空间的包中。命名空间允许开发者编写结构化和可维护的代码，使用库而无需担心覆盖函数，避免污染全局命名空间，并提供封装代码的能力。
- en: The strength of the framework lies in its component design. The bundled, basic
    default components can be easily extended as per your needs and the extended components
    can be re-used. A new component can also be created by combining one or more default
    components.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 框架的强大之处在于其组件设计。捆绑的基本默认组件可以轻松扩展以满足你的需求，扩展组件可以重用。也可以通过组合一个或多个默认组件来创建新的组件。
- en: The framework includes many default components such as windows, panels, toolbars,
    drop-down menus, menu bars, dialog boxes, grids, trees, and much more, each with
    their own configuration properties (configs), component properties, methods, events,
    and CSS classes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 框架包括许多默认组件，如窗口、面板、工具栏、下拉菜单、菜单栏、对话框、网格、树形控件等，每个组件都有自己的配置属性（configs）、组件属性、方法、事件和CSS类。
- en: The **configs** are user-configurable at runtime while instantiating, whereas
    component properties are references to objects used internally by class. **Component
    properties** belong to the prototype of the class and affect all the instances
    of the class. The **properties** of the individual components determine the look
    and feel. The **methods** help in achieving a certain action. The **user interaction**
    triggers the equivalent Ext JS events apart from triggering the DOM events.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**配置**可以在运行时进行用户配置，而组件属性是类内部使用的对象的引用。**组件属性**属于类的原型，并影响类的所有实例。**属性**决定了组件的外观和感觉。**方法**有助于实现特定动作。**用户交互**除了触发
    DOM 事件外，还会触发等效的 Ext JS 事件。'
- en: A cross-browser web application with header, footer, left column section with
    links, a content with a CSS grid/table (with add, edit, and delete actions for
    each row of the grid), and a form with few text fields and a submit button can
    be created with ease using Ext JS's layout mechanism, few default components,
    and the CSS theme.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Ext JS 的布局机制、少量默认组件和 CSS 主题，可以轻松创建具有页眉、页脚、左侧链接列、CSS 网格/表格（对网格的每一行具有添加、编辑和删除操作）以及少量文本字段和提交按钮的跨浏览器网页应用。
- en: For the preceding application, the border layout can be used with the north
    region for the header, south region for the footer, west region for the left column
    links, and center region for the content. The content area can have a horizontal
    layout, with the grid and form panel components with text fields and buttons.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前面的应用，可以使用边框布局，其中北部区域用于页眉，南部区域用于页脚，西部区域用于左侧链接列，中心区域用于内容。内容区域可以采用水平布局，包括带有文本字段和按钮的网格和表单面板组件。
- en: Creating the preceding application from scratch without using the framework
    will take a lot more time than it would take by using it. Moreover, this is just
    one screen, and as the development progresses with more and more features, incorporating
    new layouts and creating new components will be a tedious process.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不使用框架从头开始创建前面的应用，所需的时间会比使用框架时多得多。此外，这只是一个屏幕，随着开发进程的推进，越来越多的功能，整合新的布局和创建新的组件将是一个繁琐的过程。
- en: All the components or a group of components with their layout can be made a
    custom component and re-used with different data (that is, the grid data can be
    modified with new data and re-used in a different page).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将所有组件或具有其布局的一组组件制作成自定义组件，并使用不同的数据（即，可以修改网格数据以使用新数据，并在不同的页面上重复使用）进行重用。
- en: Developers need not worry about the cross-platform compatibility issues, since
    the framework takes care of this, and they can concentrate on the core logic.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者无需担心跨平台兼容性问题，因为框架会处理这些问题，他们可以专注于核心逻辑。
- en: The helper functions of the `Ext.DomQuery` class can be used for querying the
    DOM. The error handling can be done by using the `Ext.Error` class, which is a
    wrapper for the native JavaScript Error object.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `Ext.DomQuery` 类的辅助函数来查询 DOM。可以通过使用 `Ext.Error` 类来处理错误，它是对原生 JavaScript
    Error 对象的包装。
- en: A simple webpage with a minimal UI too can make use of this framework in many
    ways.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是一个具有最小 UI 的简单网页，也可以以多种方式使用这个框架。
- en: Native JavaScript offers utility classes such as `Array`, `Number`, `Date`,
    `Object`, `Function`, and `String`, but is limited in what can be done with it
    across different browsers. Ext JS provides its own version of these classes that
    works in all the browsers along with offering extra functionality.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 原生 JavaScript 提供了如 `Array`、`Number`、`Date`、`Object`、`Function` 和 `String` 等实用类，但在不同浏览器中可以做的事情有限。Ext
    JS 提供了适用于所有浏览器的这些类的版本，并提供了额外的功能。
- en: Any Ext JS component can be added to an existing web page by creating an instance
    of it. For example, a tab feature can be added to an existing web page by creating
    a new Ext JS `Ext.tab` tab component and adding it to an existing `div` container,
    by referring the div elements `id` attribute to the `renderTo` config property
    of the tab. The backend communication with your server-side code can be done by
    using simplified cross-browser `Ext.Ajax` class methods.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过创建其实例来将任何 Ext JS 组件添加到现有网页中。例如，可以通过创建一个新的 Ext JS `Ext.tab` 标签组件并将其添加到现有的
    `div` 容器中，通过将 div 元素的 `id` 属性引用到标签的 `renderTo` 配置属性来向现有网页添加标签功能。可以通过使用简化的跨浏览器
    `Ext.Ajax` 类方法与服务器端代码进行后端通信。
- en: Ext JS 4 supports all major web browsers, from Internet Explorer 6 to the latest
    version of Google Chrome. The recommended browsers for development and debugging
    are Google Chrome 10+, Apple Safari 5+, and Mozilla Firefox 4+.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Both commercial and open source licenses are available for Ext JS.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Installation and environment setup
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In five easy steps, you can be ready with Ext JS and start the development.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 – What do you need?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You need the following components for the installation and environment setup:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '**Web browser**: Any of the leading browsers mentioned in previous section.
    For this book, we will consider Mozilla Firebug with the Firebug debugger plugin
    installed.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web server**: To start with, a local web server is not required, but it will
    be required if communication with a server is required to make AJAX calls.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ext JS 4 SDK**: Download the Ext JS bundle from [http://www.sencha.com/products/extjs/download/](http://www.sencha.com/products/extjs/download/).'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the **Download** button on the left side of the page.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 – Installing the browser and debugger
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any supported browser mentioned in the previous section can be used for the
    tutorial. For simplicity and debugging options, we will use the latest Firefox
    and Firebug debugger plugin. Download the latest Firefox plugin from [http://www.mozilla.org/en-US/firefox/fx/#desktop](http://www.mozilla.org/en-US/firefox/fx/#desktop)
    and Firebug from [https://getfirebug.com/](https://getfirebug.com/).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Other browser debugging options are as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '**Google Chrome**: Chrome Developer Tools (**Tools** | **Developer tools**)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safari**: Go to **Settings** | **Preferences** |**Advanced**, select **Show
    Develop menu in menu bar**; navigate to **Develop** | **Show Web Inspector**.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internet Explorer**: Go to **Tools** | **Developer Tools**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 3 – Installing the web server
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the web server and unpack Ext JS.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'The URLs that provide information for installing the Apache web server on various
    operating systems are provided as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: The instructions for installing Apache on Windows can be found at [http://httpd.apache.org/docs/current/platform/windows.html](http://httpd.apache.org/docs/current/platform/windows.html)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The instructions for installing Apache on Linux can be found at [http://httpd.apache.org/docs/current/install.html](http://httpd.apache.org/docs/current/install.html)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mac OS X comes with a built-in Apache installation, which you can enable by
    navigating to **System Preferences** | **Sharing**, and selecting the **Web Sharing**
    checkbox
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Apache or any other web server in your system. Browse to [http://yourwebserver.com](http://yourwebserver.com)
    or `http://localhost`, and check that the installation is successful.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'The [http://yourwebserver.com](http://yourwebserver.com) link will show something
    similar to the the following screenshot, which confirms that Apache is installed
    successfully:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 – Installing the web server](img/6108OS_02_01.png.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: Step 4 – Unpacking Ext JS
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this tutorial, we will use Apache for Windows. Unpack the Ext JS bundle into
    the web server's root directory (`htdocs`). Rename the `Ext JS` folder with long
    version numbers to `extjs4` for simplicity. The root directory varies, depending
    upon your operating system and web server.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'The Apache root directory path for various operating system are as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows**: `C:\Program Files\Apache Software Foundation\Apache2.2\htdocs`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux**: `/var/www/`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mac OS X**: `/Library/WebServer/Documents/`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The downloaded EXT JS bundle is packed with examples along with required sources.
    Browse to `http://yourwebserver.com/extjs4`, and make sure that it loads the Ext
    JS index page. This page provides access to all the examples to play around with
    the API. The **API Docs** link at bottom-right of the page lists the API information
    with a search text field at the top-right side of the page. As we progress through
    the tutorial, please refer to the API as and when required:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 – Unpacking Ext JS](img/6108OS_02_02.png.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: Step 5 –Testing Ext JS library.
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A basic Ext JS application page will have a link tag with an Ext JS CSS file
    (`ext-all.css`), a script tag for the Ext JS library, and scripts related to your
    own application. In this example, we don't have any application-specific JavaScripts.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Create an HTML file named `check.html` with the code that follows beneath the
    `httpd` folder.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '`Ext.onReady` is a method, which is executed when all the scripts are fully
    loaded. `Ext.Msg.alert` is a message box that shows a message to the user. The
    first parameter is the title and the second parameter is the message:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot shows `check.html` in action:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 –Testing Ext JS library.](img/6108OS_02_03.png.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: And that's it
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By now, you should have a working installation of Ext JS, and should be able
    to play around and discover more about it.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Quick start – Creating and defining your Ext JS application
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will explain how to create an application, define and create a
    class, and load the class on demand and a few other EXT JS built-in basic functions.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 – Preparing for an Ext JS application
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The core library is packaged in three different ways:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '`ext.js`: This is the production version, which is minified and compressed'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ext-debug.js`: This is the unminified development version'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ext-dev.js`: This is the unminified development version, but outputs detailed
    error messages and warnings'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start with, create the following.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: A folder called `ExtJSStarter` under the `httpd` root folder
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three folders named `app`, `data`, and `resources` respectively
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `index.html` file, from where the application will be hosted
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `starerApp.js` file through which all the application level JavaScript files
    are dynamically loaded on an as-needed basis
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The resulting structure will be as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: httpd
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '`extjs4` (unpacked ExtJS Framework and renamed to `extjs4`)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExtJSStarter`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app` (folder for application-specific JavaScript files)'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data` (folder for data)'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data`（数据文件夹）'
- en: '`resources` (folder for images and CSS files)'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resources`（图像和 CSS 文件的文件夹）'
- en: '`starterApp.js`'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`starterApp.js`'
- en: '`index.html`'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`'
- en: 'The core library is packaged in three different ways:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 核心库以三种不同的方式打包：
- en: '`ext.js`: This is the production version, which is minified and compressed'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ext.js`：这是生产版本，已压缩和压缩'
- en: '`ext-debug.js`: This is the unminified development version'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ext-debug.js`：这是未压缩的开发版本'
- en: '`ext-dev.js`: This is the unminified development version, but outputs detailed
    error messages and warnings'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ext-dev.js`：这是未压缩的开发版本，但会输出详细的错误信息和警告'
- en: 'A basic Ext JS application page will have a `link` tag with an Ext JS CSS file
    (`ext-all.css`), a `script` tag for `ext-dev.js`, and scripts related to your
    own application:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一个基本的 Ext JS 应用程序页面将有一个带有 Ext JS CSS 文件（`ext-all.css`）的 `link` 标签，一个 `ext-dev.js`
    的 `script` 标签，以及与您自己的应用程序相关的脚本：
- en: '[PRE1]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The Ext JS library can also be loaded alternatively from CDN:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS 库也可以从 CDN 以不同的方式加载：
- en: '[http://cdn.sencha.io/ext-4.0.7-gpl/ext-all.js](http://cdn.sencha.io/ext-4.0.7-gpl/ext-all.js)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://cdn.sencha.io/ext-4.0.7-gpl/ext-all.js](http://cdn.sencha.io/ext-4.0.7-gpl/ext-all.js)'
- en: '[http://cdn.sencha.io/ext-4.0.7-gpl/resources/css/ext-all.css](http://cdn.sencha.io/ext-4.0.7-gpl/resources/css/ext-all.css)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://cdn.sencha.io/ext-4.0.7-gpl/resources/css/ext-all.css](http://cdn.sencha.io/ext-4.0.7-gpl/resources/css/ext-all.css)'
- en: 'The following screenshot shows the index page as loaded in the browser with
    the Firebug having the **Net** tab open. The bottom Firebug debugger pane is made
    visible by clicking on the Firebug bug icon at the top-right corner of the browser
    window. It shows a list of files the browser has requested:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在浏览器中加载的索引页面，Firebug 有 **网络** 选项卡打开。通过点击浏览器窗口右上角的 Firebug 虫图标，使底部的 Firebug
    调试器面板可见。它显示了浏览器请求的文件列表：
- en: '![Step 1 – Preparing for an Ext JS application](img/6108OS_03_01.png.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![步骤 1 – 准备 Ext JS 应用程序](img/6108OS_03_01.png.jpg)'
- en: Step 2 – The MVC architecture
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 2 – MVC 架构
- en: '**Model View Controller** (**MVC**) is a well-known software architecture pattern,
    which separates the representation of information from the user''s interaction
    with it. Ext JS comes with this architecture by default, and defines the architecture
    as follows.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**模型视图控制器**（**MVC**）是一个著名的软件架构模式，它将信息的表示与用户的交互分离。Ext JS 默认提供此架构，并定义了以下架构。'
- en: '**Model**: It is collection of data fields, which persist through the data
    package. A model can be linked to another model using association and data steams,
    using proxy. It updates views when the data changes.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：它是数据字段的集合，通过数据包持久化。模型可以通过关联和数据流使用代理链接到另一个模型。数据变化时更新视图。'
- en: '**View**: A view requests the information from the model that it needs to generate
    an output representation.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：视图请求模型中所需的信息以生成输出表示。'
- en: '**Controller**: It holds application logic. It also instantiates models, stores,
    and views. It listens for events and modifies models and views.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：它包含应用逻辑。它还实例化模型、存储和视图。它监听事件并修改模型和视图。'
- en: Ext JS provides controllers with the `refs` property to gain reference to components
    inside the app, and a `control` method to take action based on the events that
    the referenced components fire. The *Top features you will want to know about*
    section deals in detail about handling events with controllers.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS 通过 `refs` 属性提供控制器以获取应用程序内组件的引用，并通过 `control` 方法根据引用组件触发的事件采取行动。*您想了解的顶级功能*部分详细介绍了使用控制器处理事件。
- en: Step 3 – Defining your Ext JS application
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 3 – 定义您的 Ext JS 应用程序
- en: Every Ext JS application starts with a call to `Ext.application()` to provide
    global settings, root namespace, references to other JavaScript files, and a `launch`
    function to execute the application.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Ext JS 应用程序都以调用 `Ext.application()` 开始，以提供全局设置、根命名空间、对其他 JavaScript 文件的引用，以及一个
    `launch` 函数来执行应用程序。
- en: Inside `starterApp.js`, define an application named `app` for the global namespace.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `starterApp.js` 内部，为全局命名空间定义一个名为 `app` 的应用程序。
- en: Define a `launch` function that outputs `Welcome to Ext Starter Tutorial` in
    the console and in the alert box.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个 `launch` 函数，在控制台和警告框中输出 `欢迎使用 Ext Starter 教程`。
- en: 'The Firebug console appears similar to the following code snippet:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Firebug 控制台看起来类似于以下代码片段：
- en: '[PRE2]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code snippet creates a global variable named `app`, and adds a
    `requires` property to load the Ext JS message box class on demand. All that the
    Ext JS application uses is only a single global variable. All application classes
    reside in this single namespace. When the page is ready, it calls the `launch`
    function and executes the `console.log` and `Ext.Msg.alert()` statement.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'Using namespaces in JavaScript is a recommended practice to reduce the number
    of objects and functions that are added to the global scope in our applications.
    Namespaces are not built into the language, but the same benefits can be achieved
    by creating a single object (that is, `app`) and adding all our objects and functions
    to this object. It also helps to avoid the object collision, when using one JavaScript
    library with another one:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 – Defining your Ext JS application](img/6108OS_03_02.png.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: Step 4 – Understanding the Ext JS class hierarchy
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Ext JS framework is bundled with many well-organized classes that provide
    encapsulation and strong typing. Many classes in Ext JS are implemented as singletons
    with a set of static methods.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'The class hierarchy starts from `Ext.Base` and drills down to various other
    class/components. A panel component is defined as `Ext.panel.panel`, and the class
    hierarchy will be similar to the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 – Understanding the Ext JS class hierarchy](img/6108OS_03_03.png.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
- en: 'Please refer to the following links for API reference:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '**Offline API**: [http://yourservername.com/extjs4/ docs/index.html](http://yourservername.com/extjs4/%20docs/index.html)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Online API**: [http://docs.sencha.com/ext-js/4-0/](http://docs.sencha.com/ext-js/4-0/)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The API provides an easy "search" text field to search for a particular component.
    Searching for `panel` reveals a list of items that matches the word `panel`. Clicking
    on **Ext.panel.Panel** loads the panel API document. The top section shows links
    to configs, properties, methods, and events supported by the `panel` class. Explore
    all the provided options and get familiar with its usage.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, search for the `Ext.` application that was used to launch an
    application in the previous step in the **Search** field, and get familiar with
    the API:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 – Understanding the Ext JS class hierarchy](img/6108OS_03_04.png.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
- en: The names of the classes map directly to the file paths in which they are stored.
    The panel class is stored at [http://yourservername.com/extjs4/src/panel/Panel.js](http://yourservername.com/extjs4/src/panel/Panel.js).
    The link [http://yourservername.com/extjs4/src](http://yourservername.com/extjs4/src)
    is mapped to the `Ext` class.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Step 5 – Defining and creating the Ext JS class
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A class in Ext JS 4 is defined using `Ext.define()`. `Ext.define()` detects
    and creates a new namespace as required, extends a class, and defers the creation
    of a new class if the class being extended has not been defined.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'A class definition for `app.extJsBook` with its properties can be illustrated
    by the following code snippet:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了 `app.extJsBook` 类及其属性的类定义示例：
- en: '[PRE3]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding code snippet is explained as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段的解释如下：
- en: '`Config`: This allows to specify parameters that can be changed while instantiation'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`配置`：允许在实例化时指定可以更改的参数'
- en: '`Constructor`: This is called during instantiation of the objects'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`构造函数`：在对象实例化期间调用'
- en: '`initConfig(config)`: This creates `setter` and `getter` methods for config
    properties (that is, `setTitle()`, `getTitle()`, `setprice()`, `getPrice()`, `setAuthor()`,
    and `getAuthor()`)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initConfig(config)`：这为配置属性创建 `setter` 和 `getter` 方法（即 `setTitle()`、`getTitle()`、`setprice()`、`getPrice()`、`setAuthor()`
    和 `getAuthor()`）'
- en: 'The `app.extJsBook` class can be instantiated by using the `Ext.create()` method
    as illustrated in the following code snippet:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `Ext.create()` 方法实例化 `app.extJsBook` 类，如下面的代码片段所示：
- en: '[PRE4]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Add the code snippet of class definition and creation inside the `launch` method
    of `Ext.application` that was created in step 3.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 3 中创建的 `Ext.application` 的 `launch` 方法内部添加类定义和创建的代码片段。
- en: 'Executing `index.html` will output something similar to the following screenshot.
    Please note that the message box shown is only the third message, and all previous
    messages have been overridden but are shown in the console for clarity:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `index.html` 将输出类似于以下截图的内容。请注意，显示的消息框仅是第三个消息，所有之前的消息都已覆盖，但在控制台中显示以增强清晰度：
- en: '![Step 5 – Defining and creating the Ext JS class](img/6108OS_03_05.png.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![第 5 步 – 定义和创建 Ext JS 类](img/6108OS_03_05.png.jpg)'
- en: 'To understand the component architecture, let''s move the class definition
    to a separate file called `extjsBook` under the `ExtJSStarter/apps` directory.
    Add the name of the `app.extjsBook` class to the `requires` attribute of the application
    to load the class dynamically:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解组件架构，让我们将类定义移动到 `ExtJSStarter/apps` 目录下的一个单独的文件 `extjsBook` 中。将 `app.extjsBook`
    类的名称添加到应用程序的 `requires` 属性中，以动态加载该类：
- en: '[PRE5]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`Ext.define()` provides two other important methods, which are `applyProperty()`
    and `updateProperty()`. The `apply` property is used to add additional logic to
    the setters, whereas the update `property` is used to do post processing or notification
    after the value has been set. In order to see both new and old values in the console,
    set `author` twice (that is, call `book.setAuthor()` in the application code twice).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ext.define()` 提供了另外两个重要的方法，即 `applyProperty()` 和 `updateProperty()`。`apply`
    属性用于向设置器添加额外的逻辑，而 `update` 属性用于在值设置后进行后处理或通知。为了在控制台中看到新旧值，请将 `author` 设置两次（即在应用程序代码中两次调用
    `book.setAuthor()`）。'
- en: 'The following code snippet changes the book title to uppercase and logs the
    new and old value of the author:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段将书名改为大写，并记录作者的新旧值：
- en: '[PRE6]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The highlighted code to capitalize the author name uses `Ext.String.capitalize()`
    , an Ext JS version of the native JavaScript `String` utility class.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 用于将作者姓名首字母大写的突出显示代码使用了 `Ext.String.capitalize()`，这是 Ext JS 版本的本地 JavaScript
    `String` 工具类。
- en: Note
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A class's functionality can also be added to another class using the `mixins`
    property. A static method can be added using the `static` property.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用 `mixins` 属性将一个类的功能添加到另一个类中。可以使用 `static` 属性添加静态方法。
- en: Step 6 – Instantiating Ext JS components
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 6 步 – 实例化 Ext JS 组件
- en: Components can be created either by using the `Ext.create()` method or by using
    the component's `xtype` property as a member of the parent component's `items`
    config.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 组件可以通过使用 `Ext.create()` 方法或使用组件的 `xtype` 属性作为父组件 `items` 配置的成员来创建。
- en: '`Ext.container.AbstractContainer` in the class hierarchy provides the `items`
    configuration property to all its component sub-classes to add a single item,
    or an array of child components to the specified container.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ext.container.AbstractContainer` 在类层次结构中为所有其组件子类提供了 `items` 配置属性，以便添加单个项目或子组件数组到指定的容器中。'
- en: '`Ext.Abstractcomponent` provides the `xtype` property, which is a shorter alternative
    to creating objects than using a full class name. Using `xtype` is the most common
    way to define component instances, especially in a container.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ext.Abstractcomponent` 提供了 `xtype` 属性，这是创建对象时比使用完整类名更短的替代方案。使用 `xtype` 是定义组件实例最常见的方式，尤其是在容器中。'
- en: Note
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`Ext.create` is just like using the `new` keyword, and it will create the class
    right away, whereas with `xtype`, the class will not be created until it is needed.
    This is called **lazy-instantiation**. A hidden tab or panel with components laid
    using `xtype` will not be loaded until the tab or panel is visible, thereby increasing
    the performance of the page load time.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code snippet illustrates a panel with 5 px padding
    on all four sides and 300 px width, containing text fields and two custom buttons
    rendered in the document''s DOM body using the `renderTo` property:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Three components have been included inside the item''s configuration property.
    The `renderTo` property can be either an ID of an element or an element. `Ext.getBody()`
    returns the current document body as `Ext.Element`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'A text field: A text field is instantiated using the `xtype` text field. Ext
    JS provides `xtype` for most of its available components.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Custom button component 1: An `app.extjsButton` button component is instantiated
    using the `Ext.create()` method, as discussed in a previous step.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Custom button component 2: An `app.extjsButton` button component is instantiated
    using a custom `xtype` name. In order for this to work, our `app.extjsBook` class
    definition needs to have `xtype` and `extend` properties specified along with
    a call to its parent `Button` class, as follows:'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Adding the preceding code inside the application''s `launch` function and with
    the modified `app.extjsButton` class property to support `xtype` will display
    something similar to the following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 6 – Instantiating Ext JS components](img/6108OS_03_06.png.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
- en: Note
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`xtype` for all EXT JS components can be found at [http://docs.sencha.com/ext-js/4-1/#!/api/Ext.enums.Widget](http://docs.sencha.com/ext-js/4-1/#!/api/Ext.enums.Widget).'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Step 7 – Using Ext JS Lang functions
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Native JavaScript offers a variety of utility classes such as `Array`, `Date`,
    `Number`, `Object`, and `String`. Ext JS provides its own version of utility classes
    for a smooth and consistent development experience across all browsers. It also
    provides extra functionality that is not available in native JavaScript. The available
    functions offer additional benefits. These can be found under `Ext.Array`, `Ext.Date`,
    `Ext.Number`, and so on. Making use of these functions wherever applicable will
    help to concentrate on core application logic, saving development time spent working
    on conversion utilities. A developer-specific class can also be added to the `Ext`
    namespace using `Ext.Define` with specific methods:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '`Ext.Array.contains(array,item)` can check whether or not the given array contains
    the specified item.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ext.Date` supports a broad range of date formats that comes in handy while
    working with dates.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, `Ext.Date.format(new Date(), 'Y-m-d'))` can be used to show the
    current date in YEAR-MM-DD format.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Ext.Function` provides functions to manage the ability to call functions with
    more features and control.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, `Ext.Function.defer()` can be used to call a function after the
    number of milliseconds specified, optionally in a specific scope.
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Ext.Number` provides six methods to handle numeric values.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, `Ext.Number.randomInt(10,20)` returns a random integer between
    10 and 20.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Ext.Object` provides about 10 methods to query and manipulate objects and
    JSON data structures.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, `Ext.Object.fromQueryString('bookName=ExtJs&type=ebook')` outputs
    `{bookName:'ExtJs', type:'ebook'}`.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Ext.String` provides useful methods to manipulate strings.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, `htmlEncode(value)` converts certain characters (`&`, `<`, `>`,
    `'`, and `"`) to their HTML character equivalents, for literal display in web
    pages.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Top features you'll want to know about
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will deal with various Ext JS containers, components, forms, controllers,
    layouts, event mechanism, data package, templates, and so on.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 1 – Layout mechanism
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ext JS container requires a layout to manage the sizing, positioning and layering
    of the child components. It provides different types of layouts to cater for most
    of the positioning requirements that anyone will come across.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: A simple HTML container with the `div` HTML element with CSS styling can be
    rendered easily with a few lines of code using the layout configuration property.
    The Ext JS layout mechanism takes care of generating the HTML element containers
    with clearly applied styles using the default CSS.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: The following table lists the type of layouts, the component position depiction,
    and explains where it can be utilized. These layouts can be used either as they
    are, or combined with more than one, or in a nested fashion. Each layout provides
    specific configuration properties to size and position the child components. If
    the layout configuration is not specified, it uses a default layout manager that
    renders the components sequentially, one after the other. As we go through learning
    different components, different layouts will be shown to position the components.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'The layouts and component depiction table is as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '| Layout name | Component position depiction | Where to use? |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
- en: '| Absolute | ![1 – Layout mechanism](img/6108OS_01_A.jpg) | To position like
    CSS style positioning with X-Y coordinates |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
- en: '| Accordion | ![1 – Layout mechanism](img/6108OS_01_B.jpg) | To display one
    panel (that is, a page or a section) at a time in a stacked list of panels. |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
- en: '| Anchor | ![1 – Layout mechanism](img/6108OS_01_C.jpg) | To position the child
    components relative to their container. |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
- en: '| Border | ![1 – Layout mechanism](img/6108OS_01_D.jpg) | To lay different
    components on all the four sides (that is, north, south, east, and west) with
    the necessary center region. It provides collapse and resize behaviors. |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
- en: '| Card (Tab Panel) | ![1 – Layout mechanism](img/6108OS_01_E.jpg) | To create
    tabs for each section with tab names. |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
- en: '| Card (Wizard) | ![1 – Layout mechanism](img/6108OS_01_F.jpg) | To have a
    stack of pages one above the other, and show one page at a time hiding all others.
    |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
- en: '| Column | ![1 – Layout mechanism](img/6108OS_01_G.jpg) | To have content sections
    in different columns. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
- en: '| Fit | ![1 – Layout mechanism](img/6108OS_01_H.jpg) | To stretch and fill
    the child component with its container. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
- en: '| Table | ![1 – Layout mechanism](img/6108OS_01_I.jpg) | To create tables in
    the form of a standard HTML table. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
- en: '| vBox | ![1 – Layout mechanism](img/6108OS_01_J.jpg) | To show the components
    vertically one below the other. It requires `height` for fixed height or `flex`
    to stretch the available height with respect to its container. |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
- en: '| hBox | ![1 – Layout mechanism](img/6108OS_01_K.jpg) | To show the components
    horizontally, one after another in a serial fashion. It requires `width` for a
    fixed width or `flex` to stretch to the available width with respect to its container.
    |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
- en: '| Nested Layout | ![1 – Layout mechanism](img/6108OS_01_L.jpg) | A column layout
    is nested inside a card (tab panel) layout. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
- en: The layouts in action can be visually seen at [http://dev.sencha.com/deploy/ext-4.0.0/examples/layout-browser/layout-browser.html](http://dev.sencha.com/deploy/ext-4.0.0/examples/layout-browser/layout-browser.html).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 2 – Containers
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ext JS provides three types of containers:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '`Ext.container.Viewport (xtype:viewport)`: This is a special container that
    renders itself to the document body, thereby taking the whole browser viewable
    area. A page will only have one viewport and it does not provide scrolling.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ext.container.Container (xtype: container)`: This is a top-level container
    class for most of the Ext JS components, such as panels and windows. It provides
    the addition, removal, and insertion behavior to all its children.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ext.container.ButtonGroup (xtype:buttongroup)`: This container provides a
    way to arrange buttons in a group, in tabular format. This may be used when an
    application needs a task bar at the top or bottom of a panel.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ext.container.Viewport
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The viewport represents the viewable browser area equivalent to its available
    height and width. It renders itself to the page document body and resizes itself
    to the size of the browser. The viewport still requires layouts to position its
    child components. The following code snippet creates a viewport with a panel in
    it using `xtype` and the `fit` layout. Please note that the panel's `width` property
    has no meaning as the `fit` layout overrides the width and stretches the panel
    to its browser's window size. The code snippet shows a panel titled `Viewport
    Panel` and content `'A Panel inside viewport'`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Ext.container.Container
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A container can be created by just replacing the `xtype` property from `panel`
    to `container`. `container` is just a container without any title. The API for
    `container` does not have the `title` property defined as `container`, as it is
    just a container to lay and group child components and does not require any title.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: The code snippet that follows, creates a container with a text field and a `submit`
    button with a margin of 5 px on its top, 5 px on its right, 0 px on its bottom,
    and 5 px on its left, and `vbox` (vertical box) layout.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a `style` property is added to the text field to provide a custom
    CSS specification margin bottom and the color. The `defaults` property is used
    to apply default settings to all its child items. In this case, `margin` is applied
    to both text fields and button.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'Try replacing the `layout` property with `hbox` (horizontal box) instead of
    `vbox` and see the difference. The `hbox` layout lays the components horizontally
    one after the other:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The panel provides additional functions, such as including the store in the
    configuration, toolbar support on all four sides (`lbar`, `tbar`, `fbar`, and
    `rbar`), and it can be made floatable that cannot be found in container.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Ext.container.ButtonGroup
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Button group provides a container for grouping the buttons and menus. Add the
    following code snippet to the `items` configuration of `Ext.container.Viewport`
    to visualize the button group. The following code snippet creates a button group
    type component with three buttons grouped together under the title `Days`. The
    `columns` property determines the number of column buttons:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 3 – Components and data package
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ext JS includes various components. This sections deals with the tab panel and
    grid panel along with the data package.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Tabpanel
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Tabpanel** is a container that uses header-less panels and creates a modified
    button for each panel to look like a tab. It utilizes a card layout to lay child
    components.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'The code snippet that follows creates a tab panel of size 400 x 400 pixels,
    with two panels representing two tabs named `Page1` and `Page2` in the document''s
    body. The first item does not have `xtype` specified, but ExtJS considers the
    default panel `xtype`. The `renderTo` property can be either a DOM element or
    the ID of the element. The `activeTab` property is used to set the active tab
    using its item index position. Uncomment `layout:''fit''` (comment both width
    and height) and observe that the tab panel takes up the whole browser. Uncomment
    `layout:''absolute''`, `x:''10''`, and `y:''10''` (leave `layout:''fit''` commented),
    and observe that the tab panel is 10 px, absolutely positioned 10 px at x and
    y:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The tab panel or panel can have docked items on all the four sides to place
    the toolbars or tab bars. Add the following code to the tab panel:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding code snippet creates a toolbar with a button docked at the bottom
    position and sets to the `dockedItems` property.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Ext.tab.Panel` internally uses card layout in its implementation. `Ext.container.Container`
    can be used with a card layout when there is no requirement for tab buttons.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ext.tab.Panel`在实现内部使用卡片布局。`Ext.container.Container`在没有对标签按钮有要求的情况下可以使用卡片布局。'
- en: Container with card layout
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 卡片布局的容器
- en: 'Try creating a container with two items in the container, with a card layout
    as shown in the following code snippet. Only one item (that is, first panel titled
    `Page 1`) will be displayed as the second panel (`Page 2`) is stacked under the
    first one. Uncomment the line `cardComp.getLayout().setActiveItem(1)` to bring
    the second item (`Page 2`) to the front and hide all the others. The `getLayout()`
    method provides the card layout used by the container, and `setActiveItem(ComponentIndex)`
    shows the item at the specified index hiding all the other items:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试创建一个包含两个项目的容器，容器布局如以下代码片段所示。只有一个项目（即，标题为`Page 1`的第一个面板）将被显示，因为第二个面板（`Page
    2`）位于第一个面板之下。取消注释行`cardComp.getLayout().setActiveItem(1)`将第二个项目（`Page 2`）带到前面并隐藏所有其他项目。`getLayout()`方法提供了容器使用的卡片布局，`setActiveItem(ComponentIndex)`显示指定索引的项目，隐藏所有其他项目：
- en: '[PRE14]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Data package
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据包
- en: The new ExtJS 4 data package enables you to retrieve, decode, and use the data
    in the application. The core classes of data package are `Model`, `Proxy`, and
    `Store`.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 新的ExtJS 4数据包使您能够检索、解码并在应用程序中使用数据。数据包的核心类是`Model`、`Proxy`和`Store`。
- en: '`Model` represents the data or records in a store. It also includes field definitions,
    data validation rules, other models'' associations, and proxy information for
    connecting to the server. It can have five types of validation rules, such as
    `presence`, `length`, `format`, `inclusion`, and `exclusion`, and a field may
    have more than one validation rule defined. It can also have custom methods defined.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`Model`代表存储中的数据或记录。它还包括字段定义、数据验证规则、其他模型的关联以及连接到服务器的代理信息。它可以有五种类型的验证规则，如`presence`、`length`、`format`、`inclusion`和`exclusion`，字段可以定义多个验证规则。它还可以定义自定义方法。'
- en: 'Under the `app/model` folder, define a model by extending the `Ext.data.Model`
    class as indicated in the following example and save it as `Users.js`. The code
    snippet provides a custom method `capitalizeName` and adds the `length(to 2)`
    validation rule for the field `age`. It attaches the Ajax proxy to model and binds
    the model to a store:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app/model`文件夹下，通过以下示例扩展`Ext.data.Model`类来定义一个模型，并将其保存为`Users.js`。代码片段提供了一个自定义方法`capitalizeName`并为字段`age`添加了`length(to
    2)`验证规则。它将Ajax代理附加到模型并将模型绑定到存储：
- en: '[PRE15]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-241
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Include the new component class to the application's `require` property in `starterApp.js`,
    whenever the Firebug console complains.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 当Firebug控制台抱怨时，将新组件类包含到`starterApp.js`应用程序的`require`属性中。
- en: '`Proxy` handles the loading and saving of data. It defines the connection between
    the browser and the server. It stores the load data via proxy into an array of
    data models. There are four types of server proxies, namely Ajax, REST, JSONP,
    and Direct, and three types of client proxies, namely Local storage, In-memory
    and Session storage. We will configure the Ajax `type` proxy in this tutorial:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`Proxy`处理数据的加载和保存。它定义了浏览器和服务器之间的连接。它通过代理将加载数据存储到数据模型数组中。有四种类型的服务器代理，即Ajax、REST、JSONP和Direct，以及三种类型的客户端代理，即本地存储、内存存储和会话存储。在本教程中，我们将配置Ajax
    `type` 代理：'
- en: '**Ajax**: It sends requests to a server on the same domain.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ajax**: 它向同一域的服务器发送请求。'
- en: '**JSONP**: It sends requests to a different domain by dynamically instantiating
    the `script` tag.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSONP**: 它通过动态实例化`script`标签向不同域发送请求。'
- en: '**REST**: It sends requests via a restful backend.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**REST**: 它通过RESTful后端发送请求。'
- en: '**Direct**: It sends requests using `Ext.direct.Manager`. It provides a facility
    to invoke server methods directly from the ExtJS code as if it is calling directly
    from JavaScript. Please refer to [http://www.sencha.com/products/extjs/extdirect](http://www.sencha.com/products/extjs/extdirect)
    for more info.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Direct**: 它使用`Ext.direct.Manager`发送请求。它提供了一个从ExtJS代码直接调用服务器方法的功能，就像直接从JavaScript调用一样。请参阅[http://www.sencha.com/products/extjs/extdirect](http://www.sencha.com/products/extjs/extdirect)获取更多信息。'
- en: '**LocalStorage**: It uses the new HTML 5 localStorage API to save `Model` data
    locally on the client browser. HTML 5 local storage is a way for web pages to
    store named key/value pairs locally, within the client web browser.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LocalStorage**: 它使用新的HTML 5 localStorage API在客户端浏览器本地保存`Model`数据。HTML 5本地存储是网页在客户端浏览器内存储命名键/值对的一种方式。'
- en: '**In-memory**: It uses local variables to store data and hence the data is
    lost upon page refresh.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Session storage**: It uses HTML 5 Session storage for storing and retrieving
    data via a unique ID.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**DirectJEngine** ([http://code.google.com/p/directjngine/](http://code.google.com/p/directjngine/))
    provides the infrastructure to invoke server e-Java classes directly from the
    Ext JS API.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following configuration property to the preceding model:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Under Apache''s `htdocs/ExtJSStarter/data` folder, create a file called `Users.json`
    and add the following JSON data:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The store class `Ext.data.Store` encapsulates the client-side data of the `Model`
    objects. It provides various methods to query, insert, remove, load, sort, and
    manage records. Add the following code below the model to bind the model to the
    new store and auto load upon creation. The loaded store contains the model bounded
    data from `Users.json`:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Let's make use of the created store in a grid panel to visualize the data in
    the browser in the section that follows.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Grid panel
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Grids** are used extensively to show a large amount of data in a tabular
    fashion, with sorting and filtering capabilities. ExtJS provided a robust grid
    component with various models for manipulating rows and columns. Grid comprises
    a store and a set of grid columns to render.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a grid panel with four columns, each associated with a `dataIndex` property.
    The column header `dataIndex` property uniquely identifies what records from the
    store should be added to each column. The `store` property defines a loaded store.
    The grid panel needs to be rendered to a DOM element in order to see it in the
    browser:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s add the grid to the first panel (that is, `Page 1`) of the tab panel
    created. Please notice that a grid panel is added to the first panel item (that
    is, `Page 1`):'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Loading the code in the browser will show something similar to the next screenshot.
    It shows two panels (**Page 1** and **Page 2**). The **Page 1** tab is active
    by default and it shows the grid panel with four columns and the loaded JSON data
    from the store using the AJAX proxy. Try clicking on the header and observe that
    the columns can be sorted:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '![Grid panel](img/6108OS_04_01.png.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
- en: Infinite scrolling
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Infinite scrolling/paging of a grid to scroll through thousands of records without
    the performance penalties of rendering all the records on the screen at once can
    be done using the `verticalScroller` property.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Floating components**: Any component subclass can be made floatable by using
    the `floating:true config` property. Floating components are managed by `ZindexManager`
    and are constrained to their parent containers.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: 4 – Traversing Ext JS components
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ex JS provides two ways to query the components, one way by using `Ext.ComponentManager`
    globally and the other way within `Ext.container.Container` on the document with
    a CSS-like syntax selector.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Components can be retrieved using `id`, `itemId`, and `xtype`, including the
    selector and operators for pattern matching.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider an outer panel with a text field, a button, and an inner panel with
    an inner text field in it, as follows:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Ext.ComponentQuery.query("#id'')` returns an array, whereas `Ext.getCmp(''id'')`
    returns an object. `Ext.ComponentQuery.query("#id'')[0]` and `Ext.getCmp(''id'')`
    are identical.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table illustrates the use of different ways to select and traverse
    the field using different methods available:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '| Selection methods | Return component object |'
  id: totrans-280
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-281
  prefs: []
  type: TYPE_TB
- en: '| `Ext.getCmp(''outerPanel'').down(''button'');``Ext.getCmp(''outerTextId'')
    .nextSibling() Ext.getCmp(''outerTextId'').next()``Ext.getCmp(''outerTextId'').nextNode();`
    | Button |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
- en: '| `Ext.getCmp(''buttonId'').previousSibling() and Ext.getCmp(''buttonId'').prev()`
    | Outer text field |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
- en: '| `Ext.ComponentQuery.query(''textfield[cls=innerTextCls]'')` | Inner text
    field |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
- en: '| `Ext.getCmp(''outerTextId'').up()` | Outer panel – form |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
- en: '| `Ext.getCmp(''innerPanel'').down()` | Inner text field |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
- en: '| `Ext.getCmp(''innerTextId'').``findParentByType(''panel'')` | Inner panel
    |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
- en: '| `Ext.getCmp(''buttonId'').``findParentByType(''panel'')` | Outer panel |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
- en: 5 – Working with forms
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A form in Ext JS refers to an `Ext.form.Panel` class that provides a standard
    container for all the `form` elements. It automatically creates a `BasicForm`
    object for managing any `Ext.form.field.Field` objects that are added to the container.
    By default, the form panel is configured with an anchor layout for its child items,
    and can be changed if required. It provides various configuration properties and
    methods to manage and handle the fields.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: 'Ext JS 4 supports the following form fields:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: Checkbox and checkbox group
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combo box
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display field (display only text field) and hidden
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML editor
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date and number
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Radio and radio group
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slider and spinner (fields with a pair of up/down spinner arrow buttons)
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text, trigger (text wrapper that adds clickable buttons), and text area
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time and file
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All fields provide getter and setter methods, which are events and methods
    for tracking and validating values. A few important basic `form` methods that
    are used frequently are provided as follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '`getFieldValues`: It returns all the field values in the form of name-value
    pairs'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getFields`: It returns all the fields'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getValues`: It returns all the string field values in the form name-value
    pairs'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`findField(''id'')`: It finds a specific Ext JS fields using its ID'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isValid`: It checks for validity'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`markInvalid(error)`: It marks the field as invalid'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `form` fields can be enabled and disabled on validation change using the
    `formBind` and `disabled` properties. The preceding code snippet illustrates a
    form panel with a text field that is validated against a non-empty string length
    between 2 and 10, a checkbox, and submit button that gets enabled only when the
    text field value is valid.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: 'The validation rules on text fields are defined by specifying the following
    properties:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '`allowBlank`, `maskRe`, `regex`, and `stripCharsRe`'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`maxLength` and `minLength`'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`validator`, `validationChange`, and `vType`'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation on a field happens by default and can be deferred by setting the
    `validateOnChange` property to `false` and invoking validation by using the `validate()`,
    `isValid()`, and `hasInvalidField()` methods.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: The validation error messages are customized using `blanktext`, `maxlengthText`,
    `regexText`, and `vTypeText`.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '`vType`: `Ext.form.field.vTypes` is a virtual type implementation that defines
    ExtJS-specific default and custom validation (that is, custom `vType` for user
    specific validation) rules. Ext JS provides default `vType` properties, such as
    `email`, `URL`, `alpha`, and `alphanum`.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: The following code snippet illustrates a form panel with a text field, a checkbox,
    and a button for AJAX submission. The highlighted lines provide the validation
    rules for the fields via properties. The `Ext.form.Basic.submit()` button posts
    the data to an application server using the HTTP `post` action to the URL specified
    in `url` property and alerts the user with a success or failure message.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: 'The code snippet for the form panel is as follows:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preceding form panel code is processed by the following server response:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Basic Form's `getValue()` method returns only the string values and `getFieldValue()`
    returns all type-specific data values (for example, `Date` objects for date fields,
    `Boolean` for combo boxes, and so on)
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: 6 – Templates
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Ext.XTemplate` is used to do the following:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: Generating HTML output from arrays and store data
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic conditional processing (`for` and `if` statements) and custom member support
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing inline code with built-in template variables
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple template can be defined using the `Ext.XTemplate` constructor by passing
    an HTML fragment (with fields in curly braces as an argument, as illustrated in
    the following code snippet). It also provides a `<tpl>` tag for operators to repeat
    the `template` block for an array and an `if` operator for conditional processing.
    It can also have member functions.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet creates a template and applies the object and array
    to it:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `html` fragment can have either the fields or the array index inside curly
    braces, as shown in the preceding code snippet. The `applyTemplate` method replaces
    the `{user}` and the `{city}` values in the template. The template values can
    be an array (if the parameters are numeric) or an object.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-332
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check out more on template examples at [http://docs.sencha.com/ext-js/4-1/#!/api/Ext.XTemplate](http://docs.sencha.com/ext-js/4-1/#!/api/Ext.XTemplate).
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: 7 – Controllers and events
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Controllers are responsible for events from various components that occur within
    our app. Let's create a grid view controller (using the grid panel created in
    the *Quick start – Creating and defining your Ext JS application* section), a
    new app, and an HTML file that loads the app and checks how the events are handled
    in the controller. It provides a central location to manage all the events of
    the application components.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `app/view/ extjsUsersListView.js`, and add the following
    code to it. Please note that the store defined in the grid is already loaded using
    `app.model.Users` (`app`/`model`/`users`) referred in *Data package* section:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a file called `app/controller/ extjsUsersController.js`, and add the
    following code to it:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet defines a controller `app.controller. extjsUsersController`
    by extending `Ext.app.Controller`. The controller''s `views` property is configured
    with the view created in previous section. The `init()` method defines how the
    events are handled in the controller through the `control` function. This function
    can either refer to the references or the xtypes. The reference `''viewport >
    panel''` uses the `Ext.ComponentQuery` syntax to point to the UI components and
    finds the direct child panel inside the viewport. The `''extjsUsersList''` xtype
    refers to the grid panel (that is, `view extjsUsersListView''`) for which we want
    to control the `itemclick` and `afterrender` events:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`''alias''` is a property and refers to a short name of a custom class for
    defining xtypes using `widget.<xtypeName>`. For example, `widget.usergrid` and
    `widget.userPanel`.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an application file `mvcApp.js` under the `ExtJSStarter` folder and
    add the following code to it. The `controllers` property in the application is
    configured with `extjsUsersController`, which is created in the previous section,
    and the grid component (`extjsUsersList`) is added to the viewport. Please refer
    to the `alias` property of the `grid` component for the xtype name mentioned:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a file called `mvcApp.html` under the `ExtJSStarter` folder, and add
    the following code to it:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Loading `http://yourservername.com/ExtJSStarter/mvcApp.html` with the Firebug
    debugger on will show something similar to the next screenshot.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: 'The initialized application renders the panel and grid panel, and listens to
    the `itemclick` event. When the page is loaded, the application''s `init` method
    is called and followed by the rendering of panel. Clicking any rows will fire
    the `itemclick` event and log the message in the console:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '![7 – Controllers and events](img/6108OS_04_02.png.jpg)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
- en: 8 – Event handling
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Events in Ext JS are either DOM or JavaScript events. Event sources in Ext
    JS are an extension of the `Ext.Observable` class. The event properties are as
    follows:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '**Event** is a message sent (fired) by an event source to inform listeners
    that something happened in the view'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event source** is an object that can fire events'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event listener** is a function that is called when an event source fires
    an event'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件监听器**是在事件源触发事件时被调用的函数'
- en: Events can be fired using the `on` function
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用`on`函数触发事件
- en: '**DOM events**: Browsers that display HTML pages watch for user actions and
    fire events if the actions are occurring on DOM elements. Ext JS''s `Ext.Element`
    function wraps DOM elements together with their events, and provides a way to
    call the same event handlers in a different way:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '**DOM事件**：显示HTML页面的浏览器会监视用户操作，如果操作发生在DOM元素上，则会触发事件。Ext JS的`Ext.Element`函数将DOM元素及其事件一起包装，并提供了一种以不同方式调用相同事件处理程序的方法：'
- en: '[PRE30]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'JavaScript Events: During development, it is normal to have events from JavaScript
    objects other than DOM events. The following code snippet add a listener to Ext
    JS panel.'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript事件：在开发过程中，除了DOM事件外，通常还会有来自JavaScript对象的其它事件。以下代码片段向Ext JS面板添加了一个监听器。
- en: '[PRE31]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Custom events can be added by using the `addEvents()` and `fireEvent()` methods,
    as shown in the following code snippet:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用`addEvents()`和`fireEvent()`方法添加自定义事件，如下面的代码片段所示：
- en: '[PRE32]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Events can be relayed from the outcome of specified observations of the preceding
    code if they are fired by its execution. Assuming that the content panel mentioned
    in the preceding section is inside a window (`win`), it will tell the window to
    handle the `''loaded''` event from the content panel:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事件是由前一个代码的执行触发的，则可以从指定观察结果传递事件。假设前述章节中提到的内容面板位于一个窗口（`win`）内部，它将告诉窗口处理来自内容面板的`'loaded'`事件：
- en: '[PRE33]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 9 – Other advanced features
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9 – 其他高级功能
- en: 'A few other advanced features are listed as follows:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出了其他一些高级功能：
- en: '**JSBuilder**: This is a cross-platform Java application that allows you to
    customize your JavaScript and CSS files for building your projects. It uses JSON-based
    ([http://en.wikipedia.org/wiki/JSON](http://en.wikipedia.org/wiki/JSON)) configurations
    and the YUI compressor ([http://yui.github.com/yuicompressor/](http://yui.github.com/yuicompressor/))
    for minification.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSBuilder**：这是一个跨平台的Java应用程序，允许你自定义JavaScript和CSS文件以构建你的项目。它使用基于JSON的配置（[http://en.wikipedia.org/wiki/JSON](http://en.wikipedia.org/wiki/JSON)）和YUI压缩器（[http://yui.github.com/yuicompressor/](http://yui.github.com/yuicompressor/））进行压缩。'
- en: '**Drawing and charting**: Ext JS provides a robust HTML 5 based drawing and
    charting packages that enables one to create cross-browser and cross-device graphics
    in a versatile way.'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘图和图表**：Ext JS提供了一套强大的基于HTML 5的绘图和图表包，允许用户以灵活的方式创建跨浏览器和跨设备的图形。'
- en: '**Theming**: Ext JS 4 has a brand-new theming system to customize the look
    of your application while still supporting all browsers.'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题化**：Ext JS 4有一个全新的主题化系统，可以在支持所有浏览器的同时自定义应用程序的外观。'
- en: '**HTML5 local storage**: The local storage proxy `Ext.data.proxy.LocalStorage`
    uses the new HTML5 `localStorage` API to save `Model` data locally on the client
    browser. HTML5 local storage is a way for web pages to store named key/value pairs
    locally, within the client web browser. Like cookies, this data persists even
    after you navigate away from the website, close your browser tab, or exit your
    browser.'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTML5本地存储**：本地存储代理`Ext.data.proxy.LocalStorage`使用新的HTML5 `localStorage` API在客户端浏览器本地保存`Model`数据。HTML5本地存储是网页在客户端浏览器本地存储命名键/值对的一种方式，就像cookies一样，即使你离开网站、关闭浏览器标签或退出浏览器，这些数据也会持续存在。'
- en: '**Animation**: CSS 3 based animations using keyframes can be made using the
    `Ext.fx.Animator` class.'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动画**：使用关键帧的基于CSS 3的动画可以通过`Ext.fx.Animator`类来实现。'
- en: '**History management**: History management using `Ext.util.History` allows
    you to register arbitrary application states on navigation actions, which can
    later be used to reset the application when the user navigates forward or backward
    through the browser history.'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**历史管理**：使用`Ext.util.History`进行历史管理允许你在导航操作上注册任意的应用程序状态，这些状态可以在用户通过浏览器历史记录向前或向后导航时用于重置应用程序。'
- en: People and places you should get to know
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你应该了解的人和地方
- en: This tutorial has been created from the experience gained using references from
    Ext JS APIs, forums, tutorials, and guides from Sencha's official site [http://www.sencha.com/](http://www.sencha.com/).
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程是根据使用Ext JS API、论坛、教程和Sencha官方网站[http://www.sencha.com/](http://www.sencha.com/)的参考资料所获得的经验创建的。
- en: If you need help with *Instant Ext JS Starter*, here are some people and places
    that will prove invaluable.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用*Instant Ext JS Starter*时需要帮助，以下是一些将非常有价值的人和地方。
- en: Official sites
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 官方网站
- en: 'The official sites for download, training, and FAQs are as follows:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为下载、培训和常见问题解答的官方网站：
- en: '**Ext JS**: [http://www.sencha.com](http://www.sencha.com)'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Training**: [http://www.sencha.com/training/](http://www.sencha.com/training/)'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download**: [http://www.sencha.com/products/extjs/download/](http://www.sencha.com/products/extjs/download/)'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Licencing FAQs**: [http://www.sencha.com/legal/open-source-faq/](http://www.sencha.com/legal/open-source-faq/)'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Articles and tutorials
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following list provides useful articles and tutorials to help you to explore
    more about the framework:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: '**API**: [http://docs.sencha.com/ext-js/4-0/](http://docs.sencha.com/ext-js/4-0/)'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Examples**: [http://docs.sencha.com/ext-js/4-0/#!/example](http://docs.sencha.com/ext-js/4-0/#!/example)'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Getting started guide**: [http://docs.sencha.com/ext-js/4-0/#/guide/getting_started](http://docs.sencha.com/ext-js/4-0/#/guide/getting_started)'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Saki''s (An example page from an active Ext JS forum member) page**: [http://examples.extjs.eu/](http://examples.extjs.eu/)'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Theming**: [http://docs.sencha.com/ext-js/4-0/#!/guide/theming](http://docs.sencha.com/ext-js/4-0/#!/guide/theming)
    and [http://docs.sencha.com/ext-js/4-0/#!/video/19159630](http://docs.sencha.com/ext-js/4-0/#!/video/19159630)'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drawing and charting**: [http://docs.sencha.com/ext-js/4-0/#!/guide/drawing_and_charting](http://docs.sencha.com/ext-js/4-0/#!/guide/drawing_and_charting)'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community
  id: totrans-390
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are in need of any help, then forums and support will come handy:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '**Sencha official forum**: The registration can be done at [http://www.sencha.com/forum/register.php](http://www.sencha.com/forum/register.php)'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ext JS 4 Forum**: [http://www.sencha.com/forum/forumdisplay.php?79-Ext-JS-Community-Forums-4.x](http://www.sencha.com/forum/forumdisplay.php?79-Ext-JS-Community-Forums-4.x)'
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sencha Support**: [http://www.sencha.com/support/](http://www.sencha.com/support/)'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User FAQs**: [http://www.sencha.com/support/faq/](http://www.sencha.com/support/faq/)'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Links
  id: totrans-396
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A few links for building JavaScripts, CSS, and unit testing are as follows:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: '**Chrome developer tools page**: [https://developers.google.com/chrome-developer-tools/docs/overview](https://developers.google.com/chrome-developer-tools/docs/overview)'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML5 offline storage**: [http://docs.sencha.com/ext-js/4-0/#!/video/17844271](http://docs.sencha.com/ext-js/4-0/#!/video/17844271)'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unit testing with Jasmine**: [http://docs.sencha.com/ext-js/4-0/#!/guide/testing](http://docs.sencha.com/ext-js/4-0/#!/guide/testing)'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSBuilder (Javascript and CSS builder tool)**: [http://www.sencha.com/products/jsbuilder](http://www.sencha.com/products/jsbuilder)'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Books
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following books provide an insight into the internals of JavaScript and
    help with deep understanding of the core of EXT JS or any other JavaScript framework:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '*JavaScript: The Good Parts*, *Douglas Crockford*, *O''Reilly Media/Yahoo Press*'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*JavaScript Patterns*, *Stoyan Stefanov*, *O''Reilly Media*'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Pro JavaScript Techniques*, *John Resig*, *Apress*'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blogs
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jozef Sakalos, also known as Saki, is one of the leading forum members, who
    actively participates in many queries and provides excellent solutions. You can
    find his blog at [http://blog.extjs.eu/](http://blog.extjs.eu/).
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: Jozef Sakalos，也被称为Saki，是论坛的主要成员之一，他积极参与许多查询并提供出色的解决方案。您可以在[http://blog.extjs.eu/](http://blog.extjs.eu/)找到他的博客。
- en: Twitter
  id: totrans-409
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Twitter
- en: Follow Aaron Conron, who leads the Sencha Architect team on [https://twitter.com/aconran](https://twitter.com/aconran).
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 关注Aaron Conron，他是Sencha Architect团队的领导者，您可以在[https://twitter.com/aconran](https://twitter.com/aconran)上找到他。
