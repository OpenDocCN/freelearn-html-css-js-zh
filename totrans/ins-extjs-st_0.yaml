- en: Chapter 1. Instant Ext JS Starter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to *Instant Ext JS Starter*. This book has been especially created to
    provide you with all the information that you need to start with the Ext JS @
    Sencha JavaScript framework. You will understand what the framework does, get
    started with building your first browser-based application/widget, and discover
    its rich and modern UI components.
  prefs: []
  type: TYPE_NORMAL
- en: 'This document contains the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '*So, what is Ext JS?* looks at what Ext JS actually is, what you can do with
    it, and why it''s so great.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Installation and environment setup* teaches you how to download and install
    Ext Js with minimum fuss and then how to set up a quick working environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Quick Start – Creating and defining your Ext JS application* explains to you
    the basics of the framework, class system, extend, apply, and a few other EXT
    JS built-in basic functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Top features you''ll want to know about* explains the basics of the framework,
    class system, types of components, how to lay out the components and their containers,
    event mechanisms, and custom components and theming.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*People and places you should get to know* provides you with many useful links
    to the project page and forums, as well as a number of helpful articles, tutorials,
    and contributors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, what is Ext JS?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Ext JS** is a JavaScript library that makes it (relatively) easy to create
    cross-platform browser and desktop-style user interfaces in a web application.
    It supports the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Component model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugin free charting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS theming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript is a classless, prototype-oriented language but Ext JS follows a
    class-based approach to make the code extensible and scalable over time. Class
    names can be grouped into packages with namespaces using the object property dot-notation
    (`.`). Namespaces allow developers to write structured and maintainable code,
    use libraries without the risk of overwriting functions, avoid cluttering the
    global namespace, and provide an ability to encapsulate the code.
  prefs: []
  type: TYPE_NORMAL
- en: The strength of the framework lies in its component design. The bundled, basic
    default components can be easily extended as per your needs and the extended components
    can be re-used. A new component can also be created by combining one or more default
    components.
  prefs: []
  type: TYPE_NORMAL
- en: The framework includes many default components such as windows, panels, toolbars,
    drop-down menus, menu bars, dialog boxes, grids, trees, and much more, each with
    their own configuration properties (configs), component properties, methods, events,
    and CSS classes.
  prefs: []
  type: TYPE_NORMAL
- en: The **configs** are user-configurable at runtime while instantiating, whereas
    component properties are references to objects used internally by class. **Component
    properties** belong to the prototype of the class and affect all the instances
    of the class. The **properties** of the individual components determine the look
    and feel. The **methods** help in achieving a certain action. The **user interaction**
    triggers the equivalent Ext JS events apart from triggering the DOM events.
  prefs: []
  type: TYPE_NORMAL
- en: A cross-browser web application with header, footer, left column section with
    links, a content with a CSS grid/table (with add, edit, and delete actions for
    each row of the grid), and a form with few text fields and a submit button can
    be created with ease using Ext JS's layout mechanism, few default components,
    and the CSS theme.
  prefs: []
  type: TYPE_NORMAL
- en: For the preceding application, the border layout can be used with the north
    region for the header, south region for the footer, west region for the left column
    links, and center region for the content. The content area can have a horizontal
    layout, with the grid and form panel components with text fields and buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the preceding application from scratch without using the framework
    will take a lot more time than it would take by using it. Moreover, this is just
    one screen, and as the development progresses with more and more features, incorporating
    new layouts and creating new components will be a tedious process.
  prefs: []
  type: TYPE_NORMAL
- en: All the components or a group of components with their layout can be made a
    custom component and re-used with different data (that is, the grid data can be
    modified with new data and re-used in a different page).
  prefs: []
  type: TYPE_NORMAL
- en: Developers need not worry about the cross-platform compatibility issues, since
    the framework takes care of this, and they can concentrate on the core logic.
  prefs: []
  type: TYPE_NORMAL
- en: The helper functions of the `Ext.DomQuery` class can be used for querying the
    DOM. The error handling can be done by using the `Ext.Error` class, which is a
    wrapper for the native JavaScript Error object.
  prefs: []
  type: TYPE_NORMAL
- en: A simple webpage with a minimal UI too can make use of this framework in many
    ways.
  prefs: []
  type: TYPE_NORMAL
- en: Native JavaScript offers utility classes such as `Array`, `Number`, `Date`,
    `Object`, `Function`, and `String`, but is limited in what can be done with it
    across different browsers. Ext JS provides its own version of these classes that
    works in all the browsers along with offering extra functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Any Ext JS component can be added to an existing web page by creating an instance
    of it. For example, a tab feature can be added to an existing web page by creating
    a new Ext JS `Ext.tab` tab component and adding it to an existing `div` container,
    by referring the div elements `id` attribute to the `renderTo` config property
    of the tab. The backend communication with your server-side code can be done by
    using simplified cross-browser `Ext.Ajax` class methods.
  prefs: []
  type: TYPE_NORMAL
- en: Ext JS 4 supports all major web browsers, from Internet Explorer 6 to the latest
    version of Google Chrome. The recommended browsers for development and debugging
    are Google Chrome 10+, Apple Safari 5+, and Mozilla Firefox 4+.
  prefs: []
  type: TYPE_NORMAL
- en: Both commercial and open source licenses are available for Ext JS.
  prefs: []
  type: TYPE_NORMAL
- en: Installation and environment setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In five easy steps, you can be ready with Ext JS and start the development.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 – What do you need?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You need the following components for the installation and environment setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Web browser**: Any of the leading browsers mentioned in previous section.
    For this book, we will consider Mozilla Firebug with the Firebug debugger plugin
    installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web server**: To start with, a local web server is not required, but it will
    be required if communication with a server is required to make AJAX calls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ext JS 4 SDK**: Download the Ext JS bundle from [http://www.sencha.com/products/extjs/download/](http://www.sencha.com/products/extjs/download/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the **Download** button on the left side of the page.
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 – Installing the browser and debugger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Any supported browser mentioned in the previous section can be used for the
    tutorial. For simplicity and debugging options, we will use the latest Firefox
    and Firebug debugger plugin. Download the latest Firefox plugin from [http://www.mozilla.org/en-US/firefox/fx/#desktop](http://www.mozilla.org/en-US/firefox/fx/#desktop)
    and Firebug from [https://getfirebug.com/](https://getfirebug.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Other browser debugging options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Google Chrome**: Chrome Developer Tools (**Tools** | **Developer tools**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safari**: Go to **Settings** | **Preferences** |**Advanced**, select **Show
    Develop menu in menu bar**; navigate to **Develop** | **Show Web Inspector**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internet Explorer**: Go to **Tools** | **Developer Tools**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 3 – Installing the web server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the web server and unpack Ext JS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The URLs that provide information for installing the Apache web server on various
    operating systems are provided as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The instructions for installing Apache on Windows can be found at [http://httpd.apache.org/docs/current/platform/windows.html](http://httpd.apache.org/docs/current/platform/windows.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The instructions for installing Apache on Linux can be found at [http://httpd.apache.org/docs/current/install.html](http://httpd.apache.org/docs/current/install.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mac OS X comes with a built-in Apache installation, which you can enable by
    navigating to **System Preferences** | **Sharing**, and selecting the **Web Sharing**
    checkbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Apache or any other web server in your system. Browse to [http://yourwebserver.com](http://yourwebserver.com)
    or `http://localhost`, and check that the installation is successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [http://yourwebserver.com](http://yourwebserver.com) link will show something
    similar to the the following screenshot, which confirms that Apache is installed
    successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 – Installing the web server](img/6108OS_02_01.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 4 – Unpacking Ext JS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this tutorial, we will use Apache for Windows. Unpack the Ext JS bundle into
    the web server's root directory (`htdocs`). Rename the `Ext JS` folder with long
    version numbers to `extjs4` for simplicity. The root directory varies, depending
    upon your operating system and web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Apache root directory path for various operating system are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows**: `C:\Program Files\Apache Software Foundation\Apache2.2\htdocs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux**: `/var/www/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mac OS X**: `/Library/WebServer/Documents/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The downloaded EXT JS bundle is packed with examples along with required sources.
    Browse to `http://yourwebserver.com/extjs4`, and make sure that it loads the Ext
    JS index page. This page provides access to all the examples to play around with
    the API. The **API Docs** link at bottom-right of the page lists the API information
    with a search text field at the top-right side of the page. As we progress through
    the tutorial, please refer to the API as and when required:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 – Unpacking Ext JS](img/6108OS_02_02.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 5 –Testing Ext JS library.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A basic Ext JS application page will have a link tag with an Ext JS CSS file
    (`ext-all.css`), a script tag for the Ext JS library, and scripts related to your
    own application. In this example, we don't have any application-specific JavaScripts.
  prefs: []
  type: TYPE_NORMAL
- en: Create an HTML file named `check.html` with the code that follows beneath the
    `httpd` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '`Ext.onReady` is a method, which is executed when all the scripts are fully
    loaded. `Ext.Msg.alert` is a message box that shows a message to the user. The
    first parameter is the title and the second parameter is the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows `check.html` in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 –Testing Ext JS library.](img/6108OS_02_03.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And that's it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By now, you should have a working installation of Ext JS, and should be able
    to play around and discover more about it.
  prefs: []
  type: TYPE_NORMAL
- en: Quick start – Creating and defining your Ext JS application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will explain how to create an application, define and create a
    class, and load the class on demand and a few other EXT JS built-in basic functions.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 – Preparing for an Ext JS application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The core library is packaged in three different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ext.js`: This is the production version, which is minified and compressed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ext-debug.js`: This is the unminified development version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ext-dev.js`: This is the unminified development version, but outputs detailed
    error messages and warnings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start with, create the following.
  prefs: []
  type: TYPE_NORMAL
- en: A folder called `ExtJSStarter` under the `httpd` root folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three folders named `app`, `data`, and `resources` respectively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `index.html` file, from where the application will be hosted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `starerApp.js` file through which all the application level JavaScript files
    are dynamically loaded on an as-needed basis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The resulting structure will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: httpd
  prefs: []
  type: TYPE_NORMAL
- en: '`extjs4` (unpacked ExtJS Framework and renamed to `extjs4`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExtJSStarter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app` (folder for application-specific JavaScript files)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data` (folder for data)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resources` (folder for images and CSS files)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`starterApp.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`index.html`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The core library is packaged in three different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ext.js`: This is the production version, which is minified and compressed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ext-debug.js`: This is the unminified development version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ext-dev.js`: This is the unminified development version, but outputs detailed
    error messages and warnings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A basic Ext JS application page will have a `link` tag with an Ext JS CSS file
    (`ext-all.css`), a `script` tag for `ext-dev.js`, and scripts related to your
    own application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Ext JS library can also be loaded alternatively from CDN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://cdn.sencha.io/ext-4.0.7-gpl/ext-all.js](http://cdn.sencha.io/ext-4.0.7-gpl/ext-all.js)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://cdn.sencha.io/ext-4.0.7-gpl/resources/css/ext-all.css](http://cdn.sencha.io/ext-4.0.7-gpl/resources/css/ext-all.css)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the index page as loaded in the browser with
    the Firebug having the **Net** tab open. The bottom Firebug debugger pane is made
    visible by clicking on the Firebug bug icon at the top-right corner of the browser
    window. It shows a list of files the browser has requested:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 1 – Preparing for an Ext JS application](img/6108OS_03_01.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 2 – The MVC architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Model View Controller** (**MVC**) is a well-known software architecture pattern,
    which separates the representation of information from the user''s interaction
    with it. Ext JS comes with this architecture by default, and defines the architecture
    as follows.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: It is collection of data fields, which persist through the data
    package. A model can be linked to another model using association and data steams,
    using proxy. It updates views when the data changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: A view requests the information from the model that it needs to generate
    an output representation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller**: It holds application logic. It also instantiates models, stores,
    and views. It listens for events and modifies models and views.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ext JS provides controllers with the `refs` property to gain reference to components
    inside the app, and a `control` method to take action based on the events that
    the referenced components fire. The *Top features you will want to know about*
    section deals in detail about handling events with controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Step 3 – Defining your Ext JS application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every Ext JS application starts with a call to `Ext.application()` to provide
    global settings, root namespace, references to other JavaScript files, and a `launch`
    function to execute the application.
  prefs: []
  type: TYPE_NORMAL
- en: Inside `starterApp.js`, define an application named `app` for the global namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Define a `launch` function that outputs `Welcome to Ext Starter Tutorial` in
    the console and in the alert box.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Firebug console appears similar to the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code snippet creates a global variable named `app`, and adds a
    `requires` property to load the Ext JS message box class on demand. All that the
    Ext JS application uses is only a single global variable. All application classes
    reside in this single namespace. When the page is ready, it calls the `launch`
    function and executes the `console.log` and `Ext.Msg.alert()` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using namespaces in JavaScript is a recommended practice to reduce the number
    of objects and functions that are added to the global scope in our applications.
    Namespaces are not built into the language, but the same benefits can be achieved
    by creating a single object (that is, `app`) and adding all our objects and functions
    to this object. It also helps to avoid the object collision, when using one JavaScript
    library with another one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 3 – Defining your Ext JS application](img/6108OS_03_02.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Step 4 – Understanding the Ext JS class hierarchy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Ext JS framework is bundled with many well-organized classes that provide
    encapsulation and strong typing. Many classes in Ext JS are implemented as singletons
    with a set of static methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The class hierarchy starts from `Ext.Base` and drills down to various other
    class/components. A panel component is defined as `Ext.panel.panel`, and the class
    hierarchy will be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 – Understanding the Ext JS class hierarchy](img/6108OS_03_03.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Please refer to the following links for API reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Offline API**: [http://yourservername.com/extjs4/ docs/index.html](http://yourservername.com/extjs4/%20docs/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Online API**: [http://docs.sencha.com/ext-js/4-0/](http://docs.sencha.com/ext-js/4-0/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The API provides an easy "search" text field to search for a particular component.
    Searching for `panel` reveals a list of items that matches the word `panel`. Clicking
    on **Ext.panel.Panel** loads the panel API document. The top section shows links
    to configs, properties, methods, and events supported by the `panel` class. Explore
    all the provided options and get familiar with its usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, search for the `Ext.` application that was used to launch an
    application in the previous step in the **Search** field, and get familiar with
    the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 4 – Understanding the Ext JS class hierarchy](img/6108OS_03_04.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The names of the classes map directly to the file paths in which they are stored.
    The panel class is stored at [http://yourservername.com/extjs4/src/panel/Panel.js](http://yourservername.com/extjs4/src/panel/Panel.js).
    The link [http://yourservername.com/extjs4/src](http://yourservername.com/extjs4/src)
    is mapped to the `Ext` class.
  prefs: []
  type: TYPE_NORMAL
- en: Step 5 – Defining and creating the Ext JS class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A class in Ext JS 4 is defined using `Ext.define()`. `Ext.define()` detects
    and creates a new namespace as required, extends a class, and defers the creation
    of a new class if the class being extended has not been defined.
  prefs: []
  type: TYPE_NORMAL
- en: 'A class definition for `app.extJsBook` with its properties can be illustrated
    by the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code snippet is explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Config`: This allows to specify parameters that can be changed while instantiation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Constructor`: This is called during instantiation of the objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initConfig(config)`: This creates `setter` and `getter` methods for config
    properties (that is, `setTitle()`, `getTitle()`, `setprice()`, `getPrice()`, `setAuthor()`,
    and `getAuthor()`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `app.extJsBook` class can be instantiated by using the `Ext.create()` method
    as illustrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Add the code snippet of class definition and creation inside the `launch` method
    of `Ext.application` that was created in step 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Executing `index.html` will output something similar to the following screenshot.
    Please note that the message box shown is only the third message, and all previous
    messages have been overridden but are shown in the console for clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 5 – Defining and creating the Ext JS class](img/6108OS_03_05.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To understand the component architecture, let''s move the class definition
    to a separate file called `extjsBook` under the `ExtJSStarter/apps` directory.
    Add the name of the `app.extjsBook` class to the `requires` attribute of the application
    to load the class dynamically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`Ext.define()` provides two other important methods, which are `applyProperty()`
    and `updateProperty()`. The `apply` property is used to add additional logic to
    the setters, whereas the update `property` is used to do post processing or notification
    after the value has been set. In order to see both new and old values in the console,
    set `author` twice (that is, call `book.setAuthor()` in the application code twice).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet changes the book title to uppercase and logs the
    new and old value of the author:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted code to capitalize the author name uses `Ext.String.capitalize()`
    , an Ext JS version of the native JavaScript `String` utility class.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A class's functionality can also be added to another class using the `mixins`
    property. A static method can be added using the `static` property.
  prefs: []
  type: TYPE_NORMAL
- en: Step 6 – Instantiating Ext JS components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Components can be created either by using the `Ext.create()` method or by using
    the component's `xtype` property as a member of the parent component's `items`
    config.
  prefs: []
  type: TYPE_NORMAL
- en: '`Ext.container.AbstractContainer` in the class hierarchy provides the `items`
    configuration property to all its component sub-classes to add a single item,
    or an array of child components to the specified container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ext.Abstractcomponent` provides the `xtype` property, which is a shorter alternative
    to creating objects than using a full class name. Using `xtype` is the most common
    way to define component instances, especially in a container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Ext.create` is just like using the `new` keyword, and it will create the class
    right away, whereas with `xtype`, the class will not be created until it is needed.
    This is called **lazy-instantiation**. A hidden tab or panel with components laid
    using `xtype` will not be loaded until the tab or panel is visible, thereby increasing
    the performance of the page load time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following code snippet illustrates a panel with 5 px padding
    on all four sides and 300 px width, containing text fields and two custom buttons
    rendered in the document''s DOM body using the `renderTo` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Three components have been included inside the item''s configuration property.
    The `renderTo` property can be either an ID of an element or an element. `Ext.getBody()`
    returns the current document body as `Ext.Element`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A text field: A text field is instantiated using the `xtype` text field. Ext
    JS provides `xtype` for most of its available components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Custom button component 1: An `app.extjsButton` button component is instantiated
    using the `Ext.create()` method, as discussed in a previous step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Custom button component 2: An `app.extjsButton` button component is instantiated
    using a custom `xtype` name. In order for this to work, our `app.extjsBook` class
    definition needs to have `xtype` and `extend` properties specified along with
    a call to its parent `Button` class, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Adding the preceding code inside the application''s `launch` function and with
    the modified `app.extjsButton` class property to support `xtype` will display
    something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Step 6 – Instantiating Ext JS components](img/6108OS_03_06.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`xtype` for all EXT JS components can be found at [http://docs.sencha.com/ext-js/4-1/#!/api/Ext.enums.Widget](http://docs.sencha.com/ext-js/4-1/#!/api/Ext.enums.Widget).'
  prefs: []
  type: TYPE_NORMAL
- en: Step 7 – Using Ext JS Lang functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Native JavaScript offers a variety of utility classes such as `Array`, `Date`,
    `Number`, `Object`, and `String`. Ext JS provides its own version of utility classes
    for a smooth and consistent development experience across all browsers. It also
    provides extra functionality that is not available in native JavaScript. The available
    functions offer additional benefits. These can be found under `Ext.Array`, `Ext.Date`,
    `Ext.Number`, and so on. Making use of these functions wherever applicable will
    help to concentrate on core application logic, saving development time spent working
    on conversion utilities. A developer-specific class can also be added to the `Ext`
    namespace using `Ext.Define` with specific methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Ext.Array.contains(array,item)` can check whether or not the given array contains
    the specified item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ext.Date` supports a broad range of date formats that comes in handy while
    working with dates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, `Ext.Date.format(new Date(), 'Y-m-d'))` can be used to show the
    current date in YEAR-MM-DD format.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Ext.Function` provides functions to manage the ability to call functions with
    more features and control.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, `Ext.Function.defer()` can be used to call a function after the
    number of milliseconds specified, optionally in a specific scope.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Ext.Number` provides six methods to handle numeric values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, `Ext.Number.randomInt(10,20)` returns a random integer between
    10 and 20.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Ext.Object` provides about 10 methods to query and manipulate objects and
    JSON data structures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, `Ext.Object.fromQueryString('bookName=ExtJs&type=ebook')` outputs
    `{bookName:'ExtJs', type:'ebook'}`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Ext.String` provides useful methods to manipulate strings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, `htmlEncode(value)` converts certain characters (`&`, `<`, `>`,
    `'`, and `"`) to their HTML character equivalents, for literal display in web
    pages.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Top features you'll want to know about
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will deal with various Ext JS containers, components, forms, controllers,
    layouts, event mechanism, data package, templates, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 1 – Layout mechanism
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ext JS container requires a layout to manage the sizing, positioning and layering
    of the child components. It provides different types of layouts to cater for most
    of the positioning requirements that anyone will come across.
  prefs: []
  type: TYPE_NORMAL
- en: A simple HTML container with the `div` HTML element with CSS styling can be
    rendered easily with a few lines of code using the layout configuration property.
    The Ext JS layout mechanism takes care of generating the HTML element containers
    with clearly applied styles using the default CSS.
  prefs: []
  type: TYPE_NORMAL
- en: The following table lists the type of layouts, the component position depiction,
    and explains where it can be utilized. These layouts can be used either as they
    are, or combined with more than one, or in a nested fashion. Each layout provides
    specific configuration properties to size and position the child components. If
    the layout configuration is not specified, it uses a default layout manager that
    renders the components sequentially, one after the other. As we go through learning
    different components, different layouts will be shown to position the components.
  prefs: []
  type: TYPE_NORMAL
- en: 'The layouts and component depiction table is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Layout name | Component position depiction | Where to use? |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Absolute | ![1 – Layout mechanism](img/6108OS_01_A.jpg) | To position like
    CSS style positioning with X-Y coordinates |'
  prefs: []
  type: TYPE_TB
- en: '| Accordion | ![1 – Layout mechanism](img/6108OS_01_B.jpg) | To display one
    panel (that is, a page or a section) at a time in a stacked list of panels. |'
  prefs: []
  type: TYPE_TB
- en: '| Anchor | ![1 – Layout mechanism](img/6108OS_01_C.jpg) | To position the child
    components relative to their container. |'
  prefs: []
  type: TYPE_TB
- en: '| Border | ![1 – Layout mechanism](img/6108OS_01_D.jpg) | To lay different
    components on all the four sides (that is, north, south, east, and west) with
    the necessary center region. It provides collapse and resize behaviors. |'
  prefs: []
  type: TYPE_TB
- en: '| Card (Tab Panel) | ![1 – Layout mechanism](img/6108OS_01_E.jpg) | To create
    tabs for each section with tab names. |'
  prefs: []
  type: TYPE_TB
- en: '| Card (Wizard) | ![1 – Layout mechanism](img/6108OS_01_F.jpg) | To have a
    stack of pages one above the other, and show one page at a time hiding all others.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Column | ![1 – Layout mechanism](img/6108OS_01_G.jpg) | To have content sections
    in different columns. |'
  prefs: []
  type: TYPE_TB
- en: '| Fit | ![1 – Layout mechanism](img/6108OS_01_H.jpg) | To stretch and fill
    the child component with its container. |'
  prefs: []
  type: TYPE_TB
- en: '| Table | ![1 – Layout mechanism](img/6108OS_01_I.jpg) | To create tables in
    the form of a standard HTML table. |'
  prefs: []
  type: TYPE_TB
- en: '| vBox | ![1 – Layout mechanism](img/6108OS_01_J.jpg) | To show the components
    vertically one below the other. It requires `height` for fixed height or `flex`
    to stretch the available height with respect to its container. |'
  prefs: []
  type: TYPE_TB
- en: '| hBox | ![1 – Layout mechanism](img/6108OS_01_K.jpg) | To show the components
    horizontally, one after another in a serial fashion. It requires `width` for a
    fixed width or `flex` to stretch to the available width with respect to its container.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Nested Layout | ![1 – Layout mechanism](img/6108OS_01_L.jpg) | A column layout
    is nested inside a card (tab panel) layout. |'
  prefs: []
  type: TYPE_TB
- en: The layouts in action can be visually seen at [http://dev.sencha.com/deploy/ext-4.0.0/examples/layout-browser/layout-browser.html](http://dev.sencha.com/deploy/ext-4.0.0/examples/layout-browser/layout-browser.html).
  prefs: []
  type: TYPE_NORMAL
- en: 2 – Containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ext JS provides three types of containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Ext.container.Viewport (xtype:viewport)`: This is a special container that
    renders itself to the document body, thereby taking the whole browser viewable
    area. A page will only have one viewport and it does not provide scrolling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ext.container.Container (xtype: container)`: This is a top-level container
    class for most of the Ext JS components, such as panels and windows. It provides
    the addition, removal, and insertion behavior to all its children.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ext.container.ButtonGroup (xtype:buttongroup)`: This container provides a
    way to arrange buttons in a group, in tabular format. This may be used when an
    application needs a task bar at the top or bottom of a panel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ext.container.Viewport
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The viewport represents the viewable browser area equivalent to its available
    height and width. It renders itself to the page document body and resizes itself
    to the size of the browser. The viewport still requires layouts to position its
    child components. The following code snippet creates a viewport with a panel in
    it using `xtype` and the `fit` layout. Please note that the panel's `width` property
    has no meaning as the `fit` layout overrides the width and stretches the panel
    to its browser's window size. The code snippet shows a panel titled `Viewport
    Panel` and content `'A Panel inside viewport'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Ext.container.Container
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A container can be created by just replacing the `xtype` property from `panel`
    to `container`. `container` is just a container without any title. The API for
    `container` does not have the `title` property defined as `container`, as it is
    just a container to lay and group child components and does not require any title.
  prefs: []
  type: TYPE_NORMAL
- en: The code snippet that follows, creates a container with a text field and a `submit`
    button with a margin of 5 px on its top, 5 px on its right, 0 px on its bottom,
    and 5 px on its left, and `vbox` (vertical box) layout.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that a `style` property is added to the text field to provide a custom
    CSS specification margin bottom and the color. The `defaults` property is used
    to apply default settings to all its child items. In this case, `margin` is applied
    to both text fields and button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try replacing the `layout` property with `hbox` (horizontal box) instead of
    `vbox` and see the difference. The `hbox` layout lays the components horizontally
    one after the other:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The panel provides additional functions, such as including the store in the
    configuration, toolbar support on all four sides (`lbar`, `tbar`, `fbar`, and
    `rbar`), and it can be made floatable that cannot be found in container.
  prefs: []
  type: TYPE_NORMAL
- en: Ext.container.ButtonGroup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Button group provides a container for grouping the buttons and menus. Add the
    following code snippet to the `items` configuration of `Ext.container.Viewport`
    to visualize the button group. The following code snippet creates a button group
    type component with three buttons grouped together under the title `Days`. The
    `columns` property determines the number of column buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 3 – Components and data package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ext JS includes various components. This sections deals with the tab panel and
    grid panel along with the data package.
  prefs: []
  type: TYPE_NORMAL
- en: Tabpanel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Tabpanel** is a container that uses header-less panels and creates a modified
    button for each panel to look like a tab. It utilizes a card layout to lay child
    components.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code snippet that follows creates a tab panel of size 400 x 400 pixels,
    with two panels representing two tabs named `Page1` and `Page2` in the document''s
    body. The first item does not have `xtype` specified, but ExtJS considers the
    default panel `xtype`. The `renderTo` property can be either a DOM element or
    the ID of the element. The `activeTab` property is used to set the active tab
    using its item index position. Uncomment `layout:''fit''` (comment both width
    and height) and observe that the tab panel takes up the whole browser. Uncomment
    `layout:''absolute''`, `x:''10''`, and `y:''10''` (leave `layout:''fit''` commented),
    and observe that the tab panel is 10 px, absolutely positioned 10 px at x and
    y:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The tab panel or panel can have docked items on all the four sides to place
    the toolbars or tab bars. Add the following code to the tab panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code snippet creates a toolbar with a button docked at the bottom
    position and sets to the `dockedItems` property.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Ext.tab.Panel` internally uses card layout in its implementation. `Ext.container.Container`
    can be used with a card layout when there is no requirement for tab buttons.'
  prefs: []
  type: TYPE_NORMAL
- en: Container with card layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Try creating a container with two items in the container, with a card layout
    as shown in the following code snippet. Only one item (that is, first panel titled
    `Page 1`) will be displayed as the second panel (`Page 2`) is stacked under the
    first one. Uncomment the line `cardComp.getLayout().setActiveItem(1)` to bring
    the second item (`Page 2`) to the front and hide all the others. The `getLayout()`
    method provides the card layout used by the container, and `setActiveItem(ComponentIndex)`
    shows the item at the specified index hiding all the other items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Data package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new ExtJS 4 data package enables you to retrieve, decode, and use the data
    in the application. The core classes of data package are `Model`, `Proxy`, and
    `Store`.
  prefs: []
  type: TYPE_NORMAL
- en: '`Model` represents the data or records in a store. It also includes field definitions,
    data validation rules, other models'' associations, and proxy information for
    connecting to the server. It can have five types of validation rules, such as
    `presence`, `length`, `format`, `inclusion`, and `exclusion`, and a field may
    have more than one validation rule defined. It can also have custom methods defined.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the `app/model` folder, define a model by extending the `Ext.data.Model`
    class as indicated in the following example and save it as `Users.js`. The code
    snippet provides a custom method `capitalizeName` and adds the `length(to 2)`
    validation rule for the field `age`. It attaches the Ajax proxy to model and binds
    the model to a store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Include the new component class to the application's `require` property in `starterApp.js`,
    whenever the Firebug console complains.
  prefs: []
  type: TYPE_NORMAL
- en: '`Proxy` handles the loading and saving of data. It defines the connection between
    the browser and the server. It stores the load data via proxy into an array of
    data models. There are four types of server proxies, namely Ajax, REST, JSONP,
    and Direct, and three types of client proxies, namely Local storage, In-memory
    and Session storage. We will configure the Ajax `type` proxy in this tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ajax**: It sends requests to a server on the same domain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSONP**: It sends requests to a different domain by dynamically instantiating
    the `script` tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**REST**: It sends requests via a restful backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Direct**: It sends requests using `Ext.direct.Manager`. It provides a facility
    to invoke server methods directly from the ExtJS code as if it is calling directly
    from JavaScript. Please refer to [http://www.sencha.com/products/extjs/extdirect](http://www.sencha.com/products/extjs/extdirect)
    for more info.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LocalStorage**: It uses the new HTML 5 localStorage API to save `Model` data
    locally on the client browser. HTML 5 local storage is a way for web pages to
    store named key/value pairs locally, within the client web browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**In-memory**: It uses local variables to store data and hence the data is
    lost upon page refresh.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Session storage**: It uses HTML 5 Session storage for storing and retrieving
    data via a unique ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**DirectJEngine** ([http://code.google.com/p/directjngine/](http://code.google.com/p/directjngine/))
    provides the infrastructure to invoke server e-Java classes directly from the
    Ext JS API.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following configuration property to the preceding model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Under Apache''s `htdocs/ExtJSStarter/data` folder, create a file called `Users.json`
    and add the following JSON data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The store class `Ext.data.Store` encapsulates the client-side data of the `Model`
    objects. It provides various methods to query, insert, remove, load, sort, and
    manage records. Add the following code below the model to bind the model to the
    new store and auto load upon creation. The loaded store contains the model bounded
    data from `Users.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Let's make use of the created store in a grid panel to visualize the data in
    the browser in the section that follows.
  prefs: []
  type: TYPE_NORMAL
- en: Grid panel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Grids** are used extensively to show a large amount of data in a tabular
    fashion, with sorting and filtering capabilities. ExtJS provided a robust grid
    component with various models for manipulating rows and columns. Grid comprises
    a store and a set of grid columns to render.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a grid panel with four columns, each associated with a `dataIndex` property.
    The column header `dataIndex` property uniquely identifies what records from the
    store should be added to each column. The `store` property defines a loaded store.
    The grid panel needs to be rendered to a DOM element in order to see it in the
    browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the grid to the first panel (that is, `Page 1`) of the tab panel
    created. Please notice that a grid panel is added to the first panel item (that
    is, `Page 1`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Loading the code in the browser will show something similar to the next screenshot.
    It shows two panels (**Page 1** and **Page 2**). The **Page 1** tab is active
    by default and it shows the grid panel with four columns and the loaded JSON data
    from the store using the AJAX proxy. Try clicking on the header and observe that
    the columns can be sorted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Grid panel](img/6108OS_04_01.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Infinite scrolling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Infinite scrolling/paging of a grid to scroll through thousands of records without
    the performance penalties of rendering all the records on the screen at once can
    be done using the `verticalScroller` property.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Floating components**: Any component subclass can be made floatable by using
    the `floating:true config` property. Floating components are managed by `ZindexManager`
    and are constrained to their parent containers.'
  prefs: []
  type: TYPE_NORMAL
- en: 4 – Traversing Ext JS components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ex JS provides two ways to query the components, one way by using `Ext.ComponentManager`
    globally and the other way within `Ext.container.Container` on the document with
    a CSS-like syntax selector.
  prefs: []
  type: TYPE_NORMAL
- en: Components can be retrieved using `id`, `itemId`, and `xtype`, including the
    selector and operators for pattern matching.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider an outer panel with a text field, a button, and an inner panel with
    an inner text field in it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Ext.ComponentQuery.query("#id'')` returns an array, whereas `Ext.getCmp(''id'')`
    returns an object. `Ext.ComponentQuery.query("#id'')[0]` and `Ext.getCmp(''id'')`
    are identical.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table illustrates the use of different ways to select and traverse
    the field using different methods available:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Selection methods | Return component object |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Ext.getCmp(''outerPanel'').down(''button'');``Ext.getCmp(''outerTextId'')
    .nextSibling() Ext.getCmp(''outerTextId'').next()``Ext.getCmp(''outerTextId'').nextNode();`
    | Button |'
  prefs: []
  type: TYPE_TB
- en: '| `Ext.getCmp(''buttonId'').previousSibling() and Ext.getCmp(''buttonId'').prev()`
    | Outer text field |'
  prefs: []
  type: TYPE_TB
- en: '| `Ext.ComponentQuery.query(''textfield[cls=innerTextCls]'')` | Inner text
    field |'
  prefs: []
  type: TYPE_TB
- en: '| `Ext.getCmp(''outerTextId'').up()` | Outer panel – form |'
  prefs: []
  type: TYPE_TB
- en: '| `Ext.getCmp(''innerPanel'').down()` | Inner text field |'
  prefs: []
  type: TYPE_TB
- en: '| `Ext.getCmp(''innerTextId'').``findParentByType(''panel'')` | Inner panel
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Ext.getCmp(''buttonId'').``findParentByType(''panel'')` | Outer panel |'
  prefs: []
  type: TYPE_TB
- en: 5 – Working with forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A form in Ext JS refers to an `Ext.form.Panel` class that provides a standard
    container for all the `form` elements. It automatically creates a `BasicForm`
    object for managing any `Ext.form.field.Field` objects that are added to the container.
    By default, the form panel is configured with an anchor layout for its child items,
    and can be changed if required. It provides various configuration properties and
    methods to manage and handle the fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ext JS 4 supports the following form fields:'
  prefs: []
  type: TYPE_NORMAL
- en: Checkbox and checkbox group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combo box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display field (display only text field) and hidden
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date and number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Radio and radio group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slider and spinner (fields with a pair of up/down spinner arrow buttons)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text, trigger (text wrapper that adds clickable buttons), and text area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time and file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All fields provide getter and setter methods, which are events and methods
    for tracking and validating values. A few important basic `form` methods that
    are used frequently are provided as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getFieldValues`: It returns all the field values in the form of name-value
    pairs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getFields`: It returns all the fields'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getValues`: It returns all the string field values in the form name-value
    pairs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`findField(''id'')`: It finds a specific Ext JS fields using its ID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isValid`: It checks for validity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`markInvalid(error)`: It marks the field as invalid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `form` fields can be enabled and disabled on validation change using the
    `formBind` and `disabled` properties. The preceding code snippet illustrates a
    form panel with a text field that is validated against a non-empty string length
    between 2 and 10, a checkbox, and submit button that gets enabled only when the
    text field value is valid.
  prefs: []
  type: TYPE_NORMAL
- en: 'The validation rules on text fields are defined by specifying the following
    properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`allowBlank`, `maskRe`, `regex`, and `stripCharsRe`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`maxLength` and `minLength`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`validator`, `validationChange`, and `vType`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation on a field happens by default and can be deferred by setting the
    `validateOnChange` property to `false` and invoking validation by using the `validate()`,
    `isValid()`, and `hasInvalidField()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: The validation error messages are customized using `blanktext`, `maxlengthText`,
    `regexText`, and `vTypeText`.
  prefs: []
  type: TYPE_NORMAL
- en: '`vType`: `Ext.form.field.vTypes` is a virtual type implementation that defines
    ExtJS-specific default and custom validation (that is, custom `vType` for user
    specific validation) rules. Ext JS provides default `vType` properties, such as
    `email`, `URL`, `alpha`, and `alphanum`.'
  prefs: []
  type: TYPE_NORMAL
- en: The following code snippet illustrates a form panel with a text field, a checkbox,
    and a button for AJAX submission. The highlighted lines provide the validation
    rules for the fields via properties. The `Ext.form.Basic.submit()` button posts
    the data to an application server using the HTTP `post` action to the URL specified
    in `url` property and alerts the user with a success or failure message.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code snippet for the form panel is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding form panel code is processed by the following server response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Basic Form's `getValue()` method returns only the string values and `getFieldValue()`
    returns all type-specific data values (for example, `Date` objects for date fields,
    `Boolean` for combo boxes, and so on)
  prefs: []
  type: TYPE_NORMAL
- en: 6 – Templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Ext.XTemplate` is used to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Generating HTML output from arrays and store data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic conditional processing (`for` and `if` statements) and custom member support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing inline code with built-in template variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A simple template can be defined using the `Ext.XTemplate` constructor by passing
    an HTML fragment (with fields in curly braces as an argument, as illustrated in
    the following code snippet). It also provides a `<tpl>` tag for operators to repeat
    the `template` block for an array and an `if` operator for conditional processing.
    It can also have member functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet creates a template and applies the object and array
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `html` fragment can have either the fields or the array index inside curly
    braces, as shown in the preceding code snippet. The `applyTemplate` method replaces
    the `{user}` and the `{city}` values in the template. The template values can
    be an array (if the parameters are numeric) or an object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Check out more on template examples at [http://docs.sencha.com/ext-js/4-1/#!/api/Ext.XTemplate](http://docs.sencha.com/ext-js/4-1/#!/api/Ext.XTemplate).
  prefs: []
  type: TYPE_NORMAL
- en: 7 – Controllers and events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Controllers are responsible for events from various components that occur within
    our app. Let's create a grid view controller (using the grid panel created in
    the *Quick start – Creating and defining your Ext JS application* section), a
    new app, and an HTML file that loads the app and checks how the events are handled
    in the controller. It provides a central location to manage all the events of
    the application components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `app/view/ extjsUsersListView.js`, and add the following
    code to it. Please note that the store defined in the grid is already loaded using
    `app.model.Users` (`app`/`model`/`users`) referred in *Data package* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `app/controller/ extjsUsersController.js`, and add the
    following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet defines a controller `app.controller. extjsUsersController`
    by extending `Ext.app.Controller`. The controller''s `views` property is configured
    with the view created in previous section. The `init()` method defines how the
    events are handled in the controller through the `control` function. This function
    can either refer to the references or the xtypes. The reference `''viewport >
    panel''` uses the `Ext.ComponentQuery` syntax to point to the UI components and
    finds the direct child panel inside the viewport. The `''extjsUsersList''` xtype
    refers to the grid panel (that is, `view extjsUsersListView''`) for which we want
    to control the `itemclick` and `afterrender` events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`''alias''` is a property and refers to a short name of a custom class for
    defining xtypes using `widget.<xtypeName>`. For example, `widget.usergrid` and
    `widget.userPanel`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an application file `mvcApp.js` under the `ExtJSStarter` folder and
    add the following code to it. The `controllers` property in the application is
    configured with `extjsUsersController`, which is created in the previous section,
    and the grid component (`extjsUsersList`) is added to the viewport. Please refer
    to the `alias` property of the `grid` component for the xtype name mentioned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `mvcApp.html` under the `ExtJSStarter` folder, and add
    the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Loading `http://yourservername.com/ExtJSStarter/mvcApp.html` with the Firebug
    debugger on will show something similar to the next screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'The initialized application renders the panel and grid panel, and listens to
    the `itemclick` event. When the page is loaded, the application''s `init` method
    is called and followed by the rendering of panel. Clicking any rows will fire
    the `itemclick` event and log the message in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![7 – Controllers and events](img/6108OS_04_02.png.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 8 – Event handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Events in Ext JS are either DOM or JavaScript events. Event sources in Ext
    JS are an extension of the `Ext.Observable` class. The event properties are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Event** is a message sent (fired) by an event source to inform listeners
    that something happened in the view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event source** is an object that can fire events'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event listener** is a function that is called when an event source fires
    an event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Events can be fired using the `on` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DOM events**: Browsers that display HTML pages watch for user actions and
    fire events if the actions are occurring on DOM elements. Ext JS''s `Ext.Element`
    function wraps DOM elements together with their events, and provides a way to
    call the same event handlers in a different way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'JavaScript Events: During development, it is normal to have events from JavaScript
    objects other than DOM events. The following code snippet add a listener to Ext
    JS panel.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Custom events can be added by using the `addEvents()` and `fireEvent()` methods,
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Events can be relayed from the outcome of specified observations of the preceding
    code if they are fired by its execution. Assuming that the content panel mentioned
    in the preceding section is inside a window (`win`), it will tell the window to
    handle the `''loaded''` event from the content panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 9 – Other advanced features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A few other advanced features are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**JSBuilder**: This is a cross-platform Java application that allows you to
    customize your JavaScript and CSS files for building your projects. It uses JSON-based
    ([http://en.wikipedia.org/wiki/JSON](http://en.wikipedia.org/wiki/JSON)) configurations
    and the YUI compressor ([http://yui.github.com/yuicompressor/](http://yui.github.com/yuicompressor/))
    for minification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drawing and charting**: Ext JS provides a robust HTML 5 based drawing and
    charting packages that enables one to create cross-browser and cross-device graphics
    in a versatile way.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Theming**: Ext JS 4 has a brand-new theming system to customize the look
    of your application while still supporting all browsers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML5 local storage**: The local storage proxy `Ext.data.proxy.LocalStorage`
    uses the new HTML5 `localStorage` API to save `Model` data locally on the client
    browser. HTML5 local storage is a way for web pages to store named key/value pairs
    locally, within the client web browser. Like cookies, this data persists even
    after you navigate away from the website, close your browser tab, or exit your
    browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Animation**: CSS 3 based animations using keyframes can be made using the
    `Ext.fx.Animator` class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**History management**: History management using `Ext.util.History` allows
    you to register arbitrary application states on navigation actions, which can
    later be used to reset the application when the user navigates forward or backward
    through the browser history.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: People and places you should get to know
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This tutorial has been created from the experience gained using references from
    Ext JS APIs, forums, tutorials, and guides from Sencha's official site [http://www.sencha.com/](http://www.sencha.com/).
  prefs: []
  type: TYPE_NORMAL
- en: If you need help with *Instant Ext JS Starter*, here are some people and places
    that will prove invaluable.
  prefs: []
  type: TYPE_NORMAL
- en: Official sites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The official sites for download, training, and FAQs are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ext JS**: [http://www.sencha.com](http://www.sencha.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Training**: [http://www.sencha.com/training/](http://www.sencha.com/training/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Download**: [http://www.sencha.com/products/extjs/download/](http://www.sencha.com/products/extjs/download/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Licencing FAQs**: [http://www.sencha.com/legal/open-source-faq/](http://www.sencha.com/legal/open-source-faq/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Articles and tutorials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following list provides useful articles and tutorials to help you to explore
    more about the framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '**API**: [http://docs.sencha.com/ext-js/4-0/](http://docs.sencha.com/ext-js/4-0/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Examples**: [http://docs.sencha.com/ext-js/4-0/#!/example](http://docs.sencha.com/ext-js/4-0/#!/example)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Getting started guide**: [http://docs.sencha.com/ext-js/4-0/#/guide/getting_started](http://docs.sencha.com/ext-js/4-0/#/guide/getting_started)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Saki''s (An example page from an active Ext JS forum member) page**: [http://examples.extjs.eu/](http://examples.extjs.eu/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Theming**: [http://docs.sencha.com/ext-js/4-0/#!/guide/theming](http://docs.sencha.com/ext-js/4-0/#!/guide/theming)
    and [http://docs.sencha.com/ext-js/4-0/#!/video/19159630](http://docs.sencha.com/ext-js/4-0/#!/video/19159630)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drawing and charting**: [http://docs.sencha.com/ext-js/4-0/#!/guide/drawing_and_charting](http://docs.sencha.com/ext-js/4-0/#!/guide/drawing_and_charting)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are in need of any help, then forums and support will come handy:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sencha official forum**: The registration can be done at [http://www.sencha.com/forum/register.php](http://www.sencha.com/forum/register.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ext JS 4 Forum**: [http://www.sencha.com/forum/forumdisplay.php?79-Ext-JS-Community-Forums-4.x](http://www.sencha.com/forum/forumdisplay.php?79-Ext-JS-Community-Forums-4.x)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sencha Support**: [http://www.sencha.com/support/](http://www.sencha.com/support/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User FAQs**: [http://www.sencha.com/support/faq/](http://www.sencha.com/support/faq/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Links
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A few links for building JavaScripts, CSS, and unit testing are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chrome developer tools page**: [https://developers.google.com/chrome-developer-tools/docs/overview](https://developers.google.com/chrome-developer-tools/docs/overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML5 offline storage**: [http://docs.sencha.com/ext-js/4-0/#!/video/17844271](http://docs.sencha.com/ext-js/4-0/#!/video/17844271)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unit testing with Jasmine**: [http://docs.sencha.com/ext-js/4-0/#!/guide/testing](http://docs.sencha.com/ext-js/4-0/#!/guide/testing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSBuilder (Javascript and CSS builder tool)**: [http://www.sencha.com/products/jsbuilder](http://www.sencha.com/products/jsbuilder)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Books
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following books provide an insight into the internals of JavaScript and
    help with deep understanding of the core of EXT JS or any other JavaScript framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '*JavaScript: The Good Parts*, *Douglas Crockford*, *O''Reilly Media/Yahoo Press*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*JavaScript Patterns*, *Stoyan Stefanov*, *O''Reilly Media*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Pro JavaScript Techniques*, *John Resig*, *Apress*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blogs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jozef Sakalos, also known as Saki, is one of the leading forum members, who
    actively participates in many queries and provides excellent solutions. You can
    find his blog at [http://blog.extjs.eu/](http://blog.extjs.eu/).
  prefs: []
  type: TYPE_NORMAL
- en: Twitter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow Aaron Conron, who leads the Sencha Architect team on [https://twitter.com/aconran](https://twitter.com/aconran).
  prefs: []
  type: TYPE_NORMAL
