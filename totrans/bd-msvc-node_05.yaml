- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Knowing the Infrastructure of Microservices in Node.js
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Node.js中微服务的基础设施
- en: Understanding the infrastructure of microservices in Node.js is crucial for
    building scalable and maintainable applications. Microservices architecture breaks
    down a monolithic application into smaller, independently deployable services
    that communicate with each other over a network.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 理解Node.js中微服务的基础设施对于构建可扩展和可维护的应用程序至关重要。微服务架构将单体应用程序分解为更小、独立部署的服务，这些服务通过网络进行通信。
- en: We’ll start this chapter by covering the infrastructure of microservices in
    Node.js for microservices development. The infrastructure for microservices in
    Node.js should be designed carefully while considering factors such as scalability,
    reliability, security, and ease of maintenance. Node.js is a popular choice for
    implementing microservices due to its non-blocking, event-driven architecture,
    which aligns well with the demands of distributed systems. However, the choice
    of technologies and tools should be based on the specific requirements of your
    project.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始，介绍Node.js微服务开发的基础设施。在Node.js中，微服务的基础设施设计应考虑可扩展性、可靠性、安全性和易于维护等因素。Node.js因其非阻塞、事件驱动的架构而成为实现微服务的流行选择，这种架构与分布式系统的需求相吻合。然而，技术和工具的选择应基于你项目的具体需求。
- en: By the end of this chapter, you will understand the infrastructure of microservices
    in Node.js for microservices development and how to apply the concepts in your
    everyday work.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将了解Node.js微服务开发的基础设施，以及如何将这些概念应用到你的日常工作中。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Service discovery and API gateways
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务发现和API网关
- en: Load balancing and service orchestration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡和服务编排
- en: Containerization and orchestration and centralized logging and monitoring
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器化和编排以及集中式日志和监控
- en: Distributed tracing and event-driven communication
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式跟踪和事件驱动通信
- en: Database integration and continuous integration and deployment
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库集成和持续集成与持续部署
- en: Service discovery and API gateways
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务发现和API网关
- en: In this section, we’re going to learn about services that need to discover and
    communicate with each other dynamically and how these services can help you create
    the next generation of applications while you exceed in your work. Service discovery
    and API gateways are critical components in the infrastructure of microservices
    architecture. They play essential roles in ensuring that microservices can communicate
    with each other effectively and that clients can access the services seamlessly.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习关于需要动态发现和相互通信的服务，以及这些服务如何帮助你超越工作，创造下一代应用程序。服务发现和API网关是微服务架构中的关键组件。它们在确保微服务能够有效通信以及客户端能够无缝访问服务方面发挥着至关重要的作用。
- en: We’ll explore these concepts in more detail in the following subsections.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的小节中更详细地探讨这些概念。
- en: Service discovery
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务发现
- en: '**Service discovery** is the process by which microservices locate and communicate
    with each other in a dynamic and distributed environment. As microservices can
    be deployed and scaled independently, their network locations (IP addresses and
    ports) can change frequently. Service discovery mechanisms solve this challenge
    by maintaining an up-to-date registry of available services and their locations.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务发现**是微服务在动态和分布式环境中定位和相互通信的过程。由于微服务可以独立部署和扩展，它们的网络位置（IP地址和端口）可能会频繁变化。服务发现机制通过维护一个包含可用服务和它们位置的最新注册表来解决这一挑战。'
- en: 'Here’s how service discovery works:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是服务发现的工作方式：
- en: '**Service registry**: A service registry is a centralized database or service
    that keeps track of the available microservices and their network locations. Examples
    of service registries include **Consul** (designed to simplify the development
    and operation of microservices-based applications by providing features such as
    service discovery, health checking, and key-value storage), **etcd** (an open
    source distributed key-value store and configuration management system that is
    often used for building highly available, distributed systems), and **Netflix
    Eureka** (an open source service discovery and registration server that is part
    of the Netflix **Open Source Software** (**OSS**) ecosystem). Eureka was originally
    developed by Netflix to manage and monitor the availability of services in a microservices
    architecture. It provides a simple and efficient way for microservices to locate
    and communicate with each other in a dynamic and distributed environment.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务注册表**: 服务注册表是一个集中式数据库或服务，它跟踪可用的微服务和它们的网络位置。服务注册表的例子包括**Consul**（设计用于通过提供服务发现、健康检查和键值存储等功能来简化基于微服务的应用程序的开发和运营），**etcd**（一个开源的分布式键值存储和配置管理系统，常用于构建高可用性和分布式系统），以及**Netflix
    Eureka**（一个开源的服务发现和注册服务器，它是Netflix **开源软件**（**OSS**）生态系统的一部分）。Eureka最初由Netflix开发，用于管理和监控微服务架构中服务的可用性。它为微服务提供了一个简单高效的方法，在动态和分布式环境中定位和相互通信。'
- en: '**Registration**: When a microservice starts up, it registers itself with the
    service registry, providing information about its location, health, and available
    endpoints.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册**: 当微服务启动时，它会将自己注册到服务注册表中，提供有关其位置、健康状态和可用端点的信息。'
- en: '**Lookup**: When one microservice needs to communicate with another, it queries
    the service registry to discover the location of the target microservice.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查找**: 当一个微服务需要与其他微服务通信时，它会查询服务注册表以发现目标微服务的位置。'
- en: '**Load balancing**: Service discovery often includes load balancing, where
    incoming requests are distributed among multiple instances of the same microservice
    to ensure high availability and scalability.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡**: 服务发现通常包括负载均衡，其中传入请求在同一个微服务的多个实例之间分配，以确保高可用性和可伸缩性。'
- en: Knowing how these concepts and tools work can help you and your team build better
    software and contribute to high-quality code, security, and compatibility.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 了解这些概念和工具的工作原理可以帮助你和你的团队构建更好的软件，并为高质量的代码、安全性和兼容性做出贡献。
- en: '*Figure 5**.1* illustrates the process of service discovery:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.1*展示了服务发现的过程：'
- en: '![Figure 5.1: Service discovery (image by vectorjuice on Freepik)](img/B14980_05_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图5.1：服务发现（图片由Freepik上的vectorjuice提供）](img/B14980_05_01.jpg)'
- en: 'Figure 5.1: Service discovery (image by vectorjuice on Freepik)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1：服务发现（图片由Freepik上的vectorjuice提供）
- en: Service discovery, with its tools and concepts, can lead to a higher understanding
    of microservices, which can also help you learn how to coordinate with your team
    of developers.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 服务发现及其工具和概念可以加深对微服务的理解，这也有助于你学习如何与你的开发团队协调。
- en: In the next section, we’ll learn about API gateways.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习关于API网关的内容。
- en: API gateways
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API网关
- en: An **API gateway** is a server or service that acts as an entry point for clients
    (such as web browsers, mobile apps, or other microservices) to access the functionalities
    of a microservices-based application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**API网关**是一个服务器或服务，充当客户端（如网页浏览器、移动应用或其他微服务）访问基于微服务的应用程序功能的入口点。'
- en: 'It serves several essential purposes, such as the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下几个基本作用：
- en: '**Routing**: The API gateway routes client requests to the appropriate microservices
    based on the request’s URL or other criteria. It acts as a reverse proxy, forwarding
    requests to the relevant service.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由**: API网关根据请求的URL或其他标准将客户端请求路由到适当的微服务。它充当反向代理，将请求转发到相关服务。'
- en: '**Load balancing**: In addition to service discovery, the API gateway often
    performs load balancing to evenly distribute incoming requests among multiple
    instances of a microservice.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡**: 除了服务发现之外，API网关通常还执行负载均衡，以均匀地分配传入请求到微服务的多个实例。'
- en: '**Authentication and authorization**: The API gateway can handle authentication
    and authorization, ensuring that only authorized users or systems can access specific
    endpoints.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证和授权**: API网关可以处理身份验证和授权，确保只有授权的用户或系统可以访问特定的端点。'
- en: '**Request transformation**: Request transformation can modify or transform
    incoming requests and outgoing responses to match the expected formats of microservices,
    abstracting away differences between services.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求转换**: 请求转换可以修改或转换传入请求和传出响应，以匹配微服务期望的格式，从而抽象出服务之间的差异。'
- en: '**Caching**: API gateways can cache responses to reduce the load on microservices
    and improve response times for frequently requested data.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**: API网关可以缓存响应以减少对微服务的负载并提高频繁请求的数据的响应时间。'
- en: '**Logging and monitoring**: Centralized logging and monitoring can be implemented
    via the API gateway to collect data on incoming requests and responses, providing
    visibility into system behavior.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志和监控**: 通过API网关可以实现集中式日志和监控，以收集有关传入请求和响应的数据，从而提供对系统行为的可见性。'
- en: '**Security**: API gateways can provide security features such as rate limiting,
    DDoS protection, and **web application firewall** (**WAF**) capabilities.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**: API网关可以提供诸如速率限制、DDoS保护以及**Web应用防火墙**（WAF）功能等安全特性。'
- en: '**Versioning**: API gateways can support versioning of APIs, allowing for backward
    compatibility as services evolve.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制**: API网关可以支持API的版本控制，允许服务演变时保持向后兼容性。'
- en: When we develop microservices in Node.js, we can use these tools and concepts
    to increase the efficiency and effectiveness of developers in creating software.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在Node.js中开发微服务时，我们可以使用这些工具和概念来提高开发者在创建软件时的效率和效果。
- en: '**NGINX** can function as an API gateway, providing a unified entry point for
    clients to interact with different microservices. This involves the following
    aspects:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**NGINX**可以作为API网关使用，为客户端提供一个统一的入口点，以便与不同的微服务进行交互。这涉及到以下方面：'
- en: '**API routing**: NGINX can route requests to specific microservices based on
    the API endpoint. This simplifies the client experience by presenting a single
    entry point for various microservices.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API路由**: NGINX可以根据API端点将请求路由到特定的微服务。这通过提供一个单一入口点来简化客户端体验，该入口点可以访问各种微服务。'
- en: '**Security**: NGINX can handle authentication, authorization, and SSL termination,
    enhancing the security of microservices by centralizing these concerns.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**: NGINX可以处理身份验证、授权和SSL终止，通过集中处理这些关注点来增强微服务的安全性。'
- en: '**Authentication** is the process of verifying the identity of a user, service,
    or system. In a microservices architecture, each service must handle authentication
    to ensure that only authorized entities can access its resources.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**身份验证**是验证用户、服务或系统身份的过程。在微服务架构中，每个服务都必须处理身份验证，以确保只有授权实体可以访问其资源。'
- en: 'The following are some techniques for authentication:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些身份验证技术：
- en: '**JSON Web Tokens** (**JWTs**): You can use JWTs to encode user information
    and create tokens that can be verified by each microservice. Then, you can verify
    tokens in each microservice before processing requests.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON Web令牌**（JWTs）：您可以使用JWT来编码用户信息并创建可以被每个微服务验证的令牌。然后，您可以在处理请求之前在每个微服务中验证令牌。'
- en: '**OAuth 2.0**: You can implement OAuth 2.0 for secure, token-based authentication.
    OAuth allows third-party services to access resources on behalf of a user.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OAuth 2.0**: 您可以实现OAuth 2.0以进行基于令牌的安全身份验证。OAuth允许第三方服务代表用户访问资源。'
- en: '`Passport.js` library to implement authentication strategies in Node.js. It
    supports various authentication mechanisms, including local authentication, OAuth,
    and OpenID Connect.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Passport.js`库在Node.js中实现身份验证策略。它支持各种身份验证机制，包括本地身份验证、OAuth和OpenID Connect。
- en: 'Here’s an example of this when using a JWT:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个使用JWT的示例：
- en: '[PRE0]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Authorization** is the process of determining what actions a user or service
    is allowed to perform. It is usually based on the authenticated user’s role or
    specific permissions.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**授权**是确定用户或服务可以执行哪些操作的过程。它通常基于已验证用户的角色或特定权限。'
- en: 'The following techniques can be used for authorization:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些授权技术：
- en: '**Role-based access control** (**RBAC**): You can assign roles to users and
    define permissions associated with each role. You can also check the user’s role
    before allowing access to certain resources.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于角色的访问控制**（RBAC）：您可以为用户分配角色并定义与每个角色关联的权限。您还可以在允许访问某些资源之前检查用户的角色。'
- en: '**Claims-based authorization**: You can use claims embedded in tokens to convey
    information about the user’s permissions. Microservices can then be authorized
    based on these claims.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于声明的授权**: 您可以使用嵌入在令牌中的声明来传达有关用户权限的信息。微服务可以根据这些声明进行授权。'
- en: '**Middleware for authorization**: You can implement middleware functions in
    each microservice to check whether the authenticated user has the required permissions.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权中间件**：你可以在每个微服务中实现中间件功能，以检查认证用户是否具有所需的权限。'
- en: 'Here’s an example of this using RBAC:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是一个使用 RBAC 的例子：
- en: '[PRE16]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '*Figure 5**.2* illustrates the concept of an API gateway:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5.2* 展示了 API 网关的概念：'
- en: '![Figure 5.2: API gateway](img/B14980_05_02.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2：API 网关](img/B14980_05_02.jpg)'
- en: 'Figure 5.2: API gateway'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2：API 网关
- en: In summary, service discovery and API gateways are integral components of microservices
    infrastructure, enabling effective communication between services and providing
    a unified entry point for clients. These components enhance the scalability, reliability,
    security, and manageability of microservices-based applications, making them easier
    to develop and maintain.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，服务发现和 API 网关是微服务基础设施的组成部分，它们使得服务之间能够有效通信，并为客户端提供一个统一的入口点。这些组件增强了基于微服务的应用程序的可伸缩性、可靠性、安全性和可管理性，使它们更容易开发和维护。
- en: Now that we understand these concepts, let’s learn about load balancing and
    service orchestration.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了这些概念，让我们来学习负载均衡和服务编排。
- en: Load balancing and service orchestration
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负载均衡和服务编排
- en: Load balancing and service orchestration are essential components in the architecture
    of microservices-based applications. They both contribute to the scalability,
    availability, and efficient operation of a distributed system.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 负载均衡和服务编排是微服务应用架构中的基本组件。它们都促进了分布式系统的可伸缩性、可用性和高效运行。
- en: Load balancing
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 负载均衡
- en: '**Load balancing** is the practice of distributing incoming network traffic
    across multiple instances of a service to ensure that no single instance is overwhelmed
    with requests, thereby optimizing resource utilization and improving system reliability.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**负载均衡**是指将进入的网络流量分配到服务的多个实例中，以确保没有单个实例被请求淹没，从而优化资源利用并提高系统可靠性。'
- en: 'In a microservices architecture, load balancing is crucial because it helps
    achieve the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，负载均衡至关重要，因为它有助于实现以下目标：
- en: '**High availability**: Load balancers distribute traffic evenly across healthy
    service instances. If one instance fails or becomes overloaded, traffic is automatically
    redirected to other instances, ensuring uninterrupted service.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用性**：负载均衡器将流量均匀地分配到健康的服务实例。如果一个实例失败或过载，流量将自动重定向到其他实例，确保服务不间断。'
- en: '**Scalability**: As the demand for a microservice increases, additional instances
    can be added, and the load balancer will automatically distribute traffic to these
    new instances, effectively scaling the application horizontally.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可伸缩性**：随着对微服务的需求增加，可以添加额外的实例，负载均衡器将自动将这些新实例的流量分配到这些实例，从而有效地实现应用的横向扩展。'
- en: '**Resource utilization**: Load balancers can monitor the health and performance
    of service instances and make routing decisions based on factors such as response
    times and server load. This ensures that each instance is used efficiently.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源利用**：负载均衡器可以监控服务实例的健康状况和性能，并根据响应时间和服务器负载等因素做出路由决策。这确保了每个实例都得到有效利用。'
- en: '**Failover**: Load balancers can detect when a service instance becomes unhealthy
    and stop sending traffic to it. This helps in isolating issues and maintaining
    the overall system’s integrity.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障转移**：负载均衡器可以检测服务实例何时变得不健康，并停止向其发送流量。这有助于隔离问题并维护整个系统的完整性。'
- en: 'Some common load balancing strategies are as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见的负载均衡策略如下：
- en: '**Round-robin**: This is a simple and widely used load balancing algorithm
    that distributes incoming network traffic or requests evenly across a group of
    backend servers or resources.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轮询**：这是一种简单且广泛使用的负载均衡算法，它将进入的网络流量或请求均匀地分配到一组后端服务器或资源。'
- en: '**Least connections**: This is a load balancing algorithm that’s used by load
    balancers to distribute incoming network traffic or requests to a group of backend
    servers or resources.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最少连接**：这是一种负载均衡算法，负载均衡器使用它将进入的网络流量或请求分配到一组后端服务器或资源。'
- en: '**IP hashing**: Also known as *IP-based load balancing* or *IP hash load balancing*,
    PI hashing is a technique that’s used by load balancers to distribute incoming
    network traffic or requests to a group of backend servers or resources based on
    the source or destination IP address of the requests'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IP哈希**：也称为基于IP的负载均衡或IP哈希负载均衡，IP哈希是一种负载均衡器使用的技巧，用于根据请求的源或目标IP地址将进入的网络流量或请求分配到一组后端服务器或资源。'
- en: '**Weighted distribution**: This refers to the practice of allocating resources
    or traffic among different instances or replicas of a microservice based on their
    relative weights.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加权分配**：这指的是根据相对权重在微服务的不同实例或副本之间分配资源或流量的做法。'
- en: 'Load balancing is crucial in microservices architectures where multiple instances
    of a service may exist. NGINX supports the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能存在多个服务实例的微服务架构中，负载均衡至关重要。NGINX支持以下功能：
- en: '**Round-robin load balancing**: Distributes incoming requests evenly among
    the available microservice instances.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轮询负载均衡**：将进入的请求平均分配到可用的微服务实例中。'
- en: '**Health checks**: NGINX can perform health checks to identify and route traffic
    away from unhealthy instances, ensuring better reliability.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健康检查**：NGINX可以执行健康检查，以识别并路由流量远离不健康的实例，确保更好的可靠性。'
- en: 'NGINX acts as a **reverse proxy**, sitting between client applications and
    microservices. This offers several advantages:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: NGINX充当**反向代理**，位于客户端应用程序和微服务之间。这提供了几个优点：
- en: '**Load balancing**: NGINX can distribute incoming requests among multiple instances
    of a microservice, ensuring even load distribution and improved system performance.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡**：NGINX可以在多个微服务实例之间分配进入的请求，确保负载均匀分布并提高系统性能。'
- en: '**Routing**: NGINX can route requests to different microservices based on factors
    such as URL paths, headers, or other parameters. This enables efficient handling
    of various functionalities distributed across microservices.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由**：NGINX可以根据URL路径、头信息或其他参数等因素将请求路由到不同的微服务。这有助于高效处理分布在微服务中的各种功能。'
- en: '*Figure 5**.3* illustrates load balancing:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5*.*3*展示了负载均衡：'
- en: '![Figure 5.3: Load balancing (image by vectorjuice on Freepik)](img/B14980_05_03.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图5.3：负载均衡（图片由Freepik上的vectorjuice提供）](img/B14980_05_03.jpg)'
- en: 'Figure 5.3: Load balancing (image by vectorjuice on Freepik)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3：负载均衡（图片由Freepik上的vectorjuice提供）
- en: Popular load balancing solutions include hardware load balancers and software-based
    solutions such as NGINX and HAProxy, as well as cloud-based load balancers provided
    by cloud service providers.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 流行的负载均衡解决方案包括硬件负载均衡器、基于软件的解决方案（如NGINX和HAProxy），以及云服务提供商提供的基于云的负载均衡器。
- en: With these concepts covered, next, we’ll look at service orchestration.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些概念介绍完毕后，接下来我们将探讨服务编排。
- en: Service orchestration
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务编排
- en: '**Service orchestration** involves coordinating and managing the execution
    of multiple microservices to fulfill a specific business process or workflow.
    It ensures that the individual services work together harmoniously to achieve
    a higher-level objective.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务编排**涉及协调和管理多个微服务的执行，以满足特定的业务流程或工作流。它确保各个服务协同工作，以实现更高层次的目标。'
- en: 'Here’s how service orchestration contributes to a microservices architecture:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是服务编排如何贡献于微服务架构的说明：
- en: '**Complex workflow handling**: Microservices often need to collaborate to perform
    complex tasks or workflows. Service orchestration defines the sequence of microservices
    to be executed and manages their interactions to complete the workflow.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂工作流处理**：微服务通常需要协作以执行复杂任务或工作流。服务编排定义了要执行的微服务序列，并管理它们的交互以完成工作流。'
- en: '**Centralized control**: Service orchestration typically involves a central
    orchestrator component that coordinates the execution of microservices, thereby
    handling error recovery and ensuring the correct order of operations.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中式控制**：服务编排通常涉及一个中央编排器组件，该组件协调微服务的执行，从而处理错误恢复并确保操作的正确顺序。'
- en: '**Asynchronous communication**: Microservices can communicate with each other
    through asynchronous message passing, enabling loosely coupled interactions. Service
    orchestration manages the messaging and data flow between services.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步通信**：微服务可以通过异步消息传递相互通信，实现松耦合的交互。服务编排管理服务之间的消息和数据流。'
- en: '**Long-running processes**: For long-running processes that span multiple microservices,
    service orchestration ensures that steps are executed in the correct order and
    that data consistency is maintained.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**长运行进程**：对于跨越多个微服务的长运行进程，服务编排确保步骤按正确顺序执行，并保持数据一致性。'
- en: '**Dynamic scaling**: Service orchestration can dynamically scale microservices
    based on the workload, ensuring that resources are allocated optimally to handle
    varying demands.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态伸缩**：服务编排可以根据工作负载动态伸缩微服务，确保资源被最优地分配以处理不断变化的需求。'
- en: Service orchestration can be implemented using various tools and patterns, including
    workflow engines, message queues, and choreography-based approaches. Tools such
    as Apache Camel, Netflix Conductor, and Kubernetes-based orchestration solutions
    are commonly used in microservices environments.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 服务编排可以使用各种工具和模式实现，包括工作流引擎、消息队列和基于编排的方法。在微服务环境中，常用的工具有Apache Camel、Netflix Conductor和基于Kubernetes的编排解决方案。
- en: Additional information
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 附加信息
- en: '*Apache Camel* is an open source integration framework that provides a lightweight,
    easy-to-use platform for routing and mediating message exchanges between different
    systems. You can access its documentation at [https://camel.apache.org/docs/](https://camel.apache.org/docs/).'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '*Apache Camel* 是一个开源集成框架，提供了一个轻量级、易于使用的平台，用于在不同系统之间路由和调解消息交换。您可以在[https://camel.apache.org/docs/](https://camel.apache.org/docs/)访问其文档。'
- en: '*Netflix Conductor* allows developers to design, execute, and manage complex
    workflows in a scalable and reliable manner. You can access its documentation
    at [https://orkes.io/content/](https://orkes.io/content/).'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*Netflix Conductor* 允许开发者以可扩展和可靠的方式设计、执行和管理复杂的工作流。您可以在[https://orkes.io/content/](https://orkes.io/content/)访问其文档。'
- en: '*Kubernetes orchestration* is a platform for container orchestration that allows
    you to build application services that span multiple containers, schedule containers
    across a cluster, scale those containers, and manage their health over time. You
    can access its documentation at [https://kubernetes.io/docs/home/supported-doc-versions](https://kubernetes.io/docs/home/supported-doc-versions).'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*Kubernetes编排*是一个容器编排平台，允许您构建跨多个容器的应用程序服务，跨集群调度容器，扩展这些容器，并随时间管理其健康状态。您可以在[https://kubernetes.io/docs/home/supported-doc-versions](https://kubernetes.io/docs/home/supported-doc-versions)访问其文档。'
- en: '*Figure 5**.4* depicts service orchestration:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.4* 描述了服务编排：'
- en: '![Figure 5.4: Service orchestration (image by Freepik)](img/B14980_05_04.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图5.4：服务编排（图片由Freepik提供）](img/B14980_05_04.jpg)'
- en: 'Figure 5.4: Service orchestration (image by Freepik)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4：服务编排（图片由Freepik提供）
- en: In summary, load balancing and service orchestration are fundamental components
    of microservices architecture. Load balancing ensures the efficient distribution
    of traffic and resource utilization, while service orchestration manages the coordination
    and execution of microservices to complete complex workflows and business processes.
    Together, these components contribute to the scalability, availability, and reliability
    of microservices-based applications.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，负载均衡和服务编排是微服务架构的基本组件。负载均衡确保了流量和资源利用的高效分配，而服务编排管理微服务的协调和执行，以完成复杂的工作流和业务流程。这些组件共同促进了基于微服务的应用程序的可扩展性、可用性和可靠性。
- en: Now, we can continue to the next section, in which we will talk about containerization
    and orchestration and centralized logging and monitoring.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续到下一节，在这一节中，我们将讨论容器化和编排以及集中式日志和监控。
- en: Containerization and orchestration and centralized logging and monitoring
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器化和编排以及集中式日志和监控
- en: Containerization and orchestration and centralized logging and monitoring are
    two critical components in the infrastructure of microservices-based applications.
    They play pivotal roles in ensuring the efficient deployment, management, and
    monitoring of microservices.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化和编排以及集中式日志和监控是微服务应用程序基础设施中的两个关键组件。它们在确保微服务的有效部署、管理和监控中发挥着关键作用。
- en: We’ll start with containerization and orchestration.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从容器化和编排开始。
- en: Containerization and orchestration
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器化和编排
- en: '**Containerization** involves packaging an application and its dependencies
    into a standardized unit called a **container**.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**容器化**涉及将应用程序及其依赖项打包成一个称为**容器**的标准单元。'
- en: Orchestration refers to the process of automatically managing containerized
    applications. It involves deploying, scaling, load balancing, and maintaining
    containers across a cluster of machines. Kubernetes is the most popular container
    orchestration platform, but others, such as Docker Swarm and Apache Mesos, also
    exist.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**编排**指的是自动管理容器化应用程序的过程。它涉及在机器集群中部署、扩展、负载均衡和维护容器。Kubernetes是最受欢迎的容器编排平台，但还有其他平台，如Docker
    Swarm和Apache Mesos，也存在于市场上。'
- en: 'Here’s how containerization and orchestration benefit microservices:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化和编排如何使微服务受益如下：
- en: '**Isolation**: Containers provide process isolation, ensuring that microservices
    do not interfere with each other, making it easier to maintain consistent environments.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离**：容器提供进程隔离，确保微服务之间不会相互干扰，这使得维护一致的环境变得更加容易。'
- en: '**Portability**: Containers can run on any platform that supports containerization,
    making it possible to move microservices across development, testing, and production
    environments seamlessly.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可移植性**：容器可以在支持容器化的任何平台上运行，这使得微服务可以在开发、测试和生产环境中无缝迁移。'
- en: '**Resource efficiency**: Orchestration platforms such as Kubernetes automate
    the deployment and scaling of containers, optimizing resource utilization and
    ensuring that microservices have the required resources when needed.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源效率**：如Kubernetes之类的编排平台自动化容器的部署和扩展，优化资源利用，并确保微服务在需要时获得所需的资源。'
- en: '**High availability**: Orchestration platforms monitor the health of microservices
    and can automatically replace failed instances, ensuring high availability and
    fault tolerance.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高可用性**：编排平台监控微服务的健康状态，并可以自动替换失败的实例，确保高可用性和容错性。'
- en: '**Scaling**: Microservices can be easily scaled up or down by adjusting the
    number of container replicas. This is crucial for handling variable workloads.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展**：可以通过调整容器副本的数量轻松扩展或缩减微服务。这对于处理可变的工作负载至关重要。'
- en: Containers encapsulate the application code, runtime, system libraries, and
    settings, ensuring consistency and portability across different environments.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 容器封装了应用程序代码、运行时、系统库和设置，确保在不同环境中的一致性和可移植性。
- en: Additional information
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 附加信息
- en: '**Docker** is an open-source platform that allows you to automate the deployment,
    scaling, and management of applications using containerization and is a widely
    used containerization platform.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker**是一个开源平台，允许您使用容器化自动化应用程序的部署、扩展和管理，并且是一个广泛使用的容器化平台。'
- en: '*Figure 5**.5* illustrates containerization and orchestration:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.5*展示了容器化和编排：'
- en: '![Figure 5.5: Full-stack development process (image by vectorjuice on Freepik)](img/B14980_05_05.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图5.5：全栈开发过程（图片由vectorjuice在Freepik提供）](img/B14980_05_05.jpg)'
- en: 'Figure 5.5: Full-stack development process (image by vectorjuice on Freepik)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5：全栈开发过程（图片由vectorjuice在Freepik提供）
- en: Containerization and orchestration can help ship software that will run on every
    platform and in every system. By automatically managing containerization, you
    can achieve greater versatility in deployment.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 容器化和编排可以帮助部署将在每个平台和系统中运行的软件。通过自动管理容器化，您可以在部署方面实现更大的灵活性。
- en: In the next section, we will talk about centralized logging and monitoring.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论集中式日志和监控。
- en: Centralized logging and monitoring
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集中式日志和监控
- en: '**Centralized logging and monitoring systems** collect and analyze data from
    microservices and their environments. These systems help in diagnosing issues,
    optimizing performance, and ensuring the health of microservices- applications.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**集中式日志和监控系统**收集并分析来自微服务和其环境的数据。这些系统有助于诊断问题、优化性能，并确保微服务应用程序的健康。'
- en: 'Let’s look at some of the common components of these systems include:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些系统的常见组件包括：
- en: '**Log collectors**: These are agents or services that gather logs generated
    by microservices and forward them to a central location.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志收集器**：这些是代理或服务，它们收集微服务生成的日志并将它们转发到中央位置。'
- en: '**Log aggregators**: These are systems that consolidate logs from various sources,
    making it easier to search, analyze, and visualize log data. Examples include
    Elasticsearch, Fluentd, and Logstash.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志聚合器**：这些是系统，它们从各种来源汇总日志，使得搜索、分析和可视化日志数据变得更加容易。例如，Elasticsearch、Fluentd和Logstash。'
- en: '**Metrics and monitoring**: Tools such as Prometheus and Grafana (two popular
    open source tools used for monitoring and visualizing metrics and time series
    data) are used to collect and display real-time performance metrics from microservices.
    They provide insights into the behavior of the application and its components.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标和监控**：如 Prometheus 和 Grafana（两种流行的开源工具，用于监控和可视化指标和时间序列数据）之类的工具用于收集并显示微服务的实时性能指标。它们提供了对应用程序及其组件行为的洞察。'
- en: '**Alerting**: Monitoring systems can generate alerts based on predefined thresholds,
    allowing operations teams to respond to issues promptly.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警报**：监控系统可以根据预定义的阈值生成警报，使运维团队能够及时响应问题。'
- en: '**Tracing**: Distributed tracing tools such as Jaeger and Zipkin (two distributed
    tracing systems that are used to monitor and troubleshoot complex, microservices-based
    architectures) help track the flow of requests across microservices, making it
    easier to identify bottlenecks and latency issues.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**追踪**：分布式追踪工具，如 Jaeger 和 Zipkin（两种用于监控和故障排除复杂、基于微服务的架构的分布式追踪系统），有助于跟踪请求在微服务之间的流动，使其更容易识别瓶颈和延迟问题。'
- en: Additional information
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 其他信息
- en: '*Elasticsearch* is a highly scalable open source search and analytics engine
    built on top of Apache Lucene. You can access its documentation at [https://www.elastic.co/guide/index.html](https://www.elastic.co/guide/index.html).'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '*Elasticsearch* 是一个基于 Apache Lucene 构建的高度可扩展的开源搜索和分析引擎。您可以在 [https://www.elastic.co/guide/index.html](https://www.elastic.co/guide/index.html)
    访问其文档。'
- en: '*Fluentd* is an open source data collector designed to unify data collection
    and consumption for better analysis and insights. You can access its documentation
    at [https://docs.fluentd.org/](https://docs.fluentd.org/).'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '*Fluentd* 是一个开源的数据收集器，旨在统一数据收集和消费，以实现更好的分析和洞察。您可以在 [https://docs.fluentd.org/](https://docs.fluentd.org/)
    访问其文档。'
- en: '*Logstash* is an open source data processing pipeline that allows you to collect,
    process, and ingest data from various sources into different output destinations
    (ELK Stack). You can access its documentation at [https://www.elastic.co/guide/en/logstash/current/introduction.html](https://www.elastic.co/guide/en/logstash/current/introduction.html).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '*Logstash* 是一个开源数据处理管道，允许您从各种来源收集、处理并将数据摄入到不同的输出目的地（ELK Stack）。您可以在 [https://www.elastic.co/guide/en/logstash/current/introduction.html](https://www.elastic.co/guide/en/logstash/current/introduction.html)
    访问其文档。'
- en: Centralized logging and monitoring offer several benefits, including improved
    visibility, scalability, access to historical data, and increased efficiency in
    managing and analyzing logs and metrics.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 集中式日志记录和监控提供了多项好处，包括提高可见性、可扩展性、访问历史数据以及管理和分析日志和指标的高效性。
- en: '*Figure 5**.6* illustrates centralized logging and monitoring:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5.6* 展示了集中式日志记录和监控：'
- en: '![Figure 5.6: Centralized logging and monitoring (image by pch.vector on Freepik)](img/B14980_05_06.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.6：集中式日志记录和监控（图片由 Freepik 上的 pch.vector 提供）](img/B14980_05_06.jpg)'
- en: 'Figure 5.6: Centralized logging and monitoring (image by pch.vector on Freepik)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6：集中式日志记录和监控（图片由 Freepik 上的 pch.vector 提供）
- en: In summary, containerization and orchestration provide a scalable and efficient
    way to manage microservices, while centralized logging and monitoring ensure that
    these services operate reliably and can be effectively maintained. Together, these
    components form a robust foundation for microservices-based applications.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，容器化和编排提供了一种可扩展且高效的方式来管理微服务，而集中式日志记录和监控确保这些服务可靠运行并能得到有效维护。这些组件共同构成了基于微服务应用的稳固基础。
- en: In the next section, we will learn about distributed tracing and event-driven
    communication.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习关于分布式追踪和事件驱动通信。
- en: Distributed tracing and event-driven communication
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式追踪和事件驱动通信
- en: Distributed tracing and event-driven communication are two crucial concepts
    in the world of microservices and distributed systems. They address challenges
    related to monitoring and coordinating interactions between microservices. Let’s
    dive into these concepts.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式追踪和事件驱动通信是微服务和分布式系统领域中的两个关键概念。它们解决了与监控和协调微服务之间交互相关的挑战。让我们深入探讨这些概念。
- en: Distributed tracing
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布式追踪
- en: '**Distributed tracing** is a technique that’s used to track and monitor requests
    as they traverse multiple microservices in a distributed system. It provides end-to-end
    visibility into the flow of a request, allowing you to identify performance bottlenecks,
    troubleshoot issues, and optimize the system’s behavior.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**分布式跟踪**是一种技术，用于跟踪和监控请求在分布式系统中的多个微服务之间传递。它提供了对请求流的全端到端可见性，使您能够识别性能瓶颈、解决问题并优化系统的行为。'
- en: 'Here’s how distributed tracing works:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是分布式跟踪的工作原理：
- en: '**Instrumentation**: Each microservice in your architecture is instrumented
    to generate trace data. This typically involves adding trace headers to incoming
    requests and recording timing information for various operations within the service.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仪表化**：您架构中的每个微服务都被仪表化以生成跟踪数据。这通常涉及向传入请求添加跟踪头并在服务内部记录各种操作的计时信息。'
- en: '**Trace context**: The trace context is propagated along with the request as
    it moves from one microservice to another. This context includes a unique trace
    ID and span ID, which allows you to correlate activities across services.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跟踪上下文**：随着请求从一个微服务移动到另一个微服务，跟踪上下文会与其一起传播。此上下文包括唯一的跟踪ID和跨度ID，这使得您能够关联跨服务中的活动。'
- en: '**Centralized collector**: Trace data from all microservices is sent to a centralized
    collector or storage system. Popular options include Zipkin, Jaeger, and the Elastic
    Stack.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中式收集器**：所有微服务的跟踪数据都发送到一个集中式收集器或存储系统。流行的选项包括Zipkin、Jaeger和Elastic Stack。'
- en: '**Visualization and analysis**: Once the trace data has been collected, you
    can visualize it using specialized tools. This allows you to see the entire journey
    of a request, including service-to-service communication and the time spent at
    each step.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可视化和分析**：一旦收集到跟踪数据，您可以使用专用工具对其进行可视化。这使您能够看到请求的整个旅程，包括服务之间的通信以及每个步骤所花费的时间。'
- en: '**Improved customer experience**: Once the trace data has been collected, you
    can visualize it using specialized tools. This allows you to see the entire journey
    of a request, including service-to-service communication and the time spent at
    each step.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提升客户体验**：一旦收集到跟踪数据，您可以使用专用工具对其进行可视化。这使您能够看到请求的整个旅程，包括服务之间的通信以及每个步骤所花费的时间。'
- en: Distributed tracing is a powerful tool for performance optimization, root cause
    analysis, dependency mapping, and capacity planning in distributed systems. It
    provides detailed visibility into the behavior and performance of your applications,
    allowing you to make data-driven decisions for improving system performance and
    reliability.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式跟踪是性能优化、根本原因分析、依赖关系映射和分布式系统容量规划的有力工具。它提供了对应用程序行为和性能的详细可见性，使您能够做出基于数据的决策，以改进系统性能和可靠性。
- en: In the next section, we will talk about event-driven communication.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论事件驱动通信。
- en: Event-driven communication
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件驱动通信
- en: '**Event-driven communication** is a messaging pattern where microservices communicate
    asynchronously through the exchange of events or messages. This approach decouples
    services, allowing them to work independently and react to events triggered by
    other services.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件驱动通信**是一种消息模式，其中微服务通过交换事件或消息异步通信。这种方法解耦了服务，使它们能够独立工作并对其他服务触发的事件做出反应。'
- en: 'Here’s how event-driven communication works:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是事件驱动通信的工作原理：
- en: '**Event producers**: These are microservices that generate events or messages
    and publish them to a message broker or event bus. Events can represent various
    actions or state changes.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件生产者**：这些是生成事件或消息并将它们发布到消息代理或事件总线上的微服务。事件可以表示各种操作或状态变化。'
- en: '**Event consumers**: These are microservices that subscribe to specific events
    and react to them. They perform actions based on the information contained in
    the events.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件消费者**：这些是订阅特定事件并对它们做出反应的微服务。它们根据事件中包含的信息执行操作。'
- en: '**Message brokers**: These are middleware components that facilitate the exchange
    of messages between producers and consumers. Popular message brokers include Apache
    Kafka, RabbitMQ, and AWS SNS/SQS.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息代理**：这些是中间件组件，用于促进生产者和消费者之间的消息交换。流行的消息代理包括Apache Kafka、RabbitMQ和AWS SNS/SQS。'
- en: In summary, distributed tracing enhances your ability to monitor and diagnose
    the behavior of microservices, while event-driven communication fosters loose
    coupling and scalability in a microservices architecture. These concepts are valuable
    for building resilient and responsive distributed systems.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，分布式跟踪增强了您监控和诊断微服务行为的能力，而事件驱动通信促进了微服务架构中的松耦合和可伸缩性。这些概念对于构建弹性且响应迅速的分布式系统非常有价值。
- en: In the next section, we are going to talk about database integration and continuous
    integration and deployment.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论数据库集成和持续集成与持续部署。
- en: Database integration and continuous integration and deployment
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库集成和持续集成与持续部署
- en: Database integration and **continuous integration/continuous deployment** (**CI/CD**)
    are critical aspects of a microservices architecture. They ensure that data is
    managed effectively and that changes to microservices are deployed efficiently
    and reliably.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库集成和**持续集成/持续部署**（**CI/CD**）是微服务架构的关键方面。它们确保数据得到有效管理，并且微服务的更改能够高效且可靠地部署。
- en: Database integration
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库集成
- en: In a microservices architecture, each microservice typically has its own database
    or data store. This separation of data is known as *database* *per service*.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，每个微服务通常都有自己的数据库或数据存储。这种数据分离被称为*数据库* *按服务*。
- en: 'Here are some key considerations for database integration in microservices:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，数据库集成和**持续集成/持续部署**（**CI/CD**）是关键方面。它们确保数据得到有效管理，并且微服务的更改能够高效且可靠地部署。
- en: '**Data consistency**: To ensure data consistency, three approaches are commonly
    used – two-phase commits, distributed transactions, and eventual consistency:'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据一致性**: 为了确保数据一致性，通常采用三种方法——两阶段提交、分布式事务和最终一致性：'
- en: '**Two-phase commits**: **Two-phase commit** (**2PC**) is a protocol that ensures
    atomicity and consistency in distributed transactions. It involves coordinating
    multiple participants or resources to decide whether to commit or abort a transaction.
    The protocol consists of two phases: a preparation phase and a commit phase. In
    the preparation phase, each participant informs the coordinator whether it can
    successfully commit the transaction. In the commit phase, the coordinator sends
    a commit message to all participants if everyone agrees to commit, or an abort
    message if anyone disagrees. This ensures that all participants either commit
    or abort the transaction together.'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**两阶段提交**: **两阶段提交**（**2PC**）是一种确保分布式事务原子性和一致性的协议。它涉及协调多个参与者或资源来决定是否提交或中止事务。该协议由两个阶段组成：准备阶段和提交阶段。在准备阶段，每个参与者向协调者告知其是否能够成功提交事务。在提交阶段，如果所有参与者都同意提交，协调者向所有参与者发送提交消息；如果有人不同意，则发送中止消息。这确保了所有参与者要么一起提交事务，要么一起中止事务。'
- en: '**Distributed transactions**: Distributed transactions involve multiple independent
    systems or databases that participate in a single transaction. A transaction within
    a distributed environment has the same properties as a local transaction, including
    **Atomicity, Consistency, Isolation, and Durability** (**ACID**) properties. Distributed
    transaction management systems handle the coordination and synchronization between
    participating nodes to ensure the consistency of the entire transaction. These
    systems may employ protocols such as 2PC to coordinate the actions of the participants.'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式事务**: 分布式事务涉及多个独立的系统或数据库，它们参与单个事务。分布式环境中的事务具有与本地事务相同的属性，包括**原子性、一致性、隔离性和持久性**（**ACID**）属性。分布式事务管理系统处理参与节点之间的协调和同步，以确保整个事务的一致性。这些系统可能采用2PC等协议来协调参与者的操作。'
- en: '**Eventual consistency**: Eventual consistency is a consistency model that’s
    used in distributed systems. It relaxes the strict consistency requirements of
    traditional ACID databases to provide high availability, scalability, and tolerance
    to network partitions. In an eventually consistent system, updates to replicated
    data occur asynchronously, allowing different replicas to diverge temporarily.
    However, the system guarantees that eventually, all replicas will converge to
    a consistent state. This approach prioritizes availability and performance over
    strict consistency, making it suitable for scenarios where data can tolerate temporary
    inconsistencies.'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最终一致性**：最终一致性是一种在分布式系统中使用的致性模型。它放宽了传统ACID数据库的严格一致性要求，以提供高可用性、可扩展性和对网络分区的容错性。在最终一致性系统中，对复制数据的更新是异步发生的，允许不同的副本暂时分离。然而，系统保证最终所有副本将收敛到一个一致的状态。这种方法优先考虑可用性和性能，而不是严格一致性，使其适用于数据可以容忍暂时不一致的场景。'
- en: Each approach has its advantages and trade-offs, depending on the specific requirements
    of the system. Two-phase commits and distributed transactions provide strong consistency
    guarantees but can introduce additional overhead and complexity due to coordination
    between participants. On the other hand, eventual consistency prioritizes availability
    and scalability but may lead to temporary data inconsistencies. The choice of
    approach depends on factors such as the system’s workload, performance requirements,
    and the level of consistency needed in the application.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每种方法都有其优点和权衡，具体取决于系统的特定要求。两阶段提交和分布式事务提供了强一致性保证，但由于参与者之间的协调可能会引入额外的开销和复杂性。另一方面，最终一致性优先考虑可用性和可扩展性，但可能导致暂时数据不一致。选择方法取决于诸如系统的工作负载、性能要求以及应用程序中所需的一致性水平等因素。
- en: '**APIs for data access**: Defining clear APIs for accessing and modifying data
    in each microservice’s database helps maintain control over data interactions.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据访问APIs**：为每个微服务的数据库定义清晰的API来访问和修改数据，有助于保持对数据交互的控制。'
- en: '**Data synchronization**: This involves implementing data synchronization mechanisms
    or using event-driven architecture to propagate changes in one microservice’s
    data to others who may be interested.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据同步**：这涉及到实现数据同步机制或使用事件驱动架构来传播一个微服务数据的变化到可能感兴趣的其它微服务。'
- en: '**Caching**: You can use caching strategies to improve data retrieval performance
    and reduce the load on databases.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**：您可以使用缓存策略来提高数据检索性能并减少对数据库的负载。'
- en: '**Polyglot persistence**: This involves choosing the right database technology
    for each microservice’s specific data storage needs. Different microservices may
    use different types of databases (for example, relational, NoSQL, and so on) based
    on their requirements.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多语言持久性**：这涉及到为每个微服务的特定数据存储需求选择合适的数据库技术。不同的微服务可能根据其需求使用不同类型的数据库（例如，关系型、NoSQL等）。'
- en: '**Data ownership**: You must clearly define which microservice is the authoritative
    source for specific types of data and ensure that data ownership is clear to prevent
    conflicts.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据所有权**：您必须明确定义哪个微服务是特定类型数据的权威来源，并确保数据所有权清晰，以防止冲突。'
- en: Database integration refers to strategies and techniques for managing data across
    these distributed databases and ensuring that data consistency and integrity are
    maintained.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库集成指的是管理这些分布式数据库中的数据以及确保数据一致性和完整性的策略和技术。
- en: '*Figure 5**.7* presents an example of database integration:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.7* 展示了数据库集成的示例：'
- en: '![Figure 5.7: Database integration (image from Freepik)](img/B14980_05_07.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图5.7：数据库集成（图片来自Freepik）](img/B14980_05_07.jpg)'
- en: 'Figure 5.7: Database integration (image from Freepik)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7：数据库集成（图片来自Freepik）
- en: Database as a service can help developers develop faster while focusing on a
    single microservice and creating the best user experience for different users.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库作为服务可以帮助开发者更快地开发，同时专注于单个微服务，并为不同用户提供最佳的用户体验。
- en: In the next section, we will learn more about CI/CD.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习更多关于CI/CD的内容。
- en: CI/CD
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CI/CD
- en: '**CI/CD** is a set of practices and tools that enable the automated building,
    testing, and deployment of software changes, including those in microservices.
    CI/CD pipelines streamline the process of delivering updates to microservices-based
    applications and ensure that changes are integrated and tested seamlessly.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**CI/CD** 是一套实践和工具，它使软件变更的自动化构建、测试和部署成为可能，包括微服务中的变更。CI/CD 管道简化了向基于微服务应用程序交付更新的过程，并确保变更可以无缝集成和测试。'
- en: 'Here are some key aspects of CI/CD in a microservices environment:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务环境中，以下是 CI/CD 的关键方面：
- en: '**Automated builds**: Automate the process of building microservices and their
    dependencies whenever changes are pushed to a version control system (for example,
    Git).'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化构建**：每当将更改推送到版本控制系统（例如，Git）时，自动化构建微服务和其依赖项的过程。'
- en: '**Automated testing**: Run automated tests, including unit tests, integration
    tests, and end-to-end tests, to ensure that changes do not introduce regressions.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化测试**：运行自动化测试，包括单元测试、集成测试和端到端测试，以确保变更不会引入回归。'
- en: '**Artifact repository**: Store built artifacts (for example, Docker images)
    in a repository for easy access during deployment.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工件存储库**：将构建的工件（例如，Docker 镜像）存储在存储库中，以便在部署期间方便访问。'
- en: '**Deployment automation**: Automate the deployment process to staging and production
    environments, including rolling updates, blue-green deployments, or canary releases.
    All these strategies are used in deployment automation to ensure smooth and safe
    application releases.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署自动化**：自动化部署过程到预生产和生产环境，包括滚动更新、蓝绿部署或金丝雀发布。所有这些策略都用于部署自动化，以确保平稳和安全的软件发布。'
- en: '**Infrastructure as Code** (**IaC**): Define infrastructure components (for
    example, containers and virtual machines) as code to ensure consistent environments
    across stages.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施即代码**（**IaC**）：将基础设施组件（例如，容器和虚拟机）定义为代码，以确保在各个阶段之间保持一致的环境。'
- en: '**Monitoring and rollback**: Integrate monitoring and alerting into the CI/CD
    pipeline to detect issues in production and enable rollback if necessary.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控和回滚**：将监控和警报集成到 CI/CD 管道中，以检测生产中的问题，并在必要时启用回滚。'
- en: '**Versioning**: Manage versions of microservices and their dependencies to
    ensure that changes are tracked and can be rolled back if needed.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本管理**：管理微服务和其依赖项的版本，以确保变更可追踪，并在需要时可以回滚。'
- en: CI/CD pipelines help microservices teams deliver software changes quickly and
    reliably, reducing manual intervention and the risk of human error. They promote
    a culture of continuous improvement and allow teams to release new features and
    bug fixes more frequently.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 管道帮助微服务团队快速且可靠地交付软件变更，减少人工干预和人为错误的风险。它们促进了持续改进的文化，并允许团队更频繁地发布新功能和错误修复。
- en: '*Figure 5**.8* illustrates the process of CI/CD:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5*.8 展示了 CI/CD 的过程：'
- en: '![Figure 5.8: CI/CD (image by vectorjuice on Freepik)](img/B14980_05_08.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.8：CI/CD（图片由 Freepik 上的 vectorjuice 提供）](img/B14980_05_08.jpg)'
- en: 'Figure 5.8: CI/CD (image by vectorjuice on Freepik)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8：CI/CD（图片由 Freepik 上的 vectorjuice 提供）
- en: In summary, database integration strategies help manage data in a microservices
    architecture, ensuring consistency and coordination, while CI/CD pipelines streamline
    the development and deployment of microservices, enabling rapid and reliable software
    delivery. Both aspects are critical for the success of microservices-based applications.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，数据库集成策略有助于管理微服务架构中的数据，确保一致性和协调，而 CI/CD 管道简化了微服务的开发和部署，实现了快速且可靠的软件交付。这两个方面对于基于微服务应用程序的成功至关重要。
- en: Summary
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned a lot about services that need to discover and communicate
    with each other dynamically, load balancing and service orchestration, containerization
    and orchestration and centralized logging and monitoring, distributed tracing
    and event-driven communication, and database integration and CI/CD.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于需要动态发现和相互通信的服务、负载均衡和服务编排、容器化和编排以及集中式日志和监控、分布式跟踪和事件驱动通信，以及数据库集成和
    CI/CD 的许多内容。
- en: Building the infrastructure for microservices in Node.js involves carefully
    selecting and integrating these components and tools based on your specific requirements.
    It’s important to consider scalability, fault tolerance, observability, and ease
    of management when designing and implementing the infrastructure for your microservices
    architecture.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Node.js 中构建微服务的基础设施涉及根据您的具体需求仔细选择和集成这些组件和工具。在设计并实施微服务架构的基础设施时，考虑可扩展性、容错性、可观察性和易于管理性非常重要。
- en: The infrastructure of microservices in Node.js is a critical foundation for
    developing scalable, distributed applications. It encompasses various components
    and practices that enable the effective operation of microservices-based systems.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 中微服务的基础设施是开发可扩展、分布式应用的关键基础。它包括各种组件和实践，这些组件和实践能够使基于微服务的系统有效运行。
- en: This infrastructure is designed to handle the complexities of microservices
    architecture, ensuring they can work together cohesively, scale efficiently, and
    remain resilient in the face of failures. Node.js, with its non-blocking, event-driven
    architecture, is a popular choice for implementing microservices, making this
    infrastructure even more powerful and adaptable.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 该基础设施旨在处理微服务架构的复杂性，确保它们能够协同工作，高效扩展，并在面对失败时保持弹性。Node.js，凭借其非阻塞、事件驱动的架构，是实现微服务的热门选择，这使得该基础设施更加强大和灵活。
- en: In the next chapter, we are going to learn how to design microservices architecture
    in Node.js.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在 Node.js 中设计微服务架构。
- en: Quiz time
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: What is service discovery?
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是服务发现？
- en: What are API gateways?
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 API 网关？
- en: What is load balancing?
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是负载均衡？
- en: What is containerization?
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是容器化？
