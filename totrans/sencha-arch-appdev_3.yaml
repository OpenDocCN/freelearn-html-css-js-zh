- en: Chapter 3. Creating a Sencha Touch App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will take our first step building a Sencha Touch application
    with Sencha Architect. We will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Sencha Touch project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating models, stores, views, and controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing the project for the first time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Sencha Touch with PhoneGap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the Sencha Touch app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we implement our Sencha Touch application, let''s take a look at what
    we will build by the end of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the Sencha Touch app](img/9819OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is a simple list that lists all the contacts available on the phone. All
    the UI design will be done with Sencha Touch, and to retrieve the native contacts
    from the device we will use PhoneGap. The previous screenshot was taken from an
    iPhone with the app running. We will learn how to build and prepare the application
    to be executed on a real device later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, create a new Sencha Touch project; we can do this by selecting the **New
    Project** option from the welcome screen or from the toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the project](img/9819OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Right after the project is created, we will see the landing screen, with the
    toolbar, canvas, project inspector, config panel, and toolbox. We will save our
    project immediately. To do so, click on **Save** in the toolbox or press *Ctrl*
    + *S* (*cmd* + *S* on Mac OS). The **Save Project** screen will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will save the project as `SenchaContacts` inside the `sencha-architect`
    directory, the same directory we saved our Ext JS project to. The following screenshot
    shows the **Save Project** screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the project](img/9819OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that the project is saved, we can start implementing it. We will use the
    following development workflow: first we will implement the **Model**, then the
    **Store**, then the **View**, lastly the **Controller**, and repeat it until our
    project is finished.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is to set up the application we are going to develop throughout
    this chapter. Before we start, in the project inspector, select **Application**
    (*Step 1*), and then go to the config panel, locate the property **name**, and
    set its value to `Packt` (*Step 2*). This is the namespace of our application,
    meaning all the classes will be named `Packt + package + className`. If we open
    the code editor, the code that we will see is shown in the following screenshot
    (*Step 3*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the app](img/9819OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All these configurations will be applied on the `app.js` file, since the application
    represents the `app.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that many of the steps that we will perform throughout this
    chapter are very similar to the ones we did in the previous chapter. This is because
    Ext JS and Sencha Touch share part of the API and also because once you are used
    to Ext JS or Sencha Touch, learning the second framework is easier.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Following our development workflow, we will start with the model. On the top
    of the project inspector, click on the **+** icon and select **Model** (*Step
    1*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the model](img/9819OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the **Model** is created, select it, go to the config panel, and set the
    class name (`userClassName`) to `Contact` (*Step 2*). Then, still on the config
    panel, locate the **fields** property, click on its **+** icon and add the first
    field, which is named `id`. Continue until we have the following fields created:
    `id`, `displayName`, `phoneNumber`, `familyName`, and `givenName` (*Step 3*).
    These fields represent some of the fields that are available on the device.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the model](img/9819OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we have `givenName` and `familyName`, let's say we want to create a field
    that returns the `givenName` and `familyName` fields concatenated. For this reason
    we created the `displayName` field. So to do what we want, we need to create a
    `convert()` function for the `displayName` field. To do so, we need to select
    the `displayName` field in the project inspector (*Step 4*), locate the **convert**
    property and click on the **+** icon (*Step 5*), then, a green diamond icon will
    appear near to the left of the **convert** property. This means a function was
    created on the code editor, and it is available for editing. To go to the code
    editor, we can click on the arrow icon (*Step 6*). Then we can add the code that
    will concatenate the `givenName` and `familyName` fields (*Step 7*).
  prefs: []
  type: TYPE_NORMAL
- en: If we go back to the project inspector, the contact model should look as shown
    in the following screenshot (*Step 8*). If we look at the canvas, nothing will
    be displayed in the **Design** mode, but if we take a look at the **Code** editor,
    the `Packt.model.Contact` class will be defined. If we try to edit its code, we
    will notice that the only code available for editing is the `convert()` function
    we created for the `displayName` field (the edit icon will appear when we hover
    the mouse over the `convert()` function content). Any other change must be done
    using the config panel.
  prefs: []
  type: TYPE_NORMAL
- en: Once we save the project and take a look at the files that Sencha Architect
    has created so far, we will see that it created a file named `Contact.js` inside
    the `app/model` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to create a store. Our data is going to come from the device,
    and we will use a special proxy with PhoneGap code to load it. This means that
    we can create a store that will use an Ajax Proxy, as on the project inspector
    **+** menu we do not have the option to create an empty store (neither by creating
    the store from the toolbox). So we need to go back to the project inspector, click
    on the **+** icon again, select **Store** and then select **Json Store** as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the store](img/9819OS_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Right after we create the store, we need to give a name to it. So select the
    store on the project inspector, go to the config panel, locate the **userClassName**,
    and set its value as **Contacts** (this will be the name of the store—*Step 1*).
    Then, we also need to assign a **storeId** to it that will also have its value
    set to **Contacts** (*Step 2*). After we create the store, we will also see a
    red exclamation mark icon (*Step 3*). If we click on it (*Step 3*), we will see
    an error message saying that we need to associate a model to this store or create
    at least one field on the store (*Step 4*). As we already have a model, click
    on the **Store** in the project inspector, go to the config panel, search for
    **model** and then you can choose from the list of models we already created (*Step
    5*).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we have only created the **Contact** model. And at last, as we
    will use our own proxy (not the ones available on Sencha Touch API) we can delete
    the proxy by selecting it and right-clicking on it, then selecting the **Delete**
    option (*Step 6*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the store](img/9819OS_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also create a store with no proxy by clicking directly on the **Store**
    option (as highlighted in the next screenshot), without the need to click on one
    of the following options; **Array Store**, **Direct Store**, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the store](img/9819OS_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we saw earlier in this chapter, in the screenshot taken from an iPhone,
    a letter groups the contacts (this letter represents the first letter of the `givenName`—or
    the `familyName` if the contact does not have a `givenName`). We will add this
    configuration on the list later, but the class that will do the work of grouping
    the contacts is the store. So to do it, we need to select the **Contacts** in
    the **Stores** from the project inspector (*Step 7*), go to the toolbox, select
    the data, and then, under **Data Utilities**, we will find the **Grouper**. Double-click
    on it and a grouper will be added to the **Contacts** store. Then, select **MyGrouper**
    under the **Contacts** store, locate the **groupFn** on the config panel, and
    click on the **+** icon (*Step 8*). A green diamond icon will appear next to the
    **groupFn** function. Click on the arrow icon (*Step 9*) and the code editor will
    be opened, so we can add the grouper code (*Step 10*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the store](img/9819OS_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the contact has a `givenName`, the store will use its first letter to group;
    if not, it will use the `familyName` first letter. In case the contact does not
    have a name (it can happen), we will return `"-"`. It is very important to cover
    all the cases, because if not, the contacts will not appear in the list when we
    run this example on a real device.
  prefs: []
  type: TYPE_NORMAL
- en: Once we save the project and take a look at the files that Sencha Architect
    has created so far, we will see that it created a file named `Contacts.js` inside
    the `app/store` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the contacts proxy – PhoneGap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As our idea is to load the contacts from the device, we will use PhoneGap to
    do the native access for us. To do so, we need to create our own proxy with the
    PhoneGap code. So go to the application directory (`sencha-architect/SenchaContacts`)
    and inside the `app` folder create a new folder named `proxy`, and create a file
    named `ContactsProxy.js` as demonstrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the contacts proxy – PhoneGap](img/9819OS_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the `ContactsProxy.js` file we will add the following code (using a
    code editor of your choice—Notepad, Sublime Text, Eclipse, and so on)—unfortunately,
    this is something that we cannot do from Sencha Architect, as it is limited to
    the model, store, view and controller packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is the skeleton of our proxy. Creating custom proxies is an advanced topic
    and requires some knowledge of the API source code. So let's go step-by-step.
    First we have the definition of the class (`#1`) that follows the Sencha naming
    convention.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that `Packt` is the namespace we chose for our app, `proxy` is the name
    of the package, and `ContactsProxy` is the name of the `.js` file we created.
    Then we are extending the proxy class from Sencha Touch API (`#2`). Next we are
    creating an alias so we can use the `contactsstorage` type later when we define
    the proxy inside the contacts store (`#3`). Following the code we have the default
    `constructor` (`#4`) and then, we have the signature of functions that our proxy
    needs to have: `create()` (`#5`), `update()` (`#6`), and `destroy()` (`#7`). We
    will not implement these functions. The one we will implement is `read()`, that
    we will add to our `ContactsProxy` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Inside the method `read()`, we have a mix of Sencha and PhoneGap code. To read
    the contacts, we will use a PhoneGap function (navigate to [http://docs.phonegap.com/en/2.6.0/cordova_contacts_contacts.md.html#Contacts](http://docs.phonegap.com/en/2.6.0/cordova_contacts_contacts.md.html#Contacts)
    for more information). The `navigator.contacts.find()` function needs the `contactFields`
    to be searched (`#8`), the success function in case PhoneGap was able to read
    the contacts successfully (`#9`), an error callback (`#16`), and some options
    (`#17`).
  prefs: []
  type: TYPE_NORMAL
- en: Our biggest interest is inside the `success()` function (`#9`). First, we are
    going to iterate each contact returned by the device to PhoneGap (`#10`). We will
    extract a phone number (`#11`—the contact can have more than one phone, in this
    case we will retrieve only the first one). Then we need to create a contact model
    instance with the information we extracted from the device (`#12`). We will push
    this contact model instance into an array. Finally, we need to set the information
    (contact model instances and their totals) into the `ResultSet` so the Ext JS
    contacts store can understand the information (`#14`) and set the `operation`
    as a success and complete (`#14`). And at last, we need to inform the Ext JS callback
    function (`#15`).
  prefs: []
  type: TYPE_NORMAL
- en: Then, the contacts store will understand the information we retrieved from the
    device. The `read()` function will be called when we call the `load()` method
    from the store. We will see how to apply this proxy in the store on the controller
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the list view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next step we will create our view, which is the contacts list. There
    are two ways of creating a view. You can choose the one you like the most. The
    first one requires selecting the **Views** package on the project inspector (*Step
    1*); go to the **Toolbox** and locate the **Grid Panel** component and then double-click
    on it (*Step 2*). A new list view called `MyList` will be created under the **Views**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the list view](img/9819OS_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, after the list is created, we need to select it from the project inspector,
    locate the **userAlias**, and set its value to **contactsList** and also set the
    **userClassName** to **contactsList** (*Step 3*). Still on the config panel, we
    also need to set a **store** to the list (*Step 4*).
  prefs: []
  type: TYPE_NORMAL
- en: 'The second way of creating the view is to select the component from the **Toolbox**,
    and drag-and-drop it inside the **Views** package (or it can be the **Views**,
    **Stores**, **Models**, or **Controllers** packages as well):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the list view](img/9819OS_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to change the **itemTpl**. The **itemTpl** is the template
    of what information from the **Model** we will display as an item of the **ContactsList**.
    In this case, we want to display the `givenName` in bold and the `familyName`
    in a regular font as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the list view](img/9819OS_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we double-click on **itemTpl** in the project inspector, the code editor
    will be displayed, and then we can edit the **itemTpl** as shown in the previous
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make our list prettier, let''s add a toolbar to it. Select the **ContactsList**
    from the project inspector, then go to the toolbox and locate the **Toolbar**
    component; double-click on it (*Step 5*). Then, select the **Toolbar** from the
    project inspector, go to the config panel, locate the **title**, and set its value
    to `My Contacts` (*Step 6*). Another way of setting the toolbar''s title is using
    the design view and changing the title by double clicking on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the list view](img/9819OS_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our last step is to add the index bar and group the list. So first, to add
    the index bar, select the **ContactsList** from the project inspector, go to **Toolbox**
    | **Views**, and locate the **List Index Bar** component (*Step 8*), which is
    the only thing we need to do. If we go to the code editor, we will see that Sencha
    Architect added the property `indexBar: true`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the list view](img/9819OS_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And finally, select the **ContactsList** from the project inspector again,
    go to the config panel, locate the **grouped** property checkbox, and check it.
    This will add the property `grouped: true` in the code editor.'
  prefs: []
  type: TYPE_NORMAL
- en: Once we save the project and take a look at the files that Sencha Architect
    has created so far, we will see that it created a file named `ContactsList.js`
    inside the `app/view` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So to create the controller, let''s go back to the top of the project inspector
    and click on the **+** icon once again and select the **Controller** option (*Step
    1*). Then, with the **Controller** selected, go to the config panel, and change
    its **userClassName** to **Contacts** (*Step 2*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the controller](img/9819OS_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Still on the config panel, locate the **models**, **stores**, and **views**
    properties (*Step 3*). With these properties, we will declare the models, stores
    and views that this controller will care about. Once you select **Model**, **Store**,
    or **View**, Sencha Architect will display a window with a question as shown in
    the following screenshot. Click on **Remove**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the controller](img/9819OS_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is because on the application (`app.js`), as we create models, stores,
    and views, they will be declared on the **models**, **views**, and **stores**
    properties of the application. With this step, we are transferring the responsibility
    to the controller, and there is no need to keep their declaration on the `app.js`
    application and also on the controller (which is what will happen if we click
    on the **Keep** button).
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to add a new **Controller Action** to the contacts controller.
    To do so, select the contacts controller on the project inspector, go to the toolbox,
    locate the **Controller** **Action**, and double-click on it (or drag-and-drop)
    as demonstrated by *Step 4*. Once the **Controller** **Action** is listed under
    the contacts controller, select it, go to the config panel, and choose **ContactsList**
    as **targetType** (*Step 5*); then, on the **EventBinding**, select the **name**
    of the event we want to listen to, which is **show**. If you would like, you can
    change the **controlQuery** to be more specific, as well as the name of the **BasicFunction**
    by changing **fn**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the controller](img/9819OS_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then on the code editor, we will add the logic we want to take place, when the
    **ContactsList** is displayed, which is to load its **Store**, so PhoneGap can
    load the contacts from the device. But what happens is that the contacts store
    does not have a proxy set, so we can set `contactsstorage`, which is the proxy
    we created using the `setProxy()` method. This is the easiest way we can do it.
    The other way would be creating an override of the contacts store, but this is
    an advanced topic that we will learn in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Next on line `26` of the `onListShow()` method we have the `document.addEventListener('deviceready')`
    declaration. This is a PhoneGap code that will be fired when the device is ready
    to be used. Then, as a function we load the **ContactsList** store. As the proxy
    we created uses PhoneGap code, we need to make sure we will call it only when
    the device is ready to be used.
  prefs: []
  type: TYPE_NORMAL
- en: Once we save the project and take a look at the files that Sencha Architect
    has created so far, we will see that it created a file named `Contacts.js` inside
    the `app/controller` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can click on the preview icon again in the toolbar, and now we will see
    the final version of our project, but first we need to set the **URL Prefix:**
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the controller](img/9819OS_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And then, by clicking on the **Preview** button, the browser will be opened,
    but it will not display anything, as the browser is not a device. To display any
    contacts, we need to use an emulator or test the app on a real device; we will
    learn about this later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the controller](img/9819OS_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding PhoneGap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we already coded everything we need to do, the only thing left to do is to
    add the `PhoneGap js` file into our Sencha Architect project. To do so, select
    **Resources** on the project inspector, go to the toolbox, select **Resources**,
    and then double-click on **JS** **Resource**. Then, on the config panel, give
    an **id** to it (**phonegap**) and set the **URL** as the **phonegap** file (in
    this case we are using the **cordova-2.5.0.js** that we can get from [http://phonegap.com](http://phonegap.com)).
    And then we are done!
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding PhoneGap](img/9819OS_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The final project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have finished implementing our first Sencha Touch project with Sencha
    Architect, let''s take a look at the code generated for us as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The final project structure](img/9819OS_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that Sencha Architect created all the files for us (with the exception
    of proxy).
  prefs: []
  type: TYPE_NORMAL
- en: Similar to an Ext JS project, it is very important to bring to our attention
    that we cannot modify the files on a code editor. In case we do modify any files
    and try to open in Sencha Architect again, all changes will be lost because Sencha
    Architect will override them. So in case you decide you want to change any file
    on a code editor, it is important to know that you will not be able to use Sencha
    Architect again (and if you do, you will lose the modifications).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we learned how to implement our first Sencha Touch project using
    Sencha Architect. We learned how to create a new Sencha Touch project, and how
    to set up the `app.js` file using the application. We learned how to create the
    model, store, view, and controller, and we also covered how to integrate our Sencha
    Touch project with PhoneGap, which is an advanced topic.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn some tips and tricks, such as multilingual
    apps, create overrides, exporting and importing a project, and much more.
  prefs: []
  type: TYPE_NORMAL
