["```js\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(cacheName)\n      .then(function(cache) {\n        return cache.addAll([\n          'index.html',\n          'index.js'\n        ]);\n      })\n      .then(function() {\n        return self.skipWaiting();\n      })\n  );\n});\n```", "```js\nnavigator.serviceWorker.getRegistration().then(function(reg) {\n     if (reg && reg.active) {\n       displayImages();\n     }\n   });\n```", "```js\nnavigator.serviceWorker.oncontrollerchange = function() {\n  if (navigator.serviceWorker.controller) {\n    printInstall('INSTALL: Completed');\n    displayImages();\n  }\n};\n```", "```js\ndocument.querySelector('#uninstall').onclick = function() {      \n  â€¦\n}\n```", "```js\nimportScripts('./vendor/zip.js');\nimportScripts('./vendor/ArrayBufferReader.js');\nimportScripts('./vendor/deflate.js');\nimportScripts('./vendor/inflate.js');\nimportScripts('./helper.js');\nimportScripts('./cacheProvider.js');\n```", "```js\nself.oninstall = function(event) {\n  event.waitUntil(\n    fetch(zipURL)\n      .then(function(res) {\n        return res.arrayBuffer();\n      })\n      .then(getZipFileReader)\n      .then(cacheFileContents)\n      .then(self.skipWaiting.bind(self))\n  );\n};\n```", "```js\nself.onactivate = function(evt) {\n  evt.waitUntil(self.clients.claim());\n};\n```", "```js\nself.onfetch = function(evt) {\n  evt.respondWith(openCache().then(function(cache) {\n    var request = evt.request;\n\n    return cache.match(request).then(function(res) {\n      return res || fetch(request);\n    });\n  }));\n  };\n```", "```js\nfunction cacheEntry(entry) {\n  if (entry.directory) {\n    return Promise.resolve();\n  }\n```", "```js\nreturn new Promise(function(fulfill, reject) {\n    var blobWriter = new zip.BlobWriter();\n\n    entry.getData(blobWriter, function(data) {\n      return openCache().then(function(cache) {\n        var fileLocation = getFileLocation(entry.filename),\n          response = new Response(data, { headers: {\n```", "```js\n  response = new Response(data, { headers: {\n            'Content-Type': getContentType(entry.filename)\n          } });\n```", "```js\nif (entry.filename === ROOT) {\n          cache.put(getFileLocation(), response.clone());\n        }\n\n        return cache.put(fileLocation, response);\n      }).then(fulfill, reject);\n```", "```js\nfunction getZipFileReader(data) {\n  return new Promise(function(fulfill, reject) {\n    var arrayBufferReader = new zip.ArrayBufferReader(data);\n    zip.createReader(arrayBufferReader, fulfill, reject);\n  });\n}\n```", "```js\nfunction getContentType(filename) {\n  var tokens = filename.split('.');\n  var extension = tokens[tokens.length - 1];\n  return contentTypes[extension] || 'text/plain';\n}\n```", "```js\n    npm install\n    ```", "```js\nself.oninstall = function(evt) {\n  evt.waitUntil(self.skipWaiting());\n};\n\nself.onactivate = function(evt) {\n  evt.waitUntil(self.clients.claim());\n};\n```", "```js\nfunction isResource(req) {\n  return req.url.match(/\\/images\\/.*$/) && req.method === 'GET';\n}\n```", "```js\nfunction fetchContentFromBestServer(req) {\n  var session = req.url.match(/\\?session=([^&]*)/)[1];\n  return getContentServerLoads(session)\n    .then(selectContentServer)\n    .then(function(serverUrl) {\n      var resourcePath = req.url.match(/\\/images\\/[^?]*/)[0],\n        serverReq = new Request(serverUrl + resourcePath);\n\n      return fetch(serverReq);\n    });\n}\n```", "```js\nfunction getContentServerLoads(session) {\n  return fetch(baseURL + '/server-loads?session=' + session).then(function(res) {\n    return res.json();\n  });\n}\n```", "```js\nnavigator.serviceWorker.ready.then(displayUI);\n\nfunction displayUI() {\n  getServerLoads().then(function(loads) {\n    serverLoads.forEach(function(input, index) {\n      input.value = loads[index];\n      input.disabled = false;\n    });\n    document.querySelector('#image-selection').disabled = false;\n  });\n}\n```", "```js\ndocument.querySelector('#load-configuration').onsubmit = function(event) {\n  event.preventDefault();\n\n  var loads = serverLoads.map(function(input) {\n    return parseInt(input.value, 10);\n  });\n\n  fetch(setSession(baseURL + '/server-loads'), {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(loads)\n  }).then(function(res) {\n    return res.json();\n  }).then(function(result) {\n    document.querySelector('#server-label').textContent = result;\n  });\n};\n```", "```js\ndocument.querySelector('#image-selection').onchange = function() {\n  var imgUrl = document.querySelector('select').value,\n    img = document.querySelector('img');\n  if (imgUrl) {\n    img.src = setSession(imgUrl) + '&_b=' + Date.now();\n```", "```js\nfunction getSession() {\n  var session = localStorage.getItem('session');\n  if (!session) {\n    session = '' + Date.now() + '-' + Math.random();\n    localStorage.setItem('session', session);\n  }\n  return session;\n}\n```", "```js\nvar https = require('https');\nvar fs = require('fs');\n\nvar privateKey = fs.readFileSync('/private/etc/apache2/localhost-key.pem', 'utf8');\nvar certificate = fs.readFileSync('/private/etc/apache2/localhost-cert.pem', 'utf8');\nvar credentials = { key: privateKey, cert: certificate };\nvar httpsServer = https.createServer(credentials, app);\n```", "```js\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Methods\", \"POST, GET, PUT, DELETE, OPTIONS\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n  next();\n});\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Redirect request</title>\n      <link rel=\"stylesheet\" href=\"style.css\">\n    </head>\n    <body>\n      <section id=\"registration-status\">\n        <p>Registration status: <strong id=\"status\"></strong></p>\n        <input type=\"button\" id=\"resetButton\" value=\"Reset\" />\n      </section>\n      <section>\n        <h1>Redirect</h1>\n        <p>Relative URLs should redirect to <strong>index.html</strong> if it exists.</p>\n        <p><a href=\"test\">Click</a></p>\n      </section>\n      <script src=\"img/index.js\"></script>\n    </body>\n    </html>\n    ```", "```js\n    * {\n      -webkit-box-sizing: border-box;\n      -moz-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n\n    body {\n      margin: 0 auto;\n      text-align: center;\n      font-family: sans-serif;\n    }\n\n    main {\n      max-width: 350px;\n      border: 1px solid #4CAF50;\n      padding: 20px;\n      border-radius: 5px;\n      width: 350px;\n      margin: 20px auto;\n    }\n\n    h1 {\n      color: #4CAF50;\n    }\n\n    img {\n      padding: 20px 0;\n      max-width: 400px;\n    }\n\n    .hidden {\n      display: none;\n    }\n\n    #registration-status {\n      background-color: #FFE454;\n      padding: 10px;\n    }\n    ```", "```js\n    'use strict';\n\n    var scope = {\n      scope: './'\n    };\n\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.register(\n        'service-worker.js',\n        scope\n      ).then( function(serviceWorker) {\n        printStatus('successful');\n        if (navigator.serviceWorker.controller) {\n          showImages();\n        } else {\n          document.querySelector('#message').textContent = 'Reload the page for images to be loaded from the service worker cache';\n        }\n      }).catch(function(error) {\n        printStatus(error);\n      });\n    } else {\n      printStatus('unavailable');\n    }\n\n    function printStatus(status) {\n      document.querySelector('#status').innerHTML = status;\n    }\n\n    document.querySelector('#resetButton').addEventListener('click',\n      function() {\n        navigator.serviceWorker.getRegistration().then(function(registration) {\n          registration.unregister();\n          window.location.reload();\n        });\n      }\n    );\n    ```", "```js\n    'use strict';\n\n    var cacheName= 'redirect-request';\n\n    self.addEventListener('activate', function() {\n      clients.claim();\n    });\n\n    self.addEventListener('fetch', function(evt) {\n      console.log(evt.request);\n      evt.respondWith(\n        fetch(evt.request).catch(function() {\n          return new Response(\"FETCH: failed\");\n        })\n      );\n    });\n    ```", "```js\nself.addEventListener('fetch', function(evt) {\n  console.log(evt.request);\n  evt.respondWith(\n    fetch(evt.request).catch(function() {\n      return new Response(\"FETCH: failed\");\n    })\n  );\n});\n```", "```js\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <title>Request headers</title>\n      <link rel=\"stylesheet\" href=\"style.css\">\n    </head>\n    <body>\n      <section id=\"registration-status\">\n        <p>Registration status: <strong id=\"status\"></strong></p>\n        <input type=\"button\" id=\"resetButton\" value=\"Reset\" />\n      </section>\n      <script src=\"img/index.js\"></script>\n      <section>\n        <img src=\"img/adobe-logo.png\" alt=\"logo\">\n      </section>\n    </body>\n    </html>\n    ```", "```js\n    'use strict';\n\n    self.addEventListener('fetch', function(evt) {\n      var request = evt.request;\n\n      console.log(\n        \"FETCH: \",\n        evt.request.url,\n        \"HEADERS: \",\n        new Set(request.headers)\n      );\n\n      evt.respondWith(fetch(request));\n    });\n    ```", "```js\n    * {\n      -webkit-box-sizing: border-box;\n      -moz-box-sizing: border-box;\n      box-sizing: border-box;\n    }\n\n    body {\n      margin: 0 auto;\n      text-align: center;\n      font-family: sans-serif;\n    }\n\n    main {\n      max-width: 350px;\n      border: 1px solid #4CAF50;\n      padding: 20px;\n      border-radius: 5px;\n      width: 350px;\n      margin: 20px auto;\n    }\n\n    h1 {\n      color: #4CAF50;\n    }\n\n    img {\n      padding: 20px 0;\n      max-width: 200px;\n    }\n\n    .hidden {\n      display: none;\n    }\n\n    #registration-status {\n      background-color: #FFE454;\n      padding: 10px;\n    }\n    ```", "```js\ncaches.open(cacheName)\n      .then(function(cache) {\n        return cache.addAll([\n          'index.html'\n        ]);\n      })\n```", "```js\n<section >\n    <img src=\"img/adobe-logo.png\" alt=\"logo\">\n</section>\n```", "```js\nroot = (function() {\n    var tkns = (self.location + '').split('/');\n    tkns[tkns.length - 1] = '';\n    return tkns.join('/');\n  })();\n```", "```js\nworker.get(root + 'api/todos', function(request, response) {\n  return new Response(JSON.stringify(todos.filter(function(item) {\n    return item !== null;\n  })));\n});\n```", "```js\nworker.delete(root + 'api/todos/:id', function(request, response) {\n  var id = parseInt(request.parameters.id, 10) - 1;\n  if (!todos[id].isSticky) {\n    todos[id] = null;\n  }\n  return new Response({ status: 204 });\n});\n```", "```js\nworker.post(root + 'api/todos', function(request, response) {\n  return request.json().then(function(quote) {\n    quote.id = todos.length + 1;\n    todos.push(quote);\n    return new Response(JSON.stringify(quote), { status: 201 });\n  });\n});\n```", "```js\n<section >\n    <img src=\"img/adobe-logo.png\" alt=\"logo\">\n</section>\n```", "```js\nimportScripts('./vendor/ServiceWorkerWare.js');\nimportScripts('./worker.js');\n\nvar todos = [\n  {\n    text: 'Buy Milk',\n    priority: 'high'\n  },\n  {\n    text: 'Refill Car',\n    priority: 'medium'\n  },\n  {\n    text: 'Return loaned book',\n    priority: 'low'\n  }\n].map(function(todo, index) {\n  todo.id = index + 1;\n  todo.isSticky = true;\n\n  return todo;\n});\n```", "```js\nnavigator.serviceWorker.oncontrollerchange = function() {\n    this.controller.onstatechange = function() {\n      if (this.state === 'activated') {\n        loadTodos();\n      }\n    };\n};\n```", "```js\ndocument.getElementById('add-form').onsubmit = function(event) {\n```", "```js\ntodoPriority = document.getElementById('priority').value.trim() ||\n                    'Not specified';\n```", "```js\nfetch(endPoint, {\n    method: 'POST',\n    body: JSON.stringify(todo),\n    headers: headers\n  })\n```", "```js\n<section id=\"actions\">\n      <h1>Environment Switch</h1>\n      <p>\n        <a href=\"#production\">Production</a>&nbsp;|&nbsp;\n        <a href=\"#development\">Development</a>\n      </p>\n      <p>\n        <button id=\"alert\">Alert</button>\n        <button id=\"confirm\">Confirm</button>\n        <button id=\"prompt\">Prompt</button>\n      </p>\n    </section>\n```", "```js\nif ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register(\n    'development-sw.js',\n    scope\n  )\n```", "```js\nwindow.onhashchange = function() {\n  var newInjector = window.location.hash.substr(1) || \n  'production',\n    lastInjector = getLastInjector();\n\n  if (newInjector !== lastInjector) {\n    navigator.serviceWorker.oncontrollerchange = function() {\n      this.controller.onstatechange = function() {\n        if (this.state === 'activated') {\n          window.location.reload();\n        }\n      };\n    };\n    registerNewInjector(newInjector);\n  }\n};\n```", "```js\nwindow.onhashchange();\n```", "```js\nfunction registerNewInjector(newInjector) {\n  var newInjectorUrl = newInjector + '-sw.js';\n  return navigator.serviceWorker.register(newInjectorUrl);\n}\n```", "```js\n    function getLastInjector() {\n        var newInjector,\n        ctr = navigator.serviceWorker.controller;\n\n        if (ctr) {\n            newInjector = ctr.scriptURL.endsWith('production-sw.js')\n                 ? 'production' : 'development';\n        }\n        return newInjector;\n    }\n```", "```js\nfunction onInstall(evt) {\n  evt.waitUntil(self.skipWaiting());\n}\n\nfunction onActivate(evt) {\n  evt.waitUntil(self.clients.claim());\n}\n```", "```js\nfunction onFetch(evt) {\n  var abstractRes = evt.request.url,\n    actualRes = getActualRes(abstractRes);\n\n  evt.respondWith(fetch(actualRes || abstractRes));\n}\n\nfunction getActualRes(abstractRes) {\n  var actualRes,\n    keys = Object.keys(mapping);\n\n  for (var i = 0, len = keys.length; i < len; i++) {\n    var key = keys[i];\n\n    if (abstractRes.endsWith(key)) {\n      actualRes = mapping[key];\n      break;\n    }\n  }\n\n  return actualRes;\n}\n```", "```js\n(function(window) {\n  window.dialogs = {\n    alert: function(msg) {\n      console.log('alert:', msg);\n    },\n\n    confirm: function(msg) {\n      console.log('confirm:', msg);\n      return true;\n    },\n\n    prompt: function(msg) {\n      console.log('prompt:', msg);\n      return 'development';\n    }\n  };\n})(window);\n```", "```js\n(function(window) {\n  window.dialogs = {\n    alert: function(msg) {\n      window.alert(msg);\n    },\n\n    confirm: function(msg) {\n      return window.confirm(msg);\n    },\n\n    prompt: function(msg) {\n      return window.prompt(msg);\n    }\n  };\n})(window);\n```", "```js\nimportScripts('injector.js');\nimportScripts('default-mapping.js');\n\nself.onfetch = onFetch;\nself.oninstall = onInstall;\nself.onactivate = onActivate;\n```", "```js\nimportScripts('injector.js');\nimportScripts('default-mapping.js');\n\nmapping['utils/dialogs'] = 'fake-dialogs.js';\n\nself.onfetch = onFetch;\nself.oninstall = onInstall;\nself.onactivate = onActivate;\n```", "```js\nfunction fetchServiceWorkerUpdate() {\n  var img = document.getElementById('picture');\n  img.src = 'picture.jpg?' + Date.now();\n\n  fetch('./version').then(function(res) {\n    return res.text();\n  }).then(function(text) {\n    debug(text, 'version');\n  });\n}\n```", "```js\nif (navigator.serviceWorker.controller) {\n  var url = navigator.serviceWorker.controller.scriptURL;\n  console.log('serviceWorker.controller', url);\n  debug(url, 'onload');\n  fetchServiceWorkerUpdate();\n} else {\n  navigator.serviceWorker.register('service-worker.js', {\n    scope: './'\n  }).then(function(registration) {\n    debug('REFRESH for the Service Worker to control this client', 'onload');\n    debug(registration.scope, 'register');\n  });\n}\n```", "```js\n    }).then(function() {\n      console.log('SERVICE_WORKER: Skip waiting on install');\n      return self.skipWaiting();\n    })\n```", "```js\nself.addEventListener('activate', function(evt) {\n  self.clients.matchAll({\n    includeUncontrolled: true\n  }).then(function(clientList) {\n    var urls = clientList.map(function(client) {\n      return client.url;\n    });\n    console.log('SERVICE_WORKER:  Matching clients:', urls.join(', '));\n  });\n\n  evt.waitUntil(\n    caches.keys().then(function(cacheNames) {\n      return Promise.all(\n        cacheNames.map(function(cacheName) {\n          if (cacheName !== VERSION) {\n            console.log('SERVICE_WORKER: Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    }).then(function() {\n      console.log('SERVICE_WORKER: Claiming clients for version', VERSION);\n      return self.clients.claim();\n    })\n  );\n});\n```", "```js\n<section id=\"actions\">\n    <button id=\"valid-call\" disabled>Valid Request</button>\n    <button id=\"invalid-call\" disabled>Invalid Request</button>\n    <div id=\"output\"></div>\n</section>\n```", "```js\nfunction enableRequestLinks() {\n  var validButton = document.querySelector('#valid-call');\n  validButton.addEventListener('click', function() {\n    fetchApiRequest('https://raw.githubusercontent.com/szaranger/szaranger.github.io/master/service-workers/05/09/brands.json');\n  });\n  validButton.disabled = false;\n\n  var invalidButton = document.querySelector('#invalid-call');\n  invalidButton.addEventListener('click', function() {\n    fetchApiRequest('https://raw.githubusercontent.com/szaranger/szaranger.github.io/master/service-workers/05/09/blah.json');\n  });\n  invalidButton.disabled = false;\n}\n```", "```js\n{\n    \"brands\": [\n        {\n          \"name\": \"Apple\"\n        },\n        {\n          \"name\": \"Google\"\n        },\n        {\n          \"name\": \"Facebook\"\n        }\n    ]\n}\n```", "```js\nfunction fetchApiRequest(url) {\n  fetch(url).then(function(res) {\n    return res.json();\n  }).then(function(res) {\n    var brands = res.brands.map(function(brand) {\n      return '<li>' + brand.name + '</li>';\n    }).join('');\n\n    brands = '<ol>' + brands+ '</ol>';\n\n    document.querySelector('#output').innerHTML = '<h1>Brands</h1>' + brands;\n  });\n}\n```", "```js\n    self.addEventListener('install', function(evt) {\n      evt.waitUntil(self.skipWaiting());\n    });\n\n   self.addEventListener('activate', function(evt) {\n      evt.waitUntil(self.clients.claim());\n   });\n```", "```js\nself.addEventListener('fetch', function(evt) {\n    evt.respondWith(\n      fetch(evt.request).then(function(res) {\n        if (!res.ok) {\n          throw Error('response status ' + res.status);\n        }\n\n        return res;\n      }).catch(function(err) {\n        console.warn('RESPONSE: Error in constructing a fallback response - ', err);\n\n        var fallbackRes = {\n          brands: [\n            {\n              name: 'Fallback Brand 1'\n            },\n            {\n              name: 'Fallback Brand 1'\n            },\n            {\n              name: 'Fallback Brand 1'\n            }\n          ]\n        };\n\n        return new Response(JSON.stringify(fallbackRes), {\n          headers: {'Content-Type': 'application/json'}\n        });\n      })\n    );\n});\n```", "```js\n<section id=\"todo-area\">\n    <ol>\n      <li>Add/delete some todos.</li>\n      <li>Go offline (disconnect Internet).</li>\n      <li>Continue to add some todos. <br/>(They are now in the queue, so the delete button is not visible now)</li>\n      <li>Reconnect internet. The todos will automatically synchronize.</li>\n    </ol>\n    <form id=\"add-form\">\n      <input type=\"text\" id=\"new-todo\" placeholder=\"Add a task here\"/>\n      <input type=\"text\" id=\"priority\" placeholder=\"Priority\"/>\n      <input type=\"submit\" value=\"Add\" />\n    </form>\n    <table id=\"todos\">\n    </table>\n  </section>\n```", "```js\nimportScripts('./vendor/ServiceWorkerWare.js');\nimportScripts('./vendor/localforage.js');\n```", "```js\nvar root = (function() {\n  var tokens = (self.location + '').split('/');\n  tokens[tokens.length - 1] = '';\n  return tokens.join('/');\n})();\n```", "```js\nvar worker = new ServiceWorkerWare();\n```", "```js\n    function tryOrFallback(fakeResponse) { \n      return function(req, res) {\n        if (!navigator.onLine) {\n          console.log('No network availability, enqueuing');\n          return enqueue(req).then(function() {\n        return fakeResponse.clone();\n      });\n    }\n```"]