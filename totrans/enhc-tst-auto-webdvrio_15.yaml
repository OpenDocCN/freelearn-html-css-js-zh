- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: The Sentient Cape – Running Tests in a CI/CD Pipeline with Jenkins and LambdaTest
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 感知斗篷——使用 Jenkins 和 LambdaTest 在 CI/CD 管道中运行测试
- en: Have you ever wondered how some superheroes manage to be courtroom lawyers by
    day and crime fighters by night? When do they catch a wink of sleep?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾好奇一些超级英雄是如何白天成为法庭律师，晚上成为犯罪斗士的？他们何时才能小憩片刻？
- en: In this final chapter, we will get our WebdriverIO scripts to execute by scheduling
    test executions. This can be accomplished by using an execution pipeline in a
    continuous execution environment to run our jobs that run in a virtualized cloud-based
    environment rather than our local **operating system** (**OS**). Think of this
    as an accessory that seems to have a mind of its own – an ever-vigilant silent
    assistant whose sole purpose is to help out by taking time-consuming tasks off
    your plate, often while you sleep. This is where we’ll cover Jenkins and LambdaTest
    **continuous integration** (**CI**) with cross-OS usage.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后，我们将通过安排测试执行来使我们的 WebdriverIO 脚本得以执行。这可以通过在持续执行环境中使用执行管道来运行我们的作业来实现，这些作业在虚拟化的云环境中运行，而不是在我们的本地**操作系统**（**OS**）中运行。想象一下，这是一个似乎有自己的思想的配件——一个永远警觉的沉默助手，其唯一目的是通过从你的工作中移除耗时任务来帮助你，通常在你睡觉的时候。这就是我们将介绍
    Jenkins 和 LambdaTest **持续集成**（**CI**）以及跨操作系统使用的地方。
- en: 'Before we start, let’s recall what was noted back in [*Chapter 1*](B19395_01.xhtml#_idTextAnchor014)
    – automation requires more than average computing resources. Virtualization requires
    even more. We used two machines to write code in this book: a Windows 11 system
    – that is, a **Micro-Star International** (**MSI**) Raider GE76 12UE gaming machine
    purpose-built with 2 TB of SSD drive space and 64 GB of RAM. It has a 12th-generation
    Intel i9-12900H Core CPU with a 2.90 GHz base speed. The CPU is equipped with
    14 cores and supports 20 threads. We also used two Apple MacBook Pros with M1
    chips with a 1TB hard drive using Parallels to virtualize a Windows OS.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，让我们回顾一下在 [*第一章*](B19395_01.xhtml#_idTextAnchor014) 中提到的内容——自动化需要比平均计算资源更多。虚拟化需要更多。我们在这本书中使用了两个机器来编写代码：一个
    Windows 11 系统——即一个**微星国际**（**MSI**）雷神 GE76 12UE 游戏机，专门配备 2 TB 的 SSD 硬盘空间和 64 GB
    的 RAM。它配备了 12 代英特尔 i9-12900H 核心CPU，基速为 2.90 GHz。CPU 配备了 14 个核心，支持 20 个线程。我们还使用了两个配备
    M1 芯片的 Apple MacBook Pro，使用 Parallels 虚拟化了一个 Windows 操作系统，硬盘容量为 1TB。
- en: Quick tip – how to profile your PC
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 快速提示——如何对你的 PC 进行剖析
- en: You can’t be a good detective without a tool that gives insight into your system
    in one convenient location. The profiler we have used for over 15 years in Windows
    is Belarc Advisor Personal Edition.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 没有一个工具能在一个方便的位置给你系统洞察力，你不可能成为一个好的侦探。我们在 Windows 上使用了超过 15 年的剖析器是 Belarc Advisor
    个人版。
- en: We did this just to be sure there was little chance our resources would run
    low, causing random transient issues that might cause false positives. If your
    RAM goes below 15% availability, you will most likely experience issues. If your
    Windows machine has a red dot indicating an upgrade is required, give it the priority
    it deserves.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做只是为了确保资源耗尽的可能性很小，从而避免随机瞬态问题，这些问题可能会导致假阳性。如果你的 RAM 可用性低于 15%，你很可能会遇到问题。如果你的
    Windows 机器有一个表示需要升级的红点，请给它应有的优先级。
- en: 'The following main topics will be covered in this chapter:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要主题：
- en: What are Jenkins and Slack
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 Jenkins 和 Slack
- en: Installing Jenkins
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Jenkins
- en: Creating a WebdriverIO project with Jenkins
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Jenkins 创建 WebdriverIO 项目
- en: Reporting Slack from Jenkins
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Jenkins 报告 Slack
- en: On-demand and scheduled suite runs
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按需和计划套件运行
- en: Types of debugging runs with Jenkins
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 上的调试运行类型
- en: CI/CD pipeline
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI/CD 管道
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To complete this chapter, you must meet the following technical requirements:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章，你必须满足以下技术要求：
- en: Install and configure Jenkins
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置 Jenkins
- en: Configure Slack to receive messages
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Slack 以接收消息
- en: Modify the `wdio.config.ts` file
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改 `wdio.config.ts` 文件
- en: Create a Jenkins job run an individual test and report to Slack
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 Jenkins 作业运行单个测试并向 Slack 报告
- en: Organize tests into categories
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将测试组织到类别中
- en: Create a Jenkins job to run each category
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 Jenkins 作业来运行每个类别
- en: Organize tests into Sanity, Smoke, and Regression suites
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将测试组织到 Sanity、Smoke 和 Regression 套件中
- en: Create a Jenkins job to run each suite
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 Jenkins 作业来运行每个套件
- en: Set up and configure the jobs to run nightly
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置和配置作业以每晚运行
- en: Manual testers can run a parameterized job on demand
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动测试人员可以按需运行参数化作业
- en: All the test examples can be found in this book’s GitHub repository at [https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO](https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试示例都可以在本书的 GitHub 仓库中找到，地址为 [https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO](https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO)。
- en: What are Jenkins and Slack?
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Jenkins 和 Slack？
- en: In the realm of test automation, particularly when working with frameworks such
    as WebdriverIO, Jenkins and Slack hold a significant place due to their functionalities,
    which streamline and enhance the test deployment process. They can be configured
    to send update messages to a Slack channel when the test run has finished. Jenkins
    can schedule test suite runs or they can be launched on demand by any team member.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试自动化的领域中，尤其是在使用 WebdriverIO 等框架时，Jenkins 和 Slack 由于其功能而占据重要位置，这些功能简化并增强了测试部署过程。它们可以被配置为在测试运行完成后向
    Slack 频道发送更新消息。Jenkins 可以安排测试套件的运行，或者任何团队成员都可以按需启动。
- en: We will begin this final chapter by preparing for a Jenkins installation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以此章的最终部分开始，为 Jenkins 安装做准备。
- en: Installing OpenJDK for Jenkins
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Jenkins 安装 OpenJDK
- en: Before installing Jenkins, we need to ensure we have the correct version of
    the Java Development Kit. OpenJDK version 17 should be used and the latest version
    is recommended. The Java 17 SDK can be downloaded from [https://www.oracle.com/java/technologies/downloads/#java17](https://www.oracle.com/java/technologies/downloads/#java17).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装 Jenkins 之前，我们需要确保我们拥有正确的 Java 开发工具包版本。应使用 OpenJDK 版本 17，并建议使用最新版本。Java 17
    SDK 可以从 [https://www.oracle.com/java/technologies/downloads/#java17](https://www.oracle.com/java/technologies/downloads/#java17)
    下载。
- en: 'The easiest way to install Java 17 on Windows is to download and execute the
    MSI file and save it to the default path under the `Program Files` folder. Copy
    the path and add it to the `JAVA_HOME` environmental system variable’s path:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Java 17 最简单的方法是下载并执行 MSI 文件，并将其保存到 `Program Files` 文件夹下的默认路径。复制路径并将其添加到
    `JAVA_HOME` 环境系统变量路径中：
- en: '![Figure 15.1 – Adding the path to the system variables in Windows](img/B19395_15_1.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.1 – 在 Windows 系统变量中添加路径](img/B19395_15_1.jpg)'
- en: Figure 15.1 – Adding the path to the system variables in Windows
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1 – 在 Windows 系统变量中添加路径
- en: 'Then, add `%JAVA_HOME%/bin` to the `Path` variable:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将 `%JAVA_HOME%/bin` 添加到 `Path` 变量中：
- en: '![Figure 15.2 – Adding the JAVA_HOME\bin to the Windows Path variable](img/B19395_15_2.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.2 – 将 JAVA_HOME\bin 添加到 Windows 路径变量](img/B19395_15_2.jpg)'
- en: Figure 15.2 – Adding the JAVA_HOME\bin to the Windows Path variable
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.2 – 将 JAVA_HOME\bin 添加到 Windows 路径变量
- en: Next, we must confirm Java is installed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须确认 Java 已安装。
- en: 'From the command prompt, type the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令提示符，输入以下内容：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will see the following output:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![Figure 15.3 – Verifying that version 17 of Java has been installed](img/B19395_15_3.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.3 – 验证已安装 Java 版本 17](img/B19395_15_3.jpg)'
- en: Figure 15.3 – Verifying that version 17 of Java has been installed
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.3 – 验证已安装 Java 版本 17
- en: Now, we can proceed to install Jenkins.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开始安装 Jenkins。
- en: Installing Jenkins as a standalone application
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Jenkins 作为独立应用程序安装
- en: '*IMPORTANT*: Jenkins will provide a temporary password for an admin account.
    Save this information as we will need it after the installation has been finalized.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*重要提示*：Jenkins 将为管理员账户提供一个临时密码。在安装完成后，我们需要保存此信息。'
- en: Installing Jenkins
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Jenkins
- en: Installing Jenkins is fairly straightforward. Download the latest version of
    Jenkins for your Mac, Windows, or Linux OS from [https://www.jenkins.io/download/](https://www.jenkins.io/download/)
    and use the default path for the installation.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Jenkins 相对直接。从 [https://www.jenkins.io/download/](https://www.jenkins.io/download/)
    下载适用于您的 Mac、Windows 或 Linux 操作系统的最新版本的 Jenkins，并使用默认路径进行安装。
- en: 'Once it’s been downloaded, drag the `jenkins.war` file to the desktop. From
    the command prompt, navigate to the desktop and type the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下载完成后，将 `jenkins.war` 文件拖到桌面。从命令提示符，导航到桌面并输入以下内容：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will see the following output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![Figure 15.4 – Select LocalSystem for this example. In the real world, the
    IT DevOps team would install an admin domain user account for security](img/B19395_15_4.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.4 – 在此示例中选择 LocalSystem。在现实世界中，IT DevOps 团队会为安全起见安装管理员域用户账户](img/B19395_15_4.jpg)'
- en: Figure 15.4 – Select LocalSystem for this example. In the real world, the IT
    DevOps team would install an admin domain user account for security
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.4 – 在此示例中选择 LocalSystem。在现实世界中，IT DevOps 团队会为安全起见安装管理员域用户账户
- en: 'While the service is installed as LocalSystem, it is recommended to change
    to local or domain user credentials. Next, we must set the port. Use the default
    port of `8080` and test that we get a green checkmark for the assigned port number:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务以LocalSystem身份安装时，建议更改为本地或域用户凭据。接下来，我们必须设置端口号。使用默认端口号`8080`并测试我们是否得到分配端口号的绿色勾选标记：
- en: '![Figure 15.5 – Using the default port of 8080 and testing that we get a green
    checkmark](img/B19395_15_5.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图15.5 – 使用默认端口号8080并测试我们是否得到绿色勾选标记](img/B19395_15_5.jpg)'
- en: Figure 15.5 – Using the default port of 8080 and testing that we get a green
    checkmark
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.5 – 使用默认端口号8080并测试我们是否得到绿色勾选标记
- en: If the port is blocked, it will need to be opened; otherwise, an alternate open
    port must be assigned.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果端口被阻止，则需要将其打开；否则，必须分配另一个开放的端口号。
- en: 'The next page specifies the custom setup features. Leave them as-is and click
    `JAVA_HOME` environmental variable we set in Windows earlier. Otherwise, set the
    path to where JRE was installed:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下一页指定自定义设置功能。保持原样并点击我们在Windows中之前设置的`JAVA_HOME`环境变量。否则，设置JRE安装的路径：
- en: '![Figure 15.6 – Click Install and Jenkins will be ready](img/B19395_15_6.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图15.6 – 点击安装，Jenkins将准备就绪](img/B19395_15_6.jpg)'
- en: Figure 15.6 – Click Install and Jenkins will be ready
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6 – 点击安装，Jenkins将准备就绪
- en: Our Jenkins server will be now accessible at `https://localhost:8080/` and will
    require the temporary admin password we were provided earlier to be entered and
    then changed for security purposes. The path to the log file where the generated
    credential can be found is listed on the web page.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务器Jenkins现在可通过`https://localhost:8080/`访问，并需要我们之前提供的临时管理员密码进行输入，然后为了安全起见进行更改。生成的凭据所在的日志文件路径列在网页上。
- en: 'Jenkins will then ask you if you wish to install the suggested plugins:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins将询问您是否希望安装建议的插件：
- en: '![Figure 15.7 – Installing the suggested plugins](img/B19395_15_7.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图15.7 – 安装建议的插件](img/B19395_15_7.jpg)'
- en: Figure 15.7 – Installing the suggested plugins
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.7 – 安装建议的插件
- en: 'Continue with the suggested plugins:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 继续安装建议的插件：
- en: '![Figure 15.8 – Suggested plugins](img/B19395_15_8.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图15.8 – 建议的插件](img/B19395_15_8.jpg)'
- en: Figure 15.8 – Suggested plugins
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.8 – 建议的插件
- en: 'Finally, we must create the first admin user’s account credentials:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须创建第一个管理员用户的账户凭据：
- en: '![Figure 15.9 – Create First Admin User](img/B19395_15_9.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图15.9 – 创建第一个管理员用户](img/B19395_15_9.jpg)'
- en: Figure 15.9 – Create First Admin User
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.9 – 创建第一个管理员用户
- en: 'Click **Save and Continue**. Jenkins will provide its URL again. Click **Save
    and Continue** one last time. Click **Start Using Jenkins** to be redirected to
    the main page. We recommend that you save this link to your browser’s bookmarks
    bar. Our faithful Sentient Cape is now ready to do our bidding:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**保存并继续**。Jenkins将再次提供其URL。最后一次点击**保存并继续**。点击**开始使用Jenkins**将被重定向到主页面。我们建议您将此链接保存到浏览器书签栏。我们忠诚的Sentient
    Cape现在准备好执行我们的命令：
- en: '![Figure 15.10 – The Jenkins main page](img/B19395_15_10.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图15.10 – Jenkins主页面](img/B19395_15_10.jpg)'
- en: Figure 15.10 – The Jenkins main page
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.10 – Jenkins主页面
- en: Here, we can create new projects and jobs and run them on demand or a scheduled
    cadence. With that, it is time to run our first test job.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以创建新的项目和作业，并按需或按预定的时间表运行它们。有了这个，现在是时候运行我们的第一个测试作业了。
- en: Creating a WebdriverIO project with Jenkins
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jenkins创建WebdriverIO项目
- en: 'From the main dashboard view, click the **+ New Item** button. Jenkins provides
    us with several project options and organizational tools. **Freestyle project**
    is a streamlined approach to building a job, while **Pipeline** allows more granular
    customization with the Groovy programming language:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从主仪表板视图，点击**+新建项目**按钮。Jenkins为我们提供了几个项目选项和组织工具。**Freestyle项目**是一种简化的构建作业方法，而**Pipeline**则允许使用Groovy编程语言进行更细致的定制：
- en: '![Figure 15.11 – Creating a Freestyle project](img/B19395_15_11.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图15.11 – 创建Freestyle项目](img/B19395_15_11.jpg)'
- en: Figure 15.11 – Creating a Freestyle project
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.11 – 创建Freestyle项目
- en: 'For our purposes, **Freestyle project** will suffice. Several options will
    be displayed. We will only need a few to get our first test from [*Chapter 2*](B19395_02.xhtml#_idTextAnchor044)
    to be checked out of our GitHub **source control manager** (**SCM**) and run:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，**Freestyle项目**就足够了。将显示几个选项。我们只需要几个选项就能从[*第2章*](B19395_02.xhtml#_idTextAnchor044)将我们的GitHub**源代码管理器**（**SCM**）中的内容检出并运行：
- en: '![Figure 15.12 – Adding build steps](img/B19395_15_12.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图15.12 – 添加构建步骤](img/B19395_15_12.jpg)'
- en: Figure 15.12 – Adding build steps
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.12 – 添加构建步骤
- en: Under the **Build Steps** section, select **Add a Build step** to execute terminal
    commands. For Mac, select **Execute shell** and for Windows, choose the **Execute
    Windows batch command** option. Using the command prompt, we will navigate to
    the workspace path.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在**构建步骤**部分，选择**添加构建步骤**以执行终端命令。对于Mac，选择**执行shell**，对于Windows，选择**执行Windows批处理命令**选项。使用命令提示符，我们将导航到工作区路径。
- en: Next, add a `run a npm command` build step. This is required when we run our
    tests in LambdaTest. In this section, we will execute the commands listed in the
    `package.json` file. In this example, we’ll run the tests from [*Chapter 2*](B19395_02.xhtml#_idTextAnchor044)
    with `npm ch2`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加一个`运行npm命令`构建步骤。当我们运行LambdaTest中的测试时，这是必需的。在本节中，我们将执行`package.json`文件中列出的命令。在此示例中，我们将使用`npm
    ch2`运行[*第2章*](B19395_02.xhtml#_idTextAnchor044)中的测试。
- en: But before that, we need to add one last add-on to support job notifications.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 但在那之前，我们需要添加一个最后的附加组件来支持工作通知。
- en: Installing the Jenkins plugin for LambdaTest
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装LambdaTest的Jenkins插件
- en: 'To install the Jenkins plugin for LambdaTest, follow these steps:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装LambdaTest的Jenkins插件，请按照以下步骤操作：
- en: Click **Manage Jenkins**, then **Manage Plugins**.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**管理Jenkins**，然后**管理插件**。
- en: Click the **Available** tab.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**可用**选项卡。
- en: In the `LambdaTest`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`LambdaTest`。
- en: You will see a list of plugins; select **LambdaTest**.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一个插件列表；选择**LambdaTest**。
- en: 'To install the **LambdaTest** Jenkins plugin, you must select the checkbox
    in front of **LambdaTest**. Once the plugin has been installed, and Jenkins has
    been restarted, you will be able to find the LambdaTest Jenkins plugin under **Installed
    plugins**:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装**LambdaTest** Jenkins插件，您必须选中**LambdaTest**前面的复选框。一旦插件安装完成，并且Jenkins已重新启动，您将在**已安装插件**下找到LambdaTest
    Jenkins插件：
- en: '![Figure 15.13 – Searching for the LambdaTest Jenkins plugin](img/B19395_15_13.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图15.13 – 搜索LambdaTest Jenkins插件](img/B19395_15_13.jpg)'
- en: Figure 15.13 – Searching for the LambdaTest Jenkins plugin
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.13 – 搜索LambdaTest Jenkins插件
- en: Configuring LambdaTest using Jenkins
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Jenkins配置LambdaTest
- en: 'Follow these steps to configure LambdaTest with Jenkins:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤配置LambdaTest与Jenkins：
- en: On the Jenkins home page, click **Credentials**.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jenkins主页上，点击**凭据**。
- en: Under **Credentials**, click **System**.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**凭据**下，点击**系统**。
- en: On the **System** page, click **Global credentials (Unrestricted) domain**.
    The **Global credentials** page will open.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**系统**页面上，点击**全局凭据（不受限制）域**。将打开**全局凭据**页面。
- en: Click **Add Credentials**. The **Add Credentials** page will open.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加凭据**。将打开**添加凭据**页面。
- en: Enter the relevant data in the fields and click **Verify Credentials**. After
    verification, click the **OK** button. Jenkins will generate an ID, which is visible
    on the **Credentials** page.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在字段中输入相关数据，然后点击**验证凭据**。验证后，点击**确定**按钮。Jenkins将生成一个ID，该ID在**凭据**页面上可见。
- en: 'Save your changes:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的更改：
- en: '![Figure 15.14 – Adding the necessary credentials to the LambdaTest plugin](img/B19395_15_14.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图15.14 – 向LambdaTest插件添加必要的凭据](img/B19395_15_14.jpg)'
- en: Figure 15.14 – Adding the necessary credentials to the LambdaTest plugin
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.14 – 向LambdaTest插件添加必要的凭据
- en: Once you’ve added your credentials, Jenkins will generate an ID. To retrieve
    this ID for LambdaTest Credentials, you must go to the Jenkins home page and click
    on **Credentials** from the left navigation menu.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了您的凭据，Jenkins将生成一个ID。要为LambdaTest凭据检索此ID，您必须转到Jenkins主页并点击左侧导航菜单中的**凭据**。
- en: From the Jenkins home page, click **Credentials** from the left menu. You can
    copy the ID for LambdaTest Credentials.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从Jenkins主页，点击左侧菜单中的**凭据**。您可以复制LambdaTest凭据的ID。
- en: Creating a freestyle project and job
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个自由式项目和作业
- en: From the Jenkins dashboard, click `Enhanced Test Automation with WebdriverIO`
    as the name and selecting **Freestyle project**.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从Jenkins仪表板，点击`使用WebdriverIO增强测试自动化`作为名称，并选择**自由式项目**。
- en: 'This will display several tabs, including **General**, **Source Code Management**,
    **Build Triggers**, **Build Environment**, **Build**, and **Post-build Actions**.
    We will choose to run using code from our local machine. Advanced users can use
    a cloud-based corporate Jenkins to check out code from a private repository:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示几个选项卡，包括**常规**、**源代码管理**、**构建触发器**、**构建环境**、**构建**和**构建后操作**。我们将选择使用本地机器上的代码进行运行。高级用户可以使用基于云的企业Jenkins从私有仓库检出代码：
- en: '![Figure 15.15 – Setting up custom state-based test runs for manual testers](img/B19395_15_15.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图15.15 – 为手动测试人员设置基于状态的测试运行](img/B19395_15_15.jpg)'
- en: Figure 15.15 – Setting up custom state-based test runs for manual testers
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.15 – 为手动测试人员设置基于状态的定制测试运行
- en: To run the build, we need the name of the test and the path to the project directory.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行构建，我们需要测试名称和项目目录的路径。
- en: Parameterizing
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数化
- en: 'In the job configuration, we will add a parameter that we will pass into our
    automation framework from Jenkins named `JOURNEY`. This will become a system variable
    that our framework expects and parses to determine the path to take for hosting
    or attending a Halloween party. In addition, we have a choice parameter, which
    allows us to pass `dev` or `prod` to the Env system variable. This changes which
    URL will be the landing page for this test:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在作业配置中，我们将添加一个参数，我们将从 Jenkins 传递到我们的自动化框架中，命名为 `JOURNEY`。这将成为一个我们的框架期望并解析以确定托管或参加万圣节派对路径的系统变量。此外，我们还有一个选择参数，允许我们将
    `dev` 或 `prod` 传递到 Env 系统变量中。这将改变此测试的着陆页 URL：
- en: '![Figure 15.16 – Setting up a custom state-based journey test for manual testers](img/B19395_15_16.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.16 – 为手动测试人员设置基于状态的定制旅程测试](img/B19395_15_16.jpg)'
- en: Figure 15.16 – Setting up a custom state-based journey test for manual testers
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.16 – 为手动测试人员设置基于状态的定制旅程测试
- en: 'Next, we will have a slimmed-down version of the state-driven automation tests
    that we built in the previous chapter:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将拥有一个精简版的状态驱动自动化测试，这是我们之前章节中构建的：
- en: '[PRE2]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note that even if the tester clears the journey to an empty field, the test
    will still run using the happy path of hosting a party in Zombieton by default:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，即使测试人员将旅程清空到空字段，测试仍然会默认使用在 Zombieton 举办派对的快乐路径运行：
- en: '![Figure 15.17 – Building a test with parameters using journey decision point
    suggestions](img/B19395_15_17.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.17 – 使用旅程决策点建议构建带有参数的测试](img/B19395_15_17.jpg)'
- en: Figure 15.17 – Building a test with parameters using journey decision point
    suggestions
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.17 – 使用旅程决策点建议构建带有参数的测试
- en: Our manual testers can now open Jenkins and launch this test with parameters.
    They can pick what kinds of paths they want to take as well as change the environments
    to run against from the **Env** dropdown.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的手动测试人员现在可以打开 Jenkins 并使用参数启动此测试。他们可以选择他们想要走的路径类型，以及从 **Env** 下拉菜单中更改要运行的测试环境。
- en: 'Once this test case completes, we will see the results on our LambdaTest dashboard:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦此测试用例完成，我们将在 LambdaTest 仪表板上看到结果：
- en: '![Figure 15.18 – LambdaTest results screen](img/B19395_15_18.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.18 – LambdaTest 结果屏幕](img/B19395_15_18.jpg)'
- en: Figure 15.18 – LambdaTest results screen
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.18 – LambdaTest 结果屏幕
- en: By leveraging a cloud-based automation build platform, we get a lot of advantages.
    First, we don’t need to administer the underlying OS configurations. Second, we
    don’t need to keep track of the versions of the browsers. Finally, we get a nice
    video recording of the test execution, which is far superior to the individual
    screen captures.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用基于云的自动化构建平台，我们获得了许多优势。首先，我们不需要管理底层 OS 配置。其次，我们不需要跟踪浏览器的版本。最后，我们得到了一个测试执行的精彩视频记录，这比单个屏幕截图要好得多。
- en: All this mystical magic is accomplished with the LambdaTest config file we described
    in [*Chapter 13*](B19395_13.xhtml#_idTextAnchor247).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些神秘的魔法都是通过我们在[*第 13 章*](B19395_13.xhtml#_idTextAnchor247)中描述的 LambdaTest
    配置文件实现的。
- en: 'Add the LambdaTest Credentials here:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处添加 LambdaTest 凭据：
- en: '![Figure 15.19 – Adding the LambdaTest credentials](img/B19395_15_19.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.19 – 添加 LambdaTest 凭据](img/B19395_15_19.jpg)'
- en: Figure 15.19 – Adding the LambdaTest credentials
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.19 – 添加 LambdaTest 凭据
- en: Now, let’s see how reporting works in Slack.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看 Slack 中的报告是如何工作的。
- en: Reporting in Slack from Jenkins
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Jenkins 在 Slack 中报告
- en: One of the final problems of being a superhero is being super vigilant. The
    problem with running a large suite of tests unattended is that we must remember
    to check back in occasionally to see if they have been completed. Setting a reminder
    can break our concentration on other work. We might be so wrapped up with other
    tasks that we might not get back to the results until several hours after the
    task has been completed. To be efficient, we could send alert messages to our
    email inbox, but they might get ignored if our inbox gets blasted with incoming
    messages. A better solution is to send updates to a team messaging platform such
    as Slack. This is a three-step process – that is, adding a Plugin for Jenkins,
    adding an app in Slack, and adding a Jenkins post-build step. The first step is
    to install the necessary add-ons in both Slack and Jenkins to indicate the Slack
    channel where messages will appear.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 成为超级英雄的最终问题之一是保持超级警觉。在不间断运行大量测试时的问题是我们必须记得偶尔检查它们是否已完成。设置提醒可能会打断我们对其他工作的注意力。我们可能被其他任务完全占据，以至于我们可能要在任务完成后几小时后才能回到结果。为了提高效率，我们可以将警报消息发送到我们的电子邮件收件箱，但如果收件箱被大量
    incoming 消息轰炸，它们可能会被忽略。更好的解决方案是将更新发送到团队消息平台，如Slack。这是一个三步过程——也就是说，添加Jenkins插件，添加Slack应用，以及添加Jenkins构建后步骤。第一步是在Slack和Jenkins中安装必要的附加组件，以指示消息将显示的Slack频道。
- en: Adding the Slack notifications plugin to Jenkins
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Slack通知插件添加到Jenkins
- en: 'Navigate to **Manage Jenkins** | **Plugins** | **Available**. Then, search
    for and install the **Slack** **Notification** plugin:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到**管理Jenkins** | **插件** | **可用**。然后，搜索并安装**Slack通知**插件：
- en: '![Figure 15.20 – Searching for the Slack Notification plugin](img/B19395_15_20.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图15.20 – 搜索Slack通知插件](img/B19395_15_20.jpg)'
- en: Figure 15.20 – Searching for the Slack Notification plugin
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.20 – 搜索Slack通知插件
- en: Once the plugin has been installed, restart Jenkins and log in. The **Slack
    Notification** plugin will now appear in the **Installed Plugins** tab. Our next
    step is to set up Slack integration.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦插件安装完成，重启Jenkins并登录。现在**Slack通知**插件将出现在**已安装插件**标签页中。我们的下一步是设置Slack集成。
- en: Adding the Jenkins CI app to Slack
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Jenkins CI应用添加到Slack
- en: 'For this, we must add the Slack Jenkins CI application. Browse **Apps** and
    search for and add **Jenkins CI**:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们必须添加Slack Jenkins CI应用。浏览**应用**并搜索并添加**Jenkins CI**：
- en: '![Figure 15.21 – The Jenkins CI plugin for Slack, which will receive messages
    from Jenkins](img/B19395_15_21.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图15.21 – Slack的Jenkins CI插件，将接收来自Jenkins的消息](img/B19395_15_21.jpg)'
- en: Figure 15.21 – The Jenkins CI plugin for Slack, which will receive messages
    from Jenkins
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.21 – Slack的Jenkins CI插件，将接收来自Jenkins的消息
- en: This app will ask you to create a Slack channel or select an existing one. In
    this example, we will create a `jenkins-jobs` channel for notifications to appear.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用将要求您创建一个Slack频道或选择一个现有的频道。在这个例子中，我们将创建一个`jenkins-jobs`频道，以便通知显示。
- en: 'Our final step is to get the token to allow these two products to communicate.
    Navigate to the Slack app directory and add the Jenkins CI integration:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一步是获取令牌，以便这两个产品能够通信。导航到Slack应用目录并添加Jenkins CI集成：
- en: '![Figure 15.22 – A notification in the Slack channel confirming that the integration
    was completed](img/B19395_15_22.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图15.22 – Slack频道中确认集成已完成的通知](img/B19395_15_22.jpg)'
- en: Figure 15.22 – A notification in the Slack channel confirming that the integration
    was completed
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.22 – Slack频道中的通知，确认集成已完成
- en: With the integration added, click the **Jenkins** link in the message to get
    the token.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 集成添加后，点击消息中的**Jenkins**链接以获取令牌。
- en: 'This token is available from the Jenkins dashboard under **Manage Jenkins**
    | **Manage Plugins**, under the **Available** tab:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 此令牌可在Jenkins仪表板中的**管理Jenkins** | **管理插件**下找到，位于**可用**标签页：
- en: '![Figure 15.23 – Slack settings](img/B19395_15_23.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图15.23 – Slack设置](img/B19395_15_23.jpg)'
- en: Figure 15.23 – Slack settings
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.23 – Slack设置
- en: Copy the token and workspace into the Jenkins app’s settings and click **Save
    Settings**.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 将令牌和工作区复制到Jenkins应用的设置中，然后点击**保存设置**。
- en: Next, return to Slack. Enter the workspace on the **Dashboard** | **System**
    page.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，返回Slack。在**仪表板** | **系统**页面进入工作区。
- en: 'Then, add the credentials and some secret text. Enter the secret. The ID is
    optional. Finally, click **Test Connection**:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，添加凭据和一些秘密文本。输入秘密。ID是可选的。最后，点击**测试连接**：
- en: '![Figure 15.24 – A sample message will appear in Slack](img/B19395_15_24.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图15.24 – Slack中出现的示例消息](img/B19395_15_24.jpg)'
- en: Figure 15.24 – A sample message will appear in Slack
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.24 – 示例消息将出现在Slack中
- en: Our connections are now complete and have been tested. Our final step is to
    get Jenkins to send informative messages back to Slack.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已连接完成并进行了测试。我们的最后一步是让Jenkins向Slack发送信息。
- en: Adding the post-build Slack action
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加构建后Slack操作
- en: 'In the **Post-build Actions** area of our job, select **Slack Notifications**:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的工作**构建后操作**区域中选择**Slack通知**：
- en: '![Figure 15.25 – Selecting Slack Notifications](img/B19395_15_25.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图15.25 – 选择Slack通知](img/B19395_15_25.jpg)'
- en: Figure 15.25 – Selecting Slack Notifications
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.25 – 选择Slack通知
- en: 'Checkmark **Notify Success** and **Notify Every Failure**. Then, click **Save**:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**通知成功**和**每次失败时通知**。然后，点击**保存**：
- en: '![Figure 15.26 – Completed jobs with pass and fail states in Jenkins reported
    to Slack](img/B19395_15_26.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图15.26 – 在Jenkins中报告给Slack的完成作业的通过和失败状态](img/B19395_15_26.jpg)'
- en: Figure 15.26 – Completed jobs with pass and fail states in Jenkins reported
    to Slack
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.26 – 在Jenkins中报告给Slack的完成作业的通过和失败状态
- en: Once a build is completed, updates are automatically sent to the designated
    Slack channel. This minimizes the delay between the job’s completion and the start
    of the result analysis. In turn, this efficiency optimizes the use of time for
    all automation team members.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建完成，更新将自动发送到指定的Slack频道。这最小化了作业完成和结果分析开始之间的延迟。反过来，这种效率优化了所有自动化团队成员的时间使用。
- en: On-demand and scheduled suite runs
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按需和计划套件运行
- en: We try to have our tests run as often as possible. Sometimes, this can impact
    our environment, which then blocks the manual test team from doing their work.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尽量让测试尽可能频繁地运行。有时，这可能会影响我们的环境，从而阻止手动测试团队进行工作。
- en: Other times, this process is quiet and uneventful. There was a project manager
    who once asked if we could run automated test suites more often than just at the
    end of the sprint release cycle. I happily showed our histogram from our Allure
    reports and assured everyone the tests ran on a nightly cadence. We reviewed those
    results every morning for unexpected failures and state changes. As we wrote new
    tests and maintained others, we also noted that nearly every test was executed
    multiple times a day to ensure they impacted each other.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，这个过程很安静，没有发生任何事情。曾经有一个项目经理问我们是否可以比在冲刺发布周期结束时更频繁地运行自动化测试套件。我高兴地展示了我们的Allure报告的直方图，并确保每个人都知道测试是每晚运行的。我们每天早上审查这些结果，以寻找意外的失败和状态变化。当我们编写新的测试并维护其他测试时，我们还注意到几乎每个测试每天都会执行多次，以确保它们相互影响。
- en: Types of debugging runs with Jenkins
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jenkins的调试运行类型
- en: We need to have a test that checks the reliability of the automation framework
    functions that we’ve written throughout this book. I used to refer to this as
    a unit test of the framework functionality. However, this caused confusion with
    the application developer team. They heard the term *unit* and assumed I was proposing
    to take on the unit testing in their code, a job that is always their responsibility.
    So, to avoid further confusion, we will refer to one test as the framework Sanity
    test.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个测试来检查我们在这本书中编写的自动化框架功能的可靠性。我过去把它称为框架功能性的单元测试。然而，这与应用开发者团队产生了混淆。他们听到“单元”这个词，认为我是在提议承担他们代码中的单元测试，这是一个他们始终负责的工作。因此，为了避免进一步的混淆，我们将一个测试称为框架的Sanity测试。
- en: 'The most common types of jobs are **Sanity**, **Smoke**, and **Regression**:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的作业类型是**Sanity**、**Smoke**和**Regression**：
- en: The `SetValueAdv()` by entering credentials pulled from the Secrets storage
    into input field elements and exercising `ClickAdv()` by clicking the `pageSync()`
    and selecting from a list with `SelectAdv()`. It must include at least one validation
    with `AssertAdv()`.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将来自密钥存储的凭据输入到输入字段元素中，使用`SetValueAdv()`，并通过点击`pageSync()`并从列表中选择`SelectAdv()`来执行`ClickAdv()`。它必须至少包含一个使用`AssertAdv()`的验证。
- en: This should not be a lengthy end-to-end test, but it could be the initial steps
    of one. While this is a job that could be run after every new framework commit,
    the test itself should also be included with every suite. If it were to fail,
    it would indicate that something basic has broken that needs to be investigated
    immediately.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这不应该是一个漫长的端到端测试，但它可以是其中一个的初始步骤。虽然这个工作可以在每次新的框架提交后运行，但测试本身也应该包含在每个套件中。如果它失败了，这将表明有某些基本的东西已经损坏，需要立即进行调查。
- en: '**Smoke** tests comprise a collection of tests that cover roughly 10% of the
    entire suite.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**烟雾**测试包括大约覆盖整个套件10%的测试集合。'
- en: '**Regression** is the remaining 90% of the tests in the suite, excluding the
    Smoke tests.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回归** 是套件中剩余的 90% 测试，不包括烟雾测试。'
- en: However, there are other categories of tests that we generally set up to run
    nightly or weekly.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有其他类别的测试，我们通常设置为每晚或每周运行。
- en: Additional suite categories
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外的套件类别
- en: 'Let’s look at the additional suite categories:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看额外的套件类别：
- en: '**Build Verification Suite**: A subset of tests that have had defects written
    against them in the past. Often, this is 1/10th of the Smoke suite.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建验证套件**：过去针对它们编写了缺陷的测试子集。通常，这是烟雾套件的十分之一。'
- en: '**API Suite**: A quick way to validate API calls with payloads, validating
    responses and response codes. Again, this is a small quick set of tests that have
    no GUI interaction.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API 套件**：一种快速验证 API 调用（带有有效载荷）、验证响应和响应代码的方法。同样，这是一组小型快速测试，没有 GUI 交互。'
- en: '**Long test suite**: Some tests just take an extended amount of time to complete.
    Let them have fun on their own, allowing the Smoke and Regression tests to finish
    sooner.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**长测试套件**：有些测试需要较长时间才能完成。让他们自己玩得开心，以便尽早完成烟雾和回归测试。'
- en: '**Single Test Suite**: This allows the user to request a custom subset of all
    tests combined. This might be Product Returns, Searches, and Saving Shopping Carts.
    This allows the test team to focus on only one area without having to search through
    multiple BVS, Smoke, and Regression runs. It can also run tests by test case name
    if it includes a Jira number.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单个测试套件**：这允许用户请求所有测试组合的定制子集。这可能包括产品退货、搜索和保存购物车。这允许测试团队只关注一个区域，而无需在多个 BVS、烟雾和回归运行中搜索。如果它包含
    Jira 编号，它还可以按测试用例名称运行测试。'
- en: '**Fail**: A list of tests that are marked as having failed recently and removed
    from the other suites. This suite can be a quick way to see if a single fix has
    resolved multiple failing tests.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**失败**：一个标记为最近失败的测试列表，并从其他套件中移除。这个套件可以快速查看单个修复是否解决了多个失败的测试。'
- en: Linking Allure reports to a Jenkins run
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Allure 报告链接到 Jenkins 运行
- en: In your Jenkins job configuration, under **Post-Build Actions**, add a **Publish
    Allure** **Report** action.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 Jenkins 作业配置中，在 **构建后操作** 下，添加一个 **发布 Allure 报告** 操作。
- en: Configure the **Report Version** and **Report Directory** fields appropriately.
    **Report Directory** should point to the directory where your Allure report files
    are generated.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 适当地配置 **报告版本** 和 **报告目录** 字段。**报告目录** 应指向生成 Allure 报告文件的目录。
- en: CI/CD pipeline
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI/CD 管道
- en: '**CI/CD** stands for **continuous integration and continuous deployment** (or
    **continuous delivery**). It is a set of practices and tools that are used in
    software development to automate the process of building, testing, and deploying
    software changes. CI is where the developer does frequent code merges to the central
    repository rather than waiting long periods before merging their code. This approach
    helps them identify integration issues early on and ensures that the code base
    is always in a functional state.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**CI/CD** 代表 **持续集成和持续部署**（或 **持续交付**）。它是一组用于软件开发的实践和工具，用于自动化构建、测试和部署软件更改的过程。CI
    是开发者频繁将代码合并到中央仓库，而不是等待长时间后再合并代码。这种方法有助于他们尽早识别集成问题，并确保代码库始终处于功能状态。'
- en: Continuous deployment (or continuous delivery) extends the concept of CI by
    automating the process of deploying software changes to production environments.
    The goal is to have a reliable and automated pipeline that takes code changes
    from the repository, builds it, tests it, and deploys it to the production environments
    without manual intervention.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署（或持续交付）通过自动化将软件更改部署到生产环境的概念扩展了 CI。目标是拥有一个可靠且自动化的管道，该管道从仓库中提取代码更改，构建它，测试它，并将其部署到生产环境，而无需人工干预。
- en: 'The CI/CD process typically involves the following steps:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 流程通常涉及以下步骤：
- en: '**Code integration**: Developers commit their changes to a version control
    system (such as Git) frequently.'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**代码集成**：开发者频繁地将更改提交到版本控制系统（如 Git）。'
- en: '**Build and test**: The CI/CD system automatically builds the application and
    runs various automated tests to ensure the changes are functioning as expected.'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建和测试**：CI/CD 系统自动构建应用程序并运行各种自动化测试，以确保更改按预期工作。'
- en: '**Automated deployment**: Once the build and tests pass successfully, the CI/CD
    system automatically deploys it to a staging or production environment (that is,
    to cloud platforms, containerized environments, and so on).'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自动化部署**：一旦构建和测试成功通过，CI/CD系统会自动将其部署到预发布或生产环境（即云平台、容器化环境等）。'
- en: '**Continuous monitoring**: Once deployed, the CI/CD system can monitor the
    application’s performance and log any errors or issues.'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**持续监控**：一旦部署，CI/CD系统可以监控应用程序的性能并记录任何错误或问题。'
- en: What is continuous testing?
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是持续测试？
- en: Continuous testing is the practice of executing automated tests throughout the
    software development life cycle to provide fast and frequent feedback on the quality
    of the code.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 持续测试是在整个软件开发生命周期中执行自动化测试的实践，以提供对代码质量的快速和频繁的反馈。
- en: Traditionally, testing was often considered a separate phase that occurred at
    the end of the development cycle. However, with the adoption of Agile and DevOps
    practices, there has been a shift toward integrating testing into every stage
    of the development process.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，测试通常被认为是一个独立的阶段，发生在开发周期的末尾。然而，随着敏捷和DevOps实践的采用，测试已经转向整合到开发过程的每个阶段。
- en: 'Continuous testing involves the following five key aspects:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 持续测试涉及以下五个关键方面：
- en: '**Automated testing**: Continuous testing relies on automated tests to be inclusive
    of unit tests, integration tests, and functional tests. These tests are scripted
    and executed automatically whenever changes are made to the code base and are
    there to ensure that software functionalities work as intended and help catch
    bugs early on.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化测试**：持续测试依赖于自动化测试，包括单元测试、集成测试和功能测试。这些测试是脚本化的，并且每当代码库发生变化时都会自动执行，目的是确保软件功能按预期工作并帮助早期捕捉到错误。'
- en: '**Early and frequent testing**: Continuous testing emphasizes that we test
    early and often. Once code changes are merged into the repository, tests are triggered
    to verify the integrity of the changes.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**早期和频繁的测试**：持续测试强调我们早期和频繁地进行测试。一旦代码更改合并到仓库中，就会触发测试以验证更改的完整性。'
- en: '**Test environments**: Continuous testing involves multiple testing environments,
    including local development, testing, and staging environments. These environments
    are used to run tests in a realistic setup, mimicking the production environment
    as closely as possible.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试环境**：持续测试涉及多个测试环境，包括本地开发、测试和预发布环境。这些环境用于在尽可能接近生产环境的设置中运行测试。'
- en: '**Test data management**: This is all about effectively managing test data.
    This data should be able to cover a wide range of scenarios and user cases. The
    test data should also be easily provisioned and reset to ensure reliable and repeatable
    test executions.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试数据管理**：这全部关于有效地管理测试数据。这些数据应该能够覆盖广泛的情况和用户场景。测试数据还应该易于提供和重置，以确保可靠的和可重复的测试执行。'
- en: '**Continuous feedback**: This is all about providing immediate feedback on
    the quality of the code changes. Test results are generated automatically, highlighting
    any failures or issues. This feedback helps developers deal with failures/issues
    quickly, ensuring the code base remains stable and reliable.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续反馈**：这全部关于提供对代码更改质量的即时反馈。测试结果会自动生成，突出显示任何失败或问题。这种反馈帮助开发者快速处理失败/问题，确保代码库保持稳定和可靠。'
- en: Now that we have an idea of what CI is and how to go about it, we need to take
    a look at our pipelines for executing our test suites.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了什么是持续集成以及如何进行它，我们需要检查我们的管道以执行我们的测试套件。
- en: What does a CI/CD pipeline look like?
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CI/CD管道看起来是什么样子？
- en: A CI/CD pipeline is a set of automated steps and tools that enable the CI, testing,
    and deployment of software changes. While the specific implementation of a CI/CD
    pipeline can vary depending on the project and organization, the following subsections
    give a general overview of what a CI/CD pipeline may look like.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD管道是一组自动化步骤和工具，它使CI、测试和软件更改的部署成为可能。虽然CI/CD管道的具体实现可能因项目和组织的不同而有所差异，但以下小节提供了一个CI/CD管道可能看起来的一般概述。
- en: Code repository
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码仓库
- en: The pipeline starts with a code repository, typically using a version control
    system such as Git. Automation engineers commit their code changes to a GitHub
    or GitLab repository. This might include adding or maintaining existing test cases
    or enhancing the automation framework features.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 管道从代码仓库开始，通常使用Git等版本控制系统。自动化工程师将他们的代码更改提交到GitHub或GitLab仓库。这可能包括添加或维护现有测试用例或增强自动化框架功能。
- en: CI
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CI
- en: 'CI is a software development practice where developers regularly merge their
    code changes into a central repository, preferably multiple times a day. After
    merging, automated builds and tests are run to catch bugs early and ensure that
    the new changes are compatible with the existing code base. The primary goals
    of CI are to improve code quality, detect issues early, and facilitate rapid,
    reliable releases. CI is often integrated with other DevOps practices and tools,
    such as CD, to streamline the development life cycle from coding to deployment.
    Tools such as Jenkins are commonly used to orchestrate the CI process:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: CI是一种软件开发实践，开发者定期将他们的代码更改合并到中央仓库，最好是每天多次。合并后，自动构建和测试运行以尽早发现错误并确保新更改与现有代码库兼容。CI的主要目标是提高代码质量、尽早发现问题并促进快速、可靠的发布。CI通常与其他DevOps实践和工具（如CD）集成，以简化从编码到部署的开发生命周期。Jenkins等工具通常用于编排CI过程：
- en: '**Code compilation**: When changes are committed, the CI system pulls the latest
    code from the repository and compiles it into executable code.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码编译**：当提交更改时，CI系统从仓库拉取最新代码并将其编译成可执行代码。'
- en: '**Automated testing**: The CI system runs a suite of automated tests, including
    unit tests, integration tests, and other types of tests, to verify the correctness
    and functionality of the code changes.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化测试**：CI系统运行一系列自动化测试，包括单元测试、集成测试和其他类型的测试，以验证代码更改的正确性和功能。'
- en: '**Code quality checks**: The CI system may perform code quality checks, such
    as code linting or static code analysis, to ensure adherence to coding standards
    and best practices.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码质量检查**：CI系统可能执行代码质量检查，如代码检查或静态代码分析，以确保遵守编码标准和最佳实践。'
- en: '**Test reports and notifications**: The CI system generates test reports and
    sends notifications to the development team.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试报告和通知**：CI系统生成测试报告并向开发团队发送通知。'
- en: Artifact generation
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 艺术品生成
- en: Artifact generation involves creating digital or physical objects, data, or
    content through automated or computer-assisted processes. If the code passes the
    tests and quality checks, the CI system generates build artifacts, such as compiled
    binaries, libraries, or container images. These artifacts are the result of a
    successful compilation and testing process, including Allure reports and screen
    captures.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 艺术品生成涉及通过自动化或计算机辅助过程创建数字或物理对象、数据或内容。如果代码通过了测试和质量检查，CI系统会生成构建工件，如编译的二进制文件、库或容器镜像。这些工件是成功编译和测试过程的结果，包括Allure报告和屏幕截图。
- en: Deployment
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署
- en: If the build and tests pass successfully, the CI/CD system automatically deploys
    the changes to a staging or production environment. This step may involve deploying
    to cloud platforms, containerized environments, or other infrastructure configurations.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果构建和测试成功通过，CI/CD系统会自动将更改部署到预发布或生产环境。这一步骤可能涉及部署到云平台、容器化环境或其他基础设施配置。
- en: '**Staging environment**: The artifacts are deployed to a staging environment,
    which closely resembles the production environment'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预发布环境**：工件被部署到与生产环境相似的预发布环境。'
- en: '**Additional testing**: More comprehensive tests, such as performance testing,
    security testing, or user acceptance testing, may be performed in the staging
    environment'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**额外测试**：在预发布环境中可能进行更全面的测试，例如性能测试、安全测试或用户验收测试。'
- en: '**Approval process**: Depending on the organization’s policies, there may be
    an approval process or manual review before deploying to the production environment'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**审批流程**：根据组织的政策，在部署到生产环境之前，可能会有一个审批流程或手动审查。'
- en: CD
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CD
- en: 'CD extends the concept of CI by automating the process of deploying software
    changes to production environments. With CD, the goal is to have a reliable and
    automated pipeline that takes code changes from the repository, builds them, runs
    tests, and deploys them to production environments without manual intervention:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: CD 通过自动化将软件更改部署到生产环境的过程扩展了 CI 的概念。使用 CD，目标是拥有一个可靠且自动化的管道，该管道从代码库中提取代码更改，构建它们，运行测试，并将它们部署到生产环境，无需人工干预：
- en: '**Production environment**: If the staging tests and approvals are successful,
    the artifacts are deployed to the production environment automatically or manually,
    depending on the organization’s deployment strategy'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产环境**：如果预演测试和批准成功，则工件将自动或手动部署到生产环境，具体取决于组织的部署策略。'
- en: '**Post-deployment testing**: Additional monitoring and testing (business verification)
    may take place in the production environment to ensure the new changes are functioning
    as expected'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署后测试**：在生产环境中可能进行额外的监控和测试（业务验证），以确保新的更改按预期工作。'
- en: '**Continuous monitoring**: The CI/CD pipeline often includes monitoring tools
    that track the application’s performance, logs, and metrics'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续监控**：CI/CD 管道通常包括监控工具，这些工具跟踪应用程序的性能、日志和指标。'
- en: Continuous feedback
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续反馈
- en: 'Continuous testing provides immediate feedback on the quality of the code changes.
    Test results are generated automatically, highlighting any failures or issues.
    This feedback loop helps developers quickly identify and fix problems, ensuring
    the code base remains stable and reliable:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 持续测试对代码更改的质量提供即时反馈。测试结果自动生成，突出显示任何失败或问题。这个反馈循环帮助开发者快速识别和修复问题，确保代码库保持稳定和可靠：
- en: '**Notifications and reports**: Throughout the pipeline, notifications, reports,
    and logs are generated and made available to the development team and stakeholders,
    providing visibility into the progress, test results, and deployment status'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通知和报告**：在整个管道中，会生成通知、报告和日志，并可供开发团队和利益相关者查看，提供对进度、测试结果和部署状态的可见性。'
- en: '**Iterative development**: The CI/CD pipeline facilitates an iterative development
    process, where developers can quickly receive feedback on their code changes and
    make necessary adjustments, ensuring continuous improvement'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**迭代开发**：CI/CD 管道促进了迭代开发过程，开发者可以快速收到对代码更改的反馈，并做出必要的调整，确保持续改进。'
- en: Jenkins for CI/CD
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jenkins 用于 CI/CD
- en: Jenkins is an excellent tool for setting up a CI/CD pipeline, allowing you to
    automate various stages of your testing life cycle. In a dynamic testing environment,
    especially when working with WebdriverIO, a well-configured CI/CD pipeline can
    significantly boost the efficiency of the testing process.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 是设置 CI/CD 管道的优秀工具，它允许您自动化测试生命周期的各个阶段。在动态测试环境中，尤其是在使用 WebdriverIO 的情况下，一个配置良好的
    CI/CD 管道可以显著提高测试过程的效率。
- en: Jenkins can be configured to automatically trigger test suites post a code push,
    which ensures that the test suite is always in sync with the latest code base,
    reducing the potential for issues slipping through and getting into production.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 可以配置为在代码推送后自动触发测试套件，这确保了测试套件始终与最新的代码库保持同步，减少了潜在问题滑过并进入生产的风险。
- en: Jenkins allows for parallel execution of tests, which significantly reduces
    the test execution time. This is a must-have feature for any testing framework
    that aims to maintain agility and speed in today’s fast-paced development environments.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 允许并行执行测试，这显著减少了测试执行时间。这对于任何旨在在当今快节奏的开发环境中保持敏捷性和速度的测试框架来说是一个必备功能。
- en: Docker helps in creating a standardized environment for testing, which is critical
    for ensuring the reliability of your test results. Having a consistent environment
    means your tests will be more reliable and less prone to errors caused by environmental
    inconsistencies.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 有助于创建一个标准化的测试环境，这对于确保测试结果的可信度至关重要。拥有一致的环境意味着您的测试将更加可靠，并且不太可能受到环境不一致性引起的错误的影响。
- en: Docker containers provide an isolated environment for your tests, which is a
    creative solution to avoiding conflicts between different dependencies and system
    configurations. It sidesteps the infamous “it works on my machine” problem, ensuring
    the test automation framework is robust and reliable.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器为您的测试提供了一个隔离的环境，这是避免不同依赖项和系统配置之间冲突的创造性解决方案。它绕过了臭名昭著的“在我的机器上它工作”问题，确保测试自动化框架强大且可靠。
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By implementing CI/CD, development teams can streamline their software development
    processes, reduce manual errors, and ensure faster and more reliable delivery
    of new features and bug fixes. It promotes collaboration among team members, improves
    code quality, and enables rapid and frequent releases.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: By incorporating continuous testing into the development process, teams can
    identify and address issues early, reduce the risk of defects reaching production,
    and ensure the software meets quality standards. It promotes a culture of quality
    throughout the development team and supports faster and more reliable software
    delivery.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that the specific tools, technologies, and steps involved
    in a CI/CD pipeline can vary depending on the project requirements, technology
    stack, and organization’s preferences. The pipeline can be customized and expanded
    to include additional stages, such as security scanning, performance optimization,
    or even automated rollbacks in case of issues.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Overall, Jenkins and LambdaTest simplify the process of setting up and managing
    CI/CD pipelines, enabling teams to deliver software faster, more reliably, and
    with greater confidence in the quality of their code changes.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Appendix
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ultimate Guide to TypeScript Error Messages, Causes, and Solutions
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This Appendix covers all the issues the authors encountered while writing this
    book, including (but not limited to) installation, configuration, and runtime
    errors. Each problem is followed by one or more causes, each with a solution.
    Problems with the same solution are grouped together. A good way to use this Appendix
    is to search for a small segment of the error detail copied from the terminal
    window, such as `check` `if port`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: Install default WDIO settings by passing “--yes” parameter still asks
    configuration questions'
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`--` parameter at the command prompt:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`--` to pass the parameter to `wdio`:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Problem: Missing script “wdio”'
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`scripts:` section or missing `wdio` script in `Package.json`.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '`wdio` to the `scripts:` section in the `Package.json` file:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Problem: “node : The term ‘node’ is not recognized as the name of a cmdlet,
    function, script file, or operable program. Check the spelling of the name, or
    if a path was included, verify that the path is correct and try again.”'
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause**: Node has not been installed.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Install Node.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: ‘wdio’ is not recognized as an internal or external command”'
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause #1**: The console is not at the correct file path folder.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '**Cause #2**: The supporting packages have not been installed.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '`npm i`:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Problems:'
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Browser launches and immediately closes
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “This version of ChromeDriver has not been tested with Chrome version”
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Must use import to load ES Module” or “require() of ES modules is not supported”
    (no require code in the project)
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chromedriver.exe` version is out of date.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Install missing packages.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Problem: The \node_modules folder is not created when installed in a new WDIO
    project folder.'
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Problem: New project install fails with empty directory.'
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：新项目安装失败，目录为空。
- en: 'Problem: Tests suddenly fail to run including the \specs\test.e2e.ts. sample
    test.'
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：测试突然失败，包括\specs\test.e2e.ts的示例测试。
- en: '`\node_modules` folder, a `package.json` and a `wdio.conf.ts` file. When the
    child installation is performed in the sub-folder, it will check for pre-existing
    shared resources in the parent folder. This will skip the creation of the `\node_modules`
    folder and potentially overwrite the parent `package.json` and config files. The
    sample `\specs\test.e2e.js` may initially run in this new child folder. However,
    a secondary child project install can overwrite the parent `\node_modules` folders
    and config files further, potentially breaking all projects that reference the
    shared resources, as well as fail to complete the install process.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`\node_modules`文件夹、一个`package.json`和一个`wdio.conf.ts`文件。当在子文件夹中执行子安装时，它将检查父文件夹中预先存在的共享资源。这将跳过创建`\node_modules`文件夹，并可能覆盖父`package.json`和配置文件。示例`\specs\test.e2e.js`可能最初在新子文件夹中运行。然而，二级子项目安装可以进一步覆盖父`\node_modules`文件夹和配置文件，可能破坏所有引用共享资源的项目，以及安装过程无法完成。'
- en: '`\node_modules` folder, `package.json`, `wdio.conf.ts` files and `\test` folder
    from the parent folder to the new child project folder. From GitHub, restore the
    last known working `package.json` and `wdio.conf.ts` files from the parent folder
    to the child folder where the tests no longer run. Rebuild with yarn install to
    create the missing `\node_modules` folder. The tests should now run. New project
    installations in child sub-folders should complete to success as well.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 从父文件夹将`\node_modules`文件夹、`package.json`、`wdio.conf.ts`文件和`\test`文件夹移动到新的子项目文件夹中。从GitHub恢复父文件夹中最后已知可工作的`package.json`和`wdio.conf.ts`文件到测试不再运行的子文件夹中。使用yarn
    install重建以创建缺失的`\node_modules`文件夹。现在测试应该可以运行。在子子文件夹中的新项目安装也应成功完成。
- en: 'Problem: “WARN webdriver: Request encountered a stale element - terminating
    request”'
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '问题：“WARN webdriver: 请求遇到一个过期的元素 - 终止请求”'
- en: 'Problem: “TypeError: elem[prop] is not a function”'
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '问题：“TypeError: elem[prop]不是一个函数”'
- en: 'Problem: Statements execute out of order'
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：语句执行顺序错误
- en: '`await` command:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`await`命令：'
- en: '[PRE8]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Solution**: Add the await comand'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：添加await命令'
- en: '[PRE9]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Problem: “ERROR @wdio/runner: Error: describe expects a function argument;
    received [object AsyncFunction]”'
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '问题：“ERROR @wdio/runner: 错误：describe期望一个函数参数；收到[object AsyncFunction]”'
- en: '`async` is in the `describe()` block:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`async`位于`describe()`块中：'
- en: '[PRE10]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`async` from the `describe()` block:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`async`从`describe()`块中：'
- en: '[PRE11]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Problem: “Unsupported engine”'
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“不支持的引擎”
- en: '![](img/B19395_16_1.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19395_16_1.jpg)'
- en: Figure A.1 – Results npm package manager indicating required and current node/npm
    versions
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 图A.1 – npm包管理器显示所需的和当前的node/npm版本
- en: '![Figure A.2 – Results yarn package manager indicating expected  and out of
    date current node/npm versions](img/B19395_16_2.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图A.2 – yarn包管理器显示预期的和过时的当前node/npm版本](img/B19395_16_2.jpg)'
- en: Figure A.2 – Results yarn package manager indicating expected and out of date
    current node/npm versions
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图A.2 – yarn包管理器显示预期的和过时的当前node/npm版本
- en: '**Cause**: The current version of Node does not match the required version.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：当前版本的Node与所需版本不匹配。'
- en: '**Solution**: Update Node to the correct version. In this example, Node version
    14 is not supported by the WDIO package and must be updated to 16.13, 18.x, or
    higher:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：将Node更新到正确版本。在此示例中，Node版本14不受WDIO包支持，必须更新到16.13、18.x或更高版本：'
- en: '[PRE12]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Problem: JavaScript Debug Terminal skips breakpoints'
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：JavaScript调试终端跳过断点
- en: '`import` statements paths'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`import`语句路径'
- en: '![](img/B19395_16_3.jpg)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19395_16_3.jpg)'
- en: Figure A.3 –Removing the unused Helpers import stopped the breakpoint from skipping
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 图A.3 – 移除未使用的辅助导入项阻止了断点的跳过
- en: '**Solution #1**: Remove unused imports.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案 #1**：删除未使用的导入。'
- en: '**Cause #2**: Missing async and await statements in the imported resources'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因 #2**：导入的资源中缺少async和await语句'
- en: '**Solution #2**: Add async and await statements'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案 #2**：添加async和await语句'
- en: '**Cause #3**: Cached Import path case changed from “pageobjects” to “pageObjects”'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因 #3**：缓存的导入路径从“pageobjects”更改为“pageObjects”'
- en: '**Solution #3**: Restart VSCode'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案 #3**：重启VSCode'
- en: 'Problem: Browser launches and locks up'
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：浏览器启动后锁定
- en: '**Cause**: Incompatibility with Node version 16.0.0.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：与Node版本16.0.0不兼容。'
- en: '**Solution**: Upgrade to Node version 18:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：升级到Node版本18：'
- en: '[PRE13]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Problem: “SevereServiceError: Couldn’t start Chromedriver: timeout. Please
    check if port [<PortNumber>] is in use”'
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“SevereServiceError：无法启动 Chromedriver：超时。请检查端口号 [<端口号>] 是否被占用”
- en: '`chromedriver` failure has locked the port.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`chromedriver` 失败已锁定端口。'
- en: '`chromedriver` session.'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`chromedriver` 会话。'
- en: 'This is how to do it using the Windows CMD shell:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用 Windows CMD 命令提示符的操作方法：
- en: '[PRE14]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This is how to do it using macOS: `lsof -i :<PortNumber> : kil``l -9 <PID>`'
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '这是使用 macOS 的操作方法：`lsof -i :<端口号> : kill -9 <进程ID>`'
- en: 'Problem: MODULE_NOT_FOUND'
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：MODULE_NOT_FOUND
- en: '`Path` environmental variable.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`Path` 环境变量。'
- en: '**Solution**: Add the node path to the system variables.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：将节点路径添加到系统变量中。'
- en: '**Cause #2**: Packages installed from Command Prompt without Local Admin rights'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因 #2**：使用命令提示符安装且没有本地管理员权限的包'
- en: '**Solution**: Install from PowerShell with Admin rights (Windows only):'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：使用管理员权限从 PowerShell 安装（仅限 Windows）：'
- en: '![](img/B19395_16_4.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19395_16_4.jpg)'
- en: Figure A.4 –Different types of shells from the VS Code Terminal window
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A.4 –VS Code 终端窗口中的不同类型壳
- en: 'Get the node path type as shown in the following code and subsequent figure:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 获取节点路径类型，如下代码和后续图所示：
- en: '[PRE15]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Figure A.5 –How to get the path to the node program manager](img/B19395_16_5.jpg)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![图 A.5 –如何获取节点程序管理器的路径](img/B19395_16_5.jpg)'
- en: Figure A.5 –How to get the path to the node program manager
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A.5 –如何获取节点程序管理器的路径
- en: 'Add the path to the `path` system variable (Windows only):'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 将路径添加到 `path` 系统变量中（仅限 Windows）：
- en: '![Figure A.6 –Checking the npm path is in the Windows environment variable](img/B19395_16_6.jpg)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![图 A.6 –检查 npm 路径是否在 Windows 环境变量中](img/B19395_16_6.jpg)'
- en: Figure A.6 –Checking the npm path is in the Windows environment variable
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A.6 –检查 npm 路径是否在 Windows 环境变量中
- en: Do not forget to restart Visual Studio Code!
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记重新启动 Visual Studio Code！
- en: 'Problem: Error: Could not execute “run” due to missing configuration, file
    “C:\repos\wdio\test\wdio.conf.ts” not found! Would you like to create one?'
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：错误：由于缺少配置，无法执行“运行”，找不到文件“C:\repos\wdio\test\wdio.conf.ts”！您希望创建一个吗？
- en: 'This error is shown here:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 此错误在此处显示：
- en: '![](img/B19395_16_7.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19395_16_7.jpg)'
- en: Figure A.7 –TypeScript and JavaScript projects store the wdio.config files in
    different folders
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A.7 –TypeScript 和 JavaScript 项目在不同的文件夹中存储 wdio.config 文件
- en: '`wdio.conf.js` path is incorrect under `scripts` in the `package.json` file.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `package.json` 文件中的 `scripts` 下的 `wdio.conf.js` 路径不正确。
- en: '**Solution**: Check whether tests are being launched with incorrect paths or
    extensions:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：检查测试是否使用错误的路径或扩展名启动：'
- en: '[PRE16]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`package.json` file. In this example, semicolons will generate the error, but
    double ampersands will not:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 文件。在此示例中，分号将生成错误，但双 ampersands 不会：'
- en: '[PRE17]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Solution**: Replaced semi-colon with double ampersands'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：将分号替换为双 ampersands'
- en: '[PRE18]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Problem: “report does not exist” when running an Allure report'
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：运行 Allure 报告时出现“report does not exist”
- en: '`allure-results` path.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`allure-results` 路径。'
- en: '**Solution**: Add the result path.'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：添加结果路径。'
- en: '[PRE19]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`package.json` and/or `wdio.conf.ts` files.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 和/或 `wdio.conf.ts` 文件。'
- en: '`package` and `wdio.conf.ts`.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`package` 和 `wdio.conf.ts`。'
- en: 'Add a report shortcut to the `package.json` file:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 将报告快捷方式添加到 `package.json` 文件中：
- en: '[PRE20]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Configure Allure to `reporters`:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Allure 配置为 `reporters`：
- en: '[PRE21]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Problem: “[P]lugin “allure” reporter, neither as wdio scoped package “@wdio/allure-reporter”
    nor as community package “wdio-allure-reporter”. Please make sure you have it
    installed!”'
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“[P]lugin “allure” reporter，既不是 wdio 作用域包 “@wdio/allure-reporter” 也不是社区包
    “wdio-allure-reporter”。请确保您已安装！”
- en: '**Cause**: Allure configuration without first adding the Allure plugin.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：未先添加 Allure 插件而进行的 Allure 配置。'
- en: '**Solution**: Install Allure:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：安装 Allure：'
- en: '[PRE22]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Problem: TypeError: Cannot read properties of undefined (reading ‘open’)'
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：TypeError：无法读取未定义的属性（读取“open”）
- en: '**Cause**: Failed TypeScript installation. This occurs when you try to access
    a property or a method on a variable that stores an undefined value.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：TypeScript 安装失败。这发生在您尝试访问存储未定义值的变量的属性或方法时。'
- en: '**Solution**: Add missing package'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：添加缺失的包'
- en: '[PRE23]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Problem: Cannot read properties of undefined (reading ‘setWindowSize’)'
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：Cannot read properties of undefined (reading ‘setWindowSize’)
- en: '`browser` reference in `webdriverio` changed to `Browser` when migrating from
    CommonJS to ESNext.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在从 CommonJS 迁移到 ESNext 时，`webdriverio` 中的 `browser` 引用更改为 `Browser`。
- en: '`wdio.conf.ts`, replace the following:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`wdio.conf.ts`，替换以下内容：'
- en: '[PRE24]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Problem: A service failed in the ‘onPrepare’ hookSevereServiceError: Couldn’t
    start Chromedriver: timeout. Please check if port 9515 is in use!'
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：在‘onPrepare’钩子中服务失败SevereServiceError：无法启动 Chromedriver：超时。请检查端口号 9515 是否被占用！
- en: '**Cause**: A JavaScript Debug Shell is stopped at a breakpoint blocking a run
    from another shell from using the port.'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：JavaScript调试Shell在断点处停止，阻止另一个shell使用该端口。'
- en: '**Solution**: Stop the running debug shell with Ctrl+C.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：使用Ctrl+C停止正在运行的调试Shell。'
- en: 'Problem: “Cannot find name ‘describe’” and underlined in red'
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“找不到名称‘describe’”并以下划线标红
- en: 'Problem: “Cannot find name ‘it’”'
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“找不到名称‘it’”
- en: 'Problem: “Cannot find name ‘expect’. Do you need to install type definitions
    for a test runner?” but the test still runs.'
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“找不到名称‘expect’。您需要为测试运行器安装类型定义吗？”但测试仍然运行。
- en: '**Cause**: The Jasmine type definition is missing or incorrect.'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：Jasmine类型定义缺失或不正确。'
- en: '`tsconfig.json` file, change `jasmine` to `jasmine-framework` and restart the
    IDE:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在`tsconfig.json`文件中，将`jasmine`改为`jasmine-framework`并重新启动IDE：
- en: '[PRE25]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`jasmine` to the compiler options | types in the `tsconfig.json` file:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`jasmine`到编译器选项|类型在`tsconfig.json`文件中：'
- en: '[PRE26]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '**Cause #2**: ESLint or TypeScript Debugger is out of date or disabled.'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因 #2**：ESLint或TypeScript调试器过时或已禁用。'
- en: '**Solution**: Activate or update **Extensions**.'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：激活或更新**扩展**。'
- en: '**Cause #3**: Framework is not installed correctly.'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因 #3**：框架未正确安装。'
- en: '**Solution**: Reinstall Jasmine, Mocha, or Jest.'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：重新安装Jasmine、Mocha或Jest。'
- en: 'Problem: “An import path can only end with a ‘.ts’ extension when ‘allowImportingTsExtensions’
    is enabled.ts(5097)”'
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“当启用`allowImportingTsExtensions`时，导入路径只能以`.ts`扩展名结束.ts(5097)”
- en: '`tsconfig.json` file must be instructed to allow the importing of files with
    the `.``ts` extension.'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`tsconfig.json`文件必须指示允许导入具有`.ts`扩展名的文件。'
- en: '`tsconfig.json` file:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`tsconfig.json`文件：'
- en: '[PRE27]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Problem: browser.debug() generates “Failed to read descriptor from node connection:
    A device attached to the system is not functioning.”'
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：browser.debug()生成“无法从节点连接读取描述符：连接到系统的设备未正常工作。”
- en: '**Cause**: Benign issue.'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：良性问题。'
- en: '`logLevel` from `info` to `warn`.'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 将`logLevel`从`info`更改为`warn`。
- en: 'Problem: Element implicitly has an ‘any’ type because type ‘typeof globalThis’
    has no index signature'
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：元素隐式具有‘any’类型，因为类型‘typeof globalThis’没有索引签名
- en: '`any` type'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`any`类型'
- en: '`:any`.'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '`:any`。'
- en: 'Problem: Cannot find type definition file for ‘jasmine’'
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：找不到‘jasmine’的类型定义文件
- en: '`File` `type missing`'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`File` `类型缺失`'
- en: '**Solution #1**: Install the Node types by running the following commands in
    the terminal:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案 #1**：在终端中运行以下命令安装Node类型：'
- en: '[PRE28]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Delete the `node-modules` folder and `yarn.lock` and rerun as follows:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 删除`node-modules`文件夹和`yarn.lock`，然后按以下方式重新运行：
- en: '[PRE29]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Problem: “Execution of 0 workers” No tests get executed.'
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“执行0个工作者”没有测试被执行。
- en: '`capabilities:` in `wdio.config.ts`.'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`capabilities:`在`wdio.config.ts`中。'
- en: '**Solution**: Make sure capabilities are correctly set:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：确保能力设置正确：'
- en: '[PRE30]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Problems: Cannot find name ‘browser’ and Cannot find name ‘$’'
  id: totrans-396
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：找不到名称‘browser’和找不到名称‘$’
- en: '`$` shortcut not added to the class.'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`$`快捷键未添加到类中。'
- en: '**Solution: Add browser and $ objects to** **the class**'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：将浏览器和$对象添加到**类**'
- en: '`import {browser, $}` `from wdio/globals`'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`import {browser, $}` `from wdio/globals`'
- en: 'Problem: Property ‘toBeExisting’ does not exist on type'
  id: totrans-400
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：属性‘toBeExisting’在类型中不存在
- en: '`@wdio/globals` is missing or not listed first in `tsconfig.json` (WDIO version
    8+):'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`@wdio/globals`缺失或在`tsconfig.json`中未列为第一项（WDIO版本8+）：'
- en: '[PRE31]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '`@wdio/sync` with `@wdio/types`.'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`@wdio/sync`与`@wdio/types`。'
- en: '**Cause #2**: Missing parenthesis:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因 #2**：缺少括号：'
- en: '[PRE32]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '**Solution #2**: Add parenthesis:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案 #2**：添加括号：'
- en: '[PRE33]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Problem: ERR! [Error: EACCES: permission denied (Mac OSX)'
  id: totrans-408
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：ERR！[错误：EACCES：权限被拒绝（Mac OSX）
- en: '`npm` does not have access rights.'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '`npm`没有访问权限。'
- en: '**Solution**: Give user access rights with these commands:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：使用以下命令给予用户访问权限：'
- en: '[PRE34]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Problem: ERROR @wdio/selenium-standalone-service: Error: not found: java'
  id: totrans-412
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：在`wdio/selenium-standalone-service`中错误：未找到：java
- en: '`selenium-standalone-service` but the Java SDK is not installed.'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '`selenium-standalone-service`但Java SDK未安装。'
- en: '**Solution**: Install the Java SDK’s latest version and restart the shell.'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：安装Java SDK的最新版本并重新启动shell。'
- en: 'Problem: “ECONNREFUSED 127.0.0.1:9515” a service failed in the ‘onPrepare’
    hook tcp-port-used'
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“ECONNREFUSED 127.0.0.1:9515”在‘onPrepare’钩子中服务失败 tcp-port-used
- en: '**Cause #1**: This can occur when connecting to a localhost that is not running.'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因 #1**：当连接到未运行的localhost时可能会发生这种情况。'
- en: '**Solution #1**: Close the Bash shell and restart.'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案 #1**：关闭Bash shell并重新启动。'
- en: '**Solution #2**: Try the ZSH shell instead.'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案 #2**：尝试使用ZSH shell。'
- en: '**Possible cause #2**: Secure client connection has disconnected.'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '**可能原因 #2**：安全客户端连接已断开。'
- en: '**Solution**: Reconnect to the client application.'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：重新连接到客户端应用程序。'
- en: '**Possible cause #3**: Out-of-date dependencies.'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '**可能原因 #3**：依赖项过时。'
- en: '**Solution**: Update the dependencies:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：更新依赖项：'
- en: '[PRE35]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Problem: Error: Cannot find module ‘C:\Program Files\nodejs\node_modules\npm\bin\npm-cli.js’'
  id: totrans-424
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：错误：找不到模块‘C:\Program Files\nodejs\node_modules\npm\bin\npm-cli.js’。
- en: '`import` statement is missing a file extension:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '`import` 语句缺少文件扩展名：'
- en: '**Solution**: Add import statement'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：添加导入语句。'
- en: '[PRE36]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Problem: “Note: Package.json must be actual JSON, not just JavaScript”'
  id: totrans-428
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“注意：package.json 必须是实际的 JSON，而不仅仅是 JavaScript”。
- en: '`,`) at the end of the item list.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目列表末尾添加 ``,`）。
- en: '**Solution**: Remove the extra comma at the end of the list.'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：删除列表末尾的额外逗号。'
- en: 'Problem: Protocol error (Runtime.callFunctionOn) target closed'
  id: totrans-431
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：协议错误（Runtime.callFunctionOn）目标已关闭。
- en: '`await`. Browser closed during element interaction.'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '`await`。在元素交互期间浏览器关闭。'
- en: '`await` to calls to `async` methods.'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `await` 调用 `async` 方法。
- en: 'Problem: “unexpected token” in tsconfig.json'
  id: totrans-434
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：在 tsconfig.json 中出现“意外的标记”。
- en: '**Cause**: Mismatched curly brackets. The entire file may be marked as invalid
    in VS Code (macOS).'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：括号不匹配。整个文件可能在 VS Code（macOS）中被标记为无效。'
- en: '**Solution**: Fix mismatched brackets and save the file.'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：修复不匹配的括号并保存文件。'
- en: 'Problem: “TypeError: elem[prop] is not a function”'
  id: totrans-437
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“TypeError：elem[prop] 不是一个函数”。
- en: '**Cause**: Mistyped custom method, as in this example:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：像这个例子中一样，输入了自定义方法。'
- en: '[PRE37]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '**Solution**: Fix the mistyped method name:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：修复输入错误的方法名：'
- en: '[PRE38]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Problem: “ServerServiceError in “onPrepare” Cannot find package ‘chromedriver’'
  id: totrans-442
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“在“onPrepare”中发生 ServerServiceError：找不到包‘chromedriver’”。
- en: '`chromedriver` and `wdio-chromedriver-service` are installed.'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '`chromedriver` 和 `wdio-chromedriver-service` 已安装。'
- en: '`chromedriver` service from the `package.json` file,'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `package.json` 文件中获取 `chromedriver` 服务。
- en: '`"chromedriver": "^x.x.x"`, and the `wdio.conf.ts` file:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '`"chromedriver": "^x.x.x"`，以及 `wdio.conf.ts` 文件：'
- en: '[PRE39]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Problem: Property ‘{functionName}’ does not exist on type ‘({functionType<{argName>})
    => void’'
  id: totrans-447
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：属性‘{functionName}’在类型‘({functionType<{argName>}) => void’上不存在。
- en: 'Here is an example:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE40]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '`expect` library is not imported from a source.'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '`expect` 库未从源导入。'
- en: '**Solution**: Add import statement'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：添加导入语句。'
- en: '`import {expect}` `from ''expect-webdriverio'';`'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '`import {expect} from ''expect-webdriverio'';`'
- en: Problem “Property ‘addCommand’ does not exist on type ‘Browser’.” (macOS)
  id: totrans-453
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“属性‘addCommand’在类型‘Browser’上不存在。”（macOS）。
- en: '**Cause**: Benign VS Code error. The code may still work.'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：良性的 VS Code 错误。代码可能仍然可以工作。'
- en: '`// @``ts-ignore` directive.'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '`// @ts-ignore` 指令。'
- en: 'Problem: ConfigParser: pattern ./test/specs/**/*.ts did not match any file.'
  id: totrans-456
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：ConfigParser：模式 ./test/specs/**/*.ts 未匹配任何文件。
- en: '`tsconfig` or `wdio.config` files exist in the `/``test` folder.'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '`tsconfig` 或 `wdio.config` 文件存在于 `/test` 文件夹中。'
- en: '`tsconfig` and `wdio.config` files to the project root working directory where
    the `package.json` file resides.'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `tsconfig` 和 `wdio.config` 文件添加到项目根工作目录，其中包含 `package.json` 文件。
- en: If calling `wdio` from `npm`, the pattern is relative to the directory from
    which `package.json` resides.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从 `npm` 调用 `wdio`，模式相对于 `package.json` 所在的目录。
- en: 'Make sure that `tsNodeOpts` has the correct `project` path:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 确保tsNodeOpts具有正确的`project`路径：
- en: '[PRE41]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Problem: Error: Timeout - Async function did not complete within 10000ms (set
    by jasmine.DEFAULT_TIMEOUT_INTERVAL)'
  id: totrans-462
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：错误：超时 - 异步函数未在 10000ms 内完成（由 jasmine.DEFAULT_TIMEOUT_INTERVAL 设置）。
- en: '`wdio.conf.ts` contains `jasmineNodeOpts`.'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '`wdio.conf.ts` 包含 `jasmineNodeOpts`。'
- en: '`jasmineOpts`.'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '`jasmineOpts`。'
- en: 'Problem: Error: Error: Couldn’t find page handle'
  id: totrans-465
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：错误：找不到页面句柄。
- en: '**Cause**: Jasmine timed out the test'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：Jasmine 超时了测试。'
- en: '**Solution**: Set the Jasmine default timeout interval to higher than 10,000:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：将 Jasmine 默认超时间隔设置为高于 10,000：'
- en: '[PRE42]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Problem: This expression is not callable. Type ‘void’ has no call signatures.ts
    Are you missing a semicolon?'
  id: totrans-469
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：此表达式不可调用。类型‘void’没有调用签名.ts 你是否遗漏了分号？
- en: '**Cause**: Unknown'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：未知。'
- en: '**Solution**: Add a semicolon:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：添加分号：'
- en: '[PRE43]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Problem: “File is not a module”'
  id: totrans-473
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“文件不是模块”。
- en: '`export` keyword in the module file:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 模块文件中的 `export` 关键字：
- en: '[PRE44]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '`export` keyword:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '**导出** 关键字：'
- en: '[PRE45]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Problem: “Couldn’t find page handle”'
  id: totrans-478
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“找不到页面句柄”。
- en: '**Cause**: Browser closed.'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：浏览器关闭。'
- en: '`await` when calling an `async()` method.'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 `async()` 方法时使用 `await`。
- en: 'Problem: “Error: {pageName} is not defined”'
  id: totrans-481
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：“错误：{pageName} 未定义”。
- en: '`class` and `export default new` do not match.'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '`class` 和 `export default new` 不匹配。'
- en: '`Error: SecurePage is` `not defined`'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 错误：“SecurePage 未定义”。
- en: '[PRE46]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '`Solution: change the class and export name` `to match.`'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：将类和导出名称更改为匹配。'
- en: '[PRE47]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Problem: Argument of type ‘ChainablePromiseElement<Element>’ is not assignable
    to parameter of type ‘Element’.'
  id: totrans-487
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：类型为‘ChainablePromiseElement<Element>’的参数不能分配给类型为‘Element’的参数。
- en: '`await`:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '`await`：'
- en: '[PRE48]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '`await` for `Element`:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '`await` 用于 `Element`：'
- en: '[PRE49]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Problem: Unable to delete or modify files or folders in the WebdriverIO project'
  id: totrans-492
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：无法删除或修改 WebdriverIO 项目的文件或文件夹
- en: '**Cause**: The project was created with Admin rights, which the user account
    has not been granted.'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：项目是用管理员权限创建的，而用户账户没有获得权限。'
- en: '![Figure A.8 –Permissions for repos](img/B19395_16_8.jpg)'
  id: totrans-494
  prefs: []
  type: TYPE_IMG
  zh: '![图 A.8 – 仓库权限](img/B19395_16_8.jpg)'
- en: Figure A.8 –Permissions for repos
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A.8 – 仓库权限
- en: '**Solution**: Give the user account full control of the file and folders (Windows
    only).'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：给用户账户完全控制文件和文件夹的权限（仅限 Windows）。'
- en: 'Problem: EJSONPARSE Unexpected token in JSON while parsing Failed to parse
    JSON data'
  id: totrans-497
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：在解析 JSON 时遇到意外的令牌 EJSONPARSE
- en: '`package.json` file.'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 文件。'
- en: '`json` file for good formatting.'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '`json` 文件用于良好的格式化。'
- en: 'Problem: A long string of gibberish garbage characters is added to the wdio.config.ts
    file when running in JavaScript Debug Terminal in Windows'
  id: totrans-500
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题：在 Windows 的 JavaScript 调试终端中运行时，wdio.config.ts 文件中添加了一长串乱码垃圾字符
- en: '![Figure A.9 – Gibberish string of characters](img/B19395_16_9.jpg)'
  id: totrans-501
  prefs: []
  type: TYPE_IMG
  zh: '![图 A.9 – 乱码字符字符串](img/B19395_16_9.jpg)'
- en: Figure A.9 – Gibberish string of characters
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A.9 – 乱码字符字符串
- en: '**Cause**: Global log function declared after use in wdio.config.ts file.'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：在 wdio.config.ts 文件中使用后声明的全局日志函数。'
- en: '**Solution**: Move any global functions declarations to the top of the wdio.config.ts
    file before calls any initial calls.'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：在调用任何初始调用之前，将任何全局函数声明移动到 wdio.config.ts 文件的顶部。'
- en: '**Caution for Windows**: Beware of limitations of long file paths:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows 警告**：注意长文件路径的限制：'
- en: '![Figure A.10 – Caution](img/B19395_16_10.jpg)'
  id: totrans-506
  prefs: []
  type: TYPE_IMG
  zh: '![图 A.10 – 警告](img/B19395_16_10.jpg)'
- en: Figure A.10 – Caution
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A.10 – 警告
- en: '**Cause**: Deep path to the project:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '**原因**：项目深度路径：'
- en: '[PRE50]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '**Solution**: Follow the **KISS** example and **Keep** **It Simple**:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**：遵循 **KISS** 示例并 **保持** **简单**：'
- en: '`C:\repos\wdio\test\wdio.conf.ts`'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '`C:\repos\wdio\test\wdio.conf.ts`'
- en: Yarn and Node Package Manager (npm), Node Version Manager (nvm), and Node Package
    Executor (npx) Shell command cheat sheet
  id: totrans-512
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Yarn 和 Node 包管理器 (npm)、Node 版本管理器 (nvm) 和 Node 包执行器 (npx) Shell 命令速查表
- en: 'This is how to install `yarn` and Node.js:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何安装 `yarn` 和 Node.js 的：
- en: '[PRE51]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: What is the path to Node.js?
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 的路径是什么？
- en: '[PRE52]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'This is how to install a new Node version:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何安装新的 Node 版本的：
- en: '[PRE53]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'This is how to change to a different Node version:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何切换到不同的 Node 版本的：
- en: '[PRE54]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: What versions of Node are installed?
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了哪些版本的 Node？
- en: '[PRE55]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: What Node.js, npm, and nvm versions are currently active?
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 当前激活的 Node.js、npm 和 nvm 版本是什么？
- en: '[PRE56]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'What versions of Node are available? npm has an undocumented `show` command:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的 Node.js 版本有哪些？npm 有一个未记录的 `show` 命令：
- en: '[PRE57]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: What versions of the WebdriverIO package are available?
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的 WebdriverIO 包版本有哪些？
- en: '[PRE58]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: What versions of the Jasmine package are available?
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的 Jasmine 包版本有哪些？
- en: '[PRE59]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: What Node packages are installed and what is extraneous or invalid?
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 已安装哪些 Node 包以及哪些是多余的或无效的？
- en: '[PRE60]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'This is how to remove extraneous node packages:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何删除多余的 node 包的：
- en: '[PRE61]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: What node packages are installed at the global level?
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 在全局级别安装了哪些 node 包？
- en: '[PRE62]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This is how to initialize WebdriverIO:'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何初始化 WebdriverIO 的：
- en: '[PRE63]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'This is how to explicitly execute all `wdio` tests:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何显式执行所有 `wdio` 测试的：
- en: '[PRE64]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'This is how to implicitly execute a script from the `package.json` file:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何从 `package.json` 文件中隐式执行脚本的：
- en: '[PRE65]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'This is how to explicitly execute one `wdio` TypeScript test:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如何显式执行一个 `wdio` TypeScript 测试的：
- en: '[PRE66]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Reference links
  id: totrans-545
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考链接
- en: 'The successful development of this book owes much to the invaluable contributions
    of several key resources. These provided the foundational knowledge, insightful
    perspectives, and essential data required to craft a comprehensive and insightful
    work that serves as a valuable addition to the field. Their role in the book’s
    creation is indeed pivotal, reflecting the collaborative effort that brought this
    project to fruition:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的成功开发在很大程度上归功于几个关键资源的宝贵贡献。这些提供了构建全面且有洞察力的作品所需的基础知识、见解和关键数据，该作品是该领域的宝贵补充。他们在本书创作中的作用确实是关键的，反映了将此项目付诸实践的合作努力：
- en: 'WebdriverIO:'
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebdriverIO：
- en: '[https://webdriver.io/](https://webdriver.io/)'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://webdriver.io/](https://webdriver.io/)'
- en: 'yarn:'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: yarn：
- en: '[https://classic.yarnpkg.com/en/](https://classic.yarnpkg.com/en/)'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://classic.yarnpkg.com/en/](https://classic.yarnpkg.com/en/)'
- en: 'npm:'
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npm：
- en: '[https://www.npmjs.com/](https://www.npmjs.com/)'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.npmjs.com/](https://www.npmjs.com/)'
- en: 'node:'
  id: totrans-553
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: node：
- en: '[https://nodejs.org/en](https://nodejs.org/en)'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://nodejs.org/en](https://nodejs.org/en)'
- en: 'nvm:'
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: nvm：
- en: '[https://github.com/nvm-sh/nvm/blob/master/README.md](https://github.com/nvm-sh/nvm/blob/master/README.md)'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/nvm-sh/nvm/blob/master/README.md](https://github.com/nvm-sh/nvm/blob/master/README.md)'
- en: 'Allure:'
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Allure:'
- en: '[https://allurereport.org/](https://allurereport.org/)'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://allurereport.org/](https://allurereport.org/)'
- en: 'Jenkins:'
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Jenkins:'
- en: '[https://www.jenkins.io/download/](https://www.jenkins.io/download/)'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.jenkins.io/download/](https://www.jenkins.io/download/)'
- en: 'Lambdatest:'
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Lambdatest:'
- en: '[https://www.lambdatest.com/](https://www.lambdatest.com/)'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.lambdatest.com/](https://www.lambdatest.com/)'
- en: 'Circle CI:'
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Circle CI:'
- en: '[https://circleci.com/](https://circleci.com/)'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://circleci.com/](https://circleci.com/)'
- en: 'klassi-js:'
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'klassi-js:'
- en: '[https://github.com/klassijs/klassi-js](https://github.com/klassijs/klassi-js)'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://github.com/klassijs/klassi-js](https://github.com/klassijs/klassi-js)'
- en: 'SelectorsHub: [https://selectorshub.com/](https://selectorshub.com/)'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SelectorsHub: [https://selectorshub.com/](https://selectorshub.com/)'
- en: 'Testing sites:'
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试网站：
- en: '[https://candymapper.com/](https://candymapper.com/)'
  id: totrans-569
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://candymapper.com/](https://candymapper.com/)'
- en: '[https://candymapperr2.com/](https://candymapperr2.com/)'
  id: totrans-570
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://candymapperr2.com/](https://candymapperr2.com/)'
- en: '[https://the-internet.herokuapp.com/](https://the-internet.herokuapp.com/)'
  id: totrans-571
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://the-internet.herokuapp.com/](https://the-internet.herokuapp.com/)'
- en: '[https://www.telerik.com/kendo-react-ui](https://www.telerik.com/kendo-react-ui)'
  id: totrans-572
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.telerik.com/kendo-react-ui](https://www.telerik.com/kendo-react-ui)'
- en: 'VS Code:'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'VS Code:'
- en: '[https://code.visualstudio.com/](https://code.visualstudio.com/)'
  id: totrans-574
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://code.visualstudio.com/](https://code.visualstudio.com/)'
- en: 'IntelliJ/Aqua:'
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'IntelliJ/Aqua:'
- en: '[https://www.jetbrains.com/](https://www.jetbrains.com/)'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.jetbrains.com/](https://www.jetbrains.com/)'
- en: 'Belarc Advisor:'
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Belarc Advisor:'
- en: '[https://www.belarc.com/](https://www.belarc.com/)'
  id: totrans-578
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.belarc.com/](https://www.belarc.com/)'
- en: Epilogue
  id: totrans-579
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结语
- en: The authors extend their warmest wishes to you, the reader, on your transformative
    journey from being a mere mortal to ascending the ranks as a superhuman automation
    engineer. We trust that you have not only acquired technical know-how from this
    book but also relished the exploration of the vibrant world of automation engineering.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 作者向您，亲爱的读者，致以最诚挚的祝福，愿您在从凡人成长为超级自动化工程师的道路上取得突破。我们相信，您不仅从这本书中学到了技术知识，而且也享受了探索自动化工程充满活力的世界的乐趣。
- en: The philosophical underpinnings of many ideas presented here can be traced back
    to the genius of Albert Einstein. His wisdom serves as a constant muse, motivating
    us to embrace the experimental spirit. Einstein famously advised that one shouldn’t
    fear failure, for every failed experiment is but one step closer to success. His
    ethos has colored the pages of this book, encouraging you to continually test,
    adapt, and innovate in your work.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 这里许多想法的哲学基础可以追溯到阿尔伯特·爱因斯坦的智慧。他的智慧始终是我们的灵感之源，激励我们拥抱实验精神。爱因斯坦曾著名地建议，一个人不应害怕失败，因为每一次失败的实验都是向成功迈进的一步。他的理念贯穿了本书的篇章，鼓励您在工作中不断测试、适应和创新。
- en: As you move forward on your professional journey, may you embrace the joy of
    “fooling around and finding out” – that is, of tinkering, experimenting, and sometimes
    failing – in order to make the unexpected discoveries that lead to true mastery.
    Our hope is that you will find great joy and a sense of achievement in this ongoing
    exploration, thereby perpetually enriching your career and personal development.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您在职业道路上的前进，愿您拥抱“玩耍和发现”的乐趣——也就是说，即修补、实验，有时甚至失败——以发现那些通向真正精通的意外发现。我们希望您在这持续的探索中找到极大的乐趣和成就感，从而不断丰富您的职业和个人发展。
- en: Here’s to your journey of becoming not just proficient but truly extraordinary
    in the ever-evolving field of automation engineering. Cheers!
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 祝愿您在自动化工程这个不断发展的领域中不仅成为精通者，而且真正出类拔萃。干杯！
- en: “Go Be Productive!” – Paul M. Grossman
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: “去创造生产力！”——保罗·M·格罗斯曼
- en: “Adapt and thrive, for change is life’s true constant” – Larry C. Goddard
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: “适应并繁荣，因为变化是生活的真正常数”——拉里·C·戈达德
- en: 'Problem: “[P]lugin “allure” reporter, neither as wdio scoped package “@wdio/allure-reporter”
    nor as community package “wdio-allure-reporter”. Please make sure you have it
    installed!”'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 问题：“[P]lugin “allure” reporter，既不是wdio作用域包“@wdio/allure-reporter”，也不是社区包“wdio-allure-reporter”。请确保您已安装它！”
- en: 'Problem: “An import path can only end with a ‘.ts’ extension when ‘allowImportingTsExtensions’
    is enabled.ts(5097)”'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 问题：“只有当启用“allowImportingTsExtensions”时，导入路径才能以‘.ts’扩展名结束.ts(5097)”
- en: 'Problem: A long string of gibberish garbage characters is added to the wdio.config.ts
    file when running in JavaScript Debug Terminal in Windows'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 问题：在Windows的JavaScript调试终端中运行时，wdio.config.ts文件中会添加一长串乱七八糟的垃圾字符
- en: Yarn and Node Package Manager (npm), Node Version Manager (nvm), and Node Package
    Executor (npx) Shell command cheat sheet
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: Yarn 和 Node 包管理器 (npm)、Node 版本管理器 (nvm) 以及 Node 包执行器 (npx) Shell 命令速查表
