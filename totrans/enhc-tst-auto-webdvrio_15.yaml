- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Sentient Cape – Running Tests in a CI/CD Pipeline with Jenkins and LambdaTest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you ever wondered how some superheroes manage to be courtroom lawyers by
    day and crime fighters by night? When do they catch a wink of sleep?
  prefs: []
  type: TYPE_NORMAL
- en: In this final chapter, we will get our WebdriverIO scripts to execute by scheduling
    test executions. This can be accomplished by using an execution pipeline in a
    continuous execution environment to run our jobs that run in a virtualized cloud-based
    environment rather than our local **operating system** (**OS**). Think of this
    as an accessory that seems to have a mind of its own – an ever-vigilant silent
    assistant whose sole purpose is to help out by taking time-consuming tasks off
    your plate, often while you sleep. This is where we’ll cover Jenkins and LambdaTest
    **continuous integration** (**CI**) with cross-OS usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start, let’s recall what was noted back in [*Chapter 1*](B19395_01.xhtml#_idTextAnchor014)
    – automation requires more than average computing resources. Virtualization requires
    even more. We used two machines to write code in this book: a Windows 11 system
    – that is, a **Micro-Star International** (**MSI**) Raider GE76 12UE gaming machine
    purpose-built with 2 TB of SSD drive space and 64 GB of RAM. It has a 12th-generation
    Intel i9-12900H Core CPU with a 2.90 GHz base speed. The CPU is equipped with
    14 cores and supports 20 threads. We also used two Apple MacBook Pros with M1
    chips with a 1TB hard drive using Parallels to virtualize a Windows OS.'
  prefs: []
  type: TYPE_NORMAL
- en: Quick tip – how to profile your PC
  prefs: []
  type: TYPE_NORMAL
- en: You can’t be a good detective without a tool that gives insight into your system
    in one convenient location. The profiler we have used for over 15 years in Windows
    is Belarc Advisor Personal Edition.
  prefs: []
  type: TYPE_NORMAL
- en: We did this just to be sure there was little chance our resources would run
    low, causing random transient issues that might cause false positives. If your
    RAM goes below 15% availability, you will most likely experience issues. If your
    Windows machine has a red dot indicating an upgrade is required, give it the priority
    it deserves.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following main topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What are Jenkins and Slack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a WebdriverIO project with Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting Slack from Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On-demand and scheduled suite runs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of debugging runs with Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CI/CD pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete this chapter, you must meet the following technical requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Install and configure Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure Slack to receive messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify the `wdio.config.ts` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Jenkins job run an individual test and report to Slack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organize tests into categories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Jenkins job to run each category
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organize tests into Sanity, Smoke, and Regression suites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a Jenkins job to run each suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up and configure the jobs to run nightly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual testers can run a parameterized job on demand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the test examples can be found in this book’s GitHub repository at [https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO](https://github.com/PacktPublishing/Enhanced-Test-Automation-with-WebdriverIO).
  prefs: []
  type: TYPE_NORMAL
- en: What are Jenkins and Slack?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the realm of test automation, particularly when working with frameworks such
    as WebdriverIO, Jenkins and Slack hold a significant place due to their functionalities,
    which streamline and enhance the test deployment process. They can be configured
    to send update messages to a Slack channel when the test run has finished. Jenkins
    can schedule test suite runs or they can be launched on demand by any team member.
  prefs: []
  type: TYPE_NORMAL
- en: We will begin this final chapter by preparing for a Jenkins installation.
  prefs: []
  type: TYPE_NORMAL
- en: Installing OpenJDK for Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before installing Jenkins, we need to ensure we have the correct version of
    the Java Development Kit. OpenJDK version 17 should be used and the latest version
    is recommended. The Java 17 SDK can be downloaded from [https://www.oracle.com/java/technologies/downloads/#java17](https://www.oracle.com/java/technologies/downloads/#java17).
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to install Java 17 on Windows is to download and execute the
    MSI file and save it to the default path under the `Program Files` folder. Copy
    the path and add it to the `JAVA_HOME` environmental system variable’s path:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – Adding the path to the system variables in Windows](img/B19395_15_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – Adding the path to the system variables in Windows
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add `%JAVA_HOME%/bin` to the `Path` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – Adding the JAVA_HOME\bin to the Windows Path variable](img/B19395_15_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – Adding the JAVA_HOME\bin to the Windows Path variable
  prefs: []
  type: TYPE_NORMAL
- en: Next, we must confirm Java is installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the command prompt, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – Verifying that version 17 of Java has been installed](img/B19395_15_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – Verifying that version 17 of Java has been installed
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can proceed to install Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Jenkins as a standalone application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*IMPORTANT*: Jenkins will provide a temporary password for an admin account.
    Save this information as we will need it after the installation has been finalized.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Jenkins is fairly straightforward. Download the latest version of
    Jenkins for your Mac, Windows, or Linux OS from [https://www.jenkins.io/download/](https://www.jenkins.io/download/)
    and use the default path for the installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it’s been downloaded, drag the `jenkins.war` file to the desktop. From
    the command prompt, navigate to the desktop and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Select LocalSystem for this example. In the real world, the
    IT DevOps team would install an admin domain user account for security](img/B19395_15_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.4 – Select LocalSystem for this example. In the real world, the IT
    DevOps team would install an admin domain user account for security
  prefs: []
  type: TYPE_NORMAL
- en: 'While the service is installed as LocalSystem, it is recommended to change
    to local or domain user credentials. Next, we must set the port. Use the default
    port of `8080` and test that we get a green checkmark for the assigned port number:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.5 – Using the default port of 8080 and testing that we get a green
    checkmark](img/B19395_15_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.5 – Using the default port of 8080 and testing that we get a green
    checkmark
  prefs: []
  type: TYPE_NORMAL
- en: If the port is blocked, it will need to be opened; otherwise, an alternate open
    port must be assigned.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next page specifies the custom setup features. Leave them as-is and click
    `JAVA_HOME` environmental variable we set in Windows earlier. Otherwise, set the
    path to where JRE was installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.6 – Click Install and Jenkins will be ready](img/B19395_15_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.6 – Click Install and Jenkins will be ready
  prefs: []
  type: TYPE_NORMAL
- en: Our Jenkins server will be now accessible at `https://localhost:8080/` and will
    require the temporary admin password we were provided earlier to be entered and
    then changed for security purposes. The path to the log file where the generated
    credential can be found is listed on the web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jenkins will then ask you if you wish to install the suggested plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.7 – Installing the suggested plugins](img/B19395_15_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.7 – Installing the suggested plugins
  prefs: []
  type: TYPE_NORMAL
- en: 'Continue with the suggested plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.8 – Suggested plugins](img/B19395_15_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.8 – Suggested plugins
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we must create the first admin user’s account credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.9 – Create First Admin User](img/B19395_15_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.9 – Create First Admin User
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Save and Continue**. Jenkins will provide its URL again. Click **Save
    and Continue** one last time. Click **Start Using Jenkins** to be redirected to
    the main page. We recommend that you save this link to your browser’s bookmarks
    bar. Our faithful Sentient Cape is now ready to do our bidding:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.10 – The Jenkins main page](img/B19395_15_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.10 – The Jenkins main page
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can create new projects and jobs and run them on demand or a scheduled
    cadence. With that, it is time to run our first test job.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a WebdriverIO project with Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the main dashboard view, click the **+ New Item** button. Jenkins provides
    us with several project options and organizational tools. **Freestyle project**
    is a streamlined approach to building a job, while **Pipeline** allows more granular
    customization with the Groovy programming language:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.11 – Creating a Freestyle project](img/B19395_15_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.11 – Creating a Freestyle project
  prefs: []
  type: TYPE_NORMAL
- en: 'For our purposes, **Freestyle project** will suffice. Several options will
    be displayed. We will only need a few to get our first test from [*Chapter 2*](B19395_02.xhtml#_idTextAnchor044)
    to be checked out of our GitHub **source control manager** (**SCM**) and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.12 – Adding build steps](img/B19395_15_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.12 – Adding build steps
  prefs: []
  type: TYPE_NORMAL
- en: Under the **Build Steps** section, select **Add a Build step** to execute terminal
    commands. For Mac, select **Execute shell** and for Windows, choose the **Execute
    Windows batch command** option. Using the command prompt, we will navigate to
    the workspace path.
  prefs: []
  type: TYPE_NORMAL
- en: Next, add a `run a npm command` build step. This is required when we run our
    tests in LambdaTest. In this section, we will execute the commands listed in the
    `package.json` file. In this example, we’ll run the tests from [*Chapter 2*](B19395_02.xhtml#_idTextAnchor044)
    with `npm ch2`.
  prefs: []
  type: TYPE_NORMAL
- en: But before that, we need to add one last add-on to support job notifications.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Jenkins plugin for LambdaTest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the Jenkins plugin for LambdaTest, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Manage Jenkins**, then **Manage Plugins**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Available** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `LambdaTest`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a list of plugins; select **LambdaTest**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To install the **LambdaTest** Jenkins plugin, you must select the checkbox
    in front of **LambdaTest**. Once the plugin has been installed, and Jenkins has
    been restarted, you will be able to find the LambdaTest Jenkins plugin under **Installed
    plugins**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.13 – Searching for the LambdaTest Jenkins plugin](img/B19395_15_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.13 – Searching for the LambdaTest Jenkins plugin
  prefs: []
  type: TYPE_NORMAL
- en: Configuring LambdaTest using Jenkins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to configure LambdaTest with Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: On the Jenkins home page, click **Credentials**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Credentials**, click **System**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **System** page, click **Global credentials (Unrestricted) domain**.
    The **Global credentials** page will open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Add Credentials**. The **Add Credentials** page will open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the relevant data in the fields and click **Verify Credentials**. After
    verification, click the **OK** button. Jenkins will generate an ID, which is visible
    on the **Credentials** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save your changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.14 – Adding the necessary credentials to the LambdaTest plugin](img/B19395_15_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.14 – Adding the necessary credentials to the LambdaTest plugin
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve added your credentials, Jenkins will generate an ID. To retrieve
    this ID for LambdaTest Credentials, you must go to the Jenkins home page and click
    on **Credentials** from the left navigation menu.
  prefs: []
  type: TYPE_NORMAL
- en: From the Jenkins home page, click **Credentials** from the left menu. You can
    copy the ID for LambdaTest Credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a freestyle project and job
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the Jenkins dashboard, click `Enhanced Test Automation with WebdriverIO`
    as the name and selecting **Freestyle project**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will display several tabs, including **General**, **Source Code Management**,
    **Build Triggers**, **Build Environment**, **Build**, and **Post-build Actions**.
    We will choose to run using code from our local machine. Advanced users can use
    a cloud-based corporate Jenkins to check out code from a private repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.15 – Setting up custom state-based test runs for manual testers](img/B19395_15_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.15 – Setting up custom state-based test runs for manual testers
  prefs: []
  type: TYPE_NORMAL
- en: To run the build, we need the name of the test and the path to the project directory.
  prefs: []
  type: TYPE_NORMAL
- en: Parameterizing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the job configuration, we will add a parameter that we will pass into our
    automation framework from Jenkins named `JOURNEY`. This will become a system variable
    that our framework expects and parses to determine the path to take for hosting
    or attending a Halloween party. In addition, we have a choice parameter, which
    allows us to pass `dev` or `prod` to the Env system variable. This changes which
    URL will be the landing page for this test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.16 – Setting up a custom state-based journey test for manual testers](img/B19395_15_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.16 – Setting up a custom state-based journey test for manual testers
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will have a slimmed-down version of the state-driven automation tests
    that we built in the previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that even if the tester clears the journey to an empty field, the test
    will still run using the happy path of hosting a party in Zombieton by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.17 – Building a test with parameters using journey decision point
    suggestions](img/B19395_15_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.17 – Building a test with parameters using journey decision point
    suggestions
  prefs: []
  type: TYPE_NORMAL
- en: Our manual testers can now open Jenkins and launch this test with parameters.
    They can pick what kinds of paths they want to take as well as change the environments
    to run against from the **Env** dropdown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this test case completes, we will see the results on our LambdaTest dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.18 – LambdaTest results screen](img/B19395_15_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.18 – LambdaTest results screen
  prefs: []
  type: TYPE_NORMAL
- en: By leveraging a cloud-based automation build platform, we get a lot of advantages.
    First, we don’t need to administer the underlying OS configurations. Second, we
    don’t need to keep track of the versions of the browsers. Finally, we get a nice
    video recording of the test execution, which is far superior to the individual
    screen captures.
  prefs: []
  type: TYPE_NORMAL
- en: All this mystical magic is accomplished with the LambdaTest config file we described
    in [*Chapter 13*](B19395_13.xhtml#_idTextAnchor247).
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the LambdaTest Credentials here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.19 – Adding the LambdaTest credentials](img/B19395_15_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.19 – Adding the LambdaTest credentials
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s see how reporting works in Slack.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting in Slack from Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the final problems of being a superhero is being super vigilant. The
    problem with running a large suite of tests unattended is that we must remember
    to check back in occasionally to see if they have been completed. Setting a reminder
    can break our concentration on other work. We might be so wrapped up with other
    tasks that we might not get back to the results until several hours after the
    task has been completed. To be efficient, we could send alert messages to our
    email inbox, but they might get ignored if our inbox gets blasted with incoming
    messages. A better solution is to send updates to a team messaging platform such
    as Slack. This is a three-step process – that is, adding a Plugin for Jenkins,
    adding an app in Slack, and adding a Jenkins post-build step. The first step is
    to install the necessary add-ons in both Slack and Jenkins to indicate the Slack
    channel where messages will appear.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Slack notifications plugin to Jenkins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Navigate to **Manage Jenkins** | **Plugins** | **Available**. Then, search
    for and install the **Slack** **Notification** plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.20 – Searching for the Slack Notification plugin](img/B19395_15_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.20 – Searching for the Slack Notification plugin
  prefs: []
  type: TYPE_NORMAL
- en: Once the plugin has been installed, restart Jenkins and log in. The **Slack
    Notification** plugin will now appear in the **Installed Plugins** tab. Our next
    step is to set up Slack integration.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Jenkins CI app to Slack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this, we must add the Slack Jenkins CI application. Browse **Apps** and
    search for and add **Jenkins CI**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.21 – The Jenkins CI plugin for Slack, which will receive messages
    from Jenkins](img/B19395_15_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.21 – The Jenkins CI plugin for Slack, which will receive messages
    from Jenkins
  prefs: []
  type: TYPE_NORMAL
- en: This app will ask you to create a Slack channel or select an existing one. In
    this example, we will create a `jenkins-jobs` channel for notifications to appear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our final step is to get the token to allow these two products to communicate.
    Navigate to the Slack app directory and add the Jenkins CI integration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.22 – A notification in the Slack channel confirming that the integration
    was completed](img/B19395_15_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.22 – A notification in the Slack channel confirming that the integration
    was completed
  prefs: []
  type: TYPE_NORMAL
- en: With the integration added, click the **Jenkins** link in the message to get
    the token.
  prefs: []
  type: TYPE_NORMAL
- en: 'This token is available from the Jenkins dashboard under **Manage Jenkins**
    | **Manage Plugins**, under the **Available** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.23 – Slack settings](img/B19395_15_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.23 – Slack settings
  prefs: []
  type: TYPE_NORMAL
- en: Copy the token and workspace into the Jenkins app’s settings and click **Save
    Settings**.
  prefs: []
  type: TYPE_NORMAL
- en: Next, return to Slack. Enter the workspace on the **Dashboard** | **System**
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the credentials and some secret text. Enter the secret. The ID is
    optional. Finally, click **Test Connection**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.24 – A sample message will appear in Slack](img/B19395_15_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.24 – A sample message will appear in Slack
  prefs: []
  type: TYPE_NORMAL
- en: Our connections are now complete and have been tested. Our final step is to
    get Jenkins to send informative messages back to Slack.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the post-build Slack action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the **Post-build Actions** area of our job, select **Slack Notifications**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.25 – Selecting Slack Notifications](img/B19395_15_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.25 – Selecting Slack Notifications
  prefs: []
  type: TYPE_NORMAL
- en: 'Checkmark **Notify Success** and **Notify Every Failure**. Then, click **Save**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.26 – Completed jobs with pass and fail states in Jenkins reported
    to Slack](img/B19395_15_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.26 – Completed jobs with pass and fail states in Jenkins reported
    to Slack
  prefs: []
  type: TYPE_NORMAL
- en: Once a build is completed, updates are automatically sent to the designated
    Slack channel. This minimizes the delay between the job’s completion and the start
    of the result analysis. In turn, this efficiency optimizes the use of time for
    all automation team members.
  prefs: []
  type: TYPE_NORMAL
- en: On-demand and scheduled suite runs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We try to have our tests run as often as possible. Sometimes, this can impact
    our environment, which then blocks the manual test team from doing their work.
  prefs: []
  type: TYPE_NORMAL
- en: Other times, this process is quiet and uneventful. There was a project manager
    who once asked if we could run automated test suites more often than just at the
    end of the sprint release cycle. I happily showed our histogram from our Allure
    reports and assured everyone the tests ran on a nightly cadence. We reviewed those
    results every morning for unexpected failures and state changes. As we wrote new
    tests and maintained others, we also noted that nearly every test was executed
    multiple times a day to ensure they impacted each other.
  prefs: []
  type: TYPE_NORMAL
- en: Types of debugging runs with Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to have a test that checks the reliability of the automation framework
    functions that we’ve written throughout this book. I used to refer to this as
    a unit test of the framework functionality. However, this caused confusion with
    the application developer team. They heard the term *unit* and assumed I was proposing
    to take on the unit testing in their code, a job that is always their responsibility.
    So, to avoid further confusion, we will refer to one test as the framework Sanity
    test.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common types of jobs are **Sanity**, **Smoke**, and **Regression**:'
  prefs: []
  type: TYPE_NORMAL
- en: The `SetValueAdv()` by entering credentials pulled from the Secrets storage
    into input field elements and exercising `ClickAdv()` by clicking the `pageSync()`
    and selecting from a list with `SelectAdv()`. It must include at least one validation
    with `AssertAdv()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This should not be a lengthy end-to-end test, but it could be the initial steps
    of one. While this is a job that could be run after every new framework commit,
    the test itself should also be included with every suite. If it were to fail,
    it would indicate that something basic has broken that needs to be investigated
    immediately.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Smoke** tests comprise a collection of tests that cover roughly 10% of the
    entire suite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regression** is the remaining 90% of the tests in the suite, excluding the
    Smoke tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, there are other categories of tests that we generally set up to run
    nightly or weekly.
  prefs: []
  type: TYPE_NORMAL
- en: Additional suite categories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s look at the additional suite categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Build Verification Suite**: A subset of tests that have had defects written
    against them in the past. Often, this is 1/10th of the Smoke suite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API Suite**: A quick way to validate API calls with payloads, validating
    responses and response codes. Again, this is a small quick set of tests that have
    no GUI interaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Long test suite**: Some tests just take an extended amount of time to complete.
    Let them have fun on their own, allowing the Smoke and Regression tests to finish
    sooner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Single Test Suite**: This allows the user to request a custom subset of all
    tests combined. This might be Product Returns, Searches, and Saving Shopping Carts.
    This allows the test team to focus on only one area without having to search through
    multiple BVS, Smoke, and Regression runs. It can also run tests by test case name
    if it includes a Jira number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fail**: A list of tests that are marked as having failed recently and removed
    from the other suites. This suite can be a quick way to see if a single fix has
    resolved multiple failing tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linking Allure reports to a Jenkins run
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your Jenkins job configuration, under **Post-Build Actions**, add a **Publish
    Allure** **Report** action.
  prefs: []
  type: TYPE_NORMAL
- en: Configure the **Report Version** and **Report Directory** fields appropriately.
    **Report Directory** should point to the directory where your Allure report files
    are generated.
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**CI/CD** stands for **continuous integration and continuous deployment** (or
    **continuous delivery**). It is a set of practices and tools that are used in
    software development to automate the process of building, testing, and deploying
    software changes. CI is where the developer does frequent code merges to the central
    repository rather than waiting long periods before merging their code. This approach
    helps them identify integration issues early on and ensures that the code base
    is always in a functional state.'
  prefs: []
  type: TYPE_NORMAL
- en: Continuous deployment (or continuous delivery) extends the concept of CI by
    automating the process of deploying software changes to production environments.
    The goal is to have a reliable and automated pipeline that takes code changes
    from the repository, builds it, tests it, and deploys it to the production environments
    without manual intervention.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CI/CD process typically involves the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code integration**: Developers commit their changes to a version control
    system (such as Git) frequently.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Build and test**: The CI/CD system automatically builds the application and
    runs various automated tests to ensure the changes are functioning as expected.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Automated deployment**: Once the build and tests pass successfully, the CI/CD
    system automatically deploys it to a staging or production environment (that is,
    to cloud platforms, containerized environments, and so on).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Continuous monitoring**: Once deployed, the CI/CD system can monitor the
    application’s performance and log any errors or issues.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is continuous testing?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuous testing is the practice of executing automated tests throughout the
    software development life cycle to provide fast and frequent feedback on the quality
    of the code.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, testing was often considered a separate phase that occurred at
    the end of the development cycle. However, with the adoption of Agile and DevOps
    practices, there has been a shift toward integrating testing into every stage
    of the development process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuous testing involves the following five key aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Automated testing**: Continuous testing relies on automated tests to be inclusive
    of unit tests, integration tests, and functional tests. These tests are scripted
    and executed automatically whenever changes are made to the code base and are
    there to ensure that software functionalities work as intended and help catch
    bugs early on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Early and frequent testing**: Continuous testing emphasizes that we test
    early and often. Once code changes are merged into the repository, tests are triggered
    to verify the integrity of the changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test environments**: Continuous testing involves multiple testing environments,
    including local development, testing, and staging environments. These environments
    are used to run tests in a realistic setup, mimicking the production environment
    as closely as possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test data management**: This is all about effectively managing test data.
    This data should be able to cover a wide range of scenarios and user cases. The
    test data should also be easily provisioned and reset to ensure reliable and repeatable
    test executions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous feedback**: This is all about providing immediate feedback on
    the quality of the code changes. Test results are generated automatically, highlighting
    any failures or issues. This feedback helps developers deal with failures/issues
    quickly, ensuring the code base remains stable and reliable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have an idea of what CI is and how to go about it, we need to take
    a look at our pipelines for executing our test suites.
  prefs: []
  type: TYPE_NORMAL
- en: What does a CI/CD pipeline look like?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A CI/CD pipeline is a set of automated steps and tools that enable the CI, testing,
    and deployment of software changes. While the specific implementation of a CI/CD
    pipeline can vary depending on the project and organization, the following subsections
    give a general overview of what a CI/CD pipeline may look like.
  prefs: []
  type: TYPE_NORMAL
- en: Code repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The pipeline starts with a code repository, typically using a version control
    system such as Git. Automation engineers commit their code changes to a GitHub
    or GitLab repository. This might include adding or maintaining existing test cases
    or enhancing the automation framework features.
  prefs: []
  type: TYPE_NORMAL
- en: CI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CI is a software development practice where developers regularly merge their
    code changes into a central repository, preferably multiple times a day. After
    merging, automated builds and tests are run to catch bugs early and ensure that
    the new changes are compatible with the existing code base. The primary goals
    of CI are to improve code quality, detect issues early, and facilitate rapid,
    reliable releases. CI is often integrated with other DevOps practices and tools,
    such as CD, to streamline the development life cycle from coding to deployment.
    Tools such as Jenkins are commonly used to orchestrate the CI process:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code compilation**: When changes are committed, the CI system pulls the latest
    code from the repository and compiles it into executable code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated testing**: The CI system runs a suite of automated tests, including
    unit tests, integration tests, and other types of tests, to verify the correctness
    and functionality of the code changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code quality checks**: The CI system may perform code quality checks, such
    as code linting or static code analysis, to ensure adherence to coding standards
    and best practices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test reports and notifications**: The CI system generates test reports and
    sends notifications to the development team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artifact generation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Artifact generation involves creating digital or physical objects, data, or
    content through automated or computer-assisted processes. If the code passes the
    tests and quality checks, the CI system generates build artifacts, such as compiled
    binaries, libraries, or container images. These artifacts are the result of a
    successful compilation and testing process, including Allure reports and screen
    captures.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the build and tests pass successfully, the CI/CD system automatically deploys
    the changes to a staging or production environment. This step may involve deploying
    to cloud platforms, containerized environments, or other infrastructure configurations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Staging environment**: The artifacts are deployed to a staging environment,
    which closely resembles the production environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Additional testing**: More comprehensive tests, such as performance testing,
    security testing, or user acceptance testing, may be performed in the staging
    environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Approval process**: Depending on the organization’s policies, there may be
    an approval process or manual review before deploying to the production environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CD extends the concept of CI by automating the process of deploying software
    changes to production environments. With CD, the goal is to have a reliable and
    automated pipeline that takes code changes from the repository, builds them, runs
    tests, and deploys them to production environments without manual intervention:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Production environment**: If the staging tests and approvals are successful,
    the artifacts are deployed to the production environment automatically or manually,
    depending on the organization’s deployment strategy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Post-deployment testing**: Additional monitoring and testing (business verification)
    may take place in the production environment to ensure the new changes are functioning
    as expected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous monitoring**: The CI/CD pipeline often includes monitoring tools
    that track the application’s performance, logs, and metrics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous feedback
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Continuous testing provides immediate feedback on the quality of the code changes.
    Test results are generated automatically, highlighting any failures or issues.
    This feedback loop helps developers quickly identify and fix problems, ensuring
    the code base remains stable and reliable:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Notifications and reports**: Throughout the pipeline, notifications, reports,
    and logs are generated and made available to the development team and stakeholders,
    providing visibility into the progress, test results, and deployment status'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Iterative development**: The CI/CD pipeline facilitates an iterative development
    process, where developers can quickly receive feedback on their code changes and
    make necessary adjustments, ensuring continuous improvement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins for CI/CD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jenkins is an excellent tool for setting up a CI/CD pipeline, allowing you to
    automate various stages of your testing life cycle. In a dynamic testing environment,
    especially when working with WebdriverIO, a well-configured CI/CD pipeline can
    significantly boost the efficiency of the testing process.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins can be configured to automatically trigger test suites post a code push,
    which ensures that the test suite is always in sync with the latest code base,
    reducing the potential for issues slipping through and getting into production.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins allows for parallel execution of tests, which significantly reduces
    the test execution time. This is a must-have feature for any testing framework
    that aims to maintain agility and speed in today’s fast-paced development environments.
  prefs: []
  type: TYPE_NORMAL
- en: Docker helps in creating a standardized environment for testing, which is critical
    for ensuring the reliability of your test results. Having a consistent environment
    means your tests will be more reliable and less prone to errors caused by environmental
    inconsistencies.
  prefs: []
  type: TYPE_NORMAL
- en: Docker containers provide an isolated environment for your tests, which is a
    creative solution to avoiding conflicts between different dependencies and system
    configurations. It sidesteps the infamous “it works on my machine” problem, ensuring
    the test automation framework is robust and reliable.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By implementing CI/CD, development teams can streamline their software development
    processes, reduce manual errors, and ensure faster and more reliable delivery
    of new features and bug fixes. It promotes collaboration among team members, improves
    code quality, and enables rapid and frequent releases.
  prefs: []
  type: TYPE_NORMAL
- en: By incorporating continuous testing into the development process, teams can
    identify and address issues early, reduce the risk of defects reaching production,
    and ensure the software meets quality standards. It promotes a culture of quality
    throughout the development team and supports faster and more reliable software
    delivery.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that the specific tools, technologies, and steps involved
    in a CI/CD pipeline can vary depending on the project requirements, technology
    stack, and organization’s preferences. The pipeline can be customized and expanded
    to include additional stages, such as security scanning, performance optimization,
    or even automated rollbacks in case of issues.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, Jenkins and LambdaTest simplify the process of setting up and managing
    CI/CD pipelines, enabling teams to deliver software faster, more reliably, and
    with greater confidence in the quality of their code changes.
  prefs: []
  type: TYPE_NORMAL
- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ultimate Guide to TypeScript Error Messages, Causes, and Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This Appendix covers all the issues the authors encountered while writing this
    book, including (but not limited to) installation, configuration, and runtime
    errors. Each problem is followed by one or more causes, each with a solution.
    Problems with the same solution are grouped together. A good way to use this Appendix
    is to search for a small segment of the error detail copied from the terminal
    window, such as `check` `if port`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: Install default WDIO settings by passing “--yes” parameter still asks
    configuration questions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`--` parameter at the command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`--` to pass the parameter to `wdio`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: Missing script “wdio”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`scripts:` section or missing `wdio` script in `Package.json`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wdio` to the `scripts:` section in the `Package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: “node : The term ‘node’ is not recognized as the name of a cmdlet,
    function, script file, or operable program. Check the spelling of the name, or
    if a path was included, verify that the path is correct and try again.”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause**: Node has not been installed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Install Node.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: ‘wdio’ is not recognized as an internal or external command”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause #1**: The console is not at the correct file path folder.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cause #2**: The supporting packages have not been installed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm i`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Problems:'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Browser launches and immediately closes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “This version of ChromeDriver has not been tested with Chrome version”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Must use import to load ES Module” or “require() of ES modules is not supported”
    (no require code in the project)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chromedriver.exe` version is out of date.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Install missing packages.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: The \node_modules folder is not created when installed in a new WDIO
    project folder.'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Problem: New project install fails with empty directory.'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Problem: Tests suddenly fail to run including the \specs\test.e2e.ts. sample
    test.'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`\node_modules` folder, a `package.json` and a `wdio.conf.ts` file. When the
    child installation is performed in the sub-folder, it will check for pre-existing
    shared resources in the parent folder. This will skip the creation of the `\node_modules`
    folder and potentially overwrite the parent `package.json` and config files. The
    sample `\specs\test.e2e.js` may initially run in this new child folder. However,
    a secondary child project install can overwrite the parent `\node_modules` folders
    and config files further, potentially breaking all projects that reference the
    shared resources, as well as fail to complete the install process.'
  prefs: []
  type: TYPE_NORMAL
- en: '`\node_modules` folder, `package.json`, `wdio.conf.ts` files and `\test` folder
    from the parent folder to the new child project folder. From GitHub, restore the
    last known working `package.json` and `wdio.conf.ts` files from the parent folder
    to the child folder where the tests no longer run. Rebuild with yarn install to
    create the missing `\node_modules` folder. The tests should now run. New project
    installations in child sub-folders should complete to success as well.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: “WARN webdriver: Request encountered a stale element - terminating
    request”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Problem: “TypeError: elem[prop] is not a function”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Problem: Statements execute out of order'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`await` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Solution**: Add the await comand'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: “ERROR @wdio/runner: Error: describe expects a function argument;
    received [object AsyncFunction]”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`async` is in the `describe()` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`async` from the `describe()` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: “Unsupported engine”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](img/B19395_16_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.1 – Results npm package manager indicating required and current node/npm
    versions
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure A.2 – Results yarn package manager indicating expected  and out of
    date current node/npm versions](img/B19395_16_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.2 – Results yarn package manager indicating expected and out of date
    current node/npm versions
  prefs: []
  type: TYPE_NORMAL
- en: '**Cause**: The current version of Node does not match the required version.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Update Node to the correct version. In this example, Node version
    14 is not supported by the WDIO package and must be updated to 16.13, 18.x, or
    higher:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: JavaScript Debug Terminal skips breakpoints'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`import` statements paths'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19395_16_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.3 –Removing the unused Helpers import stopped the breakpoint from skipping
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution #1**: Remove unused imports.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cause #2**: Missing async and await statements in the imported resources'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution #2**: Add async and await statements'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cause #3**: Cached Import path case changed from “pageobjects” to “pageObjects”'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution #3**: Restart VSCode'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: Browser launches and locks up'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause**: Incompatibility with Node version 16.0.0.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Upgrade to Node version 18:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: “SevereServiceError: Couldn’t start Chromedriver: timeout. Please
    check if port [<PortNumber>] is in use”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`chromedriver` failure has locked the port.'
  prefs: []
  type: TYPE_NORMAL
- en: '`chromedriver` session.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how to do it using the Windows CMD shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how to do it using macOS: `lsof -i :<PortNumber> : kil``l -9 <PID>`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Problem: MODULE_NOT_FOUND'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Path` environmental variable.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Add the node path to the system variables.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cause #2**: Packages installed from Command Prompt without Local Admin rights'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Install from PowerShell with Admin rights (Windows only):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19395_16_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.4 –Different types of shells from the VS Code Terminal window
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the node path type as shown in the following code and subsequent figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure A.5 –How to get the path to the node program manager](img/B19395_16_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.5 –How to get the path to the node program manager
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the path to the `path` system variable (Windows only):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure A.6 –Checking the npm path is in the Windows environment variable](img/B19395_16_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.6 –Checking the npm path is in the Windows environment variable
  prefs: []
  type: TYPE_NORMAL
- en: Do not forget to restart Visual Studio Code!
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: Error: Could not execute “run” due to missing configuration, file
    “C:\repos\wdio\test\wdio.conf.ts” not found! Would you like to create one?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This error is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19395_16_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.7 –TypeScript and JavaScript projects store the wdio.config files in
    different folders
  prefs: []
  type: TYPE_NORMAL
- en: '`wdio.conf.js` path is incorrect under `scripts` in the `package.json` file.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Check whether tests are being launched with incorrect paths or
    extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`package.json` file. In this example, semicolons will generate the error, but
    double ampersands will not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Solution**: Replaced semi-colon with double ampersands'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: “report does not exist” when running an Allure report'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`allure-results` path.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Add the result path.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`package.json` and/or `wdio.conf.ts` files.'
  prefs: []
  type: TYPE_NORMAL
- en: '`package` and `wdio.conf.ts`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a report shortcut to the `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure Allure to `reporters`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: “[P]lugin “allure” reporter, neither as wdio scoped package “@wdio/allure-reporter”
    nor as community package “wdio-allure-reporter”. Please make sure you have it
    installed!”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause**: Allure configuration without first adding the Allure plugin.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Install Allure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: TypeError: Cannot read properties of undefined (reading ‘open’)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause**: Failed TypeScript installation. This occurs when you try to access
    a property or a method on a variable that stores an undefined value.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Add missing package'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: Cannot read properties of undefined (reading ‘setWindowSize’)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`browser` reference in `webdriverio` changed to `Browser` when migrating from
    CommonJS to ESNext.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wdio.conf.ts`, replace the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: A service failed in the ‘onPrepare’ hookSevereServiceError: Couldn’t
    start Chromedriver: timeout. Please check if port 9515 is in use!'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause**: A JavaScript Debug Shell is stopped at a breakpoint blocking a run
    from another shell from using the port.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Stop the running debug shell with Ctrl+C.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: “Cannot find name ‘describe’” and underlined in red'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Problem: “Cannot find name ‘it’”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Problem: “Cannot find name ‘expect’. Do you need to install type definitions
    for a test runner?” but the test still runs.'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause**: The Jasmine type definition is missing or incorrect.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tsconfig.json` file, change `jasmine` to `jasmine-framework` and restart the
    IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '`jasmine` to the compiler options | types in the `tsconfig.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '**Cause #2**: ESLint or TypeScript Debugger is out of date or disabled.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Activate or update **Extensions**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cause #3**: Framework is not installed correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Reinstall Jasmine, Mocha, or Jest.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: “An import path can only end with a ‘.ts’ extension when ‘allowImportingTsExtensions’
    is enabled.ts(5097)”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`tsconfig.json` file must be instructed to allow the importing of files with
    the `.``ts` extension.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tsconfig.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: browser.debug() generates “Failed to read descriptor from node connection:
    A device attached to the system is not functioning.”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause**: Benign issue.'
  prefs: []
  type: TYPE_NORMAL
- en: '`logLevel` from `info` to `warn`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: Element implicitly has an ‘any’ type because type ‘typeof globalThis’
    has no index signature'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`any` type'
  prefs: []
  type: TYPE_NORMAL
- en: '`:any`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: Cannot find type definition file for ‘jasmine’'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`File` `type missing`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution #1**: Install the Node types by running the following commands in
    the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the `node-modules` folder and `yarn.lock` and rerun as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: “Execution of 0 workers” No tests get executed.'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`capabilities:` in `wdio.config.ts`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Make sure capabilities are correctly set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Problems: Cannot find name ‘browser’ and Cannot find name ‘$’'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`$` shortcut not added to the class.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution: Add browser and $ objects to** **the class**'
  prefs: []
  type: TYPE_NORMAL
- en: '`import {browser, $}` `from wdio/globals`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: Property ‘toBeExisting’ does not exist on type'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`@wdio/globals` is missing or not listed first in `tsconfig.json` (WDIO version
    8+):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '`@wdio/sync` with `@wdio/types`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cause #2**: Missing parenthesis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**Solution #2**: Add parenthesis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: ERR! [Error: EACCES: permission denied (Mac OSX)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`npm` does not have access rights.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Give user access rights with these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: ERROR @wdio/selenium-standalone-service: Error: not found: java'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`selenium-standalone-service` but the Java SDK is not installed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Install the Java SDK’s latest version and restart the shell.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: “ECONNREFUSED 127.0.0.1:9515” a service failed in the ‘onPrepare’
    hook tcp-port-used'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause #1**: This can occur when connecting to a localhost that is not running.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution #1**: Close the Bash shell and restart.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution #2**: Try the ZSH shell instead.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Possible cause #2**: Secure client connection has disconnected.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Reconnect to the client application.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Possible cause #3**: Out-of-date dependencies.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Update the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: Error: Cannot find module ‘C:\Program Files\nodejs\node_modules\npm\bin\npm-cli.js’'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`import` statement is missing a file extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Add import statement'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: “Note: Package.json must be actual JSON, not just JavaScript”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`,`) at the end of the item list.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Remove the extra comma at the end of the list.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: Protocol error (Runtime.callFunctionOn) target closed'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`await`. Browser closed during element interaction.'
  prefs: []
  type: TYPE_NORMAL
- en: '`await` to calls to `async` methods.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: “unexpected token” in tsconfig.json'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause**: Mismatched curly brackets. The entire file may be marked as invalid
    in VS Code (macOS).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Fix mismatched brackets and save the file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: “TypeError: elem[prop] is not a function”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause**: Mistyped custom method, as in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '**Solution**: Fix the mistyped method name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: “ServerServiceError in “onPrepare” Cannot find package ‘chromedriver’'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`chromedriver` and `wdio-chromedriver-service` are installed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`chromedriver` service from the `package.json` file,'
  prefs: []
  type: TYPE_NORMAL
- en: '`"chromedriver": "^x.x.x"`, and the `wdio.conf.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: Property ‘{functionName}’ does not exist on type ‘({functionType<{argName>})
    => void’'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '`expect` library is not imported from a source.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Add import statement'
  prefs: []
  type: TYPE_NORMAL
- en: '`import {expect}` `from ''expect-webdriverio'';`'
  prefs: []
  type: TYPE_NORMAL
- en: Problem “Property ‘addCommand’ does not exist on type ‘Browser’.” (macOS)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause**: Benign VS Code error. The code may still work.'
  prefs: []
  type: TYPE_NORMAL
- en: '`// @``ts-ignore` directive.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: ConfigParser: pattern ./test/specs/**/*.ts did not match any file.'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`tsconfig` or `wdio.config` files exist in the `/``test` folder.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tsconfig` and `wdio.config` files to the project root working directory where
    the `package.json` file resides.'
  prefs: []
  type: TYPE_NORMAL
- en: If calling `wdio` from `npm`, the pattern is relative to the directory from
    which `package.json` resides.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that `tsNodeOpts` has the correct `project` path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: Error: Timeout - Async function did not complete within 10000ms (set
    by jasmine.DEFAULT_TIMEOUT_INTERVAL)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`wdio.conf.ts` contains `jasmineNodeOpts`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`jasmineOpts`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: Error: Error: Couldn’t find page handle'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause**: Jasmine timed out the test'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Set the Jasmine default timeout interval to higher than 10,000:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: This expression is not callable. Type ‘void’ has no call signatures.ts
    Are you missing a semicolon?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause**: Unknown'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Add a semicolon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: “File is not a module”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`export` keyword in the module file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '`export` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: “Couldn’t find page handle”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause**: Browser closed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`await` when calling an `async()` method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: “Error: {pageName} is not defined”'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`class` and `export default new` do not match.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Error: SecurePage is` `not defined`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '`Solution: change the class and export name` `to match.`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: Argument of type ‘ChainablePromiseElement<Element>’ is not assignable
    to parameter of type ‘Element’.'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`await`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '`await` for `Element`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Problem: Unable to delete or modify files or folders in the WebdriverIO project'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cause**: The project was created with Admin rights, which the user account
    has not been granted.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure A.8 –Permissions for repos](img/B19395_16_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.8 –Permissions for repos
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Give the user account full control of the file and folders (Windows
    only).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: EJSONPARSE Unexpected token in JSON while parsing Failed to parse
    JSON data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`package.json` file.'
  prefs: []
  type: TYPE_NORMAL
- en: '`json` file for good formatting.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: A long string of gibberish garbage characters is added to the wdio.config.ts
    file when running in JavaScript Debug Terminal in Windows'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Figure A.9 – Gibberish string of characters](img/B19395_16_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.9 – Gibberish string of characters
  prefs: []
  type: TYPE_NORMAL
- en: '**Cause**: Global log function declared after use in wdio.config.ts file.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Move any global functions declarations to the top of the wdio.config.ts
    file before calls any initial calls.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Caution for Windows**: Beware of limitations of long file paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure A.10 – Caution](img/B19395_16_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure A.10 – Caution
  prefs: []
  type: TYPE_NORMAL
- en: '**Cause**: Deep path to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '**Solution**: Follow the **KISS** example and **Keep** **It Simple**:'
  prefs: []
  type: TYPE_NORMAL
- en: '`C:\repos\wdio\test\wdio.conf.ts`'
  prefs: []
  type: TYPE_NORMAL
- en: Yarn and Node Package Manager (npm), Node Version Manager (nvm), and Node Package
    Executor (npx) Shell command cheat sheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is how to install `yarn` and Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: What is the path to Node.js?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how to install a new Node version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how to change to a different Node version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: What versions of Node are installed?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: What Node.js, npm, and nvm versions are currently active?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'What versions of Node are available? npm has an undocumented `show` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: What versions of the WebdriverIO package are available?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: What versions of the Jasmine package are available?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: What Node packages are installed and what is extraneous or invalid?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how to remove extraneous node packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: What node packages are installed at the global level?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how to initialize WebdriverIO:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how to explicitly execute all `wdio` tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how to implicitly execute a script from the `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how to explicitly execute one `wdio` TypeScript test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Reference links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The successful development of this book owes much to the invaluable contributions
    of several key resources. These provided the foundational knowledge, insightful
    perspectives, and essential data required to craft a comprehensive and insightful
    work that serves as a valuable addition to the field. Their role in the book’s
    creation is indeed pivotal, reflecting the collaborative effort that brought this
    project to fruition:'
  prefs: []
  type: TYPE_NORMAL
- en: 'WebdriverIO:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://webdriver.io/](https://webdriver.io/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'yarn:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://classic.yarnpkg.com/en/](https://classic.yarnpkg.com/en/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'npm:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.npmjs.com/](https://www.npmjs.com/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'node:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://nodejs.org/en](https://nodejs.org/en)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'nvm:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/nvm-sh/nvm/blob/master/README.md](https://github.com/nvm-sh/nvm/blob/master/README.md)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Allure:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://allurereport.org/](https://allurereport.org/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Jenkins:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.jenkins.io/download/](https://www.jenkins.io/download/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Lambdatest:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.lambdatest.com/](https://www.lambdatest.com/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Circle CI:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://circleci.com/](https://circleci.com/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'klassi-js:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/klassijs/klassi-js](https://github.com/klassijs/klassi-js)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'SelectorsHub: [https://selectorshub.com/](https://selectorshub.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Testing sites:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://candymapper.com/](https://candymapper.com/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://candymapperr2.com/](https://candymapperr2.com/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://the-internet.herokuapp.com/](https://the-internet.herokuapp.com/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.telerik.com/kendo-react-ui](https://www.telerik.com/kendo-react-ui)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VS Code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://code.visualstudio.com/](https://code.visualstudio.com/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'IntelliJ/Aqua:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.jetbrains.com/](https://www.jetbrains.com/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Belarc Advisor:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.belarc.com/](https://www.belarc.com/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Epilogue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The authors extend their warmest wishes to you, the reader, on your transformative
    journey from being a mere mortal to ascending the ranks as a superhuman automation
    engineer. We trust that you have not only acquired technical know-how from this
    book but also relished the exploration of the vibrant world of automation engineering.
  prefs: []
  type: TYPE_NORMAL
- en: The philosophical underpinnings of many ideas presented here can be traced back
    to the genius of Albert Einstein. His wisdom serves as a constant muse, motivating
    us to embrace the experimental spirit. Einstein famously advised that one shouldn’t
    fear failure, for every failed experiment is but one step closer to success. His
    ethos has colored the pages of this book, encouraging you to continually test,
    adapt, and innovate in your work.
  prefs: []
  type: TYPE_NORMAL
- en: As you move forward on your professional journey, may you embrace the joy of
    “fooling around and finding out” – that is, of tinkering, experimenting, and sometimes
    failing – in order to make the unexpected discoveries that lead to true mastery.
    Our hope is that you will find great joy and a sense of achievement in this ongoing
    exploration, thereby perpetually enriching your career and personal development.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s to your journey of becoming not just proficient but truly extraordinary
    in the ever-evolving field of automation engineering. Cheers!
  prefs: []
  type: TYPE_NORMAL
- en: “Go Be Productive!” – Paul M. Grossman
  prefs: []
  type: TYPE_NORMAL
- en: “Adapt and thrive, for change is life’s true constant” – Larry C. Goddard
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: “[P]lugin “allure” reporter, neither as wdio scoped package “@wdio/allure-reporter”
    nor as community package “wdio-allure-reporter”. Please make sure you have it
    installed!”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: “An import path can only end with a ‘.ts’ extension when ‘allowImportingTsExtensions’
    is enabled.ts(5097)”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Problem: A long string of gibberish garbage characters is added to the wdio.config.ts
    file when running in JavaScript Debug Terminal in Windows'
  prefs: []
  type: TYPE_NORMAL
- en: Yarn and Node Package Manager (npm), Node Version Manager (nvm), and Node Package
    Executor (npx) Shell command cheat sheet
  prefs: []
  type: TYPE_NORMAL
