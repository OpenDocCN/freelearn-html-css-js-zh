["```js\n      \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n        \"wdio\": \"wdio run test/wdio.conf.ts\",\n        \"debug\": \"cross-env set DEBUG=true && wdio run test/wdio.conf.ts\",\n        \"report\": \"cross-env DEBUG=false wdio run test/wdio.conf.ts && allure generate report allure-results --clean && allure open\",\n        \"wdio-docker\": \"DEBUG=false wdio run test/wdio.conf.ts && allure generate report allure-results --clean\"\n      },\n      \"devDependencies\": {\n        \"@types/jasmine\": \"^4.3.0\",\n        \"@wdio/allure-reporter\": \"^7.26.0\",\n        \"@wdio/cli\": \"^7.27.0\",\n        \"@wdio/jasmine-framework\": \"^7.26.0\",\n        \"@wdio/local-runner\": \"^7.27.0\",\n        \"@wdio/mocha-framework\": \"^7.26.0\",\n        \"@wdio/spec-reporter\": \"^7.26.0\",\n        \"ts-node\": \"^10.9.1\",\n        \"typescript\": \"^4.9.3\",\n      },\n      \"dependencies\": {\n        \"expect-webdriverio\": \"^3.0.0\"\n      }\n    }\n    ```", "```js\n>npx wdio run ./wdio.conf.js\n```", "```js\n    \"scripts\": {\n        \"wdio\": \"wdio wdio.conf.ts\"\n    }\n```", "```js\nyarn wdio\n```", "```js\n    \"scripts\": {\n        \"wdio\": \"wdio wdio.conf.ts\"\n   \"report\": \"allure generate --clean allure-results && allure open\"\n    }\n```", "```js\nyarn wdio\nyarn report\n```", "```js\n  /**\n   * Function to be executed before a test (in Mocha/Jasmine) starts.\n   */\n  // beforeTest: function (test, context) {\n  // },\n```", "```js\nbeforeTest: function (test, context) {\n    browser.maximizeWindow();\n},\n```", "```js\nbeforeTest: function (test, context) {\n    // VS Code Terminal visible on the bottom of the screen\n    browser.setWindowSize(1920, 970)\n},\n```", "```js\n{\n    \"compilerOptions\": {\n        \"moduleResolution\": \"node\",\n        \"types\": [\n            \"node\",\n            \"webdriverio/async\",\n            \"@wdio/jasmine-framework\",\n            \"expect-webdriverio\"\n        ],\n        \"target\": \"es2022\"\n    }\n}\n```", "```js\nyarn add wdio-chromedriver-service\n```", "```js\n    services: ['chromedriver'],\n```", "```js\n    outputDir: 'all-logs',\n    services: [\n        ['chromedriver', {\n            args: ['--silent']\n        }]\n    ],\n```", "```js\n> DEBUG=true yarn wdio\n```", "```js\n    > set DEBUG=false && yarn wdio\n    ```", "```js\n    > set DEBUG=false; yarn wdio\n    ```", "```js\n    > DEBUG=true yarn wdio\n    ```", "```js\n    \"debug\": \"DEBUG=true wdio run test/wdio.conf.ts\",\n    ```", "```js\n    \"debug\": \"set DEBUG=true && wdio run test/wdio.conf.ts\",\n    ```", "```js\njasmineOpts: {\n  defaultTimeoutInterval: 15_000_000,\n```", "```js\nconst DEBUG = (process.env.DEBUG === undefined) ? false : (process.env.DEBUG === `true`)\n```", "```js\nlet timeout = DEBUG ? 10_000 : 16_000_000\n```", "```js\njasmineOpts: {\ndefaultTimeoutInterval: 10000,\n```", "```js\njasmineOpts: {\ndefaultTimeoutInterval: timeout,\n```", "```js\nconst DEBUG = (process.env.DEBUG === undefined) ? true : (process.env.DEBUG === `true`)\n```", "```js\nDEBUG=true yarn wdio\n```", "```js\nyarn wdio\n```", "```js\n     \"scripts\": {\n        \"wdio\": \"wdio wdio.conf.ts\"\n        \"debug\": \"DEBUG=true wdio wdio.conf.ts\"\n        \"wdio-docker\": \"DEBUG=false wdio wdio.conf.ts\"\n    }\n```", "```js\nyarn wdio-docker\n```", "```js\nexpectationResultHandler\nexpectationResultHandler: function(passed, assertion) {\n /**\n * only take screenshot if assertion failed\n */\n if(passed) {\n      return\n }\n browser.saveScreenshot(`assertionError_${assertion.error.message}.png`)\n }\n```", "```js\nMeet Dwane \"The Rock\" Johnson at Moe's tavern\n```", "```js\nconsole.log(\"Meet \"\"Dwayne The Rock\"\" Johnson at Moe's  tavern\")\n```", "```js\nconsole.log('Meet Dwyane \"The Rock\" Johnson at Moe\\'s  tavern')\n```", "```js\nconsole.log(`Meet Dwayne \"The Rock\" Johnson at Moe's tavern today`)\n```", "```js\nlet guest = `Dwayne \"The Rock\" Johnson`\nlet location = `Moe's tavern`\n```", "```js\nconsole.log(`Meet ${guest} at ${location} today`)\n```", "```js\nawait expect(SecurePage.flashAlert).not.toBeExisting();\n```", "```js\n[0-0] 2022-11-28T09:14:03.160Z INFO webdriver: COMMAND findElements(\"css selector\", \"#flash\")\n[0-0] 2022-11-28T09:14:03.160Z INFO webdriver: [POST] http://localhost:9515/session/2e35b72bb526b5f0e346ba1379e4f5d9/elements\n[0-0] 2022-11-28T09:14:03.161Z INFO webdriver: DATA { using: 'css selector', value: '#flash' }\n[0-0] 2022-11-28T09:14:03.174Z INFO webdriver: RESULT [\n[0-0]   {\n[0-0]     'element-6066-11e4-a52e-4f735466cecf': 'd6b5d426-fbbb-4871-b190-94de4ef331cd'\n[0-0]   }\n```", "```js\n// Level of logging verbosity: trace | debug | info | warn | error | silent\n    logLevel: 'info',\n```", "```js\n/**\n * log wrapper\n * @param text to be output to the console window\n */\nglobal.log = async (text: any) =>  {\n    console.log(`---> ${text}`)\n}\n```", "```js\nconsole.log (`Entering password`)\n[0-0] Entering password\nawait global.log (`Entering password`)\n[0-0] ---> Entering password\n```", "```js\nglobal.log = async (text: any) => {\n    if (text) console.log(`---> ${text}`)\n}\n```", "```js\nglobal.log = async (text: any) => {\n    if (text) {\n        console.log(`---> ${text}`)\n    }\n}\n```", "```js\nglobal.log = async (text: any) => {\n    if (text) //truthy value check\n    {\n        if (text===Promise){\n            console.log(`--->     WARN: Log was passed a Promise object`)\n            console.trace()\n        }else{\n            console.log(`---> ${text}`)\n        }\n    }\n}\n```", "```js\ndescribe(' Ch3: Cybernetic Enhancements', () => {\n    it(should give detailed report and resize browser', async () => {\n        await LoginPage.open();\n        console.log (`Entering password`) // Intrinsic Log\n        await global.log (`Entering password`) // Custom\n        await global.log (``) // Does not print\n        await global.log (null) // Does not print\n        await global.log (Promise) // Adds trace\n        await LoginPage.login('tomsmith', 'SuperSecretPassword!');\n        await expect(SecurePage.flashAlert).toBeExisting();\n        await expect(SecurePage.flashAlert).toHaveTextContaining(\n            'You logged into a secure area!');\n    });\n});\n```", "```js\n[0-0] Entering password\n[0-0] ---> Entering password\n[0-0] --->     WARN: Log was passed a Promise object\n[0-0] Trace\n[0-0]     at global.log (D:\\repos\\Test-Automation-with-WebdriverIO\\test\\wdio.conf.ts:379:21)\n[0-0]     at UserContext.<anonymous> (D:\\repos\\wdio\\test\\specs\\ch3.ts:13:22)\n...\n[0-0] PASSED in chrome - D:\\repos\\wdio\\test\\specs\\ch3.ts\n```", "```js\nglobal.log = async (text) =>\n```", "```js\nglobal.log = async (text: any) =>\n```", "```js\n\"compiler options\": {\n\"strict\": true,\n...\n```", "```js\nfunction add(x, y) {\n  return x + y;\n}\nconst result = add(10, '20');\nconsole.log(result); // '1020'\n```", "```js\nfunction add(x: number, y: number) {\n  return x + y;\n}\nconst result = add(10, 20);\nconsole.log(result); // 30\n```", "```js\nconst multiply = function(x: number, y: number) { return x * y; };\n```", "```js\nconst multiply: (x: number, y: number) => number = function(x, y) {\n  return x * y;\n};\n```", "```js\nclass MyClass {\n  public myProperty: string = 'hello';\n  public someMethod() {\n    setTimeout(function() {\n      console.log(this.myProperty); // 'this' is not properly bound to                                     // an object\n    }, 1000);\n  }\n}\n```", "```js\nclass MyClass {\n  public myProperty: string = 'hello';\n  public someMethod() {\n    setTimeout(function() {\n      console.log(this.myProperty);\n    }.bind(this), 1000);\n  }\n}\n```", "```js\nclass MyClass {\n  public myProperty: string = 'hello';\n  public someMethod() {\n    const greeting = 'Hello';\n    console.log(greeting.call(this, greeting)); // error: 'call' is                                                 // not a function\n  }\n}\n```", "```js\n  public greet(greeting: string) {\n    console.log(`${greeting}, ${this.name}`);\n  }\n  public someMethod() {\n    const greeting = 'Hello';\n    this.greet.call(this, greeting); // calls the greet() method with                                      // a specific value for 'this'\n  }\n}\n```", "```js\nclass MyClass {\n  public myProperty: string = 'hello';\n  public someMethod() {\n    const greeting = 'Hello';\n    console.log(greeting.apply(this, greeting)); // error: 'apply' is not a function\n  }\n}\n```", "```js\nclass MyClass {\n  public myProperty: string = 'hello';\n  public greet(greeting: string) {\n    console.log(`${greeting}, ${this.name}`);\n  }\n  public someMethod() {\n    const greeting = 'Hello';\n    this.greet.apply(this, [greeting]); // calls the greet() method with a specific value for 'this'\n  }\n}\n```", "```js\n\"strictPropertyInitialization\": true,\n```", "```js\nclass MyClass {\n  public myProperty: string;\n  constructor() {\n    // myProperty is not initialized in the constructor\n  }\n  public someMethod() {\n    console.log(this.myProperty.toUpperCase());\n  }\n}\n```", "```js\n  public myProperty: string = \"\";\n```", "```js\nclass MyClass { public myProperty: string = 'hello';\n  public someMethod() {\n    setTimeout(function() {\n      console.log(this.myProperty);\n      // 'this' is not properly bound to an object\n    }, 1000);\n  }\n}\n```", "```js\n      setTimeout(() => { console.log(this.myProperty);\n      // 'this' is now properly bound to the current object\n```", "```js\n// @ts-ignore\nglobal.log = async (text: any) =>  {\n    console.log(`---> ${text}`)\n}\n```", "```js\n```", "```js\n```", "```js\n/**\n * Parses a string of key-value pairs and updates the SwitchBoard state with those values.\n * Each pair within the testData string should be separated by spaces, and\n * keys/values should be separated by an '=' character.\n *\n * For example, a string \"guests=2 zipcode=12345\" will result in SBF having\n * \"guests\" set to 2 and \"zipcode\" set to 12345.\n * @param {string} testData - The string containing key-value pairs to be parsed.\n */\nexport function parseToSBF(testData: string) {\n  let parts = testData.split(\" \");\n  parts.forEach(part => {\n    if (part.includes('=')) {\n      let [key, value] = part.split(\"=\");\n      SBF.set(key, parseInt(value));\n    }\n  });\n}\n```"]