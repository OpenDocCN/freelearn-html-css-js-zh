["```js\nnpm i adminjs @adminjs/express express-formidable @adminjs/sequelize tslib express-session\n```", "```js\n  \"overrides\": {\n    \"sequelize\": \"^6\"\n  },\n```", "```js\nconst AdminJS = require(\"adminjs\");\nconst AdminJSExpress = require(\"@adminjs/express\");\nconst AdminJSSequelize = require(\"@adminjs/sequelize\");\n```", "```js\nAdminJS.registerAdapter(AdminJSSequelize);\n```", "```js\nconst adminJs = new AdminJS({\n    databases: [models.sequelize],\n    resources: [\n        models.Airplane,\n        models.BoardingTicket,\n        models.Customer,\n        models.FlightSchedule,\n        models.Receipts,\n    ],\n    rootPath: '/admin',\n});\n\nconst router = AdminJSExpress.buildRouter(adminJs);\n```", "```js\napp.use(adminJs.options.rootPath, router);\n```", "```js\n        {\n            resource: models.BoardingTicket,\n            options: {\n                properties: {\n                    isEmployee: {\n                        isVisible: false,\n                    }\n                }\n            }\n        },\n```", "```js\ntype User {\n  name: String!\n  bio: String\n  roles: [Role!]!\n}\ntype Role {\n  name: String!\n}\n```", "```js\ntype Query {\n  query usersByName($name: String!) {\n    users(name: $name) {\n      name\n      bio\n      roles {\n        name\n      }\n    }\n  }\n}\n```", "```js\n{\n    \"data\": {\n        \"usersByName\": {\n            \"users\": [\n                {\n                    \"name\": \"Bob\",\n                    \"bio\": \"Programmer\",\n                    \"roles\": []\n                },\n                {\n                    \"name\": \"Bob\",\n                    \"bio\": \"Lead\",\n                    \"roles\": [{\"name\": \"Admin\"}]\n                }\n            ]\n        }\n    }\n}\n```", "```js\nnpm i --save graphql-sequelize @graphql-yoga/node graphql-relay\n```", "```js\n  \"overrides\": {\n    \"graphql\": \"^15\",\n    \"graphql-relay\": \"^0.10.0\",\n    \"sequelize\": \"^6\"\n  },\n```", "```js\nstatic tableName = 'Airplanes';\n```", "```js\nstatic tableName = 'BoardingTickets';\n```", "```js\nstatic tableName = 'Customers';\n```", "```js\nstatic tableName = 'FlightSchedules';\n```", "```js\nstatic tableName = 'Receipts';\n```", "```js\nconst { createServer } = require(\"@graphql-yoga/node\");\nconst { resolver } = require(\"graphql-sequelize\");\nconst models = require(\"./models\");\n```", "```js\nconst typeDefs = `\n  type Query {\n    airplane(id: ID!): Airplane\n    airplanes: [Airplane]\n    boardingTicket(id: ID!): BoardingTicket\n    boardingTickets: [BoardingTicket]\n    customer(id: ID!): Customer\n    customers: [Customer]\n    flightSchedule(id: ID!): FlightSchedule\n    flightSchedules: [FlightSchedule]\n    receipt(id: ID!): Receipt\n    receipts: [Receipt]\n  }\n```", "```js\n  type Mutation {\n    upsertAirplane(name: String!, data: AirplaneInput!): \n    Airplane\n  }\n  input AirplaneInput {\n    planeModel: String\n    totalSeats: Int\n  }\n  type Airplane {\n    id: ID!\n    planeModel: String\n    totalSeats: Int\n    schedules: [FlightSchedule]\n  }\n```", "```js\n  type Airplane {\n    id: ID!\n    planeModel: String\n    totalSeats: Int\n    schedules: [FlightSchedule]\n  }\n  type BoardingTicket {\n    id: ID!\n    seat: String\n    owner: Customer\n  }\n  type Customer {\n    id: ID!\n    name: String\n    email: String\n    tickets: [BoardingTicket]\n  }\n  type FlightSchedule {\n    id: ID!\n    originAirport: String\n    destinationAirport: String\n    departureTime: String\n  }\n  type Receipt {\n    id: ID!\n    receipt: String\n  }\n`;\n```", "```js\nconst resolvers = {\n  Query: {\n    airplane: resolver(models.Airplane),\n    airplanes: resolver(models.Airplane),\n    boardingTicket: resolver(models.BoardingTicket),\n    boardingTickets: resolver(models.BoardingTicket),\n    customer: resolver(models.Customer),\n    customers: resolver(models.Customer),\n    flightSchedule: resolver(models.FlightSchedule),\n    flightSchedules: resolver(models.FlightSchedule),\n    receipt: resolver(models.Receipts),\n    receipts: resolver(models.Receipts),\n  },\n```", "```js\n  Mutation: {\n    async upsertAirplane(parent, args, ctx, info) {\n        const [airplane, created] = await models.Airplane.\n        findOrCreate({\n            where: {\n                planeModel: args.name\n            },\n            defaults: (args.data || {}),\n        });\n        // if we created the record we do not need to \n           update it\n        if (created) {\n            return airplane;\n        }\n        if (typeof args.data !== \"undefined\") {\n            await airplane.update(args.data);\n        }\n        return airplane;\n    }\n  },\n```", "```js\n  Airplane: {\n    schedules: resolver(models.Airplane.FlightSchedules),\n  },\n  BoardingTicket: {\n    owner: resolver(models.BoardingTicket.Customer),\n  },\n  Customer: {\n      tickets: resolver(models.Customer.BoardingTickets),\n  },\n};\n```", "```js\nconst server = new createServer({\n  schema: {\n    typeDefs,\n    resolvers,\n  }\n});\nmodule.exports = { server };\n```", "```js\nconst { server } = require(\"./graphql\");\n```", "```js\napp.use('/graphql', server);\n```", "```js\nnpm run start\n```", "```js\n{\n  airplanes {\n    id\n    planeModel\n    totalSeats\n  }\n}\n```", "```js\n{\n  \"data\": {\n    \"airplanes\": [\n      {\n        \"id\": \"1\",\n        \"planeModel\": \"A320\",\n        \"totalSeats\": 150\n      }\n    ]\n  }\n}\n```", "```js\nmutation {\n  upsertAirplane(name:\"A320\", data:{planeModel:\"A321\"}) {\n    planeModel\n  }\n}\n```", "```js\n{\n  \"data\": {\n    \"upsertAirplane\": {\n      \"planeModel\": \"A321\"\n    }\n  }\n}\n```", "```js\n    npm i --save github-slugger\n    ```", "```js\n    sequelize-cli migration:create --name add_slug_to_airplanes\n    ```", "```js\n    'use strict';\n    module.exports = {\n      up: async (queryInterface, Sequelize) => {\n        await queryInterface.addColumn(\n          'Airplanes',\n          'slug',\n          {\n            type: Sequelize.STRING,\n            allowNull: true,\n          },\n        );\n        await queryInterface.addIndex(\n          'Airplanes',\n          ['slug'],\n          {\n            name: 'airplanes_slug_uniq_idx',\n            unique: true,\n          },\n        );\n      },\n      down: async (queryInterface, Sequelize) => {\n        await queryInterface.removeIndex('Airplanes', \n        'airplanes_slug_uniq_idx');\n        await queryInterface.removeColumn('Airplanes', \n        'slug');\n      },\n    };\n    ```", "```js\n    sequelize-cli db:migrate \n    ```", "```js\n        totalSeats: {\n          type: DataTypes.INTEGER,\n          validate: {\n            min: {\n              args: 1,\n              msg: 'A plane must have at least one seat'\n            }\n          }\n        },\n        slug: {\n          type: DataTypes.STRING,\n          unique: true,\n        },\n    ```", "```js\n      type Airplane {\n        id: ID!\n        planeModel: String\n        totalSeats: Int\n        slug: String\n        schedules: [FlightSchedule]\n      }\n    ```", "```js\n    const slug = require(\"github-slugger\").slug;\n    class SlugPlugin {\n        use(model, options) {\n            const DEFAULTS = {\n                column: 'slug',\n                source: 'name',\n                transaction: null,\n            };\n            options = {...DEFAULTS, ...options};\n    ```", "```js\n            // concat the fields for the slug\n            function generateSlug(instance, fields) {\n                return slug(fields.map((field) => \n                instance[field]));\n            }\n    ```", "```js\n            async function findSlug(slug) {\n                return await model.findOne({\n                    where: {\n                        [options.column]: slug\n                    },\n                    transaction: options.transaction || \n                    null,\n                });\n            }\n    ```", "```js\n            async function incrementSuffix(slugVal) {\n                let found = false;\n                let cnt = 1;\n                let suffix = \"\";\n                while (!found) {\n                    suffix = `${slugVal}-${cnt}`;\n                    found = await findSlug(suffix);\n                    cnt++;\n                }\n                return suffix;\n            }\n    ```", "```js\n            async function onSaveOrUpdate(instance) {\n                const changed = options.source.\n                some(function (field) {\n                    return instance.changed(field);\n                });\n                if (!changed) {\n                    return instance;\n                }\n    ```", "```js\n                let curVal = instance[options.column];\n                let newVal = generateSlug(instance, \n                options.source);\n                if (curVal !== null && curVal == newVal) {\n                    return instance;\n                }\n    ```", "```js\n                let slugExist = await findSlug(newVal);\n                if (!slugExist) {\n                    instance[options.column] = newVal;\n                    return instance;\n                }\n    ```", "```js\n                newVal = await incrementSuffix(newVal);\n                instance[options.column] = newVal;\n                return instance;\n    ```", "```js\n            }\n            // use the lifecycle events for invoking the \n               onSaveOrUpdate event\n            model.addHook('beforeCreate', onSaveOrUpdate);\n            model.addHook('beforeUpdate', onSaveOrUpdate);\n        }\n    }\n    ```", "```js\n    const instance = new SlugPlugin();\n    module.exports = instance;\n    module.exports.SlugPlugin = instance;\n    ```", "```js\n    const slugPlugin = require('../plugins/slug');\n    ```", "```js\n      slugPlugin.use(Airplane, {\n        source: ['planeModel']\n      });\n    ```", "```js\n    mutation {\n      upsertAirplane(name:\"A321\", data:{planeModel:\n      \"A321 B\"}) {\n        planeModel\n        totalSeats\n        slug\n      }\n    }\n    ```", "```js\n{\n  \"data\": {\n    \"upsertAirplane\": {\n      \"planeModel\": \"A321 B\",\n      \"totalSeats\": 150,\n      \"slug\": \"a321-b\"\n    }\n  }\n}\n```"]