- en: Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署
- en: Now that we know how to create Aurelia applications, we should be able to deploy
    them in our own servers or if you want to take advantage of other big companies
    resources, why don't use cloud providers to deploy our apps?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了如何创建Aurelia应用程序，我们应该能够在自己的服务器上部署它们，或者如果你想利用其他大型公司的资源，为什么不使用云服务提供商来部署我们的应用程序呢？
- en: In this chapter, you will learn how to deploy your applications on your own
    self-managed servers using Docker and NGINX. Also, you will learn how to deploy
    applications on Heroku and one of the best cloud providers on the planet—**Amazon
    Web Services** (**AWS**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用Docker和NGINX在你的自托管服务器上部署你的应用程序。此外，你还将学习如何在Heroku上部署应用程序以及地球上最好的云服务提供商之一——**亚马逊网络服务**（**AWS**）。
- en: We will use Docker to deploy locally, because this will make our deployment
    portable so that you can deploy your application in your own data center or in
    the cloud.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Docker在本地部署，因为这会使我们的部署具有可移植性，这样你就可以在自己的数据中心或云中部署你的应用程序。
- en: 'Having said that, in this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，在本章中，我们将涵盖以下主题：
- en: Configuring our web for production
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的网站配置生产环境
- en: Deploying on your own server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的服务器上部署
- en: Deploying on Heroku
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Heroku上部署
- en: Deploying on AWS S3 buckets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWS S3存储桶上部署
- en: Configuring our web for production
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的网站配置生产环境
- en: 'Before we deploy our application to production, we should prepare and configure
    it. Let''s create an example Aurelia application and deploy it. Open a new Terminal
    window and run the following command to start a new `deployme` project:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将应用程序部署到生产之前，我们应该准备和配置它。让我们创建一个示例Aurelia应用程序并将其部署。打开一个新的终端窗口并运行以下命令以启动一个新的`deployme`项目：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s navigate to the `aurelia_project/environments` folder. In this folder,
    you will find the following files that map to a specific development environment:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导航到`aurelia_project/environments`文件夹。在这个文件夹中，你会找到以下文件，它们映射到特定的开发环境：
- en: '`dev.js`: Contains the configurations for the development phase.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev.js`：包含开发阶段的配置。'
- en: '`stage.js`: Contains the configuration for the staging phase. This phase is
    also known as **Quality Assurance** (**QA**).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stage.js`：包含预发布阶段的配置。这个阶段也被称为**质量保证**（**QA**）。'
- en: '`prod.js`: Contains the configuration for the production phase. In this phase,
    our application is being used by our final users.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prod.js`：包含生产阶段的配置。在这个阶段，我们的应用程序正在被我们的最终用户使用。'
- en: 'Let''s open the `dev.js` file and check the content of the configuration for
    the development phase:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开`dev.js`文件并检查开发阶段配置的内容：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A configuration file is a simple JSON file. As you can see in the `dev.js`file,
    the `debug` and `testing` attributes are true. It means that while we are developing
    our application, we will be able to debug and test the application. Let''s add
    a new attribute to see how this works. In the `dev.js`file, apply the following
    changes:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件是一个简单的JSON文件。正如你在`dev.js`文件中看到的那样，`debug`和`testing`属性为true。这意味着在我们开发应用程序时，我们将能够调试和测试应用程序。让我们添加一个新的属性来看看它是如何工作的。在`dev.js`文件中，应用以下更改：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s go ahead and open the `prod.js`file and see how the application
    should be configured for production:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们打开`prod.js`文件并查看应用程序应该如何配置为生产环境：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In production, we don''t need to debug anything, and we don''t test our application,
    so we have to disable debugging and testing and set the value as `false`. Let''s
    create the `appTitle` attribute, but this time with the correct value for production:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产中，我们不需要调试任何东西，我们也不测试我们的应用程序，所以我们必须禁用调试和测试，并将值设置为`false`。让我们创建`appTitle`属性，但这次使用生产环境的正确值：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now let''s apply the following changes to the `app.js` file to read the `appTitle`
    from the environment `environment.js` configuration file:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们对`app.js`文件应用以下更改，从环境`environment.js`配置文件中读取`appTitle`：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let''s apply the following changes to the `app.html`file:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们对`app.html`文件应用以下更改：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once the changes are applied, let''s run the application, but this time let''s
    specify the environment in order to see how the application''s title changes depending
    on the environment. Go ahead and run the following command for the development
    environment:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用了更改，让我们运行应用程序，但这次让我们指定环境，以便查看应用程序的标题如何根据环境而变化。请运行以下命令以开发环境运行：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Navigate to the `http://localhost:9000` in your browser and you should see
    something similar to the following image:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中导航到`http://localhost:9000`，你应该会看到以下图像类似的内容：
- en: '![](img/452ca39b-d1aa-4d84-a1ec-7b4cb00f7f02.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/452ca39b-d1aa-4d84-a1ec-7b4cb00f7f02.png)'
- en: 'Cool! Now let''s run the application, but this time let''s change the `(--env)`
    environment flag from `dev` to `prod` in order to create the production version:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在让我们运行应用程序，但这次让我们将`(--env)`环境标志从`dev`更改为`prod`，以便创建生产版本：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Navigate to the `http://localhost:9000` in your browser and you should see
    something similar to the following image:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中导航到`http://localhost:9000`，您应该会看到以下类似图像：
- en: '![](img/625510b6-dd17-42ae-9337-b7bf344229df.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/625510b6-dd17-42ae-9337-b7bf344229df.png)'
- en: 'Cool! We are almost done with the production version. Before we deploy our
    application, we will need to create a minified version of our code. To do so,
    execute the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们几乎完成了生产版本。在我们部署应用程序之前，我们需要创建代码的压缩版本。为此，执行以下命令：
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding command will generate the build scripts into the `scripts` folder,
    which will contain the JavaScript files ready for production. These files are
    minified in order to improve the load performance in the client browser. We will
    take the `dist` folder and `index.html` for the deployment process. Basically,
    an Aurelia application deployment has the following files architecture:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将在`scripts`文件夹中生成构建脚本，其中将包含准备就绪的JavaScript文件。这些文件被压缩以改善客户端浏览器的加载性能。我们将使用`dist`文件夹和`index.html`进行部署过程。基本上，Aurelia应用程序的部署具有以下文件架构：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Details of the JavaScript files are provided in further details in the Aurelia
    CLI section of [Chapter 1](b9497d63-ff4d-449d-a84c-62e2d66a314b.xhtml), *Introducing
    Aurelia*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript文件的详细信息在[第1章](b9497d63-ff4d-449d-a84c-62e2d66a314b.xhtml)的“Aurelia
    CLI部分”中提供，*介绍Aurelia*。
- en: Cool! Let's learn how to deploy our application. Keep reading!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！让我们学习如何部署我们的应用程序。继续阅读！
- en: Deploying on your own server
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在自己的服务器上部署
- en: Upto now, we have the production files ready to be deployed. The typical deployment
    scenario is when you want to deploy your web application on your local server,
    local computer, or internal corporate server. This is a common practice for big
    companies that want to manage and have full control on their servers. So, let's
    learn how to do that using Docker and NGINX as our best allies.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经准备好了生产文件，可以部署。典型的部署场景是当你想在本地服务器、本地计算机或内部企业服务器上部署你的Web应用程序时。这对那些想要管理和完全控制他们服务器的大公司来说是一种常见做法。所以，让我们学习如何使用Docker和NGINX作为我们的最佳盟友来完成这项工作。
- en: Creating our NGINX configuration file
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的NGINX配置文件
- en: 'The only role that NGINX will play in our deployment is to serve as a web server,
    so we will write a simple configuration file for our server. Go ahead and create
    the `default.conf` file in the project root folder:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: NGINX在我们部署中扮演的唯一角色是作为Web服务器，因此我们将为我们的服务器编写一个简单的配置文件。请前往项目根目录创建名为`default.conf`的文件：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Let's understand what this configuration file does. First, we tell NGINX to
    `listen` on port `80`. It means that when we want to access our application, we
    should call to this port. Secondly, we define the path where NGINX will find our
    application files. We will have to copy the `scripts` folder and `index.html`
    file into this folder.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解这个配置文件的作用。首先，我们告诉NGINX在端口`80`上`listen`。这意味着当我们想要访问我们的应用程序时，我们应该调用这个端口。其次，我们定义了NGINX将找到我们的应用程序文件的位置。我们必须将`scripts`文件夹和`index.html`文件复制到这个文件夹中。
- en: Cool! We have the NGINX configuration file for our application web server. Let's
    continue with the `Dockerfile` file setup.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们有了应用程序Web服务器的NGINX配置文件。让我们继续设置`Dockerfile`文件。
- en: Creating our Dockerfile
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的Dockerfile
- en: 'Our `Dockerfile` contains the receipt to build a Docker image with all the
    configuration we need to start our NGINX web server and also will contain the
    web application that has to be copied inside the container. Go ahead and create
    the `Dockerfile`file in the project root folder:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Dockerfile`包含了构建Docker镜像的配方，其中包含了启动我们的NGINX Web服务器所需的所有配置，同时它还将包含必须复制到容器内的Web应用程序。请前往项目根目录创建名为`Dockerfile`的文件：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Yeah, that's all! This is a simple Docker file that uses `nginx:alphine` as
    its base image. We `COPY` the `default.conf`file, which contains the NGINX configuration
    file, and, finally, we `COPY` our web application files.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，就是这样！这是一个简单的Docker文件，它使用`nginx:alphine`作为其基础镜像。我们`COPY`了包含NGINX配置文件的`default.conf`文件，最后我们`COPY`了我们的Web应用程序文件。
- en: That's it! let's build our Docker image and run our very first container.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！让我们构建我们的Docker镜像并运行我们的第一个容器。
- en: Running our application on Docker
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Docker上运行我们的应用程序
- en: 'Before we can run our application, we will need to create a Docker image using
    our `Dockerfile`. Open a new Terminal and navigate to the project root folder.
    Once you are there, run the following command to build our Docker image:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够运行我们的应用程序之前，我们需要使用我们的 `Dockerfile` 创建一个 Docker 镜像。打开一个新的终端并导航到项目根目录。一旦到达那里，运行以下命令来构建我们的
    Docker 镜像：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We use the `docker build` command to build a new image. The `-t` option allows
    us to give our image a name, in this case, our image is called `mydeploymeapp`.
    Pay attention to the period (`.`) in the last command argument; the `docker build`
    command uses a `Dockerfile` to build the new image. We specify the path of this
    `Dockerfile` in the last option of the command; as this file is in the root folder
    where we are running `docker build`, we should use the *period* symbol to specify
    the current folder, which in this case contains the `Dockerfile`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `docker build` 命令来构建一个新的镜像。`-t` 选项允许我们给我们的镜像命名，在这种情况下，我们的镜像名为 `mydeploymeapp`。注意最后一个命令参数中的点（`.`）；`docker
    build` 命令使用 `Dockerfile` 来构建新的镜像。我们在命令的最后一个选项中指定了这个 `Dockerfile` 的路径；由于这个文件位于我们运行
    `docker build` 的根目录中，我们应该使用 *点* 符号来指定当前文件夹，在这个例子中，它包含 `Dockerfile`。
- en: Once the build process is finished, we will have the `Successfully built` message.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建过程完成，我们将看到 `Successfully built` 的消息。
- en: 'Now we are ready to start our application. Go ahead and run the following command
    to start a new `mydeploymeapp` Docker container:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好启动我们的应用程序。运行以下命令以启动一个新的 `mydeploymeapp` Docker 容器：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We used the `docker run` command to start a new container and pass the `-p`
    option to map our host `8000` port to the NGINX `80` port, which is listening
    inside the container. The last argument is the Docker image that we want to create,
    in this case, our application's image.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 `docker run` 命令来启动一个新的容器，并通过 `-p` 选项将我们的主机 `8000` 端口映射到容器内的 NGINX `80`
    端口，该端口正在监听。最后一个参数是我们想要创建的 Docker 镜像，在这种情况下，是我们的应用程序镜像。
- en: 'Cool! Our application is up and running. Let''s navigate to `http://localhost:8000`
    and you should see the following page:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们的应用程序已经启动并运行。让我们导航到 `http://localhost:8000`，你应该会看到以下页面：
- en: '![](img/73cb37c5-20d4-4925-8c3e-97db70d11309.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/73cb37c5-20d4-4925-8c3e-97db70d11309.png)'
- en: That's it! We have successfully deployed our Aurelia application on our local
    server using Docker and NGINX. You can install Docker on your remote server and
    follow the same steps we did in this section to install any Aurelia application.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们已经成功使用 Docker 和 NGINX 在本地服务器上部署了我们的 Aurelia 应用程序。您可以在远程服务器上安装 Docker 并按照本节中相同的步骤安装任何
    Aurelia 应用程序。
- en: Let's learn in the following sections how to deploy apps to the cloud. Keep
    reading!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何将应用程序部署到云端。继续阅读！
- en: Deploying on Heroku
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Heroku 上部署
- en: 'It''s time to take advantage of the cloud and start looking for new approaches.
    In this section, we will see how to deploy our Aurelia example application to
    Heroku. We will follow the next steps in order before we start the deployment
    process:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候利用云服务并开始寻找新的方法了。在本节中，我们将了解如何将我们的 Aurelia 示例应用程序部署到 Heroku。在开始部署过程之前，我们将按照以下步骤进行操作：
- en: Create a Heroku account
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Heroku 账户
- en: Prepare our application
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备我们的应用程序
- en: Deploy
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署
- en: Let's start with the very first step.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从第一步开始。
- en: Creating a Heroku account
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Heroku 账户
- en: Navigate to [https://heroku.com](https://heroku.com) and click on the SIGN UP
    FOR FREE button. Then, fill the form with your account information. Once you are
    ready, we will need to install the Heroku CLI. This CLI will provide us with an
    easy-to-use command-line tool that we will use to deploy our applications and
    perform other administration operations on our applications.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 导航至 [https://heroku.com](https://heroku.com) 并点击“免费注册”按钮。然后，填写您的账户信息。准备好后，我们需要安装
    Heroku CLI。这个 CLI 将为我们提供一个易于使用的命令行工具，我们将使用它来部署我们的应用程序并在我们的应用程序上执行其他管理操作。
- en: 'To download the Heroku CLI, navigate to [https://devcenter.heroku.com/articles/heroku-cli](https://devcenter.heroku.com/articles/heroku-cli).
    Select your operating system and follow the installation instructions. Once the
    installation finished, go ahead and open a new Terminal window and execute the
    following command to log in to your Heroku workspace:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载 Heroku CLI，请导航至 [https://devcenter.heroku.com/articles/heroku-cli](https://devcenter.heroku.com/articles/heroku-cli)。选择您的操作系统并遵循安装说明。安装完成后，打开一个新的终端窗口并执行以下命令以登录到您的
    Heroku 工作空间：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding command will ask you for your `email` and `password` that you
    used in the signup process. Provide your credentials and if everything is correct,
    you will receive the `Logged in as ...` message.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将要求你提供在注册过程中使用的 `email` 和 `password`。提供你的凭证，如果一切正确，你将收到 `Logged in as ...`
    的消息。
- en: Preparing the application
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备应用程序
- en: 'Heroku, just like other cloud providers, does not offer any way to deploy static
    HTML files, so we will need to deploy our application using another strategy.
    We will create a simple PHP file that will serve as the entry point that will
    have one line of code to import our `index.html` file:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku，就像其他云服务提供商一样，不提供部署静态 HTML 文件的方式，因此我们需要使用另一种策略来部署我们的应用程序。我们将创建一个简单的 PHP
    文件，它将作为入口点，其中包含一行代码来导入我们的 `index.html` 文件：
- en: '![](img/8cef1900-ce47-43c8-a146-7b339b9812d2.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cef1900-ce47-43c8-a146-7b339b9812d2.png)'
- en: 'Now, in the `dist` folder, go ahead and create the `index.php`file with the
    following content:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `dist` 文件夹中，继续创建一个包含以下内容的 `index.php` 文件：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We use the `invoke_once` function to import the `index.html` page as the main
    page.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `invoke_once` 函数将 `index.html` 页面作为主页面导入。
- en: Deploy
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署
- en: 'Once we have our application static files and our `index.php`entry point file,
    let''s create a new Heroku application. Navigate to the `dist` folder and `init`
    a new Git repository running the following commands:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了应用程序的静态文件和 `index.php` 入口点文件，让我们创建一个新的 Heroku 应用程序。导航到 `dist` 文件夹并运行以下命令来
    `init` 一个新的 Git 仓库：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We use git add following by a period (.) to add all the files to the staging
    area. It means all the changes will be candidates to commit.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `git add` 后跟一个点（.）来将所有文件添加到暂存区。这意味着所有更改都将成为提交的候选内容。
- en: 'Once we have our local git repository, let''s create a new Heroku application
    named `mydeploymeapp`. Execute the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了本地的 Git 仓库，让我们创建一个名为 `mydeploymeapp` 的新 Heroku 应用程序。执行以下命令：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We use the Heroku CLI tool and call the `apps:create` option to create a new
    application. You have to change the application's name, because they should be
    globally different from other app's names. Once created, Heroku will respond with
    the application's URL.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Heroku CLI 工具并调用 `apps:create` 选项来创建一个新的应用程序。你必须更改应用程序的名称，因为它们应该与其他应用程序的名称在全球范围内不同。一旦创建，Heroku
    将响应并提供应用程序的 URL。
- en: 'Now that we have our application created, let''s push the code to the Git repository
    created by Heroku to host our application''s code and see the results. Execute
    the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了应用程序，让我们将代码推送到 Heroku 创建的 Git 仓库以托管我们的应用程序代码并查看结果。执行以下命令：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As you can see, Heroku will recognize automatically that we are deploying a
    PHP application, and it will deploy our application. Let''s go ahead and navigate
    to your application''s URL; mine is [https://mydeploymeapp.herokuapp.com](https://mydeploymeapp.herokuapp.com):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Heroku 将自动识别我们正在部署一个 PHP 应用程序，并将部署我们的应用程序。让我们继续前进并导航到你的应用程序的 URL；我的网址是
    [https://mydeploymeapp.herokuapp.com](https://mydeploymeapp.herokuapp.com)：
- en: '![](img/9a55aa39-6ce6-4618-ab1b-30121dcc2d3e.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9a55aa39-6ce6-4618-ab1b-30121dcc2d3e.png)'
- en: Awesome! Now that we know how to deploy our application on the *cloud* using
    Heroku, let's explore how can we do this with another very popular cloud provider.
    We will learn how to deploy our website using **Amazon Simple Storage Service** (**Amazon
    S3**). Keep reading!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们知道了如何使用 Heroku 在 *云* 上部署我们的应用程序，让我们来看看我们如何使用另一个非常流行的云服务提供商来做这件事。我们将学习如何使用
    **Amazon Simple Storage Service**（**Amazon S3**）来部署我们的网站。继续阅读！
- en: Deploying on AWS S3 Buckets
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 AWS S3 存储桶上部署
- en: AWS is one of the biggest cloud providers across the globe. We will learn how
    to deploy our Aurelia application using AWS S3\. Yes, I am not crazy! We will
    deploy our application without installing any server or **Elastic Cloud Compute**
    (**EC2**) virtual machine instance.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 是全球最大的云服务提供商之一。我们将学习如何使用 AWS S3 部署我们的 Aurelia 应用程序。是的，我没有疯！我们将不安装任何服务器或
    **弹性云计算**（**Elastic Cloud Compute**，**EC2**）虚拟机实例来部署我们的应用程序。
- en: Uploading files
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传文件
- en: Before we start the process, you will need to have an account on AWS. Navigate
    to the following URL to create your free account—[https://aws.amazon.com](https://aws.amazon.com).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始这个过程之前，你需要在 AWS 上有一个账户。访问以下网址以创建你的免费账户—[https://aws.amazon.com](https://aws.amazon.com)。
- en: 'Once you are done with the registration process and are logged in to the AWS
    console, go ahead and navigate to the S3 service dashboard, as shown:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了注册过程并登录到 AWS 控制台，请继续导航到 S3 服务仪表板，如下所示：
- en: '![](img/f5aeb44e-a554-4839-9e35-ebbe5451f5e2.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5aeb44e-a554-4839-9e35-ebbe5451f5e2.png)'
- en: 'Once the S3 dashboard is loaded, you will see the list of all the your AWS
    buckets that you created before. If not, you will see an empty list. Click on
    the Create Bucket button to create a new bucket and name your bucket with your
    application''s name and click on the Next button to accept the defaults:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8df2045a-a195-40aa-ba36-71b0f69b8a4d.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: 'Once created, you should see the new S3 bucket in the list:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c642963-24e9-4667-9aff-92b0bedd4721.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: 'Now get into your bucket, and let''s upload the `index.html` file to the bucket
    by clicking on the Add files button and selecting the file. Don''t forget to grant
    public read permission when you are submitting the files:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/133f129c-b53d-4609-92f1-00dce5375fe4.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
- en: 'Once we have selected our web application files that we want to deploy in S3,
    we should make these files public so that S3 will be able to serve the file publicly,
    otherwise our users won''t be able to access our web application files. To do
    so, select the Grant public read access to this object(s) option in the Manage
    public permissions drop-down list, as illustrated:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b7a8aa5-ef42-430e-a926-1dca8549d218.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: Cool! To upload the contents into the `script` folder, you will need to create
    a folder for scripts in the bucket. To do this, just click on the Create Folder
    button. Once you have the folder created, go ahead and upload the `app-bundle.js`
    and `vendor-bundle.js` files into the S3 scripts folder (don't forget to grant
    public permission).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Configuring our S3 Bucket for the web
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s configure our bucket to act as a website bucket. Before we do that,
    let''s access our `index.html` file from our web browser. To do this, select the
    `index.html` page and let''s copy the URL besides Link that appears in the object
    settings panel:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ef10624-98b9-445f-ac6a-cae49d375cd6.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to the link provided, and you should see your web application up and
    running:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1c59a10d-6947-4953-b307-9ab32db4d535.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: There is one last step we should do. First, note that the URL is not friendly,
    and we are accessing our web using the `index.html` file. This is not the right
    way to deploy a web application on Amazon S3\. Let's configure our bucket to explicitly
    make it a web bucket.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s navigate to the Properties tab in our bucket and select the static web
    hosting option. Select the use this bucket to host a website option, type `index.html`
    as the index page, and click on Save:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42e78396-2b9e-4723-a559-c50b7a020f5c.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
- en: 'Cool! Now we are ready. Copy the new URL provided by AWS and navigate to it
    to see the web application up and running:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed276f28-c1ec-4478-8ed8-22b3bda4c13f.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: Awesome! You are ready to deploy your applications on AWS using S3 buckets without
    the need to provide any virtual server. Congratulations!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter of the book, you learned how to deploy web applications
    on self-managed or on-premise servers and also how to take advantage of the cloud.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to use Docker to deploy applications. Using Docker will help
    you in all the phases of development, so we strongly encourage you to buy a Docker
    book and start learning about it right now!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您学习了如何使用 Docker 来部署应用程序。使用 Docker 将帮助您在开发的各个阶段，所以我们强烈建议您购买一本 Docker 书籍，并立即开始学习它！
- en: We also covered how to deploy applications on top of Heroku. Heroku is a **Platform
    as a Service** (**PaaS**) that will manage and monitor your applications for you.
    So you don't have to worry about infrastructure; you just need to worry about
    creating awesome applications.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了如何在 Heroku 上部署应用程序。Heroku 是一个 **平台即服务**（**PaaS**），它会为您管理和监控应用程序。因此，您无需担心基础设施；您只需关注创建出色的应用程序即可。
- en: Finally, you came across how to deploy applications using AWS S3 buckets to
    deploy applications without any virtual server configuration.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您了解了如何使用 AWS S3 存储桶来部署应用程序，无需进行任何虚拟服务器配置。
- en: Aurelia is becoming very popular and is being adopted by important organizations;
    this is the right time to become an expert and be ready for the revolutionary
    future in which Aurelia will play a very important role. On the other hand, you
    only have a little bit  of knowledge about Docker and cloud computing. We encourage
    you to explore more about these technologies, which are extremely important in
    the IT world.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Aurelia 正变得越来越受欢迎，并被重要组织采用；现在是成为专家并为 Aurelia 将在革命性未来扮演的重要角色做好准备的时候了。另一方面，您对
    Docker 和云计算的了解还不是很深入。我们鼓励您探索这些在 IT 领域极为重要的技术。
- en: Having said that, we wish you the best in your next adventure.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我们祝愿您在接下来的冒险中一切顺利。
