- en: Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to create Aurelia applications, we should be able to deploy
    them in our own servers or if you want to take advantage of other big companies
    resources, why don't use cloud providers to deploy our apps?
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to deploy your applications on your own
    self-managed servers using Docker and NGINX. Also, you will learn how to deploy
    applications on Heroku and one of the best cloud providers on the planet—**Amazon
    Web Services** (**AWS**).
  prefs: []
  type: TYPE_NORMAL
- en: We will use Docker to deploy locally, because this will make our deployment
    portable so that you can deploy your application in your own data center or in
    the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having said that, in this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring our web for production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on your own server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on Heroku
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying on AWS S3 buckets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring our web for production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we deploy our application to production, we should prepare and configure
    it. Let''s create an example Aurelia application and deploy it. Open a new Terminal
    window and run the following command to start a new `deployme` project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s navigate to the `aurelia_project/environments` folder. In this folder,
    you will find the following files that map to a specific development environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dev.js`: Contains the configurations for the development phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stage.js`: Contains the configuration for the staging phase. This phase is
    also known as **Quality Assurance** (**QA**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prod.js`: Contains the configuration for the production phase. In this phase,
    our application is being used by our final users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s open the `dev.js` file and check the content of the configuration for
    the development phase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A configuration file is a simple JSON file. As you can see in the `dev.js`file,
    the `debug` and `testing` attributes are true. It means that while we are developing
    our application, we will be able to debug and test the application. Let''s add
    a new attribute to see how this works. In the `dev.js`file, apply the following
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s go ahead and open the `prod.js`file and see how the application
    should be configured for production:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In production, we don''t need to debug anything, and we don''t test our application,
    so we have to disable debugging and testing and set the value as `false`. Let''s
    create the `appTitle` attribute, but this time with the correct value for production:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s apply the following changes to the `app.js` file to read the `appTitle`
    from the environment `environment.js` configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s apply the following changes to the `app.html`file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the changes are applied, let''s run the application, but this time let''s
    specify the environment in order to see how the application''s title changes depending
    on the environment. Go ahead and run the following command for the development
    environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to the `http://localhost:9000` in your browser and you should see
    something similar to the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/452ca39b-d1aa-4d84-a1ec-7b4cb00f7f02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Cool! Now let''s run the application, but this time let''s change the `(--env)`
    environment flag from `dev` to `prod` in order to create the production version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to the `http://localhost:9000` in your browser and you should see
    something similar to the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/625510b6-dd17-42ae-9337-b7bf344229df.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Cool! We are almost done with the production version. Before we deploy our
    application, we will need to create a minified version of our code. To do so,
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will generate the build scripts into the `scripts` folder,
    which will contain the JavaScript files ready for production. These files are
    minified in order to improve the load performance in the client browser. We will
    take the `dist` folder and `index.html` for the deployment process. Basically,
    an Aurelia application deployment has the following files architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Details of the JavaScript files are provided in further details in the Aurelia
    CLI section of [Chapter 1](b9497d63-ff4d-449d-a84c-62e2d66a314b.xhtml), *Introducing
    Aurelia*.
  prefs: []
  type: TYPE_NORMAL
- en: Cool! Let's learn how to deploy our application. Keep reading!
  prefs: []
  type: TYPE_NORMAL
- en: Deploying on your own server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Upto now, we have the production files ready to be deployed. The typical deployment
    scenario is when you want to deploy your web application on your local server,
    local computer, or internal corporate server. This is a common practice for big
    companies that want to manage and have full control on their servers. So, let's
    learn how to do that using Docker and NGINX as our best allies.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our NGINX configuration file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The only role that NGINX will play in our deployment is to serve as a web server,
    so we will write a simple configuration file for our server. Go ahead and create
    the `default.conf` file in the project root folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Let's understand what this configuration file does. First, we tell NGINX to
    `listen` on port `80`. It means that when we want to access our application, we
    should call to this port. Secondly, we define the path where NGINX will find our
    application files. We will have to copy the `scripts` folder and `index.html`
    file into this folder.
  prefs: []
  type: TYPE_NORMAL
- en: Cool! We have the NGINX configuration file for our application web server. Let's
    continue with the `Dockerfile` file setup.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our Dockerfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our `Dockerfile` contains the receipt to build a Docker image with all the
    configuration we need to start our NGINX web server and also will contain the
    web application that has to be copied inside the container. Go ahead and create
    the `Dockerfile`file in the project root folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Yeah, that's all! This is a simple Docker file that uses `nginx:alphine` as
    its base image. We `COPY` the `default.conf`file, which contains the NGINX configuration
    file, and, finally, we `COPY` our web application files.
  prefs: []
  type: TYPE_NORMAL
- en: That's it! let's build our Docker image and run our very first container.
  prefs: []
  type: TYPE_NORMAL
- en: Running our application on Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can run our application, we will need to create a Docker image using
    our `Dockerfile`. Open a new Terminal and navigate to the project root folder.
    Once you are there, run the following command to build our Docker image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We use the `docker build` command to build a new image. The `-t` option allows
    us to give our image a name, in this case, our image is called `mydeploymeapp`.
    Pay attention to the period (`.`) in the last command argument; the `docker build`
    command uses a `Dockerfile` to build the new image. We specify the path of this
    `Dockerfile` in the last option of the command; as this file is in the root folder
    where we are running `docker build`, we should use the *period* symbol to specify
    the current folder, which in this case contains the `Dockerfile`.
  prefs: []
  type: TYPE_NORMAL
- en: Once the build process is finished, we will have the `Successfully built` message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are ready to start our application. Go ahead and run the following command
    to start a new `mydeploymeapp` Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We used the `docker run` command to start a new container and pass the `-p`
    option to map our host `8000` port to the NGINX `80` port, which is listening
    inside the container. The last argument is the Docker image that we want to create,
    in this case, our application's image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cool! Our application is up and running. Let''s navigate to `http://localhost:8000`
    and you should see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73cb37c5-20d4-4925-8c3e-97db70d11309.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it! We have successfully deployed our Aurelia application on our local
    server using Docker and NGINX. You can install Docker on your remote server and
    follow the same steps we did in this section to install any Aurelia application.
  prefs: []
  type: TYPE_NORMAL
- en: Let's learn in the following sections how to deploy apps to the cloud. Keep
    reading!
  prefs: []
  type: TYPE_NORMAL
- en: Deploying on Heroku
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s time to take advantage of the cloud and start looking for new approaches.
    In this section, we will see how to deploy our Aurelia example application to
    Heroku. We will follow the next steps in order before we start the deployment
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Heroku account
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepare our application
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's start with the very first step.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Heroku account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigate to [https://heroku.com](https://heroku.com) and click on the SIGN UP
    FOR FREE button. Then, fill the form with your account information. Once you are
    ready, we will need to install the Heroku CLI. This CLI will provide us with an
    easy-to-use command-line tool that we will use to deploy our applications and
    perform other administration operations on our applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'To download the Heroku CLI, navigate to [https://devcenter.heroku.com/articles/heroku-cli](https://devcenter.heroku.com/articles/heroku-cli).
    Select your operating system and follow the installation instructions. Once the
    installation finished, go ahead and open a new Terminal window and execute the
    following command to log in to your Heroku workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will ask you for your `email` and `password` that you
    used in the signup process. Provide your credentials and if everything is correct,
    you will receive the `Logged in as ...` message.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Heroku, just like other cloud providers, does not offer any way to deploy static
    HTML files, so we will need to deploy our application using another strategy.
    We will create a simple PHP file that will serve as the entry point that will
    have one line of code to import our `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8cef1900-ce47-43c8-a146-7b339b9812d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the `dist` folder, go ahead and create the `index.php`file with the
    following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We use the `invoke_once` function to import the `index.html` page as the main
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Deploy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have our application static files and our `index.php`entry point file,
    let''s create a new Heroku application. Navigate to the `dist` folder and `init`
    a new Git repository running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We use git add following by a period (.) to add all the files to the staging
    area. It means all the changes will be candidates to commit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have our local git repository, let''s create a new Heroku application
    named `mydeploymeapp`. Execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We use the Heroku CLI tool and call the `apps:create` option to create a new
    application. You have to change the application's name, because they should be
    globally different from other app's names. Once created, Heroku will respond with
    the application's URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our application created, let''s push the code to the Git repository
    created by Heroku to host our application''s code and see the results. Execute
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, Heroku will recognize automatically that we are deploying a
    PHP application, and it will deploy our application. Let''s go ahead and navigate
    to your application''s URL; mine is [https://mydeploymeapp.herokuapp.com](https://mydeploymeapp.herokuapp.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a55aa39-6ce6-4618-ab1b-30121dcc2d3e.png)'
  prefs: []
  type: TYPE_IMG
- en: Awesome! Now that we know how to deploy our application on the *cloud* using
    Heroku, let's explore how can we do this with another very popular cloud provider.
    We will learn how to deploy our website using **Amazon Simple Storage Service** (**Amazon
    S3**). Keep reading!
  prefs: []
  type: TYPE_NORMAL
- en: Deploying on AWS S3 Buckets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS is one of the biggest cloud providers across the globe. We will learn how
    to deploy our Aurelia application using AWS S3\. Yes, I am not crazy! We will
    deploy our application without installing any server or **Elastic Cloud Compute**
    (**EC2**) virtual machine instance.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start the process, you will need to have an account on AWS. Navigate
    to the following URL to create your free account—[https://aws.amazon.com](https://aws.amazon.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are done with the registration process and are logged in to the AWS
    console, go ahead and navigate to the S3 service dashboard, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5aeb44e-a554-4839-9e35-ebbe5451f5e2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the S3 dashboard is loaded, you will see the list of all the your AWS
    buckets that you created before. If not, you will see an empty list. Click on
    the Create Bucket button to create a new bucket and name your bucket with your
    application''s name and click on the Next button to accept the defaults:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8df2045a-a195-40aa-ba36-71b0f69b8a4d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once created, you should see the new S3 bucket in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c642963-24e9-4667-9aff-92b0bedd4721.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now get into your bucket, and let''s upload the `index.html` file to the bucket
    by clicking on the Add files button and selecting the file. Don''t forget to grant
    public read permission when you are submitting the files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/133f129c-b53d-4609-92f1-00dce5375fe4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have selected our web application files that we want to deploy in S3,
    we should make these files public so that S3 will be able to serve the file publicly,
    otherwise our users won''t be able to access our web application files. To do
    so, select the Grant public read access to this object(s) option in the Manage
    public permissions drop-down list, as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b7a8aa5-ef42-430e-a926-1dca8549d218.png)'
  prefs: []
  type: TYPE_IMG
- en: Cool! To upload the contents into the `script` folder, you will need to create
    a folder for scripts in the bucket. To do this, just click on the Create Folder
    button. Once you have the folder created, go ahead and upload the `app-bundle.js`
    and `vendor-bundle.js` files into the S3 scripts folder (don't forget to grant
    public permission).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring our S3 Bucket for the web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s configure our bucket to act as a website bucket. Before we do that,
    let''s access our `index.html` file from our web browser. To do this, select the
    `index.html` page and let''s copy the URL besides Link that appears in the object
    settings panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ef10624-98b9-445f-ac6a-cae49d375cd6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to the link provided, and you should see your web application up and
    running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1c59a10d-6947-4953-b307-9ab32db4d535.png)'
  prefs: []
  type: TYPE_IMG
- en: There is one last step we should do. First, note that the URL is not friendly,
    and we are accessing our web using the `index.html` file. This is not the right
    way to deploy a web application on Amazon S3\. Let's configure our bucket to explicitly
    make it a web bucket.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s navigate to the Properties tab in our bucket and select the static web
    hosting option. Select the use this bucket to host a website option, type `index.html`
    as the index page, and click on Save:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42e78396-2b9e-4723-a559-c50b7a020f5c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Cool! Now we are ready. Copy the new URL provided by AWS and navigate to it
    to see the web application up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed276f28-c1ec-4478-8ed8-22b3bda4c13f.png)'
  prefs: []
  type: TYPE_IMG
- en: Awesome! You are ready to deploy your applications on AWS using S3 buckets without
    the need to provide any virtual server. Congratulations!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter of the book, you learned how to deploy web applications
    on self-managed or on-premise servers and also how to take advantage of the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to use Docker to deploy applications. Using Docker will help
    you in all the phases of development, so we strongly encourage you to buy a Docker
    book and start learning about it right now!
  prefs: []
  type: TYPE_NORMAL
- en: We also covered how to deploy applications on top of Heroku. Heroku is a **Platform
    as a Service** (**PaaS**) that will manage and monitor your applications for you.
    So you don't have to worry about infrastructure; you just need to worry about
    creating awesome applications.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you came across how to deploy applications using AWS S3 buckets to
    deploy applications without any virtual server configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Aurelia is becoming very popular and is being adopted by important organizations;
    this is the right time to become an expert and be ready for the revolutionary
    future in which Aurelia will play a very important role. On the other hand, you
    only have a little bit  of knowledge about Docker and cloud computing. We encourage
    you to explore more about these technologies, which are extremely important in
    the IT world.
  prefs: []
  type: TYPE_NORMAL
- en: Having said that, we wish you the best in your next adventure.
  prefs: []
  type: TYPE_NORMAL
