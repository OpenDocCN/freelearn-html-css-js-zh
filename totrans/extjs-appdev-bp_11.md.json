["```js\nCreate cart object\nAdd product #1 to cart\nAdd product #1 to cart\nAssert that there is only one item in the cart\n```", "```js\nCreate cart object\nAdd product #1 to cart\nAdd product #1 to cart\nAssert that first cart item has a quantity of two\n```", "```js\n#someElement\n//*[@id=\"someElement\"]\n```", "```js\n#container > button:nth-child(1)\n//*[@id=\"container\"]/button[1]\n```", "```js\ndescribe('A suite', function() {\n    it('contains spec with an expectation', function() {\n        expect(true).toBe(true);\n    });\n});\n```", "```js\nWe have \"a suite\", which \"contains spec with an expectation\". This expectation expects \"true\" to be \"true\".\n```", "```js\nrm MIT.LICENSE spec/* src/*\n```", "```js\nmkdir ./testsmv ~/Downloads/jasmine-2.1.3 ./tests/jasmine\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>Jasmine Spec Runner v2.1.3</title>\n\n  <link rel=\"stylesheet\" href=\"lib/jasmine-2.1.3/jasmine.css\">\n\n  <script src=\"img/jasmine.js\"></script>\n  <script src=\"img/jasmine-html.js\"></script>\n  <script src=\"img/boot.js\"></script>\n  <script src=\"img/ext-all-debug.js\"></script>\n\n  <script type=\"text/javascript\">\n    Ext.Loader.setConfig({\n      enabled: true,\n      paths: {\n        'Alcohology': '../../app'\n      }\n    });\n  </script>\n\n  <script src=\"img/Cart.js\"></script>\n</head>\n<body></body>\n</html>\n```", "```js\ndescribe('Cart store', function() {\n\n  var cart;\n\n  beforeEach(function() {\n    cart = Ext.create('Alcohology.store.Cart');\n  });\n});\n```", "```js\ndescribe('#addProduct', function() {\n    it('should accept a Product model');\n    it('should create a new CartItem line');\n    it('should increment the quantity when adding an existing Product');\n    it('should not create a new CartItem when adding an existing Product');\n  });\n```", "```js\nit('should accept a Product model', function() {\n    expect(cart.addProduct.bind(cart, {})).toThrow();\n});\n```", "```js\nit('should create a new CartItem line', function() {\n    var product = Ext.create('Alcohology.model.Product');\n\n    cart.addProduct(product);\n\n    expect(cart.count()).toBe(1);\n});\n```", "```js\nit('should increment the quantity when adding an existing Product', function() {\n    var product = Ext.create('Alcohology.model.Product');\n\n    cart.addProduct(product);\n    cart.addProduct(product);\n\n    expect(cart.first().get('quantity')).toBe(2);\n});\n```", "```js\nit('should not create a new CartItem when adding an existing Product', function() {\n    var product = Ext.create('Alcohology.model.Product');\n\n    cart.addProduct(product);\n    cart.addProduct(product);\n\n    expect(cart.count()).toBe(1);\n});\n```", "```js\ncasper.test.begin(\"Hello, Test!\", 1, function(test) {\n    test.assert(true);\n    test.done();\n});\n```", "```js\ncasper.test.begin('Google search retrieves 10 or more results', 4, function suite(test) {\n    casper.start('http://www.google.com/', function() {\n        test.assertTitle('Google', 'google homepage title is the one expected');\n        test.assertExists('form[action=\"/search\"]', 'main form is found');\n        casper.fill('form[action=\"/search\"]', {\n            q: 'casperjs'\n        }, true);\n    });\n\n    casper.then(function() {\n        test.assertUrlMatch(/q=casperjs/, 'search term has been submitted');\n        test.assertEval(function() {\n            return __utils__.findAll('h3.r').length >= 10;\n        }, 'google search for \\'casperjs\\' retrieves 10 or more results');\n    });\n\n    casper.run(function() {\n        test.done();\n    });\n});\n```", "```js\ncasper.test.begin('Alcohology Sanity Checks', 0, function suite(test) {\n    casper.start('http://localhost:1841/', function() {\n    });\n    casper.run(function() {\n        test.done();\n    });\n});\n```", "```js\n#gridview-1014-record-6 > tbody > tr > td > div\n```", "```js\ncasper.test.begin('Application sanity checks', 0, function suite(test) {\n    casper.start('http://localhost:1841/', function() {\n        var selector = '#gridview-1014-record-6 > tbody > tr > td > div';\n\n        casper.waitForSelector(selector, function() {\n            test.assertSelectorHasText(selector, 'Pilsner');\n        });\n    });\n\n    casper.run(function() {\n        test.done();\n    });\n});\n```", "```js\ncasper.test.begin('Product walk through', 2, function suite(test) {\n    casper.start('http://localhost:1841/', function() {\n        var categorySelector = '.categories-body table:nth-child(2) td',\n            productSelector = '.product-list .product:nth-child(2)',\n            windowSelector = '.product-detail',\n            headerSelector = '.product-detail h1',\n            priceSelector = '.product-detail p.price';\n\n        // Wait for the categories to load.\n        casper.waitForSelector(categorySelector, function() {\n            // Click the specified category.\n            casper.click(categorySelector);\n        });\n\n        // Wait for the category products to load.\n        casper.waitForSelector(productSelector, function() {\n            // Click the specified product.\n            casper.click(productSelector);\n        });\n\n        // Wait for the product window to appear.\n        casper.waitForSelector(windowSelector, function() {\n            // Assert text for heading and price.\n            test.assertSelectorHasText(headerSelector, 'Lagunitas IPA');\n            test.assertSelectorHasText(priceSelector, 'Â£12.99');\n\n            // Capture a screenshot.\n            casper.capture('products-page.png');\n        });\n    });\n\n    casper.run(function() {\n        test.done();\n    });\n});\n```", "```js\n#gridview-1014-record-6 > tbody > tr > td > div \n```", "```js\n.categories-body table:nth-child(2) td\n```", "```js\n//<debug>\nbodyCls: 'categories-body',\n//</debug>\n```", "```js\nExt.Loader.setConfig({\n    enabled: true,\n    paths: {\n        'Alcohology': '../../app',\n        'Ext.ux': '../../ext/examples/ux' // added\n    }\n});\n```", "```js\ndescribe('Mocking Ajax', function() {\n    var productStore,\n        fakeJsonData = [{\n            \"id\":1,\n            \"name\":\"Test Product\",\n            \"price\":\"19.99\",\n            \"description\":\"Test Product Description\"\n        }];\n\n    beforeEach(function() {\n\n        Ext.syncRequire('Ext.ux.ajax.SimManager');\n        Ext.syncRequire('Alcohology.model.Product');\n\n        Ext.ux.ajax.SimManager.init().register({\n            'http://localhost:3000/product': {\n                type: 'json',\n                data: fakeJsonData\n            }\n         });\n\n        productStore = Ext.create('Ext.data.Store', {\n            model: 'Alcohology.model.Product'\n        });\n    });\n\n    it('Uses fake JSON data', function(done) {\n        productStore.load({\n            callback: function(records) {\n                expect(records.length).toBe(1);\n                expect(records[0].get('name')).toBe('Test Product');\n                done();\n            }\n        });\n    });\n});\n```"]