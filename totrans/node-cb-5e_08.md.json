["```js\n    $ mkdir testing-with-node\n    $ cd testing-with-node\n    ```", "```js\n    $ touch calculator.mjs\n    ```", "```js\n    export const add = (number1, number2) => {\n        return number1 + number2;\n    };\n    export const subtract = (number1, number2) => {\n        return number1 - number2;\n    };\n    export const multiply = (number1, number2) => {\n        return number1 * number2;\n    };\n    export const divide = (number1, number2) => {\n        return number1 / number2;\n    };\n    ```", "```js\n    $ node --test\n    ℹ tests 0\n    ℹ suites 0\n    ℹ pass 0\n    ℹ fail 0\n    ℹ cancelled 0\n    ℹ skipped 0\n    ℹ todo 0\n    ℹ duration_ms 3.212584\n    ```", "```js\n    $ touch calculator.test.mjs\n    ```", "```js\n    import test from 'node:test';\n    import assert from 'node:assert';\n    ```", "```js\n    import { add } from './calculator.mjs';\n    ```", "```js\n    test('add', async (t) => {\n    });\n    ```", "```js\n    test('add', async (t) => {\n      await t.test('add integers', () => {\n        assert.equal(add(1, 2), 3);\n        assert.equal(add(2, 3), 5);\n        assert.equal(add(3, 4), 7);\n      });\n    });\n    ```", "```js\n    $ node --test\n    ```", "```js\n    await t.test('add strings', () => {\n      assert.equal(add('1', '2'), 3);\n    });\n    ```", "```js\n    $ node --test\n    ```", "```js\n    ▶ add\n      ✔ add integers (0.442953ms)\n      ✖ add strings (1.909008ms)\n        AssertionError [ERR_ASSERTION]: '12' == 3\n            at TestContext.<anonymous> (file:///Users/beth/Node.js-Cookbook/testing-with-node/calculator.test.mjs:14:12)\n            at Test.runInAsyncScope (node:async_hooks:206:9)\n            at Test.run (node:internal/test_runner/test:639:25)\n            at Test.start (node:internal/test_runner/test:550:17)\n    ...\n    ```", "```js\n    test('add strings', { skip : true }, () => {\n      assert.equal(add('1', '2'), 3);\n    });\n    ```", "```js\n$ node --test --experimental-test-coverage\n```", "```js\n    $ mkdir testing-with-jest\n    $ cd testing-with-jest\n    $ npm init --yes\n    ```", "```js\n    $ touch textUtils.js\n    ```", "```js\n    function lowercase (str) {\n      return str.toLowerCase();\n    }\n    function uppercase (str) {\n      return str.toUpperCase();\n    }\n    function capitalize (str) {\n      if (!str) return str;\n      return str.charAt(0).toUpperCase() +\n        str.slice(1).toLowerCase();\n    }\n    module.exports = { lowercase, uppercase, capitalize };\n    ```", "```js\n    $ touch textUtils.test.js\n    ```", "```js\n    $ npm install --save-dev jest\n    ```", "```js\n      \"scripts\": {\n        \"test\": \"jest\"\n      }\n    ```", "```js\n    const { lowercase, uppercase, capitalize } =\n      require('./textUtils');\n    ```", "```js\n    describe('textUtils', () => {\n    });\n    ```", "```js\n      test('converts \"HELLO WORLD\" to all lowercase', ()\n        => {\n          expect(lowercase('HELLO WORLD')).toBe('hello\n            world');\n      });\n      test('converts \"hello world\" to all uppercase', ()\n        => {\n          expect(uppercase('hello world')).toBe('HELLO\n            WORLD');\n      });\n      test('capitalizes the first letter of \"hello\"', ()\n        => {\n          expect(capitalize('hello')).toBe('Hello');\n      });\n    ```", "```js\n    $ npm test\n    > testing-with-jest@1.0.0 test\n    > jest\n     PASS  ./textUtils.test.js\n      textUtils\n        ✓ converts \"HELLO WORLD\" to all lowercase (2 ms)\n        ✓ converts \"hello world\" to all uppercase (1 ms)\n        ✓ capitalizes the first letter of \"hello\"\n    Test Suites: 1 passed, 1 total\n    Tests:       3 passed, 3 total\n    Snapshots:   0 total\n    Time:        0.342 s, estimated 1 s\n    Ran all test suites.\n    ```", "```js\n    $ ./node_modules/jest/bin/jest.js --coverage\n    ```", "```js\n      test('return empty string as it is', () => {\n        expect(capitalize('')).toBe('');\n      });\n    ```", "```js\n    $ ./node_modules/jest/bin/jest.js --coverage\n    ```", "```js\n  expect(uppercase('hello')).not.toBe('hello');\n```", "```js\ndescribe('test', () => {\n  beforeAll(() => {\n    // Runs once before all tests\n  });\n  beforeEach(() => {\n    // Runs before each test\n  });\n  afterEach(() => {\n    // Runs after each test\n  });\n  afterAll(() => {\n    // Runs after all tests\n  });\n});\n```", "```js\ndescribe('uppercase', () => {\n  test('uppercase hello returns HELLO', () => {\n    uppercase = jest.fn(() => 'HELLO');\n    const result = uppercase('hello');\n    expect(uppercase).toHaveBeenCalledWith('hello');\n    expect(result).toBe('HELLO');\n  });\n});\n```", "```js\nfunction fetchData() {\n    return new Promise((resolve) => {\n        setTimeout(() => resolve('hello'), 1000);\n    });\n}\n```", "```js\ntest('data is hello', async () => {\n    await expect(fetchData()).resolves.toBe('hello');\n});\n```", "```js\nfunction fetchDataCallback(callback) {\n    setTimeout(() => { callback('hello');  }, 1000);\n}\ntest('the data is hello', done => {\n    function callback(data) {\n        try {\n            expect(data).toBe('hello');\n            done();\n        } catch (error) {\n            done(error);\n        }\n    }\n    fetchDataCallback(callback);\n});\n```", "```js\n    $ mkdir stubbing-http-requests\n    $ cd stubbing-http-requests\n    $ npm init --yes\n    ```", "```js\n    $ touch github.mjs\n    ```", "```js\n    export async function getGitHubUser(username) {\n      const response = await\n        fetch(`https://api.github.com/users/${username}`);\n      return response.json();\n    }\n    ```", "```js\n    $ touch github.test.mjs\n    ```", "```js\n    import * as assert from 'node:assert';\n    import { test } from 'node:test';\n    import { getGitHubUser } from './github.mjs';\n    test('Get GitHub user by username', async (t) => {\n      const githubUser = await getGitHubUser('octokit');\n      assert.strictEqual(githubUser.id, 3430433);\n      assert.strictEqual(githubUser.login, 'octokit');\n      assert.strictEqual(githubUser.name, 'Octokit');\n    });\n    ```", "```js\n    $ node --test --test-reporter=tap\n    TAP version 13\n    # Subtest: Get GitHub user by username\n    ok 1 - Get GitHub user by username\n      ---\n      duration_ms: 279.80306\n      ...\n    1..1\n    # tests 1\n    # suites 0\n    # pass 1\n    # fail 0\n    # cancelled 0\n    # skipped 0\n    # todo 0\n    # duration_ms 426.372579\n    ```", "```js\n    $ npm install --save-dev sinon\n    ```", "```js\n    import sinon from 'sinon';\n    ```", "```js\n      const fakeResponse = Promise.resolve({\n        json: () => Promise.resolve({\n          id: 3430433,\n          login: 'octokit',\n          name: 'Octokit'\n        })\n      });\n    ```", "```js\n      sinon.stub(global, 'fetch').returns(fakeResponse);\n    ```", "```js\n    import * as assert from 'node:assert';\n    import { test } from 'node:test';\n    import sinon from 'sinon';\n    import { getGitHubUser } from './github.mjs';\n    test('Get GitHub user by username', async (t) => {\n      const fakeResponse = Promise.resolve({\n        json: () => Promise.resolve({\n          id: 3430433,\n          login: 'octokit',\n          name: 'Octokit'\n        })\n      });\n      sinon.stub(global, 'fetch').returns(fakeResponse);\n      const githubUser = await getGitHubUser('octokit');\n      sinon.restore();\n      assert.strictEqual(githubUser.id, 3430433);\n      assert.strictEqual(githubUser.login, 'octokit');\n      assert.strictEqual(githubUser.name, 'Octokit');\n    });\n    ```", "```js\n    $ node --test --test-reporter=tap\n    TAP version 13\n    # Subtest: Get GitHub user by username\n    ok 1 - Get GitHub user by username\n      ---\n      duration_ms: 2.510738\n      ...\n    1..1\n    # tests 1\n    # suites 0\n    # pass 1\n    # fail 0\n    # cancelled 0\n    # skipped 0\n    # todo 0\n    # duration_ms 129.078933\n    ```", "```js\n    $ mkdir using-puppeteer\n    $ cd using-puppeteer\n    $ npm init --yes\n    ```", "```js\n    $ touch test.js\n    ```", "```js\n    $ npm install --save-dev puppeteer\n    ```", "```js\n    const assert = require('node:assert');\n    const puppeteer = require('puppeteer');\n    ```", "```js\n    async function runTest() {\n    }\n    ```", "```js\n      const browser = await puppeteer.launch();\n    ```", "```js\n      const page = await browser.newPage();\n    ```", "```js\n      await page.goto('https://example.com');\n    ```", "```js\n      const title = await page.$eval('h1', (el) =>\n        el.innerText);\n    ```", "```js\n      console.log('Title value:', title);\n      assert.equal(title, 'Example Domain');\n    ```", "```js\n      browser.close();\n    ```", "```js\n     runTest();\n    ```", "```js\n    $ node test.js\n    Title value: Example Domain\n    ```", "```js\n   const browser = await puppeteer.launch({\n        headless: false\n    });\n```", "```js\n    $ git clone https://github.com/<username>/enabling-actions.git\n    Cloning into 'enabling-actions'...\n    remote: Enumerating objects: 3, done.\n    remote: Counting objects: 100% (3/3), done.\n    remote: Compressing objects: 100% (2/2), done.\n    remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\n    Receiving objects: 100% (3/3), done.\n    ```", "```js\n    $ cd enabling-actions\n    ```", "```js\n    $ touch test.mjs\n    ```", "```js\n    import { strictEqual } from 'node:assert';\n    import { test } from 'node:test';\n    test('test integer addition', async (t) => {\n      strictEqual(1 + 1, 2, '1 + 1 should equal 2');\n    });\n    test('test string addition', async (t) => {\n      // This test is expected to fail because \"11\" is not numerically 2\n      strictEqual('1' + '1', 2, 'Concatenation of \"1\" and\n        \"1\" does not equal 2');\n    });\n    ```", "```js\n    $ mkdir -p .github/workflows\n    $ touch .github/workflows/test.yml\n    ```", "```js\n    name: Node.js CI\n    on:\n      push:\n        branches: [ main ]\n      pull_request:\n        branches: [ main ]\n    jobs:\n      build:\n        runs-on: ubuntu-latest\n        strategy:\n          matrix:\n            node-version: [ 20.x ]\n        steps:\n        - uses: actions/checkout@v4\n        - name: Use Node.js ${{ matrix.node-version }}\n          uses: actions/setup-node@v4\n          with:\n            node-version: ${{ matrix.node-version }}\n        - run: node --test\n    ```", "```js\n    $ git add .github/ test.mjs\n    $ git commit --message \"add workflows and test\"\n    $ git push origin main\n    ```", "```js\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n```", "```js\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [20.x, 22.x]\n```", "```js\n    steps:\n    - uses: actions/checkout@v4\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ matrix.node-version }}\n    - run: node --test\n```"]