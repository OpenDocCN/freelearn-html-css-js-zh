["```js\n<!DOCTYPE html> \n<html> \n<head> \n  <meta charset=\"utf-8\"> \n  <title>Jasmine Spec Runner v2.5.2</title> \n\n  <link rel=\"shortcut icon\" type=\"image/png\"  \n            href=\"lib/jasmine-2.5.2/jasmine_favicon.png\"> \n  <link rel=\"stylesheet\" href=\"lib/jasmine-2.5.2/jasmine.css\"> \n\n  <script src=\"img/jasmine.js\"></script> \n  <script src=\"img/jasmine-html.js\"></script> \n  <script src=\"img/boot.js\"></script> \n\n  <!-- include source files here... --> \n  <script src=\"img/bar_chart.js\"></script> \n\n  <!-- include spec files here... --> \n  <script src=\"img/spec_helper.js\"></script> \n  <script src=\"img/bar_chart_spec.js\"></script> \n\n</head> \n\n<body> \n</body> \n</html> \n\n```", "```js\ndescribe('BarChart', function () { \n    var div, \n        chart, \n        data = [ \n            {x: 0, y: 0}, \n            {x: 1, y: 3}, \n            {x: 2, y: 6} \n        ]; \n\n    beforeEach(function () { \n        div = d3.select('body').append('div'); \n        chart = BarChart(div); \n    }); \n\n    afterEach(function () { \n        div.remove(); \n    }); \n\n    describe('.data', function () { \n        it('should allow setting and retrieve chart data',  \n        function () { \n            expect(chart.data(data).data()).toBe(data); \n        }); \n    }); \n}); \n\n```", "```js\nfunction BarChart(p) { \n    var that = {}; \n    var _parent = p, _data; \n    that.data = function (d) { \n        if (!arguments.length) return _data; \n        _data = d; \n        return that; \n    }; \n\n    return that; \n} \n\n```", "```js\ndescribe('.render', function () { \n        describe('svg', function () { \n            it('should generate svg', function () { \n                chart.render(); \n                expect(svg()).not.toBeEmpty(); \n            }); \n\n            it('should set default svg height and width',  \n              function () { \n                chart.render(); \n                expect(svg().attr('width')).toBe('500'); \n                expect(svg().attr('height')).toBe('350'); \n            }); \n\n            it('should allow changing svg height and width',  \n              function () { \n                chart.width(200).height(150).render(); \n                expect(svg().attr('width')).toBe('200'); \n                expect(svg().attr('height')).toBe('150'); \n            }); \n        }); \n    }); \n\n    function svg() { \n        return div.select('svg'); \n    } \n\n```", "```js\n... \nvar _parent = p, _width = 500, _height = 350 \n        _data; \n\n    that.render = function () { \n        var svg = _parent \n            .append(\"svg\") \n            .attr(\"height\", _height) \n            .attr(\"width\", _width); \n    }; \n\n    that.width = function (w) { \n        if (!arguments.length) return _width; \n        _width = w; \n        return that; \n    }; \n\n    that.height = function (h) { \n        if (!arguments.length) return _height; \n        _height = h; \n        return that; \n}; \n... \n\n```", "```js\ndescribe('chart body', function () { \n        it('should create body g', function () { \n            chart.render(); \n            expect(chartBody()).not.toBeEmpty(); \n        }); \n\n        it('should translate to (left, top)', function () { \n            chart.render(); \n             expect(chartBody().attr('transform')). \n             toBe('translate(30,10)') \n        }); \n}); \n\ndescribe('bars', function () { \n        beforeEach(function () { \n            chart.data(data).width(100).height(100) \n                .x(d3.scaleLinear().domain([0, 3])) \n                .y(d3.scaleLinear().domain([0, 6])) \n                .render(); \n        }); \n\n        it('should create 3 svg:rect elements', function () { \n            expect(bars().size()).toBe(3); \n        }); \n\n        it('should calculate bar width automatically',  \n          function () { \n            bars().each(function () { \n              expect(d3.select(this).attr('width')). \n              toBe('18'); \n            }); \n        }); \n\n        it('should map bar x using x-scale', function () { \n            expect(bar(0).attr('x')).toBe('0'); \n            expect(bar(1).attr('x')).toBe('20'); \n            expect(bar(2).attr('x')).toBe('40'); \n         }); \n\n         it('should map bar y using y-scale', function () { \n             expect(bar(0).attr('y')).toBe('60'); \n             expect(bar(1).attr('y')).toBe('30'); \n             expect(bar(2).attr('y')).toBe('0'); \n          }); \n\n          it('should calculate bar height based on y', function () { \n              expect(bar(0).attr('height')).toBe('10'); \n              expect(bar(1).attr('height')).toBe('40'); \n              expect(bar(2).attr('height')).toBe('70'); \n           }); \n       }); \n    }); \n\n    function svg() { \n        return div.select('svg'); \n    } \n\n    function chartBody() { \n        return svg().select('g.body'); \n    } \n\n    function bars() { \n        return chartBody().selectAll('rect.bar'); \n    } \n\n    function bar(index) { \n        return d3.select(bars().nodes()[index]); \n    } \n}); \n\n```", "```js\n... \nvar _parent = p, _width = 500, _height = 350, \n        _margins = {top: 10, left: 30, right: 10, bottom: 30}, \n        _data, \n        _x = d3.scaleLinear(), \n        _y = d3.scaleLinear(); \n\nthat.render = function () { \n        var svg = _parent \n            .append(\"svg\") \n            .attr(\"height\", _height) \n            .attr(\"width\", _width); \n\n        var body = svg.append(\"g\") \n            .attr(\"class\", 'body') \n            .attr(\"transform\", \"translate(\" + _margins.left + \",\"  \n             + _margins.top + \")\") \n\n        if (_data) { \n            _x.range([0, quadrantWidth()]); \n            _y.range([quadrantHeight(), 0]); \n\n            body.selectAll('rect.bar') \n                .data(_data).enter() \n                .append('rect') \n                .attr(\"class\", 'bar') \n                .attr(\"width\", function () { \n                    return quadrantWidth() / _data.length -  \n                    BAR_PADDING; \n                }) \n                .attr(\"x\", function (d) {return _x(d.x); }) \n                .attr(\"y\", function (d) {return _y(d.y); }) \n                .attr(\"height\", function (d) { \n                    return _height - _margins.bottom - _y(d.y); \n                }); \n        } \n}; \n... \n\n```"]