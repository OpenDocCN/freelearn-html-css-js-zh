- en: Chapter 2. The Dialog Widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The dialog widget is in the Wijmo Open set. It is an enhancement of the jQuery
    UI dialog with more features. Wijmo dialogs can be maximized, minimized, pinned
    to a location, and display external content from a URL in the dialog window. This
    chapter discusses the options, methods, and events that are added in Wijmo, and
    how to use them to change the appearance and behavior of the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Wijmo additions to the dialog widget at a glance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, the dialog window includes the pin, toggle, minimize, maximize,
    and close buttons. Pinning the dialog to a location on the screen disables the
    dragging feature on the title bar. The dialog can still be resized. Maximizing
    the dialog makes it take up the area inside the browser window. Toggling it expands
    or collapses it so that the dialog contents are shown or hidden with the title
    bar remaining visible. If these buttons cramp your style, they can be turned off
    with the `captionButtons` option. You can see how the dialog is presented in the
    browser from the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wijmo additions to the dialog widget at a glance](img/6067OT_2_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Wijmo features additional API compared to jQuery UI for changing the behavior
    of the dialog. The new API is mostly for the buttons in the title bar and managing
    window stacking. Window stacking determines which windows are drawn on top of
    other ones. Clicking on a dialog raises it above other dialogs and changes their
    window stacking settings. The following table shows the options added in Wijmo.
  prefs: []
  type: TYPE_NORMAL
- en: '| Options | Events | Methods |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `captionButtons``contentUrl``disabled``expandingAnimation``stack``zIndex`
    | `blur``buttonCreating``stateChanged` | `disable``enable``getState``maximize``minimize``pin``refresh``reset``restore``toggle``widget`
    |'
  prefs: []
  type: TYPE_TB
- en: The `contentUrl` option allows you to specify a URL to load within the window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `expandingAnimation` option is applied when the dialog is toggled from a
    collapsed state to an expanded state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `stack` and `zIndex` options determine whether the dialog sits on top of
    other dialogs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar to the `blur` event on input elements, the `blur` event for dialog is
    fired when the dialog loses focus.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `buttonCreating` method is called when buttons are created and can modify
    the buttons on the title bar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `disable` method disables the event handlers for the dialog. It prevents
    the default button actions and disables dragging and resizing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `widget` method returns the dialog HTML element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The methods `maximize`, `minimize`, `pin`, `refresh`, `reset`, `restore`, and
    `toggle`, are available as buttons on the title bar. The best way to see what
    they do is play around with them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, the `getState` method is used to find the dialog state and returns
    either maximized, minimized, or normal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, the `stateChanged` event is fired when the state of the dialog changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The methods are called as a parameter to the `wijdialog` method. To disable
    button interactions, pass the string `disable`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Many of the methods come as pairs, and `enable` and `disable` are one of them.
    Calling `enable` enables the buttons again. Another pair is `restore`/`minimize`.
    `minimize` hides the dialog in a tray on the left bottom of the screen. `restore`
    sets the dialog back to its normal size and displays it again.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important option for usability is the `captionButtons` option. Although
    users are likely familiar with the minimize, resize, and close buttons; the pin
    and toggle buttons are not featured in common desktop environments. Therefore,
    you will want to choose the buttons that are visible depending on your use of
    the dialog box in your project. To turn off a button on the title bar, set the
    `visible` option to `false`. A default jQuery UI dialog window with only the close
    button can be created with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The other options for each button are `click`, `iconClassOff`, and `iconClassOn`.
    The `click` option specifies an event handler for the button. Nevertheless, the
    buttons come with default actions and you will want to use different icons for
    custom actions. That's where `iconClass` comes in. `iconClassOn` defines the CSS
    class for the button when it is loaded. `iconClassOff` is the class for the button
    icon after clicking. For a list of available jQuery UI icons and their classes,
    see [http://jquery-ui.googlecode.com/svn/tags/1.6rc5/tests/static/icons.html](http://jquery-ui.googlecode.com/svn/tags/1.6rc5/tests/static/icons.html).
  prefs: []
  type: TYPE_NORMAL
- en: '![Wijmo additions to the dialog widget at a glance](img/6067OT_2_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our next example uses `ui-icon-zoomin`, `ui-icon-zoomout`, and `ui-icon-lightbulb`.
    They can be found by toggling the text for the icons on the web page as shown
    in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: jQuery UI's dialog API lacks an option for configuring the buttons shown on
    the title bar. Wijmo not only comes with useful default buttons, but also lets
    you override them easily.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We create a dialog window passing in the `captionButtons` option. The pin,
    refresh, and minimize buttons have `visible` set to `false` so that the title
    bar is initialized without them. The final output looks as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding custom buttons](img/6067OT_2_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In addition, the toggle and maximize buttons are modified and given custom behaviors.
    The toggle button toggles the font size of the text by applying or removing a
    CSS class. Its default icon, set with `iconClassOn`, indicates that clicking on
    it will zoom in on the text. Once clicked, the icon changes to a zoom out icon.
    Likewise, the behavior and appearance of the maximize button have been changed.
    In the position where the maximize icon was displayed in the title bar previously,
    there is now a lightbulb icon with a tip.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although this method of adding new buttons to the title bar seems clumsy, it
    is the only option that Wijmo currently offers. Adding buttons in the content
    area is much simpler. The `buttons` option specifies the buttons to be displayed
    in the dialog window content area below the title bar. For example, to display
    a simple confirmation button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The text displayed on the button is `ok` and clicking on the button hides the
    dialog. Calling `$('#dialog').wijdialog('open')` will show the dialog again.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the dialog widget's appearance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wijmo offers several options that change the dialog''s appearance including
    title, height, width, and position. The title of the dialog can be changed either
    by setting the `title` attribute of the `div` element of the dialog, or by using
    the `title` option. To change the dialog''s theme, you can use CSS styling on
    the `wijmo-wijdialog` and `wijmo-wijdialog-captionbutton` classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We now add rounded boxes, a box shadow, and a text shadow to the dialog box.
    This is done with the `.wijmo-wijdialog` class. Since many of the CSS3 properties
    have different names on different browsers, the browser specific properties are
    used. For example, `-webkit-box-shadow` is necessary on Webkit-based browsers.
    The dialog width is set to 350 px when initialized so that the title text and
    buttons all fit on one line.
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the dialog widget''s appearance](img/6067OT_2_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Loading external content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wijmo makes it easy to load content in an iFrame. Simply pass a URL with the
    `contentUrl` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will load the Wijmo theme explorer in a dialog window with refresh and
    maximize/restore buttons. This output can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading external content](img/6067OT_2_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The refresh button reloads the content in the iFrame, which is useful for dynamic
    content. The maximize button resizes the dialog window.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Wijmo dialog widget is an extension of the jQuery UI dialog. In this chapter,
    the features unique to Wijmo's dialog widget are explored and given emphasis.
    I showed you how to add custom buttons, how to change the dialog appearance, and
    how to load content from other URLs in the dialog.
  prefs: []
  type: TYPE_NORMAL
