["```js\n$ cd users\n$ npm init\n.. answer questions \n.. name - user-auth-server\n$ npm install debug@^2.6.x fs-extra@^5.x js-yaml@^3.10.x \\\n       restify@^6.3.x restify-clients@^1.5.x sequelize@^4.31.x \\\n       sqlite3@^3.1.x --save\n```", "```js\nimport Sequelize from \"sequelize\";\nimport jsyaml from 'js-yaml';\nimport fs from 'fs-extra';\nimport util from 'util';\nimport DBG from 'debug';\nconst log = DBG('users:model-users'); \nconst error = DBG('users:error'); \n\nvar SQUser;\nvar sequlz;\n\nasync function connectDB() {\n\n    if (SQUser) return SQUser.sync();\n\n    const yamltext = await fs.readFile(process.env.SEQUELIZE_CONNECT, \n    'utf8');\n    const params = await jsyaml.safeLoad(yamltext, 'utf8');\n\n    if (!sequlz) sequlz = new Sequelize(params.dbname, params.username,\n                                        params.password, \n    params.params);\n\n    // These fields largely come from the Passport / Portable Contacts \n    schema.\n    // See http://www.passportjs.org/docs/profile\n    //\n    // The emails and photos fields are arrays in Portable Contacts. \n    // We'd need to set up additional tables for those.\n    //\n    // The Portable Contacts \"id\" field maps to the \"username\" field \n    here\n    if (!SQUser) SQUser = sequlz.define('User', {\n        username: { type: Sequelize.STRING, unique: true },\n        password: Sequelize.STRING,\n        provider: Sequelize.STRING,\n        familyName: Sequelize.STRING,\n        givenName: Sequelize.STRING,\n        middleName: Sequelize.STRING,\n        emails: Sequelize.STRING(2048),\n        photos: Sequelize.STRING(2048)\n    });\n    return SQUser.sync();\n}\n```", "```js\nexport async function create(username, password, provider, familyName, givenName, middleName, emails, photos) {\n    const SQUser = await connectDB();\n    return SQUser.create({\n        username, password, provider,\n        familyName, givenName, middleName,\n        emails: JSON.stringify(emails), photos: JSON.stringify(photos)\n    });\n}\n\nexport async function update(username, password, provider, familyName, givenName, middleName, emails, photos) {\n    const user = await find(username);\n    return user ? user.updateAttributes({\n        password, provider,\n        familyName, givenName, middleName,\n        emails: JSON.stringify(emails),\n        photos: JSON.stringify(photos)\n    }) : undefined;\n}\n```", "```js\nexport async function find(username) {\n    const SQUser = await connectDB();\n    const user = await SQUser.find({ where: { username: username } });\n    const ret = user ? sanitizedUser(user) : undefined;\n    return ret;\n}\n```", "```js\nexport async function destroy(username) {\n    const SQUser = await connectDB();\n    const user = await SQUser.find({ where: { username: username } });\n    if (!user) throw new Error('Did not find requested '+ username +' to delete');\n    user.destroy();\n}\n```", "```js\nexport async function userPasswordCheck(username, password) {\n    const SQUser = await connectDB();\n    const user = await SQUser.find({ where: { username: username } });\n    if (!user) {\n        return { check: false, username: username, message: \"Could not \n        find user\" };\n    } else if (user.username === username && user.password === \n    password) {\n        return { check: true, username: user.username };\n    } else {\n        return { check: false, username: username, message: \"Incorrect \n        password\" };\n    }\n}\n```", "```js\nexport async function findOrCreate(profile) {\n    const user = await find(profile.id);\n    if (user) return user;\n    return await create(profile.id, profile.password, profile.provider,\n                    profile.familyName, profile.givenName, profile.middleName,\n                    profile.emails, profile.photos);\n}\n```", "```js\nexport async function listUsers() {\n    const SQUser = await connectDB();\n    const userlist = await SQUser.findAll({});\n    return userlist.map(user => sanitizedUser(user));\n}\n```", "```js\nexport function sanitizedUser(user) {\n    var ret = {\n        id: user.username, username: user.username,\n        provider: user.provider,\n        familyName: user.familyName, givenName: user.givenName,\n        middleName: user.middleName,\n        emails: JSON.parse(user.emails),\n        photos: JSON.parse(user.photos)\n    };\n    try {\n        ret.emails = JSON.parse(user.emails);\n    } catch(e) { ret.emails = []; }\n    try {\n        ret.photos = JSON.parse(user.photos);\n    } catch(e) { ret.photos = []; }\n    return ret;\n}\n```", "```js\n \"main\": \"user-server.mjs\", \n```", "```js\nimport restify from 'restify';\nimport util from 'util';\n\nimport DBG from 'debug';\nconst log = DBG('users:service'); \nconst error = DBG('users:error'); \n\nimport * as usersModel from './users-sequelize';\n\nvar server = restify.createServer({\n    name: \"User-Auth-Service\",\n    version: \"0.0.1\"\n});\n\nserver.use(restify.plugins.authorizationParser());\nserver.use(check);\nserver.use(restify.plugins.queryParser());\nserver.use(restify.plugins.bodyParser({\n    mapParams: true\n}));\n```", "```js\n// Create a user record\nserver.post('/create-user', async (req, res, next) => {\n    try {\n        var result = await usersModel.create(\n                 req.params.username, req.params.password, \n        req.params.provider,\n                 req.params.familyName, req.params.givenName, \n        req.params.middleName,\n                 req.params.emails, req.params.photos);\n        res.send(result);\n        next(false);\n    } catch(err) { res.send(500, err); next(false); }\n});\n```", "```js\n// Update an existing user record\nserver.post('/update-user/:username', async (req, res, next) => {\n    try {\n        var result = await usersModel.update(\n              req.params.username, req.params.password, \n        req.params.provider,\n              req.params.familyName, req.params.givenName,  \n        req.params.middleName,\n              req.params.emails, req.params.photos);\n        res.send(usersModel.sanitizedUser(result));\n        next(false);\n    } catch(err) { res.send(500, err); next(false); }\n});\n```", "```js\n// Find a user, if not found create one given profile information\nserver.post('/find-or-create', async (req, res, next) => {\n    log('find-or-create '+ util.inspect(req.params));\n    try {\n        var result = await usersModel.findOrCreate({\n            id: req.params.username, username: req.params.username,\n            password: req.params.password, provider:  \n            req.params.provider,\n            familyName: req.params.familyName, givenName: \n            req.params.givenName,\n            middleName: req.params.middleName,\n            emails: req.params.emails, photos: req.params.photos\n        });\n        res.send(result);\n        next(false);\n    } catch(err) { res.send(500, err); next(false); }\n});\n```", "```js\n// Find the user data (does not return password)\nserver.get('/find/:username', async (req, res, next) => {\n    try {\n        var user = await usersModel.find(req.params.username);\n        if (!user) {\n            res.send(404, new Error(\"Did not find \"+ \n            req.params.username));\n        } else {\n            res.send(user);\n        }\n        next(false);\n    } catch(err) { res.send(500, err); next(false); }\n});\n```", "```js\n// Delete/destroy a user record\nserver.del('/destroy/:username', async (req, res, next) => {\n    try {\n        await usersModel.destroy(req.params.username);\n        res.send({}); \n        next(false); \n    } catch(err) { res.send(500, err); next(false); }\n});\n```", "```js\n// Check password\nserver.post('/passwordCheck', async (req, res, next) => {\n    try {\n        await usersModel.userPasswordCheck(\n                        req.params.username, req.params.password);\n        res.send(check);\n        next(false); \n    } catch(err) { res.send(500, err); next(false); }\n});\n```", "```js\n// List users\nserver.get('/list', async (req, res, next) => {\n    try {\n        var userlist = await usersModel.listUsers();\n        if (!userlist) userlist = [];\n        res.send(userlist);\n        next(false);\n    } catch(err) { res.send(500, err); next(false); }\n});\n```", "```js\nserver.listen(process.env.PORT, \"localhost\", function() { \n  log(server.name +' listening at '+ server.url); \n}); \n\n// Mimic API Key authentication. \n\nvar apiKeys = [ { \n    user: 'them', \n    key: 'D4ED43C0-8BD6-4FE2-B358-7C0E230D11EF' \n} ]; \n\nfunction check(req, res, next) { \n    if (req.authorization) { \n        var found = false; \n        for (let auth of apiKeys) { \n            if (auth.key  === req.authorization.basic.password \n             && auth.user === req.authorization.basic.username) { \n                found = true; \n                break; \n            } \n        } \n        if (found) next(); \n        else { \n            res.send(401, new Error(\"Not authenticated\")); \n            next(false); \n        } \n    } else { \n        res.send(500, new Error('No Authorization Key'));\n        next(false); \n    } \n} \n```", "```js\nserver.get('/request/url', authHandler, (req, res, next) => { \n  .. \n});\n```", "```js\ndbname: users \nusername: \npassword: \nparams: \n    dialect: sqlite \n    storage: users-sequelize.sqlite3 \n```", "```js\n{\n  \"name\": \"user-auth-server\",\n  \"version\": \"0.0.1\",\n  \"description\": \"\",\n  \"main\": \"user-server.js\",\n  \"scripts\": {\n    \"start\": \"DEBUG=users:* PORT=3333 SEQUELIZE_CONNECT=sequelize-sqlite.yaml node --experimental-modules user-server\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"engines\": {\n    \"node\": \">=8.9\"\n  },\n  \"dependencies\": {\n    \"debug\": \"^2.6.9\",\n    \"fs-extra\": \"^5.x\",\n    \"js-yaml\": \"^3.10.x\",\n    \"mysql\": \"^2.15.x\",\n    \"restify\": \"^6.3.x\",\n    \"restify-clients\": \"^1.5.x\",\n    \"sqlite3\": \"^3.1.x\",\n    \"sequelize\": \"^4.31.x\"\n  }\n}\n```", "```js\n$ npm start\n\n> user-auth-server@0.0.1 start /Users/david/chap08/users\n> DEBUG=users:* PORT=3333 SEQUELIZE_CONNECT=sequelize-mysql.yaml node user-server\n\n  users:server User-Auth-Service listening at http://127.0.0.1:3333 +0ms \n```", "```js\n'use strict';\n\nconst util = require('util');\nconst restify = require('restify-clients');\n\nvar client = restify.createJsonClient({\n  url: 'http://localhost:'+process.env.PORT,\n  version: '*'\n});\n\nclient.basicAuth('them', 'D4ED43C0-8BD6-4FE2-B358-7C0E230D11EF');\n\nclient.post('/create-user', {\n    username: \"me\", password: \"w0rd\", provider: \"local\",\n    familyName: \"Einarrsdottir\", givenName: \"Ashildr\", middleName: \"\",\n    emails: [], photos: []\n},\n(err, req, res, obj) => {\n    if (err) console.error(err.stack);\n    else console.log('Created '+ util.inspect(obj));\n});\n```", "```js\n$ npm start\n```", "```js\n$ PORT=3333 node users-add.js \nCreated { id: 1, username: 'me', password: 'w0rd', provider: 'local',\n  familyName: 'Einarrsdottir', givenName: 'Ashildr',\n  middleName: '',\n  emails: '[]', photos: '[]',\n  updatedAt: '2016-02-24T02:34:41.661Z',\n  createdAt: '2016-02-24T02:34:41.661Z' }  \n```", "```js\n$ sqlite3 users-sequelize.sqlite3 \nSQLite version 3.10.2 2016-01-20 15:27:19\nEnter \".help\" for usage hints.\nsqlite> .schema users\nCREATE TABLE `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255) UNIQUE, `password` VARCHAR(255), `provider` VARCHAR(255), `familyName` VARCHAR(255), `givenName` VARCHAR(255), `middleName` VARCHAR(255), `emails` VARCHAR(2048), `photos` VARCHAR(2048), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, UNIQUE (`username`));\nsqlite> select * from users;\n2|me|w0rd|local|Einarrsdottir|Ashildr||[]|[]|2018-01-21 05:34:56.629 +00:00|2018-01-21 05:34:56.629 +00:00\nsqlite> ^D  \n```", "```js\n'use strict';\n\nconst util = require('util');\nconst restify = require('restify-clients');\n\nvar client = restify.createJsonClient({\n  url: 'http://localhost:'+process.env.PORT,\n  version: '*'\n});\n\nclient.basicAuth('them', 'D4ED43C0-8BD6-4FE2-B358-7C0E230D11EF');\n\nclient.get('/find/'+ process.argv[2], \n(err, req, res, obj) => {\n    if (err) console.error(err.stack);\n    else console.log('Found '+ util.inspect(obj));\n});\n```", "```js\n$ PORT=3333 node users-find.js me\nFound { username: 'me', provider: 'local',\n  familyName: 'Einarrsdottir', givenName: 'Ashildr',\n  middleName: '',\n  emails: '[]', photos: '[]' }  \n```", "```js\n $ npm install superagent@^3.8.x\n```", "```js\nimport request from 'superagent';\nimport util from 'util';\nimport url from 'url'; \nconst URL = url.URL;\nimport DBG from 'debug';\nconst debug = DBG('notes:users-superagent'); \nconst error = DBG('notes:error-superagent'); \n\nfunction reqURL(path) {\n    const requrl = new URL(process.env.USER_SERVICE_URL);\n    requrl.pathname = path;\n    return requrl.toString();\n}\n```", "```js\nexport async function create(username, password, \n            provider, familyName, givenName, middleName, \n            emails, photos) {\n    var res = await request\n        .post(reqURL('/create-user'))\n        .send({ \n            username, password, provider, \n            familyName, givenName, middleName, emails, photos \n        })\n        .set('Content-Type', 'application/json')\n        .set('Acccept', 'application/json')\n        .auth('them', 'D4ED43C0-8BD6-4FE2-B358-7C0E230D11EF');\n    return res.body;\n}\n\nexport async function update(username, password, \n            provider, familyName, givenName, middleName, \n            emails, photos) { \n    var res = await request\n        .post(reqURL(`/update-user/${username}`))\n        .send({ \n            username, password, provider, \n            familyName, givenName, middleName, emails, photos \n        })\n        .set('Content-Type', 'application/json')\n        .set('Acccept', 'application/json')\n        .auth('them', 'D4ED43C0-8BD6-4FE2-B358-7C0E230D11EF');\n    return res.body;\n}\n```", "```js\nexport async function find(username) {\n    var res = await request\n        .get(reqURL(`/find/${username}`))\n        .set('Content-Type', 'application/json')\n        .set('Acccept', 'application/json')\n        .auth('them', 'D4ED43C0-8BD6-4FE2-B358-7C0E230D11EF');\n    return res.body;\n}\n```", "```js\nexport async function userPasswordCheck(username, password) { \n    var res = await request\n        .post(reqURL(`/passwordCheck`))\n        .send({ username, password })\n        .set('Content-Type', 'application/json')\n        .set('Acccept', 'application/json')\n        .auth('them', 'D4ED43C0-8BD6-4FE2-B358-7C0E230D11EF');\n    return res.body;\n} \n```", "```js\nexport async function findOrCreate(profile) {  \n    var res = await request\n        .post(reqURL('/find-or-create'))\n        .send({ \n            username: profile.id, password: profile.password, \n            provider: profile.provider, \n            familyName: profile.familyName, \n            givenName: profile.givenName, \n            middleName: profile.middleName, \n            emails: profile.emails, photos: profile.photos \n        })\n        .set('Content-Type', 'application/json')\n        .set('Acccept', 'application/json')\n        .auth('them', 'D4ED43C0-8BD6-4FE2-B358-7C0E230D11EF');\n    return res.body;\n}\n```", "```js\nexport async function listUsers() { \n    var res = await request\n        .get(reqURL('/list'))\n        .set('Content-Type', 'application/json')\n        .set('Acccept', 'application/json')\n        .auth('them', 'D4ED43C0-8BD6-4FE2-B358-7C0E230D11EF'); \n    return res.body;\n}\n```", "```js\n$ npm install passport@^0.4.x passport-local@1.x --save\n```", "```js\nimport path from 'path';\nimport util from 'util';\nimport express from 'express'; \nimport passport from 'passport'; \nimport passportLocal from 'passport-local';\nconst LocalStrategy = passportLocal.Strategy; \nimport * as usersModel from '../models/users-superagent';\nimport { sessionCookieName } from '../app';\n\nexport const router = express.Router();\n\nimport DBG from 'debug';\nconst debug = DBG('notes:router-users'); \nconst error = DBG('notes:error-users'); \n```", "```js\nexport function initPassport(app) { \n  app.use(passport.initialize()); \n  app.use(passport.session()); \n}\n\nexport function ensureAuthenticated(req, res, next) { \n  try {\n    // req.user is set by Passport in the deserialize function \n    if (req.user) next(); \n    else res.redirect('/users/login'); \n  } catch (e) { next(e); }\n}\n```", "```js\nouter.get('/login', function(req, res, next) { \n  try {\n    res.render('login', { title: \"Login to Notes\", user: req.user, }); \n  } catch (e) { next(e); }\n}); \n\nrouter.post('/login', \n  passport.authenticate('local', { \n    successRedirect: '/', // SUCCESS: Go to home page \n    failureRedirect: 'login', // FAIL: Go to /user/login \n  }) \n);\n\n```", "```js\nrouter.get('/logout', function(req, res, next) { \n  try {\n    req.session.destroy();\n    req.logout(); \n    res.clearCookie(sessionCookieName);\n res.redirect('/'); \n } catch (e) { next(e); }\n});\n```", "```js\npassport.use(new LocalStrategy( \n  async (username, password, done) => { \n    try {\n      var check = await usersModel.userPasswordCheck(username, \n      password);\n      if (check.check) { \n        done(null, { id: check.username, username: check.username }); \n      } else { \n        done(null, false, check.message); \n      } \n    } catch (e) { done(e); }\n  } \n)); \n```", "```js\npassport.serializeUser(function(user, done) { \n  try {\n    done(null, user.username); \n  } catch (e) { done(e); }\n}); \n\npassport.deserializeUser(async (username, done) => { \n  try {\n    var user = await usersModel.find(username);\n    done(null, user);\n  } catch(e) { done(e); }\n}); \n```", "```js\nimport { router as index } from './routes/index';\nimport { router as users, initPassport } from './routes/users';\nimport { router as notes } from './routes/notes'; \n```", "```js\nimport session from 'express-session';\nimport sessionFileStore from 'session-file-store';\nconst FileStore = sessionFileStore(session); \nexport const sessionCookieName = 'notescookie.sid';\n```", "```js\n$ npm install express-session@1.15.x session-file-store@1.2.x --save\n```", "```js\napp.use(session({ \n  store: new FileStore({ path: \"sessions\" }), \n  secret: 'keyboard mouse',\n  resave: true,\n  saveUninitialized: true,\n  name: sessionCookieName\n})); \ninitPassport(app);\n```", "```js\napp.use('/', index); \napp.use('/users', users); \napp.use('/notes', notes); \n```", "```js\nrouter.get('/', async (req, res, next) => {\n  try {\n    let keylist = await notes.keylist();\n    let keyPromises = keylist.map(key => { return notes.read(key) });\n    let notelist = await Promise.all(keyPromises);\n    res.render('index', { \n      title: 'Notes', notelist: notelist,\n      user: req.user ? req.user : undefined\n    });\n  } catch (e) { next(e); }\n});\n```", "```js\nimport { ensureAuthenticated } from './users'; \n```", "```js\nrouter.get('/add', ensureAuthenticated, (req, res, next) => {\n    try {\n        res.render('noteedit', {\n            title: \"Add a Note\",\n            docreate: true, notekey: \"\",\n            user: req.user, note: undefined\n        });\n    } catch (e) { next(e); }\n});\n```", "```js\nrouter.post('/save', ensureAuthenticated, (req, res, next) => { \n  .. \n}); \n```", "```js\nrouter.get('/view', (req, res, next) => {\n    try {\n        var note = await notes.read(req.query.key);\n        res.render('noteview', {\n            title: note ? note.title : \"\",\n            notekey: req.query.key,\n            user: req.user ? req.user : undefined, \n            note: note\n        });\n    } catch (e) { next(e); }\n}); \n```", "```js\nrouter.get('/edit', ensureAuthenticated, (req, res, next) => { \n    try {\n        var note = await notes.read(req.query.key);\n        res.render('noteedit', {\n            title: note ? (\"Edit \" + note.title) : \"Add a Note\",\n            docreate: false,\n            notekey: req.query.key,\n            user: req.user ? req.user : undefined, \n            note: note\n        });\n    } catch (e) { next(e); }\n}); \nrouter.get('/destroy', ensureAuthenticated, (req, res, next) => { \n    try {\n        var note = await notes.read(req.query.key);\n        res.render('notedestroy', {\n            title: note ? `Delete ${note.title}` : \"\",\n            notekey: req.query.key,\n            user: req.user ? req.user : undefined, \n            note: note\n        });\n    } catch (e) { next(e); }\n}); \nrouter.post('/destroy/confirm', ensureAuthenticated, (req, res, next) => { \n  .. \n}); \n```", "```js\n...\n    {{#if user}}\n        <div class=\"collapse navbar-collapse\"   \n         id=\"navbarSupportedContent\">\n            <span class=\"navbar-text text-dark col\">{{ title }}</span>\n            <a class=\"btn btn-dark col-auto\" href=\"/users/logout\">\n            Log Out <span class=\"badge badge-light\">{{ user.username }}\n         </span></a>\n            <a class=\"nav-item nav-link btn btn-dark col-auto\" \n         href='/notes/add'>\n                                    ADD Note</a>\n        </div>\n    {{else}}\n        <div class=\"collapse navbar-collapse\" id=\"navbarLogIn\">\n            <a class=\"btn btn-primary\" href=\"/users/login\">Log in</a>\n        </div>\n    {{/if}}\n...\n```", "```js\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col-12 btn-group-vertical\" role=\"group\">\n\n        <form method='POST' action='/users/login'> \n        <div class=\"form-group\"> \n        <label for=\"username\">User name:</label> \n        <input class=\"form-control\" type='text' id='username' \n               name='username' value='' placeholder='User Name'/> \n        </div> \n        <div class=\"form-group\"> \n        <label for=\"password\">Password:</label> \n        <input class=\"form-control\" type='password' id='password' \n               name='password' value='' placeholder='Password'/> \n        </div> \n        <button type=\"submit\" class=\"btn btn-default\">Submit</button> \n        </form> \n\n    </div>\n  </div>\n</div>\n```", "```js\n<form method='POST' action='/notes/destroy/confirm'>\n<div class=\"container-fluid\">\n    {{#if user}}\n    <input type='hidden' name='notekey' value='{{#if note}}{{notekey}}{{/if}}'>\n    <p class=\"form-text\">Delete {{note.title}}?</p>\n\n    <div class=\"btn-group\">\n        <button type=\"submit\" value='DELETE' \n                class=\"btn btn-outline-dark\">DELETE</button>\n        <a class=\"btn btn-outline-dark\" \n            href=\"/notes/view?key={{#if note}}{{notekey}}{{/if}}\" \n            role=\"button\">Cancel</a>\n    </div>\n    {{else}}\n    {{> not-logged-in }}\n    {{/if}}\n</div>\n</form>\n```", "```js\n<div class=\"jumbotron\"> \n <h1>Not Logged In</h1> \n <p>You are required to be logged in for this action, but you are not. \n You should not see this message. It's a bug if this message appears.   \n </p> \n <p><a class=\"btn btn-primary\" href=\"/users/login\">Log in</a></p> \n</div>\n```", "```js\n.. \n<div class=\"row\"><div class=\"col-xs-12\"> \n{{#if user}}\n.. \n{{else}}\n{{> not-logged-in }}\n{{/if}}\n</div></div> \n.. \n```", "```js\n\"scripts\": {\n    \"start\": \"DEBUG=notes:* SEQUELIZE_CONNECT=models/sequelize-sqlite.yaml NOTES_MODEL=sequelize USER_SERVICE_URL=http://localhost:3333 node --experimental-modules ./bin/www.mjs\",\n    \"dl-minty\": \"mkdir -p minty && npm run dl-minty-css && npm run dl-\n    minty-min-css\",\n    \"dl-minty-css\": \"wget https://bootswatch.com/4/minty/bootstrap.css \n    -O minty/bootstrap.css\",\n    \"dl-minty-min-css\": \"wget https://bootswatch.com/4/minty/bootstrap.min.css -O minty/bootstrap.min.css\"\n},\n```", "```js\n$ cd users\n$ npm start\n\n> user-auth-server@0.0.1 start /Users/david/chap08/users\n> DEBUG=users:* PORT=3333 SEQUELIZE_CONNECT=sequelize-sqlite.yaml node user-server\n\n  users:server User-Auth-Service listening at http://127.0.0.1:3333 \n +0ms\n```", "```js\n$ cd notes\n$ DEBUG=notes:* npm start\n\n> notes@0.0.0 start /Users/david/chap08/notes\n> SEQUELIZE_CONNECT=models/sequelize-sqlite.yaml NOTES_MODEL=models/notes-sequelize USERS_MODEL=models/users-rest USER_SERVICE_URL=http://localhost:3333 node ./bin/www\n\n  notes:server Listening on port 3000 +0ms\n```", "```js\n$ npm install passport-twitter@1.x --save\n```", "```js\nimport passportTwitter from 'passport-twitter';\nconst TwitterStrategy = passportTwitter.Strategy; \n```", "```js\nconst twittercallback = process.env.TWITTER_CALLBACK_HOST\n    ? process.env.TWITTER_CALLBACK_HOST\n    : \"http://localhost:3000\";\n\npassport.use(new TwitterStrategy({ \n  consumerKey: process.env.TWITTER_CONSUMER_KEY, \n  consumerSecret: process.env.TWITTER_CONSUMER_SECRET, \n  callbackURL: `${twittercallback}/users/auth/twitter/callback` \n}, \nasync function(token, tokenSecret, profile, done) { \n  try {\n    done(null, await usersModel.findOrCreate({ \n      id: profile.username, username: profile.username, password: \"\", \n      provider: profile.provider, familyName: profile.displayName, \n      givenName: \"\", middleName: \"\", \n      photos: profile.photos, emails: profile.emails \n    }));\n  } catch(err) { done(err); }\n})); \n```", "```js\nrouter.get('/auth/twitter', passport.authenticate('twitter')); \n```", "```js\nrouter.get('/auth/twitter/callback', \n  passport.authenticate('twitter', { successRedirect: '/', \n                       failureRedirect: '/users/login' })); \n```", "```js\n...\n{{else}}\n<div class=\"collapse navbar-collapse\" id=\"navbarLogIn\">\n    <span class=\"navbar-text text-dark col\"></span>\n    <a class=\"nav-item nav-link btn btn-dark col-auto\" href=\"/users/login\">\n                                Log in</a>\n    <a class=\"nav-item nav-link btn btn-dark col-auto\" href=\"/users/auth/twitter\">\n    <img width=\"15px\"\n         src=\"img/Twitter_Social_Icon_Rounded_Square_Color.png\"/>\n         Log in with Twitter</a> \n</div>\n{{/if}}\n```", "```js\n$ npm start\n\n> notes@0.0.0 start /Users/David/chap08/notes\n> DEBUG=notes:* SEQUELIZE_CONNECT=models/sequelize-sqlite.yaml NOTES_MODEL=sequelize USER_SERVICE_URL=http://localhost:3333 node --experimental-modules ./bin/www.mjs\n\n(node:42095) ExperimentalWarning: The ESM module loader is experimental.\n notes:server-debug Listening on port 3000 +0ms\n```", "```js\n  \"scripts\": { \n    \"start\": \"SEQUELIZE_CONNECT=models/sequelize-sqlite.yaml NOTES_MODEL=models/notes-sequelize USERS_MODEL=models/users-rest USER_SERVICE_URL=http://localhost:3333 node ./bin/www\", \n    \"start-server1\": \"SEQUELIZE_CONNECT=models/sequelize-sqlite.yaml NOTES_MODEL=models/notes-sequelize USERS_MODEL=models/users-rest USER_SERVICE_URL=http://localhost:3333 PORT=3000 node ./bin/www\", \n    \"start-server2\": \"SEQUELIZE_CONNECT=models/sequelize-sqlite.yaml NOTES_MODEL=models/notes-sequelize USERS_MODEL=models/users-rest USER_SERVICE_URL=http://localhost:3333 PORT=3002 node ./bin/www\", \n    \"dl-minty\": \"mkdir -p minty && npm run dl-minty-css && npm run dl-minty-min-css\",\n    \"dl-minty-css\": \"wget https://bootswatch.com/4/minty/bootstrap.css -O minty/bootstrap.css\",\n    \"dl-minty-min-css\": \"wget https://bootswatch.com/4/minty/bootstrap.min.css -O minty/bootstrap.min.css\"\n  },\n```", "```js\n$ npm run start-server1\n\n> notes@0.0.0 start-server1 /Users/David/chap08/notes\n> DEBUG=notes:* SEQUELIZE_CONNECT=models/sequelize-sqlite.yaml NOTES_MODEL=sequelize USER_SERVICE_URL=http://localhost:3333 PORT=3000 node --experimental-modules ./bin/www.mjs\n\n(node:43591) ExperimentalWarning: The ESM module loader is experimental.\n notes:server-debug Listening on port 3000 +0ms\n```", "```js\n$ npm run start-server2\n\n> notes@0.0.0 start-server2 /Users/David/chap08/notes\n> DEBUG=notes:* SEQUELIZE_CONNECT=models/sequelize-sqlite.yaml NOTES_MODEL=sequelize USER_SERVICE_URL=http://localhost:3333 PORT=3002 node --experimental-modules ./bin/www.mjs\n\n(node:43755) ExperimentalWarning: The ESM module loader is experimental.\n notes:server-debug Listening on port 3002 +0ms\n```", "```js\n$ ls -l sessions/\ntotal 32\n-rw-r--r-- 1 david wheel 139 Jan 25 19:28 -QOS7eX8ZBAfmK9CCV8Xj8v-3DVEtaLK.json\n-rw-r--r-- 1 david wheel 139 Jan 25 21:30 T7VT4xt3_e9BiU49OMC6RjbJi6xB7VqG.json\n-rw-r--r-- 1 david wheel 223 Jan 25 19:27 ermh-7ijiqY7XXMnA6zPzJvsvsWUghWm.json\n-rw-r--r-- 1 david wheel 139 Jan 25 21:23 uKzkXKuJ8uMN_ROEfaRSmvPU7NmBc3md.json\n$ cat sessions/T7VT4xt3_e9BiU49OMC6RjbJi6xB7VqG.json \n{\"cookie\":{\"originalMaxAge\":null,\"expires\":null,\"httpOnly\":true,\"path\":\"/\"},\"__lastAccess\":1516944652270,\"passport\":{\"user\":\"7genblogger\"}}\n```"]