- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript is a quirky little language that was written by Brendan Eich when
    he was working at Netscape around 1995\. It was the first browser-based scripting
    language and ran only in Netscape Navigator at the time, but it eventually found
    its way into most other web browsers. Back then, web pages consisted almost entirely
    of static markup. JavaScript (initially named LiveScript) emerged around the need
    to make pages dynamic and to bring the power of a full scripting language to browser
    developers.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of the design decisions of the language were driven by the need of simplicity
    and ease of use, although at the time, some were made for pure marketing reasons
    at Netscape. The name "JavaScript" was chosen to associate it with Java from Sun
    Microsystems, despite the fact that Sun really had nothing to do with it and that
    it's conceptually quite different from its namesake.
  prefs: []
  type: TYPE_NORMAL
- en: Except in one way, that is, most of its syntax was borrowed from Java, and also
    C and C++, so as to be familiar to the programmers coming from these languages.
    But despite looking similar, it is in fact a very different beast under the hood
    and shares characteristics with the more exotic languages such as Self, Scheme,
    and Smalltalk. Among these are dynamic typing, prototypical inheritance, first
    class functions, and closures.
  prefs: []
  type: TYPE_NORMAL
- en: So we ended up with a language that looked a lot like some of the mainstream
    languages at the time and could be coaxed into acting a lot like them, but with
    quite different central ideas. This has caused it to be very misunderstood for
    many years. A lot of programmers never saw it as being a "serious" programming
    language and thus didn't apply a lot of the best development practices built up
    over decades when it came to writing browser code.
  prefs: []
  type: TYPE_NORMAL
- en: Those who did delve further into the language were sure to find a lot of strangeness.
    Eich himself admitted that the language was prototyped within about 10 days, and
    even though what he came up with was impressive, JavaScript isn't without (many)
    warts. These too didn't really help to raise its profile.
  prefs: []
  type: TYPE_NORMAL
- en: Despite all these issues, JavaScript still became one of the most widely used
    programming languages in the world, if not merely because of the explosion of
    the Internet and the spread of web browsers. Support across a multitude of browsers
    would seem to be a great thing, but it also caused havoc because of differences
    in implementations, both in the language and the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Around 2005, the term AJAX was coined to describe a style of JavaScript programming
    that was made possible by the introduction of the `XMLHTTPRequest` object in browsers.
    This meant that developers could write client-side code that could communicate
    with the server using HTTP directly, and update page elements without reloading
    the page. This was really a turning point in the history of the language. All
    of a sudden, it was being used in "serious" web applications, and people began
    to see the language in a different light.
  prefs: []
  type: TYPE_NORMAL
- en: In 2006, John Resig released jQuery to the world. It was designed to simplify
    client-side scripting, DOM manipulation, and AJAX, as well as to abstract away
    many of the inconsistencies across browsers. It became an essential tool for many
    JavaScript programmers. To date, it is used on 55 percent of the top 10, 000 websites
    in the world.
  prefs: []
  type: TYPE_NORMAL
- en: In 2009, Ryan Dahl created Node.js, an event-driven network application framework
    written on top of the Google V8 JavaScript engine. It quickly became very popular,
    especially for writing web server applications. A big factor in its success has
    been the fact that you could now write JavaScript on the server, as well as in
    the browser. An elaborate and distinguished community has sprung up around the
    framework, and at present the future of Node.js is looking very bright.
  prefs: []
  type: TYPE_NORMAL
- en: Early in 2010, Jeremy Ashkenas created CoffeeScript, a language that compiles
    to JavaScript. Its goal is to create cleaner, more concise, and more idiomatic
    JavaScript and to make it easier to use the better features and patterns of the
    language. It does away with a lot of the syntactic cruft of JavaScript, reducing
    the line noise and generally creating much shorter and clearer code.
  prefs: []
  type: TYPE_NORMAL
- en: Influenced by languages such as Ruby, Python, and Haskell, it borrows some of
    the powerful and interesting features of these languages. Although it can look
    quite different, the CoffeeScript code generally maps to its generated JavaScript
    pretty closely. It has grown to be an overnight success, quickly being adopted
    by the Node.js community as well as being included in Ruby on Rails 3.1.
  prefs: []
  type: TYPE_NORMAL
- en: Brendan Eich has also expressed his admiration for CoffeeScript, and has used
    it as an example of some of the things he would like to see in the future versions
    of JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: This book serves as an introduction to the language as well as a motivation
    for why you should write CoffeeScript instead of JavaScript wherever you can.
    It also then explores using CoffeeScript in the browser using jQuery and Ruby
    on Rails, as well as on the server using Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Why CoffeeScript?"), *Why CoffeeScript?*,
    introduces CoffeeScript and delves deeper into the differences between it and
    JavaScript, specifically focusing on the parts of JavaScript that CoffeeScript
    aims to improve.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Running CoffeeScript"), *Running CoffeeScript*,
    goes into a short introduction of the CoffeeScript stack and how it''s typically
    packaged. You will learn how to install CoffeeScript on Windows, Mac, and Linux
    using Node.js and npm. You will get to know the CoffeeScript compiler (`coffee`)
    as well as get familiar with some helpful tools and resources for day-to-day development
    in CoffeeScript.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. CoffeeScript and jQuery"), *CoffeeScript
    and jQuery*, introduces client-side development using jQuery and CoffeeScript.
    We also start implementing a sample application for this book using these technologies.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. CoffeeScript and Rails"), *CoffeeScript and
    Rails*, starts with a brief overview of Ruby on Rails, and its history with JavaScript
    frameworks. We are introduced to the Asset Pipeline in Rails 3.1 and how it integrates
    with CoffeeScript and jQuery. We then move to adding a backend to our sample application
    using Rails.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. CoffeeScript and Node.js"), *CoffeeScript
    and Node.js*, starts with a brief overview of Node.js, its history, and philosophy.
    It then demonstrates how easy it is to write server-side code in CoffeeScript
    using Node.js. We then implement the final piece of the sample application using
    WebSockets and Node.js.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use this book, you need a computer running Windows, Mac OS X, or Linux and
    a basic text editor. Throughout the book, we'll be downloading some software that
    we need from the Internet, all of which will be free and open source.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for existing JavaScript programmers who would like to learn more
    about CoffeeScript, or someone who has some programming experience and would like
    to learn more about web development using CoffeeScript. It also serves as a great
    introduction to jQuery, Ruby on Rails, and Node.js. Even if you have experience
    with one or more of these frameworks, this book will show you how you can use
    CoffeeScript to make your experiences with them even better.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text are shown as follows: "You''ll see that the clause of the
    `if` statement does not need be enclosed within parentheses".'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "a footer will have the **Clear completed** button".'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or may have disliked. Reader feedback is important for
    us to develop titles that you really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply send an e-mail to `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book title via the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide on [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you would report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/support](http://www.packtpub.com/support),
    selecting your book, clicking on the **errata submission form** link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded on our website, or added to any list
    of existing errata, under the Errata section of that title. Any existing errata
    can be viewed by selecting your title from [http://www.packtpub.com/support](http://www.packtpub.com/support).
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Piracy of copyright material on the Internet is an ongoing problem across all
    media. At Packt, we take the protection of our copyright and licenses very seriously.
    If you come across any illegal copies of our works, in any form, on the Internet,
    please provide us with the location address or website name immediately so that
    we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors, and our ability to bring
    you valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`
    if you are having a problem with any aspect of the book, and we will do our best
    to address it.
  prefs: []
  type: TYPE_NORMAL
