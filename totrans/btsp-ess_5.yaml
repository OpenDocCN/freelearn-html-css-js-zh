- en: Chapter 5. The JavaScript Add-ons in Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most powerful features in the Bootstrap framework is JavaScript add-ons.
    In this library, we have almost all the required frontend components, such as
    modal window, carousel, dropdown, tooltip, alert, navigation tab, accordion, and
    many more. Along with the previously discussed CSS classes and components, these
    JavaScript add-ons make Bootstrap a complete suite and framework to develop your
    HTML pages—both for desktops and mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will go through these add-ons in depth and will enhance
    our example application quite a bit using these components.
  prefs: []
  type: TYPE_NORMAL
- en: As we have briefly discussed earlier, Bootstrap JavaScript components are built
    using, and on top of, jQuery ([https://jquery.com/](https://jquery.com/)). Thus,
    all the syntaxes and behaviors of these add-ons are similar to jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We assume that you have a basic working knowledge on jQuery as we will be using
    jQuery-based scripts in all our further implementation and explanations.
  prefs: []
  type: TYPE_NORMAL
- en: Those who are unfamiliar with jQuery can refer to online documentation at [https://api.jquery.com/](https://api.jquery.com/).
  prefs: []
  type: TYPE_NORMAL
- en: A basic concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before diving deep into the implementation of JavaScript add-ons, let's clarify
    a few basic concepts first.
  prefs: []
  type: TYPE_NORMAL
- en: Custom data attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As per W3C specification, custom data attributes can be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Custom data attributes are intended to store custom data private to the page
    or application, for which there are no more appropriate attributes or elements."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ([http://www.w3.org/html/wg/drafts/html/master/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes](http://www.w3.org/html/wg/drafts/html/master/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)).
    Thus, in HTML5, you can add custom attributes in any HTML element. The name of
    the attribute should start with `data-*`; here, `*` stands for the actual name
    of your attribute. The value of the attribute like any other HTML attribute is
    string. This feature has been introduced in HTML5 to enable site developers to
    store custom values corresponding to HTML elements, that is, values that cannot
    be adjusted in any of the standard attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Bootstrap JavaScript add-ons, some of such custom data attributes are heavily
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data-target`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-toggle`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-dismiss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-spy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-placement`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-content`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-container`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-animation`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-loading-text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-complete-text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-parent`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-slide`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data-ride`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these `data-*` attributes are purely custom and are used by the Bootstrap
    framework. We will later see how these data attributes have been used in various
    JavaScript components. In a nutshell, without even writing a single JavaScript
    line in your page, you can develop the functionalities around these add-ons.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though we can develop many of the functionalities using the powerful data
    attributes used in Bootstrap, we still need the standard way of doing stuff—calling
    methods, handling events, setting properties dynamically, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like any other standard JavaScript component library, Bootstrap add-ons also
    support typical way of triggering and handling events. Handling those events could
    be very useful whenever you want to perform some actions whenever any particular
    event occurs. For example, you want to invoke an AJAX call whenever a modal window
    is closed.
  prefs: []
  type: TYPE_NORMAL
- en: Packaging add-ons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you might have noted in the source code we have written in previous chapters,
    we have included the `bootstrap.min.js` file in our HTML page. This file includes
    all the JavaScript add-ons Bootstrap offers. Thus, when you include this file
    in an HTML page, you would be able to use any and all of the add-ons.
  prefs: []
  type: TYPE_NORMAL
- en: Should you want to include and use only a few of the available components, then
    you can create and use a subset of this file as well. We will see how to do this
    in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Modal windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modal windows is perhaps one of the most widely used custom component. The days
    of standard JavaScript alert and prompts are gone; you should implement custom
    modal windows in order to interact with the user.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap offers a rich set of functionality and features that would suit almost
    all requirement variations around modal windows.
  prefs: []
  type: TYPE_NORMAL
- en: Basic modal window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is the most basic version of a modal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic modal window](img/B03987_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the code to create it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, you need a button or link to open this window. Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By putting just these two code blocks, you should be able to create a modal
    window and a button to open it. As you can see, we haven't written any JavaScript
    code yet, but still could generate a modal window and a control to open it.
  prefs: []
  type: TYPE_NORMAL
- en: The most important things to note here are the `data-toggle` and `data-target`
    attributes of the `button` element. By putting modal as the `data-toggle` value,
    we are informing Bootstrap that this button will invoke some modal window, and
    which modal window it should invoke is determined by the `data-target` attribute.
    Hence, you can see that the value of the `data-target` attribute is the modal—this
    is actually the ID of the `div` element, which works as the modal window. Now,
    let's note the button we have in the `modal-footer` section. This button has a
    `data-dismiss` attribute that says that it will close the current modal window.
  prefs: []
  type: TYPE_NORMAL
- en: This is the common way of working of most of the JavaScript add-ons Bootstrap
    has distributed. Of course, there are several other data attributes being used
    in the other components, but the development and usage method is the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can have the modal dialog box opened by normal JavaScript as well,
    in case you do not want to use the data attributes for some reason—for example,
    if you want to open the modal window when any particular event occurs, such as
    an AJAX callback being invoked. Here is our traditional way of scripting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This method is essentially a short form of following other overloaded variants:'
  prefs: []
  type: TYPE_NORMAL
- en: '`modal(''show'')`: This opens up the modal dialog box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modal(''hide'')`: This closed the dialog box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modal(''toggle'')`: This toggles the state—closes if the dialog is open and
    opens if it is closed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modal(options)`: Some of the commonly used options are keyboard (true/false),
    show (true/false), and backdrop (static/true/false). By putting the `keyboard`
    value as `false`, you can ensure that the dialog box won''t close if *Esc* key
    is pressed. Putting `static` as `backdrop` value would restrict the dialog box
    from closing when mouse is clicked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: One important thing to be noted here is if you want to use any of the preceding
    options (such as `keyboard`, `show`, `backdrop`), you might need to use the JavaScript
    API, rather than invoking the dialog box by data attributes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Example – enhancing our application using the modal dialog box
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s enhance our application using the modal dialog box. You might recollect
    that we had added a link in the top navigation bar for **Sign In** in the previous
    chapter. Let''s have a popup for users to log in to our site. Here is our code
    of the modal box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the code for the **Sign In** link in the navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, this is our JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can have the full-page source code from the downloaded source code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how our **Sign In** dialog box appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – enhancing our application using the modal dialog box](img/B03987_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the script, of course, you would add your code for actually signing the user
    in, which may be a submit call or an AJAX call to the server.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, Bootstrap modal windows also support a few events to enable you
    to fire any action in case any of these events occur.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, have a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will show this browser alert whenever the modal window has been fully closed.
    The other exposed events are—`show.bs.modal`, `shown.bs.modal`, `hide.bs.modal`,
    `hidden.bs.modal`, and `loaded.bs.modal`.
  prefs: []
  type: TYPE_NORMAL
- en: Tabs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tabs are another popular and pretty standard way of navigation in today''s
    websites. In Bootstrap, it is very easy to design a tab-based navigation model;
    all you have to do is to create a UL element with `.nav-tabs` CSS class. Here
    is a sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the simple tab display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tabs](img/B03987_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There is another way of displaying tabs, which is termed as **pills**. Just
    replace the class `.nav-tabs` with `.nav-pills`. Here is the rendition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tabs](img/B03987_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s use this tabbed display in our application. We want to have a **Sign
    Up** form as well (until now, we have only **Sign In**). We will add this **Sign
    Up** form in the same modal dialog box where the login form is displayed. Here
    are the screenshots of the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tabs](img/B03987_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a screenshot of the **Sign Up** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tabs](img/B03987_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s look at the code for the previous screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The HTML markup is quite self-explanatory; however, the small JS code is interesting.
    What this piece of code does is, whenever the user navigates from one tab to another
    (from **Sign In** to **Sign Up**, and vice versa), the caption (title) of the
    dialog box gets changed correspondingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The few points worth noting here are:'
  prefs: []
  type: TYPE_NORMAL
- en: The function will get invoked in the event of a new tab being selected (the
    `shown.bs.tab` event). This function is essentially the event handler.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `e.target` object represents the newly opened tab.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the HTML markup, you can see that we have added a custom data attribute `data-caption`;
    this attribute is used to set the title of the modal window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar to this `shown.bs.tab` event, other exposed events are—`show.bs.tab`,
    `hide.bs.tab`, and `hidden.bs.tab`.
  prefs: []
  type: TYPE_NORMAL
- en: Collapse and accordions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bootstrap collapse component is used to simply show and hide different sections
    and subsections of your web page. This is useful when you don''t want the sections
    to be visible initially, but will toggle when clicked on a button or hyperlink.
    Here is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Collapse and accordions](img/B03987_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the HTML code for the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The JavaScript code for the preceding screenshot is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Again, using the `data-target` and `data-toggle` attributes, the collapse behavior
    has been achieved. Also, we have used the `show.bs.collapse` and `hide.bs.collapse`
    event handlers to change the text of the button correspondingly.
  prefs: []
  type: TYPE_NORMAL
- en: Example – showing the product categories of our store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You might remember that we had added a link in our navigation bar in the last
    chapter. Let''s create a page for it and use this collapse component as an accordion
    in that page to show the product categories of our store. Here is the markup for
    the categories using accordion pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following JavaScript code can use some additional Bootstrap classes to
    our markup for esthetic purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how our category browser looks like. We have created three separate
    section for three main categories. The following is the screenshot of all three
    categories merged into one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – showing the product categories of our store](img/B03987_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, this is the way our browse page looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – showing the product categories of our store](img/B03987_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Full source code for this page is available for download.
  prefs: []
  type: TYPE_NORMAL
- en: Tooltips and popovers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You would of course need tooltips for every user-friendly site you develop.
    Tooltips are more advanced versions of the `title` attributes you normally use
    in case of images. Here is a simple tooltip:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tooltips and popovers](img/B03987_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The HTML markup for this is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Of course, the `data-toggle`, `data-placement,` and `title attributes` options
    are only relevant in this context. You have four options (four directions essentially)
    for data-placement—top, right, bottom, and left. The tooltip will be displayed
    as per this attribute value.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, you need to initialize the tooltip functionality in the page where
    you want to use it. This is because, unlike any other component, Bootstrap does
    not initialize this component by default. Here is the code for this—this you can
    include in the HTML page JS section itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This script will enable all the tooltips and popovers you have in the current
    page. The next advanced option of tooltip is popover. In tooltips, you cannot
    have complex and lengthy data. Also, you can not show HTML content in a tooltip.
    Popovers are more flexible and advanced. Suppose, in the list of the products,
    that we want to show the brief details on mouse click. The following example contains
    two types of popover creation—one by data attribute and another by JavaScript.
    Here is our HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'For product 2, HTML markup and JavaScript are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the way the popovers render (two popover screenshots merged into one):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tooltips and popovers](img/B03987_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that in case of the JavaScript initialization of the popover, you
    can pass a variety of other parameters that gives you more control and flexibility.
    As for the `content` value, you can always call another function, which, in turn,
    invokes an AJAX call and fetches data from your database.
  prefs: []
  type: TYPE_NORMAL
- en: Dropdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Bootstrap drop-down components can be used in a number of cases, for example,
    in a menu, button, link, navigation bar, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose that we need to have a few options in dropdown in the **See all** link
    we had created in the product list panel. Here is what we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dropdown](img/B03987_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the markup to implement this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In a similar way, we can add a dropdown in the navigation menu also. Let''s
    say that we need to have a drop-down menu in the navigation bar for user''s account,
    profile, shopping cart, and so on. This is the expected result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Dropdown](img/B03987_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To achieve this, we change the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Thus, you can see that Bootstrap dropdowns are very generic in nature, and they
    can be used in a number of places and for number of purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Alerts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We had visited this component briefly in the previous chapter. To extend on
    that functionality, let''s add a simple close button to dismiss the alert box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we have got close button here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Alerts](img/B03987_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The alert component does offer JavaScript interface as well, because most of
    the time you would want the alert messages to be displayed dynamically as per
    the user's operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you remember, in the popover components, we had added a popover on a product
    click in order to display the product details. There we had an **Add to cart**
    button as well. Let''s say, whenever the user clicks on this button an alert box
    should appear confirming to the user that the product has been added to the shopping
    cart. We change the popover a little bit for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The only change we have done here is that we have added an `onclick` event handler
    for the **Add to cart** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have also added a blank placeholder in the page (just after the page header)
    for the alert messages to appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the JavaScript function for the `onclick` event handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus, whenever the **Add to cart** button will be pressed, this alert message
    will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Alerts](img/B03987_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Of course, in this function, you will add your AJAX calls in order to actually
    add the product in the shopping cart. Depending on this execution result, the
    user will be notified. Here is another sample in case the product could not be
    added in the cart for some reason:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Alerts](img/B03987_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The updated code is of course in the `addToCart` JavaScript function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Thus you can see, the alert component is quite flexible and generic enough in
    order to be used in a number of circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: Carousels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Carousels are popular slideshow components and are also available for use in
    Bootstrap. In our home page, let''s display the most popular products as a carousel.
    Here is the HTML markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s place the preceding piece of code in the **Most Popular Products** section
    in our home page. The carousel renders like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Carousels](img/B03987_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Like other components, the carousel component is also available via JavaScript
    APIs. For example, in the following code if we had to invoke carousel component
    via scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `interval` value defines the amount of time in milliseconds for each slide
    to stay and then move ahead. Mentioning the pause as hover instructs Bootstrap
    to stay on the current slide until the mouse is moved out of the container. The
    important parts of the carousel component are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`carousel-indicator`: These controls are used to open a particular slide in
    the set of slides in the carousel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`carousel-inner`: These sections are actual contents of the each of the slides
    in the carousel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`carousel-control`: These are essentially left and right arrows to navigate
    to previous or next slides in the carousel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final preview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The complete code for the two pages can be found in the downloadable code available
    with this book. The screenshots of the final version of the two main pages—the
    **Home** page and **Browse Products** page are as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The final preview](img/B03987_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In a small mobile device, it will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The final preview](img/B03987_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the desktop view of the **Browse Products** page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The final preview](img/B03987_05_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, the mobile version of the page is as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The final preview](img/B03987_05_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we completed exploring almost all of the features and functionalities
    of Bootstrap. We saw the CSS classes, the available components, and finally the
    JavaScript add-ons. To reiterate the same, some important CSS classes are the
    grid system, responsive classes, data entry forms tables, and images. Similarly,
    some important components are panels and wells, toolbars and button groups, breadcrumbs
    and navigation controls, and Glyphicons. Finally, in this chapter, we explored
    the JS add-ons: modal windows, tooltips and popovers, carousels, accordions, and
    alerts'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start creating our development environment of Bootstrap
    and will customize default Bootstrap options.
  prefs: []
  type: TYPE_NORMAL
