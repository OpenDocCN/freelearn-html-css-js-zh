["```js\nvar svg = d3.select('body')\n    .append('svg')\n    .attr({\n        width: 450,\n        height: 450\n    });\nvar label = svg.append('text')\n    .attr('x', 10)\n    .attr('y', 30);\n\nsvg.on('mousemove', function () {\n    var position = d3.mouse(svg.node());\n    label.text('X=' + position[0] + ' , Y=' + position[1]);\n});\n```", "```js\nvar data = [30, 20, 40],\n```", "```js\n    .on('mouseenter', function() {\n        d3.select(this).attr('fill', 'red');\n    })\n    .on('mouseout', function() {\n        d3.select(this).attr('fill', 'steelblue');\n    });\n```", "```js\n.on('click', function(d, i) {\n    alert(d + ' ' + i);\n});\n```", "```js\nvar dragBehavior = d3.behavior.drag()\n                              .on('drag', onDrag);\ncircles.call(dragBehavior);\n\nfunction onDrag(d) {\n    var x = d3.event.x,\n        y = d3.event.y;\n    if ((x >= radius) && (x <= width - radius) &&\n        (y >= radius) && (y <= height - radius)) {\n        d3.select(this)\n            .attr('transform', function () {\n                return 'translate(' + x + ', ' + y + ')';\n            });\n    }\n}\n```", "```js\nvar zoomBehavior = d3.behavior.zoom()\n    .scaleExtent([0.1, 10])\n    .on('zoom', onZoom);\n```", "```js\nvar svg = d3.select('body')\n    .append('svg')\n    .attr({\n        width: width,\n        height: height\n    })\n    .call(zoomBehavior)\n    .append('g');\n```", "```js\nfunction onZoom() {\n    svg.attr('transform', 'translate(' + d3.event.translate + \n              ')' + 'scale(' + d3.event.scale + ')');\n}\n```", "```js\nvar dragBehavior = d3.behavior.drag()\n    .on(\"drag\", onDrag)\n    .on(\"dragstart\", function() {\n        d3.event.sourceEvent.stopPropagation();\n    });\n```", "```js\nsvg.selectAll('rect')\n    .data(data)\n    .enter()\n    .append('rect')\n    .attr({\n        width: barWidth,\n        height: 0,\n        y: height\n    })\n```", "```js\n    .on('mouseover', function (d) {\n        d3.select('text.vert#' + d.CountryCode)\n          .style('opacity', maxOpacity);\n        d3.select(this).attr('fill', 'orange');\n    })\n```", "```js\n    .on('mouseout', function (d) {\n        d3.select('text.vert#' + d.CountryCode)\n          .style('opacity', minOpacity);\n        d3.select(this)\n          .transition()\n          .duration(returnToColorDuration)\n          .attr('fill', 'rgb(0, 0, ' + \n                         Math.floor(colorScale(d.LifeExp)) + ')');\n    })\n```", "```js\n    .transition()\n    .duration(barGrowDuration)\n    .attr({\n        height: function (d) { return yScale(d.LifeExp); },\n        x: function (d, i) { return xScale(i); },\n        y: function (d) {\n            return height - yScale(d.LifeExp);\n        },\n        fill: function (d) {\n            return 'rgb(0, 0, ' + \n                   Math.floor(colorScale(d.LifeExp)) + ')';\n        }\n    });\n```", "```js\nsvg.selectAll('text')\n    .data(data)\n    .enter()\n    .append('text')\n    .text(function (d) { return d.CountryCode; })\n    .attr({\n        x: function (d, i) { return xScale(i) + barWidth / 2; },\n        y: height,\n        fill: 'white',\n        'text-anchor': 'middle',\n        'font-family': 'sans-serif',\n        'font-size': '11px'\n    })\n    .transition()\n    .duration(barGrowDuration)\n    .attr('y', function (d) { \n                      return height - yScale(d.LifeExp) + \n                                      horzTextOffsetY; });\n```", "```js\nsvg.selectAll('text.vert')\n    .data(data)\n    .enter()\n    .append('text')\n    .text(function (d) { return d.LifeExp.toFixed(2) + ' ' +\n                                d.CountryName; })\n    .attr({\n        id: function (d) { return d.CountryCode; },\n        opacity: minOpacity,\n        transform: function (d, i) {\n            var x = xScale(i) + halfBarWidth â€“ \n                    verticalTextOffsetX;\n            var y = height - yScale(d.LifeExp) + \n                    verticalTextOffsetY;\n            return 'translate(' + x + ',' + y + ')rotate(90)';\n        },\n        'class': 'vert',\n        'font-family': 'sans-serif',\n        'font-size': 11,\n        'fill': 'white'\n    });\n```", "```js\nvar width = 960, height = 600;\n\nvar margins = { top: 10, left: 50, right: 50, \n                bottom: 50, between: 50 };\n\nvar bottomGraphHeight = 50;\nvar topGraphHeight = height - (margins.top + margins.bottom + margins.between + bottomGraphHeight);\nvar graphWidths = width - margins.left - margins.right;\n```", "```js\nsvg.append('defs')\n    .append('clipPath')\n    .attr('id', 'clip')\n    .append('rect')\n    .attr('width', width)\n    .attr('height', height);\n```", "```js\nvar focus = svg\n    .append('g')\n    .attr('transform', 'translate(' + margins.left + ',' + margins.top + ')');\n\nvar context = svg.append('g')\n    .attr('class', 'context')\n    .attr('transform', 'translate(' + margins.left + ',' +\n            (margins.top + topGraphHeight + margins.between) + ')');\n```", "```js\nvar xScaleTop = d3.time.scale().range([0, graphWidths]),\n    xScaleBottom = d3.time.scale().range([0, graphWidths]),\n    yScaleTop = d3.scale.linear().range([topGraphHeight, 0]),\n    yScaleBottom = d3.scale.linear()\n                     .range([bottomGraphHeight, 0]);\n\nvar xAxisTop = d3.svg.axis().scale(xScaleTop)\n                 .orient('bottom'),\n    xAxisBottom = d3.svg.axis().scale(xScaleBottom)\n                        .orient('bottom');\nvar yAxisTop = d3.svg.axis().scale(yScaleTop).orient('left');\n```", "```js\nvar lineTop = d3.svg.line()\n    .x(function (d) { return xScaleTop(d.date); })\n    .y(function (d) { return yScaleTop(d.close); });\n\nvar lineBottom = d3.svg.line()\n    .x(function (d) { return xScaleBottom(d.date); })\n    .y(function (d) { return yScaleBottom(d.close); });\n```", "```js\nvar brush = d3.svg.brush()\n    .x(xScaleBottom)\n    .on('brush', function brushed() {\n        xScaleTop.domain(brush.empty() ? xScaleBottom.domain() : \n                                         brush.extent());\n        focus.select('.x.axis').call(xAxisTop);\n    });\n```", "```js\nd3.tsv('https://gist.githubusercontent.com/d3byex/b6b753b6ef178fdb06a2/raw/0c13e82b6b59c3ba195d7f47c33e3fe00cc3f56f/aapl.tsv', function (error, data) {\n    data.forEach(function (d) {\n        d.date = d3.time.format('%d-%b-%y').parse(d.date);\n        d.close = +d.close;\n    });\n\n    xScaleTop.domain(d3.extent(data, function (d) { \n                  return d.date; \n    }));\n    yScaleTop.domain(d3.extent(data, function (d) { \n        return d.close; \n    }));\n    xScaleBottom.domain(d3.extent(data, function (d) { \n        return d.date; \n    }));\n    yScaleBottom.domain(d3.extent(data, function (d) { \n        return d.close; \n    }));\n\n    var topXAxisNodes = focus.append('g')\n        .attr('class', 'x axis')\n        .attr('transform', 'translate(' + 0 + ',' + \n                           (margins.top + topGraphHeight) + ')')\n        .call(xAxisTop);\n    styleAxisNodes(topXAxisNodes, 0);\n\n    focus.append('path')\n        .datum(data)\n        .attr('class', 'line')\n        .attr('d', lineTop);\n\n    var topYAxisNodes = focus.append('g')\n        .call(yAxisTop);\n    styleAxisNodes(topYAxisNodes);\n\n    context.append('path')\n        .datum(data)\n        .attr('class', 'line')\n        .attr('d', lineBottom);\n\n    var bottomXAxisNodes = context.append('g')\n        .attr('transform', 'translate(0,' + \n                           bottomGraphHeight + ')')\n        .call(xAxisBottom);\n    styleAxisNodes(bottomXAxisNodes, 0);\n\n    context.append('g')\n        .attr('class', 'x brush')\n        .call(brush)\n        .selectAll('rect')\n        .attr('y', -6)\n        .attr('height', bottomGraphHeight + 7);\n\n    context.selectAll('.extent')\n        .attr({\n            stroke: '#000',\n            'fill-opacity': 0.125,\n            'shape-rendering': 'crispEdges'\n        });\n\n    styleLines(svg);\n});\n```"]