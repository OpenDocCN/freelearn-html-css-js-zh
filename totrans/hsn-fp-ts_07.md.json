["```js\nclass Container<T> {\n\n    private _value: T;\n\n    public constructor(val: T) {\n        this._value = val;\n    }\n\n    public map<TMap>(fn: (val: T) => TMap) {\n        return new Container<TMap>(fn(this._value));\n    }\n\n}\n```", "```js\nconst double = (x: number) => x + x;\nconst container = new Container(3);\nconst container2 = container.map(double);\nconsole.log(container2); // { _value: 6 }\n```", "```js\nclass Container<T> {\n\n    public static of<TVal>(val: TVal) {\n        return new Container(val);\n    }\n\n    private _value!: T;\n\n    public constructor(val: T) {\n        this._value = val;\n    }\n\n    public map<TMap>(fn: (val: T) => TMap) {\n        return new Container<TMap>(fn(this._value));\n    }\n\n    public ap<TMap>(c: Container<(val: T) => TMap>) {\n        return c.map(fn => this.map(fn));\n    }\n\n}\n```", "```js\nconst double = (x: number) => x + x;\nconst numberContainer = Container.of(3);\nconst functionContainer = Container.of(double);\n```", "```js\nnumberContainer.map(double); // Returns Container<number> with value 6\n```", "```js\nnumberContainer.ap(functionContainer); // Container<number> with value 6\n```", "```js\nclass MayBe<T> {\n\n    public static of<TVal>(val?: TVal) {\n        return new MayBe(val);\n    }\n\n    private _value!: T;\n\n    public constructor(val?: T) {\n        if (val) {\n            this._value = val;\n        }\n    }\n\n    public isNothing() {\n        return (this._value === null || this._value === undefined);\n    }\n\n    public map<TMap>(fn: (val: T) => TMap) {\n        if (this.isNothing()) {\n            return new MayBe<TMap>();\n        } else {\n            return new MayBe<TMap>(fn(this._value));\n        }\n    }\n\n    public ap<TMap>(c: MayBe<(val: T) => TMap>) {\n        return c.map(fn => this.map(fn));\n    }\n\n}\n```", "```js\ninterface New {\n    subreddit: string;\n    id: string;\n    title: string;\n    score: number;\n    over_18: boolean;\n    url: string;\n    author: string;\n    ups: number;\n    num_comments: number;\n    created_utc: number;\n}\n\ninterface Response {\n    kind: string;\n    data: {\n        modhash: string;\n        whitelist_status: boolean|null;\n        children: Array<{ kind: string, data: New }>;\n        after: string|null;\n        before: string|null;\n    };\n}\n\nasync function fetchNews() {\n    return new Promise<MayBe<Response>>((resolve, reject) => {\n        const url = \"https://www.reddit.com/r/typescript/new.json\";\n        fetch(url)\n            .then((response) => {\n                return response.json();\n            }).then((json) => {\n                resolve(new MayBe(json));\n            }).catch(() => {\n                resolve(new MayBe());\n            });\n    });\n}\n```", "```js\n(async () => {\n\n    const maybeOfResponse = await fetchNews();\n\n    const maybeOfNews = maybeOfResponse\n        .map(r => r.data)\n        .map(d => d.children)\n        .map(children => children.map(c => c.data));\n\n    maybeOfNews.map((news) => {\n        news.forEach((n) => console.log(`${n.title} - ${n.url}`));\n        return news;\n    });\n\n})();\n```", "```js\ntype Either<T1, T2> = Just<T1> | Nothing<T2>;\n```", "```js\nclass Nothing<T> {\n\n    public static of<TVal>(val?: TVal) {\n        return new Nothing(val);\n    }\n\n    private _value: T|undefined;\n\n    public constructor(val?: T) {\n        this._value = val;\n    }\n\n    public map<TMap>(fn: (val: T) => TMap) {\n        if (this._value !== undefined) {\n            return new Nothing<TMap>(fn(this._value));\n        } else {\n            return new Nothing<TMap>(this._value as any);\n        }\n    }\n\n}\n```", "```js\nclass Just<T> {\n\n    public static of<TVal>(val: TVal) {\n        return new Just(val);\n    }\n\n    private _value: T;\n\n    public constructor(val: T) {\n        this._value = val;\n    }\n\n    public map<TMap>(fn: (val: T) => TMap) {\n        return new Just<TMap>(fn(this._value));\n    }\n\n}\n```", "```js\ninterface New {\n    subreddit: string;\n    id: string;\n    title: string;\n    score: number;\n    over_18: boolean;\n    url: string;\n    author: string;\n    ups: number;\n    num_comments: number;\n    created_utc: number;\n}\n\ninterface Response {\n    kind: string;\n    data: {\n        modhash: string;\n        whitelist_status: boolean|null;\n        children: Array<{ kind: string, data: New }>;\n        after: string|null;\n        before: string|null;\n    };\n}\n\nasync function fetchNews() {\n    return new Promise<Either<Response, Error>>((resolve, reject) => {\n\n        const url = \"https://www.reddit.com/r/typescript/new.json\";\n\n        fetch(url)\n            .then((response) => {\n                return response.json();\n            }).then((json) => {\n                resolve(new Just(json));\n            }).catch((e) => {\n                resolve(new Nothing(e));\n            });\n\n    });\n}\n```", "```js\n(async () => {\n\n    const maybeOfResponse = await fetchNews();\n\n    maybeOfResponse.map(r => r.message);\n    // Error:\n    // Cannot invoke an expression whose type lacks a call signature.\n    // Type\n    // (<TMap>(fn: (val: Response) => TMap) => Just<TMap>) |\n    // (<TMap>(fn: (val: Error) => TMap) => Nothin<TMap>'\n    // has no compatible call signatures.\n\n})();\n```", "```js\n(async () => {\n\n    const maybeOfResponse = await fetchNews();\n\n    if (maybeOfResponse instanceof Nothing) {\n\n        maybeOfResponse\n            .map(r => r.message)\n            .map(msg => {\n                console.log(`Error: ${msg}`);\n                return msg;\n            });\n\n    } else {\n\n        const maybeOfNews = maybeOfResponse.map(r => r.data)\n            .map(d => d.children)\n            .map(children => children.map(c => c.data));\n\n        maybeOfNews.map((news) => {\n            news.forEach((n) => console.log(`${n.title} - ${n.url}`));\n            return news;\n        });\n\n    }\n\n})();\n```", "```js\nclass MayBe<T> {\n\n    public static of<TVal>(val?: TVal) {\n        return new MayBe(val);\n    }\n\n    private _value!: T;\n\n    public constructor(val?: T) {\n        if (val) {\n            this._value = val;\n        }\n    }\n\n    public isNothing() {\n        return (this._value === null || this._value === undefined);\n    }\n\n    public map<TMap>(fn: (val: T) => TMap) {\n        if (this.isNothing()) {\n            return new MayBe<TMap>();\n        } else {\n            return new MayBe<TMap>(fn(this._value));\n        }\n    }\n\n    public ap<TMap>(c: MayBe<(val: T) => TMap>) {\n        return c.map(fn => this.map(fn));\n    }\n\n    public join() {\n        return this.isNothing() ? Nothing.of(this._value) : this._value;\n    }\n\n    public chain<TMap>(fn: (val: T) => TMap) {\n        return this.map(fn).join();\n    }\n\n}\n```", "```js\nlet maybeOfNumber = MayBe.of(5);\nmaybeOfNumber.map((a) => a * 2);\n// MayBe { value: 10 }\n\nmaybeOfNumber.join();\n// 5\n\nmaybeOfNumber.chain((a) => a * 2);\n// 10\n\nlet maybeOfMaybeOfNumber = MayBe.of(MayBe.of(5));\n// MayBe { value: MayBe { value: 5 } }\n\nmaybeOfMaybeOfNumber.map((a) => a.map(v => v * 2));\n// MayBe { value: MayBe { value: 10 } }\n\nmaybeOfMaybeOfNumber.join();\n// MayBe { value: 5 }\n\nmaybeOfMaybeOfNumber.chain((a) => a.map(v => v * 2));\n// MayBe { value: 10 }\n```"]