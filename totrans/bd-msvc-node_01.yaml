- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introducing Microservices
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍微服务
- en: '**Microservices**, or **microservices architecture**, is an architectural style
    for designing and building software applications as a collection of small, independent,
    and loosely coupled services. Microservices offer benefits such as scalability,
    agility, independent development, and improved fault tolerance. However, they
    also introduce challenges such as service orchestration, distributed data management,
    and increased complexity in system design and testing. The successful implementation
    of microservices requires careful consideration of the specific application requirements
    and a well-defined architectural strategy.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**微服务**或**微服务架构**是一种设计软件应用程序的架构风格，它将应用程序构建为一系列小型、独立且松散耦合的服务。微服务提供了可伸缩性、敏捷性、独立开发和改进的容错性等好处。然而，它们也引入了服务编排、分布式数据管理和系统设计和测试复杂度增加等挑战。微服务的成功实施需要对特定应用程序需求进行仔细考虑，并制定明确的架构策略。'
- en: In this book, we are going to learn about microservices in general and how to
    architect and develop microservices in Node.js. The book is suitable for backend
    developers, full-stack developers, software architects, and frontend developers
    who want to get into the world of backend development and extend their capabilities.
    You will learn, in an in-depth manner, the major tips and tricks to learn how
    to build microservices architecture using Node.js. At the end of this book, you
    will be able to conceptualize, plan, and architect microservices using Node.js,
    as well as develop and debug them. These are the major skills that companies want
    their employees to have in order to design the perfect solution for every problem
    every time.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将学习微服务的一般知识以及如何在Node.js中架构和开发微服务。本书适合后端开发者、全栈开发者、软件架构师和希望进入后端开发世界并扩展其能力的前端开发者。你将深入学习如何使用Node.js构建微服务架构的主要技巧和窍门。本书结束时，你将能够使用Node.js概念化、规划和架构微服务，以及开发和调试它们。这些是公司希望员工具备的，以便每次都能为每个问题设计出完美的解决方案的主要技能。
- en: We’ll start this chapter with an introduction to microservices and **decentralized
    architectures**. We’ll also learn about some key concepts in microservices, such
    as service boundaries, loose coupling, scalability, resilience, and independent
    data management. Finally, we’ll overview some important abilities in microservices,
    including independent development and deployment, polyglot architecture, APIs,
    and **continuous** **integration** (**CI**).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将本章从对微服务和**去中心化架构**的介绍开始。我们还将了解微服务中的某些关键概念，例如服务边界、松散耦合、可伸缩性、弹性和独立的数据管理。最后，我们将概述微服务中的一些重要能力，包括独立开发和部署、多语言架构、API和**持续集成**（**CI**）。
- en: By the end of this chapter, you’ll have learned the fundamentals of microservices
    and why they are so useful.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将学习到微服务的基本原理以及它们为何如此有用。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Introduction to the microservices and decentralized architecture concepts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务和去中心化架构概念的介绍
- en: Service boundaries and loose coupling
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务边界和松散耦合
- en: Independent development and deployment and polyglot architecture
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立开发和部署以及多语言架构
- en: Scalability and resilience and independent data management
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可伸缩性、弹性和独立的数据管理
- en: APIs and communication and CI
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API和通信以及CI
- en: Introduction to the microservices and decentralized architecture concepts
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务和去中心化架构概念的介绍
- en: 'In this section, we’ll learn about two important concepts: microservices and
    decentralized architecture.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习两个重要概念：微服务和去中心化架构。
- en: '**Microservices** is an architectural style and approach to building software
    applications as a collection of small, loosely coupled, and independently deployable
    services. Meanwhile, in decentralized architecture, components or services are
    distributed across multiple nodes or entities.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**微服务**是一种架构风格和构建软件应用程序的方法，它将应用程序构建为一系列小型、松散耦合且可独立部署的服务。同时，在去中心化架构中，组件或服务分布在多个节点或实体之间。'
- en: Both microservices architecture and decentralized architecture promote modularity,
    scalability, fault tolerance, and autonomy. While microservices focus on building
    applications as a collection of small services, decentralized architecture focuses
    on distributing processing and decision making across multiple nodes. These architectural
    approaches can be combined to build highly scalable, resilient, and flexible systems
    that can adapt to changing requirements and handle complex workloads.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构和去中心化架构都促进了模块化、可扩展性、容错性和自主性。虽然微服务侧重于将应用程序构建为小型服务的集合，而去中心化架构侧重于在多个节点之间分配处理和决策。这些架构方法可以结合使用，构建高度可扩展、弹性好和灵活的系统，能够适应不断变化的需求并处理复杂的工作负载。
- en: Let’s start with the microservices architecture.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从微服务架构开始。
- en: Microservices architecture
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务架构
- en: In a microservices architecture, the application is broken down into multiple
    small services, each responsible for a specific business capability. These services
    are developed, deployed, and managed independently, communicating with one another
    through well-defined **application programming interfaces** (**APIs**) or message-based
    protocols.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，应用程序被分解成多个小型服务，每个服务负责特定的业务能力。这些服务是独立开发、部署和管理的，通过定义良好的**应用程序编程接口**（**API**）或基于消息的协议相互通信。
- en: '*Figure 1**.1* shows a typical microservices architecture compared to a typical
    monolithic architecture.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1*.*1* 显示了典型的微服务架构与典型的单体架构的比较。'
- en: '![Figure 1.1: A typical microservices architecture](img/B14980_01_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1：典型的微服务架构](img/B14980_01_01.jpg)'
- en: 'Figure 1.1: A typical microservices architecture'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：典型的微服务架构
- en: In **Node.js**, microservices are typically developed using lightweight frameworks
    such as Express.js or Fastify. Each microservice is a separate application with
    its own code base and can be developed, deployed, and scaled independently. Microservices
    can be written in different programming languages such as Java and Python, but
    Node.js is often chosen due to its efficiency, event-driven nature, and large
    ecosystem of modules.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **Node.js** 中，微服务通常使用轻量级框架如 Express.js 或 Fastify 进行开发。每个微服务都是一个独立的应用程序，拥有自己的代码库，可以独立开发、部署和扩展。微服务可以用不同的编程语言编写，如
    Java 和 Python，但 Node.js 由于其效率、事件驱动特性和庞大的模块生态系统，通常被选择。
- en: 'The key characteristics of microservices include the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务的核心特性包括以下内容：
- en: '**Modularity**: Microservices promote a modular approach, where each service
    is self-contained and focuses on a specific business functionality. Services can
    be developed, updated, and scaled independently, allowing for flexibility and
    easy maintenance.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化**：微服务促进模块化方法，其中每个服务都是自包含的，专注于特定的业务功能。服务可以独立开发、更新和扩展，从而提供灵活性和易于维护。'
- en: '**Loose coupling**: Microservices are loosely coupled, meaning they have minimal
    dependencies on one another. They communicate through well-defined interfaces,
    typically using lightweight protocols such as RESTful APIs or messaging systems.
    This loose coupling enables services to evolve and scale independently without
    affecting the entire system.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**松耦合**：微服务是松耦合的，这意味着它们之间相互依赖性最小。它们通过定义良好的接口进行通信，通常使用轻量级协议，如 RESTful API 或消息系统。这种松耦合使得服务可以独立地演进和扩展，而不会影响整个系统。'
- en: '**Independently deployable**: Each microservice can be deployed independently
    of other services. This allows for rapid deployment and reduces the risk of system-wide
    failures. It also enables teams to work on different services simultaneously,
    promoting faster development cycles and continuous deployment practices.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**独立部署性**：每个微服务都可以独立于其他服务进行部署。这允许快速部署并降低系统级故障的风险。它还使团队能够同时处理不同的服务，促进更快的开发周期和持续部署实践。'
- en: '**Polyglot architecture**: Microservices architecture allows for the use of
    different technologies, programming languages, and frameworks for each service.
    This flexibility allows teams to select the most appropriate technology stack
    for a specific service, based on its requirements and characteristics.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多语言架构**：微服务架构允许每个服务使用不同的技术、编程语言和框架。这种灵活性使得团队能够根据特定服务的需求和特点选择最合适的技术堆栈。'
- en: '**Resilience and fault isolation**: Failure in one microservice does not bring
    down the entire system. Faults or errors in one service are isolated and do not
    propagate to other services. This enhances the overall resilience and fault tolerance
    of the system.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性和容错隔离**：一个微服务的故障不会导致整个系统崩溃。一个服务中的故障或错误被隔离，不会传播到其他服务。这增强了系统的整体弹性和容错性。'
- en: Understanding these key characteristics is essential for designing, developing,
    and maintaining successful microservices architectures. Embracing these principles
    can lead to more scalable, resilient, and agile software systems that meet the
    demands of modern application development.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这些关键特性对于设计、开发和维护成功的微服务架构至关重要。接受这些原则可以导致更可扩展、更具有弹性和更敏捷的软件系统，以满足现代应用开发的需求。
- en: 'Now that you’ve been introduced to the concept of microservices architecture
    and learned about its key characteristics, let’s dive into the next concept: decentralized
    architecture.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了微服务架构的概念，并学习了其关键特性，让我们深入了解下一个概念：去中心化架构。
- en: Decentralized architecture
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 去中心化架构
- en: '**Decentralized architecture**, also known as **distributed architecture**,
    refers to an architectural approach where components or services are distributed
    across multiple nodes or entities rather than being centrally managed. This promotes
    autonomy, scalability, and fault tolerance by distributing processing, data, and
    decision making across multiple nodes.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**去中心化架构**，也称为**分布式架构**，指的是一种架构方法，其中组件或服务分布在多个节点或实体上，而不是集中管理。通过在多个节点上分配处理、数据和决策，这种方法促进了自主性、可扩展性和容错性。'
- en: Centralized architectures have a single point of control, making them easier
    to manage but potentially less scalable and more vulnerable to failures. Decentralized
    architectures distribute control and data, offering better scalability, fault
    tolerance, and performance, especially in large and dynamic systems.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 中心化架构有一个控制点，这使得它们更容易管理，但可能不太可扩展且更容易出现故障。去中心化架构通过分散控制和数据，提供了更好的可扩展性、容错性和性能，尤其是在大型和动态系统中。
- en: Examples of centralized architectures include traditional client-server architectures,
    where clients communicate with a central server. Mainframes and many early computing
    systems followed centralized architectures.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 中心化架构的例子包括传统的客户端-服务器架构，其中客户端与中央服务器通信。大型机以及许多早期的计算系统都遵循中心化架构。
- en: Examples of decentralized architectures include blockchain networks, peer-to-peer
    file-sharing systems, and certain types of distributed databases. Also, some modern
    microservices architectures follow decentralized principles where services can
    function independently.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化架构的例子包括区块链网络、对等文件共享系统和某些类型的分布式数据库。此外，一些现代微服务架构遵循去中心化原则，其中服务可以独立运行。
- en: '*Figure 1**.2* shows a typical decentralized architecture:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1*.*2* 展示了一个典型的去中心化架构：'
- en: '![Figure 1.2: A typical decentralized architecture](img/B14980_01_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2：典型的去中心化架构](img/B14980_01_02.jpg)'
- en: 'Figure 1.2: A typical decentralized architecture'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：典型的去中心化架构
- en: 'The key aspects of a decentralized architecture include the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 去中心化架构的关键方面包括以下内容：
- en: '**Distribution of responsibilities**: In a decentralized architecture, responsibilities
    and tasks are distributed across multiple nodes or entities. Each node operates
    independently and is responsible for specific functions or services. This distribution
    allows for better resource utilization and can improve fault tolerance and performance.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**责任分配**：在去中心化架构中，责任和任务分布在多个节点或实体上。每个节点独立运行，并负责特定的功能或服务。这种分配允许更好的资源利用，并可以提高容错性和性能。'
- en: '**Autonomy and independence**: Nodes in a decentralized architecture have a
    certain degree of autonomy and can operate independently. They can make decisions,
    process data, and provide services without relying on central coordination. This
    autonomy allows the system to function even if connectivity to other nodes is
    disrupted.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自主性和独立性**：去中心化架构中的节点具有一定的自主性，可以独立运行。它们可以做出决策、处理数据并提供服务，而无需依赖中央协调。这种自主性使得系统即使在与其他节点的连接中断的情况下也能继续运行。'
- en: '**Peer-to-peer communication**: Decentralized architectures often rely on peer-to-peer
    communication between nodes. Nodes can interact directly with each other, exchanging
    messages, data, or resources without the need for a centralized intermediary.
    Peer-to-peer communication enables decentralized decision making, data sharing,
    and collaboration.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对等通信**：去中心化架构通常依赖于节点之间的对等通信。节点可以直接相互交互，交换消息、数据或资源，无需中央中介。对等通信实现了去中心化决策、数据共享和协作。'
- en: '**Scalability and load distribution**: Decentralized architectures can scale
    horizontally by adding more nodes to handle increased workloads. As the system
    grows, new nodes can be added, distributing the load and allowing for improved
    scalability and performance. This scalability makes decentralized architectures
    well suited for handling large-scale applications or systems with dynamic resource
    demands.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性和负载分配**：去中心化架构可以通过添加更多节点来水平扩展，以处理增加的工作负载。随着系统的发展，可以添加新的节点，分配负载，从而提高可扩展性和性能。这种可扩展性使去中心化架构非常适合处理大规模应用程序或具有动态资源需求的系统。'
- en: '**Resilience and fault tolerance**: Decentralized architectures offer better
    resilience and fault tolerance compared to centralized architectures. If one node
    fails or becomes unavailable, the system can continue to function by routing requests
    or tasks to other available nodes. Nodes can recover independently, and failures
    are less likely to affect the entire system.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性和容错性**：与集中式架构相比，去中心化架构提供了更好的弹性和容错性。如果一个节点失败或不可用，系统可以通过将请求或任务路由到其他可用节点来继续运行。节点可以独立恢复，并且故障不太可能影响整个系统。'
- en: '**Security and privacy**: Decentralized architectures can provide enhanced
    security and privacy compared to centralized architectures. Distributed data storage
    and communication patterns make it more challenging for attackers to compromise
    the system or gain unauthorized access to sensitive information. Additionally,
    decentralized systems can allow users to maintain more control over their data
    and identities.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全和隐私**：与集中式架构相比，去中心化架构可以提供增强的安全性和隐私性。分布式数据存储和通信模式使得攻击者更难破坏系统或未经授权访问敏感信息。此外，去中心化系统可以允许用户对自己的数据和身份保持更多控制。'
- en: Understanding these key aspects is crucial when designing and implementing decentralized
    architectures. By leveraging the benefits of distribution, autonomy, and scalability,
    organizations can build robust and flexible systems capable of handling modern
    computing challenges.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计和实施去中心化架构时，理解这些关键方面至关重要。通过利用分布、自主性和可扩展性的优势，组织可以构建强大且灵活的系统，能够处理现代计算挑战。
- en: In the next section, we’ll explore the principles of service boundaries and
    loose coupling.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨服务边界和松散耦合的原则。
- en: Service boundaries and loose coupling
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务边界和松散耦合
- en: Service boundaries and loose coupling are key principles in software architecture,
    especially in the context of microservices. Let’s explore these concepts in more
    detail.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 服务边界和松散耦合是软件架构中的关键原则，尤其是在微服务背景下。让我们更详细地探讨这些概念。
- en: Service boundaries
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务边界
- en: '**Service boundaries** refer to the logical or functional divisions within
    a software system, where each boundary represents a separate and independent service.
    In a microservices architecture, services are designed around specific business
    capabilities or bounded contexts. Each service is responsible for a well-defined
    set of functions, operations, or data.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务边界**指的是软件系统内的逻辑或功能划分，其中每个边界代表一个独立的服务。在微服务架构中，服务围绕特定的业务能力或边界上下文进行设计。每个服务负责一组定义良好的功能、操作或数据。'
- en: 'The concept of service boundaries offers several benefits, such as the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 服务边界概念提供了以下好处：
- en: '**Modularity and maintainability**: Service boundaries help break down a complex
    system into smaller, more manageable parts. Each service can be developed, deployed,
    and maintained independently, allowing for better modularity and ease of maintenance.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化和可维护性**：服务边界有助于将复杂系统分解成更小、更易于管理的部分。每个服务可以独立开发、部署和维护，从而实现更好的模块化和易于维护。'
- en: '**Scalability and performance**: By dividing the system into services based
    on specific business capabilities, it becomes easier to scale individual services
    horizontally or vertically to meet varying demands. Services can be independently
    scaled to optimize resource utilization and improve overall system performance.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性和性能**：通过根据特定的业务能力将系统划分为服务，可以更容易地水平或垂直扩展单个服务以满足不同的需求。服务可以独立扩展以优化资源利用并提高整体系统性能。'
- en: '**Autonomy and team independence**: Service boundaries enable cross-functional
    teams to work independently on different services. Each team can focus on its
    service requirements, technologies, and development practices, leading to faster
    development cycles and improved team autonomy.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自主性和团队独立性**：服务边界使得跨职能团队能够独立于不同的服务工作。每个团队可以专注于其服务需求、技术和开发实践，从而加快开发周期并提高团队自主性。'
- en: '**Flexibility and technological diversity**: With clear service boundaries,
    teams can select the most suitable technologies, programming languages, or frameworks
    for each service based on their specific needs. This promotes technological diversity
    and allows for the use of the right tool for each job.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性和技术多样性**：有了清晰的服务边界，团队可以根据每个服务的具体需求选择最合适的技术、编程语言或框架。这促进了技术多样性，并允许为每一项工作使用正确的工具。'
- en: '**Fault isolation and resilience**: Service boundaries help contain failures
    within individual services. If a service encounters an issue or fails, it does
    not impact the entire system. Other services can continue to function independently,
    promoting fault isolation and overall system resilience.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障隔离和弹性**：服务边界有助于将故障限制在单个服务内。如果一个服务遇到问题或失败，它不会影响整个系统。其他服务可以继续独立运行，促进故障隔离和整体系统弹性。'
- en: Understanding and defining clear service boundaries are critical for successful
    microservices architectures. By focusing on modular and independent services,
    organizations can build scalable, maintainable, and adaptable systems that align
    with their business needs and support effective teamwork.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 理解和定义清晰的服务边界对于成功的微服务架构至关重要。通过关注模块化和独立的服务，组织可以构建可扩展、可维护和适应性强，与业务需求一致并支持有效团队协作的系统。
- en: Loose coupling
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 松耦合
- en: '**Loose coupling** is a design principle that emphasizes reducing dependencies
    between software components or services. It allows components to interact with
    one another with minimal knowledge of one another’s internal workings. Loose coupling
    promotes independence, flexibility, and adaptability within a system.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**松耦合**是一种设计原则，强调减少软件组件或服务之间的依赖。它允许组件以彼此内部工作了解最少的程度相互交互。松耦合在系统中促进独立性、灵活性和适应性。'
- en: 'Here are some key aspects of loose coupling:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是松耦合的一些关键方面：
- en: '**Well-defined interfaces**: Components communicate through well-defined interfaces
    or contracts, such as APIs, message formats, or events. The interfaces abstract
    away implementation details, allowing components to interact based on agreed-upon
    contracts rather than tight integration.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义明确的接口**：组件通过定义明确的接口或合约进行通信，例如API、消息格式或事件。接口抽象了实现细节，使得组件能够根据约定的合约进行交互，而不是紧密集成。'
- en: '**Minimal dependencies**: Components have minimal dependencies on other components
    or services. They rely only on the specific data or functionality required for
    their operations, reducing interdependencies.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小依赖性**：组件对其他组件或服务的依赖性最小。它们只依赖于其操作所需的具体数据或功能，减少了相互依赖。'
- en: '**Decoupled development and deployment**: Loose coupling enables independent
    development and deployment of components or services. Changes in one component
    have minimal impact on others, allowing for faster iterations, easier updates,
    and more frequent deployments.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解耦的开发和部署**：松耦合允许组件或服务的独立开发和部署。一个组件的变化对其他组件的影响最小，这允许更快地迭代、更容易的更新和更频繁的部署。'
- en: '**Replaceability and extensibility**: With loose coupling, components can be
    easily replaced or extended without affecting the entire system. New components
    can be introduced, and existing components can be modified or upgraded with minimal
    disruption.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可替换性和可扩展性**：在松耦合中，组件可以轻松替换或扩展，而不会影响整个系统。可以引入新的组件，现有的组件也可以进行修改或升级，造成最小的干扰。'
- en: '**Testability and isolation**: Loose coupling promotes testability by enabling
    the testing of components in isolation. Dependencies can be mocked or stubbed,
    allowing for focused unit testing and validation of individual components.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可测试性和隔离**：松散耦合通过允许对组件进行隔离测试来促进可测试性。依赖项可以被模拟或存根，从而允许进行集中的单元测试和验证单个组件。'
- en: By achieving loose coupling, systems become more modular, maintainable, and
    adaptable. This enables independent development and deployment, enhances scalability
    and resilience, and supports the seamless evolution of the software architecture
    over time.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实现松散耦合，系统变得更加模块化、易于维护和适应。这使独立开发和部署成为可能，增强了可扩展性和弹性，并支持软件架构随时间无缝演进。
- en: '*Figure 1**.3* shows the architecture of loosely coupled services:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1.3*展示了松散耦合服务的架构：'
- en: '![Figure 1.3: Loosely coupled services](img/B14980_01_03.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3：松散耦合的服务](img/B14980_01_03.jpg)'
- en: 'Figure 1.3: Loosely coupled services'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3：松散耦合的服务
- en: In *Figure 1**.3*, each circle represents a component.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图1.3*中，每个圆圈代表一个组件。
- en: Service boundaries and loose coupling are closely related concepts in the context
    of building scalable and maintainable software systems. By defining clear service
    boundaries and ensuring loose coupling between services and components, organizations
    can create flexible, modular architectures that enable agility, scalability, and
    independent development.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建可扩展和可维护的软件系统时，服务边界和松散耦合是密切相关的概念。通过定义清晰的服务边界并确保服务与组件之间的松散耦合，组织可以创建灵活的、模块化的架构，从而实现敏捷性、可扩展性和独立开发。
- en: In the next section, we’ll dive into independent development and deployment
    and polyglot architecture.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将深入探讨独立开发和部署以及多语言架构。
- en: Independent development and deployment and polyglot architecture
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 独立开发和部署与多语言架构
- en: Independent development and deployment and polyglot architecture are some of
    the crucial abilities to succeed with microservices. Independent development and
    deployment allows teams to do the work autonomously. With a polyglot architecture,
    teams can use the best programming languages, frameworks, and so on, to deliver
    the software in its best quality.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 独立开发和部署与多语言架构是成功实施微服务的一些关键能力。独立开发和部署允许团队自主工作。采用多语言架构，团队可以使用最佳编程语言、框架等，以最佳质量交付软件。
- en: Independent development and deployment
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独立开发和部署
- en: '**Independent development and deployment** refers to the ability to develop
    and deploy individual components or services of a software system independently,
    without tightly coupling them to other components. This approach is a fundamental
    principle in microservices and allows teams to work autonomously, focusing on
    specific services or functionalities.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**独立开发和部署**指的是独立开发和部署软件系统中的单个组件或服务的能力，而不需要将它们紧密耦合到其他组件。这种方法是微服务的一个基本原则，它允许团队自主工作，专注于特定的服务或功能。'
- en: 'Here are some key aspects and benefits of independent development and deployment:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于独立开发和部署的关键方面和好处：
- en: '**Team autonomy**: Independent development and deployment empower cross-functional
    teams to work autonomously, allowing for making decisions and implementing changes
    without excessive coordination with other teams. Each team can focus on their
    specific service or functionality, leading to faster development cycles and improved
    productivity.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**团队自主性**：独立开发和部署赋予跨职能团队自主工作的能力，允许团队在没有过多与其他团队协调的情况下做出决策和实施变更。每个团队可以专注于他们特定的服务或功能，从而加快开发周期并提高生产力。'
- en: '**Faster iterations and releases**: Independent development allows teams to
    work on their own release schedules, enabling faster iterations and frequent releases.
    Teams can deploy updates and new features to their respective services without
    waiting for the entire system to be released. This promotes agility, enables rapid
    experimentation, and allows for faster response to user feedback.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快地迭代和发布**：独立开发允许团队根据自己的发布计划工作，从而实现更快的迭代和频繁的发布。团队可以在不等待整个系统发布的情况下，将更新和新功能部署到各自的服务中。这促进了敏捷性，实现了快速实验，并允许更快地响应用户反馈。'
- en: '**Reduced interdependencies**: Independent development reduces the interdependencies
    between teams and components. Teams can make changes, updates, or fixes to their
    services without impacting other services or the overall system. This isolation
    helps minimize the risk of regression and makes it easier to identify and resolve
    issues.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低相互依赖性**：独立开发减少了团队和组件之间的相互依赖性。团队可以对他们的服务进行更改、更新或修复，而不会影响其他服务或整体系统。这种隔离有助于最小化回归风险，并使识别和解决问题更加容易。'
- en: '**Improved fault isolation**: When components are developed and deployed independently,
    failures or issues in one component are isolated and do not cascade to other components.
    This improves fault isolation and resilience, as failures are contained within
    the affected service, minimizing the impact on the rest of the system.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进故障隔离**：当组件独立开发和部署时，一个组件中的故障或问题会被隔离，不会传播到其他组件。这提高了故障隔离和弹性，因为故障被限制在受影响的服务内，最小化了对其余系统的影响。'
- en: '**Scalability and resource optimization**: Independent development and deployment
    allow teams to scale individual services independently based on their specific
    needs. Resources can be allocated to high-demand services, while less resource-intensive
    services can operate with minimal resources. This fine-grained scalability optimizes
    resource utilization and improves overall system performance.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性和资源优化**：独立开发和部署允许团队根据其特定需求独立扩展单个服务。资源可以分配给高需求服务，而资源密集度较低的服务可以以最小资源运行。这种细粒度的可扩展性优化了资源利用，并提高了整体系统性能。'
- en: Understanding the significance of independent development and deployment is
    crucial for embracing agile development practices and building scalable, adaptable,
    and maintainable software systems. Empowering teams to work independently enhances
    productivity, innovation, and collaboration, ultimately leading to successful
    outcomes in a rapidly evolving technological landscape.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 理解独立开发和部署的重要性对于采用敏捷开发实践和构建可扩展、适应性强和易于维护的软件系统至关重要。赋予团队独立工作的能力可以提高生产力、创新和协作，最终在快速发展的技术环境中取得成功的结果。
- en: Now, let’s take a look at the concept and key aspects of polyglot architecture.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看多语言架构的概念和关键方面。
- en: Polyglot architecture
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多语言架构
- en: '**Polyglot architecture** refers to the practice of using multiple programming
    languages, technologies, and frameworks within a software system. In a polyglot
    architecture, different services or components may be implemented using different
    languages or technologies that best fit their specific requirements.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**多语言架构**指的是在软件系统中使用多种编程语言、技术和框架的实践。在多语言架构中，不同的服务或组件可能使用不同的语言或技术来实现，以最好地满足其特定需求。'
- en: 'Here are some key aspects and benefits of polyglot architecture:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是多语言架构的一些关键方面和好处：
- en: '**Technology fit**: Different services or components may have varying requirements,
    such as performance, scalability, or integration with external systems. Polyglot
    architecture allows teams to select the most appropriate technology stack for
    each service, leveraging the strengths of different languages or frameworks. This
    technology fit can result in more efficient and optimized solutions.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术匹配**：不同的服务或组件可能有不同的需求，例如性能、可扩展性或与外部系统的集成。多语言架构允许团队为每个服务选择最合适的技术堆栈，利用不同语言或框架的优势。这种技术匹配可以导致更高效和优化的解决方案。'
- en: '**Specialization**: Polyglot architecture enables teams to leverage the expertise
    and strengths of individual team members. If a team has expertise in a particular
    language or framework, they can use it for their service, promoting specialization
    and maximizing the team’s productivity and efficiency.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专业化**：多语言架构使团队能够利用个别团队成员的专业知识和优势。如果一个团队在特定语言或框架方面有专业知识，他们可以使用它来为其服务，促进专业化，并最大化团队的生产力和效率。'
- en: '**Flexibility and innovation**: By embracing a polyglot architecture, organizations
    can explore and adopt new technologies, frameworks, or programming languages.
    This fosters a culture of innovation and keeps the development team up to date
    with the latest advancements in the tech industry.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性和创新**：通过采用多语言架构，组织可以探索和采用新技术、框架或编程语言。这促进了创新文化，并使开发团队能够跟上技术行业的最新进展。'
- en: '**Reuse and integration**: Polyglot architecture allows for the integration
    of existing systems or services developed using different technologies. It facilitates
    the reuse of legacy systems or external components, enabling seamless integration
    within the overall architecture.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重用和集成**：多语言架构允许集成使用不同技术开发的现有系统或服务。它促进了遗留系统或外部组件的重用，使得在整体架构中实现无缝集成成为可能。'
- en: '**Avoiding vendor lock-in**: Using multiple technologies helps reduce reliance
    on a single vendor or technology stack. It mitigates the risks associated with
    vendor lock-in and provides the flexibility to switch technologies or vendors
    if needed.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免供应商锁定**：使用多种技术有助于减少对单一供应商或技术堆栈的依赖。它减轻了与供应商锁定相关的风险，并在需要时提供了切换技术或供应商的灵活性。'
- en: However, adopting a polyglot architecture also comes with challenges, such as
    increased complexity in terms of deployment, maintenance, and collaboration across
    teams with diverse technology stacks. Proper governance, documentation, and knowledge-sharing
    practices are necessary to ensure effective coordination and mitigate potential
    drawbacks.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，采用多语言架构也带来了一些挑战，例如在部署、维护和具有不同技术堆栈的团队之间的协作方面增加了复杂性。适当的治理、文档和知识共享实践是确保有效协调和减轻潜在缺点所必需的。
- en: '*Figure 1**.4* shows a simple polyglot architecture:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1*.*4* 展示了一个简单的多语言架构：'
- en: '![Figure 1.4: A simple polyglot architecture](img/B14980_01_04.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4：一个简单的多语言架构](img/B14980_01_04.jpg)'
- en: 'Figure 1.4: A simple polyglot architecture'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：一个简单的多语言架构
- en: Overall, independent development and deployment, along with a polyglot architecture,
    empowers teams to work autonomously, leverage the best-fit technologies, and deliver
    software systems that are scalable, efficient, and aligned with the specific requirements
    of each component or service.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，独立开发和部署，以及多语言架构，使团队能够自主工作，利用最适合的技术，并交付可扩展、高效且符合每个组件或服务特定要求的软件系统。
- en: 'In the next section, we look at some additional crucial aspects: scalability,
    resilience, and independent data management.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨一些其他关键方面：可扩展性、弹性和独立数据管理。
- en: Scalability and resilience and independent data management
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可扩展性、弹性和独立数据管理
- en: Scalability and resilience are some key concepts in microservices to keep in
    mind while building robust and high-performing software. Also, in microservices,
    every service has its own database, so every data storage is independent.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性和弹性是构建健壮且高性能软件时在微服务中需要牢记的一些关键概念。此外，在微服务中，每个服务都有自己的数据库，因此每个数据存储都是独立的。
- en: Scalability and resilience
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可扩展性和弹性
- en: '**Scalability and resilience** are crucial aspects of building robust and high-performing
    software systems. Let’s explore these concepts in more detail.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**可扩展性和弹性**是构建健壮且高性能软件系统的关键方面。让我们更详细地探讨这些概念。'
- en: Scalability refers to the ability of a system to handle increased workloads
    and accommodate growing demands without sacrificing performance. It involves the
    capability to scale up or scale out the system to ensure optimal resource utilization
    and responsiveness.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性指的是系统处理增加的工作负载和满足增长需求而不牺牲性能的能力。它涉及将系统向上扩展或向外扩展的能力，以确保最佳资源利用和响应性。
- en: 'Here are key considerations for achieving scalability:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是实现可扩展性的关键考虑因素：
- en: '**Horizontal scaling**: Horizontal scaling involves adding more instances or
    nodes to distribute the workload across multiple servers or machines. It allows
    for increased throughput and improved performance by handling requests in parallel.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平扩展**：水平扩展涉及添加更多实例或节点，以将工作负载分布到多个服务器或机器上。它通过并行处理请求，允许增加吞吐量和改进性能。'
- en: '**Vertical scaling**: Vertical scaling, also known as scaling up, involves
    increasing the resources (such as CPU, memory, or storage) of individual instances
    to handle higher workloads. Vertical scaling can be achieved by upgrading hardware
    or utilizing cloud-based services that offer scalable resource provisioning.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垂直扩展**：垂直扩展，也称为向上扩展，涉及增加单个实例的资源（如 CPU、内存或存储）以处理更高的工作负载。垂直扩展可以通过升级硬件或利用提供可扩展资源分配的基于云的服务来实现。'
- en: '**Load balancing**: Load balancing mechanisms distribute incoming requests
    across multiple instances to ensure an even distribution of workloads and prevent
    overload on any single component. Load balancers intelligently route requests
    based on factors such as server health, capacity, or response time.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡**：负载均衡机制将传入请求分配到多个实例，以确保工作负载均匀分布并防止任何单个组件过载。负载均衡器根据服务器健康、容量或响应时间等因素智能路由请求。'
- en: '**Caching**: Implementing caching mechanisms, such as in-memory caches or **content
    delivery networks** (**CDNs**), can significantly improve scalability. Caching
    reduces the load on backend services by storing frequently accessed data or computed
    results closer to the users, thereby reducing the need for repeated processing.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**：实施缓存机制，如内存缓存或**内容分发网络**（**CDNs**），可以显著提高可扩展性。通过将频繁访问的数据或计算结果存储在用户附近，缓存减少了后端服务的负载，从而减少了重复处理的需求。'
- en: '**Asynchronous processing**: Offloading long-running or resource-intensive
    tasks to asynchronous processing systems, such as message queues or background
    workers, helps improve scalability. By processing tasks asynchronously, the system
    can handle a larger number of concurrent requests and optimize resource utilization.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步处理**：将长时间运行或资源密集型任务卸载到异步处理系统，如消息队列或后台工作者，有助于提高可扩展性。通过异步处理任务，系统可以处理更多的并发请求并优化资源利用。'
- en: '**Resilience**: Resilience refers to the system’s ability to recover from failures,
    adapt to changing conditions, and continue to operate reliably. Resilient systems
    are designed to minimize the impact of failures and maintain essential functionality.
    Consider the following factors for building resilient systems:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性**：弹性是指系统从故障中恢复、适应变化条件并继续可靠运行的能力。弹性系统旨在最小化故障的影响并保持基本功能。在构建弹性系统时考虑以下因素：'
- en: '**Redundancy and replication**: Replicating critical components or data across
    multiple instances or nodes ensures redundancy and fault tolerance. If one instance
    fails, others can seamlessly take over to maintain system availability and prevent
    data loss.'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冗余和复制**：在多个实例或节点上复制关键组件或数据确保了冗余和容错性。如果一个实例失败，其他实例可以无缝接管以保持系统可用性和防止数据丢失。'
- en: '**Fault isolation**: Designing systems with well-defined service boundaries
    and loose coupling ensures that failures or issues in one component do not propagate
    to others. Fault isolation prevents the entire system from being affected by localized
    failures.'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障隔离**：设计具有明确服务边界和松耦合的系统确保单个组件的故障或问题不会传播到其他组件。故障隔离防止局部故障影响整个系统。'
- en: '**Failure handling and recovery**: Implementing robust error handling and recovery
    mechanisms is essential for resilience. Systems should be able to detect failures,
    recover automatically if possible, and provide clear feedback to users or downstream
    components.'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障处理和恢复**：实施健壮的错误处理和恢复机制对于弹性至关重要。系统应能够检测故障，在可能的情况下自动恢复，并向用户或下游组件提供清晰的反馈。'
- en: '**Monitoring and alerting**: Continuous monitoring of system health, performance,
    and error rates helps identify issues or potential failures in real time. Proactive
    alerting mechanisms can notify appropriate personnel when anomalies or critical
    events occur, allowing for timely intervention and mitigation.'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控和警报**：持续监控系统健康、性能和错误率有助于实时识别问题或潜在的故障。主动警报机制可以在异常或关键事件发生时通知相关人员，以便及时干预和缓解。'
- en: '**Graceful degradation and circuit breakers**: Systems should be designed to
    gracefully degrade functionality when facing high loads or failure conditions.
    Circuit breakers can be implemented to automatically stop sending requests to
    a failing component or service, reducing the impact on the system and allowing
    it to recover.'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优雅降级和熔断器**：系统应设计为在高负载或故障条件下优雅地降级功能。可以实施熔断器以自动停止向失败的组件或服务发送请求，减少对系统的影响并允许其恢复。'
- en: Scalability and resilience are closely interconnected. Scalable systems are
    often designed with resilience in mind, and resilient systems can better handle
    increased workloads through scalable architecture. By incorporating these characteristics
    into their designs, developers can create robust and reliable software systems
    capable of adapting to changing demands and providing a positive user experience
    even in challenging conditions.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性和弹性紧密相连。可扩展的系统通常在设计时就考虑了弹性，而具有弹性的系统可以通过可扩展的架构更好地处理增加的工作负载。通过将这些特性纳入其设计，开发者可以创建强大且可靠的软件系统，能够适应不断变化的需求，即使在困难条件下也能提供积极的用户体验。
- en: Independent data management
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 独立的数据管理
- en: '**Independent data management** refers to the practice of managing data within
    individual services or components in a decentralized manner. In a microservices
    architecture, each service typically has its own data store or database, and the
    responsibility for data management lies within the service boundary.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**独立的数据管理**指的是以去中心化的方式在单个服务或组件内管理数据的实践。在微服务架构中，每个服务通常都有自己的数据存储或数据库，数据管理的责任位于服务边界内。'
- en: 'Here are key considerations for independent data management:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是独立数据管理的关键考虑因素：
- en: '**Data ownership and autonomy**: Each service is responsible for managing its
    own data, including data storage, retrieval, and modification. This promotes autonomy
    and allows teams to make independent decisions regarding data models, storage
    technologies, and data access patterns.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据所有权和自主性**：每个服务负责管理自己的数据，包括数据存储、检索和修改。这促进了自主性，并允许团队就数据模型、存储技术和数据访问模式做出独立决策。'
- en: '**Decentralized data stores**: Services may use different types of databases
    or storage technologies based on their specific needs. For example, one service
    may use a relational database, while another may use a NoSQL database (see [*Chapter
    9*](B14980_09.xhtml#_idTextAnchor168)) or a specialized data store optimized for
    specific use cases.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**去中心化的数据存储**：服务可以根据其特定需求使用不同类型的数据库或存储技术。例如，一个服务可能使用关系型数据库，而另一个服务可能使用NoSQL数据库（见[*第9章*](B14980_09.xhtml#_idTextAnchor168)）或针对特定用例优化的专用数据存储。'
- en: '**Data consistency and synchronization**: When data is distributed across multiple
    services, ensuring data consistency can be challenging. Techniques such as eventual
    consistency, distributed transactions, or event-driven architectures can be employed
    to synchronize data across services and maintain data integrity.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据一致性和同步**：当数据分布在多个服务中时，确保数据一致性可能具有挑战性。可以使用最终一致性、分布式事务或事件驱动架构等技术来在服务之间同步数据并维护数据完整性。'
- en: '**Data access and communication**: Services communicate with each other through
    well-defined APIs or message-based protocols to access and exchange data. Service
    boundaries should have clear contracts and APIs for data exchange, enabling services
    to interact while maintaining loose coupling.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据访问和通信**：服务通过定义良好的API或基于消息的协议相互通信，以访问和交换数据。服务边界应具有清晰的数据交换合同和API，以便服务在保持松散耦合的同时进行交互。'
- en: '**Data security and access control**: Each service should enforce appropriate
    security measures and access controls to protect its data. Implementing authentication,
    authorization, and encryption mechanisms ensures data privacy and security within
    the service boundaries.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据安全和访问控制**：每个服务应实施适当的安全措施和访问控制，以保护其数据。实施身份验证、授权和加密机制确保在服务边界内数据隐私和安全。'
- en: '**Data integration and aggregation**: While services manage their own data,
    there may be situations where data from multiple services needs to be aggregated
    or integrated for specific use cases. Techniques such as data pipelines, data
    warehouses, or event-driven architectures can facilitate data integration and
    aggregation across services.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据集成和聚合**：虽然服务管理自己的数据，但在某些情况下，可能需要将来自多个服务的数据进行聚合或集成以用于特定用例。数据管道、数据仓库或事件驱动架构等技术可以促进跨服务的数据集成和聚合。'
- en: Independent data management allows services to evolve and scale independently,
    promotes team autonomy, and reduces interdependencies between services.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 独立的数据管理允许服务独立发展和扩展，促进团队自主性，并减少服务之间的相互依赖。
- en: '*Figure 1**.5* shows the data management process:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1.5*展示了数据管理过程：'
- en: '![Figure 1.5: Data management process](img/B14980_01_05.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图1.5：数据管理过程](img/B14980_01_05.jpg)'
- en: 'Figure 1.5: Data management process'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5：数据管理过程
- en: However, the data management process also introduces challenges related to data
    consistency, synchronization, and overall system-wide data coherence. Organizations
    should carefully design data management strategies and employ appropriate patterns
    and technologies to address these challenges while maintaining the benefits of
    independent data management.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，数据管理过程也引入了与数据一致性、同步和整个系统范围内的数据一致性相关的问题。组织应仔细设计数据管理策略，并采用适当的模式和科技来应对这些挑战，同时保持独立数据管理的优势。
- en: In the next section, we’ll learn about APIs, communication, and CI.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习关于API、通信和CI的内容。
- en: APIs and communication and CI
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: APIs和通信以及CI
- en: '**API** stands for **application programming interface**. It is a set of rules
    and protocols that allows different software applications to communicate and interact
    with one another. APIs define how different software components should interact,
    what data they can exchange, and what operations they can perform. CI is a common
    software practice that allows contributors from all over the world to contribute
    to one shared code repository.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**API**代表**应用程序编程接口**。它是一组规则和协议，允许不同的软件应用程序相互通信和交互。API定义了不同的软件组件应该如何交互，它们可以交换什么数据，以及它们可以执行什么操作。CI是一种常见的软件实践，允许来自世界各地的贡献者向一个共享的代码库贡献。'
- en: APIs and communication
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: APIs和通信
- en: '**APIs** play a vital role in enabling communication and interaction between
    different components, services, or systems within a software architecture. APIs
    define how different entities can interact with one another, exchange data, and
    invoke functionalities.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**API**在使软件架构中不同组件、服务或系统之间进行通信和交互方面发挥着至关重要的作用。API定义了不同实体如何相互交互、交换数据以及调用功能。'
- en: 'Here are the key considerations related to APIs and communication:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是关于API和通信的关键考虑因素：
- en: '**API design and documentation**: Well-designed APIs follow standards and best
    practices (see [*Chapter 10*](B14980_10.xhtml#_idTextAnchor185)), ensuring clarity,
    consistency, and ease of use for developers. Comprehensive API documentation,
    including endpoint details, request/response formats, authentication requirements,
    and error handling, helps developers understand and utilize APIs effectively.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API设计和文档**：设计良好的API遵循标准和最佳实践（见[*第10章*](B14980_10.xhtml#_idTextAnchor185)），确保开发者的清晰性、一致性和易用性。全面的API文档，包括端点细节、请求/响应格式、身份验证要求和错误处理，有助于开发者有效地理解和利用API。'
- en: '**API gateway**: An API gateway acts as an entry point for client applications
    to access multiple APIs. It provides a centralized interface, handles authentication,
    security, request routing, and rate limiting, and can perform tasks such as caching,
    logging, and monitoring. API gateways simplify client-side interactions and improve
    overall API management.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API网关**：API网关充当客户端应用程序访问多个API的入口点。它提供了一个集中式接口，处理身份验证、安全、请求路由和速率限制，并可以执行缓存、日志记录和监控等任务。API网关简化了客户端交互并提高了整体API管理。'
- en: '**API versioning**: As APIs evolve over time, it’s essential to implement versioning
    strategies to maintain backward compatibility. Versioning allows clients to use
    the desired API version while ensuring existing clients remain unaffected by changes.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API版本控制**：随着API随时间演变，实施版本控制策略以保持向后兼容性至关重要。版本控制允许客户端使用所需的API版本，同时确保现有客户端不受更改的影响。'
- en: '**Authentication and authorization**: APIs often require authentication and
    authorization mechanisms to ensure secure access. Common approaches include API
    keys, tokens (such as JWT), OAuth, or integration with identity and access management
    systems. Proper authentication and authorization prevent unauthorized access and
    protect sensitive data.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证和授权**：API通常需要身份验证和授权机制以确保安全访问。常见的方法包括API密钥、令牌（如JWT）、OAuth或与身份和访问管理系统的集成。适当的身份验证和授权可以防止未授权访问并保护敏感数据。'
- en: '**Data formats and protocols**: APIs can utilize various data formats, such
    as **JavaScript Object Notation** (**JSON**), **Extensible Markup Language** (**XML**),
    or protocol buffers, based on the requirements and compatibility with client applications.
    Similarly, communication protocols such as **representational state transfer**
    (**REST**), GraphQL, or message queues (e.g., RabbitMQ, Apache Kafka) (see [*Chapter
    10*](B14980_10.xhtml#_idTextAnchor185)) can be chosen depending on the use case.
    For instance, the most common use cases for REST APIs are web APIs.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据格式和协议**：API 可以根据需求和与客户端应用程序的兼容性使用各种数据格式，如 **JavaScript 对象表示法**（**JSON**）、**可扩展标记语言**（**XML**）或协议缓冲区。类似地，可以选择通信协议，如
    **表示状态转移**（**REST**）、GraphQL 或消息队列（例如 RabbitMQ、Apache Kafka）（见 [*第 10 章*](B14980_10.xhtml#_idTextAnchor185)），具体取决于用例。例如，REST
    API 的最常见用例是 Web API。'
- en: '**Asynchronous communication**: Asynchronous communication patterns, such as
    message queues or publish-subscribe systems, can be employed to enable loose coupling
    and decoupled communication between components or services. These patterns support
    event-driven architectures and improve scalability, responsiveness, and fault
    tolerance.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步通信**：可以使用异步通信模式，如消息队列或发布-订阅系统，来实现组件或服务之间的松散耦合和解耦通信。这些模式支持事件驱动架构，并提高可伸缩性、响应性和容错性。'
- en: APIs provide a way for developers to access the functionality of a system or
    service without having to understand its internal implementation details. They
    abstract the underlying complexity and provide a standardized interface that allows
    applications to request and exchange data in a consistent and predictable manner.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: API 为开发者提供了一种访问系统或服务功能的方式，而无需了解其内部实现细节。它们抽象了底层复杂性，并提供了一个标准化的接口，允许应用程序以一致和可预测的方式请求和交换数据。
- en: '*Figure 1**.6* shows an example of a REST API:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1**.6* 展示了一个 REST API 的示例：'
- en: '![Figure 1.6: A REST API](img/B14980_01_06.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6：一个 REST API](img/B14980_01_06.jpg)'
- en: 'Figure 1.6: A REST API'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6：一个 REST API
- en: APIs play a fundamental role in modern software development, enabling seamless
    integration and collaboration between different systems. They provide a way to
    access data and services from external sources, allowing applications to extend
    their functionality and interact with a wide range of services and resources.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: API 在现代软件开发中扮演着基本角色，使得不同系统之间的无缝集成和协作成为可能。它们提供了一种访问外部数据和服务的方式，允许应用程序扩展其功能并与广泛的服务和资源交互。
- en: CI
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CI
- en: '**CI** is a software development practice that involves frequently integrating
    code changes from multiple developers into a shared code repository. The key goal
    of CI is to automate the integration process and detect integration issues early.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**CI** 是一种软件开发实践，涉及将多个开发者的代码更改频繁地集成到一个共享代码库中。CI 的关键目标是自动化集成过程并尽早发现集成问题。'
- en: 'Here are the key aspects of CI:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 CI 的关键方面：
- en: '**Version control system** (**VCS**): CI relies on a robust VCS (such as Git)
    to manage code changes, branches, and version history. Developers commit their
    code changes to the repository frequently, ensuring a reliable source of code
    for integration.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制系统**（**VCS**）：CI 依赖于强大的 VCS（如 Git）来管理代码更改、分支和版本历史。开发者频繁地将代码更改提交到代码库，确保集成有一个可靠的代码来源。'
- en: '**Automated builds**: CI involves setting up automated build processes that
    compile, test, and package the software based on triggers, such as code commits.
    Automated build systems, such as Jenkins, Travis CI, or GitLab CI/CD (see [*Chapter
    11*](B14980_11.xhtml#_idTextAnchor204)), pull the latest code from the repository
    and build the application in a consistent and repeatable manner.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化构建**：CI 涉及设置自动化构建过程，根据触发器（如代码提交）编译、测试和打包软件。自动化构建系统，如 Jenkins、Travis CI
    或 GitLab CI/CD（见 [*第 11 章*](B14980_11.xhtml#_idTextAnchor204)），从代码库中拉取最新代码，并以一致和可重复的方式构建应用程序。'
- en: '**Automated testing**: CI encourages automated testing practices, such as unit
    testing, integration testing, and functional testing. Test suites are executed
    as part of the build process to ensure that code changes do not introduce regressions
    and maintain the overall quality of the software.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化测试**：CI 鼓励自动化测试实践，如单元测试、集成测试和功能测试。测试套件作为构建过程的一部分执行，以确保代码更改不会引入回归并保持软件的整体质量。'
- en: '**CI server**: A CI server or CI/CD platform orchestrates the CI process, monitors
    code changes, triggers builds, runs tests, and provides feedback to the development
    team. It generates reports, alerts, and notifications for build failures or test
    errors.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CI 服务器**：CI 服务器或 CI/CD 平台协调 CI 流程，监控代码变更，触发构建，运行测试，并向开发团队提供反馈。它为构建失败或测试错误生成报告、警报和通知。'
- en: '**Code quality checks**: CI can incorporate static code analysis tools to identify
    code smells, maintain code style consistency, and enforce best practices. These
    tools analyze the code base for potential issues, including code complexity, security
    vulnerabilities, and adherence to coding guidelines.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码质量检查**：CI 可以集成静态代码分析工具来识别代码异味、维护代码风格一致性并强制执行最佳实践。这些工具分析代码库中潜在的问题，包括代码复杂性、安全漏洞和对编码指南的遵守。'
- en: '**Artifact management**: CI involves generating deployable artifacts, such
    as binaries, container images, or deployment packages, that can be easily deployed
    to various environments. Artifact management systems, such as Nexus or JFrog Artifactory,
    help manage and store these artifacts.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工件管理**：CI 涉及生成可部署的工件，如二进制文件、容器镜像或部署包，这些工件可以轻松部署到各种环境中。工件管理系统，如 Nexus 或 JFrog
    Artifactory，有助于管理和存储这些工件。'
- en: '**CI pipelines**: CI pipelines define the stages and steps of the CI process,
    including building, testing, code analysis, and artifact generation. CI pipelines
    can be customized based on project requirements, incorporating specific build,
    test, and release steps.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CI 管道**：CI 管道定义了 CI 流程的阶段和步骤，包括构建、测试、代码分析和工件生成。CI 管道可以根据项目需求定制，包括特定的构建、测试和发布步骤。'
- en: Additional reading
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 额外阅读
- en: 'Jenkins: [https://www.jenkins.io/doc/](https://www.jenkins.io/doc/'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 'Jenkins: [https://www.jenkins.io/doc/](https://www.jenkins.io/doc/)'
- en: )
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'Travis CI: [https://docs.travis-ci.com/user/for-beginners/](https://docs.travis-ci.com/user/for-beginners/'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 'Travis CI: [https://docs.travis-ci.com/user/for-beginners/](https://docs.travis-ci.com/user/for-beginners/)'
- en: )
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'GitLab CI/CD: [https://docs.gitlab.com/ee/ci/](https://docs.gitlab.com/ee/ci/'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 'GitLab CI/CD: [https://docs.gitlab.com/ee/ci/](https://docs.gitlab.com/ee/ci/)'
- en: )
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '*Figure 1**.7* shows CI in action:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1**.7* 展示了 CI 在行动中的情况：'
- en: '![Figure 1.7: CI in action](img/B14980_01_07.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7：CI 在行动中](img/B14980_01_07.jpg)'
- en: 'Figure 1.7: CI in action'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7：CI 在行动中
- en: The benefits of CI include early detection of integration issues, faster feedback
    cycles, improved collaboration, and reduced integration complexities. CI ensures
    that the software remains in a releasable state at all times, enabling teams to
    deliver high-quality software with speed, reliability, and reduced risks.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: CI 的好处包括早期发现集成问题、更快的反馈周期、改进的协作以及降低集成复杂性。CI 确保软件始终处于可发布状态，使团队能够快速、可靠地交付高质量的软件，并降低风险。
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Microservices and Node.js are two powerful concepts that can greatly impact
    the development of modern software systems. Here is a summary of the key points
    to consider when exploring the combination of microservices and Node.js:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务和 Node.js 是两个可以极大地影响现代软件系统开发的强大概念。以下是探索微服务和 Node.js 组合时需要考虑的关键点总结：
- en: '**Microservices**: Microservices is an architectural approach where complex
    applications are built as a collection of small, independent services. Each service
    focuses on a specific business capability, can be developed and deployed independently,
    and communicates with other services through well-defined APIs or messaging protocols.
    Microservices offer benefits such as modularity, scalability, fault isolation,
    and autonomy, allowing for faster development cycles, easier maintenance, and
    flexibility in technology selection.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务**：微服务是一种架构方法，复杂的应用程序被构建为一系列小型、独立的服务的集合。每个服务专注于特定的业务能力，可以独立开发和部署，并通过定义良好的
    API 或消息协议与其他服务通信。微服务提供了模块化、可扩展性、故障隔离和自主性等好处，允许更快的开发周期、更简单的维护以及在技术选择上的灵活性。'
- en: '**Node.js**: Node.js is a JavaScript runtime built on the V8 engine, designed
    for server-side development. It provides an event-driven, non-blocking I/O model
    that allows for highly scalable and performant applications. Node.js is well-suited
    for microservices due to its lightweight, asynchronous nature, which enables handling
    multiple concurrent requests efficiently. Its rich ecosystem of packages and frameworks,
    along with its support for JavaScript on both the client and server sides, make
    it a popular choice for microservices development.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js**: Node.js 是基于 V8 引擎构建的 JavaScript 运行时环境，专为服务器端开发设计。它提供了一个基于事件的、非阻塞的
    I/O 模型，允许构建高度可扩展和性能卓越的应用程序。由于其轻量级、异步的特性，Node.js 非常适合微服务，因为它能够高效地处理多个并发请求。其丰富的包和框架生态系统，以及其在客户端和服务器端对
    JavaScript 的支持，使其成为微服务开发的流行选择。'
- en: '**Combining microservices and Node.js**: When combining microservices with
    Node.js, developers can take advantage of Node.js’s event-driven architecture
    and ecosystem to build scalable and responsive microservices. Node.js’s non-blocking
    I/O model allows services to handle high levels of concurrency, making it well-suited
    for microservices communication and interactions. Its extensive package manager,
    npm, provides a wide range of libraries and tools to facilitate the development
    of microservices architectures.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结合微服务和 Node.js**：当将微服务与 Node.js 结合使用时，开发者可以利用 Node.js 的事件驱动架构和生态系统来构建可扩展和响应的微服务。Node.js
    的非阻塞 I/O 模型允许服务处理高并发级别，使其非常适合微服务之间的通信和交互。其广泛的包管理器 npm 提供了大量的库和工具，以促进微服务架构的开发。'
- en: '**Working with microservices and Node.js**: When working with microservices
    and Node.js, it is important to consider various aspects, including service boundaries,
    loose coupling, API design, data management, scalability, resilience, monitoring,
    and security. Properly defining service boundaries, ensuring loose coupling between
    services, designing robust APIs, and managing data independently are crucial for
    building scalable and maintainable microservices architectures. Implementing strategies
    for scalability, resilience, monitoring, and security enhances the performance,
    reliability, and security of the overall system.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与微服务和 Node.js 一起工作**：当与微服务和 Node.js 一起工作时，考虑各种方面非常重要，包括服务边界、松散耦合、API 设计、数据管理、可扩展性、弹性、监控和安全。正确定义服务边界、确保服务之间的松散耦合、设计健壮的
    API 以及独立管理数据对于构建可扩展和维护的微服务架构至关重要。实施可扩展性、弹性、监控和安全策略可以增强整个系统的性能、可靠性和安全性。'
- en: In summary, leveraging the power of microservices and Node.js can enable the
    development of flexible, scalable, and maintainable software systems. By embracing
    the modular nature of microservices and harnessing the asynchronous capabilities
    of Node.js, developers can build highly responsive, distributed applications that
    can adapt to changing requirements and handle complex workloads effectively.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，利用微服务和 Node.js 的力量可以开发出灵活、可扩展和易于维护的软件系统。通过拥抱微服务的模块化特性并利用 Node.js 的异步能力，开发者可以构建高度响应的分布式应用程序，这些应用程序能够适应不断变化的需求并有效地处理复杂的工作负载。
- en: In the next chapter, we’ll cover the core principles of microservices. We’ll
    dive into more details about microservices and its best practices while developing
    in Node.js.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍微服务的核心原则。我们将深入探讨在 Node.js 中开发微服务时关于微服务的更多细节及其最佳实践。
- en: Quiz time
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验时间
- en: What are the key characteristics of microservices?
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务的关键特征是什么？
- en: What are some key aspects and benefits of independent development and deployment?
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立开发和部署有哪些关键方面和好处？
- en: What is a polyglot architecture?
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是多语言架构？
- en: What are APIs?
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 API？
