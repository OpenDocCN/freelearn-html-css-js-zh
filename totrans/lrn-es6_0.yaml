- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ECMAScript is a scripting language standardized by Ecma International in the
    ECMA-262 specification and ISO/IEC 16262\. Scripting languages such as JavaScript,
    JScript and ActionScript are supersets of ECMAScript. Although JavaScript, JScript,
    and ActionScript have more capabilities than ECMAScript, by defining more objects
    and methods, the core features of these languages are the same as ECMAScript.
  prefs: []
  type: TYPE_NORMAL
- en: ECMAScript 6 is the sixth version and the seventh edition of the ECMAScript
    language. In short, it is also called "ES6".
  prefs: []
  type: TYPE_NORMAL
- en: Although JavaScript is extremely powerful and flexible, it's often criticized
    for having unnecessary redundancy. Therefore, JavaScript developers often use
    abstractions such as CoffeeScript and Typescript, which provide easier syntax,
    powerful features, and compile to JavaScript. ES6 was introduced to improve JavaScript
    and ensure that developers no longer needed to use abstractions or other techniques
    to write quality code, which was becoming a lengthy process.
  prefs: []
  type: TYPE_NORMAL
- en: The ES6 features are inherited from other popular and abstracting languages,
    such as CoffeeScript. Therefore, ES6 language features behave the same way as
    they do in other languages, and are not new in the programming world, even if
    they are new in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: This book provides explanations with examples for all the features of the new
    version of ECMAScript, ECMAScript 6\. This book is about the JavaScript implementation
    of ECMAScript 6\. All the features and examples in this book work on all the JavaScript
    environments, such as browsers, Node.js, Cordova, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Playing with Syntax"), *Playing with Syntax*,
    introduces new ways of creating variables and function parameters. This chapter
    discusses the new objects and functions syntaxes in more depth.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Knowing Your Library"), *Knowing Your Library*,
    introduces the new prototype-based methods for the existing objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Using Iterators"), *Using Iterators*, shows
    the different types of iterators available in ES6, and how to create custom iterators.
    It also discusses the tail call optimization in ES6.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Asynchronous Programming"), *Asynchronous
    Programming*, illustrates how Promises can make it easier to write code that''s
    executed asynchronously.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Implementing the Reflect API"), *Implementing
    the Reflect API*, gives an in-depth guide to object reflection in ES6.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Using Proxies"), *Using Proxies*, shows how
    to define the custom behavior the fundamental operations on the objects using
    the ES6 proxies.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Walking You Through Classes"), *Walking You
    Through Classes*, introduces the Object-oriented Programming using the ES6 classes.
    Concepts such as inheritance, constructors, abstraction, information hiding, and
    more are explained here.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Modular Programming"), *Modular Programming*,
    explains different ways to create modules using JavaScript. Technologies such
    as the IIFE, CommonJS, AMD, UMD, and ES6 modules are covered.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are reading this book after ES6 is fully supported by all the JavaScript
    engines, then you don't need to set up any specific testing environment. You can
    simply test the examples on any engine of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are reading this book before ES6 is completely supported by all the
    JavaScript engines, then follow up with this book and execute the code snippets
    for which you can use an ES6 transpiler. If you want to run the code examples
    in the browser environment, then use this sample webpage template, which has Traceur
    transpiler attached to it for converting ES6 into ES5 on every page-load:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Download the `traceur.js` script from [https://google.github.io/traceur-compiler/bin/traceur.js](https://google.github.io/traceur-compiler/bin/traceur.js),
    and the `bootstrap.js` script from [https://google.github.io/traceur-compiler/src/bootstrap.js](https://google.github.io/traceur-compiler/src/bootstrap.js).
    Then, place them in the same directory as the HTML file containing the previous
    code.
  prefs: []
  type: TYPE_NORMAL
- en: In the exercise files (the code bundle), Traceur transpiler and polyfills are
    already attached. The exercise files are created for testing the code examples
    on browsers.
  prefs: []
  type: TYPE_NORMAL
- en: For [Chapter 4](ch04.html "Chapter 4. Asynchronous Programming"), *Asynchronous
    Programming*, you will have to use the browser environment for testing, as we
    have used jQuery and AJAX in the examples. You will also need a web server for
    it.
  prefs: []
  type: TYPE_NORMAL
- en: For [Chapter 8](ch08.html "Chapter 8. Modular Programming"), *Modular Programming*,
    if you use the browser environment for testing, then you need a web server. But
    if you use the Node.js environment, then you don't need a web server.
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility with ECMAScript 6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This book was written before all the JavaScript engines started supporting all
    the features of ES6.
  prefs: []
  type: TYPE_NORMAL
- en: The specifications of ES6 have already been finalized. It's just not all JavaScript
    engines have finished the implementation of all the features of ES6\. I am pretty
    much sure that by the end of 2016, all JavaScript engines will support ES6.
  prefs: []
  type: TYPE_NORMAL
- en: Kangax has created an ES6 compatibility table where you can track the support
    of various ES6 features on various JavaScript engines. You can find the table
    at [http://kangax.github.io/compat-table/es6/](http://kangax.github.io/compat-table/es6/).
  prefs: []
  type: TYPE_NORMAL
- en: Running ECMAScript 6 in incompatible engines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to run ES6 in an engine that doesn't support ES6, then you can use
    the ES6 polyfills or the ES6 transpilers.
  prefs: []
  type: TYPE_NORMAL
- en: A polyfill is a piece of code that provides the technology that you, the developer,
    expect the JavaScript engine to provide natively. Remember that polyfills are
    not available for every ES6 feature, and that they cannot be created. A list of
    all the available polyfills and their download links are available at [https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills#ecmascript-6-harmony](https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills#ecmascript-6-harmony).
  prefs: []
  type: TYPE_NORMAL
- en: An ES6 transpiler takes the ES6 source code and outputs the ES5 source code,
    which is compatible with all JavaScript engines. Transpilers support the conversion
    of more features than polyfills, but may not support all the features of ES6\.
    There are various transpilers available, such as the Google Traceur ([https://github.com/google/traceur-compiler](https://github.com/google/traceur-compiler)),
    Google Caja ([https://developers.google.com/caja/](https://developers.google.com/caja/)),
    Babel ([https://babeljs.io/](https://babeljs.io/)), Termi ES6 Transpiler ([https://github.com/termi/es6-transpiler](https://github.com/termi/es6-transpiler)),
    and more. You should always transpile the ES6 code to ES5 before attaching it
    to your web pages, instead of transpiling it on frontend each time your page loads
    so that web pages don't load slower.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, by using a transpiler and/or polyfills, you can start writing ES6
    code for distribution even before all the engines completely support ES6 and before
    non-ES6 engines become obsolete.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for anyone who is familiar with JavaScript. You don't have to be
    a JavaScript expert to understand this book. This book will help you take your
    JavaScript knowledge to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    can include other contexts through the use of the `include` directive."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or may have disliked. Reader feedback is important for
    us to develop titles that you really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply send an e-mail to `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book title via the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide on [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you would report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **Errata Submission Form** link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded on our website, or added to any list
    of existing errata, under the Errata section of that title. Any existing errata
    can be viewed by selecting your title from [http://www.packtpub.com/support](http://www.packtpub.com/support).
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Piracy of copyright material on the Internet is an ongoing problem across all
    media. At Packt, we take the protection of our copyright and licenses very seriously.
    If you come across any illegal copies of our works, in any form, on the Internet,
    please provide us with the location address or website name immediately so that
    we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors, and our ability to bring
    you valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`
    if you are having a problem with any aspect of the book, and we will do our best
    to address it.
  prefs: []
  type: TYPE_NORMAL
