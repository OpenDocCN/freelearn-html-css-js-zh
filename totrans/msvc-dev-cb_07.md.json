["```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '1.5.9.RELEASE'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'\n    compile group: 'io.github.resilience4j', name: 'resilience4j-circuitbreaker', version: '0.11.0'\n compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '4.7'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <appender name=\"consoleAppender\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder class=\"net.logstash.logback.encoder.LogstashEncoder\"/>\n    </appender>\n    <logger name=\"jsonLogger\" additivity=\"false\" level=\"DEBUG\">\n        <appender-ref ref=\"consoleAppender\"/>\n    </logger>\n    <root level=\"INFO\">\n        <appender-ref ref=\"consoleAppender\"/>\n    </root>\n</configuration>\n```", "```js\npackage com.packtpub.microservices.ch07.message;\n\nimport com.packtpub.microservices.ch07.message.clients.SocialGraphClient;\nimport org.apache.log4j.LogManager;\nimport org.apache.log4j.Logger;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.scheduling.annotation.EnableAsync;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\nimport java.util.concurrent.Executor;\n\n@SpringBootApplication\n@EnableAsync\npublic class Application {\n\n private Logger logger = LogManager.getLogger(Application.class);\n\n    @Bean\n    public MessageRepository messageRepository() {\n        return new MessageRepository();\n    }\n\n    @Bean\n    public SocialGraphClient socialGraphClient() {\n        return new SocialGraphClient(\"http://localhost:4567\");\n    }\n\n    public static void main(String[] args) {\n logger.info(\"Starting application\");\n        SpringApplication.run(Application.class, args);\n    }\n\n    @Bean\n    public Executor asyncExecutor() {\n        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n        executor.setCorePoolSize(2);\n        executor.setMaxPoolSize(2);\n        executor.setQueueCapacity(500);\n        executor.setThreadNamePrefix(\"SocialServiceCall-\");\n        executor.initialize();\n        return executor;\n    }\n}\n```", "```js\n$ ./gradlew bootRun\n\n> Task :bootRun\n{\"@timestamp\":\"2018-08-09T22:08:22.959-05:00\",\"@version\":1,\"message\":\"Starting application\",\"logger_name\":\"com.packtpub.microservices.ch07.message.Application\",\"thread_name\":\"main\",\"level\":\"INFO\",\"level_value\":20000}\n\n .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::        (v1.5.9.RELEASE)\n\n{\"@timestamp\":\"2018-08-09T22:08:23.786-05:00\",\"@version\":1,\"message\":\"Starting Application on fartlek.local with PID 82453 (/Users/posman/projects/microservices-cookbook/chapter07/message-service/build/classes/java/main started by posman in /Users/posman/projects/microservices-cookbook/chapter07/message-service)\",\"logger_name\":\"com.packtpub.microservices.ch07.message.Application\",\"thread_name\":\"main\",\"level\":\"INFO\",\"level_value\":20000}\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.0.4.RELEASE'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.0.4.RELEASE'\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.0.4.RELEASE'\n    compile group: 'io.micrometer', name: 'micrometer-core', version: '1.0.6'\n    compile group: 'io.micrometer', name: 'micrometer-registry-statsd', version: '1.0.6'\n    compile group: 'io.github.resilience4j', name: 'resilience4j-circuitbreaker', version: '0.11.0'\n    compile group: 'log4j', name: 'log4j', version: '1.2.17'\n    compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '5.2'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\nserver:\n  port:\n    8082\n\nmanagement:\n  metrics:\n    export:\n      statsd:\n        enabled: true\n        flavor: \"etsy\"\n        host:\n          0.0.0.0\n        port:\n          8125\n```", "```js\npackage com.packtpub.microservices.ch07.message.controllers;\n\nimport com.packtpub.microservices.ch07.message.MessageRepository;\nimport com.packtpub.microservices.ch07.message.clients.SocialGraphClient;\nimport com.packtpub.microservices.ch07.message.exceptions.MessageNotFoundException;\nimport com.packtpub.microservices.ch07.message.exceptions.MessageSendForbiddenException;\nimport com.packtpub.microservices.ch07.message.models.Message;\nimport com.packtpub.microservices.ch07.message.models.UserFriendships;\nimport io.micrometer.core.annotation.Timed;\nimport io.micrometer.statsd.StatsdMeterRegistry;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n\nimport java.net.URI;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\n\n@RestController\n@Timed\npublic class MessageController {\n\n    @Autowired\n    private MessageRepository messagesStore;\n\n    @Autowired\n    private SocialGraphClient socialGraphClient;\n\n    @Autowired\n    private StatsdMeterRegistry registry;\n\n    @Timed(value=\"get.messages\")\n    @RequestMapping(path = \"/{id}\", method = RequestMethod.GET, produces = \"application/json\")\n    public Message get(@PathVariable(\"id\") String id) throws MessageNotFoundException {\n        registry.counter(\"get_messages\").increment();\n        return messagesStore.get(id);\n    }\n\n    @RequestMapping(path = \"/\", method = RequestMethod.POST, produces = \"application/json\")\n    public ResponseEntity<Message> send(@RequestBody Message message) throws MessageSendForbiddenException {\n\n        List<String> friendships = socialGraphClient.getFriendships(message.getSender());\n        if (!friendships.contains(message.getRecipient())) {\n            throw new MessageSendForbiddenException(\"Must be friends to send message\");\n        }\n\n        Message saved = messagesStore.save(message);\n        URI location = ServletUriComponentsBuilder\n                .fromCurrentRequest().path(\"/{id}\")\n                .buildAndExpand(saved.getId()).toUri();\n        return ResponseEntity.created(location).build();\n    }\n\n    @Async\n    public CompletableFuture<Boolean> isFollowing(String fromUser, String toUser) {\n\n        String url = String.format(\n                \"http://localhost:4567/followings?user=%s&filter=%s\",\n                fromUser, toUser);\n\n        RestTemplate template = new RestTemplate();\n        UserFriendships followings = template.getForObject(url, UserFriendships.class);\n\n        return CompletableFuture.completedFuture(\n                followings.getFriendships().isEmpty()\n        );\n    }\n}\n```", "```js\n docker run -d --name graphite --restart=always \\\n -p 80:80 -p 2003-2004:2003-2004 -p 2023-2024:2023-2024 \\\n -p 8125:8125/udp -p 8126:8126 \\\n hopsoft/graphite-statsd\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.0.4.RELEASE'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.0.4.RELEASE'\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.0.4.RELEASE'\n    compile group: 'io.micrometer', name: 'micrometer-core', version: '1.0.6'\n    compile group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.0.6'\n    compile group: 'io.github.resilience4j', name: 'resilience4j-circuitbreaker', version: '0.11.0'\n    compile group: 'log4j', name: 'log4j', version: '1.2.17'\n    compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '5.2'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\nserver:\n  port:\n    8082\n\nmanagement:\n  server:\n    port:\n      8081\n  endpoint:\n    metrics:\n      enabled: true\n    prometheus:\n      enabled: true\n  endpoints:\n    web:\n      base-path: \"/manage\"\n      exposure:\n        include: \"*\"\n  metrics:\n    export:\n      prometheus:\n        enabled: true\n```", "```js\n$ curl http://localhost:8081/manage/prometheus\n\n# HELP tomcat_global_request_seconds\n# TYPE tomcat_global_request_seconds summary\ntomcat_global_request_seconds_count{name=\"http-nio-8082\",} 0.0\ntomcat_global_request_seconds_sum{name=\"http-nio-8082\",} 0.0\n# HELP tomcat_sessions_active_max\n# TYPE tomcat_sessions_active_max gauge\ntomcat_sessions_active_max 0.0\n# HELP process_uptime_seconds The uptime of the Java virtual machine\n# TYPE process_uptime_seconds gauge\nprocess_uptime_seconds 957.132\n# HELP jvm_gc_live_data_size_bytes Size of old generation memory pool after a full GC\n# TYPE jvm_gc_live_data_size_bytes gauge\njvm_gc_live_data_size_bytes 1.9244032E7\n```", "```js\n# my global config\nglobal:\n scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\n evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.\n # scrape_timeout is set to the global default (10s).\n\n# Alertmanager configuration\nalerting:\n alertmanagers:\n - static_configs:\n - targets:\n # - alertmanager:9093\n\n# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.\nrule_files:\n # - \"first_rules.yml\"\n # - \"second_rules.yml\"\n\n# A scrape configuration containing exactly one endpoint to scrape:\n# Here it's Prometheus itself.\nscrape_configs:\n # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\n - job_name: 'prometheus'\n\n # metrics_path defaults to '/metrics'\n # scheme defaults to 'http'.\n\n static_configs:\n - targets: ['localhost:9090']\n\n - job_name: 'message-service'\n metrics_path: '/manage/prometheus'\n static_configs:\n - targets: ['localhost:8081']\n```", "```js\n$ ./prometheus --config.file=/tmp/prometheus.yml\n```", "```js\ngroup 'com.packtpub.microservices'\nversion '1.0-SNAPSHOT'\n\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.0.4.RELEASE'\n    }\n}\n\napply plugin: 'java'\napply plugin: 'org.springframework.boot'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.0.4.RELEASE'\n    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.0.4.RELEASE'\n    compile group: 'io.micrometer', name: 'micrometer-core', version: '1.0.6'\n    compile group: 'io.micrometer', name: 'micrometer-registry-statsd', version: '1.0.6'\n    compile group: 'io.opentracing.contrib', name: 'opentracing-spring-cloud-starter-jaeger', version: '0.1.13'\n    compile group: 'io.github.resilience4j', name: 'resilience4j-circuitbreaker', version: '0.11.0'\n    compile group: 'log4j', name: 'log4j', version: '1.2.17'\n    compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '5.2'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n}\n```", "```js\nopentracing:\n  jaeger:\n    udp-sender:\n      host: \"localhost\"\n      port:\n        6831\n\nspring:\n  application:\n    name: \"message-service\"\n```", "```js\ndocker run -d --name jaeger \\\n -e COLLECTOR_ZIPKIN_HTTP_PORT=9411 \\\n -p 5775:5775/udp \\\n -p 6831:6831/udp \\\n -p 6832:6832/udp \\\n -p 5778:5778 \\\n -p 16686:16686 \\\n -p 14268:14268 \\\n -p 9411:9411 \\\n jaegertracing/all-in-one:latest\n```", "```js\n# my global config\nglobal:\n  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.\n  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.\n  # scrape_timeout is set to the global default (10s).\n\n# Alertmanager configuration\nalerting:\n alertmanagers:\n - static_configs:\n - targets:\n - localhost:9093\n\n# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.\nrule_files:\n - \"rules.yml\"\n  # - \"first_rules.yml\"\n  # - \"second_rules.yml\"\n\n# A scrape configuration containing exactly one endpoint to scrape:\n# Here it's Prometheus itself.\nscrape_configs:\n  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\n  - job_name: 'prometheus'\n\n    # metrics_path defaults to '/metrics'\n    # scheme defaults to 'http'.\n\n    static_configs:\n    - targets: ['localhost:9090']\n\n  - job_name: 'message-service'\n    metrics_path: '/manage/prometheus'\n    static_configs:\n    - targets: ['localhost:8081']\n```", "```js\ngroups:\n- name: message-service-latency\n  rules:\n  - alert: HighLatency\n    expr: rate(http_server_requests_seconds_sum{job=\"message-service\", instance=\"localhost:8081\"}[1m]) / rate(http_server_requests_seconds_count{job=\"message-service\", instance=\"localhost:8081\"}[1m]) > .5\n    for: 1m\n    labels:\n      severity: 'critical'\n    annotations:\n      summary: High request latency\n```", "```js\nglobal:\n  resolve_timeout: 5m\n\nroute:\n  group_by: ['alertname']\n  group_wait: 10s\n  group_interval: 10s\n  repeat_interval: 1h\n  receiver: 'web.hook'\n\nreceivers:\n- name: 'web.hook'\n  webhook_configs:\n  - url: 'http://127.0.0.1:4567/'\n```", "```js\nrequire 'sinatra'\n\npost '/' do\n    body = request.body.read()\n    puts body\n    return body\nend\n```", "```js\n$ ruby echo.rb\n...\n\n$ ./prometheus --config.file=/tmp/prometheus.yml\n\n$ ./alertmanager --config.file=/tmp/alertmanager.yml\n...\n```", "```js\n@RequestMapping(path = \"/{id}\", method = RequestMethod.GET, produces = \"application/json\")\npublic Message get(@PathVariable(\"id\") String id) throws MessageNotFoundException {\n\n try { Thread.sleep(600); } catch (InterruptedException e) } e.printStackTrace(); } \n    return messagesStore.get(id);\n}\n```"]