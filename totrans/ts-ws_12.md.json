["```js\nconst http = require(\"http\");\nhttp.createServer((req, res) => {\nÂ Â res.write(\"Hello World\");\nÂ Â res.end();\n}).listen(3000, () => {\nÂ Â console.log(\"ðŸš€ running on port 3000\");\n});\n```", "```js\nsetTimeout(() => {\nÂ Â Â Â console.log('5 seconds have passed');\n},  5000);\nfunction setTimeout(callback: (...args: any[]) => void, ms: number, ...args: any[]): NodeJS.Timeout;\n```", "```js\nfunction memoize<Fn extends AnyFunction>(fn: Fn, keyGetter?: KeyGetter<Fn>): Fn;\n```", "```js\nExample01.ts\n1 function greet(name: string) {\n2   console.log(`Hello ${name}`);\n3 }\n4\n5 greet('John'); \nLink to the preceding example: https://packt.link/GCFjN\n```", "```js\nHello John\n```", "```js\nExample02.ts\n1 const favoriteGreetings: Record<string, string> = {\n2   John: 'Hey',\n3   Jane: 'Hello',\n4   Doug: 'Howdy',\n5   Sally: 'Hey there',\n6 };\nLink to this example: https://packt.link/CXBrV\n```", "```js\nfunction greet(name: string) {\nÂ Â const greeting = favoriteGreetings[name] || 'Hello';\nÂ Â console.log(`${greeting} ${name}`);\n}\ngreet('John'); \n```", "```js\nHey John\n```", "```js\nExample03.ts\n1 function greet(name: string, mapper: Record<string, string>) {\n2   const greeting = mapper[name] || 'Hello';\n3   console.log(`${greeting} ${name}`);\n4 }\n5\n6 greet('John', favoriteGreetings); // prints 'Hey John'\n7 greet('Doug', favoriteGreetings); // prints 'Howdy Doug'\nLink to this example: https://packt.link/bG0p7\n```", "```js\nHey John\nHowdy Doug\n```", "```js\nExample04.ts\n1 function greet(name: string, getGreeting: (name: string) => string) {\n2   const greeting = getGreeting(name);\n3   console.log(`${greeting} ${name}`);\n4 }\n5 \n6 function getGreeting(name: string) {\n7   const greeting = favoriteGreetings[name];\n8   return greeting || 'Hello';\n9 }\n10\n11 greet('John', getGreeting); // prints 'Hey John'\n12 greet('Doug', getGreeting); // prints 'Howdy Doug'\nLink to this example: https://packt.link/uRe2r\n```", "```js\nHey John\nHowdy Doug\n```", "```js\nExample05.ts\n1  function getGreeting(name: string) {\n2    const hours = new Date().getHours();\n3   if (hours < 12) {\n4     return 'Good morning';\n5   }\n6   \n7   if (hours === 12) {\n8     return 'Good noon';\n9   }\n10  \n11  if (hours < 18) {\n12    return 'Good afternoon';\n13  }\n14 \n15  return 'Good night';\n16  }\n17 \n18  greet('John', getGreeting); // prints 'Good morning John' if it's morning\n19  greet('Doug', getGreeting); // prints 'Good morning Doug' if it's morning\nLink to this example: https://packt.link/xSYDF\n```", "```js\nGood afternoon John\nGood afternoon Doug\n```", "```js\nExample06.ts\n1 function greet(getGreeting: (name: string) => string) {\n2   return function(name: string) {\n3     const greeting = getGreeting(name);\n4     console.log(`${greeting} ${name}`);\n5   };\n6 }\nLink to this example: https://packt.link/8nHeD\n```", "```js\nconst greetWithTime = greet(getGreeting);\ngreetWithTime('John'); // prints 'Good morning John' if it's morning\ngreetWithTime('Doug'); // prints 'Good morning Doug' if it's morning\n```", "```js\n8  const greetWithTime = greet(function(name: string) {\n9   const hours = new Date().getHours();\n10   if (hours < 12) {\n11     return 'Good morning';\n12   }\n13 \n14   if (hours === 12) {\n15     return 'Good noon';\n16   }\n17 \n18   if (hours < 18) {\n19     return 'Good afternoon';\n20   }\n21 \n22   return 'Good night';\n23 });\n```", "```js\nconst names = ['John', 'Jane', 'Doug', 'Sally'];\nnames.forEach(greetWithTime);\n```", "```js\nGood afternoon John\nGood afternoon Jane\nGood afternoon Doug\nGood afternoon Sally\n```", "```js\ninterface Student {\nÂ Â id: number;\nÂ Â firstName: string;\nÂ Â lastName: string;\nÂ Â graduationYear: number;\nÂ Â score: number;\n}\nconst students: Student[] = [\nÂ Â { id: 1, firstName: 'Carma', lastName: 'Atwel', graduationYear: 2010, score: 88 },\nÂ Â { id: 2, firstName: 'Shaun', lastName: 'Knoller', graduationYear: 2011, score: 84 },\nÂ Â // ...\n];\n```", "```js\n    function getAverageScoreOf2010Students(students: Student[]): number {\n    Â Â // TODO: implement\n    }\n    ```", "```js\n    function getAverageScoreOf2010Students(students: Student[]): number {\n    Â Â const relevantStudents = students.filter(student => student.graduationYear === 2010);\n    }\n    ```", "```js\n    function getAverageScoreOf2010Students(students: Student[]): number {\n    Â Â const relevantStudents = students.filter(student => student.graduationYear === 2010);\n    Â Â const relevantStudentsScores = relevantStudents.map(student => student.score);\n    }\n    ```", "```js\n    function getAverageScoreOf2010Students(students: Student[]): number {\n    Â Â const relevantStudents = students.filter(student => student.graduationYear === 2010);\n    Â Â const relevantStudentsScores = relevantStudents.map(student => student.score);\n    Â Â const relevantStudentsTotalScore = relevantStudentsScores.reduce((acc, item) => acc + item, 0);\n    Â Â return relevantStudentsTotalScore / relevantStudentsScores.length;\n    }\n    ```", "```js\n    The average score of students who graduated in 2010 is: 78.5\n    ```", "```js\nconst btnElement = document.querySelector<HTMLButtonElement>('.my-button');\nfunction handleButtonClick(event: MouseEvent) {\nÂ Â console.log('.my-button was clicked!');\n}\nbtnElement.addEventListener('click', handleButtonClick);\n```", "```js\nimport http from 'http';\nfunction requestHandler(req: http.IncomingMessage, res: http.ServerResponse) {\nÂ Â res.write('Hello from request handler');\nÂ Â res.end();\n}\nhttp\nÂ Â .createServer(requestHandler)\nÂ Â .listen(3000);\n```", "```js\n// server.ts\nfunction logWithTime(message: string) {\nÂ Â console.log(`[${new Date().toISOString()}]: ${message}`);\n}\nhttp\nÂ Â .createServer((req, res) => {\nÂ Â Â Â logWithTime(`START: ${req.url}`);\nÂ Â Â Â const name = req.url!.split('/')[1]!;\nÂ Â Â Â const greeting = fetchGreeting(name);\nÂ Â Â Â res.write(greeting);\nÂ Â Â Â res.end();\nÂ Â Â Â logWithTime(`END: ${req.url}`);\nÂ Â })\nÂ Â .listen(3000);\n```", "```js\nfunction fetchGreeting(name: string) {\nÂ Â const now = Date.now();\nÂ Â const fakeRequestTime = 5000;\nÂ Â logWithTime(`START: fetchGreeting for user: ${name}`);\n\nÂ Â while (Date.now() < now + fakeRequestTime);\n\nÂ Â logWithTime(`END: fetchGreeting for user: ${name}`);\nÂ Â return `Hello ${name}`;\n}\n```", "```js\n// client.ts\nfetch('http://localhost:3000/john');\nfetch('http://localhost:3000/jane');\n```", "```js\nfunction fetchGreeting(name: string, cb: (greeting: string) => void) {\nÂ Â const fakeRequestTime = 5000;\nÂ Â logWithTime(`START: fetchGreeting for user: ${name}`);\nÂ Â setTimeout(() => {\nÂ Â Â Â logWithTime(`fetched greeting for user: ${name}`);\nÂ Â Â Â cb(`Hello ${name}`);\nÂ Â }, fakeRequestTime);\nÂ Â logWithTime(`END: fetchGreeting for user: ${name}`);\n}\n```", "```js\n// server.ts\nhttp\nÂ Â .createServer((req, res) => {\nÂ Â Â Â logWithTime(`START: ${req.url}`);\nÂ Â Â Â const name = req.url!.split('/')[1]!;\nÂ Â Â Â fetchGreeting(name, greeting => {\nÂ Â Â Â Â Â logWithTime(`START: callback for ${name}`);\nÂ Â Â Â Â Â res.write(greeting);\nÂ Â Â Â Â Â res.end();\nÂ Â Â Â Â Â logWithTime(`END: callback for ${name}`);\nÂ Â Â Â });\nÂ Â Â Â logWithTime(`END: ${req.url}`);\nÂ Â })\nÂ Â .listen(3000);\n```", "```js\nimport fs from \"fs\";\nfs.readFile(\"some-file\", (err, file) => {\nÂ Â if (err) {\nÂ Â Â Â // handle error...\nÂ Â Â Â return;\nÂ Â }\nÂ Â // handle file...\n});\n```", "```js\nimport express from 'express';\nimport request from 'request';\nimport sqlite from 'sqlite3';\nconst db = new sqlite.Database('db.sql', err => {\nÂ Â if (err) {\nÂ Â Â Â console.error('Error opening database:', err.message);\nÂ Â }\n});\nconst app = express();\napp.get('/:username/friends', (req, res) => {\nÂ Â const username = req.params.username;\nÂ Â db.get(\nÂ Â Â Â `SELECT id\nÂ Â Â Â FROM users\nÂ Â Â Â WHERE username = username`,\nÂ Â Â Â [username],\nÂ Â Â Â (err, row) => {\nÂ Â Â Â Â Â if (err) {\nÂ Â Â Â Â Â Â Â return res.status(500).end();\nÂ Â Â Â Â Â }\nÂ Â Â Â Â Â getUserPrivacyPreferences(row.id, (err, privacyPreferences) => {\nÂ Â Â Â Â Â Â Â if (err) {\nÂ Â Â Â Â Â Â Â Â Â return res.status(500).end();\nÂ Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â if (!privacyPreferences.canOthersViewFriends) {\nÂ Â Â Â Â Â Â Â Â Â return res.status(403).end();\nÂ Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â getFriends(row.id, (err, friends) => {\nÂ Â Â Â Â Â Â Â Â Â if (err) {\nÂ Â Â Â Â Â Â Â Â Â Â Â return res.status(500).end();\nÂ Â Â Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â Â Â return res\nÂ Â Â Â Â Â Â Â Â Â Â Â .status(200)\nÂ Â Â Â Â Â Â Â Â Â Â Â .send({ friends })\nÂ Â Â Â Â Â Â Â Â Â Â Â .end();\nÂ Â Â Â Â Â Â Â });\nÂ Â Â Â Â Â });\nÂ Â Â Â }\nÂ Â );\n});\napp.get('*', (req, res) => {\nÂ Â res.sendFile('index.html');\n});\napp.listen(3000);\n```", "```js\napp.get('/:username/friends', (req, res) => {\nÂ Â const username = req.params.username;\nÂ Â db.get(\nÂ Â Â Â `SELECT id\nÂ Â Â Â FROM users\nÂ Â Â Â WHERE username = username`,\nÂ Â Â Â [username],\nÂ Â Â Â (err, row) => {\nÂ Â Â Â Â Â handleDatabaseResponse(res, err, row);\nÂ Â Â Â }\nÂ Â );\n});\n```", "```js\nfunction handleDatabaseResponse(res: express.Response, err: any, row: { id: string }) {\nÂ Â if (err) {\nÂ Â Â Â return res.status(500).end();\nÂ Â }\nÂ Â getUserPrivacyPreferences(row.id, (err, privacyPreferences) => {\nÂ Â Â Â handleGetUserPrivacyPreferences(res, row.id, err, privacyPreferences);\nÂ Â });\n}\n```", "```js\nfunction handleGetUserPrivacyPreferences(\nÂ Â res: express.Response,\nÂ Â userId: string,\nÂ Â err: any,\nÂ Â privacyPreferences: PrivacyPreferences\n) {\nÂ Â if (err) {\nÂ Â Â Â return res.status(500).end();\nÂ Â }\nÂ Â if (!privacyPreferences.canOthersViewFriends) {\nÂ Â Â Â return res.status(403).end();\nÂ Â }\nÂ Â getFriends(userId, (err, friends) => handleGetFriends(res, err, friends));\n}\n```", "```js\nfunction handleGetFriends(res: express.Response, err: any, friends: any[]) {\nÂ Â if (err) {\nÂ Â Â Â return res.status(500).end();\nÂ Â }\nÂ Â return res\nÂ Â Â Â .status(200)\nÂ Â Â Â .send({ friends })\nÂ Â Â Â .end();\n}\n```", "```js\n    ...\n    import async from 'async';\n    ...\n    type CallbackFn = <T extends any[]>(err: any, ...data: T) => void;\n    class ServerError extends Error {\n    Â Â constructor(public readonly statusCode: number, message?: string) {\n    Â Â Â Â super(message);\n    Â Â }\n    }\n    app.get('/:username/friends', (req, res) => {\n    Â Â const username = req.params.username;\n    ```", "```js\n    Â Â async.waterfall(\n    Â Â Â Â [\n    Â Â Â Â Â Â // 1\\. Get the user id from the database\n    Â Â Â Â Â Â (cb: CallbackFn) => {\n    Â Â Â Â Â Â Â Â db.get(\n    Â Â Â Â Â Â Â Â Â Â `SELECT id\n    Â Â Â Â Â Â Â Â Â Â Â Â FROM users\n    Â Â Â Â Â Â Â Â Â Â Â Â WHERE username = username`,\n    Â Â Â Â Â Â Â Â Â Â [username],\n    Â Â Â Â Â Â Â Â Â Â (err, row) => {\n    Â Â Â Â Â Â Â Â Â Â Â Â if (err) {\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â return cb(err);\n    Â Â Â Â Â Â Â Â Â Â Â Â }\n    Â Â Â Â Â Â Â Â Â Â Â Â return cb(null, row);\n    Â Â Â Â Â Â Â Â Â Â }\n    Â Â Â Â Â Â Â Â );\n    Â Â Â Â Â Â },\n    ```", "```js\n    Â Â Â Â Â Â (row: { id: string }, cb: CallbackFn) => {\n    Â Â Â Â Â Â Â Â getUserPrivacyPreferences(row.id, (err, privacyPreferences) => {\n    Â Â Â Â Â Â Â Â Â Â if (err) {\n    Â Â Â Â Â Â Â Â Â Â Â Â return cb(err);\n    Â Â Â Â Â Â Â Â Â Â }\n    Â Â Â Â Â Â Â Â Â Â return cb(null, privacyPreferences, row.id);\n    Â Â Â Â Â Â Â Â });\n    Â Â Â Â Â Â },\n    ```", "```js\n    Â Â Â Â Â Â (privacyPreferences: PrivacyPreferences, userId: string, cb: CallbackFn) => {\n    Â Â Â Â Â Â Â Â if (!privacyPreferences.canOthersViewFriends) {\n    Â Â Â Â Â Â Â Â Â Â return cb(new ServerError(403, \"User doesn't allow others to view their friends\"));\n    Â Â Â Â Â Â Â Â }\n    Â Â Â Â Â Â Â Â return cb(null, userId);\n    Â Â Â Â Â Â },\n    ```", "```js\n    Â Â Â Â Â Â (userId: string, cb: CallbackFn) => {\n    Â Â Â Â Â Â Â Â getFriends(userId, (err, friends) => {\n    Â Â Â Â Â Â Â Â Â Â if (err) {\n    Â Â Â Â Â Â Â Â Â Â Â Â return cb(err);\n    Â Â Â Â Â Â Â Â Â Â }\n    Â Â Â Â Â Â Â Â Â Â return cb(null, friends);\n    Â Â Â Â Â Â Â Â });\n    Â Â Â Â Â Â },\n    Â Â Â Â ],\n    ```", "```js\n    Â Â Â Â (error, friends) => {\n    Â Â Â Â Â Â if (error) {\n    Â Â Â Â Â Â Â Â if (error instanceof ServerError) {\n    Â Â Â Â Â Â Â Â Â Â return res\n    Â Â Â Â Â Â Â Â Â Â Â Â .status(error.statusCode)\n    Â Â Â Â Â Â Â Â Â Â Â Â .send({ message: error.message })\n    Â Â Â Â Â Â Â Â Â Â Â Â .end();\n    Â Â Â Â Â Â Â Â }\n    Â Â Â Â Â Â Â Â return res.status(500).end();\n    Â Â Â Â Â Â }\n    Â Â Â Â Â Â return res\n    Â Â Â Â Â Â Â Â .status(200)\n    Â Â Â Â Â Â Â Â .send({ friends })\n    Â Â Â Â Â Â Â Â .end();\n    Â Â Â Â }\n    Â Â );\n    });\n    ```", "```js\n...\napp.get('/:username/friends', (req, res) => {\nÂ Â const username = req.params.username;\nÂ Â promisify<string, string[], { id: string }>(db.get)(\nÂ Â Â Â `SELECT id\nÂ Â FROM users\nÂ Â WHERE username = username`,\nÂ Â Â Â [username]\nÂ Â )\nÂ Â Â Â .then(row => {\nÂ Â Â Â Â Â return getUserPrivacyPreferences(row.id).then(privacyPreferences => {\nÂ Â Â Â Â Â Â Â if (!privacyPreferences.canOthersViewFriends) {\nÂ Â Â Â Â Â Â Â Â Â throw new ServerError(403, \"User doesn't allow others to view their friends\");\nÂ Â Â Â Â Â Â Â }\nÂ Â Â Â Â Â Â Â return row.id;\nÂ Â Â Â Â Â });\nÂ Â Â Â })\nÂ Â Â Â .then(userId => {\nÂ Â Â Â Â Â return getFriends(userId);\nÂ Â Â Â })\nÂ Â Â Â .then(friends => {\nÂ Â Â Â Â Â return res\nÂ Â Â Â Â Â Â Â .status(200)\nÂ Â Â Â Â Â Â Â .send({ friends })\nÂ Â Â Â Â Â Â Â .end();\nÂ Â Â Â })\nÂ Â Â Â .catch(error => {\nÂ Â Â Â Â Â if (error instanceof ServerError) {\nÂ Â Â Â Â Â Â Â return res\nÂ Â Â Â Â Â Â Â Â Â .status(error.statusCode)\nÂ Â Â Â Â Â Â Â Â Â .send({ message: error.message })\nÂ Â Â Â Â Â Â Â Â Â .end();\nÂ Â Â Â Â Â }\nÂ Â Â Â Â Â return res.status(500).end();\nÂ Â Â Â });\n});\n```", "```js\n...\napp.get('/:username/friends', async (req, res) => {\nÂ Â const username = req.params.username;\nÂ Â try {\nÂ Â Â Â const row = await promisify<string, string[], { id: string }>(db.get)(\nÂ Â Â Â Â Â `SELECT id\nÂ Â Â Â Â Â  FROM users\nÂ Â Â Â Â Â  WHERE username = username`,\nÂ Â Â Â Â Â [username]\nÂ Â Â Â );\nÂ Â Â Â const privacyPreferences = await getUserPrivacyPreferences(row.id);\nÂ Â Â Â if (!privacyPreferences.canOthersViewFriends) {\nÂ Â Â Â Â Â throw new ServerError(403, \"User doesn't allow others to view their friends\");\nÂ Â Â Â }\nÂ Â Â Â const friends = await getFriends(row.id);\nÂ Â Â Â return res\nÂ Â Â Â Â Â .status(200)\nÂ Â Â Â Â Â .send({ friends })\nÂ Â Â Â Â Â .end();\nÂ Â } catch (error) {\nÂ Â Â Â if (error instanceof ServerError) {\nÂ Â Â Â Â Â return res\nÂ Â Â Â Â Â Â Â .status(error.statusCode)\nÂ Â Â Â Â Â Â Â .send({ message: error.message })\nÂ Â Â Â Â Â Â Â .end();\nÂ Â Â Â }\nÂ Â Â Â return res.status(500).end();\nÂ Â }\n});\n```", "```js\n    const func = pipe(\n    Â Â (x: string) => x.toUpperCase(),\n    Â Â x => [x, x].join(','),\n    Â Â x => x.length,\n    Â Â x => x.toString(),\n    Â Â x => Number(x),\n    );\n    console.log('result is:', func('hello'));\n    ```", "```js\nresult is: 11 \n```"]