- en: Chapter 8. A Bug-Tracking Agent for Teams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**InternetRelayChat** (**IRC**) enables us to communicate in real time in the
    form of text. This chat runs on a TCP protocol in a client-server model. IRC supports
    group messaging, which is called as channels, and also supports private messaging.'
  prefs: []
  type: TYPE_NORMAL
- en: IRC is organized into many networks with different audiences. IRC being a client
    server, users need IRC clients to connect to IRC servers. IRC client software
    comes as packaged software, as well as web-based clients. Some browsers are also
    providing IRC clients as add-ons. Users can either install them on their systems,
    and then they can be used to connect to IRC servers or networks. While connecting
    to these IRC servers, users will have to provide a unique nickname and choose
    an existing channel for communication, or users can start a new channel while
    connecting to these servers.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to develop one such IRC bot for bug-tracking purposes.
    This bug-tracking bot will provide information about bugs as well as details about
    a particular bug. All this will be done seamlessly within the IRC channel itself.
    It's going to be one window operation for a team, when it comes to knowing about
    their bugs or defects.
  prefs: []
  type: TYPE_NORMAL
- en: Great!!
  prefs: []
  type: TYPE_NORMAL
- en: IRC client and server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the introduction, to initiate an IRC communication, we need
    an IRC client, and a server or a network to which our client will be connected.
    We will be using a freenode network for our client to connect to. Freenode is
    the largest free, open source, software-focused IRC network.
  prefs: []
  type: TYPE_NORMAL
- en: IRC web-based client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will be using the IRC web-based client through a URL ([https://webchat.freenode.net/](https://webchat.freenode.net/)).
    After opening the URL, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IRC web-based client](img/image00379.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned earlier, while connecting, we need to provide **Nickname:** and
    **Channels:**.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have provided **Nickname:** as `Madan` and at **Channels:** as `#BugsChannel`.
    In IRC, channels are always identified by a #, so I used # to begin the name of
    my bugs channel. This is the new channel that we will be starting for communication.
    All the developers or team members can similarly provide their nicknames and this
    channel name to join the communication. Now let''s prove **Humanity:** by selecting
    **I''m not a robot** and clicking the **Connect** button.'
  prefs: []
  type: TYPE_NORMAL
- en: '![IRC web-based client](img/image00380.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once connected, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![IRC web-based client](img/image00381.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With this, our IRC client is connected to the freenode network. You can also
    see the username on the right-hand side is `@Madan`, and within this **#BugsChannel**.
    Whoever joins this channel, using this channel name and a network, will be shown
    on the right-hand side.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will ask our bot to join this channel and the same network,
    and will see how it appears within the channel.
  prefs: []
  type: TYPE_NORMAL
- en: IRC bots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IRC bot is a program that connects to IRC as one of the clients and appears
    as one of the users in the IRC channels. These IRC bots are used to provide IRC
    services or to host chat-based custom implementations that will help teams to
    efficiently collaborate.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first IRC bot using IRC and Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by creating a folder on our local drive, in order to store our
    bot program, from the Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming we have Node.js and npm installed, let''s create and initialize our
    `package.json`, which will store our bot''s dependencies and definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have gone through the `npm init` options (which are very easy to follow),
    you''ll see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first IRC bot using IRC and Node.js](img/image00382.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In your project folder, you''ll see the result, which is your `package.json`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first IRC bot using IRC and Node.js](img/image00383.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's install the `irc` package from npm. This can be located at [https://www.npmjs.com/package/irc](https://www.npmjs.com/package/irc)
    .
  prefs: []
  type: TYPE_NORMAL
- en: In order to install it, run this npm command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You should then see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first IRC bot using IRC and Node.js](img/image00384.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Having done this, the next thing to do is to update your `package.json` in
    order to include the `"engines"` attribute. Open the `package.json` file with
    a text editor and update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `package.json` should then look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first IRC bot using IRC and Node.js](img/image00385.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's create our `app.js` file, which will be the entry point to our bot, as
    mentioned while setting up our node package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `app.js` should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s run our Node.js program and see how our console looks. If everything
    works well, our console should show our bot as being connected to the required
    network and also joined to a channel. The console can be seen to be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first IRC bot using IRC and Node.js](img/image00386.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if you look at our channel **#BugsChannel** in our web client, you should
    see our bot has joined it and also sent a welcome message as well. Refer to the
    following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first IRC bot using IRC and Node.js](img/image00387.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you look at the the preceding screen, our bot program has executed successfully.
    Our bot `BugTrackerIRCBot` has joined the channel **#BugsChannel**, and also the
    bot has sent an introduction message to all who are on the channel. If you look
    at the right side of the screen under usernames, we see `BugTrackerIRCBot` below
    `@Madan`.
  prefs: []
  type: TYPE_NORMAL
- en: Code understanding of our basic bot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After seeing how our bot looks in IRC client, let's look at the basic code implementation
    from `app.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We used `irc` library with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `irc` library, we instantiated the client to connect to one of the IRC
    networks using the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we connected to network `irc.freenode.net` and provided a nickname of
    `BugTrackerIRCBot`. This name has been given because I would like my bot to track
    and report any bugs found in the future. Now, we ask the client to connect and
    join a specific channel using the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code snippet, once the client is connected, we get a reply
    from the server. This reply is shown on a console. Once successfully connected,
    we ask the bot to join a channel using the following code line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Remember, `#BugsChannel` is what we have joined to from the web client at the
    start. Now, using `client.join()`, I am asking my bot to join the same channel.
    Once the bot has joined, the bot gives a welcome message in the same channel using
    the function `client.say()`.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, this has given you some basic understanding of our bot and it's code
    implementations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will enhance our bot so that our teams can have an effective
    communication experience while chatting.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing our BugTrackerIRCBot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having built a very basic IRC bot, let's enhance our BugTrackerIRCBot.
  prefs: []
  type: TYPE_NORMAL
- en: As developers, we would always like to know how our programs or a system is
    functioning. To do this, typically, our testing teams carry out testing of a system
    or a program, and log the bugs or defects in a bug-tracking software package or
    system. We developers can later take a look at those bugs and address them as
    part of our development life cycle. During this journey, developers will collaborate
    and communicate over messaging platforms such as IRC. We would like to provide
    a unique experience during their development by leveraging IRC bots.
  prefs: []
  type: TYPE_NORMAL
- en: So, this is exactly what we are doing. We are creating a channel for communication;
    all the team members will be joined to it and our bot will also be there. In this
    channel, bugs will be reported and communicated based on developers' requests.
    Also, if developers need some additional information about a bug, the chat bot
    can help them by providing a URL from the bug-tracking system.
  prefs: []
  type: TYPE_NORMAL
- en: Awesome!!
  prefs: []
  type: TYPE_NORMAL
- en: 'But, before going into detail, let me summarize how we are going to do this
    using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Enhance our basic bot program for a more conversational experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a bug-tracking system or bug storage where bugs will be stored and tracked
    for developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here we mention a bug storage system. In this chapter, I would like to explain
    **DocumentDB**, which is a NoSQL JSON-based cloud storage system. In earlier chapters
    we looked at MongoDB. Now we will look at DocumentDB for our bug system.
  prefs: []
  type: TYPE_NORMAL
- en: What is DocumentDB?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In an earlier chapter, I have already explained NoSQLs. DocumentDB is one such
    NoSQL, in which data is stored in JSON documents, and is offered on the Microsoft
    Azure platform.
  prefs: []
  type: TYPE_NORMAL
- en: Details of DocumentDB can be referred to at [https://azure.microsoft.com/en-in/services/documentdb/](https://azure.microsoft.com/en-in/services/documentdb/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a DocumentDB for our BugTrackerIRCBot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Assuming you already have a Microsoft Azure subscription, follow these steps
    to configure DocumentDB for your bot.
  prefs: []
  type: TYPE_NORMAL
- en: Create account ID for DocumentDB
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let's create a new account called `botdb` using the following screenshot from
    the Azure portal. Select NoSQL API as **DocumentDB**. Select an appropriate subscription
    and resources. I am using the existing resources for this account. You can also
    create a new dedicated resource for this account. Once you enter all the required
    information, hit the **Create** button at the bottom to create the new account
    for DocumentDB.
  prefs: []
  type: TYPE_NORMAL
- en: '![Create account ID for DocumentDB](img/image00388.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The newly created account, `botdb`, can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create account ID for DocumentDB](img/image00389.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Create a collection and database
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Select a `botdb` account from the account lists shown previously. This will
    show various menu options such as **Properties**, **Settings**, **Collections**,
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under this account, we need to create a collection to store the bug data. To
    create a new collection, click on the **Add Collection** option, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create a collection and database](img/image00390.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'On clicking on the **Add Collection** option, the following screen will be
    shown on the right side of the screen. Please enter the details as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create a collection and database](img/image00391.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screen, we are creating a new database along with our new
    collection, **Bugs**. This new database will be named `BugDB`. Once this database
    has been created, we can add other bug-related collections in future to the same
    database. This can be done using the option **Use** existing from the preceding
    screen. Once you have entered all the relevant data, click **OK** to create the
    database as well as the collection. Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create a collection and database](img/image00392.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screen, the **COLLECTION ID** and **DATABASE** shown will
    be used while enhancing our bot.
  prefs: []
  type: TYPE_NORMAL
- en: Create data for our BugTrackerIRCBot
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now we have the `BugsDB` with the bugs collection, which will hold all the
    data for bugs. Let''s add some data into our collection. To add a data item, let''s
    use the menu option **Document Explorer** shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create data for our BugTrackerIRCBot](img/image00393.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open up a screen showing the list of **Databases** and **Collections**
    created so far. Select our database of `BugDB` and the collection of `Bugs` from
    the available list. Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create data for our BugTrackerIRCBot](img/image00394.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To create a JSON document for our bugs collection, click on the **Create**
    option. This will open up a **New Document** screen to enter the JSON-based data.
    Please enter a data item as per the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create data for our BugTrackerIRCBot](img/image00395.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will be storing `id`, `status`, `title`, `description`, `priority`,`assignedto`,
    and `url` attributes for our single bug document, which will be stored in the
    bugs collection. To save the JSON document in our collection, click the **Save**
    button. Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create data for our BugTrackerIRCBot](img/image00396.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This way we can create sample records in the bugs collection, which will later
    be wired up in a Node.js program. A sample list of bugs can be seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create data for our BugTrackerIRCBot](img/image00397.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To summarize the section so far, we have determined how to use DocumentDB from
    Microsoft Azure. Using DocumentDB, we created a new collection along with new
    database to store bug data. We also added some sample JSON documents in the bugs
    collection.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's look at how we can wire up our DocumentDB with Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up DocumentDB and Node.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's go back to our `ircbot` directory and install the `documentdb` package
    from npm. This is simply Node.js SDK for Microsoft Azure DocumentDB. This is located
    at URL [https://www.npmjs.com/package/documentdb](https://www.npmjs.com/package/documentdb)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to install it, run this npm command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should then see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wiring up DocumentDB and Node.js](img/image00398.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's modify our `app.js` file so that we can access DocumentDB-based data using
    DocumentDB APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To wire up DocumentDB with Node.js, we will use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the the preceding code, we are trying to read documents from our DocumentDB.
    Now, to instantiate `DocumentClient`, we need the `host` and `masterkey` of our
    DocumentDB account. Refer to the following screenshot to locate `host`, which
    is only a **URl** and `masterkey` is only a **PRIMARY KEY**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Wiring up DocumentDB and Node.js](img/image00399.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To read all the documents from our collection, we use the following code lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`readDocuments()` needs an argument of collection link. This collection link
    is simply the path to our collection. This is given as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbs/<Your Database>/colls/<Your Collection ID>`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `app.js` now should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go back to our `ircbot` directory with a Command Prompt and run our
    node program. Once you run this, the program will connect to our collection using
    Microsoft Azure DocumentDB Node.js SDK. After reading the documents, on the Command
    Prompt we will see the number of documents read. For details, please refer the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wiring up DocumentDB and Node.js](img/image00400.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Since our IRC client is connecting asynchronously, we will see a reply from
    IRC Server once received. In this case, we got the response from DocumentDB early,
    so we see `6 Documents found` on the console.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we are able to connect to DocumentDB and able to retrieve documents
    from the same. Now, in the next and final section, we will wire up all of this
    together and we will also enhance the conversational experience of our bot.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up all of this together
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To wire up all the things together, let''s modify our earlier `app.js` to be
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Code understanding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I have already explained how we can connect to DocumentDB using **URI** and
    **PRIMARY KEY**. Now let's focus on how we have implemented the conversational
    experience and how we are getting bug information based on that within our BugTrackerIRCBot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the the preceding code, our IRC client has been added with a listener that
    listens to all the messages within the channel. So, as our bot joins channel,
    the bot mentions which commands can be used. These commands are `BUGREPORT` and
    `BUG # <BUG NO.>`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Knowing this, when our incoming message contains words like `BUGREPORT` and
    `BUG #` then our bot BugTrackerIRCBot gathers information based on those commands.
    If the message does not match, then the bot replies with a proper message and
    also provides usable commands.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume one of the developers is looking for the total number of defects
    and so the developer enters the command `BUGREPORT`, then our bot will query the
    DocumentDB database and will get the report for open and closed bugs from our
    bugs collection. This code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the the preceding code, once the developer's intention of getting a report
    is clear, our bot replies with confirmation using the `client.say()` function.
    The bot interactively asks the developer to wait for a moment and in the mean
    time queries DocumentDB using the function `docclient.queryDocuments()`. Once
    the data is received, again the bot uses the `client.say()` function and returns
    the information in a chat window. In the preceding code, the bot first returns
    `Total Open Bugs` and then `Total Closed Bugs`.
  prefs: []
  type: TYPE_NORMAL
- en: Now you may ask why two different calls are made for `Open` and `Closed` bugs;
    the reason is that, currently, there is no native support for AGGREGATE functions
    in DocumentDB. We need to know only the `Open` and `Closed` numbers of bugs, so
    we use the `docclient.queryDocuments()` function twice to get the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'BugTrackerIRCBot can also give us information about individual bugs using the
    command `BUG #`. The implementation for the same can be seen in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the the preceding code, when the developer gives the `BUG #` command while
    chatting, our code will extract only the bug number after the symbol `#`.Then
    our bot will reply with which bug details will be retrieved from the database.
    If the records are not found, our bot will reply with an appropriate message as
    well.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The variable `querySpec` will formulate a query with the parameter of the bug
    number entered by the developer in a chat window and then will be processed using
    the function `docclient.queryDocuments()`. Once the function retrieves the data
    for a specified bug number, our bot will formulate the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: To the end user or a developer, we show the URL of a bug from the bug-tracking
    system, as well as status of the bug and a title.
  prefs: []
  type: TYPE_NORMAL
- en: Lots of code to understand so far!!
  prefs: []
  type: TYPE_NORMAL
- en: Let's run our bot now, and see how it interacts and provides us with a great
    conversational experience.
  prefs: []
  type: TYPE_NORMAL
- en: Running our enhanced BugTrackerIRCBot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s go back to our `ircbot` directory, on a Command Prompt, and run our
    modified `app.js`. Once the code has run successfully, you should see the following
    at the Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running our enhanced BugTrackerIRCBot](img/image00401.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is assuming that you have already connected to the IRC client, as stated
    earlier. Now let''s look at our channel #BugsChannel from an IRC client. We should
    see our bot as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running our enhanced BugTrackerIRCBot](img/image00402.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the the preceding screenshot, you can see the bot has joined the channel
    and has also introduced itself to us with usable commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s enter the command `BUGREPORT` and see what the bot replies to us. Here,
    the bot is getting the bug report, as explained earlier in the code description.
    The reply seen is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running our enhanced BugTrackerIRCBot](img/image00403.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s ensure our other command also works. So, now we are interested in
    information about an individual bug, enter the command `BUG # 125` and see what
    our bot replies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running our enhanced BugTrackerIRCBot](img/image00404.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The bot replied with the URL of the bug-tracking system for a bug, and also
    **Status** and **Title** information.
  prefs: []
  type: TYPE_NORMAL
- en: Let's cross check in DocumentDB whether the bot is providing the correct information
    or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'In DocumentDB, for `Bug # 125`, the following data can be seen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running our enhanced BugTrackerIRCBot](img/image00405.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you enter a bug number that does not exist in DocumentDB, then the bot replies
    accordingly; refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running our enhanced BugTrackerIRCBot](img/image00406.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here I entered `BUG # 12345` and the bot searched and could not find the bug,
    so it responded `No bugs found`.'
  prefs: []
  type: TYPE_NORMAL
- en: So, we are able to extend our bot to meet our requirements. BugTrackerIRCBot
    can be further extended to assign bugs or even to create a new bug using appropriate
    commands such as `ASSIGNBUG`, `NEWBUG`, etc. I will leave it up to the users to
    extend our BugTrackerIRCBot that way.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, you now have enough insight on how we can leverage IRC bots during
    development, and how we can provide an effective and efficient conversational
    experience to developers who are collaborating and communicating through IRC clients.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every development team needs bug-tracking and reporting tools. There are typically
    needs for bug reporting and bug assignment. In the case of critical projects,
    these needs become very critical for project timelines. This chapter has showed
    us how we can provide a seamless experience to developers while they are communicating
    with peers within a channel.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we created a very simple IRC bot in Node.js and verified how it can
    communicate within a channel using the IRC web-based client. Then, we extended
    our basic bot such that, based on a user's request, the bot will give us information
    quickly and easily while chatting itself. We also leveraged Azure-based cloud
    storage to store the bug database. This time we used DocumentDB - a NoSQL JSON
    database from the Microsoft Azure platform. We wired up DocumentDB libraries and
    IRC libraries in Node.js for our bot to function and had a great conversational
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: In today's world of collaboration, development teams that use such integrations
    and automations will be efficient and effective while delivering their quality
    products.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to integrate Salesforce APIs and Kik's
    chat platform for the Salesforce CRM bot.
  prefs: []
  type: TYPE_NORMAL
