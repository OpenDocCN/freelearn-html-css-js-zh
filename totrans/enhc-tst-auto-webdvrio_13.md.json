["```js\n   // wdio.conf.ts\n   exports.config = {\n     specs: ['./tests/**/*.spec.ts'],\nmaxInstances: 2,\ncapabilities: [\n       {\n         browserName: 'chrome',\n       },\n       {\n         browserName: 'safari',\n       },\n       {\n         browserName: 'edge',\n       },\n     ],\n     framework: 'jasmine',\n     jasmineOpts: {\n       defaultTimeoutInterval: 60000,\n     },\n     Services:[\n\"chromedriver\",\n\"safaridriver\",\n\"edgedriver\"\n     ]\n   };\n```", "```js\n   // test/example.spec.ts\n   import { browser } from '@wdio/globals';\n   describe('Example Test', () => {\n     it('should open a website', async () => {\n       await browser.url('https://example.com');\n       const title = await browser.getTitle();\n       expect(title).toContain('Example Domain');\n     });\n   });\nYarn\n```", "```js\nyarn wdio wdio.conf.ts --spec ./test/example.spec.ts\n```", "```js\n  // wdio.shared.conf.ts\n/**\n*  The baseUrl will only be used if you don't specify a url in your script\n*  loadPage('/')\n*  if you specify on then its ignored\n*  loadPage('https://candymapper.com/')\n*/\nlet baseUrl: string\nlet env = process.env.Env\nlet urls = {\n    uat: 'https://the-internet.herokuapp.com',\n    dev: 'https://candymapperr2.com/',\n    prod: 'https://candymapper.com/'\n}\nbaseUrl = urls[env]\n   exports.config = {\n     // ... other configurations ...\n     baseUrl: baseUrl,\n     // ... other configurations ...\n   };\n```", "```js\nimport { config as sharedConfig } from './wdio.shared.conf'\nexport const config: WebdriverIO.Config = {\n    ...sharedConfig,\n    ...{\n        capabilities: [\n            {\n                browserName: 'chrome',\n                'goog:chromeOptions': {\n                    args: ['--disable-gpu']\n },\n      acceptInsecureCerts: true,\n      },\n      {\n       browserName: 'safari'\n      }\n      ]\n    }\n}\n```", "```js\nimport { config as sharedConfig } from './wdio.shared.conf';\nexport const config = {\n    ...sharedConfig,\n    ...{\n        services: [\n            [\"lambdatest\",\n                {\n                    tunnel: false,\n                    lambdatestOpts: {\n                        logFile: \"tunnel.log\"\n                    }\n                }\n            ]\n        ],\n        user: process.env.LT_USERNAME,\n        key: process.env.LT_ACCESS_KEY,\n        capabilities: [\n            {\n                \"LT:Options\": {\n                    browserName: \"Edge\",\n                    version: \"latest\",\n                    name: \"Test WebdriverIO Single\",\n                    build: \"WebDriver Selenium Sample\"\n                }\n            },\n        ],\n        logLevel: \"info\",\n        coloredLogs: true,\n        screenshotPath: \"./errorShots/\",\n        waitforTimeout: 100000,\n        connectionRetryTimeout: 90000,\n        connectionRetryCount: 1,\n        path: \"/wd/hub\",\n        hostname: process.env.LT_HOST_URL,\n        port: 80\n    }\n}\n```", "```js\n   // tests/ch13.spec.ts\n   describe('Cross-Environment Test', () => {\n     it('should open the website', () => {\n       browser.url('/');\n       const title = browser.getTitle();\n       expect(title).toContain('Example Domain');\n     });\n   });\n```", "```js\n   Env=uat wdio wdio.conf.ts --spec ./test/specs/ch13.ts\n   Env=dev wdio wdio.dev.conf.ts\n   Env=prod wdio wdio.prod.conf.ts\n   Env=uat wdio wdio.lambdatest.conf.ts --spec ./test/specs/ch13.ts\n```", "```js\nIf (process.platform === 'mac'){\n  // do something specific thats mac only\n} else {\n // contine as usual\n}\n```", "```js\nHelpers.clickIfExists(await this.btnNext);\n```", "```js\nexport async function clickAdv(element: WebdriverIO.Element, ifExists: boolean = false) {\n// isExist code branch here ...\n}\n```", "```js\nawait Helpers.clickAdv(this.btnNext, true); // may not exist\n```", "```js\nconst IF_EXISTS = \"IF_EXISTS\";\nexport async function clickAdvIfExists(element: WebdriverIO.Element) {\nABS(IF_EXISTS) = true;\nlet result = await this.clickAdv(element);\nASB(IF_EXISTS) = false;\nreturn result;\n}\n```", "```js\nexport async function getValidElement(\n  element: WebdriverIO.Element,\n  elementType: string\n): Promise<WebdriverIO.Element> {\n...\n  if (!found) {\n    ABS.set (\"ELEMENT_SELECTOR\") = element.selector)\n    await log(`  ERROR: Unable to find ${selector}`);\n  }\n  ASB.set (\"ELEMENT_EXISTS\") = found;\n  return newElement;\n}\n```", "```js\nif (ASB.get(\"ELEMENT_EXISTS\") == false){\nawait log(`  IfExist: Skipping clicking\n${ASB.get(\"ELEMENT_SELETOR\")}`);\nreturn true;\n}\n```", "```js\nawait Helpers.clickAdvIfExists(this.btnNext); // may not exist\n```", "```js\nexport async function setValueAdvIfExists(\nelement: WebdriverIO.Element),\ntext: string\n)\nABS(IF_EXISTS) = true;\nlet result = await this.setValueAdv(element, text);\nc;\nreturn result;\n}\nexport async function setValueAdv(\n  inputField: WebdriverIO.Element,\n  text: string\n) {\nIf (ABS(IF_EXISTS) == true)\nreturn true;\n}\n```", "```js\nexport async function selectAdvIfExists(\nelement: WebdriverIO.Element),\ntext: string\n)\nABS(IF_EXISTS) = true;\nlet result = await this.clickAdv(element);\nASB(IF_EXISTS) = false; // Reset for next element\nreturn result;\n}\n```"]