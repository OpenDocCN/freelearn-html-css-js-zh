- en: Managing States and Props
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we talked about reusability and how to publish apps
    on the internet. We also looked into slots and how they can be helpful in extending
    our Web Components.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look into state management. State management lets you
    keep track of the state a Web Component is in. It is a very useful technique.
    We will also be looking into attributes to create even better Web Components.
    We have been using attributes since [Chapter 2](1a17ddb1-2db0-4704-80ca-d1b1b452028a.xhtml), *Web
    Components Life Cycle Callback Methods*. But in this chapter, we will look at
    it from a state management perspective. Then we will be looking into events and
    event management and how these events can be used to notify users of a Web Component's
    state.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to State management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing attributes and properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to state management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Anything that can be used to manage the state of a **User Interface** (**UI**)
    can be considered as state management. And we see examples of state management
    in almost every site that we use on a daily basis. You use Gmail or any other
    email service. And emails have a state of *read* or *unread*. If you are playing
    a song on Spotify, the song that you are listening to has a state of *liked* or
    *not liked*. Based on these states, the UI can be shown in a different manner.
  prefs: []
  type: TYPE_NORMAL
- en: Web Components follow a similar approach. We can use a variable inside our Web
    Component to keep track of the state. Let's say that we want to create a Web Component
    that tells the user whether the device that the user is using is online or not.
    So, the state here will be `isOnline` and its value could be either `online` or
    `offline`. So let's begin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s call this component `<online-checker>`, and let''s say its state is
    managed by an internal variable `_isOnline`. The definition of this component
    would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are setting the initial value of `_isOnline` to `false`, because we
    do not know whether we are online or not.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `render()` method is the same as our previous examples, nothing special.
    The special part is the `getTemplate()` method. Here, we are adding a class `online-true`
    or `online-false` based on the `_isOnline` variable. We are also adding the text
    `online` or `offline` based on the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `getStyle()` method looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The class `.online-true` shows a green circle and `.online-false` shows a red
    color.
  prefs: []
  type: TYPE_NORMAL
- en: 'We still have not added the code to check whether the browser is online or
    not. So let''s add it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using `connectedCallback()` to see whether we are online or not.
    We are using `connectedCallback()` because we want to make sure that this code
    triggers when the Web Component is on the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `get isOnline()` and `set isOnline()` methods create a property for the
    component that can be used outside of the component. So, say you have code that
    looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will return `true` or `false`, based on the `isOnline` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we are keeping a track of the online or offline state of the browser inside
    the `_isOnline` variable and making this value available with the help of the `isOnline`
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae36e608-5120-40ea-81da-344645758e14.png)'
  prefs: []
  type: TYPE_IMG
- en: This is a very small introduction to properties inside Web Components as well.
    We will be looking at more examples in the coming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes and properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have been playing around with attributes since the first chapter. And we
    did get a brief overview of properties and how they can work along with state
    management to provide a more complete Web Component.
  prefs: []
  type: TYPE_NORMAL
- en: 'But what is the exact difference between the two? If you are a frontend developer,
    you must have created a form in your career. We will be looking at an example
    of an `<input>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you look at it carefully, we have an attribute called `value` giving it
    some default value. So if you want to get the value of this `<input>` tag, you
    can get it by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'So, you are directly referencing the attribute for this `<input>` tag to get
    the value. But there is another way in which you can get this value. And that
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This time, we are grabbing the value from the property `value` of the `<input>`
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: Now the question is, what is the difference? The difference is whether to show
    it in an attribute or not. There will always be a value that you might not want
    to show to the HTML code. It may be too long, such as a playlist in a music player
    Web Component, where the list contains a JSON-style data structure of song names
    and URLs, or a tax ID number like SSN in a tax registration component, where the
    data is too sensitive to be put as an attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to look at this with the help of an example. Let''s say we have
    a Web Component called `<student-list>` where we have an input field that is used
    to enter student names and a button that lets you add students to the student
    list. This is what the component looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are managing the student list inside the `_list` variable. The rest
    is the same as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have an input field, a button, and a `div student-list__student-list`
    to put our students in the form of a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This `getStudents()` method shows the students by running over the `_list`
    variable that we declared in the `constructor()` method. Let''s take a look at
    our styles before we move on to other sections of this Web Component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s basic CSS, nothing complex. Now, let''s add an event listener to our
    button so that it can add the students to our `_list` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are adding a click event listener to the button `.js-addButton`. When
    a user clicks on the button, it grabs the value of the input field, and pushes
    it to our `_list` variable. After that, we are simply re-rending the list; in
    other words, rather than setting the inner HTML of our component again from scratch,
    we are simply changing the HTML of the section that needs to be updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'But what if the user wants to see the student list, or grab it from the component?
    For this, let''s add a property `students` for our user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This way, the user can get the student list by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This would give the user all the students that have been added in the form
    of an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bebccfb1-3769-4f86-9155-bf03de5f54f0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'But now you must be thinking, what if we were to make this available in the
    attributes? The answer is yes, we can do that. We can update our `handleAdd()`
    method to something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will make the list available in an attribute called `students`. But this
    is what the attribute will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a3311e8-d22c-42c6-8edd-0601530b4d2d.png)'
  prefs: []
  type: TYPE_IMG
- en: Do you really want your users to manually parse a string to get an array? What
    if this data was a little bit more complex? Would the user know what needs to
    be parsed? In order to solve these complications, we use properties.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this use case will help you decide what to put in properties and what
    to put in attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Event handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Till now, we have only looked into button-click events inside our Web Components.
    This section deals with event handlers from a different perspective.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we have a Web Component `<custom-clicker>` that has a button and
    a number that shows the number of times that button has been clicked. Let''s take
    a look at the definition of this Web Component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We are setting the value of `_num` to `0`. The rest is the same as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `render()` and `getTemplate()` methods are pretty much the same as well.
    We are simply showing text that is obtained via the `getTimesClicked()` method
    and a button that says **Click Me**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are simply getting the value of `_num` and adding informational text.
    The `getStyle()` method looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We also want to increase the value of `_num` when the user clicks on the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We are simply calling the `handleClick()` method when the user clicks on the
    button. Then we are simply adding 1 to this `_num` variable and updating the `.custom-clicker__num`
    `div`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we want to let our user know the value when this button is clicked. We
    can do so with the help of a custom event. We can do so with the help of `dispatchEvent()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This notifies the listener to a change in the `num` variable and can be listened
    by the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We can do anything we want with the `e.detail.num` variable.
  prefs: []
  type: TYPE_NORMAL
- en: This way, we can add any number of custom events to notify the user of any changes
    to the Web Component. The information that needs to be passed on can be put in
    the `detail` object.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked into various aspects of state management. We went
    over how attributes and properties can be used to enhance a Web Component. Lastly,
    we created custom events for our Web Components.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be creating a full fledged single page web app
    using all the concepts we have learned till now. We will be creating page level
    Web Components, implement routing and much more.
  prefs: []
  type: TYPE_NORMAL
