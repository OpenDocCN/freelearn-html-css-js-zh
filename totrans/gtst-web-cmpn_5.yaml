- en: Managing States and Props
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理状态和属性
- en: In the previous chapter, we talked about reusability and how to publish apps
    on the internet. We also looked into slots and how they can be helpful in extending
    our Web Components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了可重用性和如何将应用程序发布到互联网上。我们还探讨了插槽以及它们如何有助于扩展我们的 Web 组件。
- en: In this chapter, we will look into state management. State management lets you
    keep track of the state a Web Component is in. It is a very useful technique.
    We will also be looking into attributes to create even better Web Components.
    We have been using attributes since [Chapter 2](1a17ddb1-2db0-4704-80ca-d1b1b452028a.xhtml), *Web
    Components Life Cycle Callback Methods*. But in this chapter, we will look at
    it from a state management perspective. Then we will be looking into events and
    event management and how these events can be used to notify users of a Web Component's
    state.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨状态管理。状态管理让您能够跟踪 Web 组件所处的状态。这是一个非常有用的技术。我们还将探讨属性，以创建更好的 Web 组件。我们自从
    [第 2 章](1a17ddb1-2db0-4704-80ca-d1b1b452028a.xhtml)，“Web 组件生命周期回调方法”以来一直在使用属性。但在本章中，我们将从状态管理的角度来探讨它。然后我们将探讨事件和事件管理，以及这些事件如何用来通知用户
    Web 组件的状态。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to State management
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态管理的介绍
- en: Managing attributes and properties
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理属性和属性
- en: Event handling
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件处理
- en: Introduction to state management
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态管理的介绍
- en: Anything that can be used to manage the state of a **User Interface** (**UI**)
    can be considered as state management. And we see examples of state management
    in almost every site that we use on a daily basis. You use Gmail or any other
    email service. And emails have a state of *read* or *unread*. If you are playing
    a song on Spotify, the song that you are listening to has a state of *liked* or
    *not liked*. Based on these states, the UI can be shown in a different manner.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可以用来管理用户界面（**UI**）状态的东西都可以被认为是状态管理。我们在我们每天使用的几乎每个网站上都能看到状态管理的例子。你使用 Gmail
    或任何其他电子邮件服务。电子邮件有“已读”或“未读”的状态。如果你在 Spotify 上播放歌曲，你正在听的歌曲有“喜欢”或“不喜欢”的状态。基于这些状态，UI
    可以以不同的方式显示。
- en: Web Components follow a similar approach. We can use a variable inside our Web
    Component to keep track of the state. Let's say that we want to create a Web Component
    that tells the user whether the device that the user is using is online or not.
    So, the state here will be `isOnline` and its value could be either `online` or
    `offline`. So let's begin.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Web 组件采用类似的方法。我们可以在 Web 组件内部使用一个变量来跟踪状态。假设我们想要创建一个 Web 组件，用来告诉用户他们所使用的设备是否在线。那么，这里的状态将是
    `isOnline`，其值可以是 `online` 或 `offline`。那么，让我们开始吧。
- en: 'Let''s call this component `<online-checker>`, and let''s say its state is
    managed by an internal variable `_isOnline`. The definition of this component
    would look something like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们称这个组件为 `<online-checker>`，并且假设它的状态由一个内部变量 `_isOnline` 管理。这个组件的定义可能看起来像这样：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we are setting the initial value of `_isOnline` to `false`, because we
    do not know whether we are online or not.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将 `_isOnline` 的初始值设置为 `false`，因为我们不知道我们是否在线。
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `render()` method is the same as our previous examples, nothing special.
    The special part is the `getTemplate()` method. Here, we are adding a class `online-true`
    or `online-false` based on the `_isOnline` variable. We are also adding the text
    `online` or `offline` based on the same.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`render()` 方法与我们的前例相同，没有什么特别之处。特别之处在于 `getTemplate()` 方法。在这里，我们根据 `_isOnline`
    变量添加一个类 `online-true` 或 `online-false`。我们也在相同的基础上添加文本 `online` 或 `offline`。'
- en: 'The `getStyle()` method looks something like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`getStyle()` 方法看起来像这样：'
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The class `.online-true` shows a green circle and `.online-false` shows a red
    color.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 类 `.online-true` 显示一个绿色圆圈，而 `.online-false` 显示红色。
- en: 'We still have not added the code to check whether the browser is online or
    not. So let''s add it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有添加检查浏览器是否在线的代码。所以，让我们添加它：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we are using `connectedCallback()` to see whether we are online or not.
    We are using `connectedCallback()` because we want to make sure that this code
    triggers when the Web Component is on the page.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `connectedCallback()` 来查看我们是否在线。我们使用 `connectedCallback()` 是因为我们想要确保这段代码在
    Web 组件在页面上时触发。
- en: 'The `get isOnline()` and `set isOnline()` methods create a property for the
    component that can be used outside of the component. So, say you have code that
    looks something like this:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`get isOnline()` 和 `set isOnline()` 方法为组件创建了一个属性，可以在组件外部使用。所以，假设你有这样的代码：'
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will return `true` or `false`, based on the `isOnline` property.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这将根据`isOnline`属性返回`true`或`false`。
- en: 'So, we are keeping a track of the online or offline state of the browser inside
    the `_isOnline` variable and making this value available with the help of the `isOnline`
    property:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在`_isOnline`变量中跟踪浏览器的在线或离线状态，并通过`isOnline`属性提供这个值：
- en: '![](img/ae36e608-5120-40ea-81da-344645758e14.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ae36e608-5120-40ea-81da-344645758e14.png)'
- en: This is a very small introduction to properties inside Web Components as well.
    We will be looking at more examples in the coming sections.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对Web组件内部属性的一个非常简单的介绍。我们将在接下来的章节中查看更多示例。
- en: Attributes and properties
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性和属性
- en: We have been playing around with attributes since the first chapter. And we
    did get a brief overview of properties and how they can work along with state
    management to provide a more complete Web Component.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从第一章开始就在玩弄属性了。我们也简要概述了属性以及它们如何与状态管理一起工作，以提供更完整的Web组件。
- en: 'But what is the exact difference between the two? If you are a frontend developer,
    you must have created a form in your career. We will be looking at an example
    of an `<input>` tag:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但这两者之间究竟有什么确切的区别呢？如果你是一名前端开发者，在你的职业生涯中一定创建过表单。我们将通过一个例子来查看一个`<input>`标签：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you look at it carefully, we have an attribute called `value` giving it
    some default value. So if you want to get the value of this `<input>` tag, you
    can get it by using the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细看，我们会发现有一个名为`value`的属性给它赋予了一些默认值。所以如果你想获取这个`<input>`标签的值，你可以使用以下代码来获取它：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So, you are directly referencing the attribute for this `<input>` tag to get
    the value. But there is another way in which you can get this value. And that
    is as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你直接引用这个`<input>`标签的属性来获取值。但还有一种方法可以获取这个值。如下所示：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This time, we are grabbing the value from the property `value` of the `<input>`
    tag.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们从`<input>`标签的`value`属性中获取值。
- en: Now the question is, what is the difference? The difference is whether to show
    it in an attribute or not. There will always be a value that you might not want
    to show to the HTML code. It may be too long, such as a playlist in a music player
    Web Component, where the list contains a JSON-style data structure of song names
    and URLs, or a tax ID number like SSN in a tax registration component, where the
    data is too sensitive to be put as an attribute.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的问题是，区别在哪里？区别在于是否将其显示为属性。总会有一些你可能不希望显示在HTML代码中的值。它可能太长了，比如音乐播放器Web组件中的播放列表，其中列表包含歌曲名称和URL的JSON风格数据结构，或者像税务注册组件中的税务ID号（如SSN），其中数据过于敏感，不适合作为属性。
- en: 'Let''s try to look at this with the help of an example. Let''s say we have
    a Web Component called `<student-list>` where we have an input field that is used
    to enter student names and a button that lets you add students to the student
    list. This is what the component looks like:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来尝试理解这一点。假设我们有一个名为`<student-list>`的Web组件，其中包含一个用于输入学生姓名的输入字段和一个允许你将学生添加到学生列表中的按钮。这个组件看起来是这样的：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we are managing the student list inside the `_list` variable. The rest
    is the same as usual:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在`_list`变量中管理学生列表。其余的与平常一样：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see, we have an input field, a button, and a `div student-list__student-list`
    to put our students in the form of a list:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们有一个输入字段、一个按钮，以及一个`div student-list__student-list`来将我们的学生以列表的形式放入表单中：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This `getStudents()` method shows the students by running over the `_list`
    variable that we declared in the `constructor()` method. Let''s take a look at
    our styles before we move on to other sections of this Web Component:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`getStudents()`方法通过运行我们在`constructor()`方法中声明的`_list`变量来显示学生。在我们继续这个Web组件的其他部分之前，让我们看看我们的样式：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'It''s basic CSS, nothing complex. Now, let''s add an event listener to our
    button so that it can add the students to our `_list` variable:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是基本的CSS，没有什么复杂的。现在，让我们给我们的按钮添加一个事件监听器，以便它可以将学生添加到我们的`_list`变量中：
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we are adding a click event listener to the button `.js-addButton`. When
    a user clicks on the button, it grabs the value of the input field, and pushes
    it to our `_list` variable. After that, we are simply re-rending the list; in
    other words, rather than setting the inner HTML of our component again from scratch,
    we are simply changing the HTML of the section that needs to be updated.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们给 `.js-addButton` 按钮添加了一个点击事件监听器。当用户点击按钮时，它会获取输入字段的值，并将其推送到我们的 `_list`
    变量。之后，我们只是重新渲染列表；换句话说，我们不是从头开始设置组件的内部 HTML，而是简单地更改需要更新的部分的 HTML。
- en: 'But what if the user wants to see the student list, or grab it from the component?
    For this, let''s add a property `students` for our user:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果用户想查看学生列表或从组件中获取它呢？为此，让我们为我们的用户添加一个名为 `students` 的属性：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This way, the user can get the student list by using the following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，用户可以通过以下代码获取学生列表：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This would give the user all the students that have been added in the form
    of an array:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用数组的形式向用户展示所有已添加的学生：
- en: '![](img/bebccfb1-3769-4f86-9155-bf03de5f54f0.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bebccfb1-3769-4f86-9155-bf03de5f54f0.png)'
- en: 'But now you must be thinking, what if we were to make this available in the
    attributes? The answer is yes, we can do that. We can update our `handleAdd()`
    method to something like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在你可能正在想，如果我们想将这个功能放在属性中会怎样？答案是肯定的，我们可以做到。我们可以更新我们的 `handleAdd()` 方法，使其类似于以下内容：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This will make the list available in an attribute called `students`. But this
    is what the attribute will look like:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使列表在名为 `students` 的属性中可用。但这个属性看起来是这样的：
- en: '![](img/1a3311e8-d22c-42c6-8edd-0601530b4d2d.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a3311e8-d22c-42c6-8edd-0601530b4d2d.png)'
- en: Do you really want your users to manually parse a string to get an array? What
    if this data was a little bit more complex? Would the user know what needs to
    be parsed? In order to solve these complications, we use properties.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你真的想让用户手动解析字符串来获取一个数组吗？如果这个数据更复杂一点呢？用户知道需要解析什么吗？为了解决这些复杂问题，我们使用属性。
- en: I hope this use case will help you decide what to put in properties and what
    to put in attributes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这个用例能帮助你决定在属性中放置什么，在属性中放置什么。
- en: Event handling
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理
- en: Till now, we have only looked into button-click events inside our Web Components.
    This section deals with event handlers from a different perspective.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只关注了 Web 组件内部的按钮点击事件。本节从不同的角度处理事件处理器。
- en: 'Let''s say we have a Web Component `<custom-clicker>` that has a button and
    a number that shows the number of times that button has been clicked. Let''s take
    a look at the definition of this Web Component:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个 Web 组件 `<custom-clicker>`，它有一个按钮和一个显示按钮被点击次数的数字。让我们看看这个 Web 组件的定义：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We are setting the value of `_num` to `0`. The rest is the same as usual:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 `_num` 的值设置为 `0`。其余的与平常一样：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `render()` and `getTemplate()` methods are pretty much the same as well.
    We are simply showing text that is obtained via the `getTimesClicked()` method
    and a button that says **Click Me**:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`render()` 和 `getTemplate()` 方法几乎相同。我们只是展示了通过 `getTimesClicked()` 方法获取的文本以及一个写着
    **点击我** 的按钮：'
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here, we are simply getting the value of `_num` and adding informational text.
    The `getStyle()` method looks something like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们只是获取 `_num` 的值并添加一些信息性文本。`getStyle()` 方法看起来像这样：
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We also want to increase the value of `_num` when the user clicks on the button:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望当用户点击按钮时增加 `_num` 的值：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We are simply calling the `handleClick()` method when the user clicks on the
    button. Then we are simply adding 1 to this `_num` variable and updating the `.custom-clicker__num`
    `div`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击按钮时，我们只是调用 `handleClick()` 方法。然后我们简单地将 `_num` 变量加 1 并更新 `.custom-clicker__num`
    `div`。
- en: 'Now, we want to let our user know the value when this button is clicked. We
    can do so with the help of a custom event. We can do so with the help of `dispatchEvent()`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们想让用户知道按钮被点击时的值。我们可以通过自定义事件来实现这一点，使用 `dispatchEvent()`：
- en: '[PRE21]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This notifies the listener to a change in the `num` variable and can be listened
    by the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这会通知监听器 `num` 变量的变化，并且可以通过以下代码进行监听：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Alternatively, we can use the following code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用以下代码：
- en: '[PRE23]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We can do anything we want with the `e.detail.num` variable.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用 `e.detail.num` 变量做任何我们想做的事情。
- en: This way, we can add any number of custom events to notify the user of any changes
    to the Web Component. The information that needs to be passed on can be put in
    the `detail` object.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们可以添加任意数量的自定义事件来通知用户Web组件的任何变化。需要传递的信息可以放在`detail`对象中。
- en: Summary
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked into various aspects of state management. We went
    over how attributes and properties can be used to enhance a Web Component. Lastly,
    we created custom events for our Web Components.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了状态管理的各个方面。我们讨论了如何使用属性和属性来增强Web组件。最后，我们为我们的Web组件创建了自定义事件。
- en: In the next chapter, we will be creating a full fledged single page web app
    using all the concepts we have learned till now. We will be creating page level
    Web Components, implement routing and much more.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用到目前为止所学到的所有概念创建一个完整的单页Web应用。我们将创建页面级别的Web组件，实现路由以及更多功能。
