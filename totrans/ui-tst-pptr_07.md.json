["```js\n<head>\n<title>The Rock (1996)</title>\n<meta property=\"og:title\" content=\"The Rock\" />\n<meta property=\"og:type\" content=\"video.movie\" />\n<meta property=\"og:url\" content=\"https://www.imdb.com/title/tt0117500/\" />\n<meta property=\"og:image\" content=\"https://ia.media-imdb.com/images/rock.jpg\" />\n</head>\n```", "```js\nconst browser = await puppeteer.launch({headless: false, defaultViewport: null});\nconst page = await browser.newPage();\nawait page.goto('https://www.packtpub.com/');\nawait page.screenshot({ path: 'normal-only-viewport.png'});\nawait page.screenshot({ path: 'full-page.png', fullPage: true});\nawait page.screenshot({ \n    path: 'clip.png', \n    clip: { \n        x: 300, \n        y: 150, \n        width: 286, \n        height: 64\n    }\n});\nconst firstBook = await page.$('.tombstone');\nawait firstBook.screenshot({ path: 'first-book.png'});\n```", "```js\nit ('Should visually match', async() => {\n  const target = differencify.init({ \n    chain: false, \n    testName: 'Home' });\n  await target.launch();\n  const page = await target.newPage();\n  await page.setViewport({ width: 1600, height: 1200 });\n  await page.goto(config.baseURL);\n  const image = await page.screenshot();\n  const result = await target.toMatchSnapshot(image);\n  await page.close();\n  await target.close();\n  expect(result).to.be.true;\n});\n```", "```js\n.navbar-btn {\n  color: blue;\n}\n```", "```js\n  1) Home Page\n       Should visually match:\n      AssertionError: expected false to be true\n      + expected - actual\n      -false\n      +true\n```", "```js\n<html>\n    <head>\n        <style>\n            body {\n                color: blue;\n                font-size: 16px;\n            }\n            @media print {\n                body{\n                    color: black;\n                    font-size: 32px;\n                }\n            }\n        </style>\n    </head>\n    <body>\n        Hello world;\n    </body>\n</html>\n```", "```js\npage.emulateMediaType('screen')\n```", "```js\nconst browser = await puppeteer.launch({\n    headless: true,\n    defaultViewport: null});\nconst page = await browser.newPage();\nawait page.goto('https://www.wikipedia.org/');\nawait page.pdf({\n    path: './headers.pdf',\n    printBackground : true,\n    displayHeaderFooter : true,\n    headerTemplate: `\n        <span style=\"font-size: 12px;\">\n            This is a custom PDF for \n            <span class=\"title\"></span> (<span class=\"url\"></span>)\n        </span>`,\n    footerTemplate: `\n        <span style=\"font-size: 12px;\">\n            Generated on: <span class=\"date\"></span><br/>\n            Pages <span class=\"pageNumber\"></span> of <span class=\"totalPages\"></span>\n        </span>`,\n    margin:{ \n        top:'100px', \n        bottom: '100px'\n    }\n});\nawait browser.close();\n```", "```js\nconst puppeteer = require('puppeteer');\nconst content = require('./contentdb');\n(async () => {\n    const browser = await puppeteer.launch({\n    headless: true,\n    defaultViewport: null});\n    const page = await browser.newPage();\n    await page.setContent(content.socialPostTemplate);\n    await page.screenshot({path:'fromhtml.png'});\n    await browser.close();\n})();\n```", "```js\nawait page.addStyleTag({\n    content : `\n    .search-input {\n        display: none !important;\n    }`\n});\nawait page.pdf({…});\n```"]