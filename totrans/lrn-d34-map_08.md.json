["```js\n<canvas id=”main-canvas” width = “600” height=”400”></canvas>\n```", "```js\nvar canvas = d3.select('#main-canvas').node();\nvar context = canvas.getContext('2d');\n\ncontext.fillStyle = 'royalblue';\ncontext.fillRect(50, 50, 200, 100);\n```", "```js\ncontext.strokeStyle = '#CCCCCC';\ncontext.strokeRect(0, 0, canvas.width, canvas.height);\n```", "```js\ncontext.fillStyle = 'royalblue';\ncontext.fillRect(50, 150, 200, 100);\n```", "```js\ncontext.fillStyle = 'rgba(255, 255, 255, 0.9)';\ncontext.fillRect(60, 190, 40, 60);\n```", "```js\ncontext.save();\ncontext.translate(140, 190);\ncontext.fillRect(0, 0, 60, 30);\ncontext.restore();\n```", "```js\ncontext.translate(140, 190);\ncontext.fillRect(0, 0, 60, 30);\ncontext.translate(-140, -190);\n```", "```js\ncontext.beginPath();\ncontext.moveTo(50, 150);\ncontext.lineTo(250, 150);\ncontext.lineTo(50+200/2, 100); // you can use calculations as inputs!\ncontext.closePath();\ncontext.fillStyle = '#A52A2A';\ncontext.fill();\n```", "```js\ncontext.beginPath();\ncontext.lineWidth = 10;\ncontext.strokeStyle = 'brown'\ncontext.moveTo(300, 250);\ncontext.lineTo(300, 200);\ncontext.stroke();\n\ncontext.beginPath();\ncontext.fillStyle = 'green';\ncontext.arc(300, 175, 25, 0, Math.PI * 2);\ncontext.fill();\n```", "```js\ncontext.beginPath();\n// configure your path here\ncontext.stroke();\n\ncontext.beginPath();\n// configure your path here\ncontext.fill();\n```", "```js\nvar canvas = d3.select('#main-canvas').node();  // set up\nvar context = canvas.getContext('2d');\n\nvar rain = { }                                  // produce data\nd3.interval(function() {\n    update();                                   // update/process the data\n    animate();                                  // re-draw the canvas\n}, 10);                                         \n```", "```js\nvar rain = {\n    items: [],\n    maxDrops: 200,\n    getDrop: function() {\n      var obj = {};\n      obj.xStart = Math.floor(Math.random() * canvas.width);\n      obj.yStart = Math.floor(Math.random() * -canvas.height);\n      obj.x = null;\n      obj.y = null;\n      obj.speed = Math.round(Math.random() * 2) + 5;\n\n      return obj;\n    },\n    updateDrop: // see below\n    }\n```", "```js\nfunction update() {\n  if (!rain.items.length) {\n    d3.range(rain.maxDrops).forEach(function(el) {\n      var drop = rain.getDrop(el);\n      rain.updateDrop(drop);\n      rain.items.push(drop);\n    });\n  } else {\n    rain.items.forEach(function(el) {\n      rain.updateDrop(el);\n    });\n  }\n}\n```", "```js\nupdateDrop: function(drop) {\n  drop.x = drop.x === null ? drop.xStart : drop.x;\n  drop.y = drop.y === null ? drop.yStart : drop.y + drop.speed;\n  drop.y = drop.y > canvas.height ? drop.yStart : drop.y;\n}\n```", "```js\nfunction animate() {\n  context.clearRect(0, 0, canvas.width, canvas.height);     \n  drawScene();\n  rain.items.forEach(function(el) {\n    circle(context, el.x, el.y, 1.5, 'blue');\n  });\n}\n```", "```js\nfunction circle(ctx, x, y, r, color) {\n  ctx.beginPath();\n  ctx.fillStyle = color;\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\n  ctx.fill();\n}\n```", "```js\ndatabind(data) {\n  // Bind data to custom elements.\n}\ndraw() {\n  // Draw the elements on the canvas.\n}\n```", "```js\nvar customBase = document.createElement('custom')\nvar custom = d3.select(customBase);\n```", "```js\nfunction databind(data) { }\n```", "```js\n    var join = custom.selectAll('custom.drop')\n        .data(data, function(d) { return d.currentIndex; });\n```", "```js\nvar enter = join\n  .enter().append('custom')\n    .attr('class', 'drop')\n    .attr('cx', function(d) { return d.xCloud; })\n    .attr('cy', function(d) { return d.yCloud; })\n    .attr('r', function(d) { return d.radiusCloud; })\n    .attr('fillStyle', 'rgba(0, 0, 255, 0')\n  .transition().delay(function(d, i) { return i * 2; })\n    .attr('fillStyle', 'rgba(0, 0, 255, 0.2');\n```", "```js\n.style('color', 'rgba(0, 0, 255, 0.2')\n```", "```js\nvar update = join\n  .transition()\n    .duration(function() { return Math.random() * 1000 + 900; })\n    .delay(function(d,i) { return (i / data.length) * dur; })\n    .ease(d3.easeLinear)\n    .attr('cx', function(d) { return d.xPuddle; })\n    .attr('cy', function(d) { return d.yPuddle; })\n    .attr('r', function(d) { return d.radiusPuddle; })\n    .attr('fillStyle', '#0000ff');\n\nvar exit = join\n  .exit().transition()\n    .duration(dur)\n    .delay(function(d,i) { return i ; })\n    .attr('r', function(d) { return d.radiusGrass; })\n    .attr('fillStyle', '#01A611');\n```", "```js\nfunction draw(ctx) {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  drawRainScene();\n  drawScene();\n\n  var elements = custom.selectAll('custom.drop');\n  elements.each(function(d, i) {\n    var node = d3.select(this);\n    ctx.save();\n    ctx.beginPath();\n    ctx.globalCompositeOperation = 'source-atop'\n    ctx.fillStyle = node.attr('fillStyle');\n    ctx.arc(node.attr('cx'), node.attr('cy'), node.attr('r'), 0, 2 *\n    Math.PI);\n    ctx.fill();\n    ctx.restore();\n  });\n```", "```js\ndatabind(raindata);\ndraw(context);\n```", "```js\ndatabind(data);\nvar t = d3.timer(function(elapsed) {\n  draw(context);\n   if (elapsed > dur * 2) t.stop();\n});\n```"]