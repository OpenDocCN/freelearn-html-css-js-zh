["```js\nimport React from 'react';\nexport function CoupledSelect({ selectedOption, options,\n  onChange }) {\n  const onChangeHandler = (event) => {\n    if (onChange) onChange(event.target.value);\n  };\n}\n```", "```js\nimport React from 'react';\nexport function CoupledSelect({ selectedOption, options,\n  onChange }) {\n  const onChangeHandler = (event) => {\n    if (onChange) onChange(event.target.value);\n  };\n  return <select onChange={onChangeHandler}\n    value={selectedOption}></select>;\n}\n```", "```js\nexport function CoupledSelect({ selectedOption, options,\n  onChange }) {\n  // no change to onChangeHandler\n  return (\n    <select onChange={onChangeHandler}\n      value={selectedOption}>\n      {options.map((option) => (\n        <option value={option} key={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  );\n}\n```", "```js\nconst options = [\n  { value: 'apple' },\n  { value: 'pear' },\n  { value: 'orange' },\n  { value: 'grape' },\n  { value: 'banana' },\n];\n```", "```js\nfunction App() {\n  return (\n    <>\n      <CoupledSelect\n        options={options.map((option) => option.value)}\n      />\n    <>\n  );\n}\n```", "```js\nfunction App() {\n  const [selectedOption, setSelectedOption] = useState();\n  return (\n    <>\n      <p>Selected Option: {selectedOption}</p>\n      <CoupledSelect\n        selectedOption={selectedOption}\n        onChange={(selectedOption) => setSelectedOption\n          (selectedOption)}\n        options={options.map((option) => option.value)}\n      />\n    <>\n  );\n}\n```", "```js\nfunction App() {\n  const [selectedOption, setSelectedOption] = useState\n    (options[3].value);\n  // no change to the returned JSX\n}\n```", "```js\n<CoupledSelect\n  {/* other props don't change */}\n  options={options.map((option) => `Fruit:\n     ${option.value}`)}\n/>\n```", "```js\nexport function SelectRenderProps({\n  selectedOption,\n  options,\n  renderOption,\n  onChange,\n}) {\n  const onChangeHandler = (event) => {\n    if (onChange) onChange(event.target.value);\n  };\n  return (\n    <select onChange={onChangeHandler} value=\n      {selectedOption}>\n      {options.map((option) => renderOption(option))}\n    </select>\n  );\n}\n```", "```js\nfunction App() {\n  return (\n    <SelectRenderProps\n      selectedOption={selectedOption}\n      onChange={(selectedOption) => setSelectedOption\n        (selectedOption)}\n      options={options.map((option) => option.value)}\n      renderOption={(option) => (\n        <option value={option} key={option}>\n          {option}\n        </option>\n      )}\n    />\n  );\n}\n```", "```js\n<SelectRenderProps\n  {/* rest of the props remain unchanged */}\n  renderOption={(option) => (\n    <option value={option} key={option}>\n      Fruit: {option}\n    </option>\n  )}\n/>\n```", "```js\nimport { Formik } from 'formik';\nexport function FormikIntegrationExample() {\n  return (\n    <Formik\n      initialValues={{ name: '' }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <fieldset>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.name}\n              aria-required=\"true\"\n            />\n          </fieldset>\n        </form>\n      )}\n    </Formik>\n  );\n}\n```", "```js\nimport { Formik } from 'formik';\nexport function FormikIntegrationExample() {\n  return (\n    <Formik\n      initialValues={{ name: '' }}\n      validate={(values) => {\n        const errors = {};\n        if (!values.name) {\n          errors.name = 'Required';\n        } else if (values.name.length < 2) {\n          errors.name = 'Name too short';\n        }\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      }}\n    >\n      {({\n        /* no change to props in render prop */\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <fieldset>\n            <div>\n              <label htmlFor=\"name\">\n                Name (Required)\n                <br />\n                {errors.name && touched.name ? (\n                  <>Error: {errors.name}</>\n                ) : (\n                  <>&nbsp;</>\n                )}\n              </label>\n            </div>\n            {/* no change to the input */}\n          </fieldset>\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    </Formik>\n  );\n}\n```", "```js\nconst location = {\n  href: window.location.href,\n  origin: window.location.origin,\n};\nexport function withLocation(Component) {\n  return (props) => {\n    return <Component location={location} {...props} />;\n  };\n}\n```", "```js\n// in `location.jsx` file\nfunction Location({ location }) {\n  return (\n    <>\n      location.href: {location.href}, location.origin:\n        {location.origin}\n    </>\n  );\n}\nexport default withLocation(Location);\n```", "```js\nimport Location from './location';\nfunction App() {\n  return <Location>;\n}\n```", "```js\nconst ConnectedComponent = withRouter(\n  withHttpClient(withAnotherDependency\n    (ComponentWithDependencies))\n);\n```", "```js\nimport React from 'react';\nexport class BasketItemsClassical extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      basketSession: {},\n    };\n  }\n```", "```js\nexport class BasketItemsClassical extends React.Component {\n  // no change to the constructor\n  componentDidMount() {\n    this.props.httpClient\n      .get(`https://fakestoreapi.com/carts/${this.props.basketId}`)\n      .then((session) => this.setBasketSession(session));\n  }\n  setBasketSession(session) {\n    this.setState({ basketSession: session });\n  }\n}\n```", "```js\nexport class BasketItemsClassical extends React.Component {\n  // no change to the constructor, componentDidMount or\n     setBasketSession\n  render() {\n    return <pre>{JSON.stringify(this.state.basketSession,\n      null, 2)}</pre>;\n  }\n}\n```", "```js\nexport function BasketClassical({ basketId, httpClient }) {\n  return (\n    <form>\n      <fieldset>\n        <label>Class</label>\n        <BasketItemsClassical basketId={basketId}\n           httpClient={httpClient} />\n      </fieldset>\n    </form>\n  );\n}\n```", "```js\nconst httpClient = {\n  async get(url) {\n    const response = await fetch(url);\n    return await response.json();\n  },\n};\nfunction App() {\n  return (\n    <>\n      <BasketClassical basketId=\"5\" httpClient={httpClient} />\n    </>\n  );\n}\n```", "```js\nexport function BasketItemsHooks({ basketId, httpClient }) {\n  const [basketSession, setBasketSession] = useState({});\n  useEffect(() => {\n    httpClient\n      .get(`https://fakestoreapi.com/carts/${basketId}`)\n      .then((session) => setBasketSession(session));\n  }, []);\n  return <pre>{JSON.stringify(basketSession, null, 2)}</pre>;\n}\n```", "```js\nexport function BasketHooks({ basketId, httpClient }) {\n  return (\n    <form>\n      <fieldset>\n        <label>Hooks</label>\n        <BasketItemsHooks basketId={basketId}\n          httpClient={httpClient} />\n      </fieldset>\n    </form>\n  );\n}\n```", "```js\n// no change to httpClient\nfunction App() {\n  return (\n    <>\n      <BasketClassical basketId=\"5\" httpClient={httpClient} />\n      <BasketHooks basketId=\"5\" httpClient={httpClient} />\n    </>\n  );\n}\n```", "```js\nimport React, { createContext } from 'react';\nconst HttpClientContext = createContext(null);\nexport function HttpClientProvider({ httpClient, children\n  }) {\n  return (\n    <HttpClientContext.Provider value={httpClient}>\n      {children}\n    </HttpClientContext.Provider>\n  );\n}\n```", "```js\nexport const HttpClientConsumer = HttpClientContext.Consumer;\n```", "```js\n// no change to httpClient\nfunction App() {\n  return (\n    <HttpClientProvider httpClient={httpClient}>\n      {/* what's below could be however deep in the\n          component tree */}\n      <HttpClientConsumer>\n        {(httpClient) => (\n          <BasketItemsClassical basketId=\"5\" httpClient=\n           {httpClient} />\n        )}\n      </HttpClientConsumer>\n    </HttpClientProvider>\n  );\n}\n```", "```js\nexport function withHttpClient(Component) {\n  return (props) => (\n    <HttpClientConsumer>\n      {(httpClient) => <Component {...props} httpClient=\n        {httpClient} />}\n    </HttpClientConsumer>\n  );\n}\n```", "```js\nexport const ConnectedBasketItemsClassical =\n  withHttpClient(BasketItemsClassical);\n```", "```js\nfunction App() {\n  return (\n    <HttpClientProvider httpClient={httpClient}>\n      {/* what's below could be however deep in the\n          component tree */}\n      <ConnectedBasketItemsClassical basketId=\"5\" />\n    </HttpClientProvider>\n  );\n}\n```", "```js\nimport React, { createContext, useContext } from 'react';\n// no changes to HttpClientContext definition or\n    HttpClientContextConsumer\nexport function useHttpClient() {\n  const httpClient = useContext(HttpClientContext);\n  return httpClient;\n}\n```", "```js\nexport function BasketItemsHooksUseContext({ basketId }) {\n  const httpClient = useHttpClient();\n  const [basketSession, setBasketSession] = useState({});\n  useEffect(() => {\n    // @ts-ignore\n    httpClient\n      .get(`https://fakestoreapi.com/carts/${basketId}`)\n      .then((session) => setBasketSession(session));\n  }, []);\n  return <pre>{JSON.stringify(basketSession,\n   null, 2)}</pre>;\n}\n```", "```js\nfunction App() {\n  return (\n    <HttpClientProvider httpClient={httpClient}>\n      {/* what's below could be however deep in the\n      component tree */}\n      <BasketItemsHooksUseContext basketId=\"5\" />\n    </HttpClientProvider>\n  );\n}\n```", "```js\nfunction MyComponent() {\n  return <ContainerComponent requiredProp={'value'}>\n    <OtherComponent prop=\"other-value\"/>\n    <FinalComponent prop=\"final-value\"/>\n  </ContainerComponent>\n}\n```"]