- en: Chapter 2. Building a Less Development Toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've covered the principles behind Less, and saw how it can help reduce the
    effort required to manage style sheets with the use of variables, functions, and
    mixins. We're almost ready to start coding, but before we can do so, there's one
    small thing missing—we need some tools!
  prefs: []
  type: TYPE_NORMAL
- en: You might wonder whether there is a need for more tools, given that CSS is just
    plain text and that we don't need anything to edit plain text files, right? Well,
    plain text editors will work, but as we'll see in this chapter, there are tools
    available that include support for Less in order to help make editing files easier.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, we will look at a selection of tools that you may find
    useful for working with Less; we will install a selection that will be used for
    the purposes of the exercises throughout this book, although you can always pick
    and choose the packages you prefer to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing and installing an editor to work with Less files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watching out for changes to Less files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging in browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools for compiling the Less code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating the development using tools such as Node and Grunt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The software that we install in this chapter will be for Windows, as this is
    the author's preferred development platform; comments will be added to indicate
    whether alternatives for Apple Mac or Linux are available.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing an IDE or editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to start somewhere, and what better place than an editor. After all,
    we can't produce anything if we don't have something that we can use to write
    it! Editing Less files is very easy—they are plain text files, which can be edited
    in almost any editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'The downside is that there are dozens of editors available, either free or
    at a cost. However, there are some editors that have support for Less either included
    by default or available as an add-on package, which includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sublime Text**: This is a shareware application for Windows, Mac, or Linux
    and is available at [http://www.sublimetext.com](http://www.sublimetext.com);
    a license costs USD 70 at the time of writing this'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notepad++**: This is an open source editor for PC and is available at [http://www.notepad-plus-plus.org](http://www.notepad-plus-plus.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coda**: This is available at [http://www.panic.com/coda](http://www.panic.com/coda)
    (Mac only); the license cost is USD 99 at the time of writing this'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Codekit**: This is a shareware application that is available at [http://www.incident57.com/codekit](http://www.incident57.com/codekit);
    license costs vary'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are more editors available; you can see a complete list of editors available
    at [http://lesscss.org/usage/#editors-and-plugins](http://lesscss.org/usage/#editors-and-plugins).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might have noticed that I have not mentioned IDEs such as Dreamweaver. While
    these will work perfectly well with Less files, their method of working can affect
    the experience of learning how to write Less code effectively.
  prefs: []
  type: TYPE_NORMAL
- en: In the meantime, let's take a look at installing my personal favorite, which
    is Sublime Text 2.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Sublime Text 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sublime Text is a shareware cross-platform text editor, which is available at
    [http://www.sublimetext.com](http://www.sublimetext.com). Its popularity stems
    from an uncluttered interface that allows for easy editing, yet is equally powerful.
    Sublime Text comes with a Python-based API, for which you can write plugins.
  prefs: []
  type: TYPE_NORMAL
- en: To install Sublime Text, we can download it from [http://www.sublimetext.com/2](http://www.sublimetext.com/2).
    Different versions are available for Apple Mac, Linux, and Windows; please download
    and install the version that is appropriate to your platform, accepting all defaults.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next version of Sublime Text, Version 3, is available at the time of writing
    this at [http://www.sublimetext.com/3](http://www.sublimetext.com/3); it is in
    beta at present but is reasonably stable for use if you don't mind working with
    beta software!
  prefs: []
  type: TYPE_NORMAL
- en: Adding Less syntax support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we need to add syntax support for Less, which requires several steps—the
    first of which is to install Package Control Manager, which is required in order
    to install plugins for Sublime Text. Let's begin by browsing to the installation
    page of the Package Control website at [https://sublime.wbond.net/installation#st2](https://sublime.wbond.net/installation#st2).
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to copy the code shown in the Sublime Text 2 tab, and then open Sublime
    Text 2\. Once it is open, click on **View** and **Show Console** before pasting
    the code into the console. Press *Enter* to run the installation. Once you see
    the following appear in the Console window, restart Sublime Text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Less syntax support](img/00003.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We now need to install syntax support for Less. For this, you will need an Internet
    connection, so you might not find it possible to do this while commuting, for
    example!
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you have access to the Internet, go ahead and press *Ctrl* + *Shift*
    + *P* to bring up Package Manager, then type in **Package Control: Install Package**,
    and press *Enter*, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Less syntax support](img/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: There will be a short delay while Package Manager retrieves the latest list
    of packages that are available; you can monitor their progress in the status bar.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Less syntax support](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once this is retrieved, the package list will be presented; in the package
    name box, enter `LESS`, as shown in the following screenshot, and press *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Less syntax support](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Sublime Text will now install the package. There will be a delay while it is
    installed; we can monitor its progress in the status bar at the bottom of the
    window. Once this is completed, you will see **Line 1, Column 1; Package LESS
    successfully installed** appear in the status bar. Syntax support is now installed—if
    we open up a test Less file in Sublime Text (such as `buttons.less`, from [Chapter
    4](part0041_split_000.html#page "Chapter 4. Working with Variables, Mixins, and
    Functions"), *Working with Variables, Mixins, and Functions*, in the accompanying
    code download for this book), we can see that the code is now in color and not
    in black and white as before:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Less syntax support](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, we're ready to start editing Less files—we still have some more
    tools we need to look at, though, before we have a complete toolkit! Once we've
    produced a Less file, we need to compile it into a valid CSS, so let's take a
    look at some of the tools that are available for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling Less files with a standalone compiler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we''ve produced a valid Less file, we need to compile it into its CSS
    equivalent. For this, we have two options: the first is to compile from the command
    line; we will examine this in more detail later in this chapter, in the *Compiling
    from the command line* section. The second is using a standalone compiler, for
    which we can use one of the following compilers available for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: WinLess ([http://winless.org/](http://winless.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SimpLESS ([http://www.wearekiss.com/simpless](http://www.wearekiss.com/simpless)/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Koala ([http://koala-app.com/](http://koala-app.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crunch! ([http://www.crunchapp.net/](http://www.crunchapp.net/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these compilers performs the same basic function of compiling Less files,
    but in different ways. I would suggest that you try each one out and stick with
    the one that you find preferable.
  prefs: []
  type: TYPE_NORMAL
- en: We must start somewhere, so first, let's take a look at WinLess.
  prefs: []
  type: TYPE_NORMAL
- en: WinLess
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WinLess is a Windows-based open source GUI frontend for `less.js`, which can
    be downloaded from [http://winless.org/downloads/WinLess-1.8.2.msi](http://winless.org/downloads/WinLess-1.8.2.msi).
    This includes an option to automatically monitor changes to any files stored within
    specific folders; as soon as they are changed, the corresponding CSS files are
    updated.
  prefs: []
  type: TYPE_NORMAL
- en: '![WinLess](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: SimpLESS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If something that is a little simpler is sufficient for your needs, then you
    can always try SimpLESS, which is a cut-down version available for Windows, Apple
    Mac, or Linux platforms.
  prefs: []
  type: TYPE_NORMAL
- en: '![SimpLESS](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can download this from [http://www.wearekiss.com/simpless](http://www.wearekiss.com/simpless);
    it is designed to sit and work from the system tray, silently updating any changed
    Less files.
  prefs: []
  type: TYPE_NORMAL
- en: Koala
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Koala is a relative newcomer to the Less preprocessor scene. It is a cross-platform
    GUI application that compiles most CSS preprocessors available, including Less.
    It was built using Node-Webkit, so versions are available for Mac OS, Linux, and
    Windows and can be downloaded from [http://www.koala-app.com/](http://www.koala-app.com/).
  prefs: []
  type: TYPE_NORMAL
- en: '![Koala](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can find details of other compilers available for use with Less by browsing
    to [http://lesscss.org/usage/#guis-for-less](http://lesscss.org/usage/#guis-for-less).
    In the meantime, we're going to move on and install Crunch!, as an example of
    one of the compilers available for Less.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Crunch!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Crunch! is a cross-platform compiler for Less, which works using Adobe AIR.
    This compiler is different from the others, as it allows us to edit files within
    the compiler directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing Crunch! is a two-part process; we begin with installing Adobe AIR:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the installer from [http://get.adobe.com/air/](http://get.adobe.com/air/),
    making sure that you select the right version for your platform. Double-click
    on the AIR installer and accept all defaults.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, go ahead and download Crunch! from [http://www.crunchapp.net](http://www.crunchapp.net).
    Double-click on the **Crunch.1.6.4.air** package, and then click on the **Install**
    button at this prompt.![Installing Crunch!](img/00011.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Continue** to begin the installation; we can leave the default settings
    untouched, as they will suffice for our needs:![Installing Crunch!](img/00012.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a few minutes, Crunch!'s GUI will appear, ready for use, as shown in this
    screenshot:![Installing Crunch!](img/00013.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compiling from the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of you might prefer not to have to use a standalone application to compile
    Less code task; after all, who needs to learn yet another application in order
    to perform a task that can easily be automated and run in the background, right?
  prefs: []
  type: TYPE_NORMAL
- en: Absolutely; instead of using a standalone compiler, we can use the command line
    to perform the same operation using the JavaScript-based platform, which is Node.js,
    available at [http://www.nodejs.org](http://www.nodejs.org). Versions of this
    application are available for the Windows, Linux, Mac, and even SunOS platforms.
    Otherwise, you can always try compiling from the source if you are feeling adventurous!
    Let's take a look at how we can use this in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'To download and install Node.js, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse [http://www.nodejs.org](http://www.nodejs.org), and click on **Download**
    from the main page; this should automatically determine the right version for
    your platform. At the time of writing this, the latest version for Windows is
    `node-v0.10.24-x86.msi`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the installer to begin the process; you will see the following
    welcome screen. Click on **Next**.![Compiling from the command line](img/00014.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, select the **I accept the terms in the License Agreement**
    checkbox, and then click on **Next**.![Compiling from the command line](img/00015.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we need to choose the location for where we will install Node.
    For the purposes of this book, we will assume that it will be installed in the
    default location of `c:\wamp`, so go ahead and click on **Next**.![Compiling from
    the command line](img/00016.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next screen, you can select from a number of options in order to configure
    Node. This isn't necessary for the purposes of running the exercises in this book,
    so we will simply click on **Next**.![Compiling from the command line](img/00017.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We're now ready to complete the installation, so click on **Install**, and wait
    for it to complete. Once this is completed, Node is installed and is ready for
    us to use. We are now ready to install Less for the command line, which we will
    cover in the next chapter, which is [Chapter 3](part0031_split_000.html#page "Chapter 3. Getting
    Started with Less"), *Getting Started with Less*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are interested in learning more about Node.js, then you might like to
    peruse the book *Mastering Node.js*, *Sandro Pasquali*, published by *Packt Publishing*.
  prefs: []
  type: TYPE_NORMAL
- en: Watching for changes to Less files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we will see in the next chapter, it is a simple process to compile Less from
    the command line; we can open a command prompt, type in a simple command, and
    then press *Enter* to let it run.
  prefs: []
  type: TYPE_NORMAL
- en: The trouble is that we have to do this every time. After a while, this will
    get tedious, to say the least! It's something we can easily fix—we first need
    to install Grunt's command-line interface before taking it a step further by setting
    Grunt to automatically watch out for, and recompile, any changes to our Less source
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is an alternative watch mode available in Less, called **Watch**. This
    still requires manual work to configure it; we will take a look at it in more
    detail in [Chapter 3](part0031_split_000.html#page "Chapter 3. Getting Started
    with Less"), *Getting Started with Less*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, we''ll add support for Less by installing a package
    called `grunt-contrib-less`. Let''s start by creating a folder for our project
    at the root of the `C:` drive, called `lessjs`. Within this folder, create a new
    file called `package.json`, and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, fire up a command prompt and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will download and install a number of additional packages; the `--save-dev`
    parameter will add any dependencies to the `package.json` file automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a look at the `lessjs` folder, we will see our `package.json` file;
    if we open it in a text editor, it will look something like this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If the download is complete with no errors recorded, then run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to a new file, and save it in the project folder as
    `gruntfile.js`. We will go through the file in sections in order to understand
    what each part does:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We start the file with a standard Grunt `exports` statement; here, we initialize
    Grunt by setting `src` to look for Less files and compile them into CSS files.
    We''ve set Grunt to not compress the CSS files when compiled using the `expand`
    attribute, which is set to `true`. This makes them easy to read while we are still
    developing, although in reality, we will look to compress the files in a production
    environment in order to save on bandwidth:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As we are defining more than one task, we would ordinarily have to enter the
    tasks at the command prompt individually. Instead, we can combine all of the subtasks
    that we define. We can then run them as default when entering the command grunt
    at the command line, which help saves time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Start a command prompt, switch to the project folder, and enter `npm install`
    at the command prompt. This will download and install a number of additional packages.
    When this is complete, enter `grunt` at the command prompt. Grunt will begin watching
    for any changes, as shown in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Watching for changes to Less files](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Any changes made will force an automatic recompilation of the Less file.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you would like to dig into the source code for these packages, then you will
    find many of them on GitHub at [https://github.com/gruntjs](https://github.com/gruntjs).
  prefs: []
  type: TYPE_NORMAL
- en: 'As time moves on, and you become more accustomed to developing with Less, you
    might like to try some of the other watcher packages that are available from the
    Node Package Manager website at [https://npmjs.org](https://npmjs.org), such as
    the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: less watch (available at [https://npmjs.org/package/less-watch](https://npmjs.org/package/less-watch))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: less monitor (available at [https://npmjs.org/package/less-monitor](https://npmjs.org/package/less-monitor))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: less watcher (available at [https://npmjs.org/package/lesswatcher](https://npmjs.org/package/lesswatcher))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have Less installed and compiled automatically using Grunt, we can
    skip to the next chapter in order to create some files in our normal text editor,
    and then compile them manually. This will work perfectly well, but we can automate
    the compilation process even further. Let's see how we can do this by adding support
    to a text editor such as Notepad++ so that we can compile the files directly from
    within the editor.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling Less files directly from text editors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are hundreds of text editors available for use; some are free or open
    source, while others will be available at a cost. A good example of a free editor
    is Notepad++; the current version is 6.5.3 at the time of writing this and can
    be downloaded from [http://notepad-plus-plus.org/download/v6.5.3.html](http://notepad-plus-plus.org/download/v6.5.3.html).
  prefs: []
  type: TYPE_NORMAL
- en: For now, we'll get it set up and ready for use. You will see it in action in
    [Chapter 3](part0031_split_000.html#page "Chapter 3. Getting Started with Less"),
    *Getting Started with Less*, when we use it to compile code from the editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the installer for Notepad++, and then double-click on it to launch
    the installation process. Click on **Next** to accept each default setting, which
    will suffice for our needs. When the installation is complete, start Notepad++,
    and then click on **Run** from the **Run** menu in order to launch the **Run**
    dialog, and add the following line (including the quotes):'
  prefs: []
  type: TYPE_NORMAL
- en: '`"C:\Program Files (x86)\nodejs\node_modules\.bin\lessc.cmd" -x "$(FULL_CURRENT_PATH)"
    > "$(CURRENT_DIRECTORY)\$(NAME_PART).css"`'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Save** to add the run command to the list of existing preset commands;
    in the **Shortcut** dialog, choose the **CTRL** + **L** shortcut and add `Compile
    LESS files` for the command, and then click on **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Compiling Less files directly from text editors](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: When the **Shortcut** window is closed, click on **Save** to save the changes.
    For now, click on **Cancel** to close the window. We're not ready to run our shortcut
    yet—this will happen in the next chapter. Notepad++ is now set up so that we are
    ready to compile any changes to Less files from within the application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the compilation support via a package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we've seen how you can set up an editor such as Notepad++, but we're
    not limited to having to wire up every editor using this technique. For some editors,
    an extension or package has already been created for this purpose, so the installation
    will be simplified. One such example is Sublime Text—there is a package that exists,
    which we can install in order to provide support for Less.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by firing up Sublime Text, and then press *Shift* + *Ctrl* + *P* to bring
    up Package Manager, which we installed earlier in this chapter, and then enter
    `Package Control: Install Package` and press *Enter*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the compilation support via a package](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, enter `lesscss`—we need to install the `Less2CSS` package, so when this
    appears in the autocomplete, click on it and press *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the compilation support via a package](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, Sublime Text will install the package, which will take a few
    moments—the confirmation will appear in the status bar when it is successfully
    installed. We're now ready to compile Less files directly from within Sublime
    Text—we'll be using this feature in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging Less in browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A key part of developing code of any description is the fixing of any errors
    or bugs; working with Less code is no exception. We can, of course, do this manually
    or use a linting tool such as CSS Lint ([http://www.csslint.net](http://www.csslint.net)),
    but either is likely to require working directly with the compiled CSS code, which
    will make it harder to trace a fault back to your existing Less code.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, we have a couple of options that will help in this respect—we can
    either debug directly in Firefox using the FireLESS plugin, or we can set up a
    source map that will translate a compiled style back to the line number in the
    original Less file. Let's take a look at installing FireLESS first and get ready
    for when we start developing code in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging the Less code using Firefox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To enable support for debugging Less in Firefox, we first need to ensure that
    Firebug is installed; for this, you can download it from [https://addons.mozilla.org/en-US/firefox/addon/firebug](https://addons.mozilla.org/en-US/firefox/addon/firebug)
    using the normal installation process for Firefox add-ins.
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging the Less code using Firefox](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At the time of writing this, the latest version of Firebug is 1.12.5, which
    will work for Firefox Versions 23 to 26\. The installation process is painless
    and does not require a restart of your browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to install FireLESS. First, browse to [https://addons.mozilla.org/en-us/firefox/addon/fireless/](https://addons.mozilla.org/en-us/firefox/addon/fireless/),
    and then click on **Add to Firefox** to initiate the installation. You might get
    a prompt to allow Firefox to install Firebug—click on **Allow**. After Firefox
    has downloaded the plugin, click on **Install Now** (shown in the following screenshot)
    to begin the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Debugging the Less code using Firefox](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Click on **Restart Now** when prompted. FireLESS is now installed; we will see
    how to use it in [Chapter 3](part0031_split_000.html#page "Chapter 3. Getting
    Started with Less"), *Getting Started with Less*.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging the Less code in Chrome
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're not limited to just using Firefox to debug our source code. We can also
    use Chrome; for this, we need to install the support for source maps in Less.
  prefs: []
  type: TYPE_NORMAL
- en: Source maps are a relatively new feature, which can work with JavaScript- or
    CSS-based files; the concept is based around providing a mechanism to map back
    the compiled JavaScript- or CSS-based code to the original source files. This
    becomes particularly effective when the content has been minimized—without a source
    map, it would be difficult to work out which piece of code was at fault!
  prefs: []
  type: TYPE_NORMAL
- en: This example relies on the use of a web server to work correctly. We will go
    ahead and install WampServer for this purpose, so let's do this now.
  prefs: []
  type: TYPE_NORMAL
- en: Installing WampServer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WampServer can be downloaded from [http://www.wampserver.com](http://www.wampserver.com)—the
    various versions for Windows are available from within the **Download** tab; make
    sure that you select an appropriate one for your platform. If you work on an Apple
    Mac, then you can try installing MAMP, which you can download from [http://www.mamp.info](http://www.mamp.info).
    Linux users should have a suitable option available as part of their distro.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by opening the installer file you downloaded earlier. In the welcome
    prompt, click on **Next**. Select **I accept the agreement**, and then click on
    **Next**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing WampServer](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We need to assign a location somewhere to install the application files (and
    later, host our test pages). By default, WampServer will get installed into `c:\wamp`—this
    is ideal, as it avoids the use of spaces, which will otherwise translate into
    `%20` in our URLs.
  prefs: []
  type: TYPE_NORMAL
- en: For the purposes of this book, I will assume that you've used the default; if
    you've used something different, then you will need to remember the new location
    for later when we host our example files.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing WampServer](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The setup will then prompt you whether you want to create quick launch or desktop
    icons—at this point, you can choose whichever you prefer to use. Clicking on **Next**
    will show you a **Ready to Install** screen, which gives you a summary of our
    install actions. If all is well, click on **Install** to complete the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will then see the **Preparing to Install** window, before **Setup** then
    runs through the installation. Just before the completion, you will see this message,
    where we should click on **No**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing WampServer](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In addition, we also need to install Grunt and Node, as outlined earlier in
    the *Watching for changes to Less files* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now that WampServer is installed, open a command prompt and change the location
    to your project folder—for this example, I will use a folder called `lessc`, which
    will be stored at `c:\wamp\www\lessc`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, we've used a demo folder—this will need to be your folder from
    which the content is served when working in production.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the prompt, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, `namespaces.less` and `namespaces.css` are the names of your Less and
    CSS files, respectively. When compiled, `lessc` produces a `.map` file, which
    the browser will use to find the various definitions in Less files that equate
    to a specific CSS style rule in your code.
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `namespaces.less`, `namespaces.css`, `main.html`, and `namespaces.css.map`
    files to your web server's `WWW` folder—in this instance, this will most likely
    be `c:\wamp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Google Chrome, and then browse to `http://localhost/lessc/main.html`.
    If all is well, you will see something like the following screenshot, assuming
    that you have pressed *F12* to display the developer toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing WampServer](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can see the various CSS styles that make up the `.mediumbutton` class;
    Chrome shows you the compiled output styles, but in place of indicating where
    each rule appears in the CSS, we can see where the original rule is shown within
    the Less file.
  prefs: []
  type: TYPE_NORMAL
- en: We will be able to achieve the same results using Opera (as recent versions
    are now WebKit-based). Safari has introduced support for source maps, but only
    from Version 7 onwards. **Internet Explorer** (**IE**) is the only major browser
    that is yet to include any support for source maps.
  prefs: []
  type: TYPE_NORMAL
- en: For now, don't worry about how source maps work, as we will revisit this in
    more detail later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Other useful tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve almost come to the end of this chapter, but before we move onto starting
    to develop the Less code, we should take a look at a few tools that you might
    find useful once you''ve spent some time developing CSS with Less:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adobe Kuler**: You can find this tool at [https://kuler.adobe.com/](https://kuler.adobe.com/).
    Although this is not immediately associated with Less, you might find this useful
    when choosing a color scheme for your site. Kuler has some useful tools that help
    you choose a suitable color palette from which we can take and use the color values
    within our Less styles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Live.js**: If you spend any amount of time editing styles, you will have
    to manually refresh the pages after each change; this can get tedious if you are
    making lots of changes! Fortunately, we can get around this with the use of the
    Live.js script. This tool is developed by Martin Kool and is available at [http://www.livejs.com](http://www.livejs.com).
    It automatically forces a refresh to the page being worked on so that we can see
    changes as soon as they are applied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS3 Please**: You can find this tool at [http://css3please.com/](http://css3please.com/).
    This is a nifty site that allows you to edit any listed CSS3 rule with your own
    values; it automatically applies the same rule changes to each of the vendor prefixes
    for that rule so that you have an updated rule that will work in each of the major
    browsers. This is particularly helpful when you start creating your own mixins,
    as we will see in the next chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SpritePad**: You can find this tool at [http://wearekiss.com/spritepad](http://wearekiss.com/spritepad).
    Billed as the "easiest way to create your sprites", SpritePad is an excellent
    tool for creating image sprites online, which automatically generates the appropriate
    CSS for each image. We can then use this to create mixins—this is particularly
    useful if we''re creating a site with a lot of small images that feature regularly
    throughout the site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prefixr**: You can find this tool at [http://www.prefixr.com/](http://www.prefixr.com/).
    Although this site is not designed for use with Less, it is useful nonetheless.
    We can develop a site for a particular browser (such as Firefox), and then use
    Prefixr to add other vendor prefix equivalents for any CSS3 rule that still requires
    them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WinLess Online**: You can find this tool at [http://winless.org/online-less-compiler](http://winless.org/online-less-compiler).
    Earlier in this chapter, we touched on using WinLess as a Less compiler; this
    also has an online version for those who do not use Windows as their platform.
    Although some of the configuration options are not present (such as minifying
    the compiled code), it is a useful tool nonetheless.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Less2CSS**: You can find this tool at [http://www.less2css.org](http://www.less2css.org).
    This site performs the same function as WinLess Online but has a few more options,
    such as adding the media queries required for working with source maps. This developer
    also recommends that you use this site to verify your code in the event that you
    come across any issue where you need assistance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is a selection of the tools I've used for developing with Less; there are
    likely to be others that will be as useful as the ones listed here. Please feel
    free to use these. If you have suggestions for others in a future edition of this
    book, then they are welcome!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Less can be very rewarding when you have the right tools installed
    and available for use in your workflow. We started with a look at some of the
    editors that are available; these include support for Less, such as Sublime Text
    or Notepad++. We then moved on to installing Sublime Text 2 and added support
    for Less.
  prefs: []
  type: TYPE_NORMAL
- en: Next up came a discussion on the options available for compiling Less code—the
    first option covered how you can use a standalone compiler such as WinLess to
    produce the final CSS code; we took a look at each of the main compilers available,
    and followed it by installing Crunch!.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved on to examining how you can use the command line to compile the
    code—we looked at how using a standalone compiler meant adding another layer into
    your development workflow, which isn't ideal. We ran through a basic installation
    of Node.js, which we then first configured to compile Less files before adding
    an automatic watch facility and finishing with a look at how you can link this
    to editors such as Notepad++.
  prefs: []
  type: TYPE_NORMAL
- en: We then rounded off the chapter with a look at the options available for debugging
    code in browsers. We examined how FireLESS and Firebug make this a cinch when
    using Firefox, while it requires a little more work to configure Chrome (and Opera)
    in order to use source maps to achieve the same effect. We also covered some of
    the other tools you might find useful for developing with Less, such as LESS2CSS
    or Adobe Kuler.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to really get stuck in and start to produce
    valid Less code. We'll take a look at downloading and adding Less and start to
    examine its syntax before writing some styles and seeing the results from compiling
    using the command line or through a standalone compiler.
  prefs: []
  type: TYPE_NORMAL
