- en: Working with Maps and Symbols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Symbol to create a local instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Symbol.for to create a global instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Symbol to simulate enums
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting and deleting entries from Map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Map from the existing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a class that wraps Map to work with specific complex types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting and deleting entries from WeakMap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a WeakMap from existing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a class that uses WeakMap to work with specific complex types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw how to use ECMAScript classical semantics to concisely express more sophisticated
    relationships between data and operations. We also saw how to take advantage of
    expanded APIs for existing types (object and array). However, ECMAScript has more
    to offer. Among the new types are `Symbol`, `Map`, and cousin of `Map`, that is, `WeakMap`.
    These types, to some extent, could be simulated in earlier versions of JavaScript,
    but now are readily available and have native support.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter will illustrate some uses of these types, both together
    and in isolation.
  prefs: []
  type: TYPE_NORMAL
- en: Using Symbol to create a local instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Symbols on their own aren't particularly useful, but they are very useful as
    keys for other data structures. They are well suited as keys because it is possible
    to restrict the access to their values. There are two ways these comparisons can
    work. We can create local symbols, which are unique and can be recreated after
    initialization, and global symbols, which can be referenced by their constructor
    value.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to use `Symbol` as a function to create
    local symbols. This means that each instance will be new, even if the same arguments
    are used.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `11-01-local-symbols`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a `main` function that creates a couple
    of sets of symbols using the same arguments. Print out their equality as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `Symbol.keyFor` to note the `key` for the rocket number `Symbol`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/da7eb419-3f68-40b9-8f51-8ef7b9006292.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating a `Symbol` with the `Symbol.for` method, the instance returned
    may be a preexisting instance. We can see this when we create a `Symbol` with
    the same string and number values. We can even see the same instance when a number
    is provided as a string.
  prefs: []
  type: TYPE_NORMAL
- en: When printing out the types for the keys, we can see why the numbers match,
    even when the argument is a string. When we retrieve a key for a numeric value,
    it is converted to a string, and thus is equivalent to the string representation
    of the number.
  prefs: []
  type: TYPE_NORMAL
- en: Using Symbol.for to create a global instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how to create unique symbols to use as keys in a local context. However,
    sometimes, we want to be able to interact with a data structure. Symbols can be
    made to work in this case as well.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `11-02-symbol-for-global`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a `main` function that creates a couple
    of sets of Symbols, using `Symbol.for`, with string and number arguments. Compare
    the numeric symbols with a number as string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f3698b84-3f5f-4bc7-b59c-fa364b3a05c4.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `slice` method takes two parameters, a start index and an end index. The
    end index is noninclusive. This means that the new set will include the elements
    between the start and end index, including the element at the start index, but
    not the element at the end index.
  prefs: []
  type: TYPE_NORMAL
- en: This might seem a bit confusing, but think of it this way, consider that the
    start index is two and the end index is three. The difference between those two
    numbers is one, and there is a single element in the resulting subset. For indices
    *0* and *2*, the difference is two and there will be two elements in the resulting
    subset.
  prefs: []
  type: TYPE_NORMAL
- en: Using Symbol to simulate enums
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how to create `Symbol` that can be accessed globally, and those that
    can't be accessed outside of their initial context. Now, we'll see how to use
    them to create something that wasn't really possible in earlier versions of JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll use local `Symbol` to simulate a type that is available
    in many other languages, enums.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `11-03-symbols-simulate-enums`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `object` named `LaunchSite` , property
    values of the object should be local `Symbols`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function and compare the value of an enum entry to different
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fd2e2e79-dfba-49c0-a596-8ef555ccc571.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned before, the local `Symbol` instances will be unique every time
    they are created. Thus, we aren't able to recreate the `Symbol`value in the `main`
    function. This means that any code expecting a value from that enum can't be coerced
    with an equivalent value.
  prefs: []
  type: TYPE_NORMAL
- en: One use in which enum types are valuable is as options. Imagine an options object,
    one of the options needs to be able to take multiple values (say animation tweening).
    A string value would get the job done but can easily be miss-typed. With an enum,
    the user of a function must reference that enum; this is less brittle and clearer
    when reading afterward.
  prefs: []
  type: TYPE_NORMAL
- en: Setting and deleting entries from Map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The rest of this chapter will focus on new data structures added in ECMAScript.
    To some extent, they can be simulated in ES5\. However, native support and explicit
    naming make code that utilizes these features more efficient and clearer.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at the basics of adding and removing entries
    from a `Map` using the `set` and `delete` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `11-04-set-and-delete-from-map`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an enum of different launch sites:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function. In that function, use the `set` and `delete` methods
    to manipulate entries of launch site to rocket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3f14a616-0c75-4b91-b8d2-50c5de97d59f.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The map is a pairing between a `key` and `value`. The keys reference the values
    when calling the instance of `Map`  methods. This pairing is one-to-one; this
    means that there can only be one value per key. Thus, when we set another rocket
    to the `KENNEDY_SPACE_CENTER` key, the old value is replaced.
  prefs: []
  type: TYPE_NORMAL
- en: The `delete` method removes the entry corresponding to the `key`. Thus, after
    `delete`, that particular entry is undefined.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Map from the existing data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just saw how to add values individually to maps. This can be tedious, however.
    For example, if we are working with a dataset that might be very large or unknown
    ahead of time, it would be nice to initialize a map with a function call rather
    than hundreds or thousands.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to create a new Map with the preexisting
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `11-05-create-map-from-data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an enum of various launch sites:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function. In that function, create a map with launch site and
    rocket key value pairs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fc38f3a1-5497-4768-82ee-91df9ff7b27e.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As said before, the map is a pairing between a `key` and `value`. The `Map`
    constructor expects an `iterable` collection of key-value pairs. In the preceding
    recipe, we've passed a two-dimensional array. The outer dimension is the `iterable`
    that contains multiple entries.
  prefs: []
  type: TYPE_NORMAL
- en: The inner dimension is the key-value pair. The first member of the key-value
    is the launch site. The second member is the `value` (in our case, a `Rocket`).
    The `Map` constructor iterates over the entries provided and creates a pairing
    between each.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a class that wraps Map to work with specific complex types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with a large collection, it can be nice to know what kind of object
    to expect when picking out on a member. Normally, JavaScript collections are heterogeneous,
    meaning that any type can be used. In the case of `Map`, this means that either
    `key` or `value` can take on any type.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to create a wrapper class for `Map`
    in order to control what types are used in the `Map`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `11-06-create-class-to-wrap-map`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named `RocketSiteMap` file that creates a new map and assigns
    it as an instance property in the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `set` method that checks the type of the `key` and `value` arguments.
    This method should throw an error if the argument types are incorrect, otherwise
    set the pair as an entry on the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `get` method that returns the entry for `key` from the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an enum of various launch sites:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function. Attempt to set various `key` and `value` pairs to
    an instance of `RocketMap`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f50eb6b-b852-4fca-9bbd-dd2a8f998f54.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the implementation of the `set` method, we can see where the types of the
    arguments are being checked. `Symbol`, as a type, doesn't have a constructor,
    so we can't use the `instanceof` operator, but the `typeof` operator returns a
    `symbol` string we can check against. The `Rocket` instances behave like other
    instances we've seen in other recipes, and can be checked like the others.
  prefs: []
  type: TYPE_NORMAL
- en: When the incorrect type is passed as an argument to `set`, one of the conditionals
    will trigger and an error will be thrown.
  prefs: []
  type: TYPE_NORMAL
- en: Setting and deleting entries from WeakMap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how to use Maps in a variety of situations. There is another new
    class in ECMAScript that behaves in a very similar way, but has some helpful properties.
    The `WeakMap`, like `Map`, is a key-value data structure.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to add and remove elements from a `WeakMap`
    with the `set` and `delete` methods. And we'll also see how they differ from the
    `Map` class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `11-07-set-and-delete-from-weakmap`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `enum` of various launch sites:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function. In that function, use the `set` and `delete` methods
    to manipulate entries of launch site to rocket. Try to use a `Symbol` as a key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/27900186-3882-45ef-b827-33a0e363e680.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like instances of `Map`, the `WeakMap` instance is a pairing between a `key`
    and `value`. However, crucially, they differ in what types can be used as keys.
    `Map` can use any type for keys. `WeakMap` can only have values of the `Object`
    type as keys. This helps `WeakMap` to be more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: The reason that `WeakMap` can be more efficient has to do with memory management
    and garbage collection. Consider that Map entries have to be kept around for the
    lifetime of the program. Since they can use primitive types as keys (Booleans,
    strings, numbers, and Symbols), these values could be recreated, and those Map
    entries can be referenced at any time.
  prefs: []
  type: TYPE_NORMAL
- en: '`WeakMap` keys, by contrast, can only be of the `Object` type. The `Object`
    values cannot be recreated; objects with the same values are still different instances.
    This means that an entry to a `WeakMap` can only be accessed as long as a reference
    to the key is available; once that reference is lost, the entry can no longer
    be accessed.'
  prefs: []
  type: TYPE_NORMAL
- en: The entries are no long accessible because the key value doesn't have any existing
    references to them. This means that the entry can be released from memory (no
    sense in keeping unused values around). This allows the garbage collector to free
    up that memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the Mozilla documentation for more information on `WeakMap`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a WeakMap from existing data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just saw how to add values individually to a `WeakMap` and why it is different
    from a `Map`. However, it can be tedious to create a `WeakMap` one entry at a
    time.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to create a new `Map` with the preexisting
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: If you are unfamiliar with the `WeakMap` class, refer to the *Setting and deleting
    entries from WeakMap* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `11-08-create-weakmap-from-data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an enum of various launch sites:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function. In that function, create a map with launch site and
    rocket key value pairs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d3a0a127-9c6b-4f0e-9d02-73d4cee16809.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No surprises here, the `WeakMap` constructor adheres to the same interface as
    `Map`. The only difference is the type restriction on `key`. The argument for
    the constructor is a two-dimensional array, where the outer dimension is the list
    of entries. The inner dimension represents the key-value pairs. The first member
    of the inner dimension is the `key`, and the second is the `value`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a class that uses WeakMap to work with specific complex types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as with `Map`, knowing what type to expect from the `WeakMap` collection
    can be valuable. The `key` types are very slightly restricted, but still pretty
    loose, and there is no restriction on what type the values can be.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll take a look at how to create a wrapper class for `WeakMap`
    in order to control what types are used in the `WeakMap`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  prefs: []
  type: TYPE_NORMAL
- en: If you are unfamiliar with the `WeakMap` class, refer to the *Setting and deleting
    entries from WeakMap* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your command-line application and navigate to your workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named `11-09-create-class-to-wrap-weakmap`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a class named  `RocketSiteMap` file that creates a new map and assigns
    it as an instance property in the constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `set` method that checks the type of the `key` and `value` arguments.
    This method should throw if the argument types are incorrect, otherwise set the
    pair as an entry on the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `get` method that returns the entry for `key` from the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an enum of various launch sites:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main` function. Attempt to set various `key` and `value` pairs to
    an instance of `RocketMap`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your Python web server and open the following link in your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/785eef62-189a-4cb1-b69b-620af63886de.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From the implementation of the `set` method, we can see where types of the arguments
    are being checked. `Symbol`, as a type, doesn't have a constructor, so we can't
    use the `instanceof` operator, but the `typeof` operator returns a symbol string
    we can check against. The `Rocket` instances behave like other instances we've
    seen in other recipes, and can be checked like the others.
  prefs: []
  type: TYPE_NORMAL
- en: When the incorrect type is passed as an argument to `set`, one of the conditionals
    will trigger, and an error will be thrown.
  prefs: []
  type: TYPE_NORMAL
