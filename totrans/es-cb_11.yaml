- en: Working with Maps and Symbols
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Maps 和 Symbols 一起工作
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Using Symbol to create a local instance
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Symbol 创建局部实例
- en: Using Symbol.for to create a global instance
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Symbol.for` 创建全局实例
- en: Using Symbol to simulate enums
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Symbol 模拟枚举
- en: Setting and deleting entries from Map
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Map 中设置和删除条目
- en: Creating a Map from the existing data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从现有数据创建 Map
- en: Creating a class that wraps Map to work with specific complex types
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个包装 Map 以与特定复杂类型一起工作的类
- en: Setting and deleting entries from WeakMap
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 WeakMap 中设置和删除条目
- en: Creating a WeakMap from existing data
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从现有数据创建 WeakMap
- en: Creating a class that uses WeakMap to work with specific complex types
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个使用 WeakMap 与特定复杂类型一起工作的类
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: We saw how to use ECMAScript classical semantics to concisely express more sophisticated
    relationships between data and operations. We also saw how to take advantage of
    expanded APIs for existing types (object and array). However, ECMAScript has more
    to offer. Among the new types are `Symbol`, `Map`, and cousin of `Map`, that is, `WeakMap`.
    These types, to some extent, could be simulated in earlier versions of JavaScript,
    but now are readily available and have native support.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何使用 ECMAScript 经典语义简洁地表达数据与操作之间更复杂的关系。我们还看到了如何利用现有类型（对象和数组）的扩展 API。然而，ECMAScript
    还有更多要提供。在新的类型中包括 `Symbol`、`Map` 以及 `Map` 的表亲 `WeakMap`。这些类型在一定程度上可以在 JavaScript
    的早期版本中模拟，但现在它们是现成的并且有原生支持。
- en: The recipes in this chapter will illustrate some uses of these types, both together
    and in isolation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的配方将展示这些类型的一些用法，包括一起使用和单独使用。
- en: Using Symbol to create a local instance
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Symbol 创建局部实例
- en: Symbols on their own aren't particularly useful, but they are very useful as
    keys for other data structures. They are well suited as keys because it is possible
    to restrict the access to their values. There are two ways these comparisons can
    work. We can create local symbols, which are unique and can be recreated after
    initialization, and global symbols, which can be referenced by their constructor
    value.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 单独使用 `Symbol` 并不是特别有用，但它们作为其他数据结构的键非常有用。它们非常适合作为键，因为可以限制对其值的访问。这些比较有两种工作方式。我们可以创建局部符号，它们是唯一的，可以在初始化后重新创建，以及全局符号，可以通过其构造函数值进行引用。
- en: In this recipe, we'll take a look at how to use `Symbol` as a function to create
    local symbols. This means that each instance will be new, even if the same arguments
    are used.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看看如何使用 `Symbol` 作为函数来创建局部符号。这意味着即使使用相同的参数，每个实例也将是新的。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方假设您已经有一个工作区，允许您在浏览器中创建和运行 ES 模块。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序并导航到您的 workspace。
- en: Create a new folder named `11-01-local-symbols`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `11-01-local-symbols` 的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html` 文件，该文件加载并运行来自 `main.js` 的 `main` 函数。
- en: 'Create a `main.js` file that defines a `main` function that creates a couple
    of sets of symbols using the same arguments. Print out their equality as follows:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，该文件定义一个 `main` 函数，使用相同的参数创建几组符号。按照以下方式打印出它们的相等性：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Use `Symbol.keyFor` to note the `key` for the rocket number `Symbol`:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Symbol.keyFor` 记录火箭数字 `Symbol` 的 `key`：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Python 网络服务器，并在您的浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`。'
- en: 'You should see the following output:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![](img/da7eb419-3f68-40b9-8f51-8ef7b9006292.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/da7eb419-3f68-40b9-8f51-8ef7b9006292.png)'
- en: How it works...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When creating a `Symbol` with the `Symbol.for` method, the instance returned
    may be a preexisting instance. We can see this when we create a `Symbol` with
    the same string and number values. We can even see the same instance when a number
    is provided as a string.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `Symbol.for` 方法创建一个 `Symbol` 时，返回的实例可能是一个预存在的实例。当我们使用相同的字符串和数字值创建一个 `Symbol`
    时，我们可以看到这一点。当提供一个数字作为字符串时，我们甚至可以看到相同的实例。
- en: When printing out the types for the keys, we can see why the numbers match,
    even when the argument is a string. When we retrieve a key for a numeric value,
    it is converted to a string, and thus is equivalent to the string representation
    of the number.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当打印出键的类型时，我们可以看到为什么数字匹配，即使参数是字符串也是如此。当我们检索一个数值键时，它会被转换为字符串，因此与数字的字符串表示形式等效。
- en: Using Symbol.for to create a global instance
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Symbol.for 创建全局实例
- en: We've seen how to create unique symbols to use as keys in a local context. However,
    sometimes, we want to be able to interact with a data structure. Symbols can be
    made to work in this case as well.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何创建唯一的符号，用作局部上下文中的键。然而，有时我们希望能够与数据结构进行交互。在这种情况下，符号也可以被用来工作。
- en: Getting ready
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您已经有一个工作区，允许您在浏览器中创建和运行 ES 模块。如果您没有，请参考前两章。
- en: How to do it...
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序并导航到您的工作区。
- en: Create a new folder named `11-02-symbol-for-global`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `11-02-symbol-for-global` 的新文件夹。
- en: Copy or create an `index.html` that loads and runs a `main` function from `main.js`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制或创建一个 `index.html`，该文件加载并运行来自 `main.js` 的 `main` 函数。
- en: 'Create a `main.js` file that defines a `main` function that creates a couple
    of sets of Symbols, using `Symbol.for`, with string and number arguments. Compare
    the numeric symbols with a number as string:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，该文件定义了一个创建几组 Symbols 的 `main` 函数，使用 `Symbol.for`，带有字符串和数字参数。比较数字符号与字符串形式的数字：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Python 网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![](img/f3698b84-3f5f-4bc7-b59c-fa364b3a05c4.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f3698b84-3f5f-4bc7-b59c-fa364b3a05c4.png)'
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `slice` method takes two parameters, a start index and an end index. The
    end index is noninclusive. This means that the new set will include the elements
    between the start and end index, including the element at the start index, but
    not the element at the end index.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`slice` 方法接受两个参数，一个起始索引和一个结束索引。结束索引是非包含的。这意味着新集合将包括起始索引和结束索引之间的元素，包括起始索引处的元素，但不包括结束索引处的元素。'
- en: This might seem a bit confusing, but think of it this way, consider that the
    start index is two and the end index is three. The difference between those two
    numbers is one, and there is a single element in the resulting subset. For indices
    *0* and *2*, the difference is two and there will be two elements in the resulting
    subset.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来有点令人困惑，但可以这样想，考虑起始索引是两个，结束索引是三个。这两个数字之间的差值是一，结果子集中只有一个元素。对于索引 *0* 和 *2*，差值是两个，结果子集中将有两个元素。
- en: Using Symbol to simulate enums
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Symbol 模拟枚举
- en: We've seen how to create `Symbol` that can be accessed globally, and those that
    can't be accessed outside of their initial context. Now, we'll see how to use
    them to create something that wasn't really possible in earlier versions of JavaScript.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何创建可以在全局访问的 `Symbol`，以及那些不能在初始上下文之外访问的 `Symbol`。现在，我们将看到如何使用它们来创建在 JavaScript
    早期版本中实际上不可能实现的功能。
- en: In this recipe, we'll use local `Symbol` to simulate a type that is available
    in many other languages, enums.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用局部 `Symbol` 来模拟许多其他语言中可用的类型，枚举。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您已经有一个工作区，允许您在浏览器中创建和运行 ES 模块。如果您没有，请参考前两章。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序并导航到您的工作区。
- en: Create a new folder named `11-03-symbols-simulate-enums`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `11-03-symbols-simulate-enums` 的新文件夹。
- en: 'Create a `main.js` file that defines a new `object` named `LaunchSite` , property
    values of the object should be local `Symbols`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.js` 的文件，该文件定义了一个名为 `LaunchSite` 的新 `object`，对象的属性值应该是本地的 `Symbols`：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a `main` function and compare the value of an enum entry to different
    values:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数并比较枚举条目的值：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Python 网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![](img/fd2e2e79-dfba-49c0-a596-8ef555ccc571.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd2e2e79-dfba-49c0-a596-8ef555ccc571.png)'
- en: How it works...
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As mentioned before, the local `Symbol` instances will be unique every time
    they are created. Thus, we aren't able to recreate the `Symbol`value in the `main`
    function. This means that any code expecting a value from that enum can't be coerced
    with an equivalent value.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，局部 `Symbol` 实例每次创建时都是唯一的。因此，我们无法在 `main` 函数中重新创建 `Symbol` 值。这意味着任何期望从该枚举中获取值的代码都不能用等效值强制转换。
- en: One use in which enum types are valuable is as options. Imagine an options object,
    one of the options needs to be able to take multiple values (say animation tweening).
    A string value would get the job done but can easily be miss-typed. With an enum,
    the user of a function must reference that enum; this is less brittle and clearer
    when reading afterward.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举类型的一个有用用途是作为选项。想象一个选项对象，其中一个选项需要能够接受多个值（比如动画缓动）。字符串值可以完成这项工作，但很容易出错。使用枚举，函数的用户必须引用该枚举；这在阅读时更不脆弱且更清晰。
- en: Setting and deleting entries from Map
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在映射中设置和删除条目
- en: The rest of this chapter will focus on new data structures added in ECMAScript.
    To some extent, they can be simulated in ES5\. However, native support and explicit
    naming make code that utilizes these features more efficient and clearer.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分将专注于 ECMAScript 中添加的新数据结构。在一定程度上，它们可以在 ES5 中模拟。然而，原生的支持和明确的命名使得利用这些特性的代码更高效且更清晰。
- en: In this recipe, we'll take a look at the basics of adding and removing entries
    from a `Map` using the `set` and `delete` methods.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将查看使用 `set` 和 `delete` 方法添加和删除 `Map` 条目的基本方法。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱假设你已经有一个允许你在浏览器中创建和运行 ES 模块的 workspace。如果你没有，请参考前两章。
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序并导航到你的 workspace。
- en: Create a new folder named `11-04-set-and-delete-from-map`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `11-04-set-and-delete-from-map` 的新文件夹。
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.js` 的文件，定义一个名为 `Rocket` 的新 `class`，它接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create an enum of different launch sites:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含不同发射站的枚举：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a `main` function. In that function, use the `set` and `delete` methods
    to manipulate entries of launch site to rocket:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数。在该函数中，使用 `set` 和 `delete` 方法来操作发射站到火箭的条目：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的 Python 网络服务器并在你的浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![](img/3f14a616-0c75-4b91-b8d2-50c5de97d59f.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f14a616-0c75-4b91-b8d2-50c5de97d59f.png)'
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The map is a pairing between a `key` and `value`. The keys reference the values
    when calling the instance of `Map`  methods. This pairing is one-to-one; this
    means that there can only be one value per key. Thus, when we set another rocket
    to the `KENNEDY_SPACE_CENTER` key, the old value is replaced.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 映射是一个 `key` 和 `value` 的配对。当调用 `Map` 实例方法时，键引用值。这种配对是一对一的；这意味着每个键只能有一个值。因此，当我们设置另一个火箭到
    `KENNEDY_SPACE_CENTER` 键时，旧值将被替换。
- en: The `delete` method removes the entry corresponding to the `key`. Thus, after
    `delete`, that particular entry is undefined.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete` 方法删除与 `key` 对应的条目。因此，在 `delete` 之后，该特定条目是未定义的。'
- en: Creating a Map from the existing data
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从现有数据创建映射
- en: We just saw how to add values individually to maps. This can be tedious, however.
    For example, if we are working with a dataset that might be very large or unknown
    ahead of time, it would be nice to initialize a map with a function call rather
    than hundreds or thousands.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到了如何逐个向映射中添加值。然而，这可能会很繁琐。例如，如果我们正在处理一个可能非常大或事先未知的数据集，那么用函数调用初始化映射而不是几百或几千个值会更好。
- en: In this recipe, we'll take a look at how to create a new Map with the preexisting
    data.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将查看如何使用预存数据创建一个新的映射。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱假设你已经有一个允许你在浏览器中创建和运行 ES 模块的 workspace。如果你没有，请参考前两章。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序并导航到您的 workspace。
- en: Create a new folder named `11-05-create-map-from-data`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `11-05-create-map-from-data` 的新文件夹。
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.js` 的文件，该文件定义了一个名为 `Rocket` 的新 `class`，它接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE8]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create an enum of various launch sites:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个各种发射场的枚举：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a `main` function. In that function, create a map with launch site and
    rocket key value pairs:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数。在该函数中，创建一个包含发射场和火箭键值对的映射：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Python 网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`。'
- en: 'You should see the following output:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![](img/fc38f3a1-5497-4768-82ee-91df9ff7b27e.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fc38f3a1-5497-4768-82ee-91df9ff7b27e.png)'
- en: How it works...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As said before, the map is a pairing between a `key` and `value`. The `Map`
    constructor expects an `iterable` collection of key-value pairs. In the preceding
    recipe, we've passed a two-dimensional array. The outer dimension is the `iterable`
    that contains multiple entries.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，映射是 `key` 和 `value` 之间的配对。`Map` 构造函数期望一个可迭代的键值对集合。在前面的配方中，我们传递了一个二维数组。外部维度是包含多个条目的可迭代。
- en: The inner dimension is the key-value pair. The first member of the key-value
    is the launch site. The second member is the `value` (in our case, a `Rocket`).
    The `Map` constructor iterates over the entries provided and creates a pairing
    between each.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 内部维度是键值对。键值对的第一成员是发射场。第二成员是 `value`（在我们的情况下，是一个 `Rocket`）。`Map` 构造函数遍历提供的条目并在每个之间创建配对。
- en: Creating a class that wraps Map to work with specific complex types
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个包装 `Map` 以处理特定复杂类型的类
- en: When working with a large collection, it can be nice to know what kind of object
    to expect when picking out on a member. Normally, JavaScript collections are heterogeneous,
    meaning that any type can be used. In the case of `Map`, this means that either
    `key` or `value` can take on any type.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理大量集合时，了解在挑选成员时可以期望哪种类型的对象是很不错的。通常，JavaScript 集合是异构的，这意味着可以使用任何类型。在 `Map`
    的情况下，这意味着 `key` 或 `value` 可以采用任何类型。
- en: In this recipe, we'll take a look at how to create a wrapper class for `Map`
    in order to control what types are used in the `Map`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看看如何创建 `Map` 的包装类，以便控制 `Map` 中使用的类型。
- en: Getting ready
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方假设您已经有一个工作区，允许您在浏览器中创建和运行 ES 模块。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序并导航到您的 workspace。
- en: Create a new folder named `11-06-create-class-to-wrap-map`.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `11-06-create-class-to-wrap-map` 的新文件夹。
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `main.js` 的文件，该文件定义了一个名为 `Rocket` 的新 `class`，它接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a class named `RocketSiteMap` file that creates a new map and assigns
    it as an instance property in the constructor:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `RocketSiteMap` 的类文件，该文件创建一个新的映射并将其作为构造函数中的实例属性分配：
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the `set` method that checks the type of the `key` and `value` arguments.
    This method should throw an error if the argument types are incorrect, otherwise
    set the pair as an entry on the map:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个检查 `key` 和 `value` 参数类型的 `set` 方法。如果参数类型不正确，则该方法应抛出错误，否则将键值对作为映射上的条目设置：
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add a `get` method that returns the entry for `key` from the map:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个返回映射中 `key` 的条目的 `get` 方法：
- en: '[PRE14]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create an enum of various launch sites:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个各种发射场的枚举：
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a `main` function. Attempt to set various `key` and `value` pairs to
    an instance of `RocketMap`:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数。尝试将各种 `key` 和 `value` 对设置到 `RocketMap` 的实例中：
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Python 网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`。'
- en: 'You should see the following output:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![](img/8f50eb6b-b852-4fca-9bbd-dd2a8f998f54.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8f50eb6b-b852-4fca-9bbd-dd2a8f998f54.png)'
- en: How it works...
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: From the implementation of the `set` method, we can see where the types of the
    arguments are being checked. `Symbol`, as a type, doesn't have a constructor,
    so we can't use the `instanceof` operator, but the `typeof` operator returns a
    `symbol` string we can check against. The `Rocket` instances behave like other
    instances we've seen in other recipes, and can be checked like the others.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `set` 方法的实现中，我们可以看到正在检查参数的类型。`Symbol` 作为一种类型，没有构造函数，所以我们不能使用 `instanceof`
    操作符，但 `typeof` 操作符返回一个 `symbol` 字符串，我们可以检查它。`Rocket` 实例的行为类似于我们在其他食谱中看到的其他实例，并且可以像它们一样进行检查。
- en: When the incorrect type is passed as an argument to `set`, one of the conditionals
    will trigger and an error will be thrown.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当将错误类型作为参数传递给 `set` 时，其中一个条件将触发并抛出错误。
- en: Setting and deleting entries from WeakMap
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 WeakMap 中设置和删除条目
- en: We've seen how to use Maps in a variety of situations. There is another new
    class in ECMAScript that behaves in a very similar way, but has some helpful properties.
    The `WeakMap`, like `Map`, is a key-value data structure.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何在各种情况下使用 Maps。在 ECMAScript 中还有一个新的类，其行为非常相似，但有一些有用的属性。`WeakMap`，就像
    `Map` 一样，是一个键值数据结构。
- en: In this recipe, we'll take a look at how to add and remove elements from a `WeakMap`
    with the `set` and `delete` methods. And we'll also see how they differ from the
    `Map` class.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探讨如何使用 `set` 和 `delete` 方法向 `WeakMap` 添加和删除元素。我们还将看到它们与 `Map` 类的区别。
- en: Getting ready
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您已经有一个允许您在浏览器中创建和运行 ES 模块的 workspace。如果您没有，请参阅前两章。
- en: How to do it...
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的命令行应用程序并导航到您的 workspace。
- en: Create a new folder named `11-07-set-and-delete-from-weakmap`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `11-07-set-and-delete-from-weakmap` 的新文件夹。
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，定义一个名为 `Rocket` 的新 `class`，它接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE17]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create an `enum` of various launch sites:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个各种发射场的 `enum`：
- en: '[PRE18]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Create a `main` function. In that function, use the `set` and `delete` methods
    to manipulate entries of launch site to rocket. Try to use a `Symbol` as a key:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数。在该函数中，使用 `set` 和 `delete` 方法来操作发射场到火箭的条目。尝试使用 `Symbol` 作为键：
- en: '[PRE19]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您的 Python 网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![](img/27900186-3882-45ef-b827-33a0e363e680.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/27900186-3882-45ef-b827-33a0e363e680.png)'
- en: How it works...
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Like instances of `Map`, the `WeakMap` instance is a pairing between a `key`
    and `value`. However, crucially, they differ in what types can be used as keys.
    `Map` can use any type for keys. `WeakMap` can only have values of the `Object`
    type as keys. This helps `WeakMap` to be more efficient.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `Map` 的实例类似，`WeakMap` 实例是 `key` 和 `value` 之间的配对。然而，关键的区别在于可以用于键的类型。`Map` 可以使用任何类型作为键。`WeakMap`
    只能将 `Object` 类型的值作为键。这有助于 `WeakMap` 更高效。
- en: The reason that `WeakMap` can be more efficient has to do with memory management
    and garbage collection. Consider that Map entries have to be kept around for the
    lifetime of the program. Since they can use primitive types as keys (Booleans,
    strings, numbers, and Symbols), these values could be recreated, and those Map
    entries can be referenced at any time.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`WeakMap` 可以更高效的原因与内存管理和垃圾回收有关。考虑一下，Map 条目必须保留在程序的整个生命周期内。由于它们可以使用原始类型作为键（布尔值、字符串、数字和符号），这些值可以被重新创建，并且那些
    Map 条目可以在任何时间被引用。'
- en: '`WeakMap` keys, by contrast, can only be of the `Object` type. The `Object`
    values cannot be recreated; objects with the same values are still different instances.
    This means that an entry to a `WeakMap` can only be accessed as long as a reference
    to the key is available; once that reference is lost, the entry can no longer
    be accessed.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 与之相比，`WeakMap` 的键只能为 `Object` 类型。`Object` 值不能被重新创建；具有相同值的对象仍然是不同的实例。这意味着 `WeakMap`
    的条目只能在使用键的引用可用时访问；一旦该引用丢失，条目就再也无法访问。
- en: The entries are no long accessible because the key value doesn't have any existing
    references to them. This means that the entry can be released from memory (no
    sense in keeping unused values around). This allows the garbage collector to free
    up that memory.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 由于键值没有任何现有的引用，因此条目不再可访问。这意味着条目可以从内存中释放（保留未使用的值没有意义）。这允许垃圾回收器释放该内存。
- en: 'Refer to the Mozilla documentation for more information on `WeakMap`:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 Mozilla 文档以获取有关 `WeakMap` 的更多信息：
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap).'
- en: Creating a WeakMap from existing data
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从现有数据创建 WeakMap
- en: We just saw how to add values individually to a `WeakMap` and why it is different
    from a `Map`. However, it can be tedious to create a `WeakMap` one entry at a
    time.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到了如何将值逐个添加到 `WeakMap` 中，以及为什么它与 `Map` 不同。然而，逐个创建 `WeakMap` 可能会很繁琐。
- en: In this recipe, we'll take a look at how to create a new `Map` with the preexisting
    data.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看看如何创建一个新的 `Map`，其中包含现有的数据。
- en: Getting ready
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方假设你已经有一个允许你在浏览器中创建和运行 ES 模块的 workspace。如果你没有，请参阅前两章。
- en: If you are unfamiliar with the `WeakMap` class, refer to the *Setting and deleting
    entries from WeakMap* recipe.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还不熟悉 `WeakMap` 类，请参阅 *从 WeakMap 中设置和删除条目* 的配方。
- en: How to do it...
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序并导航到你的 workspace。
- en: Create a new folder named `11-08-create-weakmap-from-data`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `11-08-create-weakmap-from-data` 的新文件夹。
- en: 'Create a `main.js` file that defines a new class named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，定义一个名为 `Rocket` 的新类，该类接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE20]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create an enum of various launch sites:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个各种发射站的枚举：
- en: '[PRE21]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a `main` function. In that function, create a map with launch site and
    rocket key value pairs:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数。在该函数中，创建一个包含发射站和火箭键值对的映射：
- en: '[PRE22]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的 Python 网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![](img/d3a0a127-9c6b-4f0e-9d02-73d4cee16809.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3a0a127-9c6b-4f0e-9d02-73d4cee16809.png)'
- en: How it works...
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: No surprises here, the `WeakMap` constructor adheres to the same interface as
    `Map`. The only difference is the type restriction on `key`. The argument for
    the constructor is a two-dimensional array, where the outer dimension is the list
    of entries. The inner dimension represents the key-value pairs. The first member
    of the inner dimension is the `key`, and the second is the `value`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 没有惊喜，`WeakMap` 构造函数遵循与 `Map` 相同的接口。唯一的区别是对 `key` 的类型限制。构造函数的参数是一个二维数组，其中外维是条目列表。内维表示键值对。内维的第一个成员是
    `key`，第二个是 `value`。
- en: Creating a class that uses WeakMap to work with specific complex types
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个使用 WeakMap 与特定复杂类型一起工作的类
- en: Just as with `Map`, knowing what type to expect from the `WeakMap` collection
    can be valuable. The `key` types are very slightly restricted, but still pretty
    loose, and there is no restriction on what type the values can be.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 `Map` 一样，了解 `WeakMap` 集合中预期的类型可能会有所帮助。`key` 类型受到轻微的限制，但仍然相当宽松，对值的类型没有限制。
- en: In this recipe, we'll take a look at how to create a wrapper class for `WeakMap`
    in order to control what types are used in the `WeakMap`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看看如何创建一个包装类来控制 `WeakMap` 中使用的类型。
- en: Getting ready
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you already have a workspace that allows you to create
    and run ES modules in your browser. If you don't, refer to the first two chapters.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方假设你已经有一个允许你在浏览器中创建和运行 ES 模块的 workspace。如果你没有，请参阅前两章。
- en: If you are unfamiliar with the `WeakMap` class, refer to the *Setting and deleting
    entries from WeakMap* recipe.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还不熟悉 `WeakMap` 类，请参阅 *从 WeakMap 中设置和删除条目* 的配方。
- en: How to do it...
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your command-line application and navigate to your workspace.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的命令行应用程序并导航到你的 workspace。
- en: Create a new folder named `11-09-create-class-to-wrap-weakmap`.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `11-09-create-class-to-wrap-weakmap` 的新文件夹。
- en: 'Create a `main.js` file that defines a new `class` named `Rocket` that takes
    a constructor argument `name` and assigns it to an instance property:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main.js` 文件，该文件定义了一个名为 `Rocket` 的新 `class`，它接受一个构造函数参数 `name` 并将其分配给实例属性：
- en: '[PRE23]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a class named  `RocketSiteMap` file that creates a new map and assigns
    it as an instance property in the constructor:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `RocketSiteMap` 的类文件，该文件创建一个新的映射并将其作为实例属性分配给构造函数：
- en: '[PRE24]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the `set` method that checks the type of the `key` and `value` arguments.
    This method should throw if the argument types are incorrect, otherwise set the
    pair as an entry on the map:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个检查 `key` 和 `value` 参数类型的 `set` 方法。如果参数类型不正确，则该方法应抛出异常，否则将键值对作为映射的条目设置：
- en: '[PRE25]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add a `get` method that returns the entry for `key` from the map:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `get` 方法，该方法从映射中返回 `key` 的条目：
- en: '[PRE26]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create an enum of various launch sites:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含各种发射场枚举：
- en: '[PRE27]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a `main` function. Attempt to set various `key` and `value` pairs to
    an instance of `RocketMap`:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `main` 函数。尝试将各种 `key` 和 `value` 对设置到 `RocketMap` 的实例中：
- en: '[PRE28]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Start your Python web server and open the following link in your browser:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动你的 Python 网络服务器并在浏览器中打开以下链接：
- en: '`http://localhost:8000/`.'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/`.'
- en: 'You should see the following output:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![](img/785eef62-189a-4cb1-b69b-620af63886de.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/785eef62-189a-4cb1-b69b-620af63886de.png)'
- en: How it works...
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: From the implementation of the `set` method, we can see where types of the arguments
    are being checked. `Symbol`, as a type, doesn't have a constructor, so we can't
    use the `instanceof` operator, but the `typeof` operator returns a symbol string
    we can check against. The `Rocket` instances behave like other instances we've
    seen in other recipes, and can be checked like the others.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `set` 方法的实现中，我们可以看到正在检查参数的类型。`Symbol` 作为一种类型，没有构造函数，所以我们不能使用 `instanceof`
    操作符，但 `typeof` 操作符返回一个可以检查的符号字符串。`Rocket` 实例的行为类似于我们在其他菜谱中看到的其他实例，可以像它们一样进行检查。
- en: When the incorrect type is passed as an argument to `set`, one of the conditionals
    will trigger, and an error will be thrown.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当将错误类型作为参数传递给 `set` 方法时，其中一个条件将触发，并抛出错误。
