["```js\nPOST /attachments\nGET /attachments/:id\nDELETE /attachments/:id\n```", "```js\nclass AttachmentsService\n\n  def upload\n    # ... \n  end\n\n  def delete!\n    # ...\n  end\n\nend\n```", "```js\n# POST /messages/:message_id/attachments\ndef create\n  message = Message.find_by!(params[:message_id], user_id: \n  current_user.id)\n  file = StorageBucket.files.create(\n    key:  params[:file][:name],\n    body: StringIO.new(Base64.decode64(params[:file][:data]),\n    'rb'),\n    public: true\n  )\n  attachment = Attachment.new(attachment_params.merge!(message: \n  message))\n  attachment.url = file.public_url\n  attachment.file_name = params[:file][:name]\n```", "```js\n  attachment.save\n  json_response({ url: attachment.url }, :created)\nend\n```", "```js\nclass AttachmentsService\n\n  def upload(message_id, user_id, file_name, data, media_type)\n    message = Message.find_by!(message_id, user_id: user_id)\n    file = StorageBucket.files.create(\n      key:  file_name,\n      body: StringIO.new(Base64.decode64(data), 'rb'),\n      public: true\n    )\n    Attachment.create(\n      media_type: media_type,\n      file_name:  file_name,\n      url:        file.public_url,\n      message:    message\n    )\n  end\n\n  def delete!\n  end\nend\n```", "```js\n# POST /messages/:message_id/attachments\ndef create\n  service = AttachmentService.new\n  attachment = service.upload(params[:message_id], current_user.id, \n   params[:file][:name], params[:file][:data], \n   params[:media_type])\n  json_response({ url: attachment.url }, :created)\nend\n```", "```js\nclass AttachmentsService\n\n  BASE_URI = \"http://attachment-service.yourorg.example.com/\"\n\n  def upload(message_id, user_id, file_name, data, media_type)\n    body = {\n      user_id: user_id,\n      file_name: file_name,\n      data: StringIO.new(Base64.decode64(params[:file]\n      [:data]), 'rb'),\n      message: message_id,\n      media_type: media_type\n    }.to_json\n    uri = URI(\"#{BASE_URI}attachment\")\n    headers = { \"Content-Type\" => \"application/json\" }\n    Net::HTTP.post(uri, body, headers)\n  end\n\nend\n```", "```js\nclass AttachmentsController < ApplicationController\n  # POST /messages/:message_id/attachments\n  def create\n    service = AttachmentService.new\n    response = service.upload(params[:message_id], current_user.id,\n     params[:file][:name], params[:file][:data], \n     params[:media_type])\n    json_response(response.body, response.code)\n  end\n  # ...\nend\n```", "```js\ngroup :test do\n  # ...\n  gem 'webmock'\nend\n```", "```js\nrequire 'webmock/rspec'\nWebMock.disable_net_connect!(allow_localhost: false)\n```", "```js\nstub_request(:post, \"attachment-service.yourorg.example.com\").\n  with(body: {media_type: 1}, headers: {\"Content-Type\" => /image\\/.+/}).\n  to_return(body: { foo: bar })\n```", "```js\nbrew install docker-compose\n```", "```js\napt-get install docker-compose\n```", "```js\n FROM ruby:2.3.3\n RUN apt-get update -qq && apt-get install -y build-essential \n libpq-dev nodejs\n  RUN mkdir /pichat\n  WORKDIR /pichat\n  ADD Gemfile /pichat/Gemfile\n  ADD Gemfile.lock /pichat/Gemfile.lock\n  RUN bundle install\n  ADD . /pichat\n```", "```js\nversion: '3'\nservices:\n db:\n image: mysql:5.6.34\n ports:\n - \"3306:3306\"\n environment:\n MYSQL_ROOT_PASSWORD: root\n\n app:\n build: .\n environment:\n RAILS_ENV: development\n command: bundle exec rails s -p 3000 -b '0.0.0.0'\n volumes:\n - .:/pichat ports:\n - \"3000:3000\"\n depends_on:\n - db\n```", "```js\npackage com.packtpub.microservices;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.zuul.EnableZuulProxy;\n\n@EnableZuulProxy\n@SpringBootApplication\npublic class EdgeProxyApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(EdgeProxyApplication.class, args);\n  }\n\n}\n```", "```js\nzuul.routes.media.url=http://localhost:8090\nribbon.eureka.enabled=false\nserver.port=8080\n```"]