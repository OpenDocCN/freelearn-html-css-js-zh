- en: Creating Your Personal Portfolio with Elm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to [Chapter 3](a0913cd7-9a18-4111-8d7a-7f39f0f2a07a.xhtml), *Creating
    Your Personal Portfolio with Elm*. The goal of this chapter is to create a simple
    personal portfolio website in Elm.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will cover include:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Type Aliases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussing the Model, View, Message, Update workflow in detail (a detailed look
    into the Elm Architecture)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping and filtering Lists of values with `List.map` and `List.filter`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using elm-make-app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Bootstrap 4 styles to our app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the `HTML` module in Elm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding function signatures for HTML elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modularizing our app by splitting the views into multiple files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using case expressions to dynamically render sections of a web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving our *FizzBuzz* app using `List.map` and `String.concat`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After completing this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Work with type aliases in Elm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Know how to use the Elm architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be able to manipulate Lists in Elm with `List.map` and `List.filter`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build Elm apps with elm-make-app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modularize Elm apps into multiple files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `case` expressions for dynamic updates to your Elm-powered web pages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add custom styles to your Elm apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our portfolio with elm-make-app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start this chapter, let's remember that in [Chapter 1](7ac82686-ac2c-4001-94b1-8006f6691fdc.xhtml),
    *Why Is This a Great Time to Learn Elm?*, we have set up a workflow with the Atom
    editor. The beauty of this setup is in the fact that, although complicated, once
    the setup is complete, we have all the additional Elm tools at our disposal.
  prefs: []
  type: TYPE_NORMAL
- en: To follow the instructions in this chapter, it's not absolutely necessary to
    use the said Atom setup, but it would make it easier to work with our *Portfolio*
    app. Alternatively, you can use any editor as these steps will still work, but
    in that case you'd be working without the linter and the syntax highlighter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, to start, let''s create a folder for our new project using the console.
    For example, we can point our bash to Desktop, and make a new folder there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's change the directory to `chapter3` by using the following command
    in our console: `cd chapter3`.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 1](7ac82686-ac2c-4001-94b1-8006f6691fdc.xhtml), *Why Is This a Great
    Time to Learn Elm?*, we discussed several ways to create a new Elm app. One of
    them was using the `create-elm-app` npm package. If you don't already have the
    package installed, refer back to [Chapter 1](7ac82686-ac2c-4001-94b1-8006f6691fdc.xhtml), *Why
    Is This a Great Time to Learn Elm?*, to make sure you've set everything up correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `create-elm-app` npm package, let''s create a new Elm app, called
    `my-portfolio`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The console will print out the result of running the preceding command, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once your new Elm app is created, open the `my-portfolio` folder in the Atom
    editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Atom editor, twirl-open the `src` folder, and open the `Main.elm`
    file. Delete the existing code, and paste in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you could import the `h1` function directly, and change the
    `main` function accordingly, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The difference between the above two examples is in the functions that we are
    importing. If we don't import the `h1` function, we need to use `HTML.h1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, using your console, `cd` into the `my-portfolio` folder and run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding command will open your default browser with the URL of
    `localhost:3000`. On the page that opens, you''ll see a nicely formatted `h1`
    heading: *My Portfolio*. In the next section, we''ll give our site some more content.'
  prefs: []
  type: TYPE_NORMAL
- en: Building a static single-page portfolio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are building a simple single-page site to showcase a writer's portfolio.
    This should be a fun little exercise in which we will understand how to actually
    build websites with Elm. At the same time, we have removed a level of complexity
    as our site will consist almost entirely of text. Of course, as we progress with
    Elm, we will introduce more concepts, but for now, we'll stick with the basics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s expand our site by adding a few more sections to our home page. We will
    begin by making an error. The following code will not work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll get the following error when we save the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To resolve the issue, we need to structure the code we pass to the `main` function
    a bit differently. Basically, we need to have a wrapping HTML element for all
    our HTML. We''ll wrap everything we pass to `main` inside the wrapping `div` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can add to our portfolio using a number of other elements. To make
    them all available, we will expose everything inside the `HTML` module. The updated
    code will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: At this time, you might start to appreciate the work that `elm-format` does
    for us. No matter how bad our formatting of Elm code is, it will fix it for us
    on every save.
  prefs: []
  type: TYPE_NORMAL
- en: Before going any further, let's add a CSS framework to our single-page site. For
    this example, we will be using the most recent version of the Bootstrap framework,
    namely Bootstrap 4. In order to obtain the link to the CSS of the framework, navigate
    to the following web page: [https://getbootstrap.com/docs/4.0/getting-started/introduction/?#css](https://getbootstrap.com/docs/4.0/getting-started/introduction/?#css).
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding link points to an HTML `link` element that serves Bootstrap 4
    from a **Content Delivery Network** (**CDN**).  There is even a handy `copy` button
    on the right-hand side. Once you copy the link, navigate to the `public` folder
    of your project, and paste in the copied `link` tag in the `index.HTML` file.
    The place to paste in the `link` tag is just above the `title` tag, inside the
    `head` of the document. The mentioned section of our `index.HTML` file should
    look like this after the update:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Once that is done, save the `index.HTML` file and close it. Back in `Main.elm`,
    we need to import the `HTML.Attributes` module. We also need to specify the CSS
    classes to use. We'll begin by adding the `.card` class to the `div` that wraps
    the `ul` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After this update to our code, you will see a slight change to the `ul` element
    in our page. Let''s take it a step further by passing several Bootstrap 4 CSS
    classes to our `div`. To do that, we''ll simply replace this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s change the preceding line by adding the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: After saving `Main.elm`, you should see a nice blue background on the `ul` element,
    with the `li` items colored white.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we are using the wrong kind of Bootstrap component. We are using a
    card, but it would be much more suitable to use the `nav` component, available
    at [https://getbootstrap.com/docs/4.0/components/navs/#horizontal-alignment](https://getbootstrap.com/docs/4.0/components/navs/#horizontal-alignment),
    with the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: However, the preceding code is plain HTML, and we need to turn it into Elm code.
  prefs: []
  type: TYPE_NORMAL
- en: It is a nice exercise to try to convert the aforementioned HTML code to Elm
    code by yourself. However, there is an online converter available at: [http://mbylstra.github.io/HTML-to-elm/](http://mbylstra.github.io/html-to-elm/).
    We can simply paste in the HTML code to the left pane of the provided URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code we get back, in the right pane, will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can simply paste in the preceding code in place of the child `div`
    we had earlier. The complete code will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Before we continue, we'll have to do some housekeeping and explain a few other
    important concepts.
  prefs: []
  type: TYPE_NORMAL
- en: HTML for Elm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point in our journey through Elm, we have not referred to the official
    docs in any meaningful manner. In this section, we will focus on the official
    documentation and look at the practical ways it can help us.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, navigate to the official README for the HTML Elm package, available
    at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://package.elm-lang.org/packages/elm-lang/HTML/2.0.0/](http://package.elm-lang.org/packages/elm-lang/html/2.0.0/).
    As it says on the website, the page we have opened describes the core HTML library
    for Elm. At the current stage of our learning, the best way to grow our Elm skills
    is to look at the actual HTML package, available at: [http://package.elm-lang.org/packages/elm-lang/HTML/2.0.0/HTML](http://package.elm-lang.org/packages/elm-lang/html/2.0.0/Html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we will look at the type definitions of all the HTML functions
    we have used in this chapter: `div`, `h1`, `text`, `p`, `ul`, `li`, and `a`. Being
    able to grasp the signatures of functions we use in our programs fully will make
    it that much easier to reason about them.'
  prefs: []
  type: TYPE_NORMAL
- en: Function signatures for HTML elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All HTML elements share the same function signature pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Every HTML element takes in two lists: a List of Attributes and a List of Children
    elements. Then, they return an `HTML msg`. If the value returned from a function
    does not emit a message, that code will return the`msg` type.'
  prefs: []
  type: TYPE_NORMAL
- en: In other words, every element returns a *value* of *HTML*. This *HTML value* is
    of type `msg`, because they end up as plain HTML nodes and they will not (cannot!)
    change our app's state.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s why it is perfectly possible to just keep writing Elm''s HTML functions
    in our `main` function and never add the `view` or `update`, and still have a
    working web page. It is possible because we are rendering our code without any
    messages, so effectively, there is *never* going to be anything to update, and
    thus, we can do without the `update` function. That''s why we can replace the
    implicit type of `msg` with `a`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'By convention, `a` stands for `anything`. Since the `main` function will *never*
    return a message, we can be more explicit about it, and have the following code
    as the function signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are explicitly declaring that we will *never* return a message. The
    Type of `Never` cannot ever be constructed.
  prefs: []
  type: TYPE_NORMAL
- en: Being able to grasp the signatures of functions we use in our programs fully
    will make it that much easier to reason about them.
  prefs: []
  type: TYPE_NORMAL
- en: Function signature for text function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The text function''s signature, as we can see in the official documentation,
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Thus, the `text` function takes a `String` and returns an `HTML msg`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding our view function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will take out our `view` code from directly passing it to
    the `main` function, and instead assign it to the `view` function, which will
    then be passed to the `main` function. This way, we are beginning to make our
    code more modular and reusable.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in our portfolio app, let''s rename the `main` function to `view` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, at the very bottom of the file, we can simply add an updated `main` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'A nice thing about this setup is that we can now pass our entire `view` to
    a wrapping `div`, for example, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We can also begin to make our `view` even more modular and reusable by calling
    it from another file.
  prefs: []
  type: TYPE_NORMAL
- en: Calling the view function from another file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin, let''s make a new folder inside the `src` folder of our project.
    Inside your console, from the root of your project, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, `cd` into `View` and create a new `View.elm` file by using the touch command. 
    If you have the `atom` command available in your console, you can open the `View.elm`
    file right from your command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: What does the preceding command do? It navigates to the `View` folder via command
    line, then creates a new file called `View.elm`, and then opens it in *Atom*.
    You don't have to use the command line at all—you can complete these actions using
    the graphical user interface of your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we are now putting our `view` function in a separate file, we will
    effectively use the view function as an Elm module. Since we will be using our
    `View.elm` file as a module, we need to be explicit about all the `HTML` functions
    we will use, similar to how it works in the original `Main.elm` file. Thus, our
    `View.elm` code needs to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s update our `Main.elm` file, so that it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Save everything and the app will still work, although with a warning from our
    linter, saying:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Basically, what''s happened here is that we are importing `HTML.Attributes
    exposing (..)` in our `Main.elm`, but we are not using it at all. There are several
    ways we can deal with this. For example, we can simply pass only the `view` function
    to the `main` function. Or, we could add a class of, for example, `bg-warning`
    to our `div`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Feel free to try out other solutions to solve this warning, as it is a useful
    little exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Adding some style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To continue, let's make an intentional error. If you've seen the result of using
    the `bg-warning` class on our *Portfolio* app, you'll see that it looks like an
    orange stripe, and everything else below is just plain old white. Let's say we'd
    like to increase the height of our wrapping `div`, so that it covers the height
    of 1,000 pixels, thus coloring everything orange. To achieve this in vanilla HTML,
    we could use the `style` attribute. Let's do that with Elm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Without knowing the signature of the `style` function that Elm uses, let''s
    just try to solve it without looking at the docs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'As you''ve probably guessed, saving the preceding code results in an error.
    Let''s look at the linter message we get in Atom:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Now, we know how we need to change our `style` function. It needs to
    take one or more pairs of `Strings`, in parentheses, just like the compiler said
    previously. So, we''ll update our function like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, everything works again, and the height of our orange background has increased.
    Even better, to make sure that our screen is completely orange, let''s update
    the style again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Instead of using pixels, we are using `100vh`, that is, 100 viewport height,
    which translates to the full height of the screen. In the next section, we will
    make our view even more modular, by splitting it into multiple files.
  prefs: []
  type: TYPE_NORMAL
- en: Splitting the view into multiple files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will split our view into multiple files. We will also add
    additional content to it, so that when we are finished, we have a complete single-page
    site.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, let''s think about what part of our view code we can split into a
    separate file. It''s obvious that the `ul` function is a separate chunk of code,
    so let''s turn it into a module. In your `View` folder, open a new file and call
    it `Navigation.elm`. Next, paste in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: We have just built a new module called `View.Navigation`. Save the file, and
    go back to `View.elm`, where we will import this new module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in `View.elm`, our updated code will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Notice the change in this version of `View.elm`—we have imported the `View.Navigation`
    module, exposing everything, and we have also put the navigation function in place
    of the modularized `ul [] []` code.
  prefs: []
  type: TYPE_NORMAL
- en: We can follow this pattern to build up our entire page. The next thing that
    our page needs to have is a couple of poems.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add them, we will use the Bootstrap 4 `card` component. Thus, let''s make
    a new file in our `View` folder, call it `Poem.elm`, and add this code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, import the Poem module inside the `View.elm` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'If you look at the website right now, you will see that the poem is stretching
    the entire width of the screen, which is not the best possible look. Let''s wrap
    the poem inside a container, `div`, by updating our `View.elm` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also change our code so that we can fit more than one card on a single
    row. We''ll do that by adding another default Bootstrap 4 class, `row`. Inside
    the `row`, we''ll add three columns of equal widths. To do this, we''ll update
    the `View.elm` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If you followed all the steps correctly up to this point, you should see the
    following web page in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca7b8d1c-8fa3-4d7a-b07b-922bb29041e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we are fitting three cards nicely on a single row on our page. Before
    we continue building our page, it''s time to make it better looking. Back in `Main.elm`,
    let''s erase the `class` function, and add another CSS declaration to the `style`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This will give our page a much calmer, light gray background.
  prefs: []
  type: TYPE_NORMAL
- en: The `style` function takes a *List of 2-element tuples*. In the preceding example,
    the List consists of *two 2-element tuples*, where each element in the tuple is
    of type *String*. Thus, the first tuple is `("height", "100vh")`, and the second
    one is `("background", "#eee")`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will finish our page by adding the remaining `view`
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Completing our Writer's portfolio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will finish our Writer's portfolio. Before we continue,
    let's list what it is that we still need to add.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we mentioned at the beginning of the chapter, the completed portfolio should
    have these sections:'
  prefs: []
  type: TYPE_NORMAL
- en: About Me
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have completed the Poems section. Now, let's add the remaining sections. As
    we already know how this is done, let's batch our processes to speed up development.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, inside the `View` folder, let''s create three new files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`About.elm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Stories.elm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Contact.elm`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, let''s import all of these into `View.elm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s add some content to each of the files we just made. First, the
    `About.elm` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s update the `Stories.elm` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, let''s update the `Contact.elm` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also need to update the `View.elm` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s update the `Main.elm` file too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Our Elm-powered website should, at this point, look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c35e7f33-149b-43ac-a9ca-92b10f53e591.png)'
  prefs: []
  type: TYPE_IMG
- en: We have made a number of updates in the aforementioned files. Although all of
    these updates deal with concepts we have already covered in this book, writing
    out the preceding code in our app is a great way to reinforce what we've learned
    before moving on to more advanced topics.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code, one point of possible confusion could be the use of various
    Bootstrap 4 classes. For more information about these classes, please refer to
    the official documentation for Bootstrap 4, or to a number of titles in the Packt
    library that cover Bootstrap 4 in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Now that all our files are complete, let's save everything and look at the result. There
    are many ways in which we could have improved our *Portfolio* app. For example,
    we still need to give it a working navigation. Unfortunately, at this point of
    our journey into Elm, adding navigation to our web page would require being familiar
    with a number of relatively complex topics, which would only create confusion.
    That's why we'll leave our static page as it is.
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to experiment with changing things up in the portfolio for
    the sake of practice, remember that you can use the HTML to Elm website at [https://mbylstra.github.io/HTML-to-elm/](https://mbylstra.github.io/html-to-elm/),
    which should make things both faster and easier.
  prefs: []
  type: TYPE_NORMAL
- en: In the section that follows, rather than prematurely getting into more advanced
    concepts to build a complex navigation solution, we'll look at a simple alternative.
    This alternative will deal with using case expressions to display different sections
    of our static page on the screen. The advantage of this approach is that we'll
    reinforce how all the working parts of the Elm architecture fit together.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering sections of our page using case expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start this section from scratch. Create a new folder and run the following
    command on it: `create-elm-app alternative-to-navigation`. Once the app is ready,
    navigate to the `alternative-to-navigation` folder, open `Main.elm` in `src`,
    and erase all the code. Add the following code to `Main.elm`. The following code
    works as is, so feel free to save it and run the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Before we can improve the preceding code, we first need to make sure that we
    understand it. As we previously discussed, the first five lines deal with importing
    modules that we will be using in our application. Next, we set the `model` to
    the value of an empty string.
  prefs: []
  type: TYPE_NORMAL
- en: 'We follow this up by creating a union type of `Msg`, which can equate to only
    one of four values: `FirstButtonMessage`, `SecondButtonMessage`, and so on. Why
    the verbose `Msg` value names? Because we want to make it absolutely clear that
    the `Msg` union type holds messages. These messages will be emitted to the `update`
    function once a user clicks one of the buttons.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we write our `update` function, which takes a `message` and a `model`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reminder: The first parameter of the `update` function is the name of the `case`
    expression inside the update function.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, we pass it a `case` expression, which will execute one of the four pieces
    of code based on what message it received. So, if the `update` function receives
    the message which we aptly named `FirstButtonMessage`, the case expression will
    evaluate to the `You've clicked the first button!` string.
  prefs: []
  type: TYPE_NORMAL
- en: Next, our `view` function takes in a `model`, and we pass it a `div` function,
    which holds an `h1` and a `div` with the class of `container`. In turn, this wrapping
    `div` holds an `h2`, an `hr`, and another `div`, which holds four buttons and
    a `p` function.
  prefs: []
  type: TYPE_NORMAL
- en: Each button's attributes list takes two attributes; the first one is the class
    to use on the button, and the second one is the `onClick` event. Each `onClick`
    event will emit a different message, ready to be accepted and used by the `update`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `main` function takes in `HTML.beginnerProgram`, which was explained
    in [Chapter 2](c80584ff-97c8-411b-8ec3-a4b122121579.xhtml), *Building Your First
    Elm App*. Now that we understand just what the preceding code is doing, we can
    improve it a bit.
  prefs: []
  type: TYPE_NORMAL
- en: Improving our messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin this section, let''s look at the completed code, with all the improvements
    made to it, and after that, we''ll discuss the changes made to the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: In this iteration of our app, the focus was on improving the messages. Basically,
    we wanted each message to have some meaningful text, and in order to do that,
    we used multiline strings, which start and finish with three sets of double quotes.
  prefs: []
  type: TYPE_NORMAL
- en: While that makes it easier for us to see all the text that was typed, it does
    not give us a flexible way to style our strings better, since, as you can see
    in the preceding code, multiline quotes in Elm cannot be broken onto the next
    line by using the `newline` character.
  prefs: []
  type: TYPE_NORMAL
- en: Another change that we made involved adding a `style` function on the fourth
    button so that when a user hovers over the button, it displays a pointer instead
    of the regular cursor. This improvement makes it more obvious that the button
    is clickable.
  prefs: []
  type: TYPE_NORMAL
- en: Another improvement that we made was giving type annotations to each of our
    functions so that we can see that the `model` function takes a `String`. The `update`
    function takes a `message` and a `model` (which can be anything) and returns a
    `String`. The `view` function takes a `String` and returns an HTML `Msg`, which
    is our own custom union type, as discussed before.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the updated *Portfolio* app being served in our browser, upon clicking
    the first button on the navigation, the About Me button, we will get the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34adbf52-37b4-43d9-ae05-9f76b83bb548.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking other buttons will swiftly change what we see on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you cannot see the styles, make sure to add the Bootstrap 4 CDN link to
    `public/index.HTML` (just like we did for the *Portfolio* app):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Next, we'll improve our portfolio just a bit more, by adding a type alias of
    `Model`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the type alias of Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By adding a type alias for our Model, we'll make it easier to change our Model
    from something other than `String`, if we ever decide to do so, which makes our
    code more maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just under the module imports, at line 8 of our app, add this snippet of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s update type annotations throughout the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s obvious what we are doing in the code: we are aliasing the value of `String`
    with the type alias `Model`. It is very important to understand this and commit
    it to memory since this simple example shows exactly what type alias does and
    how it works.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Making these changes, we can now see an interesting pattern: the `update` function''s
    type annotation uses the `Msg`, with the capital `M`, while we pass it the `msg`,
    with the small `m`, since it''s the first argument.'
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we are passing the `model` with the small letter m to our `view`,
    but in our `view` function's type annotation, we are referencing the `Model` with
    the capital letter M.
  prefs: []
  type: TYPE_NORMAL
- en: What's going on here? The explanation is simple. We can think of the lowercase
    instances as simply generic labels, which can be anything. For example, consider
    the following changes to our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s replace the existing update function''s `msg` with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s replace the existing `view` function''s `model` with `a`,  as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The fact that we replaced both `msg` and `model` with the more generic `a` in
    the preceding code, and did not break it, is great. The compiler happily performs
    its duties, and we still have a working app.
  prefs: []
  type: TYPE_NORMAL
- en: Type alias is used to make it easier to read complex type annotations. Also,
    type annotations are capitalized by default, and so are union types. Thus, both
    the `Model` and the `Msg` are capitalized in our code, and we cannot change them.
  prefs: []
  type: TYPE_NORMAL
- en: Working with List.map and List.filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed in previous chapters, Elm works with immutable data structures.
    How do we then use the existing immutable data structure to find its members that
    satisfy only a certain condition or to produce different values based on existing
    values?
  prefs: []
  type: TYPE_NORMAL
- en: To achieve these two goals, we can use the `map` and `filter` functions. To
    keep things simple, we'll look at the `List.map` and `List.filter` functions,
    although `.map` and `.filter` can also be used with some other data structures
    in Elm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say our goal is to take a `List` of `numbers` and find only those that
    are divisible by 3\. To begin, let''s define a function that will take an `Int`
    and return a `Boolean` (either `True` or `False`), based on whether the number
    given to the function is divisible by 3. Navigate to [elmrepl.cuberoot.in](http://elmrepl.cuberoot.in/),
    and type the following function definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon pressing the return key, the Elm REPL will return the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `findThrees` function takes an `Int` and returns a `Boolean`. Put differently,
    the expression `num % 3 == 0` is evaluated first. Let''s say that `num` is `3`,
    making the expression look like this: `3 % 3 == 0`. This expression is true, and
    thus the expression evaluates to the value of `True`, which is of type `Boolean`.
    Next, this value is assigned to the `findThrees` function.'
  prefs: []
  type: TYPE_NORMAL
- en: In other words, if we call the `findThrees` function and give it number 3 as
    its parameter, the `findThrees` function will return the value of `True`, which
    is of type `Boolean`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s give our `findThrees` function to our `List.map`. The following
    code will not work. Try to guess why before reading the explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'If you ran the preceding code in the REPL, you''d get the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Obviously, we can''t give just a number as the second argument of the `List.map`
    function. Instead, to make this work, we need to give it a `List` of `numbers`.
    Like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, success! REPL returns the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try giving it a List of three numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, REPL returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s type a List of 10 numbers, and store it in a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding code in the REPL will return:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Looking at the preceding code, we can say that a `List` of numbers is stored
    in a variable we called `ourList`. Now, let''s give the `findThrees` function
    to the `List.map` function, and pass the `ourList` as the second argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'REPL returns a List of `Bool` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s try to replace `List.map` with `List.filter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'REPL returns a filter of `ourList`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have practiced using `List.map` a little bit, let's look at its
    anatomy. `List.map` takes two arguments, the first one being a function, and the
    second one being the actual `List`.
  prefs: []
  type: TYPE_NORMAL
- en: The function that is passed as the first argument to `List.map` is used to convert
    the second argument (the `List`) to a new `List`, based on the logic in the function.
    `List.map` does that by running the function we give it over each single member
    of the `List` provided. This behavior of `List.map` makes it a great candidate
    for improving our *FizzBuzz* app, which we will do in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, let''s run a `List.map` in our Elm-REPL. In order to be able to run
    `List.map`, we need to define a function it will use. So, let''s open Elm-REPL
    and define our custom `fizzBuzzer` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The REPL gives us back the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can map over our `List` with the help of `fizzBuzzer` and `List.map`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'What we get back in the REPL is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Feel free to play with various combinations of the building blocks we discussed
    previously. In the next section, we will revisit our *FizzBuzz* app and apply
    some of the things we learned in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting the FizzBuzz app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have covered a lot of ground in [Chapter 3](a0913cd7-9a18-4111-8d7a-7f39f0f2a07a.xhtml),
    *Creating Your Personal Portfolio with Elm*. Can we use our newfound knowledge
    to make a better implementation of the *FizzBuzz* app? Let's find out!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin with the *FizzBuzz* app as it was in [Chapter 2](c80584ff-97c8-411b-8ec3-a4b122121579.xhtml),
    *Building Your First Elm App*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: How can we go about improving the preceding code?
  prefs: []
  type: TYPE_NORMAL
- en: First, we can implement our *FizzBuzz* app as a `beginnerProgram`. We can also
    replace the `if` expressions with a `case` expression. Finally, we can introduce
    buttons and style everything nicely.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing FizzBuzz with List.map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s first list out the completed, improved `FizzBuzz` app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we start discussing what''s going on in the preceding code, let''s quickly
    update the `main` function using the forward function application operator, `|>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Seeing the `main` function written in this different notation might make it
    simpler to understand what is happening in the preceding code. After importing
    the `Main` and `HTML` modules, we declare the `ourList` variable and the `fizzBuzzCheck`
    function definition.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the `fizzBuzzCheck` function takes four parameters and returns
    a value of type `String`.
  prefs: []
  type: TYPE_NORMAL
- en: The `main` function maps `ourList` based on the logic in the `fizzBuzzCheck`
    function, then we use the `String.concat` function to take that `List` of `Strings`
    that the `List.map` produced, and turn it into a single `String`, because the
    `text` function receives a single `String` value as its parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have covered a number of important topics, namely:'
  prefs: []
  type: TYPE_NORMAL
- en: Using elm-make-app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Bootstrap 4 styles to our app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the `HTML` module in Elm, and understanding function signatures
    for HTML elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modularizing our app by splitting the views into multiple files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using case expressions to render sections of a web page dynamically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with type aliases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping and filtering Lists of values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving our *FizzBuzz* app using `List.map` and `String.concat`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will start using `Records` for our `model` and `update`
    functions as we begin building our unit conversion website. We will also learn
    about *let* expressions and how to use them, and we will wrap everything up by
    using a third-party Elm module for the first time in our code.
  prefs: []
  type: TYPE_NORMAL
