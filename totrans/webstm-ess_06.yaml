- en: Chapter 6. Immersing Yourself in Mobile App Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we went through some of the essential web frameworks,
    and learned how WebStorm can help when working with them. We have seen how JavaScript
    can be used on both the client and the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to learn how to use JavaScript, HTML, and CSS
    to develop mobile applications, and for setting up our environment to test mobile
    applications. For this, we are going to focus on the following, which are some
    of the most-used frameworks of the moment:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache Cordova
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PhoneGap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main advantage of using the HTML, CSS, and JavaScript frameworks for mobile
    development is that we can use a single codebase and a single language for all
    the platforms that we want to target. This can help a lot in terms of the amount
    of code you have to write, the technologies that you have to learn, and the speed
    of development.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to quickly start a mobile project,
    and test it across multiple devices.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your system for mobile development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive into the mobile development world, we need to prepare our system
    so that we can test the applications we create. For that purpose, we are going
    to set up some emulators and the necessary tools.
  prefs: []
  type: TYPE_NORMAL
- en: The iOS platform guide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to set up our environment to deploy apps for iOS
    devices such as iPhone and iPad. The Apple® tools, which are required to build
    the iOS applications, run only on the OS X operating system on Intel-based Macs.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Xcode and the SDK
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first tool that you need to install is Xcode. This tool runs only on OS
    X version 10.9 (Mavericks) or higher, and includes the iOS 8 SDK. If you plan
    to test your app on an actual device, it must have at least iOS 6.x installed,
    and you must also be a member of the Apple's iOS Developer Program. In this book,
    you are going to learn how to deploy the apps to the emulator, for which you don't
    need to register with the developer program.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install Xcode from the AppStore. Search for Xcode and select install:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Xcode and the SDK](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once the installation of Xcode is over, we need to install the `ios-sim` tool.
    This tool is a command-line utility that launches an iOS application in the simulator.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `ios-sim`, we need to open a terminal window, and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once the installation of `ios-sim` is done, we have all the tools needed to
    test our applications on the iOS platform.
  prefs: []
  type: TYPE_NORMAL
- en: The Android platform guide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have the iOS platform set up, we are going to show you how to set
    up the environment for the Android apps. The simplest way to get all the required
    tools is to install Android Studio, the official Android IDE. This is an IDE built
    on another popular JetBrains product called IntelliJ IDEA Community Edition. It
    is available for the Windows, Mac OS X, and Linux platforms.
  prefs: []
  type: TYPE_NORMAL
- en: To install Android Studio, download the latest version from [http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html),
    and then follow the screen instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Android Studio installs the image emulator for Nexus 5\. If you
    want to test your application on other devices, you need to install them in the
    Android Virtual Device Manager. You can find that in Android Studio under **Tools**
    | **Android** | **AVD Manager**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Android platform guide](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: All the frameworks covered in this chapter also support deployment to other
    platforms besides iOS and Android. So if you want to develop an application for
    those, you will have to install the necessary SDK or tools. We will not cover
    the steps for other platforms in this book, but you can find more information
    by searching for the SDK of each platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the other supported platforms are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Fire OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BlackBerry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firefox OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Phone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tiezen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have set up the environment for the Android and iOS platforms, we
    can start building the mobile apps.
  prefs: []
  type: TYPE_NORMAL
- en: Cordova
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *Apache Cordova is a platform for building native mobile applications
    using HTML, CSS and JavaScript* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --[https://cordova.apache.org/](https://cordova.apache.org/) |'
  prefs: []
  type: TYPE_TB
- en: Cordova is a set of JavaScript APIs that allows access to the native functions
    of the device such as the accelerometer, camera, or geolocation.
  prefs: []
  type: TYPE_NORMAL
- en: The developer, while writing an app with Apache Cordova, uses web technologies
    that are packaged using the SDK platform as the native apps. At their core, the
    apps use HTML5 and CSS3 for the rendering part and JavaScript for the logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start building applications with this framework, we need to install
    it. To do that, we need to run the following command in a terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command installs Apache Cordova globally, so it will be available
    for all future projects. Once the installation is complete, we will have to restart
    WebStorm so that it detects the newly installed framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now select **New Project** from either the welcome screen or the **File** menu.
    Select **PhoneGap/Cordova App** as a template, insert the destination folder,
    and select the path to the Cordova CLI, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cordova](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This creates and opens a new project based on the Cordova framework. The project
    comes preloaded with an example page that we can use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before testing our application in the emulators, we need to edit the run configurations.
    So select **Edit Configurations...**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cordova](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Change the name to iOS, and select **ios** in the Platform dropdown. Click on
    **OK** to save the configuration. This will create a run environment configuration
    that can be used to test the application on the iOS platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we check **Specify target** (seen in the following screenshot), we can choose
    a specific device like iPhone 6, iPhone 5s, or others:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cordova](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can run our application in the emulator by pressing *Shift* + *F10*
    or selecting the run icon next to the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cordova](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This will start the Cordova build system and run our application in the iOS
    emulator. We can also see the run log in the run section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cordova](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We are going to create a similar configuration to test our application on the
    Android platform. Select the **Edit Configuration** menu again.
  prefs: []
  type: TYPE_NORMAL
- en: With the previous iOS configuration selected, click on the **Copy Configuration**
    icon to duplicate it. In the newly-created configuration, change the name to `Android`
    and the **Platform** to **android**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Cordova](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have now created a configuration to test our application on the Android emulator.
    To run the application, press *Shift* + *F10*, or press the run icon. This starts
    the application, using the Android emulator this time.
  prefs: []
  type: TYPE_NORMAL
- en: '![Cordova](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have now created a simple app that waits for the device-ready event, and
    renders a simple screen changing the state when the device is ready. We are now
    going to build a more complex application using PhoneGap, since the differences
    between the frameworks are minimal.
  prefs: []
  type: TYPE_NORMAL
- en: PhoneGap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *Easily create apps using the web technologies you know and love: HTML,
    CSS, and JavaScript PhoneGap is a free and open source framework that allows you
    to create mobile apps using standardized web APIs for the platforms you care about.*
    |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --[http://phonegap.com/](http://phonegap.com/) |'
  prefs: []
  type: TYPE_TB
- en: PhoneGap is a distribution of Apache Cordova; so, the engine behind it is Cordova,
    but you have access to more tools such as the Developer App or remote builds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start, we need to install the framework globally, and restart WebStorm
    to pick it up. To do that, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To start a new project based on PhoneGap, select **New Project** from either
    the welcome screen or the **File** menu, and select **PhoneGap/Cordova App** as
    the template. Insert the destination folder, and select the path to the newly
    installed PhoneGap CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PhoneGap](img/00090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This creates and opens a new project based on the PhoneGap framework. This project
    comes with an example page that we are going to extend.
  prefs: []
  type: TYPE_NORMAL
- en: Before moving further, we need to change the **minSdkVersion** in the **config.xml**
    file to **10**. We do this, because, by default, Android Studio doesn't download
    the SDK for the old API versions, and we don't want to target the old version
    of Android.
  prefs: []
  type: TYPE_NORMAL
- en: To open the file, press *⌘* + *Shift* + *N*, start typing the file name (`config.xml`),
    and then select it. Once you have the file open, you can press *⌘* + *F*, and
    a search dialog will appear at the top of the page where we can type the `android-minSdkVersion`
    to find the fragment in the code.
  prefs: []
  type: TYPE_NORMAL
- en: '![PhoneGap](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Since our app uses the location, we need to add `cordova-plugin-geolocation`
    to the `config.xml` file so that PhoneGap downloads and installs it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, following the steps given in the previous section, we are going to create
    a run configuration for iOS and Android to test our application on both platforms.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will create the map example from the first chapter, but
    this time as a mobile application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since our app uses jQuery, we need to download and copy it to the `JS` folder,
    and then load it in the `index.html` file. Load the following script between the
    `cordova.js` and `index.js` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After the app `<div>`, create a new `<div>` container for the map, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to add the following styles to the `index.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now load the Google Maps API. Since the API is an external resource that will
    be downloaded, we will load it only once the device is ready and connected to
    the Internet. So open the `index.js` file, and add the following code inside the
    `onDeviceReady` handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will listen for when the device is online, and trigger the `loadGoogleMapsAPI`
    function that we are going to define next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding function checks whether the API is loaded or not; if not, it loads
    it using jQuery's `getScript` method. Considering that the API was loaded asynchronously,
    we need to use the callback to pass as a query string parameter to the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will create the `onMapsApiLoaded` callback function, where we get the
    device location. We are also going to watch for any changes in the location and
    read the location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For the location method, we have to create two callback functions and a configuration
    object. We will use the default location if there is an error while loading the
    location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Once we have the location from the device or the default one, we can create
    and update the map.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will hide the initial screen, create the map, and update our position on
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we follow the steps from the previous example for running the application
    in the iOS emulator, we will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PhoneGap](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we run the application in the Android emulator, we will get a similar screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![PhoneGap](img/00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Ionic framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *Create incredible apps.**Iconic is the beautiful, open source front-end
    SDK for developing hybrid mobile apps with web technologies.* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --[http://ionicframework.com/](http://ionicframework.com/) |'
  prefs: []
  type: TYPE_TB
- en: Ionic is a framework that focuses on the look, feel, and UI interactions. It
    is not a replacement for PhoneGap or Cordova, but an addition to these. It can
    be viewed as the Bootstrap for mobile development, since it is a collection of
    CSS styles and Angular JavaScript components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start, we need to install the framework globally and restart WebStorm
    to pick it up. To do that, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have installed the application, we need to restart WebStorm so that
    it can pick up the framework, and start a new project selecting the **PhoneGap/Cordova
    App** template and using the newly-installed Ionic CLI as the project compiler:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Ionic framework](img/00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After the project is created, we need to create the run configuration for both
    iOS and Android in the same way that we did for the previous projects; so, create
    the configuration following the steps from the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Since Ionic comes with a sample project, we can readily test the created project
    on the emulator.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Ionic framework](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This framework will create a more complex application with a built-in navigation
    that will allow us to see more screens.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Ionic framework](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you have learned how to use web technologies to create native
    mobile applications, and how WebStorm assists us in doing so: from creating projects
    quickly using templates to managing the run configurations.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to see how WebStorm can help us in analyzing
    and debugging our code.
  prefs: []
  type: TYPE_NORMAL
