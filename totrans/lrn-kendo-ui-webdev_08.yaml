- en: Chapter 8. Slider Essentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kendo UI framework includes special widgets called sliders that show a slider
    bar on a web page, so that a user can drag a handle to increase and decrease the
    slider in order to choose a value. These sliders normally have tick marks and
    labels that indicate the highest and lowest numbers available as well as range
    between them. These widgets are great visual tools to help users select numbers
    on a fixed scale, instead of just typing in a value that may or may not be appropriate.
    This could be useful in a rating system, for example, or on any input control
    where only a certain set of numbers are allowed. As you will see, Kendo UI allows
    for a good level of configurability, so you can customize the appearance and functionality
    of the UI to suit your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Slider and RangeSlider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we should cover is the two different types of slider widgets
    that Kendo UI makes available. There is the standard Kendo **UI Slider** widget
    and there is a Kendo **UI RangeSlider** widget. The Kendo UI RangeSlider widget
    is designed for more advanced scenarios where your page needs to capture a range
    (a bottom and a top number) of numbers from a user in a single page element instead
    of just a single value.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to understand that these slider widgets are special visual aids
    for use in supplying a number into an input HTML element. The final output of
    a slider widget is the number that the user has selected and this number is set
    as the value of the input HTML element underneath. This is important so that the
    input element can then be posted inside of an HTML form and used by a web server
    on the other end when the form is posted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Along these lines, be sure to follow this pattern when creating a Kendo UI
    Slider widget on your page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `kendoSlider` method needs to be bound to an actual input HTML element.
    So what about the Kendo UI RangeSlider widget? It uses two numbers but an input
    control contains only one value. How does it maintain these two separate values?
    The answer is that it uses two input elements inside of a container `div` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This way, the Kendo UI RangeSlider widget is created on a `div` element and
    it builds its range values into the two input elements inside of that container
    `div` to properly render it on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Using Slider and RangeSlider with the MVC extension methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code sample illustrates the basics of instantiating slider widgets
    by using ASP.NET MVC extension methods. The `Name` method must be called for all
    the Kendo widgets to work properly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Implementing the basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As an introduction, I have created a sample page that shows sliders and range
    sliders in a variety of configurations. We will use this same code sample in the
    following sections where we discuss the features and options. In this sample,
    we have fixed the positions of the elements using CSS absolute positioning. This
    is not necessarily best practice for web page design, but it works to show these
    controls in isolation. In this first code block, we are creating the HTML markup
    necessary to contain the Slider widgets. Each Slider is created on top of a `div`
    element with input elements inside. This will be explained more after the following
    code sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You will see that we have created four separate slider widgets on the page,
    two of them are normal slider widgets and two of them are range slider widgets.
    The following JavaScript code section is what transforms the HTML markup into
    Kendo widgets for the web page. You can also see some of the configuration options
    in these samples, which we will discuss in detail in just a few paragraphs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output from executing the preceding code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the basics](img/4346OT_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We organized the content on the page so that you could see the different slider
    widgets and their output. The two sliders on the left, one vertical and one horizontal,
    are both normal slider widgets. The two sliders on the right side, one vertical
    and one horizontal, are both range slider widgets. I also adjusted properties
    on each of them so that they are showing unique options for the sake of demonstration.
    We will cover these options as we go through the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Basic implementation using MVC extension methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following code sample illustrates how to instantiate these same sliders
    by using the ASP.NET MVC extension methods. I have only included the actual slider
    widgets, not the full HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Just as in the normal JavaScript and HTML example above, the output from these
    MVC extensions creates the same output. All four of the sliders appear with the
    same options and configuration and also have the same behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic implementation using MVC extension methods](img/4346OT_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using tooltips and pop-up texts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The slider widgets give several visual cues to the user to indicate their value
    and their control functions. There are tooltips, or hover effects, which indicate
    what the buttons at the end of the sliders will do. These tooltips are always
    present, they do not require any additional configuration or code, although they
    can be customized using the API. The following screenshot shows the tooltip text
    that appears over the **Increase** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using tooltips and pop-up texts](img/4346OT_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the tooltip text that appears over the **Decrease**
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using tooltips and pop-up texts](img/4346OT_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are also tooltip labels that indicate the value of the tick marks, if
    present, and that indicate how to interact with the slider control by dragging
    with the mouse. The following screenshot shows the tooltip text over the tick
    mark that represents the number **18**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using tooltips and pop-up texts](img/4346OT_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the tooltip text over the **drag** handle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using tooltips and pop-up texts](img/4346OT_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, when a user drags the controls of a range slider widget, the page will
    show a label that indicates the currently selected range. The following screenshot
    shows the tooltip text over the selected range, in this case, showing that the
    handles are positioned at **4** and **15**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using tooltips and pop-up texts](img/4346OT_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Learning keyboard controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is also important to note that the slider controls can also be manipulated
    using the keyboard arrow buttons and the *Page Up* and *Page Down* buttons when
    the slider widget has the focus on the page. Pressing the arrow button either
    up or down will increase or decrease the value of the slider by the number contained
    in the `smallStep` property. Pressing *Page Up* or *Page Down* will increase or
    decrease the value of the slider by the number contained in the `largeStep` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'These properties, `smallStep` and `largeStep`, can be set when the slider widget
    is instantiated in JavaScript as we saw in our earlier sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The numbers do not have to be even, they can be any whole number increment that
    makes sense for your application.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the user interface of the slider widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many of the properties of the slider widgets can be used to customize how the
    user can interact with them on the web page. The text that shows up in the tooltips
    and tick mark labels can be customized to show different text that may be more
    specific to your page. You can also customize the orientation of the sliders and
    their default values.
  prefs: []
  type: TYPE_NORMAL
- en: Tooltip customization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `tooltip` property of the slider widgets can be customized with a custom
    format or a custom template and can also be disabled completely, if unwanted.
    For example, imagine that your slider widget is intended for the user to select
    degrees (such as on a thermometer). You could customize the format of the tooltip
    to reflect that unique format. You will also see that when changing the format
    of the tooltip, the format of the data labels will automatically change to match
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The default format is `"{0}"`, so by adding the degree symbol after this, it
    will appear properly on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tooltip customization](img/4346OT_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice how the labels and the tooltip both changed to match the new format.
    Also note that I added the format using a degree symbol that was not HTML encoded,
    the Kendo UI system handled the appropriate encoding for me.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full options for configuring the `tooltip` property are displayed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You should not use both a format and a template, since both of those properties
    are designed to customize the display of the tooltips. The template, as you have
    seen in previous chapters, would need to follow the normal Kendo template syntax
    and could be used to create a highly customized tooltip for your slider control.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing tooltip options using MVC extension methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is how a configured tooltip looks when using ASP.NET MVC extension methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Remember that, just as in JavaScript, you would not set both the format and
    the template at the same time. Also note that the Kendo library has misspelled
    a word, it has "tempalte" instead of "template". Be sure to check your code here
    in case Telerik has fixed the spelling.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the default values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A slider widget can be configured to start with a specific default value. For
    a normal Kendo slider widget, this comes in the form of the `value` property either
    of the input HTML element or in the initialization of the Kendo slider widget
    in JavaScript, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Either of these methods will set the initial, or default value of the slider
    widget to the number `4`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Kendo range slider, you need to set both of the numbers for the range,
    so you need to use different properties called `selectionStart` and `selectionEnd`
    or set the value properties of both of the inputs in the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Both of these methods will set the start of the selected range to `2` and the
    end of the selected range to `8`.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing tick placement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The tick marks and data labels on the slider widgets can also be customized
    by choosing one of four supported options for their display: `topLeft`, `bottomRight`,
    `both`, and `none`. These are set through the configuration property called `tickPlacement`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Placing the tick at the top left
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `topLeft` tick placement option will place the tick marks on the left side
    of a vertical slider or on the top side of a horizontal slider.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Placing the tick at the top left](img/4346OT_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Placing the tick at the bottom right
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `bottomRight` tick placement option will place the tick marks on the right
    side of a vertical slider or on the bottom side of a horizontal slider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Placing the tick at the bottom right](img/4346OT_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Placing ticks on both sides
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `both` tick placement option will place the tick marks on both sides of
    a slider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Placing ticks on both sides](img/4346OT_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Removing the ticks entirely
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `none` tick placement option will remove all tick marks from a slider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![Removing the ticks entirely](img/4346OT_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Customizing slider orientation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You have already seen the two orientations of the slider widgets—horizontal
    and vertical, but here is a brief look at the code necessary to enable these two
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you do not set the orientation, the default orientation will be horizontal.
  prefs: []
  type: TYPE_NORMAL
- en: Learning API methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When interacting with the slider widgets, you must reference the JavaScript
    object through the `data()` method as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The enable and disable Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The slider widgets support methods for enabling and disabling the controls in
    the web page through the `enable()` and `disable()` methods. The syntax is the
    same for both slider widgets and range slider widgets, assuming you have the correct
    reference to the object through JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'A disabled slider widget appears as partially transparent, or grayed out, on
    the web page. In the following screenshot, the slider on the left is disabled
    and the slider on the right is enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The enable and disable Methods](img/4346OT_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The value of a slider widget can be both set and retrieved from the JavaScript
    API. The syntax is different between the slider and the range slider since they
    each use a different number of values internally.
  prefs: []
  type: TYPE_NORMAL
- en: Using values from a Kendo slider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Setting and retrieving values for a Kendo slider is straightforward since it
    contains only a single value, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Using values from a Kendo range slider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When setting or retrieving values from a range slider, you must communicate
    using JavaScript arrays so that you can hold both values from the slider object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Hooking into events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as with the other Kendo UI widgets, event handlers can be bound during
    object instantiation, or later through a JavaScript `bind()` method call. These
    examples will only show the instantiation code.
  prefs: []
  type: TYPE_NORMAL
- en: Using the change event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The slider widgets will fire a `change` event when the user changes the value
    of a slider either through clicking one of the arrows, moving the slider with
    the mouse, or using the keyboard controls.
  prefs: []
  type: TYPE_NORMAL
- en: The change event for a Kendo slider widget
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `change` event for a Kendo slider widget can be bound and used like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `e.value` property will contain the new value of the slider widget so that
    you can respond to the event properly in your JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: The change event for a Kendo range slider widget
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `change` event for a Kendo range slider widget can be bound as shown in
    the following code snippet this. It differs from the `change` event for the slider
    widget in that it passes an array to the event handler instead of a single value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The slide event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `slide` event is identical in syntax to the `change` event, but it only
    fires when the user moves the slider by using the mouse, it will not fire for
    keyboard events or button clicks. The preceding examples for the `change` event
    are valid for the `slide` event as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The change and slide events with MVC extension methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is how event handlers can be wired up by using ASP.NET MVC extension methods.
    Please note that the output is identical to the one outlined before; this is simply
    the syntax necessary for executing the following code using MVC. See the previous
    sections for more information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kendo UI Slider and Kendo UI RangeSlider widgets are very handy tools for
    collecting numbers for an input element in a web page. When collecting numbers
    that must fall within a specified range, these widgets are much friendlier than
    returning error messages to the user about a number being invalid. I would suggest
    using them where appropriate to make your site much more interesting for your
    users.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about the Splitter and the TreeView widgets
    that allow you to load resizable dynamic content into your pages and to organize
    hierarchical content in a tree-like display. These widgets will help you build
    powerful pages that can handle and load content on the fly and display content
    in organized patterns.
  prefs: []
  type: TYPE_NORMAL
