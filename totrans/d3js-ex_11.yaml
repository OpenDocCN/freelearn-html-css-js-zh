- en: Chapter 11. Visualizing Information Networks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章. 信息网络可视化
- en: 'In this chapter, we will examine a specific type of layout known as a **force-directed
    graph**. These are a type of visualization that are generally utilized to display
    network information: interconnected nodes.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一种称为**力导向图**的具体布局类型。这类可视化通常用于显示网络信息：相互连接的节点。
- en: A particularly common type of network visualization is of the relationships
    within a social network. A visualization of a social network can help you understand
    how different people have formed various relationships. These include links between
    others as well as the way groups of people form clusters or cliques of friends
    and how those groups interrelate.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一种特别常见的网络可视化类型是社交网络中的关系。社交网络的可视化可以帮助你理解不同的人是如何形成各种关系的。这包括其他人之间的链接，以及人们如何形成群体或朋友圈，以及这些群体如何相互关联。
- en: D3.js provides extensive capabilities for creating very complex network visualizations
    using force-directed networks. We will overview a number of representative examples
    of these graphs, cover a little bit of the theory of how they operate, and dive
    into a few examples to demonstrate their creation and usage.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js提供了使用力导向网络创建非常复杂网络可视化的广泛功能。我们将概述这些图的几个代表性示例，简要介绍它们的工作理论，并深入几个示例以展示它们的创建和使用。
- en: 'Specifically, in this chapter we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中我们将涵盖以下内容：
- en: A brief overview of force-directed graphs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 力导向图的简要概述
- en: Creating a basic force-directed graph
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基本的力导向图
- en: Modifying the length of the links
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改链接的长度
- en: Forcing nodes to move away from each other
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制节点相互远离
- en: Labeling the nodes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记节点
- en: Forcing nodes to stay in place
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制节点保持在原地
- en: Expressing directionality and type with link visuals
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用链接视觉表达方向性和类型
- en: An overview of force-directed graphs
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 力导向图的概述
- en: There are a number of means of rendering network data. A particularly common
    one, which we will examine in this chapter, is to use a class of algorithms known
    as force-directed layouts.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 网络数据有多种呈现方式。其中一种特别常见的方式，我们将在本章中探讨，就是使用一类称为力导向布局的算法。
- en: These algorithms position the nodes in the graph in a two or three dimensional
    space. The positioning is performed by assigning forces along edges and nodes,
    and then these forces are used to simulate moving the nodes into a position where
    the amount of energy in the entire system is minimized.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些算法在二维或三维空间中定位图中的节点。定位是通过沿边和节点分配力来完成的，然后使用这些力来模拟将节点移动到整个系统中能量最小化的位置。
- en: 'The following is a representative picture of a force-directed graph from a
    Wiki. Nodes are pages, and the lines between the nodes represent the links between
    the pages. Node size varies based on the number of links in/out of a particular
    node:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从维基百科中选取的力导向图的代表性图片。节点是页面，节点之间的线条代表页面之间的链接。节点的大小根据特定节点的链接数量而变化：
- en: '![An overview of force-directed graphs](img/B04320_11_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![力导向图的概述](img/B04320_11_01.jpg)'
- en: The fundamental components of a force-directed graph are the nodes in the graph
    and the relations between those nodes. The graph is iteratively laid out, usually
    animated during the process, and can take quite a few iterations to **stabilize**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 力导向图的基本组成部分是图中的节点以及这些节点之间的关系。图是迭代布局的，通常在过程中进行动画处理，并且可能需要相当多的迭代才能**稳定**。
- en: 'The force layout algorithm in D3.js takes into account a number of factors.
    A few of the important parameters of the algorithm and how they influence the
    simulation are the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js中的力布局算法考虑了许多因素。算法的一些重要参数以及它们如何影响模拟如下：
- en: '**Size (width and height)**: This represents an overall size of the diagram,
    and a center of gravity, normally the center of the diagram. Nodes in the diagram
    will tend to move towards this point. If nodes do not have an initial `x` and
    `y` position, then they will be placed randomly in a position between 0 and width
    in the `x` direction and height in the `y` direction.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大小（宽度和高度）**：这代表图表的整体大小，以及重心，通常是图表的中心。图中的节点将倾向于移动到这个点。如果节点没有初始的`x`和`y`位置，那么它们将在`x`方向的0到宽度之间和`y`方向的0到高度之间随机放置。'
- en: '**Charge**: This describes how much a node attracts other nodes. Negative values
    push away other nodes, and positive numbers attract. The larger the value in either
    direction, the stronger is the force in that direction.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电荷**：这描述了一个节点吸引其他节点的程度。负值会推开其他节点，而正值会吸引。任一方向的值越大，该方向的力就越强。'
- en: '**Charge distance**: This specifies the maximum distance over which charge
    has effect (it defaults to infinity). Smaller values assist in performance of
    the layout, and result in a more localized layout of nodes in clusters.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电荷距离**：这指定了电荷有效作用的最大距离（默认为无穷大）。较小的值有助于布局的性能，并导致节点在簇中的布局更加局部化。'
- en: '**Friction**: Represents an amount of velocity delay. This value should be
    in the range of `[0, 1]`. At each tick of the layout, the velocity of every node
    is multiplied by this value. Using a value of 0 therefore, freezes all nodes in
    place, and `1` is a frictionless environment. Values in between eventually slow
    the nodes to a point where overall motion is small enough, and the simulation
    can be considered complete as the total amount of movement falls below the layout
    threshold at which point the graph is referred to as stable.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**摩擦力**：表示速度延迟的量。此值应在 `[0, 1]` 范围内。在布局的每个时间点，每个节点的速度都会乘以这个值。因此，使用 0 的值将使所有节点保持在原地，而
    `1` 则表示无摩擦的环境。介于两者之间的值最终会减慢节点的速度，使整体运动足够小，当总移动量低于布局阈值时，模拟可以被认为是完成的，此时图被称为稳定。'
- en: '**Link distance**: This specifies a desired distance between nodes at the end
    of the simulation. At each tick of the simulation, the distance between linked
    nodes is compared to this value, and nodes move towards or away from each other
    to try to reach the desired distance.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链接距离**：这指定了模拟结束时节点之间的期望距离。在模拟的每个时间点，链接节点之间的距离与这个值进行比较，节点会向彼此移动或远离彼此，以尝试达到期望的距离。'
- en: '**Link strength**: This is a value in the range of `[0, 1]`, specifying how
    stretchable the link distance is during the simulation. A value of 0 is rigid
    and `1` is completely flexible.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链接强度**：这是一个 `[0, 1]` 范围内的值，指定了在模拟过程中链接距离的可拉伸性。0 的值是刚性的，而 `1` 是完全灵活的。'
- en: '**Gravity**: This specifies an attraction of each node to the center of the
    layout. This is a weak geometric constraint. That is, the higher the overall gravity,
    the further away it is from the center of the rendering. This value is useful
    for keeping layouts relatively centered in the diagram and in keeping disconnected
    nodes from flying out to infinity.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重力**：这指定了每个节点对布局中心的吸引力。这是一个弱几何约束。也就是说，整体重力越高，它就越远离渲染中心。此值对于保持布局在图中的相对居中以及防止断开连接的节点飞向无穷远是有用的。'
- en: We will go over enough of these parameters to get a good feel for making useful
    visualizations.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍足够的这些参数，以便能够制作有用的可视化。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More detail on all the layout parameters is available at [https://github.com/mbostock/d3/wiki/Force-Layout](https://github.com/mbostock/d3/wiki/Force-Layout).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所有布局参数的更多详细信息可在 [https://github.com/mbostock/d3/wiki/Force-Layout](https://github.com/mbostock/d3/wiki/Force-Layout)
    找到。
- en: 'In addition to the parameters that facilitate the actual layout of the nodes,
    it is also possible to use other visual in a force-directed graph to convey various
    values in the underlying information:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了有助于节点实际布局的参数外，还可以使用其他视觉元素在力导向图中传达底层信息中的各种值：
- en: The color of a node can be used to distinguish nodes of particular types, such
    as people versus employers, or by their relation, such as all persons who work
    at a particular employer, or how many degrees of separation the node is from another
    node.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点的颜色可以用来区分特定类型的节点，例如人们与雇主之间的区别，或者根据它们的关系，例如所有在特定雇主工作的个人，或者节点与另一个节点之间的分离度数。
- en: The size of a node, which generally represents the magnitude of importance of
    the node. Often the number of links influence the size of a node.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点的大小，通常表示节点的重要性程度。通常，链接的数量会影响节点的大小。
- en: The thickness of the rendering of a link can be used to demonstrate that certain
    links have more influence than others or that the links are of particular types,
    that is, highways versus railways.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接的渲染厚度可以用来表明某些链接比其他链接有更大的影响力，或者链接是特定类型的，即公路与铁路。
- en: The directionality of link, showing that the link has either no directionality
    or is one or bi-directional.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接的方向性，表明链接要么没有方向性，要么是一向或双向的。
- en: A simple force-directed graph
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的力导向图
- en: 'Our first example will demonstrate how to construct a force-directed graph.
    The online example is available at the following link:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个示例将演示如何构建一个力导向图。在线示例可在以下链接找到：
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (11.1): [http://goo.gl/ZyxCej](http://goo.gl/ZyxCej)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (11.1): [http://goo.gl/ZyxCej](http://goo.gl/ZyxCej)'
- en: All our force-directed graphs will start by loading data that represents a network.
    This example uses the data at [https://gist.githubusercontent.com/d3byex/5a8267f90a0d215fcb3e/raw/ba3b2e3065ca8eafb375f01155dc99c569fae66b/uni_network.json](https://gist.githubusercontent.com/d3byex/5a8267f90a0d215fcb3e/raw/ba3b2e3065ca8eafb375f01155dc99c569fae66b/uni_network.json).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的力导向图都将从加载表示网络的表示数据开始。此示例使用[https://gist.githubusercontent.com/d3byex/5a8267f90a0d215fcb3e/raw/ba3b2e3065ca8eafb375f01155dc99c569fae66b/uni_network.json](https://gist.githubusercontent.com/d3byex/5a8267f90a0d215fcb3e/raw/ba3b2e3065ca8eafb375f01155dc99c569fae66b/uni_network.json)中的数据。
- en: 'The following are the contents of the file at the preceding link:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在前一个链接中文件的包含内容：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The force-directed layout algorithms in D3.js require the data to be in this
    format. This needs to be an object with a `nodes` and an `edges` property. The
    `nodes` property can be an array of any other objects you like to use. These are
    typically your data items.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: D3.js中的力导向布局算法需要数据以这种格式。这需要是一个具有`nodes`和`edges`属性的对象。`nodes`属性可以是任何其他你喜欢的对象的数组。这些通常是你的数据项。
- en: The `edges` array must consist of objects with both `source` and `target` properties,
    and the value for each is the index into the `nodes` array of the source and target
    nodes. You can add other properties, but we need to supply at least these two.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`edges`数组必须由同时具有`source`和`target`属性的对象组成，每个对象的值是对`nodes`数组中源节点和目标节点的索引。你可以添加其他属性，但我们至少需要提供这两个。'
- en: 'To start rendering the graph, we load this data and get the main SVG element
    created:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始渲染图形，我们加载这些数据并创建主要的SVG元素：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The next step is to create the layout for the graph using `d3.layout.force()`.
    There are many options, several of which we will explore over the course of our
    examples, but we start with the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用`d3.layout.force()`创建图的布局。有许多选项，其中一些我们将在示例中探讨，但我们从以下选项开始：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This informs the layout about the location of the nodes and links using the
    `.node()` and `.link()` functions respectively. The call to `.size()` informs
    the layout about the area to constrain the layout within and has two effects on
    the graph: the gravitational center and the initial random position.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这通过`.node()`和`.link()`函数分别通知布局关于节点和链接的位置。调用`.size()`通知布局要约束布局的面积，并对图有两个影响：重力中心和初始随机位置。
- en: The call to `.start()` begins the simulation, and must be called after the layout
    is created and the nodes and links are assigned. If the nodes and links change
    later, it can be called again to restart the simulation. Note that the simulation
    starts after this function returns, not immediately. So, you can still make other
    changes to the visual.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`.start()`开始模拟，必须在创建布局并分配节点和链接之后调用。如果节点和链接之后发生变化，可以再次调用它来重新启动模拟。请注意，模拟是在此函数返回后开始，而不是立即开始。因此，你仍然可以对视觉进行其他更改。
- en: 'Now we can render the links and nodes:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以渲染链接和节点：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that we also chained the `.call()` function passing it a reference to the
    `force.drag` function of our layout. This function is provided by the layout object
    to easily allow us a means of dragging the nodes in the network.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们还链式调用了`.call()`函数，传递给它我们布局的`force.drag`函数的引用。此函数由布局对象提供，以便我们能够轻松地拖动网络中的节点。
- en: There is one more step required. A force layout is a simulation and consists
    of a sequence of **ticks** that we must handle. Each tick represents that the
    layout algorithm has passed over the nodes and recalculated their positions, and
    this gives us the opportunity to reposition the visuals.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 需要执行的一个额外步骤是。力导向布局是一种模拟，由一系列必须处理的**tick**组成。每个tick代表布局算法已经遍历了节点并重新计算了它们的位置，这为我们提供了重新定位可视元素的机会。
- en: 'To hook into the ticks, we can use the `force.on()` function, telling it that
    we want to listen to `tick` events, and on each event, call a function to allow
    us to reposition our visuals. The following is our function for this activity:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到tick，我们可以使用`force.on()`函数，告诉它我们想要监听`tick`事件，并在每个事件上调用一个函数，以便我们能够重新定位我们的视觉元素。以下是我们为此活动编写的函数：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: On each tick, we need to reposition each node and edge appropriately. Notice
    how we are doing this. D3.js has added to our data `x` and a `y` properties, which
    are the calculated position. It also has added a `px` and `py` property to each
    data node, which represents the previous `x` and `y` position.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个时钟周期，我们需要适当地重新定位每个节点和边。注意我们是如何做到这一点的。D3.js 为我们的数据添加了 `x` 和 `y` 属性，这些是计算出的位置。它还为每个数据节点添加了
    `px` 和 `py` 属性，代表之前的 `x` 和 `y` 位置。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can also use `start` and `end` as parameters of the `on()` method to trap
    when the simulation begins and completes.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `start` 和 `end` 作为 `on()` 方法的参数，以捕获模拟开始和完成时的状态。
- en: 'On running this, the output will be similar to the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此程序后，输出将类似于以下内容：
- en: '![A simple force-directed graph](img/B04320_11_02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![一个简单的力导向图](img/B04320_11_02.jpg)'
- en: Every time this example is executed, the nodes will finish in a different position.
    This is due to the algorithm specifying a random start position for each node.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 每次执行此示例时，节点将位于不同的位置。这是由于算法为每个节点指定了一个随机的起始位置。
- en: The nodes are very close in this example, to the point where the links are almost
    not visible. But it is possible to drag the nodes with the mouse, which will expose
    the links. Also notice that the layout is executed while you drag and the nodes
    snap back to the middle when the dragged node is released.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，节点非常接近，以至于链接几乎看不见。但您可以使用鼠标拖动节点，这将显示链接。同时请注意，布局在您拖动时执行，当拖动的节点被释放时，节点会跳回到中间。
- en: Using link distance to spread out the nodes
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用链接距离来分散节点
- en: 'These nodes in the previous example are a little too close together and we
    have a hard time seeing the edges. To add more distance between the nodes, we
    can specify a link distance. This is demonstrated by the following example:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，这些节点太靠近了，我们很难看到边缘。为了在节点之间增加更多距离，我们可以指定链接距离。以下示例演示了这一点：
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (11.2): [http://goo.gl/dd1T3O](http://goo.gl/dd1T3O)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (11.2): [http://goo.gl/dd1T3O](http://goo.gl/dd1T3O)'
- en: 'The one modification this example makes to the previous one is that it increases
    the link distance to `200` (the default is `20`):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例对上一个示例所做的唯一修改是增加链接距离到 `200`（默认为 `20`）：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This modification results in some better spacing of the nodes at the end of
    the simulation:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这种修改导致模拟结束时节点间距更好：
- en: '![Using link distance to spread out the nodes](img/B04320_11_03.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![使用链接距离来分散节点](img/B04320_11_03.jpg)'
- en: 'Drag the nodes around. It will demonstrate some of the physics in play:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 拖动节点。这将演示一些在游戏中起作用的物理现象：
- en: No matter where you move any node(s), the graph returns to the center of the
    visualization. This is the effect of gravity on the layout and of it being placed
    in the center.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论您移动哪个节点，图都会回到可视化的中心。这是重力对布局的影响，以及它被放置在中心的效果。
- en: The nodes always come together, but are always at least the link distance apart.
    The gravity attracts them to the center and the default charge, which is `-30`,
    makes the nodes push away from each other, but not enough to stretch the links
    much or make the nodes escape the center of gravity.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点总是聚集在一起，但总是至少保持链接距离。重力将它们吸引到中心，默认电荷 `-30` 使节点相互推开，但不足以拉伸链接或使节点逃离重力中心。
- en: The preceding point has an important ramification in the result of the visualization.
    The links between nodes will generally cross each other. In many network visualizations,
    it is desirable to try and make the links not cross each other, as it simplifies
    the ability to follow the links, and hence, the relationships. We will examine
    how to fix this in the next example.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前面的观点在可视化结果中有一个重要的推论。节点之间的链接通常会交叉。在许多网络可视化中，人们希望尝试使链接不交叉，因为这简化了跟踪链接的能力，从而简化了关系。我们将在下一个示例中探讨如何解决这个问题。
- en: Adding repulsion to nodes for preventing crossed links
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为节点添加排斥力以防止交叉链接
- en: The means by which we attempt to prevent crossing links is to apply an amount
    of repulsion to each of the nodes. When the amount of repulsion exceeds the pull
    of the center of gravity, the nodes can move away from this point. They will also
    move away from the other nodes, tending to expand the result graph out to a maximum
    size, with the effect of causing the links to not cross.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尝试防止交叉链接的方法是为每个节点应用一定量的排斥力。当排斥力超过重心的拉力时，节点可以远离这一点。它们也会远离其他节点，倾向于将结果图扩展到最大尺寸，从而造成链接不交叉的效果。
- en: 'The following example demonstrates node repulsion:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了节点排斥：
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (11.3): [http://goo.gl/PCHK68](http://goo.gl/PCHK68)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (11.3): [http://goo.gl/PCHK68](http://goo.gl/PCHK68)'
- en: 'This example makes two modifications to the previous example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例对之前的示例进行了两项修改：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This creates a charge with a value of `-5000`, meaning that the nodes actually
    repulse each other. There is also a smaller link distance, as the repulsion will
    push the nodes apart quite a bit, therefore stretching the links. Leaving the
    links at `200` would make the links very long.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个值为`-5000`的电荷，这意味着节点实际上相互排斥。还有一个较小的链接距离，因为排斥力会将节点推开很多，因此拉伸了链接。如果将链接保持在`200`，会使链接非常长。
- en: 'When this simulation completes, you will have a graph that looks like the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个模拟完成时，你将得到一个如下所示的图形：
- en: '![Adding repulsion to nodes for preventing crossed links](img/B04320_11_04.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![为防止交叉链接向节点添加排斥力](img/B04320_11_04.jpg)'
- en: Notice how the nodes now tried to get as far away from each other as possible!
    The links were stretched quite a bit too, event though the link distance is set
    to `1`. Links are, by default, elastic and will be stretched or compressed based
    on the charges and gravity in the system.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 注意节点现在如何尽可能地彼此远离！链接也被拉伸了很多，尽管链接距离设置为`1`。链接默认是弹性的，会根据系统中的电荷和重力拉伸或压缩。
- en: Rerun this simulation again and again. You will notice that it almost always
    converges to this same shape with the nodes in the same relative places in the
    graph (the group itself will likely be rotated a different amount each time).
    In a really rare case, there may still be a crossed edge, but the repulsion is
    set high enough to prevent this for most executions.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 重复运行此模拟。你会注意到它几乎总是收敛到这个相同的形状，节点在图中的相对位置相同（组本身可能每次都会旋转不同的角度）。在非常罕见的情况下，可能仍然存在交叉边，但排斥力设置得足够高，以防止这种情况在大多数执行中出现。
- en: Labelling the nodes
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 节点标注
- en: 'Something that has been missing in our force-directed graphs is labelling of
    the nodes so that we can tell what data the nodes represent. The following example
    demonstrates how to add labels to the nodes:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在力导向图中缺少的是节点标注，这样我们就可以知道节点代表什么数据。以下示例演示了如何向节点添加标签：
- en: Note
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (11.4): [http://goo.gl/31VfSU](http://goo.gl/31VfSU)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (11.4): [http://goo.gl/31VfSU](http://goo.gl/31VfSU)'
- en: 'The difference in this preceding example is that instead of representing a
    node by a single circle SVG element, we represent it by a group which contains
    both a circle and a text element:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在此先前的示例中，与之前不同之处在于，我们不是用一个单独的圆形SVG元素来表示一个节点，而是用一个包含圆形和文本元素的组来表示：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then we need one more change during the processing of the tick event. Since
    we now need to position an SVG group instead of a circle, this code needs to translate
    the group into position instead of using the `x` and `y` properties:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在处理tick事件的过程中，我们需要进行一个额外的更改。由于我们现在需要定位SVG组而不是圆形，因此此代码需要将组转换到位置而不是使用`x`和`y`属性：
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The result of this example now looks like the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的结果现在看起来如下：
- en: '![Labelling the nodes](img/B04320_11_05.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![节点标注](img/B04320_11_05.jpg)'
- en: Making nodes stick in place
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使节点固定在位置
- en: A common—and frustrating—issue when examining nodes in a force network is that
    when you move one node of a clump of other nodes to see it better and then let
    it go, it goes back to where it was. I'll bet you've experienced this madness
    already just while using these examples.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查力网络中的节点时，一个常见且令人沮丧的问题是，当你移动一簇其他节点中的一个节点以更好地查看它，然后释放它时，它会回到原来的位置。我敢打赌，你已经在使用这些示例时经历过这种疯狂。
- en: 'The can be remidied by using a concept known as making the nodes sticky. The
    following example demonstrates this in operation:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过使用一个称为使节点粘性的概念来解决。以下示例演示了这一操作：
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (11.5): [http://goo.gl/nmQu3d](http://goo.gl/nmQu3d)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (11.5): [http://goo.gl/nmQu3d](http://goo.gl/nmQu3d)'
- en: Now, when you drag a node, it will stay where you leave it. Nodes that are fixed
    in place will change to have a thick black border. To release a node, double click
    it and it will be put back into the force layout.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你拖动一个节点时，它将停留在你放置的位置。固定位置的节点将变为具有粗黑边框。要释放一个节点，双击它，它将被放回力布局中。
- en: 'The following image shows this with three nodes fixed in place:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了三个固定位置的节点：
- en: '![Making nodes stick in place](img/B04320_11_06.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![使节点固定在位置](img/B04320_11_06.jpg)'
- en: 'Now let''s examine the modifications needed to make this work. This works by
    adding a few function chains to our code to create the circles:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来检查需要进行的修改。这是通过向我们的代码中添加几个函数链来创建圆圈来实现的：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When the circle is first created, in addition to having its fill color specified,
    it will also have a stroke color of black but of width `0`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当圆圈首次创建时，除了指定填充颜色外，它还将有一个黑色但宽度为 `0` 的描边颜色。
- en: Then, instead of using `.call(force.drag)`, we replace that with a custom drag
    implementation. At the start of the drag, the code sets a property, `fixed,` on
    the data object to `true`. If the force layout object sees that the object has
    this property, and its value is `true`, then it will not attempt to reposition
    the item. And then, the border is set to be three pixels in width.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们不再使用 `.call(force.drag)`，而是用自定义的拖动实现来替换它。在拖动开始时，代码将数据对象上的属性 `fixed` 设置为
    `true`。如果力导向布局对象看到该对象具有此属性，并且其值为 `true`，则它将不会尝试重新定位项目。然后，边框被设置为宽度为三像素。
- en: The last modification is to handle the `dblclick` mouse event, which will set
    the fixed property to `false`, releasing the node to be part of the layout and
    then hiding the thick border.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的修改是处理 `dblclick` 鼠标事件，该事件将固定属性设置为 `false`，使节点成为布局的一部分，然后隐藏粗边框。
- en: Adding directionality markers and style to the links
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为链接添加方向性标记和样式
- en: Relationships between a node can be one-way or bi-directional. The code we have
    written so far assumed one-way, or perhaps, non-directional. Let's now look at
    how we can express the direction in the relationship by adding arrow heads to
    the lines.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 节点之间的关系可以是单向的或双向的。我们之前编写的代码假设是单向的，或者可能是非定向的。现在让我们看看我们如何通过在线条上添加箭头来表达关系的方向。
- en: The example we will create will assume that each entry in the edges collection
    of the data represents a one-way link from the source to the target. If there
    is a bi-directional link, there will be an additional entry in `edges` with the
    source and target reversed.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的例子将假设数据中边集合的每个条目代表从源到目标的一个单向链接。如果存在双向链接，则 `edges` 中将有一个额外的条目，其源和目标被反转。
- en: The example will use the data from [https://gist.githubusercontent.com/d3byex/5a8267f90a0d215fcb3e/raw/8469d2a7da14c1c8180ebb2ea8ddf1e2944f990c/multi_network.html](https://gist.githubusercontent.com/d3byex/5a8267f90a0d215fcb3e/raw/8469d2a7da14c1c8180ebb2ea8ddf1e2944f990c/multi_network.html),
    which has several bi-directional links added as well as a `type` property to specify
    the type of the relationship.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子将使用来自 [https://gist.githubusercontent.com/d3byex/5a8267f90a0d215fcb3e/raw/8469d2a7da14c1c8180ebb2ea8ddf1e2944f990c/multi_network.html](https://gist.githubusercontent.com/d3byex/5a8267f90a0d215fcb3e/raw/8469d2a7da14c1c8180ebb2ea8ddf1e2944f990c/multi_network.html)
    的数据，该数据添加了几个双向链接以及一个 `type` 属性来指定关系的类型。
- en: 'The edges collection in this data is the following. The nodes have not changed:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个数据中的边集合如下。节点没有变化：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'bl.ock (11.6): [https://goo.gl/hucTe1](https://goo.gl/hucTe1)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 'bl.ock (11.6): [https://goo.gl/hucTe1](https://goo.gl/hucTe1)'
- en: 'The following image depicts the result of this example:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图像展示了这个例子的结果：
- en: '![Adding directionality markers and style to the links](img/B04320_11_07.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![为链接添加方向性标记和样式](img/B04320_11_07.jpg)'
- en: Let's see how the code goes about creating this visualization.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看代码是如何创建这个可视化的。
- en: 'The first thing that is changed in this example is that it uses styles to color
    the different types of links:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，首先改变的是它使用样式来为不同类型的链接着色：
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The code to load the data and to set up the SVG element and the force layout
    is the same as the last example. The other difference is that the code needs to
    determine the specifc link types as they will be used for markers and styles:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 加载数据和设置 SVG 元素以及力导向布局的代码与上一个例子相同。另一个区别是代码需要确定特定的链接类型，因为它们将被用于标记和样式：
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, there are markers created for each of the link types. These will render
    a curved path with an arrow head on each end, created by the last chained function
    to set the `d` attribute:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为每个链接类型创建了标记。这些将通过设置 `d` 属性的最后一个链式函数来渲染带有箭头的曲线路径：
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The next step is to create the edges:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建边：
- en: '[PRE14]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Instead of using a line, the code now uses a path. The `d` property of the path
    is not specified at this time. It will be set at every tick of the simulation.
    This path references one of the styles by using the type as part of the class
    name, and the `marker-end` attributes specifies which marker definition to use
    for this segment.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 代码现在使用路径而不是线条。路径的 `d` 属性在此时尚未指定。它将在模拟的每个刻度时设置。此路径通过将类型作为类名的一部分来引用一种样式，而 `marker-end`
    属性指定了用于此段落的标记定义。
- en: 'The circles are created in the same manner as the previous example, and so
    is the text. The last change is that the tick handler is modified to not only
    reposition the nodes, but to also regenerate paths based on arcs:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 圆圈和文本的创建方式与上一个示例相同，最后的变化是将刻度处理程序修改为不仅重新定位节点，而且根据弧线重新生成路径：
- en: '[PRE15]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explained how to use D3.js for generating force-directed
    graphs. These types of graphs are some of the most interesting types of graphs
    and can be used to visualize large sets of interconnected data such as social
    networks.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们解释了如何使用 D3.js 生成力导向图。这类图是一些最有趣的图之一，可以用来可视化大量相互连接的数据，例如社交网络。
- en: The chapter started by going over the basic concepts of creating a graph, stepping
    through an example that progressively refined the graph, while making the effort
    to demonstrate how several of the parameters effect the result of the graph.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 本章从介绍创建图的基本概念开始，通过一个逐步改进的示例来展示如何几个参数影响图表的结果。
- en: We then covered several techniques for enhancing and making the graphs more
    usable. These included labeling nodes with text, replacing nodes with images,
    and styling links to show direction and type.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后介绍了几种增强和使图表更易于使用的技巧。这些包括用文本标记节点、用图像替换节点以及为显示方向和类型而着色链接。
- en: In the next chapter, we will cover using D3.js for creating maps. We will also
    learn quite a bit about GeoJSON and TopoJSON, both of which, when combined with
    D3.js, allow us to create complex visuals based on geographic data.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何使用 D3.js 创建地图。我们还将学习很多关于 GeoJSON 和 TopoJSON 的知识，这两者结合 D3.js 可以让我们基于地理数据创建复杂的视觉图表。
