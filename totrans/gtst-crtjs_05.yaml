- en: Chapter 5. Utilizing Caching in EaselJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know, after developing an animation, it's very important to work on the
    performance issues to make it smooth. The performance of rendering animations
    varies between browsers but there are some techniques like caching that can simply
    improve the performance. In this chapter, we will learn how to make better and
    smooth animations or drawings using the *EaselJS* caching system of `DisplayObject`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the caching feature of EaselJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the cache method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example of using cache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using cache in animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using cache with Bitmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the caching feature of EaselJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In EaselJS, when you have a shape, or even better, an instance of the `DisplayObject`
    that doesn't change frequently, it's better to use the *cache* function to cache
    it in a different `Canvas` element. This technique will help you use EaselJS in
    the drawing process to animate and render animations or drawings smoothly, as
    the shapes don't need to be rendered with every tick.
  prefs: []
  type: TYPE_NORMAL
- en: It is basically the main idea of using the `cache` method in the `DisplayObject`
    class. All you need to do is learn more about using the cache method in EaselJS.
    In further sections, we will go through methods, their usage, and how to create
    animations with caching.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the cache method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to understand how caching a `DisplayObject` works in EaselJS, we take
    the example of an imaginary canvas area so that the cached elements get rendered
    into it and each time you need to update the target shape, you call the `cache`
    method again.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the definition of the `cache` method inside the `DisplayObject`
    class in the following piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Draws the display object into a new canvas, which is then used for subsequent
    draws. For complex content that does not change frequently (ex. a Container with
    many children that do not move, or a complex vector Shape), this can provide for
    much faster rendering because the content does not need to be re-rendered each
    tick. The cached display object can be moved, rotated, faded, etc freely, however
    if its content changes, you must manually update the cache by calling `updateCache()`
    or `cache()` again. You must specify the cache area via the x, y, w, and h parameters.
    This defines the rectangle that will be rendered and cached using this display
    object's coordinates.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This has been taken from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.createjs.com/Docs/EaselJS/classes/DisplayObject.html#method_cache](http://www.createjs.com/Docs/EaselJS/classes/DisplayObject.html#method_cache)'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the `cache` method accepts four mandatory and one optional parameter.
    The first and second parameters define the *coordinate* of the cache area; the
    third and fourth parameters define the *width* and *height* of the cache area.
    Using the last parameter, you can define the *scale of shape* inside the cache
    area. By default it is set as `1`, but you can change it.
  prefs: []
  type: TYPE_NORMAL
- en: Example of using cache
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now it''s time to see an example of using the `cache` method in EaselJS. The
    following piece of code uses the `cache` method to render a circle into a canvas
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we created a shape using the `Shape` class, filled it with
    red color, and then rendered it at `(0, 0)` with a radius of `25`. In the third
    line, you will notice the use of the `cache` method. In this line, a *cache area*
    is created at `-25`, `-25` with a width and height of `50`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to update the target shape (the shape variable in the above example),
    you need to call the `cache` or `updateCache` method with all new parameters again.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete source code and result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The above source code is the completed example of using the cache method in
    EaselJS. The result of this source code is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example of using cache](img/0260OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using cache in complex shapes and animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Caching in EaselJS comes in handy when you have a complex shape or animation
    in your canvas. In most cases, complex shapes with details shouldn't get rendered
    in every tick. So you can simply use the cache method to cache it in order to
    prevent rendering overhead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will see a complex example from the EaselJS library (source: [https://github.com/CreateJS/EaselJS/blob/master/examples/Cache.html](https://github.com/CreateJS/EaselJS/blob/master/examples/Cache.html))
    and the effect of using a cache technique on that. In this animation, we will
    create about *200* complex circles and move them on each tick. There is a checkbox
    on the page that controls the enabling or disabling of caching for all shapes
    inside the canvas area using `cache` and `uncache` methods.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows us a preview of our animation (notice the checkbox):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using cache in complex shapes and animations](img/0260OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are three main functions that handle this animation and all the logics;
    `init`, `tick`, and `toggleCache`. We will discuss each one of them separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first lines of the code, we will use the following variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The first variable holds the canvas element, the second one is used for the
    `Stage` object, the `shape` variable is used to draw shapes on the stage, and
    `circleRadius` and `rings` are used for basic settings of circles. `circleRadius`
    is used to define the radius of each circle and `rings` is used to define the
    number of rings inside each circle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows the the basic `init` method that draws all shapes
    and prepares the stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This code is used to create the stage and all shape objects. In lines 3 and
    4, the `Stage` object is created. In line 8, we defined random colors for circle
    rings. After that, we have used a *for-loop*, which draws 200 different circles
    with random positions on the stage. We have another for-loop to draw rings inside
    the circles in line 12.
  prefs: []
  type: TYPE_NORMAL
- en: In our animation, we have a label that indicates the **Frames per Second** (**FPS)**
    rate on each tick. So, in lines 28 to 31, we have defined our label properties.
    In line 34, the `Ticker` class is created and in line 36, the FPS of the animation
    is set to `50`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the `init` function, we have a tick function that will be called on each
    tick by EaselJS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The main job of the above `init` function is to change the position of all the
    circles on the stage on each tick, set the current FPS rate to the label, and
    then update the stage. The reason there is `-1` in line 4 is to exclude the label
    object from `children`; keep in mind that we only need to change the position
    of all the circles.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last function is the `toggleCache` function. This method enables or disables
    caching for all circles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This function is called only when you check or uncheck the checkbox on the page
    so it enables or disables caching for all circle objects on `stage`. There is
    a for-loop that iterates over all circle shapes and calls the `cache` or `uncache`
    method according to the status of the checkbox. Consequently, the caching for
    circle shapes will be enabled or disabled.
  prefs: []
  type: TYPE_NORMAL
- en: By clicking on the checkbox, you can obviously see that the animation rendering
    gets smoother when caching is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you can find the complete source code of our animation on the Packt
    website.
  prefs: []
  type: TYPE_NORMAL
- en: Caching Bitmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will utilize the `cache` method with Bitmap and `AlphaMaskFilter`
    to develop a reflection effect in EaselJS. The target is to load an image and
    create a `Bitmap` class to draw the image. Then, clone the `Bitmap` image, change
    the rotation and add a gradient background, and use `AlphaMaskFilter` to create
    the reflection effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is a preview of the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Caching Bitmap](img/0260OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the source code of this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As seen in previous examples, firstly, we created the `Stage` class. Then, in
    order to load the image, we used the `Image` class and passed the address of the
    image to the `src` property. The `Image` class has an `onload` event, which helps
    developers know when the image is loaded completely. We used this event to execute
    other parts of the application correctly.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we used a `Bitmap` class and passed the image parameter from the
    `Image` class to it. Because we need the width and height of the picture, we saved
    them into two different variables called `width` and `height`. At this moment,
    we have the first picture but we should have one more picture to create the reflection
    effect. So, we used the `clone` function to duplicate the image. In order to change
    the rotation, scale, and coordination of the second image, we changed the `regY`,
    `rotation`, `y`, and `scaleX` properties.
  prefs: []
  type: TYPE_NORMAL
- en: After that, a new shape is created using the `Shape` class. This is the mask
    layer that will be used for the `AlphaMaskFilter`. Then, we added a linear background
    to it to create the reflection effect and cached it using the `cache` function.
    Finally, an `AlphaMaskFilter` is added to the second picture (a cloned `Bitmap`
    class) and this shape is used as the mask layer. The second picture is also cached
    again. Both pictures are added to `Stage` using the `addChild` function and `Stage`
    is also updated with the `update` function.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to work with the `cache` method in EaselJS
    to create better drawings and animations on the canvas. The reason we use caching
    in EaselJS is to provide better and faster animation rendering in browsers and
    also use fewer resources while rendering the animations or drawings. In the next
    section, we discussed about using the cache method with the `Bitmap` class to
    create the reflection effect.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about applying filters in canvas with EaselJS,
    which is one of the best features of EaselJS, and you can make fantastic stuff
    with this feature.
  prefs: []
  type: TYPE_NORMAL
