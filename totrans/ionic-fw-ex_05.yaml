- en: Chapter 5. The London Tourist App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we created an application called the Bucket-List application
    that enabled us to create a list of interesting things we wanted to do in our
    lifetime. In this chapter, we will create a new application called "The London
    Tourist" application. It is an application that will display a list of top tourist
    attractions in the city of London in England. We will build this application with
    a new type of Ionic template called the side menu template. We will also be using
    the Angular `$http` service to query our data via Ajax.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the London Tourist App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: London is the largest city in England and it is a city that is well known to
    attract tourists around the world. The city is very urban but it has many historical
    and non-historical tourist attractions. With this large number of attractions,
    it can be difficult to pick out the best places to go. This is the entire idea
    behind the London Tourist App as it will provide users with five handpicked destinations
    that tourists visiting London can actually visit. These destinations will be stored
    in a JSON file in our project that we will be querying via AJAX and populating.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the London Tourist app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin the process of creating our app, we are going to start by creating
    a brand new Ionic application. So far in this book, we have learned to create
    a new Ionic application using the blank template. For the application we are about
    to build, we are going to use a new type of Ionic template to create the application.
    We are going to be using the side menu template to create our London Tourist app.
  prefs: []
  type: TYPE_NORMAL
- en: The side menu app design
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You might not be familiar with what the side menu template looks like. In fact,
    the side menu design for mobile applications is very common in mobile app development.
    It involves having the ability to slide from the left or right edges of a mobile
    application to reveal more options, normally more menu options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The side menu app design](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The side menu design technique is one that is used in a lot of contexts, both
    on mobile and on the web. Normally, you will see an icon positioned either on
    the far upper-right or upper-left, indicating that you can swipe or click that
    icon to reveal the extra menu options. This icon is normally referred to as the
    hamburger menu icon.
  prefs: []
  type: TYPE_NORMAL
- en: The Ionic framework actually comes built-in with a side menu template that automatically
    creates a side menu application for us with some useful boilerplate code. We will
    be using this template to create our London Tourist Application.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Ionic side menu template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To begin developing our London Tourist Application, we will begin by using
    the Ionic CLI to create the app. You can do this by running the following command
    from a terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will shorten the name of our app from London Tourist App to LTA to make it
    easier to type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command will create a new Ionic application called LTA using the default
    Ionic side menu template.
  prefs: []
  type: TYPE_NORMAL
- en: Seeing the LTA side menu app in action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As soon as your LTA app is created, you can simply change your directory into
    the app from the terminal and run it on your computer using the `ionic serve`
    technique. You can do this by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change directory to app:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run using the `ionic serve` technique:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to use Chrome and emulate to a device of your choice with the Chrome
    emulation tools as taught in previous chapters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You should see a screen that looks something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Seeing the LTA side menu app in action](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding screenshot, the side menu app we have just
    created contains some pre-rendered content.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the LTA side menu app's code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, we are going to have a look at the code of the LTA app based on the side
    menu template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the LTA side menu app''s code](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, I will require you to fire up the LTA project you have just created in
    your favorite IDE. The first thing you will notice is the folder structure that
    you are already used to from previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: The index.html file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now, focus on the `www` folder and open the `index.html` file. A look through
    this file should show you something similar to what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The index.html file](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To get to this file from the root folder, navigate to `www/index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: A look at this file will show you some things we have seen from previous projects
    in this book. For example, you can see some CSS and JS references to the Ionic
    `styles` and `script` files respectively. You will also see from the `body` tag
    that a generated Angular module called `starter` is being instantiated using the
    `ng-app` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Pay close attention to the `<ion-nav-view>` tags within the `<body>` tags. This
    is an Ionic element that is used to specify the view to which the entire app is
    injected into. It is similar to the `ng-view` feature of Angular but has more
    powerful features. It also automatically handles navigation for us within our
    Ionic app. You need not pay a great deal of attention to this part of the code
    anymore but just have it at the back of your mind that `<ion-nav-view>` is where
    all content gets injected in, and acts like a wrapper for our app's content.
  prefs: []
  type: TYPE_NORMAL
- en: The menu.html file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The next file we are going to explore is the `menu.html` file. This file is
    probably the most important file at this moment as it contains most of the generated
    code for the side menu parts of our app. To have a look at this file, navigate
    to the `menu.html` file which can be found by navigating into the folder called
    `templates` under the `www` folder. Here is the path: `www/templates/menu.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have successfully done this, you should see a file that closely resembles
    what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The menu.html file](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The <ion-side-menus>element
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The first thing you should pay attention to is the `<ion-side-menus>` element.
    Think of this element as a container for any side menu application. It allows
    us to specify what the main content area will be via the `<ion-side-menu-content>`
    element and also allows us to specify the side menus via the `<ion-side-menu>`
    elements. There can be more than one side menu specified within the `<ion-side-menus>`
    elements and we have the ability to specify whether the menu is placed on the
    left, right, or even both. There are a lot of cool and powerful controls that
    the `<ion-side-menus>` elements let us utilize to control its containing items.
    For now, we will focus on trying to learn more about the child elements that are
    needed to work with the `<ion-side-menus>` elements. These are the `<ion-side-menu-content>`and`<ion-side-menu>`
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: The <ion-side-menu-content>element
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'This element is what houses the main content area or the visible part of the
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The <ion-side-menu-content>element](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, which is a view of our LTA app, the part you see
    is a representative of`<ion-side-menu-content>`. Let''s have a closer look at
    the code of `< ion-side-menu-content>` to see how it actually works in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The <ion-side-menu-content>element](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Within `<ion-side-menu-content>`, you can see two direct child elements.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, you can see the `<ion-nav-bar>` element which is used to build the
    navigation buttons of the main content area with the`<ion-nav-buttons>` element
    as its child element. For example, within these`<ion-nav-buttons>` elements, you
    can see a navigation button on line 8-9, which has a `menu-toggle` attribute of
    value `left`. This is simply saying that when this button is tapped, the left-sided
    side menu should be triggered. Remember that there can be up to two side menus
    with one being on the left and one being on the right in a side menu app.
  prefs: []
  type: TYPE_NORMAL
- en: The second direct child element is the`<ion-nav-view>` element on line 12 from
    the preceding screenshot. We talked about this same element earlier when we had
    a look at the `index.html` file. This element is a placeholder for where the actual
    content is injected. This particular `<ion-nav-view>` element has a `name` attribute
    with the value of `menuContent`. This attribute is important as it is used like
    a value to uniquely identify`<ion-nav-view>`.
  prefs: []
  type: TYPE_NORMAL
- en: With all that said, we have now lightly touched on the `<ion-side-menu-content>`
    element and its main functions. Always think of this element as the element that
    houses the main content area of your side menu application.
  prefs: []
  type: TYPE_NORMAL
- en: The <ion-side-menu>element
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The `<ion-side-menu>` element is an element that we use to specify the side
    menu of our app. Just like the `<ion-side-menu-content>` element, it lives as
    a direct child of the `<ion-side-menus>` element. There can be up to two`<ion-side-menu>`
    elements within the`<ion-side-menus>` element, with only one being on each side.
    Let's have a closer look at the code of`<ion-side-menu>` of our LTA application.
  prefs: []
  type: TYPE_NORMAL
- en: '![The <ion-side-menu>element](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot is from our `menu.html` file, and it showcases the
    code of `<ionic-side-menu>` from our LTA application. If you look at it closely,
    you will notice that opening tag of our `<ion-side-menu>` element has a `side`
    attribute with value `left`. This is basically saying that we want this particular
    side menu to be on the left-hand side. Remember that we can have up to two side
    menus in our app, and one can be positioned on the left and another on the right,
    but two side menus cannot be positioned on the same side. We can also see that
    this `<ion-side-menu>` has two direct child elements. These child elements are
    `<ion-header-bar>` and `<ion-content>`. `<ion-header-bar>` is an element used
    to construct the header of a side menu. If you have a look at the following screenshot
    of our side menu, you should see a representation of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The <ion-side-menu>element](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, you can see the header with the title `LEFT`
    as reflected in the code as an`<h1>` element.
  prefs: []
  type: TYPE_NORMAL
- en: The second child element we can see from the code is the `<ion-content>`element.
    Think of this element as what houses the content area below the header of the
    side menu. Basically, this is anything below the header. `<ion-content>` could
    contain any HTML code we want but in this case, it contains`<ion-list>` which
    is something that we used to build our Bucket-List application from [Chapter 4](part0024_split_000.html#MSDG2-798adc86542b445d8a1bb648e10b6714
    "Chapter 4. Ionic Components"), *Ionic Components*. You can also see a reflection
    of this code on the screenshot from when we ran our application.
  prefs: []
  type: TYPE_NORMAL
- en: With that said, you can see that we have successfully had a brief look at what
    the`<ion-side-menu>` element entails and how the side menu template of Ionic functions.
    The next step is for us to actually go ahead and build our LTA application in
    full scale now.
  prefs: []
  type: TYPE_NORMAL
- en: Developing the LTA application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are now equipped with the know-how on how to code our LTA side menu based
    application. Remember that the idea behind our application is to have some of
    our favorite tourist destinations listed in our app. In a normal scenario, we
    would query this data from a real API. But for the sake of simplicity, we will
    mimic this API request by making a request to a local JSON file that would act
    like a real database with the information we need.
  prefs: []
  type: TYPE_NORMAL
- en: The local JSON database
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As discussed earlier, we are going to create a JSON file that will act like
    a real-life API containing our destinations. This local file will contain five
    top tourist destinations in London. The first thing we will need to do is to create
    this file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the local JSON database file
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'If you do not have your LTA application open, make sure you open it in your
    favorite IDE. Now, go ahead and create a new JSON file called `sites.json` within
    the `www` folder of your project. Make sure you name the file as the `.json` extension
    in order for it to be parsed as a JSON file. Your directory structure should look
    similar to what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the local JSON database file](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With that done, you have successfully created your local JSON file representing
    your database for your tourist sites.
  prefs: []
  type: TYPE_NORMAL
- en: Populating the JSON file
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Now we are going to populate the JSON file with some data. This data will be
    the data of five top tourist attractions in the city of London. The following
    is a JSON array that represents the content of our local JSON database. You should
    copy all the content of the following piece of code into your `sites.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding piece of code is a JSON array that represents four top destinations
    in London as JSON objects. Each object representing a site has three properties.
    These properties are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ID**: A unique identifier for the site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name**: The name of the Tourist site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Some small information about the site.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By now, we have successfully completed the creation of our JSON local database.
    The next step is to see how we can actually render these items and query the database.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the view
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We have created our app and we have the data for the application. Before we
    query data, we first need to design how the data will look when rendered. For
    this very task, we will call on an old friend of ours in the face of`<ion-list>`.
    We will use`<ion-list>` to render a list of tourist attractions from our JSON
    database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently if we run our application, the first page we see is the playlist
    application, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing the view](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is because by default the page is specified in the `app.js` file by Angular
    as the root page of our app. We will keep things simple and change the contents
    of this playlist page and design the view of our LTA application on it. From your
    LTA project folder, navigate into the `www` folder and look into the `templates`
    folder. Within the `templates` folder, there is a `playlists.html` file. This
    is the file that contains the code for our playlist page shown in the preceding
    screenshot. Open this file and you should see some code that closely resembles
    what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing the view](img/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `playlists.html` file from the root folder of your LTA project will have
    a path `www/templates/playlists.html`.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we will want to do here is to change the name of the title of
    our view. Currently, the view as seen from the screenshots previously, has a title
    `Playlists`. This is specified by the `view-title` attribute of the opening`<ion-view>`
    element. This `view-title` attribute currently has a value `Playlists`. Change
    this to `London Sites`. This is to ensure that the title reflects the mission
    of our app, which is to show the top London tourist sites.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second thing we need to do is to edit the code for`<ion-list>`. Replace
    the `<ion-list>` code with the one provided in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have done this correctly, your code should now closely resemble what
    we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing the view](img/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With this done, we have now completed the process of designing our UI. The next
    step is to go ahead and wire up our data to our view.
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up the data
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Earlier, we created a `sites.json` file that represented our database. We will
    be making a real Ajax call to this file in order to retrieve its data and serve
    it within our app. The thing we need to do to achieve this is firstly to write
    the code to retrieve the data.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving the data with the $http service
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To retrieve the data, we will need to make an Ajax call to the `sites.json`
    file. For this, Angular has a great service called the `$http` service. This is
    a service that provides us with functionality to make Ajax calls to local and
    remote resources via Ajax. To begin using the `$http` service to write our code,
    we first need to go to the controller associated with our view. By default, when
    you create an Ionic app based on the side menu template, there is a controller
    attached to the views. To find out which controller is attached to our `playlist.html`
    file, we need to look at the `app.js` file of our app to discover this.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the `app.js` file by navigating to the `www` folder of your project
    and looking into the `js` folder within it. You should see the `app.js` file.
    Open it. After you open this `app.js` file, look thorough the part where you have
    code that looks closely to what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving the data with the $http service](img/00037.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The code from the preceding screenshot represents the state definition of the
    `playlist.html` file. Pay close attention to the part of the code from the preceding
    screenshot where the controller is defined and you will see that the controller
    specified there is called `PlaylistsCtrl`. This is the name of the Angular controller
    that our `playlist.html` file is wired with.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to go to this `PlaylistsCtrl` controller and write the code
    to retrieve our data. By default, the controllers are contained in the `controller.js`
    file that can be found in the same `js` folder as our `app.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving the data with the $http service](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `controller.js` file and look for a stub of code that closely resembles
    what I have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving the data with the $http service](img/00039.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding code block represents the controller definition of `PlaylistsCtrl`.
    The first thing we need to do is to clear all the code within the controller.
    Basically, we need to delete all the code found within the controller. If you
    have done this correctly, your controller should now look similar to what we have
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving the data with the $http service](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'With that done, we can now begin to create the code to query our local JSON
    database with the angular `$http` service. The first thing we need to do to achieve
    this is to first add the dependency of our `$http` service to our controller.
    This step is very important as if we do not add this dependency correctly, our
    app will not load. To do this, simply add `$http` as the second parameter in the
    anonymous function part of your controller definition. If you have done this correctly,
    you should see something similar to what I have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving the data with the $http service](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'With that done, we can now go ahead and start writing the code to grab our
    data from our local database. To start this process, simply write the following
    code into your controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have done this correctly, your code should look very close to what we
    have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving the data with the $http service](img/00042.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, I will explain what this block of code is doing. We start by
    simply initializing the variable `sites` as an array to the `$scope`. It is a
    good practice to always initialize your Angular `$scope` variables before using
    them. The next thing we try to do is make an Ajax `get` request using the shorthand
    `$http.get()` method. This `$http.get` method returns a promise so we handle this
    promise by using the `.then()` method of promise handling of Angular. In the promise
    handler function, you can see that we start by setting the data property of the
    response from the promise (`response.data`). This `data` property of the promise
    response (`response.data`) is the property that holds any data returned which
    in our case is the data from our `sites.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One thing that might be a bit confusing is the fact that, for the first parameter
    of the `$http.get()` function, which takes the URL of the API or the file we want
    to consume, we have provided the following relative path`'/sites.json'`. You might
    be wondering why we have not correctly given a path relative to the `controller.js`
    file. This is because when working with Angular, all paths are referenced from
    the root `index.html` file. In our case, the `sites.json` and `index.html` files
    are in the same directory under the `www` directory, which is why we do not have
    the path `'../sites.json'`, and instead have the path`'/sites.json'`.
  prefs: []
  type: TYPE_NORMAL
- en: With all this done, we have completed the process of creating our LTA application.
    All that is left now is to run the application. Go ahead and run this application
    using the `ionic serve` technique learned from [Chapter 1](part0015_split_000.html#E9OE1-798adc86542b445d8a1bb648e10b6714
    "Chapter 1. First Look at Ionic"), *First Look at Ionic*. Make sure you run this
    command from the root directory of your LTA app project.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have done this correctly, you should see a list of our tourist destinations
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Retrieving the data with the $http service](img/00043.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create an Ionic application based on the
    side menu template. We used this knowledge to create our London Tourist Application.
    We also had a look at the code that makes up an Ionic side menu template and learned
    about the building block elements of a side menu application. We rounded up by
    querying some data via Ajax using the Angular `$http` service and rendered our
    tourist destinations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will extend our existing application and use some more
    complex Ionic components to do some really cool stuff.
  prefs: []
  type: TYPE_NORMAL
