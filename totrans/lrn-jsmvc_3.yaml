- en: Chapter 3. FuncUnit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**FuncUnit** is a functional testing framework with jQuery-like syntax. It
    is built on top of the **QUnit** unit test framework.'
  prefs: []
  type: TYPE_NORMAL
- en: Using FuncUnit, we can run tests in all the modern web browsers under OS X,
    GNU/Linux, or Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a test is really easy and fast, especially if the reader is familiar
    with the jQuery syntax and/or the QUnit framework.
  prefs: []
  type: TYPE_NORMAL
- en: FuncUnit allow us to run tests in web browsers as well as integrates it with
    automation tools such as Selenium, or run tests from the command line using wrappers
    such as PhantomJS.
  prefs: []
  type: TYPE_NORMAL
- en: 'FuncUnit can be integrated with build tools, such as Maven, to run as a part
    of the build process. It can be integrated with continuous integration tools,
    such as Jenkins. More information on FuncUnit can be found at the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Documentation**: [http://javascriptmvc.com/docs.html#!FuncUnit](http://javascriptmvc.com/docs.html#!FuncUnit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source code**: [https://github.com/bitovi/funcunit](https://github.com/bitovi/funcunit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**QUnit**: [http://docs.jquery.com/QUnit](http://docs.jquery.com/QUnit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'According to Wikipedia, functional testing is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Functional testing is a type of black box testing that bases its test cases
    on the specifications of the software component under test. Functions are tested
    by feeding them input and examining the output, and internal program structure
    is rarely considered.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this chapter, we are going to get an overview of the FuncUnit functional
    testing framework, create tests, and run them against our `Todo` application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Unit testing versus functional testing**'
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing tests an individual unit-like method or function, while functional
    testing tests the entire functionality usually through the product user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating tests is writing a code that runs against application code to ensure
    that the code meets its design and behaves as intended. Writing tests can save
    time by finding bugs at the early development stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lets add our first test for the `Todo` app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Todo/todo` folder, create a folder named `tests`. Inside it, create
    a file named `todo_test.html` with following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This file provides a page skeleton that is populated with the FuncUnit output,
    which remains the same for all future test cases—use it as a template; only the
    title and path to the test file will change (highlighted code).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create a `todo_test.js` file with following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A module signature is given by `module(name, [lifecycle]);`.
  prefs: []
  type: TYPE_NORMAL
- en: The module method comes from the QUnit project and provides the functionality
    to divide test into modules.
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter is a string with a module name. The second one is an object
    with two possible methods, `setup` and `teardown`. The `setup` callback method
    runs before each test, while the `teardown` runs after each test in the module.
  prefs: []
  type: TYPE_NORMAL
- en: Open
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An open signature is given by `open(path, [success], [timeout])`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, we used the `open` method to open a given URL and run it against
    the test `''page has #todos placeholder''`.'
  prefs: []
  type: TYPE_NORMAL
- en: Test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A test signature is given by `test(name, [expected], test)`.
  prefs: []
  type: TYPE_NORMAL
- en: This method runs the actual test code.
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter is the name of the test, while the second is required to
    actually run the code.
  prefs: []
  type: TYPE_NORMAL
- en: Ok
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An ok signature is given by `ok(state, [message])`.
  prefs: []
  type: TYPE_NORMAL
- en: The `ok` method is a Boolean assertion. If the first parameter evaluates to
    true, the test passes. The second parameter is optional and it describes test.
  prefs: []
  type: TYPE_NORMAL
- en: S
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`S` is basically copy of the jQuery shortcut `$`, extended by FuncUnit-specific
    methods.'
  prefs: []
  type: TYPE_NORMAL
- en: Running tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are quite few ways to run tests. Using a web browser, a command-line tool
    will open the web browser and close it after the test execution is completed.
    We can also run tests using standalone JavaScript environments.
  prefs: []
  type: TYPE_NORMAL
- en: Web browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Disable the pop-up blocker and open `tests/todo_test.html` in the browser.
    The test will open the `Todo` application and run the test case against it. After
    this, you should be able to see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Web browser](img/0205OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Selenium
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Run the following command from the `Todo` app directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This command will open Firefox, run exactly the same test as in the web browser
    example, close the browser, and print the results on a command line.
  prefs: []
  type: TYPE_NORMAL
- en: PhantomJS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A much faster solution is running test using PhantomJS, because it doesn't launch
    the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute following command to run the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will run the test in a PhantomJS environment, so it won't
    open any web browser as it did in the previous case. But, it will run tests inside
    the WebKit wrapper.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command-line output should be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: EnvJS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another way to run tests is to use EnvJS-simulated browser environments written
    in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: EnvJS can only be used to run unit tests, because it doesn't accurately implement
    event simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the test by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Integration is possible with popular build or CI tools, such as Jenkins or
    Maven:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jenkins**: [http://javascriptmvc.com/docs.html#!funcunit.jenkins](http://javascriptmvc.com/docs.html#!funcunit.jenkins)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maven**: [http://javascriptmvc.com/docs.html#!funcunit.maven](http://javascriptmvc.com/docs.html#!funcunit.maven)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we can see, FuncUnit is an easy-to-use, powerful testing framework.
  prefs: []
  type: TYPE_NORMAL
- en: Writing test cases is fast and easy. The possibility to run them in several
    ways as well as integrate them with automated and build tools makes FuncUnit a
    solid tool.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have no excuses not to write tests.
  prefs: []
  type: TYPE_NORMAL
