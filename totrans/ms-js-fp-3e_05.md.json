["```js\n// sum.ts\nconst myArray = [22, 9, 60, 12, 4, 56];\nconst sum = (x: number, y: number): number => x + y;\nconst mySum = myArray.reduce(sum, 0); // 163\n```", "```js\n// continued...\nconst sumAndLog = (x: number, y: number): number => {\n  console.log(`${x}+${y}=${x + y}`);\n  return x + y;\n};\nmyArray.reduce(sumAndLog, 0);\n```", "```js\n0+22=22\n22+9=31\n31+60=91\n91+12=103\n103+4=107\n107+56=163\n```", "```js\n// average.ts\nconst myArray = [22, 9, 60, 12, 4, 56];\nconst sum = (x: number, y: number): number => x + y;\nconst average = (arr: number[]): number =>\n  arr.reduce(sum, 0) / arr.length;\nconsole.log(average(myArray)); // 27.166667\n```", "```js\n// continued...\nconst sumOrDivide = (\n  sum: number,\n  val: number,\n  ind: number,\n  arr: number[]\n) => {\n  sum += val;\n  return ind == arr.length - 1 ? sum / arr.length : sum;\n};\nconst average2 = (arr: number[]): number =>\n  arr.reduce(sumOrDivide, 0);\nconsole.log(myArray.reduce(average2, 0)); // 27.166667\n```", "```js\n// continued...\nconst average3 = (arr: number[]): number => {\n  const sc = arr.reduce(\n    (ac, val) => ({\n      sum: val + ac.sum,\n      count: ac.count + 1,\n    }),\n    { sum: 0, count: 0 }\n  );\n  return sc.sum / sc.count;\n};\nconsole.log(average3(myArray)); // 27.166667\n```", "```js\n// continued...\nconst average4 = (arr: number[]) => {\n  const sc = arr.reduce(\n    (ac, val) => [ac[0] + val, ac[1] + 1],\n    [0, 0]\n  );\n  return sc[0] / sc[1];\n};\nconsole.log(average4(myArray)); // 27.166667\n```", "```js\n// reverse.ts\nconst reverseString = (str: string): string => {\n  const arr = str.split(\"\");\n  arr.reverse();\n  return arr.join(\"\");\n};\nconsole.log(reverseString(\"MONTEVIDEO\"));  // OEDIVETNOM\n```", "```js\n// continued...\nconst reverseString2 = (str: string): string =>\n  str.split(\"\").reduceRight((x, y) => x + y, \"\");\nconsole.log(reverseString2(\"OEDIVETNOM\")); // MONTEVIDEO\n```", "```js\n// average.ts\nconst markers = [\n  { name: \"AR\", lat: -34.6, lon: -58.4 },\n  { name: \"BO\", lat: -16.5, lon: -68.1 },\n  { name: \"BR\", lat: -15.8, lon: -47.9 },\n  { name: \"CL\", lat: -33.4, lon: -70.7 },\n  { name: \"CO\", lat:   4.6, lon: -74.0 },\n  { name: \"EC\", lat:  -0.3, lon: -78.6 },\n  { name: \"PE\", lat: -12.0, lon: -77.0 },\n  { name: \"PY\", lat: -25.2, lon: -57.5 },\n  { name: \"UY\", lat: -34.9, lon: -56.2 },\n  { name: \"VE\", lat:  10.5, lon: -66.9 },\n];\n```", "```js\n// continued...\nconst averageLat = average(markers.map((x) => x.lat));\nconst averageLon = average(markers.map((x) => x.lon));\nconsole.log(averageLat, averageLon); // -15.76, -65.53\n```", "```js\n[\"123.45\", \"67.8\", \"90\"].map(parseFloat);\n// [123.45, 67.8, 90]\n[\"123.45\", \"-67.8\", \"90\"].map(parseInt);\n// [123, NaN, NaN]\n```", "```js\n[\"123.45\", \"-67.8\", \"90\"].map((x) => parseFloat(x));\n// [123.45, -67.8, 90]\n[\"123.45\", \"-67.8\", \"90\"].map((x) => parseInt(x));\n// [123, -67, 90]\n```", "```js\n// range.ts\nconst range = (start: number, stop: number): number[] =>\n  new Array(stop - start).fill(0).map((v, i) => start + i);\nrange(2, 7); // [2, 3, 4, 5, 6]\n```", "```js\n// continued...\nconst factorialByRange = (n: number): number =>\n  range(1, n + 1).reduce((x, y) => x * y, 1);\n```", "```js\n// continued...\nconst ALPHABET = range(\n  \"A\".charCodeAt(0),\n  \"Z\".charCodeAt(0) + 1\n).map((x) => String.fromCharCode(x));\n// [\"A\", \"B\", \"C\", ... \"X\", \"Y\", \"Z\"]\n```", "```js\n// map.js\nconst myMap = (arr, fn) =>\n  arr.reduce((x, y) => x.concat(fn(y)), []);\n```", "```js\n// continued...\nconst dup = (x: number): number => 2 * x;\nconsole.log(myMap(myArray, dup));\nconsole.log(myArray.map(dup));\n// [44, 18, 120, 24, 8, 112] both times\n```", "```js\n// map.ts\nconst myMap = <T, R>(arr: T[], fn: (x: T) => R): R[] =>\n  arr.reduce(\n    (x: R[], y: T): R[] => x.concat(fn(y)),\n    [] as R[]\n  );\n```", "```js\n// continued...\nconst addDashes = (x: number): string => `-${x}-`;\nconst myDashes = myArray.map(addDashes);\n// [ '-22-', '-9-', '-60-', '-12-', '-4-', '-56-' ]\n```", "```js\nconst a = [[1, 2], [3, 4, [5, 6, 7]], 8, [[[9]]]];\nconsole.log(a.flat()); // or a.flat(1)\n[ 1, 2, 3, 4, [ 5, 6, 7 ], 8, [ [ 9 ] ] ]\nconsole.log(a.flat(2));\n[ 1, 2, 3, 4, 5, 6, 7, 8, [ 9 ]]\nconsole.log(a.flat(Infinity));\n[ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n```", "```js\nconst distances = [\n  [0, 20, 35, 40],\n  [20, 0, 10, 50],\n  [35, 10, 0, 30],\n  [40, 50, 30, 0],\n];\n```", "```js\n// flat.js\nconst maxDist1 = Math.max(...distances.flat()); // 50\nconst maxDist2 = distances\n  .flat()\n  .reduce((p, d) => Math.max(p, d), 0); // also 50\n```", "```js\n// continued...\nconst apiAnswer = [\n  {\n    country: \"AR\",\n    name: \"Argentine\",\n    states: [\n      {\n        state: \"1\",\n        name: \"Buenos Aires\",\n        cities: [{city: 3846864, name: \"Lincoln\"}],\n      },\n    ],\n  },\n  {\n    country: \"GB\",\n    name: \"Great Britain\",\n    states: [\n      {\n        state: \"ENG\",\n        name: \"England\",\n        cities: [{city: 2644487, name: \"Lincoln\"}],\n      },\n    ],\n  },\n  {\n    country: \"US\",\n    name: \"United States of America\",\n    states: [\n      {\n        state: \"CA\",\n        name: \"California\",\n        cities: [{city: 5072006, name: \"Lincoln\"}],\n      },\n      .\n      .\n      .\n      {\n        state: \"IL\",\n        name: \"Illinois\",\n        cities: [\n          {city: 4899911, name: \"Lincoln Park\"},\n          {city: 4899966, name: \"Lincoln Square\"},\n        ],\n      },\n    ],\n  },\n];\n```", "```js\n// continued...\nconsole.log(\n  apiAnswer\n    .map(x => x.states)\n    .flat()\n    .map(y => y.cities)\n    .flat()\n);\n/* Results:\n[ { city: 3846864, name: 'Lincoln' },\n  { city: 2644487, name: 'Lincoln' },\n  { city: 5072006, name: 'Lincoln' },\n  { city: 8531960, name: 'Lincoln' },\n  { city: 4769608, name: 'Lincolnia' },\n  { city: 4999311, name: 'Lincoln Park' },\n  { city: 5072006, name: 'Lincoln' },\n  { city: 4899911, name: 'Lincoln Park' },\n  { city: 4899966, name: 'Lincoln Square' }\n]\n*/\n```", "```js\n// continued...\nconst names = [\n  \"Winston Spencer Churchill\",\n  \"Plato\",\n  \"Abraham Lincoln\",\n  \"Socrates\",\n  \"Charles Darwin\",\n];\nconst lastNames = names.flatMap((x) => {\n  const s = x.split(\" \");\n  return s.length === 1 ? [] : s.splice(1);\n});\n// [ 'Spencer', 'Churchill', 'Lincoln', 'Darwin' ]\n```", "```js\nconst gettysburg = [\n  \"Four score and seven years ago our fathers\",\n  \"brought forth, on this continent, a new nation,\",\n  \"conceived in liberty, and dedicated to the\",\n  \"proposition that all men are created equal.\",\n  \"Now we are engaged in a great civil war,\",\n  \"testing whether that nation, or any nation\",\n  \"so conceived and so dedicated, can long endure.\",\n  \"We are met on a great battle field of that\",\n  \"war. We have come to dedicate a portion of\",\n  \"that field, as a final resting place for\",\n  \"those who here gave their lives, that that\",\n  \"nation might live. It is altogether\",\n  \"fitting and proper that we should do this.\",\n  \"But, in a larger sense, we cannot dedicate,\",\n  \"we cannot consecrate, we cannot hallow,\",\n  \"this ground.\",\n  \"The brave men, living and dead, who\",\n  \"struggled here, have consecrated it far\",\n  \"above our poor power to add or detract.\",\n  \"The world will little note nor long\",\n  \"remember what we say here, but it can\",\n  \"never forget what they did here.\",\n  \"It is for us the living, rather, to be\",\n  \"dedicated here to the unfinished work\",\n  \"which they who fought here have thus far\",\n  \"so nobly advanced.\",\n  \"It is rather for us to be here dedicated\",\n  \"to the great task remaining before us—\",\n  \"that from these honored dead we take\",\n  \"increased devotion to that cause for\",\n  \"which they here gave the last full\",\n  \"measure of devotion— that we here highly\",\n  \"resolve that these dead shall not have\",\n  \"died in vain— that this nation, under\",\n  \"God, shall have a new birth of freedom-\",\n  \"and that government of the people, by\",\n  \"the people, for the people, shall not\",\n  \"perish from the earth.\",\n];\nconsole.log(\n  gettysburg.flatMap((s: string) => s.split(\" \")).length\n);\n// 270 ...not 272?\n```", "```js\n// continued...\nconsole.log(\n  apiAnswer\n    .flatMap((x) => x.states)\n    .flatMap((y) => y.cities)\n);\n// same result as with separate map() and flat() calls\n```", "```js\n// continued...\nconst flatAll = <T>(arr: T[]): T[] =>\n  arr.reduce(\n    (f: T[], v: T) =>\n      f.concat(Array.isArray(v) ? flatAll(v) : v),\n    [] as T[]\n  );\n```", "```js\n// continued...\nconst flatOne1 = <T>(arr: T[]): T[] =>\n  ([] as T[]).concat(...arr);\nconst flatOne2 = <T>(arr: T[]): T[] =>\n  arr.reduce((f, v) => f.concat(v), [] as T[]);\n```", "```js\n// continued...\nconst flat1 = <T>(arr: T[], n = 1): T[] => {\n  if (n === Infinity) {\n    return flatAll(arr);\n  } else {\n    let result = arr;\n    range(0, n).forEach(() => {\n      result = flatOne(result);\n    });\n    return result;\n  }\n};\nconst flat2 =  <T>(arr: T[], n = 1): T[] => {\n  n === Infinity\n    ? flatAll(arr)\n    : n === 1\n    ? flatOne(arr)\n    : flat2(flatOne(arr), n - 1);\n```", "```js\n// continued...\nif (!Array.prototype.flat) {\n  Array.prototype.flat = function (this, n): any[] {\n    if (n === undefined || n === 1) {\n      return flatOne(this as any[]);\n    } else if (n === Infinity) {\n      return flatAll(this as any[]);\n    } else {\n      return flatOne(this as any[]).flat(n - 1);\n    }\n  };\n}\n```", "```js\n// copy.ts\nconst objCopy = <T>(obj: T): T => {\n  const copy = Object.create(Object.getPrototypeOf(obj));\n  Object.getOwnPropertyNames(obj).forEach((prop: string) =>\n    Object.defineProperty(\n      copy,\n      prop,\n      Object.getOwnPropertyDescriptor(obj, prop) as string\n    )\n  );\n  return copy;\n};\nconst myObj = { fk: 22, st: 12, desc: \"couple\" };\nconst myCopy = objCopy(myObj);\nconsole.log(myObj, myCopy);\n// {fk: 22, st: 12, desc: \"couple\"}, twice\n```", "```js\n// loops.ts\nimport { range } from \"./range\";\nconst fact4 = (n: number): number => {\n  let result = 1;\n  range(1, n + 1).forEach((v) => (result *= v));\n  return result;\n};\nconsole.log(fact4(5)); // 120\n```", "```js\n// filter.ts\nconst serviceResult = {\n  accountsData: [\n    { id: \"F220960K\", balance: 1024 },\n    { id: \"S120456T\", balance: 2260 },\n    { id: \"J140793A\", balance: -38 },\n    { id: \"M120396V\", balance: -114 },\n    { id: \"A120289L\", balance: 55000 },\n  ],\n};\n```", "```js\n// continued...\nconst delinquent = serviceResult.accountsData.filter(\n  (v) => v.balance < 0\n);\nconsole.log(delinquent);\n// two objects, with id's J140793A and M120396V\n```", "```js\n// continued...\nconst delinquentIds = delinquent.map((v) => v.id);\n```", "```js\n// continued...\nconst delinquentIds2 = serviceResult.accountsData\n  .filter((v) => v.balance < 0)\n  .map((v) => v.id);\n```", "```js\n// continued...\nconst myFilter = <T>(arr: T[], fn: (x: T) => boolean) =>\n  arr.reduce(\n    (x: T[], y: T) => (fn(y) ? x.concat(y) : x),\n    []\n  );\n```", "```js\nmyFilter(serviceResult.accountsData, (v) => v.balance < 0);\n```", "```js\narr.includes(value);  // arr.find(v => v === value) arr.indexOf(value);  // arr.findIndex(v => v === value)\n```", "```js\n// search.ts\nimport { markers } from \"./average\";\nconst brazilData = markers.find((v) => v.name === \"BR\");\n// {name:\"BR\", lat:-15.8, lon:-47.9}\n```", "```js\n// continued...\nconst brazilIndex = markers.findIndex(\n  (v) => v.name === \"BR\"\n);\n// 2\n```", "```js\n[1, 2, NaN, 4].findIndex((x) => x === NaN); // -1\n```", "```js\n[1, 2, NaN, 4].findIndex(x => isNaN(x)); // 2\n```", "```js\narr.find(fn); // or arr.find((x) => fn(x));\narr.reduce(\n  (x, y) => (x === undefined && fn(y) ? y : x),\n  undefined\n);\n```", "```js\narr.findIndex(fn);\narr.reduce((x, y, i) => (x == -1 && fn(y) ? i : x), -1);\n```", "```js\n// continued...\nmarkers.every((v) => v.lat < 0 && v.lon < 0); // false\nmarkers.some((v) => v.lat < 0 && v.lon < 0);  // true\n```", "```js\narr.every(fn);\narr.reduce((x, y) => x && fn(y), true);\narr.some(fn);\narr.reduce((x, y) => x || fn(y), false);\n```", "```js\n// continued...\nconst none = <T>(arr: T[], fn: (x: T) => boolean) =>\n  arr.every((v) => !fn(v));\n```", "```js\n// continued...\ndeclare global {\n  interface Array<T> {\n    none(f: (x: T) => boolean): boolean;\n  }\n}\nArray.prototype.none = function (fn) {\n  return this.every((v) => !fn(v));\n};\n```", "```js\n// async.ts\nconst fakeAPI = <T>(delay: number, value: T): Promise<T> =>\n  new Promise((resolve) =>\n    setTimeout(() => resolve(value), delay)\n  );\n```", "```js\n// continued...\nconst useResult = (x: any): void =>\n  console.log(new Date(), x);\n```", "```js\n// async.ts\n(async () => {\n  console.log(\"START\");\n  console.log(new Date());\n  const result = await fakeAPI(1000, 229);\n  useResult(result);\n  console.log(\"END\");\n})();\n/*\nSTART\n2022-10-29T01:28:12.986Z\n2022-10-29T01:28:13.989Z 229\nEND\n*/\n```", "```js\n// continued...\n(async () => {\n  console.log(\"START SEQUENCE\");\n  const x1 = await fakeAPI(1000, 1);\n  useResult(x1);\n  const x2 = await fakeAPI(2000, 2);\n  useResult(x2);\n  const x3 = await fakeAPI(3000, 3);\n  useResult(x3);\n  const x4 = await fakeAPI(4000, 4);\n  useResult(x4);\n  console.log(\"END SEQUENCE\");\n})();\n```", "```js\nSTART SEQUENCE\n2022-10-29T01:32:11.671Z 1\n2022-10-29T01:32:13.677Z 2\n2022-10-29T01:32:16.680Z 3\n2022-10-29T01:32:20.683Z 4\nEND SEQUENCE\n```", "```js\n// continued...\n(() => {\n  console.log(\"START FOREACH\");\n  [1, 2, 3, 4].forEach(async (n) => {\n    const x = await fakeAPI(n * 1000, n);\n    useResult(x);\n  });\n  console.log(\"END FOREACH\");\n})();\n```", "```js\nSTART FOREACH\nEND FOREACH\n2022-10-29T01:34:06.287Z 1\n2022-10-29T01:34:07.287Z 2\n2022-10-29T01:34:08.286Z 3\n2022-10-29T01:34:09.286Z 4\n```", "```js\n// continued...\nconst forEachAsync = <T>(\n  arr: T[],\n  fn: (x: T) => any\n): Promise<any> =>\n  arr.reduce(\n    (promise: Promise<void>, value: T) =>\n      promise.then(() => fn(value)),\n    Promise.resolve()\n  );\n(async () => {\n  console.log(\"START FOREACH VIA REDUCE\");\n  await forEachAsync([1, 2, 3, 4], async (n) => {\n    const x = await fakeAPI(n * 1000, n);\n    useResult(x);\n  });\n  console.log(\"END FOREACH VIA REDUCE\");\n})();\n```", "```js\nSTART FOREACH VIA REDUCE\n2022-10-29T01:42:09.385Z 1\n2022-10-29T01:42:11.388Z 2\n2022-10-29T01:42:14.391Z 3\n2022-10-29T01:42:18.392Z 4\nEND FOREACH VIA REDUCE\n```", "```js\n// continued...\nconst mapAsync = <T, R>(\n  arr: T[],\n  fn: (x: T) => Promise<R>\n) => Promise.all(arr.map(fn));\n(async () => {\n  console.log(\"START MAP\");\n  const mapped = await mapAsync([1, 2, 3, 4], async (n) => {\n    const x = await fakeAPI(n * 1000, n);\n    return x * 10;\n  });\n  useResult(mapped);\n  console.log(\"END MAP\");\n})();\n```", "```js\nSTART MAP\n2022-10-29T01:47:06.726Z [ 10, 20, 30, 40 ]\nEND MAP\n```", "```js\n// continued...\nconst fakeFilter = (value: number): Promise<boolean> =>\n  new Promise((resolve) =>\n    setTimeout(() => resolve(value % 2 === 0), 1000)\n  );\n```", "```js\n// continued...\nconst filterAsync = <T>(\n  arr: T[],\n  fn: (x: T) => Promise<boolean>\n) =>\n  mapAsync(arr, fn).then((arr2) =>\n    arr.filter((v, i) => Boolean(arr2[i]))\n  );\n(async () => {\n  console.log(\"START FILTER\");\n  const filtered = await filterAsync(\n    [1, 2, 3, 4],\n    async (n) => {\n      const x = await fakeFilter(n);\n      return x;\n    }\n  );\n  useResult(filtered);\n  console.log(\"END FILTER\");\n})();\n```", "```js\nSTART FILTER\n2022-10-29T01:56:19.798Z [ 2, 4 ]\nEND FILTER\n```", "```js\n// continued...\nconst reduceAsync = <T, R>(\n  arr: T[],\n  fn: (acc: R, val: T) => Promise<R>,\n  init: R\n) =>\n  Promise.resolve(init).then((accum) =>\n    forEachAsync(arr, async (v: T) => {\n      accum = await fn(accum, v);\n    }).then(() => accum)\n  );\n```", "```js\n// continued...\nconst fakeSum = (\n  value1: number,\n  value2: number\n): Promise<number> =>\n  new Promise((resolve) =>\n    setTimeout(() => resolve(value1 + value2), 1000)\n  );\n(async () => {\n  console.log(\"START REDUCE\");\n  const summed = await reduceAsync(\n    [1, 2, 3, 4],\n    async (_accum, n) => {\n      const accum = await _accum;\n      const x = await fakeSum(accum, n);\n      useResult(`accum=${accum} value=${x} `);\n      return x;\n    },\n    0\n  );\n  useResult(summed);\n  console.log(\"END REDUCE\");\n})();\n```", "```js\nSTART REDUCE\n2022-10-29T02:04:20.862Z accum=0 value=1\n2022-10-29T02:04:21.864Z accum=1 value=3\n2022-10-29T02:04:22.865Z accum=3 value=6\n2022-10-29T02:04:23.866Z accum=6 value=10\n2022-10-29T02:04:23.866Z 10\nEND REDUCE\n```", "```js\n// workers/test_worker_1.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Fibonacci</title>\n  </head>\n  <body>\n    Fibonacci:\n    <input id=\"num\" type=\"number\" min=\"0\" value=\"0\" />\n    <br />\n    <br />\n    <button onclick=\"locally()\">Locally</button>\n    <br />\n    <br />\n    Result: <span id=\"res\"></span>\n    <script src=\"img/test_worker_1.js\"></script>\n  </body>\n</html>\n```", "```js\n// workers/test_worker_1.ts\nfunction fib(n: number): number {\n  return n < 2 ? n : fib(n - 2) + fib(n - 1);\n}\nfunction getNumber(): number {\n  return Number(\n    (document.getElementById(\"num\") as HTMLInputElement)\n      .value\n  );\n}\nfunction showResult(result: number): void {\n  document.getElementById(\"res\")!.innerText =\n    String(result);\n}\nfunction locally(): void {\n  showResult(fib(getNumber()));\n}\n```", "```js\n// workers/web_fib_worker.ts\nfunction fib(n: number): number {\n  return n < 2 ? n : fib(n - 2) + fib(n - 1);\n}\nonmessage = (e: MessageEvent<number>) =>\n  postMessage(fib(e.data));;\n```", "```js\n// workers/test_worker_2.html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Fibonacci</title>\n  </head>\n  <body>\n    Fibonacci:\n    <input id=\"num\" type=\"number\" min=\"0\" value=\"0\" />\n    <br />\n    <br />\n    <button onclick=\"locally()\">Locally</button>\n    <button onclick=\"parallelly()\">Parallelly</button>\n    <br />\n    <br />\n    Result: <span id=\"res\"></span>\n    <script src=\"img/test_worker_2.js\"></script>\n  </body>\n</html>\n```", "```js\n// workers/test_worker_2.ts\n.\n.\n.\nconst worker = new Worker(\n  \"http://localhost:8887/test_fib_worker.js\"\n);\nworker.onmessage = (e: MessageEvent<number>) =>\n  showResult(e.data);\n/* eslint-disable-next-line */\nfunction parallelly(): void {\n  worker.postMessage(getNumber());\n}\n```", "```js\n// workers/fib_worker.ts\nimport { parentPort } from \"worker_threads\";\nfunction fib(n: number): number {\n  return n < 2 ? n : fib(n - 2) + fib(n - 1);\n}\nparentPort!.on(\"message\", (m: number) =>\n  parentPort!.postMessage(fib(m))\n);\n```", "```js\n// workers/fib_worker_test.ts\nimport { Worker } from \"worker_threads\";\nconst worker = new Worker(\"./fib_worker.js\");\nconsole.log(\"START\");\nworker.postMessage(40);\nconsole.log(\"END\");\nworker.on(\"message\", (msg) => {\n  console.log(\"MESSAGE\", msg);\n  worker.terminate();\n});\n```", "```js\nSTART\nEND\nMESSAGE 102334155\n```", "```js\n// workers/fib_worker_test_with_promise.ts\nimport { Worker } from \"worker_threads\";\nconst callWorker = (filename: string, value: unknown) =>\n  new Promise((resolve) => {\n    const worker = new Worker(filename);\n    worker.on(\"message\", resolve);\n    worker.postMessage(value);\n  });\nconsole.log(\"START\");\nconst result = await callWorker(\"./fib_worker.js\", 40);\nconsole.log(\"AWAITED\", result);\nconsole.log(\"END\");\n/* Result:\nSTART\nAWAITED 102334155\nEND\n*/\n```", "```js\n// workers/pool.ts\nimport { Worker } from \"worker_threads\";\ntype PoolEntry = {\n  worker: Worker;\n  filename: string;\n  value: any;\n  inUse: boolean;\n};\nconst pool: PoolEntry[] = [];\n```", "```js\n// continued...\nexport const workerCall = (\n  filename: string,\n  value: any\n): Promise<any> => {\n  let available = pool\n    .filter((v) => !v.inUse)\n    .find((x) => x.filename === filename);\n  if (available === undefined) {\n    // console.log(\"CREATING\", filename, value);\n    available = {\n      worker: new Worker(filename),\n      filename,\n      value,\n      inUse: true,\n    } as PoolEntry;\n    pool.push(available);\n  } else {\n    // console.log(\"REUSING\", filename, available.value);\n  }\n  return new Promise((resolve) => {\n    available!.inUse = true;\n    available!.worker.on(\"message\", (x) => {\n      resolve(x);\n      available!.inUse = false;\n      // console.log(\"RESOLVING\", filename, value, x);\n    });\n    available!.worker.postMessage(value);\n  });\n};\n```", "```js\n// workers/random_worker.ts\nimport { parentPort } from \"worker_threads\";\nasync function random(n: number): Promise<number> {\n  await new Promise((resolve) => setTimeout(resolve, n));\n  return Math.floor(n * Math.random());\n}\nparentPort!.on(\"message\", async (m) =>\n  parentPort!.postMessage(await random(m))\n);\n```", "```js\n// workers/pool_test.ts\nimport { workerCall } from \"./pool\";\nconst FIB_WORKER = \"./fib_worker.js\";\nconst RANDOM_WORKER = \"./random_worker.js\";\nconst showResult = (s: string) => (x: any) =>\n  console.log(s, x);\nworkerCall(FIB_WORKER, 35).then(showResult(\"fib(35)\"));\nworkerCall(RANDOM_WORKER, 3000).then(showResult(\"random\"));\nworkerCall(FIB_WORKER, 20).then(showResult(\"fib(20)\"));\nworkerCall(FIB_WORKER, 44).then(showResult(\"fib(44)\"));\nworkerCall(FIB_WORKER, 10).then((x) => {\n  console.log(\"fib(10)\", x);\n  workerCall(FIB_WORKER, 11).then((y) =>\n    console.log(\"fib(11)\", y)\n  );\n});\nworkerCall(RANDOM_WORKER, 2000).then(showResult(\"random\"));\nworkerCall(RANDOM_WORKER, 1000).then(showResult(\"random\"));\n```", "```js\nCREATING ./fib_worker.js 35\nCREATING ./random_worker.js 3000\nCREATING ./fib_worker.js 20\nCREATING ./fib_worker.js 44\nCREATING ./fib_worker.js 10\nCREATING ./random_worker.js 2000\nCREATING ./random_worker.js 1000\nfib(10) 55\nREUSING ./test_fib_worker.js 10\nfib(11) 89\nfib(20) 6765\nfib(35) 9227465\nrandom 602\nrandom 135\nrandom 17\nfib(44) 701408733\n```", "```js\nconst characters = [\n  { name: \"Fred\", plays: \"bowling\" },\n  { name: \"Barney\", plays: \"chess\" },\n  { name: \"Wilma\", plays: \"bridge\" },\n  { name: \"Betty\", plays: \"checkers\" },\n  .\n  .\n  .\n  { name: \"Pebbles\", plays: \"chess\" },\n];\n```", "```js\n<div>\n  <ul>\n    <li>Barney</li>\n    <li>Betty</li>\n    .\n    .\n    .\n    <li>Pebbles</li>\n  </ul>\n</div>;\n```", "```js\nconst reverseString2 = (str: string): string =>\n  str.split(\"\").reduceRight(sum, \"\");\n```", "```js\nconst reversedReverse = (str: string): string =>\n  str.split(\"\").reduceRight((x, y) => y + x, \"\");\n```", "```js\nlet myData = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]];\nlet myCSV = dataToCsv(myData);\n// \"1,2,3,4\\n5,6,7,8\\n9,10,11,12\\n\"\n```", "```js\nlet newArray = someArray.filter(Boolean);\n```", "```js\n  let available = pool\n    .filter((v) => !v.inUse)\n    .find((x) => x.filename === filename);\n```"]