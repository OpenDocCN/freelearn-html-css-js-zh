- en: Chapter 1. Creating Maps with Leaflet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web-based mapping has evolved rapidly over the last two decades, from MapQuest
    and Google to real-time location information on our phones' mapping apps. There
    have been open source projects to develop web-based maps in the past, such as
    MapServer, GeoServer, and OpenLayers. However, **Environmental Systems Research
    Institute** (**ESRI**) includes the Flex and Silverlight APIs; these create web-based
    maps from their ArcServer services.
  prefs: []
  type: TYPE_NORMAL
- en: Over the last few years, JavaScript has taken the online mapping world by storm.
    In 2013, there was a JS.geo conference. The library at the center of attention
    was Leaflet. This is a JavaScript library used to create interactive, web-based
    maps. With it, you can create a simple map in as little as three lines of JavaScript,
    or you can create complex, interactive, editable maps with hundreds of lines of
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find more information on Leaflet at [http://leafletjs.com](http://leafletjs.com).
  prefs: []
  type: TYPE_NORMAL
- en: This book assumes that you have a basic understanding of HTML and CSS, primarily
    of how to link external `.js` and `.css` files and how to name and size a `<div>`
    element. It also assumes that you have a working knowledge of JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Tile layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vector layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pop ups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom functions / Responding to events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile mapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple basemap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a map with Leaflet, you need to do the following four things:'
  prefs: []
  type: TYPE_NORMAL
- en: Reference the JavaScript and **Cascading Style Sheet** (**CSS**) files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `<div>` element to hold the map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `map` object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a tile layer (base layer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before we get into the details of building the map, let''s set up an HTML file
    that we can use throughout the book. Open a text editor and enter the following
    HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `LeafletEssentials.html`. We will add to this file throughout
    the rest of the book.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Referencing the JavaScript and CSS files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two ways to load Leaflet into your code: you can either reference
    a hosted file or download a copy to your local machine and reference that copy.
    The next two sections will cover how you can set up your environment for a hosted
    copy or for a local copy.'
  prefs: []
  type: TYPE_NORMAL
- en: Using a hosted copy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will not be making any changes to the original CSS or JS files, so we will
    link to the hosted version.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a text editor, open `LeafletEssentials.html`. In the `<head>` element, and
    after the `</title>` element, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After the `<body>` tag, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The links are standard HTML for `<link>` and `<script>`. Open either link in
    your browser and you will see the contents of the files.
  prefs: []
  type: TYPE_NORMAL
- en: Using a local copy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using a local copy is the same as a hosted copy, except the path to the files
    is different. Download `Leaflet.js` from [http://leafletjs.com/download.html](http://leafletjs.com/download.html)
    and extract it to your desktop. If you downloaded `Leaflet-0.7.3.zip`, you should
    have a folder with the same name. In the folder, you will find a subfolder named
    `images` and the following three files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Leaflet.css`: This is the cascading style sheet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Leaflet`: This is a compressed version of Leaflet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Leaflet-src.js`: This is the full version of Leaflet for developers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following code in the `<head>` tag of `LeafletEssentials.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code in the `<body>` tag of `LeafletEssentials.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You now have local references to the Leaflet library and CSS. We are using the
    `Leaflet` file because it is smaller and will load faster. As long as you do not
    need to add any code to the file, you can delete the `Leaflet-src.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a <div> tag to hold the map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You need a place to put the map. You can accomplished this by creating a `<div>`
    tag with an ID that will be referenced by a `map` object. The `<div>` tag that
    is holding the map needs a defined height. The easiest way to give the tag a height
    is to use CSS in the `<div>` tag that you created. Add the following code to the
    `<body>` tag of `LeafletEssentials.html` after the `<script>` reference to the
    `Leaflet` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Style the `<div>` tag in the HTML file and *not* the `Leaflet.css` file. If
    you do this, the map `<div>` size will be global for every page that uses it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a map object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have the references and a place to put the map, it is time to
    start coding the map using JavaScript. The first step is to create a `map` object.
    The `map` class takes a `<div>` tag (which you created in the previous step) and
    `options`: `L.map(div id, options)`. To create a map object named `map`, add the
    following code after the `<script>` element in `LeafletEssentials.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can shorten the code using the `setView()` method, which
    takes the `center` and `zoom` options as parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, you created a new instance of the `map` class and named
    it `map`. You may be used to creating new instances of a class using the keyword
    `new`; this is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Leaflet implements factories that remove the need for the `new` keyword. In
    this example, `L.map()` has been given the `<div>` map and two options: `center`
    and `zoom`. These two options position the map on the screen with the latitude
    and longitude in the center of the `<div>` element and zoomed in or out at the
    desired level. The `center` option takes the `[latitude, longitude]` parameters,
    and `zoom` takes an integer; the larger the number, the tighter the zoom.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is good practice to always assign the `center` and `zoom` options. There
    is nothing worse than seeing a map of the world when all of the data is located
    Albuquerque, NM.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a tile layer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last step to create your first map in Leaflet is to add a tile layer. A
    tile layer can be thought of as your basemap. It is the imagery that you will
    add points, lines, and polygons on top of later in the book. Tile layers are a
    service provided by a tile server. A tile server usually breaks up the layer into
    256 x 256 pixel images. You retrieve the images needed based on your location
    and zoom through a URL that requests `/z/x/y.png`. Only these tiles are loaded.
    As you pan and zoom, new tiles are added to your map.
  prefs: []
  type: TYPE_NORMAL
- en: The tile layer, at a minimum, requires the URL to a tile server. In this book,
    we will use OpenStreetMap for our tile layer.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to abide by the terms of service to use OpenStreetMap tiles. The TOS
    is available at [http://wiki.openstreetmap.org/wiki/Tile_usage_policy](http://wiki.openstreetmap.org/wiki/Tile_usage_policy).
  prefs: []
  type: TYPE_NORMAL
- en: 'The URL to the OpenStreetMap tile server is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the code, we provide the URL template to OpenStreetMaps. We also call the
    `addTo()` method so that the layer is drawn. We need to pass `L.map()` as a parameter
    to the `addTo()` function. We named our `L.map()` instance map in the previous
    section (`var map = L.map()`).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Leaflet allows method chaining: the calling of multiple methods on an object
    at the same time. This is what we did when we put `.addTo(map)` at the end of
    the line, creating the instance of `L.tileLayer()`. The longer way of adding the
    layer to the map without chaining is to assign the instance to a variable and
    then call `addTo()` from the variable, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You now have a complete map that allows you to pan and zoom around the world.
    Your `LeafletEssentials.html` file should look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Even with liberal spacing, you were able to build a fully functional map of
    the world with pan and zoom capabilities in six lines of JavaScript. The following
    screenshot shows the finished map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a tile layer](img/4812OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tile layer providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you have created your first map, you are probably wondering how to
    change the tile layer to something else. There are several tile layer providers,
    some of which require registration. This section will present you with two more
    options: Thunderforest and Stamen. Thunderforest provides tiles that extend OpenStreetMap,
    while Stamen provides more artistic map tiles. Both of these services can be used
    to add a different style of basemap to your Leaflet map.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Thunderforest provides five tile services:'
  prefs: []
  type: TYPE_NORMAL
- en: OpenCycleMap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Landscape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outdoors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Atlas (still in development)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use Thunderforest, you need to point your tile layer to the URL of the tile
    server. The following code shows how you can add a Thunderforest tile layer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code loads the landscape tile layer. To use another layer, just
    replace `landscape` in the URL with `cycle`, `transport`, or `outdoors`. The following
    screenshot shows the Thunderforest landscape layer loaded in Leaflet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tile layer providers](img/4812OS_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Stamen provides six tile layers; however, we will only discuss the following
    three layers:'
  prefs: []
  type: TYPE_NORMAL
- en: Terrain (available in the United States only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watercolor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other three are Burning Map, Mars and Trees, and Cabs & Crime. The Burning
    Map and Mars layers require WebGL, and Trees and Cabs & Crime are only available
    in San Francisco. While these maps have a definite wow factor, they are not practical
    for our purposes here.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Learn about the Stamen tile layers, including Burning Map, Mars and Trees, and
    Cabs & Crime, at [http://maps.stamen.com](http://maps.stamen.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Stamen requires you to follow the same steps as Thunderforest, but it includes
    an additional step of adding a reference to the JavaScript file. After the reference
    to your Leaflet file, add the following reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of `L.TileLayer()`, Stamen uses `L.StamenTileLayer(tile set name)`.
    Replace the tile set name with `terrain`, `watercolor`, or `toner`. Lastly, add
    `addLayer()` to the map as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Stamen's tile layers are not your typical basemap layers; they are works of
    cartographic art.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Stamen has an online tool to edit map layers and save the output as an image.
    To create your own artistic map images, go to [http://mapstack.stamen.com](http://mapstack.stamen.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the Stamen watercolor layer loaded in Leaflet.
    As you zoom in, you will see more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tile layer providers](img/4812OS_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a Web Mapping Service tile layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another type of tile layer that can be added to a Leaflet map is a **Web Mapping
    Service** (**WMS**) tile layer. WMS is a way to request and transfer map images
    over the Web through HTTP. It is an **Open Geospatial Consortium** (**OGC**) specification.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For detailed technical information on the WMS specification, see the OGC website:
    [http://www.opengeospatial.org/standards/wms](http://www.opengeospatial.org/standards/wms).'
  prefs: []
  type: TYPE_NORMAL
- en: With an understanding of how to add tile layers, and having seen several examples,
    you may have noticed that none of the examples were of satellite imagery. The
    first WMS layer you will add to your map is the **United States Geological Survey**
    (**USGS**) Imagery Topo.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like the `L.tileLayer()` function that we used previously, the `L.tileLayer.wms()`
    function takes a URL and a set of options as parameters. The following code adds
    the WMS layer to your map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The URL for the WMS was taken from the USGS website. You can find other WMS
    layers at [http://basemap.nationalmap.gov/arcgis/rest/services](http://basemap.nationalmap.gov/arcgis/rest/services).
    The options specified are the layer name, the format, the transparency, and the
    attribution. The layer name will be provided on the information page of the service
    you are connecting to. The format is an image, and the transparency is set to
    `true`. Since this layer covers the globe, and we are not putting any other layers
    underneath it, the transparency could be set to `false`. In the next example,
    you will see how setting the transparency to `true` allows another layer to become
    visible. Lastly, there is an attribution set to USGS. When you assign an attribution
    to a layer, Leaflet adds the text value in the lower-right corner of the map.
    It is important to use an attribution as it is similar to citing a source in text.
    If it is not your data, it is accepted practice to give credit where credit is
    due. Many times, it is also required by copyright. Since this layer is from the
    USGS, it is accredited in the attribution property of the layer.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The attribution value can contain hyperlinks, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the WMS layer code into `LeafletEssentials.html`, and you should now
    have a map with satellite imagery. The following screenshot shows the satellite
    imagery loaded into Leaflet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a Web Mapping Service tile layer](img/4812OS_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Multiple tile layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous example, you added a WMS layer and set the transparency to `true`.
    The reason you need to do this is because you can add multiple tile layers on
    top of each other, and with the transparency set to `true`, you will be able to
    see them all at the same time. In this example, you need to add the **National
    Weather Service** (**NWS**) radar mosaic WMS on top of the USGS satellite imagery.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **National Oceanic and Atmospheric Administration** (**NOAA**) provides
    a list of several WMS layers; they are available at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://nowcoast.noaa.gov/help/mapservices.shtml?name=mapservices](http://nowcoast.noaa.gov/help/mapservices.shtml?name=mapservices)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The adding of extra WMS layers follows the same format as the previous example,
    but with a different URL, layer name, and attribution. Add the following code
    after the code for the satellite imagery in `LeafletEssentials.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This code adds the NOAA WMS layer for the NWS radar mosaic. Note that the URL
    and layer have changed and the attribution is set to `NOAA/NWS`. The `RAS_RIDGE_NEXRAD`
    layer is a grid that displays values when they begin to exist. The name of the
    layer can be found on the NOAA website; you are not expected to remember that
    `RAS_RIDGE_NEXRAD` is the weather radar layer. There are large portions of the
    map with no data, and since we set the transparency to `true`, these blank spaces
    allow the satellite imagery to become visible. Your map should now show the satellite
    imagery with the radar mosaic overlaid, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multiple tile layers](img/4812OS_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you set the transparency to `false`, you allow the layer to draw on the
    entire map. Areas with no data are displayed as white squares and cover the satellite
    imagery underneath, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multiple tile layers](img/4812OS_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: WMS layers do not need to serve as base layers only; they can be used as additional
    data. This was shown in the previous example where you overlaid the radar on the
    satellite imagery. In this example, you used a satellite image. You can also use
    the OpenStreetMap tile layer from the first map. Again, just set the transparency
    to `true`. WMS layers can be added just like points, lines, and polygons, which
    is discussed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Adding data to your map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have learned how to add tile layers to a map. In the previous example,
    you added a WMS layer on top of a base tile layer. Now, you will learn how to
    draw your own layers that need to be added on top of a tile layer. The three geometric
    primitives of vector data that you can add to a map are often referred to as points,
    lines, and polygons.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will learn how to add markers, polylines, and polygons
    to your map.
  prefs: []
  type: TYPE_NORMAL
- en: Points
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, your map is not that interesting. You often draw a map to highlight
    a specific place or point. Leaflet has a `Point` class; however, it is not used
    to simply add a point on the map with an icon to specify the place. In Leaflet,
    points are added to the map using the `Marker` class. At minimum, the `Marker`
    class requires a latitude and longitude, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can create a marker by simply calling `L.marker([lat,long]).addTo(map);`,
    but assigning the marker to a variable will allow you to interact with it by name.
    How do you delete a specific marker if it does not have a name?
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding code, you created a marker at point `[35.10418, -106.62987]`,
    and then, as with the tile layer, you used the `addTo(map)` function. This created
    a marker icon at the specified latitude and longitude. The following screenshot
    shows the marker on the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Points](img/4812OS_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding example is a simplified, and almost useless, marker. The `Marker`
    class has options, events, and methods that you can call to make them more interactive
    and useful. You will learn about methods—specifically the `bindPopup()` method—
    and events later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are 10 options you can specify when creating a marker, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clickable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`draggable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keyboard`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`zIndexOffset`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`opacity`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`riseOnHover`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`riseOffset`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The options `clickable`, `draggable`, `keyboard`, `zIndexOffset`, `opacity`,
    `riseOnHover`, and `riseOffset` are all set to a default value. In [Chapter 4](ch04.html
    "Chapter 4. Creating Custom Markers"), *Creating Custom Markers*, you will learn
    about the `icon` option in detail. Two options that you should set are `title`
    and `alt`. The `title` option is the tooltip text that will be displayed when
    you hover over the point with the cursor, and the `alt` option is the alternative
    text that is read using screen readers for accessibility. These options are used
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The code extends the original marker example by adding a title and alt text
    and making the marker draggable. You will use the `draggable` options with an
    event in the last section of this chapter. The options are set the same as when
    we created our map instance; use curly braces to group the options, and separate
    each option with a comma. This is how options will be set for all objects.
  prefs: []
  type: TYPE_NORMAL
- en: Polylines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first vector layer you will learn to create is aLine. In Leaflet, you will
    use the `Polyline` class. A polyline can represent a single line segment or a
    line with multiple segments. Polylines and polygons extend the `path` class. You
    do not call `path` directly, but you have access to its methods, properties, and
    events. To draw a polyline, you need to provide at least a single longitude and
    latitude pair. The option for a polyline is set as default, so you need not specify
    any values unless you want to override the default. This is shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, the polyline is `red` and has a weight of `8`. The `weight`
    option defaults to `5`. If you want a thicker line, increase the number. For a
    thinner line, decrease the number. To add more segments to the line, just add
    additional latitude and longitude values as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You need to first provide a latitude and longitude pair because a line consists
    of at least two points. Afterwards, you can declare additional latitudes and longitudes
    to extend your line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the polyline added to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Polylines](img/4812OS_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Polygons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A polygon is a polyline that is closed. Polygons tend to be classified by the
    number of sides, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Triangle (3)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hexagon (6)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Octagon (8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Leaflet has a class for drawing two common polygons: a circle and a rectangle.
    When drawing a polygon, you will specify a minimum of three coordinates. A triangle
    is the simplest polygon that you can draw. That is why you need to provide at
    least three points. You do not need to specify the starting point at the end of
    the list. Leaflet will automatically close the polygon for you. To draw a polygon,
    simply copy the code for the polyline with three points and change the class to
    `L.polygon()`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Since Leaflet automatically closes the polygon, our three-point polyline can
    become a polygon. Since `polyline` and `polygon` inherit from `path`, the options
    `color` and `weight` apply to both. You will notice that `color` and `weight`
    refer to the outline of the polygon. Two options that you will find useful when
    drawing polygons are `fillColor` and `fillOpacity`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code draws a `red` triangle with a weight of `8`. The additional
    options of `fillColor` and `fillOpacity` are set to `blue` and `1`. The fill color
    of a polygon will be set to the default if no `fillColor` option is selected.
    You only need to use `fillColor` if you want a different fill color than the outline.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Opacity is a value between `0` and `1`, where `0` is 100 percent opacity and
    `1` is no opacity (solid).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the red triangle with a blue fill added to the
    map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Polygons](img/4812OS_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Rectangles and circles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Circles and rectangles are common polygons that have built-in classes in Leaflet.
    You can also draw them manually using polygon and by specifying all of the line
    segments, but that would be a difficult route to take.
  prefs: []
  type: TYPE_NORMAL
- en: Rectangles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a rectangle, you need an instance of the class `L.rectangle()` with
    the latitude and longitude pair for the upper-left corner and lower-right corner
    as a parameter. The class extends `L.polygon()`, so you have access to the same
    options, methods, and events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code uses the first two points in the polyline and triangle,
    but in reverse order (upper left and lower right). The options are the same as
    the polygon, but with opacity removed. The following screenshot shows the rectangle
    added to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rectangles](img/4812OS_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Circles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a circle, you need an instance of `L.circle()` with the center point
    and a radius (in meters) as parameters. You can specify the same options as you
    used in your rectangle because the `circle` class extends the `path` class. This
    is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code specifies the center point, a radius of 5 miles (`8046.72`
    meters), and the same options as the rectangle in the previous example. The following
    screenshot shows the circle added to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Circles](img/4812OS_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: MultiPolylines and MultiPolygons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous examples, you created each polyline and polygon as its own layer.
    When you start creating real data, you will find that you want multiple polylines
    or polygons on a single layer. For starters, it is more realistic, and it also
    makes it possible to deal with similar features as a single entity. If you want
    to map parks and bike trails on a single map, it makes sense to add the parks
    as MultiPolygon and the bike trails as MultiPolyline. Then, you can provide the
    user with the option of turning either layer on or off.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bracketing for MultiPolylines and MultiPolygons can get confusing. You need
    brackets to hold the MultiPolyline or MultiPolygon, brackets for each polyline
    or polygon, and brackets for each latitude and longitude.
  prefs: []
  type: TYPE_NORMAL
- en: MultiPolylines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating a MultiPolyline is functionally the same as a single polyline, except
    that you pass multiple longitudes and latitudes; a set for each polygon. This
    is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the first polyline is the same as the polyline example.
    A second polyline is added, and the options are also the same as the first polyline
    example. The following screenshot shows the MultiPolyline added to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MultiPolylines](img/4812OS_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: MultiPolygons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating a MultiPolygon is the same as creating a MultiPolyline. Since Leaflet
    will automatically close the polyline, as long as our polylines have three or
    more points, we can use them. This is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, you can see that the parameters used are identical to
    those used in the MultiPolyline example earlier. When we create a MultiPolygon
    or MultiPolyline, the options will apply to every polygon or polyline in the collection.
    This means that they all have to be the same color, weight, opacity, and so on.
    There is a new method in the preceding code: `.bindPopup("We are the same layer")`.
    MultiPolygons and MultiPolylines also share the same pop up. Pop ups will be discussed
    later in this chapter. Also, note the use of method chaining in the line `L.multiPolygon().addTo().bindPopup()`.
    The following screenshot shows the MultiPolygon added to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![MultiPolygons](img/4812OS_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Groups of layers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MultiPolyline and MultiPolygon layers allow you to combine multiple polylines
    and polygons. If you want to create group layers of different types, such as a
    marker layer with a circle, you can use a layer group or a feature group.
  prefs: []
  type: TYPE_NORMAL
- en: The layer group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A layer group allows you to add multiple layers of different types to the map
    and manage them as a single layer. To use a layer group, you will need to define
    several layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code creates two markers and a polyline. Note that you will not
    use the `addTo(map)` function after creating the layers, like you did in the previous
    examples. You will let the layer group handle adding the layer to the map. A layer
    group requires a set of layers as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous code, an instance of `L.layerGroup()` was created as `myLayerGroup`.
    The layers passed as a parameter were `marker` and `polyline`. Finally, the layer
    group was added to the map. The earlier code shows three layers, but only two
    were added to the layer group. To add layers to a layer group without passing
    them as a parameter during creation, you can use the layer group `addLayer()`
    method. This method takes a layer as a parameter, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, all three layers have been added to the layer group and are displayed
    on the map. The following screenshot shows the layer group added to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The layer group](img/4812OS_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to remove a layer from the layer group, you can use the `removeLayer()`
    method and pass the layer name as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If you remove a layer from the group, it will no longer be displayed on the
    map because the `addTo()` function was called for the layer group and not the
    individual layer. If you want to display the layer but no longer want it to be
    part of the layer group, use the `removeLayer()` function, as shown in the preceding
    code, and then add the layer to the map as shown in the earlier examples. This
    is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: All style options and pop ups need to be assigned to the layer when it is created.
    You cannot assign a style or pop ups to a layer group as a whole. This is where
    feature groups can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Feature groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A feature group is similar to a layer group, but extends it to allow mouse
    events and includes the `bindPopup()` method. The constructor for a feature group
    is the same as the layer group: just pass a set of layers as a parameter. The
    following code displays an example of a feature group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the layers added are the same three that you added in
    the layer group. Since the feature group extends the layer group, you can assign
    a style and pop up to all of the layers at once. The following screenshot shows
    the feature group added to the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Feature groups](img/4812OS_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you created the polyline in the previous example, you set the color to
    `red`. Note now that since you passed style information to the feature group by
    setting the color to `purple`, the polyline took the information from the feature
    group and discarded its original settings. If you removed the polyline from the
    feature group, it will be removed from the map as well. If you try to add the
    polyline to the map using `addTo()`, as in the previous examples, it will still
    be purple and have the new pop up. The markers are still blue even though you
    passed style information to the feature group. The `setStyle()` method only applies
    to layers in the feature group that have a `setStyle()` method. Since a polyline
    extends the `path` class, it has a `setStyle()` method. The markers do not have
    a `setStyle()` method, so their color did not change.
  prefs: []
  type: TYPE_NORMAL
- en: Pop ups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last few examples introduced pop ups. A pop up provides a way to make your
    layers interactive or provides information to the user. The simplest way to add
    a pop up to a marker, polyline, or polygon is to use the `bindPopup()` method.
    This method takes the contents of the pop up as a parameter. Using the `marker`
    variable we created earlier, we bind the pop up to it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The `bindPopup()` method allows you to enter HTML as the content. This is shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The ability to use HTML in a pop up comes in handy when you have a lot of details
    to add. It allows the use of images and links in pop ups. The following screenshot
    shows the HTML-formatted pop up added to a marker on the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pop ups](img/4812OS_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also create an instance of the `popup` class and then assign it to
    multiple objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you create an instance of the `L.popup()` class and assign
    it to the variable `mypopup`. Then, you can call the `bindPopup()` method on `marker`
    and `marker2` with `mypopup` as the parameter. Both markers will have the same
    pop up content and options.
  prefs: []
  type: TYPE_NORMAL
- en: In the last section of this chapter, you will learn how to create a function
    that allows you to create a pop up with options and pass the content as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The maps you have made so far have been tested on the desktop. One of the benefits
    of mapping in JavaScript is that mobile devices can run the code in a standard
    web browser without any external applications or plugins. Leaflet runs on mobile
    devices, such as iPhone, iPad, and Android devices. Any web page with a Leaflet
    map will work on a mobile device without any changes; however, you probably want
    to customize the map for mobile devices so that it works and looks like it was
    built specifically for mobile.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, the `L.map()` class has a `locate()` method, which uses the W3C Geolocation
    API. The Geolocation API allows you to find and track a user's location using
    the IP address, the wireless network information, or the GPS on a device. You
    do not need to know how to use the API; Leaflet handles all of this when you call
    `locate()`.
  prefs: []
  type: TYPE_NORMAL
- en: HTML and CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step in converting your Leaflet map to a mobile version is to have
    it display properly on mobile devices. You can always tell when you open a website
    on your phone whether the developer took the time to make it mobile-accessible.
    How many times have you been on a website where the page loads and all you can
    see is the top-left corner, and you have to zoom around to read the page. It is
    not a good user experience. In `LeafletEssentials.html` in the `<head>` tag after
    the `<link>` tag for the CSS file, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding CSS code, you set the `padding` and `margin` values to `0`.
    Think of a web page as a box model, where each element exists in its own box.
    Each box has a margin, which is the space between it and other boxes, and also
    padding, which is the space between the content inside the box and the box border
    (even if a border is not physically drawn). Setting the `padding` and `margin`
    values to `0` makes the `<body>` content fit to the size of the page. Lastly,
    you set the `height` value of the `<html>`, `<body>`, and `<div id = 'map'>` elements
    to `100%`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In CSS, `#` is the ID selector. In the code, `#map` is telling us to select
    the element with the `id = 'map'` line. In this case, it is our `<div>` element
    that holds the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows an overview of the settings for the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![HTML and CSS](img/4812OS_01_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The last step is to add the following code in the `<head>` section and after
    the `</title>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code modifies the viewport that the site is seen through. This
    code sets the viewport to the width of the device and renders it by a ratio of
    1:1\. Lastly, it disables the ability to resize the web page. This, however, does
    not affect your ability to zoom on the map.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a mobile map with JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have configured the web page to render properly on mobile devices,
    it is time to add the JavaScript code that will grab the user''s current location.
    For this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the map instance, but do not use `setView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a tile layer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a function to successfully find the location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a function to unsuccessfully find the location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an event listener for `foundLocation()` and `notFoundLocation()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use locate() to set the map view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code creates the map and adds a tile layer. It then skips over the functions
    and event listeners and tries to locate the user. If it is able to locate the
    user, it runs the code in `foundLocation()` and sets the view to the latitude
    and longitude of the user. If it does not locate the user, it executes the code
    in `notFoundLocation()` and displays a zoomed-out world map.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this example more usable, add the following code to `notFoundLocation()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The `alert()` function creates a pop up in the browser with the message passed
    as a parameter. Anytime that the browser is unable to locate the user, they will
    see the following message. While some devices do not have location capabilities,
    at times, they need to be allowed in their security settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a mobile map with JavaScript](img/4812OS_01_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, add the following code to `foundLocation()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will run when the user''s location is found. The `e` in
    `foundLocation(e)` is an event object. It is sent when an event is triggered to
    the function that is responsible for handling that specific event type. It contains
    information about the event that you will want to know. In the preceding code,
    the first event object we grab is the `timestamp` object. If you were to display
    the timestamp in a pop up, you would get a bunch of numbers: **1400094289048**.
    The timestamp is the number of milliseconds that have passed since January 1,
    1970 00:00:00 UTC. If you create an instance of the `date` class and pass it to
    the `timestamp` object, you receive a human-readable date. Next, the code creates
    a marker. The latitude and longitude are stored in `e.latlng`. You then add the
    marker to the map and bind a pop up. The pop up needs a string as a parameter,
    so you can use the `toString()` method of the `date` class or use `String(mydate)`
    to convert it. The following screenshot shows the pop up with the date and time
    when the user clicked on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a mobile map with JavaScript](img/4812OS_01_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Events and event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have created maps that display data and added a pop up that displayed
    when the user clicked on a marker. Now, you will learn how to handle other events
    and assign these events to event handler functions to process them and do something
    as a result.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will first learn how to handle a `map` event. There are 34 events in the
    `map` class that can be subscribed to. This example will focus on the `click`
    event. To subscribe to an event, you use the event method `.on()`; so, for a `map`
    event, you use the `map.on()` method and pass the parameters as the event and
    function to handle the event. This is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The code tells Leaflet to send an alert pop-up box with the text **You clicked
    the map** when the user clicks on the map. In the mobile example, you created
    a listener that had a named function that executed `foundLocation()`. In the preceding
    code, the function was put in as a parameter. This is known as an anonymous function.
    The function has no name, and so, it can only be called when the user clicks on
    the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember `e` from the mobile example? If you pass `e` to the function, you
    can get the `longlat` value of the spot that the user clicked on, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is spaced in a way that is more readable, but you can put
    it all on a single line. The code displays the longitude and latitude of the spot
    where the user clicked on the map. The second line assigns the variable `coord`,
    the value of `e.latlng`. The next two lines strip the latitude and longitude from
    the value so that you can display them clearly.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can build on this example by adding a marker when the user clicks on the
    map by simply replacing the code with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is identical to the code in the mobile example. The difference
    is that in the mobile example, it was only executed when `locate()` was successful.
    In this example, it is executed every time the user clicks on the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the section on markers, you created a marker that had the property `draggable:true`.
    Markers have three events that deal with dragging: `dragstart`, `drag`, and `dragend`.
    Perform the following steps to return the longitude and latitude of the marker
    in a pop up on `dragend`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the marker and set the draggable property to `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write a function to bind a pop up to the marker and call the method `getLatLong()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Subscribe to the event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the map and click on the marker. Hold down the left mouse button and drag
    the marker to a new location on the map. Release the left button and click on
    the marker again to trigger the pop up. The pop up will have the new latitude
    and longitude of the marker.
  prefs: []
  type: TYPE_NORMAL
- en: Custom functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You subscribed to an event and handled it with a function. So far, you have
    only passed `e` as a parameter. In JavaScript, you can send anything you want
    to the function. Also, functions can be called anywhere in your code. You do not
    have to call them only in response to an event. In this short example, you will
    create a function that returns a pop up and is triggered on a call and not by
    an event.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a marker and bind a pop up to it. For the content of the pop
    up, enter `createPopup(Text as a parameter)`. Add the marker to the map as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a second marker and set the content of the pop up to `createPopup (Different
    text as a parameter)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous examples, you created a pop up by passing text or a pop-up
    instance. In this example, you call a function, `createPopup()`, with a string
    as a parameter, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The function takes a parameter called `x`. In the marker, when you call the
    function, you pass a string. This is sent to the function and stored as `x`. When
    the pop up is created, the `setContent()` method is given the value of `x` instead
    of a hardcoded string. This function is useful if you have a lot of options set
    on your pop ups and want them all to be the same. It limits the number of times
    that you need to repeat the same code. Just pass the text of the pop up to the
    function, and you get a new pop up with the standardized formatting options. The
    following screenshot shows both of the pop ups generated by the custom function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Custom functions](img/4812OS_01_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered almost every major topic required to create a Leaflet map.
    You learned how to add tile layers from multiple providers, including satellite
    imagery. You can now add points, lines, and polygons to the map, as well as collections
    of polylines and polygons. You can group layers of different types into layer
    or feature collections. This chapter covered the styling of objects and adding
    pop ups. You learned how to interact with the user by responding to events and
    created custom functions to allow you to code more by writing less.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to add GeoJSON data to your map.
  prefs: []
  type: TYPE_NORMAL
