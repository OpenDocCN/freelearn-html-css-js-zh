- en: Implementing Web Components using Polymer and Stencil
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Up until now, we have built components using vanilla JavaScript with no dependencies.
    But sometimes, companies make a decision to use libraries that can help ease the
    workflow. In this chapter, we will look into two different libraries: Polymer
    and Stencil. In the background, these two libraries use Web Components, but both
    of them come with their own features. Let''s dive into these libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Polymer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stencil
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polymer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Polymer is a library that lets you create custom elements in a really easy way.
    It comes with a set of features that can be used to create shadow DOM, add events,
    and use attributes and properties just like we have learned in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the Polymer project at the following URL: [https://Polymer-library.Polymer-project.org/](https://polymer-library.polymer-project.org/).
  prefs: []
  type: TYPE_NORMAL
- en: A major difference between the vanilla Web Components and Polymer is that Polymer
    comes with its own data system. That means you can make various computations and
    manipulations to the component based on this data. You can observe attribute and
    property changes, and you can even do two-way data binding, something that is
    missing from vanilla Web Components. The presence of these features helps with
    a lot of use cases, and helps with making the life of a developer easier.
  prefs: []
  type: TYPE_NORMAL
- en: We will now take a look at how to use Polymer in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Hello World in Polymer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unlike vanilla Web Components, Polymer is a library that needs to be installed.
    But before we even have the library installed, we will be needing Polymer''s **Command
    Line Interface** (**CLI**) that come with its own server and testing framework.
    We can install it using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And, once installed, you can check if it is installed by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that Polymer is installed, let''s try to create a `<hello-world>` component
    using this library. Let''s create a folder called `HelloWorld` and then create
    a file called `index.html`. The contents of this file can be very basic, like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to run this file, instead of using `SimpleHTTPServer`, we will use
    a server that is provided by `Polymer-cli` itself. We can run the server by using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you run this command, you should get a console output this in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This shows that the server is running, and you can see the `index.html` file
    running on `http://127.0.0.1:8081/`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our server is running and Polymer is installed, let's start writing
    our `<hello-world>` Polymer component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are going to use the `Polymer` library, let''s install the library
    for this project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, let''s create a file called `hello-world.js`. The contents of this file
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are simply importing `Polymer` library that we just installed using `npm`
    command. Also, instead of using `HTMLElement`, we are using `PolymerElement`.
    And then, we are registering the class as a custom element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The class definition will be a little bit different than vanilla Web Components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have the `constructor()` method, just like vanilla Web Components,
    but the `super()` method call doesn't have `props` in it. Also, we are not manually
    calling the `render()` method. Instead, the code is rendered automatically from
    the `template()` property.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to keep in mind that unlike vanilla Web Components, we are not
    manually creating the shadow DOM for a Polymer element. Here, we use the `html`
    object from the `Polymer` library to stamp the `html` to the element's shadow
    DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the component is created, we can use it in our `index.html` file in
    the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are simply importing the `hello-world.js` file, and then using the
    `<hello-world>` element directly.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the `Polymer` library helps a lot when it comes to saving the
    lines of code. And, with this example, you now know how to create a Polymer element.
    You can also try creating other elements that we have studied in the previous
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Nested elements in Polymer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we looked at how different Web Components are used
    inside other Web Components to create complex and nested components. This methodology
    is not just limited to vanilla Web Components. We can use it inside Polymer components
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we have another `PolymerElement` that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it is not a complex element. In fact, it looks a lot like the
    `<hello-world>` element. Now, let''s say we want to include this `<second-element>`
    in the `<hello-world>` element. We can do it by changing the `<hello-world>` code
    in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see that we are importing the code from the `./second-element.js` file.
    And we are simply using it with the help of the `<second-element>` HTML code.
    It is that simple.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you notice the definition of the `<second-element>` class, you can
    see that we have used a style tag as well. We can make use of all the styles that
    we have studied in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes and properties in Polymer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we saw how attributes and properties help make our
    Web Components better. They help with passing data, as well as keep track of the
    element's state. Similarly, we can do the same for elements built using Polymer
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how properties work in Polymer. Let''s say we have an
    element that shows the text Hello, Prateek, where the string `Prateek` is a variable.
    The code would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the only extra thing that we are adding is the `properties` getter function.
    The name of the property is `name`, and the default value is `''No Name Provided
    Yet''`. When you are using the element, you can either simply call the element,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This would display the text Hello, No Name Provided Yet. Or, you can provide
    the name by adding an attribute like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This would display the text Hello, Prateek. You can add multiple properties
    as well. For example, you can add `lastname` or `age` as properties as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'But what if you have nested components and this text is a variable coming from
    a parent component? Let''s take a look at what this code would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are passing the `name` property as a variable to the attribute in the
    `<hello-string>` element. This whole process is called **data-bindin****g**. If
    you would like to know more about data-binding in Polymer, you can visit the following
    link: [https://Polymer-library.Polymer-project.org/3.0/docs/devguide/data-binding](https://polymer-library.polymer-project.org/3.0/docs/devguide/data-binding).
  prefs: []
  type: TYPE_NORMAL
- en: With the help of these concepts, you should be able to create Polymer elements
    with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Stencil
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stencil is a compiler for Web Components. It uses TypeScript and JSX to create
    Web Components. It even comes with a lot of features that are missing in the vanilla
    Web Components that can be used to make good single-page web apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get a better idea of what Stencil can do with the help of a `<hello-world>` component.
    This component required a little understanding of TypeScript as well as JSX. If
    at any point in time you would like to take a look at the docs, you can find them
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TypeScript**: [https://www.typescriptlang.org/](https://www.typescriptlang.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSX**: [https://reactjs.org/docs/introducing-jsx.html](https://reactjs.org/docs/introducing-jsx.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I will try to keep my code as simple as possible so that you don't have to look
    at the docs. Now that we have that out of the way, let's create a hello-world
    component using Stencil.
  prefs: []
  type: TYPE_NORMAL
- en: The Hello World Stencil component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Stencil comes with a lot of features to build components. Let''s first set
    up our folder to write a component. You can do so by typing the following command
    in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You will be shown a bunch of options, from which you can select the component.
    On selecting the component option, feel free to enter a name for the project.
    I chose `stenciljs-app`. And this would print out an output that looks something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a starter project with a default component in it. You can
    run the project by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This will run the `stenciljs-app` project on `localhost:3333` in the browser.
    It will also show the default component, `<my-component>`, as a part of the output.
    This is technically the `<hello-world>` component provided by default inside our
    project. But we will create our own `<hello-world>` component from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create our `<hello-world>` component, we need to first complete
    some pre-requisites. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `hello-world` inside the `src/components` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file called `hello-world.tsx` inside this `hello-world` folder. We
    are using the `.tsx` extension because it is a TypeScript file. Stencil will compile
    this file to a `.js` file. We do not have to worry about it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create another file called `hello-world.css` inside the `hello-world` folder.
    This is where we will be writing the CSS for this component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have the setup complete for the `<hello-world>` component, let''s
    start writing the code for it. This is what `hello-world.tsx` looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we are importing the `Component` and `h` objects from the
    `stencil` library. When we talk about technical jargon, we will be calling this `@Component`
    as `@Component` decorator. As we can see, we are simply stating the tag for the
    component, the CSS it needs to use for styling, and whether the component needs
    to render in a shadow DOM or not. Inside the `HelloWorld` class, we are simply
    returning the JSX for this component. If you are from the React background, then
    it should be pretty straightforward. But if you are new to JSX, for the sake of
    simplicity, you can think of it as a way to write HTML inside JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: So, we have now created our first Stencil component. Now, to see it on the web
    page, you can simply add the `<hello-world>` tag in the `index.html` file inside
    the `src` directory. Stencil will pick it up automatically, create its include,
    and compile it for you. You just have to refresh the page.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to create a Stencil component, let's dive into the next
    section where we create nested Stencil Components.
  prefs: []
  type: TYPE_NORMAL
- en: Nested Stencil components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last section, we looked into the `@Component` decorator and how it helps
    create a Stencil component. In this section, we will use one more decorator called
    the `@Prop` decorator to declare the variables that will act as properties which
    can be passed onto other components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an element that shows us a list of students, called `<student-list>`.
    In Stencil, it would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are doing the same thing as we have done in the `<hello-world>` component.
    We are simply importing the `stencil` library, then setting the name of the component
    and CSS styles in the `@Component` decorator. And, in the class, we have a component
    called `<student-name>` that has the first and last name as attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the definition of this `<student-name>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, if we look inside the `StudentName` class, we can see that we are using
    the `@Prop` decorator. With the help of this `@Prop` decorator, we are defining
    two properties: `first` and `last`. The `first` property also has `reflectToAttr`
    set to `true`, which means that this property can be seen as an attribute when
    it gets called inside the `<student-list>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da615635-b5bb-4223-a360-b511f4424783.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we can see the attribute first in the shadow DOM for this component. But
    since we did not set `reflectToAttr` to `true` for the `last` property, it doesn't
    get reflected in the attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you notice the definition of the `<student-list>` component, we did
    not import the `<student-name>` component. We simply started using the element.
    Stencil is smart enough to pick up these changes and auto-include them in the
    files. This way, we can create nested elements without worrying about the imports.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to create nested components using Stencil, let's look at
    one of the ways to achieve performance on to the web page we are trying to create.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-rendering for Stencil components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we talk about rending a single page web app, we are basically sending all
    the resources onto the page and then letting the client do all the computations
    to build the page. This is a computational-heavy process, which may lead to longer
    times to first meaningful paint on the site.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this problem, Stencil comes with pre-rendering on by default. Pre-rendering
    lets the server generate static HTML, CSS, and JavaScript files at build time,
    and can then be hydrated with the data for that page. This lets users see the
    page faster, lets the search engine crawlers browse the site for SEO faster, and
    lets the user see the page even when the JavaScript is disabled on the client
    side.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create Polymer and Stencil components. We
    looked into how these components can be nested to form more complex elements.
    We also looked into how attributes and properties can be passed into child components
    in both Polymer and Stencil components.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked into the pre-rendering feature of Stencil, and how it can be
    used to make a site perform better.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look into how vanilla Web Components can be used
    in various other libraries and frameworks.
  prefs: []
  type: TYPE_NORMAL
