- en: Chapter 1. Getting Started with D3.js
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 使用D3.js入门
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Setting up a simple D3 development environment
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置简单的D3开发环境
- en: Setting up an NPM-based D3 development environment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置基于NPM的D3开发环境
- en: Understanding D3-style functional JavaScript
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解D3风格的函数式JavaScript
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter is designed to get you up and running with D3.js and covers fundamental
    aspects, such as what D3.js is and how to set up a typical D3.js data visualization
    environment. One particular section is also devoted to covering some lesser known
    areas of JavaScript that D3.js relies heavily on.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在帮助您快速上手D3.js，并涵盖基本方面，例如D3.js是什么以及如何设置典型的D3.js数据可视化环境。本章还特别介绍了一些D3.js高度依赖的、不太为人所知的JavaScript领域。
- en: 'What is D3? D3 refers to *Data-Driven Documents*, and according to the official
    D3 Wiki:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是D3？D3指的是*数据驱动文档*，根据官方D3 Wiki的描述：
- en: '***D3** (**Data-Driven Documents** or D3.js) is a JavaScript library for visualizing
    data using web standards. D3 helps you bring data to life using SVG, Canvas and
    HTML. D3 combines powerful visualization and interaction techniques with a data-driven
    approach to DOM manipulation, giving you the full capabilities of modern browsers
    and the freedom to design the right visual interface for your data.*'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***D3** (*数据驱动文档*或D3.js)是一个用于使用Web标准可视化数据的JavaScript库。D3帮助您通过SVG、Canvas和HTML将数据生动呈现。D3将强大的可视化和技术与数据驱动的DOM操作方法相结合，为您提供现代浏览器的全部功能以及为您的数据设计正确视觉界面的自由度。*'
- en: '*-D3 Github Wiki (2016, August)*'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*-D3 Github Wiki (2016年8月)*'
- en: In a sense, D3 is a specialized JavaScript library that allows you to create
    amazing data visualizations using a simple (data driven) approach by leveraging
    the existing Web standards. D3.js was created by Mike Bostock ([https://bost.ocks.org/mike/](https://bost.ocks.org/mike/)
    ) and superseded his previous work on a different JavaScript data visualization
    library called Protovis. For more information on how D3 was created and on the
    theory that influenced both Protovis and D3.js, please check out the links in
    the following information box. Here, in this book, we will focus more on how to
    use D3.js to power your visualization. Initially, some aspects of D3 maybe a bit
    confusing due to its different approach for data visualization. I hope that over
    the course of this book, a large number of topics, both basic and advanced, will
    make you comfortable and effective with D3\. Once it is properly understood, D3
    can improve your productivity and expressiveness with data visualizations by orders
    of magnitude.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种意义上，D3是一个专门的JavaScript库，它允许您通过利用现有的Web标准，以简单（数据驱动）的方式创建令人惊叹的数据可视化。D3.js是由Mike
    Bostock([https://bost.ocks.org/mike/](https://bost.ocks.org/mike/))创建的，并取代了他之前在另一个名为Protovis的JavaScript数据可视化库上的工作。有关D3是如何创建的以及影响Protovis和D3.js的理论的信息，请参阅以下信息框中的链接。在这里，本书将更多地关注如何使用D3.js来增强您的可视化。由于D3在数据可视化方面采用了不同的方法，因此一开始可能会有些令人困惑。我希望在本书的整个过程中，大量基本和高级主题将使您对D3感到舒适和有效。一旦正确理解，D3可以通过数据可视化大幅提高您的生产力和表达能力。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For a more formal introduction to the idea behind D3, refer to the *Declarative
    Language Design for Interactive Visualization* paper published by *Mike Bostock*
    on *IEEE InfoVis 2010* at [http://vis.stanford.edu/papers/protovis-design](http://vis.stanford.edu/papers/protovis-design)
    . If you are interested to know how D3 came about, I recommend that you check
    out the *D3: Data-Driven Document* paper published by *Mike Bostock*, *Vadim Ogievestsky*,
    and *Jeffery Heer* on *IEEE InfoVis 2011* at [http://vis.stanford.edu/papers/d3](http://vis.stanford.edu/papers/d3)
    . Protovis, the predecessor of D3.js, also created by *Mike Bostock* and *Jeff
    Heer* of the Stanford Visualization Group can be found at [https://mbostock.github.io/protovis/](https://mbostock.github.io/protovis/)
    .'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '若想更正式地了解D3背后的理念，请参阅由Mike Bostock在2010年IEEE InfoVis上发表的《*交互可视化声明性语言设计*》论文，链接为[http://vis.stanford.edu/papers/protovis-design](http://vis.stanford.edu/papers/protovis-design)
    。如果您想了解D3是如何产生的，我建议您查看Mike Bostock、Vadim Ogievestsky和Jeffery Heer在2011年IEEE InfoVis上发表的《*D3:
    数据驱动文档*》论文，链接为[http://vis.stanford.edu/papers/d3](http://vis.stanford.edu/papers/d3)
    。D3.js的前身Protovis也是由Mike Bostock和斯坦福可视化小组的Jeff Heer创建的，可以在[https://mbostock.github.io/protovis/](https://mbostock.github.io/protovis/)找到。'
- en: Setting up a simple D3 development environment
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置简单的D3开发环境
- en: The first thing you will need when you start a D3-powered data visualization
    project is a working development environment. In this recipe, we will show you
    how a simple D3 development environment can be set up within minutes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始一个由D3驱动的数据可视化项目时，你首先需要的是一个工作开发环境。在这个食谱中，我们将向你展示如何在几分钟内设置一个简单的D3开发环境。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before we start, make sure that you have your favorite text editor installed
    and ready on your computer.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，请确保你已经安装并准备好你的文本编辑器在你的电脑上。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We''''ll start by downloading D3.js through the following steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下步骤开始下载D3.js：
- en: Download the latest stable version of D3.js from [https://d3js.org/](https://d3js.org/)
    . You can download the archived, older releases from [https://github.com/d3/d3/tags](https://github.com/d3/d3/tags)
    . Additionally, if you are interested in trying out the bleeding edge D3 build
    on master branch, then you can fork [https://github.com/d3/d3](https://github.com/d3/d3)
    .
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://d3js.org/](https://d3js.org/)下载最新的稳定版D3.js。你可以从[https://github.com/d3/d3/tags](https://github.com/d3/d3/tags)下载存档的旧版本。另外，如果你对尝试master分支上的最新D3构建感兴趣，那么你可以fork[https://github.com/d3/d3](https://github.com/d3/d3)。
- en: 'Once it is downloaded and unzipped, you will find two D3 JavaScript files,
    `d3.js` and `d3.min.js`, and other informational files in the extracted folder.
    For development purpose, it is recommended that you use the `d3.js` file, the
    *non-uglified* (minimized) version, since it can help you trace and debug JavaScript
    inside the D3 library. Once extracted, place the `d3.js` file in the same folder
    with an `index.html` file containing the following HTML:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并解压后，你将在提取的文件夹中找到两个D3 JavaScript文件，`d3.js`和`d3.min.js`，以及其他信息文件。出于开发目的，建议你使用`d3.js`文件，即*非压缩*（最小化）版本，因为它可以帮助你在D3库内部跟踪和调试JavaScript。一旦提取，将`d3.js`文件放置在与包含以下HTML的`index.html`文件相同的文件夹中：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is all you need to create, in its simplest form, a D3-powered data visualization
    development environment. With this setup, you can essentially open the HTML file
    using your favorite text editor to start your development and also to view your
    visualization by opening the file in your browser.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是创建一个D3驱动的数据可视化开发环境的全部所需。有了这个设置，你基本上可以使用你喜欢的文本编辑器打开HTML文件开始开发，也可以通过在浏览器中打开文件来查看你的可视化。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The source code for this recipe can be found at [https://github.com/NickQiZhu/d3-cookbook-v2/tree/master/src/chapter1/simple-dev-env](https://github.com/NickQiZhu/d3-cookbook-v2/tree/master/src/chapter1/simple-dev-env)
    .
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的源代码可以在[https://github.com/NickQiZhu/d3-cookbook-v2/tree/master/src/chapter1/simple-dev-env](https://github.com/NickQiZhu/d3-cookbook-v2/tree/master/src/chapter1/simple-dev-env)找到。
- en: How it works...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: D3 JavaScript library is very self-sufficient. It has no dependency on any other
    JavaScript library except what your browser already provides.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: D3 JavaScript库非常自给自足。它除了依赖于浏览器已经提供的JavaScript库外，不依赖于任何其他JavaScript库。
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If your visualization's target browser environment includes Internet Explorer
    9, it is recommended that you use the compatibility library **Aight**, which can
    be found at [https://github.com/shawnbot/aight](https://github.com/shawnbot/aight)
    , and **Sizzle selector engine**, which can be found at [http://sizzlejs.com/](http://sizzlejs.com/)
    .
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的可视化目标浏览器环境包括Internet Explorer 9，建议你使用兼容性库**Aight**，它可以在[https://github.com/shawnbot/aight](https://github.com/shawnbot/aight)找到，以及**Sizzle选择器引擎**，它可以在[http://sizzlejs.com/](http://sizzlejs.com/)找到。
- en: 'Having the following character encoding instruction in the header section was
    critical before D3 v4 release since the older version of D3 used UTF-8 symbols,
    such as π, in its source; however, with D3 v4.x, it is no longer necessary. It
    is still considered a good practice however, since other JavaScript libraries
    you will include might be using UTF-8 symbols, as shown in the following example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在D3 v4发布之前，在头部部分包含以下字符编码指令是至关重要的，因为旧版本的D3在其源代码中使用了UTF-8符号，如π；然而，随着D3 v4.x的发布，这不再是必要的。然而，考虑到你将包含的其他JavaScript库可能也在使用UTF-8符号，所以这仍然被认为是一个好的实践，如下面的例子所示：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: D3 is *completely open source* under a custom license agreement created by its
    author Michael Bostock. This license is pretty similar to the popular MIT license,
    with only one exception where it explicitly states that Michael Bostock's name
    cannot be used to endorse or promote products derived from this software without
    his permission.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: D3 在其作者迈克尔·博斯特克（Michael Bostock）创建的定制许可协议下 **完全开源**。这个许可协议与流行的 MIT 许可证非常相似，只有一个例外，即它明确指出，未经迈克尔·博斯特克的许可，不得使用其姓名来认可或推广由此软件派生的产品。
- en: There's more...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Throughout this cookbook, numerous recipe code examples will be provided. All
    example source code is provided and hosted on GitHub ([https://github.com/](https://github.com/)
    ), a popular open source social coding repository platform.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个食谱集中，将提供大量的食谱代码示例。所有示例源代码都提供并托管在 GitHub ([https://github.com/](https://github.com/)
    )，一个流行的开源社交编码仓库平台上。
- en: How to get source code
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何获取源代码
- en: The easiest way to get all the recipe source code that you will need is to clone
    the Git repository ([https://github.com/NickQiZhu/d3-cookbook-v2](https://github.com/NickQiZhu/d3-cookbook-v2)
    ) for this book. If you are not planning to set up a development environment for
    the recipes, then you can safely skip this section.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 获取所有所需食谱源代码的最简单方法是将本书的 Git 仓库 ([https://github.com/NickQiZhu/d3-cookbook-v2](https://github.com/NickQiZhu/d3-cookbook-v2)
    ) 克隆。如果您不打算为食谱设置开发环境，那么您可以安全地跳过这一节。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In case you are not familiar with Git, its clone concept is similar to the checkout
    concept in other version control software. However, cloning does a lot more than
    simply checking out the files. It also copies all branches and histories to your
    local machine, effectively cloning the entire repository to your local machine
    so you can work even when you are completely offline with this cloned repository
    in your own environment.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉 Git，其克隆概念与其他版本控制软件中的检出概念类似。然而，克隆不仅简单地检出文件，还会将所有分支和版本历史复制到您的本地机器上，实际上是将整个仓库克隆到您的本地机器上，这样您就可以在完全离线的情况下使用这个克隆的仓库在自己的环境中工作。
- en: First, install a Git client on your computer. You can find a list of Git client
    software at [https://git-scm.com/downloads](https://git-scm.com/downloads) , and
    a detailed guide on how to install it on different operating systems at [https://git-scm.com/book/en/Getting-Started-Installing-Git](https://git-scm.com/book/en/Getting-Started-Installing-Git)
    .
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在您的计算机上安装一个 Git 客户端。您可以在 [https://git-scm.com/downloads](https://git-scm.com/downloads)
    找到 Git 客户端软件列表，以及如何在不同的操作系统上安装它的详细指南 [https://git-scm.com/book/en/Getting-Started-Installing-Git](https://git-scm.com/book/en/Getting-Started-Installing-Git)
    。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Another popular way to get Git and GitHub working is to install the GitHub client,
    which gives you a richer set of features than simply Git. However, at the time
    of writing this book, GitHub only offered client software for Windows and Mac
    OS; refer to [https://desktop.github.com/](https://desktop.github.com/) .
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种使 Git 和 GitHub 工作起来更受欢迎的方法是安装 GitHub 客户端，它比单纯的 Git 提供了更丰富的功能。然而，在撰写本书时，GitHub
    只提供了 Windows 和 Mac OS 的客户端软件；请参阅 [https://desktop.github.com/](https://desktop.github.com/)
    。
- en: 'Once the Git client is installed, simply issuing the following command will
    download all recipe source code to your computer:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 Git 客户端，只需执行以下命令即可将所有食谱源代码下载到您的计算机上：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Setting up an NPM-based development environment
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置基于 NPM 的开发环境
- en: The simple setup demonstrated in the previous recipe is enough for implementing
    most recipes in this book. However, when you work on a more complex data visualization
    project that requires the use of a number of JavaScript libraries, the simple
    solution we discussed before might become a bit clumsy and unwieldy. In this section,
    we will demonstrate an improved setup using **Node Packaged Modules** (**NPM**),
    a de facto JavaScript library repository management system. If you are as impatient
    as me and want to get to the meaty part of the book, the recipes, you can safely
    skip this section and come back when you need to set up a more production-ready
    environment for your project.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的食谱中展示的简单设置对于实现本书中的大多数食谱已经足够。然而，当您从事一个需要使用多个 JavaScript 库的更复杂的数据可视化项目时，我们之前讨论的简单解决方案可能会变得有些笨拙且难以操作。在本节中，我们将演示使用
    **Node Packaged Modules** （**NPM**），一个事实上的 JavaScript 库仓库管理系统，的改进设置。如果您和我一样急切，想直接进入书籍的精华部分——食谱，您可以安全地跳过这一节，在需要为项目设置更生产就绪的环境时再回来。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Before we start, please make sure that you have NPM properly installed. NPM
    comes as part of the Node.js installation. You can download Node.js from [https://nodejs.org/](https://nodejs.org/)
    . Select the correct Node.js binary build for your OS. Once installed, the following
    `npm` command will become available in your terminal console:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，请确保你已经正确安装了 NPM。NPM 是 Node.js 安装的一部分。你可以从 [https://nodejs.org/](https://nodejs.org/)
    下载 Node.js。选择适合你的操作系统的正确 Node.js 二进制构建。安装后，以下 `npm` 命令将在你的终端控制台中可用：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding command prints out the version number of your NPM client to indicate
    that the installation is successful.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令打印出 NPM 客户端的版本号，以指示安装成功。
- en: How to do it...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'With the NPM installed, we can now create a package descriptor file to automate
    some of the manual setup steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 NPM 后，我们现在可以创建一个包描述文件来自动化一些手动设置步骤：
- en: 'First, under your project folder, create a file named `package.json` that contains
    the following code:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在你的项目文件夹下创建一个名为 `package.json` 的文件，该文件包含以下代码：
- en: '[PRE4]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once the `package.json` file is defined, you can simply run the following:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦定义了 `package.json` 文件，你只需简单地运行以下命令：
- en: '[PRE5]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Most of the fields in the `package.json` file are for informational purpose
    only, such as its name, description, home page, author, and the repository. The
    name and the version fields will be used if you decide to publish your library
    into an NPM repository in the future. What we really care about, at this point,
    are the `dependencies` and `devDependencies` fields:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`package.json` 文件中的大多数字段仅用于信息目的，例如其名称、描述、主页、作者和仓库。如果你决定将来将库发布到 NPM 仓库，将使用名称和版本字段。在此阶段，我们真正关心的是
    `dependencies` 和 `devDependencies` 字段：'
- en: The `dependencies` field describes the runtime library dependencies that your
    project has, that is, the libraries your project will need to run properly in
    a browser.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dependencies` 字段描述了项目在浏览器中正常运行所需的运行时库依赖项，即项目运行所需的库。'
- en: In this simple example, we only have one dependency on D3\. `d3` is the name
    of the D3 library that is published in the NPM repository. The version number
    `4.x` signifies that this project is compatible with any of the version 4 releases,
    and NPM should retrieve the latest stable version 4 build to satisfy this dependency.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个简单的示例中，我们只依赖 D3。`d3` 是在 NPM 仓库中发布的 D3 库的名称。版本号 `4.x` 表示该项目与任何版本 4 的发布版本兼容，NPM
    应该检索最新的稳定版本 4 构建来满足这个依赖。
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: D3 is a self-sufficient library with zero external runtime dependency. However,
    this does not mean that it cannot work with other popular JavaScript libraries.
    I regularly use D3 with other libraries to make my job easier, for example, JQuery,
    Zepto.js, Underscore.js, and ReactJs to name a few.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: D3 是一个自给自足的库，没有外部运行时依赖。然而，这并不意味着它不能与其他流行的 JavaScript 库一起工作。我经常使用 D3 与其他库一起使用，以简化我的工作，例如
    JQuery、Zepto.js、Underscore.js 和 ReactJs 等等。
- en: The `devDependencies` field describes development time (compile time) of library
    dependencies. What this means is that libraries specified under this category
    are only required in order to build this project, and not required to run your
    JavaScript project.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devDependencies` 字段描述了库依赖项的开发时间（编译时间）。这意味着在此类别下指定的库仅用于构建此项目，而不是运行 JavaScript
    项目所必需的。'
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Detailed NPM package JSON file documentation can be found at [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json)
    .
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 详细 NPM 包 JSON 文件文档可以在 [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json)
    找到。
- en: Executing the `npm install` command will automatically trigger NPM to download
    all dependencies that your project requires, including your dependencies' dependencies
    recursively. All dependency libraries will be downloaded into the `node_modules`
    folder under your project's root folder. When this is done, you can just simply
    create your HTML file as shown in the previous recipe, and load your D3 JavaScript
    library directly from `node_modules/d3/build/d3.js`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `npm install` 命令将自动触发 NPM 下载项目所需的所有依赖项，包括依赖项的依赖项递归下载。所有依赖库都将下载到项目根目录下的 `node_modules`
    文件夹中。完成此操作后，你只需简单地创建一个 HTML 文件，如前一个示例所示，并直接从 `node_modules/d3/build/d3.js` 加载
    D3 JavaScript 库。
- en: The source code for this recipe with an automated build script can be found
    at [https://github.com/NickQiZhu/d3-cookbook-v2/tree/master/src/chapter1/npm-dev-env](https://github.com/NickQiZhu/d3-cookbook-v2/tree/master/src/chapter1/npm-dev-env)
    .
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱的源代码以及自动构建脚本可以在[https://github.com/NickQiZhu/d3-cookbook-v2/tree/master/src/chapter1/npm-dev-env](https://github.com/NickQiZhu/d3-cookbook-v2/tree/master/src/chapter1/npm-dev-env)找到。
- en: Relying on NPM is a simple and yet more effective way to save yourself from
    all the trouble of downloading JavaScript libraries manually and the constant
    need for keeping them up to date. However, an astute reader may have already noticed
    that with this power we can easily push our environment setup to the next level.
    What if you are building a large visualization project where thousands of lines
    of JavaScript code will be created? Then obviously, our simple setup described
    here will no longer be sufficient. However, modular JavaScript development by
    itself can fill an entire book; therefore, we will not try to cover this topic
    since our focus is on data visualization and D3\. In later chapters, when unit
    test-related recipes is discussed, we will expand the coverage on this topic to
    show how our setup can be enhanced to run automated build and unit tests.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖 NPM 是一种简单且更有效的方法，可以让你免于手动下载 JavaScript 库的所有麻烦以及不断更新它们的需要。然而，一个敏锐的读者可能已经注意到了，有了这种能力，我们可以轻松地将我们的环境设置提升到下一个层次。如果你正在构建一个大型可视化项目，其中将创建数千行
    JavaScript 代码，那会怎么样？显然，我们在这里描述的简单设置将不再足够。然而，模块化 JavaScript 开发本身就可以填满一本书；因此，我们不会尝试涵盖这个主题，因为我们的重点是数据可视化和
    D3。在后面的章节中，当讨论与单元测试相关的食谱时，我们将扩展这个主题的范围，以展示如何增强我们的设置以运行自动构建和单元测试。
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'D3 v4.x is very modular; so if you only need a part of the D3 library for your
    project, you can also selectively include D3 submodule as your dependency. For
    example, if you only need `d3-selection` module in your project, then you can
    use the following dependency declaration in your `package.json` file: `"dependencies":
    {` `      "d3-selection":"1.x"` `}`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 'D3 v4.x 非常模块化；所以如果你只需要 D3 库的一部分用于你的项目，你也可以选择性地包含 D3 子模块作为你的依赖。例如，如果你只需要 `d3-selection`
    模块在你的项目中，那么你可以在你的 `package.json` 文件中使用以下依赖声明：`"dependencies": {` `      "d3-selection":"1.x"`
    `}`'
- en: There's more...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Although in previous sections it was mentioned that you can just open the HTML
    page that you have created using your browser to view your visualization result
    directly, this approach does have its limitations. This simple approach stops
    working once we  need to load data from a separate data file (this is what we
    will do in later chapters, and it is also the most likely case in your daily working
    environment) due to the browser's built-in security policy. To get around this
    security constraint, it is highly recommended that you set up a local HTTP server
    so your HTML page and the data file can be accessed from this server instead of
    being loaded from a local file system directly.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在前面的小节中提到，你可以直接使用浏览器打开你创建的 HTML 页面来查看你的可视化结果，但这种方法确实有其局限性。一旦我们需要从单独的数据文件中加载数据（这是我们将在后面的章节中做的，也是你日常工作中最可能的情况），由于浏览器的内置安全策略，这种简单的方法就不再有效了。为了绕过这个安全限制，强烈建议你设置一个本地
    HTTP 服务器，这样你的 HTML 页面和数据文件就可以从这个服务器访问，而不是直接从本地文件系统加载。
- en: Setting up a local HTTP server
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置本地 HTTP 服务器
- en: There are probably more than a dozen different ways to set up an HTTP server
    on your computer based on the operating system you use and the software package
    you decide to use to act as an HTTP server. Here, I will attempt to cover some
    of the most popular setups.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你使用的操作系统和你决定用作 HTTP 服务器的软件包，你可能有十几种不同的方法在你的电脑上设置 HTTP 服务器。在这里，我将尝试涵盖一些最流行的设置。
- en: Python Simple HTTP server
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Python 简单 HTTP 服务器
- en: 'This is my favorite for development and fast prototyping. If you have Python
    installed on your OS, which is usually the case with any Unix/Linux/Mac OS distribution,
    then you can simply type the following command in your terminal with Python 2:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我最喜欢的用于开发和快速原型设计的工具。如果你在你的操作系统上安装了 Python，这在任何 Unix/Linux/Mac OS 分发版中通常是默认的，那么你只需在你的终端中输入以下命令（使用
    Python 2）：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Alternatively, type the following command with Python 3 distribution:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用 Python 3 分发版输入以下命令：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This little python program will launch an HTTP server and start serving any
    file right from the folder where this program is launched. This is by far the
    easiest way to get an HTTP server running on any OS.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小小的 Python 程序将启动一个 HTTP 服务器，并从程序启动的文件夹开始服务任何文件。这是在任意操作系统上运行 HTTP 服务器最简单的方法。
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you don't have python installed on your computer yet, you can get it from
    [https://www.python.org/getit/](https://www.python.org/getit/) . It works on all
    modern OS, including Windows, Linux, and Mac.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您电脑上还没有安装 Python，您可以从 [https://www.python.org/getit/](https://www.python.org/getit/)
    获取它。它适用于所有现代操作系统，包括 Windows、Linux 和 Mac。
- en: Node.js HTTP server
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Node.js HTTP 服务器
- en: If you have Node.js installed, perhaps as part of the development environment
    setup exercise we did in the previous section, then you can simply install the
    `http-server` module. Similar to the Python Simple HTTP Server, this module will
    allow you to launch a lightweight HTTP server from any folder and start serving
    pages right away.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了 Node.js，也许是我们之前章节中进行的开发环境设置练习的一部分，那么您可以简单地安装 `http-server` 模块。类似于 Python
    Simple HTTP 服务器，此模块将允许您从任何文件夹启动轻量级 HTTP 服务器并立即开始服务页面。
- en: 'First, you need to install the `http-server` module using the following command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要使用以下命令安装 `http-server` 模块：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `-g` option in this command will install `http-server` module globally,
    so it will become available in your command-line terminal automatically. Once
    this is done, you can launch the server from any folder you are in by simply issuing
    the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在此命令中的 `-g` 选项将全局安装 `http-server` 模块，因此它将自动在您的命令行终端中可用。一旦完成，您就可以通过简单地发出以下命令从您所在的任何文件夹启动服务器：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This command will launch a Node.js-powered HTTP server on the default port `8080`,
    or if you want, you can use the `-p` option to provide a custom port number for
    it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在默认端口 `8080` 上启动一个由 Node.js 驱动的 HTTP 服务器，或者如果您想，您可以使用 `-p` 选项为它提供一个自定义端口号。
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are running the `npm install` command on Linux, Unix, or Mac OS, you
    may need to run the command in the `sudo` mode or as root in order to use the
    `-g` global installation option.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 Linux、Unix 或 Mac OS 上运行 `npm install` 命令，您可能需要以 `sudo` 模式运行命令或作为 root 用户，以便使用
    `-g` 全局安装选项。
- en: Understanding D3-style JavaScript
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 D3 风格的 JavaScript
- en: D3 is designed and built using functional style JavaScript, which might come
    as a bit unfamiliar or even alien to someone who is more comfortable with the
    procedural or object-oriented JavaScript styles. This recipe is designed to cover
    some of the most fundamental concepts in functional JavaScript required to make
    sense of D3, and furthermore enable you to write your visualization code in the
    D3 style.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: D3 是使用函数式风格的 JavaScript 设计和构建的，这可能对更习惯于过程式或面向对象 JavaScript 风格的人来说有些不熟悉，甚至可能感到陌生。这个菜谱旨在涵盖
    D3 所需的一些最基本的功能 JavaScript 概念，并进一步使您能够以 D3 风格编写可视化代码。
- en: Getting ready
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Open your local copy of the following file in your web browser: [https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter1/functional-js.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter1/functional-js.html)
    .'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中打开以下文件的本地副本：[https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter1/functional-js.html](https://github.com/NickQiZhu/d3-cookbook-v2/blob/master/src/chapter1/functional-js.html)
    .
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s dig a little deeper into the good part of JavaScript, the more functional
    side. Take a look at the following code snippet:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解一下 JavaScript 的优点，即更函数式的一面。看看以下代码片段：
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding code snippet generates the following simple widget on your web
    page:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段在您的网页上生成以下简单的小部件：
- en: '![How to do it...](img/image_01_001.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/image_01_001.jpg)'
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Despite its simplicity, the interface of this widget has this undeniable similarity
    to the D3 style of JavaScript. This is not by coincidence but rather by leveraging
    a JavaScript programming paradigm called functional objects. Like many interesting
    topics, this is another topic that can fill an entire book by itself; nevertheless,
    I will try to cover the most important and useful aspects of this particular paradigm
    in this section, so you can not only understand D3''s syntax but you''ll also
    be able to create your code in this fashion. As stated on D3''s project Wiki,
    this functional programming style gives D3 much of its flexibility:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个小部件的界面很简单，但它与 D3 风格的 JavaScript 界面有着不可否认的相似性。这不是巧合，而是通过利用一种名为函数对象的 JavaScript
    编程范式实现的。像许多有趣的话题一样，这也是一个可以单独填满一本书的主题；尽管如此，我将在本节中尝试涵盖这个特定范式最重要的和最有用的方面，这样你不仅可以理解
    D3 的语法，还能以这种方式创建你的代码。正如 D3 项目 Wiki 所述，这种函数式编程风格给了 D3 很大的灵活性：
- en: '*D3''s functional style allows code reuse through a diverse collection of components
    and plugins.                                                                  
                                                                                 
                                  -D3 Wiki (2016, August)*'
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*D3 的函数式风格通过一系列组件和插件允许代码重用。 ——D3 Wiki (2016 年 8 月)*'
- en: Functions are objects
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数是对象
- en: 'Functions in JavaScript are objects. Like any other object in JavaScript, function
    object is just a collection of name and value pair. The only difference between
    a function object and a regular object is that function can be invoked and additionally
    associated with the following two hidden properties: function context and function
    code. This might come as a surprise and seem unnatural, especially if you come
    from a more procedural programming background. Nevertheless, this is the critical
    insight most of us need in order to make sense of some of the *strange* ways that
    D3 uses functions.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 中的函数是对象。就像 JavaScript 中的任何其他对象一样，函数对象只是一个名称和值对的集合。函数对象与普通对象之间的唯一区别是函数可以被调用，并且还关联着以下两个隐藏属性：函数上下文和函数代码。这可能会让人感到惊讶，看起来不自然，尤其是如果你来自更注重过程式编程的背景。尽管如此，这是我们需要的关键洞察，以便理解
    D3 使用函数的一些*奇怪*方式。
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: JavaScript in its pre-ES6 form is generally not considered very object oriented;
    however, function object is probably one aspect where it outshines some of its
    other more object-oriented cousins.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ES6 之前，JavaScript 通常不被认为是非常面向对象的；然而，函数对象可能是它超越其他一些更面向对象的同类的方面之一。
- en: 'Now, with this insight in mind, let''s take a look at the following code snippet
    again:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，带着这个洞察，让我们再次看看以下代码片段：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'At the lines marked as `A`, `B`, and `C`, we can clearly see that `instance`,
    `headline`, and `description` are all internal private variables belonging to
    the `SimpleWidget` function object. While the `render` function is a function
    associated with the `instance` object which itself is defined as an object literal.
    Since functions are just objects, they can also be stored in an object/function,
    referred to by variables, contained in an array, and being passed as function
    arguments. The result of the execution of the `SimpleWidget` function is the returning
    of object instance at line `I` as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在标记为 `A`、`B` 和 `C` 的行中，我们可以清楚地看到 `instance`、`headline` 和 `description` 都是 `SimpleWidget`
    函数对象的内部私有变量。而 `render` 函数是与 `instance` 对象关联的函数，而 `instance` 对象本身被定义为对象字面量。由于函数只是对象，它们也可以存储在对象/函数中，通过变量引用，包含在数组中，以及作为函数参数传递。`SimpleWidget`
    函数执行的结果是在行 `I` 返回对象实例，如下所示：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `render` function uses some of the D3 functions that we have not covered
    yet, but let's not pay too much attention to them for now since we will cover
    each of them in depth in the next couple of chapters. Also, they basically just
    render the visual representation of this widget and do not have much to do with
    our topic on hand.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`render` 函数使用了我们尚未介绍的一些 D3 函数，但在这里我们不必过分关注它们，因为我们将在接下来的几章中深入探讨每个函数。此外，它们基本上只是渲染这个小部件的视觉表示，与我们当前的主题关系不大。'
- en: Static variable scoping
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 静态变量作用域
- en: 'Curious readers will probably be asking by now how the variable scoping is
    resolved in this example since the render function has seemingly strange access
    to not only the `instance`, `headline`, and `description` variables but also the
    `spec` variable that is passed into the base `SimpleWidget` function. This seemingly
    strange variable scoping is actually determined by a simple static scoping rule.
    This rule can be thought as the following: whenever the runtime searches for a
    variable reference, the search will be first performed locally. When a variable
    declaration is not found (as in the case of `headline` on line `C`), the search
    continues toward the parent object (in this case, the `SimpleWidget` function
    is its static parent and the `headline` variable declaration is found at line
    `B`). If still not found, then this process will continue recursively to the next
    static parent, so on and so forth, till it reaches a global variable definition;
    if it is still not found, then a reference error will be generated for this variable.
    This scoping behavior is very different from variable resolution rules in some
    of the most popular languages, such as Java and C#.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 好奇读者现在可能已经在问，在这个例子中变量作用域是如何解决的，因为渲染函数似乎可以访问`instance`、`headline`、`description`变量以及传递给基本`SimpleWidget`函数的`spec`变量。这种看似奇怪的变量作用域实际上是由一个简单的静态作用域规则决定的。这个规则可以理解为以下内容：每当运行时搜索变量引用时，首先会在本地执行搜索。当找不到变量声明（如在行`C`上的`headline`）时，搜索会继续向父对象（在这种情况下，`SimpleWidget`函数是其静态父对象，`headline`变量声明在行`B`上找到）。如果仍然找不到，那么这个过程会递归地继续到下一个静态父对象，依此类推，直到达到全局变量定义；如果仍然找不到，那么将为该变量生成一个引用错误。这种作用域行为与一些最流行的语言（如Java和C#）中的变量解析规则非常不同。
- en: It might take some time to get used to; however, don't worry too much about
    it if you still find it confusing. With more practice and by keeping the static
    scoping, rule in mind, you will be comfortable with this kind of scoping in no
    time.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要一些时间来适应；然而，如果你仍然觉得它很困惑，不必过于担心。通过更多的实践并牢记静态作用域规则，你很快就会习惯这种作用域。
- en: Note
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'One word of caution here, again for folks from Java and C# backgrounds, is
    that JavaScript does not implement block scoping. The static scoping rule we described
    only applies to function/object but not at the block level, as shown in the following
    code: `for(var i = 0; i < 10; i++){` `  for(var i = 0; i < 2; i++){` `    console.log(i);`
    `  }` `}` You might be inclined to think this code should produce 20 numbers.
    However, in JavaScript, this code creates an infinite loop. This is because JavaScript
    does not implement block scoping, so the variable `i` in the inner loop is the
    same variable `i` used by the outer loop. Therefore, it gets reset by the inner
    loop and can never end the outer loop.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这里再次提醒，对于来自Java和C#背景的人来说，JavaScript不实现块作用域。我们描述的静态作用域规则仅适用于函数/对象，而不适用于块级别，如下面的代码所示：`for(var
    i = 0; i < 10; i++){` `  for(var i = 0; i < 2; i++){` `    console.log(i);` ` 
    }` `}` 你可能会认为这段代码应该产生20个数字。然而，在JavaScript中，这段代码会创建一个无限循环。这是因为JavaScript不实现块作用域，所以内层循环中的变量`i`与外层循环使用的同一个变量`i`相同。因此，它被内层循环重置，永远不会结束外层循环。
- en: This pattern is usually referred as functional when compared with the more popular
    prototype-based **Pseudo-classical pattern**. The advantage of the functional
    pattern is that it provides a much better mechanism for information hiding and
    encapsulation since the private variables, in our case, the `headline` and `description`
    variables, are only accessible by nested functions through the static scoping
    rule; therefore, the object returned by the `SimpleWidget` function is flexible
    yet more tamper-proof and durable.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式通常在与更流行的基于原型的**伪经典模式**相比时被称为功能模式。功能模式的优势在于它提供了一个更好的机制来实现信息隐藏和封装，因为私有变量，在我们的例子中，是`headline`和`description`变量，只能通过嵌套函数通过静态作用域规则访问；因此，`SimpleWidget`函数返回的对象既灵活又更难以篡改和损坏。
- en: '*If we create an object in the functional style, and if all of the methods
    of the object make no use of this, then the object is durable. A durable object
    is simply a collection of functions that act as capabilities.*'
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*如果我们以功能风格创建一个对象，并且如果该对象的所有方法都不使用这个，那么这个对象是持久的。一个持久的对象仅仅是一组充当能力的函数集合。*'
- en: '*-Crockfort D. 2008*'
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*-Crockfort D. 2008*'
- en: Getter-setter function
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取器-设置器函数
- en: 'Let''s take a look at the following code; something strange has happened on
    line `G`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下代码；在行`G`上发生了一些奇怪的事情：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You might be asking where this `arguments` variable on line `G` came from. It
    was never defined anywhere in this example. The `arguments` variable is a built-in
    hidden parameter that is available to functions when they are invoked. The `arguments`
    variable contains all arguments for a function invocation in an array.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道第`G`行中的这个`arguments`变量是从哪里来的。在这个例子中它从未被定义过。`arguments`变量是一个内置的隐藏参数，当函数被调用时对函数可用。`arguments`变量包含一个数组，其中包含函数调用的所有参数。
- en: Note
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'In fact, `arguments` is not really a JavaScript array object. It has *length*
    and can be accessed using an index; however, it does not have many of the methods
    associated with a typical JavaScript array object, such as `slice` or `concat`.
    When you need to use a standard JavaScript array method on `arguments`, you will
    need to use the following apply invocation pattern: `var newArgs = Array.prototype.slice.apply(arguments);`'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，`arguments`并不是一个真正的JavaScript数组对象。它有`length`属性，可以通过索引访问；然而，它并没有与典型JavaScript数组对象相关联的许多方法，例如`slice`或`concat`。当你需要在`arguments`上使用标准的JavaScript数组方法时，你需要使用以下apply调用模式：`var
    newArgs = Array.prototype.slice.apply(arguments);`
- en: 'This hidden parameter when combined with the ability to omit function argument
    in JavaScript allows you to write a function such as `instance.headline` with
    unspecified number of parameters. In this case, we can either have one argument
    `h` or none. Because `arguments.length` returns `0` when no parameter is passed,
    the `headline` function returns `headline` if no parameter is passed, otherwise
    it turns into a setter if parameter `h` is provided. To clarify this explanation,
    let''s take a look at the following code snippet:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个隐藏参数与JavaScript中省略函数参数的能力结合使用时，你可以编写一个像`instance.headline`这样的函数，它具有未指定的参数数量。在这种情况下，我们既可以有一个参数`h`，也可以没有。因为当没有传递参数时，`arguments.length`返回`0`，所以如果未传递参数，`headline`函数返回`headline`，如果提供了参数`h`，它就变成了设置器。为了澄清这个解释，让我们看看下面的代码片段：
- en: '[PRE14]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, you can see how the headline function can be used as both setter and getter
    with different parameters.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到如何使用不同的参数将标题函数用作设置器和获取器。
- en: Function chaining
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 函数链
- en: The next interesting aspect of this particular example is the capability of
    chaining functions to each other. This is also the predominant function invocation
    pattern that the D3 library deploys since most of the D3 functions are designed
    to be chainable to provide a more concise and contextual programming interface.
    This is actually quite simple once you understand the variable, parameter function
    concept. Since a variable-parameter function, such as the `headline` function,
    can serve as setter and getter at the same time, returning the `instance` object
    when it's acting as a setter allows you to immediately invoke another function
    on the invocation result, hence the chaining.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定示例的下一个有趣方面是函数相互链式调用的能力。这也是D3库主要采用的函数调用模式，因为大多数D3函数都是设计为可链式的，以提供更简洁和上下文相关的编程接口。一旦你理解了变量、参数函数的概念，这实际上是非常简单的。由于变量参数函数，如`headline`函数，可以同时作为设置器和获取器，当它作为设置器时返回`instance`对象，这允许你立即在调用结果上调用另一个函数，因此形成了链式调用。
- en: 'Let''s take a look at the following code:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看下面的代码：
- en: '[PRE15]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this example, the `SimpleWidget` function returns the `instance` object (as
    on line `I`).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`SimpleWidget`函数返回`instance`对象（如第`I`行）。
- en: '[PRE16]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Then, the `headline` function is invoked as a setter, which also returns the
    `instance` object (as on line `H`). The `description` function can then be invoked
    directly on its return, which again returns the `instance` object. Finally, the
    `render` function can be called.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`headline`函数作为设置器被调用，这也返回了`instance`对象（如第`H`行）。然后可以直接在其返回值上调用`description`函数，这再次返回了`instance`对象。最后，可以调用`render`函数。
- en: Now, with the knowledge of functional JavaScript and a working ready-to-go D3
    data visualization development environment, we are ready to dive into the rich
    concepts and techniques that D3 has to offer. However, before we take off, I would
    like to cover a few more important areas, how to find and share code and how to
    get help when you are stuck.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有了函数式JavaScript和现成的D3数据可视化开发环境的知识，我们准备好深入探索D3提供的丰富概念和技术。然而，在我们起飞之前，我想再覆盖几个重要领域，如何查找和分享代码以及当你遇到困难时如何寻求帮助。
- en: There's more...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Let's take a look at some additional helpful resources.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些额外的有用资源。
- en: Finding and sharing code
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找和分享代码
- en: 'One of the great things about D3 when compared with other visualization options
    is that it offers a wealth of examples and tutorials that you can draw your inspiration
    from. During the course of creating my own open source visualization charting
    library and the creation of this book, I had relied heavily on these resources.
    I will list some of the most popular options available in this aspect. This list
    is by no means a comprehensive directory, but rather a starting place for you
    to explore:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他可视化选项相比，D3 的一个优点是它提供了丰富的示例和教程，你可以从中汲取灵感。在创建我自己的开源可视化图表库以及编写这本书的过程中，我大量依赖了这些资源。我将列出一些在这个方面最受欢迎的选项。这个列表绝对不是全面的目录，而是一个让你开始探索的起点：
- en: The D3 gallery ([https://github.com/d3/d3/wiki/Gallery](https://github.com/d3/d3/wiki/Gallery)
    ) contains some of the most interesting examples that you can find online regarding
    D3 usage. It contains examples on different visualization charts, specific techniques,
    and some interesting visualization implementations in the wild, among others.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 画廊（[https://github.com/d3/d3/wiki/Gallery](https://github.com/d3/d3/wiki/Gallery)）包含了一些你可以在网上找到的关于
    D3 使用的最有趣的示例。它包含不同可视化图表的示例、特定技术以及一些野外有趣的可视化实现，等等。
- en: Christophe Viau's D3 Gallery ([http://christopheviau.com/d3list/gallery.html](http://christopheviau.com/d3list/gallery.html)
    ) is another D3 gallery with categorization that helps you find your desired visualization
    example online quickly.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Christophe Viau 的 D3 画廊（[http://christopheviau.com/d3list/gallery.html](http://christopheviau.com/d3list/gallery.html)）是另一个带有分类的
    D3 画廊，帮助你快速在网上找到所需的可视化示例。
- en: The D3 tutorials page ([https://github.com/d3/d3/wiki/Tutorials](https://github.com/d3/d3/wiki/Tutorials)
    ) contains a collection of tutorials, talks, and slides created by various contributors
    over time that demonstrates in detail how to use different D3 concepts and techniques.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 教程页面（[https://github.com/d3/d3/wiki/Tutorials](https://github.com/d3/d3/wiki/Tutorials)）包含了一系列由不同贡献者在不同时间创建的教程、演讲和幻灯片，详细展示了如何使用不同的
    D3 概念和技术。
- en: D3 plugins can be found at [https://github.com/d3/d3-plugins](https://github.com/d3/d3-plugins)
    . Maybe some features are missing in D3 for your visualization needs? Before you
    decide to implement your own, make sure that you check out the D3 plugin repository.
    It contains a wide variety of plugins that provide some of the common and, sometimes,
    uncommon features in the visualization world.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 插件可以在[https://github.com/d3/d3-plugins](https://github.com/d3/d3-plugins)找到。也许
    D3 对于你的可视化需求缺少一些功能？在你决定实现自己的功能之前，确保查看 D3 插件仓库。它包含了许多提供可视化世界中一些常见和有时不常见功能的插件。
- en: The D3 API ([https://github.com/d3/d3/blob/master/API.md](https://github.com/d3/d3/blob/master/API.md)
    ) is very well documented. This is where you can find detailed explanations for
    every function and property that the D3 library has to offer.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 API（[https://github.com/d3/d3/blob/master/API.md](https://github.com/d3/d3/blob/master/API.md)）有很好的文档记录。这里你可以找到对
    D3 库提供的每个函数和属性的详细解释。
- en: Mike Bostok's Blocks ([http://bl.ocks.org/mbostock](http://bl.ocks.org/mbostock)
    ) is a D3 example site, where some of the more intriguing visualization examples
    can be found and is maintained by its author Mike Bostock.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mike Bostok 的 Blocks（[http://bl.ocks.org/mbostock](http://bl.ocks.org/mbostock)）是一个
    D3 示例网站，其中可以找到一些更引人入胜的可视化示例，并由其作者 Mike Bostock 维护。
- en: JS Bin ([http://jsbin.com/ugacud/1/edit](http://jsbin.com/ugacud/1/edit) ) is
    a prebuilt D3 test and experiment environment completely hosted online. You can
    easily prototype a simple script using this tool or share your creation with other
    members in the community.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JS Bin（[http://jsbin.com/ugacud/1/edit](http://jsbin.com/ugacud/1/edit)）是一个完全在线托管的前端
    D3 测试和实验环境。你可以使用这个工具轻松地原型化一个简单的脚本，或者与其他社区成员分享你的创作。
- en: JS Fiddle ([http://jsfiddle.net/qAHC2/](http://jsfiddle.net/qAHC2/) ) is similar
    to JS Bin; it also is a hosted-online JavaScript code prototyping and sharing
    platform.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JS Fiddle（[http://jsfiddle.net/qAHC2/](http://jsfiddle.net/qAHC2/)）类似于 JS Bin；它也是一个在线托管
    JavaScript 代码原型和分享平台。
- en: How to get help
  id: totrans-150
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 如何获取帮助
- en: 'Even with all the examples, tutorial, and cookbook such as this, you might
    still run into challenges when you create your own visualization. The good news
    here is that D3 has a broad and active support community. Simply *googling* your
    question can most often yield a satisfying answer. Even if it doesn''t, don''t
    worry; D3 has a robust community-based support as the following:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有所有这些示例、教程和食谱，如本食谱，您在创建自己的可视化时仍可能遇到挑战。好消息是，D3 拥有一个广泛且活跃的支持社区。简单地对您的问题进行 *Google
    搜索* 通常可以找到令人满意的答案。即使没有，也不要担心；D3 拥有一个强大的基于社区的支援系统，如下所示：
- en: 'D3.js on Stack Overflow ([http://stackoverflow.com/questions/tagged/d3.js](http://stackoverflow.com/questions/tagged/d3.js)
    ): Stack Overflow is the most popular community-based free Q&A site for technologists.
    D3 is a specific category on the Stack Overflow site to help you reach the experts
    and get an answer to your question quickly.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Stack Overflow 上的 D3.js ([http://stackoverflow.com/questions/tagged/d3.js](http://stackoverflow.com/questions/tagged/d3.js)
    )：Stack Overflow 是技术社区中最受欢迎的基于社区的免费问答网站。D3 是 Stack Overflow 网站上的一个特定类别，旨在帮助您快速找到专家并获得问题的答案。
- en: 'The D3 Google group ([https://groups.google.com/forum/?fromgroups#!forum/d3-js](https://groups.google.com/forum/?fromgroups#!forum/d3-js)
    ): This is the official user group for not just D3 but also other related libraries
    in its ecosystem.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: D3 Google 群组 ([https://groups.google.com/forum/?fromgroups#!forum/d3-js](https://groups.google.com/forum/?fromgroups#!forum/d3-js)
    )：这是 D3 以及其生态系统中的其他相关库的官方用户群组。
