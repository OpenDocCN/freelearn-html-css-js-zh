["```js\ndatabase int /counter = 0;\nfunction page(){\n    <h1 id=\"text\">Hello {/counter}</h1>\n    <input type=\"button\" value=\"click\" onclick={function(_){\n          /counter++\n          #text = \"Hello {/counter}\"\t\n    }}/>}\nServer.start(Server.http, {title:\"Opa Packt\", ~page})\n```", "```js\ndatabase testdb {\n    int /counter = 0;\n}\n```", "```js\n$ opa 701.opa --\n\n```", "```js\n$./701.js --db-local:testdb\n$./701.js --db-local:testdb ~/data/mongo\n$./701.js --db-remote:testdb localhost:27017\n$./701.js --db-remote:testdb admin:admin@localhost:27017\n```", "```js\ntype Student = {int id, string name, int age}\ndatabase testdb {\n    int               /basic/i     //Basic type int\n    float             /basic/f     //Basic type float\n    string            /basic/s     //Basic type string\n    Student           /stu         //Record\n    list(string)      /lst         //List\n    intmap(Student)   /stumap      //Map\n    Student           /stuset[{id}]     //Set\n}\n\n```", "```js\n    database testdb {\n        int      /basic/i = 10\n        string   /basic/s = \"default\"\n        Student  /stu = {id: 0, name: \"unknown\", age: 25}\n    }\n```", "```js\nint i = /testdb/basic/i\nStudent stu = /testdb/stu\n```", "```js\nmatch (?/testdb/basic/i) {\ncase {none}: println(\"unknown\");\ncase {some: x}: println(\"{x}\");\n}\n```", "```js\n/testdb/basic/i = 10\n/testdb/basic/i <- 10 //the same as above\n/testdb/basic/s = \"my new string\"\n/testdb/stu = {id: 1, name: \"Li\", age: 28}In addition, you can also use the following shortcuts to update integers in database:\n/testdb/basic/i++;     //add the integer i by 1\n/testdb/basic/i += 5;  //add the integer i by 5\n/testdb/basic/i -= 10;\t //minus the integer i by 10\n```", "```js\nDb.remove(@/testdb/basic/i)\nDb.remove(@/testdb/stu)\n```", "```js\nstu = /testdb/stu;                         //read record\n/testdb/stu = {id: 1, name: \"Li\", age: 28} //update record\n```", "```js\ntype Student = {int id, string name, int age}\ndatabase testdb {\n    Student /stu1\n    Student /stu2\n    /stu2 full           //declare /stu2 as full modification\n}\n/testdb/stu1/name = \"Li\" //OK\n/testdb/stu2 = {id:1, name: \"Li\", age: 28} //OK\n/testdb/stu2/name = \"Li\" //error: will not compile\n```", "```js\n/testdb/lst = [\"I\", \"Love\", \"Opa\", \"!\"] //Update an entire list\n/testdb/lst pop             // Removes first element of a list\n/testdb/lst shift           // Removes last element of a list\n/testdb/lst <+ \"element\"    // Append an element\n/testdb/lst <++ [\"How\", \"about\", \"you\"] // Append several elements\n/testdb/lst <--* \"element\"              // Remove an element\n/testdb/lst <-- [\"How\", \"about\", \"you\"] // Remove several elements\n```", "```js\nstu = /testdb/stuimap[1] //find element whose key is 1\nstu = /testdb/stuset[1]  //find element whose primary key is 1\nstu = /testdb/stuset[{id:1}] //the same as above\n/testdb/stuset[{id:1}] = {name: \"Li\"}  //update the chosen item\n```", "```js\n/testdb/stuset[id < 10] <- {age: 25}\n/testdb/stuset[age >= 25] <- {age++}\n```", "```js\n== expr: equals expr\n!= expr: not equals expr\n< expr:  lesser than expr\n<= expr: lesser than or equals expr\n> expr:  greater than expr\n>= expr: greater than or equals expr\nin expr: \"belongs to\" expr, where expr is a list\nq1 or q2: satisfy query q1 or q2\nq1 and q2: satisfy both queries, q1 and q2\nnot q: does not satisfy q\n{f1 q1, f2 q2, ...}: the database field f1 satisfies q1, field f2 satisfies q2 etc.\n```", "```js\ndbset(Student, _) stus = /testdb/stuset[age >= 20 and age <= 45; skip 50; limit 50; order +age, -id]\n```", "```js\ndbset(Student,_) lis = /testdb/stuset[name == \"Li\"]\niter it = DbSet.iterator(lis)\nIter.iter(function(li){\nprintln(\"{li}\")\n},it) \n```"]