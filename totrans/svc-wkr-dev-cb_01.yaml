- en: Chapter 1. Learning Service Worker Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up service workers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up SSL for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up SSL for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up GitHub pages for SSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering a service worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering a service worker in detail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing stale version on error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating mock responses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling request timeouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you travel a bit, chances are you have probably found yourself stuck with
    **zero network connectivity** way too often. This is frustrating, especially if
    you just wanted to continue reading some news articles, blog posts, or you wanted
    to get some work done.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, with your browser, attempting to make requests for something
    from the network while being offline doesn't quite work out so well.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/B05381_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Even though on planes, the subway, in hotels, and at conferences, Wi-Fi may
    provide you with opportunities to restore your connection, in general you will
    have to wait for the network to return online in order to request the pages you
    want to view.
  prefs: []
  type: TYPE_NORMAL
- en: Previous attempts to solve this issue include `AppCache`. It seems to work,
    to some extent, but the issue with `AppCache` is that it makes a lot of assumptions
    about user interactions. When those assumptions are not met, the application will
    fail to function as expected. It is also designed to work well with single page
    apps, not the traditional multi-page websites.
  prefs: []
  type: TYPE_NORMAL
- en: Also, one of the most challenging problems with providing a seamless user experience
    with web apps is making them functional while offline. This is an important issue
    to resolve, given that most users today access web apps on the move. Enter service
    workers, a script running in the background of our browser.
  prefs: []
  type: TYPE_NORMAL
- en: Being able to use a web app, regardless of the connectivity, means users can
    operate uninterrupted when they are on board a plane, the subway, or in places
    where connectivity is limited or not available. This technology will help boost
    client productivity and will increase the availability of the application.
  prefs: []
  type: TYPE_NORMAL
- en: With service workers, we are able to pre-cache some assets of a website. What
    we are referencing as assets are JavaScript files, CSS files, images, and some
    fonts. This will help us to speed up the loading time, instead of having to fetch
    information from the web servers every time we visit the same website. And of
    course, most importantly, those assets will be available for us when we are offline.
  prefs: []
  type: TYPE_NORMAL
- en: Service workers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A service worker is a script that stands between your browser and the network,
    giving you, among other things, the ability to intercept network requests, and
    respond to them in different ways.
  prefs: []
  type: TYPE_NORMAL
- en: In order for your website or app to work, the browser fetches its assets, such
    as HTML pages, JavaScript, CSS, images, and fonts. In the past, managing these
    resources was mainly the browser's responsibility. If the browser couldn't access
    the network, you would probably see its **Unable to connect to the Internet**
    message. There were techniques you could use to encourage the local caching of
    assets, but the browser often had the last say.
  prefs: []
  type: TYPE_NORMAL
- en: One feature service worker uses heavily is promises. So it is important to have
    a good understanding of promises.
  prefs: []
  type: TYPE_NORMAL
- en: Promises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Promises are a great mechanism for running async operations with success dependent
    on one another. This is central to the way service workers work.
  prefs: []
  type: TYPE_NORMAL
- en: Promises can do a great many things, but for now, all you need to know is that
    if something returns a promise, you can attach `.then()` to the end and include
    callbacks inside it for success, failure, and so on, or you can insert `.catch()`,
    the end if you want to include a failure callback.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s compare a traditional synchronous callback structure to its asynchronous
    promise equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sync`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`async`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the `sync` example, we have to wait for `Fn()` to run and return a `value`
    before any more of the code can execute. In the `async` example, `Fn()` returns
    a promise for the value, then the rest of the code can carry on running. When
    the promise resolves, the code inside `then` will be run asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: Promise.resolve(value)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method returns an object of `Promise.then`, which is resolved with the
    value passed into the `resolve` method, as in `Promise.resolve(value)`. If this
    value has a `then` method, the returned method will follow it; otherwise, it will
    be fulfilled with the value.
  prefs: []
  type: TYPE_NORMAL
- en: Promise.reject(reason)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method takes `reason` as an argument and returns a promise object that
    is rejected.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up service workers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to get service workers running, we need to serve our code via **Hyper
    Text Transfer Protocol Secure** (**HTTPS**). Service workers are designed to run
    only across HTTPS for security reasons. Source code repositories such as GitHub
    support HTTPS, where you can host your files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are using a newer version of a browser, the chances are that service
    workers are already enabled on it. But, if that is not the case, we will have
    to change few things in the browser settings. In the following section, we are
    going to cover how to enable service worker features in Chrome and Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the steps below to enable service worker in Chrome and Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: Chrome
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To experiment in Chrome, you need to download Chrome Canary:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://www.google.com/chrome/browser/canary.html](https://www.google.com/chrome/browser/canary.html)
    and download the latest version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Chrome Canary and type `chrome://flags`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn on `experimental-web-platform-features`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following image shows experimental features on the Chrome browser, where
    you enable the **Experimental Web Platform** feature by clicking on the **Enable**
    link underneath:![Chrome](img/B05381_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Firefox
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To experiment in Firefox, you need to download Firefox Nightly:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://nightly.mozilla.org/](https://nightly.mozilla.org/) and download
    the latest version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Firefox Nightly, and go to `about:config`.![Firefox](img/B05381_01_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `experimental-web-platform-features` to `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing, Opera offers partial support for service workers, including
    basic support, as well as installing and uninstalling events. Internet Explorer
    and Safari do not support service workers.
  prefs: []
  type: TYPE_NORMAL
- en: Service workers are currently an experimental technology, meaning the syntax
    and the behavior are subject to change in future versions as the specification
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up SSL for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Service workers are designed to run only across HTTPS, so in order for us to
    test our code, we need our web pages to be delivered across HTTPS. In this recipe,
    we will cover getting your site setup with SSL support for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe assumes you run Windows 7 or higher with **Internet Information
    Service** (**IIS**) enabled.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to enable SSL:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open IIS; you can do this by running the following command inside the
    command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Select the server node in the tree view and double-click the **Server Certificates**
    feature in the list view, as shown:![How to do it...](img/B05381_01_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create Self-Signed Certificate...** link in the **Actions** pane.![How
    to do it...](img/B05381_01_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a meaningful name for the new certificate and click **OK**.![How to do
    it...](img/B05381_01_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will generate a self-signed certificate, which is marked for **Server Authentication**
    use, meaning it uses a server-side certificate for authenticating the identity
    of the server and also for HTTP SSL encryption.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In order to create an SSL binding, we have to select a site in the tree view
    and then, in the **Actions** pane, click **Bindings...**. This will bring up the
    bindings editor that manages bindings for your website, which include create,
    edit, and delete. Now, to add your new SSL binding to the site, click **Add...**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/B05381_01_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Port 80 is the default setting for a new binding for HTTP. We can select **https**
    in the **Type** drop-down list. Select the self-signed certificate we created
    in the previous section from the **SSL Certificate** drop-down list, and then
    click **OK**.![How to do it...](img/B05381_01_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have a new SSL binding on our site and all that remains is to make sure
    that it works.![How to do it...](img/B05381_01_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Continue to this website** to proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up SSL for Mac
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the previous recipe, service workers are designed to run only
    across HTTPS. So, in order for us to test our code, we need our web pages to be
    delivered across HTTPS. In this recipe, we will cover getting your site set up
    with SSL support for Mac.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe assumes that you are running OS X 10.11, El Capitan, or higher.
    We are going to use a command-line utility called Vim for editing files, which
    already comes with Mac. Make sure not to use the number pad with Vim. Please be
    aware that this process is lengthy.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to enable SSL:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to make sure Apache is running (you may get a prompt for a password):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is to make some modifications to your `httpd.conf`. Because it''s
    a system file, you will need to use `sudo` again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this file, you should uncomment both `socache_shmcb_module` and `ssl_module`,
    and also the include the `httpd-ssl.conf` file by removing the leading `#` symbol
    on those lines (you can use `/` to search on the Vim editor):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After saving the preceding file (press `:wq`), you should then open up your
    `/etc/apache2/extra/httpd-vhosts.conf` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, you can create a VirtualHost entry for each virtual host that you wish
    to provide SSL support for:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure you copy your development folder to the `DocumentRoot` directory
    as you did earlier: `/Library/WebServer/Documents`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To get this all to work with Apache, we need to create a self-signed certificate
    that we have already referenced in the `VirtualHost` definition.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Generate a key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Press *Enter* with no input after the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we have to generate a certificate signing request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using this **certificate signing request** (**CSR**), generate the certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then we have to convert the key to a no-phrase key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now change `server.crt` to `localhost.crt` as well as `server.key` to `localhost.key`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All you need to do now is double check your Apache configuration syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If all goes well, restart Apache:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, simply point your browser at `https://localhost`. If you are prompted for
    a self-signed certificate in Chrome you can hit the **Advanced** option on that
    page and proceed, while in Firefox, you need to expand the **I understand the
    risks** options and add an exception. This is owing to the fact that the self-signed
    certificates are not signed by any authority, and for this reason the browsers
    add warnings about them. Although, since you are the one who created the certificate,
    you understand it's safe to accept it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To fix this, you need to add the certificate as a trusted root authority.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Keychain Access** utility in OS X. Select the **System** option on
    the left. Click the lock icon in the upper-left corner to enable changes.![How
    to do it...](img/B05381_01_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the plus button at the bottom and select the `/etc/apache2/localhost.cer`
    file you copied to the desktop. In the dialog that comes up, click **Always Trust**.
    After the localhost gets added to the system keychain, double-click it to open
    it again. Expand the **Trust** section and for the first option, pick **Always
    Trust**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, everything has been configured. Quit Chrome and all other browsers
    (this is required), fire up the web server, and try to navigate to the local HTTPS
    site again.![How to do it...](img/B05381_01_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Detailed steps to download the code bundle are mentioned in the Preface of this
    book. Please have a look.
  prefs: []
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Service-Worker-Development-Cookbook](https://github.com/PacktPublishing/Service-Worker-Development-Cookbook).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up GitHub pages for SSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Service workers are designed to run only across HTTPS. So, in order for us to
    test our code, we need our web pages to be delivered across HTTPS. GitHub pages
    are served across HTTPS and it's free to use. So let's get on with it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before registering for a GitHub account, please make sure you have a valid e-mail
    address.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up GitHub pages:'
  prefs: []
  type: TYPE_NORMAL
- en: Head over to GitHub ([https://github.com](https://github.com)) and register
    yourself to obtain an account, if you don't have one already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have done that, log in and create a new repository with the following
    format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`username.github.io`, where `username` is your username.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/B05381_01_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If the first part of the repository doesn't match your username exactly, it
    won't work.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open your command-line window and clone your repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the directory to `username.github.io`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a directory called `service-workers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `index.html` file with some text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let''s commit and push our changes to the repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open up a browser and go to `http://username.github.io/service-workers/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Registering a service worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Registering your service worker is the first step to getting a service worker
    up and running. By registering a service worker, we tell our website to use the
    service worker. And this registering process happens outside of the service worker,
    in our case inside the `index.html` file. You can do that inside a JavaScript
    file and then reference it within the `index.html` file, but not in the service
    worker script file.
  prefs: []
  type: TYPE_NORMAL
- en: In this basic registration demo, we will test to see if our service worker gets
    registered successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the first recipe: *Setting up service workers*. Service workers
    only run across HTTPS. To find out how to set up a development environment to
    support this feature, refer to the following recipes: *Setting up GitHub pages
    for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create the `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create an empty JavaScript file called `service-worker.js` in the same folder
    as the `index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With your two files in place, you can navigate to the GitHub page, `https://username.github.io/service-workers/01/01/index.html`,
    and you will see the success message in your browser.![How to do it...](img/B05381_01_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We started off by making sure that the service worker feature is available with
    the line `if ('serviceWorker' in navigator)`. If that's not the case, then we
    set the message to unavailable. If your browser does not support service workers,
    you will get this message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we register the service worker with the empty JavaScript file and the scope.
    To ensure the registration is only applicable to the current directory and those
    underneath it, we override the default scope of `''/''` with `''./''` in the line
    `{ scope: ''./'' }` as the scope has to be of the same origin.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you decide that your script files should sit elsewhere, you will need a
    special header, such as `Service-Worker-allowed: true` or a specific content-type,
    such as `text/javascript`.'
  prefs: []
  type: TYPE_NORMAL
- en: If the registration was successful, we print the message `successful` to the
    status message.
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, we print the error message as the status. The reason for the error
    could be something going wrong during the registration, for example, the `service-worker.js`
    file may not available or it may contain a syntax error.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can unregister the service worker by calling the following `unregister()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Known issues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a couple of issues with the Chrome browser when working with service
    workers, which might confuse you.
  prefs: []
  type: TYPE_NORMAL
- en: The ERR_FILE_EXISTS error message
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Reloading pages with service workers will always show an `ERR_FILE_EXISTS` error
    message, even if there's nothing wrong with your code.
  prefs: []
  type: TYPE_NORMAL
- en: This seems to occur when we are trying to access an already registered service
    worker.
  prefs: []
  type: TYPE_NORMAL
- en: '![The ERR_FILE_EXISTS error message](img/B05381_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Stale console messages
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Logging messages from the service worker scripts such as the `console.log` may
    not clear from the console, which seems like the events are being fired too many
    times on subsequent page loads.
  prefs: []
  type: TYPE_NORMAL
- en: Registering a service worker in detail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding events involved in service worker registration and state transitions
    will give you greater control over your application by using this feature. In
    this detailed registration demo, we will take a look at the state transitions
    of service worker registration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the previous recipe: *Setting up service workers*. Service workers
    only run across HTTPS. To find out how to set up a development environment to
    support this feature, refer to the following recipes: *Setting up GitHub pages
    for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create an `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `service-worker.js` in the same folder as the
    `index.html` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With your two files in place, you can navigate to the GitHub page, `https://username.github.io/service-workers/01/02/index.html`,
    and you will see the success message in your browser.![How to do it...](img/B05381_01_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the registration is successful, we inspect the state of the registration
    and print it to the browser. In this case it is installing, waiting, or active:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `printState(state)` helper function will print out the state to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end we attach an event listener to the service worker called `statechange`.
    The callback of this event listener will print the state changes to the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: When the registered service worker is in the activated state, we can refresh
    the page to see the service worker taking control.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate a page loading, without the service worker taking control, press
    *Shift* and refresh the page. You will see the activate event logged in the web
    console.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are subscribing to two event listeners in the `service-worker.js` file,
    `install` and `activate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: These events get fired when this version of the script first gets registered
    for the given scope.
  prefs: []
  type: TYPE_NORMAL
- en: The install event is a good place to prefetch data and initialize caches, and
    the `activate` event works well for cleaning up data from the old version of the
    script.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the service worker is successfully registered, it will go through the following
    stages.
  prefs: []
  type: TYPE_NORMAL
- en: Install
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the life cycle of service workers, at the point when the service worker has
    registered without errors, but is not yet active, any service workers previously
    activated will still be in control. The service worker is considered new if there
    is any change in the service worker file between page reloads. It will therefore
    go through the installation step. At this stage, the service workers are not intercepting
    any requests.
  prefs: []
  type: TYPE_NORMAL
- en: Activate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The service worker is said to be at the activate stage when it becomes active
    for the first time. The service worker is now able to intercept requests. This
    will happen when we close the tab and reopen it, or the page is refreshed by a
    hard refresh using *Shift* + reload. It will not occur immediately after the install
    event.
  prefs: []
  type: TYPE_NORMAL
- en: Fetch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The fetch happens when there is a request being made within the current service
    worker scope.
  prefs: []
  type: TYPE_NORMAL
- en: Terminate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This can happen at any time, even outside of a request. But the termination
    happens mostly when the browser needs to reclaim memory. When a new request is
    made, the service worker will be restarted as needed, or a message will be received,
    but it will not go back through the activate step.
  prefs: []
  type: TYPE_NORMAL
- en: The service worker will intercept a request it is registered to catch all the
    time, even if it needs to be restarted in order to do so. But, having said that,
    we cannot guarantee it will be around for any length of time. Because of this,
    the global state will not be preserved, so we have to make sure to avoid using
    any global variables within the service worker file. Instead, we can use indexed
    or `localStorage` for persistence.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous recipe, *Registering a service worker*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Service workers run in a separate thread in the browser from the pages they
    control. There are ways to communicate between workers and pages, but they execute
    in a separate scope. That means you will not have access to the DOM of those web
    pages from the service worker script, for example. Because of this, we cannot
    use the DevTools on the same web page to debug service worker scripts. We need
    to open a separate inspector to debug the service worker thread.
  prefs: []
  type: TYPE_NORMAL
- en: Service workers do most of their work by listening for relevant events and responding
    to them in a productive way. In the life cycle of service workers, different events
    are triggered at different points in a service worker's life cycle. So, if we
    want to cache assets, it is a good time to do that during the install state by
    listening to the `install` event. In the same way, we can debug service workers
    by adding breakpoints to the relevant event handlers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the previous recipe: *Setting up service workers*. Service workers
    only run across HTTPS. To find out how to set up a development environment to
    support this feature, refer to the following recipes: *Setting up GitHub pages
    for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up debugging for service workers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out your currently running service workers, type the following into
    your browser: `chrome://inspect/#service-workers`:![How to do it...](img/B05381_01_16.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Otherwise, type the following into your browser: `chrome://serviceworker-internals`
    to find out the registered workers. If there aren''t any listed, then there are
    no currently running service workers.![How to do it...](img/B05381_01_17.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To debug your service worker with Chrome DevTools, navigate to the service worker
    page and open DevTools. (*Cmd* + *Alt* + *I* in Mac or *F12* in Windows)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can add a breakpoint to inspect your code.![How to do it...](img/B05381_01_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The service worker will be displayed in the **Threads** list, and the **Service
    Workers** tab lists all the **Active Running** service workers this page belongs
    to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/B05381_01_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We can use the console for debugging as well. Any errors during the installation
    process will be printed on the console page. The console is useful for inspecting
    the service worker context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/B05381_01_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You will also find the debugging panel in the **Resources** tab of the DevTools
    useful. In order to view network activity of the worker, click the `inspect` link
    on the **Resources** tab to launch a dedicated DevTools window for the worker.![How
    to do it...](img/B05381_01_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The resulting page `chrome://serviceworker-internals` shows the registered
    service workers. It also shows basic action buttons, which are explained in detail
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Terminated**: Unregisters the worker.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start/Stop**: Starts/stops the worker. This will happen automatically when
    you navigate to a page in the worker''s scope.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sync**: Dispatches a sync event to the worker. If you don''t handle this
    event, nothing will happen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Push**: Dispatches a push event to the worker. If you don''t handle this
    event, nothing will happen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inspect**: Opens the worker in the inspector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are working with DevTools open, you might want to check to make sure
    that the **Disable cache** is not checked in the **Network** tab. If that option
    is checked, the requests will go to the network instead of the service worker.
  prefs: []
  type: TYPE_NORMAL
- en: Providing a stale version on error
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you travel a lot, chances are you have often experienced a lot of zero network
    connectivity. This is frustrating, especially if you want to view previously viewed
    pages. In this recipe, we will look at how we can address this issue by providing
    the user with the stale version from the cache.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the previous recipe: *Setting up service workers*. Service workers
    only run across HTTPS. To find out how to set up a development environment to
    support this feature, refer to the following recipes: *Setting up GitHub pages
    for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure (or you can find the
    files in the provided directory, `01/05`):'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create an `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `service-worker.js` in the same folder as the
    `index.html` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With your two files in place, navigate to `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the registration is successful, we inspect the state of the registration
    and print it to the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `service-worker.js` file, we always fetch the response from the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If we received an error response, we return the stale version from the cache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If we can''t find the stale version, we return the network response, which
    is the error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'If the response was successful (response code 200), we update the cached version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `put()` method of the cache interface allows key/value pairs to be added
    to the current cache object. The `put()` method also overrides any key/value pair
    previously stored in the cache that matches the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Creating mock responses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to mock API responses from your server to your app, which is instead
    of actual API responses for the API requests, we can make the service worker return
    mock responses that will be identical to an API response.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the previous recipe: *Setting up service workers*. Service workers
    only run across HTTPS. To find out how to set up a development environment to
    support this feature, refer to the following recipes: *Setting up GitHub pages
    for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure (these can also be
    found in the provided directory, `01/03`):'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create an `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `service-worker.js` in the same folder as the
    `index.html` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With your two files in place, you can navigate to the GitHub page, `https://username.github.io/service-workers/01/03/index.html`,
    and you will see the success message in your browser.![How to do it...](img/B05381_01_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After the service worker registers itself successfully, we check to make sure
    that it is currently handling the network operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, we are calling the `showRequest()` function to add an event listener
    to the URL shorten button, and show the `request` block. Otherwise, the whole
    `request` block will be hidden:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The `sendRequest()` function builds the HTTP request. It creates a `POST` request
    with a URL of the Google API for URL shortening:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You will have to obtain an API key for this service to be used. For this, follow
    these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the Google Developers Console page at [https://console.developers.google.com](https://console.developers.google.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can either select an existing project or create a new one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand **APIs & auth**, in the sidebar on the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **APIs**. Now, in the list of APIs provided, make sure the status is **ON**
    for the Google URL Shortener API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, in the sidebar on the left-hand side, select **Credentials**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If the **Mock Response** is checked, set the request header `X-Mock-Response`
    to `yes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add an event listener to the load event and pass in a callback to assign
    the response data to the link displaying the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the `sendRequest` function, we are sending the original URL as
    well as the `request` object we built as a request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `service-worker.js` file, we are adding an event listener for the fetch
    event. We check that the request URL path has the `urlshortner` in it and the
    request header has `X-Mock-Response`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We build a mock response object with a body, status, and the headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we create a response with the mock response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Handling request timeouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Long-running requests can be the result of connectivity issues. Service workers
    are an ideal solution for overcoming these problems. Let's look at how we can
    implement a solution with service workers to handle request timeouts.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with service workers, you will need to have the service worker
    experiment feature turned on in your browser settings. If you have not done this
    yet, refer to the previous recipe: *Setting up service workers*. Service workers
    only run across HTTPS. To find out how to set up a development environment to
    support this feature, refer to the following recipes: *Setting up GitHub pages
    for SSL*, *Setting up SSL for Windows*, and *Setting up SSL for Mac*.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these instructions to set up your file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create an `index.html` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JavaScript file called `service-worker.js` in the same folder as the
    `index.html` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With your two files in place, navigate to `index.html` and open the DevTools.
    You will see the time out error logged on the console.![How to do it...](img/B05381_01_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our `index.html` file, we''re fetching a large uncompressed jQuery library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `service-worker.js` file, the event listener of the install event is
    calling the `skipWaiting()` method, which forces the waiting service worker to
    become the active service worker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The `skipWaiting()` method is used inside the active event handler, which in
    turn uses `Clients.claim()` to ensure that updates to the underlying service worker
    take effect immediately, for both the current client and all other active clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'In event listener for fetch, we pass in a `Promise.race()` function where the
    first iterable, which is `timeout(400)`, gets resolved first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: We will elaborate on the `Promise.race()` function soon. The `timeout()` function
    returns a promise with 408, which is the code for the request timed out status.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Promise.race()` method returns a promise that resolves, or rejects, as
    soon as one of the promises in the iterable resolves or rejects, with the value
    or reason from that promise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, `two` is faster, so the result is `reject`.
  prefs: []
  type: TYPE_NORMAL
