["```js\nnpm start \n```", "```js\nexport interface Customer {\n    id?: number;\n    name: string;\n    email: string;\n} \n```", "```js\nimport { Product } from \"./catalog_models\";\nimport { Customer } from \"./customer_models\";\nexport interface Order {\n    id?: number;\n    customer?: Customer;\n    selections?: ProductSelection[];\n    address?: Address;\n    shipped: boolean;\n}\nexport interface ProductSelection {\n    id?: number;\n    productId?: number;\n    quantity: number;\n    price: number;\n}\nexport interface Address {\n    id?: number;\n    street: string;\n    city: string;\n    state: string;\n    zip: string;\n} \n```", "```js\nimport { Order } from \"./order_models\";\nexport interface OrderRepository {\n    getOrder(id: number): Promise<Order| null>;\n    getOrders(excludeShipped: boolean): Promise<Order[]>;\n    storeOrder(order: Order): Promise<Order>;\n} \n```", "```js\nimport { Model, CreationOptional, InferAttributes, InferCreationAttributes }\n    from \"sequelize\";\nimport { Customer } from \"../../customer_models\";\nexport class CustomerModel extends Model<InferAttributes<CustomerModel>,\n        InferCreationAttributes<CustomerModel>> implements Customer {\n    declare id?: CreationOptional<number>;\n    declare name: string;\n    declare email: string;\n} \n```", "```js\nimport { DataTypes, Sequelize } from \"sequelize\";\nimport { CustomerModel } from \"./customer_models\";\nexport const initializeCustomerModels = (sequelize: Sequelize) => {\n    CustomerModel.init({\n        id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true},\n        name: { type: DataTypes.STRING},       \n        email: { type: DataTypes.STRING }\n    }, { sequelize})\n} \n```", "```js\nimport { Model, CreationOptional, ForeignKey, InferAttributes,\n    InferCreationAttributes, \n    HasManySetAssociationsMixin} from \"sequelize\";\nimport { ProductModel } from \"./catalog_models\";\nimport { CustomerModel } from \"./customer_models\";\nimport { Address, Order, ProductSelection } from \"../../order_models\";\nexport class OrderModel extends Model<InferAttributes<OrderModel>,\n        InferCreationAttributes<OrderModel>> implements Order {\n    declare id?: CreationOptional<number>;\n    declare shipped: boolean;\n    declare customerId: ForeignKey<CustomerModel[\"id\"]>;\n    declare customer?: InferAttributes<CustomerModel>\n    declare addressId: ForeignKey<AddressModel[\"id\"]>;\n    declare address?: InferAttributes<AddressModel>;\n\n    declare selections?:  InferAttributes<ProductSelectionModel>[];\n    declare setSelections:\n        HasManySetAssociationsMixin<ProductSelectionModel, number>;\n}\nexport class ProductSelectionModel extends\n        Model<InferAttributes<ProductSelectionModel>,\n            InferCreationAttributes<ProductSelectionModel>>\n        implements ProductSelection {\n    declare id?: CreationOptional<number>;\n\n    declare productId: ForeignKey<ProductModel[\"id\"]>;\n    declare product?: InferAttributes<ProductModel>\n    declare quantity: number;\n    declare price: number;\n    declare orderId: ForeignKey<OrderModel[\"id\"]>;\n    declare order?: InferAttributes<OrderModel>;\n}\nexport class AddressModel extends Model<InferAttributes<AddressModel>,\n    InferCreationAttributes<AddressModel>> implements Address {\n    declare id?: CreationOptional<number>;\n    declare street: string;\n    declare city: string;\n    declare state: string;\n    declare zip: string;\n} \n```", "```js\nimport { DataTypes, Sequelize } from \"sequelize\";\nimport { OrderModel, ProductSelectionModel, AddressModel }\n    from \"./order_models\";\nimport { CustomerModel } from \"./customer_models\";\nimport { ProductModel } from \".\";\nconst primaryKey = {\n    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true }\n};\n\nexport const initializeOrderModels = (sequelize: Sequelize) => {\n    OrderModel.init({\n        ...primaryKey, shipped: DataTypes.BOOLEAN\n    }, {sequelize});\n    ProductSelectionModel.init({\n        ...primaryKey,\n        quantity: DataTypes.INTEGER, price: DataTypes.DECIMAL(10, 2)\n    }, {sequelize});\n    AddressModel.init({\n        ...primaryKey,\n        street: DataTypes.STRING, city: DataTypes.STRING,\n        state: DataTypes.STRING, zip: DataTypes.STRING,\n    }, {sequelize});\n    OrderModel.belongsTo(CustomerModel, { as: \"customer\"});\n    OrderModel.belongsTo(AddressModel,\n        {foreignKey: \"addressId\", as: \"address\"});\n    OrderModel.belongsToMany(ProductSelectionModel,\n        { through: \"OrderProductJunction\",\n            foreignKey: \"orderId\", as: \"selections\" });\n    ProductSelectionModel.belongsTo(ProductModel, { as: \"product\"});\n} \n```", "```js\n...\ndeclare **setSelections**: HasManySetAssociationsMixin<ProductSelectionModel, number>;\n... \n```", "```js\nimport { Sequelize } from \"sequelize\";\nimport { initializeCatalogModels } from \"./catalog_helpers\";\n**import { initializeCustomerModels } from \"./customer_helpers\";**\n**import { initializeOrderModels } from \"./order_helpers\";**\nexport { ProductModel, CategoryModel, SupplierModel } from \"./catalog_models\";\nexport const initializeModels = (sequelize: Sequelize) => {\n    initializeCatalogModels(sequelize);\n   **initializeCustomerModels(sequelize);**\n **initializeOrderModels(sequelize);**\n} \n```", "```js\nimport { Attributes, FindOptions } from \"sequelize\";\nimport { Order } from \"../order_models\"\nimport { BaseRepo, Constructor } from \"./core\"\nimport { AddressModel, OrderModel } from \"./models/order_models\";\nimport { CustomerModel } from \"./models/customer_models\";\nconst queryConfig: FindOptions<Attributes<OrderModel>> = {\n    include: [\n        { model: AddressModel, as: \"address\"},\n        { model: CustomerModel, as: \"customer\" }\n    ],\n    raw: true, nest: true\n}\nexport function AddOrderQueries<TBase\n        extends Constructor<BaseRepo>>(Base: TBase)  {\n    return class extends Base {\n        getOrder(id: number) : Promise<Order | null> {\n            return OrderModel.findByPk(id, queryConfig);\n        }\n        getOrders(excludeShipped: boolean): Promise<Order[]> {\n            return OrderModel.findAll(\n                excludeShipped ?\n                    { ...queryConfig, where: { shipped: false}} : queryConfig\n            )           \n        }\n    }\n} \n```", "```js\nimport { Order } from \"../order_models\"\nimport { BaseRepo, Constructor } from \"./core\"\nimport { AddressModel, OrderModel, ProductSelectionModel }\n    from \"./models/order_models\";\nimport { CustomerModel } from \"./models/customer_models\";\nexport function AddOrderStorage<TBase extends\n        Constructor<BaseRepo>>(Base: TBase)  {\n    return class extends Base {\n        storeOrder(order: Order): Promise<Order> {\n            return  this.sequelize.transaction(async (transaction) => {\n                const { id, shipped } = order;\n                const [stored] =\n                    await OrderModel.upsert({ id, shipped }, {transaction});\n\n                if (order.customer) {\n                    const [{id}] = await CustomerModel.findOrCreate({\n                        where: { email: order.customer.email},\n                        defaults: order.customer,\n                        transaction\n                    });\n                    stored.customerId = id;\n                }\n                if (order.address) {\n\n                    const [{id}] = await AddressModel.findOrCreate({\n                        where: { ...order.address },\n                        defaults: order.address,\n                        transaction\n                    });\n                    stored.addressId = id;\n                }\n                await stored.save({transaction});\n                if (order.selections) {\n                    const sels = await ProductSelectionModel.bulkCreate(\n                        order.selections, { transaction});\n                    await stored.setSelections(\n                        sels, { transaction });\n                }\n                return stored;\n            });\n        }\n    }\n} \n```", "```js\nimport { BaseRepo } from \"./core\";\nimport { AddQueries } from \"./queries\";\nimport { AddStorage } from \"./storage\";\n**import { AddOrderQueries** **} from \"./order_queries\";**\n**import { AddOrderStorage } from \"./order_storage\";**\n**const CatalogRepo = AddStorage(****AddQueries(BaseRepo));**\n**const RepoWithOrders = AddOrderStorage(AddOrderQueries(CatalogRepo));**\n**export const CatalogRepoImpl** **= RepoWithOrders;** \n```", "```js\nimport { CatalogRepository } from \"./catalog_repository\";\nimport { CatalogRepoImpl} from \"./orm\";\n**import { OrderRepository } from \"./order_repository\";**\n**const repo =** **new CatalogRepoImpl();**\n**export const catalog_repository: CatalogRepository = repo;**\n**export const order_repository: OrderRepository** **= repo;** \n```", "```js\nnpm install validator@13.11.0\nnpm install --save-dev @types/validator@13.11.5 \n```", "```js\n`validator` \n```", "```js\n`@types/validator` \n```", "```js\nexport class ValidationStatus {\n    private invalid: boolean = false;\n    constructor(public readonly value: any) {}\n    get isInvalid() : boolean  {\n        return this.invalid\n    }\n    setInvalid(newValue: boolean) {\n        this.invalid = newValue || this.invalid;\n    }\n\n    messages: string[] = [];\n}\nexport type ValidationRule = (status: ValidationStatus)\n    => void | Promise<void>;\nexport type ValidationRuleSet<T> = {\n    [key in keyof Omit<Required<T>, \"id\">]: ValidationRule | ValidationRule[];\n}\nexport type ValidationResults<T> = {\n    [key in keyof Omit<Required<T>, \"id\">]: ValidationStatus;\n} \n```", "```js\n...\n [key in keyof **Omit<Required<T>, \"id\">**]: ValidationRule | ValidationRule[];\n... \n```", "```js\nimport { ValidationResults, ValidationRule, ValidationRuleSet,\n    ValidationStatus } from \"./validation_types\";\nexport class Validator<T>{\n    constructor(public rules: ValidationRuleSet<T>,\n        public breakOnInvalid = true) {}\n        async validate(data: any): Promise<ValidationResults<T>> {\n            const vdata = Object.entries(this.rules).map(async ([key, rules]) => {\n                const status = new ValidationStatus(data?.[key] ?? \"\");\n                const rs = (Array.isArray(rules) ? rules: [rules]);\n                for (const r of rs) {\n                    if (!status.isInvalid || !this.breakOnInvalid) {\n                        await r(status);\n                    }\n                }\n                return [key, status];\n            });\n            const done = await Promise.all(vdata);\n            return Object.fromEntries(done);\n        }\n    validateOriginal(data: any): ValidationResults<T> {\n        const vdata = Object.entries(this.rules).map(([key, rules]) => {\n            const status = new ValidationStatus(data?.[key] ?? \"\");\n            (Array.isArray(rules) ? rules: [rules])\n                .forEach(async (rule: ValidationRule) => {\n                    if (!status.isInvalid || !this.breakOnInvalid) {\n                        await rule(status);\n                    }\n            });\n            return [key, status];\n        });\n        return Object.fromEntries(vdata);\n    }\n}\nexport function isValid<T>(result: ValidationResults<T>) {\n    return Object.values<ValidationStatus>(result)\n        .every(r => r.isInvalid === false);\n}\nexport function getData<T>(result: ValidationResults<T>): T {\n    return Object.fromEntries (Object.entries<ValidationStatus>(result)\n        .map(([key, status]) => [key, status.value])) as T;\n} \n```", "```js\nimport validator from \"validator\";\nimport { ValidationStatus } from \"./validation_types\";\nexport const minLength = (min: number) => (status: ValidationStatus) => {\n    if (!validator.isLength(status.value, { min })) {\n        status.setInvalid(true);\n        status.messages.push(`Enter at least ${min} characters`);\n    }\n};\nexport const email = (status: ValidationStatus) => {\n    if (!validator.isEmail(status.value)) {\n        status.setInvalid(true);\n        status.messages.push(\"Enter an email address\");\n    }\n};\nexport const required = (status: ValidationStatus) => {\n    if (validator.isEmpty(status.value.toString(), { ignore_whitespace: true})) {\n        status.setInvalid(true);\n        status.messages.push(\"A value is required\");\n    }\n};\nexport const no_op = (status: ValidationStatus) => { /* do nothing */ } \n```", "```js\nimport { Validator } from \"./validator\";\nimport { required, minLength, email, no_op } from \"./basic_rules\";\nimport { Address } from \"../order_models\";\nimport { Customer } from \"../customer_models\";\nexport const CustomerValidator = new Validator<Customer>({\n    name: [required, minLength(6)],\n    email: email\n});\nexport const AddressValidator = new Validator<Address>({\n    street: required,\n    city: required,\n    state: required,\n    zip: no_op\n}); \n```", "```js\nexport * from \"./validation_types\";\nexport * from \"./validator\";\nexport * from \"./basic_rules\";\nexport * from \"./order_rules\"; \n```", "```js\nimport { Express } from \"express\";\nimport { Address } from \"../data/order_models\";\nimport { AddressValidator, CustomerValidator, ValidationResults, getData, isValid }\n    from \"../data/validation\";\nimport { Customer } from \"../data/customer_models\";\nimport { createAndStoreOrder } from \"./order_helpers\";\ndeclare module \"express-session\" {\n    interface SessionData {\n       orderData?: {\n            customer?: ValidationResults<Customer>,\n            address?: ValidationResults<Address>\n       }\n    }\n}\nexport const createOrderRoutes = (app: Express) => {\n    app.get(\"/checkout\", (req, resp) => {\n        resp.render(\"order_details\", {\n            order: req.session.orderData,\n        });\n    });\n    app.post(\"/checkout\", async (req, resp) => {\n        const { customer, address } = req.body;\n        const data = req.session.orderData = {\n            customer: await CustomerValidator.validate(customer),\n            address: await AddressValidator.validate(address)\n        };\n        if (isValid(data.customer) && isValid(data.address)\n                && req.session.cart) {\n            const order = await createAndStoreOrder(\n                getData(data.customer), getData(data.address), req.session.cart\n            )\n            resp.redirect(`/checkout/${order.id}`);\n            req.session.cart = undefined;\n            req.session.orderData = undefined;\n        } else {\n            resp.redirect(\"/checkout\");\n        }\n    });\n    app.get(\"/checkout/:id\", (req, resp) => {\n        resp.render(\"order_complete\", {id: req.params.id});\n    })\n} \n```", "```js\n... \n```", "```js\nconst data = req.session.orderData = {\n    customer: await CustomerValidator.**validate**(customer),\n    address: await AddressValidator.**validate**(address)\n};\n... \n```", "```js\n...\nconst order = await createAndStoreOrder(\n    **getData**(data.customer), **getData**(data.address), req.session.cart\n)\n... \n```", "```js\nimport { catalog_repository, order_repository } from \"../data\";\nimport { Cart } from \"../data/cart_models\"\nimport { Customer } from \"../data/customer_models\"\nimport { Address, Order } from \"../data/order_models\"\nexport const createAndStoreOrder = async (customer: Customer,\n        address: Address, cart: Cart): Promise<Order> => {\n    const product_ids = cart.lines.map(l => l.productId) ?? [];\n    const product_details = Object.fromEntries((await\n        catalog_repository.getProductDetails(product_ids))\n            .map(p => [p.id ?? 0, p.price ?? 0]));\n    const selections = cart.lines.map(l => ({\n        productId: l.productId, quantity: l.quantity,\n        price: product_details[l.productId]}));\n    return order_repository.storeOrder({   \n        customer,address,\n        selections, shipped: false\n    });\n} \n```", "```js\nimport { Express } from \"express\";\nimport { createCatalogRoutes } from \"./catalog\";\nimport { createCartMiddleware, createCartRoutes } from \"./cart\";\n**import { createOrderRoutes } from \"./orders\";**\nexport const createRoutes = (app: Express) => {\n    createCartMiddleware(app);\n    createCatalogRoutes(app);\n    createCartRoutes(app);\n   ** createOrderRoutes(app);**\n} \n```", "```js\nexport const toArray = (...args: any[]) => args.slice(0, -1);\nexport const lower = (val: string) => val.toLowerCase();\nexport const getValue = (val: any, prop: string) =>\n    val?.[prop.toLowerCase()] ?? {};\nexport const get = (val: any) => val ?? {}; \n```", "```js\nimport { Express } from \"express\";\nimport { getConfig } from \"../config\";\nimport { engine } from \"express-handlebars\";\nimport * as env_helpers from \"./env\";\nimport * as catalog_helpers from \"./catalog_helpers\";\nimport * as cart_helpers from \"./cart_helpers\";\n**import * as order_helpers from \"./order_helpers\";**\nconst location = getConfig(\"templates:location\");\nconst config = getConfig(\"templates:config\");\nexport const createTemplates = (app: Express) => {\n    app.set(\"views\", location);\n    app.engine(\"handlebars\", engine({\n        ...config,\n       ** helpers: {...env_helpers, ...catalog_helpers, ...cart_helpers,**\n **...order_helpers}**\n    }));\n    app.set(\"view engine\", \"handlebars\");\n} \n```", "```js\n<div class=\"text-center m-2\">\n    <h2>Thanks!</h2>\n    <p>Thanks for placing order #{{ id }}</p>\n    <p>We'll ship your goods as soon as possible.</p>\n    <a class=\"btn btn-primary\" href=\"/\">Return to Store</a>\n</div> \n```", "```js\n{{#each this }}\n    <div class=\"text-danger\">{{ this }}</div>\n{{/each }} \n```", "```js\n<div class=\"m-2\">\n    <h3>Your details:</h3>\n    <div class=\"form-group\">\n        <label>Name:</label>\n        {{#with (get order.customer.name) }}\n            <input name=\"customer[name]\" class=\"form-control\"\n                value=\"{{ value }}\">\n            {{#if invalid}}\n                {{> validation_messages messages }}\n            {{/if }}\n        {{/with }}\n    </div>\n        <div class=\"form-group\">\n        <label>Email:</label>\n        {{#with (get order.customer.email)}}\n            <input name=\"customer[email]\" class=\"form-control\"\n                value=\"{{ value }}\">\n            {{#if invalid }}\n                {{> validation_messages messages }}\n            {{/if }}\n        {{/with}}\n    </div>\n</div> \n```", "```js\n...\n{{#with **order.customer.name** }}\n    <input name=\"customer[name]\" class=\"form-control\" value=\"{{ **value** }}\">\n... \n```", "```js\n...\n{{#with (**get order.customer.name**) }}\n... \n```", "```js\n<div class=\"m-2\">\n    <h3>Ship to:</h3>       \n    {{#each (toArray \"Street\" \"City\" \"State\" \"Zip\") }}\n        {{#with (getValue ../order.address this) }}\n            <div class=\"form-group\">\n                <label>{{ ../this }}:</label>\n                <input name=\"address[{{lower ../this}}]\" class=\"form-control\"\n                    value=\"{{value}}\">\n            </div>\n            {{#unless valid}}\n                {{> validation_messages messages }}\n            {{/unless}}\n        {{/with}}\n    {{/each}}\n</div> \n```", "```js\n...\n{{#each (toArray \"Street\" \"City\" \"State\" \"Zip\") }}\n... \n```", "```js\n...\n<input name=\"address[{{lower ..**/this**}}]\" class=\"form-control\" value=\"{{value}}\">\n... \n```", "```js\n<form method=\"post\" action=\"/checkout\">\n    {{> order_details_customer }}\n    {{> order_details_address }}\n\n    <div class=\"m-2\">\n        <button type=\"submit\" class=\"btn btn-primary\">Place Order</button>\n        <a href=\"/cart\" class=\"btn btn-primary\">Back</a>\n    </div>\n</form> \n```", "```js\nimport { Express } from \"express\";\nimport { Address } from \"../data/order_models\";\nimport { AddressValidator, CustomerValidator, ValidationResults, getData, isValid }\n    from \"../data/validation\";\nimport { Customer } from \"../data/customer_models\";\nimport { createAndStoreOrder } from \"./order_helpers\";\ndeclare module \"express-session\" {\n    interface SessionData {\n       orderData?: {\n            customer?: ValidationResults<Customer>,\n            address?: ValidationResults<Address>\n       },\n      ** pageSize?: string;**\n    }\n}\nexport const createOrderRoutes = (app: Express) => {\n    app.get(\"/checkout\", (req, resp) => {\n        **req.session.pageSize** **=**\n **req.session.pageSize ?? req.query.pageSize?.toString() ?? \"3\";**\n        resp.render(\"order_details\", {\n            order: req.session.orderData,\n            **page: 1,**\n **pageSize: req.session.pageSize**\n        });\n    });\n    app.post(\"/checkout\", async (req, resp) => {\n        const { customer, address } = req.body;\n        const data = req.session.orderData = {\n            customer: await CustomerValidator.validate(customer),\n            address: await AddressValidator.validate(address)\n        };\n        if (isValid(data.customer) && isValid(data.address)\n                && req.session.cart) {\n            const order = await createAndStoreOrder(\n                getData(data.customer), getData(data.address),\n                    req.session.cart\n            )\n            resp.redirect(`/checkout/${order.id}`);\n            req.session.cart = undefined;\n            req.session.orderData = undefined;\n        } else {\n            resp.redirect(\"/checkout\");\n        }\n    });\n    app.get(\"/checkout/:id\", (req, resp) => {\n        resp.render(\"order_complete\", {\n            id: req.params.id,\n            **pageSize****: req.session.pageSize ?? 3**\n        });\n    })\n} \n```", "```js\n<h2>Your cart</h2>\n<table class=\"table table-bordered table-striped\">\n    <thead>\n        <tr>\n            <th class=\"text-end\">Quantity</th><th>Item</th>\n            <th class=\"text-end\">Price</th><th class=\"text-end\">Subtotal</th>\n            <th></th>\n        </tr>\n    </thead>\n    <tbody>\n        {{#unless cart.lines}}\n            <tr><td colspan=\"5\" class=\"text-center\">Cart is empty</td></tr>\n        {{/unless}}\n        {{#each cart.lines}}\n            {{> cart_line returnUrl=../returnUrl }}       \n        {{/each }}\n    </tbody>\n    <tfoot>\n        <tr>\n            <td colspan=\"3\" class=\"text-end\">Total:</td>\n            <td class=\"text-end\">{{ currency cart.total }}</td>\n        </tr>\n    </tfoot>\n</table>\n<div class=\"text-center\">\n    <a class=\"btn btn-primary\" href=\"{{ returnUrl }}\">Continue Shopping</a>\n    {{#if cart.lines}}\n        **<a class=\"btn btn-primary\" href=\"/checkout{{returnUrl}}\">Checkout</a>**\n    {{else}}\n        <button class=\"btn btn-primary\" disabled>Checkout</button>\n    {{/if}}\n</div> \n```", "```js\n<form method=\"post\" action=\"/checkout\">\n    {{> order_details_customer }}\n    {{> order_details_address }}\n\n    <div class=\"m-2\">\n        <button type=\"submit\" class=\"btn btn-primary\">Place Order</button>\n        **<a** **href=\"/cart?returnUrl={{ escapeUrl (navigationUrl )}}\"**\n **class=\"btn btn-primary\">Back</a>**\n    </div>\n</form> \n```", "```js\n<div class=\"text-center m-2\">\n    <h2>Thanks!</h2>\n    <p>Thanks for placing order #{{ id }}</p>\n    <p>We'll ship your goods as soon as possible.</p>\n   ** <a class=\"btn btn-primary\"** **href=\"/?page=1&pageSize={{pageSize}}\">**\n        Return to Store\n    </a>\n</div> \n```"]