["```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch6/pipeline --path cncb-pipeline\n```", "```js\n$ git init\n$ git remote add origin git@gitlab.com:<username>/cncb-pipeline.git\n$ git add .gitignore\n$ git commit -m \"initial commit\"\n$ git push -u origin master\n```", "```js\nimage: node:8\n\nbefore_script:\n  - cp .npmrc-conf .npmrc\n  - npm install --unsafe-perm\n\ntest:\n  stage: test\n  script:\n    - npm test\n    - npm run test:int\n\nstg-east:\n  stage: deploy\n  variables:\n    AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID\n    AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY\n  script:\n    - npm run dp:stg:e\n  except:\n    - master\n\nproduction-east:\n  stage: deploy\n  variables:\n    AWS_ACCESS_KEY_ID: $PROD_AWS_ACCESS_KEY_ID\n    AWS_SECRET_ACCESS_KEY: $PROD_AWS_SECRET_ACCESS_KEY\n  script:\n    - npm run dp:prd:e\n  only:\n    - master\n```", "```js\n...\n  \"scripts\": {\n    \"test\": \"echo running unit tests...\",\n    \"test:int\": \"echo running integration tests...\",\n    ...\n    \"dp:stg:e\": \"sls deploy -v -r us-east-1 -s stg --acct dev\",\n    \"dp:prd:e\": \"sls deploy -v -r us-east-1 -s prd --acct prod\"\n  },\n...\n```", "```js\nservice: cncb-pipeline\n\nprovider:\n  name: aws\n  # cfnRole: arn:aws:iam::${self:custom.accounts.${opt:acct}.accountNumber}:role/${opt:stage}-cfnRole\n\ncustom:\n  accounts:\n    dev:\n      accountNumber: 123456789012\n    prod:\n      accountNumber: 123456789012\n```", "```js\n$ git pull\n$ git add .\n$ git commit -m \"initialize project\"\n$ git push origin 1-initialize-project\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch6/unit-testing --path cncb-unit-testing\n```", "```js\n  \"scripts\": {\n    ...\n    \"pretest\": \"npm run clean && npm run lint\",\n    \"test\": \"nyc mocha ... ./test/unit/**/*.test.js\",\n    ...\n  },\n```", "```js\n$ npm test\n...\n  14 passing (76ms)\n...\n===== Coverage summary =====\nStatements   : 100% ( 57/57 )\nBranches     : 100% ( 4/4 )\nFunctions    : 100% ( 28/28 )\nLines        : 100% ( 51/51 )\n```", "```js\n  it('should get by id', async () => {\n    const spy = sinon.spy((params, cb) => cb(null, {\n      Item: ...\n    }));\n\n    AWS.mock('DynamoDB.DocumentClient', 'get', spy);\n\n    const data = await new Connector('t1').getById(ID);\n    expect(spy).to.have.been.calledOnce;\n    ...\n  });\n```", "```js\n  it('should get by id', async () => {\n    ...\n    const stub = sinon.stub(Connector.prototype, 'getById')\n      .returns(Promise.resolve(THING));\n\n    const data = await new Handler(TABLE_NAME).handle(REQUEST);\n    expect(stub).to.have.been.calledWith(ID);\n    ...\n  });\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch6/integration-testing --path cncb-integration-testing\n```", "```js\n  \"scripts\": {\n    ...\n    \"test:int\": \"npm start -- --exec \\\"mocha ... ./test/int/**/*.test.js\\\"\",\n    \"start\": \"sls offline start --port 3001 -r us-east-1 -s stg --acct dev\",\n    ...\n  },\n```", "```js\n$ npm run test:int\n...\nServerless: Replay mode = replay\nServerless: Starting Offline: stg/us-east-1.\n...\n  get/index.js\n    ✓ should get by id\n...\n  3 passing (358ms)\n...\nServerless: Halting offline server\n```", "```js\nserverless.yml\n\n...\nplugins:\n  - serverless-webpack\n  - baton-vcr-serverless-plugin\n  - serverless-offline\n...\n\ntest/int/get/index.test.js\n\n...\nconst supertest = require('supertest');\nconst client = supertest('http://localhost:3001');\n...\ndescribe('get/index.js', () => {\n  it('should get by id', () => client\n    .get('/things/00000000-0000-0000-0000-000000000000')\n    .expect(200)\n    .expect((res) => {\n      expect(JSON.parse(res.text)).to.deep.equal(THING);\n    }));\n});\n\nwebpack.config.js\n\n...\nconst injectMocks = (entries) =>\n  Object.keys(entries).reduce((e, key) => {\n    e[key] = ['./test/int/mocks.js', entries[key]];\n    return e;\n  }, {});\n\nconst includeMocks = () => slsw.lib.webpack.isLocal && process.env.REPLAY != 'bloody';\n\nmodule.exports = {\n  entry: includeMocks() ? injectMocks(slsw.lib.entries) : slsw.lib.entries,\n...\n```", "```js\ntest/int/trigger/index.test.js\n\ndescribe('trigger/index.js', () => {\n  before(() => {\n    require('baton-vcr-replay-for-aws-sdk');\n    process.env.STREAM_NAME = 'stg-cncb-event-stream-s1';\n    aws.config.update({ region: 'us-east-1' });\n  });\n\n  it('should trigger', (done) => {\n    new Handler(process.env.STREAM_NAME).handle(TRIGGER)\n      .collect()\n      .tap((data) => {\n        expect(data).to.deep.equal([{\n          response: RESPONSE,\n          event: EVENT,\n        }]);\n      })\n      .done(done);\n  });\n})\n```", "```js\n$ DEBUG=replay REPLAY=record npm run test:int\n\n...\nServerless: GET /things/00000000-0000-0000-0000-000000000000 (λ: get)\n  replay Requesting POST https://dynamodb.us-east-1.amazonaws.com:443/ +0ms\n  replay Creating ./fixtures/dynamodb.us-east-1.amazonaws.com-443 +203ms\n  replay Received 200 https://dynamodb.us-east-1.amazonaws.com:443/ +5ms\n...\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch6/contract-testing-sync --path cncb-contract-testing-sync\n```", "```js\nimport 'mocha';\n\nconst supertest = require('supertest');\nconst relay = require('baton-request-relay');\nconst client = supertest('http://localhost:3001');\n\ndescribe('contract/frontend', () => {\n  it('should relay the frontend save request', \n    () => run('./fixtures/frontend/save'));\n\n  it('should relay the frontend get request', \n    () => run('./fixtures/frontend/get'));\n});\n\nconst run = fixture => {\n  const rec = relay(fixture);\n\n  return client[rec.request.method](rec.request.path)\n    .set(rec.request.headers)\n    .send(rec.request.body)\n\n    .expect(rec.response.statusCode)\n    .expect(rec.response.body);\n};\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch6/contract-testing-async/upstream --path cncb-contract-testing-async-upstream\n\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch6/contract-testing-async/downstream --path cncb-contract-testing-async-downstream\n```", "```js\n...\nconst EVENT = require('../../../fixtures/downstream-consumer-x/thing-created.json');\n\ndescribe('contract/downstream-consumer-x', () => {\n  before(() => {\n    const replay = require('baton-vcr-replay-for-aws-sdk');\n    replay.fixtures = './fixtures/downstream-consumer-x';\n    process.env.STREAM_NAME = 'stg-cncb-event-stream-s1';\n    aws.config.update({ region: 'us-east-1' });\n  });\n\n  afterEach(() => {\n    sinon.restore();\n  });\n\n  it('should publish thing-created', (done) => {\n    sinon.stub(utils, 'uuidv4').returns('00000000-0000-0000-0000-000000000001');\n    handle(EVENT, {}, done);\n  });\n});\n```", "```js\n...\nconst relay = require('baton-event-relay');\n\ndescribe('contract/upstream-provider-y', () => {\n  before(() => {\n    ...\n    const replay = require('baton-vcr-replay-for-aws-sdk');\n    replay.fixtures = './fixtures/upstream-provider-y';\n  });\n\n  it('should process the thing-created event', (done) => {\n    const rec = relay('./fixtures/upstream-provider-y/thing-created');\n    handle(rec.event, {}, done);\n  });\n});\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch6/transitive-testing/author-frontend --path cncb-transitive-testing-author-frontend\n\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch6/transitive-testing/author-bff --path cncb-transitive-testing-author-bff\n\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch6/transitive-testing/customer-bff --path cncb-transitive-testing-customer-bff\n\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch6/transitive-testing/customer-frontend --path cncb-transitive-testing-customer-frontend\n```", "```js\n$ cd ./author-frontend\n$ DEBUG=replay npm run test:int\n\n$ cd ../author-bff\n$ npm test\n$ DEBUG=replay npm run test:int\n\n$ cd ../customer-bff\n$ npm test\n$ DEBUG=replay npm run test:int\n\n$ cd ../customer-frontend\n$ DEBUG=replay npm run test:int\n```", "```js\n./author-frontend/fixtures/0.0.0.0-3001/save-thing0\n./author-frontend/fixtures/0.0.0.0-3001/get-thing0\n\n./author-bff/fixtures/author-frontend/save-thing0\n./author-bff/fixtures/dynamodb.us-east-1.amazonaws.com-443/save-thing0\n\n./author-bff/fixtures/author-frontend/get-thing0\n./author-bff/fixtures/dynamodb.us-east-1.amazonaws.com-443/get-thing0\n\n./author-bff/fixtures/downstream-customer-bff/thing0-INSERT.json\n./author-bff/fixtures/kinesis.us-east-1.amazonaws.com-443/thing0-created\n\n./customer-bff/fixtures/upstream-author-bff/thing0-created\n./customer-bff/fixtures/dynamodb.us-east-1.amazonaws.com-443/save-thing0\n\n./customer-bff/fixtures/customer-frontend/get-thing0\n./customer-bff/fixtures/dynamodb.us-east-1.amazonaws.com-443/get-thing0\n\n./customer-frontend/fixtures/0.0.0.0-3001/get-thing0\n```", "```js\n./author-frontend/test/int/e2e.test.js\n\n./author-bff/test/int/author-frontend/e2e.test.js\n./author-bff/test/int/downstream-customer-bff/e2e.test.js\n\n./customer-bff/test/int/upstream-author-bff/e2e.test.js\n./customer-bff/test/int/customer-frontend/e2e.test.js\n\n./customer-frontend/test/int/e2e.test.js\n```", "```js\n$ sls create --template-url https://github.com/danteinc/js-cloud-native-cookbook/tree/master/ch6/feature-flag --path cncb-feature-flag\n```", "```js\n...\n\nconst getGroups = props => get(props,  \n  'auth.cognito.signInUserSession.idToken.payload.cognito:groups', '');\n\nconst check = (allowedRoles, props) => {\n  const groups = getGroups(props);\n  return intersection(groups, allowedRoles).length > 0;\n};\n\nconst HasRole = allowedRoles =>\n  props => check(allowedRoles, props) ?\n    props.children :\n    null;\n\nexport const HasAuthorRole = HasRole(['Author']);\nexport const HasBetaUserRole = HasRole(['BetaUser']);\n```", "```js\nconst Home = ({ auth }) => (\n  <div>\n    ...\n    <HasAuthorRole>\n      This is the Author Feature!\n    </HasAuthorRole>\n    <HasBetaUserRole>\n      This is a New Beta Feature...\n    </HasBetaUserRole>\n    ...\n  </div>\n);\n```"]