["```js\n    git remote remove origin\n\n    ```", "```js\n    cd auction-app\n\n    ```", "```js\n    npm install\n\n    ```", "```js\n    cp config/environments/example.js config/environments/development.js\n\n    ```", "```js\n'use strict';\n\nmodule.exports = {\n  port: 3000,\n  hostname: '127.0.0.1',\n  baseUrl: 'http://localhost:3000',\n  mongodb: {\n    uri: 'mongodb://localhost/auction_dev_db'\n  },\n  app: {\n    name: 'MEAN Blueprints - auction application'\n  },\n  serveStatic: true,\n  session: {\n    type: 'mongo',                          \n    secret: 'someVeRyN1c3S#cr3tHer34U',\n    resave: false,                     \n    saveUninitialized: true\n  },\n  proxy: {\n    trust: true\n  },\n  logRequests: false  \n};\n```", "```js\n'use strict';\n\nconst mongoose = require('mongoose');\nconst Money = require('./money').schema;\nconst Schema = mongoose.Schema;\nconst ObjectId = Schema.ObjectId;\nconst Mixed = Schema.Types.Mixed;\n\nvar AuctionSchema = new Schema({\n  item:           { type: Mixed },\n  startingPrice:  { type: Money },\n  currentPrice:   { type: Money },\n  endPrice:       { type: Money },\n  minAmount:      { type: Money },\n  bids: [{\n    bidder:       { type: ObjectId, ref: 'Bidder' },\n    amount:       { type: Number, default: 0 },\n    createdAt:    { type: Date, default: Date.now }\n  }],\n  startsAt:       { type: Date },\n  endsAt:         { type: Date },\n  createdAt:      { type: Date, default: Date.now }\n});\n\nmodule.exports = mongoose.model('Auction', AuctionSchema);\n```", "```js\n'use strict';\n\nconst mongoose = require('mongoose');\nconst Money = require('./money').schema;\nconst Schema = mongoose.Schema;\nconst ObjectId = Schema.ObjectId;\nconst Mixed = Schema.Types.Mixed;\n\nconst BidderSchema = new Schema({\n  profileId:      { type: String },\n  additionalData: { type: Mixed },\n  auctions: [{\n    auction:      { type: ObjectId, ref: 'Auction' },\n    status:       { type: String, default: 'active'},\n    joinedAt:     { type: Date, default: Date.now }\n  }],\n  createdAt:      { type: Date, default: Date.now }\n});\n\nmodule.exports = mongoose.model('Bidder', BidderSchema);\n```", "```js\n'use strict';\n\nconst EventEmitter = require('events');\nlet instance;\n\nclass Mediator extends EventEmitter {\n  constructor() {\n    super();\n  }\n}\n\nmodule.exports = function singleton() {\n  if (!instance) {\n    instance = new Mediator();\n  }\n\n  return instance;\n} \n```", "```js\n'use strict';\n\nconst mediator = require('./mediator')();\n\nmediator.on('some:awesome:event', (msg) => {\n  console.log(`received the following message: ${msg}`);\n});\n\nmediator.emit('some:awesome:event', 'Nice!');\n```", "```js\n    const MAX_LIMIT = 30;\n\n    const mongoose = require('mongoose');\n    const mediator = require('./mediator')();\n    const Auction = mongoose.model('Auction');\n    const Bidder = mongoose.model('Bidder');\n    ```", "```js\n    class AuctionManager {\n      constructor(AuctionModel, BidderModel) {\n        this._Auction = AuctionModel || Auction;\n        this._Bidder = BidderModel || Bidder;\n      }\n    }\n    module.exports = AuctionManager;\n    ```", "```js\n      getAllAuctions(query, limit, skip, callback) {\n        if (limit > MAX_LIMIT) {\n          limit = MAX_LIMIT;\n        }\n\n        this._Auction\n        .find(query)\n        .limit(limit)\n        .skip(skip)\n        .exec(callback);\n      }\n    ```", "```js\n      joinAuction(bidderId, auctionId, callback) {\n        this._Bidder.findById(bidderId, (err, bidder) => {\n          if (err) {\n            return callback(err);\n          }\n\n          bidder.auctions.push({ auction: auctionId });\n          bidder.save((err, updatedBidder) => {\n            if (err) {\n              return callback(err);\n            }\n\n            mediator.emit('bidder:joined:auction', updatedBidder);\n            callback(null, updatedBidder);\n          });\n        });\n      }\n    ```", "```js\n      placeBid(auctionId, bidderId, amount, callback) {\n        if (amount <= 0) {\n          let err = new Error('Bid amount cannot be negative.');\n          err.type = 'negative_bit_amount';\n          err.status = 409;\n          return callback(err);\n        }\n\n        let bid = {\n          bidder: bidderId,\n          amount: amount\n        };\n\n        this._Auction.update(\n          // query\n          {\n            _id: auctionId.toString()\n          },\n          // update\n          {\n            currentPrice: { $inc: amount },\n            bids: { $push: bid }\n          },\n          // results\n          (err, result) => {\n            if (err) {\n              return callback(err);\n            }\n\n            if (result.nModified === 0) {\n              let err = new Error('Could not place bid.');\n              err.type = 'new_bid_error';\n              err.status = 500;\n              return callback(err);\n            }\n\n            mediator.emit('auction:new:bid', bid);\n            callback(null, bid);\n          }\n        );\n      }\n    ```", "```js\n'use strict';\n\nconst socketIO = require('socket.io');\nconst mediator = require('./mediator')();\nconst AuctionManager = require('./auction-manager');\nconst auctionManager =  new AuctionManager();\n\nclass Auctioneer {\n  constructor(app, server) {\n    this.connectedClients = {};\n    this.io = socketIO(server);\n    this.sessionMiddleware = app.get('sessionMiddleware');\n    this.initMiddlewares();\n    this.bindListeners();\n    this.bindHandlers();\n  }\n}\nmodule.exports = Auctioneer;\n```", "```js\n  initMiddlewares() {\n    this._io.use((socket, next) => {\n      this.sessionMiddleware(socket.request, socket.request.res, next);\n    });\n\n    this.io.use((socket, next) => {\n      let user = socket.request.session.passport.user;\n\n      // authorize user\n      if (!user) {\n        let err = new Error('Unauthorized');\n        err.type = 'unauthorized';\n        return next(err);\n      }\n\n      // attach user to the socket, like req.user\n      socket.user = {\n        _id: socket.request.session.passport.user\n      };\n      next();\n    });\n  }\n```", "```js\n  bindHandlers() {\n    this.io.on('connection', (socket) => {\n      // add client to the socket list to get the session later\n      let userId = socket.request.session.passport.user;\n      this.connectedClients[userId] = socket;\n\n      // when user places a bid\n      socket.on('place:bid', (data) => {\n        auctionManager.placeBid(\n          data.auctionId,\n          socket.user._id,\n          data.amount,\n          (err, bid) => {\n            if (err) {\n              return socket.emit('place:bid:error', err);\n            }\n\n            socket.emit('place:bid:success', bid);\n          }\n        );\n\n      });\n    });\n  }\n```", "```js\n  bindListeners() {\n    mediator.on('bidder:joined:auction', (bidder) => {\n      let bidderId = bidder._id.toString();\n      let currentSocket = this.connectedClients[bidderId];\n      currentSocket.emit.broadcast('bidder:joined:auction', bidder);\n    });\n\n    mediator.on('auction:new:bid', (bid) => {\n      this.io.sockets.emit('auction:new:bid', bid);\n    });\n  }\n```", "```js\n'use strict';\n\nconst _ = require('lodash');\nconst mongoose = require('mongoose');\nconst Auction = mongoose.model('Auction');\nconst AuctionManager = require('../services/auction-manager');\nconst auctionManager = new AuctionManager();\n\nmodule.exports.getAll = getAllAuctions;\n\nfunction getAllAuctions(req, res, next) {\n  let limit = +req.query.limit || 30;\n  let skip = +req.query.skip || 0;\n  let query = _.pick(req.query, ['status', 'startsAt', 'endsAt']);\n\n  auctionManager.getAllAuctions(query, limit, skip, (err, auctions) => {\n    if (err) {\n      return next(err);\n    }\n\n    req.resources.auctions = auctions;\n    next();\n  });\n}\n```", "```js\n    'use strict';\n\n    const DEFAULT_URL = 'http://localhost:3000/api';\n    const CONTENT_HEADERS = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    };\n\n    const request = require('request');\n    ```", "```js\n    class RequestOptions {\n      constructor(opts) {\n        let headers = Object.assign({}, CONTENT_HEADERS, opts.headers);\n\n        this.method = opts.method || 'GET';\n        this.url = opts.url;\n        this.json = !!opts.json;\n        this.headers = headers;\n        this.body = opts.body;\n      }\n\n      addHeader(key, value) {\n        this.headers[key] = value;\n      }\n    }\n    ```", "```js\n    class EcommerceClient {\n      constructor(opts) {\n        this.request = request;\n        this.url = opts.url || DEFAULT_URL;\n      }\n    }\n    ```", "```js\n      authenticate(email, password, callback) {\n        let req = new RequestOptions({\n          method: 'POST',\n          url: `${this.url}/auth/basic`\n        });\n        let basic = btoa(`${email}:${password}`);\n\n        req.addHeader('Authorization', `Basic ${basic}`);\n\n        this.request(req, function(err, res, body) => {\n          callback(err, body);\n        })\n      }\n    ```", "```js\n      getProducts(opts, callback) {\n        let req = new RequestOptions({\n          url: `${this.url}/api/products`\n        });\n        req.addHeader('Authorization', `Bearer ${opts.token}`);\n\n        this.request(req, function(err, res, body) => {\n          callback(err, body);\n        })\n      }\n    ```", "```js\nimport { Injectable } from 'angular2/core';\nimport { Response, Headers } from 'angular2/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/Subject/BehaviorSubject';\nimport { AuthHttp } from '../auth/index';\nimport { contentHeaders } from '../common/headers';\nimport { Auction } from './auction.model';\nimport { SubjectAuction, ObservableAuction, ObservableAuctions } from './types';\n\nconst URL = 'api/auctions';\n\n@Injectable()\nexport class AuctionService { \n}\n```", "```js\n  public currentAuction: SubjectAuction = new BehaviorSubject<Auction>(new Auction());\n  public auctions: ObservableAuctions;\n  public auction: ObservableAuction;\n\n  private _http: Http;\n  private _auctionObservers: any;\n  private _auctionsObservers: any;\n  private _dataStore: { auctions: Array<Auction>, auction: Auction };\n\n  constructor(http: Http, bidService: BidService) {\n    this._http = http;\n    this.auction = new Observable(observer => this._auctionObservers = observer).share();\n    this.auctions = new Observable(observer => this._auctionsObservers = observer).share();\n    this._dataStore = { auctions: [], auction: new Auction() };\n  }\n```", "```js\n    public getAll() {\n    this._authHttp\n    .get(URL, { headers: contentHeaders })\n    .map((res: Response) => res.json())\n    .map((data) => {\n      return data.map((auction) => {\n        return new Auction(\n          auction._id,\n          auction.item,\n          auction.startingPrice,\n          auction.currentPrice,\n          auction.endPrice,\n          auction.minAmount,\n          auction.bids,\n          auction.status,\n          auction.startsAt,\n          auction.endsAt,\n          auction.createdAt\n        );\n      });\n    })\n    .subscribe(auctions => {\n      this._dataStore.auctions = auctions;\n      this._auctionsObservers.next(this._dataStore.auctions);\n    }, err => console.error(err));\n  } \n```", "```js\n  public getOne(id) {\n    this._authHttp\n    .get(`${URL}/${id}`)\n    .map((res: Response) => res.json())\n    .map((data) => {\n      return new Auction(\n        data._id,\n        data.item,\n        data.startingPrice,\n        data.currentPrice,\n        data.endPrice,\n        data.minAmount,\n        data.bids,\n        data.status,\n        data.startsAt,\n        data.endsAt,\n        data.createdAt\n      );\n    })\n    .subscribe(auction => {\n      this._dataStore.auction = auction;\n      this._auctionObservers.next(this._dataStore.auction);\n    }, err => console.error(err));\n  }\n```", "```js\n  public setCurrentAuction(auction: Auction) {\n    this.currentAuction.next(auction);\n  }\n```", "```js\nimport { Injectable } from 'angular2/core';\nimport * as io from 'socket.io-client';\nimport { Observable } from 'rxjs/Rx';\nimport { ObservableBid } from '../bid/index';\nimport { ObservableBidder } from '../bidder/index' \n\nexport class SocketService {\n}\n```", "```js\n  public bid: ObservableBid;\n  public bidder: ObservableBidder;\n  private _io: any;\n\n  constructor() {\n    this._io = io.connect();\n    this._bindListeners();\n  }\n```", "```js\n  private _bindListeners() {\n    this.bid = Observable.fromEvent(\n      this._io, 'auction:new:bid'\n    ).share();\n    this.bidder = Observable.fromEvent(\n      this._io, 'bidder:joined:auction'\n    ).share();\n  }\n```", "```js\n  public emit(...args) {\n    this._io.emit.apply(this, args);\n  }\n```", "```js\n@Injectable()\nexport class BidService {\n  public bid: any;\n  public currentAuction: any;\n  private _socketService: SocketService;\n  private _auctionService: AuctionService;\n\n  constructor(\n    socketService: SocketService, \n    auctionService: AuctionService\n  ) {    \n    this._socketService = socketService;\n    this._auctionService = auctionService;\n    this.currentAuction = {};\n    this._auctionService.currentAuction.subscribe((auction) => {\n      this.currentAuction = auction;\n    });\n    this.bid = this._socketService.bid.filter((data) => {\n      return data.auctionId === this.currentAuction._id;\n    });\n  }\n\n  public placeBid(auctionId: string, bid: Bid) {\n    this._socketService.emit('place:bid', {\n      auctionId: auctionId,\n      amount: bid.amount\n    });\n  }\n}\n```", "```js\nimport { Injectable } from 'angular2/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { BehaviorSubject } from 'rxjs/Subject/BehaviorSubject';\nimport { contentHeaders } from '../common/headers';\nimport { SocketService } from './socket.service';\nimport { Bidder } from '../datatypes/bidder';\nimport { ObservableBidders } from '../datatypes/custom-types';\n\n@Injectable()\nexport class BidderService {\n}\n```", "```js\n  public bidders: ObservableBidders;\n\n  private _socketService: SocketService;\n  private _biddersObservers: any;\n  private _dataStore: { bidders: Array<Bidder> };\n\n  constructor() {\n    this.bidders = new Observable(observer => this._biddersObservers = observer).share();\n    this._dataStore = { bidders: [] };\n  }\n```", "```js\n  public storeBidders(bidders: Array<Bidder>) {\n    this._socketService = socketService;\n    this._dataStore = { bidders: [] };\n    this.bidders = new Observable(observer => {\n      this._biddersObservers = observer;\n    }).share();\n    this._socketService.bidder.subscribe(bidder => {\n      this.storeBidder(bidder);\n    });    \n  }\n\n  public storeBidder(bidder: Bidder) {\n    this._dataStore.bidders.push(bidder);\n    this._biddersObservers.next(this._dataStore.bidders);\n  }\n\n  public removeBidder(id: string) {\n    let bidders = this._dataStore.bidders;\n\n    bidders.map((bidder, index) => {\n      if (bidder._id === id) {\n        this._dataStore.bidders.splice(index, 1);\n      }\n    });\n\n    this._biddersObservers.next(this._dataStore.bidders);\n  }\n```", "```js\nexport class Bidder {\n  _id:            string;\n  profileId:      string;\n  additionalData: any;\n  auctions:       Array<any>;\n  createdAt:      string\n\n  constructor(\n    _id?:            string,\n    profileId?:      string,\n    additionalData?: any,\n    auctions?:       Array<any>,\n    createdAt?:      string\n  ) {\n    this._id = _id;\n    this.profileId = profileId;\n    this.additionalData = additionalData;\n    this.auctions = auctions;\n    this.createdAt = createdAt;\n  }\n}\n```", "```js\nimport { Money } from '../common/index';\n\nexport class Auction {\n  _id:            string;\n  identifier:     string;\n  item:           any;\n  startingPrice:  any;\n  currentPrice:   any;\n  endPrice:       any;\n  minAmount:      any;\n  bids:           Array<any>;\n  status:         string;\n  startsAt:       string;\n  endsAt:         string;\n  createdAt:      string\n\n  constructor(\n    _id?:            string,\n    item?:           any,\n    startingPrice?:  any,\n    currentPrice?:   any,\n    endPrice?:       any,\n    minAmount?:      any,\n    bids?:           Array<any>,\n    status?:         string,\n    startsAt?:       string,\n    endsAt?:         string,\n    createdAt?:      string,\n    identifier?:     string\n  ) {\n    this._id = _id;\n    this.item = item || { slug: '' };\n    this.startingPrice = startingPrice || new Money();\n    this.currentPrice = currentPrice || this.startingPrice;\n    this.endPrice = endPrice || new Money();\n    this.minAmount = minAmount || new Money();\n    this.bids = bids;\n    this.status = status;\n    this.startsAt = startsAt;\n    this.endsAt = endsAt;\n    this.createdAt = createdAt;\n    this.identifier = identifier || `${this.item.slug}-${this._id}`;\n  }\n}\n```", "```js\nexport class Money {\n  amount: number;\n  currency: string;\n  display: string;\n  factor: number;\n\n  constructor(\n    amount?: number,\n    currency?: string,\n    display?: string,\n    factor?: number\n  ) {\n    this.amount = amount;\n    this.currency = currency;\n    this.display = display;\n    this.factor = factor;\n  }\n}\n```", "```js\nimport { Component } from 'angular2/core';\nimport { RouteConfig, RouterOutlet } from 'angular2/router';\nimport { AuctionListComponent } from './auction-list.component';\nimport { AuctionDetailComponent } from './auction-detail.component';\n\n@RouteConfig([\n  { path: '/', as: 'AuctionList', component: AuctionListComponent, useAsDefault: true },\n  { path: '/:identifier', as: 'AuctionDetail', component: AuctionDetailComponent }\n])\n@Component({\n    selector: 'auction-base',\n    directives: [\n      AuctionListComponent,\n      AuctionDetailComponent,\n      RouterOutlet\n    ],\n    template: `\n      <div class=\"col\">\n        <router-outlet></router-outlet>\n      </div>\n    `\n})\nexport class AuctionBaseComponent {\n  constructor() {}\n}\n```", "```js\nimport { Component, OnInit } from 'angular2/core';\nimport { AuctionService } from '../auction.service';\nimport { Router, RouterLink } from 'angular2/router';\nimport { Auction } from '../auction.model';\n\n@Component({\n    selector: 'auction-list',\n    directives: [RouterLink],\n    template: `\n      <div class=\"auction-list row\">\n        <h2 class=\"col\">Available auctions</h2>\n        <div *ngFor=\"#auction of auctions\" class=\"col col-25\">\n          <h3>\n            <a href=\"#\"\n              [routerLink]=\"['AuctionDetail', { identifier: auction.identifier }]\">\n              {{ auction.item.title }}\n            </a>\n          </h3>\n          <p>starting price: {{ auction.startingPrice.display }} {{ auction.startingPrice.currency }}</p>\n        </div>\n      </div>\n    `\n})\nexport class AuctionListComponent implements OnInit {\n  public auctions: Array<Auction> = [];\n  private _auctionService: AuctionService;\n\n  constructor(auctionService: AuctionService) {\n    this._auctionService = auctionService;\n  }\n\n  ngOnInit() {\n    this._auctionService.auctions.subscribe((auctions: Array<Auction>) => {\n      this.auctions = auctions;\n    });\n    this._auctionService.getAll();\n  }\n}\n```", "```js\n    import { Component, OnInit } from 'angular2/core';\n    import { AuctionService } from '../auction.service';\n    import { RouterLink, RouteParams } from 'angular2/router';\n    import { Auction } from '../auction.model';\n    import { BidListComponent } from '../../bid/index';\n    import { BidFormComponent } from '../../bid/index';\n    ```", "```js\n    @Component({\n        selector: 'auction-detail,\n        directives: [\n          BidListComponent,\n          BidFormComponent,\n          RouterLink\n        ],\n        template: `\n          <div class=\"col\">\n            <a href=\"#\" [routerLink]=\"['AuctionList']\">back to auctions</a>\n          </div>\n          <div class=\"row\">\n            <div class=\"col sidebar\">\n              <div class=\"auction-details\">\n                <h2>{{ auction.item.title }}</h2>\n                <p>{{ auction.startingPrice.display }} {{ auction.startingPrice.currency }}</p>\n                <p>{{ auction.currentPrice.dislpay }} {{ auction.startingPrice.currency }}</p>\n                <p>minimal bid amount: {{ auction.minAmount.display }}</p>\n              </div>\n            </div>\n            <div class=\"col content\">\n              <bid-list></bid-list>\n              <bid-form></bid-form>\n            </div>\n          </div>\n        `\n    })\n    ```", "```js\n    export class AuctionDetailComponent implements OnInit, OnDestroy {\n      public auction: Auction;\n      private _routeParams:RouteParams;\n      private _auctionService: AuctionService;\n\n      constructor(\n        auctionService: AuctionService, \n        routeParams: RouteParams\n      ) {    \n        this._auctionService = auctionService;\n        this._routeParams = routeParams;\n      }\n    }\n    ```", "```js\n      ngOnInit() {\n        this.auction = new Auction();\n        const identifier: string = this._routeParams.get('identifier');\n        const auctionId = this.getAuctionId(identifier);\n        this._auctionService.auction.subscribe((auction: Auction) => {\n          this.auction = auction;\n        });\n        this._auctionService.getOne(auctionId);\n      }\n    ```", "```js\n      ngOnDestroy() {\n        this._auctionService.setCurrentAuction(new Auction());\n      }\n    ```", "```js\n      private getAuctionId(identifier: string) {\n        const chunks = identifier.split('-');\n        return chunks[chunks.length -1];\n      }\n    ```", "```js\nimport { Component, OnInit, OnDestroy } from 'angular2/core';\nimport { BidService } from '../bid.service';\nimport { Bid } from '../bid.model';\nimport { BidComponent } from './bid.component';\n\n@Component({\n    selector: 'bid-list',\n    inputs: ['bids'],\n    directives: [BidComponent],\n    template: `\n      <div class=\"bid-list\">\n        <div *ngIf=\"bids.length === 0\" class=\"empty-bid-list\">\n          <h3>No bids so far :)</h3>\n        </div>\n        <bid *ngFor=\"#bid of bids\" [bid]=\"bid\"></bid>\n      </div>\n    `\n})\nexport class BidListComponent implements OnInit, OnDestroy {\n  public bids: Array<Bid>;\n  private _bidService: BidService;\n  private _subscription: any;\n\n  constructor(bidService: BidService) {\n    this._bidService = bidService;\n  }\n\n  ngOnInit() {\n    this._subscription = this._bidService.bid.subscribe((bid) => {\n      this.bids.push(bid);\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) {\n        this._subscription.unsubscribe();\n    }\n  }\n}\n```", "```js\nimport { Component, AfterViewInit } from 'angular2/core';\nimport { Bid } from '../bid.model';\n\n@Component({\n    inputs: ['bid'],\n    selector: 'bid',\n    template: `\n      <div class=\"bid-item\">\n        <div class=\"\">\n          <span class=\"\">{{bid_id}}</span>\n          <span class=\"\">{{bid.amount}}</span>\n        </div>\n      </div>\n    `\n})\nexport class BidComponent implements AfterViewInit {\n  public bid: Bid;\n\n  constructor() {}\n\n  ngAfterViewInit() {\n    var ml = document.querySelector('bid-list .bid-list');\n    ml.scrollTop = ml.scrollHeight;\n  }\n}\n```", "```js\nexport class Bid {\n  _id:            string;\n  bidder:         any;\n  amount:         any;\n  createdAt:      string\n\n  constructor(\n    _id?:         string,\n    bidder?:      any,\n    amount?:      any,\n    createdAt?:   string\n  ) {\n    this._id = _id;\n    this.bidder = bidder;\n    this.amount = amount;\n    this.createdAt = createdAt;\n  }\n}\n```"]