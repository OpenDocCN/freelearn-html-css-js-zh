["```js\n$ meteor create svggraph\n$ cd svggraph\n$ rm svggraph.*\n$ mkdir client\n$ mkdir server\n$ mkdir both\n\n```", "```js\n$ meteor remove autopublish\n$ meteor add http\n$ meteor add meteorhacks:aggregate\n$ meteor add rzymek:randomcolor\n$ meteor\n\n```", "```js\n    <body>\n      {{> cPic}}\n    </body>\n\n    <template name=\"cPic\">\n      <svg id=\"stateBars\" width=\"800\" height=\"600\">\n        {{#each stateStats}}\n        {{> stateStat}}\n        {{/each}}\n      </svg>\n      <div id=\"cComment\">{{curComment}}</div>\n      <img id=\"cPic\" src=\"img/{{curPic}}\"/>\n    </template>\n\n    <template name=\"stateStat\">\n      <rect width=\"{{width}}\" height=\"{{stackHeight}}\" y=\"{{stackPosition}}\"\n            style=\"fill:{{color}};fill-opacity:0.8;\" />\n      <text x=\"5\" y=\"{{textYPos}}\" fill=\"black\">{{state}}: {{total}}</text>\n    </template>\n    ```", "```js\n    body {\n      font-family: 'Helvetica-Neue', sans-serif;\n      font-size: 12px;\n    }\n    #stateBars {\n      border:dashed 3px #ccc;\n    }\n    #cComment {\n      margin-top: 10px;\n    }\n    #cPic {\n      width: 200px;\n      margin-top: 10px;\n    }\n    ```", "```js\n    Comments = new Mongo.Collection('comments');\n    CountryTotals = new Mongo.Collection('countryTotals');\n    ```", "```js\n    Meteor.publish(\"commentsStream\", function(country){\n      var cursor = Comments.find({country:country});\n      var initializing = true;\n      cursor.observeChanges({\n        added:function(id,doc){\n          if (initializing) return;\n          var cTots = Meteor.call('totalsByCountry', doc.country);\n          var sTots = Meteor.call('totalsByState',doc.country);\n          var existingTots = CountryTotals.findOne({country:doc.country});\n\n          if (!sTots || !cTots) return;\n          sTots = _.map(sTots,function(s,i,d){\n            s._id.total = s.total;\n            if (existingTots){\n              var existingState = _.findWhere(existingTots.states,{state:s._id.state});\n              if (existingState) s._id.color = existingState.color || randomColor({luminosity: 'light', hue: 'blue'});\n              else s._id.color = randomColor({luminosity: 'light', hue: 'blue'});\n            }\n            return s._id;\n          });\n          var cObj = {country:doc.country, total:cTots[0].total, states: sTots};\n          CountryTotals.upsert({country:cObj.country},cObj);\n        }\n      });\n      initializing = false;\n\n      return cursor;\n    });\n    ```", "```js\n    Meteor.publish(\"graphData\", function(country){\n      return CountryTotals.find({country:country});\n    });\n    ```", "```js\n    Session.setDefault(\"country\", \"us\");\n    Session.setDefault(\"msgComment\",\"No comments yet\");\n    Session.setDefault(\"msgPic\", \"https://d14jjfgstdxsoz.cloudfront.net/meteor-logo.png\");\n    ```", "```js\n    Tracker.autorun(function(){\n      Meteor.subscribe(\"graphData\", Session.get('country'));\n      Meteor.subscribe(\"commentsStream\", Session.get('country'));\n    });\n    ```", "```js\n    Template.cPic.helpers({\n      curPic: function () {\n        return Session.get('msgPic');\n      },\n      curComment: function() {\n        return Session.get('msgComment');\n      }\n    });\n    ```", "```js\n    Meteor.methods({\n      addMsg : function (msg) {\n        var upMsg = {};\n        try {\n        upMsg.country = msg.group.country;\n        upMsg.state = msg.group.state;\n        upMsg.category = msg.group.category.name;\n        upMsg.thumb = (msg.group.group_photo ? msg.group.group_photo.thumb_link: \"\");\n        upMsg.createdAt = Date.now();\n        }\n        catch(e){\n          console.log(e.message);\n          return null;\n        }\n        Comments.insert(upMsg);\n      },\n      totalsByState: function (country){\n        return Comments.aggregate([ {$match:{country:country}}, {$group:{_id:{state:\"$state\"},total:{$sum:1}}}, {$sort:{\"total\":-1}} ]);\n      },\n      totalsByCountry: function(country){\n        return Comments.aggregate([ {$match:{country:country}}, {$group:{_id:{},total:{$sum:1}}} ]);\n      },\n      resetDB: function(){\n        Comments.remove({});\n        CountryTotals.remove({});\n        console.log('Collections have been reset');\n      }\n    });\n    ```", "```js\n    function MeetupsStream() {\n      var ms = {};\n      var ws;\n      var sURL = \"ws://stream.meetup.com/2/event_comments\";\n      ms.connect = function (url) {\n        sURL = url || sURL;\n        ws = new WebSocket(sURL);\n        ws.onopen = ms.onopen;\n        ws.onmessage = ms.onmessage;\n        ws.onclose = ms.onclose;\n        return ms;\n      };\n      ms.disconnect = function () {\n        ws && ws.close();\n      };\n      ms.onopen = function () {\n        console.log(\"Meetup stream started...\");\n      };\n      ms.onmessage = function (e) {\n        var rec_msg = EJSON.parse(e.data);\n        if (rec_msg.group.group_photo)\n          Session.set('msgPic', rec_msg.group.group_photo.photo_link);\n        Session.set('msgComment', rec_msg.comment);\n        Meteor.call('addMsg', rec_msg);\n    //   \n      };\n\n      ms.onclose = function () {\n        console.log(\"Meetup stream closed.\");\n      };\n\n      return ms;\n    }\n    ```", "```js\n    curComment: function() {\n        return Session.get('msgComment');\n      },\n     stateStats: function () {\n     var ct = CountryTotals.findOne({country:Session.get('country')});\n     if (!ct) return [];\n     var stateTotals = ct.states;\n     var ctotal = ct.total;\n     var SVGWidth = 800;\n     var SVGHeight = 600;\n     return _.map(stateTotals, function(s,i,l){\n     var retObj = {};\n     retObj.state = s.state;\n     retObj.index = i;\n     retObj.total = s.total;\n     retObj.width = ~~(SVGWidth * (s.total/ctotal));\n     retObj.stackHeight = ~~(SVGHeight/l.length);\n     retObj.stackPosition = i*retObj.stackHeight;\n     retObj.color = s.color;\n     return retObj;\n     });\n     }\n    });\n    ```", "```js\n    Template.stateStat.helpers({\n      textYPos: function () {\n        return this.stackPosition + ~~(this.stackHeight/2);\n\n      },\n      textXPos : function(){\n        return this.width - ~~(this.width*.2);\n      },\n      color : function(){\n        if (Session.equals('lastState',this.state)) return '#2ecc71';\n        return this.color;\n      }\n    });\n    ```", "```js\n    Template.cPic.rendered = function(){\n      MStream = new MeetupsStream();\n      MStream.connect();\n      this.autorun(function(){\n        var last = Comments.findOne( {country:Session.get('country')}, {sort:{createdAt:-1}});\n        if (last) Session.set('lastState',last.state);\n      });\n    }\n    ```", "```js\n    > Meteor.call('resetDB')\n\n    ```", "```js\n<template name=\"cPic\">\n <svg ...>\n    {{#each stateStats}}\n    {{> stateStat}}\n {{/each}}\n </svg>\n  ...\n</template>\n```", "```js\n<svg id=\"stateBars\" width=\"800\" height=\"600\">\n```", "```js\n<template name=\"stateStat\">\n  <rect width=\"{{width}}\" height=\"{{stackHeight}}\" y=\"{{stackPosition}}\"\n        style=\"fill:{{color}};fill-opacity:0.8;\" />\n  <text x=\"5\" y=\"{{textYPos}}\" fill=\"black\">{{state}}: {{total}}</text>\n</template>\n```", "```js\nfunction MeetupsStream() {\n  ms.onopen = ...\n  ms.onmessage = ...\n  ms.onclose = ...\n}\n```", "```js\nvar rec_msg = EJSON.parse(e.data);\n```", "```js\nif (rec_msg.group.group_photo)\n      Session.set('msgPic', ...);\n    Session.set('msgComment', rec_msg.comment);\n```", "```js\nMeteor.call('addMsg', rec_msg);\n```", "```js\n$ meteor create imageupload\n$ cd imageupload\n$ rm imageupload.*\n$ mkdir client\n$ mkdir server\n$ mkdir both\n$ mkdir .images\n\n```", "```js\n$ meteor add twbs:bootstrap\n$ meteor add voodoohop:masonrify\n\n```", "```js\n    <body>\n      <h1>Images!</h1>\n      {{> display}}\n      {{> dropzone}}\n    </body>\n\n    <template name=\"display\">\n      {{#masonryContainer\n        columnWidth=50\n        transitionDuration=\"0.2s\"\n        id=\"MasonryContainer\"\n      }}\n      {{#each imgs}}\n      {{> img}}\n      {{/each}}\n      {{/masonryContainer}}\n    </template>\n\n    <template name=\"dropzone\">\n      <div id=\"dropzone\" class=\"{{dropcloth}}\">Drag images here...</div>\n    </template>\n\n    <template name=\"img\">\n      {{#masonryElement \"MasonryContainer\"}}\n      <img src=\"img/{{src}}\"\n        class=\"display-image\"\n        style=\"width:{{calcWidth}}\"/>\n      {{/masonryElement}}\n    </template>\n    ```", "```js\n    body {\n      background-color: #f5f0e5;\n      font-size: 2rem;\n\n    }\n\n    div#dropzone {\n      position: fixed;\n      bottom:5px;\n      left:2%;\n      width:96%;\n      height:100px;\n      margin: auto auto;\n      line-height: 100px;\n      text-align: center;\n      border: 3px dashed #7f898d;\n      color: #7f8c8d;\n      background-color: rgba(210,200,200,0.5);\n    }\n\n    div#dropzone.active {\n      border-color: #27ae60;\n      color: #27ae60;\n      background-color: rgba(39, 174, 96,0.3);\n    }\n\n    img.display-image {\n      max-width: 400px;\n    }\n    ```", "```js\n    Images = new Mongo.Collection('images');\n    ```", "```js\n    imgFile = function (d) {\n      d = d || {};\n      this.name = d.name;\n      this.type = d.type;\n      this.source = d.source;\n      this.size = d.size;\n    };\n    ```", "```js\n    imgFile.fromJSONValue = function (d) {\n      return new imgFile({\n        name: d.name,\n        type: d.type,\n        source: EJSON.fromJSONValue(d.source),\n        size: d.size\n      });\n    };\n\n    imgFile.prototype = {\n      constructor: imgFile,\n\n      typeName: function () {\n        return 'imgFile'\n      },\n      equals: function (comp) {\n        return (this.name == comp.name &&\n          this.size == comp.size);\n      },\n      clone: function () {\n        return new imgFile({\n          name: this.name,\n          type: this.type,\n          source: this.source,\n          size: this.size\n        });\n      },\n      toJSONValue: function () {\n        return {\n          name: this.name,\n          type: this.type,\n          source: EJSON.toJSONValue(this.source),\n          size: this.size\n        };\n      }\n    };\n\n    EJSON.addType('imgFile', imgFile.fromJSONValue);\n    ```", "```js\n    if (Meteor.isClient){\n      _.extend(imgFile.prototype, {\n        read: function (f, callback) {\n\n          var fReader = new FileReader;\n          var self = this;\n          callback = callback || function () {};\n\n          fReader.onload = function() {\n            self.source = new Uint8Array(fReader.result);\n            callback(null,self);\n          };\n\n          fReader.onerror = function() {\n            callback(fReader.error);\n          };\n\n          fReader.readAsArrayBuffer(f);\n        }\n      });\n\n      _.extend (imgFile, {\n        read: function (f, callback){\n          return new imgFile(f).read(f,callback);\n        }\n      });\n    };\n\n    if (Meteor.isServer){\n      var fs = Npm.require('fs');\n      var path = Npm.require('path');\n      _.extend(imgFile.prototype, {\n        save: function(dirPath, options){\n          var fPath = path.join(process.env.PWD,dirPath,this.name);\n          var imgBuffer = new Buffer(this.source);\n          fs.writeFileSync(fPath, imgBuffer, options);\n        }\n      });\n    };\n    ```", "```js\n    Meteor.methods({\n      addURL : function(uri){\n        Images.insert({src:uri});\n      },\n      uploadIMG : function(iFile){\n        iFile.save('.images',{});\n        Images.insert({src:'images/' +iFile.name});\n      }\n    });\n    ```", "```js\n    var fs = Npm.require('fs');\n    WebApp.connectHandlers.use(function(req, res, next) {\n      var re = /^\\/images\\/(.*)$/.exec(req.url);\n      if (re !== null) {\n        var filePath = process.env.PWD + '/.images/'+ re[1];\n        var data = fs.readFileSync(filePath, data);\n        res.writeHead(200, {\n          'Content-Type': 'image'\n        });\n        res.write(data);\n        res.end();\n      } else {\n        next();\n      }\n    });\n    ```", "```js\n    Template.display.helpers({\n      imgs: function () {\n        return Images.find();\n      }\n    });\n    ```", "```js\n    Template.display.events({\n      'dblclick .display-image': function (e) {\n        Images.remove({\n          _id: this._id\n        });\n      }\n    });\n    ```", "```js\n    Template.dropzone.helpers({\n      dropcloth: function () {\n        return Session.get('dropcloth');\n      }\n    });\n\n    Template.dropzone.events({\n      'dragover #dropzone': function (e) {\n        e.preventDefault();\n        Session.set('dropcloth', 'active');\n      },\n      'dragleave #dropzone': function (e) {\n        e.preventDefault();\n        Session.set('dropcloth');\n\n      }\n    });\n    ```", "```js\n      'dragleave #dropzone': function (e) {\n        ...\n      },\n     'drop #dropzone': function (e) {\n     e.preventDefault();\n     Session.set('dropcloth');\n\n     var files = e.originalEvent.dataTransfer.files;\n     var images = \n    $(e.originalEvent.dataTransfer.getData('text/html')).find('img');\n     var fragment = _.findWhere(e.originalEvent.dataTransfer.items, {\n     type: 'text/html'\n     });\n     if (files.length) {\n     _.each(files, function (e, i, l) {\n     imgFile.read(e, function (error, imgfile) {\n     Meteor.call('uploadIMG', imgfile, function (e) {\n     if (e) {\n     console.log(e.message);\n     }\n     });\n     })\n     });\n     } else if (images.length) {\n     _.each(images, function (e, i, l) {\n     Meteor.call('addURL', $(e).attr('src'));\n     });\n     } else if (fragment) {\n     fragment.getAsString(function (e) {\n     var frags = $(e);\n     var img = _.find(frags, function (e) {\n     return e.hasAttribute('src');\n     });\n     if (img) Meteor.call('addURL', img.src);\n     });\n\n     }\n\n     }\n    });\n    ```", "```js\n$ meteor create coloringbook\n$ cd coloringbook\n$ rm coloringbook.*\n$ mkdir -p client/scripts\n$ mkdir {both,server,public}\n$ meteor\n\n```", "```js\n    $ meteor add accounts-password\n    $ meteor add accounts-ui\n\n    ```", "```js\n    <body>\n      {{> loginButtons}}\n    </body>\n    ```", "```js\n    <body>\n      {{> loginButtons}}\n      {{> toolbar}}\n      <div id=\"bgpicture\"></div>\n      {{> picture}}\n    </body>\n    ```", "```js\n    <template name=\"picture\">\n      <canvas id=\"picture\" class=\"no-copy\">Images go here...</canvas>\n    </template>\n    ```", "```js\n    <template name=\"toolbar\">\n      <div class=\"brush-size\" id=\"brush-size\">\n        <svg id=\"brush-preview\"\n         height=\"70\" width=\"70\"\n         style=\"display:{{eraseMode}}\">\n          <circle cx=\"35\" cy=\"35\"\n          r=\"{{preview.size}}\"\n          fill=\"{{preview.color}}\" />\n        </svg>\n      </div>\n      {{#masonryContainer columnWidth=50\n        transitionDuration=\"0.2s\"\n        id=\"MasonryContainer\" }}\n\n         {{#each swatches}}\n          {{> swatch}}\n         {{/each}}\n\n      {{/masonryContainer}}\n    </template>\n    <template name=\"swatch\">\n      {{#masonryElement \"MasonryContainer\"}}\n        <div class=\"swatch\" \n       style=\"background-color:{{color}};\">\n    {{color}}</div>\n      {{/masonryElement}}\n    </template>\n    ```", "```js\n    $ meteor add twbs:bootstrap\n    $ meteor add voodoohop:masonrify\n\n    ```", "```js\n    #picture {\n      color: #ccc;\n      border: 3px dashed #ccc;\n      width:800px;\n      height:600px;\n      border-radius: 4px;\n      line-height: 3em;\n      text-align: center;\n      left: 100px;\n      position: absolute;\n\n    }\n\n    #bgpicture {\n      pointer-events:none;\n      touch-events:none;\n      position:absolute;\n      background: url('Rawr.GIF');\n      top:0px;\n      left:100px;\n      width: 800px;\n      height:600px;\n      z-index: 999;\n\n    }\n    .no-copy {\n      -webkit-user-select: none;\n    }\n    #login-buttons {\n      position : absolute;\n      min-width: 220px;\n      right: 20px;\n      top: 10px;\n    }\n    .login-link-text {\n      position:absolute;\n      right: 0px;\n    }\n    .swatch {\n      height:50px;\n      width:50px;\n      border-radius: 4px;\n      border: solid #ccc 2px;\n      line-height: 50px;\n      font-size:0.8em;\n      text-align: center;\n      margin-bottom: 5px;\n    }\n    .masonry_container {\n      position:absolute;\n      top:100px;\n      left:23px;\n      width: 50px;\n    }\n    .brush-size {\n      position:absolute;\n      left:10px;\n      top:10px;\n      border: dashed 3px #ccc;\n      border-radius: 40px;\n      width:76px;\n      height:76px;\n    }\n    ```", "```js\n    $ meteor add hammer:hammer@=2.0.4_1\n    $ meteor add gwendall:body-events\n\n    ```", "```js\n    (function(factory) {\n      if (typeof define === 'function' && define.amd) {\n        define(['jquery', 'hammerjs'], factory);\n      } else if (typeof exports === 'object') {\n        factory(require('jquery'), require('hammerjs'));\n      } else {\n        factory(jQuery, Hammer);\n      }\n    }(function($, Hammer) {\n      function hammerify(el, options) {\n        var $el = $(el);\n        if(!$el.data(\"hammer\")) {\n          $el.data(\"hammer\", new Hammer($el[0], options));\n        }\n      }\n\n      $.fn.hammer = function(options) {\n        return this.each(function() {\n          hammerify(this, options);\n        });\n      };\n\n      // extend the emit method to also trigger jQuery events\n      Hammer.Manager.prototype.emit = (function(originalEmit) {\n        return function(type, data) {\n          originalEmit.call(this, type, data);\n          $(this.element).trigger({\n            type: type,\n            gesture: data\n          });\n        };\n      })(Hammer.Manager.prototype.emit);\n    }));\n    ```", "```js\n    Swatches = new Mongo.Collection('swatches');\n    Prefs = new Mongo.Collection('prefs');\n    Activities = new Mongo.Collection('activities');\n    ```", "```js\n    Meteor.methods({\n\n      initSwatches : function(userId){\n        // no user = nothing to do. return.\n        if (!userId) return;\n        // if we already have swatches, return.\n        if (Swatches.findOne({user:userId})) return;\n        // add initial swatches\n        Swatches.insert({color: '#ecf0f1', user:userId});\n        Swatches.insert({color: '#ccc', user:userId});\n        Swatches.insert({color: '#f1c40f', user:userId});\n        Swatches.insert({color: '#e67e22', user:userId});\n        Swatches.insert({color: '#e74c3c', user:userId});\n        Swatches.insert({color: '#2ecc71', user:userId});\n        Swatches.insert({color: '#2980b9', user:userId});\n        Swatches.insert({color: '#000', user:userId});\n      },\n\n      addSwatch : function (color){\n        // no user = nothing to do. return.\n        if (!this.userId) return;\n        // if it doesn't already exist, add the swatch\n        if (!Swatches.findOne({color:color})){\n          Swatches.insert({color:color, user:this.userId});\n        }\n      },\n\n      clearActivity : function(){\n        // no user, return.\n        if (!this.userId) return;\n        // clear the undo history from Activities collection\n        Activities.remove({user:this.userId});\n      },\n\n      breakHistory : function(snapShot){\n        // if we don't have a valid snapshot,\n        // or user isn't logged in, return.\n        if (!snapShot||!this.userId) return;\n        // remove all snapshots after this one in the undo chain\n        Activities.remove({$and: [{createdAt:{$gt:snapShot.createdAt}},{user:this.userId}]})\n      }\n    });\n    ```", "```js\n    Accounts.onLogin(function(login){\n      // first, confirm that we have a valid userId\n      userId = login.user._id;\n      if (!userId) return;\n      // if so, and if we don't have preferences, let's initialize\n      if (!Prefs.findOne({user:userId})){\n        Prefs.insert({user:userId, size:11, color:'#e74c3c'});\n      }\n      // likewise, let's initialize swatches\n      Meteor.call('initSwatches', userId);\n    });\n    ```", "```js\n    Session.setDefault('drawing', false);\n    Session.setDefault('color', '#e74c3c');\n    ```", "```js\n    // **drawLine** -- helper function to draw / erase lines\n    drawLine = function (from, to, color,size) {\n      if (size)\n        ctx.lineWidth = size;\n      if (color)\n        ctx.strokeStyle = color;\n      if (Session.get('erase')){\n        ctx.globalCompositeOperation = 'destination-out';\n      } else {\n        ctx.globalCompositeOperation = 'source-over';\n      }\n      ctx.beginPath();\n      ctx.moveTo(from.x, from.y);\n      ctx.lineTo(to.x, to.y);\n      ctx.closePath();\n      ctx.stroke();\n    }\n    ```", "```js\n    // **getPosition** -- helper function to calculate cursor position\n    getPosition = function (event) {\n      return {\n        x: parseInt(event.gesture.center.x - event.currentTarget.offsetLeft),\n        y: parseInt(event.gesture.center.y - event.currentTarget.offsetTop)\n      };\n    }\n\n    // **wipe** -- function to clear the painting area\n    wipe = function (emitAlso) {\n      ctx.clearRect(0, 0, canvas.attr('width'), canvas.attr('height'));\n    }\n    ```", "```js\n    // **addSnapshot** -- helper function to save strokes and update // undo history\n    addSnapshot = function(){\n      var userId = Meteor.userId();\n\n      if (!userId) return;\n\n      //Convert Canvas into a Picture\n      ctx.globalCompositeOperation = 'source-over';\n      var canvasPic = canvas[0].toDataURL();\n      var timestamp = Date.now();\n\n      //  check current history. if we are in undo-land, need to clean // up snapshots\n      var curHist = Session.get('history');\n      if (curHist){\n        var curSnap = Session.get('currentSnapshot');\n        Meteor.call('breakHistory',curSnap);\n        Session.set('history',0);\n      }\n\n      // Save it to our Activities History\n      Activities.insert({\n        user:userId,\n        canvas:canvasPic,\n        createdAt:timestamp\n      });\n    };\n    ```", "```js\n    // **paintActivity** -- helper function to redraw screen on undo/// redo/draw\n    paintActivity = function(userId,idx){\n      var latestActs = Activities.find({user:userId},\n    {sort:{createdAt:-1}}).fetch();\n      if (!latestActs.length) {\n        return;\n      }\n      if(!latestActs[idx]) idx = latestActs.length-1;\n      wipe();\n      var imageObj = new Image();\n      imageObj.onload = function () {\n        ctx.drawImage(this, 0, 0);\n      };\n      Session.set('currentSnapshot',latestActs[idx]);\n      imageObj.src = latestActs[idx].canvas;\n    };\n    ```", "```js\n    Template.toolbar.rendered = function(){\n      // we first need to turn on hammer.js touch events...\n      var brushSize = this.$('#brush-size').hammer();\n      // ...we then change the pan threshold from 10 to 2\n      var mgr = brushSize.data('hammer');\n      mgr.get('pan').set({ threshold: 2 });\n    };\n    ```", "```js\n    Template.toolbar.helpers({\n      swatches: function () {\n        // Return the swatches for this user\n        return Swatches.find({ user: Meteor.userId() });\n      },\n      preview : function(){\n        // gets preferences for toolbar, with one modification...\n        var prefs = Prefs.findOne({user:Meteor.userId()});\n        // ...because brush is a circle, we need radius, not diameter\n        if (prefs) prefs.size= ~~(prefs.size/2);\n        return prefs;\n      },\n      eraseMode : function(){\n        // if we're in erase mode, the brush circle is hidden\n        return (Session.get('erase')? 'none':null);\n      }\n    });\n    ```", "```js\n    Template.toolbar.events({\n      'panstart #brush-size' : function(ev){\n        // record our offset position, and turn on resizing\n        Session.set('brushFrom',ev.gesture.center.x);\n        Session.set('brushResize',true);\n      },\n      'pan  #brush-size': function(ev){\n        // if we're not resizing, no need to continue\n        if (!Session.equals('brushResize',true)) return;\n        // likewise, if there are no prefs, just return\n        var prefs = Prefs.findOne({user:Meteor.userId()});\n        if (!prefs) return;\n        // calculate the delta from last we checked...\n        var adjustment = Session.get('brushFrom');\n        adjustment = ev.gesture.center.x - adjustment;\n        // ...and create a new brush size\n        var newbrushSize = prefs.size + adjustment;\n        // reset offset position, in case resizing continues\n        Session.set('brushFrom', ev.gesture.center.x);\n        // new brush size needs to be the 3rd bowl of porridge...\n        if (newbrushSize<=70&&newbrushSize>=3){\n          // adjust the preferences record and update the collection\n          prefs.size = newbrushSize;\n          Prefs.update({_id:prefs._id}, prefs);\n        }\n      },\n      'panstop #brush-size': function(ev){\n        // job's done. clean up.\n        Session.set('brushFrom');\n        Session.set('brushResize',false);\n      },\n      'doubletap #brush-size': function(ev){\n        // turn on 'erase' mode\n        Session.set('erase',(!Session.get('erase')));\n      }\n    });\n    ```", "```js\n    // suuuuper simple turning on of touch events\n    // using hammer.js\n    Template.swatch.rendered = function () {\n      this.$('.swatch').hammer();\n    };\n\n    Template.swatch.events({\n      'tap .swatch': function (ev) {\n        // if no preference, return;\n        var prefs = Prefs.findOne({user:Meteor.userId()});\n        if (!prefs) return;\n        // change the color to whatever swatch we tapped on\n        prefs.color = this.color;\n        // update Prefs collection\n        Prefs.update({_id:prefs._id},prefs);\n      }\n    });\n    ```", "```js\n    Template.picture.rendered = function () {\n      // set the canvas we will be drawing on\n      canvas = this.$('#picture');\n      // set the context for the canvas\n      ctx = canvas[0].getContext('2d');\n      // need to properly size the canvas\n      canvas.attr({\n        width: 800, height: 600\n        // ...AND set up tap listeners via hammer.js\n      }).hammer();\n      // we want to change the default threshold from 10 to 2\n      canvas.data('hammer').get('pan').set({threshold:2});\n      // we now set the line and line cap style\n      ctx.lineJoin = ctx.lineCap = 'round';\n      // Stops iOS from doing that bouncy, janky thing\n      document.ontouchmove = function (event) {\n        event.preventDefault();\n      };\n    ```", "```js\n    // Reactive function that reruns whenever\n      // preference are updated\n      this.autorun(function () {\n        // if no prefs exist, return\n        var prefs = Prefs.findOne({user:Meteor.userId()});\n        if (!prefs) return;\n        // set stroke color and width\n        ctx.strokeStyle = prefs.color;\n        ctx.lineWidth = prefs.size;\n      });\n\n      // Reactive function that reruns whenever\n      // User logs in, or our undo history position changes\n      this.autorun(function(){\n        // if we're not logged in (no userId), return\n        var userId = Meteor.userId();\n        if (!userId){\n          wipe();\n          return;\n        }\n        // otherwise, paint the proper screen,\n        // using the undo chain history position\n        paintActivity(userId,Session.get('history')||0);\n      });\n    };\n    ```", "```js\n    Template.picture.events({\n      'panmove #picture': function (ev) {\n        // we must be in drawing mode...\n        if (Session.equals('drawing', true)\n            && Meteor.userId()) {\n          // find our cursor position\n          to = getPosition(ev);\n          // physically draw the stroke\n          drawLine(from,to);\n          // update our from position\n          from = to;\n        }\n      },\n      'panstart #picture': function (ev) {\n        // get our from position, when we start drawing\n        from = getPosition(ev);\n        // tell everyone that we are in drawing mode\n        Session.set('drawing', true);\n      },\n      'panend #picture': function (ev) {\n        // drawing mode is over!\n        Session.set('drawing', false);\n        // we now record the screen, add to undo chain\n        addSnapshot();\n      },\n      'doubletap #picture': function (ev) {\n        // clear the screen\n        wipe();\n        // wipe out our undo history\n        Meteor.call('clearActivity');\n      }\n    });\n    ```", "```js\n    Template.body.events({\n      'keydown' : function(ev){\n\n        // if there's no undo history, no reason to continue, // so return.\n        var histLength = Activities.find({user:Meteor.userId()}).fetch().length;\n        if (!histLength) return;\n\n        // If it's not a CTRL+Z or CMD+Z, we don't care, so // return.\n        if ((!ev.metaKey && !ev.ctrlKey)||(ev.keyCode!==90)) return;\n\n        // find the current position in the undo chain, if any.\n        var curHist = Session.get('history')||0;\n\n        // if it was SHIFT+CMD+Z, it means redo, so decrement // the history\n        if (ev.shiftKey)\n          curHist--;\n        // otherwise, increment the history\n        else\n          curHist++;\n\n        // if we're past the boundaries of TIME and SPACE we\n        // certainly don't care about JavaScript anymore, so let's return.\n        if(curHist<0 || curHist> histLength-1 ) return;\n\n        // after all that, set the new undo chain position\n        Session.set('history',curHist);\n      }\n    });\n    ```", "```js\ncanvas = this.$('#picture');\n```", "```js\nctx = canvas[0].getContext('2d');\n```", "```js\ndrawLine = function (from, to, color,size) {\n  ...\n ctx.lineWidth = size;\n  ...\n ctx.strokeStyle = color;\n  if (Session.get('erase')){\n    ctx.globalCompositeOperation = 'destination-out';\n  } else {\n    ctx.globalCompositeOperation = 'source-over';\n  }\n  ...\n```", "```js\nctx.beginPath();\nctx.moveTo(from.x, from.y);\nctx.lineTo(to.x, to.y);\nctx.closePath();\nctx.stroke();\n```", "```js\nvar canvasPic = canvas[0].toDataURL();\n```", "```js\nActivities.insert({\n  user:userId,\n  canvas:canvasPic,\n  createdAt:timestamp\n});\n```", "```js\nvar imageObj = new Image();\nimageObj.onload = function () {\n  ctx.drawImage(this, 0, 0);\n};\n```", "```js\nctx.clearRect(0, 0, canvas.attr('width'), canvas.attr('height'));\n```"]