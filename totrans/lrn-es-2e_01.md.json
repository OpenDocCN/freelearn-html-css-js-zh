["```js\n var a = 12; // accessible everywhere\n function myFunction() {\n   console.log(a); // alerts 12\n   var b = 13;\n   if(true) {\n     var c = 14; // this is also accessible throughout the function!\n     alert(b); // alerts 13\n   }\n   alert(c); // alerts 14\n }\n myFunction();\n alert(b); // alerts undefined\n```", "```js\n let a = 12; // accessible everywhere\n function myFunction() {\n   console.log(a); // alerts 12\n   let b = 13;\n   if(true) {\n     let c = 14; // this is NOT accessible throughout the function!\n     alert(b); // alerts 13\n   }\n   alert(c); // alerts undefined\n }\n myFunction();\n alert(b); // alerts undefined\n```", "```js\nvar a = 0;\nvar a = 1;\nalert(a); // alerts 1\nfunction myFunction() {\n var b = 2;\n var b = 3;\n alert(b); // alerts 3\n}\nmyFunction();\n```", "```js\nlet a = 0;\nlet a = 1; // SyntaxError\nfunction myFunction() {\n let b = 2;\n let b = 3; // SyntaxError\n if(true) {\n    let c = 4;\n    let c = 5; // SyntaxError\n }\n}\nmyFunction();\n```", "```js\n var a = 1;\n let b = 2;\n function myFunction() {\n   var a = 3; // different variable\n   let b = 4; // different variable\n   if(true) {\n     var a = 5; // overwritten\n     let b = 6; // different variable\n     console.log(a); // 5\n     console.log(b); // 6\n }\n     console.log(a); // 5\n     console.log(b); // 4\n }\n myFunction();\n console.log(a);\n console.log(b);\n```", "```js\nfunction() {\n  var a = 1;\n  console.log(a); // 1\n} \nconsole.log(a); // Error\n```", "```js\nfunction counter () {\n  var count = 0;\n  return function () {\n    count += 1;\n    return count;\n  }\n}\n```", "```js\nlet myCounter = counter(); // returns a function (with count = 1)\nmyCounter(); // now returns 2\nmyCounter(); // now returns 3\n```", "```js\nfor(var i=0;i<5;i++){\n  setTimeout(function() {\n    console.log(i);\n  }, 1000);\n}\n```", "```js\n 5 5 5 5 5 \n```", "```js\nfor(let i=0;i<5;i++){\n  setTimeout(function() {\n    console.log(i);\n  }, 1000);\n}\n```", "```js\n0 1 2 3 4\n```", "```js\nfor(var i=0;i<5;i++){\n  (function(arg) {\n    setTimeout(function() {\n      console.log(arg); \n    }, 1000);\n  }(i));\n}\n```", "```js\nconst pi = 3.141;\npi = 4; // not possible in this universe, or in other terms, \n        // throws Read-only error\n```", "```js\nconst a = 12; // accessible globally\nfunction myFunction() {\n  console.log(a);\n  const b = 13; // accessible throughout function\n  if(true) {\n    const c = 14; // accessible throughout the \"if\" statement\n    console.log(b);\n  }\nconsole.log(c);\n}\nmyFunction();\n```", "```js\n12\n13\nReferenceError Exception\n```", "```js\nconst a = {\n  name: \"Mehul\"\n};\nconsole.log(a.name);\na.name = \"Mohan\";\nconsole.log(a.name);\na = {}; //throws read-only exception\n\n```", "```js\nMehul\nMohan\n<Error thrown>\n```", "```js\nlet myArr = [];\nfor(var i = 0;i<1000;i++) {\n   myArr.append(i);\n}\n```", "```js\nvar string1 = \"I am an immutable\";\nvar string2 = string1.slice(4, 8);\n```", "```js\nvar ob1 = {\n   prop1 : 1,\n    prop2 : {\n        prop2_1 : 2 \n    }\n};\nObject.freeze( ob1 );\n\nconst ob2 = {\n   prop1 : 1,\n    prop2 : {\n        prop2_1 : 2 \n    }\n}\n\nob1.prop1 = 4; // (frozen) ob1.prop1 is not modified \nob2.prop1 = 4; // (const) ob2.foo gets modified\n\nob1.prop2.prop2_1 = 4; // (frozen) modified, because ob1.prop2.prop2_1 is nested\nob2.bar.value = 4; // (const) modified \n\nob1.prop2 = 4; // (frozen) not modified, bar is a key of obj1\nob2.prop2 = 4; // (const) modified\n\nob1 = {}; // (frozen) ob1 redeclared (ob1's declaration is not frozen)\nob2 = {}; // (const) ob2 not redeclared (used const)\n```", "```js\n function myFunction(x, y, z) {\n x = x === undefined ? 1 : x;\n y = y === undefined ? 2 : y;\n z = z === undefined ? 3 : z;\n console.log(x, y, z); //Output \"6 7 3\"\n }\n myFunction(6, 7);\n```", "```js\nfunction myFunction(x = 1, y = 2, z = 3) {\n console.log(x, y, z); \n}\nmyFunction(6,7); // Outputs 6 7 3\n```", "```js\nfunction myFunction(x = 1, y = 2, z = 3) {\n   console.log(x, y, z); // Outputs \"1 7 9\"\n }\n myFunction(undefined,7,9);\n```", "```js\n function myFunction(x = 1, y = 2, z = x + y) {\n   console.log(x, y, z); // Output \"6 7 13\"\n }\n myFunction(6,7);\n```", "```js\nfunction myFunction(a, b) {\n  return a + b;\n}\nvar data = [1, 4];\nvar result = myFunction.apply(null, data);\nconsole.log(result); //Output \"5\"\n```", "```js\nfunction myFunction(a, b) {\n    return a + b; \n}\nlet data = [1, 4];\nlet result = myFunction(...data);\nconsole.log(result); //Output \"5\"\n```", "```js\nlet result = myFunction(...data);\n```", "```js\nlet result = myFunction(1,4);\n```", "```js\nlet array1 = [2,3,4];\nlet array2 = [1, ...array1, 5, 6, 7];\nconsole.log(array2); //Output \"1, 2, 3, 4, 5, 6, 7\"\n```", "```js\n let array2 = [1, ...array1, 5, 6, 7];\n```", "```js\n let array2 = [1, 2, 3, 4, 5, 6, 7];\n```", "```js\nvar array1 = [2,3,4];\nvar array2 = [1];\nArray.prototype.push.apply(array2, array1);\nconsole.log(array2); //Output \"1, 2, 3, 4\"\n```", "```js\nlet array1 = [2,3,4];\nlet array2 = [1];\narray2.push(...array1);\nconsole.log(array2); //Output \"1, 2, 3, 4\"\n```", "```js\narray2.push(...array1);\n```", "```js\narray2.push(2, 3, 4);\n```", "```js\nlet array1 = [1];\nlet array2 = [2];\nlet array3 = [...array1, ...array2, ...[3, 4]];//multi arrayspread\nlet array4 = [5];\nfunction myFunction(a, b, c, d, e) {\n  return a+b+c+d+e;\n}\nlet result = myFunction(...array3, ...array4); //multi array spread\nconsole.log(result); //Output \"15\"\n```", "```js\nfunction myFunction(a, b) {\n    const args = Array.prototype.slice.call(arguments, myFunction.length);\n    console.log(args);\n}\nmyFunction(1, 2, 3, 4, 5); //Output \"3, 4, 5\"\n```", "```js\nfunction myFunction(a, b, ...args) {\n    console.log(args); //Output \"3, 4, 5\"\n}\nmyFunction(1, 2, 3, 4, 5);\n```", "```js\nbookName(\"ES8 Concepts\");\nfunction bookName(name) {\n   console.log(\"I'm reading \" + name);\n}\n```", "```js\nfunction bookName(name) {\n   console.log(\"I'm reading \" + name);\n}\n\nbookName(\"ES8 Concepts\");\n```", "```js\nbookName(\"ES8 Concepts\"); // bookName is not a function\nvar bookName = function(name) {\n   console.log(\"I'm reading \" + name);\n}\n```", "```js\nvar bookName; // hoisted above\nbookName(\"ES8 Concepts\"); // bookName is not function \n                          // because bookName is undefined\nbookName = function(name) { // initalization is not hoisted\n   console.log(\"I'm reading \" + name);\n}\n```", "```js\nfunction foo(a) {\n   a();\n   function a() {\n      console.log(\"Mehul\");\n   }\n}\n\nfoo(); // ??\nfoo( undefined ); // ??\nfoo( function(){ console.log(\"Not Mehul\"); } ); // ??\n```", "```js\n    Mehul\n    undefined\n    Not Mehul\n    ```", "```js\n    Program throws error\n    ```", "```js\n    Mehul\n    Mehul\n    Mehul\n    ```", "```js\nMehul\nMehul\nMehul\n```", "```js\nfunction foo(a) { \n   // the moment below function is declared, \n   //the argument 'a' passed is overwritten.\n   function a() {\n      console.log(\"Mehul\");\n   }\n   a();\n}\n\nfoo();\nfoo( undefined );\nfoo( function(){ console.log(\"Not Mehul\"); } );\n```", "```js\n var myArray = [1, 2, 3];\n var a = myArray[0];\n var b = myArray[1];\n var c = myArray[2];\n\n```", "```js\nlet myArray = [1, 2, 3];\nlet a, b, c;\n[a, b, c] = myArray; //array destructuring assignment syntax\n\n```", "```js\nlet [a, b, c] = [1, 2, 3];\n\n```", "```js\n let [a, , b] = [1, 2, 3]; // notice -->, ,<-- (2 commas)\n console.log(a);\n console.log(b);\n```", "```js\n1 3\n```", "```js\n   let [a, ...b] = [1, 2, 3, 4, 5, 6];\n   console.log(a);\n   console.log(Array.isArray(b));\n   console.log(b);\n\n```", "```js\n 1\n   true\n   2,3,4,5,6 \n```", "```js\n   let [a, , ,...b] = [1, 2, 3, 4, 5, 6];\n   console.log(a);\n   console.log(b);\n\n```", "```js\n1 4,5,6\n```", "```js\n   let [a, b, c = 3] = [1, 2];\n   console.log(c); //Output \"3\"\n\n```", "```js\n   let [a, b, [c, d]] = [1, 2, [3, 4]];\n\n```", "```js\n   function myFunction([a, b, c = 3]) {\n     console.log(a, b, c); //Output \"1 2 3\"\n   }\n   myFunction([1, 2]);\n\n```", "```js\n   function myFunction([a, b, c = 3] = [1, 2, 3]) {\n     console.log(a, b, c);  //Output \"1 2 3\"\n   }\n    myFunction(undefined);\n```", "```js\n   var object = {\"name\" : \"John\", \"age\" : 23};\n   var name = object.name;\n   var age = object.age;\n\n```", "```js\n   let object = {\"name\" : \"John\", \"age\" : 23};\n   let name, age;\n   ({name, age} = object); //object destructuring assignment syntax\n\n```", "```js\n   let object = {\"name\" : \"John\", \"age\" : 23};\n   let x, y;\n   ({name: x, age: y} = object);\n\n```", "```js\n   let {name: x, age: y} = {\"name\" : \"John\", \"age\" : 23};\n\n```", "```js\n   let {a, b, c = 3} = {a: \"1\", b: \"2\"};\n   console.log(c); //Output \"3\"\n\n```", "```js\n   let {[\"first\"+\"Name\"]: x} = { firstName: \"Eden\" };\n   console.log(x); //Output \"Eden\"\n\n```", "```js\n   var {name, otherInfo: {age}} = {name: \"Eden\", otherInfo: {age:\n   23}};\n   console.log(name, age); //Eden 23\n\n```", "```js\n   function myFunction({name = 'Eden', age = 23, profession = \n                       \"Designer\"} = {})   {\n     console.log(name, age, profession); // Outputs \"John 23 Designer\"\n   }\n   myFunction({name: \"John\", age: 23});\n\n```", "```js\nlet circumference = (pi, r) => {\n  let ans = 2 * pi * r;\n  return ans;\n}\nlet result = circumference(3.141592, 3);\nconsole.log(result); // Outputs 18.849552\n```", "```js\nvar circumference = function(pi, r) {\n  var area = 2 * pi * r;\n  return area;\n}\nvar result = circumference(3.141592, 3);\nconsole.log(result); //Output 18.849552\n```", "```js\nlet circumference = (pi, r) => 2 * pi * r;\nlet result = circumference(3.141592, 3);\nconsole.log(result); //Output 18.849552\n```", "```js\nlet circumference = function(pi, r) { return 2 * pi * r; }\nlet result = circumference(3.14, 3);\nconsole.log(result); //Output 18.84\n```", "```js\nlet areaOfSquare = side => side * side;\nlet result = areaOfSquare(10);\nconsole.log(result); //Output 100\n```", "```js\nvar car = {\n  name: 'Bugatti',\n  fuel: 0,\n  // site A\n  addFuel: function() {\n             // site B\n             setInterval(function() {\n              // site C\n              this.fuel++;\n              console.log(\"The fuel is now \" + this.fuel);\n             }, 1000)\n           }\n}\n\n```", "```js\nvar car = {\n  name: 'Bugatti',\n  fuel: 0,\n  // site A\n  addFuel: function() {\n             // site B\n             setInterval(() => { // notice!\n              // site C\n              this.fuel++;\n              console.log(\"The fuel is now \" + this.fuel);\n             }, 1000)\n           }\n}\n```", "```js\nvar x = 1, y = 2;\nvar object = {\n x: x,\n y: y \n};\nconsole.log(object.x); //output \"1\"\n```", "```js\nlet x = 1, y = 2;\nlet object = { x, y };\nconsole.log(object.x); //output \"1\"\n```", "```js\nlet object = {\n    myFunction(){\n        console.log(\"Hello World!!!\"); //Output \"Hello World!!!\"\n    }\n}\nobject.myFunction();\n```", "```js\nvar object = {};\nobject[\"first\"+\"Name\"] = \"Eden\";//\"firstName\" is the property name\n//extract\nconsole.log(object[\"first\"+\"Name\"]); //Output \"Eden\"\n```", "```js\nlet object = {\n[\"first\" + \"Name\"]: \"Eden\",\n};\n//extract\nconsole.log(object[\"first\" + \"Name\"]); //Output \"Eden\"\n```", "```js\nvar arr = [1, 2, 3,,,];\narr.length; // 5\narr[3]; // undefined\n\nvar arr2 = [1, 2, 3,];\narr2.length; // 3\n```", "```js\nvar book = { \n  name: \"Learning ES8\", \n  chapter: \"1\",\n  reader: \"awesome\", // trailing comma allowed here\n};\n```", "```js\nfunction myFunc(arg) {\n   console.log(arg);\n}\n\nfunction myFunc2(arg,) {\n   console.log(arg)\n} \n\nlet myFunc3 = (arg) => {\n   console.log(arg);\n};\n\nlet myFunc4 = (arg,) => {\n   console.log(arg);\n}\n```", "```js\nvar a = 1 \nvar b = 2 \nvar c = 3\n```", "```js\nvar a = 1;\nvar b = 2;\nvar c = 3;\n\n```", "```js\nvar fn = function (arg) {\n    console.log(arg);\n} // Semicolon missing\n\n// self invoking function\n(function () {\n    alert(5);\n})() // semicolon missing\n\nfn(7)\n```", "```js\nvar fn = function (arg) {\n    alert(arg);\n}(function () { // <-- semicolon was missing here, \n                // this made it an argument for the function\n    alert(5);\n})();\n\nfn(7);\n```"]