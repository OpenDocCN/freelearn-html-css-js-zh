["```js\nvar blurV = new BABYLON.BlurPostProcess(\n  \"blurV\", // Name of the post-process\n  new BABYLON.Vector2(0, 1), // Direction of the blur (vertical)\n  4, // The blur width\n  0.5, // The ratio of the post-process\n  camera // The camera to attach to\n);\n```", "```js\nvar bw = new BABYLON.BlackAndWhitePostProcess(\n  \"blackAndWhite\", // name of the post-process\n  1.0, // ratio of 1.0, keep the full resolution\n  camera // the camera to attach to\n);\n```", "```js\nvar blurH = new BABYLON.BlurPostProcess(\n  \"blurH\",\n  new BABYLON.Vector2(1, 0),\n  8,\n  0.5,\n  camera\n);\n```", "```js\nvar blurV = new BABYLON.BlurPostProcess(\n  \"blurV\",\n  new BABYLON.Vector2(0, 1),\n  8,\n  0.5,\n  camera\n);\n```", "```js\nvar bw = new BABYLON.BlackAndWhitePostProcess(\"bw\", 1.0, camera);\n```", "```js\nblurH.dispose();\nblurV.dispose();\nbw.dispose();\n```", "```js\ncamera.detachPostProcess(blurH); // Detach\ncamera.attachPostProcess(blurH); // Re-attach the post-process\n```", "```js\nfor (var i=0; i < camera._postProcesses.length; i++) {\n  console.log(camera._postProcesses[i].name);\n}\n```", "```js\nvar pipeline = new BABYLON.PostProcessRenderPipeline(\n  engine, // The Babylon.js engine\n  \"renderingPipeline\" // The name of the rendering pipeline\n);\n```", "```js\nscene.postProcessRenderPipelineManager.addPipeline(pipeline);\n```", "```js\n// Create the post-process (horizontal blur)\nvar blurH = new BABYLON.BlurPostProcess(\n  \"blurH\",\n  new BABYLON.Vector2(1, 0), 8, 0.5,\n  null, // The camera is null\n  null, // Keep the bilinear filter as default\n  engine // Because the camera is null, we must provide the engine\n);\n// Create the render effect\nvar blurHEffect = new BABYLON.PostProcessRenderEffect(\n  engine, // The Babylon.js engine\n  \"blurHEffect\", // The name of the post-process render effect\n  () => { // The function that returns the wanted post-process\n    return blurH;\n  }\n);\n// Add the render effect to the pipeline\npipeline.addEffect(blurHEffect);\n```", "```js\nvar blurH = new BABYLON.BlurPostProcess(..);\nvar blurV = new BABYLON.BlurPostProcess(..);\nvar bw = new BABYLON.BlackAndWhitePostProcess(..);\n// The horizontal blur post-process render effect\nvar blurHEffect = new BABYLON.PostProcessRenderEffect(\n  engine, // The Babylon.js engine\n  \"blurHEffect\",\n  () => {\n    return blurH;\n  }\n);\n// The vertical blur post-process render effect\nvar blurVEffect = new BABYLON.PostProcessRenderEffect(\n  engine, // The Babylon.js engine\n  \"blurVEffect\",\n  () => {\n    return blurV;\n  }\n);\n// The black and white post-process render effect\nvar bwEffect = new BABYLON.PostProcessRenderEffect(\n  engine,\n  \"bwEffect\",\n  () => {\n    return bw;\n  }\n);\n// And finally add the render effects to the pipeline by\n// following the desired order\npipeline.addEffect(blurHEffect);\npipeline.addEffect(blurVEffect);\npipeline.addEffect(bwEffect);\n```", "```js\nscene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(\n  \"renderingPipeline\", // The name of the pipeline to attach\n  camera // the camera to attach to. Can be an array of cameras\n);\n```", "```js\nscene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(\n  \"renderingPipeline\", // The name of the pipeline to detach\n  camera // the camera to detach. Can be an array of cameras\n);\n```", "```js\nscene.postProcessRenderPipelineManager.disableEffectInPipeline(\n  \"renderingPipeline\", // The name of the render pipeline\n  \"bwEffect\", // The name of the \"black and white\" effect to disable\n  camera // The camera attached to the pipeline\n);\n```", "```js\nscene.postProcessRenderPipelineManager.enableEffectInPipeline(\n  \"renderingPipeline\", // The name of the render pipeline\n  \"bwEffect\", // The name of the \"black and white\" effect to enable\n  camera // The camera attached to the pipeline\n);\n```", "```js\nvar vls = new BABYLON.VolumetricLightScatteringPostProcess(\n  \"vls\", // The name of the post-process\n  1.O, // The ratio of the post-process\n  camera, // The camera to attach to\n  null, // The mesh used as light source\n  100 // Number of samples. Means the quality of the post-process\n);\n```", "```js\nBABYLON.VolumetricLightScatteringPostProcess.CreateDefaultMesh(\n  \"vlsMesh\", // The name of the billboard plane mesh\n  scene // The scene where to add the billboard plane mesh\n);\n```", "```js\nvar moon = scene.getMeshByName(\"moon\");\nvar vls = new BABYLON.VolumetricLightScatteringPostProcess(\n  \"vls\", // The name of the post-process\n  1.O, // The ratio of the post-process\n  camera, // The camera to attach to\n  moon, // The mesh used as light source\n  75 // Number of samples. Means the quality of the post-process\n);\n```", "```js\nvar ratio = {\n  passRatio: 0.25, // Ratio of the internal pass. Render in a texture\n  // with a size divided per 4\n  postProcessRatio: 1.0 // Ratio of the post-process\n};\nvar vls = new BABYLON.VolumetricLightScatteringPostProcess(\n  \"vls\", // The name of the post-process\n  ratio, // The ratio object\n  camera, // The camera to attach to\n  moon, // The mesh used as light source\n  100 // Number of samples. Means the quality of the post-process\n);\n```", "```js\nvls.exposure = 0.7; // Exaggerated value\n```", "```js\nvls.decay = 0.9;\n```", "```js\nvls.weight = 0.8;\n```", "```js\nvls.density = 0.7;\n```", "```js\nvar moon = scene.getMeshByName(\"Moon\");\nvar vls = new BABYLON.VolumetricLightScatteringPostProcess(\n  \"vls\",\n  1.0,\n  scene.activeCamera,\n  moon,\n  65,\n);\nvls.exposure = 0.15;\nvls.weight = 0.54;\n```", "```js\nvar ssao = new BABYLON.SSAORenderingPipeline(\n  \"ssao\", // The name of the render pipeline\n  scene, // The scene where to add the render pipeline\n  1.0 // The ratio of SSAO post-process\n);\n// Attach the render pipeline to your camera\nscene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(\n  \"ssao\", // Name of the render pipeline\n  camera // The camera to attach to\n);\n```", "```js\nvar ratio = {\n  ssaoRatio: 0.25, // Size divided per 4, saves a lot of performances!\n  combineRatio: 1.0 // The final output that mixes SSAO with the scene\n};\nvar ssao = new BABYLON.SSAORenderingPipeline(\n  \"ssao\", // The name of the render pipeline\n  scene, // The scene where to add the render pipeline\n  ratio // The ratio of SSAO post-process\n);\n```", "```js\nvar hdr = new BABYLON.HDRRenderingPipeline(\n  \"hdr\", // The name of the render pipeline\n  scene, // The scene where to add the render pipeline\n  1.0, // ratio of the render pipeline. Here, the ratio is a number\n);\n// Finally, attach the render pipeline to a camera\nscene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(\n  \"hdr\", // The name of the render pipeline\n  camera // The camera to attach to\n);\n```", "```js\nhdr.exposure = 1.8;\n```", "```js\nhdr.brightThreshold = 0.2;\n```", "```js\nhdr.minimumLuminance = 0.0;\n```", "```js\nhdr.gaussMultiplier = 8;\n```", "```js\nhdr.gaussCoeff = 0.8;\n```", "```js\nhdr.gaussStandDev = 0.2;\n```", "```js\nvar hdr = new BABYLON.HDRRenderingPipeline(\"hdr\", scene, 1.0);\nhdr.brightThreshold = 0.5;\nhdr.gaussCoeff = 0.7;\nhdr.gaussMean = 1.0;\nhdr.gaussStandDev = 7.5;\nhdr.minimumLuminance = 0.7;\nhdr.luminanceDecreaseRate = 1.0;\nhdr.luminanceIncreaserate = 1.0;\nhdr.exposure = 1.3;\nhdr.gaussMultiplier = 4;\n```"]