["```js\nhttps://api.openweathermap.org/data/2.5/weather?q={city name}\nhttps://api.openweathermap.org/data/2.5/weather?q={city name},{country code}\n```", "```js\n{\n    \"city\": {\n        \"id\":1851632,\n        \"name\":\"Shuzenji\",\n        \"coord\": { \"lon\":138.933334, \"lat\":34.966671 },\n        \"country\": \"JP\",\n        \"cod\":\"200\",\n        \"message\":0.0045,\n        \"cnt\":38,\n        \"list\":[{\n            \"dt\":1406106000,\n            \"main\":{\n                \"temp\":298.77,\n                \"temp_min\":298.77,\n                \"temp_max\":298.774,\n                \"pressure\":1005.93,\n                \"sea_level\":1018.18,\n                \"grnd_level\":1005.93,\n                \"humidity\":87,\n                \"temp_kf\":0.26},\n            \"weather\":[{\"id\":804,\"main\":\"Clouds\",\"description\":\"overcast clouds\",\"icon\":\"04d\"}],\n            \"clouds\":{\"all\":88},\n            \"wind\":{\"speed\":5.71,\"deg\":229.501},\n            \"sys\":{\"pod\":\"d\"},\n            \"dt_txt\":\"2014-07-23 09:00:00\"\n        }]\n    }\n}\n```", "```js\nconst GetWeatherHandler = {\n    canHandle(handlerInput) {\n        return handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n            handlerInput.requestEnvelope.request.intent.name === 'getWeather';\n    },\n    handle(handlerInput) {}\n}\n```", "```js\nconst { slots } = this.event.request.intent;\nlet { location, date } = slots;\nlocation = location.value || null;\ndate = date.value || null;\n\nif (!location) { \n    let slotToElicit = 'location';\n    let speechOutput = 'Where do you desire to know the weather';\n    return handlerInput.responseBuilder\n        .speak(speechOutput)\n        .addElicitSlotDirective(slotToElicit)\n        .getResponse();\n}\nif (!date){\n    date = Date.now()\n}\n```", "```js\naxios.get(*URL*)\n```", "```js\nasync handle(handlerInput) {}\n```", "```js\nlet result = await promise();\n```", "```js\nlet isToday = moment(date).isSame(Date.now(), 'day');\n\nif (isToday) {\n    // lookup todays weather\n} else {\n    // lookup forecast\n}\n```", "```js\nlet { key: newKeyName } = { key: 'this is some data' };\n```", "```js\nif (isToday) {\n    let { data: weatherResponse } = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${location},us&&appid=${process.env.API_KEY}');\n} else {\n    let { data: forecastResponse } = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${location},us&&appid=${process.env.API_KEY}`);\n}\n```", "```js\n{\n    \"coord\": {\n        \"lon\": -71.45,\n        \"lat\": 43\n    },\n    \"weather\": [\n        {\n            \"id\": 500,\n            \"main\": \"Rain\",\n            \"description\": \"light rain\",\n            \"icon\": \"10n\"\n        },\n        {\n            \"id\": 701,\n            \"main\": \"Mist\",\n            \"description\": \"mist\",\n            \"icon\": \"50n\"\n        }\n    ],\n    \"base\": \"stations\",\n    \"main\": {\n        \"temp\": 283.98,\n        \"pressure\": 1016,\n        \"humidity\": 93,\n        \"temp_min\": 282.15,\n        \"temp_max\": 285.15\n    },\n    \"visibility\": 16093,\n    \"wind\": {\n        \"speed\": 1.21,\n        \"deg\": 197\n    },\n    \"clouds\": {\n        \"all\": 90\n    },\n    \"dt\": 1526794800,\n    \"sys\": {\n        \"type\": 1,\n        \"id\": 1944,\n        \"message\": 0.0032,\n        \"country\": \"US\",\n        \"sunrise\": 1526807853,\n        \"sunset\": 1526861265\n    },\n    \"id\": 5089178,\n    \"name\": \"Manchester\",\n    \"cod\": 200\n}\n```", "```js\nlet { weather, main: { temp, humidity } } = weatherResponse;\n```", "```js\nlet { list } = forecastResponse;\nlet usefulForecast = list.map(weatherPeriod => {\n    let { dt_txt, weather, main: { temp, humidity } } = weatherPeriod;\n    return  { dt_txt, weather, temp, humidity }\n});\n```", "```js\nlet reducedForecast = usefulForecast.filter(weatherPeriod => {\n    let time = weatherPeriod.dt_txt.slice(-8);\n    return time === '09:00:00' || time === '18:00:00';\n});\n```", "```js\nlet dayForecast = reducedForecast.filter(forecast => {\n    return moment(date).isSame(forecast.dt_txt, 'day');\n});\n```", "```js\nlet speechText = `The weather in ${location} has ${weatherString} with a temperature of ${formattedTemp} and a humidity of ${humidity} percent`;\n```", "```js\nconst formatWeatherString = weather => {\n    if (weather.length === 1) return weather[0].description\n    return weather.slice( 0, -1 ).map( item => item.description ).join(', ') + ' and ' + weather.slice(-1)[0].description;\n}\n```", "```js\nconst tempC = temp => Math.floor(temp - 273.15) + ' degrees Celsius ';\n\nconst tempF = temp => Math.floor(9/5 *(temp - 273) + 32) + ' Fahrenheit';\n```", "```js\nlet weatherString = formatWeatherString(weather);\nlet formattedTemp = tempC(temp);\n// let formattedTemp = tempF(temp);\n```", "```js\nlet speechText = ` The weather in ${location} ${date} will have ${weatherString[0]} with a temperature of ${formattedTemp[0]} and a humidity of ${humidity[0]} percent, whilst in the afternoon it will have ${weatherString[1]} with a temperature of ${formattedTemp[1]} and a humidity of ${humidity[1]} percent`\n```", "```js\nlet weatherString = dayForecast.map(forecast => formatWeatherString(forecast.weather));\nlet formattedTemp = dayForecast.map(forecast => tempC(forecast.temp));\nlet humidity = dayForecast.map(forecast => forecast.humidity);\n```", "```js\nreturn handlerInput.responseBuilder\n    .speak(speechText)\n    .getResponse();\n```", "```js\ntry {\n    if (isToday) {\n        ...\n    } else {\n        ...\n    }\n} catch (err) {\n    console.log('err', err);\n    return handlerInput.responseBuilder\n        .speak(`My powers are weak and I couldn't get the weather right now.`)\n        .getResponse();\n}\n```", "```js\nconst to = promise => promise.then(res => [null, res]).catch(err => [err, null]);\n```", "```js\nlet [error, response] = await to(axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${location},us&appid=${process.env.API_KEY}`));\nif (error) {\n console.log('error getting weather', error.response);\n    let errorSpeech = `We couldn't get the weather for ${location} but you can try again later`;\n    return handlerInput.responseBuilder\n        .speak(errorSpeech)\n        .getResponse();\n}\nlet { data: weatherResponse } = response;\n```", "```js\nconst ErrorHandler = {\n    canHandle() {\n        return true;\n    },\n    handle(handlerInput, error) {\n        console.log(`Error handled: ${error.message}`);\n\n        return handlerInput.responseBuilder\n            .speak(`Sorry, I can't understand the command. Please say again.`)\n            .getResponse();\n    },\n};\n```", "```js\nlet sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\n```", "```js\nhandlerInput.attributesManager.setSessionAttributes(sessionAttributes);\n```", "```js\nreturn handlerInput.responseBuilder\n   .speak(speechText)\n   .withShouldEndSession(false)\n   .getResponse();\n```", "```js\nlet sessionAttributes = handlerInput.attributesManager.getSessionAttributes();\nlocation = location.value || sessionAttributes.location || null;\ndate = date.value || sessionAttributes.date || null;\nsessionAttributes = { location, date };\n```", "```js\nlet speechText = `The weather in ${location} has ${weatherString} with a temperature of ${formattedTemp} and a humidity of ${humidity} percent`;\nhandlerInput.attributesManager.setSessionAttributes(sessionAttributes);\nreturn handlerInput.responseBuilder\n```", "```js\nconst JokeHandler = {\n    canHandle(handlerInput) {\n        return handlerInput.requestEnvelope.request.type === 'IntentRequest' &&\n            handlerInput.requestEnvelope.request.intent.name === 'tellAJoke';\n    },\n    async handle(handlerInput) {\n        let random = Math.floor(Math.random() * 3);\n        let joke = jokes[random];\n        return handlerInput.responseBuilder\n            .speak(joke)\n            .getResponse();\n    }\n};\n```", "```js\nlet jokes = [\n    `Where do snowmen keep their money? In a snow bank.`,\n    `As we waited for a bus in the frosty weather, the woman next to me mentioned that she makes a lot of mistakes when texting in the cold. I nodded knowingly. It’s the early signs of typothermia.`,\n    `Don’t knock the weather. If it didn’t change once in a while, nine tenths of the people couldn’t start a conversation.`\n];\n```", "```js\nlet jokes = [\n    `Where do snowmen keep their money? <break time=\"2s\" /> In a snow bank.`,\n    `As we waited for a bus in the frosty weather, the woman next to me mentioned that she makes a lot of mistakes when texting in the cold. I nodded knowingly. <break time=\"1s\" /> It’s the early signs of typothermia.`,\n   `Don’t knock the weather. <break time=\"1s\" /> If it didn’t change once in a while, nine tenths of the people couldn’t start a conversation.`\n];\n```", "```js\n`This sentence uses both <emphasis level=\"strong\">increased</emphasis> and <emphasis level=\"reduced\">decreased</emphasis> emphasis`;\n```", "```js\nlet jokes = [\n    `Where do snowmen keep their money? <break time=\"2s\" /> In a <emphasis> snow bank </emphasis>`,\n    `As we waited for a bus in the frosty weather, the woman next to me mentioned that she makes a lot of mistakes when texting in the cold. I nodded knowingly. <break time=\"1s\" /> It’s the early signs of <emphasis> typothermia </emphasis>`,\n```", "```js\n    `Don’t knock the weather. <break time=\"1s\" /> If it didn’t change once in a while, nine tenths of the people <emphasis> couldn’t start a conversation</emphasis>`\n];\n```"]