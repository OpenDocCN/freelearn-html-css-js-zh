- en: Chapter 4. List and Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters we looked at preparing the data structure and the basic
    Ext JS architecture, and in [Chapter 3](ch03.html "Chapter 3. Data Input"), *Data
    Input*, we looked at inputting data. However, we couldn't implement the writing
    of the data from the `Quotation` form. This was because we couldn't judge whether
    it was a new addition or an editing process due to listing being non-existent.
  prefs: []
  type: TYPE_NORMAL
- en: When you actually construct an application, it is probably most common to build
    the list first and then create the form. However, this time we learned to read
    the form first and then save it. So, just choose whichever way you find easier
    to build with.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is mainly about displaying data that was read in the previous chapter.
    However, users will no doubt want to search for data, so we will also learn about
    data searches.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter you will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Get data from the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply the acquired data to the store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect the store and the grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read data to fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search the list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Quotation list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, let''s straightaway start with preparing the CT to create the `Quotation`
    list. We will create `view_list.htm` and `view_list.js` (source file: `01_creating_quotation_list/ct/quotation/view_list.html`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `view_list.html` file is a reproduction of other `view` files, and so inside
    the internal reading, change the `.js` file in the view that''s being read to
    `view_list.js` (source file: `01_creating_quotation_list/ct/quotation/view_list.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: The `view_list.js` file is also almost similar. It's only a little bit different.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: By now, preparing the CT should have become a straightforward process.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike edit, set the `activeItem` in the list to `0`. If you check how it looks
    in a browser, only the `Quotation` panel will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin to build the inside.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Quotation model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, you want to build a store, but let''s build a model before that (source
    file: `02_creating_quotation_model/app/model/Quotation.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: Let's implement the `Quotation` model class that has a newly acquired `id`,
    `customer`, `modified` and `created`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the `id`, `customer` `name`, `modified date/time`, and `created date/time`
    parameters. Then, we''ll implement the store that was used in the model in the
    previous step (source file: `02_creating_quotation_model/app/store/Quotation.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Specify `MyAppQuotation.getGrid` in `directFn`. This is the method name where
    the store is going to acquire the data. Of course, this is a new construction.
    In other words, add a method to the PHP class and with what you have experienced
    so far, you should easily be able to imagine whether it's necessary to add `config.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, first implement the method even though it is empty (source file: `02_creating_quotation_model/php/classes/MyAppQuotation.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one argument and for this a search condition will be sent from the
    store (source file: `02_creating_quotation_model/php/config.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Updating the Quotation view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''ve prepared everything for the grid to be displayed, so let''s implement
    the view (source file: `03_update_the_quotation_view/app/view/quotation/List.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here you are only specifying columns. In order to abstract the grid panel,
    we are creating the `MyApp.grid.Panel` class. (source file: `03_update_the_quotation_view/app/grid/Panel.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: We will create the `MyApp.grid.Panel` class that is purely inherited from the
    `Ext.grid.Panel` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have just simply succeeded the `Ext.grid.Panel` class. That''s pretty much
    what abstraction is. Now, it should look like the following if you display it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating the Quotation view](img/5446OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It has been a while since we saw an image, so we've displayed a column for now;
    however, let's start to create the necessary objects for this list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next thing to add is the toolbar with buttons. Let''s go ahead and add
    the following buttons (source file: `03_update_the_quotation_view/app/view/quotation/List.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '`Add`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Edit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Delete`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Update`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This can be implemented using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We have installed the buttons, so now describe the event handler that deals
    with this to the controller (source file: `03_update_the_quotation_view/app/controller/quotation/List.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the control for the `MyApp.controller.quotation.List` class, use the following
    selectors and register each handler with the `click` event (at the same time we''ll
    implement each empty handler):'
  prefs: []
  type: TYPE_NORMAL
- en: 'For `selector: ''myapp-quotation-list button[action=add]''` use `handler: onItemAdd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For `selector: ''myapp-quotation-list button[action=edit]''` use `handler:
    onItemEdit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For `selector: ''myapp-quotation-list button[action=remove]''` use `handler:
    onItemRemove`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For `selector: ''myapp-quotation-list button[action=refresh]''` use `handler:
    onStoreRefresh`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to check whether the event responds or not, you can set `disabled`
    to `false`, or reset it and then check the performance. We'll create an implementation
    later so that the status of the disable button changes according to whether the
    list has been selected or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s implement `SearchField` for searches. We''ll place this in the
    top toolbar we created earlier. But before you can do that, you''ll need to implement
    `SearchField`. The `SearchField` is distributed from the beginning as `ux`, but
    this time we''ll use this as a reference to construct anew (source file: `03_update_the_quotation_view/app/form/SearchField.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the paging toolbar. Install it along with `SearchField`. Displaying
    100 to 1,000 items at a time would be optimal. In order to declare the use of
    `SearchField`, set `MyApp.form.SearchField` in `requires` (source file: `03_update_the_quotation_view/app/view/quotation/List.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s slightly customize the grid. Modify the `SelectionModel` and
    then make the selection possible with a checkbox. We''ll install this so it offers
    a user interface that lets you delete items collectively. To do this, you''ll
    use `Ext.selection.CheckboxModel` (source file: `03_update_the_quotation_view/app/view/quotation/List.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way as with `SearchField`, define the reading of `Ext.selection.CheckboxModel`
    in `requires`. Again, regarding the `selModel`, set the `Ext.selection.CheckboxModel`
    instance. If you finish configuring it all, it should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating the Quotation view](img/5446OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Implementing the Quotation controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s starting to look like the real thing! So, now let''s implement the part
    that will actually read and display the data. First, as usual, start with the
    implementation of the CT (source file: `04_implement_quotation_controller/ct/quotation/view_list.html`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reproduce `app_edit.html` and change the `.js` file that is being read to `app_list.js`.
    Again, be careful because we''ll read the `api.php` file together (source file:
    `04_implement_quotation_controller/ct/quotation/view_list.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Be aware that the `direct` setup is also underway.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now prepare the button that mock fires the `myapp-show` event. Of course we
    will also add the `List` controller (source file: `04_implement_quotation_controller/app/controller/quotation/List.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we''ll add the `myapp-show` event to `stores`, `refs`, `myapp-quotationlist`,
    and finally we''ll implement the `onShow` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Add the event handler and then implement the `onShow` event. Acquire the list
    view from the store and call the `load` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to acquire the `list` view and store, make sure that `stores` and
    `refs` are configured. This time, we will also amend the component side, that
    is, the view side (source File: `04_implement_quotation_controller/app/view/quotation/List.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Set up the `store` object in the `initComponent` method. Run the CT and if you
    press the button, the store will use the `DirectFn` method that was set up and
    transmissions will occur. Of course the server-side implementation has not happened,
    so nothing will be displayed in the list.
  prefs: []
  type: TYPE_NORMAL
- en: Loading the grid and implementing toolbar buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Generally speaking, a grid is not a grid if it can''t read data. For the time
    being, let''s just read the data from the database and display it in the grid
    (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/php/classes/MyAppQuotation.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: Here we'll implement the `getGrid` method for `MyAppQuotation.php` that was
    returning empty data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code for this is a little bit long, so please refer to the source file to
    see the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we put any old data in the database it will be displayed. But, because the
    items we want to display have increased slightly, we need to amend the JavaScript
    source code. Add the two files `addr` and `note` to the `Quotation` model (source
    file: `05_loading_the_grid_and_implementing_toolbar_buttons/app/model/Quotation.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s add the two files we added in the previous step to the `columns`
    property in `MyApp.view.quotation.List` (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/app/view/quotation/List.js`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We have added the `addr`, `modified`, and `created` files. The data is random
    but columns are displayed, and the data is read as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading the grid and implementing toolbar buttons](img/5446OS_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next comes the building of registration processes, something we left undone
    in [Chapter 3](ch03.html "Chapter 3. Data Input"), *Data Input*. In order to do
    that, first implement the event handler for the toolbar buttons and then display
    the **Add New** and **Editing** screens (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/app/controller/quotation/List.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Fire the `myapp-add` event in the list view component (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/app/controller/quotation/Quotation.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Then describe the `myapp-add` event handler in the `MyApp.controller.quotation.Quotation`
    class. Here, specify the URL in `location.href` and then move the screen. Not
    in a CT, but if you display the whole application in `index.php`, you should be
    able to check the way the screen changes when you click on the **Add** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading the grid and implementing toolbar buttons](img/5446OS_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking on the **Add** button, you''ll see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading the grid and implementing toolbar buttons](img/5446OS_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's implement the `add new` function. CT is the place to develop it. It will
    happen with `ct/quotation/app_edit.htm`.
  prefs: []
  type: TYPE_NORMAL
- en: First implement the **Save** button. Acquire the **Save** button with the component
    query as `'myapp-quotation-edit button[action=save]'` and set up the `click` event.
    The handler name is `onSave`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create it in a way that when the **Save** button is pressed, the event
    handler is registered in the `MyApp.controller.quotation.Edit` class (source file:
    `05_loading_the_grid_and_implementing_toolbar_buttons/app/controller/quotation/Edit.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We'll also implement the inside of the handler.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Call the `submit` method for the form in `onSave` and transmit the position
    to the server side. Next comes server-side implementation.
  prefs: []
  type: TYPE_NORMAL
- en: The Ext Direct module has already been prepared, and the processing will be
    implemented there. You probably remember the method is called `writeForm`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we''ll implement the `writeForm` method. The code is very long, so again
    please refer to the source file (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/php/classes/MyAppQuotation.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: With this method the received position is being stored in the `Quotation` table.
    We are already storing certain data in quotations, so write the data in a different
    table as well.
  prefs: []
  type: TYPE_NORMAL
- en: In order to guarantee that correct data is written, you need to use `Transaction`,
    so use `begin`, `rollback`, and `commit`. In MySQL, if we use `last_insert_id()`,
    we can acquire the previous ID that we wrote.
  prefs: []
  type: TYPE_NORMAL
- en: Use this and set up the parent for quotations. In CT, even if we perform the
    screen transfer process, it will remain as it is when it loads. It should look
    like the following URL.
  prefs: []
  type: TYPE_NORMAL
- en: '`<hostname>/ct/quotation/app_edit.html#!/quotation/id=XX`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we run it in the application, the URL will change in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<hostname>/#!/quotation/id=XX`'
  prefs: []
  type: TYPE_NORMAL
- en: With that present status, start reading again. The specific data you used has
    disappeared and just one item is being displayed. This is the reason why we stopped
    at creating mock data in [Chapter 3](ch03.html "Chapter 3. Data Input"), *Data
    Input*.
  prefs: []
  type: TYPE_NORMAL
- en: We need to expand the `readForm` method, which is at the root of all of this.
    However, before that, in order to have the ID cross over for the `readForm` argument,
    first amend the `config.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will change the argument in the `readForm` method of the `MyAppQuotation`
    class from `0` to `1` (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/php/config.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have amended the `config.php` file, we will amend the `readForm` method
    so it can actually receive arguments (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/php/classes/MyAppQuotation.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `$id` argument in the `readForm` method to identify the target. Now,
    this time, do the same at the JavaScript side (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/app/view/quotation/Edit.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: With this, the ID can transmit to the server side. Now let's implement the main
    `readForm` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the implementation of the inside of the `readForm` method that we amended
    the arguments to earlier. Because the source code is very long, please refer to
    the source file for the code (source file: `05_loading_the_grid_and_implementing_toolbar_buttons/php/classes/MyAppQuotation.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: After you have read the data from the `Quotation` table with the ID that you
    set up, acquire the data from the `Quotations` table, convert the array into JSON,
    and save it.
  prefs: []
  type: TYPE_NORMAL
- en: Customer names are dependent on the `MyApp.store.Customer` data. If you want
    to match it with the customer table in the database, please customize it to read
    the data via `direct` to the store. Pretty simple!
  prefs: []
  type: TYPE_NORMAL
- en: Managing toolbar buttons depending on the grid selection's status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now reading and writing of the data is complete. There's only the `Add` function
    in the list, so at present we can only add new information. Let's create it so
    we can click on the **Edit** and **Remove** buttons. After this we can implement
    the various functions. This implementation happens in `ct/quotation/app_list.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's control the events when items are selected and deselected in the list.
    Also, we'll implement it so when you double-click on an item, it will perform
    in the same way as when you click on the **Edit** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll add the following event handler to the process occurring in the control
    of the `init` method of the `MyApp.controller.quotation.List` class (source file:
    `06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/List.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following three are event handlers that will listen to specific events:'
  prefs: []
  type: TYPE_NORMAL
- en: '`select`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`itemdblclick`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deselect`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s go ahead and implement the various event handlers that will listen to
    the preceding three events. Next, we''ll implement a handler to the previous step
    (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/List.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Regarding selections, we'll only have the **Edit** button available when one
    item is selected. We'll make **Remove** available even when multiple items are
    selected. Both the **Edit** and **Remove** buttons will be unavailable when no
    items are selected.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: When double-clicked, the `myapp-edit` event will fire, and the selected item
    ID will be added to the argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now all that remains is to implement the process for when the **Edit** and
    **Remove** buttons are pressed. The implementation of the **Edit** button happens
    in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The process is mostly the same as for `onItemDblClick`; however, the `record`
    object is not passed across by the argument, so acquire the `record` object that
    has been selected from `SelectionModel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if you implement the `myapp-edit` event handler, it''s going to start to
    feel like the end. The `myapp-edit` event handler will be implemented by the `MyApp.controller.quotation.Quotation`
    controller (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/Quotation.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Looking at the `requestParams` property, we're trying to decide whether or not
    there is a query. However, this will be configured in the `SearchField`, which
    will be implemented later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change one line of the `onShow` method implementation in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: With this, if you double-click or if you click on the **Edit** button, the URL
    will change. If you check the whole application, when you click on the **Edit**
    button, you can check the particular screen where data is being read.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, implement the **Delete** button (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/List.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In terms of structure, it''s the same as the **Edit** button. It fires the
    `myapp-remove` event. In the same way, `myapp-remove` implements the event handler
    in `MyApp.controller.quotation.Quotation` (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/Quotation.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We are calling the `direct` function called `MyAppQuotation.removeItems`. We
    haven't implemented this method yet. It's for deleting items, so let's do it quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to add a new `removeItems (len:1)` method to the `MyAppQuotation`
    class (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/php/config.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement the method we added previously. The code is very long, so
    please refer to the source files (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/php/classes/MyAppQuotation.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'This method is not for physical deletion but for logic deletion after renewing
    the status of the `UPDATE` text. After you have finished with this process, we
    would call `onStoreRefresh` from the client side; however, it still hasn''t been
    implemented so let''s implement it (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/app/controller/quotation/List.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This is actually only executing the toolbar renewal process, but it won''t
    run without the store being configured on the toolbar. So for a final touch, let''s
    set up the store in the toolbar (source file: `06_management_toolbar_buttons_depend_on_grid_selection_status/app/view/quotation/List.js`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now, it will automatically execute the reload process after the deletion process.
    With this we have implemented the process from start to finish. It was a rather
    complicated and long journey! For `Bill`, please implement it in the same way
    as with `Quotation`, as the process to set it up is mostly the same.
  prefs: []
  type: TYPE_NORMAL
- en: Using a search trigger field and a relation URL hash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, let's implement the `SearchField` in the top-right corner of the screen.
    Actually, it is already implemented on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: When we are calling `getGrid` with the `cond` argument, the search criteria
    is being transmitted. That is to say, we just need to implement on the server
    side. Let's amend this quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'This just shows a section that has been amended. To see the whole section of
    the source code, please refer to the source files (source file: `07_using_search_trigger_field_and_relation_url_hash/php/classes/MyAppQuotation.php`).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'With `$cond`, the following parameters are sent:'
  prefs: []
  type: TYPE_NORMAL
- en: '`query`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`page`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`limit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The character string you inputted in the `SearchField` is being stored in the
    query. Afterwards, you just need to take that character string and add new conditions
    to SQL.
  prefs: []
  type: TYPE_NORMAL
- en: We won't implement it here, but by applying `page`, `start`, and `limit` to
    SQL, the paging process will start.
  prefs: []
  type: TYPE_NORMAL
- en: Again, to set the display order when you click on the column, the sort functionality
    is added and sent. Using that data, if we add ORDER BY, you can adjust the order.
  prefs: []
  type: TYPE_NORMAL
- en: So in order to get closer to the real application, have a go at the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now we created the data structure, the application architecture, and implemented
    data sending and data receiving methods. But currently we can only see the data
    in a grid.
  prefs: []
  type: TYPE_NORMAL
- en: It's not hard to imagine a situation where a manager in a company wants to see
    this data in a chart for a report or a presentation. So in the next chapter we'll
    learn how to design various types of visual charts.
  prefs: []
  type: TYPE_NORMAL
