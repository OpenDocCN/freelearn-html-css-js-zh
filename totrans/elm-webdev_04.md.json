["```js\ncreate-elm-app unit-converter-simple\n```", "```js\nmodule Main exposing (..)\n\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (..)\n\n-- Model\ninit =\n    {}\n\n-- Update\ntype Msg\n    = Nothing\n\nupdate msg model =\n    model\n\n-- View\nview model =\n    div [] [ text \"Everything will go here\" ]\n\n-- Main\nmain =\n    beginnerProgram\n        { model = init\n        , view = view\n        , update = update\n        }\n```", "```js\ninit = \n    { unit1 = \"Kilometers\"\n    , unit2 = \"Miles\"\n    , ratio = 1.608\n    , convertedValue = 0.0\n    }\n```", "```js\nTop-level value 'init' does not have a type annotation.\nI inferred the type annotation so you can copy it into your code:\ninit : { convertedValue : Float, ratio : Float, unit1 : String, unit2 : String }\n```", "```js\ntype alias Model = \n    { convertedValue : Float\n    , ratio : Float\n    , unit1 : String\n    , unit2 : String \n    }\n```", "```js\nmodule Main exposing (..)\n\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (..)\n\n-- MODEL\n\ntype alias Model =\n    { convertedValue : Float\n    , ratio : Float\n    , unit1 : String\n    , unit2 : String \n    }\n\ninit : Model\ninit =\n    { unit1 = \"Kilometers\"\n    , unit2 = \"Miles\"\n    , ratio = 1.608\n    , convertedValue = 0.0\n    }\n```", "```js\nview model =\n    div []\n        [ p []\n            [ label [ for \"unit1Input\" ] [ text \"Kilometers\" ]\n            , br [] []\n            , input [ id \"unit1Input\" ] []\n            , button [ onClick Nothing ] [ text \"Switch to Miles Input\" ]\n            , p [ id \"unit2Value\" ] [ text \"Result of calculation\" ]\n            ]\n        ]\n```", "```js\nview model =\n    div []\n        [ p []\n            [ label [ for \"unit1Input\" ] [ text \"Kilometers\" ]\n            , br [] []\n            , input [ id \"unit1Input\" ] []\n            , button [ onClick Swap] [ text \"Switch to Miles Input\" ]\n            , p [ id \"unit2Value\" ] [ text \"Result of calculation\" ]\n            ]\n        ]\n```", "```js\ntype Msg\n    = Swap \n```", "```js\nupdate msg model =\n    case msg of\n        Swap ->\n            { model | unit1 = model.unit2, unit2 = model.unit1 }\n```", "```js\n{ model | unit1 = model.unit2, unit2 = model.unit1 }\n```", "```js\n{ model | ... }\n```", "```js\nview model =\n    div []\n        [ div []\n            [ label [ for \"unit1Input\" ] [ text model.unit1 ]\n            , input [ id \"unit1Input\" ] []\n            , button [ onClick Swap ] [ text \"Switch\" ]\n            , label [ for \"unit2\" ] [ text model.unit2 ]\n            , div [ id \"unit2Value\" ] [ text \"1234\" ]\n            ]\n        ]\n```", "```js\nview model =\n    div []\n        [ div []\n            [ label [ for \"unit1Input\" ] [ text model.unit1 ]\n            , input [ id \"unit1Input\" ] []\n            , button [ onClick Swap ] [ text \"Switch\" ]\n            , label [ for \"unit2\" ] [ text model.unit2 ]\n            , div [ id \"unit2Value\" ] [ text model.convertedValue ]\n            ]\n        ]\n```", "```js\n...\n            , div [ id \"unit2Value\" ] [ text (toString model.convertedValue) ]\n            ]\n        ]\n```", "```js\nview model =\n    div []\n        [ div []\n            [ label [ for \"unit1Input\" ] [ text model.unit1 ]\n            , input [ id \"unit1Input\", onInput Convert ] []\n            , button [ onClick Swap ] [ text \"Switch\" ]\n            , label [ for \"unit2\" ] [ text model.unit2 ]\n            , div [ id \"unit2Value\" ] [ text (toString model.convertedValue) ]\n            ]\n        ]\n```", "```js\nupdate msg model =\n    case msg of\n        Swap ->\n            { model | unit1 = model.unit2, unit2 = model.unit1, ratio = 1 / model.ratio }\n\n        Convert newValue ->\n            { model | convertedValue = newValue }\n```", "```js\nNAMING ERROR\n Line 28, Column 9\n Cannot find pattern Convert\nNAMING ERROR\n Line 36, Column 48\n Cannot find variable Convert\n```", "```js\ntype Msg \n    = Swap\n    | Convert\n```", "```js\nTOO MANY ARGUMENTS\nLine 29, Column 9\nPattern Main.Convert has too many arguments.\nExpecting 0, but got 1.\n```", "```js\ntype Msg\n    = Swap\n    | Convert String\n```", "```js\ntype alias Model =\n    { convertedValue : Float\n    , ratio : Float\n    , unit1 : String\n    , unit2 : String \n    }\n```", "```js\ntype Msg\n    = Swap\n    | Convert Float\n```", "```js\nTYPE MISMATCH\n Line 37, Column 48\n The argument to function onInput is causing a mismatch. \nFunction onInput is expecting the argument to be:\n\nString -> msg\n But it is:\nFloat -> Main.Msg\n```", "```js\n        Convert newValue ->\n            { model | convertedValue = String.toFloat newValue }\n```", "```js\nTYPE MISMATCH\n Line 47, Column 9\n The argument to function beginnerProgram is causing a mismatch.\nFunction beginnerProgram is expecting the argument to be:\n{ ..., update : Main.Msg -> Main.Model -> Main.Model }\n But it is:\n{ ...\n , update :\n Main.Msg\n -> { convertedValue : Result.Result String Float\n , ratio : Float\n , unit1 : String\n , unit2 : String\n }\n -> { convertedValue : Result.Result String Float\n , ratio : Float\n , unit1 : String\n , unit2 : String\n }\n }\n Hint: Problem at update.convertedValue...\n```", "```js\nmodule Main exposing (..)\n\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (..)\n\n-- Model\n{--\ntype alias Model = \n    { convertedValue : Float\n    , ratio : Float\n    , unit1 : String\n    , unit2 : String \n    }\n\ninit : Model\n--}\n```", "```js\nTYPE MISMATCH\n Line 49, Column 9\n The argument to function beginnerProgram is causing a mismatch.\nFunction beginnerProgram is expecting the argument to be:\n{ ...\n , update :\n Main.Msg\n -> { ..., convertedValue : Float }\n -> { ..., convertedValue : Float }\n }\n But it is:\n{ ...\n , update :\n Main.Msg\n -> { ..., convertedValue : Result.Result String Float }\n -> { ..., convertedValue : Result.Result String Float }\n }\n Hint: Problem at update.convertedValue...\n```", "```js\ntype Result error value\n    = Ok value\n    | Err error\n```", "```js\nResult.withDefault 0 (String.toInt \"123\") == 123\n```", "```js\nTrue : Bool\n```", "```js\nResult.withDefault 0 (String.toInt \"abc\") == 0\n```", "```js\nTrue : Bool\n```", "```js\nupdate msg model =\n    case msg of\n        Swap ->\n            { model | unit1 = model.unit2, unit2 = model.unit1 }\n\n        Convert newValue ->\n            { model | convertedValue = Result.withDefault 10 (String.toFloat newValue) }\n```", "```js\nResult.withDefault 10 (String.toFloat newValue)\n```", "```js\nmodule Main exposing (..)\n\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (..)\n\n-- Model\ntype alias Model = \n    { convertedValue : Float\n    , ratio : Float\n    , unit1 : String\n    , unit2 : String \n    }\n\ninit : Model\n\ninit = \n    { unit1 = \"Kilometers\"\n    , unit2 = \"Miles\"\n    , ratio = 1.608\n    , convertedValue = 0.0\n    }\n\n-- Update\ntype Msg\n    = Swap\n    | Convert String\n\nupdate msg model =\n    case msg of\n        Swap ->\n            { model | unit1 = model.unit2, unit2 = model.unit1 }\n\n        Convert newValue ->\n            { model | convertedValue = Result.withDefault 10 (String.toFloat newValue) }\n\n-- View\nview model =\n    div []\n        [ div []\n            [ label [ for \"unit1Input\" ] [ text model.unit1 ]\n            , input [ id \"unit1Input\", onInput Convert ] []\n            , button [ onClick Swap ] [ text \"Switch\" ]\n            , label [ for \"unit2\" ] [ text model.unit2 ]\n            , div [ id \"unit2Value\" ] [ text (toString model.convertedValue) ]\n            ]\n        ]\n\n-- Main\nmain =\n    beginnerProgram\n        { model = init\n        , view = view\n        , update = update\n        }\n```", "```js\n        Convert newValue ->\n            { model | convertedValue = (Result.withDefault 10 (String.toFloat newValue)) * model.ratio }\n```", "```js\n        Convert newValue ->\n            { model | convertedValue = (Result.withDefault 0 (String.toFloat newValue)) * model.ratio }\n```", "```js\n        Convert newValue ->\n            { model | convertedValue = (Result.withDefault 0 (String.toFloat newValue)) * model.ratio }\n```", "```js\n(Result.withDefault 0 (String.toFloat newValue))\n```", "```js\nfloatValue =\n   Result.withDefault 0 (String.toFloat newValue)\n```", "```js\nConvert newValue ->\n    let\n        floatValue =\n            Result.withDefault 0 (String.toFloat newValue)\n    in\n        { model | convertedValue = floatValue * model.ratio }\n```", "```js\nmodule Main exposing (..)\n\nimport Html exposing (beginnerProgram, div, button, input, text, label, span)\nimport Html.Attributes exposing (for, id, value)\nimport Html.Events exposing (onClick, onInput)\n\ntype alias Model =\n    { unit1 : String\n    , unit2 : String\n    , ratio : Float\n    , convertedValue : Float\n    }\n\ninitModel : Model\ninitModel =\n    { unit1 = \"Kilometers\"\n    , unit2 = \"Miles\"\n    , ratio = 1.608\n    , convertedValue = 0.0\n    }\n\nmain =\n    beginnerProgram { model = initModel, view = view, update = update }\n\nview model =\n    div []\n        [ div []\n            [ label [ for \"unit1Input\" ] [ text model.unit1 ]\n            , input [ id \"unit1Input\", onInput Convert ] []\n            , button [ onClick Swap ] [ text \"Switch\" ]\n            , label [ for \"unit2\" ] [ text model.unit2 ]\n            , div [ id \"unit2Value\" ] [ text (toString model.convertedValue) ]\n            ]\n        ]\n\ntype Msg\n    = Swap\n    | Convert String\n\nupdate msg model =\n    case msg of\n        Swap ->\n            { model | unit1 = model.unit2, unit2 = model.unit1, ratio = 1 / model.ratio }\n\n        Convert newValue ->\n            let\n                floatValue =\n                    Result.withDefault 0 (String.toFloat newValue)\n            in\n                { model | convertedValue = floatValue * model.ratio }\n```", "```js\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css\" integrity=\"sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ\" crossorigin=\"anonymous\">\n```", "```js\n  <div class=\"col-lg-offset-3 col-lg-6\">\n    <div class=\"input-group\">\n      <span class=\"input-group-btn\">\n        <button class=\"btn btn-secondary\" type=\"button\">Hate it</button>\n      </span>\n      <input type=\"text\" class=\"form-control\" placeholder=\"Product name\">\n      <span class=\"input-group-btn\">\n        <button class=\"btn btn-secondary\" type=\"button\">Love it</button>\n      </span>\n    </div>\n  </div>\n```", "```js\ndiv [ class \"col-lg-offset-3 col-lg-6\" ]\n    [ div [ class \"input-group\" ]\n        [ span [ class \"input-group-btn\" ]\n            [ button [ class \"btn btn-secondary\", type_ \"button\" ]\n                [ text \"Hate it\" ]\n            ]\n        , input [ class \"form-control\", placeholder \"Product name\", type_ \"text\" ]\n            []\n        , span [ class \"input-group-btn\" ]\n            [ button [ class \"btn btn-secondary\", type_ \"button\" ]\n                [ text \"Love it\" ]\n            ]\n        ]\n    ]\n```", "```js\nview model =\n div []\n [ div [ class \"col-lg-offset-3 col-lg-6 mt5 pt5\" ]\n [ h1 []\n        [ text \"Unit Converter App\" ]\n , div [ class \"input-group\" ]\n [ span [ class \"input-group-btn\" ]\n [ button [ class \"btn btn-secondary\", type_ \"button\" ]\n [ text model.unit1 ]\n ]\n , input [ onInput Convert, class \"form-control\", placeholder \"Type a number to convert\", type_ \"text\" ] []\n , span [ class \"input-group-btn\" ]\n [ button [ onClick Swap, class \"btn btn-primary\", type_ \"button\" ] [ text \"Switch\" ]\n ]\n ]\n , div [ class \"mt5 pt5\" ] [ text model.unit2 ]\n , div [ id \"unit2Value\" ] [ text (toString model.convertedValue) ] \n ]\n ]\n```", "```js\nmodule Main exposing (..)\n\nimport Html exposing (beginnerProgram, div, button, input, text, label, span, h1)\nimport Html.Attributes exposing (for, id, value, class, placeholder, type_)\nimport Html.Events exposing (onClick, onInput)\n\ntype alias Model =\n    { unit1 : String\n    , unit2 : String\n    , ratio : Float\n    , convertedValue : Float\n    }\n\ninitModel : Model\ninitModel =\n    { unit1 = \"Kilometers\"\n    , unit2 = \"Miles\"\n    , ratio = 1.608\n    , convertedValue = 0.0\n    }\n\nmain =\n    beginnerProgram { model = initModel, view = view, update = update }\n\nview model =\n div []\n [ div [ class \"col-lg-offset-3 col-lg-6 mt5 pt5\" ]\n [ h1 []\n        [ text \"Unit Converter App\" ]\n , div [ class \"input-group\" ]\n [ span [ class \"input-group-btn\" ]\n [ button [ class \"btn btn-secondary\", type_ \"button\" ]\n [ text model.unit1 ]\n ]\n , input [ onInput Convert, class \"form-control\", placeholder \"Type a number to convert\", type_ \"text\" ] []\n , span [ class \"input-group-btn\" ]\n [ button [ onClick Swap, class \"btn btn-primary\", type_ \"button\" ] [ text \"Switch\" ]\n ]\n ]\n , div [ class \"mt5 pt5\" ] [ text model.unit2 ]\n , div [ id \"unit2Value\" ] [ text (toString model.convertedValue) ] \n ]\n ]\n\ntype Msg\n    = Swap\n    | Convert String\n\nupdate msg model =\n    case msg of\n        Swap ->\n            { model | unit1 = model.unit2, unit2 = model.unit1, ratio = 1 / model.ratio }\n\n        Convert newValue ->\n            let\n                floatValue =\n                    Result.withDefault 0 (String.toFloat newValue)\n            in\n                { model | convertedValue = floatValue * model.ratio }\n```", "```js\nmodule Main exposing (main)\n\nimport Html exposing (Html, text)\n\nourList = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n\nfizzBuzzCheck fizz buzz fizzBuzz num =\n    if num % 15 == 0 then\n        toString fizzBuzz\n    else if num % 5 == 0 then\n        toString buzz\n    else\n        toString num\n\nmain =\n    List.map (fizzBuzzCheck \"fizz\" \"buzz\" \"fizz buzz\") ourList\n    |> String.concat\n    |> text\n```", "```js\nmodule Main exposing (..)\n\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (..)\n\n-- Model\ninitModel =\n    {}\n\n-- Update\ntype Msg\n    = Nothing\n\nupdate msg model =\n    model\n\n-- View\nview model =\n    div [] [ text \"Everything will go here\" ]\n\n-- Main\nmain =\n    beginnerProgram\n        { model = initModel\n        , view = view\n        , update = update\n        }\n```", "```js\ninitModel =\n    { inputValue = \"\"\n    , outputValue = 0.0\n    }\n```", "```js\ntype alias Model =\n    { inputValue : String\n    , outputValue : Float\n    }\n\ninitModel : Model\ninitModel =\n    { inputValue = \"\"\n    , outputValue = 0.0\n    }\n```", "```js\n-- View\nview model =\n    div []\n        [ div [ class \"col-lg-6\" ]\n            [ div [ class \"input-group\" ]\n                [ input \n                    [ onInput DisplayInput, class \"form-control\", placeholder \"Enter sth\", type_ \"text\" ]\n                    []\n                , span [ class \"input-group-btn\" ]\n                    [ button [ class \"btn btn-secondary\", type_ \"button\" ]\n                        [ text \"FizzBuzz It!\" ]\n                    ]\n                ]\n            , div [ class \"display-4\" ] [ text (toString model.outputValue) ]\n            ]\n        ]\n```", "```js\n[ input [ onInput DisplayInput, class \"form-control\", placeholder \"Enter a number\", type_ \"text\" ]\n```", "```js\nupdate msg model =\n    case msg of\n        DisplayInput newValue->\n           { model | outputValue = Result.withDefault 0 (String.toFloat newValue) }\n```", "```js\ntype Msg\n    = DisplayInput String\n```", "```js\nupdate msg model =\n    case msg of\n        DisplayInput newValue ->\n            let\n              condition = \n                  if (Result.withDefault 1 (String.toInt newValue) % 15) == 0 then\n                      \"fizzBuzz\"\n                  else if (Result.withDefault 1 (String.toInt newValue) % 5) == 0 then\n                      \"buzz\"\n                  else if (Result.withDefault 1 (String.toInt newValue) % 3) == 0 then\n                      \"fizz\"\n                  else\n                      newValue\n            in\n              { model | outputValue = condition }\n```", "```js\nupdate msg model =\n    case msg of\n        DisplayInput newValue ->\n            let\n              condition = \n                  if (Result.withDefault 1 (String.toInt newValue) % 15) == 0 then\n                      \"fizzBuzz\"\n                  else if (Result.withDefault 1 (String.toInt newValue) % 5) == 0 then\n                      \"buzz\"\n                  else if (Result.withDefault 1 (String.toInt newValue) % 3) == 0 then\n                      \"fizz\"\n                  else if (Result.withDefault 0 (String.toInt newValue)) /= 0 then\n                      newValue\n                  else\n                      \"Type a number, please!\"\n            in\n              { model | outputValue = condition }\n```", "```js\nmodule Main exposing (..)\n\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (..)\n\ntype alias Model =\n    { inputValue : String\n    , outputValue : String\n    }\n\ninitModel : Model\ninitModel =\n    { inputValue = \"\"\n    , outputValue = \"\"\n    }\n\n-- Update\ntype Msg\n    = DisplayInput String\n\nupdate msg model =\n    case msg of\n        DisplayInput newValue ->\n            let\n              condition = \n                  if (Result.withDefault 1 (String.toInt newValue) % 15) == 0 then\n                      \"fizzBuzz\"\n                  else if (Result.withDefault 1 (String.toInt newValue) % 5) == 0 then\n                      \"buzz\"\n                  else if (Result.withDefault 1 (String.toInt newValue) % 3) == 0 then\n                      \"fizz\"\n                  else if (Result.withDefault 0 (String.toInt newValue)) /= 0 then\n                      newValue\n                  else\n                      \"Type a number, please!\"\n            in\n              { model | outputValue = condition }\n-- View\nview model =\n    div []\n        [ div [ class \"col-lg-6\" ]\n            [ div [ class \"pt-5 pb-5 display-4\" ] [text \"Fizz Buzz App, v4\" ]\n            , div [ class \"input-group\" ]\n                [ input \n                    [ onInput DisplayInput, class \"form-control\", placeholder \"Enter sth\", type_ \"text\" ]\n                    []\n                , span [ class \"input-group-btn\" ]\n                    [ button [ class \"btn btn-secondary\", type_ \"button\" ]\n                        [ text \"FizzBuzz It!\" ]\n                    ]\n                ]\n            , div [ class \"display-4\" ] [ text (toString model.outputValue) ]\n            ]\n        ]\n\n-- Main\nmain =\n    beginnerProgram\n        { model = initModel\n        , view = view\n        , update = update\n        }\n```"]