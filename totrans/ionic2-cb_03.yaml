- en: Chapter 3. Extending Ionic 2 with Angular 2 Building Blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following tasks related to creating custom
    components, directives, and filters with Angular 2:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom pizza ordering component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom username input directive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom pipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a shared service to provide data to multiple pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of Ionic's out-of-the-box features are actually prebuilt components. In
    this section, you will learn how to create your own custom component using the
    `html` template, which contains Ionic components as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Components actually define Angular 2\. A component is no more than just a class
    with self-describing features. For example, `<ul>` is a component that you are
    already familiar with. Previously, you used various Ionic components, such as
    `<ion-list>` and `<ion-item>`. A component is a decorator (that is, `@Component`)
    to add metadata to a class to describe the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**selector**: This is the name that is to be used in the DOM (for example,
    `<my-component>`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**template or templateUrl**: This refers to the way the component is rendered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**directives**: This refers to a list of directive dependencies you plan to
    use inside the component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**providers**: This is a list of providers (that is, services) you plan to
    use inside the component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, there are many other options, but the preceding four options are
    the most common ones.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom pizza ordering component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will build an app to demonstrate a custom component with
    its private variables and template. Observe the following screenshot of the pizza
    ordering component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a custom pizza ordering component](img/image00240.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The user will not notice which area is a part of the page as opposed to a self-contained
    component. Your custom component here is the only area where the list is *listening*
    to the **Vegetarian** checkbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a custom pizza ordering component](img/image00241.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This app example could work either in a browser or in a physical device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `MyComponent` app using the `blank` template as shown, and go
    into the `MyComponent` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `./app/pages/home/home.html` file and replace the content with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is your root page containing `<my-component>`, which will be defined later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `./app/pages/home/home.ts` for editing globally with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You simply have to declare `MyComponent` as a dependency. A component is basically
    just a directive with a template, assuming you are familiar with the directive
    concept of Angular 1.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s create the component by first creating a directive, as illustrated
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `foo.ts` file in the `components` directory that you just created,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `foo.html` in the `./src/components` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `./src/app/app.module.ts`, as illustrated, so that you can declare `MyComponent`.
    Observe the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to your terminal and run the app using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may wonder why it''s necessary to create a component just to toggle a list
    (of pizza topping options). The answer is that this is just a demonstration of
    how you can compartmentalize your app using a component. The key things that you
    have done are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You created a custom component, called `<my-component>`, which can be used anywhere,
    including outside your app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data within your component is completely private. This means that nobody
    else can access it without calling a method within your component's class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can add or change behaviors within your component without impacting other
    areas outside the component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create a component, you need to ensure that you import the `decorator`,
    as shown, from Angular 2 itself (and not from Ionic 2):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In your component template, everything is local to what is inside the component
    class. So, you can bind the click event using `click`, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Just like Angular 1, you need to use `[(ngModel)]` to declare that you want
    `data.myToggle` to be your model. The `[(..)]` part is to tell Angular 2 that
    this is a two-way binding.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two lists of pizza toppings. The first one is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The second list of pizza toppings is as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: To toggle the visibility of each list based on the `data.myToggle` model, you
    can use `*ngIf`, which is very similar to `ng-if` from Angular 1.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about components in the Angular 2 documentation, you can
    visit [https://angular.io/docs/ts/latest/guide/architecture.html](https://angular.io/docs/ts/latest/guide/architecture.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom username input directive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since you have gone through the process of creating a component in the preceding
    section, you may wonder what the difference is between a component and a directive.
    If you have some experience with Angular 1, you may notice that it had no definition
    of a component. Starting in Angular 2, there are the following three kinds of
    directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Kind | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Components | They have a template and a class associated with the component
    (that is, `ion-input`) |'
  prefs: []
  type: TYPE_TB
- en: '| Structural directives | They change the DOM structure within the scope of
    where it is (that is, `*ngIf` or `*ngFor`) |'
  prefs: []
  type: TYPE_TB
- en: '| Attribute directives | They change the appearance of the current DOM by intercepting
    its display or events |'
  prefs: []
  type: TYPE_TB
- en: 'You may have a mix of both structural and attribute characteristics in the
    same directive. In this section, you will learn how to create an attribute directive
    that can prevent certain characters from being input in the **Username** as well
    as showing another DOM node (where it says **You are typing username**) by toggling
    its visibility. Observe the following screenshot of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a custom username input directive](img/image00242.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The **GO** button is there just for cosmetic purposes, and you will not need
    to write any code for it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This app example could work either in a browser or on a physical device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Observe the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `MyIonicInputDirective` app using the `blank` template, as shown,
    and go into the `MyIonicInputDirective` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `./src/app/pages/home/home.html` file and replace the content with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As mentioned earlier, the **GO** button is just an example of the new floating
    button feature from Ionic 2\. All you need to do is include `bottom` and `center`
    in order to position it. These are actually good examples of attribute directives.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `home.ts`, in the same folder as in the preceding step, to edit and insert
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `./src/directives` folder, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `my-ionic-input.ts` file in the `directives` folder and copy the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open and edit `./src/app/app.module.ts` to declare your new directive, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to your terminal and run the app, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The home page template (`home.html`) is very typical with `ion-list` and `ion-item`,
    which contain your input elements. However, there are two important things to
    take note of. First, there is an attribute, called `myIonicInput`, in the `ion-input`
    component. Observe the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Second, the `myStyles` object is now used to toggle the visibility of the `<p>`
    element, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This `myStyles` object is actually a `private` variable in your `HomePage`
    class in the `home.ts` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: With TypeScript, you could assign a type (that is, object) to a variable with
    a default value. You may also note that `MyIonicInputDirective` should be declared
    for a dependency to be injected into the template directives.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a basic directive, you must import at least `Directive` and `ElementRef`
    in order to manipulate the DOM. However, since this `Directive` has input (that
    is, `myStyles`), you should also import `Input` in your `my-ionic-input.ts`, as
    illustrated in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You have `selector` and `host` metadata in your directive, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `myIonicInput` selector will be queried from the DOM and will trigger *actions*
    on that DOM node. For event detection on the DOM, you have to map the event name
    to the class method. For example, the `mouseenter` event will trigger a call to
    the `onMouseEnter()` method in the directive's class, which is `MyIonicInputDirective`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look more closely in the directive''s class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `@Input` decorator is used to declare that you will bring in a variable
    from the template. This is the reason why you must have the square brackets in
    `[myIonicInput]="myStyles"`. Otherwise, `myStyles` would just be a string instead
    of an expression referring to the `myStyles` object from the `HomePage` class.
    Another interesting thing to note here is the code inside the `constructor`. The
    `ElementRef` is pointing to the same DOM where you placed your attribute directive.
    You want to modify the behavior of the keyboard using `el.nativeElement.onkeypress`
    so that special characters won't be allowed. If the user enters a special character,
    it will trigger `e.preventDefault()` and nothing will happen. The keyboard event
    is basically discarded. You may wonder why we cannot just use the `keypress` event
    and map it to `onKeyPress`, which was intentionally commented out. The reason
    is that you are placing the `myIonicInput` directive on top of `ion-input`. But
    the actual `<input>` DOM is just a child of `ion-input`. Therefore, if you listen
    to the `keypress` event on the parent `ion-input`, you won't be able to bind it.
  prefs: []
  type: TYPE_NORMAL
- en: The `onMouseEnter` and `onMouseLeave` methods are very self explanatory because
    they just toggle the `myStyles.showUsername` variable. Again, this `myStyles`
    object is just a reference back to the `myStyles` of `HomePage`. So, if you change
    the variable here, it will change at the home page's level as well.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about Angular 2 directives, you can refer to the official
    documentation at [https://angular.io/docs/ts/latest/guide/attribute-directives.html](https://angular.io/docs/ts/latest/guide/attribute-directives.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since this is the first section where TypeScript appears, it might be helpful
    to go through the handbook at [http://www.typescriptlang.org/docs/tutorial.html](http://www.typescriptlang.org/docs/tutorial.html),
    for more details
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom pipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pipes are also a feature of Angular 2 and are not specific to Ionic. If you
    are familiar with Angular 1, a *pipe* is exactly the same thing as a *filter*.
    The main reason you might want to use pipes is to display data in a different
    format in the view. You don''t want to change the actual value in the component.
    This makes things very convenient because you don''t have to decide on the specific
    format within the code, while leaving flexibility in the view layer. Here is a
    list of some useful built-in pipes (from [https://angular.io/docs/ts/latest/api/#!?apiFilter=pipe](https://angular.io/docs/ts/latest/api/#!?apiFilter=pipe)):'
  prefs: []
  type: TYPE_NORMAL
- en: AsyncPipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DatePipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NumberPipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SlicePipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DecimalPipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JsonPipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PercentPipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UpperCasePipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LowerCasePipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CurrencyPipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ReplacePipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to create a custom pipe using the `@Pipe`
    decorator. The following is a screenshot of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a custom pipe](img/image00243.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: While the app interface is very simple, this example is to show you how to create
    a pipe to extract object data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no need to test in a physical device because the Angular 2 pipe will
    work just fine in the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Observe the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `CustomPipe` app using the `blank` template, as shown, and go
    to the `CustomPipe` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `./src/pages/home/home.html` file and modify the content with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can quickly see that the template uses the `userExtract` pipe to render
    the correct information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, replace the content of `./src/pages/home/home.ts` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You don't have the `custom-pipe.ts` file yet, so, you need to create it next.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the `./src/utils` folder by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can call this folder anything. However, since, sometimes, pipes are considered
    *utility* functions, let's call it `utils`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the `custom-pipe.ts` file in the `utils` folder and copy the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `UserExtractPipe` to `./src/app/app.module.ts` by replacing with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go to your terminal and run the app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use an Angular 2 pipe in the view to simply convert or transform any
    value to a desired value. There is no limitation on how you want to structure
    the pipe. Angular 2 automatically detects the `|` sign in the template and turns
    the value in front of it to an input. To create a pipe, you must import the decorator
    and provide a name (see `custom-pipe.ts`), as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The input from the template is the following `value` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The value returned by the `transform` method will be the output to the view,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, you are taking a parameter for the pipe to process, as illustrated
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, this is what you had in the `home.html` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Each parameter is placed after a colon (`:`). Then, within your `@Pipe` class,
    you can refer to it using `arg`. The rest of the code is very simple as already
    shown in the preceding section. Observe the following
  prefs: []
  type: TYPE_NORMAL
- en: If it's `firstname`, take the first word after splitting by space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it's `lastname`, take the last word
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it's `age`, subtract the current year from birth year
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, you could have more complicated scenarios with pipes. However, the
    overall recommendation is to keep things simple at the view to ensure rendering
    performance. If you need to do heavy processing, it's best to handle it as a separate
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand more about Angular 2 pipes, you can check out the official documentation
    at [https://angular.io/docs/ts/latest/guide/pipes.html](https://angular.io/docs/ts/latest/guide/pipes.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a shared service to provide data to multiple pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you develop an app that involves a lot of pages and communication to the
    backend, you will need to have a way to communicate across the pages and components.
    For example, you may have a service to request user data from the backend and
    store it in a common local service. Then, you will need to provide a way for the
    user to update their user data and see the update in real time. When the user
    navigates to different pages, the same information will be pulled and rendered
    as well without making multiple trips to the backend. This is a very common scenario
    that requires the use of the `@Injectable` decorator in Angular 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the following screenshot of the app you will build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a shared service to provide data to multiple pages](img/image00244.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The user can fill out the form and see updates above it in real time. Then,
    they can move to the next page (**Go to Page 2**) and see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a shared service to provide data to multiple pages](img/image00245.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This page uses the same service as the preceding page and references the same
    date with the name and age. You will learn the following topics in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a service using `@Injectable`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing a service across multiple pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting changes using getters and setters inside the service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This app example could work either in a browser or on a physical device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Observe the following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `SharedService` app using the `blank` template, as shown, and
    go to the `SharedService` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will need to make several changes in the directory because you have two
    pages and a common service for both. Let''s start by modifying the `./src/app/app.component.ts`
    file so that the `rootPage` is pointing to `Page1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `./src/pages/page1`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create your first template, `page1.html`, in the `page1` folder with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `page1.ts` in the `page1` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The file extension is `.ts`, and not `.js`, because you are going to use some
    TypeScript-specific features, such as getters and setters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Similarly, create the `page2` folder using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `page2.html` template in the `page2` folder as well, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is your second page with the same `name` and `age` information.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create `page2.ts`, in the `page2` folder, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `services` folder with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Put `UserService` in the `user.ts` file in the `services` folder, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open and edit `./src/app/app.module.ts` so that you can inject `UserService`
    as a global provider:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify your folder structure looks like the following screenshot:![How to do
    it...](img/image00246.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to your terminal and run the app as shown with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can move from `page 1` to `page 2` and then back and the data persists across
    the pages.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In general, if you want to use a common service across multiple pages, you
    must inject it at the highest level. In this example, you put `UserService` as
    a dependency at the start of `app.module.ts`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: After that, other pages within the app can start using this common service without
    having to reinject it. The main reason is that, whenever you inject a service
    or class, it will instantiate a new object, which ends up erasing all the existing
    data in memory. If you want to keep the data persistent across the pages, it should
    be in the parent app to avoid reinjection.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the `UserService` in each page, you just need to import it, as illustrated
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The way to "bring in" the service is to put the referencing in the constructor
    (page1.ts), as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This will pass down the `UserService` reference to a local private variable
    of the page (in this case, `this.user`).
  prefs: []
  type: TYPE_NORMAL
- en: From the template standpoint, there is no difference between using `{{ user.name
    }}` and `{{ user.age }}` to inject data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at `UserService`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Actually, there are several things going on here. First, you need to import
    `Injectable` from `@angular/core`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget the parentheses in `@Injectable()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, if you want to use getters and setters, you need to make separate variables,
    called `_name` and `_age`, to store the data. Then, you can use the get/set method
    to do additional processing when other pages access or set the variables in this
    common class. If you change the `name` or `age` from `Page 1`, you can see the
    following logs in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00247.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This feature is very beneficial since you can use this as a replacement for
    `watch` or `observable`. If you recall from Angular 1, you have to use `$scope.$watch`
    for a similar approach.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about Angular 2 services, visit the official documentation
    at [https://angular.io/docs/ts/latest/tutorial/toh-pt4.html](https://angular.io/docs/ts/latest/tutorial/toh-pt4.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can get great instructions on many techniques for component communication
    at [https://angular.io/docs/ts/latest/cookbook/component-communication.html](https://angular.io/docs/ts/latest/cookbook/component-communication.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
