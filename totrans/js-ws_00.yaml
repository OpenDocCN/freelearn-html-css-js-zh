- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: About
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于
- en: This section briefly introduces the coverage of this book, the technical skills
    you'll need to get started, and the hardware and software requirements required
    to complete all of the included activities and exercises.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节简要介绍了本书的涵盖范围，你开始所需的技术技能，以及完成所有包含的活动和练习所需的硬件和软件要求。
- en: About the Book
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于本书
- en: You already know you want to learn JavaScript, and a smarter way to learn JavaScript
    is to learn by doing. *The JavaScript Workshop* focuses on building up your practical
    skills so that you can develop cutting-edge applications for web, mobile, and
    desktop users. Alongside knowledge of HTML and CSS, JavaScript is a key skill
    for those looking to enter professional web development. You'll learn from real
    examples that lead to real results.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经知道你想要学习 JavaScript，而更智能的学习 JavaScript 的方式是通过实践学习。*《JavaScript 工作坊》* 专注于提升你的实践技能，以便你可以为网络、移动和桌面用户开发前沿的应用程序。除了
    HTML 和 CSS 的知识外，JavaScript 是那些希望进入专业网络开发的人的关键技能。你将从真实示例中学习，这些示例可以带来真实的结果。
- en: Throughout *The JavaScript Workshop*, you'll take an engaging step-by-step approach
    to understanding JavaScript code. You won't have to sit through any unnecessary
    theory. If you're short on time, you can jump into a single exercise each day
    or spend an entire weekend learning about functional programming. It's your choice.
    Learning on your terms, you'll build up and reinforce key skills in a way that
    feels rewarding.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *《JavaScript 工作坊》* 中，你将采取引人入胜的逐步方法来理解 JavaScript 代码。你不必忍受任何不必要的理论。如果你时间紧迫，你可以每天跳入一个单独的练习，或者花一个周末来学习函数式编程。由你选择。按照你的方式学习，你将以一种感觉有成就感的方式建立和加强关键技能。
- en: Every physical copy of *The JavaScript Workshop* unlocks access to the interactive
    edition. With videos detailing all exercises and activities, you'll always have
    a guided solution. You can also benchmark yourself against assessments, track
    your progress, and receive content updates. You'll even earn a secure credential
    that you can share and verify online upon completion. It's a premium learning
    experience that's included with your printed copy. To redeem it, follow the instructions
    located at the start of your JavaScript book.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每一份 *《JavaScript 工作坊》* 的物理副本都能解锁访问互动版。视频详细介绍了所有练习和活动，你将始终有一个指导性的解决方案。你还可以通过评估来衡量自己的水平，跟踪你的进度，并接收内容更新。完成学习后，你甚至可以赚取一个可以在线分享和验证的安全凭证。这是与印刷副本一起提供的优质学习体验。要兑换它，请遵循
    JavaScript 书籍开头的说明。
- en: Fast-paced and direct, *The JavaScript Workshop* is the ideal companion for
    JavaScript beginners. You'll build and iterate on your JavaScript coding skills
    like a real software developer, learning along the way. This process means that
    you'll find that your new skills stick, embedded as best practice – a solid foundation
    for the years ahead.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*《JavaScript 工作坊》* 快速直接，是 JavaScript 初学者的理想伴侣。你将像真正的软件开发者一样构建和迭代你的 JavaScript
    编码技能，并在学习过程中不断进步。这个过程意味着你会发现你的新技能会持续存在，作为最佳实践的嵌入 – 为未来的几年打下坚实的基础。'
- en: About the Chapters
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于章节
- en: '*Chapter 1*, *Getting to Know JavaScript*, introduces a foundational background
    of JavaScript in order to move forward and achieve competency. This chapter introduces
    you to JavaScript, through its history through to modern implementations, with
    additional information on various uses of the language to provide a proper context
    for what comes next.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*第一章*，*了解 JavaScript*，介绍了 JavaScript 的基础知识，以便向前迈进并达到熟练水平。本章通过其历史，从现代实现到各种语言用途的附加信息，向你介绍
    JavaScript，为接下来要学习的内容提供适当的背景。'
- en: '*Chapter 2*, *Working with JavaScript*, covers some hands-on work with the
    language. We''ll provide an overview of some popular tools for writing JavaScript
    and the various available runtimes for executing their code. We''ll pay particular
    attention to the primary target for most JavaScript and a great tool in itself,
    the modern web browser.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*第二章*，*使用 JavaScript*，涵盖了与该语言的一些实际操作。我们将概述一些流行的 JavaScript 编写工具和执行其代码的各种可用运行时。我们将特别关注
    JavaScript 的主要目标，以及本身就是一个优秀工具的现代网络浏览器。'
- en: '*Chapter 3*, *Programming Fundamentals*, serves as an introduction to the fundamental
    concepts and structures involved when working in JavaScript and programming in
    general. We''ll cover all the basics, from object types to conditionals and looping
    structures, how to go about writing and invoking functions, and even commenting
    and debugging their code.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*第三章*，*编程基础*，作为在JavaScript中工作以及一般编程时涉及的基本概念和结构的介绍。我们将涵盖所有基础知识，从对象类型到条件语句和循环结构，如何编写和调用函数，甚至注释和调试它们的代码。'
- en: '*Chapter 4*, *JavaScript Libraries and Frameworks*, focuses on plain-old vanilla
    JavaScript, along with various frameworks and libraries that exist today. The
    primary focus of this chapter is to provide an understanding that while extensions
    to the core language can be great, sometimes, core JavaScript is really all you
    need.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*第四章*，*JavaScript库和框架*，专注于纯JavaScript，以及今天存在的各种框架和库。本章的主要重点是提供一种理解，即虽然对核心语言的扩展可能很好，但有时，核心JavaScript就足够了。'
- en: '*Chapter 5,* *Beyond the Fundamentals*, explains that data is represented differently
    in different languages and runtimes. JavaScript is based on the ECMAScript specification
    and has definitive rules for how data is represented. This chapter discusses data
    in JavaScript, how to convert between types, and how types are passed around within
    a script.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*第五章*，*超越基础*，解释了在不同的语言和运行时中数据表示方式的不同。JavaScript基于ECMAScript规范，并具有关于数据表示的明确规则。本章讨论了JavaScript中的数据，如何在不同类型之间进行转换，以及类型如何在脚本中传递。'
- en: '*Chapter 6*, *Understanding Core Concepts*, utilizes an HTML page using JavaScript
    in this book, as well as being the first to explain the abstract nature of the
    event messaging system. Understanding these concepts is very valuable when building
    a useful web application in JavaScript. Throughout this chapter, you will explore
    the various nuances of event message bubbling and capturing, along with how it
    can best be used to control the flow of information within an application. You
    will also see how to halt these events in their tracks and to create your own
    custom events. This chapter will give you a foundational arsenal at your disposal
    to tackle applications of any size or complexity.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*第六章*，*理解核心概念*，利用本书中的HTML页面以及JavaScript，作为第一个解释事件消息系统的抽象性质。在JavaScript中构建有用的Web应用程序时，理解这些概念非常有价值。在本章中，你将探索事件消息冒泡和捕获的各种细微差别，以及如何最好地用于控制应用程序中的信息流。你还将看到如何阻止这些事件，以及如何创建自己的自定义事件。本章将为你提供基础工具库，以应对任何大小或复杂性的应用程序。'
- en: '*Chapter 7*, *Popping the Hood*, clarifies how the thing many people think
    of as ''just JavaScript'' can actually be broken down into separate components:
    the JavaScript engine, consisting of the call stack, memory heap, and the garbage
    collector; and the JavaScript runtime environment, such as a browser, or Node.js,
    which contains the JavaScript engine, and gives the engine access to additional
    functions and interfaces, such as `setTimeout()` or a filesystem interface. We
    will also look at how JavaScript manages memory allocation and deallocation, and
    how even though it is managed automatically, it''s important for developers to
    bear in mind the processes involved, in order to write code that enables the garbage
    collector to work correctly.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*第七章*，*揭开盖子*，阐明了很多人认为的“仅仅是JavaScript”实际上可以被分解成独立的组件：JavaScript引擎，包括调用栈、内存堆和垃圾回收器；以及JavaScript运行时环境，例如浏览器或Node.js，它包含JavaScript引擎，并使引擎能够访问额外的函数和接口，如`setTimeout()`或文件系统接口。我们还将探讨JavaScript如何管理内存分配和释放，尽管它是自动管理的，但对于开发者来说，了解涉及的过程对于编写能够使垃圾回收器正确工作的代码非常重要。'
- en: '*Chapter 8*, *Browser APIs*, introduces a few of the most useful and interesting
    browser APIs that open up wide-ranging functionality that we can make use of in
    our JavaScript application. We''ll see that while these APIs are most commonly
    accessed through JavaScript, they are not a part of the ECMAScript specification
    to which the JavaScript engines are programmed and are not part of JavaScript
    core functionality.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*第八章*，*浏览器API*，介绍了几个最有用和有趣的浏览器API，这些API为我们提供了广泛的功能，我们可以在JavaScript应用程序中使用。我们将看到，虽然这些API通常通过JavaScript访问，但它们不是JavaScript引擎编程的ECMAScript规范的一部分，也不是JavaScript核心功能的一部分。'
- en: '*Chapter 9*, *Working with Node.js*, guides us in unifying the entire web application
    development around a single programming language, as opposed to learning different
    languages and building different projects for server-side and client-side. In
    this chapter, you will go through how the node is working in the background and
    how it is processing requests asynchronously. Furthermore, you will study different
    types of modules and how to use them. You will also do a lot of important exercises
    to gain practical exposure.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*第9章*，*使用Node.js工作*，指导我们围绕单一编程语言统一整个Web应用程序开发，而不是学习不同的语言并为服务器端和客户端构建不同的项目。在本章中，你将了解节点在后台是如何工作的，以及它是如何异步处理请求的。此外，你还将学习不同类型的模块以及如何使用它们。你还将进行许多重要的练习，以获得实际的经验。'
- en: '*Chapter 10*, *Accessing External Resources*, explores the fact that web pages
    are static and of limited use without fresh data. This chapter covers various
    approaches to using Ajax to obtain data, primarily from RESTful services.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*第10章*，*访问外部资源*，探讨了在没有新鲜数据的情况下，网页是静态的且用途有限的这一事实。本章涵盖了使用Ajax获取数据的不同方法，主要是从RESTful服务中获取。'
- en: '*Chapter 11*, *Creating Clean and Maintainable Code*, introduces you to best
    practices for clean and maintainable coding. You will learn that refactored code
    that uses clean coding techniques results in code that is much longer than before.
    But you will see that the code is much cleaner and easier to understand and test
    compared to the original. The value of this programming style really shows itself
    more in complex real-world applications, and it is good practice to work this
    way. Developers and tech leads need to decide what standards and clean coding
    practices make sense for their particular project.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*第11章*，*编写整洁且易于维护的代码*，介绍了编写整洁且易于维护代码的最佳实践。你会了解到使用整洁编码技术的重构代码比之前更长。但你会发现，与原始代码相比，代码更加整洁，更容易理解和测试。这种编程风格的价值在复杂现实世界的应用中体现得更为明显，因此以这种方式工作是一种良好的实践。开发人员和技术负责人需要决定哪些标准和整洁编码实践适合他们特定的项目。'
- en: '*Chapter 12*, *Using Next-Generation JavaScript*, looks at the various tools
    available in the market for advanced development in JavaScript. We will learn
    how to use the latest JavaScript syntax in older browsers and identify the different
    options for the development of JavaScript applications in other languages. We
    will also explore various package managers, such as npm and Yarn, that are compatible
    with JavaScript, along with several different frameworks, such as AngularJS, React,
    and Vue.js. Finally, we will look at some server-side libraries, such as Express,
    Request, and Socket.IO.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*第12章*，*使用下一代JavaScript*，探讨了市场上用于JavaScript高级开发的多种工具。我们将学习如何在旧浏览器中使用最新的JavaScript语法，以及识别在其他语言中开发JavaScript应用程序的不同选项。我们还将探索与JavaScript兼容的各种包管理器，如npm和Yarn，以及几个不同的框架，如AngularJS、React和Vue.js。最后，我们将探讨一些服务器端库，如Express、Request和Socket.IO。'
- en: '*Chapter 13*, *JavaScript Programming Paradigms*, teaches you that JavaScript
    is a multi-paradigm programming language. We can use it to write code in procedural,
    object-oriented, and functional design patterns. During the learning phase of
    any programming language, people usually code in a procedural way where, instead
    of planning, they put most of their focus on the execution and understanding the
    concepts of that particular programming language. But when it comes to practical
    execution in real life, the **object-oriented programming** paradigm, or **OOP,**
    is a scalable option.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*第13章*，*JavaScript编程范式*，教你JavaScript是一种多范式编程语言。我们可以用它以过程式、面向对象和函数式设计模式编写代码。在任何编程语言的学习阶段，人们通常以过程式的方式编码，而不是规划，他们大部分的注意力都放在执行上，并理解该特定编程语言的概念。但是，当涉及到现实生活中的实际执行时，**面向对象编程**范式，或**OOP**，是一个可扩展的选项。'
- en: '*Chapter 14*, *Understanding Functional Programming*, discusses how functional
    programming is quite different from other programming paradigms such as imperative
    and object-oriented approaches, and it takes some getting used to. But, properly
    applied, it is a very powerful way of structuring programs to be more declarative,
    correct, and testable with fewer errors. Even if you don''t use pure functional
    programming in your projects, there are many useful techniques that can be used
    on their own. This is especially true for the `map`, `reduce`, and `filter` array
    methods, which can have many applications. The topics covered in this chapter
    will help you bolster the skills you need to pursue a programming project in the
    functional style.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 15*, *Asynchronous Tasks*, discusses how asynchronous tasks allow
    the execution of the main thread of a program to proceed even while waiting for
    data, an event, or the result of another process, and achieve snappier UIs and
    some forms of multitasking. Recent enhancements to the language, such as promises
    and the `async`/`await` keywords, simplify such development and make it easier
    to write clean and maintainable asynchronous code.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: You can avail the bonus chapters on [https://courses.packtpub.com/](https://courses.packtpub.com/)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '"The `if`, `else if`, and `else` statements give you four structures for selecting
    or skipping blocks of code."'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'Words that you see on the screen, for example, in menus or dialog boxes, also
    appear in the text like this: "Press the *F12* key to launch the debugger or select
    `More Tools` | `Developer Tools` from the menu."'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'New terms and important words are shown like this: "**Timer events** provide
    forced asynchronous functionality within your applications. They allow you to
    invoke a function after a period of time; either once or repeatedly."'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Long code snippets are truncated and the corresponding names of the code files
    on GitHub are placed at the top of the truncated code. The permalinks to the entire
    code are placed below the code snippet. It should appear as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Before You Begin
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each great journey begins with a humble step. Our upcoming adventure with JavaScript
    programming is no exception. Before we can do awesome things using JavaScript,
    we need to be prepared with a productive environment. In this short note, we will
    see how to do that. If you have any issues or questions about installation please
    email us at `workshops@packt.com`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio Code
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to install Visual Studio Code (VSCode):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the latest VSCode from [https://packt.live/2BIlniA](https://packt.live/2BIlniA):![Figure
    0.1: Downloading VSCode'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C14377_0_01.jpg)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 0.1: Downloading VSCode'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the downloaded file, follow the installation steps, and complete the installation
    process.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开下载的文件，按照安装步骤进行，完成安装过程。
- en: Installing the "Open in Default Browser" Extension
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装“在默认浏览器中打开”扩展程序
- en: 'Open your VSCode, click on the `Extensions` icon, and type in `Open In Default
    Browser` in the search bar, as shown in the following screenshot:![Figure 0.2:
    Open in Default Browser extension search'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的VSCode，点击扩展图标，并在搜索栏中输入“在默认浏览器中打开”，如下截图所示：![图 0.2：在默认浏览器扩展程序搜索](img/C14377_0_02.jpg)
- en: '](img/C14377_0_02.jpg)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片 C14377_0_02.jpg](img/C14377_0_02.jpg)'
- en: 'Figure 0.2: Open in Default Browser extension search'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 0.2：在默认浏览器扩展程序搜索](img/C14377_0_02.jpg)'
- en: 'Click on `Install` to complete the installation process, as shown in the following
    screenshot:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“安装”以完成安装过程，如下截图所示：
- en: '![Figure 0.3: Installing the extension'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 0.3：安装扩展程序](img/C14377_0_03.jpg)'
- en: '](img/C14377_0_03.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 C14377_0_03.jpg](img/C14377_0_03.jpg)'
- en: 'Figure 0.3: Installing the extension'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 0.3：安装扩展程序](img/C14377_0_03.jpg)'
- en: Downloading Node.js
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载Node.js
- en: 'Node.js is open source and you can download it from its official website [https://nodejs.org/en/download/](https://nodejs.org/en/download/)
    for all platforms. It supports all three major platforms: Windows, Linux, and
    macOS.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js是开源的，你可以从其官方网站[https://nodejs.org/en/download/](https://nodejs.org/en/download/)下载适用于所有平台。它支持所有三个主要平台：Windows、Linux和macOS。
- en: Windows
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows
- en: Visit their official website and download the latest stable .MSI installer.
    The process is very simple. Just execute the `.MSI` file and follow the instructions
    to install it on the system. There will be some prompts about accepting license
    agreements. You have to accept those and then click on `Finish`. That's it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 访问他们的官方网站并下载最新的稳定版.MSI安装程序。过程非常简单。只需执行`.MSI`文件，并按照说明在系统上安装它。会有一些关于接受许可协议的提示。你必须接受这些协议，然后点击“完成”。就这样了。
- en: Mac
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Mac
- en: You have to download the .pkg file from the official website and execute it.
    Then, follow the instructions. You may have to accept the license agreement. After
    that, follow the prompts to finish the installation process.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须从官方网站下载.pkg文件并执行它。然后，按照说明进行操作。你可能需要接受许可协议。之后，按照提示完成安装过程。
- en: Linux
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Linux
- en: 'In order to install Node.js on Linux, execute the following commands as root
    in the same order they are mentioned:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Linux上安装Node.js，请以root身份按以下顺序执行以下命令：
- en: '`$ cd /tmp`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$ cd /tmp`'
- en: '`$ wget http://nodejs.org/dist/v8.11.2/node-v8.11.2-linux-x64.tar.gz`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$ wget http://nodejs.org/dist/v8.11.2/node-v8.11.2-linux-x64.tar.gz`'
- en: '`$ tar xvfz node-v8.11.2-linux-x64.tar.gz`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$ tar xvfz node-v8.11.2-linux-x64.tar.gz`'
- en: '`$ mkdir -p /usr/local/nodejs`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$ mkdir -p /usr/local/nodejs`'
- en: '`$ mv node-v8.11.2-linux-x64./* /usr/local/nodejs`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$ mv node-v8.11.2-linux-x64./* /usr/local/nodejs`'
- en: Here, you first change the current active directory to the temporary directory
    (`tmp`) of the system. Second, you download the `tar` package of the `node` from
    their official distribution directory. Third, you extract the `tar` package to
    the `tmp` directory. This directory contains all the compiled and executable files.
    Fourth, you create a directory in the system for `Node.js`. In the last command,
    you are moving all the complied and executable files of the package to that directory.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你首先将当前活动目录更改为系统的临时目录（`tmp`）。其次，从官方发行目录下载`node`的`tar`包。第三，将`tar`包提取到`tmp`目录。此目录包含所有编译和可执行文件。第四，在系统中为`Node.js`创建一个目录。在最后一个命令中，你将所有编译和可执行文件移动到该目录。
- en: Verifying the Installation
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证安装
- en: 'After the installation process, you can verify whether it is installed properly
    in the system by executing the following command in the directory of Node.js:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程完成后，你可以在Node.js目录中执行以下命令来验证是否正确安装：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It will output the current installed version of Node.js and npm:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 它将输出当前安装的Node.js和npm版本：
- en: '![Figure 0.3: Installed version of Node.js and npm'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 0.3：已安装的Node.js和npm版本](img/C14377_0_03.jpg)'
- en: '](img/C14377_0_04.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 C14377_0_04.jpg](img/C14377_0_04.jpg)'
- en: 'Figure 0.4: Installed version of Node.js and npm'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 0.4：已安装的Node.js和npm版本](img/C14377_0_04.jpg)'
- en: Here, it is showing that the 8.11.2 version of Node.js is installed on the system,
    as is the 5.6.0 version of npm.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的是系统上安装了Node.js的8.11.2版本，以及npm的5.6.0版本。
- en: Installing the Code Bundle
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装代码包
- en: Download the code and relevant files from GitHub at [https://github.com/PacktWorkshops/The-JavaScript-Workshop](https://github.com/PacktWorkshops/The-JavaScript-Workshop)
    and place them in a new folder called `C:\Code` on your local system. Refer to
    these code files for the complete code bundle.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从GitHub在[https://github.com/PacktWorkshops/The-JavaScript-Workshop](https://github.com/PacktWorkshops/The-JavaScript-Workshop)下载代码和相关文件，并将它们放置在您本地系统上名为`C:\Code`的新文件夹中。请参考这些代码文件以获取完整的代码包。
